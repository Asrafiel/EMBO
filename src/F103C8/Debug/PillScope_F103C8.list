
PillScope_F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a860  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  0800a970  0800a970  0001a970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3a8  0800b3a8  00020364  2**0
                  CONTENTS
  4 .ARM          00000000  0800b3a8  0800b3a8  00020364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b3a8  0800b3a8  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3a8  0800b3a8  0001b3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3ac  0800b3ac  0001b3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800b3b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e90  20000364  0800b714  00020364  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041f4  0800b714  000241f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d1cc  00000000  00000000  0002038d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008219  00000000  00000000  0005d559  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013c6c  00000000  00000000  00065772  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001430  00000000  00000000  000793e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002a50  00000000  00000000  0007a810  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00022551  00000000  00000000  0007d260  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001c68f  00000000  00000000  0009f7b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009efb5  00000000  00000000  000bbe40  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0015adf5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041a0  00000000  00000000  0015ae70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000364 	.word	0x20000364
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a958 	.word	0x0800a958

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000368 	.word	0x20000368
 800014c:	0800a958 	.word	0x0800a958

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <LL_APB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <LL_APB1_GRP1_EnableClock+0x18>)
{
 8001172:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR, Periphs);
 8001174:	69da      	ldr	r2, [r3, #28]
 8001176:	4302      	orrs	r2, r0
 8001178:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	4018      	ands	r0, r3
 800117e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001180:	9b01      	ldr	r3, [sp, #4]
}
 8001182:	b002      	add	sp, #8
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <LL_APB2_GRP1_EnableClock+0x18>)
{
 800118e:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	4302      	orrs	r2, r0
 8001194:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4018      	ands	r0, r3
 800119a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800119c:	9b01      	ldr	r3, [sp, #4]
}
 800119e:	b002      	add	sp, #8
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000

080011a8 <LL_TIM_OC_DisableFast.constprop.7>:
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80011a8:	6983      	ldr	r3, [r0, #24]
 80011aa:	f023 0304 	bic.w	r3, r3, #4
 80011ae:	6183      	str	r3, [r0, #24]

}
 80011b0:	4770      	bx	lr
	...

080011b4 <LL_ADC_SetChannelSamplingTime.constprop.24>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 80011b4:	b570      	push	{r4, r5, r6, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011ba:	fa93 f3a3 	rbit	r3, r3
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80011be:	fab3 f383 	clz	r3, r3
 80011c2:	f000 7400 	and.w	r4, r0, #33554432	; 0x2000000
 80011c6:	4d0f      	ldr	r5, [pc, #60]	; (8001204 <LL_ADC_SetChannelSamplingTime.constprop.24+0x50>)
 80011c8:	40dc      	lsrs	r4, r3
  
  MODIFY_REG(*preg,
 80011ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80011ce:	f000 70f8 	and.w	r0, r0, #32505856	; 0x1f00000
 80011d2:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80011d6:	fa93 f1a3 	rbit	r1, r3
 80011da:	fab1 f181 	clz	r1, r1
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	fab3 f383 	clz	r3, r3
 80011e6:	2607      	movs	r6, #7
 80011e8:	fa20 f101 	lsr.w	r1, r0, r1
 80011ec:	40d8      	lsrs	r0, r3
 80011ee:	2306      	movs	r3, #6
 80011f0:	fa06 f101 	lsl.w	r1, r6, r1
 80011f4:	ea22 0201 	bic.w	r2, r2, r1
 80011f8:	fa03 f000 	lsl.w	r0, r3, r0
 80011fc:	4310      	orrs	r0, r2
 80011fe:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001202:	bd70      	pop	{r4, r5, r6, pc}
 8001204:	4001240c 	.word	0x4001240c

08001208 <NVIC_EncodePriority.constprop.26>:

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001208:	2000      	movs	r0, #0
 800120a:	4770      	bx	lr

0800120c <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <SystemClock_Config+0xa0>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120e:	b510      	push	{r4, lr}
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	f022 0207 	bic.w	r2, r2, #7
 8001216:	f042 0202 	orr.w	r2, r2, #2
 800121a:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	f002 0207 	and.w	r2, r2, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001222:	2a02      	cmp	r2, #2
 8001224:	d1fa      	bne.n	800121c <SystemClock_Config+0x10>
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001226:	4c22      	ldr	r4, [pc, #136]	; (80012b0 <SystemClock_Config+0xa4>)
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122e:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001230:	6823      	ldr	r3, [r4, #0]
  {
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001232:	039a      	lsls	r2, r3, #14
 8001234:	d5fc      	bpl.n	8001230 <SystemClock_Config+0x24>
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800123c:	6023      	str	r3, [r4, #0]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800123e:	6863      	ldr	r3, [r4, #4]
 8001240:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001244:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001248:	6063      	str	r3, [r4, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001250:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001252:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_EnableCSS();
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001254:	019b      	lsls	r3, r3, #6
 8001256:	d5fc      	bpl.n	8001252 <SystemClock_Config+0x46>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001258:	6863      	ldr	r3, [r4, #4]
 800125a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800125e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001260:	6863      	ldr	r3, [r4, #4]
 8001262:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800126c:	6863      	ldr	r3, [r4, #4]
 800126e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001272:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001274:	6863      	ldr	r3, [r4, #4]
 8001276:	f023 0303 	bic.w	r3, r3, #3
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001280:	6863      	ldr	r3, [r4, #4]
 8001282:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001286:	2b08      	cmp	r3, #8
 8001288:	d1fa      	bne.n	8001280 <SystemClock_Config+0x74>
  {

  }
  LL_SetSystemCoreClock(72000000);
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <SystemClock_Config+0xa8>)
 800128c:	f002 fadc 	bl	8003848 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001290:	2000      	movs	r0, #0
 8001292:	f000 fbff 	bl	8001a94 <HAL_InitTick>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8001296:	6863      	ldr	r3, [r4, #4]
 8001298:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800129c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a0:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 80012a2:	6863      	ldr	r3, [r4, #4]
 80012a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012a8:	6063      	str	r3, [r4, #4]
  {
    Error_Handler();
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
}
 80012aa:	bd10      	pop	{r4, pc}
 80012ac:	40022000 	.word	0x40022000
 80012b0:	40021000 	.word	0x40021000
 80012b4:	044aa200 	.word	0x044aa200

080012b8 <main>:
{
 80012b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	2714      	movs	r7, #20
{
 80012be:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 80012c0:	f000 fc0c 	bl	8001adc <HAL_Init>
  SystemClock_Config();
 80012c4:	f7ff ffa2 	bl	800120c <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	463a      	mov	r2, r7
 80012ca:	2100      	movs	r1, #0
 80012cc:	a80e      	add	r0, sp, #56	; 0x38
 80012ce:	f007 fdc3 	bl	8008e58 <memset>

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7ff ff5a 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80012d8:	2020      	movs	r0, #32
 80012da:	f7ff ff57 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80012de:	2004      	movs	r0, #4
 80012e0:	f7ff ff54 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80012e4:	2008      	movs	r0, #8
 80012e6:	f7ff ff51 	bl	800118c <LL_APB2_GRP1_EnableClock>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80012ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ee:	48ce      	ldr	r0, [pc, #824]	; (8001628 <main+0x370>)
  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012f0:	4ace      	ldr	r2, [pc, #824]	; (800162c <main+0x374>)
 80012f2:	6103      	str	r3, [r0, #16]
 80012f4:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012f6:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012fc:	2302      	movs	r3, #2
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001300:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f001 fafa 	bl	80028fc <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 8001308:	4bc9      	ldr	r3, [pc, #804]	; (8001630 <main+0x378>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130a:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8001664 <main+0x3ac>
 800130e:	695a      	ldr	r2, [r3, #20]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	4ec8      	ldr	r6, [pc, #800]	; (8001634 <main+0x37c>)
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001318:	695b      	ldr	r3, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f8df a34c 	ldr.w	sl, [pc, #844]	; 8001668 <main+0x3b0>
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001324:	9b03      	ldr	r3, [sp, #12]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001326:	f8d9 000c 	ldr.w	r0, [r9, #12]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800132a:	f44f 7b80 	mov.w	fp, #256	; 0x100
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800132e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001332:	f7ff ff69 	bl	8001208 <NVIC_EncodePriority.constprop.26>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	f44f 6300 	mov.w	r3, #2048	; 0x800
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	0100      	lsls	r0, r0, #4
 800133c:	b2c0      	uxtb	r0, r0
 800133e:	f886 030b 	strb.w	r0, [r6, #779]	; 0x30b
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001342:	463a      	mov	r2, r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001344:	6033      	str	r3, [r6, #0]
 8001346:	4621      	mov	r1, r4
 8001348:	a809      	add	r0, sp, #36	; 0x24
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800134a:	e9cd 4404 	strd	r4, r4, [sp, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800134e:	9402      	str	r4, [sp, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001350:	f007 fd82 	bl	8008e58 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	463a      	mov	r2, r7
 8001356:	4621      	mov	r1, r4
 8001358:	a80e      	add	r0, sp, #56	; 0x38
 800135a:	f007 fd7d 	bl	8008e58 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800135e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001362:	f7ff ff13 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001366:	2004      	movs	r0, #4
 8001368:	f7ff ff10 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 800136c:	f641 631e 	movw	r3, #7710	; 0x1e1e
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	a90e      	add	r1, sp, #56	; 0x38
 8001372:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001374:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f001 fac0 	bl	80028fc <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800137c:	4bae      	ldr	r3, [pc, #696]	; (8001638 <main+0x380>)
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800137e:	4daf      	ldr	r5, [pc, #700]	; (800163c <main+0x384>)
 8001380:	681a      	ldr	r2, [r3, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001382:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800166c <main+0x3b4>
 8001386:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800138a:	f022 0210 	bic.w	r2, r2, #16
 800138e:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001396:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f042 0220 	orr.w	r2, r2, #32
 800139e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013a6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013ba:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80013c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013c6:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013cc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80013d0:	f7ff ff1a 	bl	8001208 <NVIC_EncodePriority.constprop.26>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	0100      	lsls	r0, r0, #4
 80013da:	b2c0      	uxtb	r0, r0
 80013dc:	f886 0312 	strb.w	r0, [r6, #786]	; 0x312
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80013e0:	a904      	add	r1, sp, #16
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	6033      	str	r3, [r6, #0]
 80013e4:	4628      	mov	r0, r5
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80013e6:	f8cd b014 	str.w	fp, [sp, #20]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80013ea:	9404      	str	r4, [sp, #16]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80013ec:	f001 f9fa 	bl	80027e4 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80013f0:	a916      	add	r1, sp, #88	; 0x58
 80013f2:	f841 4d50 	str.w	r4, [r1, #-80]!
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80013f6:	4628      	mov	r0, r5
 80013f8:	f001 f9d8 	bl	80027ac <LL_ADC_CommonInit>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 80013fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001400:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001404:	4628      	mov	r0, r5
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 8001406:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800140a:	a909      	add	r1, sp, #36	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800140c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001410:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001414:	f001 f9fb 	bl	800280e <LL_ADC_REG_Init>
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDChannelGroup)
{
  MODIFY_REG(ADCx->CR1,
 8001418:	686b      	ldr	r3, [r5, #4]
 800141a:	4a89      	ldr	r2, [pc, #548]	; (8001640 <main+0x388>)
 800141c:	f44f 7b40 	mov.w	fp, #768	; 0x300
 8001420:	401a      	ands	r2, r3
 8001422:	4b88      	ldr	r3, [pc, #544]	; (8001644 <main+0x38c>)
 8001424:	4313      	orrs	r3, r2
 8001426:	606b      	str	r3, [r5, #4]
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDThresholdsHighLow, uint32_t AWDThresholdValue)
{
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->HTR, AWDThresholdsHighLow);
  
  MODIFY_REG(*preg,
 8001428:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->HTR, AWDThresholdsHighLow);
 800142a:	4a87      	ldr	r2, [pc, #540]	; (8001648 <main+0x390>)
  MODIFY_REG(*preg,
 800142c:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001430:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001434:	626b      	str	r3, [r5, #36]	; 0x24
 8001436:	6853      	ldr	r3, [r2, #4]
 8001438:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800143c:	f023 030f 	bic.w	r3, r3, #15
 8001440:	6053      	str	r3, [r2, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR1, LL_ADC_IT_AWD1);
 8001442:	686b      	ldr	r3, [r5, #4]
 8001444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001448:	606b      	str	r3, [r5, #4]
 800144a:	fa9b f1ab 	rbit	r1, fp
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800144e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001452:	fab1 f181 	clz	r1, r1
 8001456:	fa22 f101 	lsr.w	r1, r2, r1
  MODIFY_REG(*preg,
 800145a:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800145e:	9201      	str	r2, [sp, #4]
  MODIFY_REG(*preg,
 8001460:	f020 001f 	bic.w	r0, r0, #31
 8001464:	f040 0011 	orr.w	r0, r0, #17
 8001468:	f848 0021 	str.w	r0, [r8, r1, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 800146c:	4877      	ldr	r0, [pc, #476]	; (800164c <main+0x394>)
 800146e:	f7ff fea1 	bl	80011b4 <LL_ADC_SetChannelSamplingTime.constprop.24>
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8001472:	68a9      	ldr	r1, [r5, #8]
 8001474:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001478:	60a9      	str	r1, [r5, #8]
 800147a:	fa9b f1ab 	rbit	r1, fp
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800147e:	fab1 f181 	clz	r1, r1
 8001482:	9a01      	ldr	r2, [sp, #4]
 8001484:	fa22 f101 	lsr.w	r1, r2, r1
  MODIFY_REG(*preg,
 8001488:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 800148c:	f420 7078 	bic.w	r0, r0, #992	; 0x3e0
 8001490:	f040 0020 	orr.w	r0, r0, #32
 8001494:	f848 0021 	str.w	r0, [r8, r1, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 8001498:	486d      	ldr	r0, [pc, #436]	; (8001650 <main+0x398>)
 800149a:	f7ff fe8b 	bl	80011b4 <LL_ADC_SetChannelSamplingTime.constprop.24>
 800149e:	fa9b fbab 	rbit	fp, fp
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80014a2:	fabb fb8b 	clz	fp, fp
 80014a6:	9a01      	ldr	r2, [sp, #4]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 80014a8:	486a      	ldr	r0, [pc, #424]	; (8001654 <main+0x39c>)
 80014aa:	fa22 fb0b 	lsr.w	fp, r2, fp
  MODIFY_REG(*preg,
 80014ae:	f858 202b 	ldr.w	r2, [r8, fp, lsl #2]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80014b2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80014b6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80014ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014be:	f848 202b 	str.w	r2, [r8, fp, lsl #2]
 80014c2:	f7ff fe77 	bl	80011b4 <LL_ADC_SetChannelSamplingTime.constprop.24>
  MX_USB_DEVICE_Init();
 80014c6:	f002 fed5 	bl	8004274 <MX_USB_DEVICE_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80014ca:	463a      	mov	r2, r7
 80014cc:	4621      	mov	r1, r4
 80014ce:	a804      	add	r0, sp, #16
 80014d0:	f007 fcc2 	bl	8008e58 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80014d4:	4621      	mov	r1, r4
 80014d6:	2220      	movs	r2, #32
 80014d8:	a80e      	add	r0, sp, #56	; 0x38
 80014da:	f007 fcbd 	bl	8008e58 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	463a      	mov	r2, r7
 80014e0:	4621      	mov	r1, r4
 80014e2:	a809      	add	r0, sp, #36	; 0x24
 80014e4:	f007 fcb8 	bl	8008e58 <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f7ff fe41 	bl	8001170 <LL_APB1_GRP1_EnableClock>
  TIM_InitStruct.Autoreload = 1000;
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80014f2:	a904      	add	r1, sp, #16
 80014f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80014f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
  TIM_InitStruct.Prescaler = 0;
 80014fc:	f8ad 4010 	strh.w	r4, [sp, #16]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001500:	9405      	str	r4, [sp, #20]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001502:	f001 fad5 	bl	8002ab0 <LL_TIM_Init>
 8001506:	682b      	ldr	r3, [r5, #0]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001508:	f8df b164 	ldr.w	fp, [pc, #356]	; 8001670 <main+0x3b8>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800150c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001510:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001512:	68ab      	ldr	r3, [r5, #8]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001514:	4628      	mov	r0, r5
 8001516:	ea03 030b 	and.w	r3, r3, fp
 800151a:	60ab      	str	r3, [r5, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800151c:	69ab      	ldr	r3, [r5, #24]
 800151e:	aa0e      	add	r2, sp, #56	; 0x38
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	61ab      	str	r3, [r5, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001526:	2360      	movs	r3, #96	; 0x60
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001528:	2101      	movs	r1, #1
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800152a:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  TIM_OC_InitStruct.CompareValue = 0;
 800152e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001532:	9412      	str	r4, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001534:	f001 faf4 	bl	8002b20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001538:	4628      	mov	r0, r5
 800153a:	f7ff fe35 	bl	80011a8 <LL_TIM_OC_DisableFast.constprop.7>
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800153e:	686b      	ldr	r3, [r5, #4]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001540:	2004      	movs	r0, #4
 8001542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	606b      	str	r3, [r5, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800154c:	68ab      	ldr	r3, [r5, #8]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800154e:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8001674 <main+0x3bc>
 8001552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001556:	60ab      	str	r3, [r5, #8]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001558:	f7ff fe18 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800155c:	2309      	movs	r3, #9
 800155e:	483e      	ldr	r0, [pc, #248]	; (8001658 <main+0x3a0>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001562:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001566:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	4650      	mov	r0, sl
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800156a:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f001 f9c5 	bl	80028fc <LL_GPIO_Init>
  * @note  PARTIAL_1: Partial remap (CH1/ETR/PA15, CH2/PB3, CH3/PA2,  CH4/PA3)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial1_TIM2(void)
{
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1 | AFIO_MAPR_SWJ_CFG));
 8001572:	4a3a      	ldr	r2, [pc, #232]	; (800165c <main+0x3a4>)
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001574:	4621      	mov	r1, r4
 8001576:	6853      	ldr	r3, [r2, #4]
 8001578:	a80e      	add	r0, sp, #56	; 0x38
 800157a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800157e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001582:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158a:	6053      	str	r3, [r2, #4]
 800158c:	221c      	movs	r2, #28
 800158e:	f007 fc63 	bl	8008e58 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	463a      	mov	r2, r7
 8001594:	4621      	mov	r1, r4
 8001596:	a809      	add	r0, sp, #36	; 0x24
 8001598:	f007 fc5e 	bl	8008e58 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800159c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015a0:	f7ff fdf4 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80015a4:	2004      	movs	r0, #4
 80015a6:	f7ff fdf1 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015aa:	2309      	movs	r3, #9
 80015ac:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8001678 <main+0x3c0>
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015b2:	e9cd c309 	strd	ip, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015b6:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	4650      	mov	r0, sl
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015ba:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f001 f99d 	bl	80028fc <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80015c2:	2304      	movs	r3, #4
 80015c4:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800167c <main+0x3c4>
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	a909      	add	r1, sp, #36	; 0x24
 80015ca:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80015cc:	e9cd e309 	strd	lr, r3, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f001 f994 	bl	80028fc <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80015d8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80015dc:	f7ff fe14 	bl	8001208 <NVIC_EncodePriority.constprop.26>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e0:	2320      	movs	r3, #32
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	0100      	lsls	r0, r0, #4
 80015e4:	b2c0      	uxtb	r0, r0
 80015e6:	f886 0325 	strb.w	r0, [r6, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ea:	6073      	str	r3, [r6, #4]
  USART_InitStruct.BaudRate = 115200;
 80015ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80015f0:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80015f4:	230c      	movs	r3, #12
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80015f6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  LL_USART_Init(USART1, &USART_InitStruct);
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <main+0x3a8>)
 80015fc:	a90e      	add	r1, sp, #56	; 0x38
 80015fe:	4618      	mov	r0, r3
 8001600:	9301      	str	r3, [sp, #4]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001602:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001606:	9414      	str	r4, [sp, #80]	; 0x50
  LL_USART_Init(USART1, &USART_InitStruct);
 8001608:	f001 fb52 	bl	8002cb0 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800160c:	9b01      	ldr	r3, [sp, #4]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800160e:	4621      	mov	r1, r4
 8001610:	691a      	ldr	r2, [r3, #16]
 8001612:	a809      	add	r0, sp, #36	; 0x24
 8001614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001620:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	e02c      	b.n	8001680 <main+0x3c8>
 8001626:	bf00      	nop
 8001628:	40011000 	.word	0x40011000
 800162c:	04200020 	.word	0x04200020
 8001630:	40021000 	.word	0x40021000
 8001634:	e000e100 	.word	0xe000e100
 8001638:	40020008 	.word	0x40020008
 800163c:	40012400 	.word	0x40012400
 8001640:	ff3ffde0 	.word	0xff3ffde0
 8001644:	00800201 	.word	0x00800201
 8001648:	40012424 	.word	0x40012424
 800164c:	81500011 	.word	0x81500011
 8001650:	02300001 	.word	0x02300001
 8001654:	02600002 	.word	0x02600002
 8001658:	04800080 	.word	0x04800080
 800165c:	40010000 	.word	0x40010000
 8001660:	40013800 	.word	0x40013800
 8001664:	e000ed00 	.word	0xe000ed00
 8001668:	40010800 	.word	0x40010800
 800166c:	4001242c 	.word	0x4001242c
 8001670:	ffffbff8 	.word	0xffffbff8
 8001674:	40000400 	.word	0x40000400
 8001678:	04020002 	.word	0x04020002
 800167c:	04040004 	.word	0x04040004
 8001680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	463a      	mov	r2, r7
 8001688:	f007 fbe6 	bl	8008e58 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800168c:	4621      	mov	r1, r4
 800168e:	2220      	movs	r2, #32
 8001690:	a80e      	add	r0, sp, #56	; 0x38
 8001692:	f007 fbe1 	bl	8008e58 <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001696:	2002      	movs	r0, #2
 8001698:	f7ff fd6a 	bl	8001170 <LL_APB1_GRP1_EnableClock>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800169c:	4ba9      	ldr	r3, [pc, #676]	; (8001944 <main+0x68c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016a4:	f022 0210 	bic.w	r2, r2, #16
 80016a8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80016b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	f042 0220 	orr.w	r2, r2, #32
 80016b8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016c0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016c8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80016d0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80016d8:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016da:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80016de:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80016e2:	f7ff fd91 	bl	8001208 <NVIC_EncodePriority.constprop.26>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	0100      	lsls	r0, r0, #4
 80016ec:	b2c0      	uxtb	r0, r0
 80016ee:	f886 031d 	strb.w	r0, [r6, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	6033      	str	r3, [r6, #0]
  TIM_InitStruct.Prescaler = 1000;
 80016f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  TIM_InitStruct.Autoreload = 72;
 80016fc:	2348      	movs	r3, #72	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80016fe:	a909      	add	r1, sp, #36	; 0x24
 8001700:	4640      	mov	r0, r8
  TIM_InitStruct.Autoreload = 72;
 8001702:	930b      	str	r3, [sp, #44]	; 0x2c
 8001704:	9301      	str	r3, [sp, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001706:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001708:	940c      	str	r4, [sp, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800170a:	f001 f9d1 	bl	8002ab0 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800170e:	f8d8 2000 	ldr.w	r2, [r8]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001712:	2101      	movs	r1, #1
 8001714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001718:	f8c8 2000 	str.w	r2, [r8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800171c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8001720:	4640      	mov	r0, r8
 8001722:	ea02 020b 	and.w	r2, r2, fp
 8001726:	f8c8 2008 	str.w	r2, [r8, #8]
 800172a:	aa0e      	add	r2, sp, #56	; 0x38
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800172c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitStruct.CompareValue = 0;
 8001730:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001734:	9412      	str	r4, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001736:	f001 f9f3 	bl	8002b20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 800173a:	4640      	mov	r0, r8
 800173c:	f7ff fd34 	bl	80011a8 <LL_TIM_OC_DisableFast.constprop.7>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001740:	f8d8 2004 	ldr.w	r2, [r8, #4]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001744:	4621      	mov	r1, r4
 8001746:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800174a:	f042 0220 	orr.w	r2, r2, #32
 800174e:	f8c8 2004 	str.w	r2, [r8, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001752:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8001756:	a804      	add	r0, sp, #16
 8001758:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800175c:	f8c8 2008 	str.w	r2, [r8, #8]
 8001760:	463a      	mov	r2, r7
 8001762:	f007 fb79 	bl	8008e58 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001766:	4621      	mov	r1, r4
 8001768:	2220      	movs	r2, #32
 800176a:	a80e      	add	r0, sp, #56	; 0x38
 800176c:	f007 fb74 	bl	8008e58 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	463a      	mov	r2, r7
 8001772:	4621      	mov	r1, r4
 8001774:	a809      	add	r0, sp, #36	; 0x24
 8001776:	f007 fb6f 	bl	8008e58 <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800177a:	2004      	movs	r0, #4
 800177c:	f7ff fcf8 	bl	8001170 <LL_APB1_GRP1_EnableClock>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	f8d9 000c 	ldr.w	r0, [r9, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001784:	f244 0840 	movw	r8, #16448	; 0x4040
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001788:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800178c:	f7ff fd3c 	bl	8001208 <NVIC_EncodePriority.constprop.26>
  TIM_InitStruct.Prescaler = 1000;
 8001790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	0100      	lsls	r0, r0, #4
 8001796:	b2c0      	uxtb	r0, r0
 8001798:	f886 031e 	strb.w	r0, [r6, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179c:	6035      	str	r5, [r6, #0]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800179e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
  TIM_InitStruct.Prescaler = 1000;
 80017a2:	f8ad 3010 	strh.w	r3, [sp, #16]
  TIM_InitStruct.Autoreload = 72;
 80017a6:	9b01      	ldr	r3, [sp, #4]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80017a8:	a904      	add	r1, sp, #16
 80017aa:	4628      	mov	r0, r5
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80017ac:	e9cd 3406 	strd	r3, r4, [sp, #24]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80017b0:	9405      	str	r4, [sp, #20]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80017b2:	f001 f97d 	bl	8002ab0 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80017b6:	682b      	ldr	r3, [r5, #0]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80017b8:	aa0e      	add	r2, sp, #56	; 0x38
 80017ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017be:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80017c0:	68ab      	ldr	r3, [r5, #8]
 80017c2:	2101      	movs	r1, #1
 80017c4:	ea03 030b 	and.w	r3, r3, fp
 80017c8:	60ab      	str	r3, [r5, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80017ca:	69ab      	ldr	r3, [r5, #24]
 80017cc:	4628      	mov	r0, r5
 80017ce:	f043 0308 	orr.w	r3, r3, #8
 80017d2:	61ab      	str	r3, [r5, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80017d4:	2360      	movs	r3, #96	; 0x60
  TIM_OC_InitStruct.CompareValue = 0;
 80017d6:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80017da:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80017de:	9412      	str	r4, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80017e0:	f001 f99e 	bl	8002b20 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 80017e4:	4628      	mov	r0, r5
 80017e6:	f7ff fcdf 	bl	80011a8 <LL_TIM_OC_DisableFast.constprop.7>
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 80017ea:	68ab      	ldr	r3, [r5, #8]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80017ec:	2008      	movs	r0, #8
 80017ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 80017f8:	68ab      	ldr	r3, [r5, #8]
 80017fa:	f023 0307 	bic.w	r3, r3, #7
 80017fe:	f043 0306 	orr.w	r3, r3, #6
 8001802:	60ab      	str	r3, [r5, #8]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8001804:	68eb      	ldr	r3, [r5, #12]
 8001806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800180a:	60eb      	str	r3, [r5, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 800180c:	68eb      	ldr	r3, [r5, #12]
 800180e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001812:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001814:	686b      	ldr	r3, [r5, #4]
 8001816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181a:	f043 0320 	orr.w	r3, r3, #32
 800181e:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001820:	68ab      	ldr	r3, [r5, #8]
 8001822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001826:	60ab      	str	r3, [r5, #8]
 8001828:	f7ff fcb0 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800182c:	2309      	movs	r3, #9
 800182e:	e9cd 8309 	strd	r8, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001832:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	a909      	add	r1, sp, #36	; 0x24
 8001836:	4844      	ldr	r0, [pc, #272]	; (8001948 <main+0x690>)
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001838:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f001 f85e 	bl	80028fc <LL_GPIO_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001840:	463a      	mov	r2, r7
 8001842:	4621      	mov	r1, r4
 8001844:	a809      	add	r0, sp, #36	; 0x24
 8001846:	f007 fb07 	bl	8008e58 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	463a      	mov	r2, r7
 800184c:	4621      	mov	r1, r4
 800184e:	a80e      	add	r0, sp, #56	; 0x38
 8001850:	f007 fb02 	bl	8008e58 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001854:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001858:	f7ff fc98 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800185c:	2004      	movs	r0, #4
 800185e:	f7ff fc95 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001862:	2304      	movs	r3, #4
 8001864:	4a39      	ldr	r2, [pc, #228]	; (800194c <main+0x694>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	a90e      	add	r1, sp, #56	; 0x38
 8001868:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800186a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f001 f845 	bl	80028fc <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001872:	4b37      	ldr	r3, [pc, #220]	; (8001950 <main+0x698>)
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001874:	f505 3592 	add.w	r5, r5, #74752	; 0x12400
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800187e:	f022 0210 	bic.w	r2, r2, #16
 8001882:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800188a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800188e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	f042 0220 	orr.w	r2, r2, #32
 8001896:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800189e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018a6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80018ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018b2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80018ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018be:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80018c4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80018c8:	f7ff fc9e 	bl	8001208 <NVIC_EncodePriority.constprop.26>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	0100      	lsls	r0, r0, #4
 80018d2:	b2c0      	uxtb	r0, r0
 80018d4:	f886 0319 	strb.w	r0, [r6, #793]	; 0x319
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d8:	6033      	str	r3, [r6, #0]
  TIM_InitStruct.Autoreload = 65535;
 80018da:	f64f 73ff 	movw	r3, #65535	; 0xffff
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80018de:	a909      	add	r1, sp, #36	; 0x24
 80018e0:	4628      	mov	r0, r5
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80018e2:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  TIM_InitStruct.Prescaler = 0;
 80018e6:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80018ea:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_InitStruct.RepetitionCounter = 0;
 80018ec:	940d      	str	r4, [sp, #52]	; 0x34
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80018ee:	f001 f8df 	bl	8002ab0 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80018f2:	682b      	ldr	r3, [r5, #0]
 80018f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018f8:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80018fa:	68ab      	ldr	r3, [r5, #8]
 80018fc:	ea03 030b 	and.w	r3, r3, fp
 8001900:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001902:	686b      	ldr	r3, [r5, #4]
 8001904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001908:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800190a:	68ab      	ldr	r3, [r5, #8]
 800190c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001910:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001912:	69ab      	ldr	r3, [r5, #24]
 8001914:	f023 0303 	bic.w	r3, r3, #3
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	61ab      	str	r3, [r5, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800191e:	69ab      	ldr	r3, [r5, #24]
 8001920:	f023 030c 	bic.w	r3, r3, #12
 8001924:	61ab      	str	r3, [r5, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001926:	69ab      	ldr	r3, [r5, #24]
 8001928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800192c:	61ab      	str	r3, [r5, #24]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 800192e:	6a2b      	ldr	r3, [r5, #32]
 8001930:	f023 030a 	bic.w	r3, r3, #10
 8001934:	622b      	str	r3, [r5, #32]
  app_main();
 8001936:	f002 fedd 	bl	80046f4 <app_main>
}
 800193a:	4620      	mov	r0, r4
 800193c:	b017      	add	sp, #92	; 0x5c
 800193e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001942:	bf00      	nop
 8001944:	4002006c 	.word	0x4002006c
 8001948:	40010c00 	.word	0x40010c00
 800194c:	04010001 	.word	0x04010001
 8001950:	4002001c 	.word	0x4002001c

08001954 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001954:	4770      	bx	lr
	...

08001958 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_MspInit+0x84>)
{
 800195a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800195c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800195e:	2101      	movs	r1, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	619a      	str	r2, [r3, #24]
 8001966:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001968:	f06f 000b 	mvn.w	r0, #11
  __HAL_RCC_AFIO_CLK_ENABLE();
 800196c:	f002 0201 	and.w	r2, r2, #1
 8001970:	9200      	str	r2, [sp, #0]
 8001972:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800197a:	61da      	str	r2, [r3, #28]
 800197c:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800197e:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001988:	f000 f8d8 	bl	8001b3c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2101      	movs	r1, #1
 8001990:	f06f 000a 	mvn.w	r0, #10
 8001994:	f000 f8d2 	bl	8001b3c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2101      	movs	r1, #1
 800199c:	f06f 0009 	mvn.w	r0, #9
 80019a0:	f000 f8cc 	bl	8001b3c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2101      	movs	r1, #1
 80019a8:	f06f 0004 	mvn.w	r0, #4
 80019ac:	f000 f8c6 	bl	8001b3c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2101      	movs	r1, #1
 80019b4:	f06f 0003 	mvn.w	r0, #3
 80019b8:	f000 f8c0 	bl	8001b3c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	210f      	movs	r1, #15
 80019c0:	f06f 0001 	mvn.w	r0, #1
 80019c4:	f000 f8ba 	bl	8001b3c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019c8:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <HAL_MspInit+0x88>)
 80019ca:	6853      	ldr	r3, [r2, #4]
 80019cc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	b003      	add	sp, #12
 80019d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000

080019e4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019e4:	4770      	bx	lr

080019e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	e7fe      	b.n	80019e8 <MemManage_Handler>

080019ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ea:	e7fe      	b.n	80019ea <BusFault_Handler>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler>

080019ee <SVC_Handler>:
 80019ee:	4770      	bx	lr

080019f0 <DebugMon_Handler>:
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f4:	f000 b884 	b.w	8001b00 <HAL_IncTick>

080019f8 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019f8:	4801      	ldr	r0, [pc, #4]	; (8001a00 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80019fa:	f000 b99d 	b.w	8001d38 <HAL_PCD_IRQHandler>
 80019fe:	bf00      	nop
 8001a00:	20003d08 	.word	0x20003d08

08001a04 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <_sbrk+0x30>)
{
 8001a06:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001a08:	6819      	ldr	r1, [r3, #0]
{
 8001a0a:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001a0c:	b909      	cbnz	r1, 8001a12 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001a0e:	490a      	ldr	r1, [pc, #40]	; (8001a38 <_sbrk+0x34>)
 8001a10:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	4909      	ldr	r1, [pc, #36]	; (8001a3c <_sbrk+0x38>)
 8001a16:	4c0a      	ldr	r4, [pc, #40]	; (8001a40 <_sbrk+0x3c>)
 8001a18:	4402      	add	r2, r0
 8001a1a:	1b09      	subs	r1, r1, r4
 8001a1c:	428a      	cmp	r2, r1
 8001a1e:	d906      	bls.n	8001a2e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001a20:	f007 f9a8 	bl	8008d74 <__errno>
 8001a24:	230c      	movs	r3, #12
 8001a26:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001a2c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001a2e:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001a30:	e7fc      	b.n	8001a2c <_sbrk+0x28>
 8001a32:	bf00      	nop
 8001a34:	20000380 	.word	0x20000380
 8001a38:	200041f8 	.word	0x200041f8
 8001a3c:	20005000 	.word	0x20005000
 8001a40:	00000400 	.word	0x00000400

08001a44 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a44:	4770      	bx	lr
	...

08001a48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a4a:	e003      	b.n	8001a54 <LoopCopyDataInit>

08001a4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a52:	3104      	adds	r1, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a54:	480a      	ldr	r0, [pc, #40]	; (8001a80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a5c:	d3f6      	bcc.n	8001a4c <CopyDataInit>
  ldr r2, =_sbss
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a60:	e002      	b.n	8001a68 <LoopFillZerobss>

08001a62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a64:	f842 3b04 	str.w	r3, [r2], #4

08001a68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a6c:	d3f9      	bcc.n	8001a62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a6e:	f7ff ffe9 	bl	8001a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a72:	f007 f985 	bl	8008d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a76:	f7ff fc1f 	bl	80012b8 <main>
  bx lr
 8001a7a:	4770      	bx	lr
  ldr r3, =_sidata
 8001a7c:	0800b3b0 	.word	0x0800b3b0
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a84:	20000364 	.word	0x20000364
  ldr r2, =_sbss
 8001a88:	20000364 	.word	0x20000364
  ldr r3, = _ebss
 8001a8c:	200041f4 	.word	0x200041f4

08001a90 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <CAN1_RX1_IRQHandler>
	...

08001a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a94:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_InitTick+0x3c>)
{
 8001a98:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a9a:	7818      	ldrb	r0, [r3, #0]
 8001a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa0:	fbb3 f3f0 	udiv	r3, r3, r0
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_InitTick+0x40>)
 8001aa6:	6810      	ldr	r0, [r2, #0]
 8001aa8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001aac:	f000 f888 	bl	8001bc0 <HAL_SYSTICK_Config>
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	b958      	cbnz	r0, 8001acc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab4:	2d0f      	cmp	r5, #15
 8001ab6:	d809      	bhi.n	8001acc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4629      	mov	r1, r5
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 f83c 	bl	8001b3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_InitTick+0x44>)
 8001ac8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001aca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001acc:	2001      	movs	r0, #1
 8001ace:	e7fc      	b.n	8001aca <HAL_InitTick+0x36>
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000008 	.word	0x20000008

08001adc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_Init+0x20>)
{
 8001ade:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aea:	f000 f815 	bl	8001b18 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff ffd0 	bl	8001a94 <HAL_InitTick>
  HAL_MspInit();
 8001af4:	f7ff ff30 	bl	8001958 <HAL_MspInit>
}
 8001af8:	2000      	movs	r0, #0
 8001afa:	bd08      	pop	{r3, pc}
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b00:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <HAL_IncTick+0x10>)
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <HAL_IncTick+0x14>)
 8001b04:	6811      	ldr	r1, [r2, #0]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	440b      	add	r3, r1
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200005b4 	.word	0x200005b4
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b1a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b1e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	0c1b      	lsrs	r3, r3, #16
 8001b2a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001b32:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001b34:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b570      	push	{r4, r5, r6, lr}
 8001b40:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b42:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b46:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4a:	f1c4 0507 	rsb	r5, r4, #7
 8001b4e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b50:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	bf28      	it	cs
 8001b56:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	bf98      	it	ls
 8001b5c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	bf88      	it	hi
 8001b64:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b66:	ea21 0303 	bic.w	r3, r1, r3
 8001b6a:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	fa06 f404 	lsl.w	r4, r6, r4
 8001b70:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001b74:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b76:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7a:	bfa8      	it	ge
 8001b7c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001b80:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	bfb8      	it	lt
 8001b86:	4a06      	ldrlt	r2, [pc, #24]	; (8001ba0 <HAL_NVIC_SetPriority+0x64>)
 8001b88:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	bfab      	itete	ge
 8001b8c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b9a:	bd70      	pop	{r4, r5, r6, pc}
 8001b9c:	e000ed00 	.word	0xe000ed00
 8001ba0:	e000ed14 	.word	0xe000ed14

08001ba4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	db08      	blt.n	8001bba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba8:	2301      	movs	r3, #1
 8001baa:	0942      	lsrs	r2, r0, #5
 8001bac:	f000 001f 	and.w	r0, r0, #31
 8001bb0:	fa03 f000 	lsl.w	r0, r3, r0
 8001bb4:	4b01      	ldr	r3, [pc, #4]	; (8001bbc <HAL_NVIC_EnableIRQ+0x18>)
 8001bb6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	3801      	subs	r0, #1
 8001bc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001bc6:	d20a      	bcs.n	8001bde <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001bde:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e010 	.word	0xe000e010
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bee:	4604      	mov	r4, r0
{
 8001bf0:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001bf2:	b310      	cbz	r0, 8001c3a <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bf4:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8001bf8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bfc:	b91b      	cbnz	r3, 8001c06 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bfe:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c02:	f002 fc45 	bl	8004490 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c06:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c08:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c0a:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8001c0c:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c10:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8001c14:	f001 f8ae 	bl	8002d74 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	4625      	mov	r5, r4
 8001c20:	6033      	str	r3, [r6, #0]
 8001c22:	1d27      	adds	r7, r4, #4
 8001c24:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001c28:	f855 0b10 	ldr.w	r0, [r5], #16
 8001c2c:	f001 f892 	bl	8002d54 <USB_CoreInit>
 8001c30:	4606      	mov	r6, r0
 8001c32:	b120      	cbz	r0, 8001c3e <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c34:	2302      	movs	r3, #2
 8001c36:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8001c3a:	2501      	movs	r5, #1
 8001c3c:	e04b      	b.n	8001cd6 <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c3e:	4601      	mov	r1, r0
 8001c40:	6820      	ldr	r0, [r4, #0]
 8001c42:	f001 f8a1 	bl	8002d88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c46:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c48:	f04f 0e01 	mov.w	lr, #1
 8001c4c:	2628      	movs	r6, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c4e:	4601      	mov	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c50:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8001c54:	b2c2      	uxtb	r2, r0
 8001c56:	4594      	cmp	ip, r2
 8001c58:	f100 0001 	add.w	r0, r0, #1
 8001c5c:	d818      	bhi.n	8001c90 <HAL_PCD_Init+0xa4>
 8001c5e:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c60:	2628      	movs	r6, #40	; 0x28
 8001c62:	4619      	mov	r1, r3
 8001c64:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c66:	4584      	cmp	ip, r0
 8001c68:	f103 0301 	add.w	r3, r3, #1
 8001c6c:	d81d      	bhi.n	8001caa <HAL_PCD_Init+0xbe>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c70:	466e      	mov	r6, sp
 8001c72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c74:	682b      	ldr	r3, [r5, #0]
 8001c76:	6033      	str	r3, [r6, #0]
 8001c78:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001c7c:	6820      	ldr	r0, [r4, #0]
 8001c7e:	f001 f885 	bl	8002d8c <USB_DevInit>
 8001c82:	2301      	movs	r3, #1
 8001c84:	4605      	mov	r5, r0
 8001c86:	b1f8      	cbz	r0, 8001cc8 <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
 8001c8e:	e7d4      	b.n	8001c3a <HAL_PCD_Init+0x4e>
 8001c90:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001c94:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001c98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c9c:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c9e:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ca2:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ca6:	6419      	str	r1, [r3, #64]	; 0x40
 8001ca8:	e7d4      	b.n	8001c54 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8001caa:	fb06 4200 	mla	r2, r6, r0, r4
 8001cae:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001cb2:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cb6:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cba:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cbe:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cc2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 8001cc6:	e7cd      	b.n	8001c64 <HAL_PCD_Init+0x78>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001cc8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ccc:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cd0:	6820      	ldr	r0, [r4, #0]
 8001cd2:	f001 fada 	bl	800328a <USB_DevDisconnect>

  return HAL_OK;
}
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	b007      	add	sp, #28
 8001cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cdc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cdc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8001cde:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8001ce2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d010      	beq.n	8001d0a <HAL_PCD_Start+0x2e>
 8001ce8:	2501      	movs	r5, #1
 8001cea:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cee:	6800      	ldr	r0, [r0, #0]
 8001cf0:	f001 f837 	bl	8002d62 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f002 fcfb 	bl	80046f2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001cfc:	6820      	ldr	r0, [r4, #0]
 8001cfe:	f001 fac2 	bl	8003286 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001d08:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	e7fc      	b.n	8001d08 <HAL_PCD_Start+0x2c>

08001d0e <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001d0e:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8001d12:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001d14:	2a01      	cmp	r2, #1
{
 8001d16:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001d18:	d00b      	beq.n	8001d32 <HAL_PCD_SetAddress+0x24>
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d20:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d24:	6800      	ldr	r0, [r0, #0]
 8001d26:	f001 faa8 	bl	800327a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001d30:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001d32:	2002      	movs	r0, #2
 8001d34:	e7fc      	b.n	8001d30 <HAL_PCD_SetAddress+0x22>
	...

08001d38 <HAL_PCD_IRQHandler>:
{
 8001d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d40:	6800      	ldr	r0, [r0, #0]
 8001d42:	f001 faa4 	bl	800328e <USB_ReadInterrupts>
 8001d46:	0402      	lsls	r2, r0, #16
 8001d48:	d509      	bpl.n	8001d5e <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d4a:	f8df 9828 	ldr.w	r9, [pc, #2088]	; 8002574 <HAL_PCD_IRQHandler+0x83c>
 8001d4e:	f8df 8828 	ldr.w	r8, [pc, #2088]	; 8002578 <HAL_PCD_IRQHandler+0x840>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d52:	6820      	ldr	r0, [r4, #0]
 8001d54:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	f100 80bc 	bmi.w	8001ed6 <HAL_PCD_IRQHandler+0x19e>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d5e:	6820      	ldr	r0, [r4, #0]
 8001d60:	f001 fa95 	bl	800328e <USB_ReadInterrupts>
 8001d64:	0543      	lsls	r3, r0, #21
 8001d66:	d50f      	bpl.n	8001d88 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d68:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001d6a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d6c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001d7c:	f002 fbc3 	bl	8004506 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d80:	2100      	movs	r1, #0
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7ff ffc3 	bl	8001d0e <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d88:	6820      	ldr	r0, [r4, #0]
 8001d8a:	f001 fa80 	bl	800328e <USB_ReadInterrupts>
 8001d8e:	0447      	lsls	r7, r0, #17
 8001d90:	d508      	bpl.n	8001da4 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	0c1b      	lsrs	r3, r3, #16
 8001da0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001da4:	6820      	ldr	r0, [r4, #0]
 8001da6:	f001 fa72 	bl	800328e <USB_ReadInterrupts>
 8001daa:	0486      	lsls	r6, r0, #18
 8001dac:	d508      	bpl.n	8001dc0 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dae:	6822      	ldr	r2, [r4, #0]
 8001db0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001db4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001db8:	041b      	lsls	r3, r3, #16
 8001dba:	0c1b      	lsrs	r3, r3, #16
 8001dbc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001dc0:	6820      	ldr	r0, [r4, #0]
 8001dc2:	f001 fa64 	bl	800328e <USB_ReadInterrupts>
 8001dc6:	04c5      	lsls	r5, r0, #19
 8001dc8:	d51c      	bpl.n	8001e04 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001dca:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001dcc:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001dce:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001dd2:	f023 0304 	bic.w	r3, r3, #4
 8001dd6:	041b      	lsls	r3, r3, #16
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001dde:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001de2:	f023 0308 	bic.w	r3, r3, #8
 8001de6:	041b      	lsls	r3, r3, #16
 8001de8:	0c1b      	lsrs	r3, r3, #16
 8001dea:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001dee:	f002 fbad 	bl	800454c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	0c1b      	lsrs	r3, r3, #16
 8001e00:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e04:	6820      	ldr	r0, [r4, #0]
 8001e06:	f001 fa42 	bl	800328e <USB_ReadInterrupts>
 8001e0a:	0500      	lsls	r0, r0, #20
 8001e0c:	d541      	bpl.n	8001e92 <HAL_PCD_IRQHandler+0x15a>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001e16:	f82d 1012 	strh.w	r1, [sp, r2, lsl #1]
 8001e1a:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8001e1c:	2a08      	cmp	r2, #8
 8001e1e:	d1f8      	bne.n	8001e12 <HAL_PCD_IRQHandler+0xda>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001e20:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001e2c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	0412      	lsls	r2, r2, #16
 8001e36:	0c12      	lsrs	r2, r2, #16
 8001e38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001e3c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001e40:	0551      	lsls	r1, r2, #21
 8001e42:	d5fb      	bpl.n	8001e3c <HAL_PCD_IRQHandler+0x104>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e44:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e4c:	0412      	lsls	r2, r2, #16
 8001e4e:	0c12      	lsrs	r2, r2, #16
 8001e50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001e54:	2200      	movs	r2, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001e56:	f83d 1012 	ldrh.w	r1, [sp, r2, lsl #1]
 8001e5a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8001e5e:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8001e60:	2a08      	cmp	r2, #8
 8001e62:	d1f8      	bne.n	8001e56 <HAL_PCD_IRQHandler+0x11e>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e64:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001e68:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e6a:	f042 0208 	orr.w	r2, r2, #8
 8001e6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e72:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7a:	0412      	lsls	r2, r2, #16
 8001e7c:	0c12      	lsrs	r2, r2, #16
 8001e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e82:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001e86:	f042 0204 	orr.w	r2, r2, #4
 8001e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001e8e:	f002 fb4d 	bl	800452c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e92:	6820      	ldr	r0, [r4, #0]
 8001e94:	f001 f9fb 	bl	800328e <USB_ReadInterrupts>
 8001e98:	0582      	lsls	r2, r0, #22
 8001e9a:	d50b      	bpl.n	8001eb4 <HAL_PCD_IRQHandler+0x17c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e9c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001e9e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ea0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ea8:	041b      	lsls	r3, r3, #16
 8001eaa:	0c1b      	lsrs	r3, r3, #16
 8001eac:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001eb0:	f002 fb25 	bl	80044fe <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001eb4:	6820      	ldr	r0, [r4, #0]
 8001eb6:	f001 f9ea 	bl	800328e <USB_ReadInterrupts>
 8001eba:	05c3      	lsls	r3, r0, #23
 8001ebc:	d508      	bpl.n	8001ed0 <HAL_PCD_IRQHandler+0x198>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec8:	041b      	lsls	r3, r3, #16
 8001eca:	0c1b      	lsrs	r3, r3, #16
 8001ecc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001ed0:	b005      	add	sp, #20
 8001ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8001ed6:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8001eda:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8001edc:	f011 060f 	ands.w	r6, r1, #15
 8001ee0:	f040 80b1 	bne.w	8002046 <HAL_PCD_IRQHandler+0x30e>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ee4:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ee8:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001eea:	d12a      	bne.n	8001f42 <HAL_PCD_IRQHandler+0x20a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eec:	ea09 0303 	and.w	r3, r9, r3
 8001ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef4:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ef6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001efa:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001efe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f02:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001f06:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001f0a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f10:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001f12:	4413      	add	r3, r2
 8001f14:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f16:	4620      	mov	r0, r4
 8001f18:	f002 fae9 	bl	80044ee <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f1c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f43f af16 	beq.w	8001d52 <HAL_PCD_IRQHandler+0x1a>
 8001f26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f28:	2a00      	cmp	r2, #0
 8001f2a:	f47f af12 	bne.w	8001d52 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f2e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001f32:	6821      	ldr	r1, [r4, #0]
 8001f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f38:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f3c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001f40:	e707      	b.n	8001d52 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f42:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f44:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8001f48:	d020      	beq.n	8001f8c <HAL_PCD_IRQHandler+0x254>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f4a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f4e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f52:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f5a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001f5e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f62:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f6a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f6e:	f001 fc4f 	bl	8003810 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f72:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001f74:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f76:	8813      	ldrh	r3, [r2, #0]
 8001f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7c:	051b      	lsls	r3, r3, #20
 8001f7e:	0d1b      	lsrs	r3, r3, #20
 8001f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f84:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001f86:	f002 faa3 	bl	80044d0 <HAL_PCD_SetupStageCallback>
 8001f8a:	e6e2      	b.n	8001d52 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f8c:	041f      	lsls	r7, r3, #16
 8001f8e:	f57f aee0 	bpl.w	8001d52 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f92:	8803      	ldrh	r3, [r0, #0]
 8001f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f98:	051b      	lsls	r3, r3, #20
 8001f9a:	0d1b      	lsrs	r3, r3, #20
 8001f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa0:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fa2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001fa6:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001fae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001fb2:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fba:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fbe:	b18b      	cbz	r3, 8001fe4 <HAL_PCD_IRQHandler+0x2ac>
 8001fc0:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8001fc4:	b171      	cbz	r1, 8001fe4 <HAL_PCD_IRQHandler+0x2ac>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fc6:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001fca:	f001 fc21 	bl	8003810 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001fce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001fd2:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fd6:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8001fd8:	4413      	add	r3, r2
 8001fda:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f002 fa7c 	bl	80044dc <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fe4:	6821      	ldr	r1, [r4, #0]
 8001fe6:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8001fea:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001fee:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	b9bd      	cbnz	r5, 8002026 <HAL_PCD_IRQHandler+0x2ee>
 8001ff6:	5ac2      	ldrh	r2, [r0, r3]
 8001ff8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001ffc:	0412      	lsls	r2, r2, #16
 8001ffe:	0c12      	lsrs	r2, r2, #16
 8002000:	52c2      	strh	r2, [r0, r3]
 8002002:	5ac2      	ldrh	r2, [r0, r3]
 8002004:	ea48 0202 	orr.w	r2, r8, r2
 8002008:	b292      	uxth	r2, r2
 800200a:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800200c:	880b      	ldrh	r3, [r1, #0]
 800200e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002016:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800201a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800201e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002022:	800b      	strh	r3, [r1, #0]
 8002024:	e695      	b.n	8001d52 <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002026:	2d3e      	cmp	r5, #62	; 0x3e
 8002028:	d805      	bhi.n	8002036 <HAL_PCD_IRQHandler+0x2fe>
 800202a:	086a      	lsrs	r2, r5, #1
 800202c:	07ee      	lsls	r6, r5, #31
 800202e:	bf48      	it	mi
 8002030:	3201      	addmi	r2, #1
 8002032:	0292      	lsls	r2, r2, #10
 8002034:	e7e8      	b.n	8002008 <HAL_PCD_IRQHandler+0x2d0>
 8002036:	096a      	lsrs	r2, r5, #5
 8002038:	06ed      	lsls	r5, r5, #27
 800203a:	bf08      	it	eq
 800203c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002040:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8002044:	e7e0      	b.n	8002008 <HAL_PCD_IRQHandler+0x2d0>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002046:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
 800204a:	b2bf      	uxth	r7, r7
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800204c:	0439      	lsls	r1, r7, #16
 800204e:	f140 80f2 	bpl.w	8002236 <HAL_PCD_IRQHandler+0x4fe>
        if (ep->doublebuffer == 0U)
 8002052:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002054:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002058:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800205c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002060:	051b      	lsls	r3, r3, #20
 8002062:	0d1b      	lsrs	r3, r3, #20
 8002064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002068:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800206c:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8002070:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8002074:	b9ab      	cbnz	r3, 80020a2 <HAL_PCD_IRQHandler+0x36a>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002076:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800207a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800207e:	3306      	adds	r3, #6
 8002080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002084:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002088:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800208c:	2d00      	cmp	r5, #0
 800208e:	f000 80b6 	beq.w	80021fe <HAL_PCD_IRQHandler+0x4c6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002092:	462b      	mov	r3, r5
 8002094:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002098:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800209c:	f001 fbb8 	bl	8003810 <USB_ReadPMA>
 80020a0:	e0ad      	b.n	80021fe <HAL_PCD_IRQHandler+0x4c6>
          if (ep->type == EP_TYPE_BULK)
 80020a2:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 80020a6:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	f040 8089 	bne.w	80021c2 <HAL_PCD_IRQHandler+0x48a>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020b0:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 80020b4:	ea4f 05c2 	mov.w	r5, r2, lsl #3
 80020b8:	f8d1 3180 	ldr.w	r3, [r1, #384]	; 0x180
 80020bc:	f007 0e40 	and.w	lr, r7, #64	; 0x40
 80020c0:	d03e      	beq.n	8002140 <HAL_PCD_IRQHandler+0x408>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020c2:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 80020c6:	4455      	add	r5, sl
 80020c8:	3502      	adds	r5, #2
 80020ca:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 80020ce:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 80020d2:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
    }
    else
    {
      ep->xfer_len = 0U;
 80020d4:	bf8c      	ite	hi
 80020d6:	2300      	movhi	r3, #0
      ep->xfer_len -= count;
 80020d8:	1b5b      	subls	r3, r3, r5
      ep->xfer_len = 0U;
 80020da:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
 80020de:	2328      	movs	r3, #40	; 0x28
 80020e0:	fb03 4306 	mla	r3, r3, r6, r4
 80020e4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80020e8:	b96b      	cbnz	r3, 8002106 <HAL_PCD_IRQHandler+0x3ce>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002102:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002106:	f1be 0f00 	cmp.w	lr, #0
 800210a:	d010      	beq.n	800212e <HAL_PCD_IRQHandler+0x3f6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800210c:	2328      	movs	r3, #40	; 0x28
 800210e:	fb03 4306 	mla	r3, r3, r6, r4
 8002112:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8002116:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800211a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211e:	051b      	lsls	r3, r3, #20
 8002120:	0d1b      	lsrs	r3, r3, #20
 8002122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800212a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 800212e:	2d00      	cmp	r5, #0
 8002130:	d065      	beq.n	80021fe <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002132:	2128      	movs	r1, #40	; 0x28
 8002134:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002138:	462b      	mov	r3, r5
 800213a:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800213e:	e7ab      	b.n	8002098 <HAL_PCD_IRQHandler+0x360>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002140:	f8b0 b050 	ldrh.w	fp, [r0, #80]	; 0x50
 8002144:	445d      	add	r5, fp
 8002146:	3506      	adds	r5, #6
 8002148:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 800214c:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002150:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
 8002152:	bf9c      	itt	ls
 8002154:	1b5b      	subls	r3, r3, r5
 8002156:	f8c1 3180 	strls.w	r3, [r1, #384]	; 0x180
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 800215a:	f04f 0328 	mov.w	r3, #40	; 0x28
 800215e:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 8002162:	bf88      	it	hi
 8002164:	f8c1 a180 	strhi.w	sl, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002168:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800216c:	b96b      	cbnz	r3, 800218a <HAL_PCD_IRQHandler+0x452>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800216e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800217e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002186:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800218a:	f1be 0f00 	cmp.w	lr, #0
 800218e:	d110      	bne.n	80021b2 <HAL_PCD_IRQHandler+0x47a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002190:	2328      	movs	r3, #40	; 0x28
 8002192:	fb03 4306 	mla	r3, r3, r6, r4
 8002196:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 800219a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800219e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021a2:	051b      	lsls	r3, r3, #20
 80021a4:	0d1b      	lsrs	r3, r3, #20
 80021a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021ae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80021b2:	b325      	cbz	r5, 80021fe <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021b4:	2128      	movs	r1, #40	; 0x28
 80021b6:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021ba:	462b      	mov	r3, r5
 80021bc:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80021c0:	e76a      	b.n	8002098 <HAL_PCD_IRQHandler+0x360>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021ca:	051b      	lsls	r3, r3, #20
 80021cc:	0d1b      	lsrs	r3, r3, #20
 80021ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021da:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 80021de:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021e8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021ec:	d05e      	beq.n	80022ac <HAL_PCD_IRQHandler+0x574>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021ee:	3202      	adds	r2, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80021f6:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80021fa:	2d00      	cmp	r5, #0
 80021fc:	d19c      	bne.n	8002138 <HAL_PCD_IRQHandler+0x400>
        ep->xfer_count += count;
 80021fe:	2128      	movs	r1, #40	; 0x28
 8002200:	4371      	muls	r1, r6
 8002202:	1863      	adds	r3, r4, r1
 8002204:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002208:	442a      	add	r2, r5
 800220a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800220e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002212:	442a      	add	r2, r5
 8002214:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002218:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800221c:	b11a      	cbz	r2, 8002226 <HAL_PCD_IRQHandler+0x4ee>
 800221e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002222:	429d      	cmp	r5, r3
 8002224:	d24b      	bcs.n	80022be <HAL_PCD_IRQHandler+0x586>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002226:	2328      	movs	r3, #40	; 0x28
 8002228:	fb03 4306 	mla	r3, r3, r6, r4
 800222c:	4620      	mov	r0, r4
 800222e:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002232:	f002 f953 	bl	80044dc <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002236:	063a      	lsls	r2, r7, #24
 8002238:	f57f ad8b 	bpl.w	8001d52 <HAL_PCD_IRQHandler+0x1a>
 800223c:	2528      	movs	r5, #40	; 0x28
 800223e:	6820      	ldr	r0, [r4, #0]
 8002240:	fb05 4506 	mla	r5, r5, r6, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002244:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002248:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800224c:	ea09 0303 	and.w	r3, r9, r3
 8002250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002254:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8002258:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800225c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002260:	2b02      	cmp	r3, #2
 8002262:	d101      	bne.n	8002268 <HAL_PCD_IRQHandler+0x530>
 8002264:	05fb      	lsls	r3, r7, #23
 8002266:	d43d      	bmi.n	80022e4 <HAL_PCD_IRQHandler+0x5ac>
          if (ep->xfer_len > TxByteNbre)
 8002268:	2328      	movs	r3, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800226a:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 800226e:	fb03 4c06 	mla	ip, r3, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002272:	f10e 0e02 	add.w	lr, lr, #2
 8002276:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
 800227a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 800227e:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 8002282:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002286:	4297      	cmp	r7, r2
            ep->xfer_len = 0U;
 8002288:	bf92      	itee	ls
 800228a:	2100      	movls	r1, #0
            ep->xfer_len -= TxByteNbre;
 800228c:	1abf      	subhi	r7, r7, r2
 800228e:	f8cc 7040 	strhi.w	r7, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8002292:	fb03 4706 	mla	r7, r3, r6, r4
            ep->xfer_len = 0U;
 8002296:	bf98      	it	ls
 8002298:	f8cc 1040 	strls.w	r1, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800229c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800229e:	b9a9      	cbnz	r1, 80022cc <HAL_PCD_IRQHandler+0x594>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022a0:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80022a4:	4620      	mov	r0, r4
 80022a6:	f002 f922 	bl	80044ee <HAL_PCD_DataInStageCallback>
 80022aa:	e552      	b.n	8001d52 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022ac:	3206      	adds	r2, #6
 80022ae:	4413      	add	r3, r2
 80022b0:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80022b4:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80022b8:	2d00      	cmp	r5, #0
 80022ba:	d0a0      	beq.n	80021fe <HAL_PCD_IRQHandler+0x4c6>
 80022bc:	e77d      	b.n	80021ba <HAL_PCD_IRQHandler+0x482>
        ep = &hpcd->OUT_ep[epindex];
 80022be:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80022c2:	4421      	add	r1, r4
 80022c4:	6820      	ldr	r0, [r4, #0]
 80022c6:	f000 fff7 	bl	80032b8 <USB_EPStartXfer>
 80022ca:	e7b4      	b.n	8002236 <HAL_PCD_IRQHandler+0x4fe>
            ep->xfer_buff += TxByteNbre;
 80022cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 80022ce:	fb06 3303 	mla	r3, r6, r3, r3
            ep->xfer_buff += TxByteNbre;
 80022d2:	4411      	add	r1, r2
 80022d4:	63f9      	str	r1, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 80022d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80022d8:	440a      	add	r2, r1
 80022da:	647a      	str	r2, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022dc:	18e1      	adds	r1, r4, r3
 80022de:	f000 ffeb 	bl	80032b8 <USB_EPStartXfer>
 80022e2:	e536      	b.n	8001d52 <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022e4:	f017 0e40 	ands.w	lr, r7, #64	; 0x40
 80022e8:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 80022ec:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80022ee:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80022f2:	f000 809e 	beq.w	8002432 <HAL_PCD_IRQHandler+0x6fa>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022f6:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 80022fa:	b2bf      	uxth	r7, r7
 80022fc:	44f4      	add	ip, lr
 80022fe:	f10c 0c02 	add.w	ip, ip, #2
 8002302:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]

    if (ep->xfer_len > TxByteNbre)
 8002306:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800230a:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 800230c:	bf2c      	ite	cs
 800230e:	2300      	movcs	r3, #0
      ep->xfer_len -= TxByteNbre;
 8002310:	eba3 030c 	subcc.w	r3, r3, ip
      ep->xfer_len = 0U;
 8002314:	642b      	str	r3, [r5, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002316:	2328      	movs	r3, #40	; 0x28
 8002318:	fb03 4306 	mla	r3, r3, r6, r4
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	b9ab      	cbnz	r3, 800234c <HAL_PCD_IRQHandler+0x614>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002320:	4620      	mov	r0, r4
 8002322:	f002 f8e4 	bl	80044ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002326:	2f00      	cmp	r7, #0
 8002328:	f000 80a1 	beq.w	800246e <HAL_PCD_IRQHandler+0x736>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800232c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002330:	6822      	ldr	r2, [r4, #0]
 8002332:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800233a:	051b      	lsls	r3, r3, #20
 800233c:	0d1b      	lsrs	r3, r3, #20
 800233e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002346:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800234a:	e090      	b.n	800246e <HAL_PCD_IRQHandler+0x736>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800234c:	b15f      	cbz	r7, 8002366 <HAL_PCD_IRQHandler+0x62e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800234e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002356:	051b      	lsls	r3, r3, #20
 8002358:	0d1b      	lsrs	r3, r3, #20
 800235a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800235e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002362:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002366:	2328      	movs	r3, #40	; 0x28
 8002368:	fb03 4306 	mla	r3, r3, r6, r4
 800236c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8002370:	2a01      	cmp	r2, #1
 8002372:	d17c      	bne.n	800246e <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 8002374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8002376:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8002378:	4462      	add	r2, ip
 800237a:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800237c:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 800237e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8002380:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8002382:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8002384:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002386:	d325      	bcc.n	80023d4 <HAL_PCD_IRQHandler+0x69c>
          ep->xfer_len_db -= len;
 8002388:	1abf      	subs	r7, r7, r2
 800238a:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800238c:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8002390:	b293      	uxth	r3, r2
 8002392:	2f00      	cmp	r7, #0
 8002394:	d141      	bne.n	800241a <HAL_PCD_IRQHandler+0x6e2>
 8002396:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 800239a:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 800239e:	44bc      	add	ip, r7
 80023a0:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 80023a4:	013f      	lsls	r7, r7, #4
 80023a6:	bb02      	cbnz	r2, 80023ea <HAL_PCD_IRQHandler+0x6b2>
 80023a8:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80023ac:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80023b0:	0412      	lsls	r2, r2, #16
 80023b2:	0c12      	lsrs	r2, r2, #16
 80023b4:	f82c 2007 	strh.w	r2, [ip, r7]
 80023b8:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80023bc:	ea48 0202 	orr.w	r2, r8, r2
 80023c0:	b292      	uxth	r2, r2
 80023c2:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023c6:	2228      	movs	r2, #40	; 0x28
 80023c8:	fb02 4606 	mla	r6, r2, r6, r4
 80023cc:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80023ce:	f000 ff63 	bl	8003298 <USB_WritePMA>
 80023d2:	e04c      	b.n	800246e <HAL_PCD_IRQHandler+0x736>
        else if (ep->xfer_len_db == 0U)
 80023d4:	b91f      	cbnz	r7, 80023de <HAL_PCD_IRQHandler+0x6a6>
          ep->xfer_fill_db = 0U;
 80023d6:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 80023da:	4662      	mov	r2, ip
 80023dc:	e7d6      	b.n	800238c <HAL_PCD_IRQHandler+0x654>
          ep->xfer_fill_db = 0U;
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80023e4:	649a      	str	r2, [r3, #72]	; 0x48
 80023e6:	463a      	mov	r2, r7
 80023e8:	e7d0      	b.n	800238c <HAL_PCD_IRQHandler+0x654>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023ea:	2a3e      	cmp	r2, #62	; 0x3e
 80023ec:	d80c      	bhi.n	8002408 <HAL_PCD_IRQHandler+0x6d0>
 80023ee:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80023f2:	07d2      	lsls	r2, r2, #31
 80023f4:	bf48      	it	mi
 80023f6:	f10e 0e01 	addmi.w	lr, lr, #1
 80023fa:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80023fe:	fa1f fe8e 	uxth.w	lr, lr
 8002402:	f82c e007 	strh.w	lr, [ip, r7]
 8002406:	e7de      	b.n	80023c6 <HAL_PCD_IRQHandler+0x68e>
 8002408:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800240c:	06d2      	lsls	r2, r2, #27
 800240e:	bf08      	it	eq
 8002410:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8002414:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8002418:	e7f1      	b.n	80023fe <HAL_PCD_IRQHandler+0x6c6>
 800241a:	2f01      	cmp	r7, #1
 800241c:	d1d3      	bne.n	80023c6 <HAL_PCD_IRQHandler+0x68e>
 800241e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002422:	f200 4704 	addw	r7, r0, #1028	; 0x404
 8002426:	4417      	add	r7, r2
 8002428:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	52bb      	strh	r3, [r7, r2]
 8002430:	e7c9      	b.n	80023c6 <HAL_PCD_IRQHandler+0x68e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002432:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 8002436:	b2bf      	uxth	r7, r7
 8002438:	44d4      	add	ip, sl
 800243a:	f10c 0c06 	add.w	ip, ip, #6
 800243e:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 8002442:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002446:	459c      	cmp	ip, r3
      ep->xfer_len -= TxByteNbre;
 8002448:	bf9c      	itt	ls
 800244a:	eba3 030c 	subls.w	r3, r3, ip
 800244e:	642b      	strls	r3, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002450:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002454:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 8002458:	bf88      	it	hi
 800245a:	f8c5 e040 	strhi.w	lr, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	b9bb      	cbnz	r3, 8002492 <HAL_PCD_IRQHandler+0x75a>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002462:	4620      	mov	r0, r4
 8002464:	f002 f843 	bl	80044ee <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002468:	2f00      	cmp	r7, #0
 800246a:	f43f af5f 	beq.w	800232c <HAL_PCD_IRQHandler+0x5f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800246e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002472:	6822      	ldr	r2, [r4, #0]
 8002474:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800247c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002480:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002490:	e45f      	b.n	8001d52 <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002492:	b95f      	cbnz	r7, 80024ac <HAL_PCD_IRQHandler+0x774>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002494:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002498:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800249c:	051b      	lsls	r3, r3, #20
 800249e:	0d1b      	lsrs	r3, r3, #20
 80024a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80024ac:	2328      	movs	r3, #40	; 0x28
 80024ae:	fb03 4306 	mla	r3, r3, r6, r4
 80024b2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80024b6:	2a01      	cmp	r2, #1
 80024b8:	d1d9      	bne.n	800246e <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 80024ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80024bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80024be:	4462      	add	r2, ip
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80024c2:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 80024c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80024c6:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 80024c8:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 80024ca:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80024cc:	d323      	bcc.n	8002516 <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db -= len;
 80024ce:	1abf      	subs	r7, r7, r2
 80024d0:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024d2:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 80024d6:	b293      	uxth	r3, r2
 80024d8:	2f00      	cmp	r7, #0
 80024da:	d13f      	bne.n	800255c <HAL_PCD_IRQHandler+0x824>
 80024dc:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80024e0:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 80024e4:	44bc      	add	ip, r7
 80024e6:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 80024ea:	013f      	lsls	r7, r7, #4
 80024ec:	b9f2      	cbnz	r2, 800252c <HAL_PCD_IRQHandler+0x7f4>
 80024ee:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80024f2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80024f6:	0412      	lsls	r2, r2, #16
 80024f8:	0c12      	lsrs	r2, r2, #16
 80024fa:	f82c 2007 	strh.w	r2, [ip, r7]
 80024fe:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8002502:	ea48 0202 	orr.w	r2, r8, r2
 8002506:	b292      	uxth	r2, r2
 8002508:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800250c:	2228      	movs	r2, #40	; 0x28
 800250e:	fb02 4606 	mla	r6, r2, r6, r4
 8002512:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8002514:	e75b      	b.n	80023ce <HAL_PCD_IRQHandler+0x696>
        else if (ep->xfer_len_db == 0U)
 8002516:	b91f      	cbnz	r7, 8002520 <HAL_PCD_IRQHandler+0x7e8>
          ep->xfer_fill_db = 0U;
 8002518:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 800251c:	4662      	mov	r2, ip
 800251e:	e7d8      	b.n	80024d2 <HAL_PCD_IRQHandler+0x79a>
          ep->xfer_len_db = 0U;
 8002520:	2200      	movs	r2, #0
 8002522:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8002524:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002528:	463a      	mov	r2, r7
 800252a:	e7d2      	b.n	80024d2 <HAL_PCD_IRQHandler+0x79a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800252c:	2a3e      	cmp	r2, #62	; 0x3e
 800252e:	d80c      	bhi.n	800254a <HAL_PCD_IRQHandler+0x812>
 8002530:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8002534:	07d2      	lsls	r2, r2, #31
 8002536:	bf48      	it	mi
 8002538:	f10e 0e01 	addmi.w	lr, lr, #1
 800253c:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8002540:	fa1f fe8e 	uxth.w	lr, lr
 8002544:	f82c e007 	strh.w	lr, [ip, r7]
 8002548:	e7e0      	b.n	800250c <HAL_PCD_IRQHandler+0x7d4>
 800254a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800254e:	06d2      	lsls	r2, r2, #27
 8002550:	bf08      	it	eq
 8002552:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8002556:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800255a:	e7f1      	b.n	8002540 <HAL_PCD_IRQHandler+0x808>
 800255c:	2f01      	cmp	r7, #1
 800255e:	d1d5      	bne.n	800250c <HAL_PCD_IRQHandler+0x7d4>
 8002560:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002564:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 8002568:	4417      	add	r7, r2
 800256a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800256e:	0112      	lsls	r2, r2, #4
 8002570:	52bb      	strh	r3, [r7, r2]
 8002572:	e7cb      	b.n	800250c <HAL_PCD_IRQHandler+0x7d4>
 8002574:	ffff8f0f 	.word	0xffff8f0f
 8002578:	ffff8000 	.word	0xffff8000

0800257c <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 800257c:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8002580:	b570      	push	{r4, r5, r6, lr}
 8002582:	f001 0507 	and.w	r5, r1, #7
 8002586:	4604      	mov	r4, r0
 8002588:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 800258c:	d01c      	beq.n	80025c8 <HAL_PCD_EP_Open+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800258e:	fb05 1101 	mla	r1, r5, r1, r1
 8002592:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002594:	2001      	movs	r0, #1
 8002596:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 8002598:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800259a:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800259c:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 800259e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80025a0:	b102      	cbz	r2, 80025a4 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 80025a2:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80025a4:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80025a6:	bf04      	itt	eq
 80025a8:	2300      	moveq	r3, #0
 80025aa:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80025ac:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d013      	beq.n	80025dc <HAL_PCD_EP_Open+0x60>
 80025b4:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025b6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80025b8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025bc:	f000 fbfa 	bl	8002db4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025c0:	2000      	movs	r0, #0
 80025c2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80025c8:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ca:	fb01 f005 	mul.w	r0, r1, r5
 80025ce:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 80025d2:	4420      	add	r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d4:	4421      	add	r1, r4
    ep->is_in = 0U;
 80025d6:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 80025da:	e7dd      	b.n	8002598 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 80025dc:	2002      	movs	r0, #2
 80025de:	e7f2      	b.n	80025c6 <HAL_PCD_EP_Open+0x4a>

080025e0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80025e0:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80025e4:	b510      	push	{r4, lr}
 80025e6:	f001 0207 	and.w	r2, r1, #7
 80025ea:	4604      	mov	r4, r0
 80025ec:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 80025f0:	d013      	beq.n	800261a <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 80025f2:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025f4:	fb02 1101 	mla	r1, r2, r1, r1
 80025f8:	4401      	add	r1, r0
    ep->is_in = 1U;
 80025fa:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025fc:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80025fe:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002602:	2b01      	cmp	r3, #1
 8002604:	d013      	beq.n	800262e <HAL_PCD_EP_Close+0x4e>
 8002606:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002608:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800260a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800260e:	f000 fd0f 	bl	8003030 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002612:	2000      	movs	r0, #0
 8002614:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002618:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800261a:	fb01 f302 	mul.w	r3, r1, r2
 800261e:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8002622:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002624:	4403      	add	r3, r0
 8002626:	2000      	movs	r0, #0
 8002628:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800262c:	e7e6      	b.n	80025fc <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 800262e:	2002      	movs	r0, #2
 8002630:	e7f2      	b.n	8002618 <HAL_PCD_EP_Close+0x38>

08002632 <HAL_PCD_EP_Receive>:
{
 8002632:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8002634:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 8002636:	2600      	movs	r6, #0
 8002638:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800263c:	434c      	muls	r4, r1
 800263e:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8002640:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002644:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002648:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800264a:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 800264e:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8002652:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8002656:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800265a:	6800      	ldr	r0, [r0, #0]
 800265c:	f000 fe2c 	bl	80032b8 <USB_EPStartXfer>
}
 8002660:	4630      	mov	r0, r6
 8002662:	bd70      	pop	{r4, r5, r6, pc}

08002664 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002664:	2328      	movs	r3, #40	; 0x28
 8002666:	f001 0107 	and.w	r1, r1, #7
 800266a:	fb03 0101 	mla	r1, r3, r1, r0
}
 800266e:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8002672:	4770      	bx	lr

08002674 <HAL_PCD_EP_Transmit>:
{
 8002674:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8002676:	2528      	movs	r5, #40	; 0x28
 8002678:	f001 0107 	and.w	r1, r1, #7
 800267c:	fb05 0401 	mla	r4, r5, r1, r0
  ep->xfer_count = 0U;
 8002680:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8002682:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8002686:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002688:	fb01 5505 	mla	r5, r1, r5, r5
  ep->num = ep_addr & EP_ADDR_MSK;
 800268c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_fill_db = 1U;
 8002690:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002694:	1941      	adds	r1, r0, r5
  ep->xfer_len_db = len;
 8002696:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8002698:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800269a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800269e:	6800      	ldr	r0, [r0, #0]
 80026a0:	f000 fe0a 	bl	80032b8 <USB_EPStartXfer>
}
 80026a4:	4630      	mov	r0, r6
 80026a6:	bd70      	pop	{r4, r5, r6, pc}

080026a8 <HAL_PCD_EP_SetStall>:
{
 80026a8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026aa:	6843      	ldr	r3, [r0, #4]
 80026ac:	f001 0507 	and.w	r5, r1, #7
 80026b0:	429d      	cmp	r5, r3
{
 80026b2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026b4:	d828      	bhi.n	8002708 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80026b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80026ba:	f04f 0328 	mov.w	r3, #40	; 0x28
 80026be:	d01a      	beq.n	80026f6 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c0:	fb05 3303 	mla	r3, r5, r3, r3
 80026c4:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 80026c6:	2301      	movs	r3, #1
 80026c8:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 80026ca:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80026cc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80026ce:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80026d0:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d019      	beq.n	800270c <HAL_PCD_EP_SetStall+0x64>
 80026d8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026dc:	6820      	ldr	r0, [r4, #0]
 80026de:	f000 fd6d 	bl	80031bc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026e2:	b925      	cbnz	r5, 80026ee <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80026e4:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80026e8:	6820      	ldr	r0, [r4, #0]
 80026ea:	f000 fdd3 	bl	8003294 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80026f4:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80026f6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80026f8:	434b      	muls	r3, r1
 80026fa:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80026fe:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8002700:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002702:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8002706:	e7e0      	b.n	80026ca <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8002708:	2001      	movs	r0, #1
 800270a:	e7f3      	b.n	80026f4 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 800270c:	2002      	movs	r0, #2
 800270e:	e7f1      	b.n	80026f4 <HAL_PCD_EP_SetStall+0x4c>

08002710 <HAL_PCD_EP_ClrStall>:
{
 8002710:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002712:	6843      	ldr	r3, [r0, #4]
 8002714:	f001 020f 	and.w	r2, r1, #15
 8002718:	429a      	cmp	r2, r3
{
 800271a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800271c:	d826      	bhi.n	800276c <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 800271e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002722:	f001 0207 	and.w	r2, r1, #7
 8002726:	f04f 0128 	mov.w	r1, #40	; 0x28
 800272a:	d015      	beq.n	8002758 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 800272c:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800272e:	fb02 1101 	mla	r1, r2, r1, r1
 8002732:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002734:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 8002736:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002738:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800273a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800273c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002740:	2b01      	cmp	r3, #1
 8002742:	d015      	beq.n	8002770 <HAL_PCD_EP_ClrStall+0x60>
 8002744:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002746:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002748:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800274c:	f000 fd52 	bl	80031f4 <USB_EPClearStall>
  return HAL_OK;
 8002750:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8002752:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8002756:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002758:	fb01 f302 	mul.w	r3, r1, r2
 800275c:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8002760:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002762:	4403      	add	r3, r0
 8002764:	2000      	movs	r0, #0
 8002766:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800276a:	e7e4      	b.n	8002736 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 800276c:	2001      	movs	r0, #1
 800276e:	e7f2      	b.n	8002756 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8002770:	2002      	movs	r0, #2
 8002772:	e7f0      	b.n	8002756 <HAL_PCD_EP_ClrStall+0x46>

08002774 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002774:	b510      	push	{r4, lr}
 8002776:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002778:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800277c:	bf1b      	ittet	ne
 800277e:	f001 0107 	andne.w	r1, r1, #7
 8002782:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002786:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800278a:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800278c:	bf08      	it	eq
 800278e:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
 8002792:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002794:	b91a      	cbnz	r2, 800279e <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002796:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002798:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800279a:	2000      	movs	r0, #0
 800279c:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 800279e:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80027a0:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 80027a2:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80027a4:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80027a6:	8143      	strh	r3, [r0, #10]
 80027a8:	e7f7      	b.n	800279a <HAL_PCDEx_PMAConfig+0x26>
	...

080027ac <LL_ADC_CommonInit>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <LL_ADC_CommonInit+0x34>)
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b4:	689b      	ldr	r3, [r3, #8]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f013 0201 	ands.w	r2, r3, #1
 80027bc:	d10e      	bne.n	80027dc <LL_ADC_CommonInit+0x30>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80027be:	680b      	ldr	r3, [r1, #0]
 80027c0:	b133      	cbz	r3, 80027d0 <LL_ADC_CommonInit+0x24>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80027c2:	6841      	ldr	r1, [r0, #4]
 80027c4:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6043      	str	r3, [r0, #4]
  ErrorStatus status = SUCCESS;
 80027cc:	4610      	mov	r0, r2
 80027ce:	4770      	bx	lr
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80027d0:	6842      	ldr	r2, [r0, #4]
 80027d2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80027d6:	6042      	str	r2, [r0, #4]
  ErrorStatus status = SUCCESS;
 80027d8:	4618      	mov	r0, r3
 80027da:	4770      	bx	lr
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80027dc:	2001      	movs	r0, #1
  }
  
  return status;
}
 80027de:	4770      	bx	lr
 80027e0:	40012400 	.word	0x40012400

080027e4 <LL_ADC_Init>:
 80027e4:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80027e6:	b510      	push	{r4, lr}
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80027e8:	f013 0301 	ands.w	r3, r3, #1
 80027ec:	d10d      	bne.n	800280a <LL_ADC_Init+0x26>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80027ee:	6842      	ldr	r2, [r0, #4]
 80027f0:	684c      	ldr	r4, [r1, #4]
 80027f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027f6:	4322      	orrs	r2, r4
 80027f8:	6042      	str	r2, [r0, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80027fa:	6882      	ldr	r2, [r0, #8]
 80027fc:	6809      	ldr	r1, [r1, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002802:	430a      	orrs	r2, r1
 8002804:	6082      	str	r2, [r0, #8]
  ErrorStatus status = SUCCESS;
 8002806:	4618      	mov	r0, r3
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8002808:	bd10      	pop	{r4, pc}
    status = ERROR;
 800280a:	2001      	movs	r0, #1
 800280c:	e7fc      	b.n	8002808 <LL_ADC_Init+0x24>

0800280e <LL_ADC_REG_Init>:
 800280e:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002810:	b510      	push	{r4, lr}
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002812:	07db      	lsls	r3, r3, #31
 8002814:	d41b      	bmi.n	800284e <LL_ADC_REG_Init+0x40>
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CR1,
 8002816:	6843      	ldr	r3, [r0, #4]
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002818:	684a      	ldr	r2, [r1, #4]
      MODIFY_REG(ADCx->CR1,
 800281a:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800281e:	b112      	cbz	r2, 8002826 <LL_ADC_REG_Init+0x18>
      MODIFY_REG(ADCx->CR1,
 8002820:	688c      	ldr	r4, [r1, #8]
 8002822:	4313      	orrs	r3, r2
 8002824:	4323      	orrs	r3, r4
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002826:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002828:	6883      	ldr	r3, [r0, #8]
 800282a:	680c      	ldr	r4, [r1, #0]
 800282c:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002830:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002834:	4323      	orrs	r3, r4
 8002836:	68cc      	ldr	r4, [r1, #12]
 8002838:	6909      	ldr	r1, [r1, #16]
 800283a:	4323      	orrs	r3, r4
 800283c:	430b      	orrs	r3, r1
 800283e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002840:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002842:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002846:	4313      	orrs	r3, r2
 8002848:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 800284a:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 800284c:	bd10      	pop	{r4, pc}
    status = ERROR;
 800284e:	2001      	movs	r0, #1
 8002850:	e7fc      	b.n	800284c <LL_ADC_REG_Init+0x3e>
	...

08002854 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002854:	4602      	mov	r2, r0
 8002856:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002858:	7900      	ldrb	r0, [r0, #4]
{
 800285a:	b510      	push	{r4, lr}
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800285c:	2800      	cmp	r0, #0
 800285e:	d03d      	beq.n	80028dc <LL_EXTI_Init+0x88>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002860:	2b00      	cmp	r3, #0
 8002862:	d044      	beq.n	80028ee <LL_EXTI_Init+0x9a>
    {
      switch (EXTI_InitStruct->Mode)
 8002864:	7951      	ldrb	r1, [r2, #5]
 8002866:	2901      	cmp	r1, #1
 8002868:	d01e      	beq.n	80028a8 <LL_EXTI_Init+0x54>
 800286a:	d303      	bcc.n	8002874 <LL_EXTI_Init+0x20>
 800286c:	2902      	cmp	r1, #2
 800286e:	d024      	beq.n	80028ba <LL_EXTI_Init+0x66>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
          break;
        default:
          status = ERROR;
 8002870:	2001      	movs	r0, #1
 8002872:	e008      	b.n	8002886 <LL_EXTI_Init+0x32>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002874:	4920      	ldr	r1, [pc, #128]	; (80028f8 <LL_EXTI_Init+0xa4>)
 8002876:	6848      	ldr	r0, [r1, #4]
 8002878:	ea20 0003 	bic.w	r0, r0, r3
 800287c:	6048      	str	r0, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800287e:	6808      	ldr	r0, [r1, #0]
 8002880:	4318      	orrs	r0, r3
 8002882:	6008      	str	r0, [r1, #0]
  ErrorStatus status = SUCCESS;
 8002884:	2000      	movs	r0, #0
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002886:	7992      	ldrb	r2, [r2, #6]
 8002888:	b16a      	cbz	r2, 80028a6 <LL_EXTI_Init+0x52>
      {
        switch (EXTI_InitStruct->Trigger)
 800288a:	2a02      	cmp	r2, #2
 800288c:	d019      	beq.n	80028c2 <LL_EXTI_Init+0x6e>
 800288e:	2a03      	cmp	r2, #3
 8002890:	d020      	beq.n	80028d4 <LL_EXTI_Init+0x80>
 8002892:	2a01      	cmp	r2, #1
 8002894:	d12d      	bne.n	80028f2 <LL_EXTI_Init+0x9e>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002896:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <LL_EXTI_Init+0xa4>)
 8002898:	68d1      	ldr	r1, [r2, #12]
 800289a:	ea21 0103 	bic.w	r1, r1, r3
 800289e:	60d1      	str	r1, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80028a0:	6891      	ldr	r1, [r2, #8]
 80028a2:	430b      	orrs	r3, r1
 80028a4:	6093      	str	r3, [r2, #8]
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 80028a6:	bd10      	pop	{r4, pc}
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80028a8:	4913      	ldr	r1, [pc, #76]	; (80028f8 <LL_EXTI_Init+0xa4>)
 80028aa:	6808      	ldr	r0, [r1, #0]
 80028ac:	ea20 0003 	bic.w	r0, r0, r3
  SET_BIT(EXTI->IMR, ExtiLine);
 80028b0:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 80028b2:	6848      	ldr	r0, [r1, #4]
 80028b4:	4318      	orrs	r0, r3
 80028b6:	6048      	str	r0, [r1, #4]
 80028b8:	e7e4      	b.n	8002884 <LL_EXTI_Init+0x30>
  SET_BIT(EXTI->IMR, ExtiLine);
 80028ba:	490f      	ldr	r1, [pc, #60]	; (80028f8 <LL_EXTI_Init+0xa4>)
 80028bc:	6808      	ldr	r0, [r1, #0]
 80028be:	4318      	orrs	r0, r3
 80028c0:	e7f6      	b.n	80028b0 <LL_EXTI_Init+0x5c>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80028c2:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <LL_EXTI_Init+0xa4>)
 80028c4:	6891      	ldr	r1, [r2, #8]
 80028c6:	ea21 0103 	bic.w	r1, r1, r3
  SET_BIT(EXTI->RTSR, ExtiLine);
 80028ca:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80028cc:	68d1      	ldr	r1, [r2, #12]
 80028ce:	430b      	orrs	r3, r1
 80028d0:	60d3      	str	r3, [r2, #12]
 80028d2:	e7e8      	b.n	80028a6 <LL_EXTI_Init+0x52>
  SET_BIT(EXTI->RTSR, ExtiLine);
 80028d4:	4a08      	ldr	r2, [pc, #32]	; (80028f8 <LL_EXTI_Init+0xa4>)
 80028d6:	6891      	ldr	r1, [r2, #8]
 80028d8:	4319      	orrs	r1, r3
 80028da:	e7f6      	b.n	80028ca <LL_EXTI_Init+0x76>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80028dc:	43dc      	mvns	r4, r3
 80028de:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <LL_EXTI_Init+0xa4>)
 80028e0:	6811      	ldr	r1, [r2, #0]
 80028e2:	4021      	ands	r1, r4
 80028e4:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80028e6:	6853      	ldr	r3, [r2, #4]
 80028e8:	4023      	ands	r3, r4
 80028ea:	6053      	str	r3, [r2, #4]
 80028ec:	e7db      	b.n	80028a6 <LL_EXTI_Init+0x52>
  ErrorStatus status = SUCCESS;
 80028ee:	4618      	mov	r0, r3
 80028f0:	e7d9      	b.n	80028a6 <LL_EXTI_Init+0x52>
            status = ERROR;
 80028f2:	2001      	movs	r0, #1
 80028f4:	e7d7      	b.n	80028a6 <LL_EXTI_Init+0x52>
 80028f6:	bf00      	nop
 80028f8:	40010400 	.word	0x40010400

080028fc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80028fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002900:	680c      	ldr	r4, [r1, #0]
 8002902:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8002906:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800290a:	f04f 0a0f 	mov.w	sl, #15
  pinpos = POSITION_VAL(pinmask);
 800290e:	fab2 f282 	clz	r2, r2
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002912:	f04f 0903 	mov.w	r9, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002916:	2704      	movs	r7, #4
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002918:	f04f 1c01 	mov.w	ip, #65537	; 0x10001
        currentpin = (0x00000101uL << pinpos);
 800291c:	f240 1e01 	movw	lr, #257	; 0x101
  while ((pinmask  >> pinpos) != 0u)
 8002920:	fa34 f302 	lsrs.w	r3, r4, r2
 8002924:	d102      	bne.n	800292c <LL_GPIO_Init+0x30>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 8002926:	4618      	mov	r0, r3
 8002928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1u << pinpos)) != 0u)
 800292c:	2301      	movs	r3, #1
 800292e:	4093      	lsls	r3, r2
 8002930:	4223      	tst	r3, r4
 8002932:	d05e      	beq.n	80029f2 <LL_GPIO_Init+0xf6>
      if (pinpos < GPIO_PIN_MASK_POS)
 8002934:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002936:	bf85      	ittet	hi
 8002938:	f1a2 0308 	subhi.w	r3, r2, #8
 800293c:	fa0c f303 	lslhi.w	r3, ip, r3
        currentpin = (0x00000101uL << pinpos);
 8002940:	fa0e f302 	lslls.w	r3, lr, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002944:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002948:	68c5      	ldr	r5, [r0, #12]
 800294a:	0a1e      	lsrs	r6, r3, #8
 800294c:	fa96 f8a6 	rbit	r8, r6
 8002950:	fab8 f888 	clz	r8, r8
 8002954:	ea25 0606 	bic.w	r6, r5, r6
 8002958:	690d      	ldr	r5, [r1, #16]
 800295a:	fa05 f508 	lsl.w	r5, r5, r8
 800295e:	4335      	orrs	r5, r6
 8002960:	60c5      	str	r5, [r0, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002962:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8002966:	fa93 f6a3 	rbit	r6, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800296a:	fab6 f686 	clz	r6, r6
 800296e:	fa93 fba3 	rbit	fp, r3
 8002972:	fabb fb8b 	clz	fp, fp
 8002976:	00b6      	lsls	r6, r6, #2
 8002978:	fa0a f506 	lsl.w	r5, sl, r6
 800297c:	f850 6008 	ldr.w	r6, [r0, r8]
 8002980:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002984:	ea26 0605 	bic.w	r6, r6, r5
 8002988:	684d      	ldr	r5, [r1, #4]
 800298a:	fa05 fb0b 	lsl.w	fp, r5, fp
 800298e:	ea46 060b 	orr.w	r6, r6, fp
 8002992:	f840 6008 	str.w	r6, [r0, r8]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002996:	684d      	ldr	r5, [r1, #4]
 8002998:	f025 0508 	bic.w	r5, r5, #8
 800299c:	2d01      	cmp	r5, #1
 800299e:	d128      	bne.n	80029f2 <LL_GPIO_Init+0xf6>
 80029a0:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80029a4:	fab5 f585 	clz	r5, r5
 80029a8:	fa93 fba3 	rbit	fp, r3
 80029ac:	fabb fb8b 	clz	fp, fp
 80029b0:	00ad      	lsls	r5, r5, #2
 80029b2:	fa09 f505 	lsl.w	r5, r9, r5
 80029b6:	ea26 0605 	bic.w	r6, r6, r5
 80029ba:	688d      	ldr	r5, [r1, #8]
 80029bc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80029c0:	fa05 fb0b 	lsl.w	fp, r5, fp
 80029c4:	ea46 060b 	orr.w	r6, r6, fp
 80029c8:	f840 6008 	str.w	r6, [r0, r8]
 80029cc:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80029d0:	fab5 f585 	clz	r5, r5
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	00ad      	lsls	r5, r5, #2
 80029de:	fa07 f505 	lsl.w	r5, r7, r5
 80029e2:	ea26 0505 	bic.w	r5, r6, r5
 80029e6:	68ce      	ldr	r6, [r1, #12]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	409e      	lsls	r6, r3
 80029ec:	432e      	orrs	r6, r5
 80029ee:	f840 6008 	str.w	r6, [r0, r8]
    pinpos++;
 80029f2:	3201      	adds	r2, #1
 80029f4:	e794      	b.n	8002920 <LL_GPIO_Init+0x24>
	...

080029f8 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80029fa:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <RCC_GetHCLKClockFreq+0x14>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a04:	40d8      	lsrs	r0, r3
 8002a06:	4770      	bx	lr
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	0800a970 	.word	0x0800a970

08002a10 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002a12:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <RCC_GetPCLK1ClockFreq+0x14>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a1c:	40d8      	lsrs	r0, r3
 8002a1e:	4770      	bx	lr
 8002a20:	40021000 	.word	0x40021000
 8002a24:	0800a980 	.word	0x0800a980

08002a28 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002a2a:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <RCC_GetPCLK2ClockFreq+0x14>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a34:	40d8      	lsrs	r0, r3
 8002a36:	4770      	bx	lr
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	0800a980 	.word	0x0800a980

08002a40 <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002a48:	b162      	cbz	r2, 8002a64 <RCC_PLL_GetFreqDomain_SYS+0x24>
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002a4a:	6858      	ldr	r0, [r3, #4]
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002a4c:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 8002a4e:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002a52:	3001      	adds	r0, #1
 8002a54:	fbb2 f0f0 	udiv	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002a58:	685b      	ldr	r3, [r3, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002a5a:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8002a5e:	3302      	adds	r3, #2
}
 8002a60:	4358      	muls	r0, r3
 8002a62:	4770      	bx	lr
      pllinputfreq = HSI_VALUE / 2U;
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8002a66:	e7f7      	b.n	8002a58 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	007a1200 	.word	0x007a1200
 8002a70:	003d0900 	.word	0x003d0900

08002a74 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <RCC_GetSystemClockFreq+0x14>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d101      	bne.n	8002a84 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002a80:	f7ff bfde 	b.w	8002a40 <RCC_PLL_GetFreqDomain_SYS>
}
 8002a84:	4801      	ldr	r0, [pc, #4]	; (8002a8c <RCC_GetSystemClockFreq+0x18>)
 8002a86:	4770      	bx	lr
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	007a1200 	.word	0x007a1200

08002a90 <LL_RCC_GetSystemClocksFreq>:
{
 8002a90:	b508      	push	{r3, lr}
 8002a92:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002a94:	f7ff ffee 	bl	8002a74 <RCC_GetSystemClockFreq>
 8002a98:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002a9a:	f7ff ffad 	bl	80029f8 <RCC_GetHCLKClockFreq>
 8002a9e:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002aa0:	f7ff ffb6 	bl	8002a10 <RCC_GetPCLK1ClockFreq>
 8002aa4:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002aa6:	6848      	ldr	r0, [r1, #4]
 8002aa8:	f7ff ffbe 	bl	8002a28 <RCC_GetPCLK2ClockFreq>
 8002aac:	60c8      	str	r0, [r1, #12]
}
 8002aae:	bd08      	pop	{r3, pc}

08002ab0 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab0:	4a1a      	ldr	r2, [pc, #104]	; (8002b1c <LL_TIM_Init+0x6c>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002ab2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab4:	4290      	cmp	r0, r2
 8002ab6:	d00a      	beq.n	8002ace <LL_TIM_Init+0x1e>
 8002ab8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002abc:	d007      	beq.n	8002ace <LL_TIM_Init+0x1e>
 8002abe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ac2:	4290      	cmp	r0, r2
 8002ac4:	d003      	beq.n	8002ace <LL_TIM_Init+0x1e>
 8002ac6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aca:	4290      	cmp	r0, r2
 8002acc:	d115      	bne.n	8002afa <LL_TIM_Init+0x4a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002ace:	684a      	ldr	r2, [r1, #4]
 8002ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad6:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <LL_TIM_Init+0x6c>)
 8002ad8:	4290      	cmp	r0, r2
 8002ada:	d00a      	beq.n	8002af2 <LL_TIM_Init+0x42>
 8002adc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ae0:	d007      	beq.n	8002af2 <LL_TIM_Init+0x42>
 8002ae2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ae6:	4290      	cmp	r0, r2
 8002ae8:	d003      	beq.n	8002af2 <LL_TIM_Init+0x42>
 8002aea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aee:	4290      	cmp	r0, r2
 8002af0:	d103      	bne.n	8002afa <LL_TIM_Init+0x4a>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002af2:	68ca      	ldr	r2, [r1, #12]
 8002af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af8:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002afa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002afc:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002afe:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002b00:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002b02:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <LL_TIM_Init+0x6c>)
 8002b06:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002b08:	bf04      	itt	eq
 8002b0a:	690b      	ldreq	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002b0c:	6303      	streq	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002b0e:	6943      	ldr	r3, [r0, #20]
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8002b16:	2000      	movs	r0, #0
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40012c00 	.word	0x40012c00

08002b20 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8002b20:	2910      	cmp	r1, #16
{
 8002b22:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8002b24:	d05f      	beq.n	8002be6 <LL_TIM_OC_Init+0xc6>
 8002b26:	d803      	bhi.n	8002b30 <LL_TIM_OC_Init+0x10>
 8002b28:	2901      	cmp	r1, #1
 8002b2a:	d02c      	beq.n	8002b86 <LL_TIM_OC_Init+0x66>
  ErrorStatus result = ERROR;
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	e059      	b.n	8002be4 <LL_TIM_OC_Init+0xc4>
  switch (Channel)
 8002b30:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002b34:	f000 8089 	beq.w	8002c4a <LL_TIM_OC_Init+0x12a>
 8002b38:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002b3c:	d1f6      	bne.n	8002b2c <LL_TIM_OC_Init+0xc>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002b3e:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002b40:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b46:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b48:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002b4a:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002b4c:	69c1      	ldr	r1, [r0, #28]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002b52:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8002b56:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002b5a:	6915      	ldr	r5, [r2, #16]
 8002b5c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002b60:	6855      	ldr	r5, [r2, #4]
 8002b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b66:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6a:	4d50      	ldr	r5, [pc, #320]	; (8002cac <LL_TIM_OC_Init+0x18c>)
 8002b6c:	42a8      	cmp	r0, r5
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002b6e:	bf04      	itt	eq
 8002b70:	6995      	ldreq	r5, [r2, #24]
 8002b72:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002b76:	68d2      	ldr	r2, [r2, #12]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002b78:	bf08      	it	eq
 8002b7a:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b7e:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002b80:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002b82:	6402      	str	r2, [r0, #64]	; 0x40
 8002b84:	e02c      	b.n	8002be0 <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002b86:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002b88:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b90:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b92:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002b94:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002b96:	f023 0302 	bic.w	r3, r3, #2
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002b9a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002b9e:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002ba0:	6915      	ldr	r5, [r2, #16]
 8002ba2:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002ba4:	6855      	ldr	r5, [r2, #4]
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bac:	4d3f      	ldr	r5, [pc, #252]	; (8002cac <LL_TIM_OC_Init+0x18c>)
 8002bae:	42a8      	cmp	r0, r5
 8002bb0:	d112      	bne.n	8002bd8 <LL_TIM_OC_Init+0xb8>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002bb2:	6955      	ldr	r5, [r2, #20]
 8002bb4:	f023 0308 	bic.w	r3, r3, #8
 8002bb8:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002bbc:	6895      	ldr	r5, [r2, #8]
 8002bbe:	f023 0304 	bic.w	r3, r3, #4
 8002bc2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002bc6:	6995      	ldr	r5, [r2, #24]
 8002bc8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002bcc:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002bce:	69d5      	ldr	r5, [r2, #28]
 8002bd0:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002bd4:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002bd8:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002bda:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002bdc:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002bde:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002be0:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002be2:	2000      	movs	r0, #0
}
 8002be4:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002be6:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002be8:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002bea:	f023 0310 	bic.w	r3, r3, #16
 8002bee:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002bf0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002bf2:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002bf4:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002bf6:	f023 0320 	bic.w	r3, r3, #32
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002bfa:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8002bfe:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002c02:	6915      	ldr	r5, [r2, #16]
 8002c04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002c08:	6855      	ldr	r5, [r2, #4]
 8002c0a:	f023 0310 	bic.w	r3, r3, #16
 8002c0e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c12:	4d26      	ldr	r5, [pc, #152]	; (8002cac <LL_TIM_OC_Init+0x18c>)
 8002c14:	42a8      	cmp	r0, r5
 8002c16:	d113      	bne.n	8002c40 <LL_TIM_OC_Init+0x120>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002c18:	6955      	ldr	r5, [r2, #20]
 8002c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c1e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002c22:	6895      	ldr	r5, [r2, #8]
 8002c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c28:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002c2c:	6995      	ldr	r5, [r2, #24]
 8002c2e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002c32:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002c36:	69d5      	ldr	r5, [r2, #28]
 8002c38:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002c3c:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002c40:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c42:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c44:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c46:	6382      	str	r2, [r0, #56]	; 0x38
 8002c48:	e7ca      	b.n	8002be0 <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c4a:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c4c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c52:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c54:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c56:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c58:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002c5a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c5e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002c62:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002c64:	6915      	ldr	r5, [r2, #16]
 8002c66:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002c6a:	6855      	ldr	r5, [r2, #4]
 8002c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c70:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c74:	4d0d      	ldr	r5, [pc, #52]	; (8002cac <LL_TIM_OC_Init+0x18c>)
 8002c76:	42a8      	cmp	r0, r5
 8002c78:	d113      	bne.n	8002ca2 <LL_TIM_OC_Init+0x182>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002c7a:	6955      	ldr	r5, [r2, #20]
 8002c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c80:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002c84:	6895      	ldr	r5, [r2, #8]
 8002c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c8a:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002c8e:	6995      	ldr	r5, [r2, #24]
 8002c90:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002c94:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002c98:	69d5      	ldr	r5, [r2, #28]
 8002c9a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002c9e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002ca2:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ca4:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002ca6:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002ca8:	63c2      	str	r2, [r0, #60]	; 0x3c
 8002caa:	e799      	b.n	8002be0 <LL_TIM_OC_Init+0xc0>
 8002cac:	40012c00 	.word	0x40012c00

08002cb0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002cb0:	b530      	push	{r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002cb2:	68c3      	ldr	r3, [r0, #12]
 8002cb4:	b085      	sub	sp, #20
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002cb6:	049b      	lsls	r3, r3, #18
{
 8002cb8:	4604      	mov	r4, r0
 8002cba:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002cbc:	d502      	bpl.n	8002cc4 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 8002cbe:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8002cc0:	b005      	add	sp, #20
 8002cc2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8002cc4:	684b      	ldr	r3, [r1, #4]
 8002cc6:	68c9      	ldr	r1, [r1, #12]
 8002cc8:	68c2      	ldr	r2, [r0, #12]
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	6929      	ldr	r1, [r5, #16]
 8002cce:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	f022 020c 	bic.w	r2, r2, #12
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002cdc:	6903      	ldr	r3, [r0, #16]
 8002cde:	68aa      	ldr	r2, [r5, #8]
 8002ce0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	6103      	str	r3, [r0, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002ce8:	6943      	ldr	r3, [r0, #20]
 8002cea:	696a      	ldr	r2, [r5, #20]
 8002cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002cf4:	4668      	mov	r0, sp
 8002cf6:	f7ff fecb 	bl	8002a90 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <LL_USART_Init+0x98>)
 8002cfc:	429c      	cmp	r4, r3
 8002cfe:	d119      	bne.n	8002d34 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002d00:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002d02:	2900      	cmp	r1, #0
 8002d04:	d0db      	beq.n	8002cbe <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8002d06:	682a      	ldr	r2, [r5, #0]
 8002d08:	2a00      	cmp	r2, #0
 8002d0a:	d0d8      	beq.n	8002cbe <LL_USART_Init+0xe>
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002d0c:	2319      	movs	r3, #25
 8002d0e:	434b      	muls	r3, r1
 8002d10:	0092      	lsls	r2, r2, #2
 8002d12:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d16:	2264      	movs	r2, #100	; 0x64
 8002d18:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d1c:	fb02 3311 	mls	r3, r2, r1, r3
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	3332      	adds	r3, #50	; 0x32
 8002d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d28:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8002d30:	2000      	movs	r0, #0
 8002d32:	e7c5      	b.n	8002cc0 <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <LL_USART_Init+0x9c>)
 8002d36:	429c      	cmp	r4, r3
 8002d38:	d101      	bne.n	8002d3e <LL_USART_Init+0x8e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d3a:	9902      	ldr	r1, [sp, #8]
 8002d3c:	e7e1      	b.n	8002d02 <LL_USART_Init+0x52>
    else if (USARTx == USART3)
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <LL_USART_Init+0xa0>)
 8002d40:	429c      	cmp	r4, r3
 8002d42:	d1bc      	bne.n	8002cbe <LL_USART_Init+0xe>
 8002d44:	e7f9      	b.n	8002d3a <LL_USART_Init+0x8a>
 8002d46:	bf00      	nop
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	40004400 	.word	0x40004400
 8002d50:	40004800 	.word	0x40004800

08002d54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d54:	b084      	sub	sp, #16
 8002d56:	a801      	add	r0, sp, #4
 8002d58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002d5c:	b004      	add	sp, #16
 8002d5e:	2000      	movs	r0, #0
 8002d60:	4770      	bx	lr

08002d62 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d62:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002d64:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8002d68:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8002d6c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	4770      	bx	lr

08002d74 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002d74:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002d78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d7c:	045b      	lsls	r3, r3, #17
 8002d7e:	0c5b      	lsrs	r3, r3, #17
 8002d80:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002d84:	2000      	movs	r0, #0
 8002d86:	4770      	bx	lr

08002d88 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002d88:	2000      	movs	r0, #0
 8002d8a:	4770      	bx	lr

08002d8c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	b510      	push	{r4, lr}
 8002d90:	ac03      	add	r4, sp, #12
 8002d92:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8002d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8002da4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0U;
 8002da8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8002dac:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	4770      	bx	lr

08002db4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002db4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002db6:	780c      	ldrb	r4, [r1, #0]
{
 8002db8:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002dba:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8002dbe:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002dc0:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002dc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8002dc8:	2803      	cmp	r0, #3
 8002dca:	d803      	bhi.n	8002dd4 <USB_ActivateEndpoint+0x20>
 8002dcc:	e8df f000 	tbb	[pc, r0]
 8002dd0:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8002dd4:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002dd6:	f248 0580 	movw	r5, #32896	; 0x8080
 8002dda:	432a      	orrs	r2, r5
 8002ddc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002de0:	780e      	ldrb	r6, [r1, #0]
 8002de2:	4a90      	ldr	r2, [pc, #576]	; (8003024 <USB_ActivateEndpoint+0x270>)
 8002de4:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8002de8:	4335      	orrs	r5, r6
 8002dea:	4014      	ands	r4, r2
 8002dec:	432c      	orrs	r4, r5
 8002dee:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8002df2:	7b0d      	ldrb	r5, [r1, #12]
 8002df4:	780c      	ldrb	r4, [r1, #0]
 8002df6:	2d00      	cmp	r5, #0
 8002df8:	f040 8082 	bne.w	8002f00 <USB_ActivateEndpoint+0x14c>
 8002dfc:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 8002dfe:	784e      	ldrb	r6, [r1, #1]
 8002e00:	086d      	lsrs	r5, r5, #1
 8002e02:	006d      	lsls	r5, r5, #1
 8002e04:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002e08:	b376      	cbz	r6, 8002e68 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e0a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002e0e:	4434      	add	r4, r6
 8002e10:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e14:	780d      	ldrb	r5, [r1, #0]
 8002e16:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002e1a:	0667      	lsls	r7, r4, #25
 8002e1c:	d508      	bpl.n	8002e30 <USB_ActivateEndpoint+0x7c>
 8002e1e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002e22:	4022      	ands	r2, r4
 8002e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e28:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002e2c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002e30:	78ca      	ldrb	r2, [r1, #3]
 8002e32:	780c      	ldrb	r4, [r1, #0]
 8002e34:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e36:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8002e3a:	4a7b      	ldr	r2, [pc, #492]	; (8003028 <USB_ActivateEndpoint+0x274>)
 8002e3c:	ea02 0201 	and.w	r2, r2, r1
 8002e40:	bf18      	it	ne
 8002e42:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e4e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8002e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8002e58:	2000      	movs	r0, #0
 8002e5a:	e7bc      	b.n	8002dd6 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002e5c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8002e60:	e7fa      	b.n	8002e58 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002e62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e66:	e7f7      	b.n	8002e58 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e68:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e6c:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e6e:	4414      	add	r4, r2
 8002e70:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e74:	780a      	ldrb	r2, [r1, #0]
 8002e76:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002e7a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002e7e:	b2a4      	uxth	r4, r4
 8002e80:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8002e84:	bb56      	cbnz	r6, 8002edc <USB_ActivateEndpoint+0x128>
 8002e86:	5b15      	ldrh	r5, [r2, r4]
 8002e88:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8002e8c:	042d      	lsls	r5, r5, #16
 8002e8e:	0c2d      	lsrs	r5, r5, #16
 8002e90:	5315      	strh	r5, [r2, r4]
 8002e92:	5b15      	ldrh	r5, [r2, r4]
 8002e94:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8002e98:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e9a:	780c      	ldrb	r4, [r1, #0]
 8002e9c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ea0:	0457      	lsls	r7, r2, #17
 8002ea2:	d50b      	bpl.n	8002ebc <USB_ActivateEndpoint+0x108>
 8002ea4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ea8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002eac:	0512      	lsls	r2, r2, #20
 8002eae:	0d12      	lsrs	r2, r2, #20
 8002eb0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002eb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eb8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ebc:	7809      	ldrb	r1, [r1, #0]
 8002ebe:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002ec2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ec6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002eca:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ed2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ed6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002eda:	e7ba      	b.n	8002e52 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002edc:	2e3e      	cmp	r6, #62	; 0x3e
 8002ede:	d806      	bhi.n	8002eee <USB_ActivateEndpoint+0x13a>
 8002ee0:	0875      	lsrs	r5, r6, #1
 8002ee2:	07f6      	lsls	r6, r6, #31
 8002ee4:	bf48      	it	mi
 8002ee6:	3501      	addmi	r5, #1
 8002ee8:	02ad      	lsls	r5, r5, #10
 8002eea:	b2ad      	uxth	r5, r5
 8002eec:	e7d4      	b.n	8002e98 <USB_ActivateEndpoint+0xe4>
 8002eee:	0977      	lsrs	r7, r6, #5
 8002ef0:	06f5      	lsls	r5, r6, #27
 8002ef2:	4d4e      	ldr	r5, [pc, #312]	; (800302c <USB_ActivateEndpoint+0x278>)
 8002ef4:	bf08      	it	eq
 8002ef6:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002efa:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8002efe:	e7f4      	b.n	8002eea <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002f00:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8002f04:	4015      	ands	r5, r2
 8002f06:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8002f0a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002f0e:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002f12:	780c      	ldrb	r4, [r1, #0]
 8002f14:	890d      	ldrh	r5, [r1, #8]
 8002f16:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002f1a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002f1e:	086d      	lsrs	r5, r5, #1
 8002f20:	b2b6      	uxth	r6, r6
 8002f22:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f26:	006d      	lsls	r5, r5, #1
 8002f28:	53a5      	strh	r5, [r4, r6]
 8002f2a:	780c      	ldrb	r4, [r1, #0]
 8002f2c:	894d      	ldrh	r5, [r1, #10]
 8002f2e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002f32:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002f36:	086d      	lsrs	r5, r5, #1
 8002f38:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 8002f3c:	006d      	lsls	r5, r5, #1
 8002f3e:	b2b6      	uxth	r6, r6
 8002f40:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 8002f42:	784c      	ldrb	r4, [r1, #1]
 8002f44:	780d      	ldrb	r5, [r1, #0]
 8002f46:	bbb4      	cbnz	r4, 8002fb6 <USB_ActivateEndpoint+0x202>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f48:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002f4c:	0466      	lsls	r6, r4, #17
 8002f4e:	d508      	bpl.n	8002f62 <USB_ActivateEndpoint+0x1ae>
 8002f50:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002f54:	4022      	ands	r2, r4
 8002f56:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f5e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f62:	780c      	ldrb	r4, [r1, #0]
 8002f64:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f68:	0655      	lsls	r5, r2, #25
 8002f6a:	d50b      	bpl.n	8002f84 <USB_ActivateEndpoint+0x1d0>
 8002f6c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f70:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f74:	0512      	lsls	r2, r2, #20
 8002f76:	0d12      	lsrs	r2, r2, #20
 8002f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f7c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002f80:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f84:	f248 0480 	movw	r4, #32896	; 0x8080
 8002f88:	780d      	ldrb	r5, [r1, #0]
 8002f8a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002f8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f96:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002f9a:	4322      	orrs	r2, r4
 8002f9c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fa0:	7809      	ldrb	r1, [r1, #0]
 8002fa2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002fa6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fae:	4314      	orrs	r4, r2
 8002fb0:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8002fb4:	e74d      	b.n	8002e52 <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fb6:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002fba:	0464      	lsls	r4, r4, #17
 8002fbc:	d508      	bpl.n	8002fd0 <USB_ActivateEndpoint+0x21c>
 8002fbe:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002fc2:	4022      	ands	r2, r4
 8002fc4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002fc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fcc:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fd0:	780c      	ldrb	r4, [r1, #0]
 8002fd2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002fd6:	0652      	lsls	r2, r2, #25
 8002fd8:	d50b      	bpl.n	8002ff2 <USB_ActivateEndpoint+0x23e>
 8002fda:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002fde:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fe2:	0512      	lsls	r2, r2, #20
 8002fe4:	0d12      	lsrs	r2, r2, #20
 8002fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002fee:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8002ff2:	78ca      	ldrb	r2, [r1, #3]
 8002ff4:	780c      	ldrb	r4, [r1, #0]
 8002ff6:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ff8:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <USB_ActivateEndpoint+0x274>)
 8002ffe:	ea02 0205 	and.w	r2, r2, r5
 8003002:	bf18      	it	ne
 8003004:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800300c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003010:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003014:	7809      	ldrb	r1, [r1, #0]
 8003016:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800301a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800301e:	0492      	lsls	r2, r2, #18
 8003020:	0c92      	lsrs	r2, r2, #18
 8003022:	e754      	b.n	8002ece <USB_ActivateEndpoint+0x11a>
 8003024:	ffff8f8f 	.word	0xffff8f8f
 8003028:	ffff8fbf 	.word	0xffff8fbf
 800302c:	ffff8000 	.word	0xffff8000

08003030 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003030:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8003032:	7b0c      	ldrb	r4, [r1, #12]
 8003034:	784a      	ldrb	r2, [r1, #1]
 8003036:	780b      	ldrb	r3, [r1, #0]
 8003038:	bbbc      	cbnz	r4, 80030aa <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 800303a:	b1f2      	cbz	r2, 800307a <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800303c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003040:	0652      	lsls	r2, r2, #25
 8003042:	d50b      	bpl.n	800305c <USB_DeactivateEndpoint+0x2c>
 8003044:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003048:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800304c:	0512      	lsls	r2, r2, #20
 800304e:	0d12      	lsrs	r2, r2, #20
 8003050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003054:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003058:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800305c:	780a      	ldrb	r2, [r1, #0]
 800305e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003062:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003066:	051b      	lsls	r3, r3, #20
 8003068:	0d1b      	lsrs	r3, r3, #20
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800306a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800306e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003072:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8003076:	2000      	movs	r0, #0
 8003078:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800307a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800307e:	0454      	lsls	r4, r2, #17
 8003080:	d50b      	bpl.n	800309a <USB_DeactivateEndpoint+0x6a>
 8003082:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003086:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800308a:	0512      	lsls	r2, r2, #20
 800308c:	0d12      	lsrs	r2, r2, #20
 800308e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003096:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800309a:	780a      	ldrb	r2, [r1, #0]
 800309c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a4:	049b      	lsls	r3, r3, #18
 80030a6:	0c9b      	lsrs	r3, r3, #18
 80030a8:	e7df      	b.n	800306a <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 80030aa:	2a00      	cmp	r2, #0
 80030ac:	d144      	bne.n	8003138 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80030b2:	0452      	lsls	r2, r2, #17
 80030b4:	d50b      	bpl.n	80030ce <USB_DeactivateEndpoint+0x9e>
 80030b6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80030ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030be:	0512      	lsls	r2, r2, #20
 80030c0:	0d12      	lsrs	r2, r2, #20
 80030c2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80030c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030ce:	780a      	ldrb	r2, [r1, #0]
 80030d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030d4:	065c      	lsls	r4, r3, #25
 80030d6:	d50b      	bpl.n	80030f0 <USB_DeactivateEndpoint+0xc0>
 80030d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e0:	051b      	lsls	r3, r3, #20
 80030e2:	0d1b      	lsrs	r3, r3, #20
 80030e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80030f0:	780a      	ldrb	r2, [r1, #0]
 80030f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030fa:	051b      	lsls	r3, r3, #20
 80030fc:	0d1b      	lsrs	r3, r3, #20
 80030fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003102:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003106:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800310a:	f248 0280 	movw	r2, #32896	; 0x8080
 800310e:	780c      	ldrb	r4, [r1, #0]
 8003110:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311c:	4313      	orrs	r3, r2
 800311e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003122:	7809      	ldrb	r1, [r1, #0]
 8003124:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003130:	431a      	orrs	r2, r3
 8003132:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8003136:	e79e      	b.n	8003076 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003138:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800313c:	0452      	lsls	r2, r2, #17
 800313e:	d50b      	bpl.n	8003158 <USB_DeactivateEndpoint+0x128>
 8003140:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003144:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003148:	0512      	lsls	r2, r2, #20
 800314a:	0d12      	lsrs	r2, r2, #20
 800314c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003150:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003154:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003158:	780a      	ldrb	r2, [r1, #0]
 800315a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800315e:	065b      	lsls	r3, r3, #25
 8003160:	d50b      	bpl.n	800317a <USB_DeactivateEndpoint+0x14a>
 8003162:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800316a:	051b      	lsls	r3, r3, #20
 800316c:	0d1b      	lsrs	r3, r3, #20
 800316e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003172:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003176:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800317a:	780a      	ldrb	r2, [r1, #0]
 800317c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003184:	051b      	lsls	r3, r3, #20
 8003186:	0d1b      	lsrs	r3, r3, #20
 8003188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800318c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003190:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003194:	f248 0280 	movw	r2, #32896	; 0x8080
 8003198:	780c      	ldrb	r4, [r1, #0]
 800319a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800319e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031ac:	7809      	ldrb	r1, [r1, #0]
 80031ae:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80031b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ba:	e7b9      	b.n	8003130 <USB_DeactivateEndpoint+0x100>

080031bc <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80031bc:	784b      	ldrb	r3, [r1, #1]
 80031be:	780a      	ldrb	r2, [r1, #0]
 80031c0:	b17b      	cbz	r3, 80031e2 <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80031c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ce:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80031d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80031de:	2000      	movs	r0, #0
 80031e0:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80031e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031f2:	e7ee      	b.n	80031d2 <USB_EPSetStall+0x16>

080031f4 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80031f4:	7b0b      	ldrb	r3, [r1, #12]
 80031f6:	bb23      	cbnz	r3, 8003242 <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 80031f8:	784b      	ldrb	r3, [r1, #1]
 80031fa:	780a      	ldrb	r2, [r1, #0]
 80031fc:	b31b      	cbz	r3, 8003246 <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003202:	065b      	lsls	r3, r3, #25
 8003204:	d50b      	bpl.n	800321e <USB_EPClearStall+0x2a>
 8003206:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800320a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800320e:	051b      	lsls	r3, r3, #20
 8003210:	0d1b      	lsrs	r3, r3, #20
 8003212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800321a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800321e:	78cb      	ldrb	r3, [r1, #3]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d00e      	beq.n	8003242 <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003224:	780a      	ldrb	r2, [r1, #0]
 8003226:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800322a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003232:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003242:	2000      	movs	r0, #0
 8003244:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003246:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800324a:	045b      	lsls	r3, r3, #17
 800324c:	d50b      	bpl.n	8003266 <USB_EPClearStall+0x72>
 800324e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003256:	051b      	lsls	r3, r3, #20
 8003258:	0d1b      	lsrs	r3, r3, #20
 800325a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800325e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003262:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003266:	780a      	ldrb	r2, [r1, #0]
 8003268:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800326c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003274:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003278:	e7dd      	b.n	8003236 <USB_EPClearStall+0x42>

0800327a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800327a:	b911      	cbnz	r1, 8003282 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003282:	2000      	movs	r0, #0
 8003284:	4770      	bx	lr

08003286 <USB_DevConnect>:
 8003286:	2000      	movs	r0, #0
 8003288:	4770      	bx	lr

0800328a <USB_DevDisconnect>:
 800328a:	2000      	movs	r0, #0
 800328c:	4770      	bx	lr

0800328e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800328e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003292:	4770      	bx	lr

08003294 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003294:	2000      	movs	r0, #0
 8003296:	4770      	bx	lr

08003298 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003298:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800329c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800329e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d100      	bne.n	80032ae <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80032ac:	4770      	bx	lr
 80032ae:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80032b2:	f822 0b04 	strh.w	r0, [r2], #4
 80032b6:	e7f7      	b.n	80032a8 <USB_WritePMA+0x10>

080032b8 <USB_EPStartXfer>:
{
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80032bc:	7849      	ldrb	r1, [r1, #1]
{
 80032be:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 80032c0:	2901      	cmp	r1, #1
 80032c2:	7b27      	ldrb	r7, [r4, #12]
 80032c4:	f040 8183 	bne.w	80035ce <USB_EPStartXfer+0x316>
    if (ep->xfer_len > ep->maxpacket)
 80032c8:	6922      	ldr	r2, [r4, #16]
 80032ca:	69a6      	ldr	r6, [r4, #24]
 80032cc:	6961      	ldr	r1, [r4, #20]
 80032ce:	4296      	cmp	r6, r2
 80032d0:	bf28      	it	cs
 80032d2:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 80032d4:	b9ef      	cbnz	r7, 8003312 <USB_EPStartXfer+0x5a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80032d6:	b2b6      	uxth	r6, r6
 80032d8:	4633      	mov	r3, r6
 80032da:	88e2      	ldrh	r2, [r4, #6]
 80032dc:	f7ff ffdc 	bl	8003298 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80032e0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80032e4:	7822      	ldrb	r2, [r4, #0]
 80032e6:	f205 4304 	addw	r3, r5, #1028	; 0x404
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	440b      	add	r3, r1
 80032ee:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80032f0:	7822      	ldrb	r2, [r4, #0]
 80032f2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80032f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032fe:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8003302:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8003310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8003312:	78e3      	ldrb	r3, [r4, #3]
 8003314:	7827      	ldrb	r7, [r4, #0]
 8003316:	2b02      	cmp	r3, #2
 8003318:	f040 8124 	bne.w	8003564 <USB_EPStartXfer+0x2ac>
        if (ep->xfer_len_db > ep->maxpacket)
 800331c:	6a23      	ldr	r3, [r4, #32]
 800331e:	429a      	cmp	r2, r3
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003320:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8003324:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8003328:	ea4f 5202 	mov.w	r2, r2, lsl #20
 800332c:	ea4f 5212 	mov.w	r2, r2, lsr #20
        if (ep->xfer_len_db > ep->maxpacket)
 8003330:	f080 8107 	bcs.w	8003542 <USB_EPStartXfer+0x28a>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003334:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800333c:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003340:	7822      	ldrb	r2, [r4, #0]
          ep->xfer_len_db -= len;
 8003342:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003344:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8003348:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800334a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800334e:	b2b3      	uxth	r3, r6
 8003350:	7860      	ldrb	r0, [r4, #1]
 8003352:	d07c      	beq.n	800344e <USB_EPStartXfer+0x196>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003354:	2800      	cmp	r0, #0
 8003356:	d14d      	bne.n	80033f4 <USB_EPStartXfer+0x13c>
 8003358:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800335c:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8003360:	4407      	add	r7, r0
 8003362:	0112      	lsls	r2, r2, #4
 8003364:	2e00      	cmp	r6, #0
 8003366:	d131      	bne.n	80033cc <USB_EPStartXfer+0x114>
 8003368:	5ab8      	ldrh	r0, [r7, r2]
 800336a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800336e:	0400      	lsls	r0, r0, #16
 8003370:	0c00      	lsrs	r0, r0, #16
 8003372:	52b8      	strh	r0, [r7, r2]
 8003374:	5ab8      	ldrh	r0, [r7, r2]
 8003376:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800337a:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800337c:	8962      	ldrh	r2, [r4, #10]
 800337e:	4628      	mov	r0, r5
 8003380:	f7ff ff8a 	bl	8003298 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003384:	6a22      	ldr	r2, [r4, #32]
 8003386:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003388:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800338a:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800338c:	bf89      	itett	hi
 800338e:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 8003390:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 8003392:	6222      	strhi	r2, [r4, #32]
 8003394:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003396:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8003398:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 800339a:	bf98      	it	ls
 800339c:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 800339e:	6161      	str	r1, [r4, #20]
 80033a0:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80033a2:	2800      	cmp	r0, #0
 80033a4:	d148      	bne.n	8003438 <USB_EPStartXfer+0x180>
 80033a6:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80033aa:	7827      	ldrb	r7, [r4, #0]
 80033ac:	f205 4604 	addw	r6, r5, #1028	; 0x404
 80033b0:	013f      	lsls	r7, r7, #4
 80033b2:	4406      	add	r6, r0
 80033b4:	bb42      	cbnz	r2, 8003408 <USB_EPStartXfer+0x150>
 80033b6:	5bba      	ldrh	r2, [r7, r6]
 80033b8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80033bc:	0412      	lsls	r2, r2, #16
 80033be:	0c12      	lsrs	r2, r2, #16
 80033c0:	53ba      	strh	r2, [r7, r6]
 80033c2:	5bba      	ldrh	r2, [r7, r6]
 80033c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c8:	53ba      	strh	r2, [r7, r6]
 80033ca:	e026      	b.n	800341a <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033cc:	2e3e      	cmp	r6, #62	; 0x3e
 80033ce:	d807      	bhi.n	80033e0 <USB_EPStartXfer+0x128>
 80033d0:	0870      	lsrs	r0, r6, #1
 80033d2:	f016 0f01 	tst.w	r6, #1
 80033d6:	bf18      	it	ne
 80033d8:	3001      	addne	r0, #1
 80033da:	0280      	lsls	r0, r0, #10
 80033dc:	b280      	uxth	r0, r0
 80033de:	e7cc      	b.n	800337a <USB_EPStartXfer+0xc2>
 80033e0:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 80033e4:	06f0      	lsls	r0, r6, #27
 80033e6:	4897      	ldr	r0, [pc, #604]	; (8003644 <USB_EPStartXfer+0x38c>)
 80033e8:	bf08      	it	eq
 80033ea:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80033ee:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80033f2:	e7f3      	b.n	80033dc <USB_EPStartXfer+0x124>
 80033f4:	2801      	cmp	r0, #1
 80033f6:	d1c1      	bne.n	800337c <USB_EPStartXfer+0xc4>
 80033f8:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 80033fc:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8003400:	4438      	add	r0, r7
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	5283      	strh	r3, [r0, r2]
 8003406:	e7b9      	b.n	800337c <USB_EPStartXfer+0xc4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003408:	2a3e      	cmp	r2, #62	; 0x3e
 800340a:	d80b      	bhi.n	8003424 <USB_EPStartXfer+0x16c>
 800340c:	0850      	lsrs	r0, r2, #1
 800340e:	07d2      	lsls	r2, r2, #31
 8003410:	bf48      	it	mi
 8003412:	3001      	addmi	r0, #1
 8003414:	0280      	lsls	r0, r0, #10
 8003416:	b280      	uxth	r0, r0
 8003418:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800341a:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800341c:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800341e:	f7ff ff3b 	bl	8003298 <USB_WritePMA>
 8003422:	e765      	b.n	80032f0 <USB_EPStartXfer+0x38>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003424:	0950      	lsrs	r0, r2, #5
 8003426:	06d2      	lsls	r2, r2, #27
 8003428:	4a86      	ldr	r2, [pc, #536]	; (8003644 <USB_EPStartXfer+0x38c>)
 800342a:	bf08      	it	eq
 800342c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003430:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8003434:	b292      	uxth	r2, r2
 8003436:	e7c7      	b.n	80033c8 <USB_EPStartXfer+0x110>
 8003438:	2801      	cmp	r0, #1
 800343a:	d1ee      	bne.n	800341a <USB_EPStartXfer+0x162>
 800343c:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8003440:	7820      	ldrb	r0, [r4, #0]
 8003442:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003446:	0100      	lsls	r0, r0, #4
 8003448:	4432      	add	r2, r6
 800344a:	5283      	strh	r3, [r0, r2]
 800344c:	e7e5      	b.n	800341a <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800344e:	2800      	cmp	r0, #0
 8003450:	d14d      	bne.n	80034ee <USB_EPStartXfer+0x236>
 8003452:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003456:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800345a:	4407      	add	r7, r0
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	2e00      	cmp	r6, #0
 8003460:	d131      	bne.n	80034c6 <USB_EPStartXfer+0x20e>
 8003462:	5ab8      	ldrh	r0, [r7, r2]
 8003464:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8003468:	0400      	lsls	r0, r0, #16
 800346a:	0c00      	lsrs	r0, r0, #16
 800346c:	52b8      	strh	r0, [r7, r2]
 800346e:	5ab8      	ldrh	r0, [r7, r2]
 8003470:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003474:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003476:	8922      	ldrh	r2, [r4, #8]
 8003478:	4628      	mov	r0, r5
 800347a:	f7ff ff0d 	bl	8003298 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800347e:	6a22      	ldr	r2, [r4, #32]
 8003480:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003482:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003484:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8003486:	bf89      	itett	hi
 8003488:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 800348a:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 800348c:	6222      	strhi	r2, [r4, #32]
 800348e:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003490:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8003492:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 8003494:	bf98      	it	ls
 8003496:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 8003498:	6161      	str	r1, [r4, #20]
 800349a:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800349c:	2800      	cmp	r0, #0
 800349e:	d145      	bne.n	800352c <USB_EPStartXfer+0x274>
 80034a0:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80034a4:	7827      	ldrb	r7, [r4, #0]
 80034a6:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 80034aa:	013f      	lsls	r7, r7, #4
 80034ac:	4406      	add	r6, r0
 80034ae:	bb42      	cbnz	r2, 8003502 <USB_EPStartXfer+0x24a>
 80034b0:	5bba      	ldrh	r2, [r7, r6]
 80034b2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80034b6:	0412      	lsls	r2, r2, #16
 80034b8:	0c12      	lsrs	r2, r2, #16
 80034ba:	53ba      	strh	r2, [r7, r6]
 80034bc:	5bba      	ldrh	r2, [r7, r6]
 80034be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c2:	53ba      	strh	r2, [r7, r6]
 80034c4:	e026      	b.n	8003514 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80034c6:	2e3e      	cmp	r6, #62	; 0x3e
 80034c8:	d807      	bhi.n	80034da <USB_EPStartXfer+0x222>
 80034ca:	0870      	lsrs	r0, r6, #1
 80034cc:	f016 0f01 	tst.w	r6, #1
 80034d0:	bf18      	it	ne
 80034d2:	3001      	addne	r0, #1
 80034d4:	0280      	lsls	r0, r0, #10
 80034d6:	b280      	uxth	r0, r0
 80034d8:	e7cc      	b.n	8003474 <USB_EPStartXfer+0x1bc>
 80034da:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 80034de:	06f0      	lsls	r0, r6, #27
 80034e0:	4858      	ldr	r0, [pc, #352]	; (8003644 <USB_EPStartXfer+0x38c>)
 80034e2:	bf08      	it	eq
 80034e4:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80034e8:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80034ec:	e7f3      	b.n	80034d6 <USB_EPStartXfer+0x21e>
 80034ee:	2801      	cmp	r0, #1
 80034f0:	d1c1      	bne.n	8003476 <USB_EPStartXfer+0x1be>
 80034f2:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 80034f6:	f205 4004 	addw	r0, r5, #1028	; 0x404
 80034fa:	4438      	add	r0, r7
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	5283      	strh	r3, [r0, r2]
 8003500:	e7b9      	b.n	8003476 <USB_EPStartXfer+0x1be>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003502:	2a3e      	cmp	r2, #62	; 0x3e
 8003504:	d808      	bhi.n	8003518 <USB_EPStartXfer+0x260>
 8003506:	0850      	lsrs	r0, r2, #1
 8003508:	07d2      	lsls	r2, r2, #31
 800350a:	bf48      	it	mi
 800350c:	3001      	addmi	r0, #1
 800350e:	0280      	lsls	r0, r0, #10
 8003510:	b280      	uxth	r0, r0
 8003512:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003514:	8962      	ldrh	r2, [r4, #10]
 8003516:	e781      	b.n	800341c <USB_EPStartXfer+0x164>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003518:	0950      	lsrs	r0, r2, #5
 800351a:	06d2      	lsls	r2, r2, #27
 800351c:	4a49      	ldr	r2, [pc, #292]	; (8003644 <USB_EPStartXfer+0x38c>)
 800351e:	bf08      	it	eq
 8003520:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003524:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8003528:	b292      	uxth	r2, r2
 800352a:	e7ca      	b.n	80034c2 <USB_EPStartXfer+0x20a>
 800352c:	2801      	cmp	r0, #1
 800352e:	d1f1      	bne.n	8003514 <USB_EPStartXfer+0x25c>
 8003530:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8003534:	7820      	ldrb	r0, [r4, #0]
 8003536:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800353a:	0100      	lsls	r0, r0, #4
 800353c:	4432      	add	r2, r6
 800353e:	5283      	strh	r3, [r0, r2]
 8003540:	e7e8      	b.n	8003514 <USB_EPStartXfer+0x25c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003546:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800354a:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800354e:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003552:	7826      	ldrb	r6, [r4, #0]
 8003554:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003558:	443a      	add	r2, r7
 800355a:	0136      	lsls	r6, r6, #4
 800355c:	b29b      	uxth	r3, r3
 800355e:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003560:	8922      	ldrh	r2, [r4, #8]
 8003562:	e75c      	b.n	800341e <USB_EPStartXfer+0x166>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003564:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003568:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800356c:	0652      	lsls	r2, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800356e:	bf4b      	itete	mi
 8003570:	f205 420c 	addwmi	r2, r5, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003574:	f205 4204 	addwpl	r2, r5, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003578:	1812      	addmi	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800357a:	1812      	addpl	r2, r2, r0
 800357c:	b2b3      	uxth	r3, r6
 800357e:	ea4f 1707 	mov.w	r7, r7, lsl #4
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003582:	bf4b      	itete	mi
 8003584:	53d3      	strhmi	r3, [r2, r7]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003586:	53d3      	strhpl	r3, [r2, r7]
          pmabuffer = ep->pmaaddr1;
 8003588:	8962      	ldrhmi	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 800358a:	8922      	ldrhpl	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800358c:	4628      	mov	r0, r5
 800358e:	f7ff fe83 	bl	8003298 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003592:	7863      	ldrb	r3, [r4, #1]
 8003594:	7822      	ldrb	r2, [r4, #0]
 8003596:	b963      	cbnz	r3, 80035b2 <USB_EPStartXfer+0x2fa>
 8003598:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800359c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035a0:	051b      	lsls	r3, r3, #20
 80035a2:	0d1b      	lsrs	r3, r3, #20
 80035a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035ac:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80035b0:	e69e      	b.n	80032f0 <USB_EPStartXfer+0x38>
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	f47f ae9c 	bne.w	80032f0 <USB_EPStartXfer+0x38>
 80035b8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80035bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035c0:	051b      	lsls	r3, r3, #20
 80035c2:	0d1b      	lsrs	r3, r3, #20
 80035c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035cc:	e7ee      	b.n	80035ac <USB_EPStartXfer+0x2f4>
    if (ep->doublebuffer == 0U)
 80035ce:	2f00      	cmp	r7, #0
 80035d0:	d13a      	bne.n	8003648 <USB_EPStartXfer+0x390>
      if (ep->xfer_len > ep->maxpacket)
 80035d2:	69a2      	ldr	r2, [r4, #24]
 80035d4:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035d6:	f205 410c 	addw	r1, r5, #1036	; 0x40c
      if (ep->xfer_len > ep->maxpacket)
 80035da:	429a      	cmp	r2, r3
        ep->xfer_len = 0U;
 80035dc:	bf92      	itee	ls
 80035de:	4613      	movls	r3, r2
        ep->xfer_len -= len;
 80035e0:	1ad2      	subhi	r2, r2, r3
 80035e2:	61a2      	strhi	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035e4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80035e8:	7820      	ldrb	r0, [r4, #0]
        ep->xfer_len = 0U;
 80035ea:	bf98      	it	ls
 80035ec:	61a7      	strls	r7, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035ee:	0100      	lsls	r0, r0, #4
 80035f0:	4411      	add	r1, r2
 80035f2:	b953      	cbnz	r3, 800360a <USB_EPStartXfer+0x352>
 80035f4:	5a43      	ldrh	r3, [r0, r1]
 80035f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	5243      	strh	r3, [r0, r1]
 8003600:	5a43      	ldrh	r3, [r0, r1]
 8003602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003606:	5243      	strh	r3, [r0, r1]
 8003608:	e008      	b.n	800361c <USB_EPStartXfer+0x364>
 800360a:	2b3e      	cmp	r3, #62	; 0x3e
 800360c:	d810      	bhi.n	8003630 <USB_EPStartXfer+0x378>
 800360e:	085a      	lsrs	r2, r3, #1
 8003610:	07df      	lsls	r7, r3, #31
 8003612:	bf48      	it	mi
 8003614:	3201      	addmi	r2, #1
 8003616:	0292      	lsls	r2, r2, #10
 8003618:	b292      	uxth	r2, r2
 800361a:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800361c:	7822      	ldrb	r2, [r4, #0]
 800361e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800362e:	e668      	b.n	8003302 <USB_EPStartXfer+0x4a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003630:	095a      	lsrs	r2, r3, #5
 8003632:	06de      	lsls	r6, r3, #27
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <USB_EPStartXfer+0x38c>)
 8003636:	bf08      	it	eq
 8003638:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800363c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8003640:	b29b      	uxth	r3, r3
 8003642:	e7e0      	b.n	8003606 <USB_EPStartXfer+0x34e>
 8003644:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8003648:	78e3      	ldrb	r3, [r4, #3]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d174      	bne.n	8003738 <USB_EPStartXfer+0x480>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800364e:	b999      	cbnz	r1, 8003678 <USB_EPStartXfer+0x3c0>
 8003650:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003654:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003658:	7821      	ldrb	r1, [r4, #0]
 800365a:	6920      	ldr	r0, [r4, #16]
 800365c:	0109      	lsls	r1, r1, #4
 800365e:	441a      	add	r2, r3
 8003660:	2800      	cmp	r0, #0
 8003662:	d13a      	bne.n	80036da <USB_EPStartXfer+0x422>
 8003664:	5a8b      	ldrh	r3, [r1, r2]
 8003666:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	528b      	strh	r3, [r1, r2]
 8003670:	5a8b      	ldrh	r3, [r1, r2]
 8003672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003676:	528b      	strh	r3, [r1, r2]
 8003678:	7862      	ldrb	r2, [r4, #1]
 800367a:	7823      	ldrb	r3, [r4, #0]
 800367c:	2a00      	cmp	r2, #0
 800367e:	d150      	bne.n	8003722 <USB_EPStartXfer+0x46a>
 8003680:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003684:	6920      	ldr	r0, [r4, #16]
 8003686:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800368a:	4411      	add	r1, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	2800      	cmp	r0, #0
 8003690:	d135      	bne.n	80036fe <USB_EPStartXfer+0x446>
 8003692:	5aca      	ldrh	r2, [r1, r3]
 8003694:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003698:	0412      	lsls	r2, r2, #16
 800369a:	0c12      	lsrs	r2, r2, #16
 800369c:	52ca      	strh	r2, [r1, r3]
 800369e:	5aca      	ldrh	r2, [r1, r3]
 80036a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036a4:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 80036a6:	69e3      	ldr	r3, [r4, #28]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0b7      	beq.n	800361c <USB_EPStartXfer+0x364>
 80036ac:	f244 0140 	movw	r1, #16448	; 0x4040
 80036b0:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80036b2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80036b6:	400b      	ands	r3, r1
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80036b8:	428b      	cmp	r3, r1
 80036ba:	d001      	beq.n	80036c0 <USB_EPStartXfer+0x408>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ad      	bne.n	800361c <USB_EPStartXfer+0x364>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80036c0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80036c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036c8:	051b      	lsls	r3, r3, #20
 80036ca:	0d1b      	lsrs	r3, r3, #20
 80036cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036d4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80036d8:	e7a0      	b.n	800361c <USB_EPStartXfer+0x364>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80036da:	283e      	cmp	r0, #62	; 0x3e
 80036dc:	d806      	bhi.n	80036ec <USB_EPStartXfer+0x434>
 80036de:	0843      	lsrs	r3, r0, #1
 80036e0:	07c0      	lsls	r0, r0, #31
 80036e2:	bf48      	it	mi
 80036e4:	3301      	addmi	r3, #1
 80036e6:	029b      	lsls	r3, r3, #10
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	e7c4      	b.n	8003676 <USB_EPStartXfer+0x3be>
 80036ec:	0946      	lsrs	r6, r0, #5
 80036ee:	06c7      	lsls	r7, r0, #27
 80036f0:	4b46      	ldr	r3, [pc, #280]	; (800380c <USB_EPStartXfer+0x554>)
 80036f2:	bf08      	it	eq
 80036f4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80036f8:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80036fc:	e7f4      	b.n	80036e8 <USB_EPStartXfer+0x430>
 80036fe:	283e      	cmp	r0, #62	; 0x3e
 8003700:	d806      	bhi.n	8003710 <USB_EPStartXfer+0x458>
 8003702:	0842      	lsrs	r2, r0, #1
 8003704:	07c0      	lsls	r0, r0, #31
 8003706:	bf48      	it	mi
 8003708:	3201      	addmi	r2, #1
 800370a:	0292      	lsls	r2, r2, #10
 800370c:	b292      	uxth	r2, r2
 800370e:	e7c9      	b.n	80036a4 <USB_EPStartXfer+0x3ec>
 8003710:	0946      	lsrs	r6, r0, #5
 8003712:	06c7      	lsls	r7, r0, #27
 8003714:	4a3d      	ldr	r2, [pc, #244]	; (800380c <USB_EPStartXfer+0x554>)
 8003716:	bf08      	it	eq
 8003718:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800371c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003720:	e7f4      	b.n	800370c <USB_EPStartXfer+0x454>
 8003722:	2a01      	cmp	r2, #1
 8003724:	d1bf      	bne.n	80036a6 <USB_EPStartXfer+0x3ee>
 8003726:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800372a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800372e:	440a      	add	r2, r1
 8003730:	8a21      	ldrh	r1, [r4, #16]
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	52d1      	strh	r1, [r2, r3]
 8003736:	e7b6      	b.n	80036a6 <USB_EPStartXfer+0x3ee>
      else if (ep->type == EP_TYPE_ISOC)
 8003738:	2b01      	cmp	r3, #1
 800373a:	d164      	bne.n	8003806 <USB_EPStartXfer+0x54e>
        if (ep->xfer_len > ep->maxpacket)
 800373c:	69a2      	ldr	r2, [r4, #24]
 800373e:	6923      	ldr	r3, [r4, #16]
 8003740:	429a      	cmp	r2, r3
          ep->xfer_len = 0U;
 8003742:	bf95      	itete	ls
 8003744:	2300      	movls	r3, #0
          ep->xfer_len -= len;
 8003746:	1ad2      	subhi	r2, r2, r3
          ep->xfer_len = 0U;
 8003748:	61a3      	strls	r3, [r4, #24]
          ep->xfer_len -= len;
 800374a:	61a2      	strhi	r2, [r4, #24]
          ep->xfer_len = 0U;
 800374c:	bf98      	it	ls
 800374e:	4613      	movls	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003750:	b989      	cbnz	r1, 8003776 <USB_EPStartXfer+0x4be>
 8003752:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003756:	7820      	ldrb	r0, [r4, #0]
 8003758:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800375c:	0100      	lsls	r0, r0, #4
 800375e:	4411      	add	r1, r2
 8003760:	b9fb      	cbnz	r3, 80037a2 <USB_EPStartXfer+0x4ea>
 8003762:	5a42      	ldrh	r2, [r0, r1]
 8003764:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003768:	0412      	lsls	r2, r2, #16
 800376a:	0c12      	lsrs	r2, r2, #16
 800376c:	5242      	strh	r2, [r0, r1]
 800376e:	5a42      	ldrh	r2, [r0, r1]
 8003770:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003774:	5242      	strh	r2, [r0, r1]
 8003776:	7861      	ldrb	r1, [r4, #1]
 8003778:	7822      	ldrb	r2, [r4, #0]
 800377a:	2900      	cmp	r1, #0
 800377c:	d137      	bne.n	80037ee <USB_EPStartXfer+0x536>
 800377e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003782:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8003786:	4408      	add	r0, r1
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	b9e3      	cbnz	r3, 80037c6 <USB_EPStartXfer+0x50e>
 800378c:	5a83      	ldrh	r3, [r0, r2]
 800378e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	5283      	strh	r3, [r0, r2]
 8003798:	5a83      	ldrh	r3, [r0, r2]
 800379a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379e:	5283      	strh	r3, [r0, r2]
 80037a0:	e73c      	b.n	800361c <USB_EPStartXfer+0x364>
 80037a2:	2b3e      	cmp	r3, #62	; 0x3e
 80037a4:	d806      	bhi.n	80037b4 <USB_EPStartXfer+0x4fc>
 80037a6:	085a      	lsrs	r2, r3, #1
 80037a8:	07de      	lsls	r6, r3, #31
 80037aa:	bf48      	it	mi
 80037ac:	3201      	addmi	r2, #1
 80037ae:	0292      	lsls	r2, r2, #10
 80037b0:	b292      	uxth	r2, r2
 80037b2:	e7df      	b.n	8003774 <USB_EPStartXfer+0x4bc>
 80037b4:	095e      	lsrs	r6, r3, #5
 80037b6:	06df      	lsls	r7, r3, #27
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <USB_EPStartXfer+0x554>)
 80037ba:	bf08      	it	eq
 80037bc:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80037c0:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80037c4:	e7f4      	b.n	80037b0 <USB_EPStartXfer+0x4f8>
 80037c6:	2b3e      	cmp	r3, #62	; 0x3e
 80037c8:	d807      	bhi.n	80037da <USB_EPStartXfer+0x522>
 80037ca:	0859      	lsrs	r1, r3, #1
 80037cc:	07de      	lsls	r6, r3, #31
 80037ce:	bf48      	it	mi
 80037d0:	3101      	addmi	r1, #1
 80037d2:	0289      	lsls	r1, r1, #10
 80037d4:	b289      	uxth	r1, r1
 80037d6:	5281      	strh	r1, [r0, r2]
 80037d8:	e720      	b.n	800361c <USB_EPStartXfer+0x364>
 80037da:	0959      	lsrs	r1, r3, #5
 80037dc:	06db      	lsls	r3, r3, #27
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <USB_EPStartXfer+0x554>)
 80037e0:	bf08      	it	eq
 80037e2:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80037e6:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	e7d7      	b.n	800379e <USB_EPStartXfer+0x4e6>
 80037ee:	2901      	cmp	r1, #1
 80037f0:	f47f af14 	bne.w	800361c <USB_EPStartXfer+0x364>
 80037f4:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80037f8:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80037fc:	4401      	add	r1, r0
 80037fe:	0112      	lsls	r2, r2, #4
 8003800:	b29b      	uxth	r3, r3
 8003802:	528b      	strh	r3, [r1, r2]
 8003804:	e70a      	b.n	800361c <USB_EPStartXfer+0x364>
        return HAL_ERROR;
 8003806:	2001      	movs	r0, #1
 8003808:	e582      	b.n	8003310 <USB_EPStartXfer+0x58>
 800380a:	bf00      	nop
 800380c:	ffff8000 	.word	0xffff8000

08003810 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003810:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8003814:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003816:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 800381a:	085d      	lsrs	r5, r3, #1
 800381c:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800381e:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8003820:	462e      	mov	r6, r5
 8003822:	3002      	adds	r0, #2
 8003824:	b936      	cbnz	r6, 8003834 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003826:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8003828:	bf44      	itt	mi
 800382a:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800382e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8003832:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003834:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8003838:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 800383a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800383c:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003840:	0a24      	lsrs	r4, r4, #8
 8003842:	f800 4c01 	strb.w	r4, [r0, #-1]
 8003846:	e7ec      	b.n	8003822 <USB_ReadPMA+0x12>

08003848 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003848:	4b01      	ldr	r3, [pc, #4]	; (8003850 <LL_SetSystemCoreClock+0x8>)
 800384a:	6018      	str	r0, [r3, #0]
}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000000 	.word	0x20000000

08003854 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003854:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003858:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800385a:	b16b      	cbz	r3, 8003878 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800385c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003860:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003864:	28ff      	cmp	r0, #255	; 0xff
 8003866:	d007      	beq.n	8003878 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800386e:	4621      	mov	r1, r4
 8003870:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003872:	23ff      	movs	r3, #255	; 0xff
 8003874:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003878:	2000      	movs	r0, #0
 800387a:	bd10      	pop	{r4, pc}

0800387c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800387c:	2343      	movs	r3, #67	; 0x43
 800387e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003880:	4800      	ldr	r0, [pc, #0]	; (8003884 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003882:	4770      	bx	lr
 8003884:	20000044 	.word	0x20000044

08003888 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003888:	2343      	movs	r3, #67	; 0x43
 800388a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800388c:	4800      	ldr	r0, [pc, #0]	; (8003890 <USBD_CDC_GetHSCfgDesc+0x8>)
 800388e:	4770      	bx	lr
 8003890:	20000088 	.word	0x20000088

08003894 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003894:	2343      	movs	r3, #67	; 0x43
 8003896:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003898:	4800      	ldr	r0, [pc, #0]	; (800389c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800389a:	4770      	bx	lr
 800389c:	200000d8 	.word	0x200000d8

080038a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80038a0:	230a      	movs	r3, #10
 80038a2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80038a4:	4800      	ldr	r0, [pc, #0]	; (80038a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80038a6:	4770      	bx	lr
 80038a8:	200000cc 	.word	0x200000cc

080038ac <USBD_CDC_DataOut>:
{
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80038b0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80038b4:	f000 ff14 	bl	80046e0 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80038b8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80038bc:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80038c0:	b14b      	cbz	r3, 80038d6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80038c2:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 80038c6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80038d0:	4798      	blx	r3
    return USBD_OK;
 80038d2:	2000      	movs	r0, #0
}
 80038d4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80038d6:	2002      	movs	r0, #2
 80038d8:	e7fc      	b.n	80038d4 <USBD_CDC_DataOut+0x28>

080038da <USBD_CDC_DataIn>:
{
 80038da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80038dc:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80038e0:	b1d6      	cbz	r6, 8003918 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80038e2:	2314      	movs	r3, #20
 80038e4:	fb03 0301 	mla	r3, r3, r1, r0
 80038e8:	69dd      	ldr	r5, [r3, #28]
 80038ea:	b18d      	cbz	r5, 8003910 <USBD_CDC_DataIn+0x36>
 80038ec:	2728      	movs	r7, #40	; 0x28
 80038ee:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 80038f2:	fb07 4201 	mla	r2, r7, r1, r4
 80038f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038f8:	fbb5 f4f2 	udiv	r4, r5, r2
 80038fc:	fb02 5414 	mls	r4, r2, r4, r5
 8003900:	b934      	cbnz	r4, 8003910 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8003902:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003904:	4622      	mov	r2, r4
 8003906:	4623      	mov	r3, r4
 8003908:	f000 fece 	bl	80046a8 <USBD_LL_Transmit>
    return USBD_OK;
 800390c:	4620      	mov	r0, r4
}
 800390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003910:	2000      	movs	r0, #0
 8003912:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8003916:	e7fa      	b.n	800390e <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8003918:	2002      	movs	r0, #2
 800391a:	e7f8      	b.n	800390e <USBD_CDC_DataIn+0x34>

0800391c <USBD_CDC_Setup>:
{
 800391c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8003920:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003924:	780a      	ldrb	r2, [r1, #0]
{
 8003926:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003928:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 800392c:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800392e:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003932:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003936:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800393a:	d028      	beq.n	800398e <USBD_CDC_Setup+0x72>
 800393c:	2c20      	cmp	r4, #32
 800393e:	d145      	bne.n	80039cc <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8003940:	88cc      	ldrh	r4, [r1, #6]
 8003942:	784b      	ldrb	r3, [r1, #1]
 8003944:	b1e4      	cbz	r4, 8003980 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003946:	0612      	lsls	r2, r2, #24
 8003948:	d511      	bpl.n	800396e <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800394a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800394e:	4639      	mov	r1, r7
 8003950:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003954:	4618      	mov	r0, r3
 8003956:	4622      	mov	r2, r4
 8003958:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800395a:	88f2      	ldrh	r2, [r6, #6]
 800395c:	4639      	mov	r1, r7
 800395e:	4628      	mov	r0, r5
 8003960:	f000 fc45 	bl	80041ee <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003964:	4644      	mov	r4, r8
}
 8003966:	4620      	mov	r0, r4
 8003968:	b003      	add	sp, #12
 800396a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 800396e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003972:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003976:	4622      	mov	r2, r4
 8003978:	4639      	mov	r1, r7
 800397a:	f000 fc4d 	bl	8004218 <USBD_CtlPrepareRx>
 800397e:	e7f1      	b.n	8003964 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003980:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003984:	4618      	mov	r0, r3
 8003986:	6895      	ldr	r5, [r2, #8]
 8003988:	4622      	mov	r2, r4
 800398a:	47a8      	blx	r5
 800398c:	e7eb      	b.n	8003966 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800398e:	784f      	ldrb	r7, [r1, #1]
 8003990:	2f0a      	cmp	r7, #10
 8003992:	d00d      	beq.n	80039b0 <USBD_CDC_Setup+0x94>
 8003994:	2f0b      	cmp	r7, #11
 8003996:	d015      	beq.n	80039c4 <USBD_CDC_Setup+0xa8>
 8003998:	b9c7      	cbnz	r7, 80039cc <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800399a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d114      	bne.n	80039cc <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80039a2:	2202      	movs	r2, #2
 80039a4:	f10d 0106 	add.w	r1, sp, #6
 80039a8:	f000 fc21 	bl	80041ee <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80039ac:	463c      	mov	r4, r7
 80039ae:	e7da      	b.n	8003966 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80039b0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d109      	bne.n	80039cc <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80039b8:	2201      	movs	r2, #1
 80039ba:	f10d 0105 	add.w	r1, sp, #5
 80039be:	f000 fc16 	bl	80041ee <USBD_CtlSendData>
 80039c2:	e7d0      	b.n	8003966 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80039c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d0cc      	beq.n	8003966 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 80039cc:	4631      	mov	r1, r6
 80039ce:	4628      	mov	r0, r5
 80039d0:	f000 fbe6 	bl	80041a0 <USBD_CtlError>
          ret = USBD_FAIL;
 80039d4:	2402      	movs	r4, #2
          break;
 80039d6:	e7c6      	b.n	8003966 <USBD_CDC_Setup+0x4a>

080039d8 <USBD_CDC_DeInit>:
{
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80039dc:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80039de:	2181      	movs	r1, #129	; 0x81
 80039e0:	f000 fe18 	bl	8004614 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80039e4:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80039e6:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80039e8:	4620      	mov	r0, r4
 80039ea:	f000 fe13 	bl	8004614 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80039ee:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80039f2:	2182      	movs	r1, #130	; 0x82
 80039f4:	4620      	mov	r0, r4
 80039f6:	f000 fe0d 	bl	8004614 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80039fa:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80039fe:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003a00:	b14b      	cbz	r3, 8003a16 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003a02:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003a0a:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003a0e:	f000 fe6f 	bl	80046f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8003a12:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003a16:	2000      	movs	r0, #0
 8003a18:	bd38      	pop	{r3, r4, r5, pc}

08003a1a <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a1a:	7c03      	ldrb	r3, [r0, #16]
{
 8003a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a20:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a22:	bbcb      	cbnz	r3, 8003a98 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a28:	2202      	movs	r2, #2
 8003a2a:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003a2c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003a2e:	f000 fde1 	bl	80045f4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003a32:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003a36:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003a38:	4629      	mov	r1, r5
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f000 fdd9 	bl	80045f4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003a42:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003a46:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003a48:	2308      	movs	r3, #8
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	2182      	movs	r1, #130	; 0x82
 8003a4e:	4620      	mov	r0, r4
 8003a50:	f000 fdd0 	bl	80045f4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003a54:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003a56:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003a5a:	f000 fe45 	bl	80046e8 <USBD_static_malloc>
 8003a5e:	4606      	mov	r6, r0
 8003a60:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003a64:	b350      	cbz	r0, 8003abc <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8003a66:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003a68:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a70:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8003a74:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8003a78:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a7c:	f1b8 0f00 	cmp.w	r8, #0
 8003a80:	d113      	bne.n	8003aaa <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a86:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f000 fe19 	bl	80046c4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003a92:	4640      	mov	r0, r8
}
 8003a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003a98:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003a9a:	2340      	movs	r3, #64	; 0x40
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	2181      	movs	r1, #129	; 0x81
 8003aa0:	f000 fda8 	bl	80045f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003aa4:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003aa6:	2340      	movs	r3, #64	; 0x40
 8003aa8:	e7c6      	b.n	8003a38 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003aaa:	2340      	movs	r3, #64	; 0x40
 8003aac:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f000 fe06 	bl	80046c4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003ab8:	4638      	mov	r0, r7
 8003aba:	e7eb      	b.n	8003a94 <USBD_CDC_Init+0x7a>
    ret = 1U;
 8003abc:	4628      	mov	r0, r5
 8003abe:	e7e9      	b.n	8003a94 <USBD_CDC_Init+0x7a>

08003ac0 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003ac0:	b119      	cbz	r1, 8003aca <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003ac2:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003aca:	2002      	movs	r0, #2
  }

  return ret;
}
 8003acc:	4770      	bx	lr

08003ace <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ace:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8003ad2:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003ad4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003ad8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003adc:	4770      	bx	lr

08003ade <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8003ade:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8003ae2:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003ae4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003ae8:	4770      	bx	lr

08003aea <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003aea:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003aee:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8003af0:	b182      	cbz	r2, 8003b14 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8003af2:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8003af6:	2301      	movs	r3, #1
 8003af8:	b974      	cbnz	r4, 8003b18 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8003afa:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003afe:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003b02:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003b04:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003b06:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f000 fdcc 	bl	80046a8 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8003b10:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003b12:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003b14:	2002      	movs	r0, #2
 8003b16:	e7fc      	b.n	8003b12 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8003b18:	4618      	mov	r0, r3
 8003b1a:	e7fa      	b.n	8003b12 <USBD_CDC_TransmitPacket+0x28>

08003b1c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b1c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003b20:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003b22:	b162      	cbz	r2, 8003b3e <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b24:	7c04      	ldrb	r4, [r0, #16]
 8003b26:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003b2a:	b934      	cbnz	r4, 8003b3a <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003b30:	2101      	movs	r1, #1
 8003b32:	f000 fdc7 	bl	80046c4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003b36:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003b38:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003b3a:	2340      	movs	r3, #64	; 0x40
 8003b3c:	e7f8      	b.n	8003b30 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8003b3e:	2002      	movs	r0, #2
 8003b40:	e7fa      	b.n	8003b38 <USBD_CDC_ReceivePacket+0x1c>

08003b42 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003b42:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003b44:	b180      	cbz	r0, 8003b68 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003b46:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b4a:	b113      	cbz	r3, 8003b52 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003b52:	b109      	cbz	r1, 8003b58 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003b54:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b58:	2301      	movs	r3, #1
  pdev->id = id;
 8003b5a:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b5c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003b60:	f000 fcf8 	bl	8004554 <USBD_LL_Init>

  return USBD_OK;
 8003b64:	2000      	movs	r0, #0
}
 8003b66:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003b68:	2002      	movs	r0, #2
 8003b6a:	e7fc      	b.n	8003b66 <USBD_Init+0x24>

08003b6c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003b6c:	b119      	cbz	r1, 8003b76 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003b6e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003b72:	2000      	movs	r0, #0
 8003b74:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003b76:	2002      	movs	r0, #2
  }

  return status;
}
 8003b78:	4770      	bx	lr

08003b7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003b7a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003b7c:	f000 fd2c 	bl	80045d8 <USBD_LL_Start>

  return USBD_OK;
}
 8003b80:	2000      	movs	r0, #0
 8003b82:	bd08      	pop	{r3, pc}

08003b84 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003b84:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003b86:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b8a:	b90b      	cbnz	r3, 8003b90 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003b8c:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003b8e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4798      	blx	r3
 8003b94:	2800      	cmp	r0, #0
 8003b96:	d0fa      	beq.n	8003b8e <USBD_SetClassConfig+0xa>
 8003b98:	e7f8      	b.n	8003b8c <USBD_SetClassConfig+0x8>

08003b9a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003b9a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003b9c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4798      	blx	r3

  return USBD_OK;
}
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	bd08      	pop	{r3, pc}

08003ba8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003ba8:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003baa:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8003bae:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f000 fae1 	bl	8004178 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003bb6:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003bb8:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8003bbc:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003bc0:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003bc4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003bc8:	f001 031f 	and.w	r3, r1, #31
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d00e      	beq.n	8003bee <USBD_LL_SetupStage+0x46>
 8003bd0:	d307      	bcc.n	8003be2 <USBD_LL_SetupStage+0x3a>
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d010      	beq.n	8003bf8 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003bd6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f000 fd28 	bl	8004630 <USBD_LL_StallEP>
      break;
 8003be0:	e003      	b.n	8003bea <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003be2:	4629      	mov	r1, r5
 8003be4:	4620      	mov	r0, r4
 8003be6:	f000 f8f5 	bl	8003dd4 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003bea:	2000      	movs	r0, #0
 8003bec:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003bee:	4629      	mov	r1, r5
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f000 fa13 	bl	800401c <USBD_StdItfReq>
      break;
 8003bf6:	e7f8      	b.n	8003bea <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f000 fa33 	bl	8004066 <USBD_StdEPReq>
      break;
 8003c00:	e7f3      	b.n	8003bea <USBD_LL_SetupStage+0x42>

08003c02 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003c02:	b570      	push	{r4, r5, r6, lr}
 8003c04:	4605      	mov	r5, r0
 8003c06:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003c08:	bb49      	cbnz	r1, 8003c5e <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003c0a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d11e      	bne.n	8003c50 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003c12:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8003c16:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d90b      	bls.n	8003c36 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8003c1e:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003c20:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8003c22:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003c26:	bf8c      	ite	hi
 8003c28:	b29a      	uxthhi	r2, r3
 8003c2a:	b292      	uxthls	r2, r2
 8003c2c:	4631      	mov	r1, r6
 8003c2e:	f000 fb02 	bl	8004236 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003c32:	2000      	movs	r0, #0
}
 8003c34:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003c36:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	b123      	cbz	r3, 8003c48 <USBD_LL_DataOutStage+0x46>
 8003c3e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003c42:	2a03      	cmp	r2, #3
 8003c44:	d100      	bne.n	8003c48 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8003c46:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f000 fafc 	bl	8004246 <USBD_CtlSendStatus>
 8003c4e:	e7f0      	b.n	8003c32 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003c50:	2b05      	cmp	r3, #5
 8003c52:	d1ee      	bne.n	8003c32 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003c54:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003c58:	f000 fcea 	bl	8004630 <USBD_LL_StallEP>
 8003c5c:	e7e9      	b.n	8003c32 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003c5e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	b12b      	cbz	r3, 8003c72 <USBD_LL_DataOutStage+0x70>
 8003c66:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003c6a:	2a03      	cmp	r2, #3
 8003c6c:	d101      	bne.n	8003c72 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8003c6e:	4798      	blx	r3
 8003c70:	e7df      	b.n	8003c32 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8003c72:	2002      	movs	r0, #2
 8003c74:	e7de      	b.n	8003c34 <USBD_LL_DataOutStage+0x32>

08003c76 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003c76:	b570      	push	{r4, r5, r6, lr}
 8003c78:	4613      	mov	r3, r2
 8003c7a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003c7c:	460e      	mov	r6, r1
 8003c7e:	2900      	cmp	r1, #0
 8003c80:	d147      	bne.n	8003d12 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003c82:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003c86:	2a02      	cmp	r2, #2
 8003c88:	d13c      	bne.n	8003d04 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003c8a:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8003c8e:	4295      	cmp	r5, r2
 8003c90:	d913      	bls.n	8003cba <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8003c92:	1aaa      	subs	r2, r5, r2
 8003c94:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003c96:	4619      	mov	r1, r3
 8003c98:	b292      	uxth	r2, r2
 8003c9a:	f000 fab5 	bl	8004208 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003c9e:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f000 fd0d 	bl	80046c4 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003caa:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003cae:	2000      	movs	r0, #0
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8003cb4:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003cba:	69c3      	ldr	r3, [r0, #28]
 8003cbc:	fbb3 f5f2 	udiv	r5, r3, r2
 8003cc0:	fb02 3515 	mls	r5, r2, r5, r3
 8003cc4:	b965      	cbnz	r5, 8003ce0 <USBD_LL_DataInStage+0x6a>
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d80a      	bhi.n	8003ce0 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8003cca:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d206      	bcs.n	8003ce0 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003cd2:	462a      	mov	r2, r5
 8003cd4:	f000 fa98 	bl	8004208 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003cd8:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003cdc:	462b      	mov	r3, r5
 8003cde:	e7df      	b.n	8003ca0 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003ce0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	b12b      	cbz	r3, 8003cf4 <USBD_LL_DataInStage+0x7e>
 8003ce8:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003cec:	2a03      	cmp	r2, #3
 8003cee:	d101      	bne.n	8003cf4 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f000 fc9a 	bl	8004630 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f000 faad 	bl	800425c <USBD_CtlReceiveStatus>
 8003d02:	e7d2      	b.n	8003caa <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003d04:	f032 0304 	bics.w	r3, r2, #4
 8003d08:	d1cf      	bne.n	8003caa <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003d0a:	2180      	movs	r1, #128	; 0x80
 8003d0c:	f000 fc90 	bl	8004630 <USBD_LL_StallEP>
 8003d10:	e7cb      	b.n	8003caa <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003d12:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	b133      	cbz	r3, 8003d28 <USBD_LL_DataInStage+0xb2>
 8003d1a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003d1e:	2a03      	cmp	r2, #3
 8003d20:	d102      	bne.n	8003d28 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8003d22:	4798      	blx	r3
  return USBD_OK;
 8003d24:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003d26:	e7c7      	b.n	8003cb8 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8003d28:	2002      	movs	r0, #2
 8003d2a:	e7c5      	b.n	8003cb8 <USBD_LL_DataInStage+0x42>

08003d2c <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d2c:	2200      	movs	r2, #0
{
 8003d2e:	b570      	push	{r4, r5, r6, lr}
 8003d30:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003d32:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d34:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d36:	4611      	mov	r1, r2
 8003d38:	2340      	movs	r3, #64	; 0x40
 8003d3a:	f000 fc5b 	bl	80045f4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d3e:	4633      	mov	r3, r6
 8003d40:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003d42:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d46:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f000 fc51 	bl	80045f4 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8003d52:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8003d54:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003d58:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d5a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003d5c:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003d60:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003d64:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003d66:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8003d6a:	b123      	cbz	r3, 8003d76 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003d6c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003d70:	4620      	mov	r0, r4
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003d76:	2000      	movs	r0, #0
 8003d78:	bd70      	pop	{r4, r5, r6, pc}

08003d7a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003d7a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	4770      	bx	lr

08003d80 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003d80:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d84:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003d88:	2304      	movs	r3, #4
 8003d8a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003d8e:	2000      	movs	r0, #0
 8003d90:	4770      	bx	lr

08003d92 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003d92:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d96:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8003d98:	bf04      	itt	eq
 8003d9a:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8003d9e:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8003da2:	2000      	movs	r0, #0
 8003da4:	4770      	bx	lr

08003da6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003da6:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003da8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003dac:	2a03      	cmp	r2, #3
 8003dae:	d104      	bne.n	8003dba <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8003db0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	b103      	cbz	r3, 8003dba <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003db8:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003dba:	2000      	movs	r0, #0
 8003dbc:	bd08      	pop	{r3, pc}

08003dbe <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8003dc2:	2180      	movs	r1, #128	; 0x80
 8003dc4:	f000 fc34 	bl	8004630 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003dc8:	4620      	mov	r0, r4
}
 8003dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	f000 bc2e 	b.w	8004630 <USBD_LL_StallEP>

08003dd4 <USBD_StdDevReq>:
{
 8003dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003dd6:	780b      	ldrb	r3, [r1, #0]
{
 8003dd8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003dde:	2b20      	cmp	r3, #32
{
 8003de0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003de2:	d012      	beq.n	8003e0a <USBD_StdDevReq+0x36>
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d010      	beq.n	8003e0a <USBD_StdDevReq+0x36>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d15b      	bne.n	8003ea4 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 8003dec:	784b      	ldrb	r3, [r1, #1]
 8003dee:	2b09      	cmp	r3, #9
 8003df0:	d858      	bhi.n	8003ea4 <USBD_StdDevReq+0xd0>
 8003df2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003df6:	00e9      	.short	0x00e9
 8003df8:	00570105 	.word	0x00570105
 8003dfc:	005700fe 	.word	0x005700fe
 8003e00:	00130084 	.word	0x00130084
 8003e04:	00d20057 	.word	0x00d20057
 8003e08:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8003e0a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003e0e:	4629      	mov	r1, r5
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	4620      	mov	r0, r4
 8003e14:	4798      	blx	r3
}
 8003e16:	2000      	movs	r0, #0
 8003e18:	b003      	add	sp, #12
 8003e1a:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003e22:	884b      	ldrh	r3, [r1, #2]
 8003e24:	0a1a      	lsrs	r2, r3, #8
 8003e26:	3a01      	subs	r2, #1
 8003e28:	2a06      	cmp	r2, #6
 8003e2a:	d83b      	bhi.n	8003ea4 <USBD_StdDevReq+0xd0>
 8003e2c:	e8df f002 	tbb	[pc, r2]
 8003e30:	3a2d2004 	.word	0x3a2d2004
 8003e34:	523a      	.short	0x523a
 8003e36:	5c          	.byte	0x5c
 8003e37:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003e38:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e3c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003e3e:	f10d 0106 	add.w	r1, sp, #6
 8003e42:	7c20      	ldrb	r0, [r4, #16]
 8003e44:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003e46:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003e4a:	b152      	cbz	r2, 8003e62 <USBD_StdDevReq+0x8e>
 8003e4c:	88eb      	ldrh	r3, [r5, #6]
 8003e4e:	b143      	cbz	r3, 8003e62 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8003e50:	429a      	cmp	r2, r3
 8003e52:	bf28      	it	cs
 8003e54:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003e56:	4601      	mov	r1, r0
 8003e58:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8003e5a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003e5e:	f000 f9c6 	bl	80041ee <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003e62:	88eb      	ldrh	r3, [r5, #6]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1d6      	bne.n	8003e16 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f000 f9ec 	bl	8004246 <USBD_CtlSendStatus>
 8003e6e:	e7d2      	b.n	8003e16 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e70:	7c02      	ldrb	r2, [r0, #16]
 8003e72:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e76:	b932      	cbnz	r2, 8003e86 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003e7a:	f10d 0006 	add.w	r0, sp, #6
 8003e7e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003e80:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003e82:	7043      	strb	r3, [r0, #1]
 8003e84:	e7df      	b.n	8003e46 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	e7f7      	b.n	8003e7a <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d809      	bhi.n	8003ea4 <USBD_StdDevReq+0xd0>
 8003e90:	e8df f003 	tbb	[pc, r3]
 8003e94:	14100c03 	.word	0x14100c03
 8003e98:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003e9a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e9e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1cc      	bne.n	8003e3e <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	f7ff ff8a 	bl	8003dbe <USBD_CtlError.constprop.1>
 8003eaa:	e7b4      	b.n	8003e16 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003eac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	e7f5      	b.n	8003ea0 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003eb4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	e7f1      	b.n	8003ea0 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003ebc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	e7ed      	b.n	8003ea0 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003ec4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	e7e9      	b.n	8003ea0 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003ecc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	e7e5      	b.n	8003ea0 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ed4:	7c03      	ldrb	r3, [r0, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e4      	bne.n	8003ea4 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003eda:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ede:	f10d 0006 	add.w	r0, sp, #6
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	4798      	blx	r3
 8003ee6:	e7ae      	b.n	8003e46 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ee8:	7c03      	ldrb	r3, [r0, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1da      	bne.n	8003ea4 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003eee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ef2:	f10d 0006 	add.w	r0, sp, #6
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003efa:	2307      	movs	r3, #7
 8003efc:	e7c1      	b.n	8003e82 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003efe:	888b      	ldrh	r3, [r1, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1cf      	bne.n	8003ea4 <USBD_StdDevReq+0xd0>
 8003f04:	88cb      	ldrh	r3, [r1, #6]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1cc      	bne.n	8003ea4 <USBD_StdDevReq+0xd0>
 8003f0a:	884d      	ldrh	r5, [r1, #2]
 8003f0c:	2d7f      	cmp	r5, #127	; 0x7f
 8003f0e:	d8c9      	bhi.n	8003ea4 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f10:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d0c5      	beq.n	8003ea4 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003f18:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8003f1a:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003f1e:	f000 fbb5 	bl	800468c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003f22:	4620      	mov	r0, r4
 8003f24:	f000 f98f 	bl	8004246 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003f28:	b11d      	cbz	r5, 8003f32 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003f2a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003f2c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003f30:	e771      	b.n	8003e16 <USBD_StdDevReq+0x42>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e7fa      	b.n	8003f2c <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8003f36:	7889      	ldrb	r1, [r1, #2]
 8003f38:	4d37      	ldr	r5, [pc, #220]	; (8004018 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003f3a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003f3c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003f3e:	d8b1      	bhi.n	8003ea4 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003f40:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d008      	beq.n	8003f5a <USBD_StdDevReq+0x186>
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d014      	beq.n	8003f76 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8003f4c:	f7ff ff37 	bl	8003dbe <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003f50:	7829      	ldrb	r1, [r5, #0]
 8003f52:	4620      	mov	r0, r4
 8003f54:	f7ff fe21 	bl	8003b9a <USBD_ClrClassConfig>
 8003f58:	e75d      	b.n	8003e16 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8003f5a:	2900      	cmp	r1, #0
 8003f5c:	d084      	beq.n	8003e68 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8003f5e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003f60:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8003f62:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003f64:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f7ff fe0b 	bl	8003b84 <USBD_SetClassConfig>
 8003f6e:	2802      	cmp	r0, #2
 8003f70:	f47f af7a 	bne.w	8003e68 <USBD_StdDevReq+0x94>
 8003f74:	e796      	b.n	8003ea4 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8003f76:	b931      	cbnz	r1, 8003f86 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003f78:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8003f7a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003f7c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8003f80:	f7ff fe0b 	bl	8003b9a <USBD_ClrClassConfig>
 8003f84:	e770      	b.n	8003e68 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8003f86:	6841      	ldr	r1, [r0, #4]
 8003f88:	2901      	cmp	r1, #1
 8003f8a:	f43f af6d 	beq.w	8003e68 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003f8e:	b2c9      	uxtb	r1, r1
 8003f90:	f7ff fe03 	bl	8003b9a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003f94:	7829      	ldrb	r1, [r5, #0]
 8003f96:	6061      	str	r1, [r4, #4]
 8003f98:	e7e6      	b.n	8003f68 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 8003f9a:	88ca      	ldrh	r2, [r1, #6]
 8003f9c:	2a01      	cmp	r2, #1
 8003f9e:	d181      	bne.n	8003ea4 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003fa0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f43f af7d 	beq.w	8003ea4 <USBD_StdDevReq+0xd0>
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d904      	bls.n	8003fb8 <USBD_StdDevReq+0x1e4>
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	f47f af78 	bne.w	8003ea4 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003fb4:	1d01      	adds	r1, r0, #4
 8003fb6:	e003      	b.n	8003fc0 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8003fb8:	4601      	mov	r1, r0
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	f000 f914 	bl	80041ee <USBD_CtlSendData>
 8003fc6:	e726      	b.n	8003e16 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8003fc8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	f63f af68 	bhi.w	8003ea4 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8003fd4:	88cb      	ldrh	r3, [r1, #6]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	f47f af64 	bne.w	8003ea4 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003fe0:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003fe4:	b10b      	cbz	r3, 8003fea <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003fea:	2202      	movs	r2, #2
 8003fec:	f104 010c 	add.w	r1, r4, #12
 8003ff0:	e7e6      	b.n	8003fc0 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003ff2:	884b      	ldrh	r3, [r1, #2]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	f47f af0e 	bne.w	8003e16 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003ffa:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8003ffe:	e733      	b.n	8003e68 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8004000:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004004:	3b01      	subs	r3, #1
 8004006:	2b02      	cmp	r3, #2
 8004008:	f63f af4c 	bhi.w	8003ea4 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800400c:	884b      	ldrh	r3, [r1, #2]
 800400e:	2b01      	cmp	r3, #1
 8004010:	f47f af01 	bne.w	8003e16 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	e7f0      	b.n	8003ffa <USBD_StdDevReq+0x226>
 8004018:	20000384 	.word	0x20000384

0800401c <USBD_StdItfReq>:
{
 800401c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800401e:	780b      	ldrb	r3, [r1, #0]
{
 8004020:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004026:	2b20      	cmp	r3, #32
{
 8004028:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800402a:	d002      	beq.n	8004032 <USBD_StdItfReq+0x16>
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d000      	beq.n	8004032 <USBD_StdItfReq+0x16>
 8004030:	b9ab      	cbnz	r3, 800405e <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8004032:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004036:	3b01      	subs	r3, #1
 8004038:	2b02      	cmp	r3, #2
 800403a:	d810      	bhi.n	800405e <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800403c:	792b      	ldrb	r3, [r5, #4]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d80d      	bhi.n	800405e <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004042:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004046:	4629      	mov	r1, r5
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	4620      	mov	r0, r4
 800404c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800404e:	88eb      	ldrh	r3, [r5, #6]
 8004050:	b91b      	cbnz	r3, 800405a <USBD_StdItfReq+0x3e>
 8004052:	b910      	cbnz	r0, 800405a <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8004054:	4620      	mov	r0, r4
 8004056:	f000 f8f6 	bl	8004246 <USBD_CtlSendStatus>
}
 800405a:	2000      	movs	r0, #0
 800405c:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800405e:	4620      	mov	r0, r4
 8004060:	f7ff fead 	bl	8003dbe <USBD_CtlError.constprop.1>
          break;
 8004064:	e7f9      	b.n	800405a <USBD_StdItfReq+0x3e>

08004066 <USBD_StdEPReq>:
{
 8004066:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004068:	780a      	ldrb	r2, [r1, #0]
{
 800406a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800406c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004070:	2a20      	cmp	r2, #32
{
 8004072:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004074:	d014      	beq.n	80040a0 <USBD_StdEPReq+0x3a>
 8004076:	2a40      	cmp	r2, #64	; 0x40
 8004078:	d012      	beq.n	80040a0 <USBD_StdEPReq+0x3a>
 800407a:	b96a      	cbnz	r2, 8004098 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 800407c:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800407e:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8004080:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8004082:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8004084:	d020      	beq.n	80040c8 <USBD_StdEPReq+0x62>
 8004086:	d336      	bcc.n	80040f6 <USBD_StdEPReq+0x90>
 8004088:	2a03      	cmp	r2, #3
 800408a:	d105      	bne.n	8004098 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800408c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004090:	2a02      	cmp	r2, #2
 8004092:	d027      	beq.n	80040e4 <USBD_StdEPReq+0x7e>
 8004094:	2a03      	cmp	r2, #3
 8004096:	d00b      	beq.n	80040b0 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 8004098:	4620      	mov	r0, r4
 800409a:	f7ff fe90 	bl	8003dbe <USBD_CtlError.constprop.1>
              break;
 800409e:	e005      	b.n	80040ac <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 80040a0:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80040a4:	4619      	mov	r1, r3
 80040a6:	6892      	ldr	r2, [r2, #8]
 80040a8:	4620      	mov	r0, r4
 80040aa:	4790      	blx	r2
}
 80040ac:	2000      	movs	r0, #0
 80040ae:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80040b0:	885a      	ldrh	r2, [r3, #2]
 80040b2:	b92a      	cbnz	r2, 80040c0 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 80040b4:	064a      	lsls	r2, r1, #25
 80040b6:	d003      	beq.n	80040c0 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80040b8:	88db      	ldrh	r3, [r3, #6]
 80040ba:	b90b      	cbnz	r3, 80040c0 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 80040bc:	f000 fab8 	bl	8004630 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80040c0:	4620      	mov	r0, r4
 80040c2:	f000 f8c0 	bl	8004246 <USBD_CtlSendStatus>
              break;
 80040c6:	e7f1      	b.n	80040ac <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80040c8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80040cc:	2a02      	cmp	r2, #2
 80040ce:	d009      	beq.n	80040e4 <USBD_StdEPReq+0x7e>
 80040d0:	2a03      	cmp	r2, #3
 80040d2:	d1e1      	bne.n	8004098 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80040d4:	885b      	ldrh	r3, [r3, #2]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e8      	bne.n	80040ac <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 80040da:	064d      	lsls	r5, r1, #25
 80040dc:	d0f0      	beq.n	80040c0 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80040de:	f000 fab5 	bl	800464c <USBD_LL_ClearStallEP>
 80040e2:	e7ed      	b.n	80040c0 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80040e4:	064b      	lsls	r3, r1, #25
 80040e6:	d0d7      	beq.n	8004098 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80040e8:	f000 faa2 	bl	8004630 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	4620      	mov	r0, r4
 80040f0:	f000 fa9e 	bl	8004630 <USBD_LL_StallEP>
 80040f4:	e7da      	b.n	80040ac <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80040f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d018      	beq.n	8004130 <USBD_StdEPReq+0xca>
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d1ca      	bne.n	8004098 <USBD_StdEPReq+0x32>
 8004102:	2314      	movs	r3, #20
 8004104:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8004108:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800410c:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8004110:	d01f      	beq.n	8004152 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004112:	6992      	ldr	r2, [r2, #24]
 8004114:	2a00      	cmp	r2, #0
 8004116:	d0bf      	beq.n	8004098 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004118:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800411c:	fb05 3503 	mla	r5, r5, r3, r3
 8004120:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004122:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8004126:	d11f      	bne.n	8004168 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8004128:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800412a:	2202      	movs	r2, #2
 800412c:	4629      	mov	r1, r5
 800412e:	e00c      	b.n	800414a <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004130:	064a      	lsls	r2, r1, #25
 8004132:	d1b1      	bne.n	8004098 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004134:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8004136:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800413a:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800413e:	bf4c      	ite	mi
 8004140:	f100 0114 	addmi.w	r1, r0, #20
 8004144:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8004148:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800414a:	4620      	mov	r0, r4
 800414c:	f000 f84f 	bl	80041ee <USBD_CtlSendData>
              break;
 8004150:	e7ac      	b.n	80040ac <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004152:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8004156:	2a00      	cmp	r2, #0
 8004158:	d09e      	beq.n	8004098 <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800415a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800415e:	fb03 0505 	mla	r5, r3, r5, r0
 8004162:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004166:	e7dc      	b.n	8004122 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004168:	4620      	mov	r0, r4
 800416a:	f000 fa7d 	bl	8004668 <USBD_LL_IsStallEP>
 800416e:	b108      	cbz	r0, 8004174 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8004170:	2301      	movs	r3, #1
 8004172:	e7d9      	b.n	8004128 <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8004174:	6028      	str	r0, [r5, #0]
 8004176:	e7d8      	b.n	800412a <USBD_StdEPReq+0xc4>

08004178 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8004178:	780b      	ldrb	r3, [r1, #0]
 800417a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800417c:	784b      	ldrb	r3, [r1, #1]
 800417e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004180:	78ca      	ldrb	r2, [r1, #3]
 8004182:	788b      	ldrb	r3, [r1, #2]
 8004184:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004188:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800418a:	794a      	ldrb	r2, [r1, #5]
 800418c:	790b      	ldrb	r3, [r1, #4]
 800418e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004192:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004194:	79ca      	ldrb	r2, [r1, #7]
 8004196:	798b      	ldrb	r3, [r1, #6]
 8004198:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800419c:	80c3      	strh	r3, [r0, #6]
}
 800419e:	4770      	bx	lr

080041a0 <USBD_CtlError>:
{
 80041a0:	b510      	push	{r4, lr}
 80041a2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	f000 fa43 	bl	8004630 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80041aa:	4620      	mov	r0, r4
}
 80041ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80041b0:	2100      	movs	r1, #0
 80041b2:	f000 ba3d 	b.w	8004630 <USBD_LL_StallEP>

080041b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80041b6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80041b8:	b188      	cbz	r0, 80041de <USBD_GetString+0x28>
 80041ba:	4605      	mov	r5, r0
 80041bc:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80041be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2c00      	cmp	r4, #0
 80041c6:	d1f9      	bne.n	80041bc <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80041c8:	3301      	adds	r3, #1
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80041ce:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80041d0:	2303      	movs	r3, #3
 80041d2:	704b      	strb	r3, [r1, #1]
 80041d4:	2302      	movs	r3, #2
 80041d6:	3801      	subs	r0, #1
    while (*desc != '\0')
 80041d8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80041dc:	b905      	cbnz	r5, 80041e0 <USBD_GetString+0x2a>
}
 80041de:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	54cd      	strb	r5, [r1, r3]
 80041e4:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80041e6:	3302      	adds	r3, #2
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	548c      	strb	r4, [r1, r2]
 80041ec:	e7f4      	b.n	80041d8 <USBD_GetString+0x22>

080041ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80041ee:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80041f0:	2202      	movs	r2, #2
{
 80041f2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80041f4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80041f8:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80041fc:	460a      	mov	r2, r1
 80041fe:	2100      	movs	r1, #0
 8004200:	f000 fa52 	bl	80046a8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004204:	2000      	movs	r0, #0
 8004206:	bd10      	pop	{r4, pc}

08004208 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004208:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800420a:	4613      	mov	r3, r2
 800420c:	460a      	mov	r2, r1
 800420e:	2100      	movs	r1, #0
 8004210:	f000 fa4a 	bl	80046a8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004214:	2000      	movs	r0, #0
 8004216:	bd08      	pop	{r3, pc}

08004218 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004218:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800421a:	2203      	movs	r2, #3
{
 800421c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800421e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004222:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004226:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8004228:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800422c:	2100      	movs	r1, #0
 800422e:	f000 fa49 	bl	80046c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004232:	2000      	movs	r0, #0
 8004234:	bd10      	pop	{r4, pc}

08004236 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004236:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004238:	4613      	mov	r3, r2
 800423a:	460a      	mov	r2, r1
 800423c:	2100      	movs	r1, #0
 800423e:	f000 fa41 	bl	80046c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004242:	2000      	movs	r0, #0
 8004244:	bd08      	pop	{r3, pc}

08004246 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004246:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004248:	2304      	movs	r3, #4
 800424a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800424e:	2300      	movs	r3, #0
 8004250:	461a      	mov	r2, r3
 8004252:	4619      	mov	r1, r3
 8004254:	f000 fa28 	bl	80046a8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004258:	2000      	movs	r0, #0
 800425a:	bd08      	pop	{r3, pc}

0800425c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800425c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800425e:	2305      	movs	r3, #5
 8004260:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004264:	2300      	movs	r3, #0
 8004266:	461a      	mov	r2, r3
 8004268:	4619      	mov	r1, r3
 800426a:	f000 fa2b 	bl	80046c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800426e:	2000      	movs	r0, #0
 8004270:	bd08      	pop	{r3, pc}
	...

08004274 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004274:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004276:	2200      	movs	r2, #0
 8004278:	490e      	ldr	r1, [pc, #56]	; (80042b4 <MX_USB_DEVICE_Init+0x40>)
 800427a:	480f      	ldr	r0, [pc, #60]	; (80042b8 <MX_USB_DEVICE_Init+0x44>)
 800427c:	f7ff fc61 	bl	8003b42 <USBD_Init>
 8004280:	b108      	cbz	r0, 8004286 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8004282:	f7fd fb67 	bl	8001954 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004286:	490d      	ldr	r1, [pc, #52]	; (80042bc <MX_USB_DEVICE_Init+0x48>)
 8004288:	480b      	ldr	r0, [pc, #44]	; (80042b8 <MX_USB_DEVICE_Init+0x44>)
 800428a:	f7ff fc6f 	bl	8003b6c <USBD_RegisterClass>
 800428e:	b108      	cbz	r0, 8004294 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8004290:	f7fd fb60 	bl	8001954 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004294:	490a      	ldr	r1, [pc, #40]	; (80042c0 <MX_USB_DEVICE_Init+0x4c>)
 8004296:	4808      	ldr	r0, [pc, #32]	; (80042b8 <MX_USB_DEVICE_Init+0x44>)
 8004298:	f7ff fc12 	bl	8003ac0 <USBD_CDC_RegisterInterface>
 800429c:	b108      	cbz	r0, 80042a2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800429e:	f7fd fb59 	bl	8001954 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80042a2:	4805      	ldr	r0, [pc, #20]	; (80042b8 <MX_USB_DEVICE_Init+0x44>)
 80042a4:	f7ff fc69 	bl	8003b7a <USBD_Start>
 80042a8:	b118      	cbz	r0, 80042b2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80042aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80042ae:	f7fd bb51 	b.w	8001954 <Error_Handler>
}
 80042b2:	bd08      	pop	{r3, pc}
 80042b4:	2000012c 	.word	0x2000012c
 80042b8:	200005b8 	.word	0x200005b8
 80042bc:	2000000c 	.word	0x2000000c
 80042c0:	2000011c 	.word	0x2000011c

080042c4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80042c4:	2000      	movs	r0, #0
 80042c6:	4770      	bx	lr

080042c8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80042c8:	2000      	movs	r0, #0
 80042ca:	4770      	bx	lr

080042cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN 6 */
  uint32_t len=*Len;
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 80042ce:	4e1c      	ldr	r6, [pc, #112]	; (8004340 <CDC_Receive_FS+0x74>)
{
 80042d0:	4604      	mov	r4, r0
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 80042d2:	f896 329c 	ldrb.w	r3, [r6, #668]	; 0x29c
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d130      	bne.n	800433c <CDC_Receive_FS+0x70>
  {
     return USBD_FAIL;
  }

  if (((Buf == NULL) || (Len == NULL)) || (*Len <= 0))
 80042da:	b378      	cbz	r0, 800433c <CDC_Receive_FS+0x70>
  uint32_t len=*Len;
 80042dc:	680d      	ldr	r5, [r1, #0]
  if (((Buf == NULL) || (Len == NULL)) || (*Len <= 0))
 80042de:	b36d      	cbz	r5, 800433c <CDC_Receive_FS+0x70>

  /* Get data */
  uint8_t result = USBD_OK;
  do
  {
      result = USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80042e0:	4621      	mov	r1, r4
 80042e2:	4630      	mov	r0, r6
 80042e4:	f7ff fbfb 	bl	8003ade <USBD_CDC_SetRxBuffer>
  }
  while(result != USBD_OK);
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1f9      	bne.n	80042e0 <CDC_Receive_FS+0x14>

  do
  {
     result = USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80042ec:	4e14      	ldr	r6, [pc, #80]	; (8004340 <CDC_Receive_FS+0x74>)
 80042ee:	4630      	mov	r0, r6
 80042f0:	f7ff fc14 	bl	8003b1c <USBD_CDC_ReceivePacket>
  }
  while(result != USBD_OK);
 80042f4:	2800      	cmp	r0, #0
 80042f6:	d1fa      	bne.n	80042ee <CDC_Receive_FS+0x22>
 80042f8:	4621      	mov	r1, r4
 80042fa:	4425      	add	r5, r4

     if (comm.usb.rx_index >= RX_BUFF_LAST)
         comm.usb.rx_index = 0;

     comm.uart.last = 0;
     comm.usb.last = 1;
 80042fc:	2401      	movs	r4, #1
     comm.usb.rx_buffer[comm.usb.rx_index++] = *Buf;
 80042fe:	4b11      	ldr	r3, [pc, #68]	; (8004344 <CDC_Receive_FS+0x78>)
  while (len--)
 8004300:	42a9      	cmp	r1, r5
 8004302:	d101      	bne.n	8004308 <CDC_Receive_FS+0x3c>
     if (*Buf == '\n')
         comm.usb.available = 1;
     Buf++;
  }

  return USBD_OK;
 8004304:	2000      	movs	r0, #0
  /* USER CODE END 6 */
}
 8004306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004308:	460f      	mov	r7, r1
     comm.usb.rx_buffer[comm.usb.rx_index++] = *Buf;
 800430a:	f893 6066 	ldrb.w	r6, [r3, #102]	; 0x66
 800430e:	3101      	adds	r1, #1
 8004310:	1c72      	adds	r2, r6, #1
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8004318:	f811 cc01 	ldrb.w	ip, [r1, #-1]
     if (comm.usb.rx_index >= RX_BUFF_LAST)
 800431c:	2a62      	cmp	r2, #98	; 0x62
         comm.usb.rx_index = 0;
 800431e:	bf88      	it	hi
 8004320:	f883 0066 	strbhi.w	r0, [r3, #102]	; 0x66
     comm.usb.rx_buffer[comm.usb.rx_index++] = *Buf;
 8004324:	f803 c006 	strb.w	ip, [r3, r6]
     comm.uart.last = 0;
 8004328:	f883 00cb 	strb.w	r0, [r3, #203]	; 0xcb
     comm.usb.last = 1;
 800432c:	f883 4064 	strb.w	r4, [r3, #100]	; 0x64
     if (*Buf == '\n')
 8004330:	783a      	ldrb	r2, [r7, #0]
 8004332:	2a0a      	cmp	r2, #10
         comm.usb.available = 1;
 8004334:	bf08      	it	eq
 8004336:	f883 4065 	strbeq.w	r4, [r3, #101]	; 0x65
 800433a:	e7e1      	b.n	8004300 <CDC_Receive_FS+0x34>
     return USBD_FAIL;
 800433c:	2002      	movs	r0, #2
 800433e:	e7e2      	b.n	8004306 <CDC_Receive_FS+0x3a>
 8004340:	200005b8 	.word	0x200005b8
 8004344:	200039d4 	.word	0x200039d4

08004348 <CDC_Init_FS>:
{
 8004348:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800434a:	4c06      	ldr	r4, [pc, #24]	; (8004364 <CDC_Init_FS+0x1c>)
 800434c:	2200      	movs	r2, #0
 800434e:	4906      	ldr	r1, [pc, #24]	; (8004368 <CDC_Init_FS+0x20>)
 8004350:	4620      	mov	r0, r4
 8004352:	f7ff fbbc 	bl	8003ace <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004356:	4905      	ldr	r1, [pc, #20]	; (800436c <CDC_Init_FS+0x24>)
 8004358:	4620      	mov	r0, r4
 800435a:	f7ff fbc0 	bl	8003ade <USBD_CDC_SetRxBuffer>
}
 800435e:	2000      	movs	r0, #0
 8004360:	bd10      	pop	{r4, pc}
 8004362:	bf00      	nop
 8004364:	200005b8 	.word	0x200005b8
 8004368:	20003b06 	.word	0x20003b06
 800436c:	20003aa2 	.word	0x20003aa2

08004370 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004370:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004372:	4c09      	ldr	r4, [pc, #36]	; (8004398 <CDC_Transmit_FS+0x28>)
{
 8004374:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004376:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800437a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800437e:	b943      	cbnz	r3, 8004392 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004380:	4601      	mov	r1, r0
 8004382:	4620      	mov	r0, r4
 8004384:	f7ff fba3 	bl	8003ace <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004388:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800438a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800438e:	f7ff bbac 	b.w	8003aea <USBD_CDC_TransmitPacket>
}
 8004392:	2001      	movs	r0, #1
 8004394:	bd10      	pop	{r4, pc}
 8004396:	bf00      	nop
 8004398:	200005b8 	.word	0x200005b8

0800439c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800439c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800439e:	4801      	ldr	r0, [pc, #4]	; (80043a4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80043a0:	800b      	strh	r3, [r1, #0]
}
 80043a2:	4770      	bx	lr
 80043a4:	20000148 	.word	0x20000148

080043a8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80043a8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80043aa:	4801      	ldr	r0, [pc, #4]	; (80043b0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80043ac:	800b      	strh	r3, [r1, #0]
}
 80043ae:	4770      	bx	lr
 80043b0:	2000015c 	.word	0x2000015c

080043b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80043b4:	2300      	movs	r3, #0
 80043b6:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80043b8:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 80043ba:	0f05      	lsrs	r5, r0, #28
 80043bc:	b2ec      	uxtb	r4, r5
 80043be:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80043c0:	bf94      	ite	ls
 80043c2:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80043c4:	3437      	addhi	r4, #55	; 0x37
 80043c6:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80043ca:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80043ce:	3301      	adds	r3, #1
 80043d0:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 80043d2:	b2dc      	uxtb	r4, r3
 80043d4:	42a2      	cmp	r2, r4
    value = value << 4;
 80043d6:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80043da:	d8ee      	bhi.n	80043ba <IntToUnicode+0x6>
  }
}
 80043dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080043e0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80043e0:	231a      	movs	r3, #26
{
 80043e2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80043e4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <USBD_FS_SerialStrDescriptor+0x2c>)
 80043e8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80043ea:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80043ec:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80043ee:	18c0      	adds	r0, r0, r3
 80043f0:	d00a      	beq.n	8004408 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80043f4:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80043f6:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80043f8:	4906      	ldr	r1, [pc, #24]	; (8004414 <USBD_FS_SerialStrDescriptor+0x34>)
 80043fa:	f7ff ffdb 	bl	80043b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80043fe:	2204      	movs	r2, #4
 8004400:	4905      	ldr	r1, [pc, #20]	; (8004418 <USBD_FS_SerialStrDescriptor+0x38>)
 8004402:	4620      	mov	r0, r4
 8004404:	f7ff ffd6 	bl	80043b4 <IntToUnicode>
}
 8004408:	4804      	ldr	r0, [pc, #16]	; (800441c <USBD_FS_SerialStrDescriptor+0x3c>)
 800440a:	bd10      	pop	{r4, pc}
 800440c:	1ffff7e8 	.word	0x1ffff7e8
 8004410:	1ffff7ec 	.word	0x1ffff7ec
 8004414:	20000162 	.word	0x20000162
 8004418:	20000172 	.word	0x20000172
 800441c:	20000160 	.word	0x20000160

08004420 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004420:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004422:	4c04      	ldr	r4, [pc, #16]	; (8004434 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004424:	460a      	mov	r2, r1
 8004426:	4804      	ldr	r0, [pc, #16]	; (8004438 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004428:	4621      	mov	r1, r4
 800442a:	f7ff fec4 	bl	80041b6 <USBD_GetString>
}
 800442e:	4620      	mov	r0, r4
 8004430:	bd10      	pop	{r4, pc}
 8004432:	bf00      	nop
 8004434:	20003b08 	.word	0x20003b08
 8004438:	0800a9a1 	.word	0x0800a9a1

0800443c <USBD_FS_ProductStrDescriptor>:
{
 800443c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800443e:	4c04      	ldr	r4, [pc, #16]	; (8004450 <USBD_FS_ProductStrDescriptor+0x14>)
 8004440:	460a      	mov	r2, r1
 8004442:	4804      	ldr	r0, [pc, #16]	; (8004454 <USBD_FS_ProductStrDescriptor+0x18>)
 8004444:	4621      	mov	r1, r4
 8004446:	f7ff feb6 	bl	80041b6 <USBD_GetString>
}
 800444a:	4620      	mov	r0, r4
 800444c:	bd10      	pop	{r4, pc}
 800444e:	bf00      	nop
 8004450:	20003b08 	.word	0x20003b08
 8004454:	0800a9b1 	.word	0x0800a9b1

08004458 <USBD_FS_ConfigStrDescriptor>:
{
 8004458:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800445a:	4c04      	ldr	r4, [pc, #16]	; (800446c <USBD_FS_ConfigStrDescriptor+0x14>)
 800445c:	460a      	mov	r2, r1
 800445e:	4804      	ldr	r0, [pc, #16]	; (8004470 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004460:	4621      	mov	r1, r4
 8004462:	f7ff fea8 	bl	80041b6 <USBD_GetString>
}
 8004466:	4620      	mov	r0, r4
 8004468:	bd10      	pop	{r4, pc}
 800446a:	bf00      	nop
 800446c:	20003b08 	.word	0x20003b08
 8004470:	0800a988 	.word	0x0800a988

08004474 <USBD_FS_InterfaceStrDescriptor>:
{
 8004474:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004476:	4c04      	ldr	r4, [pc, #16]	; (8004488 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004478:	460a      	mov	r2, r1
 800447a:	4804      	ldr	r0, [pc, #16]	; (800448c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800447c:	4621      	mov	r1, r4
 800447e:	f7ff fe9a 	bl	80041b6 <USBD_GetString>
}
 8004482:	4620      	mov	r0, r4
 8004484:	bd10      	pop	{r4, pc}
 8004486:	bf00      	nop
 8004488:	20003b08 	.word	0x20003b08
 800448c:	0800a993 	.word	0x0800a993

08004490 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004490:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8004492:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <HAL_PCD_MspInit+0x3c>)
 8004494:	6802      	ldr	r2, [r0, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d115      	bne.n	80044c6 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800449a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800449e:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80044a0:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80044a2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80044a6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80044a8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80044aa:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80044ac:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80044ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b2:	9301      	str	r3, [sp, #4]
 80044b4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80044b6:	f7fd fb41 	bl	8001b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80044ba:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80044bc:	b003      	add	sp, #12
 80044be:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80044c2:	f7fd bb6f 	b.w	8001ba4 <HAL_NVIC_EnableIRQ>
}
 80044c6:	b003      	add	sp, #12
 80044c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80044cc:	40005c00 	.word	0x40005c00

080044d0 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80044d0:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80044d4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80044d8:	f7ff bb66 	b.w	8003ba8 <USBD_LL_SetupStage>

080044dc <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80044dc:	2328      	movs	r3, #40	; 0x28
 80044de:	fb03 0301 	mla	r3, r3, r1, r0
 80044e2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80044e6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80044ea:	f7ff bb8a 	b.w	8003c02 <USBD_LL_DataOutStage>

080044ee <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80044ee:	2328      	movs	r3, #40	; 0x28
 80044f0:	fb03 0301 	mla	r3, r3, r1, r0
 80044f4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80044f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044fa:	f7ff bbbc 	b.w	8003c76 <USBD_LL_DataInStage>

080044fe <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80044fe:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004502:	f7ff bc50 	b.w	8003da6 <USBD_LL_SOF>

08004506 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004506:	6883      	ldr	r3, [r0, #8]
{
 8004508:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800450a:	2b02      	cmp	r3, #2
{
 800450c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800450e:	d001      	beq.n	8004514 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004510:	f7fd fa20 	bl	8001954 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004514:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8004518:	2101      	movs	r1, #1
 800451a:	f7ff fc2e 	bl	8003d7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800451e:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8004522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004526:	f7ff bc01 	b.w	8003d2c <USBD_LL_Reset>
	...

0800452c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800452c:	b510      	push	{r4, lr}
 800452e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004530:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004534:	f7ff fc24 	bl	8003d80 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004538:	69a3      	ldr	r3, [r4, #24]
 800453a:	b123      	cbz	r3, 8004546 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800453c:	4a02      	ldr	r2, [pc, #8]	; (8004548 <HAL_PCD_SuspendCallback+0x1c>)
 800453e:	6913      	ldr	r3, [r2, #16]
 8004540:	f043 0306 	orr.w	r3, r3, #6
 8004544:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004546:	bd10      	pop	{r4, pc}
 8004548:	e000ed00 	.word	0xe000ed00

0800454c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800454c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004550:	f7ff bc1f 	b.w	8003d92 <USBD_LL_Resume>

08004554 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004554:	2308      	movs	r3, #8
{
 8004556:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004558:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <USBD_LL_Init+0x7c>)
{
 800455a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800455c:	481d      	ldr	r0, [pc, #116]	; (80045d4 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800455e:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004562:	2302      	movs	r3, #2
 8004564:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004566:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8004568:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800456c:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004570:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004574:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004576:	f7fd fb39 	bl	8001bec <HAL_PCD_Init>
 800457a:	b108      	cbz	r0, 8004580 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 800457c:	f7fd f9ea 	bl	8001954 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004580:	2200      	movs	r2, #0
 8004582:	2318      	movs	r3, #24
 8004584:	4611      	mov	r1, r2
 8004586:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800458a:	f7fe f8f3 	bl	8002774 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800458e:	2358      	movs	r3, #88	; 0x58
 8004590:	2200      	movs	r2, #0
 8004592:	2180      	movs	r1, #128	; 0x80
 8004594:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004598:	f7fe f8ec 	bl	8002774 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800459c:	23c0      	movs	r3, #192	; 0xc0
 800459e:	2200      	movs	r2, #0
 80045a0:	2181      	movs	r1, #129	; 0x81
 80045a2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80045a6:	f7fe f8e5 	bl	8002774 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80045aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80045ae:	2200      	movs	r2, #0
 80045b0:	2101      	movs	r1, #1
 80045b2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80045b6:	f7fe f8dd 	bl	8002774 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80045ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045be:	2200      	movs	r2, #0
 80045c0:	2182      	movs	r1, #130	; 0x82
 80045c2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80045c6:	f7fe f8d5 	bl	8002774 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 80045ca:	2000      	movs	r0, #0
 80045cc:	bd10      	pop	{r4, pc}
 80045ce:	bf00      	nop
 80045d0:	40005c00 	.word	0x40005c00
 80045d4:	20003d08 	.word	0x20003d08

080045d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80045d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80045da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80045de:	f7fd fb7d 	bl	8001cdc <HAL_PCD_Start>
 80045e2:	2803      	cmp	r0, #3
 80045e4:	bf96      	itet	ls
 80045e6:	4b02      	ldrls	r3, [pc, #8]	; (80045f0 <USBD_LL_Start+0x18>)
 80045e8:	2002      	movhi	r0, #2
 80045ea:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80045ec:	bd08      	pop	{r3, pc}
 80045ee:	bf00      	nop
 80045f0:	0800a9c3 	.word	0x0800a9c3

080045f4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80045f4:	b510      	push	{r4, lr}
 80045f6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80045f8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80045fc:	4613      	mov	r3, r2
 80045fe:	4622      	mov	r2, r4
 8004600:	f7fd ffbc 	bl	800257c <HAL_PCD_EP_Open>
 8004604:	2803      	cmp	r0, #3
 8004606:	bf96      	itet	ls
 8004608:	4b01      	ldrls	r3, [pc, #4]	; (8004610 <USBD_LL_OpenEP+0x1c>)
 800460a:	2002      	movhi	r0, #2
 800460c:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800460e:	bd10      	pop	{r4, pc}
 8004610:	0800a9c3 	.word	0x0800a9c3

08004614 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004614:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004616:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800461a:	f7fd ffe1 	bl	80025e0 <HAL_PCD_EP_Close>
 800461e:	2803      	cmp	r0, #3
 8004620:	bf96      	itet	ls
 8004622:	4b02      	ldrls	r3, [pc, #8]	; (800462c <USBD_LL_CloseEP+0x18>)
 8004624:	2002      	movhi	r0, #2
 8004626:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004628:	bd08      	pop	{r3, pc}
 800462a:	bf00      	nop
 800462c:	0800a9c3 	.word	0x0800a9c3

08004630 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004630:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004632:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004636:	f7fe f837 	bl	80026a8 <HAL_PCD_EP_SetStall>
 800463a:	2803      	cmp	r0, #3
 800463c:	bf96      	itet	ls
 800463e:	4b02      	ldrls	r3, [pc, #8]	; (8004648 <USBD_LL_StallEP+0x18>)
 8004640:	2002      	movhi	r0, #2
 8004642:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004644:	bd08      	pop	{r3, pc}
 8004646:	bf00      	nop
 8004648:	0800a9c3 	.word	0x0800a9c3

0800464c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800464c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800464e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004652:	f7fe f85d 	bl	8002710 <HAL_PCD_EP_ClrStall>
 8004656:	2803      	cmp	r0, #3
 8004658:	bf96      	itet	ls
 800465a:	4b02      	ldrls	r3, [pc, #8]	; (8004664 <USBD_LL_ClearStallEP+0x18>)
 800465c:	2002      	movhi	r0, #2
 800465e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004660:	bd08      	pop	{r3, pc}
 8004662:	bf00      	nop
 8004664:	0800a9c3 	.word	0x0800a9c3

08004668 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004668:	2228      	movs	r2, #40	; 0x28
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 800466a:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800466e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004672:	bf1b      	ittet	ne
 8004674:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8004678:	fb03 2102 	mlane	r1, r3, r2, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800467c:	fb02 0101 	mlaeq	r1, r2, r1, r0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004680:	1809      	addne	r1, r1, r0
 8004682:	bf14      	ite	ne
 8004684:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004686:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
  }
}
 800468a:	4770      	bx	lr

0800468c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800468c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800468e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004692:	f7fd fb3c 	bl	8001d0e <HAL_PCD_SetAddress>
 8004696:	2803      	cmp	r0, #3
 8004698:	bf96      	itet	ls
 800469a:	4b02      	ldrls	r3, [pc, #8]	; (80046a4 <USBD_LL_SetUSBAddress+0x18>)
 800469c:	2002      	movhi	r0, #2
 800469e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80046a0:	bd08      	pop	{r3, pc}
 80046a2:	bf00      	nop
 80046a4:	0800a9c3 	.word	0x0800a9c3

080046a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80046a8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80046aa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046ae:	f7fd ffe1 	bl	8002674 <HAL_PCD_EP_Transmit>
 80046b2:	2803      	cmp	r0, #3
 80046b4:	bf96      	itet	ls
 80046b6:	4b02      	ldrls	r3, [pc, #8]	; (80046c0 <USBD_LL_Transmit+0x18>)
 80046b8:	2002      	movhi	r0, #2
 80046ba:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80046bc:	bd08      	pop	{r3, pc}
 80046be:	bf00      	nop
 80046c0:	0800a9c3 	.word	0x0800a9c3

080046c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80046c4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80046c6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046ca:	f7fd ffb2 	bl	8002632 <HAL_PCD_EP_Receive>
 80046ce:	2803      	cmp	r0, #3
 80046d0:	bf96      	itet	ls
 80046d2:	4b02      	ldrls	r3, [pc, #8]	; (80046dc <USBD_LL_PrepareReceive+0x18>)
 80046d4:	2002      	movhi	r0, #2
 80046d6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80046d8:	bd08      	pop	{r3, pc}
 80046da:	bf00      	nop
 80046dc:	0800a9c3 	.word	0x0800a9c3

080046e0 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80046e0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046e4:	f7fd bfbe 	b.w	8002664 <HAL_PCD_EP_GetRxCount>

080046e8 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80046e8:	4800      	ldr	r0, [pc, #0]	; (80046ec <USBD_static_malloc+0x4>)
 80046ea:	4770      	bx	lr
 80046ec:	20000388 	.word	0x20000388

080046f0 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 80046f0:	4770      	bx	lr

080046f2 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80046f2:	4770      	bx	lr

080046f4 <app_main>:
#include "comm.h"
#include "main.h"


void app_main(void)
{
 80046f4:	b58f      	push	{r0, r1, r2, r3, r7, lr}
    pwm_init(&pwm);
 80046f6:	4821      	ldr	r0, [pc, #132]	; (800477c <app_main+0x88>)
 80046f8:	f002 fb88 	bl	8006e0c <pwm_init>
    led_init(&led);
 80046fc:	4820      	ldr	r0, [pc, #128]	; (8004780 <app_main+0x8c>)
 80046fe:	f001 fb9d 	bl	8005e3c <led_init>
    cntr_init(&cntr);
 8004702:	4820      	ldr	r0, [pc, #128]	; (8004784 <app_main+0x90>)
 8004704:	f000 f84a 	bl	800479c <cntr_init>
    comm_init(&comm);
 8004708:	481f      	ldr	r0, [pc, #124]	; (8004788 <app_main+0x94>)
 800470a:	f000 f929 	bl	8004960 <comm_init>
    daq_init(&daq);
 800470e:	481f      	ldr	r0, [pc, #124]	; (800478c <app_main+0x98>)
 8004710:	f000 fad8 	bl	8004cc4 <daq_init>
    daq_mode_set(&daq, VM);
 8004714:	2101      	movs	r1, #1
 8004716:	481d      	ldr	r0, [pc, #116]	; (800478c <app_main+0x98>)
 8004718:	f000 fd84 	bl	8005224 <daq_mode_set>
    led_blink_set(&led, 3, PS_BLINK_LONG);
 800471c:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <app_main+0x9c>)
 800471e:	2103      	movs	r1, #3
 8004720:	4817      	ldr	r0, [pc, #92]	; (8004780 <app_main+0x8c>)
 8004722:	f001 fbb5 	bl	8005e90 <led_blink_set>

    pwm_set(&pwm, 15, 20, 10, 50, 1, 1);
 8004726:	2301      	movs	r3, #1
 8004728:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800472c:	2332      	movs	r3, #50	; 0x32
 800472e:	2214      	movs	r2, #20
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	210f      	movs	r1, #15
 8004734:	230a      	movs	r3, #10
 8004736:	4811      	ldr	r0, [pc, #68]	; (800477c <app_main+0x88>)
 8004738:	f002 fb76 	bl	8006e28 <pwm_set>
#ifndef INC_PERIPH_H_
#define INC_PERIPH_H_

static inline void iwdg_feed()
{
    PS_IWDG_RST;
 800473c:	f64a 27aa 	movw	r7, #43690	; 0xaaaa
 8004740:	4e14      	ldr	r6, [pc, #80]	; (8004794 <app_main+0xa0>)
        daq_trig_check(&daq);

        if (daq.trig.post_start)
            daq_trig_postcount(&daq);

        led_blink_do(&led);
 8004742:	4c0f      	ldr	r4, [pc, #60]	; (8004780 <app_main+0x8c>)
        daq_trig_check(&daq);
 8004744:	4d11      	ldr	r5, [pc, #68]	; (800478c <app_main+0x98>)
        if (daq.trig.post_start)
 8004746:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8004798 <app_main+0xa4>
 800474a:	6037      	str	r7, [r6, #0]
        daq_trig_check(&daq);
 800474c:	4628      	mov	r0, r5
 800474e:	f000 fea3 	bl	8005498 <daq_trig_check>
        if (daq.trig.post_start)
 8004752:	f8d8 3000 	ldr.w	r3, [r8]
 8004756:	b113      	cbz	r3, 800475e <app_main+0x6a>
            daq_trig_postcount(&daq);
 8004758:	4628      	mov	r0, r5
 800475a:	f000 ffc1 	bl	80056e0 <daq_trig_postcount>
        led_blink_do(&led);
 800475e:	4620      	mov	r0, r4
 8004760:	f001 fb9e 	bl	8005ea0 <led_blink_do>

        if (comm_main(&comm))
 8004764:	4808      	ldr	r0, [pc, #32]	; (8004788 <app_main+0x94>)
 8004766:	f000 f949 	bl	80049fc <comm_main>
 800476a:	2800      	cmp	r0, #0
 800476c:	d0ed      	beq.n	800474a <app_main+0x56>
            led_blink_set(&led, 1, PS_BLINK_SHORT);
 800476e:	f247 5230 	movw	r2, #30000	; 0x7530
 8004772:	2101      	movs	r1, #1
 8004774:	4620      	mov	r0, r4
 8004776:	f001 fb8b 	bl	8005e90 <led_blink_set>
 800477a:	e7e3      	b.n	8004744 <app_main+0x50>
 800477c:	200039a4 	.word	0x200039a4
 8004780:	20003994 	.word	0x20003994
 8004784:	2000087c 	.word	0x2000087c
 8004788:	200039d4 	.word	0x200039d4
 800478c:	20000950 	.word	0x20000950
 8004790:	000493e0 	.word	0x000493e0
 8004794:	40003000 	.word	0x40003000
 8004798:	2000398c 	.word	0x2000398c

0800479c <cntr_init>:
#include "cntr.h"
#include "main.h"


void cntr_init(cntr_data_t* self)
{
 800479c:	b507      	push	{r0, r1, r2, lr}
    self->freq = 0;
    self->ovf = 0;
 800479e:	2100      	movs	r1, #0
    self->freq = 0;
 80047a0:	2200      	movs	r2, #0
    self->ovf = 0;
 80047a2:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
    self->freq = 0;
 80047a6:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
    self->enabled = 0;
 80047aa:	f880 10c8 	strb.w	r1, [r0, #200]	; 0xc8
    memset(self->data, 0, PS_CNTR_BUFF_SZ * sizeof(uint16_t));
 80047ae:	22c8      	movs	r2, #200	; 0xc8
 80047b0:	f004 fb52 	bl	8008e58 <memset>
    dma_set((uint32_t)&PS_TIM_CNTR->PS_TIM_CNTR_CCR, PS_DMA_CNTR, PS_DMA_CH_CNTR, (uint32_t)self->data, PS_CNTR_BUFF_SZ, LL_DMA_PDATAALIGN_HALFWORD);
 80047b4:	2264      	movs	r2, #100	; 0x64
 80047b6:	f44f 7180 	mov.w	r1, #256	; 0x100
    memset(self->data, 0, PS_CNTR_BUFF_SZ * sizeof(uint16_t));
 80047ba:	4603      	mov	r3, r0
    dma_set((uint32_t)&PS_TIM_CNTR->PS_TIM_CNTR_CCR, PS_DMA_CNTR, PS_DMA_CH_CNTR, (uint32_t)self->data, PS_CNTR_BUFF_SZ, LL_DMA_PDATAALIGN_HALFWORD);
 80047bc:	e9cd 2100 	strd	r2, r1, [sp]
 80047c0:	4803      	ldr	r0, [pc, #12]	; (80047d0 <cntr_init+0x34>)
 80047c2:	2202      	movs	r2, #2
 80047c4:	4903      	ldr	r1, [pc, #12]	; (80047d4 <cntr_init+0x38>)
 80047c6:	f001 fbbd 	bl	8005f44 <dma_set>
}
 80047ca:	b003      	add	sp, #12
 80047cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80047d0:	40012c24 	.word	0x40012c24
 80047d4:	40020000 	.word	0x40020000

080047d8 <cntr_enable>:

void cntr_enable(cntr_data_t* self, uint8_t enable)
{
 80047d8:	b510      	push	{r4, lr}
 80047da:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <cntr_enable+0x38>)
    if (enable)
 80047dc:	b179      	cbz	r1, 80047fe <cntr_enable+0x26>
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80047de:	4c0d      	ldr	r4, [pc, #52]	; (8004814 <cntr_enable+0x3c>)
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	6022      	str	r2, [r4, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 80047f0:	6a1a      	ldr	r2, [r3, #32]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
  CLEAR_BIT(TIMx->CCER, Channels);
 80047f6:	621a      	str	r2, [r3, #32]
    {
        LL_TIM_DisableCounter(PS_TIM_CNTR);
        LL_TIM_CC_DisableChannel(PS_TIM_CNTR, PS_TIM_CNTR_CH);
        //LL_DMA_DisableChannel(PS_DMA_CNTR, PS_DMA_CNTR);
    }
    self->enabled = enable;
 80047f8:	f880 10c8 	strb.w	r1, [r0, #200]	; 0xc8
}
 80047fc:	bd10      	pop	{r4, pc}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004806:	6a1a      	ldr	r2, [r3, #32]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	e7f3      	b.n	80047f6 <cntr_enable+0x1e>
 800480e:	bf00      	nop
 8004810:	40012c00 	.word	0x40012c00
 8004814:	4002001c 	.word	0x4002001c

08004818 <cntr_read>:

float cntr_read(cntr_data_t* self)
{
 8004818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    //cntr_enable(&self, 0);
    self->ovf = 0;
 800481c:	2300      	movs	r3, #0
    int last1 = PS_DMA_LAST_IDX(PS_CNTR_BUFF_SZ, PS_DMA_CH_CNTR);
 800481e:	2164      	movs	r1, #100	; 0x64
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004820:	4f28      	ldr	r7, [pc, #160]	; (80048c4 <cntr_read+0xac>)
    self->ovf = 0;
 8004822:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
{
 8004826:	4605      	mov	r5, r0
 8004828:	6878      	ldr	r0, [r7, #4]
    cntr_enable(self, 1);
 800482a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80048d4 <cntr_read+0xbc>
 800482e:	b280      	uxth	r0, r0
    int last1 = PS_DMA_LAST_IDX(PS_CNTR_BUFF_SZ, PS_DMA_CH_CNTR);
 8004830:	1a08      	subs	r0, r1, r0
 8004832:	f002 fcd0 	bl	80071d6 <get_last_circ_idx>
    cntr_enable(self, 1);
 8004836:	2101      	movs	r1, #1
    int last1 = PS_DMA_LAST_IDX(PS_CNTR_BUFF_SZ, PS_DMA_CH_CNTR);
 8004838:	4681      	mov	r9, r0
    cntr_enable(self, 1);
 800483a:	4628      	mov	r0, r5
 800483c:	f7ff ffcc 	bl	80047d8 <cntr_enable>
    uint32_t cc = 0;

    while (1)
    {
        cc = self->ovf;
        int last2 = PS_DMA_LAST_IDX(PS_CNTR_BUFF_SZ, PS_DMA_CH_CNTR);
 8004840:	2164      	movs	r1, #100	; 0x64
 8004842:	6878      	ldr	r0, [r7, #4]
        cc = self->ovf;
 8004844:	f8d5 60d0 	ldr.w	r6, [r5, #208]	; 0xd0
 8004848:	b280      	uxth	r0, r0
        int last2 = PS_DMA_LAST_IDX(PS_CNTR_BUFF_SZ, PS_DMA_CH_CNTR);
 800484a:	1a08      	subs	r0, r1, r0
 800484c:	f002 fcc3 	bl	80071d6 <get_last_circ_idx>
        diff = last2 - last1;
        if (diff < 0)
 8004850:	ebb0 0409 	subs.w	r4, r0, r9
            diff += PS_CNTR_BUFF_SZ;
 8004854:	bf48      	it	mi
 8004856:	3464      	addmi	r4, #100	; 0x64
        timeout--;
        if (diff >= 3 || timeout < 0)
 8004858:	2c02      	cmp	r4, #2
 800485a:	dc02      	bgt.n	8004862 <cntr_read+0x4a>
 800485c:	f1b8 0801 	subs.w	r8, r8, #1
 8004860:	d1ee      	bne.n	8004840 <cntr_read+0x28>
            break;
    }

    cntr_enable(self, 0);
 8004862:	2100      	movs	r1, #0
 8004864:	4628      	mov	r0, r5
 8004866:	f7ff ffb7 	bl	80047d8 <cntr_enable>

    if (diff >= 3)
 800486a:	2c02      	cmp	r4, #2
 800486c:	dd28      	ble.n	80048c0 <cntr_read+0xa8>
    {
        int debug1 = self->data[last1];
        float total = (cc * PS_TIM_CNTR_MAX) + self->data[last2];
 800486e:	8828      	ldrh	r0, [r5, #0]
 8004870:	ebc6 4606 	rsb	r6, r6, r6, lsl #16
 8004874:	4430      	add	r0, r6
 8004876:	f7fc fa17 	bl	8000ca8 <__aeabi_ui2f>
        if (diff > 3)
 800487a:	2c03      	cmp	r4, #3
        float total = (cc * PS_TIM_CNTR_MAX) + self->data[last2];
 800487c:	4603      	mov	r3, r0
        if (diff > 3)
 800487e:	d019      	beq.n	80048b4 <cntr_read+0x9c>
            total /= (((float)diff / 2.0) - 0.5); // too fast, 1 period normalize
 8004880:	f7fb fddc 	bl	800043c <__aeabi_f2d>
 8004884:	4606      	mov	r6, r0
 8004886:	4620      	mov	r0, r4
 8004888:	460f      	mov	r7, r1
 800488a:	f7fc fa11 	bl	8000cb0 <__aeabi_i2f>
 800488e:	f7fb fdd5 	bl	800043c <__aeabi_f2d>
 8004892:	2200      	movs	r2, #0
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <cntr_read+0xb0>)
 8004896:	f7fb fe29 	bl	80004ec <__aeabi_dmul>
 800489a:	2200      	movs	r2, #0
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <cntr_read+0xb0>)
 800489e:	f7fb fc6d 	bl	800017c <__aeabi_dsub>
 80048a2:	460b      	mov	r3, r1
 80048a4:	4602      	mov	r2, r0
 80048a6:	4639      	mov	r1, r7
 80048a8:	4630      	mov	r0, r6
 80048aa:	f7fb ff49 	bl	8000740 <__aeabi_ddiv>
 80048ae:	f7fc f8f5 	bl	8000a9c <__aeabi_d2f>
 80048b2:	4603      	mov	r3, r0

        float f = total / (float)PS_TIM_CNTR_FREQ;
 80048b4:	4905      	ldr	r1, [pc, #20]	; (80048cc <cntr_read+0xb4>)
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fc fb02 	bl	8000ec0 <__aeabi_fdiv>
    }
    else
    {
        return -1;
    }
}
 80048bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return -1;
 80048c0:	4803      	ldr	r0, [pc, #12]	; (80048d0 <cntr_read+0xb8>)
 80048c2:	e7fb      	b.n	80048bc <cntr_read+0xa4>
 80048c4:	4002001c 	.word	0x4002001c
 80048c8:	3fe00000 	.word	0x3fe00000
 80048cc:	4c895440 	.word	0x4c895440
 80048d0:	bf800000 	.word	0xbf800000
 80048d4:	0015f901 	.word	0x0015f901

080048d8 <SCPI_Flush>:
scpi_result_t SCPI_Flush(scpi_t * context)
{
    (void) context;

    return SCPI_RES_OK;
}
 80048d8:	2001      	movs	r0, #1
 80048da:	4770      	bx	lr

080048dc <SCPI_CoreIdnQ>:
    comm_respond((comm_data_t*)context->comm, "**Reset\r\n", 9);
    return SCPI_RES_OK;
}

scpi_result_t SCPI_CoreIdnQ(scpi_t * context)
{
 80048dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e0:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < 4; i++) {
 80048e2:	2400      	movs	r4, #0
            else if (i == 1) // comm_data_usb.available
                j = 5;

            SCPI_ResultMnemonic(context, context->idn[j]);
        } else {
            SCPI_ResultMnemonic(context, "0");
 80048e4:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8004934 <SCPI_CoreIdnQ+0x58>
 80048e8:	f100 0684 	add.w	r6, r0, #132	; 0x84
        if (context->idn[i])
 80048ec:	f856 3b04 	ldr.w	r3, [r6], #4
 80048f0:	b1eb      	cbz	r3, 800492e <SCPI_CoreIdnQ+0x52>
            if (i == 1 && ((comm_data_t*)(context->comm))->uart.available)
 80048f2:	2c01      	cmp	r4, #1
 80048f4:	d119      	bne.n	800492a <SCPI_CoreIdnQ+0x4e>
 80048f6:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
 80048fa:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
                j = 5;
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bf14      	ite	ne
 8004902:	2304      	movne	r3, #4
 8004904:	2305      	moveq	r3, #5
            SCPI_ResultMnemonic(context, context->idn[j]);
 8004906:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800490a:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 800490e:	4638      	mov	r0, r7
 8004910:	f7fb fc28 	bl	8000164 <strlen>
 8004914:	4639      	mov	r1, r7
 8004916:	4602      	mov	r2, r0
            SCPI_ResultMnemonic(context, "0");
 8004918:	4628      	mov	r0, r5
    for (i = 0; i < 4; i++) {
 800491a:	3401      	adds	r4, #1
            SCPI_ResultMnemonic(context, "0");
 800491c:	f003 fc2a 	bl	8008174 <SCPI_ResultCharacters>
    for (i = 0; i < 4; i++) {
 8004920:	2c04      	cmp	r4, #4
 8004922:	d1e3      	bne.n	80048ec <SCPI_CoreIdnQ+0x10>
        }
    }
    return SCPI_RES_OK;
}
 8004924:	2001      	movs	r0, #1
 8004926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800492a:	4623      	mov	r3, r4
 800492c:	e7eb      	b.n	8004906 <SCPI_CoreIdnQ+0x2a>
            SCPI_ResultMnemonic(context, "0");
 800492e:	2201      	movs	r2, #1
 8004930:	4641      	mov	r1, r8
 8004932:	e7f1      	b.n	8004918 <SCPI_CoreIdnQ+0x3c>
 8004934:	0800aa15 	.word	0x0800aa15

08004938 <uart_put_text>:

/************************* Write Respond *************************/

void uart_put_text(const char* data)
{
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	4604      	mov	r4, r0
    for (int i = 0; i < strlen(data); i++)
 800493c:	4605      	mov	r5, r0
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800493e:	4e07      	ldr	r6, [pc, #28]	; (800495c <uart_put_text+0x24>)
 8004940:	4620      	mov	r0, r4
 8004942:	f7fb fc0f 	bl	8000164 <strlen>
 8004946:	1b2b      	subs	r3, r5, r4
 8004948:	4298      	cmp	r0, r3
 800494a:	d800      	bhi.n	800494e <uart_put_text+0x16>
        uart_put_char(data[i]);
}
 800494c:	bd70      	pop	{r4, r5, r6, pc}
        uart_put_char(data[i]);
 800494e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004952:	6832      	ldr	r2, [r6, #0]

static void uart_put_char(const char data)
{
    while(!LL_USART_IsActiveFlag_TXE(PS_UART));
 8004954:	0612      	lsls	r2, r2, #24
 8004956:	d5fc      	bpl.n	8004952 <uart_put_text+0x1a>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8004958:	6073      	str	r3, [r6, #4]
 800495a:	e7f1      	b.n	8004940 <uart_put_text+0x8>
 800495c:	40013800 	.word	0x40013800

08004960 <comm_init>:

/************************* Main Comm *************************/

void comm_init(comm_data_t* self)
{
    self->uart.last = 0;
 8004960:	2300      	movs	r3, #0
{
 8004962:	b500      	push	{lr}
    self->uart.last = 0;
 8004964:	f880 30cb 	strb.w	r3, [r0, #203]	; 0xcb
    self->uart.available = 0;
 8004968:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
    self->uart.rx_index = 0;
 800496c:	f880 30cd 	strb.w	r3, [r0, #205]	; 0xcd
    self->usb.last = 0;
 8004970:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    self->usb.available = 0;
 8004974:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    self->usb.rx_index = 0;
 8004978:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
    comm_ptr = self;
 800497c:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <comm_init+0x68>)
{
 800497e:	b08b      	sub	sp, #44	; 0x2c
    comm_ptr = self;
 8004980:	6018      	str	r0, [r3, #0]

    SCPI_Init(&scpi_context,
 8004982:	2311      	movs	r3, #17
 8004984:	9307      	str	r3, [sp, #28]
 8004986:	4b11      	ldr	r3, [pc, #68]	; (80049cc <comm_init+0x6c>)
 8004988:	9008      	str	r0, [sp, #32]
 800498a:	9306      	str	r3, [sp, #24]
 800498c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004990:	9305      	str	r3, [sp, #20]
 8004992:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <comm_init+0x70>)
 8004994:	4a0f      	ldr	r2, [pc, #60]	; (80049d4 <comm_init+0x74>)
 8004996:	9304      	str	r3, [sp, #16]
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <comm_init+0x78>)
 800499a:	4910      	ldr	r1, [pc, #64]	; (80049dc <comm_init+0x7c>)
 800499c:	9303      	str	r3, [sp, #12]
 800499e:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <comm_init+0x80>)
 80049a0:	4810      	ldr	r0, [pc, #64]	; (80049e4 <comm_init+0x84>)
 80049a2:	9302      	str	r3, [sp, #8]
 80049a4:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <comm_init+0x88>)
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	4b10      	ldr	r3, [pc, #64]	; (80049ec <comm_init+0x8c>)
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <comm_init+0x90>)
 80049ae:	f003 fb8f 	bl	80080d0 <SCPI_Init>
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80049b2:	4a10      	ldr	r2, [pc, #64]	; (80049f4 <comm_init+0x94>)
              scpi_input_buffer, SCPI_INPUT_BUFFER_LENGTH,
              scpi_error_queue_data, SCPI_ERROR_QUEUE_SIZE,
              self);

    LL_USART_EnableIT_RXNE(PS_UART);
    uart_put_text(WELCOME_STR);
 80049b4:	4810      	ldr	r0, [pc, #64]	; (80049f8 <comm_init+0x98>)
 80049b6:	68d3      	ldr	r3, [r2, #12]
 80049b8:	f043 0320 	orr.w	r3, r3, #32
 80049bc:	60d3      	str	r3, [r2, #12]
}
 80049be:	b00b      	add	sp, #44	; 0x2c
 80049c0:	f85d eb04 	ldr.w	lr, [sp], #4
    uart_put_text(WELCOME_STR);
 80049c4:	f7ff bfb8 	b.w	8004938 <uart_put_text>
 80049c8:	200005b0 	.word	0x200005b0
 80049cc:	200041cc 	.word	0x200041cc
 80049d0:	200040cc 	.word	0x200040cc
 80049d4:	2000017c 	.word	0x2000017c
 80049d8:	0800aa15 	.word	0x0800aa15
 80049dc:	0800ab6c 	.word	0x0800ab6c
 80049e0:	0800aa11 	.word	0x0800aa11
 80049e4:	20003ff4 	.word	0x20003ff4
 80049e8:	0800aa17 	.word	0x0800aa17
 80049ec:	0800a9a1 	.word	0x0800a9a1
 80049f0:	0800b178 	.word	0x0800b178
 80049f4:	40013800 	.word	0x40013800
 80049f8:	0800aa28 	.word	0x0800aa28

080049fc <comm_main>:

uint8_t comm_main(comm_data_t* self)
{
 80049fc:	b538      	push	{r3, r4, r5, lr}
    if (self->uart.available)
 80049fe:	f890 50cc 	ldrb.w	r5, [r0, #204]	; 0xcc
{
 8004a02:	4604      	mov	r4, r0
    if (self->uart.available)
 8004a04:	b19d      	cbz	r5, 8004a2e <comm_main+0x32>
    {
        SCPI_Input(&scpi_context, self->uart.rx_buffer, self->uart.rx_index);
 8004a06:	f100 0567 	add.w	r5, r0, #103	; 0x67
 8004a0a:	f890 20cd 	ldrb.w	r2, [r0, #205]	; 0xcd
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4811      	ldr	r0, [pc, #68]	; (8004a58 <comm_main+0x5c>)
 8004a12:	f003 feff 	bl	8008814 <SCPI_Input>

        memset(self->uart.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
 8004a16:	2264      	movs	r2, #100	; 0x64
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f004 fa1c 	bl	8008e58 <memset>
        self->uart.rx_index = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
        self->uart.available = 0;
 8004a26:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
        SCPI_Input(&scpi_context, self->usb.rx_buffer, self->usb.rx_index);

        memset(self->usb.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
        self->usb.rx_index = 0;
        self->usb.available = 0;
        return 1;
 8004a2a:	2001      	movs	r0, #1
    }
    return 0;
}
 8004a2c:	bd38      	pop	{r3, r4, r5, pc}
    else if (self->usb.available)
 8004a2e:	f890 0065 	ldrb.w	r0, [r0, #101]	; 0x65
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d0fa      	beq.n	8004a2c <comm_main+0x30>
        SCPI_Input(&scpi_context, self->usb.rx_buffer, self->usb.rx_index);
 8004a36:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	4806      	ldr	r0, [pc, #24]	; (8004a58 <comm_main+0x5c>)
 8004a3e:	f003 fee9 	bl	8008814 <SCPI_Input>
        memset(self->usb.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
 8004a42:	2264      	movs	r2, #100	; 0x64
 8004a44:	4629      	mov	r1, r5
 8004a46:	4620      	mov	r0, r4
 8004a48:	f004 fa06 	bl	8008e58 <memset>
        self->usb.rx_index = 0;
 8004a4c:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
        self->usb.available = 0;
 8004a50:	f884 5065 	strb.w	r5, [r4, #101]	; 0x65
 8004a54:	e7e9      	b.n	8004a2a <comm_main+0x2e>
 8004a56:	bf00      	nop
 8004a58:	20003ff4 	.word	0x20003ff4

08004a5c <comm_respond>:

int comm_respond(comm_data_t* self, const char* data, int len)
{
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (self->uart.last)
 8004a5e:	f890 30cb 	ldrb.w	r3, [r0, #203]	; 0xcb
{
 8004a62:	460e      	mov	r6, r1
 8004a64:	4614      	mov	r4, r2
    if (self->uart.last)
 8004a66:	b16b      	cbz	r3, 8004a84 <comm_respond+0x28>
 8004a68:	460b      	mov	r3, r1
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004a6a:	4a0e      	ldr	r2, [pc, #56]	; (8004aa4 <comm_respond+0x48>)
    for (int i = 0; i < len; i++)
 8004a6c:	1b99      	subs	r1, r3, r6
 8004a6e:	42a1      	cmp	r1, r4
 8004a70:	db01      	blt.n	8004a76 <comm_respond+0x1a>
        }

        return len;
    }
    return 0;
}
 8004a72:	4620      	mov	r0, r4
 8004a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uart_put_char(data[i]);
 8004a76:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004a7a:	6810      	ldr	r0, [r2, #0]
    while(!LL_USART_IsActiveFlag_TXE(PS_UART));
 8004a7c:	0600      	lsls	r0, r0, #24
 8004a7e:	d5fc      	bpl.n	8004a7a <comm_respond+0x1e>
  USARTx->DR = Value;
 8004a80:	6051      	str	r1, [r2, #4]
 8004a82:	e7f3      	b.n	8004a6c <comm_respond+0x10>
    else if (self->usb.last)
 8004a84:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8004a88:	b153      	cbz	r3, 8004aa0 <comm_respond+0x44>
 8004a8a:	4d07      	ldr	r5, [pc, #28]	; (8004aa8 <comm_respond+0x4c>)
            ret = CDC_Transmit_FS((uint8_t *)data, len);
 8004a8c:	b297      	uxth	r7, r2
 8004a8e:	4639      	mov	r1, r7
 8004a90:	4630      	mov	r0, r6
 8004a92:	f7ff fc6d 	bl	8004370 <CDC_Transmit_FS>
        while (ret == USBD_BUSY && cntr > 0)
 8004a96:	2801      	cmp	r0, #1
 8004a98:	d1eb      	bne.n	8004a72 <comm_respond+0x16>
 8004a9a:	3d01      	subs	r5, #1
 8004a9c:	d1f7      	bne.n	8004a8e <comm_respond+0x32>
 8004a9e:	e7e8      	b.n	8004a72 <comm_respond+0x16>
    return 0;
 8004aa0:	461c      	mov	r4, r3
 8004aa2:	e7e6      	b.n	8004a72 <comm_respond+0x16>
 8004aa4:	40013800 	.word	0x40013800
 8004aa8:	000f4240 	.word	0x000f4240

08004aac <SCPI_Write>:
    return comm_respond((comm_data_t*)context->comm, data, len);
 8004aac:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 8004ab0:	f7ff bfd4 	b.w	8004a5c <comm_respond>

08004ab4 <SCPI_Error>:
{
 8004ab4:	b530      	push	{r4, r5, lr}
    int len = sprintf(buff, "**ERROR: %d, \"%s\"\r\n", (int16_t) err, SCPI_ErrorTranslate(err));
 8004ab6:	b20c      	sxth	r4, r1
{
 8004ab8:	b09b      	sub	sp, #108	; 0x6c
 8004aba:	4605      	mov	r5, r0
    int len = sprintf(buff, "**ERROR: %d, \"%s\"\r\n", (int16_t) err, SCPI_ErrorTranslate(err));
 8004abc:	4620      	mov	r0, r4
 8004abe:	f002 fd19 	bl	80074f4 <SCPI_ErrorTranslate>
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	4906      	ldr	r1, [pc, #24]	; (8004ae0 <SCPI_Error+0x2c>)
 8004ac8:	a801      	add	r0, sp, #4
 8004aca:	f004 f9cd 	bl	8008e68 <siprintf>
    comm_respond((comm_data_t*)context->comm, buff, len);
 8004ace:	a901      	add	r1, sp, #4
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	f8d5 00d4 	ldr.w	r0, [r5, #212]	; 0xd4
 8004ad6:	f7ff ffc1 	bl	8004a5c <comm_respond>
}
 8004ada:	2000      	movs	r0, #0
 8004adc:	b01b      	add	sp, #108	; 0x6c
 8004ade:	bd30      	pop	{r4, r5, pc}
 8004ae0:	0800a9f3 	.word	0x0800a9f3

08004ae4 <SCPI_Control>:
{
 8004ae4:	b510      	push	{r4, lr}
    if (SCPI_CTRL_SRQ == ctrl)
 8004ae6:	2901      	cmp	r1, #1
{
 8004ae8:	b09c      	sub	sp, #112	; 0x70
 8004aea:	4604      	mov	r4, r0
 8004aec:	4613      	mov	r3, r2
    if (SCPI_CTRL_SRQ == ctrl)
 8004aee:	d10c      	bne.n	8004b0a <SCPI_Control+0x26>
        len = sprintf(buff, "**SRQ: 0x%X (%d)\r\n", val, val);
 8004af0:	4909      	ldr	r1, [pc, #36]	; (8004b18 <SCPI_Control+0x34>)
 8004af2:	a803      	add	r0, sp, #12
 8004af4:	f004 f9b8 	bl	8008e68 <siprintf>
    comm_respond((comm_data_t*)context->comm, buff, len);
 8004af8:	4602      	mov	r2, r0
 8004afa:	a903      	add	r1, sp, #12
 8004afc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 8004b00:	f7ff ffac 	bl	8004a5c <comm_respond>
}
 8004b04:	2001      	movs	r0, #1
 8004b06:	b01c      	add	sp, #112	; 0x70
 8004b08:	bd10      	pop	{r4, pc}
        len = sprintf(buff, "**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
 8004b0a:	9200      	str	r2, [sp, #0]
 8004b0c:	a803      	add	r0, sp, #12
 8004b0e:	460a      	mov	r2, r1
 8004b10:	4902      	ldr	r1, [pc, #8]	; (8004b1c <SCPI_Control+0x38>)
 8004b12:	f004 f9a9 	bl	8008e68 <siprintf>
 8004b16:	e7ef      	b.n	8004af8 <SCPI_Control+0x14>
 8004b18:	0800a9c7 	.word	0x0800a9c7
 8004b1c:	0800a9da 	.word	0x0800a9da

08004b20 <SCPI_Reset>:
{
 8004b20:	b508      	push	{r3, lr}
    comm_respond((comm_data_t*)context->comm, "**Reset\r\n", 9);
 8004b22:	2209      	movs	r2, #9
 8004b24:	4903      	ldr	r1, [pc, #12]	; (8004b34 <SCPI_Reset+0x14>)
 8004b26:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 8004b2a:	f7ff ff97 	bl	8004a5c <comm_respond>
}
 8004b2e:	2001      	movs	r0, #1
 8004b30:	bd08      	pop	{r3, pc}
 8004b32:	bf00      	nop
 8004b34:	0800aa07 	.word	0x0800aa07

08004b38 <daq_malloc.constprop.1>:
    daq_trig_update(self);
    daq_enable(self, 1);
    return 0;
}

static void daq_malloc(daq_data_t* self, daq_buff_t* buff, int mem, int reserve, int chans, uint32_t src,
 8004b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3c:	f89d e020 	ldrb.w	lr, [sp, #32]
                       uint32_t dma_ch, DMA_TypeDef* dma, enum daq_bits bits)
{
    mem += reserve * chans;
 8004b40:	eb02 0543 	add.w	r5, r2, r3, lsl #1
    buff->reserve = reserve * chans;
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	005a      	lsls	r2, r3, #1

    if (bits == B12)
 8004b48:	f1be 0f0c 	cmp.w	lr, #12
    buff->reserve = reserve * chans;
 8004b4c:	810a      	strh	r2, [r1, #8]
static void daq_malloc(daq_data_t* self, daq_buff_t* buff, int mem, int reserve, int chans, uint32_t src,
 8004b4e:	460c      	mov	r4, r1
 8004b50:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8004b54:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 8004b58:	fa1f fc85 	uxth.w	ip, r5
 8004b5c:	f500 513e 	add.w	r1, r0, #12160	; 0x2f80
    if (bits == B12)
 8004b60:	d11b      	bne.n	8004b9a <daq_malloc.constprop.1+0x62>
    {
        size_t ln = mem * sizeof(uint16_t);
        //buff->data = (uint16_t*) malloc(ln);
        buff->data = (uint16_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004b62:	f8b1 e000 	ldrh.w	lr, [r1]
 8004b66:	eb02 000e 	add.w	r0, r2, lr
        self->buff_raw_ptr += mem * 2;
 8004b6a:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
        buff->data = (uint16_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004b6e:	6020      	str	r0, [r4, #0]

        buff->chans = chans;
        buff->len = mem;
        memset(buff->data, 0, ln);
 8004b70:	006a      	lsls	r2, r5, #1
        self->buff_raw_ptr += mem * 2;
 8004b72:	f8a1 e000 	strh.w	lr, [r1]
        buff->chans = chans;
 8004b76:	80a3      	strh	r3, [r4, #4]
        buff->len = mem;
 8004b78:	f8a4 c006 	strh.w	ip, [r4, #6]
        memset(buff->data, 0, ln);
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	f004 f96b 	bl	8008e58 <memset>
        dma_set(src, dma, dma_ch, (uint32_t)((uint16_t*)((uint8_t*)buff->data)), mem, LL_DMA_PDATAALIGN_HALFWORD);
 8004b82:	f44f 7380 	mov.w	r3, #256	; 0x100
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
        self->buff_raw_ptr += mem;
        buff->chans = chans;
        buff->len = mem;
        memset(buff->data, 0, ln);
        dma_set(src, dma, dma_ch, (uint32_t)((uint8_t*)buff->data), mem, LL_DMA_PDATAALIGN_BYTE);
 8004b86:	463a      	mov	r2, r7
 8004b88:	e9cd 5306 	strd	r5, r3, [sp, #24]
 8004b8c:	6823      	ldr	r3, [r4, #0]
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
        self->buff_raw_ptr += mem;
        buff->chans = chans;
        buff->len = mem;
        memset(buff->data, 0, ln);
        dma_set(src, dma, PS_DMA_CH_LA, (uint32_t)((uint8_t*)buff->data), mem, LL_DMA_PDATAALIGN_BYTE);  // TODO DMA2 ??
 8004b8e:	4630      	mov	r0, r6
    }
}
 8004b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        dma_set(src, dma, PS_DMA_CH_LA, (uint32_t)((uint8_t*)buff->data), mem, LL_DMA_PDATAALIGN_BYTE);  // TODO DMA2 ??
 8004b94:	4914      	ldr	r1, [pc, #80]	; (8004be8 <daq_malloc.constprop.1+0xb0>)
 8004b96:	f001 b9d5 	b.w	8005f44 <dma_set>
    else if (bits == B8)
 8004b9a:	f1be 0f08 	cmp.w	lr, #8
 8004b9e:	d110      	bne.n	8004bc2 <daq_malloc.constprop.1+0x8a>
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004ba0:	f8b1 e000 	ldrh.w	lr, [r1]
 8004ba4:	eb02 000e 	add.w	r0, r2, lr
        self->buff_raw_ptr += mem;
 8004ba8:	44e6      	add	lr, ip
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004baa:	6020      	str	r0, [r4, #0]
        memset(buff->data, 0, ln);
 8004bac:	462a      	mov	r2, r5
        self->buff_raw_ptr += mem;
 8004bae:	f8a1 e000 	strh.w	lr, [r1]
        buff->chans = chans;
 8004bb2:	80a3      	strh	r3, [r4, #4]
        buff->len = mem;
 8004bb4:	f8a4 c006 	strh.w	ip, [r4, #6]
        memset(buff->data, 0, ln);
 8004bb8:	2100      	movs	r1, #0
 8004bba:	f004 f94d 	bl	8008e58 <memset>
        dma_set(src, dma, dma_ch, (uint32_t)((uint8_t*)buff->data), mem, LL_DMA_PDATAALIGN_BYTE);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e7e1      	b.n	8004b86 <daq_malloc.constprop.1+0x4e>
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004bc2:	880f      	ldrh	r7, [r1, #0]
 8004bc4:	19d0      	adds	r0, r2, r7
        self->buff_raw_ptr += mem;
 8004bc6:	4467      	add	r7, ip
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004bc8:	6020      	str	r0, [r4, #0]
        memset(buff->data, 0, ln);
 8004bca:	462a      	mov	r2, r5
        self->buff_raw_ptr += mem;
 8004bcc:	800f      	strh	r7, [r1, #0]
        buff->chans = chans;
 8004bce:	80a3      	strh	r3, [r4, #4]
        buff->len = mem;
 8004bd0:	f8a4 c006 	strh.w	ip, [r4, #6]
        memset(buff->data, 0, ln);
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f004 f93f 	bl	8008e58 <memset>
        dma_set(src, dma, PS_DMA_CH_LA, (uint32_t)((uint8_t*)buff->data), mem, LL_DMA_PDATAALIGN_BYTE);  // TODO DMA2 ??
 8004bda:	2300      	movs	r3, #0
 8004bdc:	2206      	movs	r2, #6
 8004bde:	e9cd 5306 	strd	r5, r3, [sp, #24]
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	e7d3      	b.n	8004b8e <daq_malloc.constprop.1+0x56>
 8004be6:	bf00      	nop
 8004be8:	40020000 	.word	0x40020000

08004bec <daq_settings_save>:
{
 8004bec:	b510      	push	{r4, lr}
    dst1->fs = src1->fs;
 8004bee:	6844      	ldr	r4, [r0, #4]
 8004bf0:	6054      	str	r4, [r2, #4]
    dst1->mem = src1->mem;
 8004bf2:	8904      	ldrh	r4, [r0, #8]
 8004bf4:	8114      	strh	r4, [r2, #8]
    dst1->bits = src1->bits;
 8004bf6:	7a84      	ldrb	r4, [r0, #10]
 8004bf8:	7294      	strb	r4, [r2, #10]
    dst1->ch1_en = src1->ch1_en;
 8004bfa:	7804      	ldrb	r4, [r0, #0]
 8004bfc:	7014      	strb	r4, [r2, #0]
    dst1->ch2_en = src1->ch2_en;
 8004bfe:	7844      	ldrb	r4, [r0, #1]
 8004c00:	7054      	strb	r4, [r2, #1]
    dst1->ch3_en = src1->ch3_en;
 8004c02:	7884      	ldrb	r4, [r0, #2]
 8004c04:	7094      	strb	r4, [r2, #2]
    dst1->ch4_en = src1->ch4_en;
 8004c06:	78c0      	ldrb	r0, [r0, #3]
 8004c08:	70d0      	strb	r0, [r2, #3]
    dst2->val_percent = src2->val_percent;
 8004c0a:	690a      	ldr	r2, [r1, #16]
 8004c0c:	611a      	str	r2, [r3, #16]
    dst2->val = src2->val;
 8004c0e:	68ca      	ldr	r2, [r1, #12]
 8004c10:	60da      	str	r2, [r3, #12]
    dst2->ch = src2->ch;
 8004c12:	688a      	ldr	r2, [r1, #8]
 8004c14:	609a      	str	r2, [r3, #8]
    dst2->edge = src2->edge;
 8004c16:	794a      	ldrb	r2, [r1, #5]
 8004c18:	715a      	strb	r2, [r3, #5]
    dst2->mode = src2->mode;
 8004c1a:	790a      	ldrb	r2, [r1, #4]
 8004c1c:	711a      	strb	r2, [r3, #4]
    dst2->pretrigger = src2->pretrigger;
 8004c1e:	680a      	ldr	r2, [r1, #0]
 8004c20:	601a      	str	r2, [r3, #0]
}
 8004c22:	bd10      	pop	{r4, pc}

08004c24 <daq_settings_init>:
    self->save_s.bits = B12;
 8004c24:	f642 739a 	movw	r3, #12186	; 0x2f9a
 8004c28:	220c      	movs	r2, #12
 8004c2a:	54c2      	strb	r2, [r0, r3]
    self->save_s.ch1_en = 1;
 8004c2c:	f642 7390 	movw	r3, #12176	; 0x2f90
 8004c30:	f240 1201 	movw	r2, #257	; 0x101
 8004c34:	50c2      	str	r2, [r0, r3]
    self->save_s.ch4_en = 0;
 8004c36:	f642 7394 	movw	r3, #12180	; 0x2f94
 8004c3a:	4a20      	ldr	r2, [pc, #128]	; (8004cbc <daq_settings_init+0x98>)
    self->trig.save_s.edge = RISING;
 8004c3c:	f642 71d1 	movw	r1, #12241	; 0x2fd1
    self->save_s.ch4_en = 0;
 8004c40:	50c2      	str	r2, [r0, r3]
    self->save_s.fs = 1000;
 8004c42:	f642 7398 	movw	r3, #12184	; 0x2f98
 8004c46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004c4a:	52c2      	strh	r2, [r0, r3]
    self->trig.save_s.val = 2047;
 8004c4c:	f642 73d8 	movw	r3, #12248	; 0x2fd8
 8004c50:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004c54:	50c2      	str	r2, [r0, r3]
    self->trig.save_s.ch = 1;
 8004c56:	2201      	movs	r2, #1
 8004c58:	f642 73d4 	movw	r3, #12244	; 0x2fd4
 8004c5c:	50c2      	str	r2, [r0, r3]
    self->trig.save_s.edge = RISING;
 8004c5e:	2300      	movs	r3, #0
{
 8004c60:	b530      	push	{r4, r5, lr}
    self->trig.save_s.edge = RISING;
 8004c62:	5443      	strb	r3, [r0, r1]
    self->trig.save_s.mode = DISABLED;
 8004c64:	2403      	movs	r4, #3
 8004c66:	f642 71d0 	movw	r1, #12240	; 0x2fd0
 8004c6a:	5444      	strb	r4, [r0, r1]
    self->trig.save_s.pretrigger = 50;
 8004c6c:	2132      	movs	r1, #50	; 0x32
 8004c6e:	f642 74cc 	movw	r4, #12236	; 0x2fcc
 8004c72:	5101      	str	r1, [r0, r4]
    self->save_l.bits = B1;
 8004c74:	f642 74a6 	movw	r4, #12198	; 0x2fa6
    self->save_l.ch1_en = 1;
 8004c78:	f04f 3501 	mov.w	r5, #16843009	; 0x1010101
    self->save_l.bits = B1;
 8004c7c:	5502      	strb	r2, [r0, r4]
    self->save_l.ch1_en = 1;
 8004c7e:	f642 749c 	movw	r4, #12188	; 0x2f9c
 8004c82:	5105      	str	r5, [r0, r4]
    self->save_l.ch4_en = 1;
 8004c84:	f642 74a0 	movw	r4, #12192	; 0x2fa0
 8004c88:	4d0d      	ldr	r5, [pc, #52]	; (8004cc0 <daq_settings_init+0x9c>)
 8004c8a:	5105      	str	r5, [r0, r4]
    self->save_l.fs = 100000;
 8004c8c:	f642 74a4 	movw	r4, #12196	; 0x2fa4
 8004c90:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004c94:	5305      	strh	r5, [r0, r4]
    self->trig.save_s.val_percent = 0;
 8004c96:	f642 74dc 	movw	r4, #12252	; 0x2fdc
 8004c9a:	5103      	str	r3, [r0, r4]
    self->trig.save_l.val = 0;
 8004c9c:	f642 74ec 	movw	r4, #12268	; 0x2fec
 8004ca0:	5103      	str	r3, [r0, r4]
    self->trig.save_l.ch = 1;
 8004ca2:	f642 74e8 	movw	r4, #12264	; 0x2fe8
 8004ca6:	5102      	str	r2, [r0, r4]
    self->trig.save_l.edge = RISING;
 8004ca8:	f642 72e5 	movw	r2, #12261	; 0x2fe5
 8004cac:	5483      	strb	r3, [r0, r2]
    self->trig.save_l.mode = AUTO;
 8004cae:	f642 72e4 	movw	r2, #12260	; 0x2fe4
 8004cb2:	5483      	strb	r3, [r0, r2]
    self->trig.save_l.pretrigger = 50;
 8004cb4:	f642 73e0 	movw	r3, #12256	; 0x2fe0
 8004cb8:	50c1      	str	r1, [r0, r3]
}
 8004cba:	bd30      	pop	{r4, r5, pc}
 8004cbc:	447a0000 	.word	0x447a0000
 8004cc0:	47c35000 	.word	0x47c35000

08004cc4 <daq_init>:
{
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	4604      	mov	r4, r0
    daq_trig_init(self);
 8004cc8:	f000 fba6 	bl	8005418 <daq_trig_init>
    daq_settings_init(self);
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f7ff ffa9 	bl	8004c24 <daq_settings_init>
    daq_settings_save(&self->save_s, &self->trig.save_s, &self->set, &self->trig.set);
 8004cd2:	f504 533e 	add.w	r3, r4, #12160	; 0x2f80
 8004cd6:	f504 523e 	add.w	r2, r4, #12160	; 0x2f80
 8004cda:	f504 513f 	add.w	r1, r4, #12224	; 0x2fc0
 8004cde:	f504 503e 	add.w	r0, r4, #12160	; 0x2f80
 8004ce2:	3338      	adds	r3, #56	; 0x38
 8004ce4:	3204      	adds	r2, #4
 8004ce6:	310c      	adds	r1, #12
 8004ce8:	3010      	adds	r0, #16
 8004cea:	f7ff ff7f 	bl	8004bec <daq_settings_save>
    self->mode = SCOPE;
 8004cee:	2500      	movs	r5, #0
 8004cf0:	f642 73b6 	movw	r3, #12214	; 0x2fb6
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 8004cf4:	4629      	mov	r1, r5
    self->mode = SCOPE;
 8004cf6:	54e5      	strb	r5, [r4, r3]
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 8004cf8:	f104 003c 	add.w	r0, r4, #60	; 0x3c

static void daq_clear_buff(daq_buff_t* buff)
{
    buff->data = NULL;
 8004cfc:	e9c4 5500 	strd	r5, r5, [r4]
    buff->chans = 0;
    buff->len = 0;
 8004d00:	8125      	strh	r5, [r4, #8]
    buff->data = NULL;
 8004d02:	e9c4 5503 	strd	r5, r5, [r4, #12]
    buff->len = 0;
 8004d06:	82a5      	strh	r5, [r4, #20]
    buff->data = NULL;
 8004d08:	e9c4 5506 	strd	r5, r5, [r4, #24]
    buff->len = 0;
 8004d0c:	8425      	strh	r5, [r4, #32]
    buff->data = NULL;
 8004d0e:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
    buff->len = 0;
 8004d12:	85a5      	strh	r5, [r4, #44]	; 0x2c
    buff->data = NULL;
 8004d14:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    buff->len = 0;
 8004d18:	8725      	strh	r5, [r4, #56]	; 0x38
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 8004d1a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8004d1e:	f004 f89b 	bl	8008e58 <memset>
    self->buff_raw_ptr = 0;
 8004d22:	f504 533e 	add.w	r3, r4, #12160	; 0x2f80
 8004d26:	801d      	strh	r5, [r3, #0]
    self->trig.buff_trig = NULL;
 8004d28:	f243 032c 	movw	r3, #12332	; 0x302c
 8004d2c:	50e5      	str	r5, [r4, r3]
    self->vcc = 0;
 8004d2e:	f642 73a8 	movw	r3, #12200	; 0x2fa8
 8004d32:	50e5      	str	r5, [r4, r3]
 8004d34:	f642 73ac 	movw	r3, #12204	; 0x2fac
 8004d38:	50e5      	str	r5, [r4, r3]
    self->vcc_mv = 0;
 8004d3a:	f642 73b0 	movw	r3, #12208	; 0x2fb0
 8004d3e:	50e5      	str	r5, [r4, r3]
    self->adc_max_val = 0;
 8004d40:	f642 73b4 	movw	r3, #12212	; 0x2fb4
 8004d44:	52e5      	strh	r5, [r4, r3]
}
 8004d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    adc_init();
 8004d4a:	f001 b93d 	b.w	8005fc8 <adc_init>

08004d4e <daq_reset>:
    return ret;
}

void daq_reset(daq_data_t* self)
{
    self->trig.uwtick_first = 0;
 8004d4e:	2100      	movs	r1, #0
 8004d50:	f243 0314 	movw	r3, #12308	; 0x3014
{
 8004d54:	b510      	push	{r4, lr}
    self->trig.uwtick_first = 0;
 8004d56:	50c1      	str	r1, [r0, r3]
    self->trig.pretrig_cntr = 0;
 8004d58:	f243 0318 	movw	r3, #12312	; 0x3018
 8004d5c:	50c1      	str	r1, [r0, r3]
    self->trig.posttrig_size = 0;
 8004d5e:	f243 0324 	movw	r3, #12324	; 0x3024
 8004d62:	50c1      	str	r1, [r0, r3]
    self->trig.ready_last = 0;
 8004d64:	f642 73fb 	movw	r3, #12283	; 0x2ffb
 8004d68:	54c1      	strb	r1, [r0, r3]
    self->trig.ready = 0;
 8004d6a:	f642 73fa 	movw	r3, #12282	; 0x2ffa
 8004d6e:	54c1      	strb	r1, [r0, r3]
    self->trig.cntr = 0;
 8004d70:	f642 73fc 	movw	r3, #12284	; 0x2ffc
 8004d74:	50c1      	str	r1, [r0, r3]
    self->trig.all_cntr = 0;
 8004d76:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8004d7a:	6019      	str	r1, [r3, #0]
    //self->trig.pos_frst = 0;
    //self->trig.pos_trig = 0;
    //self->trig.pos_last = 0;
    //self->trig.pos_diff = 0;
    self->trig.pretrig_cntr = 0;
    self->trig.is_post = 0;
 8004d7c:	f642 73f8 	movw	r3, #12280	; 0x2ff8
 8004d80:	54c1      	strb	r1, [r0, r3]

    if (self->buff1.len > 0)
 8004d82:	88c2      	ldrh	r2, [r0, #6]
{
 8004d84:	4604      	mov	r4, r0
    if (self->buff1.len > 0)
 8004d86:	b112      	cbz	r2, 8004d8e <daq_reset+0x40>
        memset(self->buff1.data, 0, self->buff1.len);
 8004d88:	6800      	ldr	r0, [r0, #0]
 8004d8a:	f004 f865 	bl	8008e58 <memset>
    if (self->buff2.len > 0)
 8004d8e:	8a62      	ldrh	r2, [r4, #18]
 8004d90:	b11a      	cbz	r2, 8004d9a <daq_reset+0x4c>
        memset(self->buff2.data, 0, self->buff2.len);
 8004d92:	2100      	movs	r1, #0
 8004d94:	68e0      	ldr	r0, [r4, #12]
 8004d96:	f004 f85f 	bl	8008e58 <memset>
    if (self->buff3.len > 0)
 8004d9a:	8be2      	ldrh	r2, [r4, #30]
 8004d9c:	b11a      	cbz	r2, 8004da6 <daq_reset+0x58>
        memset(self->buff3.data, 0, self->buff3.len);
 8004d9e:	2100      	movs	r1, #0
 8004da0:	69a0      	ldr	r0, [r4, #24]
 8004da2:	f004 f859 	bl	8008e58 <memset>
    if (self->buff4.len > 0)
 8004da6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004da8:	b12a      	cbz	r2, 8004db6 <daq_reset+0x68>
        memset(self->buff4.data, 0, self->buff4.len);
 8004daa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004dac:	2100      	movs	r1, #0
}
 8004dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset(self->buff4.data, 0, self->buff4.len);
 8004db2:	f004 b851 	b.w	8008e58 <memset>
}
 8004db6:	bd10      	pop	{r4, pc}

08004db8 <daq_enable>:

void daq_enable(daq_data_t* self, uint8_t enable)
{
 8004db8:	b538      	push	{r3, r4, r5, lr}
    self->trig.pretrig_cntr = 0;
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f243 0318 	movw	r3, #12312	; 0x3018
{
 8004dc0:	4604      	mov	r4, r0
    self->trig.pretrig_cntr = 0;
 8004dc2:	50c2      	str	r2, [r0, r3]

    if (!enable)
 8004dc4:	460d      	mov	r5, r1
 8004dc6:	b921      	cbnz	r1, 8004dd2 <daq_enable+0x1a>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004dc8:	4a44      	ldr	r2, [pc, #272]	; (8004edc <daq_enable+0x124>)
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	6013      	str	r3, [r2, #0]
        LL_TIM_DisableCounter(PS_TIM_ADC);

    if (self->enabled && self->dis_hold)
 8004dd2:	f642 73b5 	movw	r3, #12213	; 0x2fb5
 8004dd6:	5ce3      	ldrb	r3, [r4, r3]
 8004dd8:	b123      	cbz	r3, 8004de4 <daq_enable+0x2c>
 8004dda:	f642 73b4 	movw	r3, #12212	; 0x2fb4
 8004dde:	5ce3      	ldrb	r3, [r4, r3]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d141      	bne.n	8004e68 <daq_enable+0xb0>
        return;

    if (self->mode == SCOPE || self->mode == VM)
 8004de4:	f642 73b6 	movw	r3, #12214	; 0x2fb6
 8004de8:	5ce3      	ldrb	r3, [r4, r3]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d83d      	bhi.n	8004e6a <daq_enable+0xb2>
 8004dee:	4b3c      	ldr	r3, [pc, #240]	; (8004ee0 <daq_enable+0x128>)
    self->trig.uwtick_first = uwTick;
}

static void daq_enable_adc(daq_data_t* self, ADC_TypeDef* adc, uint8_t enable, uint32_t dma_ch)
{
    if (enable)
 8004df0:	b32d      	cbz	r5, 8004e3e <daq_enable+0x86>
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004df2:	493c      	ldr	r1, [pc, #240]	; (8004ee4 <daq_enable+0x12c>)
 8004df4:	680a      	ldr	r2, [r1, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	600a      	str	r2, [r1, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004e02:	609a      	str	r2, [r3, #8]
    {
        LL_DMA_EnableChannel(PS_DMA_ADC, dma_ch);
        LL_ADC_REG_StartConversionExtTrig(adc, LL_ADC_REG_TRIG_EXT_RISING);
        if (self->trig.set.mode != DISABLED)
 8004e04:	f642 73bc 	movw	r3, #12220	; 0x2fbc
 8004e08:	5ce3      	ldrb	r3, [r4, r3]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d011      	beq.n	8004e32 <daq_enable+0x7a>
        {
            ASSERT(self->trig.ch_reg != 0);
 8004e0e:	f642 73f4 	movw	r3, #12276	; 0x2ff4
 8004e12:	58e3      	ldr	r3, [r4, r3]
 8004e14:	b923      	cbnz	r3, 8004e20 <daq_enable+0x68>
 8004e16:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8004e1a:	4833      	ldr	r0, [pc, #204]	; (8004ee8 <daq_enable+0x130>)
 8004e1c:	f002 f8ba 	bl	8006f94 <assert2>
  MODIFY_REG(ADCx->CR1,
 8004e20:	4a2f      	ldr	r2, [pc, #188]	; (8004ee0 <daq_enable+0x128>)
 8004e22:	4b32      	ldr	r3, [pc, #200]	; (8004eec <daq_enable+0x134>)
 8004e24:	6851      	ldr	r1, [r2, #4]
 8004e26:	400b      	ands	r3, r1
 8004e28:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8004e2c:	5861      	ldr	r1, [r4, r1]
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	6053      	str	r3, [r2, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004e32:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <daq_enable+0x124>)
 8004e34:	6813      	ldr	r3, [r2, #0]
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	e00c      	b.n	8004e58 <daq_enable+0xa0>
  CLEAR_BIT(ADCx->CR2, ADC_CR2_EXTTRIG);
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004e44:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR1,
 8004e46:	6859      	ldr	r1, [r3, #4]
 8004e48:	4a28      	ldr	r2, [pc, #160]	; (8004eec <daq_enable+0x134>)
 8004e4a:	400a      	ands	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
{
 8004e4e:	f242 7310 	movw	r3, #10000	; 0x2710
        for (int i = 0; i < 10000; i++) __asm("nop"); // let DMA and ADC finish their jobs
 8004e52:	bf00      	nop
 8004e54:	3b01      	subs	r3, #1
 8004e56:	d1fc      	bne.n	8004e52 <daq_enable+0x9a>
    self->enabled = enable;
 8004e58:	f642 73b5 	movw	r3, #12213	; 0x2fb5
 8004e5c:	54e5      	strb	r5, [r4, r3]
    self->trig.uwtick_first = uwTick;
 8004e5e:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <daq_enable+0x138>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	f243 0314 	movw	r3, #12308	; 0x3014
 8004e66:	50e2      	str	r2, [r4, r3]
}
 8004e68:	bd38      	pop	{r3, r4, r5, pc}
        ASSERT(self->trig.exti_trig != 0);
 8004e6a:	f243 0334 	movw	r3, #12340	; 0x3034
 8004e6e:	58e3      	ldr	r3, [r4, r3]
 8004e70:	b923      	cbnz	r3, 8004e7c <daq_enable+0xc4>
 8004e72:	f240 11ab 	movw	r1, #427	; 0x1ab
 8004e76:	481c      	ldr	r0, [pc, #112]	; (8004ee8 <daq_enable+0x130>)
 8004e78:	f002 f88c 	bl	8006f94 <assert2>
        if (enable)
 8004e7c:	b1cd      	cbz	r5, 8004eb2 <daq_enable+0xfa>
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <daq_enable+0x13c>)
 8004e80:	6813      	ldr	r3, [r2, #0]
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6013      	str	r3, [r2, #0]
            if (self->trig.set.mode != DISABLED)
 8004e88:	f642 73bc 	movw	r3, #12220	; 0x2fbc
 8004e8c:	5ce3      	ldrb	r3, [r4, r3]
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d0cf      	beq.n	8004e32 <daq_enable+0x7a>
                NVIC_EnableIRQ(self->trig.exti_trig);
 8004e92:	f243 0334 	movw	r3, #12340	; 0x3034
 8004e96:	58e2      	ldr	r2, [r4, r3]
 8004e98:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	dbc9      	blt.n	8004e32 <daq_enable+0x7a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	f002 021f 	and.w	r2, r2, #31
 8004ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ea8:	4913      	ldr	r1, [pc, #76]	; (8004ef8 <daq_enable+0x140>)
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004eb0:	e7bf      	b.n	8004e32 <daq_enable+0x7a>
            NVIC_DisableIRQ(self->trig.exti_trig);
 8004eb2:	f243 0334 	movw	r3, #12340	; 0x3034
 8004eb6:	58e2      	ldr	r2, [r4, r3]
 8004eb8:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	dbc7      	blt.n	8004e4e <daq_enable+0x96>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	f002 021f 	and.w	r2, r2, #31
 8004ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	490b      	ldr	r1, [pc, #44]	; (8004ef8 <daq_enable+0x140>)
 8004ecc:	3320      	adds	r3, #32
 8004ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ed2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	e7b8      	b.n	8004e4e <daq_enable+0x96>
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40012400 	.word	0x40012400
 8004ee4:	40020008 	.word	0x40020008
 8004ee8:	0800adde 	.word	0x0800adde
 8004eec:	ff3ffde0 	.word	0xff3ffde0
 8004ef0:	200005b4 	.word	0x200005b4
 8004ef4:	4002006c 	.word	0x4002006c
 8004ef8:	e000e100 	.word	0xe000e100

08004efc <daq_mem_set>:
{
 8004efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f00:	4604      	mov	r4, r0
 8004f02:	b085      	sub	sp, #20
 8004f04:	460e      	mov	r6, r1
    daq_enable(self, 0);
 8004f06:	2100      	movs	r1, #0
 8004f08:	f7ff ff56 	bl	8004db8 <daq_enable>
    daq_reset(self);
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f7ff ff1e 	bl	8004d4e <daq_reset>
    buff->data = NULL;
 8004f12:	2100      	movs	r1, #0
    self->buff_raw_ptr = 0;
 8004f14:	f504 573e 	add.w	r7, r4, #12160	; 0x2f80
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 8004f18:	f104 083c 	add.w	r8, r4, #60	; 0x3c
    buff->data = NULL;
 8004f1c:	e9c4 1100 	strd	r1, r1, [r4]
    buff->len = 0;
 8004f20:	8121      	strh	r1, [r4, #8]
    buff->data = NULL;
 8004f22:	e9c4 1103 	strd	r1, r1, [r4, #12]
    buff->len = 0;
 8004f26:	82a1      	strh	r1, [r4, #20]
    buff->data = NULL;
 8004f28:	e9c4 1106 	strd	r1, r1, [r4, #24]
    buff->len = 0;
 8004f2c:	8421      	strh	r1, [r4, #32]
    buff->data = NULL;
 8004f2e:	e9c4 1109 	strd	r1, r1, [r4, #36]	; 0x24
    buff->len = 0;
 8004f32:	85a1      	strh	r1, [r4, #44]	; 0x2c
    buff->data = NULL;
 8004f34:	e9c4 110c 	strd	r1, r1, [r4, #48]	; 0x30
    buff->len = 0;
 8004f38:	8721      	strh	r1, [r4, #56]	; 0x38
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 8004f3a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
    self->buff_raw_ptr = 0;
 8004f3e:	8039      	strh	r1, [r7, #0]
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 8004f40:	4640      	mov	r0, r8
 8004f42:	f003 ff89 	bl	8008e58 <memset>
    if (self->set.bits == B12)
 8004f46:	f642 738e 	movw	r3, #12174	; 0x2f8e
 8004f4a:	5ce2      	ldrb	r2, [r4, r3]
    if (self->mode != LA)
 8004f4c:	f642 73b6 	movw	r3, #12214	; 0x2fb6
 8004f50:	5ce3      	ldrb	r3, [r4, r3]
    if (self->set.bits == B12)
 8004f52:	2a0c      	cmp	r2, #12
        out_per_ch *= 2;
 8004f54:	bf07      	ittee	eq
 8004f56:	ea4f 0946 	moveq.w	r9, r6, lsl #1
        max_len /= 2;
 8004f5a:	f241 7070 	movweq	r0, #6000	; 0x1770
    int out_per_ch = mem_per_ch;
 8004f5e:	46b1      	movne	r9, r6
    int max_len = PS_DAQ_MAX_MEM;
 8004f60:	f642 60e0 	movwne	r0, #12000	; 0x2ee0
    if (self->mode != LA)
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d037      	beq.n	8004fd8 <daq_mem_set+0xdc>
        int len1 = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + 1;
 8004f68:	f642 7185 	movw	r1, #12165	; 0x2f85
 8004f6c:	f642 7384 	movw	r3, #12164	; 0x2f84
 8004f70:	5c65      	ldrb	r5, [r4, r1]
 8004f72:	f642 7186 	movw	r1, #12166	; 0x2f86
 8004f76:	5ce3      	ldrb	r3, [r4, r3]
 8004f78:	442b      	add	r3, r5
 8004f7a:	5c65      	ldrb	r5, [r4, r1]
 8004f7c:	f642 7187 	movw	r1, #12167	; 0x2f87
 8004f80:	442b      	add	r3, r5
 8004f82:	5c65      	ldrb	r5, [r4, r1]
 8004f84:	441d      	add	r5, r3
 8004f86:	1c6b      	adds	r3, r5, #1
        if (mem_per_ch < 0 || (mem_per_ch * len1) + (mem_per_ch * (len1 - 1)) > max_len)
 8004f88:	18e9      	adds	r1, r5, r3
 8004f8a:	4371      	muls	r1, r6
 8004f8c:	4281      	cmp	r1, r0
 8004f8e:	dc3d      	bgt.n	800500c <daq_mem_set+0x110>
        daq_malloc(self, &self->buff1, mem_per_ch * len1, PS_MEM_RESERVE, len1, PS_ADC_ADDR(ADC1), PS_DMA_CH_ADC1, PS_DMA_ADC, self->set.bits);
 8004f90:	2101      	movs	r1, #1
 8004f92:	9202      	str	r2, [sp, #8]
 8004f94:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <daq_mem_set+0x118>)
 8004f96:	4620      	mov	r0, r4
 8004f98:	e9cd 2100 	strd	r2, r1, [sp]
 8004f9c:	fb03 f206 	mul.w	r2, r3, r6
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	f7ff fdc9 	bl	8004b38 <daq_malloc.constprop.1>
        self->buff_out.chans = len1 - 1;
 8004fa6:	86a5      	strh	r5, [r4, #52]	; 0x34
        self->buff_out.len = out_per_ch * (len1 - 1);
 8004fa8:	fb05 f509 	mul.w	r5, r5, r9
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004fac:	883b      	ldrh	r3, [r7, #0]
        self->buff_out.len = out_per_ch * (len1 - 1);
 8004fae:	b2ad      	uxth	r5, r5
 8004fb0:	86e5      	strh	r5, [r4, #54]	; 0x36
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004fb2:	eb08 0203 	add.w	r2, r8, r3
        self->buff_raw_ptr += self->buff_out.len;
 8004fb6:	441d      	add	r5, r3
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004fb8:	6322      	str	r2, [r4, #48]	; 0x30
        self->buff_raw_ptr += self->buff_out.len;
 8004fba:	803d      	strh	r5, [r7, #0]
    self->set.mem = mem_per_ch;
 8004fbc:	f642 738c 	movw	r3, #12172	; 0x2f8c
    daq_trig_update(self);
 8004fc0:	4620      	mov	r0, r4
    self->set.mem = mem_per_ch;
 8004fc2:	52e6      	strh	r6, [r4, r3]
    daq_trig_update(self);
 8004fc4:	f000 fe56 	bl	8005c74 <daq_trig_update>
    daq_enable(self, 1);
 8004fc8:	4620      	mov	r0, r4
 8004fca:	2101      	movs	r1, #1
 8004fcc:	f7ff fef4 	bl	8004db8 <daq_enable>
    return 0;
 8004fd0:	2000      	movs	r0, #0
}
 8004fd2:	b005      	add	sp, #20
 8004fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (mem_per_ch < 0 || mem_per_ch > PS_DAQ_MAX_MEM)
 8004fd8:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8004fdc:	429e      	cmp	r6, r3
 8004fde:	d815      	bhi.n	800500c <daq_mem_set+0x110>
        daq_malloc(self, &self->buff1, mem_per_ch, PS_MEM_RESERVE, 4, PS_DAQ_PORT->ODR, PS_DMA_CH_LA, PS_DMA_LA, self->set.bits);
 8004fe0:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <daq_mem_set+0x11c>)
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	9202      	str	r2, [sp, #8]
 8004fe8:	2206      	movs	r2, #6
 8004fea:	4620      	mov	r0, r4
 8004fec:	e9cd 3200 	strd	r3, r2, [sp]
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	4632      	mov	r2, r6
 8004ff4:	f7ff fda0 	bl	8004b38 <daq_malloc.constprop.1>
        self->buff_out.chans = 4;
 8004ff8:	2304      	movs	r3, #4
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004ffa:	883a      	ldrh	r2, [r7, #0]
        self->buff_out.chans = 4;
 8004ffc:	86a3      	strh	r3, [r4, #52]	; 0x34
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004ffe:	eb08 0302 	add.w	r3, r8, r2
        self->buff_raw_ptr += mem_per_ch;
 8005002:	4432      	add	r2, r6
        self->buff_out.len = mem_per_ch;
 8005004:	86e6      	strh	r6, [r4, #54]	; 0x36
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8005006:	6323      	str	r3, [r4, #48]	; 0x30
        self->buff_raw_ptr += mem_per_ch;
 8005008:	803a      	strh	r2, [r7, #0]
 800500a:	e7d7      	b.n	8004fbc <daq_mem_set+0xc0>
            return -2;
 800500c:	f06f 0001 	mvn.w	r0, #1
 8005010:	e7df      	b.n	8004fd2 <daq_mem_set+0xd6>
 8005012:	bf00      	nop
 8005014:	4001244c 	.word	0x4001244c
 8005018:	40010800 	.word	0x40010800

0800501c <daq_bit_set>:
{
 800501c:	b538      	push	{r3, r4, r5, lr}
    if (bits != B12 && bits != B8 && bits != B1)
 800501e:	f001 03fb 	and.w	r3, r1, #251	; 0xfb
 8005022:	2b08      	cmp	r3, #8
{
 8005024:	4604      	mov	r4, r0
 8005026:	460d      	mov	r5, r1
    if (bits != B12 && bits != B8 && bits != B1)
 8005028:	d001      	beq.n	800502e <daq_bit_set+0x12>
 800502a:	2901      	cmp	r1, #1
 800502c:	d12d      	bne.n	800508a <daq_bit_set+0x6e>
    self->set.bits = bits;
 800502e:	f642 738e 	movw	r3, #12174	; 0x2f8e
    if (bits == B12)
 8005032:	2d0c      	cmp	r5, #12
    self->set.bits = bits;
 8005034:	54e5      	strb	r5, [r4, r3]
 8005036:	f642 73b0 	movw	r3, #12208	; 0x2fb0
    if (bits == B12)
 800503a:	d120      	bne.n	800507e <daq_bit_set+0x62>
        self->adc_max_val = 4095;
 800503c:	4a17      	ldr	r2, [pc, #92]	; (800509c <daq_bit_set+0x80>)
        self->adc_max_val = 1;
 800503e:	50e2      	str	r2, [r4, r3]
    if (self->mode == SCOPE || self->mode == VM)
 8005040:	f642 73b6 	movw	r3, #12214	; 0x2fb6
 8005044:	5ce3      	ldrb	r3, [r4, r3]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d822      	bhi.n	8005090 <daq_bit_set+0x74>
        daq_enable(self, 0);
 800504a:	2100      	movs	r1, #0
 800504c:	4620      	mov	r0, r4
 800504e:	f7ff feb3 	bl	8004db8 <daq_enable>
        daq_reset(self);
 8005052:	4620      	mov	r0, r4
 8005054:	f7ff fe7b 	bl	8004d4e <daq_reset>
        if (bits == B8)
 8005058:	2d08      	cmp	r5, #8
 800505a:	d01b      	beq.n	8005094 <daq_bit_set+0x78>
        adc_set_res(ADC1, bits_raw);
 800505c:	2100      	movs	r1, #0
 800505e:	4810      	ldr	r0, [pc, #64]	; (80050a0 <daq_bit_set+0x84>)
 8005060:	f001 f854 	bl	800610c <adc_set_res>
        int ret = daq_mem_set(self, self->set.mem);
 8005064:	f642 738c 	movw	r3, #12172	; 0x2f8c
 8005068:	4620      	mov	r0, r4
 800506a:	5ae1      	ldrh	r1, [r4, r3]
 800506c:	f7ff ff46 	bl	8004efc <daq_mem_set>
        daq_enable(self, 1);
 8005070:	2101      	movs	r1, #1
        int ret = daq_mem_set(self, self->set.mem);
 8005072:	4605      	mov	r5, r0
        daq_enable(self, 1);
 8005074:	4620      	mov	r0, r4
 8005076:	f7ff fe9f 	bl	8004db8 <daq_enable>
}
 800507a:	4628      	mov	r0, r5
 800507c:	bd38      	pop	{r3, r4, r5, pc}
    else if (bits == B8)
 800507e:	2d08      	cmp	r5, #8
        self->adc_max_val = 255;
 8005080:	bf0c      	ite	eq
 8005082:	4a08      	ldreq	r2, [pc, #32]	; (80050a4 <daq_bit_set+0x88>)
        self->adc_max_val = 1;
 8005084:	f04f 527e 	movne.w	r2, #1065353216	; 0x3f800000
 8005088:	e7d9      	b.n	800503e <daq_bit_set+0x22>
        return -1;
 800508a:	f04f 35ff 	mov.w	r5, #4294967295
 800508e:	e7f4      	b.n	800507a <daq_bit_set+0x5e>
    return 0;
 8005090:	2500      	movs	r5, #0
 8005092:	e7f2      	b.n	800507a <daq_bit_set+0x5e>
            return -2;
 8005094:	f06f 0501 	mvn.w	r5, #1
 8005098:	e7ef      	b.n	800507a <daq_bit_set+0x5e>
 800509a:	bf00      	nop
 800509c:	457ff000 	.word	0x457ff000
 80050a0:	40012400 	.word	0x40012400
 80050a4:	437f0000 	.word	0x437f0000

080050a8 <daq_fs_set>:
    float scope_max_fs = 1.0 / (PS_ADC_1CH_SMPL_TM * (float)(self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + 1));
 80050a8:	f642 7384 	movw	r3, #12164	; 0x2f84
{
 80050ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    float scope_max_fs = 1.0 / (PS_ADC_1CH_SMPL_TM * (float)(self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + 1));
 80050b0:	5cc5      	ldrb	r5, [r0, r3]
 80050b2:	f642 7385 	movw	r3, #12165	; 0x2f85
 80050b6:	f810 9003 	ldrb.w	r9, [r0, r3]
 80050ba:	f642 7386 	movw	r3, #12166	; 0x2f86
{
 80050be:	460e      	mov	r6, r1
    float scope_max_fs = 1.0 / (PS_ADC_1CH_SMPL_TM * (float)(self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + 1));
 80050c0:	f810 8003 	ldrb.w	r8, [r0, r3]
 80050c4:	f642 7387 	movw	r3, #12167	; 0x2f87
{
 80050c8:	b085      	sub	sp, #20
 80050ca:	4604      	mov	r4, r0
    float scope_max_fs = 1.0 / (PS_ADC_1CH_SMPL_TM * (float)(self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + 1));
 80050cc:	5cc7      	ldrb	r7, [r0, r3]
    if (fs < 0 || fs > (self->mode == LA ? PS_LA_MAX_FS : scope_max_fs))
 80050ce:	2100      	movs	r1, #0
 80050d0:	4630      	mov	r0, r6
 80050d2:	f7fb ffdf 	bl	8001094 <__aeabi_fcmplt>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d14f      	bne.n	800517a <daq_fs_set+0xd2>
 80050da:	f642 73b6 	movw	r3, #12214	; 0x2fb6
 80050de:	5ce3      	ldrb	r3, [r4, r3]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d048      	beq.n	8005176 <daq_fs_set+0xce>
    float scope_max_fs = 1.0 / (PS_ADC_1CH_SMPL_TM * (float)(self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + 1));
 80050e4:	eb05 0009 	add.w	r0, r5, r9
 80050e8:	4440      	add	r0, r8
 80050ea:	4438      	add	r0, r7
 80050ec:	3001      	adds	r0, #1
 80050ee:	f7fb fddf 	bl	8000cb0 <__aeabi_i2f>
 80050f2:	f7fb f9a3 	bl	800043c <__aeabi_f2d>
 80050f6:	a322      	add	r3, pc, #136	; (adr r3, 8005180 <daq_fs_set+0xd8>)
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	f7fb f9f6 	bl	80004ec <__aeabi_dmul>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	2000      	movs	r0, #0
 8005106:	4920      	ldr	r1, [pc, #128]	; (8005188 <daq_fs_set+0xe0>)
 8005108:	f7fb fb1a 	bl	8000740 <__aeabi_ddiv>
 800510c:	f7fb fcc6 	bl	8000a9c <__aeabi_d2f>
    if (fs < 0 || fs > (self->mode == LA ? PS_LA_MAX_FS : scope_max_fs))
 8005110:	4631      	mov	r1, r6
 8005112:	f7fb ffbf 	bl	8001094 <__aeabi_fcmplt>
 8005116:	4605      	mov	r5, r0
 8005118:	bb78      	cbnz	r0, 800517a <daq_fs_set+0xd2>
    self->set.fs = fs;
 800511a:	f642 7988 	movw	r9, #12168	; 0x2f88
    int prescaler = 1;
 800511e:	2701      	movs	r7, #1
    daq_enable(self, 0);
 8005120:	4601      	mov	r1, r0
    self->set.fs = fs;
 8005122:	f844 6009 	str.w	r6, [r4, r9]
    daq_enable(self, 0);
 8005126:	4620      	mov	r0, r4
 8005128:	f7ff fe46 	bl	8004db8 <daq_enable>
    int reload = 1;
 800512c:	f10d 0810 	add.w	r8, sp, #16
    daq_reset(self);
 8005130:	4620      	mov	r0, r4
 8005132:	f7ff fe0c 	bl	8004d4e <daq_reset>
    int reload = 1;
 8005136:	f848 7d04 	str.w	r7, [r8, #-4]!
    self->set.fs = get_freq(&prescaler, &reload, PS_TIM_ADC_MAX, PS_TIM_ADC_FREQ, fs);
 800513a:	4630      	mov	r0, r6
    int prescaler = 1;
 800513c:	9702      	str	r7, [sp, #8]
    self->set.fs = get_freq(&prescaler, &reload, PS_TIM_ADC_MAX, PS_TIM_ADC_FREQ, fs);
 800513e:	f7fb ffd1 	bl	80010e4 <__aeabi_f2iz>
 8005142:	4641      	mov	r1, r8
 8005144:	9000      	str	r0, [sp, #0]
 8005146:	4b11      	ldr	r3, [pc, #68]	; (800518c <daq_fs_set+0xe4>)
 8005148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800514c:	a802      	add	r0, sp, #8
 800514e:	f002 f847 	bl	80071e0 <get_freq>
  WRITE_REG(TIMx->PSC, Prescaler);
 8005152:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <daq_fs_set+0xe8>)
 8005154:	9a02      	ldr	r2, [sp, #8]
 8005156:	f844 0009 	str.w	r0, [r4, r9]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28
    LL_TIM_SetAutoReload(PS_TIM_ADC, reload);
 800515c:	9a03      	ldr	r2, [sp, #12]
    daq_trig_update(self);
 800515e:	4620      	mov	r0, r4
  WRITE_REG(TIMx->ARR, AutoReload);
 8005160:	62da      	str	r2, [r3, #44]	; 0x2c
 8005162:	f000 fd87 	bl	8005c74 <daq_trig_update>
    daq_enable(self, 1);
 8005166:	4620      	mov	r0, r4
 8005168:	4639      	mov	r1, r7
 800516a:	f7ff fe25 	bl	8004db8 <daq_enable>
    return 0;
 800516e:	4628      	mov	r0, r5
}
 8005170:	b005      	add	sp, #20
 8005172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (fs < 0 || fs > (self->mode == LA ? PS_LA_MAX_FS : scope_max_fs))
 8005176:	4807      	ldr	r0, [pc, #28]	; (8005194 <daq_fs_set+0xec>)
 8005178:	e7ca      	b.n	8005110 <daq_fs_set+0x68>
        return -1;
 800517a:	f04f 30ff 	mov.w	r0, #4294967295
 800517e:	e7f7      	b.n	8005170 <daq_fs_set+0xc8>
 8005180:	94ccab3f 	.word	0x94ccab3f
 8005184:	3ed2dfd6 	.word	0x3ed2dfd6
 8005188:	3ff00000 	.word	0x3ff00000
 800518c:	02255100 	.word	0x02255100
 8005190:	40000400 	.word	0x40000400
 8005194:	49742400 	.word	0x49742400

08005198 <daq_ch_set>:
{
 8005198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800519c:	4604      	mov	r4, r0
 800519e:	4698      	mov	r8, r3
    self->set.ch1_en = ch1;
 80051a0:	f642 7384 	movw	r3, #12164	; 0x2f84
 80051a4:	54e1      	strb	r1, [r4, r3]
    self->set.ch2_en = ch2;
 80051a6:	f642 7385 	movw	r3, #12165	; 0x2f85
 80051aa:	54e2      	strb	r2, [r4, r3]
    self->set.ch3_en = ch3;
 80051ac:	f642 7386 	movw	r3, #12166	; 0x2f86
 80051b0:	f800 8003 	strb.w	r8, [r0, r3]
    self->set.ch4_en = ch4;
 80051b4:	f642 7387 	movw	r3, #12167	; 0x2f87
{
 80051b8:	b085      	sub	sp, #20
 80051ba:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
 80051be:	460e      	mov	r6, r1
    self->set.ch4_en = ch4;
 80051c0:	f800 9003 	strb.w	r9, [r0, r3]
    if (self->enabled)
 80051c4:	f642 73b5 	movw	r3, #12213	; 0x2fb5
 80051c8:	5cc5      	ldrb	r5, [r0, r3]
{
 80051ca:	4617      	mov	r7, r2
    if (self->enabled)
 80051cc:	b135      	cbz	r5, 80051dc <daq_ch_set+0x44>
        daq_enable(self, 0);
 80051ce:	2100      	movs	r1, #0
 80051d0:	f7ff fdf2 	bl	8004db8 <daq_enable>
        daq_reset(self);
 80051d4:	4620      	mov	r0, r4
 80051d6:	f7ff fdba 	bl	8004d4e <daq_reset>
        reen = 1;
 80051da:	2501      	movs	r5, #1
    if (self->mode != LA)
 80051dc:	f642 73b6 	movw	r3, #12214	; 0x2fb6
 80051e0:	5ce3      	ldrb	r3, [r4, r3]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d00b      	beq.n	80051fe <daq_ch_set+0x66>
        adc_set_ch(ADC1, ch1, ch2, ch3, ch4, PS_ADC_SMPL_TIME, 1);
 80051e6:	2304      	movs	r3, #4
 80051e8:	2201      	movs	r2, #1
 80051ea:	f8cd 9000 	str.w	r9, [sp]
 80051ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80051f2:	4631      	mov	r1, r6
 80051f4:	4643      	mov	r3, r8
 80051f6:	463a      	mov	r2, r7
 80051f8:	4809      	ldr	r0, [pc, #36]	; (8005220 <daq_ch_set+0x88>)
 80051fa:	f000 ff01 	bl	8006000 <adc_set_ch>
    int ret = daq_mem_set(self, self->set.mem);
 80051fe:	f642 738c 	movw	r3, #12172	; 0x2f8c
 8005202:	4620      	mov	r0, r4
 8005204:	5ae1      	ldrh	r1, [r4, r3]
 8005206:	f7ff fe79 	bl	8004efc <daq_mem_set>
 800520a:	4606      	mov	r6, r0
    if (reen)
 800520c:	b11d      	cbz	r5, 8005216 <daq_ch_set+0x7e>
        daq_enable(self, 1);
 800520e:	2101      	movs	r1, #1
 8005210:	4620      	mov	r0, r4
 8005212:	f7ff fdd1 	bl	8004db8 <daq_enable>
}
 8005216:	4630      	mov	r0, r6
 8005218:	b005      	add	sp, #20
 800521a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800521e:	bf00      	nop
 8005220:	40012400 	.word	0x40012400

08005224 <daq_mode_set>:
    }
}

void daq_mode_set(daq_data_t* self, enum daq_mode mode)
{
    if (self->mode == SCOPE)
 8005224:	f642 73b6 	movw	r3, #12214	; 0x2fb6
{
 8005228:	b530      	push	{r4, r5, lr}
    if (self->mode == SCOPE)
 800522a:	5cc3      	ldrb	r3, [r0, r3]
{
 800522c:	b089      	sub	sp, #36	; 0x24
 800522e:	4604      	mov	r4, r0
 8005230:	460d      	mov	r5, r1
    if (self->mode == SCOPE)
 8005232:	2b00      	cmp	r3, #0
 8005234:	d163      	bne.n	80052fe <daq_mode_set+0xda>
        daq_settings_save(&self->set, &self->trig.set, &self->save_s, &self->trig.save_s);
 8005236:	f500 533f 	add.w	r3, r0, #12224	; 0x2fc0
 800523a:	f500 523e 	add.w	r2, r0, #12160	; 0x2f80
 800523e:	330c      	adds	r3, #12
 8005240:	3210      	adds	r2, #16
    else if (self->mode == LA)
        daq_settings_save(&self->set, &self->trig.set, &self->save_l, &self->trig.save_l);
 8005242:	f504 513e 	add.w	r1, r4, #12160	; 0x2f80
 8005246:	f504 503e 	add.w	r0, r4, #12160	; 0x2f80
 800524a:	3138      	adds	r1, #56	; 0x38
 800524c:	3004      	adds	r0, #4
 800524e:	f7ff fccd 	bl	8004bec <daq_settings_save>

    self->mode = mode;
 8005252:	f642 73b6 	movw	r3, #12214	; 0x2fb6

    daq_enable(self, 0);
 8005256:	2100      	movs	r1, #0
    self->mode = mode;
 8005258:	54e5      	strb	r5, [r4, r3]
    daq_enable(self, 0);
 800525a:	4620      	mov	r0, r4
 800525c:	f7ff fdac 	bl	8004db8 <daq_enable>
    daq_reset(self);
 8005260:	4620      	mov	r0, r4
 8005262:	f7ff fd74 	bl	8004d4e <daq_reset>
    self->dis_hold = 1;
 8005266:	f642 73b4 	movw	r3, #12212	; 0x2fb4
 800526a:	2201      	movs	r2, #1
 800526c:	54e2      	strb	r2, [r4, r3]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800526e:	2210      	movs	r2, #16
 8005270:	2100      	movs	r1, #0
 8005272:	eb0d 0002 	add.w	r0, sp, r2
 8005276:	f003 fdef 	bl	8008e58 <memset>
    GPIO_InitStruct.Pin = PS_DAQ_CH1 | PS_DAQ_CH2 | PS_DAQ_CH3 | PS_DAQ_CH4;
 800527a:	f641 631e 	movw	r3, #7710	; 0x1e1e
 800527e:	a908      	add	r1, sp, #32
 8005280:	f841 3d14 	str.w	r3, [r1, #-20]!

    if (mode == SCOPE) // save settings
 8005284:	2d00      	cmp	r5, #0
 8005286:	d143      	bne.n	8005310 <daq_mode_set+0xec>
    {
        GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
        LL_GPIO_Init(PS_DAQ_PORT, &GPIO_InitStruct);
 8005288:	4857      	ldr	r0, [pc, #348]	; (80053e8 <daq_mode_set+0x1c4>)
 800528a:	f7fd fb37 	bl	80028fc <LL_GPIO_Init>

        daq_mem_set(self, 3); // safety guard
 800528e:	2103      	movs	r1, #3
 8005290:	4620      	mov	r0, r4
 8005292:	f7ff fe33 	bl	8004efc <daq_mem_set>
        daq_bit_set(self, self->save_s.bits);
 8005296:	f642 739a 	movw	r3, #12186	; 0x2f9a
 800529a:	4620      	mov	r0, r4
 800529c:	5ce1      	ldrb	r1, [r4, r3]
 800529e:	f7ff febd 	bl	800501c <daq_bit_set>
        daq_ch_set(self, self->save_s.ch1_en, self->save_s.ch2_en, self->save_s.ch3_en, self->save_s.ch4_en);
 80052a2:	f642 7093 	movw	r0, #12179	; 0x2f93
 80052a6:	f642 7392 	movw	r3, #12178	; 0x2f92
 80052aa:	f642 7291 	movw	r2, #12177	; 0x2f91
 80052ae:	f642 7190 	movw	r1, #12176	; 0x2f90
 80052b2:	5c20      	ldrb	r0, [r4, r0]
 80052b4:	5ca2      	ldrb	r2, [r4, r2]
 80052b6:	5ce3      	ldrb	r3, [r4, r3]
 80052b8:	5c61      	ldrb	r1, [r4, r1]
 80052ba:	9000      	str	r0, [sp, #0]
 80052bc:	4620      	mov	r0, r4
 80052be:	f7ff ff6b 	bl	8005198 <daq_ch_set>
        daq_fs_set(self, self->save_s.fs);
 80052c2:	f642 7394 	movw	r3, #12180	; 0x2f94
 80052c6:	4620      	mov	r0, r4
 80052c8:	58e1      	ldr	r1, [r4, r3]
 80052ca:	f7ff feed 	bl	80050a8 <daq_fs_set>
        daq_mem_set(self, self->save_s.mem);
 80052ce:	f642 7398 	movw	r3, #12184	; 0x2f98
 80052d2:	4620      	mov	r0, r4
 80052d4:	5ae1      	ldrh	r1, [r4, r3]
 80052d6:	f7ff fe11 	bl	8004efc <daq_mem_set>
        daq_trig_set(self, self->trig.save_s.ch, self->trig.save_s.val, self->trig.save_s.edge,
 80052da:	f642 71cc 	movw	r1, #12236	; 0x2fcc
 80052de:	5861      	ldr	r1, [r4, r1]
 80052e0:	f642 73d1 	movw	r3, #12241	; 0x2fd1
 80052e4:	9101      	str	r1, [sp, #4]
 80052e6:	f642 71d0 	movw	r1, #12240	; 0x2fd0
 80052ea:	f642 72d8 	movw	r2, #12248	; 0x2fd8
 80052ee:	5c61      	ldrb	r1, [r4, r1]
 80052f0:	5ce3      	ldrb	r3, [r4, r3]
 80052f2:	9100      	str	r1, [sp, #0]
 80052f4:	f642 71d4 	movw	r1, #12244	; 0x2fd4
 80052f8:	5ca2      	ldrb	r2, [r4, r2]
        daq_mem_set(self, 3); // safety guard
        daq_bit_set(self, self->save_l.bits);
        daq_ch_set(self, self->save_l.ch1_en, self->save_l.ch2_en, self->save_l.ch3_en, self->save_l.ch4_en);
        daq_fs_set(self, self->save_l.fs);
        daq_mem_set(self, self->save_l.mem);
        daq_trig_set(self, self->trig.save_l.ch, self->trig.save_l.val, self->trig.save_l.edge,
 80052fa:	5861      	ldr	r1, [r4, r1]
 80052fc:	e02b      	b.n	8005356 <daq_mode_set+0x132>
    else if (self->mode == LA)
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d1a7      	bne.n	8005252 <daq_mode_set+0x2e>
        daq_settings_save(&self->set, &self->trig.set, &self->save_l, &self->trig.save_l);
 8005302:	f500 533f 	add.w	r3, r0, #12224	; 0x2fc0
 8005306:	f500 523e 	add.w	r2, r0, #12160	; 0x2f80
 800530a:	3320      	adds	r3, #32
 800530c:	321c      	adds	r2, #28
 800530e:	e798      	b.n	8005242 <daq_mode_set+0x1e>
    else if (mode == VM)
 8005310:	2d01      	cmp	r5, #1
 8005312:	d12d      	bne.n	8005370 <daq_mode_set+0x14c>
        LL_GPIO_Init(PS_DAQ_PORT, &GPIO_InitStruct);
 8005314:	4834      	ldr	r0, [pc, #208]	; (80053e8 <daq_mode_set+0x1c4>)
 8005316:	f7fd faf1 	bl	80028fc <LL_GPIO_Init>
        daq_mem_set(self, 3); // safety guard
 800531a:	2103      	movs	r1, #3
 800531c:	4620      	mov	r0, r4
 800531e:	f7ff fded 	bl	8004efc <daq_mem_set>
        daq_bit_set(self, B12);
 8005322:	210c      	movs	r1, #12
 8005324:	4620      	mov	r0, r4
 8005326:	f7ff fe79 	bl	800501c <daq_bit_set>
        daq_ch_set(self, 1, 1, 1, 1);
 800532a:	462b      	mov	r3, r5
 800532c:	462a      	mov	r2, r5
 800532e:	4629      	mov	r1, r5
 8005330:	9500      	str	r5, [sp, #0]
 8005332:	4620      	mov	r0, r4
 8005334:	f7ff ff30 	bl	8005198 <daq_ch_set>
        daq_mem_set(self, 200);
 8005338:	21c8      	movs	r1, #200	; 0xc8
 800533a:	4620      	mov	r0, r4
 800533c:	f7ff fdde 	bl	8004efc <daq_mem_set>
        daq_fs_set(self, 100);
 8005340:	492a      	ldr	r1, [pc, #168]	; (80053ec <daq_mode_set+0x1c8>)
 8005342:	4620      	mov	r0, r4
 8005344:	f7ff feb0 	bl	80050a8 <daq_fs_set>
        daq_trig_set(self, 0, 0, RISING, DISABLED, 50);
 8005348:	2303      	movs	r3, #3
 800534a:	2232      	movs	r2, #50	; 0x32
 800534c:	e9cd 3200 	strd	r3, r2, [sp]
 8005350:	2300      	movs	r3, #0
 8005352:	461a      	mov	r2, r3
 8005354:	4619      	mov	r1, r3
        daq_trig_set(self, self->trig.save_l.ch, self->trig.save_l.val, self->trig.save_l.edge,
 8005356:	4620      	mov	r0, r4
 8005358:	f000 fa92 	bl	8005880 <daq_trig_set>
                     self->trig.save_l.mode, self->trig.save_l.pretrigger);
    }

    self->dis_hold = 0;
 800535c:	f642 73b4 	movw	r3, #12212	; 0x2fb4
 8005360:	2200      	movs	r2, #0
    daq_enable(self, 1);
 8005362:	2101      	movs	r1, #1
    self->dis_hold = 0;
 8005364:	54e2      	strb	r2, [r4, r3]
    daq_enable(self, 1);
 8005366:	4620      	mov	r0, r4
 8005368:	f7ff fd26 	bl	8004db8 <daq_enable>
}
 800536c:	b009      	add	sp, #36	; 0x24
 800536e:	bd30      	pop	{r4, r5, pc}
        GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005370:	2308      	movs	r3, #8
        LL_GPIO_Init(PS_DAQ_PORT, &GPIO_InitStruct);
 8005372:	481d      	ldr	r0, [pc, #116]	; (80053e8 <daq_mode_set+0x1c4>)
        GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005374:	9304      	str	r3, [sp, #16]
        LL_GPIO_Init(PS_DAQ_PORT, &GPIO_InitStruct);
 8005376:	f7fd fac1 	bl	80028fc <LL_GPIO_Init>
        daq_mem_set(self, 3); // safety guard
 800537a:	2103      	movs	r1, #3
 800537c:	4620      	mov	r0, r4
 800537e:	f7ff fdbd 	bl	8004efc <daq_mem_set>
        daq_bit_set(self, self->save_l.bits);
 8005382:	f642 73a6 	movw	r3, #12198	; 0x2fa6
 8005386:	4620      	mov	r0, r4
 8005388:	5ce1      	ldrb	r1, [r4, r3]
 800538a:	f7ff fe47 	bl	800501c <daq_bit_set>
        daq_ch_set(self, self->save_l.ch1_en, self->save_l.ch2_en, self->save_l.ch3_en, self->save_l.ch4_en);
 800538e:	f642 709f 	movw	r0, #12191	; 0x2f9f
 8005392:	f642 739e 	movw	r3, #12190	; 0x2f9e
 8005396:	f642 729d 	movw	r2, #12189	; 0x2f9d
 800539a:	f642 719c 	movw	r1, #12188	; 0x2f9c
 800539e:	5c20      	ldrb	r0, [r4, r0]
 80053a0:	5ca2      	ldrb	r2, [r4, r2]
 80053a2:	5ce3      	ldrb	r3, [r4, r3]
 80053a4:	5c61      	ldrb	r1, [r4, r1]
 80053a6:	9000      	str	r0, [sp, #0]
 80053a8:	4620      	mov	r0, r4
 80053aa:	f7ff fef5 	bl	8005198 <daq_ch_set>
        daq_fs_set(self, self->save_l.fs);
 80053ae:	f642 73a0 	movw	r3, #12192	; 0x2fa0
 80053b2:	4620      	mov	r0, r4
 80053b4:	58e1      	ldr	r1, [r4, r3]
 80053b6:	f7ff fe77 	bl	80050a8 <daq_fs_set>
        daq_mem_set(self, self->save_l.mem);
 80053ba:	f642 73a4 	movw	r3, #12196	; 0x2fa4
 80053be:	4620      	mov	r0, r4
 80053c0:	5ae1      	ldrh	r1, [r4, r3]
 80053c2:	f7ff fd9b 	bl	8004efc <daq_mem_set>
        daq_trig_set(self, self->trig.save_l.ch, self->trig.save_l.val, self->trig.save_l.edge,
 80053c6:	f642 71e0 	movw	r1, #12256	; 0x2fe0
 80053ca:	5861      	ldr	r1, [r4, r1]
 80053cc:	f642 73e5 	movw	r3, #12261	; 0x2fe5
 80053d0:	9101      	str	r1, [sp, #4]
 80053d2:	f642 71e4 	movw	r1, #12260	; 0x2fe4
 80053d6:	f642 72ec 	movw	r2, #12268	; 0x2fec
 80053da:	5c61      	ldrb	r1, [r4, r1]
 80053dc:	5ce3      	ldrb	r3, [r4, r3]
 80053de:	9100      	str	r1, [sp, #0]
 80053e0:	5ca2      	ldrb	r2, [r4, r2]
 80053e2:	f642 71e8 	movw	r1, #12264	; 0x2fe8
 80053e6:	e788      	b.n	80052fa <daq_mode_set+0xd6>
 80053e8:	40010800 	.word	0x40010800
 80053ec:	42c80000 	.word	0x42c80000

080053f0 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80053f0:	2800      	cmp	r0, #0
 80053f2:	db0d      	blt.n	8005410 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053f4:	2201      	movs	r2, #1
 80053f6:	0943      	lsrs	r3, r0, #5
 80053f8:	f000 001f 	and.w	r0, r0, #31
 80053fc:	fa02 f000 	lsl.w	r0, r2, r0
 8005400:	4a04      	ldr	r2, [pc, #16]	; (8005414 <__NVIC_DisableIRQ+0x24>)
 8005402:	3320      	adds	r3, #32
 8005404:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005408:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800540c:	f3bf 8f6f 	isb	sy
}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	e000e100 	.word	0xe000e100

08005418 <daq_trig_init>:
void daq_trig_init(daq_data_t* self)
{
    self->trig.ignore = 0;
    self->trig.ready = 0;
    self->trig.cntr = 0;
    self->trig.ch_reg = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	f642 72f4 	movw	r2, #12276	; 0x2ff4
 800541e:	5083      	str	r3, [r0, r2]
 8005420:	f642 72f8 	movw	r2, #12280	; 0x2ff8
 8005424:	5083      	str	r3, [r0, r2]
    self->trig.fullmem_val = 0;
    self->trig.buff_trig = NULL;
    self->trig.dma_trig = PS_DMA_CH_ADC1;
    self->trig.exti_trig = PS_LA_IRQ_EXTI1;
    self->trig.order = 0;
    self->trig.ready_last = 0;
 8005426:	f642 72fc 	movw	r2, #12284	; 0x2ffc
 800542a:	5083      	str	r3, [r0, r2]
    self->trig.cntr = 0;
 800542c:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 8005430:	6013      	str	r3, [r2, #0]
    self->trig.all_cntr = 0;
 8005432:	f243 0204 	movw	r2, #12292	; 0x3004
 8005436:	5083      	str	r3, [r0, r2]
    self->trig.pos_frst = 0;
 8005438:	f243 0208 	movw	r2, #12296	; 0x3008
 800543c:	5083      	str	r3, [r0, r2]
    self->trig.pos_trig = 0;
 800543e:	f243 020c 	movw	r2, #12300	; 0x300c
 8005442:	5083      	str	r3, [r0, r2]
    self->trig.pos_last = 0;
 8005444:	f243 0210 	movw	r2, #12304	; 0x3010
 8005448:	5083      	str	r3, [r0, r2]
    self->trig.pos_diff = 0;
 800544a:	f243 0214 	movw	r2, #12308	; 0x3014
 800544e:	5083      	str	r3, [r0, r2]
    self->trig.uwtick_first = 0;
 8005450:	f243 0218 	movw	r2, #12312	; 0x3018
 8005454:	5083      	str	r3, [r0, r2]
    self->trig.pretrig_cntr = 0;
 8005456:	f243 021c 	movw	r2, #12316	; 0x301c
 800545a:	5083      	str	r3, [r0, r2]
    self->trig.pretrig_val = 0;
 800545c:	f243 0220 	movw	r2, #12320	; 0x3020
 8005460:	5083      	str	r3, [r0, r2]
    self->trig.auttrig_val = 0;
 8005462:	f243 0224 	movw	r2, #12324	; 0x3024
 8005466:	5083      	str	r3, [r0, r2]
    self->trig.posttrig_size = 0;
 8005468:	f243 0228 	movw	r2, #12328	; 0x3028
 800546c:	5083      	str	r3, [r0, r2]
    self->trig.fullmem_val = 0;
 800546e:	f243 022c 	movw	r2, #12332	; 0x302c
    self->trig.buff_trig = NULL;
 8005472:	2101      	movs	r1, #1
    self->trig.fullmem_val = 0;
 8005474:	5083      	str	r3, [r0, r2]
    self->trig.buff_trig = NULL;
 8005476:	f243 0230 	movw	r2, #12336	; 0x3030
 800547a:	5081      	str	r1, [r0, r2]
    self->trig.dma_trig = PS_DMA_CH_ADC1;
 800547c:	f243 0234 	movw	r2, #12340	; 0x3034
 8005480:	2107      	movs	r1, #7
 8005482:	5081      	str	r1, [r0, r2]
    self->trig.exti_trig = PS_LA_IRQ_EXTI1;
 8005484:	f243 0238 	movw	r2, #12344	; 0x3038
 8005488:	5083      	str	r3, [r0, r2]
    self->trig.order = 0;
 800548a:	f243 023c 	movw	r2, #12348	; 0x303c
 800548e:	5083      	str	r3, [r0, r2]
    self->trig.post_start = 0;
 8005490:	f500 5041 	add.w	r0, r0, #12352	; 0x3040
 8005494:	6003      	str	r3, [r0, #0]
    self->trig.post_from = 0;
}
 8005496:	4770      	bx	lr

08005498 <daq_trig_check>:

void daq_trig_check(daq_data_t* self)
{
 8005498:	b538      	push	{r3, r4, r5, lr}
    if (self->enabled) //&& self->trig.is_post == 0 && self->trig.ready == 0)
 800549a:	f642 73b5 	movw	r3, #12213	; 0x2fb5
 800549e:	5cc2      	ldrb	r2, [r0, r3]
{
 80054a0:	4604      	mov	r4, r0
    if (self->enabled) //&& self->trig.is_post == 0 && self->trig.ready == 0)
 80054a2:	2a00      	cmp	r2, #0
 80054a4:	d044      	beq.n	8005530 <daq_trig_check+0x98>
    {
        if (uwTick >= self->trig.uwtick_first)
 80054a6:	f243 0314 	movw	r3, #12308	; 0x3014
 80054aa:	58c1      	ldr	r1, [r0, r3]
 80054ac:	4b2f      	ldr	r3, [pc, #188]	; (800556c <daq_trig_check+0xd4>)
 80054ae:	6818      	ldr	r0, [r3, #0]
            self->trig.pretrig_cntr = uwTick - self->trig.uwtick_first;
 80054b0:	681b      	ldr	r3, [r3, #0]
        if (uwTick >= self->trig.uwtick_first)
 80054b2:	4281      	cmp	r1, r0
 80054b4:	f243 0018 	movw	r0, #12312	; 0x3018
        else
            self->trig.pretrig_cntr = (uwTick - self->trig.uwtick_first) + 4294967295;
 80054b8:	bf88      	it	hi
 80054ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80054be:	1a5b      	subs	r3, r3, r1
 80054c0:	5023      	str	r3, [r4, r0]
    {
        self->trig.pretrig_cntr = 0;
    }


    if (self->mode != VM) // SCOPE || LA
 80054c2:	f642 73b6 	movw	r3, #12214	; 0x2fb6
 80054c6:	5ce3      	ldrb	r3, [r4, r3]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d048      	beq.n	800555e <daq_trig_check+0xc6>
 80054cc:	f642 73bc 	movw	r3, #12220	; 0x2fbc
 80054d0:	5ce3      	ldrb	r3, [r4, r3]
    {
        if (self->enabled &&
 80054d2:	b38a      	cbz	r2, 8005538 <daq_trig_check+0xa0>
 80054d4:	bb83      	cbnz	r3, 8005538 <daq_trig_check+0xa0>
            self->trig.set.mode == AUTO &&
            self->trig.is_post == 0 &&
 80054d6:	f504 533e 	add.w	r3, r4, #12160	; 0x2f80
 80054da:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 80054dc:	f015 15ff 	ands.w	r5, r5, #16711935	; 0xff00ff
 80054e0:	d13d      	bne.n	800555e <daq_trig_check+0xc6>
            self->trig.ready == 0 &&
 80054e2:	f243 0318 	movw	r3, #12312	; 0x3018
 80054e6:	58e2      	ldr	r2, [r4, r3]
 80054e8:	f243 0320 	movw	r3, #12320	; 0x3020
 80054ec:	58e3      	ldr	r3, [r4, r3]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	dd35      	ble.n	800555e <daq_trig_check+0xc6>
            self->trig.pretrig_cntr > self->trig.auttrig_val)
{
            daq_enable(self, 0);
 80054f2:	4629      	mov	r1, r5
 80054f4:	4620      	mov	r0, r4
 80054f6:	f7ff fc5f 	bl	8004db8 <daq_enable>
            self->trig.pos_frst = PS_DMA_LAST_IDX(self->trig.buff_trig->len, PS_DMA_CH_ADC1);
 80054fa:	f243 032c 	movw	r3, #12332	; 0x302c
 80054fe:	58e3      	ldr	r3, [r4, r3]
 8005500:	88d9      	ldrh	r1, [r3, #6]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8005502:	4b1b      	ldr	r3, [pc, #108]	; (8005570 <daq_trig_check+0xd8>)
 8005504:	6858      	ldr	r0, [r3, #4]
 8005506:	b280      	uxth	r0, r0
 8005508:	1a08      	subs	r0, r1, r0
 800550a:	f001 fe64 	bl	80071d6 <get_last_circ_idx>
 800550e:	f243 0304 	movw	r3, #12292	; 0x3004

            self->trig.ready = 1;
 8005512:	2201      	movs	r2, #1
            self->trig.pos_frst = PS_DMA_LAST_IDX(self->trig.buff_trig->len, PS_DMA_CH_ADC1);
 8005514:	50e0      	str	r0, [r4, r3]
            self->trig.ready = 1;
 8005516:	f642 73fa 	movw	r3, #12282	; 0x2ffa
 800551a:	54e2      	strb	r2, [r4, r3]
            self->trig.is_post = 0;
 800551c:	f642 73f8 	movw	r3, #12280	; 0x2ff8
 8005520:	54e5      	strb	r5, [r4, r3]
        else if (self->trig.set.mode == DISABLED &&
                 self->trig.pretrig_cntr > self->trig.fullmem_val)
        {
            self->trig.ready = 1;
            if (self->trig.ready_last == 0)
                comm_respond(comm_ptr, PS_RESP_RDY, 9);
 8005522:	4b14      	ldr	r3, [pc, #80]	; (8005574 <daq_trig_check+0xdc>)
 8005524:	2209      	movs	r2, #9
 8005526:	4914      	ldr	r1, [pc, #80]	; (8005578 <daq_trig_check+0xe0>)
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	f7ff fa97 	bl	8004a5c <comm_respond>
 800552e:	e016      	b.n	800555e <daq_trig_check+0xc6>
        self->trig.pretrig_cntr = 0;
 8005530:	f243 0318 	movw	r3, #12312	; 0x3018
 8005534:	50c2      	str	r2, [r0, r3]
 8005536:	e7c4      	b.n	80054c2 <daq_trig_check+0x2a>
        else if (self->trig.set.mode == DISABLED &&
 8005538:	2b03      	cmp	r3, #3
 800553a:	d110      	bne.n	800555e <daq_trig_check+0xc6>
 800553c:	f243 0318 	movw	r3, #12312	; 0x3018
 8005540:	58e2      	ldr	r2, [r4, r3]
 8005542:	f243 0328 	movw	r3, #12328	; 0x3028
 8005546:	58e3      	ldr	r3, [r4, r3]
 8005548:	429a      	cmp	r2, r3
 800554a:	dd08      	ble.n	800555e <daq_trig_check+0xc6>
            self->trig.ready = 1;
 800554c:	f642 73fa 	movw	r3, #12282	; 0x2ffa
 8005550:	2201      	movs	r2, #1
 8005552:	54e2      	strb	r2, [r4, r3]
            if (self->trig.ready_last == 0)
 8005554:	f642 73fb 	movw	r3, #12283	; 0x2ffb
 8005558:	5ce3      	ldrb	r3, [r4, r3]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0e1      	beq.n	8005522 <daq_trig_check+0x8a>
        }
    }
    self->trig.ready_last = self->trig.ready;
 800555e:	f642 73fa 	movw	r3, #12282	; 0x2ffa
 8005562:	5ce2      	ldrb	r2, [r4, r3]
 8005564:	f642 73fb 	movw	r3, #12283	; 0x2ffb
 8005568:	54e2      	strb	r2, [r4, r3]
}
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	200005b4 	.word	0x200005b4
 8005570:	40020008 	.word	0x40020008
 8005574:	200005b0 	.word	0x200005b0
 8005578:	0800ae10 	.word	0x0800ae10

0800557c <daq_trig_trigger_scope>:

void daq_trig_trigger_scope(daq_data_t* self)
{
 800557c:	b538      	push	{r3, r4, r5, lr}
    ASSERT(self->trig.buff_trig != NULL);
 800557e:	f243 032c 	movw	r3, #12332	; 0x302c
 8005582:	58c3      	ldr	r3, [r0, r3]
{
 8005584:	4604      	mov	r4, r0
    ASSERT(self->trig.buff_trig != NULL);
 8005586:	b91b      	cbnz	r3, 8005590 <daq_trig_trigger_scope+0x14>
 8005588:	215b      	movs	r1, #91	; 0x5b
 800558a:	4832      	ldr	r0, [pc, #200]	; (8005654 <daq_trig_trigger_scope+0xd8>)
 800558c:	f001 fd02 	bl	8006f94 <assert2>
    ASSERT(self->trig.dma_trig != 0);
 8005590:	f243 0330 	movw	r3, #12336	; 0x3030
 8005594:	58e3      	ldr	r3, [r4, r3]
 8005596:	b91b      	cbnz	r3, 80055a0 <daq_trig_trigger_scope+0x24>
 8005598:	215c      	movs	r1, #92	; 0x5c
 800559a:	482e      	ldr	r0, [pc, #184]	; (8005654 <daq_trig_trigger_scope+0xd8>)
 800559c:	f001 fcfa 	bl	8006f94 <assert2>

    int last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_trig);
 80055a0:	f243 052c 	movw	r5, #12332	; 0x302c
 80055a4:	5963      	ldr	r3, [r4, r5]
 80055a6:	88d9      	ldrh	r1, [r3, #6]
 80055a8:	f243 0330 	movw	r3, #12336	; 0x3030
 80055ac:	58e2      	ldr	r2, [r4, r3]
 80055ae:	4b2a      	ldr	r3, [pc, #168]	; (8005658 <daq_trig_trigger_scope+0xdc>)
 80055b0:	4413      	add	r3, r2
 80055b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80055b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055ba:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80055be:	6858      	ldr	r0, [r3, #4]
 80055c0:	b280      	uxth	r0, r0
 80055c2:	1a08      	subs	r0, r1, r0
 80055c4:	f001 fe07 	bl	80071d6 <get_last_circ_idx>

    if (self->trig.ready || self->trig.post_start)
 80055c8:	f642 73fa 	movw	r3, #12282	; 0x2ffa
 80055cc:	5ce3      	ldrb	r3, [r4, r3]
 80055ce:	bb33      	cbnz	r3, 800561e <daq_trig_trigger_scope+0xa2>
 80055d0:	f243 033c 	movw	r3, #12348	; 0x303c
 80055d4:	58e3      	ldr	r3, [r4, r3]
 80055d6:	bb13      	cbnz	r3, 800561e <daq_trig_trigger_scope+0xa2>
        return;

    int prev_last_idx = last_idx - self->trig.buff_trig->chans;
 80055d8:	5962      	ldr	r2, [r4, r5]
 80055da:	8893      	ldrh	r3, [r2, #4]
    if (prev_last_idx < 0)
 80055dc:	1ac3      	subs	r3, r0, r3
        prev_last_idx += self->trig.buff_trig->len;
 80055de:	bf48      	it	mi
 80055e0:	88d1      	ldrhmi	r1, [r2, #6]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	bf48      	it	mi
 80055e6:	185b      	addmi	r3, r3, r1

    uint16_t last_val = 0;
    uint16_t prev_last_val = 0;

    if (self->set.bits == B8)
 80055e8:	f642 718e 	movw	r1, #12174	; 0x2f8e
 80055ec:	5c61      	ldrb	r1, [r4, r1]
 80055ee:	2908      	cmp	r1, #8
    {
        last_val = (uint16_t)(((uint8_t*)(self->trig.buff_trig->data))[last_idx]);
 80055f0:	bf07      	ittee	eq
 80055f2:	5c11      	ldrbeq	r1, [r2, r0]
        prev_last_val = (uint16_t)(((uint8_t*)(self->trig.buff_trig->data))[prev_last_idx]);
 80055f4:	5cd3      	ldrbeq	r3, [r2, r3]
    }
    else
    {
        last_val = (*((uint16_t*)(((uint8_t*)self->trig.buff_trig->data)+(last_idx*2))));
 80055f6:	f832 1010 	ldrhne.w	r1, [r2, r0, lsl #1]
        prev_last_val = (*((uint16_t*)(((uint8_t*)self->trig.buff_trig->data)+(prev_last_idx*2))));
 80055fa:	f832 3013 	ldrhne.w	r3, [r2, r3, lsl #1]
    }
    else
    {
    */
        // trigger condition
        if ((self->trig.set.edge == RISING && last_val > self->trig.set.val && prev_last_val <= self->trig.set.val) ||
 80055fe:	f642 72bd 	movw	r2, #12221	; 0x2fbd
 8005602:	5ca2      	ldrb	r2, [r4, r2]
 8005604:	b962      	cbnz	r2, 8005620 <daq_trig_trigger_scope+0xa4>
 8005606:	f642 72c4 	movw	r2, #12228	; 0x2fc4
 800560a:	58a2      	ldr	r2, [r4, r2]
 800560c:	4291      	cmp	r1, r2
 800560e:	dd01      	ble.n	8005614 <daq_trig_trigger_scope+0x98>
 8005610:	429a      	cmp	r2, r3
 8005612:	da0e      	bge.n	8005632 <daq_trig_trigger_scope+0xb6>
            {
                //self->trig.pretrig_cntr = 0;
                daq_trig_poststart(self, last_idx);
            }
        }
        self->trig.all_cntr++;
 8005614:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	6023      	str	r3, [r4, #0]
            LL_ADC_SetAnalogWDThresholds(ADC1, LL_ADC_AWD_THRESHOLD_LOW, h);
            trig_false_cntr++;
        //}
         */
    //}
}
 800561e:	bd38      	pop	{r3, r4, r5, pc}
        if ((self->trig.set.edge == RISING && last_val > self->trig.set.val && prev_last_val <= self->trig.set.val) ||
 8005620:	2a01      	cmp	r2, #1
 8005622:	d1f7      	bne.n	8005614 <daq_trig_trigger_scope+0x98>
            (self->trig.set.edge == FALLING && last_val < self->trig.set.val && prev_last_val >= self->trig.set.val))
 8005624:	f642 72c4 	movw	r2, #12228	; 0x2fc4
 8005628:	58a2      	ldr	r2, [r4, r2]
 800562a:	4291      	cmp	r1, r2
 800562c:	daf2      	bge.n	8005614 <daq_trig_trigger_scope+0x98>
 800562e:	429a      	cmp	r2, r3
 8005630:	dcf0      	bgt.n	8005614 <daq_trig_trigger_scope+0x98>
            if (self->trig.pretrig_cntr > self->trig.pretrig_val) // pretrigger counter
 8005632:	f243 0318 	movw	r3, #12312	; 0x3018
 8005636:	58e2      	ldr	r2, [r4, r3]
 8005638:	f243 031c 	movw	r3, #12316	; 0x301c
 800563c:	58e3      	ldr	r3, [r4, r3]
 800563e:	429a      	cmp	r2, r3
 8005640:	dde8      	ble.n	8005614 <daq_trig_trigger_scope+0x98>
    }
}

void daq_trig_poststart(daq_data_t* self, int pos)
{
    self->trig.post_start = 1;
 8005642:	f243 033c 	movw	r3, #12348	; 0x303c
 8005646:	2201      	movs	r2, #1
 8005648:	50e2      	str	r2, [r4, r3]
    self->trig.post_from = pos;
 800564a:	f504 5341 	add.w	r3, r4, #12352	; 0x3040
 800564e:	6018      	str	r0, [r3, #0]
 8005650:	e7e0      	b.n	8005614 <daq_trig_trigger_scope+0x98>
 8005652:	bf00      	nop
 8005654:	0800ae1a 	.word	0x0800ae1a
 8005658:	0800ae09 	.word	0x0800ae09

0800565c <daq_trig_trigger_la>:
    ASSERT(self->trig.buff_trig != NULL);
 800565c:	f243 032c 	movw	r3, #12332	; 0x302c
 8005660:	58c3      	ldr	r3, [r0, r3]
{
 8005662:	b570      	push	{r4, r5, r6, lr}
 8005664:	4604      	mov	r4, r0
    ASSERT(self->trig.buff_trig != NULL);
 8005666:	b91b      	cbnz	r3, 8005670 <daq_trig_trigger_la+0x14>
 8005668:	21a2      	movs	r1, #162	; 0xa2
 800566a:	481b      	ldr	r0, [pc, #108]	; (80056d8 <daq_trig_trigger_la+0x7c>)
 800566c:	f001 fc92 	bl	8006f94 <assert2>
    ASSERT(self->trig.dma_trig != 0);
 8005670:	f243 0330 	movw	r3, #12336	; 0x3030
 8005674:	58e3      	ldr	r3, [r4, r3]
 8005676:	b91b      	cbnz	r3, 8005680 <daq_trig_trigger_la+0x24>
 8005678:	21a3      	movs	r1, #163	; 0xa3
 800567a:	4817      	ldr	r0, [pc, #92]	; (80056d8 <daq_trig_trigger_la+0x7c>)
 800567c:	f001 fc8a 	bl	8006f94 <assert2>
    int last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_trig);
 8005680:	f243 032c 	movw	r3, #12332	; 0x302c
 8005684:	58e3      	ldr	r3, [r4, r3]
 8005686:	88d9      	ldrh	r1, [r3, #6]
 8005688:	f243 0330 	movw	r3, #12336	; 0x3030
 800568c:	58e2      	ldr	r2, [r4, r3]
 800568e:	4b13      	ldr	r3, [pc, #76]	; (80056dc <daq_trig_trigger_la+0x80>)
 8005690:	4413      	add	r3, r2
 8005692:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005696:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800569a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800569e:	6858      	ldr	r0, [r3, #4]
 80056a0:	b280      	uxth	r0, r0
 80056a2:	1a08      	subs	r0, r1, r0
 80056a4:	f001 fd97 	bl	80071d6 <get_last_circ_idx>
    if (self->trig.ready || self->trig.post_start)
 80056a8:	f642 73fa 	movw	r3, #12282	; 0x2ffa
 80056ac:	5ce3      	ldrb	r3, [r4, r3]
 80056ae:	b98b      	cbnz	r3, 80056d4 <daq_trig_trigger_la+0x78>
 80056b0:	f243 033c 	movw	r3, #12348	; 0x303c
 80056b4:	58e1      	ldr	r1, [r4, r3]
 80056b6:	b969      	cbnz	r1, 80056d4 <daq_trig_trigger_la+0x78>
    if (self->trig.pretrig_cntr > self->trig.pretrig_val)
 80056b8:	f243 0218 	movw	r2, #12312	; 0x3018
 80056bc:	f243 051c 	movw	r5, #12316	; 0x301c
 80056c0:	58a6      	ldr	r6, [r4, r2]
 80056c2:	5965      	ldr	r5, [r4, r5]
 80056c4:	42ae      	cmp	r6, r5
 80056c6:	dd05      	ble.n	80056d4 <daq_trig_trigger_la+0x78>
        self->trig.pretrig_cntr = 0;
 80056c8:	50a1      	str	r1, [r4, r2]
    self->trig.post_start = 1;
 80056ca:	2201      	movs	r2, #1
 80056cc:	50e2      	str	r2, [r4, r3]
    self->trig.post_from = pos;
 80056ce:	f504 5441 	add.w	r4, r4, #12352	; 0x3040
 80056d2:	6020      	str	r0, [r4, #0]
}
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
 80056d6:	bf00      	nop
 80056d8:	0800ae1a 	.word	0x0800ae1a
 80056dc:	0800ae09 	.word	0x0800ae09

080056e0 <daq_trig_postcount>:
    //self->trig.trig_data_last_idx = last_idx;
}
void daq_trig_postcount(daq_data_t* self)
{
 80056e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int last_idx = self->trig.post_from;
 80056e4:	f500 5341 	add.w	r3, r0, #12352	; 0x3040
 80056e8:	681d      	ldr	r5, [r3, #0]

    ASSERT(self->trig.buff_trig != NULL);
 80056ea:	f243 032c 	movw	r3, #12332	; 0x302c
 80056ee:	58c3      	ldr	r3, [r0, r3]
{
 80056f0:	4604      	mov	r4, r0
    ASSERT(self->trig.buff_trig != NULL);
 80056f2:	b91b      	cbnz	r3, 80056fc <daq_trig_postcount+0x1c>
 80056f4:	21bb      	movs	r1, #187	; 0xbb
 80056f6:	485a      	ldr	r0, [pc, #360]	; (8005860 <daq_trig_postcount+0x180>)
 80056f8:	f001 fc4c 	bl	8006f94 <assert2>

    self->trig.is_post = 1;
 80056fc:	f642 73f8 	movw	r3, #12280	; 0x2ff8
 8005700:	2201      	movs	r2, #1
 8005702:	54e2      	strb	r2, [r4, r3]
    self->trig.cntr++;
 8005704:	f642 72fc 	movw	r2, #12284	; 0x2ffc
 8005708:	58a3      	ldr	r3, [r4, r2]

    self->trig.pos_trig = last_idx + self->trig.order;
    if (self->trig.pos_trig >= self->trig.buff_trig->len)
 800570a:	f243 012c 	movw	r1, #12332	; 0x302c
    self->trig.cntr++;
 800570e:	3301      	adds	r3, #1
 8005710:	50a3      	str	r3, [r4, r2]
    self->trig.pos_trig = last_idx + self->trig.order;
 8005712:	f243 0338 	movw	r3, #12344	; 0x3038
 8005716:	f243 0208 	movw	r2, #12296	; 0x3008
    if (self->trig.pos_trig >= self->trig.buff_trig->len)
 800571a:	5867      	ldr	r7, [r4, r1]
    self->trig.pos_trig = last_idx + self->trig.order;
 800571c:	58e3      	ldr	r3, [r4, r3]
 800571e:	442b      	add	r3, r5
    if (self->trig.pos_trig >= self->trig.buff_trig->len)
 8005720:	88fd      	ldrh	r5, [r7, #6]
    self->trig.pos_trig = last_idx + self->trig.order;
 8005722:	50a3      	str	r3, [r4, r2]
    if (self->trig.pos_trig >= self->trig.buff_trig->len)
 8005724:	42ab      	cmp	r3, r5
        self->trig.pos_trig -= self->trig.buff_trig->len;
 8005726:	bfa4      	itt	ge
 8005728:	1b5b      	subge	r3, r3, r5
 800572a:	50a3      	strge	r3, [r4, r2]

    int post = (int)((float)self->set.mem * ((float)(100 - self->trig.set.pretrigger) / 100.0));
 800572c:	f642 738c 	movw	r3, #12172	; 0x2f8c
 8005730:	5ae6      	ldrh	r6, [r4, r3]
 8005732:	f642 73b8 	movw	r3, #12216	; 0x2fb8
 8005736:	58e0      	ldr	r0, [r4, r3]
 8005738:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
 800573c:	f7fb fab8 	bl	8000cb0 <__aeabi_i2f>
 8005740:	f7fa fe7c 	bl	800043c <__aeabi_f2d>
 8005744:	2200      	movs	r2, #0
 8005746:	4b47      	ldr	r3, [pc, #284]	; (8005864 <daq_trig_postcount+0x184>)
 8005748:	f7fa fffa 	bl	8000740 <__aeabi_ddiv>
 800574c:	4680      	mov	r8, r0
 800574e:	4630      	mov	r0, r6
 8005750:	4689      	mov	r9, r1
 8005752:	f7fb faa9 	bl	8000ca8 <__aeabi_ui2f>
 8005756:	f7fa fe71 	bl	800043c <__aeabi_f2d>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4640      	mov	r0, r8
 8005760:	4649      	mov	r1, r9
 8005762:	f7fa fec3 	bl	80004ec <__aeabi_dmul>
 8005766:	f7fb f971 	bl	8000a4c <__aeabi_d2iz>
    self->trig.posttrig_size = post * self->trig.buff_trig->chans;
 800576a:	f243 0324 	movw	r3, #12324	; 0x3024
 800576e:	88b9      	ldrh	r1, [r7, #4]
 8005770:	f243 070c 	movw	r7, #12300	; 0x300c
 8005774:	fb00 f201 	mul.w	r2, r0, r1
 8005778:	50e2      	str	r2, [r4, r3]

    self->trig.pos_last = self->trig.pos_trig + self->trig.posttrig_size;
 800577a:	f243 0308 	movw	r3, #12296	; 0x3008
 800577e:	58e3      	ldr	r3, [r4, r3]
    if (self->trig.pos_last >= self->trig.buff_trig->len)
        self->trig.pos_last -= self->trig.buff_trig->len;

    self->trig.pos_frst = self->trig.pos_trig - ((self->set.mem - post + 1) * self->trig.buff_trig->chans) + 1;
 8005780:	1a36      	subs	r6, r6, r0
    self->trig.pos_last = self->trig.pos_trig + self->trig.posttrig_size;
 8005782:	441a      	add	r2, r3
    if (self->trig.pos_last >= self->trig.buff_trig->len)
 8005784:	4295      	cmp	r5, r2
        self->trig.pos_last -= self->trig.buff_trig->len;
 8005786:	bfd8      	it	le
 8005788:	1b52      	suble	r2, r2, r5
 800578a:	51e2      	str	r2, [r4, r7]
 800578c:	f243 0204 	movw	r2, #12292	; 0x3004
    self->trig.pos_frst = self->trig.pos_trig - ((self->set.mem - post + 1) * self->trig.buff_trig->chans) + 1;
 8005790:	fb06 1101 	mla	r1, r6, r1, r1
 8005794:	1a5b      	subs	r3, r3, r1
 8005796:	3301      	adds	r3, #1
    if (self->trig.pos_frst >= self->trig.buff_trig->len)
 8005798:	429d      	cmp	r5, r3
        self->trig.pos_frst -= self->trig.buff_trig->len;
 800579a:	bfd8      	it	le
 800579c:	1b5b      	suble	r3, r3, r5
 800579e:	50a3      	str	r3, [r4, r2]
    if (self->trig.pos_frst < 0)
 80057a0:	58a3      	ldr	r3, [r4, r2]
 80057a2:	2b00      	cmp	r3, #0
        self->trig.pos_frst += self->trig.buff_trig->len;
 80057a4:	bfb8      	it	lt
 80057a6:	18ed      	addlt	r5, r5, r3


    if (self->mode != LA)
 80057a8:	f642 73b6 	movw	r3, #12214	; 0x2fb6
 80057ac:	5ce3      	ldrb	r3, [r4, r3]
        self->trig.pos_frst += self->trig.buff_trig->len;
 80057ae:	bfb8      	it	lt
 80057b0:	50a5      	strlt	r5, [r4, r2]
    if (self->mode != LA)
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d04e      	beq.n	8005854 <daq_trig_postcount+0x174>
 80057b6:	4a2c      	ldr	r2, [pc, #176]	; (8005868 <daq_trig_postcount+0x188>)
 80057b8:	4b2c      	ldr	r3, [pc, #176]	; (800586c <daq_trig_postcount+0x18c>)
 80057ba:	6851      	ldr	r1, [r2, #4]
 80057bc:	400b      	ands	r3, r1
 80057be:	6053      	str	r3, [r2, #4]
    else
    {
        NVIC_DisableIRQ(self->trig.exti_trig);
    }

    self->trig.pretrig_cntr = 0;
 80057c0:	f243 0318 	movw	r3, #12312	; 0x3018
 80057c4:	2200      	movs	r2, #0
 80057c6:	f64a 28aa 	movw	r8, #43690	; 0xaaaa

    while(1)
    {
        iwdg_feed();
        int last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_trig);
 80057ca:	f504 5540 	add.w	r5, r4, #12288	; 0x3000
 80057ce:	4e28      	ldr	r6, [pc, #160]	; (8005870 <daq_trig_postcount+0x190>)
 80057d0:	4f28      	ldr	r7, [pc, #160]	; (8005874 <daq_trig_postcount+0x194>)
    self->trig.pretrig_cntr = 0;
 80057d2:	50e2      	str	r2, [r4, r3]
        int last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_trig);
 80057d4:	352c      	adds	r5, #44	; 0x2c
 80057d6:	682b      	ldr	r3, [r5, #0]
 80057d8:	f8c6 8000 	str.w	r8, [r6]
 80057dc:	88d9      	ldrh	r1, [r3, #6]
 80057de:	f243 0330 	movw	r3, #12336	; 0x3030
 80057e2:	58e3      	ldr	r3, [r4, r3]
 80057e4:	443b      	add	r3, r7
 80057e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80057ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057ee:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80057f2:	6858      	ldr	r0, [r3, #4]
 80057f4:	b280      	uxth	r0, r0
 80057f6:	1a08      	subs	r0, r1, r0
 80057f8:	f001 fced 	bl	80071d6 <get_last_circ_idx>

        self->trig.pos_diff = self->trig.pos_last - self->trig.pos_trig;
 80057fc:	f243 030c 	movw	r3, #12300	; 0x300c
 8005800:	58e1      	ldr	r1, [r4, r3]
 8005802:	f243 0308 	movw	r3, #12296	; 0x3008
 8005806:	f243 0c10 	movw	ip, #12304	; 0x3010
 800580a:	58e3      	ldr	r3, [r4, r3]
 800580c:	1acb      	subs	r3, r1, r3

        if (self->trig.pos_diff < 0)
 800580e:	2b00      	cmp	r3, #0
            self->trig.pos_diff += self->trig.buff_trig->len;
 8005810:	bfb8      	it	lt
 8005812:	682a      	ldrlt	r2, [r5, #0]
        self->trig.pos_diff = self->trig.pos_last - self->trig.pos_trig;
 8005814:	f844 300c 	str.w	r3, [r4, ip]
            self->trig.pos_diff += self->trig.buff_trig->len;
 8005818:	bfbe      	ittt	lt
 800581a:	88d2      	ldrhlt	r2, [r2, #6]
 800581c:	189b      	addlt	r3, r3, r2
 800581e:	f844 300c 	strlt.w	r3, [r4, ip]

        if (self->trig.pos_last == last_idx)
 8005822:	4281      	cmp	r1, r0
 8005824:	d1d7      	bne.n	80057d6 <daq_trig_postcount+0xf6>
        {
            daq_enable(self, 0);
 8005826:	2100      	movs	r1, #0
 8005828:	4620      	mov	r0, r4
 800582a:	f7ff fac5 	bl	8004db8 <daq_enable>
            self->trig.ready = 1;
 800582e:	f642 73fa 	movw	r3, #12282	; 0x2ffa
 8005832:	2201      	movs	r2, #1
            self->trig.is_post = 0;
 8005834:	2500      	movs	r5, #0
            self->trig.ready = 1;
 8005836:	54e2      	strb	r2, [r4, r3]
            self->trig.is_post = 0;
 8005838:	f642 73f8 	movw	r3, #12280	; 0x2ff8
 800583c:	54e5      	strb	r5, [r4, r3]
            comm_respond(comm_ptr, PS_RESP_RDY, 9); // data ready
 800583e:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <daq_trig_postcount+0x198>)
 8005840:	2209      	movs	r2, #9
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	490d      	ldr	r1, [pc, #52]	; (800587c <daq_trig_postcount+0x19c>)
 8005846:	f7ff f909 	bl	8004a5c <comm_respond>

            break;
        }
    }
    self->trig.post_start = 0;
 800584a:	f243 033c 	movw	r3, #12348	; 0x303c
 800584e:	50e5      	str	r5, [r4, r3]
}
 8005850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        NVIC_DisableIRQ(self->trig.exti_trig);
 8005854:	f243 0334 	movw	r3, #12340	; 0x3034
 8005858:	56e0      	ldrsb	r0, [r4, r3]
 800585a:	f7ff fdc9 	bl	80053f0 <__NVIC_DisableIRQ>
 800585e:	e7af      	b.n	80057c0 <daq_trig_postcount+0xe0>
 8005860:	0800ae1a 	.word	0x0800ae1a
 8005864:	40590000 	.word	0x40590000
 8005868:	40012400 	.word	0x40012400
 800586c:	ff3ffde0 	.word	0xff3ffde0
 8005870:	40003000 	.word	0x40003000
 8005874:	0800ae09 	.word	0x0800ae09
 8005878:	200005b0 	.word	0x200005b0
 800587c:	0800ae10 	.word	0x0800ae10

08005880 <daq_trig_set>:
{
    daq_trig_set(self, 0, self->trig.set.val_percent, self->trig.set.edge, DISABLED, self->trig.set.pretrigger);
}

int daq_trig_set(daq_data_t* self, uint32_t ch, uint8_t level, enum trig_edge edge, enum trig_mode mode, int pretrigger)
{
 8005880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((level < 0 || level > 100) ||
 8005884:	2a64      	cmp	r2, #100	; 0x64
{
 8005886:	b087      	sub	sp, #28
 8005888:	4604      	mov	r4, r0
 800588a:	460d      	mov	r5, r1
 800588c:	4617      	mov	r7, r2
 800588e:	9302      	str	r3, [sp, #8]
 8005890:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    if((level < 0 || level > 100) ||
 8005894:	d904      	bls.n	80058a0 <daq_trig_set+0x20>
       (ch < 0 || ch > 4) ||
       (pretrigger > 99 || pretrigger < 1))
    {
        return -1;
 8005896:	f04f 30ff 	mov.w	r0, #4294967295
    }


    daq_enable(self, 1);
    return 0;
}
 800589a:	b007      	add	sp, #28
 800589c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((level < 0 || level > 100) ||
 80058a0:	2904      	cmp	r1, #4
 80058a2:	d8f8      	bhi.n	8005896 <daq_trig_set+0x16>
       (pretrigger > 99 || pretrigger < 1))
 80058a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058a6:	3b01      	subs	r3, #1
       (ch < 0 || ch > 4) ||
 80058a8:	2b62      	cmp	r3, #98	; 0x62
 80058aa:	d8f4      	bhi.n	8005896 <daq_trig_set+0x16>
    daq_enable(self, 0);
 80058ac:	2100      	movs	r1, #0
 80058ae:	f7ff fa83 	bl	8004db8 <daq_enable>
    daq_reset(self);
 80058b2:	4620      	mov	r0, r4
 80058b4:	f7ff fa4b 	bl	8004d4e <daq_reset>
    self->trig.buff_trig = &self->buff1;
 80058b8:	f243 032c 	movw	r3, #12332	; 0x302c
    self->trig.dma_trig = PS_DMA_CH_ADC1;
 80058bc:	f243 0230 	movw	r2, #12336	; 0x3030
    self->trig.buff_trig = &self->buff1;
 80058c0:	50e4      	str	r4, [r4, r3]
    self->trig.dma_trig = PS_DMA_CH_ADC1;
 80058c2:	2301      	movs	r3, #1
 80058c4:	50a3      	str	r3, [r4, r2]
    int ch_cnt = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + 1;
 80058c6:	f642 7284 	movw	r2, #12164	; 0x2f84
 80058ca:	f814 9002 	ldrb.w	r9, [r4, r2]
 80058ce:	f642 7285 	movw	r2, #12165	; 0x2f85
 80058d2:	f814 8002 	ldrb.w	r8, [r4, r2]
 80058d6:	f642 7286 	movw	r2, #12166	; 0x2f86
 80058da:	5ca6      	ldrb	r6, [r4, r2]
 80058dc:	f642 7287 	movw	r2, #12167	; 0x2f87
 80058e0:	5ca0      	ldrb	r0, [r4, r2]
 80058e2:	eb09 0208 	add.w	r2, r9, r8
 80058e6:	4432      	add	r2, r6
 80058e8:	4402      	add	r2, r0
 80058ea:	18d1      	adds	r1, r2, r3
    if (self->set.ch1_en){
 80058ec:	f1b9 0f00 	cmp.w	r9, #0
 80058f0:	d007      	beq.n	8005902 <daq_trig_set+0x82>
        if (ch == 1) self->trig.order = ch_cnt - it;
 80058f2:	429d      	cmp	r5, r3
 80058f4:	bf02      	ittt	eq
 80058f6:	f243 0338 	movweq	r3, #12344	; 0x3038
 80058fa:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80058fe:	50e2      	streq	r2, [r4, r3]
        it++;
 8005900:	2302      	movs	r3, #2
    if (self->set.ch2_en){
 8005902:	f1b8 0f00 	cmp.w	r8, #0
 8005906:	d009      	beq.n	800591c <daq_trig_set+0x9c>
        if (ch == 2) self->trig.order = ch_cnt - it;
 8005908:	2d02      	cmp	r5, #2
 800590a:	bf08      	it	eq
 800590c:	f243 0c38 	movweq	ip, #12344	; 0x3038
        it++;
 8005910:	f103 0301 	add.w	r3, r3, #1
        if (ch == 2) self->trig.order = ch_cnt - it;
 8005914:	bf04      	itt	eq
 8005916:	1aca      	subeq	r2, r1, r3
 8005918:	f844 200c 	streq.w	r2, [r4, ip]
    if (self->set.ch3_en){
 800591c:	2e00      	cmp	r6, #0
 800591e:	d05f      	beq.n	80059e0 <daq_trig_set+0x160>
        if (ch == 3) self->trig.order = ch_cnt - it;
 8005920:	2d03      	cmp	r5, #3
        it++;
 8005922:	f103 0301 	add.w	r3, r3, #1
        if (ch == 3) self->trig.order = ch_cnt - it;
 8005926:	d15b      	bne.n	80059e0 <daq_trig_set+0x160>
        if (ch == 4) self->trig.order = ch_cnt - it;
 8005928:	f243 0238 	movw	r2, #12344	; 0x3038
 800592c:	1acb      	subs	r3, r1, r3
 800592e:	50a3      	str	r3, [r4, r2]
    self->trig.fullmem_val = (int)(((1.0 / (float)self->set.fs) * (float)self->set.mem) * (float)PS_SYSTICK_FREQ) + 1;
 8005930:	f642 7388 	movw	r3, #12168	; 0x2f88
 8005934:	58e0      	ldr	r0, [r4, r3]
 8005936:	f7fa fd81 	bl	800043c <__aeabi_f2d>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	2000      	movs	r0, #0
 8005940:	49be      	ldr	r1, [pc, #760]	; (8005c3c <daq_trig_set+0x3bc>)
 8005942:	f7fa fefd 	bl	8000740 <__aeabi_ddiv>
 8005946:	f642 738c 	movw	r3, #12172	; 0x2f8c
 800594a:	e9cd 0100 	strd	r0, r1, [sp]
 800594e:	5ae0      	ldrh	r0, [r4, r3]
 8005950:	f7fb f9aa 	bl	8000ca8 <__aeabi_ui2f>
 8005954:	f7fa fd72 	bl	800043c <__aeabi_f2d>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005960:	f7fa fdc4 	bl	80004ec <__aeabi_dmul>
 8005964:	2200      	movs	r2, #0
 8005966:	4bb6      	ldr	r3, [pc, #728]	; (8005c40 <daq_trig_set+0x3c0>)
 8005968:	f7fa fdc0 	bl	80004ec <__aeabi_dmul>
 800596c:	f7fb f86e 	bl	8000a4c <__aeabi_d2iz>
 8005970:	f243 0328 	movw	r3, #12328	; 0x3028
 8005974:	3001      	adds	r0, #1
 8005976:	50e0      	str	r0, [r4, r3]
    if (self->trig.pretrig_val < 10)
 8005978:	f243 031c 	movw	r3, #12316	; 0x301c
 800597c:	58e2      	ldr	r2, [r4, r3]
 800597e:	2a09      	cmp	r2, #9
        self->trig.pretrig_val = 10;
 8005980:	bfdc      	itt	le
 8005982:	220a      	movle	r2, #10
 8005984:	50e2      	strle	r2, [r4, r3]
    self->trig.auttrig_val = PS_AUTRIG_MIN_MS + (int)((float)self->trig.fullmem_val * 1.0);
 8005986:	f7fb f993 	bl	8000cb0 <__aeabi_i2f>
 800598a:	f7fb fbab 	bl	80010e4 <__aeabi_f2iz>
 800598e:	f243 0320 	movw	r3, #12320	; 0x3020
 8005992:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8005996:	50e0      	str	r0, [r4, r3]
    if (ch == 0 || mode == DISABLED)
 8005998:	b115      	cbz	r5, 80059a0 <daq_trig_set+0x120>
 800599a:	f1ba 0f03 	cmp.w	sl, #3
 800599e:	d125      	bne.n	80059ec <daq_trig_set+0x16c>
        ASSERT(self->trig.exti_trig != 0);
 80059a0:	f243 0334 	movw	r3, #12340	; 0x3034
 80059a4:	58e2      	ldr	r2, [r4, r3]
 80059a6:	461d      	mov	r5, r3
 80059a8:	b922      	cbnz	r2, 80059b4 <daq_trig_set+0x134>
 80059aa:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80059ae:	48a5      	ldr	r0, [pc, #660]	; (8005c44 <daq_trig_set+0x3c4>)
 80059b0:	f001 faf0 	bl	8006f94 <assert2>
        NVIC_DisableIRQ(self->trig.exti_trig);
 80059b4:	5760      	ldrsb	r0, [r4, r5]
        self->trig.set.ch = 0;
 80059b6:	2500      	movs	r5, #0
        NVIC_DisableIRQ(self->trig.exti_trig);
 80059b8:	f7ff fd1a 	bl	80053f0 <__NVIC_DisableIRQ>
 80059bc:	4aa2      	ldr	r2, [pc, #648]	; (8005c48 <daq_trig_set+0x3c8>)
 80059be:	4ba3      	ldr	r3, [pc, #652]	; (8005c4c <daq_trig_set+0x3cc>)
 80059c0:	6851      	ldr	r1, [r2, #4]
 80059c2:	400b      	ands	r3, r1
 80059c4:	6053      	str	r3, [r2, #4]
        self->trig.set.ch = 0;
 80059c6:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 80059ca:	601d      	str	r5, [r3, #0]
        self->trig.set.mode = DISABLED;
 80059cc:	2203      	movs	r2, #3
 80059ce:	f642 73bc 	movw	r3, #12220	; 0x2fbc
 80059d2:	54e2      	strb	r2, [r4, r3]
    daq_enable(self, 1);
 80059d4:	4620      	mov	r0, r4
 80059d6:	2101      	movs	r1, #1
 80059d8:	f7ff f9ee 	bl	8004db8 <daq_enable>
    return 0;
 80059dc:	2000      	movs	r0, #0
 80059de:	e75c      	b.n	800589a <daq_trig_set+0x1a>
    if (self->set.ch4_en){
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d0a5      	beq.n	8005930 <daq_trig_set+0xb0>
        if (ch == 4) self->trig.order = ch_cnt - it;
 80059e4:	2d04      	cmp	r5, #4
 80059e6:	d1a3      	bne.n	8005930 <daq_trig_set+0xb0>
        it++;
 80059e8:	3301      	adds	r3, #1
 80059ea:	e79d      	b.n	8005928 <daq_trig_set+0xa8>
    if (self->mode == LA)
 80059ec:	f642 73b6 	movw	r3, #12214	; 0x2fb6
 80059f0:	5ce1      	ldrb	r1, [r4, r3]
 80059f2:	2902      	cmp	r1, #2
 80059f4:	d16a      	bne.n	8005acc <daq_trig_set+0x24c>
        self->trig.dma_trig = PS_DMA_CH_LA;
 80059f6:	f243 0330 	movw	r3, #12336	; 0x3030
 80059fa:	2206      	movs	r2, #6
 80059fc:	50e2      	str	r2, [r4, r3]
 80059fe:	4a92      	ldr	r2, [pc, #584]	; (8005c48 <daq_trig_set+0x3c8>)
 8005a00:	4b92      	ldr	r3, [pc, #584]	; (8005c4c <daq_trig_set+0x3cc>)
 8005a02:	6850      	ldr	r0, [r2, #4]
 8005a04:	4003      	ands	r3, r0
 8005a06:	6053      	str	r3, [r2, #4]
        LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005a0e:	f243 0334 	movw	r3, #12340	; 0x3034
        if (self->set.ch1_en)
 8005a12:	f1b9 0f00 	cmp.w	r9, #0
 8005a16:	d03d      	beq.n	8005a94 <daq_trig_set+0x214>
            self->trig.exti_trig = PS_LA_IRQ_EXTI1;
 8005a18:	2207      	movs	r2, #7
 8005a1a:	50e2      	str	r2, [r4, r3]
            extiline = PS_LA_EXTILINE1;
 8005a1c:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	0092      	lsls	r2, r2, #2
 8005a24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005a28:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8005a2c:	6890      	ldr	r0, [r2, #8]
 8005a2e:	0c1b      	lsrs	r3, r3, #16
 8005a30:	ea20 0003 	bic.w	r0, r0, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a34:	fa93 f3a3 	rbit	r3, r3
        EXTI_InitStruct.Trigger = (self->trig.set.edge == RISING ? LL_EXTI_TRIGGER_RISING : LL_EXTI_TRIGGER_FALLING);
 8005a38:	f642 73bd 	movw	r3, #12221	; 0x2fbd
        EXTI_InitStruct.LineCommand = ENABLE;
 8005a3c:	2501      	movs	r5, #1
        EXTI_InitStruct.Trigger = (self->trig.set.edge == RISING ? LL_EXTI_TRIGGER_RISING : LL_EXTI_TRIGGER_FALLING);
 8005a3e:	5ce3      	ldrb	r3, [r4, r3]
 8005a40:	6090      	str	r0, [r2, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bf14      	ite	ne
 8005a46:	2302      	movne	r3, #2
 8005a48:	462b      	moveq	r3, r5
        LL_EXTI_Init(&EXTI_InitStruct);
 8005a4a:	a804      	add	r0, sp, #16
        EXTI_InitStruct.Line_0_31 = exti;
 8005a4c:	9104      	str	r1, [sp, #16]
        EXTI_InitStruct.Trigger = (self->trig.set.edge == RISING ? LL_EXTI_TRIGGER_RISING : LL_EXTI_TRIGGER_FALLING);
 8005a4e:	f88d 3016 	strb.w	r3, [sp, #22]
        EXTI_InitStruct.LineCommand = ENABLE;
 8005a52:	f88d 5014 	strb.w	r5, [sp, #20]
        LL_EXTI_Init(&EXTI_InitStruct);
 8005a56:	f7fc fefd 	bl	8002854 <LL_EXTI_Init>
        NVIC_SetPriority(self->trig.exti_trig, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005a5a:	f243 0334 	movw	r3, #12340	; 0x3034
 8005a5e:	58e3      	ldr	r3, [r4, r3]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a60:	497b      	ldr	r1, [pc, #492]	; (8005c50 <daq_trig_set+0x3d0>)
 8005a62:	b25a      	sxtb	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8005a64:	2a00      	cmp	r2, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a66:	68c8      	ldr	r0, [r1, #12]
  if ((int32_t)(IRQn) >= 0)
 8005a68:	db29      	blt.n	8005abe <daq_trig_set+0x23e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a70:	f003 031f 	and.w	r3, r3, #31
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a74:	1888      	adds	r0, r1, r2
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a76:	fa05 f303 	lsl.w	r3, r5, r3
 8005a7a:	0952      	lsrs	r2, r2, #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a7c:	f880 6300 	strb.w	r6, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a80:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        self->trig.set.val = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	f642 72c4 	movw	r2, #12228	; 0x2fc4
 8005a8a:	50a3      	str	r3, [r4, r2]
        self->trig.set.val_percent = 0;
 8005a8c:	f642 72c8 	movw	r2, #12232	; 0x2fc8
 8005a90:	50a3      	str	r3, [r4, r2]
 8005a92:	e79f      	b.n	80059d4 <daq_trig_set+0x154>
        else if (self->set.ch2_en)
 8005a94:	f1b8 0f00 	cmp.w	r8, #0
 8005a98:	d005      	beq.n	8005aa6 <daq_trig_set+0x226>
            self->trig.exti_trig = PS_LA_IRQ_EXTI2;
 8005a9a:	2208      	movs	r2, #8
            exti = PS_LA_EXTI2;
 8005a9c:	2104      	movs	r1, #4
            self->trig.exti_trig = PS_LA_IRQ_EXTI2;
 8005a9e:	50e2      	str	r2, [r4, r3]
            extiline = PS_LA_EXTILINE2;
 8005aa0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005aa4:	e7bc      	b.n	8005a20 <daq_trig_set+0x1a0>
        else if (self->set.ch3_en)
 8005aa6:	b12e      	cbz	r6, 8005ab4 <daq_trig_set+0x234>
            self->trig.exti_trig = PS_LA_IRQ_EXTI3;
 8005aa8:	2209      	movs	r2, #9
            exti = PS_LA_EXTI3;
 8005aaa:	2108      	movs	r1, #8
            self->trig.exti_trig = PS_LA_IRQ_EXTI3;
 8005aac:	50e2      	str	r2, [r4, r3]
            extiline = PS_LA_EXTILINE3;
 8005aae:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 8005ab2:	e7b5      	b.n	8005a20 <daq_trig_set+0x1a0>
            self->trig.exti_trig = PS_LA_IRQ_EXTI4;
 8005ab4:	220a      	movs	r2, #10
            exti = PS_LA_EXTI4;
 8005ab6:	2110      	movs	r1, #16
            self->trig.exti_trig = PS_LA_IRQ_EXTI4;
 8005ab8:	50e2      	str	r2, [r4, r3]
            extiline = PS_LA_EXTILINE4;
 8005aba:	4b66      	ldr	r3, [pc, #408]	; (8005c54 <daq_trig_set+0x3d4>)
 8005abc:	e7b0      	b.n	8005a20 <daq_trig_set+0x1a0>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	3b04      	subs	r3, #4
 8005ac6:	440b      	add	r3, r1
 8005ac8:	761a      	strb	r2, [r3, #24]
 8005aca:	e7db      	b.n	8005a84 <daq_trig_set+0x204>
        ASSERT(self->trig.exti_trig != 0);
 8005acc:	f243 0334 	movw	r3, #12340	; 0x3034
 8005ad0:	58e2      	ldr	r2, [r4, r3]
 8005ad2:	461e      	mov	r6, r3
 8005ad4:	b922      	cbnz	r2, 8005ae0 <daq_trig_set+0x260>
 8005ad6:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8005ada:	485a      	ldr	r0, [pc, #360]	; (8005c44 <daq_trig_set+0x3c4>)
 8005adc:	f001 fa5a 	bl	8006f94 <assert2>
        NVIC_DisableIRQ(self->trig.exti_trig);
 8005ae0:	57a0      	ldrsb	r0, [r4, r6]
 8005ae2:	f7ff fc85 	bl	80053f0 <__NVIC_DisableIRQ>
        if ((ch == 1 && self->set.ch1_en) ||
 8005ae6:	2d01      	cmp	r5, #1
 8005ae8:	d170      	bne.n	8005bcc <daq_trig_set+0x34c>
 8005aea:	f642 7384 	movw	r3, #12164	; 0x2f84
 8005aee:	5ce3      	ldrb	r3, [r4, r3]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f43f aed0 	beq.w	8005896 <daq_trig_set+0x16>
                self->trig.ch_reg = PS_ADC_AWD1;
 8005af6:	f642 73f4 	movw	r3, #12276	; 0x2ff4
 8005afa:	4a57      	ldr	r2, [pc, #348]	; (8005c58 <daq_trig_set+0x3d8>)
 8005afc:	4e52      	ldr	r6, [pc, #328]	; (8005c48 <daq_trig_set+0x3c8>)
                self->trig.ch_reg = PS_ADC_AWD4;
 8005afe:	50e2      	str	r2, [r4, r3]
 8005b00:	6872      	ldr	r2, [r6, #4]
 8005b02:	4b52      	ldr	r3, [pc, #328]	; (8005c4c <daq_trig_set+0x3cc>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	f642 72f4 	movw	r2, #12276	; 0x2ff4
 8005b0a:	58a2      	ldr	r2, [r4, r2]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	6073      	str	r3, [r6, #4]
            uint32_t level_raw = (int)(self->adc_max_val / 100.0 * (float)level);
 8005b10:	f642 73b0 	movw	r3, #12208	; 0x2fb0
 8005b14:	f854 b003 	ldr.w	fp, [r4, r3]
 8005b18:	4658      	mov	r0, fp
 8005b1a:	f7fa fc8f 	bl	800043c <__aeabi_f2d>
 8005b1e:	2200      	movs	r2, #0
 8005b20:	4b4e      	ldr	r3, [pc, #312]	; (8005c5c <daq_trig_set+0x3dc>)
 8005b22:	f7fa fe0d 	bl	8000740 <__aeabi_ddiv>
 8005b26:	4680      	mov	r8, r0
 8005b28:	4638      	mov	r0, r7
 8005b2a:	4689      	mov	r9, r1
 8005b2c:	f7fb f8bc 	bl	8000ca8 <__aeabi_ui2f>
 8005b30:	f7fa fc84 	bl	800043c <__aeabi_f2d>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4640      	mov	r0, r8
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	f7fa fcd6 	bl	80004ec <__aeabi_dmul>
 8005b40:	f7fa ff84 	bl	8000a4c <__aeabi_d2iz>
            if (edge == RISING)
 8005b44:	9902      	ldr	r1, [sp, #8]
            uint32_t level_raw = (int)(self->adc_max_val / 100.0 * (float)level);
 8005b46:	4602      	mov	r2, r0
 8005b48:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8005c70 <daq_trig_set+0x3f0>
 8005b4c:	4b44      	ldr	r3, [pc, #272]	; (8005c60 <daq_trig_set+0x3e0>)
            if (edge == RISING)
 8005b4e:	2900      	cmp	r1, #0
 8005b50:	d15e      	bne.n	8005c10 <daq_trig_set+0x390>
  MODIFY_REG(*preg,
 8005b52:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8005b54:	4019      	ands	r1, r3
 8005b56:	4339      	orrs	r1, r7
 8005b58:	6271      	str	r1, [r6, #36]	; 0x24
 8005b5a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b5e:	400b      	ands	r3, r1
 8005b60:	f8c9 3004 	str.w	r3, [r9, #4]
            self->trig.set.val = level_raw;
 8005b64:	f642 73c4 	movw	r3, #12228	; 0x2fc4
 8005b68:	50e2      	str	r2, [r4, r3]
            self->trig.set.val_percent = level;
 8005b6a:	f642 73c8 	movw	r3, #12232	; 0x2fc8
 8005b6e:	50e7      	str	r7, [r4, r3]
        self->trig.pretrig_val = (int)((float)self->trig.fullmem_val * ((float)pretrigger / 100.0)) + 1;
 8005b70:	f243 0328 	movw	r3, #12328	; 0x3028
 8005b74:	58e0      	ldr	r0, [r4, r3]
 8005b76:	f7fb f89b 	bl	8000cb0 <__aeabi_i2f>
 8005b7a:	f7fa fc5f 	bl	800043c <__aeabi_f2d>
 8005b7e:	4606      	mov	r6, r0
 8005b80:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005b82:	460f      	mov	r7, r1
 8005b84:	f7fb f894 	bl	8000cb0 <__aeabi_i2f>
 8005b88:	f7fa fc58 	bl	800043c <__aeabi_f2d>
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4b33      	ldr	r3, [pc, #204]	; (8005c5c <daq_trig_set+0x3dc>)
 8005b90:	f7fa fdd6 	bl	8000740 <__aeabi_ddiv>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4630      	mov	r0, r6
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	f7fa fca6 	bl	80004ec <__aeabi_dmul>
 8005ba0:	f7fa ff54 	bl	8000a4c <__aeabi_d2iz>
 8005ba4:	f243 031c 	movw	r3, #12316	; 0x301c
 8005ba8:	3001      	adds	r0, #1
 8005baa:	50e0      	str	r0, [r4, r3]
        self->trig.set.pretrigger = pretrigger;
 8005bac:	f642 73b8 	movw	r3, #12216	; 0x2fb8
 8005bb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005bb2:	50e2      	str	r2, [r4, r3]
        self->trig.set.mode = mode;
 8005bb4:	f642 73bc 	movw	r3, #12220	; 0x2fbc
 8005bb8:	f804 a003 	strb.w	sl, [r4, r3]
        self->trig.set.edge = edge;
 8005bbc:	f642 73bd 	movw	r3, #12221	; 0x2fbd
 8005bc0:	9a02      	ldr	r2, [sp, #8]
 8005bc2:	54e2      	strb	r2, [r4, r3]
        self->trig.set.ch = ch;
 8005bc4:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8005bc8:	601d      	str	r5, [r3, #0]
 8005bca:	e703      	b.n	80059d4 <daq_trig_set+0x154>
        if ((ch == 1 && self->set.ch1_en) ||
 8005bcc:	2d02      	cmp	r5, #2
 8005bce:	d109      	bne.n	8005be4 <daq_trig_set+0x364>
            (ch == 2 && self->set.ch2_en) ||
 8005bd0:	f642 7385 	movw	r3, #12165	; 0x2f85
 8005bd4:	5ce3      	ldrb	r3, [r4, r3]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f43f ae5d 	beq.w	8005896 <daq_trig_set+0x16>
                self->trig.ch_reg = PS_ADC_AWD2;
 8005bdc:	f642 73f4 	movw	r3, #12276	; 0x2ff4
 8005be0:	4a20      	ldr	r2, [pc, #128]	; (8005c64 <daq_trig_set+0x3e4>)
 8005be2:	e78b      	b.n	8005afc <daq_trig_set+0x27c>
            (ch == 2 && self->set.ch2_en) ||
 8005be4:	2d03      	cmp	r5, #3
 8005be6:	d109      	bne.n	8005bfc <daq_trig_set+0x37c>
            (ch == 3 && self->set.ch3_en) ||
 8005be8:	f642 7386 	movw	r3, #12166	; 0x2f86
 8005bec:	5ce3      	ldrb	r3, [r4, r3]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f43f ae51 	beq.w	8005896 <daq_trig_set+0x16>
                self->trig.ch_reg = PS_ADC_AWD3;
 8005bf4:	f642 73f4 	movw	r3, #12276	; 0x2ff4
 8005bf8:	4a1b      	ldr	r2, [pc, #108]	; (8005c68 <daq_trig_set+0x3e8>)
 8005bfa:	e77f      	b.n	8005afc <daq_trig_set+0x27c>
            (ch == 4 && self->set.ch4_en))
 8005bfc:	f642 7387 	movw	r3, #12167	; 0x2f87
 8005c00:	5ce3      	ldrb	r3, [r4, r3]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f43f ae47 	beq.w	8005896 <daq_trig_set+0x16>
                self->trig.ch_reg = PS_ADC_AWD4;
 8005c08:	f642 73f4 	movw	r3, #12276	; 0x2ff4
 8005c0c:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <daq_trig_set+0x3ec>)
 8005c0e:	e775      	b.n	8005afc <daq_trig_set+0x27c>
 8005c10:	9000      	str	r0, [sp, #0]
                LL_ADC_SetAnalogWDThresholds(adc, LL_ADC_AWD_THRESHOLD_HIGH, (int)self->adc_max_val);
 8005c12:	4658      	mov	r0, fp
 8005c14:	9303      	str	r3, [sp, #12]
 8005c16:	f7fb fa65 	bl	80010e4 <__aeabi_f2iz>
 8005c1a:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c1e:	9b03      	ldr	r3, [sp, #12]
 8005c20:	9a00      	ldr	r2, [sp, #0]
 8005c22:	ea08 0803 	and.w	r8, r8, r3
 8005c26:	ea40 0008 	orr.w	r0, r0, r8
 8005c2a:	6270      	str	r0, [r6, #36]	; 0x24
 8005c2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c30:	400b      	ands	r3, r1
 8005c32:	433b      	orrs	r3, r7
 8005c34:	f8c9 3004 	str.w	r3, [r9, #4]
 8005c38:	e794      	b.n	8005b64 <daq_trig_set+0x2e4>
 8005c3a:	bf00      	nop
 8005c3c:	3ff00000 	.word	0x3ff00000
 8005c40:	408f4000 	.word	0x408f4000
 8005c44:	0800ae1a 	.word	0x0800ae1a
 8005c48:	40012400 	.word	0x40012400
 8005c4c:	ff3ffde0 	.word	0xff3ffde0
 8005c50:	e000ed00 	.word	0xe000ed00
 8005c54:	000f0001 	.word	0x000f0001
 8005c58:	00800201 	.word	0x00800201
 8005c5c:	40590000 	.word	0x40590000
 8005c60:	fffff000 	.word	0xfffff000
 8005c64:	00800202 	.word	0x00800202
 8005c68:	00800203 	.word	0x00800203
 8005c6c:	00800204 	.word	0x00800204
 8005c70:	40012424 	.word	0x40012424

08005c74 <daq_trig_update>:
{
 8005c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
    daq_trig_set(self, self->trig.set.ch, self->trig.set.val_percent,
 8005c76:	f642 75b8 	movw	r5, #12216	; 0x2fb8
 8005c7a:	f642 73bd 	movw	r3, #12221	; 0x2fbd
 8005c7e:	f642 72c8 	movw	r2, #12232	; 0x2fc8
 8005c82:	5945      	ldr	r5, [r0, r5]
 8005c84:	5cc3      	ldrb	r3, [r0, r3]
 8005c86:	5c82      	ldrb	r2, [r0, r2]
 8005c88:	9501      	str	r5, [sp, #4]
 8005c8a:	f642 75bc 	movw	r5, #12220	; 0x2fbc
 8005c8e:	5d41      	ldrb	r1, [r0, r5]
 8005c90:	f500 543f 	add.w	r4, r0, #12224	; 0x2fc0
 8005c94:	9100      	str	r1, [sp, #0]
 8005c96:	6821      	ldr	r1, [r4, #0]
 8005c98:	f7ff fdf2 	bl	8005880 <daq_trig_set>
}
 8005c9c:	b003      	add	sp, #12
 8005c9e:	bd30      	pop	{r4, r5, pc}

08005ca0 <USART1_IRQHandler>:
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8005ca0:	4b11      	ldr	r3, [pc, #68]	; (8005ce8 <USART1_IRQHandler+0x48>)
 8005ca2:	681a      	ldr	r2, [r3, #0]
}
*/

void USART1_IRQHandler(void)
{
    if (LL_USART_IsActiveFlag_RXNE(PS_UART))
 8005ca4:	0692      	lsls	r2, r2, #26
 8005ca6:	d51e      	bpl.n	8005ce6 <USART1_IRQHandler+0x46>
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8005ca8:	f06f 0220 	mvn.w	r2, #32
 8005cac:	601a      	str	r2, [r3, #0]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8005cae:	685a      	ldr	r2, [r3, #4]
    {
        LL_USART_ClearFlag_RXNE(PS_UART);
        char rx = LL_USART_ReceiveData8(PS_UART);

        comm.uart.rx_buffer[comm.uart.rx_index++] = rx;
 8005cb0:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <USART1_IRQHandler+0x4c>)
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
 8005cb8:	1c41      	adds	r1, r0, #1
 8005cba:	b2c9      	uxtb	r1, r1

        if (comm.uart.rx_index >= RX_BUFF_LAST)
 8005cbc:	2962      	cmp	r1, #98	; 0x62
        comm.uart.rx_buffer[comm.uart.rx_index++] = rx;
 8005cbe:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
            comm.uart.rx_index = 0;
 8005cc2:	bf88      	it	hi
 8005cc4:	2100      	movhi	r1, #0
        comm.uart.rx_buffer[comm.uart.rx_index++] = rx;
 8005cc6:	4418      	add	r0, r3
            comm.uart.rx_index = 0;
 8005cc8:	bf88      	it	hi
 8005cca:	f883 10cd 	strbhi.w	r1, [r3, #205]	; 0xcd
        comm.uart.rx_buffer[comm.uart.rx_index++] = rx;
 8005cce:	f880 2067 	strb.w	r2, [r0, #103]	; 0x67

        comm.uart.last = 1;
 8005cd2:	2101      	movs	r1, #1
        comm.usb.last = 0;
 8005cd4:	2000      	movs	r0, #0

        if (rx == '\n')
 8005cd6:	2a0a      	cmp	r2, #10
        comm.uart.last = 1;
 8005cd8:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
        comm.usb.last = 0;
 8005cdc:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
            comm.uart.available = 1;
 8005ce0:	bf08      	it	eq
 8005ce2:	f883 10cc 	strbeq.w	r1, [r3, #204]	; 0xcc
    }
}
 8005ce6:	4770      	bx	lr
 8005ce8:	40013800 	.word	0x40013800
 8005cec:	200039d4 	.word	0x200039d4

08005cf0 <ADC1_2_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1));
 8005cf0:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <ADC1_2_IRQHandler+0x18>)
 8005cf2:	681a      	ldr	r2, [r3, #0]

void ADC1_2_IRQHandler(void)
{
#if defined(PS_ADC_MODE_ADC1)
    if (LL_ADC_IsActiveFlag_AWD1(ADC1))
 8005cf4:	07d2      	lsls	r2, r2, #31
 8005cf6:	d505      	bpl.n	8005d04 <ADC1_2_IRQHandler+0x14>
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_AWD1);
 8005cf8:	f06f 0201 	mvn.w	r2, #1
#if defined(PS_ADC_MODE_ADC1234)
        LL_ADC_ClearFlag_AWD1(ADC3);
        LL_ADC_ClearFlag_AWD1(ADC4);
#endif

        daq_trig_trigger_scope(&daq);
 8005cfc:	4803      	ldr	r0, [pc, #12]	; (8005d0c <ADC1_2_IRQHandler+0x1c>)
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	f7ff bc3c 	b.w	800557c <daq_trig_trigger_scope>
    }
}
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40012400 	.word	0x40012400
 8005d0c:	20000950 	.word	0x20000950

08005d10 <TIM3_IRQHandler>:
{
    ADC1_2_IRQHandler();
}

void PS_TIM_ADC_IRQh(void)
{
 8005d10:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005d12:	4b21      	ldr	r3, [pc, #132]	; (8005d98 <TIM3_IRQHandler+0x88>)
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	079b      	lsls	r3, r3, #30
 8005d18:	d53c      	bpl.n	8005d94 <TIM3_IRQHandler+0x84>
    if(LL_TIM_IsActiveFlag_CC1(PS_TIM_ADC) == 1)
    {
        ASSERT(daq.trig.buff_trig != NULL);
 8005d1a:	f243 032c 	movw	r3, #12332	; 0x302c
 8005d1e:	4c1f      	ldr	r4, [pc, #124]	; (8005d9c <TIM3_IRQHandler+0x8c>)
 8005d20:	58e3      	ldr	r3, [r4, r3]
 8005d22:	b91b      	cbnz	r3, 8005d2c <TIM3_IRQHandler+0x1c>
 8005d24:	2175      	movs	r1, #117	; 0x75
 8005d26:	481e      	ldr	r0, [pc, #120]	; (8005da0 <TIM3_IRQHandler+0x90>)
 8005d28:	f001 f934 	bl	8006f94 <assert2>
        ASSERT(daq.trig.dma_trig != 0);
 8005d2c:	f243 0330 	movw	r3, #12336	; 0x3030
 8005d30:	58e3      	ldr	r3, [r4, r3]
 8005d32:	b91b      	cbnz	r3, 8005d3c <TIM3_IRQHandler+0x2c>
 8005d34:	2176      	movs	r1, #118	; 0x76
 8005d36:	481a      	ldr	r0, [pc, #104]	; (8005da0 <TIM3_IRQHandler+0x90>)
 8005d38:	f001 f92c 	bl	8006f94 <assert2>

        int last_idx = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_trig);
 8005d3c:	f243 032c 	movw	r3, #12332	; 0x302c
 8005d40:	58e3      	ldr	r3, [r4, r3]
 8005d42:	88d9      	ldrh	r1, [r3, #6]
 8005d44:	f243 0330 	movw	r3, #12336	; 0x3030
 8005d48:	58e2      	ldr	r2, [r4, r3]
 8005d4a:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <TIM3_IRQHandler+0x94>)
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005d52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d56:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005d5a:	6858      	ldr	r0, [r3, #4]
 8005d5c:	b280      	uxth	r0, r0
 8005d5e:	1a08      	subs	r0, r1, r0
 8005d60:	f001 fa39 	bl	80071d6 <get_last_circ_idx>

        //if (last_idx % daq.trig.order != 0 && last_idx != 0)
        //    return;

        daq.trig.posttrig_size--;
 8005d64:	f243 0324 	movw	r3, #12324	; 0x3024
 8005d68:	58e5      	ldr	r5, [r4, r3]
 8005d6a:	3d01      	subs	r5, #1
 8005d6c:	50e5      	str	r5, [r4, r3]

        daq.trig.pos_last = last_idx;
 8005d6e:	f243 030c 	movw	r3, #12300	; 0x300c
 8005d72:	50e0      	str	r0, [r4, r3]

        //if (daq.trig.pos_diff < 0)
        //    daq.trig.pos_diff += daq.trig.buff_trig->len;

        //if (daq.trig.pos_diff >= daq.trig.posttrig_size)
        if (daq.trig.posttrig_size == 0)
 8005d74:	b955      	cbnz	r5, 8005d8c <TIM3_IRQHandler+0x7c>
        {
            daq_enable(&daq, 0);
 8005d76:	4629      	mov	r1, r5
 8005d78:	4808      	ldr	r0, [pc, #32]	; (8005d9c <TIM3_IRQHandler+0x8c>)
 8005d7a:	f7ff f81d 	bl	8004db8 <daq_enable>
            //LL_TIM_DisableCounter(PS_TIM_TRIG);
            //LL_TIM_DisableIT_CC1(PS_TIM_ADC);
            daq.trig.ready = 1;
 8005d7e:	f642 73fa 	movw	r3, #12282	; 0x2ffa
 8005d82:	2201      	movs	r2, #1
 8005d84:	54e2      	strb	r2, [r4, r3]
            daq.trig.is_post = 0;
 8005d86:	f642 73f8 	movw	r3, #12280	; 0x2ff8
 8005d8a:	54e5      	strb	r5, [r4, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005d8c:	f06f 0202 	mvn.w	r2, #2
 8005d90:	4b01      	ldr	r3, [pc, #4]	; (8005d98 <TIM3_IRQHandler+0x88>)
 8005d92:	611a      	str	r2, [r3, #16]
        }

        LL_TIM_ClearFlag_CC1(PS_TIM_ADC);
    }
}
 8005d94:	bd38      	pop	{r3, r4, r5, pc}
 8005d96:	bf00      	nop
 8005d98:	40000400 	.word	0x40000400
 8005d9c:	20000950 	.word	0x20000950
 8005da0:	0800ae51 	.word	0x0800ae51
 8005da4:	0800ae4a 	.word	0x0800ae4a

08005da8 <TIM1_UP_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005da8:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <TIM1_UP_IRQHandler+0x1c>)
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	07d2      	lsls	r2, r2, #31
 8005dae:	d508      	bpl.n	8005dc2 <TIM1_UP_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005db0:	f06f 0201 	mvn.w	r2, #1
 8005db4:	611a      	str	r2, [r3, #16]
void PS_TIM_CNTR_IRQh(void)
{
    if(LL_TIM_IsActiveFlag_UPDATE(PS_TIM_CNTR) == 1)
    {
        LL_TIM_ClearFlag_UPDATE(PS_TIM_CNTR);
        cntr.ovf++;
 8005db6:	4a04      	ldr	r2, [pc, #16]	; (8005dc8 <TIM1_UP_IRQHandler+0x20>)
 8005db8:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
    }
}
 8005dc2:	4770      	bx	lr
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	2000087c 	.word	0x2000087c

08005dcc <EXTI1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8005dcc:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <EXTI1_IRQHandler+0x14>)
 8005dce:	695a      	ldr	r2, [r3, #20]

void PS_LA_CH1_IRQh(void)
{
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI1) != RESET)
 8005dd0:	0792      	lsls	r2, r2, #30
 8005dd2:	d504      	bpl.n	8005dde <EXTI1_IRQHandler+0x12>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8005dd4:	2202      	movs	r2, #2
    {
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI1);
        daq_trig_trigger_la(&daq);
 8005dd6:	4803      	ldr	r0, [pc, #12]	; (8005de4 <EXTI1_IRQHandler+0x18>)
 8005dd8:	615a      	str	r2, [r3, #20]
 8005dda:	f7ff bc3f 	b.w	800565c <daq_trig_trigger_la>
    }
}
 8005dde:	4770      	bx	lr
 8005de0:	40010400 	.word	0x40010400
 8005de4:	20000950 	.word	0x20000950

08005de8 <EXTI2_IRQHandler>:
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <EXTI2_IRQHandler+0x14>)
 8005dea:	695a      	ldr	r2, [r3, #20]

void PS_LA_CH2_IRQh(void)
{
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI2) != RESET)
 8005dec:	0752      	lsls	r2, r2, #29
 8005dee:	d504      	bpl.n	8005dfa <EXTI2_IRQHandler+0x12>
  WRITE_REG(EXTI->PR, ExtiLine);
 8005df0:	2204      	movs	r2, #4
    {
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI2);
        daq_trig_trigger_la(&daq);
 8005df2:	4803      	ldr	r0, [pc, #12]	; (8005e00 <EXTI2_IRQHandler+0x18>)
 8005df4:	615a      	str	r2, [r3, #20]
 8005df6:	f7ff bc31 	b.w	800565c <daq_trig_trigger_la>
    }
}
 8005dfa:	4770      	bx	lr
 8005dfc:	40010400 	.word	0x40010400
 8005e00:	20000950 	.word	0x20000950

08005e04 <EXTI3_IRQHandler>:
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8005e04:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <EXTI3_IRQHandler+0x14>)
 8005e06:	695a      	ldr	r2, [r3, #20]

void PS_LA_CH3_IRQh(void)
{
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI3) != RESET)
 8005e08:	0712      	lsls	r2, r2, #28
 8005e0a:	d504      	bpl.n	8005e16 <EXTI3_IRQHandler+0x12>
  WRITE_REG(EXTI->PR, ExtiLine);
 8005e0c:	2208      	movs	r2, #8
    {
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI3);
        daq_trig_trigger_la(&daq);
 8005e0e:	4803      	ldr	r0, [pc, #12]	; (8005e1c <EXTI3_IRQHandler+0x18>)
 8005e10:	615a      	str	r2, [r3, #20]
 8005e12:	f7ff bc23 	b.w	800565c <daq_trig_trigger_la>
    }
}
 8005e16:	4770      	bx	lr
 8005e18:	40010400 	.word	0x40010400
 8005e1c:	20000950 	.word	0x20000950

08005e20 <EXTI4_IRQHandler>:
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8005e20:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <EXTI4_IRQHandler+0x14>)
 8005e22:	695a      	ldr	r2, [r3, #20]

void PS_LA_CH4_IRQh(void)
{
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI4) != RESET)
 8005e24:	06d2      	lsls	r2, r2, #27
 8005e26:	d504      	bpl.n	8005e32 <EXTI4_IRQHandler+0x12>
  WRITE_REG(EXTI->PR, ExtiLine);
 8005e28:	2210      	movs	r2, #16
    {
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI4);
        daq_trig_trigger_la(&daq);
 8005e2a:	4803      	ldr	r0, [pc, #12]	; (8005e38 <EXTI4_IRQHandler+0x18>)
 8005e2c:	615a      	str	r2, [r3, #20]
 8005e2e:	f7ff bc15 	b.w	800565c <daq_trig_trigger_la>
    }
}
 8005e32:	4770      	bx	lr
 8005e34:	40010400 	.word	0x40010400
 8005e38:	20000950 	.word	0x20000950

08005e3c <led_init>:
#include "main.h"


void led_init(led_data_t* self)
{
    self->blink_cntr = 0;
 8005e3c:	2300      	movs	r3, #0
    self->blink_len = 0;
 8005e3e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    self->blink_cntr = 0;
    self->enabled = 0;
 8005e42:	60c3      	str	r3, [r0, #12]
}
 8005e44:	4770      	bx	lr
	...

08005e48 <led_set>:

void led_set(led_data_t* self, uint8_t enable)
{
    self->enabled = enable;
 8005e48:	60c1      	str	r1, [r0, #12]
 8005e4a:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <led_set+0x1c>)
    if (!self->enabled)
 8005e4c:	b921      	cbnz	r1, 8005e58 <led_set+0x10>
        PS_LED_PORT->BSRR |= (1 << PS_LED_PIN);  // 1
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e54:	611a      	str	r2, [r3, #16]
 8005e56:	4770      	bx	lr
    else
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
 8005e58:	695a      	ldr	r2, [r3, #20]
 8005e5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e5e:	615a      	str	r2, [r3, #20]
}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40011000 	.word	0x40011000

08005e68 <led_toggle>:

void led_toggle(led_data_t* self)
{
    if (self->enabled)
 8005e68:	68c3      	ldr	r3, [r0, #12]
 8005e6a:	4a08      	ldr	r2, [pc, #32]	; (8005e8c <led_toggle+0x24>)
 8005e6c:	b143      	cbz	r3, 8005e80 <led_toggle+0x18>
        PS_LED_PORT->BSRR |= (1 << PS_LED_PIN);  // 1
 8005e6e:	6911      	ldr	r1, [r2, #16]
 8005e70:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8005e74:	6111      	str	r1, [r2, #16]
    else
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
    self->enabled = !self->enabled;
 8005e76:	fab3 f383 	clz	r3, r3
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	60c3      	str	r3, [r0, #12]
}
 8005e7e:	4770      	bx	lr
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
 8005e80:	6951      	ldr	r1, [r2, #20]
 8005e82:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8005e86:	6151      	str	r1, [r2, #20]
 8005e88:	e7f5      	b.n	8005e76 <led_toggle+0xe>
 8005e8a:	bf00      	nop
 8005e8c:	40011000 	.word	0x40011000

08005e90 <led_blink_set>:

void led_blink_set(led_data_t* self, int num, int len)
{
    self->blink_num = (num * 2) - 1;
 8005e90:	0049      	lsls	r1, r1, #1
 8005e92:	3901      	subs	r1, #1
    self->blink_len = len;
 8005e94:	e9c0 1200 	strd	r1, r2, [r0]
    self->blink_cntr = len;
 8005e98:	6082      	str	r2, [r0, #8]
    led_set(self, 1);
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	f7ff bfd4 	b.w	8005e48 <led_set>

08005ea0 <led_blink_do>:
}

void led_blink_do(led_data_t* self)
{
    if (self->blink_num > 0)
 8005ea0:	6802      	ldr	r2, [r0, #0]
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	dd0b      	ble.n	8005ebe <led_blink_do+0x1e>
    {
        if (self->blink_cntr > 0)
 8005ea6:	6881      	ldr	r1, [r0, #8]
 8005ea8:	2900      	cmp	r1, #0
 8005eaa:	dd02      	ble.n	8005eb2 <led_blink_do+0x12>
            self->blink_cntr--;
 8005eac:	3901      	subs	r1, #1
 8005eae:	6081      	str	r1, [r0, #8]
 8005eb0:	4770      	bx	lr
        else
        {
            self->blink_cntr = self->blink_len;
 8005eb2:	6841      	ldr	r1, [r0, #4]
            self->blink_num--;
 8005eb4:	3a01      	subs	r2, #1
            self->blink_cntr = self->blink_len;
 8005eb6:	6081      	str	r1, [r0, #8]
            self->blink_num--;
 8005eb8:	6002      	str	r2, [r0, #0]
            led_toggle(self);
 8005eba:	f7ff bfd5 	b.w	8005e68 <led_toggle>
        }
    }
}
 8005ebe:	4770      	bx	lr

08005ec0 <LL_ADC_REG_SetSequencerRanks>:
{
 8005ec0:	b530      	push	{r4, r5, lr}
 8005ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ec6:	fa93 f3a3 	rbit	r3, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8005eca:	fab3 f383 	clz	r3, r3
  MODIFY_REG(*preg,
 8005ece:	251f      	movs	r5, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8005ed0:	f401 7440 	and.w	r4, r1, #768	; 0x300
 8005ed4:	40dc      	lsrs	r4, r3
 8005ed6:	302c      	adds	r0, #44	; 0x2c
  MODIFY_REG(*preg,
 8005ed8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8005edc:	f001 011f 	and.w	r1, r1, #31
 8005ee0:	408d      	lsls	r5, r1
 8005ee2:	f002 021f 	and.w	r2, r2, #31
 8005ee6:	ea23 0305 	bic.w	r3, r3, r5
 8005eea:	408a      	lsls	r2, r1
 8005eec:	431a      	orrs	r2, r3
 8005eee:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
}
 8005ef2:	bd30      	pop	{r4, r5, pc}

08005ef4 <LL_ADC_SetChannelSamplingTime.constprop.1>:
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005efa:	fa93 f3a3 	rbit	r3, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8005efe:	fab3 f383 	clz	r3, r3
 8005f02:	f001 7500 	and.w	r5, r1, #33554432	; 0x2000000
 8005f06:	40dd      	lsrs	r5, r3
 8005f08:	300c      	adds	r0, #12
  MODIFY_REG(*preg,
 8005f0a:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
 8005f0e:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8005f12:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8005f16:	fa93 f4a3 	rbit	r4, r3
 8005f1a:	fab4 f484 	clz	r4, r4
 8005f1e:	fa93 f3a3 	rbit	r3, r3
 8005f22:	fab3 f383 	clz	r3, r3
 8005f26:	2607      	movs	r6, #7
 8005f28:	fa21 f404 	lsr.w	r4, r1, r4
 8005f2c:	40d9      	lsrs	r1, r3
 8005f2e:	2304      	movs	r3, #4
 8005f30:	fa06 f404 	lsl.w	r4, r6, r4
 8005f34:	ea22 0204 	bic.w	r2, r2, r4
 8005f38:	fa03 f101 	lsl.w	r1, r3, r1
 8005f3c:	4311      	orrs	r1, r2
 8005f3e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
}
 8005f42:	bd70      	pop	{r4, r5, r6, pc}

08005f44 <dma_set>:
#include "comm.h"
#include "main.h"


void dma_set(uint32_t src, DMA_TypeDef* dma, uint32_t dma_ch, uint32_t dst, uint32_t buff_size, uint32_t sz)
{
 8005f44:	b530      	push	{r4, r5, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8005f46:	4c0e      	ldr	r4, [pc, #56]	; (8005f80 <dma_set+0x3c>)
 8005f48:	4422      	add	r2, r4
 8005f4a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8005f4e:	588d      	ldr	r5, [r1, r2]
 8005f50:	188c      	adds	r4, r1, r2
 8005f52:	f025 0501 	bic.w	r5, r5, #1
 8005f56:	508d      	str	r5, [r1, r2]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8005f58:	60a0      	str	r0, [r4, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8005f5a:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8005f5c:	588b      	ldr	r3, [r1, r2]
 8005f5e:	9804      	ldr	r0, [sp, #16]
 8005f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f64:	4303      	orrs	r3, r0
 8005f66:	508b      	str	r3, [r1, r2]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	9803      	ldr	r0, [sp, #12]
 8005f6c:	0c1b      	lsrs	r3, r3, #16
 8005f6e:	041b      	lsls	r3, r3, #16
 8005f70:	4303      	orrs	r3, r0
 8005f72:	6063      	str	r3, [r4, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8005f74:	588b      	ldr	r3, [r1, r2]
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	508b      	str	r3, [r1, r2]
    //LL_DMA_EnableIT_HT(dma, dma_ch); // Enable half transfer interrupt.
    //LL_DMA_EnableIT_TE(dma, dma_ch); // Enable transfer error interrupt.

    // Enable
    LL_DMA_EnableChannel(dma, dma_ch);
}
 8005f7c:	bd30      	pop	{r4, r5, pc}
 8005f7e:	bf00      	nop
 8005f80:	0800ae7c 	.word	0x0800ae7c

08005f84 <adc_init_calib>:
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8005f84:	6883      	ldr	r3, [r0, #8]
 8005f86:	f043 0301 	orr.w	r3, r3, #1
 8005f8a:	6083      	str	r3, [r0, #8]
}

void adc_init_calib(ADC_TypeDef* adc)
{
    LL_ADC_Enable(adc);
    adc->CR2 |= ADC_CR2_TSVREFE;
 8005f8c:	6883      	ldr	r3, [r0, #8]
 8005f8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f92:	6083      	str	r3, [r0, #8]
  return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_DMA));
 8005f94:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8005f96:	6883      	ldr	r3, [r0, #8]
  return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_DMA));
 8005f98:	f402 7280 	and.w	r2, r2, #256	; 0x100
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8005f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa0:	6083      	str	r3, [r0, #8]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8005fa2:	6883      	ldr	r3, [r0, #8]
 8005fa4:	f043 0304 	orr.w	r3, r3, #4
 8005fa8:	6083      	str	r3, [r0, #8]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8005faa:	6883      	ldr	r3, [r0, #8]
    //LL_ADC_Disable(adc);
    const uint32_t dma_tx_mode = LL_ADC_REG_GetDMATransfer(adc);
    LL_ADC_REG_SetDMATransfer(adc, LL_ADC_REG_DMA_TRANSFER_NONE);

    LL_ADC_StartCalibration(adc);
    while (LL_ADC_IsCalibrationOnGoing(adc) != 0);
 8005fac:	075b      	lsls	r3, r3, #29
 8005fae:	d4fc      	bmi.n	8005faa <adc_init_calib+0x26>
 8005fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8

    for (int i = 0; i <  1000; ++i) asm("nop");
 8005fb4:	bf00      	nop
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	d1fc      	bne.n	8005fb4 <adc_init_calib+0x30>
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8005fba:	6883      	ldr	r3, [r0, #8]
 8005fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	6083      	str	r3, [r0, #8]

    LL_ADC_REG_SetDMATransfer(adc, dma_tx_mode);
    //LL_ADC_Enable(adc);
}
 8005fc4:	4770      	bx	lr
	...

08005fc8 <adc_init>:
    adc_init_calib(ADC1);
 8005fc8:	4801      	ldr	r0, [pc, #4]	; (8005fd0 <adc_init+0x8>)
 8005fca:	f7ff bfdb 	b.w	8005f84 <adc_init_calib>
 8005fce:	bf00      	nop
 8005fd0:	40012400 	.word	0x40012400

08005fd4 <adc_get_next_rank>:
    //LL_ADC_Enable(adc);
}

uint32_t adc_get_next_rank(uint32_t rank)
{
    if (rank == LL_ADC_REG_RANK_1)
 8005fd4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005fd8:	f240 2305 	movw	r3, #517	; 0x205
 8005fdc:	d00e      	beq.n	8005ffc <adc_get_next_rank+0x28>
        return LL_ADC_REG_RANK_2;
    if (rank == LL_ADC_REG_RANK_2)
 8005fde:	4298      	cmp	r0, r3
 8005fe0:	f240 230a 	movw	r3, #522	; 0x20a
 8005fe4:	d00a      	beq.n	8005ffc <adc_get_next_rank+0x28>
        return LL_ADC_REG_RANK_3;
    else if (rank == LL_ADC_REG_RANK_3)
 8005fe6:	4298      	cmp	r0, r3
 8005fe8:	f240 230f 	movw	r3, #527	; 0x20f
 8005fec:	d006      	beq.n	8005ffc <adc_get_next_rank+0x28>
        return LL_ADC_REG_RANK_4;
    else if (rank == LL_ADC_REG_RANK_4)
        return LL_ADC_REG_RANK_5;
    else
        return LL_ADC_REG_RANK_6;
 8005fee:	f240 2219 	movw	r2, #537	; 0x219
 8005ff2:	4298      	cmp	r0, r3
 8005ff4:	bf14      	ite	ne
 8005ff6:	4613      	movne	r3, r2
 8005ff8:	f44f 7305 	moveq.w	r3, #532	; 0x214
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	4770      	bx	lr

08006000 <adc_set_ch>:
{
 8006000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006004:	4690      	mov	r8, r2
 8006006:	461f      	mov	r7, r3
  MODIFY_REG(ADCx->CR2, ADC_CR2_EXTSEL, (TriggerSource & ADC_CR2_EXTSEL));
 8006008:	6883      	ldr	r3, [r0, #8]
 800600a:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800600e:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8006012:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006016:	6083      	str	r3, [r0, #8]
    int len = ch1 + ch2 + ch3 + ch4 + vrefint;
 8006018:	eb01 0308 	add.w	r3, r1, r8
{
 800601c:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    int len = ch1 + ch2 + ch3 + ch4 + vrefint;
 8006020:	443b      	add	r3, r7
 8006022:	4433      	add	r3, r6
 8006024:	4413      	add	r3, r2
    if (len == 2)
 8006026:	2b02      	cmp	r3, #2
{
 8006028:	4604      	mov	r4, r0
 800602a:	4689      	mov	r9, r1
    if (len == 2)
 800602c:	d055      	beq.n	80060da <adc_set_ch+0xda>
    if (len == 3)
 800602e:	2b03      	cmp	r3, #3
 8006030:	d056      	beq.n	80060e0 <adc_set_ch+0xe0>
    else if (len == 4)
 8006032:	2b04      	cmp	r3, #4
 8006034:	d057      	beq.n	80060e6 <adc_set_ch+0xe6>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS;
 8006036:	2b05      	cmp	r3, #5
 8006038:	bf14      	ite	ne
 800603a:	2100      	movne	r1, #0
 800603c:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006040:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006042:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006046:	430b      	orrs	r3, r1
 8006048:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (vrefint)
 800604a:	2a00      	cmp	r2, #0
 800604c:	d04e      	beq.n	80060ec <adc_set_ch+0xec>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, LL_ADC_CHANNEL_VREFINT);
 800604e:	4a2a      	ldr	r2, [pc, #168]	; (80060f8 <adc_set_ch+0xf8>)
 8006050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006054:	4620      	mov	r0, r4
 8006056:	f7ff ff33 	bl	8005ec0 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, LL_ADC_CHANNEL_VREFINT, PS_ADC_SMPL_TIME);
 800605a:	4927      	ldr	r1, [pc, #156]	; (80060f8 <adc_set_ch+0xf8>)
 800605c:	4620      	mov	r0, r4
 800605e:	f7ff ff49 	bl	8005ef4 <LL_ADC_SetChannelSamplingTime.constprop.1>
        next_rank = adc_get_next_rank(next_rank);
 8006062:	f240 2505 	movw	r5, #517	; 0x205
    if (ch1) {
 8006066:	f1b9 0f00 	cmp.w	r9, #0
 800606a:	d00c      	beq.n	8006086 <adc_set_ch+0x86>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH1);
 800606c:	4a23      	ldr	r2, [pc, #140]	; (80060fc <adc_set_ch+0xfc>)
 800606e:	4629      	mov	r1, r5
 8006070:	4620      	mov	r0, r4
 8006072:	f7ff ff25 	bl	8005ec0 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH1, PS_ADC_SMPL_TIME);
 8006076:	4921      	ldr	r1, [pc, #132]	; (80060fc <adc_set_ch+0xfc>)
 8006078:	4620      	mov	r0, r4
 800607a:	f7ff ff3b 	bl	8005ef4 <LL_ADC_SetChannelSamplingTime.constprop.1>
        next_rank = adc_get_next_rank(next_rank);
 800607e:	4628      	mov	r0, r5
 8006080:	f7ff ffa8 	bl	8005fd4 <adc_get_next_rank>
 8006084:	4605      	mov	r5, r0
    if (ch2) {
 8006086:	f1b8 0f00 	cmp.w	r8, #0
 800608a:	d00c      	beq.n	80060a6 <adc_set_ch+0xa6>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH2);
 800608c:	4a1c      	ldr	r2, [pc, #112]	; (8006100 <adc_set_ch+0x100>)
 800608e:	4629      	mov	r1, r5
 8006090:	4620      	mov	r0, r4
 8006092:	f7ff ff15 	bl	8005ec0 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH2, PS_ADC_SMPL_TIME);
 8006096:	491a      	ldr	r1, [pc, #104]	; (8006100 <adc_set_ch+0x100>)
 8006098:	4620      	mov	r0, r4
 800609a:	f7ff ff2b 	bl	8005ef4 <LL_ADC_SetChannelSamplingTime.constprop.1>
        next_rank = adc_get_next_rank(next_rank);
 800609e:	4628      	mov	r0, r5
 80060a0:	f7ff ff98 	bl	8005fd4 <adc_get_next_rank>
 80060a4:	4605      	mov	r5, r0
    if (ch3) {
 80060a6:	b167      	cbz	r7, 80060c2 <adc_set_ch+0xc2>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH3);
 80060a8:	4a16      	ldr	r2, [pc, #88]	; (8006104 <adc_set_ch+0x104>)
 80060aa:	4629      	mov	r1, r5
 80060ac:	4620      	mov	r0, r4
 80060ae:	f7ff ff07 	bl	8005ec0 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH3, PS_ADC_SMPL_TIME);
 80060b2:	4914      	ldr	r1, [pc, #80]	; (8006104 <adc_set_ch+0x104>)
 80060b4:	4620      	mov	r0, r4
 80060b6:	f7ff ff1d 	bl	8005ef4 <LL_ADC_SetChannelSamplingTime.constprop.1>
        next_rank = adc_get_next_rank(next_rank);
 80060ba:	4628      	mov	r0, r5
 80060bc:	f7ff ff8a 	bl	8005fd4 <adc_get_next_rank>
 80060c0:	4605      	mov	r5, r0
    if (ch4) {
 80060c2:	b1b6      	cbz	r6, 80060f2 <adc_set_ch+0xf2>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH4);
 80060c4:	4629      	mov	r1, r5
 80060c6:	4620      	mov	r0, r4
 80060c8:	4a0f      	ldr	r2, [pc, #60]	; (8006108 <adc_set_ch+0x108>)
 80060ca:	f7ff fef9 	bl	8005ec0 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH4, PS_ADC_SMPL_TIME);
 80060ce:	4620      	mov	r0, r4
}
 80060d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH4, PS_ADC_SMPL_TIME);
 80060d4:	490c      	ldr	r1, [pc, #48]	; (8006108 <adc_set_ch+0x108>)
 80060d6:	f7ff bf0d 	b.w	8005ef4 <LL_ADC_SetChannelSamplingTime.constprop.1>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80060da:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80060de:	e7af      	b.n	8006040 <adc_set_ch+0x40>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 80060e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060e4:	e7ac      	b.n	8006040 <adc_set_ch+0x40>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
 80060e6:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
 80060ea:	e7a9      	b.n	8006040 <adc_set_ch+0x40>
    uint32_t next_rank = LL_ADC_REG_RANK_1;
 80060ec:	f44f 7500 	mov.w	r5, #512	; 0x200
 80060f0:	e7b9      	b.n	8006066 <adc_set_ch+0x66>
}
 80060f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060f6:	bf00      	nop
 80060f8:	81500011 	.word	0x81500011
 80060fc:	02300001 	.word	0x02300001
 8006100:	02600002 	.word	0x02600002
 8006104:	02900003 	.word	0x02900003
 8006108:	02c00004 	.word	0x02c00004

0800610c <adc_set_res>:
    //LL_ADC_Disable(adc);
#ifdef PS_ADC_BIT8
    LL_ADC_SetResolution(adc, resolution);
#endif
    //LL_ADC_Enable(adc);
}
 800610c:	4770      	bx	lr
	...

08006110 <PS_Reset>:


/************************* [IEEE 488] *************************/

scpi_result_t PS_Reset(scpi_t * context)
{
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4605      	mov	r5, r0
    daq_settings_init(&daq);
 8006114:	4c08      	ldr	r4, [pc, #32]	; (8006138 <PS_Reset+0x28>)
 8006116:	4620      	mov	r0, r4
 8006118:	f7fe fd84 	bl	8004c24 <daq_settings_init>
    daq_mode_set(&daq, VM);
 800611c:	4620      	mov	r0, r4
 800611e:	2101      	movs	r1, #1
 8006120:	f7ff f880 	bl	8005224 <daq_mode_set>
    daq_enable(&daq, 1);
 8006124:	4620      	mov	r0, r4
 8006126:	2101      	movs	r1, #1
 8006128:	f7fe fe46 	bl	8004db8 <daq_enable>

    SCPI_ResultText(context, SCPI_OK);
 800612c:	4903      	ldr	r1, [pc, #12]	; (800613c <PS_Reset+0x2c>)
 800612e:	4628      	mov	r0, r5
 8006130:	f002 f836 	bl	80081a0 <SCPI_ResultText>
    return SCPI_RES_OK;
}
 8006134:	2001      	movs	r0, #1
 8006136:	bd38      	pop	{r3, r4, r5, pc}
 8006138:	20000950 	.word	0x20000950
 800613c:	0800aecc 	.word	0x0800aecc

08006140 <PS_System_Mode>:

/************************* [System Actions] *************************/

scpi_result_t PS_System_Mode(scpi_t * context)
{
 8006140:	b537      	push	{r0, r1, r2, r4, r5, lr}
    const char* p1;
    size_t p1l;

    if (!SCPI_ParamCharacters(context, &p1, &p1l, TRUE))
 8006142:	2301      	movs	r3, #1
 8006144:	aa01      	add	r2, sp, #4
 8006146:	4669      	mov	r1, sp
{
 8006148:	4605      	mov	r5, r0
    if (!SCPI_ParamCharacters(context, &p1, &p1l, TRUE))
 800614a:	f002 f9ef 	bl	800852c <SCPI_ParamCharacters>
 800614e:	b318      	cbz	r0, 8006198 <PS_System_Mode+0x58>
        return SCPI_RES_ERR;

    if (strcmp(p1, "SCOPE\r\n") == 0)
 8006150:	9c00      	ldr	r4, [sp, #0]
 8006152:	4913      	ldr	r1, [pc, #76]	; (80061a0 <PS_System_Mode+0x60>)
 8006154:	4620      	mov	r0, r4
 8006156:	f7f9 fffb 	bl	8000150 <strcmp>
 800615a:	4601      	mov	r1, r0
 800615c:	b948      	cbnz	r0, 8006172 <PS_System_Mode+0x32>
        daq_mode_set(&daq, SCOPE);
    else if (strcmp(p1, "VM\r\n") == 0)
        daq_mode_set(&daq, VM);
    else if (strcmp(p1, "LA\r\n") == 0)
        daq_mode_set(&daq, LA);
 800615e:	4811      	ldr	r0, [pc, #68]	; (80061a4 <PS_System_Mode+0x64>)
 8006160:	f7ff f860 	bl	8005224 <daq_mode_set>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
        return SCPI_RES_ERR;
    }

    SCPI_ResultText(context, SCPI_OK);
 8006164:	4910      	ldr	r1, [pc, #64]	; (80061a8 <PS_System_Mode+0x68>)
 8006166:	4628      	mov	r0, r5
 8006168:	f002 f81a 	bl	80081a0 <SCPI_ResultText>
    return SCPI_RES_OK;
 800616c:	2001      	movs	r0, #1
}
 800616e:	b003      	add	sp, #12
 8006170:	bd30      	pop	{r4, r5, pc}
    else if (strcmp(p1, "VM\r\n") == 0)
 8006172:	490e      	ldr	r1, [pc, #56]	; (80061ac <PS_System_Mode+0x6c>)
 8006174:	4620      	mov	r0, r4
 8006176:	f7f9 ffeb 	bl	8000150 <strcmp>
 800617a:	b908      	cbnz	r0, 8006180 <PS_System_Mode+0x40>
        daq_mode_set(&daq, VM);
 800617c:	2101      	movs	r1, #1
 800617e:	e7ee      	b.n	800615e <PS_System_Mode+0x1e>
    else if (strcmp(p1, "LA\r\n") == 0)
 8006180:	490b      	ldr	r1, [pc, #44]	; (80061b0 <PS_System_Mode+0x70>)
 8006182:	4620      	mov	r0, r4
 8006184:	f7f9 ffe4 	bl	8000150 <strcmp>
 8006188:	b908      	cbnz	r0, 800618e <PS_System_Mode+0x4e>
        daq_mode_set(&daq, LA);
 800618a:	2102      	movs	r1, #2
 800618c:	e7e7      	b.n	800615e <PS_System_Mode+0x1e>
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800618e:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8006192:	4628      	mov	r0, r5
 8006194:	f001 f9aa 	bl	80074ec <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006198:	f04f 30ff 	mov.w	r0, #4294967295
 800619c:	e7e7      	b.n	800616e <PS_System_Mode+0x2e>
 800619e:	bf00      	nop
 80061a0:	0800af25 	.word	0x0800af25
 80061a4:	20000950 	.word	0x20000950
 80061a8:	0800aecc 	.word	0x0800aecc
 80061ac:	0800af2d 	.word	0x0800af2d
 80061b0:	0800af32 	.word	0x0800af32

080061b4 <PS_System_ModeQ>:

scpi_result_t PS_System_ModeQ(scpi_t * context)
{
 80061b4:	b508      	push	{r3, lr}
    if (daq.mode == SCOPE)
 80061b6:	f642 73b6 	movw	r3, #12214	; 0x2fb6
 80061ba:	4a06      	ldr	r2, [pc, #24]	; (80061d4 <PS_System_ModeQ+0x20>)
 80061bc:	5cd3      	ldrb	r3, [r2, r3]
 80061be:	b923      	cbnz	r3, 80061ca <PS_System_ModeQ+0x16>
        SCPI_ResultText(context, "SCOPE");
 80061c0:	4905      	ldr	r1, [pc, #20]	; (80061d8 <PS_System_ModeQ+0x24>)
    else if (daq.mode == VM)
        SCPI_ResultText(context, "VM");
    else
        SCPI_ResultText(context, "LA");
 80061c2:	f001 ffed 	bl	80081a0 <SCPI_ResultText>

    return SCPI_RES_OK;
}
 80061c6:	2001      	movs	r0, #1
 80061c8:	bd08      	pop	{r3, pc}
    else if (daq.mode == VM)
 80061ca:	2b01      	cmp	r3, #1
        SCPI_ResultText(context, "VM");
 80061cc:	bf0c      	ite	eq
 80061ce:	4903      	ldreq	r1, [pc, #12]	; (80061dc <PS_System_ModeQ+0x28>)
        SCPI_ResultText(context, "LA");
 80061d0:	4903      	ldrne	r1, [pc, #12]	; (80061e0 <PS_System_ModeQ+0x2c>)
 80061d2:	e7f6      	b.n	80061c2 <PS_System_ModeQ+0xe>
 80061d4:	20000950 	.word	0x20000950
 80061d8:	0800af37 	.word	0x0800af37
 80061dc:	0800af3d 	.word	0x0800af3d
 80061e0:	0800af40 	.word	0x0800af40

080061e4 <PS_System_LimitsQ>:

scpi_result_t PS_System_LimitsQ(scpi_t * context)
{
 80061e4:	b530      	push	{r4, r5, lr}
 80061e6:	b0a5      	sub	sp, #148	; 0x94
 80061e8:	4605      	mov	r5, r0
#elif defined(PS_ADC_MODE_ADC1234)
    adcs = 4;
#endif

    char smplt_s[15];
    sprint_fast(smplt_s, "%s", PS_ADC_1CH_SMPL_TM, 8);
 80061ea:	2308      	movs	r3, #8
 80061ec:	a807      	add	r0, sp, #28
 80061ee:	4a0e      	ldr	r2, [pc, #56]	; (8006228 <PS_System_LimitsQ+0x44>)
 80061f0:	490e      	ldr	r1, [pc, #56]	; (800622c <PS_System_LimitsQ+0x48>)
 80061f2:	f001 f839 	bl	8007268 <sprint_fast>

    int pwm_max_f = PS_TIM_PWM1_FREQ / 2;

    int len = sprintf(buff, "%s,%d,%d,%d,%d,%d,%d", smplt_s, PS_DAQ_MAX_MEM, PS_LA_MAX_FS, pwm_max_f, adcs, bit8, dac);
 80061f6:	2300      	movs	r3, #0
 80061f8:	2401      	movs	r4, #1
 80061fa:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80061fe:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <PS_System_LimitsQ+0x4c>)
 8006200:	aa07      	add	r2, sp, #28
 8006202:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006206:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <PS_System_LimitsQ+0x50>)
 8006208:	490b      	ldr	r1, [pc, #44]	; (8006238 <PS_System_LimitsQ+0x54>)
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	a80b      	add	r0, sp, #44	; 0x2c
 800620e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8006212:	f002 fe29 	bl	8008e68 <siprintf>

    SCPI_ResultCharacters(context, buff, len);
 8006216:	a90b      	add	r1, sp, #44	; 0x2c
 8006218:	4602      	mov	r2, r0
 800621a:	4628      	mov	r0, r5
 800621c:	f001 ffaa 	bl	8008174 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
}
 8006220:	4620      	mov	r0, r4
 8006222:	b025      	add	sp, #148	; 0x94
 8006224:	bd30      	pop	{r4, r5, pc}
 8006226:	bf00      	nop
 8006228:	3696feb5 	.word	0x3696feb5
 800622c:	0800af4f 	.word	0x0800af4f
 8006230:	0112a880 	.word	0x0112a880
 8006234:	000f4240 	.word	0x000f4240
 8006238:	0800af10 	.word	0x0800af10

0800623c <PS_VM_ReadQ>:

scpi_result_t PS_VM_ReadQ(scpi_t * context)
{
    //char f1[10];
    //sprintFast(f1, " %s M", , 0);
    if (daq.mode == VM)
 800623c:	f642 73b6 	movw	r3, #12214	; 0x2fb6
{
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (daq.mode == VM)
 8006244:	4c5e      	ldr	r4, [pc, #376]	; (80063c0 <PS_VM_ReadQ+0x184>)
{
 8006246:	b0b7      	sub	sp, #220	; 0xdc
    if (daq.mode == VM)
 8006248:	5ce5      	ldrb	r5, [r4, r3]
{
 800624a:	4680      	mov	r8, r0
    if (daq.mode == VM)
 800624c:	2d01      	cmp	r5, #1
 800624e:	f040 80b5 	bne.w	80063bc <PS_VM_ReadQ+0x180>
        //int vcc_mv = (4095 * 1200) / raw_vref;

        //int ch3 = (3300 * raw_cal * raw_ch3) / (raw_vref * 4095);
        //int ch4 = (3300 * raw_cal * raw_ch4) / (raw_vref * 4095);

        daq_enable(&daq, 0);
 8006252:	2100      	movs	r1, #0
 8006254:	4620      	mov	r0, r4
 8006256:	f7fe fdaf 	bl	8004db8 <daq_enable>

        uint32_t p1 = 0;
 800625a:	2200      	movs	r2, #0
 800625c:	a936      	add	r1, sp, #216	; 0xd8
 800625e:	f841 2db8 	str.w	r2, [r1, #-184]!
        SCPI_ParamUInt32(context, &p1, FALSE);
 8006262:	4640      	mov	r0, r8
 8006264:	f002 f95f 	bl	8008526 <SCPI_ParamUInt32>

        float vcc_raw = 0;
 8006268:	2300      	movs	r3, #0
        float ch2_raw = 0;
        float ch3_raw = 0;
        float ch4_raw = 0;

        int avg_num = 1;
        if (p1 > 0)
 800626a:	9e08      	ldr	r6, [sp, #32]
        float vcc_raw = 0;
 800626c:	9309      	str	r3, [sp, #36]	; 0x24
        float ch1_raw = 0;
 800626e:	930a      	str	r3, [sp, #40]	; 0x28
        float ch2_raw = 0;
 8006270:	930b      	str	r3, [sp, #44]	; 0x2c
        float ch3_raw = 0;
 8006272:	930c      	str	r3, [sp, #48]	; 0x30
        float ch4_raw = 0;
 8006274:	930d      	str	r3, [sp, #52]	; 0x34
            avg_num = (int)p1;

        if (avg_num > daq.set.mem)
 8006276:	f642 738c 	movw	r3, #12172	; 0x2f8c
        if (p1 > 0)
 800627a:	2e00      	cmp	r6, #0
 800627c:	bf08      	it	eq
 800627e:	2601      	moveq	r6, #1
        if (avg_num > daq.set.mem)
 8006280:	5ae3      	ldrh	r3, [r4, r3]
 8006282:	42b3      	cmp	r3, r6
 8006284:	da07      	bge.n	8006296 <PS_VM_ReadQ+0x5a>
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006286:	f06f 01df 	mvn.w	r1, #223	; 0xdf
        float ch4 = vcc * ch4_raw / daq.adc_max_val;

        daq.vcc_mv = vcc * 1000;
        if (daq.vcc_mv < PS_MIN_OP_VCC)
        {
            SCPI_ErrorPush(context, SCPI_ERROR_SAMPLING_FAILED);
 800628a:	4640      	mov	r0, r8
        SCPI_ResultCharacters(context, buff, len);
        return SCPI_RES_OK;
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800628c:	f001 f92e 	bl	80074ec <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	e08f      	b.n	80063b6 <PS_VM_ReadQ+0x17a>
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8006296:	4b4b      	ldr	r3, [pc, #300]	; (80063c4 <PS_VM_ReadQ+0x188>)
        int last1 = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_CH_ADC1);
 8006298:	88e1      	ldrh	r1, [r4, #6]
 800629a:	6858      	ldr	r0, [r3, #4]
 800629c:	b280      	uxth	r0, r0
 800629e:	1a08      	subs	r0, r1, r0
 80062a0:	f000 ff99 	bl	80071d6 <get_last_circ_idx>
        get_avg_from_circ(last1, 5, avg_num, daq.buff1.data, daq.set.bits, &vcc_raw, &ch1_raw, &ch2_raw, &ch3_raw, &ch4_raw);
 80062a4:	ab0d      	add	r3, sp, #52	; 0x34
 80062a6:	9305      	str	r3, [sp, #20]
 80062a8:	ab0c      	add	r3, sp, #48	; 0x30
 80062aa:	9304      	str	r3, [sp, #16]
 80062ac:	ab0b      	add	r3, sp, #44	; 0x2c
 80062ae:	9303      	str	r3, [sp, #12]
 80062b0:	ab0a      	add	r3, sp, #40	; 0x28
 80062b2:	9302      	str	r3, [sp, #8]
 80062b4:	ab09      	add	r3, sp, #36	; 0x24
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	f642 738e 	movw	r3, #12174	; 0x2f8e
 80062bc:	5ce3      	ldrb	r3, [r4, r3]
 80062be:	4632      	mov	r2, r6
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	2105      	movs	r1, #5
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	f000 fe66 	bl	8006f96 <get_avg_from_circ>
        float vcc = daq.adc_max_val * PS_ADC_VREF_CAL / vcc_raw / 1000;
 80062ca:	f642 73b0 	movw	r3, #12208	; 0x2fb0
 80062ce:	58e6      	ldr	r6, [r4, r3]
 80062d0:	493d      	ldr	r1, [pc, #244]	; (80063c8 <PS_VM_ReadQ+0x18c>)
 80062d2:	4630      	mov	r0, r6
 80062d4:	f7fa fd40 	bl	8000d58 <__aeabi_fmul>
 80062d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062da:	f7fa fdf1 	bl	8000ec0 <__aeabi_fdiv>
 80062de:	493b      	ldr	r1, [pc, #236]	; (80063cc <PS_VM_ReadQ+0x190>)
 80062e0:	f7fa fdee 	bl	8000ec0 <__aeabi_fdiv>
        float ch3 = vcc * ch3_raw / daq.adc_max_val;
 80062e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        daq.vcc_mv = vcc * 1000;
 80062e6:	4939      	ldr	r1, [pc, #228]	; (80063cc <PS_VM_ReadQ+0x190>)
        float ch3 = vcc * ch3_raw / daq.adc_max_val;
 80062e8:	9306      	str	r3, [sp, #24]
        float ch4 = vcc * ch4_raw / daq.adc_max_val;
 80062ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        float vcc = daq.adc_max_val * PS_ADC_VREF_CAL / vcc_raw / 1000;
 80062ec:	4607      	mov	r7, r0
        float ch4 = vcc * ch4_raw / daq.adc_max_val;
 80062ee:	9307      	str	r3, [sp, #28]
        daq.vcc_mv = vcc * 1000;
 80062f0:	f7fa fd32 	bl	8000d58 <__aeabi_fmul>
 80062f4:	f642 73ac 	movw	r3, #12204	; 0x2fac
        if (daq.vcc_mv < PS_MIN_OP_VCC)
 80062f8:	4935      	ldr	r1, [pc, #212]	; (80063d0 <PS_VM_ReadQ+0x194>)
        daq.vcc_mv = vcc * 1000;
 80062fa:	50e0      	str	r0, [r4, r3]
        float ch1 = vcc * ch1_raw / daq.adc_max_val;
 80062fc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
        float ch2 = vcc * ch2_raw / daq.adc_max_val;
 8006300:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
        if (daq.vcc_mv < PS_MIN_OP_VCC)
 8006304:	f7fa fec6 	bl	8001094 <__aeabi_fcmplt>
 8006308:	b108      	cbz	r0, 800630e <PS_VM_ReadQ+0xd2>
            SCPI_ErrorPush(context, SCPI_ERROR_SAMPLING_FAILED);
 800630a:	2102      	movs	r1, #2
 800630c:	e7bd      	b.n	800628a <PS_VM_ReadQ+0x4e>
        sprint_fast(vcc_s, "%s", vcc, 4);
 800630e:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8006312:	2304      	movs	r3, #4
 8006314:	463a      	mov	r2, r7
 8006316:	492f      	ldr	r1, [pc, #188]	; (80063d4 <PS_VM_ReadQ+0x198>)
 8006318:	4648      	mov	r0, r9
 800631a:	f000 ffa5 	bl	8007268 <sprint_fast>
        float ch1 = vcc * ch1_raw / daq.adc_max_val;
 800631e:	4639      	mov	r1, r7
 8006320:	4658      	mov	r0, fp
 8006322:	f7fa fd19 	bl	8000d58 <__aeabi_fmul>
 8006326:	4631      	mov	r1, r6
 8006328:	f7fa fdca 	bl	8000ec0 <__aeabi_fdiv>
        sprint_fast(ch1_s, "%s", ch1, 4);
 800632c:	2304      	movs	r3, #4
 800632e:	4602      	mov	r2, r0
 8006330:	4928      	ldr	r1, [pc, #160]	; (80063d4 <PS_VM_ReadQ+0x198>)
 8006332:	a811      	add	r0, sp, #68	; 0x44
 8006334:	f000 ff98 	bl	8007268 <sprint_fast>
        float ch2 = vcc * ch2_raw / daq.adc_max_val;
 8006338:	4639      	mov	r1, r7
 800633a:	4650      	mov	r0, sl
 800633c:	f7fa fd0c 	bl	8000d58 <__aeabi_fmul>
 8006340:	4631      	mov	r1, r6
 8006342:	f7fa fdbd 	bl	8000ec0 <__aeabi_fdiv>
        sprint_fast(ch2_s, "%s", ch2, 4);
 8006346:	2304      	movs	r3, #4
 8006348:	4602      	mov	r2, r0
 800634a:	4922      	ldr	r1, [pc, #136]	; (80063d4 <PS_VM_ReadQ+0x198>)
 800634c:	a814      	add	r0, sp, #80	; 0x50
 800634e:	f000 ff8b 	bl	8007268 <sprint_fast>
        float ch3 = vcc * ch3_raw / daq.adc_max_val;
 8006352:	4639      	mov	r1, r7
 8006354:	9806      	ldr	r0, [sp, #24]
 8006356:	f7fa fcff 	bl	8000d58 <__aeabi_fmul>
 800635a:	4631      	mov	r1, r6
 800635c:	f7fa fdb0 	bl	8000ec0 <__aeabi_fdiv>
        sprint_fast(ch3_s, "%s", ch3, 4);
 8006360:	f10d 0a5c 	add.w	sl, sp, #92	; 0x5c
 8006364:	4602      	mov	r2, r0
 8006366:	2304      	movs	r3, #4
 8006368:	491a      	ldr	r1, [pc, #104]	; (80063d4 <PS_VM_ReadQ+0x198>)
 800636a:	4650      	mov	r0, sl
 800636c:	f000 ff7c 	bl	8007268 <sprint_fast>
        float ch4 = vcc * ch4_raw / daq.adc_max_val;
 8006370:	4639      	mov	r1, r7
 8006372:	9807      	ldr	r0, [sp, #28]
 8006374:	f7fa fcf0 	bl	8000d58 <__aeabi_fmul>
 8006378:	4631      	mov	r1, r6
 800637a:	f7fa fda1 	bl	8000ec0 <__aeabi_fdiv>
        sprint_fast(ch4_s, "%s", ch4, 4);
 800637e:	ae1a      	add	r6, sp, #104	; 0x68
 8006380:	4602      	mov	r2, r0
 8006382:	2304      	movs	r3, #4
 8006384:	4630      	mov	r0, r6
 8006386:	4913      	ldr	r1, [pc, #76]	; (80063d4 <PS_VM_ReadQ+0x198>)
 8006388:	f000 ff6e 	bl	8007268 <sprint_fast>
        int len = sprintf(buff, "%s,%s,%s,%s,%s", ch1_s, ch2_s, ch3_s, ch4_s, vcc_s);
 800638c:	ab14      	add	r3, sp, #80	; 0x50
 800638e:	aa11      	add	r2, sp, #68	; 0x44
 8006390:	e9cd 6901 	strd	r6, r9, [sp, #4]
 8006394:	4910      	ldr	r1, [pc, #64]	; (80063d8 <PS_VM_ReadQ+0x19c>)
 8006396:	f8cd a000 	str.w	sl, [sp]
 800639a:	a81d      	add	r0, sp, #116	; 0x74
 800639c:	f002 fd64 	bl	8008e68 <siprintf>
 80063a0:	4606      	mov	r6, r0
        daq_enable(&daq, 1);
 80063a2:	4629      	mov	r1, r5
 80063a4:	4620      	mov	r0, r4
 80063a6:	f7fe fd07 	bl	8004db8 <daq_enable>
        SCPI_ResultCharacters(context, buff, len);
 80063aa:	4632      	mov	r2, r6
 80063ac:	a91d      	add	r1, sp, #116	; 0x74
 80063ae:	4640      	mov	r0, r8
 80063b0:	f001 fee0 	bl	8008174 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 80063b4:	4628      	mov	r0, r5
    }
}
 80063b6:	b037      	add	sp, #220	; 0xdc
 80063b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 80063bc:	2101      	movs	r1, #1
 80063be:	e765      	b.n	800628c <PS_VM_ReadQ+0x50>
 80063c0:	20000950 	.word	0x20000950
 80063c4:	40020008 	.word	0x40020008
 80063c8:	44960000 	.word	0x44960000
 80063cc:	447a0000 	.word	0x447a0000
 80063d0:	451c4000 	.word	0x451c4000
 80063d4:	0800af4f 	.word	0x0800af4f
 80063d8:	0800af43 	.word	0x0800af43

080063dc <PS_SCOPE_ReadQ>:

/************************* [SCOPE Actions] *************************/

scpi_result_t PS_SCOPE_ReadQ(scpi_t * context)
{
    if (daq.mode == SCOPE)
 80063dc:	f642 72b6 	movw	r2, #12214	; 0x2fb6
{
 80063e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (daq.mode == SCOPE)
 80063e4:	4b7b      	ldr	r3, [pc, #492]	; (80065d4 <PS_SCOPE_ReadQ+0x1f8>)
{
 80063e6:	b08a      	sub	sp, #40	; 0x28
    if (daq.mode == SCOPE)
 80063e8:	5c99      	ldrb	r1, [r3, r2]
{
 80063ea:	4606      	mov	r6, r0
 80063ec:	461c      	mov	r4, r3
    if (daq.mode == SCOPE)
 80063ee:	2900      	cmp	r1, #0
 80063f0:	f040 80ee 	bne.w	80065d0 <PS_SCOPE_ReadQ+0x1f4>
    {
        if (daq.trig.ready == 0)
 80063f4:	f642 72fa 	movw	r2, #12282	; 0x2ffa
 80063f8:	5c9b      	ldrb	r3, [r3, r2]
 80063fa:	b933      	cbnz	r3, 800640a <PS_SCOPE_ReadQ+0x2e>
        {
            SCPI_ResultText(context, PS_RESP_NRDY);
 80063fc:	4976      	ldr	r1, [pc, #472]	; (80065d8 <PS_SCOPE_ReadQ+0x1fc>)
        }

        //ASSERT(added == daq.buff_out.len);
        if (added != daq.buff_out.len)
        {
            SCPI_ResultText(context, "ERROR: invalid buffer size"); // TODO DEBUG
 80063fe:	f001 fecf 	bl	80081a0 <SCPI_ResultText>
            return SCPI_RES_OK;
        }

        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
        return SCPI_RES_OK;
 8006402:	2001      	movs	r0, #1
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }
}
 8006404:	b00a      	add	sp, #40	; 0x28
 8006406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (daq.trig.set.mode == DISABLED)
 800640a:	f642 73bc 	movw	r3, #12220	; 0x2fbc
 800640e:	5ce3      	ldrb	r3, [r4, r3]
 8006410:	2b03      	cmp	r3, #3
 8006412:	d10c      	bne.n	800642e <PS_SCOPE_ReadQ+0x52>
            daq_enable(&daq, 0);
 8006414:	4620      	mov	r0, r4
 8006416:	f7fe fccf 	bl	8004db8 <daq_enable>
 800641a:	4b70      	ldr	r3, [pc, #448]	; (80065dc <PS_SCOPE_ReadQ+0x200>)
            daq.trig.pos_frst = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_CH_ADC1);
 800641c:	88e1      	ldrh	r1, [r4, #6]
 800641e:	6858      	ldr	r0, [r3, #4]
 8006420:	b280      	uxth	r0, r0
 8006422:	1a08      	subs	r0, r1, r0
 8006424:	f000 fed7 	bl	80071d6 <get_last_circ_idx>
 8006428:	f243 0304 	movw	r3, #12292	; 0x3004
 800642c:	50e0      	str	r0, [r4, r3]
        if (daq.set.bits == B8)
 800642e:	f642 738e 	movw	r3, #12174	; 0x2f8e
        daq.vcc = get_vcc_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, daq.buff1.chans,
 8006432:	f243 0a04 	movw	sl, #12292	; 0x3004
        if (daq.set.bits == B8)
 8006436:	5ce1      	ldrb	r1, [r4, r3]
        daq.vcc = get_vcc_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, daq.buff1.chans,
 8006438:	6820      	ldr	r0, [r4, #0]
        int buff1_mem = daq.buff1.len - daq.buff1.reserve;
 800643a:	88e2      	ldrh	r2, [r4, #6]
        daq.vcc = get_vcc_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, daq.buff1.chans,
 800643c:	88a3      	ldrh	r3, [r4, #4]
        int buff1_mem = daq.buff1.len - daq.buff1.reserve;
 800643e:	f8b4 8008 	ldrh.w	r8, [r4, #8]
        daq.vcc = get_vcc_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, daq.buff1.chans,
 8006442:	e9cd 1000 	strd	r1, r0, [sp]
        int buff1_mem = daq.buff1.len - daq.buff1.reserve;
 8006446:	eba2 0808 	sub.w	r8, r2, r8
        if (daq.set.bits == B8)
 800644a:	2908      	cmp	r1, #8
        daq.vcc = get_vcc_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, daq.buff1.chans,
 800644c:	f854 000a 	ldr.w	r0, [r4, sl]
 8006450:	4641      	mov	r1, r8
            cal = PS_ADC_VREF_CAL_B8;
 8006452:	bf0c      	ite	eq
 8006454:	f8df 9194 	ldreq.w	r9, [pc, #404]	; 80065ec <PS_SCOPE_ReadQ+0x210>
        float cal = PS_ADC_VREF_CAL_B12;
 8006458:	f8df 9194 	ldrne.w	r9, [pc, #404]	; 80065f0 <PS_SCOPE_ReadQ+0x214>
        daq.vcc = get_vcc_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, daq.buff1.chans,
 800645c:	f000 fe20 	bl	80070a0 <get_vcc_from_circ>
 8006460:	f7fa fc26 	bl	8000cb0 <__aeabi_i2f>
 8006464:	f642 73a8 	movw	r3, #12200	; 0x2fa8
 8006468:	50e0      	str	r0, [r4, r3]
        daq.vcc_mv = daq.adc_max_val * PS_ADC_VREF_CAL / daq.vcc;
 800646a:	f642 73b0 	movw	r3, #12208	; 0x2fb0
        daq.vcc = get_vcc_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, daq.buff1.chans,
 800646e:	4607      	mov	r7, r0
        daq.vcc_mv = daq.adc_max_val * PS_ADC_VREF_CAL / daq.vcc;
 8006470:	495b      	ldr	r1, [pc, #364]	; (80065e0 <PS_SCOPE_ReadQ+0x204>)
 8006472:	58e0      	ldr	r0, [r4, r3]
 8006474:	f7fa fc70 	bl	8000d58 <__aeabi_fmul>
 8006478:	4639      	mov	r1, r7
 800647a:	f7fa fd21 	bl	8000ec0 <__aeabi_fdiv>
 800647e:	f642 73ac 	movw	r3, #12204	; 0x2fac
        if (daq.vcc_mv < PS_MIN_OP_VCC)
 8006482:	4958      	ldr	r1, [pc, #352]	; (80065e4 <PS_SCOPE_ReadQ+0x208>)
        daq.vcc_mv = daq.adc_max_val * PS_ADC_VREF_CAL / daq.vcc;
 8006484:	50e0      	str	r0, [r4, r3]
        if (daq.vcc_mv < PS_MIN_OP_VCC)
 8006486:	f7fa fe05 	bl	8001094 <__aeabi_fcmplt>
 800648a:	b130      	cbz	r0, 800649a <PS_SCOPE_ReadQ+0xbe>
            SCPI_ErrorPush(context, SCPI_ERROR_SAMPLING_FAILED);
 800648c:	2102      	movs	r1, #2
 800648e:	4630      	mov	r0, r6
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006490:	f001 f82c 	bl	80074ec <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	e7b4      	b.n	8006404 <PS_SCOPE_ReadQ+0x28>
        if (daq.set.ch1_en)
 800649a:	f642 7384 	movw	r3, #12164	; 0x2f84
 800649e:	5ce5      	ldrb	r5, [r4, r3]
        int idx = 0;
 80064a0:	9009      	str	r0, [sp, #36]	; 0x24
        if (daq.set.ch1_en)
 80064a2:	2d00      	cmp	r5, #0
 80064a4:	f000 808c 	beq.w	80065c0 <PS_SCOPE_ReadQ+0x1e4>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 80064a8:	ab09      	add	r3, sp, #36	; 0x24
 80064aa:	88e2      	ldrh	r2, [r4, #6]
 80064ac:	9306      	str	r3, [sp, #24]
 80064ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064b0:	4641      	mov	r1, r8
 80064b2:	9305      	str	r3, [sp, #20]
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80064ba:	9304      	str	r3, [sp, #16]
                                       daq.set.bits, daq.vcc, cal, daq.buff1.data, daq.buff_out.data, &idx);
 80064bc:	f642 738e 	movw	r3, #12174	; 0x2f8e
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 80064c0:	9702      	str	r7, [sp, #8]
 80064c2:	5ce3      	ldrb	r3, [r4, r3]
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	88a3      	ldrh	r3, [r4, #4]
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	f854 000a 	ldr.w	r0, [r4, sl]
 80064ce:	2302      	movs	r3, #2
 80064d0:	f000 fe21 	bl	8007116 <get_1ch_from_circ>
 80064d4:	2303      	movs	r3, #3
 80064d6:	4605      	mov	r5, r0
        if (daq.set.ch2_en)
 80064d8:	f642 7285 	movw	r2, #12165	; 0x2f85
 80064dc:	5ca2      	ldrb	r2, [r4, r2]
 80064de:	b1da      	cbz	r2, 8006518 <PS_SCOPE_ReadQ+0x13c>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 80064e0:	a909      	add	r1, sp, #36	; 0x24
 80064e2:	88e2      	ldrh	r2, [r4, #6]
 80064e4:	9106      	str	r1, [sp, #24]
 80064e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80064e8:	f243 0004 	movw	r0, #12292	; 0x3004
 80064ec:	9105      	str	r1, [sp, #20]
 80064ee:	6821      	ldr	r1, [r4, #0]
 80064f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80064f4:	9104      	str	r1, [sp, #16]
 80064f6:	f642 71a8 	movw	r1, #12200	; 0x2fa8
 80064fa:	5861      	ldr	r1, [r4, r1]
 80064fc:	1c5f      	adds	r7, r3, #1
 80064fe:	9102      	str	r1, [sp, #8]
                                       daq.set.bits, daq.vcc, cal, daq.buff1.data, daq.buff_out.data, &idx);
 8006500:	f642 718e 	movw	r1, #12174	; 0x2f8e
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006504:	5c61      	ldrb	r1, [r4, r1]
 8006506:	9101      	str	r1, [sp, #4]
 8006508:	88a1      	ldrh	r1, [r4, #4]
 800650a:	9100      	str	r1, [sp, #0]
 800650c:	5820      	ldr	r0, [r4, r0]
 800650e:	4641      	mov	r1, r8
 8006510:	f000 fe01 	bl	8007116 <get_1ch_from_circ>
 8006514:	463b      	mov	r3, r7
 8006516:	4405      	add	r5, r0
        if (daq.set.ch3_en)
 8006518:	f642 7286 	movw	r2, #12166	; 0x2f86
 800651c:	5ca2      	ldrb	r2, [r4, r2]
 800651e:	b1da      	cbz	r2, 8006558 <PS_SCOPE_ReadQ+0x17c>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006520:	a909      	add	r1, sp, #36	; 0x24
 8006522:	88e2      	ldrh	r2, [r4, #6]
 8006524:	9106      	str	r1, [sp, #24]
 8006526:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006528:	f243 0004 	movw	r0, #12292	; 0x3004
 800652c:	9105      	str	r1, [sp, #20]
 800652e:	6821      	ldr	r1, [r4, #0]
 8006530:	f8cd 900c 	str.w	r9, [sp, #12]
 8006534:	9104      	str	r1, [sp, #16]
 8006536:	f642 71a8 	movw	r1, #12200	; 0x2fa8
 800653a:	5861      	ldr	r1, [r4, r1]
 800653c:	1c5f      	adds	r7, r3, #1
 800653e:	9102      	str	r1, [sp, #8]
                                       daq.set.bits, daq.vcc, cal, daq.buff1.data, daq.buff_out.data, &idx);
 8006540:	f642 718e 	movw	r1, #12174	; 0x2f8e
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006544:	5c61      	ldrb	r1, [r4, r1]
 8006546:	9101      	str	r1, [sp, #4]
 8006548:	88a1      	ldrh	r1, [r4, #4]
 800654a:	9100      	str	r1, [sp, #0]
 800654c:	5820      	ldr	r0, [r4, r0]
 800654e:	4641      	mov	r1, r8
 8006550:	f000 fde1 	bl	8007116 <get_1ch_from_circ>
 8006554:	463b      	mov	r3, r7
 8006556:	4405      	add	r5, r0
        if (daq.set.ch4_en)
 8006558:	f642 7287 	movw	r2, #12167	; 0x2f87
 800655c:	5ca2      	ldrb	r2, [r4, r2]
 800655e:	b1ca      	cbz	r2, 8006594 <PS_SCOPE_ReadQ+0x1b8>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006560:	a909      	add	r1, sp, #36	; 0x24
 8006562:	88e2      	ldrh	r2, [r4, #6]
 8006564:	9106      	str	r1, [sp, #24]
 8006566:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006568:	f243 0004 	movw	r0, #12292	; 0x3004
 800656c:	9105      	str	r1, [sp, #20]
 800656e:	6821      	ldr	r1, [r4, #0]
 8006570:	f8cd 900c 	str.w	r9, [sp, #12]
 8006574:	9104      	str	r1, [sp, #16]
 8006576:	f642 71a8 	movw	r1, #12200	; 0x2fa8
 800657a:	5861      	ldr	r1, [r4, r1]
 800657c:	9102      	str	r1, [sp, #8]
                                       daq.set.bits, daq.vcc, cal, daq.buff1.data, daq.buff_out.data, &idx);
 800657e:	f642 718e 	movw	r1, #12174	; 0x2f8e
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006582:	5c61      	ldrb	r1, [r4, r1]
 8006584:	9101      	str	r1, [sp, #4]
 8006586:	88a1      	ldrh	r1, [r4, #4]
 8006588:	9100      	str	r1, [sp, #0]
 800658a:	5820      	ldr	r0, [r4, r0]
 800658c:	4641      	mov	r1, r8
 800658e:	f000 fdc2 	bl	8007116 <get_1ch_from_circ>
 8006592:	4405      	add	r5, r0
        daq.trig.pretrig_cntr = 0;
 8006594:	2300      	movs	r3, #0
 8006596:	f243 0218 	movw	r2, #12312	; 0x3018
 800659a:	50a3      	str	r3, [r4, r2]
        daq.trig.ready = 0;
 800659c:	f642 72fa 	movw	r2, #12282	; 0x2ffa
 80065a0:	52a3      	strh	r3, [r4, r2]
        if (daq.trig.set.mode != SINGLE)
 80065a2:	f642 73bc 	movw	r3, #12220	; 0x2fbc
 80065a6:	5ce3      	ldrb	r3, [r4, r3]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d003      	beq.n	80065b4 <PS_SCOPE_ReadQ+0x1d8>
            daq_enable(&daq, 1);
 80065ac:	2101      	movs	r1, #1
 80065ae:	4809      	ldr	r0, [pc, #36]	; (80065d4 <PS_SCOPE_ReadQ+0x1f8>)
 80065b0:	f7fe fc02 	bl	8004db8 <daq_enable>
        if (added != daq.buff_out.len)
 80065b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065b6:	42ab      	cmp	r3, r5
 80065b8:	d004      	beq.n	80065c4 <PS_SCOPE_ReadQ+0x1e8>
            SCPI_ResultText(context, "ERROR: invalid buffer size"); // TODO DEBUG
 80065ba:	490b      	ldr	r1, [pc, #44]	; (80065e8 <PS_SCOPE_ReadQ+0x20c>)
 80065bc:	4630      	mov	r0, r6
 80065be:	e71e      	b.n	80063fe <PS_SCOPE_ReadQ+0x22>
        int ch_it = 2;
 80065c0:	2302      	movs	r3, #2
 80065c2:	e789      	b.n	80064d8 <PS_SCOPE_ReadQ+0xfc>
        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
 80065c4:	462a      	mov	r2, r5
 80065c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80065c8:	4630      	mov	r0, r6
 80065ca:	f001 fec1 	bl	8008350 <SCPI_ResultArbitraryBlock>
 80065ce:	e718      	b.n	8006402 <PS_SCOPE_ReadQ+0x26>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 80065d0:	2101      	movs	r1, #1
 80065d2:	e75d      	b.n	8006490 <PS_SCOPE_ReadQ+0xb4>
 80065d4:	20000950 	.word	0x20000950
 80065d8:	0800aecf 	.word	0x0800aecf
 80065dc:	40020008 	.word	0x40020008
 80065e0:	44960000 	.word	0x44960000
 80065e4:	451c4000 	.word	0x451c4000
 80065e8:	0800aeda 	.word	0x0800aeda
 80065ec:	42f00000 	.word	0x42f00000
 80065f0:	463b8000 	.word	0x463b8000

080065f4 <PS_SCOPE_Set>:

scpi_result_t PS_SCOPE_Set(scpi_t * context)
{
    if (daq.mode == SCOPE)
 80065f4:	f642 73b6 	movw	r3, #12214	; 0x2fb6
{
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (daq.mode == SCOPE)
 80065fc:	4f7b      	ldr	r7, [pc, #492]	; (80067ec <PS_SCOPE_Set+0x1f8>)
{
 80065fe:	b08f      	sub	sp, #60	; 0x3c
    if (daq.mode == SCOPE)
 8006600:	5cfb      	ldrb	r3, [r7, r3]
{
 8006602:	4604      	mov	r4, r0
    if (daq.mode == SCOPE)
 8006604:	2b00      	cmp	r3, #0
 8006606:	f040 80ef 	bne.w	80067e8 <PS_SCOPE_Set+0x1f4>
        const char* p4;
        const char* p7;
        const char* p8;
        size_t p4l, p7l, p8l;

        if (!SCPI_ParamUInt32(context, &p1, TRUE) ||
 800660a:	2201      	movs	r2, #1
 800660c:	a902      	add	r1, sp, #8
 800660e:	f001 ff8a 	bl	8008526 <SCPI_ParamUInt32>
 8006612:	b910      	cbnz	r0, 800661a <PS_SCOPE_Set+0x26>
        }
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
 8006614:	f04f 30ff 	mov.w	r0, #4294967295
 8006618:	e0e1      	b.n	80067de <PS_SCOPE_Set+0x1ea>
            !SCPI_ParamUInt32(context, &p2, TRUE) ||
 800661a:	2201      	movs	r2, #1
 800661c:	a903      	add	r1, sp, #12
 800661e:	4620      	mov	r0, r4
 8006620:	f001 ff81 	bl	8008526 <SCPI_ParamUInt32>
        if (!SCPI_ParamUInt32(context, &p1, TRUE) ||
 8006624:	2800      	cmp	r0, #0
 8006626:	d0f5      	beq.n	8006614 <PS_SCOPE_Set+0x20>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 8006628:	2201      	movs	r2, #1
 800662a:	a904      	add	r1, sp, #16
 800662c:	4620      	mov	r0, r4
 800662e:	f001 ff7a 	bl	8008526 <SCPI_ParamUInt32>
            !SCPI_ParamUInt32(context, &p2, TRUE) ||
 8006632:	2800      	cmp	r0, #0
 8006634:	d0ee      	beq.n	8006614 <PS_SCOPE_Set+0x20>
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 8006636:	2301      	movs	r3, #1
 8006638:	aa0b      	add	r2, sp, #44	; 0x2c
 800663a:	a908      	add	r1, sp, #32
 800663c:	4620      	mov	r0, r4
 800663e:	f001 ff75 	bl	800852c <SCPI_ParamCharacters>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 8006642:	2800      	cmp	r0, #0
 8006644:	d0e6      	beq.n	8006614 <PS_SCOPE_Set+0x20>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 8006646:	2201      	movs	r2, #1
 8006648:	a905      	add	r1, sp, #20
 800664a:	4620      	mov	r0, r4
 800664c:	f001 ff6b 	bl	8008526 <SCPI_ParamUInt32>
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 8006650:	2800      	cmp	r0, #0
 8006652:	d0df      	beq.n	8006614 <PS_SCOPE_Set+0x20>
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
 8006654:	2201      	movs	r2, #1
 8006656:	a906      	add	r1, sp, #24
 8006658:	4620      	mov	r0, r4
 800665a:	f001 ff64 	bl	8008526 <SCPI_ParamUInt32>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800665e:	2800      	cmp	r0, #0
 8006660:	d0d8      	beq.n	8006614 <PS_SCOPE_Set+0x20>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 8006662:	2301      	movs	r3, #1
 8006664:	aa0c      	add	r2, sp, #48	; 0x30
 8006666:	a909      	add	r1, sp, #36	; 0x24
 8006668:	4620      	mov	r0, r4
 800666a:	f001 ff5f 	bl	800852c <SCPI_ParamCharacters>
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
 800666e:	2800      	cmp	r0, #0
 8006670:	d0d0      	beq.n	8006614 <PS_SCOPE_Set+0x20>
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
 8006672:	2301      	movs	r3, #1
 8006674:	aa0d      	add	r2, sp, #52	; 0x34
 8006676:	a90a      	add	r1, sp, #40	; 0x28
 8006678:	4620      	mov	r0, r4
 800667a:	f001 ff57 	bl	800852c <SCPI_ParamCharacters>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800667e:	2800      	cmp	r0, #0
 8006680:	d0c8      	beq.n	8006614 <PS_SCOPE_Set+0x20>
            !SCPI_ParamUInt32(context, &p9, TRUE))
 8006682:	2201      	movs	r2, #1
 8006684:	a907      	add	r1, sp, #28
 8006686:	4620      	mov	r0, r4
 8006688:	f001 ff4d 	bl	8008526 <SCPI_ParamUInt32>
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
 800668c:	2800      	cmp	r0, #0
 800668e:	d0c1      	beq.n	8006614 <PS_SCOPE_Set+0x20>
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 8006690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006692:	2b04      	cmp	r3, #4
 8006694:	d12c      	bne.n	80066f0 <PS_SCOPE_Set+0xfc>
 8006696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006698:	2b01      	cmp	r3, #1
 800669a:	d129      	bne.n	80066f0 <PS_SCOPE_Set+0xfc>
 800669c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d126      	bne.n	80066f0 <PS_SCOPE_Set+0xfc>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 80066a2:	9b08      	ldr	r3, [sp, #32]
 80066a4:	781a      	ldrb	r2, [r3, #0]
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 80066a6:	2a54      	cmp	r2, #84	; 0x54
 80066a8:	d001      	beq.n	80066ae <PS_SCOPE_Set+0xba>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 80066aa:	2a46      	cmp	r2, #70	; 0x46
 80066ac:	d120      	bne.n	80066f0 <PS_SCOPE_Set+0xfc>
 80066ae:	785a      	ldrb	r2, [r3, #1]
 80066b0:	2a54      	cmp	r2, #84	; 0x54
 80066b2:	d001      	beq.n	80066b8 <PS_SCOPE_Set+0xc4>
 80066b4:	2a46      	cmp	r2, #70	; 0x46
 80066b6:	d11b      	bne.n	80066f0 <PS_SCOPE_Set+0xfc>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 80066b8:	789a      	ldrb	r2, [r3, #2]
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 80066ba:	2a54      	cmp	r2, #84	; 0x54
 80066bc:	d001      	beq.n	80066c2 <PS_SCOPE_Set+0xce>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 80066be:	2a46      	cmp	r2, #70	; 0x46
 80066c0:	d116      	bne.n	80066f0 <PS_SCOPE_Set+0xfc>
 80066c2:	78db      	ldrb	r3, [r3, #3]
 80066c4:	2b54      	cmp	r3, #84	; 0x54
 80066c6:	d001      	beq.n	80066cc <PS_SCOPE_Set+0xd8>
 80066c8:	2b46      	cmp	r3, #70	; 0x46
 80066ca:	d111      	bne.n	80066f0 <PS_SCOPE_Set+0xfc>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 80066cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ce:	781b      	ldrb	r3, [r3, #0]
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 80066d0:	2b52      	cmp	r3, #82	; 0x52
 80066d2:	d001      	beq.n	80066d8 <PS_SCOPE_Set+0xe4>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 80066d4:	2b46      	cmp	r3, #70	; 0x46
 80066d6:	d10b      	bne.n	80066f0 <PS_SCOPE_Set+0xfc>
 80066d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066da:	781e      	ldrb	r6, [r3, #0]
 80066dc:	3e41      	subs	r6, #65	; 0x41
 80066de:	b2f3      	uxtb	r3, r6
 80066e0:	2b12      	cmp	r3, #18
 80066e2:	d805      	bhi.n	80066f0 <PS_SCOPE_Set+0xfc>
 80066e4:	4e42      	ldr	r6, [pc, #264]	; (80067f0 <PS_SCOPE_Set+0x1fc>)
 80066e6:	40de      	lsrs	r6, r3
 80066e8:	43f6      	mvns	r6, r6
 80066ea:	f016 0601 	ands.w	r6, r6, #1
 80066ee:	d005      	beq.n	80066fc <PS_SCOPE_Set+0x108>
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 80066f0:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 80066f4:	4620      	mov	r0, r4
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 80066f6:	f000 fef9 	bl	80074ec <SCPI_ErrorPush>
 80066fa:	e78b      	b.n	8006614 <PS_SCOPE_Set+0x20>
        daq_enable(&daq, 0);
 80066fc:	4631      	mov	r1, r6
 80066fe:	483b      	ldr	r0, [pc, #236]	; (80067ec <PS_SCOPE_Set+0x1f8>)
 8006700:	f7fe fb5a 	bl	8004db8 <daq_enable>
        daq_reset(&daq);
 8006704:	4839      	ldr	r0, [pc, #228]	; (80067ec <PS_SCOPE_Set+0x1f8>)
 8006706:	f7fe fb22 	bl	8004d4e <daq_reset>
        daq.dis_hold = 1;
 800670a:	f04f 0b01 	mov.w	fp, #1
 800670e:	f642 73b4 	movw	r3, #12212	; 0x2fb4
        daq_mem_set(&daq, 3); // safety guard
 8006712:	2103      	movs	r1, #3
 8006714:	4835      	ldr	r0, [pc, #212]	; (80067ec <PS_SCOPE_Set+0x1f8>)
        daq.dis_hold = 1;
 8006716:	f807 b003 	strb.w	fp, [r7, r3]
        daq_mem_set(&daq, 3); // safety guard
 800671a:	f7fe fbef 	bl	8004efc <daq_mem_set>
        int ret2 = daq_bit_set(&daq, (int)p1);
 800671e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8006722:	4832      	ldr	r0, [pc, #200]	; (80067ec <PS_SCOPE_Set+0x1f8>)
 8006724:	f7fe fc7a 	bl	800501c <daq_bit_set>
 8006728:	4605      	mov	r5, r0
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800672a:	9808      	ldr	r0, [sp, #32]
 800672c:	7883      	ldrb	r3, [r0, #2]
 800672e:	7842      	ldrb	r2, [r0, #1]
 8006730:	7801      	ldrb	r1, [r0, #0]
 8006732:	78c0      	ldrb	r0, [r0, #3]
 8006734:	f1a3 0e54 	sub.w	lr, r3, #84	; 0x54
 8006738:	f1a0 0c54 	sub.w	ip, r0, #84	; 0x54
 800673c:	f1dc 0000 	rsbs	r0, ip, #0
 8006740:	eb40 000c 	adc.w	r0, r0, ip
 8006744:	f1a2 0854 	sub.w	r8, r2, #84	; 0x54
 8006748:	f1de 0300 	rsbs	r3, lr, #0
 800674c:	eb43 030e 	adc.w	r3, r3, lr
 8006750:	f1a1 0954 	sub.w	r9, r1, #84	; 0x54
 8006754:	f1d8 0200 	rsbs	r2, r8, #0
 8006758:	eb42 0208 	adc.w	r2, r2, r8
 800675c:	f1d9 0100 	rsbs	r1, r9, #0
 8006760:	eb41 0109 	adc.w	r1, r1, r9
 8006764:	9000      	str	r0, [sp, #0]
 8006766:	4821      	ldr	r0, [pc, #132]	; (80067ec <PS_SCOPE_Set+0x1f8>)
 8006768:	f7fe fd16 	bl	8005198 <daq_ch_set>
 800676c:	4680      	mov	r8, r0
        int ret3 = daq_fs_set(&daq, (int)p3);
 800676e:	9804      	ldr	r0, [sp, #16]
 8006770:	f7fa fa9e 	bl	8000cb0 <__aeabi_i2f>
 8006774:	4601      	mov	r1, r0
 8006776:	481d      	ldr	r0, [pc, #116]	; (80067ec <PS_SCOPE_Set+0x1f8>)
 8006778:	f7fe fc96 	bl	80050a8 <daq_fs_set>
        int ret1 = daq_mem_set(&daq, (int)p2);
 800677c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        int ret3 = daq_fs_set(&daq, (int)p3);
 8006780:	4681      	mov	r9, r0
        int ret1 = daq_mem_set(&daq, (int)p2);
 8006782:	481a      	ldr	r0, [pc, #104]	; (80067ec <PS_SCOPE_Set+0x1f8>)
 8006784:	f7fe fbba 	bl	8004efc <daq_mem_set>
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 8006788:	9b09      	ldr	r3, [sp, #36]	; 0x24
        int ret1 = daq_mem_set(&daq, (int)p2);
 800678a:	4682      	mov	sl, r0
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800678c:	980a      	ldr	r0, [sp, #40]	; 0x28
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 800678e:	781b      	ldrb	r3, [r3, #0]
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 8006790:	7800      	ldrb	r0, [r0, #0]
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 8006792:	3b52      	subs	r3, #82	; 0x52
 8006794:	bf18      	it	ne
 8006796:	2301      	movne	r3, #1
 8006798:	2841      	cmp	r0, #65	; 0x41
 800679a:	9905      	ldr	r1, [sp, #20]
 800679c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80067a0:	d005      	beq.n	80067ae <PS_SCOPE_Set+0x1ba>
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 80067a2:	284e      	cmp	r0, #78	; 0x4e
 80067a4:	d01e      	beq.n	80067e4 <PS_SCOPE_Set+0x1f0>
 80067a6:	2853      	cmp	r0, #83	; 0x53
 80067a8:	bf14      	ite	ne
 80067aa:	2603      	movne	r6, #3
 80067ac:	2602      	moveq	r6, #2
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 80067ae:	9807      	ldr	r0, [sp, #28]
 80067b0:	e9cd 6000 	strd	r6, r0, [sp]
 80067b4:	480d      	ldr	r0, [pc, #52]	; (80067ec <PS_SCOPE_Set+0x1f8>)
 80067b6:	f7ff f863 	bl	8005880 <daq_trig_set>
        if (ret1 + ret2 + ret3 + ret4 + ret5 == 0)
 80067ba:	eb05 030a 	add.w	r3, r5, sl
 80067be:	444b      	add	r3, r9
 80067c0:	4443      	add	r3, r8
 80067c2:	1818      	adds	r0, r3, r0
 80067c4:	d194      	bne.n	80066f0 <PS_SCOPE_Set+0xfc>
            daq.dis_hold = 0;
 80067c6:	f642 73b4 	movw	r3, #12212	; 0x2fb4
            daq_enable(&daq, 1);
 80067ca:	2101      	movs	r1, #1
            daq.dis_hold = 0;
 80067cc:	54f8      	strb	r0, [r7, r3]
            daq_enable(&daq, 1);
 80067ce:	4807      	ldr	r0, [pc, #28]	; (80067ec <PS_SCOPE_Set+0x1f8>)
 80067d0:	f7fe faf2 	bl	8004db8 <daq_enable>
            SCPI_ResultText(context, SCPI_OK);
 80067d4:	4907      	ldr	r1, [pc, #28]	; (80067f4 <PS_SCOPE_Set+0x200>)
 80067d6:	4620      	mov	r0, r4
 80067d8:	f001 fce2 	bl	80081a0 <SCPI_ResultText>
            return SCPI_RES_OK;
 80067dc:	2001      	movs	r0, #1
    }
}
 80067de:	b00f      	add	sp, #60	; 0x3c
 80067e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 80067e4:	465e      	mov	r6, fp
 80067e6:	e7e2      	b.n	80067ae <PS_SCOPE_Set+0x1ba>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 80067e8:	2101      	movs	r1, #1
 80067ea:	e784      	b.n	80066f6 <PS_SCOPE_Set+0x102>
 80067ec:	20000950 	.word	0x20000950
 80067f0:	00042009 	.word	0x00042009
 80067f4:	0800aecc 	.word	0x0800aecc

080067f8 <PS_SCOPE_SetQ>:

scpi_result_t PS_SCOPE_SetQ(scpi_t * context)
{
    if (daq.mode == SCOPE)
 80067f8:	f642 73b6 	movw	r3, #12214	; 0x2fb6
{
 80067fc:	b570      	push	{r4, r5, r6, lr}
    if (daq.mode == SCOPE)
 80067fe:	4c3f      	ldr	r4, [pc, #252]	; (80068fc <PS_SCOPE_SetQ+0x104>)
{
 8006800:	b0ae      	sub	sp, #184	; 0xb8
    if (daq.mode == SCOPE)
 8006802:	5ce3      	ldrb	r3, [r4, r3]
{
 8006804:	4606      	mov	r6, r0
    if (daq.mode == SCOPE)
 8006806:	2b00      	cmp	r3, #0
 8006808:	d171      	bne.n	80068ee <PS_SCOPE_SetQ+0xf6>
        char freq_s[30];
        char chans_en[5];
        char edge_s[2];
        char mode_s[2];

        sprint_fast(freq_s, "%s", daq.set.fs, 3);
 800680a:	f642 7288 	movw	r2, #12168	; 0x2f88
 800680e:	ad0d      	add	r5, sp, #52	; 0x34
 8006810:	2303      	movs	r3, #3
 8006812:	58a2      	ldr	r2, [r4, r2]
 8006814:	493a      	ldr	r1, [pc, #232]	; (8006900 <PS_SCOPE_SetQ+0x108>)
 8006816:	4628      	mov	r0, r5
 8006818:	f000 fd26 	bl	8007268 <sprint_fast>
        chans_en[0] = daq.set.ch1_en ? 'T' : 'F';
 800681c:	f642 7384 	movw	r3, #12164	; 0x2f84
 8006820:	5ce3      	ldrb	r3, [r4, r3]
 8006822:	2b00      	cmp	r3, #0
 8006824:	bf14      	ite	ne
 8006826:	2354      	movne	r3, #84	; 0x54
 8006828:	2346      	moveq	r3, #70	; 0x46
 800682a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        chans_en[1] = daq.set.ch2_en ? 'T' : 'F';
 800682e:	f642 7385 	movw	r3, #12165	; 0x2f85
 8006832:	5ce3      	ldrb	r3, [r4, r3]
 8006834:	2b00      	cmp	r3, #0
 8006836:	bf14      	ite	ne
 8006838:	2354      	movne	r3, #84	; 0x54
 800683a:	2346      	moveq	r3, #70	; 0x46
 800683c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        chans_en[2] = daq.set.ch3_en ? 'T' : 'F';
 8006840:	f642 7386 	movw	r3, #12166	; 0x2f86
 8006844:	5ce3      	ldrb	r3, [r4, r3]
 8006846:	2b00      	cmp	r3, #0
 8006848:	bf14      	ite	ne
 800684a:	2354      	movne	r3, #84	; 0x54
 800684c:	2346      	moveq	r3, #70	; 0x46
 800684e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
        chans_en[3] = daq.set.ch4_en ? 'T' : 'F';
 8006852:	f642 7387 	movw	r3, #12167	; 0x2f87
 8006856:	5ce3      	ldrb	r3, [r4, r3]
 8006858:	2b00      	cmp	r3, #0
 800685a:	bf14      	ite	ne
 800685c:	2354      	movne	r3, #84	; 0x54
 800685e:	2346      	moveq	r3, #70	; 0x46
 8006860:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
        edge_s[0] = daq.trig.set.edge == RISING ? 'R' : 'F';
 8006864:	f642 73bd 	movw	r3, #12221	; 0x2fbd
 8006868:	5ce3      	ldrb	r3, [r4, r3]
 800686a:	2b00      	cmp	r3, #0
 800686c:	bf0c      	ite	eq
 800686e:	2352      	moveq	r3, #82	; 0x52
 8006870:	2346      	movne	r3, #70	; 0x46
 8006872:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 8006876:	f642 73bc 	movw	r3, #12220	; 0x2fbc
 800687a:	5ce3      	ldrb	r3, [r4, r3]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d032      	beq.n	80068e6 <PS_SCOPE_SetQ+0xee>
 8006880:	2b01      	cmp	r3, #1
 8006882:	d032      	beq.n	80068ea <PS_SCOPE_SetQ+0xf2>
 8006884:	2b02      	cmp	r3, #2
 8006886:	bf0c      	ite	eq
 8006888:	2353      	moveq	r3, #83	; 0x53
 800688a:	2344      	movne	r3, #68	; 0x44
            (daq.trig.set.mode == SINGLE ? 'S' : 'D'));
        chans_en[4] = '\0';
        edge_s[1] = '\0';
        mode_s[1] = '\0';

        int len = sprintf(buff, "%d,%d,%s,%s,%d,%d,%s,%s,%d", daq.set.bits, daq.set.mem, freq_s, chans_en,
 800688c:	f642 71b8 	movw	r1, #12216	; 0x2fb8
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 8006890:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        chans_en[4] = '\0';
 8006894:	2300      	movs	r3, #0
        int len = sprintf(buff, "%d,%d,%s,%s,%d,%d,%s,%s,%d", daq.set.bits, daq.set.mem, freq_s, chans_en,
 8006896:	5861      	ldr	r1, [r4, r1]
        chans_en[4] = '\0';
 8006898:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        int len = sprintf(buff, "%d,%d,%s,%s,%d,%d,%s,%s,%d", daq.set.bits, daq.set.mem, freq_s, chans_en,
 800689c:	9106      	str	r1, [sp, #24]
 800689e:	a90a      	add	r1, sp, #40	; 0x28
 80068a0:	9105      	str	r1, [sp, #20]
 80068a2:	a909      	add	r1, sp, #36	; 0x24
 80068a4:	9104      	str	r1, [sp, #16]
 80068a6:	f642 71c8 	movw	r1, #12232	; 0x2fc8
        edge_s[1] = '\0';
 80068aa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        mode_s[1] = '\0';
 80068ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        int len = sprintf(buff, "%d,%d,%s,%s,%d,%d,%s,%s,%d", daq.set.bits, daq.set.mem, freq_s, chans_en,
 80068b2:	f642 728e 	movw	r2, #12174	; 0x2f8e
 80068b6:	f642 738c 	movw	r3, #12172	; 0x2f8c
 80068ba:	5861      	ldr	r1, [r4, r1]
 80068bc:	5ae3      	ldrh	r3, [r4, r3]
 80068be:	9103      	str	r1, [sp, #12]
 80068c0:	4910      	ldr	r1, [pc, #64]	; (8006904 <PS_SCOPE_SetQ+0x10c>)
 80068c2:	5ca2      	ldrb	r2, [r4, r2]
 80068c4:	6809      	ldr	r1, [r1, #0]
 80068c6:	a815      	add	r0, sp, #84	; 0x54
 80068c8:	9102      	str	r1, [sp, #8]
 80068ca:	a90b      	add	r1, sp, #44	; 0x2c
 80068cc:	e9cd 5100 	strd	r5, r1, [sp]
 80068d0:	490d      	ldr	r1, [pc, #52]	; (8006908 <PS_SCOPE_SetQ+0x110>)
 80068d2:	f002 fac9 	bl	8008e68 <siprintf>
                          daq.trig.set.ch, daq.trig.set.val_percent, edge_s, mode_s, daq.trig.set.pretrigger);

        SCPI_ResultCharacters(context, buff, len);
 80068d6:	a915      	add	r1, sp, #84	; 0x54
 80068d8:	4602      	mov	r2, r0
 80068da:	4630      	mov	r0, r6
 80068dc:	f001 fc4a 	bl	8008174 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 80068e0:	2001      	movs	r0, #1
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }
}
 80068e2:	b02e      	add	sp, #184	; 0xb8
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 80068e6:	2341      	movs	r3, #65	; 0x41
 80068e8:	e7d0      	b.n	800688c <PS_SCOPE_SetQ+0x94>
 80068ea:	234e      	movs	r3, #78	; 0x4e
 80068ec:	e7ce      	b.n	800688c <PS_SCOPE_SetQ+0x94>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 80068ee:	2101      	movs	r1, #1
 80068f0:	f000 fdfc 	bl	80074ec <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295
 80068f8:	e7f3      	b.n	80068e2 <PS_SCOPE_SetQ+0xea>
 80068fa:	bf00      	nop
 80068fc:	20000950 	.word	0x20000950
 8006900:	0800af4f 	.word	0x0800af4f
 8006904:	20003910 	.word	0x20003910
 8006908:	0800aef5 	.word	0x0800aef5

0800690c <PS_LA_ReadQ>:

/************************* [LA Actions] *************************/

scpi_result_t PS_LA_ReadQ(scpi_t * context)
{
    if (daq.mode == LA)
 800690c:	f642 72b6 	movw	r2, #12214	; 0x2fb6
{
 8006910:	b538      	push	{r3, r4, r5, lr}
    if (daq.mode == LA)
 8006912:	4b27      	ldr	r3, [pc, #156]	; (80069b0 <PS_LA_ReadQ+0xa4>)
{
 8006914:	4605      	mov	r5, r0
    if (daq.mode == LA)
 8006916:	5c9a      	ldrb	r2, [r3, r2]
 8006918:	461c      	mov	r4, r3
 800691a:	2a02      	cmp	r2, #2
 800691c:	d142      	bne.n	80069a4 <PS_LA_ReadQ+0x98>
    {
        if (daq.trig.ready == 0)
 800691e:	f642 72fa 	movw	r2, #12282	; 0x2ffa
 8006922:	5c9b      	ldrb	r3, [r3, r2]
 8006924:	b923      	cbnz	r3, 8006930 <PS_LA_ReadQ+0x24>
        {
            SCPI_ResultText(context, PS_RESP_NRDY);
 8006926:	4923      	ldr	r1, [pc, #140]	; (80069b4 <PS_LA_ReadQ+0xa8>)
 8006928:	f001 fc3a 	bl	80081a0 <SCPI_ResultText>
        {
            daq_enable(&daq, 1);
        }

        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
        return SCPI_RES_OK;
 800692c:	2001      	movs	r0, #1
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }
}
 800692e:	bd38      	pop	{r3, r4, r5, pc}
        if (daq.trig.set.mode == DISABLED)
 8006930:	f642 73bc 	movw	r3, #12220	; 0x2fbc
 8006934:	5ce3      	ldrb	r3, [r4, r3]
 8006936:	2b03      	cmp	r3, #3
 8006938:	d10d      	bne.n	8006956 <PS_LA_ReadQ+0x4a>
            daq_enable(&daq, 0);
 800693a:	2100      	movs	r1, #0
 800693c:	4620      	mov	r0, r4
 800693e:	f7fe fa3b 	bl	8004db8 <daq_enable>
 8006942:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <PS_LA_ReadQ+0xac>)
            daq.trig.pos_frst = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_CH_LA);
 8006944:	88e1      	ldrh	r1, [r4, #6]
 8006946:	6858      	ldr	r0, [r3, #4]
 8006948:	b280      	uxth	r0, r0
 800694a:	1a08      	subs	r0, r1, r0
 800694c:	f000 fc43 	bl	80071d6 <get_last_circ_idx>
 8006950:	f243 0304 	movw	r3, #12292	; 0x3004
 8006954:	50e0      	str	r0, [r4, r3]
        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 8006956:	f243 0304 	movw	r3, #12292	; 0x3004
 800695a:	2200      	movs	r2, #0
 800695c:	58e3      	ldr	r3, [r4, r3]
 800695e:	88e1      	ldrh	r1, [r4, #6]
 8006960:	4291      	cmp	r1, r2
 8006962:	dc15      	bgt.n	8006990 <PS_LA_ReadQ+0x84>
        daq.trig.pretrig_cntr = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	f243 0218 	movw	r2, #12312	; 0x3018
 800696a:	50a3      	str	r3, [r4, r2]
        daq.trig.ready = 0;
 800696c:	f642 72fa 	movw	r2, #12282	; 0x2ffa
 8006970:	52a3      	strh	r3, [r4, r2]
        if (daq.trig.set.mode != SINGLE)
 8006972:	f642 73bc 	movw	r3, #12220	; 0x2fbc
 8006976:	5ce3      	ldrb	r3, [r4, r3]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d003      	beq.n	8006984 <PS_LA_ReadQ+0x78>
            daq_enable(&daq, 1);
 800697c:	2101      	movs	r1, #1
 800697e:	480c      	ldr	r0, [pc, #48]	; (80069b0 <PS_LA_ReadQ+0xa4>)
 8006980:	f7fe fa1a 	bl	8004db8 <daq_enable>
        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
 8006984:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006986:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006988:	4628      	mov	r0, r5
 800698a:	f001 fce1 	bl	8008350 <SCPI_ResultArbitraryBlock>
 800698e:	e7cd      	b.n	800692c <PS_LA_ReadQ+0x20>
                i = 0;
 8006990:	4299      	cmp	r1, r3
 8006992:	bfd8      	it	le
 8006994:	2300      	movle	r3, #0
            ((uint8_t*)daq.buff_out.data)[k] = (uint8_t)(((uint8_t*)daq.buff1.data)[i]);
 8006996:	6821      	ldr	r1, [r4, #0]
 8006998:	5cc8      	ldrb	r0, [r1, r3]
 800699a:	6b21      	ldr	r1, [r4, #48]	; 0x30
        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 800699c:	3301      	adds	r3, #1
            ((uint8_t*)daq.buff_out.data)[k] = (uint8_t)(((uint8_t*)daq.buff1.data)[i]);
 800699e:	5488      	strb	r0, [r1, r2]
        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 80069a0:	3201      	adds	r2, #1
 80069a2:	e7dc      	b.n	800695e <PS_LA_ReadQ+0x52>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 80069a4:	2101      	movs	r1, #1
 80069a6:	f000 fda1 	bl	80074ec <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 80069aa:	f04f 30ff 	mov.w	r0, #4294967295
 80069ae:	e7be      	b.n	800692e <PS_LA_ReadQ+0x22>
 80069b0:	20000950 	.word	0x20000950
 80069b4:	0800aecf 	.word	0x0800aecf
 80069b8:	4002006c 	.word	0x4002006c

080069bc <PS_LA_Set>:

scpi_result_t PS_LA_Set(scpi_t * context)
{
    if (daq.mode == LA)
 80069bc:	f642 73b6 	movw	r3, #12214	; 0x2fb6
{
 80069c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (daq.mode == LA)
 80069c4:	4f57      	ldr	r7, [pc, #348]	; (8006b24 <PS_LA_Set+0x168>)
{
 80069c6:	b08b      	sub	sp, #44	; 0x2c
    if (daq.mode == LA)
 80069c8:	5cfb      	ldrb	r3, [r7, r3]
{
 80069ca:	4606      	mov	r6, r0
    if (daq.mode == LA)
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	f040 80a6 	bne.w	8006b1e <PS_LA_Set+0x162>
        uint32_t p2, p3, p5, p9;
        const char* p7;
        const char* p8;
        size_t p7l, p8l;

        if (!SCPI_ParamUInt32(context, &p2, TRUE) ||
 80069d2:	2201      	movs	r2, #1
 80069d4:	a902      	add	r1, sp, #8
 80069d6:	f001 fda6 	bl	8008526 <SCPI_ParamUInt32>
 80069da:	b910      	cbnz	r0, 80069e2 <PS_LA_Set+0x26>
        }
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
 80069dc:	f04f 30ff 	mov.w	r0, #4294967295
 80069e0:	e098      	b.n	8006b14 <PS_LA_Set+0x158>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 80069e2:	2201      	movs	r2, #1
 80069e4:	a903      	add	r1, sp, #12
 80069e6:	4630      	mov	r0, r6
 80069e8:	f001 fd9d 	bl	8008526 <SCPI_ParamUInt32>
        if (!SCPI_ParamUInt32(context, &p2, TRUE) ||
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d0f5      	beq.n	80069dc <PS_LA_Set+0x20>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 80069f0:	2201      	movs	r2, #1
 80069f2:	a904      	add	r1, sp, #16
 80069f4:	4630      	mov	r0, r6
 80069f6:	f001 fd96 	bl	8008526 <SCPI_ParamUInt32>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d0ee      	beq.n	80069dc <PS_LA_Set+0x20>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 80069fe:	2301      	movs	r3, #1
 8006a00:	aa08      	add	r2, sp, #32
 8006a02:	a906      	add	r1, sp, #24
 8006a04:	4630      	mov	r0, r6
 8006a06:	f001 fd91 	bl	800852c <SCPI_ParamCharacters>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d0e6      	beq.n	80069dc <PS_LA_Set+0x20>
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
 8006a0e:	2301      	movs	r3, #1
 8006a10:	aa09      	add	r2, sp, #36	; 0x24
 8006a12:	a907      	add	r1, sp, #28
 8006a14:	4630      	mov	r0, r6
 8006a16:	f001 fd89 	bl	800852c <SCPI_ParamCharacters>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d0de      	beq.n	80069dc <PS_LA_Set+0x20>
            !SCPI_ParamUInt32(context, &p9, TRUE))
 8006a1e:	2201      	movs	r2, #1
 8006a20:	a905      	add	r1, sp, #20
 8006a22:	4630      	mov	r0, r6
 8006a24:	f001 fd7f 	bl	8008526 <SCPI_ParamUInt32>
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d0d7      	beq.n	80069dc <PS_LA_Set+0x20>
        if (p7l != 1 || p8l != 1 ||
 8006a2c:	9b08      	ldr	r3, [sp, #32]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d117      	bne.n	8006a62 <PS_LA_Set+0xa6>
 8006a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d114      	bne.n	8006a62 <PS_LA_Set+0xa6>
            (p7[0] != 'R' && p7[0] != 'F') ||
 8006a38:	9b06      	ldr	r3, [sp, #24]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
        if (p7l != 1 || p8l != 1 ||
 8006a3c:	2b52      	cmp	r3, #82	; 0x52
 8006a3e:	d001      	beq.n	8006a44 <PS_LA_Set+0x88>
            (p7[0] != 'R' && p7[0] != 'F') ||
 8006a40:	2b46      	cmp	r3, #70	; 0x46
 8006a42:	d10e      	bne.n	8006a62 <PS_LA_Set+0xa6>
            (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 8006a44:	9b07      	ldr	r3, [sp, #28]
            (p7[0] != 'R' && p7[0] != 'F') ||
 8006a46:	781c      	ldrb	r4, [r3, #0]
 8006a48:	3c41      	subs	r4, #65	; 0x41
 8006a4a:	fa5f fb84 	uxtb.w	fp, r4
 8006a4e:	f1bb 0f12 	cmp.w	fp, #18
 8006a52:	d806      	bhi.n	8006a62 <PS_LA_Set+0xa6>
 8006a54:	4c34      	ldr	r4, [pc, #208]	; (8006b28 <PS_LA_Set+0x16c>)
 8006a56:	fa24 f40b 	lsr.w	r4, r4, fp
 8006a5a:	43e4      	mvns	r4, r4
 8006a5c:	f014 0b01 	ands.w	fp, r4, #1
 8006a60:	d005      	beq.n	8006a6e <PS_LA_Set+0xb2>
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006a62:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8006a66:	4630      	mov	r0, r6
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006a68:	f000 fd40 	bl	80074ec <SCPI_ErrorPush>
 8006a6c:	e7b6      	b.n	80069dc <PS_LA_Set+0x20>
        daq_enable(&daq, 0);
 8006a6e:	4659      	mov	r1, fp
 8006a70:	482c      	ldr	r0, [pc, #176]	; (8006b24 <PS_LA_Set+0x168>)
 8006a72:	f7fe f9a1 	bl	8004db8 <daq_enable>
        daq_reset(&daq);
 8006a76:	482b      	ldr	r0, [pc, #172]	; (8006b24 <PS_LA_Set+0x168>)
 8006a78:	f7fe f969 	bl	8004d4e <daq_reset>
        daq.dis_hold = 1;
 8006a7c:	2401      	movs	r4, #1
 8006a7e:	f642 73b4 	movw	r3, #12212	; 0x2fb4
        daq_mem_set(&daq, 3); // safety guard
 8006a82:	2103      	movs	r1, #3
 8006a84:	4827      	ldr	r0, [pc, #156]	; (8006b24 <PS_LA_Set+0x168>)
        daq.dis_hold = 1;
 8006a86:	54fc      	strb	r4, [r7, r3]
        daq_mem_set(&daq, 3); // safety guard
 8006a88:	f7fe fa38 	bl	8004efc <daq_mem_set>
        int ret2 = daq_bit_set(&daq, B1);
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4825      	ldr	r0, [pc, #148]	; (8006b24 <PS_LA_Set+0x168>)
 8006a90:	f7fe fac4 	bl	800501c <daq_bit_set>
        int ret4 = daq_ch_set(&daq, 1, 1, 1, 1);
 8006a94:	4623      	mov	r3, r4
 8006a96:	4622      	mov	r2, r4
 8006a98:	4621      	mov	r1, r4
        int ret2 = daq_bit_set(&daq, B1);
 8006a9a:	4605      	mov	r5, r0
        int ret4 = daq_ch_set(&daq, 1, 1, 1, 1);
 8006a9c:	9400      	str	r4, [sp, #0]
 8006a9e:	4821      	ldr	r0, [pc, #132]	; (8006b24 <PS_LA_Set+0x168>)
 8006aa0:	f7fe fb7a 	bl	8005198 <daq_ch_set>
 8006aa4:	4680      	mov	r8, r0
        int ret3 = daq_fs_set(&daq, (int)p3);
 8006aa6:	9803      	ldr	r0, [sp, #12]
 8006aa8:	f7fa f902 	bl	8000cb0 <__aeabi_i2f>
 8006aac:	4601      	mov	r1, r0
 8006aae:	481d      	ldr	r0, [pc, #116]	; (8006b24 <PS_LA_Set+0x168>)
 8006ab0:	f7fe fafa 	bl	80050a8 <daq_fs_set>
        int ret1 = daq_mem_set(&daq, (int)p2);
 8006ab4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
        int ret3 = daq_fs_set(&daq, (int)p3);
 8006ab8:	4681      	mov	r9, r0
        int ret1 = daq_mem_set(&daq, (int)p2);
 8006aba:	481a      	ldr	r0, [pc, #104]	; (8006b24 <PS_LA_Set+0x168>)
 8006abc:	f7fe fa1e 	bl	8004efc <daq_mem_set>
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 8006ac0:	9b06      	ldr	r3, [sp, #24]
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 8006ac2:	9a07      	ldr	r2, [sp, #28]
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 8006ac4:	781b      	ldrb	r3, [r3, #0]
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 8006ac6:	7812      	ldrb	r2, [r2, #0]
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 8006ac8:	3b52      	subs	r3, #82	; 0x52
 8006aca:	bf18      	it	ne
 8006acc:	2301      	movne	r3, #1
 8006ace:	2a41      	cmp	r2, #65	; 0x41
        int ret1 = daq_mem_set(&daq, (int)p2);
 8006ad0:	4682      	mov	sl, r0
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 8006ad2:	9904      	ldr	r1, [sp, #16]
 8006ad4:	d021      	beq.n	8006b1a <PS_LA_Set+0x15e>
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 8006ad6:	2a4e      	cmp	r2, #78	; 0x4e
 8006ad8:	d003      	beq.n	8006ae2 <PS_LA_Set+0x126>
 8006ada:	2a53      	cmp	r2, #83	; 0x53
 8006adc:	bf14      	ite	ne
 8006ade:	2403      	movne	r4, #3
 8006ae0:	2402      	moveq	r4, #2
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 8006ae2:	9a05      	ldr	r2, [sp, #20]
 8006ae4:	480f      	ldr	r0, [pc, #60]	; (8006b24 <PS_LA_Set+0x168>)
 8006ae6:	e9cd 4200 	strd	r4, r2, [sp]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f7fe fec8 	bl	8005880 <daq_trig_set>
        if (ret1 + ret2 + ret3 + ret4 + ret5 == 0)
 8006af0:	eb05 030a 	add.w	r3, r5, sl
 8006af4:	444b      	add	r3, r9
 8006af6:	4443      	add	r3, r8
 8006af8:	1818      	adds	r0, r3, r0
 8006afa:	d1b2      	bne.n	8006a62 <PS_LA_Set+0xa6>
            daq.dis_hold = 0;
 8006afc:	f642 73b4 	movw	r3, #12212	; 0x2fb4
            daq_enable(&daq, 1);
 8006b00:	2101      	movs	r1, #1
            daq.dis_hold = 0;
 8006b02:	54f8      	strb	r0, [r7, r3]
            daq_enable(&daq, 1);
 8006b04:	4807      	ldr	r0, [pc, #28]	; (8006b24 <PS_LA_Set+0x168>)
 8006b06:	f7fe f957 	bl	8004db8 <daq_enable>
            SCPI_ResultText(context, SCPI_OK);
 8006b0a:	4908      	ldr	r1, [pc, #32]	; (8006b2c <PS_LA_Set+0x170>)
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f001 fb47 	bl	80081a0 <SCPI_ResultText>
            return SCPI_RES_OK;
 8006b12:	2001      	movs	r0, #1
    }
}
 8006b14:	b00b      	add	sp, #44	; 0x2c
 8006b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 8006b1a:	465c      	mov	r4, fp
 8006b1c:	e7e1      	b.n	8006ae2 <PS_LA_Set+0x126>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006b1e:	2101      	movs	r1, #1
 8006b20:	e7a2      	b.n	8006a68 <PS_LA_Set+0xac>
 8006b22:	bf00      	nop
 8006b24:	20000950 	.word	0x20000950
 8006b28:	00042009 	.word	0x00042009
 8006b2c:	0800aecc 	.word	0x0800aecc

08006b30 <PS_LA_SetQ>:

scpi_result_t PS_LA_SetQ(scpi_t * context)
{
    if (daq.mode == LA)
 8006b30:	f642 73b6 	movw	r3, #12214	; 0x2fb6
{
 8006b34:	b530      	push	{r4, r5, lr}
    if (daq.mode == LA)
 8006b36:	4c26      	ldr	r4, [pc, #152]	; (8006bd0 <PS_LA_SetQ+0xa0>)
{
 8006b38:	b0a9      	sub	sp, #164	; 0xa4
    if (daq.mode == LA)
 8006b3a:	5ce3      	ldrb	r3, [r4, r3]
{
 8006b3c:	4605      	mov	r5, r0
    if (daq.mode == LA)
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d140      	bne.n	8006bc4 <PS_LA_SetQ+0x94>
        char buff[100];
        char freq_s[30];
        char edge_s[2];
        char mode_s[2];

        sprint_fast(freq_s, "%s", daq.set.fs, 3);
 8006b42:	f642 7288 	movw	r2, #12168	; 0x2f88
 8006b46:	2303      	movs	r3, #3
 8006b48:	58a2      	ldr	r2, [r4, r2]
 8006b4a:	4922      	ldr	r1, [pc, #136]	; (8006bd4 <PS_LA_SetQ+0xa4>)
 8006b4c:	a807      	add	r0, sp, #28
 8006b4e:	f000 fb8b 	bl	8007268 <sprint_fast>
        edge_s[0] = daq.trig.set.edge == RISING ? 'R' : 'F';
 8006b52:	f642 73bd 	movw	r3, #12221	; 0x2fbd
 8006b56:	5ce3      	ldrb	r3, [r4, r3]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bf0c      	ite	eq
 8006b5c:	2352      	moveq	r3, #82	; 0x52
 8006b5e:	2346      	movne	r3, #70	; 0x46
 8006b60:	f88d 3014 	strb.w	r3, [sp, #20]
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 8006b64:	f642 73bc 	movw	r3, #12220	; 0x2fbc
 8006b68:	5ce3      	ldrb	r3, [r4, r3]
 8006b6a:	b33b      	cbz	r3, 8006bbc <PS_LA_SetQ+0x8c>
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d027      	beq.n	8006bc0 <PS_LA_SetQ+0x90>
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	bf0c      	ite	eq
 8006b74:	2353      	moveq	r3, #83	; 0x53
 8006b76:	2344      	movne	r3, #68	; 0x44
 8006b78:	f88d 3018 	strb.w	r3, [sp, #24]
            (daq.trig.set.mode == SINGLE ? 'S' : 'D'));
        edge_s[1] = '\0';
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f88d 3015 	strb.w	r3, [sp, #21]
        mode_s[1] = '\0';
 8006b82:	f88d 3019 	strb.w	r3, [sp, #25]

        int len = sprintf(buff, "%d,%s,%d,%s,%s,%d", daq.set.mem, freq_s,
 8006b86:	f642 738c 	movw	r3, #12172	; 0x2f8c
 8006b8a:	5ae2      	ldrh	r2, [r4, r3]
 8006b8c:	f642 73b8 	movw	r3, #12216	; 0x2fb8
 8006b90:	58e3      	ldr	r3, [r4, r3]
 8006b92:	4911      	ldr	r1, [pc, #68]	; (8006bd8 <PS_LA_SetQ+0xa8>)
 8006b94:	9303      	str	r3, [sp, #12]
 8006b96:	ab06      	add	r3, sp, #24
 8006b98:	9302      	str	r3, [sp, #8]
 8006b9a:	ab05      	add	r3, sp, #20
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <PS_LA_SetQ+0xac>)
 8006ba0:	a80f      	add	r0, sp, #60	; 0x3c
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	ab07      	add	r3, sp, #28
 8006ba8:	f002 f95e 	bl	8008e68 <siprintf>
                          daq.trig.set.ch, edge_s, mode_s, daq.trig.set.pretrigger);

        SCPI_ResultCharacters(context, buff, len);
 8006bac:	a90f      	add	r1, sp, #60	; 0x3c
 8006bae:	4602      	mov	r2, r0
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	f001 fadf 	bl	8008174 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 8006bb6:	2001      	movs	r0, #1
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }
}
 8006bb8:	b029      	add	sp, #164	; 0xa4
 8006bba:	bd30      	pop	{r4, r5, pc}
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 8006bbc:	2341      	movs	r3, #65	; 0x41
 8006bbe:	e7db      	b.n	8006b78 <PS_LA_SetQ+0x48>
 8006bc0:	234e      	movs	r3, #78	; 0x4e
 8006bc2:	e7d9      	b.n	8006b78 <PS_LA_SetQ+0x48>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	f000 fc91 	bl	80074ec <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006bca:	f04f 30ff 	mov.w	r0, #4294967295
 8006bce:	e7f3      	b.n	8006bb8 <PS_LA_SetQ+0x88>
 8006bd0:	20000950 	.word	0x20000950
 8006bd4:	0800af4f 	.word	0x0800af4f
 8006bd8:	0800aea8 	.word	0x0800aea8
 8006bdc:	20003910 	.word	0x20003910

08006be0 <PS_CNTR_ReadQ>:

/************************* [CNTR Actions] *************************/

scpi_result_t PS_CNTR_ReadQ(scpi_t * context)
{
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	4606      	mov	r6, r0
 8006be4:	b0a2      	sub	sp, #136	; 0x88
    float f = cntr_read(&cntr);
 8006be6:	4838      	ldr	r0, [pc, #224]	; (8006cc8 <PS_CNTR_ReadQ+0xe8>)
 8006be8:	f7fd fe16 	bl	8004818 <cntr_read>

    if (f > -1)
 8006bec:	4937      	ldr	r1, [pc, #220]	; (8006ccc <PS_CNTR_ReadQ+0xec>)
    float f = cntr_read(&cntr);
 8006bee:	4604      	mov	r4, r0
    if (f > -1)
 8006bf0:	f7fa fa6e 	bl	80010d0 <__aeabi_fcmpgt>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d058      	beq.n	8006caa <PS_CNTR_ReadQ+0xca>
    {
        char f_s[15];
        char T_s[15];

        float T = 1.0 / f;
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006bfe:	f7fa f95f 	bl	8000ec0 <__aeabi_fdiv>

        if (f < 1000)
 8006c02:	4933      	ldr	r1, [pc, #204]	; (8006cd0 <PS_CNTR_ReadQ+0xf0>)
        float T = 1.0 / f;
 8006c04:	4605      	mov	r5, r0
        if (f < 1000)
 8006c06:	4620      	mov	r0, r4
 8006c08:	f7fa fa44 	bl	8001094 <__aeabi_fcmplt>
 8006c0c:	b1f8      	cbz	r0, 8006c4e <PS_CNTR_ReadQ+0x6e>
            sprint_fast(f_s, "%s Hz", f, 2);
 8006c0e:	2302      	movs	r3, #2
 8006c10:	4622      	mov	r2, r4
 8006c12:	4930      	ldr	r1, [pc, #192]	; (8006cd4 <PS_CNTR_ReadQ+0xf4>)
        else if (f < 1000000)
            sprint_fast(f_s, "%s kHz", f / 1000.0, 2);
        else //if (f < 1000000000)
            sprint_fast(f_s, "%s MHz", f / 1000000.0, 2);
 8006c14:	a801      	add	r0, sp, #4
 8006c16:	f000 fb27 	bl	8007268 <sprint_fast>

        if (T >= 1)
 8006c1a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f7fa fa4c 	bl	80010bc <__aeabi_fcmpge>
 8006c24:	b340      	cbz	r0, 8006c78 <PS_CNTR_ReadQ+0x98>
            sprint_fast(T_s, "%s s", T, 2);
 8006c26:	2302      	movs	r3, #2
 8006c28:	462a      	mov	r2, r5
 8006c2a:	492b      	ldr	r1, [pc, #172]	; (8006cd8 <PS_CNTR_ReadQ+0xf8>)
        else if (T >= 0.001)
            sprint_fast(T_s, "%s ms", T * 1000.0, 2);
        else //if (T >= 0.000001)
            sprint_fast(T_s, "%s us", T * 1000000.0, 2);
 8006c2c:	a805      	add	r0, sp, #20
 8006c2e:	f000 fb1b 	bl	8007268 <sprint_fast>

        char buff[100];
        int len = sprintf(buff, "%s,%s", f_s, T_s);
 8006c32:	ab05      	add	r3, sp, #20
 8006c34:	aa01      	add	r2, sp, #4
 8006c36:	4929      	ldr	r1, [pc, #164]	; (8006cdc <PS_CNTR_ReadQ+0xfc>)
 8006c38:	a809      	add	r0, sp, #36	; 0x24
 8006c3a:	f002 f915 	bl	8008e68 <siprintf>

        SCPI_ResultCharacters(context, buff, len);
 8006c3e:	a909      	add	r1, sp, #36	; 0x24
 8006c40:	4602      	mov	r2, r0
 8006c42:	4630      	mov	r0, r6
 8006c44:	f001 fa96 	bl	8008174 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 8006c48:	2001      	movs	r0, #1
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_TIME_OUT);
        return SCPI_RES_ERR;
    }
}
 8006c4a:	b022      	add	sp, #136	; 0x88
 8006c4c:	bd70      	pop	{r4, r5, r6, pc}
        else if (f < 1000000)
 8006c4e:	4924      	ldr	r1, [pc, #144]	; (8006ce0 <PS_CNTR_ReadQ+0x100>)
 8006c50:	4620      	mov	r0, r4
 8006c52:	f7fa fa1f 	bl	8001094 <__aeabi_fcmplt>
 8006c56:	b138      	cbz	r0, 8006c68 <PS_CNTR_ReadQ+0x88>
            sprint_fast(f_s, "%s kHz", f / 1000.0, 2);
 8006c58:	491d      	ldr	r1, [pc, #116]	; (8006cd0 <PS_CNTR_ReadQ+0xf0>)
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f7fa f930 	bl	8000ec0 <__aeabi_fdiv>
 8006c60:	2302      	movs	r3, #2
 8006c62:	4602      	mov	r2, r0
 8006c64:	491f      	ldr	r1, [pc, #124]	; (8006ce4 <PS_CNTR_ReadQ+0x104>)
 8006c66:	e7d5      	b.n	8006c14 <PS_CNTR_ReadQ+0x34>
            sprint_fast(f_s, "%s MHz", f / 1000000.0, 2);
 8006c68:	491d      	ldr	r1, [pc, #116]	; (8006ce0 <PS_CNTR_ReadQ+0x100>)
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f7fa f928 	bl	8000ec0 <__aeabi_fdiv>
 8006c70:	2302      	movs	r3, #2
 8006c72:	4602      	mov	r2, r0
 8006c74:	491c      	ldr	r1, [pc, #112]	; (8006ce8 <PS_CNTR_ReadQ+0x108>)
 8006c76:	e7cd      	b.n	8006c14 <PS_CNTR_ReadQ+0x34>
        else if (T >= 0.001)
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f7f9 fbdf 	bl	800043c <__aeabi_f2d>
 8006c7e:	a310      	add	r3, pc, #64	; (adr r3, 8006cc0 <PS_CNTR_ReadQ+0xe0>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 feb8 	bl	80009f8 <__aeabi_dcmpge>
 8006c88:	b138      	cbz	r0, 8006c9a <PS_CNTR_ReadQ+0xba>
            sprint_fast(T_s, "%s ms", T * 1000.0, 2);
 8006c8a:	4911      	ldr	r1, [pc, #68]	; (8006cd0 <PS_CNTR_ReadQ+0xf0>)
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f7fa f863 	bl	8000d58 <__aeabi_fmul>
 8006c92:	2302      	movs	r3, #2
 8006c94:	4602      	mov	r2, r0
 8006c96:	4915      	ldr	r1, [pc, #84]	; (8006cec <PS_CNTR_ReadQ+0x10c>)
 8006c98:	e7c8      	b.n	8006c2c <PS_CNTR_ReadQ+0x4c>
            sprint_fast(T_s, "%s us", T * 1000000.0, 2);
 8006c9a:	4911      	ldr	r1, [pc, #68]	; (8006ce0 <PS_CNTR_ReadQ+0x100>)
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f7fa f85b 	bl	8000d58 <__aeabi_fmul>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	4912      	ldr	r1, [pc, #72]	; (8006cf0 <PS_CNTR_ReadQ+0x110>)
 8006ca8:	e7c0      	b.n	8006c2c <PS_CNTR_ReadQ+0x4c>
        SCPI_ErrorPush(context, SCPI_ERROR_TIME_OUT);
 8006caa:	4630      	mov	r0, r6
 8006cac:	f46f 71b6 	mvn.w	r1, #364	; 0x16c
 8006cb0:	f000 fc1c 	bl	80074ec <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	e7c7      	b.n	8006c4a <PS_CNTR_ReadQ+0x6a>
 8006cba:	bf00      	nop
 8006cbc:	f3af 8000 	nop.w
 8006cc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006cc4:	3f50624d 	.word	0x3f50624d
 8006cc8:	2000087c 	.word	0x2000087c
 8006ccc:	bf800000 	.word	0xbf800000
 8006cd0:	447a0000 	.word	0x447a0000
 8006cd4:	0800ae83 	.word	0x0800ae83
 8006cd8:	0800ae97 	.word	0x0800ae97
 8006cdc:	0800af4c 	.word	0x0800af4c
 8006ce0:	49742400 	.word	0x49742400
 8006ce4:	0800ae89 	.word	0x0800ae89
 8006ce8:	0800ae90 	.word	0x0800ae90
 8006cec:	0800ae9c 	.word	0x0800ae9c
 8006cf0:	0800aea2 	.word	0x0800aea2

08006cf4 <PS_SGEN_Set>:

/************************* [SGEN Actions] *************************/
scpi_result_t PS_SGEN_Set(scpi_t * context)
{
 8006cf4:	b508      	push	{r3, lr}
    LL_DAC_SetOutputBuffer(PS_DAC, PS_DAC_CH, p1);

    SCPI_ResultText(context, SCPI_OK);
    return SCPI_RES_OK;
#else
    SCPI_ErrorPush(context, SCPI_ERROR_DAC_NA);
 8006cf6:	4903      	ldr	r1, [pc, #12]	; (8006d04 <PS_SGEN_Set+0x10>)
 8006cf8:	f000 fbf8 	bl	80074ec <SCPI_ErrorPush>
    return SCPI_RES_ERR;
#endif
}
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	bd08      	pop	{r3, pc}
 8006d02:	bf00      	nop
 8006d04:	fffffe8e 	.word	0xfffffe8e

08006d08 <PS_PWM_SetQ>:

/************************* [PWM Actions] *************************/

scpi_result_t PS_PWM_SetQ(scpi_t * context)
{
 8006d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    char buff_freq[10];
    char buff_duty1[10];
    char buff_duty2[10];

    float freq = pwm.ch1.freq;
    float duty1 = pwm.ch1.duty;
 8006d0c:	4a18      	ldr	r2, [pc, #96]	; (8006d70 <PS_PWM_SetQ+0x68>)
    float duty2 = pwm.ch2.duty;
    int offset2 = pwm.ch2.offset;
    uint8_t en1 = pwm.ch1.enabled;
    uint8_t en2 = pwm.ch2.enabled;

    sprint_fast(buff_freq, "%s", freq, 4);
 8006d0e:	4c19      	ldr	r4, [pc, #100]	; (8006d74 <PS_PWM_SetQ+0x6c>)
{
 8006d10:	b09c      	sub	sp, #112	; 0x70
    float duty1 = pwm.ch1.duty;
 8006d12:	6895      	ldr	r5, [r2, #8]
    float duty2 = pwm.ch2.duty;
 8006d14:	f8d2 a020 	ldr.w	sl, [r2, #32]
    int offset2 = pwm.ch2.offset;
 8006d18:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
    uint8_t en1 = pwm.ch1.enabled;
 8006d1a:	f892 8000 	ldrb.w	r8, [r2]
    uint8_t en2 = pwm.ch2.enabled;
 8006d1e:	f892 9018 	ldrb.w	r9, [r2, #24]
{
 8006d22:	4606      	mov	r6, r0
    sprint_fast(buff_freq, "%s", freq, 4);
 8006d24:	4621      	mov	r1, r4
 8006d26:	a804      	add	r0, sp, #16
 8006d28:	2304      	movs	r3, #4
 8006d2a:	6852      	ldr	r2, [r2, #4]
 8006d2c:	f000 fa9c 	bl	8007268 <sprint_fast>
    sprint_fast(buff_duty1, "%s", duty1, 4);
 8006d30:	462a      	mov	r2, r5
 8006d32:	4621      	mov	r1, r4
 8006d34:	a807      	add	r0, sp, #28
    sprint_fast(buff_duty2, "%s", duty2, 4);
 8006d36:	ad0a      	add	r5, sp, #40	; 0x28
    sprint_fast(buff_duty1, "%s", duty1, 4);
 8006d38:	2304      	movs	r3, #4
 8006d3a:	f000 fa95 	bl	8007268 <sprint_fast>
    sprint_fast(buff_duty2, "%s", duty2, 4);
 8006d3e:	4652      	mov	r2, sl
 8006d40:	4621      	mov	r1, r4
 8006d42:	4628      	mov	r0, r5
 8006d44:	2304      	movs	r3, #4
 8006d46:	f000 fa8f 	bl	8007268 <sprint_fast>
    int len = sprintf(buff, "%s,%s,%s,%d,%d,%d", buff_freq, buff_duty1, buff_duty2, offset2, en1, en2);
 8006d4a:	ab07      	add	r3, sp, #28
 8006d4c:	aa04      	add	r2, sp, #16
 8006d4e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006d52:	e9cd 5700 	strd	r5, r7, [sp]
 8006d56:	4908      	ldr	r1, [pc, #32]	; (8006d78 <PS_PWM_SetQ+0x70>)
 8006d58:	a80d      	add	r0, sp, #52	; 0x34
 8006d5a:	f002 f885 	bl	8008e68 <siprintf>

    SCPI_ResultCharacters(context, buff, len);
 8006d5e:	a90d      	add	r1, sp, #52	; 0x34
 8006d60:	4602      	mov	r2, r0
 8006d62:	4630      	mov	r0, r6
 8006d64:	f001 fa06 	bl	8008174 <SCPI_ResultCharacters>

    return SCPI_RES_OK;
}
 8006d68:	2001      	movs	r0, #1
 8006d6a:	b01c      	add	sp, #112	; 0x70
 8006d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d70:	200039a4 	.word	0x200039a4
 8006d74:	0800af4f 	.word	0x0800af4f
 8006d78:	0800aeba 	.word	0x0800aeba

08006d7c <PS_PWM_Set>:

scpi_result_t PS_PWM_Set(scpi_t * context)
{
 8006d7c:	b510      	push	{r4, lr}
 8006d7e:	b08a      	sub	sp, #40	; 0x28
    uint32_t param1, param2, param3, param4, param5, param6;

    if (!SCPI_ParamUInt32(context, &param1, TRUE) ||
 8006d80:	2201      	movs	r2, #1
 8006d82:	a904      	add	r1, sp, #16
{
 8006d84:	4604      	mov	r4, r0
    if (!SCPI_ParamUInt32(context, &param1, TRUE) ||
 8006d86:	f001 fbce 	bl	8008526 <SCPI_ParamUInt32>
 8006d8a:	b1e8      	cbz	r0, 8006dc8 <PS_PWM_Set+0x4c>
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	a905      	add	r1, sp, #20
 8006d90:	4620      	mov	r0, r4
 8006d92:	f001 fbc8 	bl	8008526 <SCPI_ParamUInt32>
    if (!SCPI_ParamUInt32(context, &param1, TRUE) ||
 8006d96:	b1b8      	cbz	r0, 8006dc8 <PS_PWM_Set+0x4c>
        !SCPI_ParamUInt32(context, &param3, TRUE) ||
 8006d98:	2201      	movs	r2, #1
 8006d9a:	a906      	add	r1, sp, #24
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f001 fbc2 	bl	8008526 <SCPI_ParamUInt32>
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
 8006da2:	b188      	cbz	r0, 8006dc8 <PS_PWM_Set+0x4c>
        !SCPI_ParamUInt32(context, &param4, TRUE) ||
 8006da4:	2201      	movs	r2, #1
 8006da6:	a907      	add	r1, sp, #28
 8006da8:	4620      	mov	r0, r4
 8006daa:	f001 fbbc 	bl	8008526 <SCPI_ParamUInt32>
        !SCPI_ParamUInt32(context, &param3, TRUE) ||
 8006dae:	b158      	cbz	r0, 8006dc8 <PS_PWM_Set+0x4c>
        !SCPI_ParamUInt32(context, &param5, TRUE) ||
 8006db0:	2201      	movs	r2, #1
 8006db2:	a908      	add	r1, sp, #32
 8006db4:	4620      	mov	r0, r4
 8006db6:	f001 fbb6 	bl	8008526 <SCPI_ParamUInt32>
        !SCPI_ParamUInt32(context, &param4, TRUE) ||
 8006dba:	b128      	cbz	r0, 8006dc8 <PS_PWM_Set+0x4c>
        !SCPI_ParamUInt32(context, &param6, TRUE))
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	a909      	add	r1, sp, #36	; 0x24
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f001 fbb0 	bl	8008526 <SCPI_ParamUInt32>
        !SCPI_ParamUInt32(context, &param5, TRUE) ||
 8006dc6:	b940      	cbnz	r0, 8006dda <PS_PWM_Set+0x5e>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8006dce:	f000 fb8d 	bl	80074ec <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006dd2:	f04f 30ff 	mov.w	r0, #4294967295
        return SCPI_RES_ERR;
    }

    SCPI_ResultText(context, SCPI_OK);
    return SCPI_RES_OK;
}
 8006dd6:	b00a      	add	sp, #40	; 0x28
 8006dd8:	bd10      	pop	{r4, pc}
    int ret = pwm_set(&pwm, param1, param2, param3, param4, param5, param6);
 8006dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ddc:	9904      	ldr	r1, [sp, #16]
 8006dde:	9302      	str	r3, [sp, #8]
 8006de0:	9b08      	ldr	r3, [sp, #32]
 8006de2:	4808      	ldr	r0, [pc, #32]	; (8006e04 <PS_PWM_Set+0x88>)
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	9b07      	ldr	r3, [sp, #28]
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8006dee:	f000 f81b 	bl	8006e28 <pwm_set>
    if (ret != 0)
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d1e8      	bne.n	8006dc8 <PS_PWM_Set+0x4c>
    SCPI_ResultText(context, SCPI_OK);
 8006df6:	4904      	ldr	r1, [pc, #16]	; (8006e08 <PS_PWM_Set+0x8c>)
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f001 f9d1 	bl	80081a0 <SCPI_ResultText>
    return SCPI_RES_OK;
 8006dfe:	2001      	movs	r0, #1
 8006e00:	e7e9      	b.n	8006dd6 <PS_PWM_Set+0x5a>
 8006e02:	bf00      	nop
 8006e04:	200039a4 	.word	0x200039a4
 8006e08:	0800aecc 	.word	0x0800aecc

08006e0c <pwm_init>:
#include "main.h"


void pwm_init(pwm_data_t* self)
{
    self->ch1.enabled = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	7003      	strb	r3, [r0, #0]
    self->ch2.enabled = 0;
 8006e10:	7603      	strb	r3, [r0, #24]
    self->ch1.freq = 1000;
 8006e12:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <pwm_init+0x14>)
 8006e14:	6043      	str	r3, [r0, #4]
    self->ch2.freq = 1000;
 8006e16:	61c3      	str	r3, [r0, #28]
    self->ch1.duty = 50;
 8006e18:	4b02      	ldr	r3, [pc, #8]	; (8006e24 <pwm_init+0x18>)
 8006e1a:	6083      	str	r3, [r0, #8]
    self->ch2.duty = 50;
 8006e1c:	6203      	str	r3, [r0, #32]
}
 8006e1e:	4770      	bx	lr
 8006e20:	447a0000 	.word	0x447a0000
 8006e24:	42480000 	.word	0x42480000

08006e28 <pwm_set>:

int pwm_set(pwm_data_t* self, int freq, int duty1, int duty2, int offset2, int enable1, int enable2)
{
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (freq < 0 || freq > PS_TIM_PWM1_MAX || duty1 < 0 || duty1 > 100 ||
 8006e2c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
{
 8006e30:	b085      	sub	sp, #20
 8006e32:	4604      	mov	r4, r0
 8006e34:	e9dd 700e 	ldrd	r7, r0, [sp, #56]	; 0x38
 8006e38:	468c      	mov	ip, r1
 8006e3a:	4692      	mov	sl, r2
 8006e3c:	4699      	mov	r9, r3
 8006e3e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    if (freq < 0 || freq > PS_TIM_PWM1_MAX || duty1 < 0 || duty1 > 100 ||
 8006e42:	f080 809c 	bcs.w	8006f7e <pwm_set+0x156>
 8006e46:	2a64      	cmp	r2, #100	; 0x64
 8006e48:	f200 8099 	bhi.w	8006f7e <pwm_set+0x156>
        duty2 < 0 || duty2 > 100 || offset2 < 0 || offset2 > 100)
 8006e4c:	2b64      	cmp	r3, #100	; 0x64
 8006e4e:	f200 8096 	bhi.w	8006f7e <pwm_set+0x156>
 8006e52:	2f64      	cmp	r7, #100	; 0x64
 8006e54:	f200 8093 	bhi.w	8006f7e <pwm_set+0x156>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006e58:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8006e5c:	6833      	ldr	r3, [r6, #0]
 8006e5e:	4d49      	ldr	r5, [pc, #292]	; (8006f84 <pwm_set+0x15c>)
 8006e60:	f023 0301 	bic.w	r3, r3, #1
 8006e64:	6033      	str	r3, [r6, #0]
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	602b      	str	r3, [r5, #0]
    }

    LL_TIM_DisableCounter(PS_TIM_PWM1);
    LL_TIM_DisableCounter(PS_TIM_PWM2);

    if (!enable1)
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	f000 8082 	beq.w	8006f78 <pwm_set+0x150>
        return 0;

    int prescaler = 1;
    int reload = 0;
 8006e74:	f04f 0b00 	mov.w	fp, #0
    int prescaler = 1;
 8006e78:	2301      	movs	r3, #1
    int reload = 0;
 8006e7a:	a904      	add	r1, sp, #16
 8006e7c:	f841 bd04 	str.w	fp, [r1, #-4]!
    int prescaler = 1;
 8006e80:	9302      	str	r3, [sp, #8]

    self->ch1.enabled = enable1;
    self->ch1.freq = get_freq(&prescaler, &reload, PS_TIM_PWM1_MAX, PS_TIM_PWM1_FREQ, freq);
 8006e82:	f8cd c000 	str.w	ip, [sp]
    self->ch1.enabled = enable1;
 8006e86:	7020      	strb	r0, [r4, #0]
    self->ch1.freq = get_freq(&prescaler, &reload, PS_TIM_PWM1_MAX, PS_TIM_PWM1_FREQ, freq);
 8006e88:	4b3f      	ldr	r3, [pc, #252]	; (8006f88 <pwm_set+0x160>)
 8006e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e8e:	a802      	add	r0, sp, #8
 8006e90:	f000 f9a6 	bl	80071e0 <get_freq>
    self->ch1.prescaler = prescaler;
    self->ch1.reload = reload;
 8006e94:	9b03      	ldr	r3, [sp, #12]
    self->ch1.prescaler = prescaler;
 8006e96:	9a02      	ldr	r2, [sp, #8]
    self->ch1.offset = 0;
 8006e98:	e9c4 3b04 	strd	r3, fp, [r4, #16]
    self->ch1.prescaler = prescaler;
 8006e9c:	60e2      	str	r2, [r4, #12]

    self->ch2.enabled = enable2;
    self->ch2.freq = self->ch1.freq;
    self->ch2.prescaler = prescaler;
    self->ch2.reload = reload;
 8006e9e:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    self->ch1.freq = get_freq(&prescaler, &reload, PS_TIM_PWM1_MAX, PS_TIM_PWM1_FREQ, freq);
 8006ea2:	6060      	str	r0, [r4, #4]
    self->ch2.freq = self->ch1.freq;
 8006ea4:	61e0      	str	r0, [r4, #28]
    self->ch2.enabled = enable2;
 8006ea6:	f884 8018 	strb.w	r8, [r4, #24]
    LL_TIM_SetAutoReload(PS_TIM_PWM1, reload);
    LL_TIM_SetAutoReload(PS_TIM_PWM2, reload);
    LL_TIM_SetPrescaler(PS_TIM_PWM1, prescaler);
    LL_TIM_SetPrescaler(PS_TIM_PWM2, prescaler);

    int compare1 = (duty1 / (float)100) * reload;
 8006eaa:	4618      	mov	r0, r3
    self->ch2.offset = offset2;
 8006eac:	62e7      	str	r7, [r4, #44]	; 0x2c
  WRITE_REG(TIMx->ARR, AutoReload);
 8006eae:	62f3      	str	r3, [r6, #44]	; 0x2c
 8006eb0:	62eb      	str	r3, [r5, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8006eb2:	62b2      	str	r2, [r6, #40]	; 0x28
 8006eb4:	62aa      	str	r2, [r5, #40]	; 0x28
    int compare1 = (duty1 / (float)100) * reload;
 8006eb6:	f7f9 fefb 	bl	8000cb0 <__aeabi_i2f>
 8006eba:	4683      	mov	fp, r0
 8006ebc:	4650      	mov	r0, sl
 8006ebe:	f7f9 fef7 	bl	8000cb0 <__aeabi_i2f>
 8006ec2:	4932      	ldr	r1, [pc, #200]	; (8006f8c <pwm_set+0x164>)
 8006ec4:	f7f9 fffc 	bl	8000ec0 <__aeabi_fdiv>
 8006ec8:	4659      	mov	r1, fp
 8006eca:	f7f9 ff45 	bl	8000d58 <__aeabi_fmul>
 8006ece:	f7fa f909 	bl	80010e4 <__aeabi_f2iz>
 8006ed2:	4682      	mov	sl, r0
    float real_duty1 = ((float)compare1 / (float)reload) * (float)100;

    int compare2 = (duty2 / (float)100) * reload;
 8006ed4:	4648      	mov	r0, r9
 8006ed6:	f7f9 feeb 	bl	8000cb0 <__aeabi_i2f>
 8006eda:	492c      	ldr	r1, [pc, #176]	; (8006f8c <pwm_set+0x164>)
 8006edc:	f7f9 fff0 	bl	8000ec0 <__aeabi_fdiv>
 8006ee0:	4659      	mov	r1, fp
 8006ee2:	f7f9 ff39 	bl	8000d58 <__aeabi_fmul>
 8006ee6:	f7fa f8fd 	bl	80010e4 <__aeabi_f2iz>
 8006eea:	4681      	mov	r9, r0
    float real_duty1 = ((float)compare1 / (float)reload) * (float)100;
 8006eec:	4650      	mov	r0, sl
 8006eee:	f7f9 fedf 	bl	8000cb0 <__aeabi_i2f>
 8006ef2:	4659      	mov	r1, fp
 8006ef4:	f7f9 ffe4 	bl	8000ec0 <__aeabi_fdiv>
 8006ef8:	4924      	ldr	r1, [pc, #144]	; (8006f8c <pwm_set+0x164>)
 8006efa:	f7f9 ff2d 	bl	8000d58 <__aeabi_fmul>
    float real_duty2 = ((float)compare2 / (float)reload) * (float)100;

    self->ch1.duty = real_duty1;
 8006efe:	60a0      	str	r0, [r4, #8]
    float real_duty2 = ((float)compare2 / (float)reload) * (float)100;
 8006f00:	4648      	mov	r0, r9
 8006f02:	f7f9 fed5 	bl	8000cb0 <__aeabi_i2f>
 8006f06:	4659      	mov	r1, fp
 8006f08:	f7f9 ffda 	bl	8000ec0 <__aeabi_fdiv>
 8006f0c:	491f      	ldr	r1, [pc, #124]	; (8006f8c <pwm_set+0x164>)
 8006f0e:	f7f9 ff23 	bl	8000d58 <__aeabi_fmul>
    self->ch2.duty = real_duty2;
 8006f12:	6220      	str	r0, [r4, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006f14:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
 8006f18:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34

    LL_TIM_OC_SetCompareCH1(PS_TIM_PWM1, compare1);
    LL_TIM_OC_SetCompareCH1(PS_TIM_PWM2, compare2);

    if (offset2 > 0)
 8006f1c:	b1b7      	cbz	r7, 8006f4c <pwm_set+0x124>
        LL_TIM_SetCounter(PS_TIM_PWM2, (int)((float)offset2 / 100.0 * (float)reload));
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f7f9 fec6 	bl	8000cb0 <__aeabi_i2f>
 8006f24:	f7f9 fa8a 	bl	800043c <__aeabi_f2d>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <pwm_set+0x168>)
 8006f2c:	f7f9 fc08 	bl	8000740 <__aeabi_ddiv>
 8006f30:	4606      	mov	r6, r0
 8006f32:	4658      	mov	r0, fp
 8006f34:	460f      	mov	r7, r1
 8006f36:	f7f9 fa81 	bl	800043c <__aeabi_f2d>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4630      	mov	r0, r6
 8006f40:	4639      	mov	r1, r7
 8006f42:	f7f9 fad3 	bl	80004ec <__aeabi_dmul>
 8006f46:	f7f9 fd81 	bl	8000a4c <__aeabi_d2iz>
  WRITE_REG(TIMx->CNT, Counter);
 8006f4a:	6268      	str	r0, [r5, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8006f4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f50:	6a13      	ldr	r3, [r2, #32]
 8006f52:	f043 0301 	orr.w	r3, r3, #1
 8006f56:	6213      	str	r3, [r2, #32]

    if (enable1)
        LL_TIM_CC_EnableChannel(PS_TIM_PWM1, PS_TIM_PWM1_CH);

    if (enable2)
 8006f58:	f1b8 0f00 	cmp.w	r8, #0
 8006f5c:	d005      	beq.n	8006f6a <pwm_set+0x142>
 8006f5e:	f8d2 3820 	ldr.w	r3, [r2, #2080]	; 0x820
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	f8c2 3820 	str.w	r3, [r2, #2080]	; 0x820
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006f6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
        LL_TIM_CC_EnableChannel(PS_TIM_PWM2, PS_TIM_PWM2_CH);

    LL_TIM_EnableCounter(PS_TIM_PWM1);

    return 0;
 8006f6e:	2000      	movs	r0, #0
 8006f70:	6813      	ldr	r3, [r2, #0]
 8006f72:	f043 0301 	orr.w	r3, r3, #1
 8006f76:	6013      	str	r3, [r2, #0]
}
 8006f78:	b005      	add	sp, #20
 8006f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 8006f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f82:	e7f9      	b.n	8006f78 <pwm_set+0x150>
 8006f84:	40000800 	.word	0x40000800
 8006f88:	02255100 	.word	0x02255100
 8006f8c:	42c80000 	.word	0x42c80000
 8006f90:	40590000 	.word	0x40590000

08006f94 <assert2>:

#include "utility.h"
#include "cfg.h"

void assert2(const char *file, uint32_t line)
{
 8006f94:	e7fe      	b.n	8006f94 <assert2>

08006f96 <get_avg_from_circ>:
    while(1);
    //__asm("bkpt 3");
}

void get_avg_from_circ(int last_idx, int ch_num, int avg_num, void* buff, int daq_bits, float* v1, float* v2, float* v3, float* v4, float* v5)
{
 8006f96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	e9dd 860d 	ldrd	r8, r6, [sp, #52]	; 0x34
 8006fa2:	460d      	mov	r5, r1
 8006fa4:	9201      	str	r2, [sp, #4]
 8006fa6:	469b      	mov	fp, r3
    int total = ch_num * avg_num;
 8006fa8:	fb02 fa01 	mul.w	sl, r2, r1
    ASSERT(v1 != NULL && total > 0 && buff != NULL);
 8006fac:	f1b8 0f00 	cmp.w	r8, #0
 8006fb0:	d005      	beq.n	8006fbe <get_avg_from_circ+0x28>
 8006fb2:	f1ba 0f00 	cmp.w	sl, #0
 8006fb6:	dd02      	ble.n	8006fbe <get_avg_from_circ+0x28>
 8006fb8:	f1bb 0f00 	cmp.w	fp, #0
 8006fbc:	d100      	bne.n	8006fc0 <get_avg_from_circ+0x2a>
 8006fbe:	e7fe      	b.n	8006fbe <get_avg_from_circ+0x28>

    for (int i = last_idx, j = 0; j < total; j++, i++)
 8006fc0:	f04f 0900 	mov.w	r9, #0
    {
        if (i >= total)
            i = 0;
 8006fc4:	45a2      	cmp	sl, r4
 8006fc6:	bfd8      	it	le
 8006fc8:	2400      	movle	r4, #0

        float val;
        if (daq_bits == 12)
 8006fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fcc:	2b0c      	cmp	r3, #12
            val = (float)(*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 8006fce:	bf0c      	ite	eq
 8006fd0:	f83b 0014 	ldrheq.w	r0, [fp, r4, lsl #1]
        else
            val = (float)(((uint8_t*)buff)[i]);
 8006fd4:	f81b 0004 	ldrbne.w	r0, [fp, r4]
 8006fd8:	f7f9 fe66 	bl	8000ca8 <__aeabi_ui2f>

        if (i % ch_num == 0)
 8006fdc:	fb94 f3f5 	sdiv	r3, r4, r5
 8006fe0:	fb05 4313 	mls	r3, r5, r3, r4
            val = (float)(((uint8_t*)buff)[i]);
 8006fe4:	4601      	mov	r1, r0
        if (i % ch_num == 0)
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d135      	bne.n	8007056 <get_avg_from_circ+0xc0>
            *v1 += val;
 8006fea:	f8d8 0000 	ldr.w	r0, [r8]
 8006fee:	f7f9 fdab 	bl	8000b48 <__addsf3>
 8006ff2:	f8c8 0000 	str.w	r0, [r8]
    for (int i = last_idx, j = 0; j < total; j++, i++)
 8006ff6:	f109 0901 	add.w	r9, r9, #1
 8006ffa:	45ca      	cmp	sl, r9
 8006ffc:	f104 0401 	add.w	r4, r4, #1
 8007000:	d1e0      	bne.n	8006fc4 <get_avg_from_circ+0x2e>
        else if (ch_num > 3 && i % ch_num == 3)
            *v4 += val;
        else if (ch_num > 4)  // && i % ch_num == 4)
            *v5 += val;
    }
    *v1 /= avg_num;
 8007002:	9801      	ldr	r0, [sp, #4]
 8007004:	f7f9 fe54 	bl	8000cb0 <__aeabi_i2f>
 8007008:	4601      	mov	r1, r0
 800700a:	4604      	mov	r4, r0
 800700c:	f8d8 0000 	ldr.w	r0, [r8]
 8007010:	f7f9 ff56 	bl	8000ec0 <__aeabi_fdiv>
 8007014:	f8c8 0000 	str.w	r0, [r8]
    if (v2 != NULL) *v2 /= avg_num;
 8007018:	b126      	cbz	r6, 8007024 <get_avg_from_circ+0x8e>
 800701a:	6830      	ldr	r0, [r6, #0]
 800701c:	4621      	mov	r1, r4
 800701e:	f7f9 ff4f 	bl	8000ec0 <__aeabi_fdiv>
 8007022:	6030      	str	r0, [r6, #0]
    if (v3 != NULL) *v3 /= avg_num;
 8007024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007026:	b12b      	cbz	r3, 8007034 <get_avg_from_circ+0x9e>
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	4621      	mov	r1, r4
 800702c:	f7f9 ff48 	bl	8000ec0 <__aeabi_fdiv>
 8007030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007032:	6018      	str	r0, [r3, #0]
    if (v4 != NULL) *v4 /= avg_num;
 8007034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007036:	b12b      	cbz	r3, 8007044 <get_avg_from_circ+0xae>
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	4621      	mov	r1, r4
 800703c:	f7f9 ff40 	bl	8000ec0 <__aeabi_fdiv>
 8007040:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007042:	6018      	str	r0, [r3, #0]
    if (v5 != NULL) *v5 /= avg_num;
 8007044:	b127      	cbz	r7, 8007050 <get_avg_from_circ+0xba>
 8007046:	6838      	ldr	r0, [r7, #0]
 8007048:	4621      	mov	r1, r4
 800704a:	f7f9 ff39 	bl	8000ec0 <__aeabi_fdiv>
 800704e:	6038      	str	r0, [r7, #0]
}
 8007050:	b003      	add	sp, #12
 8007052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (ch_num > 1 && i % ch_num == 1)
 8007056:	2d01      	cmp	r5, #1
 8007058:	ddcd      	ble.n	8006ff6 <get_avg_from_circ+0x60>
 800705a:	2b01      	cmp	r3, #1
 800705c:	d104      	bne.n	8007068 <get_avg_from_circ+0xd2>
            *v2 += val;
 800705e:	6830      	ldr	r0, [r6, #0]
 8007060:	f7f9 fd72 	bl	8000b48 <__addsf3>
 8007064:	6030      	str	r0, [r6, #0]
 8007066:	e7c6      	b.n	8006ff6 <get_avg_from_circ+0x60>
        else if (ch_num > 2 && i % ch_num == 2)
 8007068:	2d02      	cmp	r5, #2
 800706a:	d0c4      	beq.n	8006ff6 <get_avg_from_circ+0x60>
 800706c:	2b02      	cmp	r3, #2
 800706e:	d106      	bne.n	800707e <get_avg_from_circ+0xe8>
            *v3 += val;
 8007070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	f7f9 fd68 	bl	8000b48 <__addsf3>
 8007078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            *v4 += val;
 800707a:	6018      	str	r0, [r3, #0]
 800707c:	e7bb      	b.n	8006ff6 <get_avg_from_circ+0x60>
        else if (ch_num > 3 && i % ch_num == 3)
 800707e:	2d03      	cmp	r5, #3
 8007080:	d0b9      	beq.n	8006ff6 <get_avg_from_circ+0x60>
 8007082:	2b03      	cmp	r3, #3
 8007084:	d105      	bne.n	8007092 <get_avg_from_circ+0xfc>
            *v4 += val;
 8007086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	f7f9 fd5d 	bl	8000b48 <__addsf3>
 800708e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007090:	e7f3      	b.n	800707a <get_avg_from_circ+0xe4>
        else if (ch_num > 4)  // && i % ch_num == 4)
 8007092:	2d04      	cmp	r5, #4
 8007094:	d0af      	beq.n	8006ff6 <get_avg_from_circ+0x60>
            *v5 += val;
 8007096:	6838      	ldr	r0, [r7, #0]
 8007098:	f7f9 fd56 	bl	8000b48 <__addsf3>
 800709c:	6038      	str	r0, [r7, #0]
 800709e:	e7aa      	b.n	8006ff6 <get_avg_from_circ+0x60>

080070a0 <get_vcc_from_circ>:

int get_vcc_from_circ(int from, int total, int bufflen, int ch_num, int daq_bits, void* buff)
{
 80070a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ASSERT(ch_num > 0 && total > 0 && buff != NULL);
 80070a4:	f1b3 0b00 	subs.w	fp, r3, #0
{
 80070a8:	4604      	mov	r4, r0
 80070aa:	468a      	mov	sl, r1
 80070ac:	4617      	mov	r7, r2
 80070ae:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    ASSERT(ch_num > 0 && total > 0 && buff != NULL);
 80070b2:	dd04      	ble.n	80070be <get_vcc_from_circ+0x1e>
 80070b4:	2900      	cmp	r1, #0
 80070b6:	dd02      	ble.n	80070be <get_vcc_from_circ+0x1e>
 80070b8:	f1b9 0f00 	cmp.w	r9, #0
 80070bc:	d100      	bne.n	80070c0 <get_vcc_from_circ+0x20>
 80070be:	e7fe      	b.n	80070be <get_vcc_from_circ+0x1e>
    }
    return -1;
    */
    float ret = 0;
    int avg_num = 0;
    for (int i = from, j = 0; j < total; j++, i++)
 80070c0:	2500      	movs	r5, #0
    float ret = 0;
 80070c2:	2600      	movs	r6, #0
    int avg_num = 0;
 80070c4:	46a8      	mov	r8, r5
    {
        if (i >= bufflen)
            i = 0;
 80070c6:	42a7      	cmp	r7, r4
 80070c8:	bfd8      	it	le
 80070ca:	2400      	movle	r4, #0

        float val;
        if (daq_bits == 12)
 80070cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ce:	2b0c      	cmp	r3, #12
            val = (float)(*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 80070d0:	bf0c      	ite	eq
 80070d2:	f839 0014 	ldrheq.w	r0, [r9, r4, lsl #1]
        else
            val = (float)(((uint8_t*)buff)[i]);
 80070d6:	f819 0004 	ldrbne.w	r0, [r9, r4]
 80070da:	f7f9 fde5 	bl	8000ca8 <__aeabi_ui2f>

        if (i % ch_num == 0)
 80070de:	fb94 f3fb 	sdiv	r3, r4, fp
 80070e2:	fb0b 4313 	mls	r3, fp, r3, r4
 80070e6:	b933      	cbnz	r3, 80070f6 <get_vcc_from_circ+0x56>
        {
            ret += val;
 80070e8:	4601      	mov	r1, r0
 80070ea:	4630      	mov	r0, r6
 80070ec:	f7f9 fd2c 	bl	8000b48 <__addsf3>
 80070f0:	4606      	mov	r6, r0
            avg_num++;
 80070f2:	f108 0801 	add.w	r8, r8, #1
    for (int i = from, j = 0; j < total; j++, i++)
 80070f6:	3501      	adds	r5, #1
 80070f8:	45aa      	cmp	sl, r5
 80070fa:	f104 0401 	add.w	r4, r4, #1
 80070fe:	d1e2      	bne.n	80070c6 <get_vcc_from_circ+0x26>
        }
    }
    return ret /= avg_num;
 8007100:	4640      	mov	r0, r8
 8007102:	f7f9 fdd5 	bl	8000cb0 <__aeabi_i2f>
 8007106:	4601      	mov	r1, r0
 8007108:	4630      	mov	r0, r6
 800710a:	f7f9 fed9 	bl	8000ec0 <__aeabi_fdiv>
 800710e:	f7f9 ffe9 	bl	80010e4 <__aeabi_f2iz>
}
 8007112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007116 <get_1ch_from_circ>:

int get_1ch_from_circ(int from, int total, int bufflen, int ch, int ch_num, int daq_bits, float vcc, float vref_cal, void* buff, uint8_t* out, int* idx)
{
 8007116:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ASSERT(ch > 0 && ch_num > 0 && total > 0 && buff != NULL);
 800711a:	2b00      	cmp	r3, #0
{
 800711c:	4604      	mov	r4, r0
 800711e:	468a      	mov	sl, r1
 8007120:	9200      	str	r2, [sp, #0]
 8007122:	9e12      	ldr	r6, [sp, #72]	; 0x48
    ASSERT(ch > 0 && ch_num > 0 && total > 0 && buff != NULL);
 8007124:	dd06      	ble.n	8007134 <get_1ch_from_circ+0x1e>
 8007126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007128:	2a00      	cmp	r2, #0
 800712a:	dd03      	ble.n	8007134 <get_1ch_from_circ+0x1e>
 800712c:	2900      	cmp	r1, #0
 800712e:	dd01      	ble.n	8007134 <get_1ch_from_circ+0x1e>
 8007130:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007132:	b902      	cbnz	r2, 8007136 <get_1ch_from_circ+0x20>
 8007134:	e7fe      	b.n	8007134 <get_1ch_from_circ+0x1e>

    int found = 0;

    for (int k = 0, i = from; k < total; k++, i++)
 8007136:	f04f 0800 	mov.w	r8, #0
    int found = 0;
 800713a:	4645      	mov	r5, r8
    {
        if (i >= bufflen)
            i = 0;

        if (i % ch_num == ch - 1)
 800713c:	f103 39ff 	add.w	r9, r3, #4294967295
            i = 0;
 8007140:	9b00      	ldr	r3, [sp, #0]
        if (i % ch_num == ch - 1)
 8007142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            i = 0;
 8007144:	42a3      	cmp	r3, r4
 8007146:	bfd8      	it	le
 8007148:	2400      	movle	r4, #0
        if (i % ch_num == ch - 1)
 800714a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800714c:	fb94 f3f3 	sdiv	r3, r4, r3
 8007150:	fb02 4313 	mls	r3, r2, r3, r4
 8007154:	454b      	cmp	r3, r9
 8007156:	d120      	bne.n	800719a <get_1ch_from_circ+0x84>
        {
            found++;
            float val = 0;
            if (daq_bits == 12)
 8007158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800715a:	6837      	ldr	r7, [r6, #0]
 800715c:	2b0c      	cmp	r3, #12
            found++;
 800715e:	f105 0201 	add.w	r2, r5, #1
 8007162:	f107 0b01 	add.w	fp, r7, #1
            if (daq_bits == 12)
 8007166:	d122      	bne.n	80071ae <get_1ch_from_circ+0x98>
            {
                val = (float) (*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 8007168:	9b10      	ldr	r3, [sp, #64]	; 0x40
                uint16_t ret = (uint16_t)(vref_cal * (val / vcc)); // 0.8 mV precision rounded (output in mV*10)
                out[(*idx)++] = LO_BYTE16(ret);
                out[(*idx)++] = HI_BYTE16(ret);
                found++;
 800716a:	3502      	adds	r5, #2
                val = (float) (*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 800716c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8007170:	f7f9 fd9a 	bl	8000ca8 <__aeabi_ui2f>
                uint16_t ret = (uint16_t)(vref_cal * (val / vcc)); // 0.8 mV precision rounded (output in mV*10)
 8007174:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007176:	f7f9 fea3 	bl	8000ec0 <__aeabi_fdiv>
 800717a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800717c:	f7f9 fdec 	bl	8000d58 <__aeabi_fmul>
 8007180:	f7f9 ffd6 	bl	8001130 <__aeabi_f2uiz>
                out[(*idx)++] = LO_BYTE16(ret);
 8007184:	9b11      	ldr	r3, [sp, #68]	; 0x44
                uint16_t ret = (uint16_t)(vref_cal * (val / vcc)); // 0.8 mV precision rounded (output in mV*10)
 8007186:	b280      	uxth	r0, r0
                out[(*idx)++] = LO_BYTE16(ret);
 8007188:	f8c6 b000 	str.w	fp, [r6]
 800718c:	55d8      	strb	r0, [r3, r7]
                out[(*idx)++] = HI_BYTE16(ret);
 800718e:	6833      	ldr	r3, [r6, #0]
 8007190:	0a00      	lsrs	r0, r0, #8
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	6032      	str	r2, [r6, #0]
 8007196:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007198:	54d0      	strb	r0, [r2, r3]
    for (int k = 0, i = from; k < total; k++, i++)
 800719a:	f108 0801 	add.w	r8, r8, #1
 800719e:	45c2      	cmp	sl, r8
 80071a0:	f104 0401 	add.w	r4, r4, #1
 80071a4:	d1cc      	bne.n	8007140 <get_1ch_from_circ+0x2a>
                out[(*idx)++] = ret;
            }
        }
    }
    return found;
}
 80071a6:	4628      	mov	r0, r5
 80071a8:	b003      	add	sp, #12
 80071aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                val = (float)(((uint8_t*)buff)[i]);
 80071ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071b0:	9201      	str	r2, [sp, #4]
 80071b2:	5d18      	ldrb	r0, [r3, r4]
 80071b4:	f7f9 fd78 	bl	8000ca8 <__aeabi_ui2f>
                uint8_t ret = (uint8_t)(vref_cal * (val / vcc));   // 13 mV precision rounded (output in mV/10)
 80071b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80071ba:	f7f9 fe81 	bl	8000ec0 <__aeabi_fdiv>
 80071be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80071c0:	f7f9 fdca 	bl	8000d58 <__aeabi_fmul>
 80071c4:	f7f9 ffb4 	bl	8001130 <__aeabi_f2uiz>
                out[(*idx)++] = ret;
 80071c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
            found++;
 80071ca:	9a01      	ldr	r2, [sp, #4]
                out[(*idx)++] = ret;
 80071cc:	f8c6 b000 	str.w	fp, [r6]
            found++;
 80071d0:	4615      	mov	r5, r2
                out[(*idx)++] = ret;
 80071d2:	55d8      	strb	r0, [r3, r7]
 80071d4:	e7e1      	b.n	800719a <get_1ch_from_circ+0x84>

080071d6 <get_last_circ_idx>:

int get_last_circ_idx(int pos, int len)
{
    int last_idx = pos - 1;
    if (last_idx < 0)
 80071d6:	3801      	subs	r0, #1
        last_idx = len - 1;
 80071d8:	bf48      	it	mi
 80071da:	f101 30ff 	addmi.w	r0, r1, #4294967295
    return last_idx;
}
 80071de:	4770      	bx	lr

080071e0 <get_freq>:

float get_freq(int* prescaler, int* reload, int max_reload, int freq_osc, int freq_want)
{
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	9f08      	ldr	r7, [sp, #32]
 80071e6:	4604      	mov	r4, r0
    ASSERT(freq_osc >= freq_want && freq_want > 0 && freq_osc > 0 && max_reload > 0);
 80071e8:	42bb      	cmp	r3, r7
{
 80071ea:	4689      	mov	r9, r1
 80071ec:	4615      	mov	r5, r2
 80071ee:	461e      	mov	r6, r3
    ASSERT(freq_osc >= freq_want && freq_want > 0 && freq_osc > 0 && max_reload > 0);
 80071f0:	db05      	blt.n	80071fe <get_freq+0x1e>
 80071f2:	2f00      	cmp	r7, #0
 80071f4:	dd03      	ble.n	80071fe <get_freq+0x1e>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	dd01      	ble.n	80071fe <get_freq+0x1e>
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	dc00      	bgt.n	8007200 <get_freq+0x20>
 80071fe:	e7fe      	b.n	80071fe <get_freq+0x1e>
    *prescaler = 1;
 8007200:	2301      	movs	r3, #1
 8007202:	6003      	str	r3, [r0, #0]

    do
    {
        *reload = (int)((float)freq_osc / (float)(*prescaler) / (float)freq_want);
 8007204:	4630      	mov	r0, r6
 8007206:	f7f9 fd53 	bl	8000cb0 <__aeabi_i2f>
 800720a:	4680      	mov	r8, r0
 800720c:	6820      	ldr	r0, [r4, #0]
 800720e:	f7f9 fd4f 	bl	8000cb0 <__aeabi_i2f>
 8007212:	4601      	mov	r1, r0
 8007214:	4640      	mov	r0, r8
 8007216:	f7f9 fe53 	bl	8000ec0 <__aeabi_fdiv>
 800721a:	4682      	mov	sl, r0
 800721c:	4638      	mov	r0, r7
 800721e:	f7f9 fd47 	bl	8000cb0 <__aeabi_i2f>
 8007222:	4601      	mov	r1, r0
 8007224:	4650      	mov	r0, sl
 8007226:	f7f9 fe4b 	bl	8000ec0 <__aeabi_fdiv>
 800722a:	f7f9 ff5b 	bl	80010e4 <__aeabi_f2iz>
        if (*reload > max_reload)
 800722e:	42a8      	cmp	r0, r5
        *reload = (int)((float)freq_osc / (float)(*prescaler) / (float)freq_want);
 8007230:	f8c9 0000 	str.w	r0, [r9]
            (*prescaler)++;
 8007234:	bfc2      	ittt	gt
 8007236:	6823      	ldrgt	r3, [r4, #0]
 8007238:	3301      	addgt	r3, #1
 800723a:	6023      	strgt	r3, [r4, #0]
    }
    while (*reload > max_reload);
 800723c:	f8d9 a000 	ldr.w	sl, [r9]
 8007240:	45aa      	cmp	sl, r5
 8007242:	dcdf      	bgt.n	8007204 <get_freq+0x24>

    float ret = ((float)freq_osc) / ((float)(*prescaler)) / ((float)(*reload));
 8007244:	6820      	ldr	r0, [r4, #0]
 8007246:	f7f9 fd33 	bl	8000cb0 <__aeabi_i2f>
 800724a:	4601      	mov	r1, r0
 800724c:	4640      	mov	r0, r8
 800724e:	f7f9 fe37 	bl	8000ec0 <__aeabi_fdiv>
 8007252:	4604      	mov	r4, r0
 8007254:	4650      	mov	r0, sl
 8007256:	f7f9 fd2b 	bl	8000cb0 <__aeabi_i2f>
 800725a:	4601      	mov	r1, r0
 800725c:	4620      	mov	r0, r4
 800725e:	f7f9 fe2f 	bl	8000ec0 <__aeabi_fdiv>
    return ret;
}
 8007262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007268 <sprint_fast>:
    }
    s[str_loc] = 0; // add null termination.
}

void sprint_fast(char* s, const char* format, float fVal, int prec)
{
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	b0b3      	sub	sp, #204	; 0xcc
 800726e:	4605      	mov	r5, r0
 8007270:	468a      	mov	sl, r1
 8007272:	4693      	mov	fp, r2
    char result[100] = { '\0' };
 8007274:	2100      	movs	r1, #0
 8007276:	2264      	movs	r2, #100	; 0x64
 8007278:	4668      	mov	r0, sp
{
 800727a:	461c      	mov	r4, r3
    char result[100] = { '\0' };
 800727c:	f001 fdec 	bl	8008e58 <memset>
    char result_rev[100] = { '\0' };
 8007280:	2264      	movs	r2, #100	; 0x64
 8007282:	2100      	movs	r1, #0
 8007284:	eb0d 0002 	add.w	r0, sp, r2
 8007288:	f001 fde6 	bl	8008e58 <memset>
    int dVal, dec, i, j, k;

    if (prec <= 0)
 800728c:	2c00      	cmp	r4, #0
 800728e:	dc0f      	bgt.n	80072b0 <sprint_fast+0x48>
    {
        sprintf(result, "%d", (int)fVal);
 8007290:	4658      	mov	r0, fp
 8007292:	f7f9 ff27 	bl	80010e4 <__aeabi_f2iz>
 8007296:	493e      	ldr	r1, [pc, #248]	; (8007390 <sprint_fast+0x128>)
 8007298:	4602      	mov	r2, r0
 800729a:	4668      	mov	r0, sp
 800729c:	f001 fde4 	bl	8008e68 <siprintf>
        sprintf(s, format, result);
 80072a0:	466a      	mov	r2, sp
        result[i] = '0';

    for (j = 0; i >= 0; i--, j++)
        result_rev[j] = result[i];

    sprintf(s, format, result_rev);
 80072a2:	4651      	mov	r1, sl
 80072a4:	4628      	mov	r0, r5
 80072a6:	f001 fddf 	bl	8008e68 <siprintf>
}
 80072aa:	b033      	add	sp, #204	; 0xcc
 80072ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fVal += 0.5 * pow(0.1, prec);
 80072b0:	4620      	mov	r0, r4
 80072b2:	f7f9 f8b1 	bl	8000418 <__aeabi_i2d>
 80072b6:	4606      	mov	r6, r0
 80072b8:	460f      	mov	r7, r1
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	a132      	add	r1, pc, #200	; (adr r1, 8007388 <sprint_fast+0x120>)
 80072c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072c4:	f002 fb1e 	bl	8009904 <pow>
 80072c8:	2200      	movs	r2, #0
 80072ca:	4b32      	ldr	r3, [pc, #200]	; (8007394 <sprint_fast+0x12c>)
 80072cc:	f7f9 f90e 	bl	80004ec <__aeabi_dmul>
 80072d0:	4680      	mov	r8, r0
 80072d2:	4658      	mov	r0, fp
 80072d4:	4689      	mov	r9, r1
 80072d6:	f7f9 f8b1 	bl	800043c <__aeabi_f2d>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4640      	mov	r0, r8
 80072e0:	4649      	mov	r1, r9
 80072e2:	f7f8 ff4d 	bl	8000180 <__adddf3>
 80072e6:	f7f9 fbd9 	bl	8000a9c <__aeabi_d2f>
    k = pow(10, prec);
 80072ea:	463b      	mov	r3, r7
 80072ec:	4632      	mov	r2, r6
    fVal += 0.5 * pow(0.1, prec);
 80072ee:	4680      	mov	r8, r0
    k = pow(10, prec);
 80072f0:	4929      	ldr	r1, [pc, #164]	; (8007398 <sprint_fast+0x130>)
 80072f2:	2000      	movs	r0, #0
 80072f4:	f002 fb06 	bl	8009904 <pow>
 80072f8:	f7f9 fba8 	bl	8000a4c <__aeabi_d2iz>
 80072fc:	4606      	mov	r6, r0
    dVal = fVal;
 80072fe:	4640      	mov	r0, r8
 8007300:	f7f9 fef0 	bl	80010e4 <__aeabi_f2iz>
 8007304:	4607      	mov	r7, r0
    dec = ((int)(fVal * k)) % k;
 8007306:	4630      	mov	r0, r6
 8007308:	f7f9 fcd2 	bl	8000cb0 <__aeabi_i2f>
 800730c:	4641      	mov	r1, r8
 800730e:	f7f9 fd23 	bl	8000d58 <__aeabi_fmul>
 8007312:	f7f9 fee7 	bl	80010e4 <__aeabi_f2iz>
 8007316:	fb90 f3f6 	sdiv	r3, r0, r6
        result[i] = (dec % 10) + '0';
 800731a:	210a      	movs	r1, #10
    dec = ((int)(fVal * k)) % k;
 800731c:	fb03 0016 	mls	r0, r3, r6, r0
    for (i = 0; i < prec; i++)
 8007320:	2300      	movs	r3, #0
        result[i] = (dec % 10) + '0';
 8007322:	fb90 f2f1 	sdiv	r2, r0, r1
 8007326:	fb01 0012 	mls	r0, r1, r2, r0
 800732a:	3030      	adds	r0, #48	; 0x30
 800732c:	f80d 0003 	strb.w	r0, [sp, r3]
    for (i = 0; i < prec; i++)
 8007330:	3301      	adds	r3, #1
 8007332:	429c      	cmp	r4, r3
        dec /= 10;
 8007334:	4610      	mov	r0, r2
    for (i = 0; i < prec; i++)
 8007336:	d1f4      	bne.n	8007322 <sprint_fast+0xba>
    result[i] = '.';
 8007338:	222e      	movs	r2, #46	; 0x2e
 800733a:	ab32      	add	r3, sp, #200	; 0xc8
 800733c:	4423      	add	r3, r4
    if (dVal > 0)
 800733e:	2f00      	cmp	r7, #0
    result[i] = '.';
 8007340:	f803 2cc8 	strb.w	r2, [r3, #-200]
    i++;
 8007344:	f104 0301 	add.w	r3, r4, #1
    if (dVal > 0)
 8007348:	dd17      	ble.n	800737a <sprint_fast+0x112>
            result[i] = (dVal % 10) + '0';
 800734a:	210a      	movs	r1, #10
 800734c:	fb97 f2f1 	sdiv	r2, r7, r1
 8007350:	fb01 7712 	mls	r7, r1, r2, r7
 8007354:	3730      	adds	r7, #48	; 0x30
 8007356:	f80d 7003 	strb.w	r7, [sp, r3]
            i++;
 800735a:	1c58      	adds	r0, r3, #1
        while (dVal > 0)
 800735c:	4617      	mov	r7, r2
 800735e:	b952      	cbnz	r2, 8007376 <sprint_fast+0x10e>
 8007360:	f10d 0263 	add.w	r2, sp, #99	; 0x63
        result_rev[j] = result[i];
 8007364:	f81d 1003 	ldrb.w	r1, [sp, r3]
    for (j = 0; i >= 0; i--, j++)
 8007368:	f113 33ff 	adds.w	r3, r3, #4294967295
        result_rev[j] = result[i];
 800736c:	f802 1f01 	strb.w	r1, [r2, #1]!
    for (j = 0; i >= 0; i--, j++)
 8007370:	d2f8      	bcs.n	8007364 <sprint_fast+0xfc>
    sprintf(s, format, result_rev);
 8007372:	aa19      	add	r2, sp, #100	; 0x64
 8007374:	e795      	b.n	80072a2 <sprint_fast+0x3a>
            i++;
 8007376:	4603      	mov	r3, r0
 8007378:	e7e8      	b.n	800734c <sprint_fast+0xe4>
        result[i] = '0';
 800737a:	2130      	movs	r1, #48	; 0x30
 800737c:	aa32      	add	r2, sp, #200	; 0xc8
 800737e:	441a      	add	r2, r3
 8007380:	f802 1cc8 	strb.w	r1, [r2, #-200]
 8007384:	e7ec      	b.n	8007360 <sprint_fast+0xf8>
 8007386:	bf00      	nop
 8007388:	9999999a 	.word	0x9999999a
 800738c:	3fb99999 	.word	0x3fb99999
 8007390:	0800af22 	.word	0x0800af22
 8007394:	3fe00000 	.word	0x3fe00000
 8007398:	40240000 	.word	0x40240000

0800739c <SCPI_ErrorEmit>:
/**
 * Emit error
 * @param context scpi context
 * @param err Error to emit
 */
static void SCPI_ErrorEmit(scpi_t * context, int16_t err) {
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	4604      	mov	r4, r0
 80073a0:	460d      	mov	r5, r1
    SCPI_RegSetBits(context, SCPI_REG_STB, STB_QMA);
 80073a2:	2204      	movs	r2, #4
 80073a4:	2100      	movs	r1, #0
 80073a6:	f000 fa2e 	bl	8007806 <SCPI_RegSetBits>

    if (context->interface && context->interface->error) {
 80073aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80073ac:	b133      	cbz	r3, 80073bc <SCPI_ErrorEmit+0x20>
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	b123      	cbz	r3, 80073bc <SCPI_ErrorEmit+0x20>
        context->interface->error(context, err);
 80073b2:	4629      	mov	r1, r5
 80073b4:	4620      	mov	r0, r4
    }
}
 80073b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        context->interface->error(context, err);
 80073ba:	4718      	bx	r3
}
 80073bc:	bd70      	pop	{r4, r5, r6, pc}

080073be <SCPI_ErrorInit>:
    fifo_init(&context->error_queue, data, size);
 80073be:	303c      	adds	r0, #60	; 0x3c
 80073c0:	f000 b92c 	b.w	800761c <fifo_init>

080073c4 <SCPI_ErrorCount>:
 * Return number of errors/events in the queue
 * @param context
 * @return
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
    int16_t result = 0;
 80073c4:	2300      	movs	r3, #0
int32_t SCPI_ErrorCount(scpi_t * context) {
 80073c6:	b507      	push	{r0, r1, r2, lr}
    int16_t result = 0;
 80073c8:	a902      	add	r1, sp, #8
 80073ca:	f821 3d02 	strh.w	r3, [r1, #-2]!

    fifo_count(&context->error_queue, &result);
 80073ce:	303c      	adds	r0, #60	; 0x3c
 80073d0:	f000 f97d 	bl	80076ce <fifo_count>

    return result;
}
 80073d4:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80073d8:	b003      	add	sp, #12
 80073da:	f85d fb04 	ldr.w	pc, [sp], #4

080073de <SCPI_ErrorEmitEmpty>:
static void SCPI_ErrorEmitEmpty(scpi_t * context) {
 80073de:	b570      	push	{r4, r5, r6, lr}
 80073e0:	4604      	mov	r4, r0
    if ((SCPI_ErrorCount(context) == 0) && (SCPI_RegGet(context, SCPI_REG_STB) & STB_QMA)) {
 80073e2:	f7ff ffef 	bl	80073c4 <SCPI_ErrorCount>
 80073e6:	4605      	mov	r5, r0
 80073e8:	b998      	cbnz	r0, 8007412 <SCPI_ErrorEmitEmpty+0x34>
 80073ea:	4601      	mov	r1, r0
 80073ec:	4620      	mov	r0, r4
 80073ee:	f000 f973 	bl	80076d8 <SCPI_RegGet>
 80073f2:	0743      	lsls	r3, r0, #29
 80073f4:	d50d      	bpl.n	8007412 <SCPI_ErrorEmitEmpty+0x34>
        SCPI_RegClearBits(context, SCPI_REG_STB, STB_QMA);
 80073f6:	2204      	movs	r2, #4
 80073f8:	4629      	mov	r1, r5
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 f975 	bl	80076ea <SCPI_RegClearBits>
        if (context->interface && context->interface->error) {
 8007400:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007402:	b133      	cbz	r3, 8007412 <SCPI_ErrorEmitEmpty+0x34>
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	b123      	cbz	r3, 8007412 <SCPI_ErrorEmitEmpty+0x34>
            context->interface->error(context, 0);
 8007408:	4629      	mov	r1, r5
 800740a:	4620      	mov	r0, r4
}
 800740c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            context->interface->error(context, 0);
 8007410:	4718      	bx	r3
}
 8007412:	bd70      	pop	{r4, r5, r6, pc}

08007414 <SCPI_ErrorClear>:
void SCPI_ErrorClear(scpi_t * context) {
 8007414:	b510      	push	{r4, lr}
 8007416:	4604      	mov	r4, r0
    fifo_clear(&context->error_queue);
 8007418:	303c      	adds	r0, #60	; 0x3c
 800741a:	f000 f905 	bl	8007628 <fifo_clear>
    SCPI_ErrorEmitEmpty(context);
 800741e:	4620      	mov	r0, r4
}
 8007420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_ErrorEmitEmpty(context);
 8007424:	f7ff bfdb 	b.w	80073de <SCPI_ErrorEmitEmpty>

08007428 <SCPI_ErrorPop>:
scpi_bool_t SCPI_ErrorPop(scpi_t * context, scpi_error_t * error) {
 8007428:	b510      	push	{r4, lr}
 800742a:	4604      	mov	r4, r0
    if (!error || !context) return FALSE;
 800742c:	4608      	mov	r0, r1
 800742e:	b151      	cbz	r1, 8007446 <SCPI_ErrorPop+0x1e>
 8007430:	b154      	cbz	r4, 8007448 <SCPI_ErrorPop+0x20>
    SCPI_ERROR_SETVAL(error, 0, NULL);
 8007432:	2300      	movs	r3, #0
    fifo_remove(&context->error_queue, error);
 8007434:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    SCPI_ERROR_SETVAL(error, 0, NULL);
 8007438:	800b      	strh	r3, [r1, #0]
    fifo_remove(&context->error_queue, error);
 800743a:	f000 f915 	bl	8007668 <fifo_remove>
    SCPI_ErrorEmitEmpty(context);
 800743e:	4620      	mov	r0, r4
 8007440:	f7ff ffcd 	bl	80073de <SCPI_ErrorEmitEmpty>
    return TRUE;
 8007444:	2001      	movs	r0, #1
}
 8007446:	bd10      	pop	{r4, pc}
    if (!error || !context) return FALSE;
 8007448:	4620      	mov	r0, r4
 800744a:	e7fc      	b.n	8007446 <SCPI_ErrorPop+0x1e>

0800744c <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800744c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007450:	4604      	mov	r4, r0
 8007452:	460f      	mov	r7, r1
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
 8007454:	b122      	cbz	r2, 8007460 <SCPI_ErrorPushEx+0x14>
 8007456:	b91b      	cbnz	r3, 8007460 <SCPI_ErrorPushEx+0x14>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
 8007458:	21ff      	movs	r1, #255	; 0xff
 800745a:	4610      	mov	r0, r2
 800745c:	f001 fd49 	bl	8008ef2 <strnlen>
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
 8007460:	ae02      	add	r6, sp, #8
 8007462:	f826 7d04 	strh.w	r7, [r6, #-4]!
    if (!fifo_add(&context->error_queue, &error_value)) {
 8007466:	f104 083c 	add.w	r8, r4, #60	; 0x3c
 800746a:	4631      	mov	r1, r6
 800746c:	4640      	mov	r0, r8
 800746e:	f000 f8df 	bl	8007630 <fifo_add>
 8007472:	4605      	mov	r5, r0
 8007474:	bb98      	cbnz	r0, 80074de <SCPI_ErrorPushEx+0x92>
        fifo_remove_last(&context->error_queue, &error_value);
 8007476:	4631      	mov	r1, r6
 8007478:	4640      	mov	r0, r8
 800747a:	f000 f90e 	bl	800769a <fifo_remove_last>
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 800747e:	f64f 63a2 	movw	r3, #65186	; 0xfea2
        fifo_add(&context->error_queue, &error_value);
 8007482:	4631      	mov	r1, r6
 8007484:	4640      	mov	r0, r8
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 8007486:	f8ad 3004 	strh.w	r3, [sp, #4]
        fifo_add(&context->error_queue, &error_value);
 800748a:	f000 f8d1 	bl	8007630 <fifo_add>
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);

    for (i = 0; i < ERROR_DEFS_N; i++) {
 800748e:	2600      	movs	r6, #0
 8007490:	f04f 0906 	mov.w	r9, #6
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 8007494:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80074e8 <SCPI_ErrorPushEx+0x9c>
 8007498:	fb09 f306 	mul.w	r3, r9, r6
 800749c:	f933 2008 	ldrsh.w	r2, [r3, r8]
 80074a0:	42ba      	cmp	r2, r7
 80074a2:	db09      	blt.n	80074b8 <SCPI_ErrorPushEx+0x6c>
 80074a4:	4443      	add	r3, r8
 80074a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80074aa:	42ba      	cmp	r2, r7
 80074ac:	dc04      	bgt.n	80074b8 <SCPI_ErrorPushEx+0x6c>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
 80074ae:	889a      	ldrh	r2, [r3, #4]
 80074b0:	2102      	movs	r1, #2
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 f9a7 	bl	8007806 <SCPI_RegSetBits>
    for (i = 0; i < ERROR_DEFS_N; i++) {
 80074b8:	3601      	adds	r6, #1
 80074ba:	2e09      	cmp	r6, #9
 80074bc:	d1ec      	bne.n	8007498 <SCPI_ErrorPushEx+0x4c>
        }
    }

    SCPI_ErrorEmit(context, err);
 80074be:	4639      	mov	r1, r7
 80074c0:	4620      	mov	r0, r4
 80074c2:	f7ff ff6b 	bl	800739c <SCPI_ErrorEmit>
    if (queue_overflow) {
 80074c6:	b91d      	cbnz	r5, 80074d0 <SCPI_ErrorPushEx+0x84>
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
 80074c8:	4906      	ldr	r1, [pc, #24]	; (80074e4 <SCPI_ErrorPushEx+0x98>)
 80074ca:	4620      	mov	r0, r4
 80074cc:	f7ff ff66 	bl	800739c <SCPI_ErrorEmit>
    }

    if (context) {
 80074d0:	b114      	cbz	r4, 80074d8 <SCPI_ErrorPushEx+0x8c>
        context->cmd_error = TRUE;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    }
}
 80074d8:	b003      	add	sp, #12
 80074da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return TRUE;
 80074de:	2501      	movs	r5, #1
 80074e0:	e7d5      	b.n	800748e <SCPI_ErrorPushEx+0x42>
 80074e2:	bf00      	nop
 80074e4:	fffffea2 	.word	0xfffffea2
 80074e8:	0800b0d6 	.word	0x0800b0d6

080074ec <SCPI_ErrorPush>:
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
    SCPI_ErrorPushEx(context, err, NULL, 0);
 80074ec:	2300      	movs	r3, #0
 80074ee:	461a      	mov	r2, r3
 80074f0:	f7ff bfac 	b.w	800744c <SCPI_ErrorPushEx>

080074f4 <SCPI_ErrorTranslate>:
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
 80074f4:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
 80074f8:	d053      	beq.n	80075a2 <SCPI_ErrorTranslate+0xae>
 80074fa:	dc27      	bgt.n	800754c <SCPI_ErrorTranslate+0x58>
 80074fc:	f510 7f9b 	cmn.w	r0, #310	; 0x136
 8007500:	d055      	beq.n	80075ae <SCPI_ErrorTranslate+0xba>
 8007502:	dc14      	bgt.n	800752e <SCPI_ErrorTranslate+0x3a>
 8007504:	f46f 73b6 	mvn.w	r3, #364	; 0x16c
 8007508:	4298      	cmp	r0, r3
 800750a:	d054      	beq.n	80075b6 <SCPI_ErrorTranslate+0xc2>
 800750c:	f510 7fb6 	cmn.w	r0, #364	; 0x16c
 8007510:	da04      	bge.n	800751c <SCPI_ErrorTranslate+0x28>
 8007512:	f510 7fb9 	cmn.w	r0, #370	; 0x172
 8007516:	d050      	beq.n	80075ba <SCPI_ErrorTranslate+0xc6>
#if USE_USER_ERROR_LIST
        LIST_OF_USER_ERRORS
#endif
#undef X
#undef XE
        default: return "Unknown error";
 8007518:	482b      	ldr	r0, [pc, #172]	; (80075c8 <SCPI_ErrorTranslate+0xd4>)
 800751a:	4770      	bx	lr
    switch (err) {
 800751c:	f46f 73b5 	mvn.w	r3, #362	; 0x16a
 8007520:	4298      	cmp	r0, r3
 8007522:	d046      	beq.n	80075b2 <SCPI_ErrorTranslate+0xbe>
 8007524:	f510 7faf 	cmn.w	r0, #350	; 0x15e
 8007528:	d1f6      	bne.n	8007518 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 800752a:	4828      	ldr	r0, [pc, #160]	; (80075cc <SCPI_ErrorTranslate+0xd8>)
 800752c:	4770      	bx	lr
    switch (err) {
 800752e:	f110 0fc8 	cmn.w	r0, #200	; 0xc8
 8007532:	d03a      	beq.n	80075aa <SCPI_ErrorTranslate+0xb6>
 8007534:	dc03      	bgt.n	800753e <SCPI_ErrorTranslate+0x4a>
 8007536:	30e0      	adds	r0, #224	; 0xe0
 8007538:	d1ee      	bne.n	8007518 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 800753a:	4825      	ldr	r0, [pc, #148]	; (80075d0 <SCPI_ErrorTranslate+0xdc>)
 800753c:	4770      	bx	lr
    switch (err) {
 800753e:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 8007542:	d030      	beq.n	80075a6 <SCPI_ErrorTranslate+0xb2>
 8007544:	3097      	adds	r0, #151	; 0x97
 8007546:	d1e7      	bne.n	8007518 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 8007548:	4822      	ldr	r0, [pc, #136]	; (80075d4 <SCPI_ErrorTranslate+0xe0>)
 800754a:	4770      	bx	lr
    switch (err) {
 800754c:	f110 0f68 	cmn.w	r0, #104	; 0x68
 8007550:	d021      	beq.n	8007596 <SCPI_ErrorTranslate+0xa2>
 8007552:	dc0e      	bgt.n	8007572 <SCPI_ErrorTranslate+0x7e>
 8007554:	f110 0f71 	cmn.w	r0, #113	; 0x71
 8007558:	d021      	beq.n	800759e <SCPI_ErrorTranslate+0xaa>
 800755a:	dc03      	bgt.n	8007564 <SCPI_ErrorTranslate+0x70>
 800755c:	3083      	adds	r0, #131	; 0x83
 800755e:	d1db      	bne.n	8007518 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 8007560:	481d      	ldr	r0, [pc, #116]	; (80075d8 <SCPI_ErrorTranslate+0xe4>)
 8007562:	4770      	bx	lr
    switch (err) {
 8007564:	f110 0f6d 	cmn.w	r0, #109	; 0x6d
 8007568:	d017      	beq.n	800759a <SCPI_ErrorTranslate+0xa6>
 800756a:	306c      	adds	r0, #108	; 0x6c
 800756c:	d1d4      	bne.n	8007518 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 800756e:	481b      	ldr	r0, [pc, #108]	; (80075dc <SCPI_ErrorTranslate+0xe8>)
 8007570:	4770      	bx	lr
    switch (err) {
 8007572:	2800      	cmp	r0, #0
 8007574:	d025      	beq.n	80075c2 <SCPI_ErrorTranslate+0xce>
 8007576:	dc06      	bgt.n	8007586 <SCPI_ErrorTranslate+0x92>
 8007578:	f110 0f67 	cmn.w	r0, #103	; 0x67
 800757c:	d009      	beq.n	8007592 <SCPI_ErrorTranslate+0x9e>
 800757e:	3065      	adds	r0, #101	; 0x65
 8007580:	d1ca      	bne.n	8007518 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 8007582:	4817      	ldr	r0, [pc, #92]	; (80075e0 <SCPI_ErrorTranslate+0xec>)
 8007584:	4770      	bx	lr
    switch (err) {
 8007586:	2801      	cmp	r0, #1
 8007588:	d019      	beq.n	80075be <SCPI_ErrorTranslate+0xca>
 800758a:	2802      	cmp	r0, #2
 800758c:	d1c4      	bne.n	8007518 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 800758e:	4815      	ldr	r0, [pc, #84]	; (80075e4 <SCPI_ErrorTranslate+0xf0>)
 8007590:	4770      	bx	lr
 8007592:	4815      	ldr	r0, [pc, #84]	; (80075e8 <SCPI_ErrorTranslate+0xf4>)
 8007594:	4770      	bx	lr
 8007596:	4815      	ldr	r0, [pc, #84]	; (80075ec <SCPI_ErrorTranslate+0xf8>)
 8007598:	4770      	bx	lr
 800759a:	4815      	ldr	r0, [pc, #84]	; (80075f0 <SCPI_ErrorTranslate+0xfc>)
 800759c:	4770      	bx	lr
 800759e:	4815      	ldr	r0, [pc, #84]	; (80075f4 <SCPI_ErrorTranslate+0x100>)
 80075a0:	4770      	bx	lr
 80075a2:	4815      	ldr	r0, [pc, #84]	; (80075f8 <SCPI_ErrorTranslate+0x104>)
 80075a4:	4770      	bx	lr
 80075a6:	4815      	ldr	r0, [pc, #84]	; (80075fc <SCPI_ErrorTranslate+0x108>)
 80075a8:	4770      	bx	lr
 80075aa:	4815      	ldr	r0, [pc, #84]	; (8007600 <SCPI_ErrorTranslate+0x10c>)
 80075ac:	4770      	bx	lr
 80075ae:	4815      	ldr	r0, [pc, #84]	; (8007604 <SCPI_ErrorTranslate+0x110>)
 80075b0:	4770      	bx	lr
 80075b2:	4815      	ldr	r0, [pc, #84]	; (8007608 <SCPI_ErrorTranslate+0x114>)
 80075b4:	4770      	bx	lr
 80075b6:	4815      	ldr	r0, [pc, #84]	; (800760c <SCPI_ErrorTranslate+0x118>)
 80075b8:	4770      	bx	lr
 80075ba:	4815      	ldr	r0, [pc, #84]	; (8007610 <SCPI_ErrorTranslate+0x11c>)
 80075bc:	4770      	bx	lr
 80075be:	4815      	ldr	r0, [pc, #84]	; (8007614 <SCPI_ErrorTranslate+0x120>)
 80075c0:	4770      	bx	lr
 80075c2:	4815      	ldr	r0, [pc, #84]	; (8007618 <SCPI_ErrorTranslate+0x124>)
    }
}
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	0800b0c8 	.word	0x0800b0c8
 80075cc:	0800b044 	.word	0x0800b044
 80075d0:	0800b01f 	.word	0x0800b01f
 80075d4:	0800afea 	.word	0x0800afea
 80075d8:	0800afc8 	.word	0x0800afc8
 80075dc:	0800af8f 	.word	0x0800af8f
 80075e0:	0800af5b 	.word	0x0800af5b
 80075e4:	0800b096 	.word	0x0800b096
 80075e8:	0800af6d 	.word	0x0800af6d
 80075ec:	0800af7f 	.word	0x0800af7f
 80075f0:	0800afa5 	.word	0x0800afa5
 80075f4:	0800afb7 	.word	0x0800afb7
 80075f8:	0800afd7 	.word	0x0800afd7
 80075fc:	0800affe 	.word	0x0800affe
 8007600:	0800b00f 	.word	0x0800b00f
 8007604:	0800b037 	.word	0x0800b037
 8007608:	0800b053 	.word	0x0800b053
 800760c:	0800b068 	.word	0x0800b068
 8007610:	0800b077 	.word	0x0800b077
 8007614:	0800b089 	.word	0x0800b089
 8007618:	0800af52 	.word	0x0800af52

0800761c <fifo_init>:
/**
 * Initialize fifo
 * @param fifo
 */
void fifo_init(scpi_fifo_t * fifo, scpi_error_t * data, int16_t size) {
    fifo->wr = 0;
 800761c:	2300      	movs	r3, #0
    fifo->rd = 0;
    fifo->count = 0;
    fifo->data = data;
 800761e:	6081      	str	r1, [r0, #8]
    fifo->wr = 0;
 8007620:	6003      	str	r3, [r0, #0]
    fifo->rd = 0;
 8007622:	8083      	strh	r3, [r0, #4]
    fifo->size = size;
 8007624:	80c2      	strh	r2, [r0, #6]
}
 8007626:	4770      	bx	lr

08007628 <fifo_clear>:
/**
 * Empty fifo
 * @param fifo
 */
void fifo_clear(scpi_fifo_t * fifo) {
    fifo->wr = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	6003      	str	r3, [r0, #0]
    fifo->rd = 0;
 800762c:	8083      	strh	r3, [r0, #4]
    fifo->count = 0;
}
 800762e:	4770      	bx	lr

08007630 <fifo_add>:
 * @param fifo
 * @param err
 * @param info
 * @return
 */
scpi_bool_t fifo_add(scpi_fifo_t * fifo, const scpi_error_t * value) {
 8007630:	b530      	push	{r4, r5, lr}
    return fifo->count == fifo->size;
 8007632:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007636:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    /* FIFO full? */
    if (fifo_is_full(fifo)) {
 800763a:	42a2      	cmp	r2, r4
 800763c:	d010      	beq.n	8007660 <fifo_add+0x30>
        return FALSE;
    }
    if (!value) {
 800763e:	b189      	cbz	r1, 8007664 <fifo_add+0x34>
        return FALSE;
    }

    fifo->data[fifo->wr] = *value;
 8007640:	f9b0 3000 	ldrsh.w	r3, [r0]
 8007644:	8809      	ldrh	r1, [r1, #0]
 8007646:	6885      	ldr	r5, [r0, #8]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
    fifo->count += 1;
 8007648:	3201      	adds	r2, #1
    fifo->data[fifo->wr] = *value;
 800764a:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 800764e:	3301      	adds	r3, #1
 8007650:	fb93 f1f4 	sdiv	r1, r3, r4
 8007654:	fb04 3311 	mls	r3, r4, r1, r3
    fifo->count += 1;
 8007658:	8082      	strh	r2, [r0, #4]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 800765a:	8003      	strh	r3, [r0, #0]
    return TRUE;
 800765c:	2001      	movs	r0, #1
}
 800765e:	bd30      	pop	{r4, r5, pc}
        return FALSE;
 8007660:	2000      	movs	r0, #0
 8007662:	e7fc      	b.n	800765e <fifo_add+0x2e>
 8007664:	4608      	mov	r0, r1
 8007666:	e7fa      	b.n	800765e <fifo_add+0x2e>

08007668 <fifo_remove>:
    return fifo->count == 0;
 8007668:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 * Remove element form fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove(scpi_fifo_t * fifo, scpi_error_t * value) {
 800766c:	b510      	push	{r4, lr}
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 800766e:	b193      	cbz	r3, 8007696 <fifo_remove+0x2e>
 8007670:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
        return FALSE;
    }

    if (value) {
 8007674:	b119      	cbz	r1, 800767e <fifo_remove+0x16>
        *value = fifo->data[fifo->rd];
 8007676:	6884      	ldr	r4, [r0, #8]
 8007678:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
 800767c:	800c      	strh	r4, [r1, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size);
 800767e:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8007682:	3201      	adds	r2, #1
 8007684:	fb92 f1f4 	sdiv	r1, r2, r4
 8007688:	fb04 2211 	mls	r2, r4, r1, r2
    fifo->count -= 1;
 800768c:	3b01      	subs	r3, #1
    fifo->rd = (fifo->rd + 1) % (fifo->size);
 800768e:	8042      	strh	r2, [r0, #2]
    fifo->count -= 1;
 8007690:	8083      	strh	r3, [r0, #4]

    return TRUE;
 8007692:	2001      	movs	r0, #1
}
 8007694:	bd10      	pop	{r4, pc}
        return FALSE;
 8007696:	4618      	mov	r0, r3
 8007698:	e7fc      	b.n	8007694 <fifo_remove+0x2c>

0800769a <fifo_remove_last>:
    return fifo->count == 0;
 800769a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
 800769e:	b530      	push	{r4, r5, lr}
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 80076a0:	b19b      	cbz	r3, 80076ca <fifo_remove_last+0x30>
        return FALSE;
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
 80076a2:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 80076a6:	f9b0 2000 	ldrsh.w	r2, [r0]
 80076aa:	442a      	add	r2, r5
 80076ac:	3a01      	subs	r2, #1
 80076ae:	fb92 f4f5 	sdiv	r4, r2, r5
 80076b2:	fb05 2214 	mls	r2, r5, r4, r2
 80076b6:	8002      	strh	r2, [r0, #0]

    if (value) {
 80076b8:	b119      	cbz	r1, 80076c2 <fifo_remove_last+0x28>
        *value = fifo->data[fifo->wr];
 80076ba:	6884      	ldr	r4, [r0, #8]
 80076bc:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 80076c0:	800a      	strh	r2, [r1, #0]
    }
    fifo->count -= 1;
 80076c2:	3b01      	subs	r3, #1
 80076c4:	8083      	strh	r3, [r0, #4]

    return TRUE;
 80076c6:	2001      	movs	r0, #1
}
 80076c8:	bd30      	pop	{r4, r5, pc}
        return FALSE;
 80076ca:	4618      	mov	r0, r3
 80076cc:	e7fc      	b.n	80076c8 <fifo_remove_last+0x2e>

080076ce <fifo_count>:
 * @param fifo
 * @param value
 * @return
 */
scpi_bool_t fifo_count(scpi_fifo_t * fifo, int16_t * value) {
    *value = fifo->count;
 80076ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    return TRUE;
}
 80076d2:	2001      	movs	r0, #1
    *value = fifo->count;
 80076d4:	800b      	strh	r3, [r1, #0]
}
 80076d6:	4770      	bx	lr

080076d8 <SCPI_RegGet>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && context) {
 80076d8:	2909      	cmp	r1, #9
 80076da:	d804      	bhi.n	80076e6 <SCPI_RegGet+0xe>
 80076dc:	b120      	cbz	r0, 80076e8 <SCPI_RegGet+0x10>
        return context->registers[name];
 80076de:	3124      	adds	r1, #36	; 0x24
 80076e0:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80076e4:	4770      	bx	lr
    } else {
        return 0;
 80076e6:	2000      	movs	r0, #0
    }
}
 80076e8:	4770      	bx	lr

080076ea <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 80076ea:	b510      	push	{r4, lr}
 80076ec:	4603      	mov	r3, r0
 80076ee:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 80076f0:	f7ff fff2 	bl	80076d8 <SCPI_RegGet>
 80076f4:	ea20 0202 	bic.w	r2, r0, r2
 80076f8:	4621      	mov	r1, r4
}
 80076fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 80076fe:	b292      	uxth	r2, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f000 b815 	b.w	8007730 <SCPI_RegSet>

08007706 <regUpdateSTB>:
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 8007706:	b538      	push	{r3, r4, r5, lr}
 8007708:	460c      	mov	r4, r1
    if (val & SCPI_RegGet(context, mask)) {
 800770a:	4611      	mov	r1, r2
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 800770c:	4605      	mov	r5, r0
    if (val & SCPI_RegGet(context, mask)) {
 800770e:	f7ff ffe3 	bl	80076d8 <SCPI_RegGet>
 8007712:	ea10 0104 	ands.w	r1, r0, r4
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 8007716:	461a      	mov	r2, r3
    if (val & SCPI_RegGet(context, mask)) {
 8007718:	d005      	beq.n	8007726 <regUpdateSTB+0x20>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 800771a:	4628      	mov	r0, r5
}
 800771c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 8007720:	2100      	movs	r1, #0
 8007722:	f000 b870 	b.w	8007806 <SCPI_RegSetBits>
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 8007726:	4628      	mov	r0, r5
}
 8007728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 800772c:	f7ff bfdd 	b.w	80076ea <SCPI_RegClearBits>

08007730 <SCPI_RegSet>:
    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 8007730:	2909      	cmp	r1, #9
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 8007732:	b570      	push	{r4, r5, r6, lr}
 8007734:	4604      	mov	r4, r0
 8007736:	4615      	mov	r5, r2
    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 8007738:	d858      	bhi.n	80077ec <SCPI_RegSet+0xbc>
 800773a:	2800      	cmp	r0, #0
 800773c:	d056      	beq.n	80077ec <SCPI_RegSet+0xbc>
 800773e:	eb00 0641 	add.w	r6, r0, r1, lsl #1
    switch (name) {
 8007742:	3901      	subs	r1, #1
    old_val = context->registers[name];
 8007744:	f8b6 0048 	ldrh.w	r0, [r6, #72]	; 0x48
    context->registers[name] = val;
 8007748:	f8a6 2048 	strh.w	r2, [r6, #72]	; 0x48
    switch (name) {
 800774c:	2908      	cmp	r1, #8
 800774e:	d806      	bhi.n	800775e <SCPI_RegSet+0x2e>
 8007750:	e8df f001 	tbb	[pc, r1]
 8007754:	3e2d2520 	.word	0x3e2d2520
 8007758:	322f4341 	.word	0x322f4341
 800775c:	34          	.byte	0x34
 800775d:	00          	.byte	0x00
 800775e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
            if (val & mask) {
 8007762:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8007766:	b289      	uxth	r1, r1
 8007768:	ea11 0203 	ands.w	r2, r1, r3
 800776c:	d03c      	beq.n	80077e8 <SCPI_RegSet+0xb8>
                val |= STB_SRQ;
 800776e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
                if (old_val != val) {
 8007772:	1b42      	subs	r2, r0, r5
 8007774:	bf18      	it	ne
 8007776:	2201      	movne	r2, #1
    context->registers[name] = val;
 8007778:	f8a6 5048 	strh.w	r5, [r6, #72]	; 0x48
    if (srq) {
 800777c:	b3b2      	cbz	r2, 80077ec <SCPI_RegSet+0xbc>
    if (context && context->interface && context->interface->control) {
 800777e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007780:	b3a3      	cbz	r3, 80077ec <SCPI_RegSet+0xbc>
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	b393      	cbz	r3, 80077ec <SCPI_RegSet+0xbc>
        return context->interface->control(context, ctrl, val);
 8007786:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800778a:	4620      	mov	r0, r4
}
 800778c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return context->interface->control(context, ctrl, val);
 8007790:	2101      	movs	r1, #1
 8007792:	4718      	bx	r3
            regUpdate(context, SCPI_REG_STB);
 8007794:	2100      	movs	r1, #0
            regUpdate(context, SCPI_REG_OPER);
 8007796:	4620      	mov	r0, r4
 8007798:	f000 f829 	bl	80077ee <regUpdate>
 800779c:	e005      	b.n	80077aa <SCPI_RegSet+0x7a>
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
 800779e:	2320      	movs	r3, #32
 80077a0:	2203      	movs	r2, #3
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 80077a2:	4629      	mov	r1, r5
 80077a4:	4620      	mov	r0, r4
 80077a6:	f7ff ffae 	bl	8007706 <regUpdateSTB>
    scpi_bool_t srq = FALSE;
 80077aa:	2200      	movs	r2, #0
 80077ac:	e7e4      	b.n	8007778 <SCPI_RegSet+0x48>
            regUpdate(context, SCPI_REG_ESR);
 80077ae:	2102      	movs	r1, #2
 80077b0:	e7f1      	b.n	8007796 <SCPI_RegSet+0x66>
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
 80077b2:	2308      	movs	r3, #8
 80077b4:	461a      	mov	r2, r3
 80077b6:	e7f4      	b.n	80077a2 <SCPI_RegSet+0x72>
            regUpdate(context, SCPI_REG_QUES);
 80077b8:	2107      	movs	r1, #7
 80077ba:	e7ec      	b.n	8007796 <SCPI_RegSet+0x66>
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 80077bc:	2107      	movs	r1, #7
 80077be:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 80077c2:	ea22 0200 	bic.w	r2, r2, r0
 80077c6:	431a      	orrs	r2, r3
 80077c8:	4620      	mov	r0, r4
 80077ca:	f7ff ffb1 	bl	8007730 <SCPI_RegSet>
 80077ce:	e7ec      	b.n	80077aa <SCPI_RegSet+0x7a>
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 80077d0:	2380      	movs	r3, #128	; 0x80
 80077d2:	2205      	movs	r2, #5
 80077d4:	e7e5      	b.n	80077a2 <SCPI_RegSet+0x72>
            regUpdate(context, SCPI_REG_OPER);
 80077d6:	2104      	movs	r1, #4
 80077d8:	e7dd      	b.n	8007796 <SCPI_RegSet+0x66>
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 80077da:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80077de:	ea22 0200 	bic.w	r2, r2, r0
 80077e2:	431a      	orrs	r2, r3
 80077e4:	2104      	movs	r1, #4
 80077e6:	e7ef      	b.n	80077c8 <SCPI_RegSet+0x98>
            if (val & mask) {
 80077e8:	460d      	mov	r5, r1
 80077ea:	e7c5      	b.n	8007778 <SCPI_RegSet+0x48>
}
 80077ec:	bd70      	pop	{r4, r5, r6, pc}

080077ee <regUpdate>:
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
 80077ee:	b510      	push	{r4, lr}
 80077f0:	4603      	mov	r3, r0
 80077f2:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 80077f4:	f7ff ff70 	bl	80076d8 <SCPI_RegGet>
 80077f8:	4621      	mov	r1, r4
}
 80077fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 80077fe:	4602      	mov	r2, r0
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff bf95 	b.w	8007730 <SCPI_RegSet>

08007806 <SCPI_RegSetBits>:
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 8007806:	b510      	push	{r4, lr}
 8007808:	4603      	mov	r3, r0
 800780a:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 800780c:	f7ff ff64 	bl	80076d8 <SCPI_RegGet>
 8007810:	4302      	orrs	r2, r0
 8007812:	4621      	mov	r1, r4
}
 8007814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 8007818:	b292      	uxth	r2, r2
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff bf88 	b.w	8007730 <SCPI_RegSet>

08007820 <SCPI_EventClear>:
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 8007820:	2200      	movs	r2, #0
 8007822:	2102      	movs	r1, #2
 8007824:	f7ff bf84 	b.w	8007730 <SCPI_RegSet>

08007828 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
 8007828:	b510      	push	{r4, lr}
 800782a:	4604      	mov	r4, r0
    SCPI_EventClear(context);
 800782c:	f7ff fff8 	bl	8007820 <SCPI_EventClear>
    SCPI_ErrorClear(context);
 8007830:	4620      	mov	r0, r4
 8007832:	f7ff fdef 	bl	8007414 <SCPI_ErrorClear>
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
 8007836:	4620      	mov	r0, r4
 8007838:	2200      	movs	r2, #0
 800783a:	2104      	movs	r1, #4
 800783c:	f7ff ff78 	bl	8007730 <SCPI_RegSet>
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 8007840:	4620      	mov	r0, r4
 8007842:	2200      	movs	r2, #0
 8007844:	2107      	movs	r1, #7
 8007846:	f7ff ff73 	bl	8007730 <SCPI_RegSet>
    return SCPI_RES_OK;
}
 800784a:	2001      	movs	r0, #1
 800784c:	bd10      	pop	{r4, pc}

0800784e <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 800784e:	b513      	push	{r0, r1, r4, lr}
    int32_t new_ESE;
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 8007850:	2201      	movs	r2, #1
 8007852:	a901      	add	r1, sp, #4
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 8007854:	4604      	mov	r4, r0
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 8007856:	f000 fe63 	bl	8008520 <SCPI_ParamInt32>
 800785a:	b140      	cbz	r0, 800786e <SCPI_CoreEse+0x20>
        SCPI_RegSet(context, SCPI_REG_ESE, (scpi_reg_val_t) new_ESE);
 800785c:	4620      	mov	r0, r4
 800785e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8007862:	2103      	movs	r1, #3
 8007864:	f7ff ff64 	bl	8007730 <SCPI_RegSet>
        return SCPI_RES_OK;
 8007868:	2001      	movs	r0, #1
    }
    return SCPI_RES_ERR;
}
 800786a:	b002      	add	sp, #8
 800786c:	bd10      	pop	{r4, pc}
    return SCPI_RES_ERR;
 800786e:	f04f 30ff 	mov.w	r0, #4294967295
 8007872:	e7fa      	b.n	800786a <SCPI_CoreEse+0x1c>

08007874 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
 8007874:	b508      	push	{r3, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 8007876:	b128      	cbz	r0, 8007884 <SCPI_CoreEseQ+0x10>
        return context->registers[name];
 8007878:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESE));
 800787c:	f000 fc8b 	bl	8008196 <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 8007880:	2001      	movs	r0, #1
 8007882:	bd08      	pop	{r3, pc}
        return 0;
 8007884:	4601      	mov	r1, r0
 8007886:	e7f9      	b.n	800787c <SCPI_CoreEseQ+0x8>

08007888 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
 8007888:	b510      	push	{r4, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 800788a:	4604      	mov	r4, r0
 800788c:	b158      	cbz	r0, 80078a6 <SCPI_CoreEsrQ+0x1e>
        return context->registers[name];
 800788e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESR));
 8007892:	4620      	mov	r0, r4
 8007894:	f000 fc7f 	bl	8008196 <SCPI_ResultInt32>
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 8007898:	4620      	mov	r0, r4
 800789a:	2200      	movs	r2, #0
 800789c:	2102      	movs	r1, #2
 800789e:	f7ff ff47 	bl	8007730 <SCPI_RegSet>
    return SCPI_RES_OK;
}
 80078a2:	2001      	movs	r0, #1
 80078a4:	bd10      	pop	{r4, pc}
        return 0;
 80078a6:	4601      	mov	r1, r0
 80078a8:	e7f3      	b.n	8007892 <SCPI_CoreEsrQ+0xa>

080078aa <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
 80078aa:	b508      	push	{r3, lr}
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
 80078ac:	2201      	movs	r2, #1
 80078ae:	2102      	movs	r1, #2
 80078b0:	f7ff ffa9 	bl	8007806 <SCPI_RegSetBits>
    return SCPI_RES_OK;
}
 80078b4:	2001      	movs	r0, #1
 80078b6:	bd08      	pop	{r3, pc}

080078b8 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
 80078b8:	b508      	push	{r3, lr}
    /* Operation is always completed */
    SCPI_ResultInt32(context, 1);
 80078ba:	2101      	movs	r1, #1
 80078bc:	f000 fc6b 	bl	8008196 <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 80078c0:	2001      	movs	r0, #1
 80078c2:	bd08      	pop	{r3, pc}

080078c4 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 80078c4:	b513      	push	{r0, r1, r4, lr}
    int32_t new_SRE;
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 80078c6:	2201      	movs	r2, #1
 80078c8:	a901      	add	r1, sp, #4
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 80078ca:	4604      	mov	r4, r0
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 80078cc:	f000 fe28 	bl	8008520 <SCPI_ParamInt32>
 80078d0:	b140      	cbz	r0, 80078e4 <SCPI_CoreSre+0x20>
        SCPI_RegSet(context, SCPI_REG_SRE, (scpi_reg_val_t) new_SRE);
 80078d2:	4620      	mov	r0, r4
 80078d4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80078d8:	2101      	movs	r1, #1
 80078da:	f7ff ff29 	bl	8007730 <SCPI_RegSet>
        return SCPI_RES_OK;
 80078de:	2001      	movs	r0, #1
    }
    return SCPI_RES_ERR;
}
 80078e0:	b002      	add	sp, #8
 80078e2:	bd10      	pop	{r4, pc}
    return SCPI_RES_ERR;
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295
 80078e8:	e7fa      	b.n	80078e0 <SCPI_CoreSre+0x1c>

080078ea <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
 80078ea:	b508      	push	{r3, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 80078ec:	b128      	cbz	r0, 80078fa <SCPI_CoreSreQ+0x10>
        return context->registers[name];
 80078ee:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_SRE));
 80078f2:	f000 fc50 	bl	8008196 <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 80078f6:	2001      	movs	r0, #1
 80078f8:	bd08      	pop	{r3, pc}
        return 0;
 80078fa:	4601      	mov	r1, r0
 80078fc:	e7f9      	b.n	80078f2 <SCPI_CoreSreQ+0x8>

080078fe <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
 80078fe:	b508      	push	{r3, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 8007900:	b128      	cbz	r0, 800790e <SCPI_CoreStbQ+0x10>
        return context->registers[name];
 8007902:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_STB));
 8007906:	f000 fc46 	bl	8008196 <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 800790a:	2001      	movs	r0, #1
 800790c:	bd08      	pop	{r3, pc}
        return 0;
 800790e:	4601      	mov	r1, r0
 8007910:	e7f9      	b.n	8007906 <SCPI_CoreStbQ+0x8>

08007912 <SCPI_CoreWai>:
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
}
 8007912:	2001      	movs	r0, #1
 8007914:	4770      	bx	lr

08007916 <iseos>:
 * Is end of string
 * @param state
 * @return 
 */
static int iseos(lex_state_t * state) {
    if ((state->buffer + state->len) <= (state->pos)) {
 8007916:	6803      	ldr	r3, [r0, #0]
 8007918:	6882      	ldr	r2, [r0, #8]
 800791a:	6840      	ldr	r0, [r0, #4]
 800791c:	4413      	add	r3, r2
        return 1;
    } else {
        return 0;
    }
}
 800791e:	4298      	cmp	r0, r3
 8007920:	bf34      	ite	cc
 8007922:	2000      	movcc	r0, #0
 8007924:	2001      	movcs	r0, #1
 8007926:	4770      	bx	lr

08007928 <skipWs>:
/**
 * Skip all whitespaces
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
 8007928:	b510      	push	{r4, lr}
    int someSpace = 0;
 800792a:	2100      	movs	r1, #0
static int skipWs(lex_state_t * state) {
 800792c:	4604      	mov	r4, r0
    while (!iseos(state) && isws(state->pos[0])) {
 800792e:	4620      	mov	r0, r4
 8007930:	f7ff fff1 	bl	8007916 <iseos>
 8007934:	b928      	cbnz	r0, 8007942 <skipWs+0x1a>
 8007936:	6863      	ldr	r3, [r4, #4]
 8007938:	781a      	ldrb	r2, [r3, #0]
    if ((c == ' ') || (c == '\t')) {
 800793a:	2a20      	cmp	r2, #32
 800793c:	d003      	beq.n	8007946 <skipWs+0x1e>
 800793e:	2a09      	cmp	r2, #9
 8007940:	d001      	beq.n	8007946 <skipWs+0x1e>
        state->pos++;
        someSpace++;
    }

    return someSpace;
}
 8007942:	4608      	mov	r0, r1
 8007944:	bd10      	pop	{r4, pc}
        state->pos++;
 8007946:	3301      	adds	r3, #1
 8007948:	6063      	str	r3, [r4, #4]
        someSpace++;
 800794a:	3101      	adds	r1, #1
 800794c:	e7ef      	b.n	800792e <skipWs+0x6>

0800794e <skipQuoteProgramData>:
/* 7.7.5 <STRING PROGRAM DATA> */
static int isascii7bit(int c) {
    return (c >= 0) && (c <= 0x7f);
}

static void skipQuoteProgramData(lex_state_t * state, char quote) {
 800794e:	b538      	push	{r3, r4, r5, lr}
 8007950:	4604      	mov	r4, r0
    while (!iseos(state)) {
 8007952:	4620      	mov	r0, r4
 8007954:	f7ff ffdf 	bl	8007916 <iseos>
 8007958:	b990      	cbnz	r0, 8007980 <skipQuoteProgramData+0x32>
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 800795a:	6865      	ldr	r5, [r4, #4]
 800795c:	782a      	ldrb	r2, [r5, #0]
 800795e:	0613      	lsls	r3, r2, #24
 8007960:	d40e      	bmi.n	8007980 <skipQuoteProgramData+0x32>
 8007962:	1c6b      	adds	r3, r5, #1
 8007964:	428a      	cmp	r2, r1
            state->pos++;
 8007966:	6063      	str	r3, [r4, #4]
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 8007968:	d1f3      	bne.n	8007952 <skipQuoteProgramData+0x4>
        } else if (ischr(state, quote)) {
            state->pos++;
            if (!iseos(state) && ischr(state, quote)) {
 800796a:	4620      	mov	r0, r4
 800796c:	f7ff ffd3 	bl	8007916 <iseos>
 8007970:	b928      	cbnz	r0, 800797e <skipQuoteProgramData+0x30>
 8007972:	786b      	ldrb	r3, [r5, #1]
 8007974:	428b      	cmp	r3, r1
 8007976:	d102      	bne.n	800797e <skipQuoteProgramData+0x30>
                state->pos++;
 8007978:	3502      	adds	r5, #2
 800797a:	6065      	str	r5, [r4, #4]
 800797c:	e7e9      	b.n	8007952 <skipQuoteProgramData+0x4>
            } else {
                state->pos--;
 800797e:	6065      	str	r5, [r4, #4]
            }
        } else {
            break;
        }
    }
}
 8007980:	bd38      	pop	{r3, r4, r5, pc}

08007982 <skipProgramMnemonic>:
static int skipProgramMnemonic(lex_state_t * state) {
 8007982:	b538      	push	{r3, r4, r5, lr}
 8007984:	4604      	mov	r4, r0
    const char * startPos = state->pos;
 8007986:	6845      	ldr	r5, [r0, #4]
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8007988:	f7ff ffc5 	bl	8007916 <iseos>
 800798c:	b130      	cbz	r0, 800799c <skipProgramMnemonic+0x1a>
    if (iseos(state)) {
 800798e:	4620      	mov	r0, r4
 8007990:	f7ff ffc1 	bl	8007916 <iseos>
 8007994:	6863      	ldr	r3, [r4, #4]
 8007996:	b1d8      	cbz	r0, 80079d0 <skipProgramMnemonic+0x4e>
        return (state->pos - startPos) * SKIP_INCOMPLETE;
 8007998:	1ae8      	subs	r0, r5, r3
}
 800799a:	bd38      	pop	{r3, r4, r5, pc}
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800799c:	f001 fa18 	bl	8008dd0 <__locale_ctype_ptr>
 80079a0:	6863      	ldr	r3, [r4, #4]
 80079a2:	781a      	ldrb	r2, [r3, #0]
 80079a4:	4410      	add	r0, r2
 80079a6:	7842      	ldrb	r2, [r0, #1]
 80079a8:	0790      	lsls	r0, r2, #30
 80079aa:	d0f0      	beq.n	800798e <skipProgramMnemonic+0xc>
            state->pos++;
 80079ac:	3301      	adds	r3, #1
 80079ae:	6063      	str	r3, [r4, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 80079b0:	4620      	mov	r0, r4
 80079b2:	f7ff ffb0 	bl	8007916 <iseos>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d1e9      	bne.n	800798e <skipProgramMnemonic+0xc>
 80079ba:	f001 fa09 	bl	8008dd0 <__locale_ctype_ptr>
 80079be:	6863      	ldr	r3, [r4, #4]
 80079c0:	781a      	ldrb	r2, [r3, #0]
 80079c2:	4410      	add	r0, r2
 80079c4:	7841      	ldrb	r1, [r0, #1]
 80079c6:	0749      	lsls	r1, r1, #29
 80079c8:	d1f0      	bne.n	80079ac <skipProgramMnemonic+0x2a>
 80079ca:	2a5f      	cmp	r2, #95	; 0x5f
 80079cc:	d0ee      	beq.n	80079ac <skipProgramMnemonic+0x2a>
 80079ce:	e7de      	b.n	800798e <skipProgramMnemonic+0xc>
        return (state->pos - startPos) * SKIP_OK;
 80079d0:	1b58      	subs	r0, r3, r5
 80079d2:	e7e2      	b.n	800799a <skipProgramMnemonic+0x18>

080079d4 <skipNumbers>:
static int skipNumbers(lex_state_t * state) {
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	4605      	mov	r5, r0
    int someNumbers = 0;
 80079d8:	2400      	movs	r4, #0
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 80079da:	4628      	mov	r0, r5
 80079dc:	f7ff ff9b 	bl	8007916 <iseos>
 80079e0:	b938      	cbnz	r0, 80079f2 <skipNumbers+0x1e>
 80079e2:	f001 f9f5 	bl	8008dd0 <__locale_ctype_ptr>
 80079e6:	686b      	ldr	r3, [r5, #4]
 80079e8:	781a      	ldrb	r2, [r3, #0]
 80079ea:	4410      	add	r0, r2
 80079ec:	7842      	ldrb	r2, [r0, #1]
 80079ee:	0752      	lsls	r2, r2, #29
 80079f0:	d401      	bmi.n	80079f6 <skipNumbers+0x22>
}
 80079f2:	4620      	mov	r0, r4
 80079f4:	bd38      	pop	{r3, r4, r5, pc}
        state->pos++;
 80079f6:	3301      	adds	r3, #1
 80079f8:	606b      	str	r3, [r5, #4]
        someNumbers++;
 80079fa:	3401      	adds	r4, #1
 80079fc:	e7ed      	b.n	80079da <skipNumbers+0x6>

080079fe <skipAlpha>:
static int skipAlpha(lex_state_t * state) {
 80079fe:	b538      	push	{r3, r4, r5, lr}
 8007a00:	4605      	mov	r5, r0
    int someLetters = 0;
 8007a02:	2400      	movs	r4, #0
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8007a04:	4628      	mov	r0, r5
 8007a06:	f7ff ff86 	bl	8007916 <iseos>
 8007a0a:	b938      	cbnz	r0, 8007a1c <skipAlpha+0x1e>
 8007a0c:	f001 f9e0 	bl	8008dd0 <__locale_ctype_ptr>
 8007a10:	686b      	ldr	r3, [r5, #4]
 8007a12:	781a      	ldrb	r2, [r3, #0]
 8007a14:	4410      	add	r0, r2
 8007a16:	7842      	ldrb	r2, [r0, #1]
 8007a18:	0792      	lsls	r2, r2, #30
 8007a1a:	d101      	bne.n	8007a20 <skipAlpha+0x22>
}
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
        state->pos++;
 8007a20:	3301      	adds	r3, #1
 8007a22:	606b      	str	r3, [r5, #4]
        someLetters++;
 8007a24:	3401      	adds	r4, #1
 8007a26:	e7ed      	b.n	8007a04 <skipAlpha+0x6>

08007a28 <skipPlusmn>:
static int skipPlusmn(lex_state_t * state) {
 8007a28:	b508      	push	{r3, lr}
 8007a2a:	4601      	mov	r1, r0
    if (!iseos(state) && isplusmn(state->pos[0])) {
 8007a2c:	f7ff ff73 	bl	8007916 <iseos>
 8007a30:	b948      	cbnz	r0, 8007a46 <skipPlusmn+0x1e>
 8007a32:	684b      	ldr	r3, [r1, #4]
 8007a34:	781a      	ldrb	r2, [r3, #0]
    return c == '+' || c == '-';
 8007a36:	2a2b      	cmp	r2, #43	; 0x2b
 8007a38:	d001      	beq.n	8007a3e <skipPlusmn+0x16>
 8007a3a:	2a2d      	cmp	r2, #45	; 0x2d
 8007a3c:	d102      	bne.n	8007a44 <skipPlusmn+0x1c>
        return SKIP_OK;
 8007a3e:	2001      	movs	r0, #1
        state->pos++;
 8007a40:	3301      	adds	r3, #1
 8007a42:	604b      	str	r3, [r1, #4]
}
 8007a44:	bd08      	pop	{r3, pc}
        return SKIP_NONE;
 8007a46:	2000      	movs	r0, #0
 8007a48:	e7fc      	b.n	8007a44 <skipPlusmn+0x1c>

08007a4a <skipChr>:
static int skipChr(lex_state_t * state, char chr) {
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	4604      	mov	r4, r0
    if (!iseos(state) && ischr(state, chr)) {
 8007a4e:	f7ff ff62 	bl	8007916 <iseos>
 8007a52:	b938      	cbnz	r0, 8007a64 <skipChr+0x1a>
 8007a54:	6863      	ldr	r3, [r4, #4]
 8007a56:	781a      	ldrb	r2, [r3, #0]
 8007a58:	428a      	cmp	r2, r1
 8007a5a:	d102      	bne.n	8007a62 <skipChr+0x18>
        return SKIP_OK;
 8007a5c:	2001      	movs	r0, #1
        state->pos++;
 8007a5e:	3301      	adds	r3, #1
 8007a60:	6063      	str	r3, [r4, #4]
}
 8007a62:	bd10      	pop	{r4, pc}
        return SKIP_NONE;
 8007a64:	2000      	movs	r0, #0
 8007a66:	e7fc      	b.n	8007a62 <skipChr+0x18>

08007a68 <skipDigit>:
static int skipDigit(lex_state_t * state) {
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	4604      	mov	r4, r0
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8007a6c:	f7ff ff53 	bl	8007916 <iseos>
 8007a70:	b108      	cbz	r0, 8007a76 <skipDigit+0xe>
        return SKIP_NONE;
 8007a72:	2000      	movs	r0, #0
}
 8007a74:	bd10      	pop	{r4, pc}
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8007a76:	f001 f9ab 	bl	8008dd0 <__locale_ctype_ptr>
 8007a7a:	6863      	ldr	r3, [r4, #4]
 8007a7c:	781a      	ldrb	r2, [r3, #0]
 8007a7e:	4410      	add	r0, r2
 8007a80:	7842      	ldrb	r2, [r0, #1]
 8007a82:	0752      	lsls	r2, r2, #29
 8007a84:	d5f5      	bpl.n	8007a72 <skipDigit+0xa>
        state->pos++;
 8007a86:	3301      	adds	r3, #1
 8007a88:	6063      	str	r3, [r4, #4]
        return SKIP_OK;
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	e7f2      	b.n	8007a74 <skipDigit+0xc>

08007a8e <scpiLex_IsEos>:
    return iseos(state);
 8007a8e:	f7ff bf42 	b.w	8007916 <iseos>

08007a92 <scpiLex_WhiteSpace>:
int scpiLex_WhiteSpace(lex_state_t * state, scpi_token_t * token) {
 8007a92:	b538      	push	{r3, r4, r5, lr}
 8007a94:	460c      	mov	r4, r1
 8007a96:	4605      	mov	r5, r0
    token->ptr = state->pos;
 8007a98:	6843      	ldr	r3, [r0, #4]
 8007a9a:	604b      	str	r3, [r1, #4]
    skipWs(state);
 8007a9c:	f7ff ff44 	bl	8007928 <skipWs>
    token->len = state->pos - token->ptr;
 8007aa0:	6863      	ldr	r3, [r4, #4]
 8007aa2:	6868      	ldr	r0, [r5, #4]
 8007aa4:	1ac0      	subs	r0, r0, r3
    if (token->len > 0) {
 8007aa6:	2800      	cmp	r0, #0
        token->type = SCPI_TOKEN_WS;
 8007aa8:	bfcc      	ite	gt
 8007aaa:	2317      	movgt	r3, #23
        token->type = SCPI_TOKEN_UNKNOWN;
 8007aac:	231a      	movle	r3, #26
    token->len = state->pos - token->ptr;
 8007aae:	60a0      	str	r0, [r4, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8007ab0:	7023      	strb	r3, [r4, #0]
}
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}

08007ab4 <scpiLex_ProgramHeader>:
    token->ptr = state->pos;
 8007ab4:	6843      	ldr	r3, [r0, #4]
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 8007ab6:	b570      	push	{r4, r5, r6, lr}
    token->ptr = state->pos;
 8007ab8:	604b      	str	r3, [r1, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8007aba:	231a      	movs	r3, #26
 8007abc:	700b      	strb	r3, [r1, #0]
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 8007abe:	4604      	mov	r4, r0
 8007ac0:	460d      	mov	r5, r1
    if (!iseos(state) && ischr(state, '*')) {
 8007ac2:	f7ff ff28 	bl	8007916 <iseos>
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d130      	bne.n	8007b2e <scpiLex_ProgramHeader+0x7a>
 8007acc:	6863      	ldr	r3, [r4, #4]
 8007ace:	781a      	ldrb	r2, [r3, #0]
 8007ad0:	2a2a      	cmp	r2, #42	; 0x2a
 8007ad2:	d11d      	bne.n	8007b10 <scpiLex_ProgramHeader+0x5c>
        state->pos++;
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	6063      	str	r3, [r4, #4]
        res = skipProgramMnemonic(state);
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f7ff ff52 	bl	8007982 <skipProgramMnemonic>
        if (res == SKIP_NONE && iseos(state)) {
 8007ade:	b970      	cbnz	r0, 8007afe <scpiLex_ProgramHeader+0x4a>
        token->type = SCPI_TOKEN_INCOMPLETE_COMMON_PROGRAM_HEADER;
 8007ae0:	2314      	movs	r3, #20
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 8007ae2:	702b      	strb	r3, [r5, #0]
    if (token->type != SCPI_TOKEN_UNKNOWN) {
 8007ae4:	782b      	ldrb	r3, [r5, #0]
 8007ae6:	686a      	ldr	r2, [r5, #4]
 8007ae8:	2b1a      	cmp	r3, #26
        token->len = 0;
 8007aea:	bf0b      	itete	eq
 8007aec:	2300      	moveq	r3, #0
        token->len = state->pos - token->ptr;
 8007aee:	6863      	ldrne	r3, [r4, #4]
        token->len = 0;
 8007af0:	60ab      	streq	r3, [r5, #8]
        token->len = state->pos - token->ptr;
 8007af2:	1a9b      	subne	r3, r3, r2
 8007af4:	bf14      	ite	ne
 8007af6:	60ab      	strne	r3, [r5, #8]
        state->pos = token->ptr;
 8007af8:	6062      	streq	r2, [r4, #4]
}
 8007afa:	68a8      	ldr	r0, [r5, #8]
 8007afc:	bd70      	pop	{r4, r5, r6, pc}
        if (skipChr(state, '?') >= SKIP_OK) {
 8007afe:	213f      	movs	r1, #63	; 0x3f
 8007b00:	4620      	mov	r0, r4
 8007b02:	f7ff ffa2 	bl	8007a4a <skipChr>
 8007b06:	2800      	cmp	r0, #0
            token->type = SCPI_TOKEN_COMMON_QUERY_PROGRAM_HEADER;
 8007b08:	bfcc      	ite	gt
 8007b0a:	2316      	movgt	r3, #22
            token->type = SCPI_TOKEN_COMMON_PROGRAM_HEADER;
 8007b0c:	2313      	movle	r3, #19
 8007b0e:	e7e8      	b.n	8007ae2 <scpiLex_ProgramHeader+0x2e>
    if (!iseos(state) && ischr(state, ':')) {
 8007b10:	2a3a      	cmp	r2, #58	; 0x3a
 8007b12:	d102      	bne.n	8007b1a <scpiLex_ProgramHeader+0x66>
        return SKIP_OK;
 8007b14:	2601      	movs	r6, #1
        state->pos++;
 8007b16:	3301      	adds	r3, #1
 8007b18:	6063      	str	r3, [r4, #4]
    res = skipProgramMnemonic(state);
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f7ff ff31 	bl	8007982 <skipProgramMnemonic>
    if (res >= SKIP_OK) {
 8007b20:	2800      	cmp	r0, #0
 8007b22:	dc07      	bgt.n	8007b34 <scpiLex_ProgramHeader+0x80>
    } else if (res <= SKIP_INCOMPLETE) {
 8007b24:	d115      	bne.n	8007b52 <scpiLex_ProgramHeader+0x9e>
    } else if (firstColon) {
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	d0dc      	beq.n	8007ae4 <scpiLex_ProgramHeader+0x30>
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 8007b2a:	2312      	movs	r3, #18
 8007b2c:	e7d9      	b.n	8007ae2 <scpiLex_ProgramHeader+0x2e>
        return SKIP_NONE;
 8007b2e:	2600      	movs	r6, #0
 8007b30:	e7f3      	b.n	8007b1a <scpiLex_ProgramHeader+0x66>
            } else if (res == SKIP_NONE) {
 8007b32:	d0fa      	beq.n	8007b2a <scpiLex_ProgramHeader+0x76>
    if (!iseos(state) && ischr(state, ':')) {
 8007b34:	4620      	mov	r0, r4
 8007b36:	f7ff feee 	bl	8007916 <iseos>
 8007b3a:	b950      	cbnz	r0, 8007b52 <scpiLex_ProgramHeader+0x9e>
 8007b3c:	6863      	ldr	r3, [r4, #4]
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	2a3a      	cmp	r2, #58	; 0x3a
 8007b42:	d106      	bne.n	8007b52 <scpiLex_ProgramHeader+0x9e>
        state->pos++;
 8007b44:	3301      	adds	r3, #1
 8007b46:	6063      	str	r3, [r4, #4]
            res = skipProgramMnemonic(state);
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f7ff ff1a 	bl	8007982 <skipProgramMnemonic>
            if (res <= SKIP_INCOMPLETE) {
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	daef      	bge.n	8007b32 <scpiLex_ProgramHeader+0x7e>
            if (skipChr(state, '?') >= SKIP_OK) {
 8007b52:	213f      	movs	r1, #63	; 0x3f
 8007b54:	4620      	mov	r0, r4
 8007b56:	f7ff ff78 	bl	8007a4a <skipChr>
 8007b5a:	2800      	cmp	r0, #0
                token->type = SCPI_TOKEN_COMPOUND_QUERY_PROGRAM_HEADER;
 8007b5c:	bfcc      	ite	gt
 8007b5e:	2315      	movgt	r3, #21
                token->type = SCPI_TOKEN_COMPOUND_PROGRAM_HEADER;
 8007b60:	2311      	movle	r3, #17
 8007b62:	e7be      	b.n	8007ae2 <scpiLex_ProgramHeader+0x2e>

08007b64 <scpiLex_CharacterProgramData>:
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 8007b64:	b538      	push	{r3, r4, r5, lr}
    token->ptr = state->pos;
 8007b66:	6843      	ldr	r3, [r0, #4]
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 8007b68:	4604      	mov	r4, r0
    token->ptr = state->pos;
 8007b6a:	604b      	str	r3, [r1, #4]
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 8007b6c:	460d      	mov	r5, r1
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8007b6e:	f7ff fed2 	bl	8007916 <iseos>
 8007b72:	b138      	cbz	r0, 8007b84 <scpiLex_CharacterProgramData+0x20>
    token->len = state->pos - token->ptr;
 8007b74:	6860      	ldr	r0, [r4, #4]
 8007b76:	686b      	ldr	r3, [r5, #4]
 8007b78:	1ac0      	subs	r0, r0, r3
    if (token->len > 0) {
 8007b7a:	2800      	cmp	r0, #0
    token->len = state->pos - token->ptr;
 8007b7c:	60a8      	str	r0, [r5, #8]
    if (token->len > 0) {
 8007b7e:	dc1b      	bgt.n	8007bb8 <scpiLex_CharacterProgramData+0x54>
        token->type = SCPI_TOKEN_UNKNOWN;
 8007b80:	231a      	movs	r3, #26
 8007b82:	e01a      	b.n	8007bba <scpiLex_CharacterProgramData+0x56>
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8007b84:	f001 f924 	bl	8008dd0 <__locale_ctype_ptr>
 8007b88:	6863      	ldr	r3, [r4, #4]
 8007b8a:	781a      	ldrb	r2, [r3, #0]
 8007b8c:	4410      	add	r0, r2
 8007b8e:	7842      	ldrb	r2, [r0, #1]
 8007b90:	0790      	lsls	r0, r2, #30
 8007b92:	d0ef      	beq.n	8007b74 <scpiLex_CharacterProgramData+0x10>
            state->pos++;
 8007b94:	3301      	adds	r3, #1
 8007b96:	6063      	str	r3, [r4, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f7ff febc 	bl	8007916 <iseos>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d1e8      	bne.n	8007b74 <scpiLex_CharacterProgramData+0x10>
 8007ba2:	f001 f915 	bl	8008dd0 <__locale_ctype_ptr>
 8007ba6:	6863      	ldr	r3, [r4, #4]
 8007ba8:	781a      	ldrb	r2, [r3, #0]
 8007baa:	4410      	add	r0, r2
 8007bac:	7841      	ldrb	r1, [r0, #1]
 8007bae:	0749      	lsls	r1, r1, #29
 8007bb0:	d1f0      	bne.n	8007b94 <scpiLex_CharacterProgramData+0x30>
 8007bb2:	2a5f      	cmp	r2, #95	; 0x5f
 8007bb4:	d0ee      	beq.n	8007b94 <scpiLex_CharacterProgramData+0x30>
 8007bb6:	e7dd      	b.n	8007b74 <scpiLex_CharacterProgramData+0x10>
        token->type = SCPI_TOKEN_PROGRAM_MNEMONIC;
 8007bb8:	2309      	movs	r3, #9
        token->type = SCPI_TOKEN_UNKNOWN;
 8007bba:	702b      	strb	r3, [r5, #0]
}
 8007bbc:	bd38      	pop	{r3, r4, r5, pc}

08007bbe <scpiLex_DecimalNumericProgramData>:
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 8007bbe:	b570      	push	{r4, r5, r6, lr}
 8007bc0:	4604      	mov	r4, r0
    token->ptr = state->pos;
 8007bc2:	6843      	ldr	r3, [r0, #4]
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 8007bc4:	460d      	mov	r5, r1
    token->ptr = state->pos;
 8007bc6:	604b      	str	r3, [r1, #4]
    skipPlusmn(state);
 8007bc8:	f7ff ff2e 	bl	8007a28 <skipPlusmn>
    someNumbers += skipNumbers(state);
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f7ff ff01 	bl	80079d4 <skipNumbers>
    if (skipChr(state, '.')) {
 8007bd2:	212e      	movs	r1, #46	; 0x2e
    someNumbers += skipNumbers(state);
 8007bd4:	4606      	mov	r6, r0
    if (skipChr(state, '.')) {
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f7ff ff37 	bl	8007a4a <skipChr>
 8007bdc:	b118      	cbz	r0, 8007be6 <scpiLex_DecimalNumericProgramData+0x28>
        someNumbers += skipNumbers(state);
 8007bde:	4620      	mov	r0, r4
 8007be0:	f7ff fef8 	bl	80079d4 <skipNumbers>
 8007be4:	4406      	add	r6, r0
    if (skipMantisa(state)) {
 8007be6:	b336      	cbz	r6, 8007c36 <scpiLex_DecimalNumericProgramData+0x78>
        skipWs(state);
 8007be8:	4620      	mov	r0, r4
        rollback = state->pos;
 8007bea:	6866      	ldr	r6, [r4, #4]
        skipWs(state);
 8007bec:	f7ff fe9c 	bl	8007928 <skipWs>
    if (!iseos(state) && isE(state->pos[0])) {
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f7ff fe90 	bl	8007916 <iseos>
 8007bf6:	b150      	cbz	r0, 8007c0e <scpiLex_DecimalNumericProgramData+0x50>
            state->pos = rollback;
 8007bf8:	6066      	str	r6, [r4, #4]
    token->len = state->pos - token->ptr;
 8007bfa:	686b      	ldr	r3, [r5, #4]
 8007bfc:	6860      	ldr	r0, [r4, #4]
 8007bfe:	1ac0      	subs	r0, r0, r3
    if (token->len > 0) {
 8007c00:	2800      	cmp	r0, #0
        token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA;
 8007c02:	bfcc      	ite	gt
 8007c04:	230a      	movgt	r3, #10
        token->type = SCPI_TOKEN_UNKNOWN;
 8007c06:	231a      	movle	r3, #26
    token->len = state->pos - token->ptr;
 8007c08:	60a8      	str	r0, [r5, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8007c0a:	702b      	strb	r3, [r5, #0]
}
 8007c0c:	bd70      	pop	{r4, r5, r6, pc}
    if (!iseos(state) && isE(state->pos[0])) {
 8007c0e:	6863      	ldr	r3, [r4, #4]
    return c == 'e' || c == 'E';
 8007c10:	781a      	ldrb	r2, [r3, #0]
 8007c12:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007c16:	2a45      	cmp	r2, #69	; 0x45
 8007c18:	d1ee      	bne.n	8007bf8 <scpiLex_DecimalNumericProgramData+0x3a>
        state->pos++;
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	6063      	str	r3, [r4, #4]
        skipWs(state);
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f7ff fe82 	bl	8007928 <skipWs>
        skipPlusmn(state);
 8007c24:	4620      	mov	r0, r4
 8007c26:	f7ff feff 	bl	8007a28 <skipPlusmn>
        someNumbers = skipNumbers(state);
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f7ff fed2 	bl	80079d4 <skipNumbers>
        if (!skipExponent(state)) {
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d1e2      	bne.n	8007bfa <scpiLex_DecimalNumericProgramData+0x3c>
 8007c34:	e7e0      	b.n	8007bf8 <scpiLex_DecimalNumericProgramData+0x3a>
        state->pos = token->ptr;
 8007c36:	686b      	ldr	r3, [r5, #4]
 8007c38:	6063      	str	r3, [r4, #4]
 8007c3a:	e7de      	b.n	8007bfa <scpiLex_DecimalNumericProgramData+0x3c>

08007c3c <scpiLex_SuffixProgramData>:
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4604      	mov	r4, r0
    token->ptr = state->pos;
 8007c40:	6843      	ldr	r3, [r0, #4]
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 8007c42:	460d      	mov	r5, r1
    token->ptr = state->pos;
 8007c44:	604b      	str	r3, [r1, #4]
    skipChr(state, '/');
 8007c46:	212f      	movs	r1, #47	; 0x2f
 8007c48:	f7ff feff 	bl	8007a4a <skipChr>
    if (skipAlpha(state)) {
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f7ff fed6 	bl	80079fe <skipAlpha>
 8007c52:	b1a8      	cbz	r0, 8007c80 <scpiLex_SuffixProgramData+0x44>
        skipChr(state, '-');
 8007c54:	212d      	movs	r1, #45	; 0x2d
 8007c56:	4620      	mov	r0, r4
 8007c58:	f7ff fef7 	bl	8007a4a <skipChr>
        skipDigit(state);
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f7ff ff03 	bl	8007a68 <skipDigit>
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 8007c62:	4620      	mov	r0, r4
 8007c64:	f7ff fe57 	bl	8007916 <iseos>
 8007c68:	b950      	cbnz	r0, 8007c80 <scpiLex_SuffixProgramData+0x44>
 8007c6a:	6863      	ldr	r3, [r4, #4]
    return (state->pos[0] == chr);
 8007c6c:	781a      	ldrb	r2, [r3, #0]
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 8007c6e:	3a2e      	subs	r2, #46	; 0x2e
 8007c70:	2a01      	cmp	r2, #1
 8007c72:	d805      	bhi.n	8007c80 <scpiLex_SuffixProgramData+0x44>
        state->pos++;
 8007c74:	3301      	adds	r3, #1
 8007c76:	6063      	str	r3, [r4, #4]
            skipAlpha(state);
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f7ff fec0 	bl	80079fe <skipAlpha>
 8007c7e:	e7e9      	b.n	8007c54 <scpiLex_SuffixProgramData+0x18>
    token->len = state->pos - token->ptr;
 8007c80:	6863      	ldr	r3, [r4, #4]
 8007c82:	686a      	ldr	r2, [r5, #4]
 8007c84:	1a9b      	subs	r3, r3, r2
    if ((token->len > 0)) {
 8007c86:	2b00      	cmp	r3, #0
    token->len = state->pos - token->ptr;
 8007c88:	60ab      	str	r3, [r5, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8007c8a:	bfdd      	ittte	le
 8007c8c:	231a      	movle	r3, #26
 8007c8e:	702b      	strble	r3, [r5, #0]
        token->len = 0;
 8007c90:	2300      	movle	r3, #0
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 8007c92:	230c      	movgt	r3, #12
        state->pos = token->ptr;
 8007c94:	bfda      	itte	le
 8007c96:	6062      	strle	r2, [r4, #4]
        token->len = 0;
 8007c98:	60ab      	strle	r3, [r5, #8]
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 8007c9a:	702b      	strbgt	r3, [r5, #0]
}
 8007c9c:	68a8      	ldr	r0, [r5, #8]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}

08007ca0 <scpiLex_NondecimalNumericData>:
    token->ptr = state->pos;
 8007ca0:	6843      	ldr	r3, [r0, #4]
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 8007ca2:	b570      	push	{r4, r5, r6, lr}
 8007ca4:	460d      	mov	r5, r1
    token->ptr = state->pos;
 8007ca6:	604b      	str	r3, [r1, #4]
    if (skipChr(state, '#')) {
 8007ca8:	2123      	movs	r1, #35	; 0x23
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 8007caa:	4604      	mov	r4, r0
    if (skipChr(state, '#')) {
 8007cac:	f7ff fecd 	bl	8007a4a <skipChr>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d054      	beq.n	8007d5e <scpiLex_NondecimalNumericData+0xbe>
        if (!iseos(state)) {
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f7ff fe2e 	bl	8007916 <iseos>
 8007cba:	4606      	mov	r6, r0
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d14e      	bne.n	8007d5e <scpiLex_NondecimalNumericData+0xbe>
            if (isH(state->pos[0])) {
 8007cc0:	6863      	ldr	r3, [r4, #4]
    return c == 'h' || c == 'H';
 8007cc2:	781a      	ldrb	r2, [r3, #0]
 8007cc4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007cc8:	2a48      	cmp	r2, #72	; 0x48
 8007cca:	d122      	bne.n	8007d12 <scpiLex_NondecimalNumericData+0x72>
                state->pos++;
 8007ccc:	3301      	adds	r3, #1
 8007cce:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f7ff fe20 	bl	8007916 <iseos>
 8007cd6:	b178      	cbz	r0, 8007cf8 <scpiLex_NondecimalNumericData+0x58>
                token->type = SCPI_TOKEN_HEXNUM;
 8007cd8:	2306      	movs	r3, #6
                token->type = SCPI_TOKEN_BINNUM;
 8007cda:	702b      	strb	r3, [r5, #0]
    if (someNumbers) {
 8007cdc:	2e00      	cmp	r6, #0
 8007cde:	d03e      	beq.n	8007d5e <scpiLex_NondecimalNumericData+0xbe>
        token->ptr += 2; /* ignore number prefix */
 8007ce0:	686b      	ldr	r3, [r5, #4]
        token->len = state->pos - token->ptr;
 8007ce2:	6862      	ldr	r2, [r4, #4]
        token->ptr += 2; /* ignore number prefix */
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	606b      	str	r3, [r5, #4]
        token->len = state->pos - token->ptr;
 8007ce8:	1ad3      	subs	r3, r2, r3
        token->len = 0;
 8007cea:	60ab      	str	r3, [r5, #8]
    return token->len > 0 ? token->len + 2 : 0;
 8007cec:	68a8      	ldr	r0, [r5, #8]
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	bfcc      	ite	gt
 8007cf2:	3002      	addgt	r0, #2
 8007cf4:	2000      	movle	r0, #0
}
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8007cf8:	f001 f86a 	bl	8008dd0 <__locale_ctype_ptr>
 8007cfc:	6863      	ldr	r3, [r4, #4]
 8007cfe:	781a      	ldrb	r2, [r3, #0]
 8007d00:	4410      	add	r0, r2
 8007d02:	7842      	ldrb	r2, [r0, #1]
 8007d04:	f012 0f44 	tst.w	r2, #68	; 0x44
 8007d08:	d0e6      	beq.n	8007cd8 <scpiLex_NondecimalNumericData+0x38>
        state->pos++;
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	6063      	str	r3, [r4, #4]
        someNumbers++;
 8007d0e:	3601      	adds	r6, #1
 8007d10:	e7de      	b.n	8007cd0 <scpiLex_NondecimalNumericData+0x30>
    return c == 'q' || c == 'Q';
 8007d12:	2a51      	cmp	r2, #81	; 0x51
 8007d14:	d110      	bne.n	8007d38 <scpiLex_NondecimalNumericData+0x98>
                state->pos++;
 8007d16:	3301      	adds	r3, #1
 8007d18:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f7ff fdfb 	bl	8007916 <iseos>
 8007d20:	b940      	cbnz	r0, 8007d34 <scpiLex_NondecimalNumericData+0x94>
 8007d22:	6863      	ldr	r3, [r4, #4]
    if ((c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7')) {
 8007d24:	781a      	ldrb	r2, [r3, #0]
 8007d26:	3a30      	subs	r2, #48	; 0x30
 8007d28:	2a07      	cmp	r2, #7
 8007d2a:	d803      	bhi.n	8007d34 <scpiLex_NondecimalNumericData+0x94>
        state->pos++;
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	6063      	str	r3, [r4, #4]
        someNumbers++;
 8007d30:	3601      	adds	r6, #1
 8007d32:	e7f2      	b.n	8007d1a <scpiLex_NondecimalNumericData+0x7a>
                token->type = SCPI_TOKEN_OCTNUM;
 8007d34:	2307      	movs	r3, #7
 8007d36:	e7d0      	b.n	8007cda <scpiLex_NondecimalNumericData+0x3a>
    return c == 'b' || c == 'B';
 8007d38:	2a42      	cmp	r2, #66	; 0x42
 8007d3a:	d110      	bne.n	8007d5e <scpiLex_NondecimalNumericData+0xbe>
                state->pos++;
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 8007d40:	4620      	mov	r0, r4
 8007d42:	f7ff fde8 	bl	8007916 <iseos>
 8007d46:	b940      	cbnz	r0, 8007d5a <scpiLex_NondecimalNumericData+0xba>
 8007d48:	6863      	ldr	r3, [r4, #4]
    if ((c == '0') || (c == '1')) {
 8007d4a:	781a      	ldrb	r2, [r3, #0]
 8007d4c:	3a30      	subs	r2, #48	; 0x30
 8007d4e:	2a01      	cmp	r2, #1
 8007d50:	d803      	bhi.n	8007d5a <scpiLex_NondecimalNumericData+0xba>
        state->pos++;
 8007d52:	3301      	adds	r3, #1
 8007d54:	6063      	str	r3, [r4, #4]
        someNumbers++;
 8007d56:	3601      	adds	r6, #1
 8007d58:	e7f2      	b.n	8007d40 <scpiLex_NondecimalNumericData+0xa0>
                token->type = SCPI_TOKEN_BINNUM;
 8007d5a:	2308      	movs	r3, #8
 8007d5c:	e7bd      	b.n	8007cda <scpiLex_NondecimalNumericData+0x3a>
        token->type = SCPI_TOKEN_UNKNOWN;
 8007d5e:	231a      	movs	r3, #26
 8007d60:	702b      	strb	r3, [r5, #0]
        state->pos = token->ptr;
 8007d62:	686b      	ldr	r3, [r5, #4]
 8007d64:	6063      	str	r3, [r4, #4]
        token->len = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	e7bf      	b.n	8007cea <scpiLex_NondecimalNumericData+0x4a>

08007d6a <scpiLex_StringProgramData>:
 * Detect token String data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 8007d6a:	b538      	push	{r3, r4, r5, lr}
    token->ptr = state->pos;
 8007d6c:	6843      	ldr	r3, [r0, #4]
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 8007d6e:	4604      	mov	r4, r0
    token->ptr = state->pos;
 8007d70:	604b      	str	r3, [r1, #4]
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 8007d72:	460d      	mov	r5, r1

    if (!iseos(state)) {
 8007d74:	f7ff fdcf 	bl	8007916 <iseos>
 8007d78:	b9a0      	cbnz	r0, 8007da4 <scpiLex_StringProgramData+0x3a>
        if (ischr(state, '"')) {
 8007d7a:	6863      	ldr	r3, [r4, #4]
    return (state->pos[0] == chr);
 8007d7c:	7819      	ldrb	r1, [r3, #0]
        if (ischr(state, '"')) {
 8007d7e:	2922      	cmp	r1, #34	; 0x22
 8007d80:	d11f      	bne.n	8007dc2 <scpiLex_StringProgramData+0x58>
            state->pos++;
 8007d82:	3301      	adds	r3, #1
 8007d84:	6063      	str	r3, [r4, #4]
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 8007d86:	230f      	movs	r3, #15
    skipQuoteProgramData(state, '"');
 8007d88:	4620      	mov	r0, r4
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 8007d8a:	702b      	strb	r3, [r5, #0]
    skipQuoteProgramData(state, '"');
 8007d8c:	f7ff fddf 	bl	800794e <skipQuoteProgramData>
            skipDoubleQuoteProgramData(state);
            if (!iseos(state) && ischr(state, '"')) {
 8007d90:	4620      	mov	r0, r4
 8007d92:	f7ff fdc0 	bl	8007916 <iseos>
 8007d96:	bb28      	cbnz	r0, 8007de4 <scpiLex_StringProgramData+0x7a>
 8007d98:	6863      	ldr	r3, [r4, #4]
 8007d9a:	781a      	ldrb	r2, [r3, #0]
 8007d9c:	2a22      	cmp	r2, #34	; 0x22
            }
        } else if (ischr(state, '\'')) {
            state->pos++;
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
            skipSingleQuoteProgramData(state);
            if (!iseos(state) && ischr(state, '\'')) {
 8007d9e:	d121      	bne.n	8007de4 <scpiLex_StringProgramData+0x7a>
                state->pos++;
 8007da0:	3301      	adds	r3, #1
                token->len = state->pos - token->ptr;
            } else {
                state->pos = token->ptr;
 8007da2:	6063      	str	r3, [r4, #4]
            }
        }
    }

    token->len = state->pos - token->ptr;
 8007da4:	6863      	ldr	r3, [r4, #4]
 8007da6:	686a      	ldr	r2, [r5, #4]
 8007da8:	1a9b      	subs	r3, r3, r2

    if ((token->len > 0)) {
 8007daa:	2b00      	cmp	r3, #0
    token->len = state->pos - token->ptr;
 8007dac:	60ab      	str	r3, [r5, #8]
    if ((token->len > 0)) {
 8007dae:	dc04      	bgt.n	8007dba <scpiLex_StringProgramData+0x50>
        /* token->ptr++;
         * token->len -= 2; */
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8007db0:	231a      	movs	r3, #26
 8007db2:	702b      	strb	r3, [r5, #0]
        state->pos = token->ptr;
        token->len = 0;
 8007db4:	2300      	movs	r3, #0
        state->pos = token->ptr;
 8007db6:	6062      	str	r2, [r4, #4]
        token->len = 0;
 8007db8:	60ab      	str	r3, [r5, #8]
    }

    return token->len > 0 ? token->len : 0;
 8007dba:	68a8      	ldr	r0, [r5, #8]
}
 8007dbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007dc0:	bd38      	pop	{r3, r4, r5, pc}
        } else if (ischr(state, '\'')) {
 8007dc2:	2927      	cmp	r1, #39	; 0x27
 8007dc4:	d1ee      	bne.n	8007da4 <scpiLex_StringProgramData+0x3a>
            state->pos++;
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	6063      	str	r3, [r4, #4]
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 8007dca:	230e      	movs	r3, #14
    skipQuoteProgramData(state, '\'');
 8007dcc:	4620      	mov	r0, r4
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 8007dce:	702b      	strb	r3, [r5, #0]
    skipQuoteProgramData(state, '\'');
 8007dd0:	f7ff fdbd 	bl	800794e <skipQuoteProgramData>
            if (!iseos(state) && ischr(state, '\'')) {
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f7ff fd9e 	bl	8007916 <iseos>
 8007dda:	b918      	cbnz	r0, 8007de4 <scpiLex_StringProgramData+0x7a>
 8007ddc:	6863      	ldr	r3, [r4, #4]
 8007dde:	781a      	ldrb	r2, [r3, #0]
 8007de0:	2a27      	cmp	r2, #39	; 0x27
 8007de2:	e7dc      	b.n	8007d9e <scpiLex_StringProgramData+0x34>
                state->pos = token->ptr;
 8007de4:	686b      	ldr	r3, [r5, #4]
 8007de6:	e7dc      	b.n	8007da2 <scpiLex_StringProgramData+0x38>

08007de8 <scpiLex_ArbitraryBlockProgramData>:
 * Detect token Block Data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8007de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int i;
    int arbitraryBlockLength = 0;
    const char * ptr = state->pos;
 8007dec:	f8d0 8004 	ldr.w	r8, [r0, #4]
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8007df0:	460d      	mov	r5, r1
    int validData = -1;
    token->ptr = state->pos;
 8007df2:	f8c1 8004 	str.w	r8, [r1, #4]

    if (skipChr(state, '#')) {
 8007df6:	2123      	movs	r1, #35	; 0x23
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8007df8:	4604      	mov	r4, r0
    if (skipChr(state, '#')) {
 8007dfa:	f7ff fe26 	bl	8007a4a <skipChr>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d04d      	beq.n	8007e9e <scpiLex_ArbitraryBlockProgramData+0xb6>
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
 8007e02:	4620      	mov	r0, r4
 8007e04:	f7ff fd87 	bl	8007916 <iseos>
 8007e08:	4606      	mov	r6, r0
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d142      	bne.n	8007e94 <scpiLex_ArbitraryBlockProgramData+0xac>
 8007e0e:	6863      	ldr	r3, [r4, #4]
 8007e10:	781f      	ldrb	r7, [r3, #0]
    return isdigit(c) && (c != '0');
 8007e12:	f000 ffdd 	bl	8008dd0 <__locale_ctype_ptr>
 8007e16:	4438      	add	r0, r7
 8007e18:	7843      	ldrb	r3, [r0, #1]
 8007e1a:	0758      	lsls	r0, r3, #29
 8007e1c:	d53a      	bpl.n	8007e94 <scpiLex_ArbitraryBlockProgramData+0xac>
 8007e1e:	2f30      	cmp	r7, #48	; 0x30
 8007e20:	d038      	beq.n	8007e94 <scpiLex_ArbitraryBlockProgramData+0xac>
            i = state->pos[0] - '0';
            state->pos++;

            for (; i > 0; i--) {
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
                    arbitraryBlockLength *= 10;
 8007e22:	f04f 090a 	mov.w	r9, #10
            i = state->pos[0] - '0';
 8007e26:	6863      	ldr	r3, [r4, #4]
 8007e28:	f813 7b01 	ldrb.w	r7, [r3], #1
 8007e2c:	3f30      	subs	r7, #48	; 0x30
            state->pos++;
 8007e2e:	6063      	str	r3, [r4, #4]
            for (; i > 0; i--) {
 8007e30:	2f00      	cmp	r7, #0
 8007e32:	dc17      	bgt.n	8007e64 <scpiLex_ArbitraryBlockProgramData+0x7c>
                } else {
                    break;
                }
            }

            if (i == 0) {
 8007e34:	d12e      	bne.n	8007e94 <scpiLex_ArbitraryBlockProgramData+0xac>
                state->pos += arbitraryBlockLength;
 8007e36:	6862      	ldr	r2, [r4, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	68a0      	ldr	r0, [r4, #8]
                state->pos += arbitraryBlockLength;
 8007e3c:	1991      	adds	r1, r2, r6
                if ((state->buffer + state->len) >= (state->pos)) {
 8007e3e:	4403      	add	r3, r0
 8007e40:	4299      	cmp	r1, r3
                state->pos += arbitraryBlockLength;
 8007e42:	6061      	str	r1, [r4, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 8007e44:	d921      	bls.n	8007e8a <scpiLex_ArbitraryBlockProgramData+0xa2>
    if (validData == 1) {
        /* valid */
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
    } else if (validData == 0) {
        /* incomplete */
        token->type = SCPI_TOKEN_UNKNOWN;
 8007e46:	231a      	movs	r3, #26
 8007e48:	702b      	strb	r3, [r5, #0]
        token->len = 0;
 8007e4a:	2300      	movs	r3, #0
        state->pos = state->buffer + state->len;
 8007e4c:	68a2      	ldr	r2, [r4, #8]
        token->len = 0;
 8007e4e:	60ab      	str	r3, [r5, #8]
        state->pos = state->buffer + state->len;
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	4413      	add	r3, r2
 8007e54:	6063      	str	r3, [r4, #4]
        token->type = SCPI_TOKEN_UNKNOWN;
        state->pos = token->ptr;
        token->len = 0;
    }

    return token->len + (token->ptr - ptr);
 8007e56:	6868      	ldr	r0, [r5, #4]
 8007e58:	68ab      	ldr	r3, [r5, #8]
 8007e5a:	eba0 0008 	sub.w	r0, r0, r8
}
 8007e5e:	4418      	add	r0, r3
 8007e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8007e64:	4620      	mov	r0, r4
 8007e66:	f7ff fd56 	bl	8007916 <iseos>
 8007e6a:	b998      	cbnz	r0, 8007e94 <scpiLex_ArbitraryBlockProgramData+0xac>
 8007e6c:	f000 ffb0 	bl	8008dd0 <__locale_ctype_ptr>
 8007e70:	6863      	ldr	r3, [r4, #4]
 8007e72:	781a      	ldrb	r2, [r3, #0]
 8007e74:	4410      	add	r0, r2
 8007e76:	7841      	ldrb	r1, [r0, #1]
 8007e78:	0749      	lsls	r1, r1, #29
 8007e7a:	d50b      	bpl.n	8007e94 <scpiLex_ArbitraryBlockProgramData+0xac>
                    arbitraryBlockLength += (state->pos[0] - '0');
 8007e7c:	3a30      	subs	r2, #48	; 0x30
                    state->pos++;
 8007e7e:	3301      	adds	r3, #1
                    arbitraryBlockLength += (state->pos[0] - '0');
 8007e80:	fb09 2606 	mla	r6, r9, r6, r2
                    state->pos++;
 8007e84:	6063      	str	r3, [r4, #4]
            for (; i > 0; i--) {
 8007e86:	3f01      	subs	r7, #1
 8007e88:	e7d2      	b.n	8007e30 <scpiLex_ArbitraryBlockProgramData+0x48>
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 8007e8a:	230d      	movs	r3, #13
                    token->len = arbitraryBlockLength;
 8007e8c:	e9c5 2601 	strd	r2, r6, [r5, #4]
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 8007e90:	702b      	strb	r3, [r5, #0]
 8007e92:	e7e0      	b.n	8007e56 <scpiLex_ArbitraryBlockProgramData+0x6e>
        } else if (iseos(state)) {
 8007e94:	4620      	mov	r0, r4
 8007e96:	f7ff fd3e 	bl	8007916 <iseos>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d1d3      	bne.n	8007e46 <scpiLex_ArbitraryBlockProgramData+0x5e>
        token->type = SCPI_TOKEN_UNKNOWN;
 8007e9e:	231a      	movs	r3, #26
 8007ea0:	702b      	strb	r3, [r5, #0]
        state->pos = token->ptr;
 8007ea2:	686b      	ldr	r3, [r5, #4]
 8007ea4:	6063      	str	r3, [r4, #4]
        token->len = 0;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60ab      	str	r3, [r5, #8]
 8007eaa:	e7d4      	b.n	8007e56 <scpiLex_ArbitraryBlockProgramData+0x6e>

08007eac <scpiLex_ProgramExpression>:
 * Detect token Expression
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 8007eac:	b570      	push	{r4, r5, r6, lr}
    token->ptr = state->pos;
 8007eae:	6845      	ldr	r5, [r0, #4]
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 8007eb0:	4604      	mov	r4, r0
    token->ptr = state->pos;
 8007eb2:	604d      	str	r5, [r1, #4]

    if (!iseos(state) && ischr(state, '(')) {
 8007eb4:	f7ff fd2f 	bl	8007916 <iseos>
 8007eb8:	bb20      	cbnz	r0, 8007f04 <scpiLex_ProgramExpression+0x58>
 8007eba:	6863      	ldr	r3, [r4, #4]
 8007ebc:	781a      	ldrb	r2, [r3, #0]
 8007ebe:	2a28      	cmp	r2, #40	; 0x28
 8007ec0:	d120      	bne.n	8007f04 <scpiLex_ProgramExpression+0x58>
        state->pos++;
 8007ec2:	3301      	adds	r3, #1
        if ((c != '"')
 8007ec4:	4e16      	ldr	r6, [pc, #88]	; (8007f20 <scpiLex_ProgramExpression+0x74>)
        state->pos++;
 8007ec6:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f7ff fd24 	bl	8007916 <iseos>
 8007ece:	b988      	cbnz	r0, 8007ef4 <scpiLex_ProgramExpression+0x48>
 8007ed0:	6863      	ldr	r3, [r4, #4]
 8007ed2:	7818      	ldrb	r0, [r3, #0]
    if ((c >= 0x20) && (c <= 0x7e)) {
 8007ed4:	f1a0 0220 	sub.w	r2, r0, #32
 8007ed8:	2a5e      	cmp	r2, #94	; 0x5e
 8007eda:	d80d      	bhi.n	8007ef8 <scpiLex_ProgramExpression+0x4c>
        if ((c != '"')
 8007edc:	f1a0 0222 	sub.w	r2, r0, #34	; 0x22
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	2a19      	cmp	r2, #25
 8007ee4:	d803      	bhi.n	8007eee <scpiLex_ProgramExpression+0x42>
 8007ee6:	fa26 f202 	lsr.w	r2, r6, r2
 8007eea:	07d2      	lsls	r2, r2, #31
 8007eec:	d404      	bmi.n	8007ef8 <scpiLex_ProgramExpression+0x4c>
        state->pos++;
 8007eee:	3301      	adds	r3, #1
 8007ef0:	6063      	str	r3, [r4, #4]
 8007ef2:	e7e9      	b.n	8007ec8 <scpiLex_ProgramExpression+0x1c>

        if (!iseos(state) && ischr(state, ')')) {
            state->pos++;
            token->len = state->pos - token->ptr;
        } else {
            token->len = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e004      	b.n	8007f02 <scpiLex_ProgramExpression+0x56>
        if (!iseos(state) && ischr(state, ')')) {
 8007ef8:	2829      	cmp	r0, #41	; 0x29
 8007efa:	d1fb      	bne.n	8007ef4 <scpiLex_ProgramExpression+0x48>
            state->pos++;
 8007efc:	3301      	adds	r3, #1
 8007efe:	6063      	str	r3, [r4, #4]
            token->len = state->pos - token->ptr;
 8007f00:	1b5b      	subs	r3, r3, r5
            token->len = 0;
 8007f02:	608b      	str	r3, [r1, #8]
        }
    }

    if ((token->len > 0)) {
 8007f04:	688b      	ldr	r3, [r1, #8]
 8007f06:	2b00      	cmp	r3, #0
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8007f08:	bfdd      	ittte	le
 8007f0a:	231a      	movle	r3, #26
 8007f0c:	700b      	strble	r3, [r1, #0]
        state->pos = token->ptr;
        token->len = 0;
 8007f0e:	2300      	movle	r3, #0
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 8007f10:	2310      	movgt	r3, #16
        state->pos = token->ptr;
 8007f12:	bfda      	itte	le
 8007f14:	6065      	strle	r5, [r4, #4]
        token->len = 0;
 8007f16:	608b      	strle	r3, [r1, #8]
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 8007f18:	700b      	strbgt	r3, [r1, #0]
    }

    return token->len;
 8007f1a:	6888      	ldr	r0, [r1, #8]
}
 8007f1c:	bd70      	pop	{r4, r5, r6, pc}
 8007f1e:	bf00      	nop
 8007f20:	020000e3 	.word	0x020000e3

08007f24 <scpiLex_Comma>:
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
    token->ptr = state->pos;
 8007f24:	6843      	ldr	r3, [r0, #4]
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
 8007f26:	b510      	push	{r4, lr}
 8007f28:	460c      	mov	r4, r1
    token->ptr = state->pos;
 8007f2a:	604b      	str	r3, [r1, #4]

    if (skipChr(state, ',')) {
 8007f2c:	212c      	movs	r1, #44	; 0x2c
 8007f2e:	f7ff fd8c 	bl	8007a4a <skipChr>
 8007f32:	b128      	cbz	r0, 8007f40 <scpiLex_Comma+0x1c>
        token->len = 1;
 8007f34:	2301      	movs	r3, #1
 8007f36:	60a3      	str	r3, [r4, #8]
        token->type = SCPI_TOKEN_COMMA;
 8007f38:	2300      	movs	r3, #0
    } else {
        token->len = 0;
        token->type = SCPI_TOKEN_UNKNOWN;
 8007f3a:	7023      	strb	r3, [r4, #0]
    }

    return token->len;
}
 8007f3c:	68a0      	ldr	r0, [r4, #8]
 8007f3e:	bd10      	pop	{r4, pc}
        token->len = 0;
 8007f40:	60a0      	str	r0, [r4, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8007f42:	231a      	movs	r3, #26
 8007f44:	e7f9      	b.n	8007f3a <scpiLex_Comma+0x16>

08007f46 <scpiLex_Semicolon>:
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
    token->ptr = state->pos;
 8007f46:	6843      	ldr	r3, [r0, #4]
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
 8007f48:	b510      	push	{r4, lr}
 8007f4a:	460c      	mov	r4, r1
    token->ptr = state->pos;
 8007f4c:	604b      	str	r3, [r1, #4]

    if (skipChr(state, ';')) {
 8007f4e:	213b      	movs	r1, #59	; 0x3b
 8007f50:	f7ff fd7b 	bl	8007a4a <skipChr>
 8007f54:	b120      	cbz	r0, 8007f60 <scpiLex_Semicolon+0x1a>
        token->len = 1;
 8007f56:	2301      	movs	r3, #1
 8007f58:	60a3      	str	r3, [r4, #8]
        token->type = SCPI_TOKEN_SEMICOLON;
    } else {
        token->len = 0;
        token->type = SCPI_TOKEN_UNKNOWN;
 8007f5a:	7023      	strb	r3, [r4, #0]
    }

    return token->len;
}
 8007f5c:	68a0      	ldr	r0, [r4, #8]
 8007f5e:	bd10      	pop	{r4, pc}
        token->len = 0;
 8007f60:	60a0      	str	r0, [r4, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8007f62:	231a      	movs	r3, #26
 8007f64:	e7f9      	b.n	8007f5a <scpiLex_Semicolon+0x14>

08007f66 <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
 8007f66:	b538      	push	{r3, r4, r5, lr}
 8007f68:	4605      	mov	r5, r0
 8007f6a:	460c      	mov	r4, r1
    token->ptr = state->pos;
 8007f6c:	6843      	ldr	r3, [r0, #4]
 8007f6e:	604b      	str	r3, [r1, #4]

    skipChr(state, '\r');
 8007f70:	210d      	movs	r1, #13
 8007f72:	f7ff fd6a 	bl	8007a4a <skipChr>
    skipChr(state, '\n');
 8007f76:	210a      	movs	r1, #10
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f7ff fd66 	bl	8007a4a <skipChr>

    token->len = state->pos - token->ptr;
 8007f7e:	686b      	ldr	r3, [r5, #4]
 8007f80:	6862      	ldr	r2, [r4, #4]
 8007f82:	1a9b      	subs	r3, r3, r2

    if ((token->len > 0)) {
 8007f84:	2b00      	cmp	r3, #0
    token->len = state->pos - token->ptr;
 8007f86:	60a3      	str	r3, [r4, #8]
        token->type = SCPI_TOKEN_NL;
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8007f88:	bfdd      	ittte	le
 8007f8a:	231a      	movle	r3, #26
 8007f8c:	7023      	strble	r3, [r4, #0]
        state->pos = token->ptr;
        token->len = 0;
 8007f8e:	2300      	movle	r3, #0
        token->type = SCPI_TOKEN_NL;
 8007f90:	2305      	movgt	r3, #5
        state->pos = token->ptr;
 8007f92:	bfda      	itte	le
 8007f94:	606a      	strle	r2, [r5, #4]
        token->len = 0;
 8007f96:	60a3      	strle	r3, [r4, #8]
        token->type = SCPI_TOKEN_NL;
 8007f98:	7023      	strbgt	r3, [r4, #0]
    }

    return token->len;
}
 8007f9a:	68a0      	ldr	r0, [r4, #8]
 8007f9c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007fa0 <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 8007fa0:	b508      	push	{r3, lr}
    SCPI_ResultMnemonic(context, SCPI_STD_VERSION_REVISION);
 8007fa2:	2206      	movs	r2, #6
 8007fa4:	4902      	ldr	r1, [pc, #8]	; (8007fb0 <SCPI_SystemVersionQ+0x10>)
 8007fa6:	f000 f8e5 	bl	8008174 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
}
 8007faa:	2001      	movs	r0, #1
 8007fac:	bd08      	pop	{r3, pc}
 8007fae:	bf00      	nop
 8007fb0:	0800b10c 	.word	0x0800b10c

08007fb4 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 8007fb4:	b513      	push	{r0, r1, r4, lr}
 8007fb6:	4604      	mov	r4, r0
    scpi_error_t error;
    SCPI_ErrorPop(context, &error);
 8007fb8:	a901      	add	r1, sp, #4
 8007fba:	f7ff fa35 	bl	8007428 <SCPI_ErrorPop>
    SCPI_ResultError(context, &error);
 8007fbe:	a901      	add	r1, sp, #4
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f000 f933 	bl	800822c <SCPI_ResultError>
#if USE_DEVICE_DEPENDENT_ERROR_INFORMATION
    SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
#endif
    return SCPI_RES_OK;
}
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	b002      	add	sp, #8
 8007fca:	bd10      	pop	{r4, pc}

08007fcc <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	4604      	mov	r4, r0
    SCPI_ResultInt32(context, SCPI_ErrorCount(context));
 8007fd0:	f7ff f9f8 	bl	80073c4 <SCPI_ErrorCount>
 8007fd4:	4601      	mov	r1, r0
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 f8dd 	bl	8008196 <SCPI_ResultInt32>

    return SCPI_RES_OK;
}
 8007fdc:	2001      	movs	r0, #1
 8007fde:	bd10      	pop	{r4, pc}

08007fe0 <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 8007fe0:	b410      	push	{r4}
    if (len > 0) {
 8007fe2:	b11a      	cbz	r2, 8007fec <writeData+0xc>
        return context->interface->write(context, data, len);
 8007fe4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    } else {
        return 0;
    }
}
 8007fe6:	bc10      	pop	{r4}
        return context->interface->write(context, data, len);
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	4718      	bx	r3
}
 8007fec:	4610      	mov	r0, r2
 8007fee:	bc10      	pop	{r4}
 8007ff0:	4770      	bx	lr
	...

08007ff4 <ParamSignToUInt32>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt32(scpi_t * context, scpi_parameter_t * parameter, uint32_t * value, scpi_bool_t sign) {
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	460d      	mov	r5, r1

    if (!value) {
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	b922      	cbnz	r2, 8008006 <ParamSignToUInt32+0x12>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8007ffc:	4916      	ldr	r1, [pc, #88]	; (8008058 <ParamSignToUInt32+0x64>)
 8007ffe:	f7ff fa75 	bl	80074ec <SCPI_ErrorPush>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
            } else {
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
            }
        default:
            return FALSE;
 8008002:	2000      	movs	r0, #0
 8008004:	e026      	b.n	8008054 <ParamSignToUInt32+0x60>
    switch (parameter->type) {
 8008006:	780a      	ldrb	r2, [r1, #0]
 8008008:	3a06      	subs	r2, #6
 800800a:	2a05      	cmp	r2, #5
 800800c:	d8f9      	bhi.n	8008002 <ParamSignToUInt32+0xe>
 800800e:	a101      	add	r1, pc, #4	; (adr r1, 8008014 <ParamSignToUInt32+0x20>)
 8008010:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008014:	0800802d 	.word	0x0800802d
 8008018:	08008039 	.word	0x08008039
 800801c:	0800803d 	.word	0x0800803d
 8008020:	08008003 	.word	0x08008003
 8008024:	08008041 	.word	0x08008041
 8008028:	08008041 	.word	0x08008041
            return strBaseToUInt32(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 800802c:	2210      	movs	r2, #16
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 800802e:	4621      	mov	r1, r4
 8008030:	6868      	ldr	r0, [r5, #4]
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 8008032:	f000 fce3 	bl	80089fc <strBaseToUInt32>
 8008036:	e00a      	b.n	800804e <ParamSignToUInt32+0x5a>
            return strBaseToUInt32(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 8008038:	2208      	movs	r2, #8
 800803a:	e7f8      	b.n	800802e <ParamSignToUInt32+0x3a>
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 800803c:	2202      	movs	r2, #2
 800803e:	e7f6      	b.n	800802e <ParamSignToUInt32+0x3a>
 8008040:	6868      	ldr	r0, [r5, #4]
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 8008042:	220a      	movs	r2, #10
 8008044:	4621      	mov	r1, r4
            if (sign) {
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0f3      	beq.n	8008032 <ParamSignToUInt32+0x3e>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 800804a:	f000 fccc 	bl	80089e6 <strBaseToInt32>
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 800804e:	3000      	adds	r0, #0
 8008050:	bf18      	it	ne
 8008052:	2001      	movne	r0, #1
    }
}
 8008054:	bd38      	pop	{r3, r4, r5, pc}
 8008056:	bf00      	nop
 8008058:	fffffeca 	.word	0xfffffeca

0800805c <writeDelimiter>:
    if (context->output_count > 0) {
 800805c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800805e:	2b00      	cmp	r3, #0
 8008060:	dd03      	ble.n	800806a <writeDelimiter+0xe>
        return writeData(context, ",", 1);
 8008062:	2201      	movs	r2, #1
 8008064:	4902      	ldr	r1, [pc, #8]	; (8008070 <writeDelimiter+0x14>)
 8008066:	f7ff bfbb 	b.w	8007fe0 <writeData>
}
 800806a:	2000      	movs	r0, #0
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	0800b173 	.word	0x0800b173

08008074 <resultUInt32BaseSign>:
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 8008074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008076:	4614      	mov	r4, r2
 8008078:	b08d      	sub	sp, #52	; 0x34
 800807a:	4605      	mov	r5, r0
    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 800807c:	9300      	str	r3, [sp, #0]
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 800807e:	4608      	mov	r0, r1
    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 8008080:	4613      	mov	r3, r2
 8008082:	a903      	add	r1, sp, #12
 8008084:	2221      	movs	r2, #33	; 0x21
 8008086:	f000 fc43 	bl	8008910 <UInt32ToStrBaseSign>
 800808a:	3c02      	subs	r4, #2
 800808c:	b2e4      	uxtb	r4, r4
 800808e:	2c0e      	cmp	r4, #14
 8008090:	bf98      	it	ls
 8008092:	4b0e      	ldrls	r3, [pc, #56]	; (80080cc <resultUInt32BaseSign+0x58>)
 8008094:	4607      	mov	r7, r0
    result += writeDelimiter(context);
 8008096:	4628      	mov	r0, r5
 8008098:	bf94      	ite	ls
 800809a:	f853 6024 	ldrls.w	r6, [r3, r4, lsl #2]
    switch (base) {
 800809e:	2600      	movhi	r6, #0
    result += writeDelimiter(context);
 80080a0:	f7ff ffdc 	bl	800805c <writeDelimiter>
 80080a4:	4604      	mov	r4, r0
    if (basePrefix != NULL) {
 80080a6:	b12e      	cbz	r6, 80080b4 <resultUInt32BaseSign+0x40>
        result += writeData(context, basePrefix, 2);
 80080a8:	2202      	movs	r2, #2
 80080aa:	4631      	mov	r1, r6
 80080ac:	4628      	mov	r0, r5
 80080ae:	f7ff ff97 	bl	8007fe0 <writeData>
 80080b2:	4404      	add	r4, r0
    result += writeData(context, buffer, len);
 80080b4:	463a      	mov	r2, r7
 80080b6:	a903      	add	r1, sp, #12
 80080b8:	4628      	mov	r0, r5
 80080ba:	f7ff ff91 	bl	8007fe0 <writeData>
    context->output_count++;
 80080be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
}
 80080c0:	4420      	add	r0, r4
    context->output_count++;
 80080c2:	3301      	adds	r3, #1
 80080c4:	632b      	str	r3, [r5, #48]	; 0x30
}
 80080c6:	b00d      	add	sp, #52	; 0x34
 80080c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ca:	bf00      	nop
 80080cc:	0800b114 	.word	0x0800b114

080080d0 <SCPI_Init>:
        scpi_error_t * error_queue_data, int16_t error_queue_size, void* comm) {
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	4604      	mov	r4, r0
 80080d6:	4692      	mov	sl, r2
 80080d8:	468b      	mov	fp, r1
 80080da:	b087      	sub	sp, #28
 80080dc:	9305      	str	r3, [sp, #20]
 80080de:	e9dd 8312 	ldrd	r8, r3, [sp, #72]	; 0x48
 80080e2:	9301      	str	r3, [sp, #4]
 80080e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    memset(context, 0, sizeof (*context));
 80080e6:	22d4      	movs	r2, #212	; 0xd4
        scpi_error_t * error_queue_data, int16_t error_queue_size, void* comm) {
 80080e8:	e9dd 9510 	ldrd	r9, r5, [sp, #64]	; 0x40
 80080ec:	9302      	str	r3, [sp, #8]
 80080ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
    memset(context, 0, sizeof (*context));
 80080f0:	2100      	movs	r1, #0
        scpi_error_t * error_queue_data, int16_t error_queue_size, void* comm) {
 80080f2:	9303      	str	r3, [sp, #12]
 80080f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    memset(context, 0, sizeof (*context));
 80080f6:	3004      	adds	r0, #4
        scpi_error_t * error_queue_data, int16_t error_queue_size, void* comm) {
 80080f8:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80080fa:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 80080fe:	9304      	str	r3, [sp, #16]
    memset(context, 0, sizeof (*context));
 8008100:	f000 feaa 	bl	8008e58 <memset>
    context->units = units;
 8008104:	9b05      	ldr	r3, [sp, #20]
    context->interface = interface;
 8008106:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
    context->units = units;
 800810a:	65e3      	str	r3, [r4, #92]	; 0x5c
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 800810c:	f8df a060 	ldr.w	sl, [pc, #96]	; 8008170 <SCPI_Init+0xa0>
    context->idn[3] = idn4;
 8008110:	9b01      	ldr	r3, [sp, #4]
    context->idn[1] = idn2;
 8008112:	e9c4 9521 	strd	r9, r5, [r4, #132]	; 0x84
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 8008116:	f104 099c 	add.w	r9, r4, #156	; 0x9c
    context->idn[2] = idn3;
 800811a:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    context->idn[3] = idn4;
 800811e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 8008122:	462a      	mov	r2, r5
 8008124:	4651      	mov	r1, sl
    sprintf(context->idn5, "%s-%s", idn2, "USB");
 8008126:	f104 08b5 	add.w	r8, r4, #181	; 0xb5
    context->cmdlist = commands;
 800812a:	f8c4 b000 	str.w	fp, [r4]
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 800812e:	4b0e      	ldr	r3, [pc, #56]	; (8008168 <SCPI_Init+0x98>)
 8008130:	4648      	mov	r0, r9
 8008132:	f000 fe99 	bl	8008e68 <siprintf>
    sprintf(context->idn5, "%s-%s", idn2, "USB");
 8008136:	462a      	mov	r2, r5
 8008138:	4651      	mov	r1, sl
 800813a:	4b0c      	ldr	r3, [pc, #48]	; (800816c <SCPI_Init+0x9c>)
 800813c:	4640      	mov	r0, r8
 800813e:	f000 fe93 	bl	8008e68 <siprintf>
    context->buffer.data = input_buffer;
 8008142:	9b02      	ldr	r3, [sp, #8]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8008144:	463a      	mov	r2, r7
    context->buffer.data = input_buffer;
 8008146:	60e3      	str	r3, [r4, #12]
    context->buffer.length = input_buffer_length;
 8008148:	9b03      	ldr	r3, [sp, #12]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 800814a:	4631      	mov	r1, r6
    context->buffer.length = input_buffer_length;
 800814c:	6063      	str	r3, [r4, #4]
    context->buffer.position = 0;
 800814e:	2300      	movs	r3, #0
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8008150:	4620      	mov	r0, r4
    context->buffer.position = 0;
 8008152:	60a3      	str	r3, [r4, #8]
    context->comm = comm;
 8008154:	9b04      	ldr	r3, [sp, #16]
    context->idn[5] = context->idn5;
 8008156:	e9c4 9825 	strd	r9, r8, [r4, #148]	; 0x94
    context->comm = comm;
 800815a:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
}
 800815e:	b007      	add	sp, #28
 8008160:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8008164:	f7ff b92b 	b.w	80073be <SCPI_ErrorInit>
 8008168:	0800b150 	.word	0x0800b150
 800816c:	0800b15b 	.word	0x0800b15b
 8008170:	0800b155 	.word	0x0800b155

08008174 <SCPI_ResultCharacters>:
size_t SCPI_ResultCharacters(scpi_t * context, const char * data, size_t len) {
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	4604      	mov	r4, r0
 8008178:	460e      	mov	r6, r1
 800817a:	4617      	mov	r7, r2
    result += writeDelimiter(context);
 800817c:	f7ff ff6e 	bl	800805c <writeDelimiter>
    result += writeData(context, data, len);
 8008180:	463a      	mov	r2, r7
    result += writeDelimiter(context);
 8008182:	4605      	mov	r5, r0
    result += writeData(context, data, len);
 8008184:	4631      	mov	r1, r6
 8008186:	4620      	mov	r0, r4
 8008188:	f7ff ff2a 	bl	8007fe0 <writeData>
    context->output_count++;
 800818c:	6b23      	ldr	r3, [r4, #48]	; 0x30
}
 800818e:	4428      	add	r0, r5
    context->output_count++;
 8008190:	3301      	adds	r3, #1
 8008192:	6323      	str	r3, [r4, #48]	; 0x30
}
 8008194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008196 <SCPI_ResultInt32>:
    return resultUInt32BaseSign(context, val, 10, TRUE);
 8008196:	2301      	movs	r3, #1
 8008198:	220a      	movs	r2, #10
 800819a:	f7ff bf6b 	b.w	8008074 <resultUInt32BaseSign>
	...

080081a0 <SCPI_ResultText>:
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 80081a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a4:	4604      	mov	r4, r0
    size_t len = strlen(data);
 80081a6:	4608      	mov	r0, r1
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 80081a8:	460e      	mov	r6, r1
    size_t len = strlen(data);
 80081aa:	f7f7 ffdb 	bl	8000164 <strlen>
 80081ae:	4607      	mov	r7, r0
    result += writeDelimiter(context);
 80081b0:	4620      	mov	r0, r4
 80081b2:	f7ff ff53 	bl	800805c <writeDelimiter>
    result += writeData(context, "\"", 1);
 80081b6:	2201      	movs	r2, #1
    result += writeDelimiter(context);
 80081b8:	4605      	mov	r5, r0
    result += writeData(context, "\"", 1);
 80081ba:	491b      	ldr	r1, [pc, #108]	; (8008228 <SCPI_ResultText+0x88>)
 80081bc:	4620      	mov	r0, r4
 80081be:	f7ff ff0f 	bl	8007fe0 <writeData>
    while ((quote = strnpbrk(data, len, "\""))) {
 80081c2:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008228 <SCPI_ResultText+0x88>
    result += writeData(context, "\"", 1);
 80081c6:	4405      	add	r5, r0
    while ((quote = strnpbrk(data, len, "\""))) {
 80081c8:	4a17      	ldr	r2, [pc, #92]	; (8008228 <SCPI_ResultText+0x88>)
 80081ca:	4639      	mov	r1, r7
 80081cc:	4630      	mov	r0, r6
 80081ce:	f000 fb8a 	bl	80088e6 <strnpbrk>
 80081d2:	4681      	mov	r9, r0
 80081d4:	b988      	cbnz	r0, 80081fa <SCPI_ResultText+0x5a>
    result += writeData(context, data, len);
 80081d6:	463a      	mov	r2, r7
 80081d8:	4631      	mov	r1, r6
 80081da:	4620      	mov	r0, r4
 80081dc:	f7ff ff00 	bl	8007fe0 <writeData>
    result += writeData(context, "\"", 1);
 80081e0:	2201      	movs	r2, #1
    result += writeData(context, data, len);
 80081e2:	4606      	mov	r6, r0
    result += writeData(context, "\"", 1);
 80081e4:	4910      	ldr	r1, [pc, #64]	; (8008228 <SCPI_ResultText+0x88>)
 80081e6:	4620      	mov	r0, r4
 80081e8:	f7ff fefa 	bl	8007fe0 <writeData>
    context->output_count++;
 80081ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80081ee:	4435      	add	r5, r6
 80081f0:	3301      	adds	r3, #1
 80081f2:	6323      	str	r3, [r4, #48]	; 0x30
}
 80081f4:	4428      	add	r0, r5
 80081f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        result += writeData(context, data, quote - data + 1);
 80081fa:	eba9 0806 	sub.w	r8, r9, r6
 80081fe:	f108 0201 	add.w	r2, r8, #1
 8008202:	4631      	mov	r1, r6
 8008204:	4620      	mov	r0, r4
 8008206:	f7ff feeb 	bl	8007fe0 <writeData>
        result += writeData(context, "\"", 1);
 800820a:	2201      	movs	r2, #1
        result += writeData(context, data, quote - data + 1);
 800820c:	4606      	mov	r6, r0
        result += writeData(context, "\"", 1);
 800820e:	4651      	mov	r1, sl
 8008210:	4620      	mov	r0, r4
 8008212:	f7ff fee5 	bl	8007fe0 <writeData>
        len -= quote - data + 1;
 8008216:	ea6f 0808 	mvn.w	r8, r8
        result += writeData(context, "\"", 1);
 800821a:	4430      	add	r0, r6
 800821c:	4405      	add	r5, r0
        len -= quote - data + 1;
 800821e:	4447      	add	r7, r8
        data = quote + 1;
 8008220:	f109 0601 	add.w	r6, r9, #1
 8008224:	e7d0      	b.n	80081c8 <SCPI_ResultText+0x28>
 8008226:	bf00      	nop
 8008228:	0800b161 	.word	0x0800b161

0800822c <SCPI_ResultError>:
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 800822c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	4607      	mov	r7, r0
    data[0] = SCPI_ErrorTranslate(error->error_code);
 8008232:	f9b1 0000 	ldrsh.w	r0, [r1]
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 8008236:	460c      	mov	r4, r1
    data[0] = SCPI_ErrorTranslate(error->error_code);
 8008238:	f7ff f95c 	bl	80074f4 <SCPI_ErrorTranslate>
 800823c:	4680      	mov	r8, r0
    len[0] = strlen(data[0]);
 800823e:	f7f7 ff91 	bl	8000164 <strlen>
    result += SCPI_ResultInt32(context, error->error_code);
 8008242:	f9b4 1000 	ldrsh.w	r1, [r4]
    len[0] = strlen(data[0]);
 8008246:	4605      	mov	r5, r0
    result += SCPI_ResultInt32(context, error->error_code);
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff ffa4 	bl	8008196 <SCPI_ResultInt32>
 800824e:	4604      	mov	r4, r0
    result += writeDelimiter(context);
 8008250:	4638      	mov	r0, r7
 8008252:	f7ff ff03 	bl	800805c <writeDelimiter>
    result += writeData(context, "\"", 1);
 8008256:	2201      	movs	r2, #1
    result += writeDelimiter(context);
 8008258:	4404      	add	r4, r0
    result += writeData(context, "\"", 1);
 800825a:	491f      	ldr	r1, [pc, #124]	; (80082d8 <SCPI_ResultError+0xac>)
 800825c:	4638      	mov	r0, r7
 800825e:	f7ff febf 	bl	8007fe0 <writeData>
 8008262:	2dff      	cmp	r5, #255	; 0xff
 8008264:	bf28      	it	cs
 8008266:	25ff      	movcs	r5, #255	; 0xff
 8008268:	f04f 09ff 	mov.w	r9, #255	; 0xff
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 800826c:	f8df a068 	ldr.w	sl, [pc, #104]	; 80082d8 <SCPI_ResultError+0xac>
    result += writeData(context, "\"", 1);
 8008270:	4404      	add	r4, r0
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8008272:	4652      	mov	r2, sl
 8008274:	4629      	mov	r1, r5
 8008276:	4640      	mov	r0, r8
 8008278:	f000 fb35 	bl	80088e6 <strnpbrk>
 800827c:	4683      	mov	fp, r0
 800827e:	b128      	cbz	r0, 800828c <SCPI_ResultError+0x60>
            if ((step = quote - data[i] + 1) >= outputlimit) {
 8008280:	ebab 0608 	sub.w	r6, fp, r8
 8008284:	3601      	adds	r6, #1
 8008286:	45b1      	cmp	r9, r6
 8008288:	d80f      	bhi.n	80082aa <SCPI_ResultError+0x7e>
                len[i] -= 1;
 800828a:	3d01      	subs	r5, #1
        result += writeData(context, data[i], len[i]);
 800828c:	462a      	mov	r2, r5
 800828e:	4641      	mov	r1, r8
 8008290:	4638      	mov	r0, r7
 8008292:	f7ff fea5 	bl	8007fe0 <writeData>
    result += writeData(context, "\"", 1);
 8008296:	2201      	movs	r2, #1
        result += writeData(context, data[i], len[i]);
 8008298:	4605      	mov	r5, r0
    result += writeData(context, "\"", 1);
 800829a:	490f      	ldr	r1, [pc, #60]	; (80082d8 <SCPI_ResultError+0xac>)
 800829c:	4638      	mov	r0, r7
 800829e:	f7ff fe9f 	bl	8007fe0 <writeData>
 80082a2:	442c      	add	r4, r5
}
 80082a4:	4420      	add	r0, r4
 80082a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            result += writeData(context, data[i], step);
 80082aa:	4641      	mov	r1, r8
 80082ac:	4632      	mov	r2, r6
 80082ae:	4638      	mov	r0, r7
 80082b0:	f7ff fe96 	bl	8007fe0 <writeData>
            result += writeData(context, "\"", 1);
 80082b4:	2201      	movs	r2, #1
            result += writeData(context, data[i], step);
 80082b6:	4680      	mov	r8, r0
            result += writeData(context, "\"", 1);
 80082b8:	4651      	mov	r1, sl
 80082ba:	4638      	mov	r0, r7
 80082bc:	f7ff fe90 	bl	8007fe0 <writeData>
            outputlimit -= step + 1;
 80082c0:	43f3      	mvns	r3, r6
            len[i] -= step;
 80082c2:	1bad      	subs	r5, r5, r6
            outputlimit -= step + 1;
 80082c4:	4499      	add	r9, r3
            result += writeData(context, "\"", 1);
 80082c6:	4440      	add	r0, r8
 80082c8:	454d      	cmp	r5, r9
 80082ca:	4404      	add	r4, r0
 80082cc:	bf28      	it	cs
 80082ce:	464d      	movcs	r5, r9
            data[i] = quote + 1;
 80082d0:	f10b 0801 	add.w	r8, fp, #1
 80082d4:	e7cd      	b.n	8008272 <SCPI_ResultError+0x46>
 80082d6:	bf00      	nop
 80082d8:	0800b161 	.word	0x0800b161

080082dc <SCPI_ResultArbitraryBlockHeader>:
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 80082dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    block_header[0] = '#';
 80082de:	2323      	movs	r3, #35	; 0x23
 80082e0:	ac04      	add	r4, sp, #16
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 80082e2:	460e      	mov	r6, r1
    block_header[0] = '#';
 80082e4:	f804 3d0c 	strb.w	r3, [r4, #-12]!
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 80082e8:	230a      	movs	r3, #10
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 80082ea:	4605      	mov	r5, r0
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 80082ec:	461a      	mov	r2, r3
 80082ee:	f10d 0106 	add.w	r1, sp, #6
 80082f2:	4630      	mov	r0, r6
 80082f4:	f000 fb70 	bl	80089d8 <SCPI_UInt32ToStrBase>
    header_len = strlen(block_header + 2);
 80082f8:	f10d 0006 	add.w	r0, sp, #6
 80082fc:	f7f7 ff32 	bl	8000164 <strlen>
    context->arbitrary_reminding = len;
 8008300:	f8c5 60d0 	str.w	r6, [r5, #208]	; 0xd0
    block_header[1] = (char) (header_len + '0');
 8008304:	f100 0330 	add.w	r3, r0, #48	; 0x30
    return writeData(context, block_header, header_len + 2);
 8008308:	1c82      	adds	r2, r0, #2
 800830a:	4621      	mov	r1, r4
 800830c:	4628      	mov	r0, r5
    block_header[1] = (char) (header_len + '0');
 800830e:	f88d 3005 	strb.w	r3, [sp, #5]
    return writeData(context, block_header, header_len + 2);
 8008312:	f7ff fe65 	bl	8007fe0 <writeData>
}
 8008316:	b004      	add	sp, #16
 8008318:	bd70      	pop	{r4, r5, r6, pc}
	...

0800831c <SCPI_ResultArbitraryBlockData>:
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 800831c:	b510      	push	{r4, lr}
    if (context->arbitrary_reminding < len) {
 800831e:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 8008322:	4603      	mov	r3, r0
    if (context->arbitrary_reminding < len) {
 8008324:	4294      	cmp	r4, r2
 8008326:	d30b      	bcc.n	8008340 <SCPI_ResultArbitraryBlockData+0x24>
    context->arbitrary_reminding -= len;
 8008328:	1aa4      	subs	r4, r4, r2
 800832a:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
    if (context->arbitrary_reminding == 0) {
 800832e:	b914      	cbnz	r4, 8008336 <SCPI_ResultArbitraryBlockData+0x1a>
        context->output_count++;
 8008330:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008332:	3001      	adds	r0, #1
 8008334:	6318      	str	r0, [r3, #48]	; 0x30
    return writeData(context, (const char *) data, len);
 8008336:	4618      	mov	r0, r3
}
 8008338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return writeData(context, (const char *) data, len);
 800833c:	f7ff be50 	b.w	8007fe0 <writeData>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8008340:	4902      	ldr	r1, [pc, #8]	; (800834c <SCPI_ResultArbitraryBlockData+0x30>)
 8008342:	f7ff f8d3 	bl	80074ec <SCPI_ErrorPush>
}
 8008346:	2000      	movs	r0, #0
 8008348:	bd10      	pop	{r4, pc}
 800834a:	bf00      	nop
 800834c:	fffffeca 	.word	0xfffffeca

08008350 <SCPI_ResultArbitraryBlock>:
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	460f      	mov	r7, r1
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 8008354:	4611      	mov	r1, r2
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 8008356:	4606      	mov	r6, r0
 8008358:	4614      	mov	r4, r2
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 800835a:	f7ff ffbf 	bl	80082dc <SCPI_ResultArbitraryBlockHeader>
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 800835e:	4622      	mov	r2, r4
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 8008360:	4605      	mov	r5, r0
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 8008362:	4639      	mov	r1, r7
 8008364:	4630      	mov	r0, r6
 8008366:	f7ff ffd9 	bl	800831c <SCPI_ResultArbitraryBlockData>
}
 800836a:	4428      	add	r0, r5
 800836c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800836e <SCPI_ParamIsNumber>:
    switch (parameter->type) {
 800836e:	7803      	ldrb	r3, [r0, #0]
 8008370:	3b06      	subs	r3, #6
 8008372:	2b05      	cmp	r3, #5
 8008374:	d806      	bhi.n	8008384 <SCPI_ParamIsNumber+0x16>
 8008376:	e8df f003 	tbb	[pc, r3]
 800837a:	0707      	.short	0x0707
 800837c:	03070507 	.word	0x03070507
            return suffixAllowed;
 8008380:	4608      	mov	r0, r1
 8008382:	4770      	bx	lr
            return FALSE;
 8008384:	2000      	movs	r0, #0
 8008386:	4770      	bx	lr
            return TRUE;
 8008388:	2001      	movs	r0, #1
}
 800838a:	4770      	bx	lr

0800838c <scpiParser_parseProgramData>:
 * Parse one parameter and detect type
 * @param state
 * @param token
 * @return
 */
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 800838c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008390:	460e      	mov	r6, r1
    scpi_token_t tmp;
    int result = 0;
    int wsLen;
    int suffixLen;
    int realLen = 0;
    realLen += scpiLex_WhiteSpace(state, &tmp);
 8008392:	a901      	add	r1, sp, #4
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 8008394:	4605      	mov	r5, r0
    realLen += scpiLex_WhiteSpace(state, &tmp);
 8008396:	f7ff fb7c 	bl	8007a92 <scpiLex_WhiteSpace>

    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 800839a:	4631      	mov	r1, r6
    realLen += scpiLex_WhiteSpace(state, &tmp);
 800839c:	4607      	mov	r7, r0
    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 800839e:	4628      	mov	r0, r5
 80083a0:	f7ff fc7e 	bl	8007ca0 <scpiLex_NondecimalNumericData>
    if (result == 0) result = scpiLex_CharacterProgramData(state, token);
 80083a4:	4604      	mov	r4, r0
 80083a6:	b988      	cbnz	r0, 80083cc <scpiParser_parseProgramData+0x40>
 80083a8:	4631      	mov	r1, r6
 80083aa:	4628      	mov	r0, r5
 80083ac:	f7ff fbda 	bl	8007b64 <scpiLex_CharacterProgramData>
    if (result == 0) {
 80083b0:	4604      	mov	r4, r0
 80083b2:	b958      	cbnz	r0, 80083cc <scpiParser_parseProgramData+0x40>
        result = scpiLex_DecimalNumericProgramData(state, token);
 80083b4:	4631      	mov	r1, r6
 80083b6:	4628      	mov	r0, r5
 80083b8:	f7ff fc01 	bl	8007bbe <scpiLex_DecimalNumericProgramData>
        if (result != 0) {
 80083bc:	4604      	mov	r4, r0
 80083be:	b970      	cbnz	r0, 80083de <scpiParser_parseProgramData+0x52>
                result = token->len;
            }
        }
    }

    if (result == 0) result = scpiLex_StringProgramData(state, token);
 80083c0:	4631      	mov	r1, r6
 80083c2:	4628      	mov	r0, r5
 80083c4:	f7ff fcd1 	bl	8007d6a <scpiLex_StringProgramData>
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 80083c8:	4604      	mov	r4, r0
 80083ca:	b1e0      	cbz	r0, 8008406 <scpiParser_parseProgramData+0x7a>
    if (result == 0) result = scpiLex_ProgramExpression(state, token);

    realLen += scpiLex_WhiteSpace(state, &tmp);
 80083cc:	a901      	add	r1, sp, #4
 80083ce:	4628      	mov	r0, r5
 80083d0:	f7ff fb5f 	bl	8007a92 <scpiLex_WhiteSpace>
 80083d4:	4438      	add	r0, r7

    return result + realLen;
}
 80083d6:	4420      	add	r0, r4
 80083d8:	b004      	add	sp, #16
 80083da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 80083de:	a901      	add	r1, sp, #4
 80083e0:	4628      	mov	r0, r5
 80083e2:	f7ff fb56 	bl	8007a92 <scpiLex_WhiteSpace>
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 80083e6:	a901      	add	r1, sp, #4
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 80083e8:	4680      	mov	r8, r0
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 80083ea:	4628      	mov	r0, r5
 80083ec:	f7ff fc26 	bl	8007c3c <scpiLex_SuffixProgramData>
            if (suffixLen > 0) {
 80083f0:	2800      	cmp	r0, #0
 80083f2:	ddeb      	ble.n	80083cc <scpiParser_parseProgramData+0x40>
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 80083f4:	230b      	movs	r3, #11
                token->len += wsLen + suffixLen;
 80083f6:	68b4      	ldr	r4, [r6, #8]
 80083f8:	4480      	add	r8, r0
 80083fa:	4444      	add	r4, r8
 80083fc:	60b4      	str	r4, [r6, #8]
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 80083fe:	7033      	strb	r3, [r6, #0]
    if (result == 0) result = scpiLex_StringProgramData(state, token);
 8008400:	2c00      	cmp	r4, #0
 8008402:	d0dd      	beq.n	80083c0 <scpiParser_parseProgramData+0x34>
 8008404:	e7e2      	b.n	80083cc <scpiParser_parseProgramData+0x40>
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 8008406:	4631      	mov	r1, r6
 8008408:	4628      	mov	r0, r5
 800840a:	f7ff fced 	bl	8007de8 <scpiLex_ArbitraryBlockProgramData>
    if (result == 0) result = scpiLex_ProgramExpression(state, token);
 800840e:	4604      	mov	r4, r0
 8008410:	2800      	cmp	r0, #0
 8008412:	d1db      	bne.n	80083cc <scpiParser_parseProgramData+0x40>
 8008414:	4631      	mov	r1, r6
 8008416:	4628      	mov	r0, r5
 8008418:	f7ff fd48 	bl	8007eac <scpiLex_ProgramExpression>
 800841c:	4604      	mov	r4, r0
 800841e:	e7d5      	b.n	80083cc <scpiParser_parseProgramData+0x40>

08008420 <SCPI_Parameter>:
scpi_bool_t SCPI_Parameter(scpi_t * context, scpi_parameter_t * parameter, scpi_bool_t mandatory) {
 8008420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008424:	4606      	mov	r6, r0
    if (!parameter) {
 8008426:	460d      	mov	r5, r1
 8008428:	2400      	movs	r4, #0
 800842a:	b939      	cbnz	r1, 800843c <SCPI_Parameter+0x1c>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800842c:	f5a1 719b 	sub.w	r1, r1, #310	; 0x136
 8008430:	f7ff f85c 	bl	80074ec <SCPI_ErrorPush>
        return FALSE;
 8008434:	462a      	mov	r2, r5
}
 8008436:	4610      	mov	r0, r2
 8008438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    token->type = SCPI_TOKEN_UNKNOWN;
 800843c:	f04f 081a 	mov.w	r8, #26
    if (state->pos >= (state->buffer + state->len)) {
 8008440:	69c7      	ldr	r7, [r0, #28]
 8008442:	6943      	ldr	r3, [r0, #20]
    token->ptr = ptr;
 8008444:	e9c1 4401 	strd	r4, r4, [r1, #4]
    if (state->pos >= (state->buffer + state->len)) {
 8008448:	443b      	add	r3, r7
 800844a:	6987      	ldr	r7, [r0, #24]
    token->type = SCPI_TOKEN_UNKNOWN;
 800844c:	f881 8000 	strb.w	r8, [r1]
    if (state->pos >= (state->buffer + state->len)) {
 8008450:	429f      	cmp	r7, r3
 8008452:	d309      	bcc.n	8008468 <SCPI_Parameter+0x48>
        if (mandatory) {
 8008454:	b12a      	cbz	r2, 8008462 <SCPI_Parameter+0x42>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8008456:	f06f 016c 	mvn.w	r1, #108	; 0x6c
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 800845a:	f7ff f847 	bl	80074ec <SCPI_ErrorPush>
            return FALSE;
 800845e:	4622      	mov	r2, r4
 8008460:	e7e9      	b.n	8008436 <SCPI_Parameter+0x16>
            parameter->type = SCPI_TOKEN_PROGRAM_MNEMONIC; /* TODO: select something different */
 8008462:	2309      	movs	r3, #9
 8008464:	700b      	strb	r3, [r1, #0]
 8008466:	e7e6      	b.n	8008436 <SCPI_Parameter+0x16>
    if (context->input_count != 0) {
 8008468:	6b43      	ldr	r3, [r0, #52]	; 0x34
    state = &context->param_list.lex_state;
 800846a:	f100 0714 	add.w	r7, r0, #20
    if (context->input_count != 0) {
 800846e:	b163      	cbz	r3, 800848a <SCPI_Parameter+0x6a>
        scpiLex_Comma(state, parameter);
 8008470:	4638      	mov	r0, r7
 8008472:	f7ff fd57 	bl	8007f24 <scpiLex_Comma>
        if (parameter->type != SCPI_TOKEN_COMMA) {
 8008476:	782b      	ldrb	r3, [r5, #0]
 8008478:	b13b      	cbz	r3, 800848a <SCPI_Parameter+0x6a>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 800847a:	f06f 0166 	mvn.w	r1, #102	; 0x66
    token->ptr = ptr;
 800847e:	e9c5 4401 	strd	r4, r4, [r5, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8008482:	f885 8000 	strb.w	r8, [r5]
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 8008486:	4630      	mov	r0, r6
 8008488:	e7e7      	b.n	800845a <SCPI_Parameter+0x3a>
    context->input_count++;
 800848a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 800848c:	4629      	mov	r1, r5
    context->input_count++;
 800848e:	3301      	adds	r3, #1
 8008490:	6373      	str	r3, [r6, #52]	; 0x34
    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 8008492:	4638      	mov	r0, r7
 8008494:	f7ff ff7a 	bl	800838c <scpiParser_parseProgramData>
 8008498:	782b      	ldrb	r3, [r5, #0]
 800849a:	3b06      	subs	r3, #6
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b0a      	cmp	r3, #10
 80084a0:	d806      	bhi.n	80084b0 <SCPI_Parameter+0x90>
 80084a2:	2201      	movs	r2, #1
 80084a4:	f240 71bf 	movw	r1, #1983	; 0x7bf
 80084a8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ac:	420b      	tst	r3, r1
 80084ae:	d1c2      	bne.n	8008436 <SCPI_Parameter+0x16>
    token->len = 0;
 80084b0:	2400      	movs	r4, #0
    token->type = SCPI_TOKEN_UNKNOWN;
 80084b2:	231a      	movs	r3, #26
    token->ptr = ptr;
 80084b4:	e9c5 4401 	strd	r4, r4, [r5, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 80084b8:	702b      	strb	r3, [r5, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 80084ba:	f06f 0196 	mvn.w	r1, #150	; 0x96
 80084be:	e7e2      	b.n	8008486 <SCPI_Parameter+0x66>

080084c0 <ParamSignUInt32>:
static scpi_bool_t ParamSignUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory, scpi_bool_t sign) {
 80084c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084c2:	4605      	mov	r5, r0
 80084c4:	b085      	sub	sp, #20
 80084c6:	461f      	mov	r7, r3
    if (!value) {
 80084c8:	460c      	mov	r4, r1
 80084ca:	b921      	cbnz	r1, 80084d6 <ParamSignUInt32+0x16>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 80084cc:	4913      	ldr	r1, [pc, #76]	; (800851c <ParamSignUInt32+0x5c>)
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 80084ce:	f7ff f80d 	bl	80074ec <SCPI_ErrorPush>
            result = FALSE;
 80084d2:	4620      	mov	r0, r4
 80084d4:	e00f      	b.n	80084f6 <ParamSignUInt32+0x36>
    result = SCPI_Parameter(context, &param, mandatory);
 80084d6:	a901      	add	r1, sp, #4
 80084d8:	f7ff ffa2 	bl	8008420 <SCPI_Parameter>
    if (result) {
 80084dc:	b158      	cbz	r0, 80084f6 <ParamSignUInt32+0x36>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 80084de:	2100      	movs	r1, #0
 80084e0:	a801      	add	r0, sp, #4
 80084e2:	f7ff ff44 	bl	800836e <SCPI_ParamIsNumber>
 80084e6:	4606      	mov	r6, r0
 80084e8:	b138      	cbz	r0, 80084fa <ParamSignUInt32+0x3a>
            result = ParamSignToUInt32(context, &param, value, sign);
 80084ea:	463b      	mov	r3, r7
 80084ec:	4622      	mov	r2, r4
 80084ee:	a901      	add	r1, sp, #4
 80084f0:	4628      	mov	r0, r5
 80084f2:	f7ff fd7f 	bl	8007ff4 <ParamSignToUInt32>
}
 80084f6:	b005      	add	sp, #20
 80084f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 80084fa:	2101      	movs	r1, #1
 80084fc:	a801      	add	r0, sp, #4
 80084fe:	f7ff ff36 	bl	800836e <SCPI_ParamIsNumber>
 8008502:	4604      	mov	r4, r0
 8008504:	b130      	cbz	r0, 8008514 <ParamSignUInt32+0x54>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 8008506:	4628      	mov	r0, r5
 8008508:	f06f 0189 	mvn.w	r1, #137	; 0x89
 800850c:	f7fe ffee 	bl	80074ec <SCPI_ErrorPush>
            result = FALSE;
 8008510:	4630      	mov	r0, r6
 8008512:	e7f0      	b.n	80084f6 <ParamSignUInt32+0x36>
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8008514:	f06f 0167 	mvn.w	r1, #103	; 0x67
 8008518:	4628      	mov	r0, r5
 800851a:	e7d8      	b.n	80084ce <ParamSignUInt32+0xe>
 800851c:	fffffeca 	.word	0xfffffeca

08008520 <SCPI_ParamInt32>:
    return ParamSignUInt32(context, (uint32_t *) value, mandatory, TRUE);
 8008520:	2301      	movs	r3, #1
 8008522:	f7ff bfcd 	b.w	80084c0 <ParamSignUInt32>

08008526 <SCPI_ParamUInt32>:
    return ParamSignUInt32(context, value, mandatory, FALSE);
 8008526:	2300      	movs	r3, #0
 8008528:	f7ff bfca 	b.w	80084c0 <ParamSignUInt32>

0800852c <SCPI_ParamCharacters>:
scpi_bool_t SCPI_ParamCharacters(scpi_t * context, const char ** value, size_t * len, scpi_bool_t mandatory) {
 800852c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800852e:	4606      	mov	r6, r0
 8008530:	4614      	mov	r4, r2
    if (!value || !len) {
 8008532:	460d      	mov	r5, r1
 8008534:	b101      	cbz	r1, 8008538 <SCPI_ParamCharacters+0xc>
 8008536:	b932      	cbnz	r2, 8008546 <SCPI_ParamCharacters+0x1a>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8008538:	4630      	mov	r0, r6
 800853a:	490d      	ldr	r1, [pc, #52]	; (8008570 <SCPI_ParamCharacters+0x44>)
 800853c:	f7fe ffd6 	bl	80074ec <SCPI_ErrorPush>
        return FALSE;
 8008540:	2000      	movs	r0, #0
}
 8008542:	b004      	add	sp, #16
 8008544:	bd70      	pop	{r4, r5, r6, pc}
    result = SCPI_Parameter(context, &param, mandatory);
 8008546:	461a      	mov	r2, r3
 8008548:	a901      	add	r1, sp, #4
 800854a:	f7ff ff69 	bl	8008420 <SCPI_Parameter>
    if (result) {
 800854e:	2800      	cmp	r0, #0
 8008550:	d0f7      	beq.n	8008542 <SCPI_ParamCharacters+0x16>
 8008552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        switch (param.type) {
 8008556:	f89d 1004 	ldrb.w	r1, [sp, #4]
                break;
 800855a:	2001      	movs	r0, #1
        switch (param.type) {
 800855c:	390e      	subs	r1, #14
 800855e:	2901      	cmp	r1, #1
                *value = param.ptr + 1;
 8008560:	bf9d      	ittte	ls
 8008562:	3201      	addls	r2, #1
                *len = param.len - 2;
 8008564:	3b02      	subls	r3, #2
                *value = param.ptr + 1;
 8008566:	602a      	strls	r2, [r5, #0]
                *value = param.ptr;
 8008568:	602a      	strhi	r2, [r5, #0]
                *len = param.len;
 800856a:	6023      	str	r3, [r4, #0]
                break;
 800856c:	e7e9      	b.n	8008542 <SCPI_ParamCharacters+0x16>
 800856e:	bf00      	nop
 8008570:	fffffeca 	.word	0xfffffeca

08008574 <scpiParser_parseAllProgramData>:

    int result;
    scpi_token_t tmp;
    int paramCount = 0;

    token->len = -1;
 8008574:	f04f 33ff 	mov.w	r3, #4294967295
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8008578:	b5f0      	push	{r4, r5, r6, r7, lr}
    token->len = -1;
 800857a:	608b      	str	r3, [r1, #8]
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 800857c:	2318      	movs	r3, #24
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 800857e:	4606      	mov	r6, r0
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 8008580:	700b      	strb	r3, [r1, #0]
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8008582:	460c      	mov	r4, r1
    token->ptr = state->pos;
 8008584:	6843      	ldr	r3, [r0, #4]
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8008586:	4617      	mov	r7, r2
    int paramCount = 0;
 8008588:	2500      	movs	r5, #0


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 800858a:	2001      	movs	r0, #1
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 800858c:	b085      	sub	sp, #20
    token->ptr = state->pos;
 800858e:	604b      	str	r3, [r1, #4]
        token->len += result;
 8008590:	68a3      	ldr	r3, [r4, #8]
            token->len = 0;
            paramCount = -1;
            break;
        }

        result = scpiParser_parseProgramData(state, &tmp);
 8008592:	a901      	add	r1, sp, #4
        token->len += result;
 8008594:	4418      	add	r0, r3
 8008596:	60a0      	str	r0, [r4, #8]
        result = scpiParser_parseProgramData(state, &tmp);
 8008598:	4630      	mov	r0, r6
 800859a:	f7ff fef7 	bl	800838c <scpiParser_parseProgramData>
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
 800859e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80085a2:	2a1a      	cmp	r2, #26
 80085a4:	d013      	beq.n	80085ce <scpiParser_parseAllProgramData+0x5a>
            token->len += result;
 80085a6:	68a3      	ldr	r3, [r4, #8]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 80085a8:	a901      	add	r1, sp, #4
            token->len += result;
 80085aa:	4403      	add	r3, r0
 80085ac:	60a3      	str	r3, [r4, #8]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 80085ae:	4630      	mov	r0, r6
            token->type = SCPI_TOKEN_UNKNOWN;
            token->len = 0;
            paramCount = -1;
            break;
        }
        paramCount++;
 80085b0:	3501      	adds	r5, #1
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 80085b2:	f7ff fcb7 	bl	8007f24 <scpiLex_Comma>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	d1ea      	bne.n	8008590 <scpiParser_parseAllProgramData+0x1c>
    }

    if (token->len == -1) {
 80085ba:	68a3      	ldr	r3, [r4, #8]
 80085bc:	3301      	adds	r3, #1
        token->len = 0;
 80085be:	bf04      	itt	eq
 80085c0:	2300      	moveq	r3, #0
 80085c2:	60a3      	streq	r3, [r4, #8]
    }

    if (numberOfParameters != NULL) {
 80085c4:	b107      	cbz	r7, 80085c8 <scpiParser_parseAllProgramData+0x54>
        *numberOfParameters = paramCount;
 80085c6:	603d      	str	r5, [r7, #0]
    }
    return token->len;
}
 80085c8:	68a0      	ldr	r0, [r4, #8]
 80085ca:	b005      	add	sp, #20
 80085cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            token->len = 0;
 80085ce:	2300      	movs	r3, #0
            token->type = SCPI_TOKEN_UNKNOWN;
 80085d0:	7022      	strb	r2, [r4, #0]
            token->len = 0;
 80085d2:	60a3      	str	r3, [r4, #8]
            paramCount = -1;
 80085d4:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 80085d8:	e7ef      	b.n	80085ba <scpiParser_parseAllProgramData+0x46>

080085da <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 80085da:	b530      	push	{r4, r5, lr}
    scpi_token_t tmp;
    int result = 0;

    lex_state.buffer = lex_state.pos = buffer;
    lex_state.len = len;
    state->numberOfParameters = 0;
 80085dc:	2500      	movs	r5, #0
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 80085de:	4604      	mov	r4, r0
 80085e0:	b087      	sub	sp, #28
    lex_state.buffer = lex_state.pos = buffer;
 80085e2:	e9cd 1100 	strd	r1, r1, [sp]
    state->numberOfParameters = 0;
 80085e6:	6185      	str	r5, [r0, #24]

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
 80085e8:	a903      	add	r1, sp, #12
 80085ea:	4668      	mov	r0, sp
    lex_state.len = len;
 80085ec:	9202      	str	r2, [sp, #8]
    scpiLex_WhiteSpace(&lex_state, &tmp);
 80085ee:	f7ff fa50 	bl	8007a92 <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
 80085f2:	4621      	mov	r1, r4
 80085f4:	4668      	mov	r0, sp
 80085f6:	f7ff fa5d 	bl	8007ab4 <scpiLex_ProgramHeader>
 80085fa:	42a8      	cmp	r0, r5
 80085fc:	db38      	blt.n	8008670 <scpiParser_detectProgramMessageUnit+0x96>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
 80085fe:	a903      	add	r1, sp, #12
 8008600:	4668      	mov	r0, sp
 8008602:	f7ff fa46 	bl	8007a92 <scpiLex_WhiteSpace>
 8008606:	42a8      	cmp	r0, r5
 8008608:	dd2c      	ble.n	8008664 <scpiParser_detectProgramMessageUnit+0x8a>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
 800860a:	f104 0218 	add.w	r2, r4, #24
 800860e:	f104 010c 	add.w	r1, r4, #12
 8008612:	4668      	mov	r0, sp
 8008614:	f7ff ffae 	bl	8008574 <scpiParser_parseAllProgramData>
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
        invalidateToken(&state->programData, lex_state.buffer);
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
 8008618:	a903      	add	r1, sp, #12
 800861a:	4668      	mov	r0, sp
 800861c:	f7ff fca3 	bl	8007f66 <scpiLex_NewLine>
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
 8008620:	4605      	mov	r5, r0
 8008622:	b920      	cbnz	r0, 800862e <scpiParser_detectProgramMessageUnit+0x54>
 8008624:	a903      	add	r1, sp, #12
 8008626:	4668      	mov	r0, sp
 8008628:	f7ff fc8d 	bl	8007f46 <scpiLex_Semicolon>
 800862c:	4605      	mov	r5, r0

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
 800862e:	4668      	mov	r0, sp
 8008630:	f7ff fa2d 	bl	8007a8e <scpiLex_IsEos>
 8008634:	9a00      	ldr	r2, [sp, #0]
 8008636:	b958      	cbnz	r0, 8008650 <scpiParser_detectProgramMessageUnit+0x76>
 8008638:	b955      	cbnz	r5, 8008650 <scpiParser_detectProgramMessageUnit+0x76>
        lex_state.pos++;
 800863a:	9b01      	ldr	r3, [sp, #4]
    token->ptr = ptr;
 800863c:	e9c4 2504 	strd	r2, r5, [r4, #16]
        lex_state.pos++;
 8008640:	3301      	adds	r3, #1
 8008642:	9301      	str	r3, [sp, #4]

        state->programHeader.len = 1;
 8008644:	2301      	movs	r3, #1
 8008646:	60a3      	str	r3, [r4, #8]
        state->programHeader.type = SCPI_TOKEN_INVALID;
 8008648:	2319      	movs	r3, #25
 800864a:	7023      	strb	r3, [r4, #0]
    token->type = SCPI_TOKEN_UNKNOWN;
 800864c:	231a      	movs	r3, #26
 800864e:	7323      	strb	r3, [r4, #12]

        invalidateToken(&state->programData, lex_state.buffer);
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
 8008650:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d113      	bne.n	8008680 <scpiParser_detectProgramMessageUnit+0xa6>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
 8008658:	2302      	movs	r3, #2
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
    }

    return lex_state.pos - lex_state.buffer;
}
 800865a:	9801      	ldr	r0, [sp, #4]
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 800865c:	7723      	strb	r3, [r4, #28]
}
 800865e:	1a80      	subs	r0, r0, r2
 8008660:	b007      	add	sp, #28
 8008662:	bd30      	pop	{r4, r5, pc}
    token->ptr = ptr;
 8008664:	9b01      	ldr	r3, [sp, #4]
    token->len = 0;
 8008666:	6165      	str	r5, [r4, #20]
    token->ptr = ptr;
 8008668:	6123      	str	r3, [r4, #16]
    token->type = SCPI_TOKEN_UNKNOWN;
 800866a:	231a      	movs	r3, #26
 800866c:	7323      	strb	r3, [r4, #12]
 800866e:	e7d3      	b.n	8008618 <scpiParser_detectProgramMessageUnit+0x3e>
 8008670:	231a      	movs	r3, #26
        invalidateToken(&state->programHeader, lex_state.buffer);
 8008672:	9a00      	ldr	r2, [sp, #0]
    token->type = SCPI_TOKEN_UNKNOWN;
 8008674:	7023      	strb	r3, [r4, #0]
    token->ptr = ptr;
 8008676:	e9c4 2501 	strd	r2, r5, [r4, #4]
 800867a:	e9c4 2504 	strd	r2, r5, [r4, #16]
 800867e:	e7f5      	b.n	800866c <scpiParser_detectProgramMessageUnit+0x92>
    } else if (SCPI_TOKEN_NL == tmp.type) {
 8008680:	2b05      	cmp	r3, #5
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
 8008682:	bf0c      	ite	eq
 8008684:	2301      	moveq	r3, #1
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 8008686:	2300      	movne	r3, #0
 8008688:	e7e7      	b.n	800865a <scpiParser_detectProgramMessageUnit+0x80>
	...

0800868c <SCPI_Parse>:
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 800868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 8008690:	231a      	movs	r3, #26
 8008692:	2500      	movs	r5, #0
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 8008694:	b08b      	sub	sp, #44	; 0x2c
 8008696:	460e      	mov	r6, r1
 8008698:	4690      	mov	r8, r2
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 800869a:	f88d 301c 	strb.w	r3, [sp, #28]
 800869e:	e9cd 5508 	strd	r5, r5, [sp, #32]
    if (context == NULL) {
 80086a2:	4604      	mov	r4, r0
 80086a4:	2800      	cmp	r0, #0
 80086a6:	f000 80ae 	beq.w	8008806 <SCPI_Parse+0x17a>
    scpi_bool_t result = TRUE;
 80086aa:	2701      	movs	r7, #1
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 80086ac:	46ab      	mov	fp, r5
    state = &context->parser_state;
 80086ae:	f100 0364 	add.w	r3, r0, #100	; 0x64
 80086b2:	9302      	str	r3, [sp, #8]
    context->output_count = 0;
 80086b4:	6305      	str	r5, [r0, #48]	; 0x30
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 80086b6:	4642      	mov	r2, r8
 80086b8:	4631      	mov	r1, r6
 80086ba:	9802      	ldr	r0, [sp, #8]
 80086bc:	f7ff ff8d 	bl	80085da <scpiParser_detectProgramMessageUnit>
        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 80086c0:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 80086c4:	4681      	mov	r9, r0
        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 80086c6:	2b19      	cmp	r3, #25
 80086c8:	d106      	bne.n	80086d8 <SCPI_Parse+0x4c>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER);
 80086ca:	f06f 0164 	mvn.w	r1, #100	; 0x64
 80086ce:	4620      	mov	r0, r4
 80086d0:	f7fe ff0c 	bl	80074ec <SCPI_ErrorPush>
                result = FALSE;
 80086d4:	2700      	movs	r7, #0
 80086d6:	e07a      	b.n	80087ce <SCPI_Parse+0x142>
        } else if (state->programHeader.len > 0) {
 80086d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	dd77      	ble.n	80087ce <SCPI_Parse+0x142>
            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 80086de:	f04f 0a00 	mov.w	sl, #0
            composeCompoundCommand(&cmd_prev, &state->programHeader);
 80086e2:	9902      	ldr	r1, [sp, #8]
 80086e4:	a807      	add	r0, sp, #28
 80086e6:	f000 fb1b 	bl	8008d20 <composeCompoundCommand>
            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 80086ea:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80086ec:	9304      	str	r3, [sp, #16]
 80086ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80086f0:	9305      	str	r3, [sp, #20]
    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	f853 000a 	ldr.w	r0, [r3, sl]
 80086f8:	eb03 020a 	add.w	r2, r3, sl
 80086fc:	9203      	str	r2, [sp, #12]
 80086fe:	b990      	cbnz	r0, 8008726 <SCPI_Parse+0x9a>
 8008700:	eb06 0209 	add.w	r2, r6, r9
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
 8008704:	4296      	cmp	r6, r2
 8008706:	eba2 0306 	sub.w	r3, r2, r6
 800870a:	d068      	beq.n	80087de <SCPI_Parse+0x152>
 800870c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8008710:	290d      	cmp	r1, #13
 8008712:	d0f7      	beq.n	8008704 <SCPI_Parse+0x78>
 8008714:	290a      	cmp	r1, #10
 8008716:	d0f5      	beq.n	8008704 <SCPI_Parse+0x78>
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
 8008718:	4632      	mov	r2, r6
 800871a:	f06f 0170 	mvn.w	r1, #112	; 0x70
 800871e:	4620      	mov	r0, r4
 8008720:	f7fe fe94 	bl	800744c <SCPI_ErrorPushEx>
 8008724:	e7d6      	b.n	80086d4 <SCPI_Parse+0x48>
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 8008726:	e9cd bb00 	strd	fp, fp, [sp]
 800872a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800872e:	2300      	movs	r3, #0
 8008730:	f000 f9f2 	bl	8008b18 <matchCommand>
 8008734:	f10a 0a0c 	add.w	sl, sl, #12
 8008738:	2800      	cmp	r0, #0
 800873a:	d0da      	beq.n	80086f2 <SCPI_Parse+0x66>
            context->param_list.cmd = cmd;
 800873c:	9b03      	ldr	r3, [sp, #12]
 800873e:	6123      	str	r3, [r4, #16]
                context->param_list.lex_state.buffer = state->programData.ptr;
 8008740:	6f63      	ldr	r3, [r4, #116]	; 0x74
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
 8008742:	e9c4 3305 	strd	r3, r3, [r4, #20]
                context->param_list.lex_state.len = state->programData.len;
 8008746:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008748:	61e3      	str	r3, [r4, #28]
                context->param_list.cmd_raw.data = state->programHeader.ptr;
 800874a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
                context->param_list.cmd_raw.position = 0;
 800874c:	e9c4 b309 	strd	fp, r3, [r4, #36]	; 0x24
                context->param_list.cmd_raw.length = state->programHeader.len;
 8008750:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008752:	6223      	str	r3, [r4, #32]
    if (context->output_count > 0) {
 8008754:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008756:	2b00      	cmp	r3, #0
 8008758:	dc18      	bgt.n	800878c <SCPI_Parse+0x100>
    if (cmd->callback != NULL) {
 800875a:	9b03      	ldr	r3, [sp, #12]
    context->cmd_error = FALSE;
 800875c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    if (cmd->callback != NULL) {
 8008760:	685b      	ldr	r3, [r3, #4]
    context->input_count = 0;
 8008762:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    context->arbitrary_reminding = 0;
 8008766:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
    if (cmd->callback != NULL) {
 800876a:	b3b3      	cbz	r3, 80087da <SCPI_Parse+0x14e>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
 800876c:	4620      	mov	r0, r4
 800876e:	4798      	blx	r3
 8008770:	2801      	cmp	r0, #1
 8008772:	f894 a038 	ldrb.w	sl, [r4, #56]	; 0x38
 8008776:	d00f      	beq.n	8008798 <SCPI_Parse+0x10c>
            if (!context->cmd_error) {
 8008778:	f1ba 0f00 	cmp.w	sl, #0
 800877c:	d104      	bne.n	8008788 <SCPI_Parse+0xfc>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 800877e:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8008782:	4620      	mov	r0, r4
 8008784:	f7fe feb2 	bl	80074ec <SCPI_ErrorPush>
            result = FALSE;
 8008788:	2300      	movs	r3, #0
 800878a:	e007      	b.n	800879c <SCPI_Parse+0x110>
        return writeData(context, ";", 1);
 800878c:	2201      	movs	r2, #1
 800878e:	491f      	ldr	r1, [pc, #124]	; (800880c <SCPI_Parse+0x180>)
 8008790:	4620      	mov	r0, r4
 8008792:	f7ff fc25 	bl	8007fe0 <writeData>
 8008796:	e7e0      	b.n	800875a <SCPI_Parse+0xce>
            if (context->cmd_error) {
 8008798:	f08a 0301 	eor.w	r3, sl, #1
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
 800879c:	69e1      	ldr	r1, [r4, #28]
 800879e:	6962      	ldr	r2, [r4, #20]
 80087a0:	440a      	add	r2, r1
 80087a2:	69a1      	ldr	r1, [r4, #24]
 80087a4:	4291      	cmp	r1, r2
 80087a6:	d20a      	bcs.n	80087be <SCPI_Parse+0x132>
 80087a8:	f894 a038 	ldrb.w	sl, [r4, #56]	; 0x38
 80087ac:	f1ba 0f00 	cmp.w	sl, #0
 80087b0:	d105      	bne.n	80087be <SCPI_Parse+0x132>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 80087b2:	f06f 016b 	mvn.w	r1, #107	; 0x6b
 80087b6:	4620      	mov	r0, r4
 80087b8:	f7fe fe98 	bl	80074ec <SCPI_ErrorPush>
        result = FALSE;
 80087bc:	4653      	mov	r3, sl
 80087be:	401f      	ands	r7, r3
                cmd_prev = state->programHeader;
 80087c0:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80087c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80087c8:	ab0a      	add	r3, sp, #40	; 0x28
 80087ca:	e903 0007 	stmdb	r3, {r0, r1, r2}
        if (r < len) {
 80087ce:	45c8      	cmp	r8, r9
 80087d0:	dd07      	ble.n	80087e2 <SCPI_Parse+0x156>
            data += r;
 80087d2:	444e      	add	r6, r9
            len -= r;
 80087d4:	eba8 0809 	sub.w	r8, r8, r9
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 80087d8:	e76d      	b.n	80086b6 <SCPI_Parse+0x2a>
    scpi_bool_t result = TRUE;
 80087da:	2301      	movs	r3, #1
 80087dc:	e7de      	b.n	800879c <SCPI_Parse+0x110>
 80087de:	2300      	movs	r3, #0
 80087e0:	e79a      	b.n	8008718 <SCPI_Parse+0x8c>
    if (context->output_count > 0) {
 80087e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	dd0a      	ble.n	80087fe <SCPI_Parse+0x172>
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
 80087e8:	2202      	movs	r2, #2
 80087ea:	4909      	ldr	r1, [pc, #36]	; (8008810 <SCPI_Parse+0x184>)
 80087ec:	4620      	mov	r0, r4
 80087ee:	f7ff fbf7 	bl	8007fe0 <writeData>
    if (context && context->interface && context->interface->flush) {
 80087f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80087f4:	b11b      	cbz	r3, 80087fe <SCPI_Parse+0x172>
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	b10b      	cbz	r3, 80087fe <SCPI_Parse+0x172>
        return context->interface->flush(context);
 80087fa:	4620      	mov	r0, r4
 80087fc:	4798      	blx	r3
}
 80087fe:	4638      	mov	r0, r7
 8008800:	b00b      	add	sp, #44	; 0x2c
 8008802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return FALSE;
 8008806:	4607      	mov	r7, r0
 8008808:	e7f9      	b.n	80087fe <SCPI_Parse+0x172>
 800880a:	bf00      	nop
 800880c:	0800b15f 	.word	0x0800b15f
 8008810:	0800aa04 	.word	0x0800aa04

08008814 <SCPI_Input>:
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	e9d0 3602 	ldrd	r3, r6, [r0, #8]
 800881a:	4604      	mov	r4, r0
    if (len == 0) {
 800881c:	4615      	mov	r5, r2
 800881e:	b942      	cbnz	r2, 8008832 <SCPI_Input+0x1e>
        context->buffer.data[context->buffer.position] = 0;
 8008820:	54f2      	strb	r2, [r6, r3]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 8008822:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 8008826:	f7ff ff31 	bl	800868c <SCPI_Parse>
 800882a:	4606      	mov	r6, r0
        context->buffer.position = 0;
 800882c:	60a5      	str	r5, [r4, #8]
}
 800882e:	4630      	mov	r0, r6
 8008830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buffer_free = context->buffer.length - context->buffer.position;
 8008832:	6847      	ldr	r7, [r0, #4]
 8008834:	1aff      	subs	r7, r7, r3
        if (len > (buffer_free - 1)) {
 8008836:	42ba      	cmp	r2, r7
 8008838:	db08      	blt.n	800884c <SCPI_Input+0x38>
            context->buffer.position = 0;
 800883a:	2500      	movs	r5, #0
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 800883c:	f46f 71b5 	mvn.w	r1, #362	; 0x16a
            context->buffer.position = 0;
 8008840:	6085      	str	r5, [r0, #8]
            context->buffer.data[context->buffer.position] = 0;
 8008842:	7035      	strb	r5, [r6, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 8008844:	f7fe fe52 	bl	80074ec <SCPI_ErrorPush>
            return FALSE;
 8008848:	462e      	mov	r6, r5
 800884a:	e7f0      	b.n	800882e <SCPI_Input+0x1a>
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 800884c:	18f0      	adds	r0, r6, r3
 800884e:	f000 fadf 	bl	8008e10 <memcpy>
        context->buffer.position += len;
 8008852:	68a3      	ldr	r3, [r4, #8]
    scpi_bool_t result = TRUE;
 8008854:	2601      	movs	r6, #1
        context->buffer.position += len;
 8008856:	442b      	add	r3, r5
        context->buffer.data[context->buffer.position] = 0;
 8008858:	2500      	movs	r5, #0
 800885a:	68e2      	ldr	r2, [r4, #12]
        context->buffer.position += len;
 800885c:	60a3      	str	r3, [r4, #8]
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800885e:	f104 0764 	add.w	r7, r4, #100	; 0x64
        context->buffer.data[context->buffer.position] = 0;
 8008862:	54d5      	strb	r5, [r2, r3]
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 8008864:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008868:	4638      	mov	r0, r7
 800886a:	1b52      	subs	r2, r2, r5
 800886c:	4429      	add	r1, r5
 800886e:	f7ff feb4 	bl	80085da <scpiParser_detectProgramMessageUnit>
            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 8008872:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
            totcmdlen += cmdlen;
 8008876:	4405      	add	r5, r0
            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 8008878:	2b01      	cmp	r3, #1
 800887a:	d110      	bne.n	800889e <SCPI_Input+0x8a>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
 800887c:	462a      	mov	r2, r5
 800887e:	68e1      	ldr	r1, [r4, #12]
 8008880:	4620      	mov	r0, r4
 8008882:	f7ff ff03 	bl	800868c <SCPI_Parse>
 8008886:	4606      	mov	r6, r0
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 8008888:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 800888c:	1b52      	subs	r2, r2, r5
 800888e:	1941      	adds	r1, r0, r5
 8008890:	f000 fac9 	bl	8008e26 <memmove>
                context->buffer.position -= totcmdlen;
 8008894:	68a3      	ldr	r3, [r4, #8]
 8008896:	1b5d      	subs	r5, r3, r5
 8008898:	60a5      	str	r5, [r4, #8]
                totcmdlen = 0;
 800889a:	2500      	movs	r5, #0
 800889c:	e7e2      	b.n	8008864 <SCPI_Input+0x50>
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN
 800889e:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
 80088a2:	2a1a      	cmp	r2, #26
 80088a4:	d101      	bne.n	80088aa <SCPI_Input+0x96>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0c1      	beq.n	800882e <SCPI_Input+0x1a>
                if (totcmdlen >= context->buffer.position) break;
 80088aa:	68a3      	ldr	r3, [r4, #8]
 80088ac:	42ab      	cmp	r3, r5
 80088ae:	d8d9      	bhi.n	8008864 <SCPI_Input+0x50>
 80088b0:	e7bd      	b.n	800882e <SCPI_Input+0x1a>

080088b2 <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 80088b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b6:	4605      	mov	r5, r0
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 80088b8:	4604      	mov	r4, r0
 80088ba:	eb00 0801 	add.w	r8, r0, r1
 80088be:	4544      	cmp	r4, r8
 80088c0:	eba4 0605 	sub.w	r6, r4, r5
 80088c4:	d00c      	beq.n	80088e0 <patternSeparatorShortPos+0x2e>
 80088c6:	7823      	ldrb	r3, [r4, #0]
 80088c8:	4627      	mov	r7, r4
 80088ca:	b14b      	cbz	r3, 80088e0 <patternSeparatorShortPos+0x2e>
        if (islower((unsigned char) pattern[i])) {
 80088cc:	f000 fa80 	bl	8008dd0 <__locale_ctype_ptr>
 80088d0:	783b      	ldrb	r3, [r7, #0]
 80088d2:	3401      	adds	r4, #1
 80088d4:	4418      	add	r0, r3
 80088d6:	7843      	ldrb	r3, [r0, #1]
 80088d8:	f003 0303 	and.w	r3, r3, #3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d1ee      	bne.n	80088be <patternSeparatorShortPos+0xc>
            return i;
        }
    }
    return i;
}
 80088e0:	4630      	mov	r0, r6
 80088e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080088e6 <strnpbrk>:
char * strnpbrk(const char *str, size_t size, const char *set) {
 80088e6:	b570      	push	{r4, r5, r6, lr}
    const char * strend = str + size;
 80088e8:	4401      	add	r1, r0
    while ((strend != str) && ((c = *str++) != 0)) {
 80088ea:	4288      	cmp	r0, r1
 80088ec:	d003      	beq.n	80088f6 <strnpbrk+0x10>
 80088ee:	4604      	mov	r4, r0
 80088f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80088f4:	b923      	cbnz	r3, 8008900 <strnpbrk+0x1a>
    return (NULL);
 80088f6:	2000      	movs	r0, #0
 80088f8:	e001      	b.n	80088fe <strnpbrk+0x18>
            if (sc == c)
 80088fa:	42ab      	cmp	r3, r5
 80088fc:	d101      	bne.n	8008902 <strnpbrk+0x1c>
}
 80088fe:	bd70      	pop	{r4, r5, r6, pc}
        for (scanp = set; (sc = *scanp++) != '\0';)
 8008900:	4616      	mov	r6, r2
 8008902:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008906:	2d00      	cmp	r5, #0
 8008908:	d1f7      	bne.n	80088fa <strnpbrk+0x14>
 800890a:	4620      	mov	r0, r4
 800890c:	e7ed      	b.n	80088ea <strnpbrk+0x4>
	...

08008910 <UInt32ToStrBaseSign>:
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 8008910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008914:	4605      	mov	r5, r0
 8008916:	460f      	mov	r7, r1
 8008918:	b086      	sub	sp, #24
    const char digits[] = "0123456789ABCDEF";
 800891a:	4e2d      	ldr	r6, [pc, #180]	; (80089d0 <UInt32ToStrBaseSign+0xc0>)
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 800891c:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
    const char digits[] = "0123456789ABCDEF";
 8008920:	f10d 0c04 	add.w	ip, sp, #4
 8008924:	f106 0810 	add.w	r8, r6, #16
 8008928:	46e6      	mov	lr, ip
 800892a:	6830      	ldr	r0, [r6, #0]
 800892c:	6871      	ldr	r1, [r6, #4]
 800892e:	3608      	adds	r6, #8
 8008930:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8008934:	4546      	cmp	r6, r8
 8008936:	46f4      	mov	ip, lr
 8008938:	d1f6      	bne.n	8008928 <UInt32ToStrBaseSign+0x18>
 800893a:	7831      	ldrb	r1, [r6, #0]
 800893c:	f88e 1000 	strb.w	r1, [lr]
    if (uval == 0) {
 8008940:	b94d      	cbnz	r5, 8008956 <UInt32ToStrBaseSign+0x46>
        ADD_CHAR('0');
 8008942:	2a00      	cmp	r2, #0
 8008944:	d041      	beq.n	80089ca <UInt32ToStrBaseSign+0xba>
 8008946:	2330      	movs	r3, #48	; 0x30
 8008948:	2001      	movs	r0, #1
 800894a:	703b      	strb	r3, [r7, #0]
    if (pos < len) str[pos] = 0;
 800894c:	4290      	cmp	r0, r2
 800894e:	d22f      	bcs.n	80089b0 <UInt32ToStrBaseSign+0xa0>
 8008950:	2300      	movs	r3, #0
 8008952:	543b      	strb	r3, [r7, r0]
 8008954:	e02c      	b.n	80089b0 <UInt32ToStrBaseSign+0xa0>
        switch (base) {
 8008956:	2b08      	cmp	r3, #8
 8008958:	d006      	beq.n	8008968 <UInt32ToStrBaseSign+0x58>
 800895a:	2b10      	cmp	r3, #16
 800895c:	d02e      	beq.n	80089bc <UInt32ToStrBaseSign+0xac>
 800895e:	2b02      	cmp	r3, #2
 8008960:	d129      	bne.n	80089b6 <UInt32ToStrBaseSign+0xa6>
                x = 0x80000000L;
 8008962:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008966:	e001      	b.n	800896c <UInt32ToStrBaseSign+0x5c>
                x = 0x40000000L;
 8008968:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        if (sign && ((int32_t) val < 0) && (base == 10)) {
 800896c:	b34c      	cbz	r4, 80089c2 <UInt32ToStrBaseSign+0xb2>
 800896e:	2d00      	cmp	r5, #0
 8008970:	da27      	bge.n	80089c2 <UInt32ToStrBaseSign+0xb2>
 8008972:	2b0a      	cmp	r3, #10
 8008974:	d125      	bne.n	80089c2 <UInt32ToStrBaseSign+0xb2>
            uval = -val;
 8008976:	426d      	negs	r5, r5
            ADD_CHAR('-');
 8008978:	b31a      	cbz	r2, 80089c2 <UInt32ToStrBaseSign+0xb2>
 800897a:	202d      	movs	r0, #45	; 0x2d
 800897c:	7038      	strb	r0, [r7, #0]
 800897e:	2001      	movs	r0, #1
        while ((uval / x) == 0) {
 8008980:	fbb5 f4f1 	udiv	r4, r5, r1
 8008984:	fbb1 f6f3 	udiv	r6, r1, r3
 8008988:	b1ec      	cbz	r4, 80089c6 <UInt32ToStrBaseSign+0xb6>
            digit = (uint8_t) (uval / x);
 800898a:	fbb5 f4f1 	udiv	r4, r5, r1
            ADD_CHAR(digits[digit]);
 800898e:	4290      	cmp	r0, r2
 8008990:	b2e4      	uxtb	r4, r4
 8008992:	d205      	bcs.n	80089a0 <UInt32ToStrBaseSign+0x90>
 8008994:	ae06      	add	r6, sp, #24
 8008996:	4426      	add	r6, r4
 8008998:	f816 6c14 	ldrb.w	r6, [r6, #-20]
 800899c:	543e      	strb	r6, [r7, r0]
 800899e:	3001      	adds	r0, #1
            uval -= digit * x;
 80089a0:	fb04 5511 	mls	r5, r4, r1, r5
            x /= base;
 80089a4:	fbb1 f1f3 	udiv	r1, r1, r3
        } while (x && (pos < len));
 80089a8:	2900      	cmp	r1, #0
 80089aa:	d0cf      	beq.n	800894c <UInt32ToStrBaseSign+0x3c>
 80089ac:	4290      	cmp	r0, r2
 80089ae:	d3ec      	bcc.n	800898a <UInt32ToStrBaseSign+0x7a>
}
 80089b0:	b006      	add	sp, #24
 80089b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                x = 1000000000L;
 80089b6:	4907      	ldr	r1, [pc, #28]	; (80089d4 <UInt32ToStrBaseSign+0xc4>)
                base = 10;
 80089b8:	230a      	movs	r3, #10
                break;
 80089ba:	e7d7      	b.n	800896c <UInt32ToStrBaseSign+0x5c>
                x = 0x10000000L;
 80089bc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
                break;
 80089c0:	e7d4      	b.n	800896c <UInt32ToStrBaseSign+0x5c>
    size_t pos = 0;
 80089c2:	2000      	movs	r0, #0
 80089c4:	e7dc      	b.n	8008980 <UInt32ToStrBaseSign+0x70>
            x /= base;
 80089c6:	4631      	mov	r1, r6
 80089c8:	e7da      	b.n	8008980 <UInt32ToStrBaseSign+0x70>
    size_t pos = 0;
 80089ca:	4610      	mov	r0, r2
    return pos;
 80089cc:	e7f0      	b.n	80089b0 <UInt32ToStrBaseSign+0xa0>
 80089ce:	bf00      	nop
 80089d0:	0800b21a 	.word	0x0800b21a
 80089d4:	3b9aca00 	.word	0x3b9aca00

080089d8 <SCPI_UInt32ToStrBase>:
size_t SCPI_UInt32ToStrBase(uint32_t val, char * str, size_t len, int8_t base) {
 80089d8:	b513      	push	{r0, r1, r4, lr}
    return UInt32ToStrBaseSign(val, str, len, base, FALSE);
 80089da:	2400      	movs	r4, #0
 80089dc:	9400      	str	r4, [sp, #0]
 80089de:	f7ff ff97 	bl	8008910 <UInt32ToStrBaseSign>
}
 80089e2:	b002      	add	sp, #8
 80089e4:	bd10      	pop	{r4, pc}

080089e6 <strBaseToInt32>:
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 80089e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089e8:	460d      	mov	r5, r1
    *val = strtol(str, &endptr, base);
 80089ea:	a901      	add	r1, sp, #4
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 80089ec:	4604      	mov	r4, r0
    *val = strtol(str, &endptr, base);
 80089ee:	f000 fb07 	bl	8009000 <strtol>
 80089f2:	6028      	str	r0, [r5, #0]
}
 80089f4:	9801      	ldr	r0, [sp, #4]
 80089f6:	1b00      	subs	r0, r0, r4
 80089f8:	b003      	add	sp, #12
 80089fa:	bd30      	pop	{r4, r5, pc}

080089fc <strBaseToUInt32>:
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 80089fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089fe:	460d      	mov	r5, r1
    *val = strtoul(str, &endptr, base);
 8008a00:	a901      	add	r1, sp, #4
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 8008a02:	4604      	mov	r4, r0
    *val = strtoul(str, &endptr, base);
 8008a04:	f000 fb8c 	bl	8009120 <strtoul>
 8008a08:	6028      	str	r0, [r5, #0]
}
 8008a0a:	9801      	ldr	r0, [sp, #4]
 8008a0c:	1b00      	subs	r0, r0, r4
 8008a0e:	b003      	add	sp, #12
 8008a10:	bd30      	pop	{r4, r5, pc}

08008a12 <compareStr>:
    if (len1 != len2) {
 8008a12:	4299      	cmp	r1, r3
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4614      	mov	r4, r2
    if (len1 != len2) {
 8008a18:	d107      	bne.n	8008a2a <compareStr+0x18>
    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
 8008a1a:	460a      	mov	r2, r1
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	f000 fa43 	bl	8008ea8 <strncasecmp>
 8008a22:	fab0 f080 	clz	r0, r0
 8008a26:	0940      	lsrs	r0, r0, #5
}
 8008a28:	bd10      	pop	{r4, pc}
        return FALSE;
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e7fc      	b.n	8008a28 <compareStr+0x16>

08008a2e <compareStrAndNum>:
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 8008a2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (len2 < len1) {
 8008a32:	428b      	cmp	r3, r1
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 8008a34:	460c      	mov	r4, r1
 8008a36:	4616      	mov	r6, r2
 8008a38:	461f      	mov	r7, r3
 8008a3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
    if (len2 < len1) {
 8008a3e:	d203      	bcs.n	8008a48 <compareStrAndNum+0x1a>
        return FALSE;
 8008a40:	2000      	movs	r0, #0
}
 8008a42:	b002      	add	sp, #8
 8008a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
 8008a48:	460a      	mov	r2, r1
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	f000 fa2c 	bl	8008ea8 <strncasecmp>
 8008a50:	4605      	mov	r5, r0
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d1f4      	bne.n	8008a40 <compareStrAndNum+0x12>
        if (num) {
 8008a56:	f1b8 0f00 	cmp.w	r8, #0
 8008a5a:	d10e      	bne.n	8008a7a <compareStrAndNum+0x4c>
 8008a5c:	4434      	add	r4, r6
 8008a5e:	443e      	add	r6, r7
            for (i = len1; i < len2; i++) {
 8008a60:	42b4      	cmp	r4, r6
 8008a62:	d101      	bne.n	8008a68 <compareStrAndNum+0x3a>
        result = TRUE;
 8008a64:	2001      	movs	r0, #1
 8008a66:	e7ec      	b.n	8008a42 <compareStrAndNum+0x14>
                if (!isdigit((int) str2[i])) {
 8008a68:	f000 f9b2 	bl	8008dd0 <__locale_ctype_ptr>
 8008a6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a70:	4418      	add	r0, r3
 8008a72:	7843      	ldrb	r3, [r0, #1]
 8008a74:	075b      	lsls	r3, r3, #29
 8008a76:	d5e3      	bpl.n	8008a40 <compareStrAndNum+0x12>
 8008a78:	e7f2      	b.n	8008a60 <compareStrAndNum+0x32>
            if (len1 == len2) {
 8008a7a:	42a7      	cmp	r7, r4
 8008a7c:	d0f2      	beq.n	8008a64 <compareStrAndNum+0x36>
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
 8008a7e:	1930      	adds	r0, r6, r4
 8008a80:	220a      	movs	r2, #10
 8008a82:	a901      	add	r1, sp, #4
 8008a84:	f7ff ffaf 	bl	80089e6 <strBaseToInt32>
 8008a88:	4404      	add	r4, r0
                if (i != len2) {
 8008a8a:	42a7      	cmp	r7, r4
 8008a8c:	d103      	bne.n	8008a96 <compareStrAndNum+0x68>
                    *num = tmpNum;
 8008a8e:	9b01      	ldr	r3, [sp, #4]
 8008a90:	f8c8 3000 	str.w	r3, [r8]
 8008a94:	e7e6      	b.n	8008a64 <compareStrAndNum+0x36>
                    result = FALSE;
 8008a96:	4628      	mov	r0, r5
 8008a98:	e7d3      	b.n	8008a42 <compareStrAndNum+0x14>

08008a9a <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
 8008a9a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a9e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4615      	mov	r5, r2
 8008aa6:	461e      	mov	r6, r3
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
 8008aa8:	460f      	mov	r7, r1
 8008aaa:	b1f9      	cbz	r1, 8008aec <matchPattern+0x52>
 8008aac:	f101 38ff 	add.w	r8, r1, #4294967295
 8008ab0:	f810 3008 	ldrb.w	r3, [r0, r8]
 8008ab4:	2b23      	cmp	r3, #35	; 0x23
 8008ab6:	d119      	bne.n	8008aec <matchPattern+0x52>
        size_t new_pattern_len = pattern_len - 1;

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 8008ab8:	4641      	mov	r1, r8
 8008aba:	f7ff fefa 	bl	80088b2 <patternSeparatorShortPos>

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 8008abe:	f8cd 9000 	str.w	r9, [sp]
        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 8008ac2:	4607      	mov	r7, r0
        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 8008ac4:	4633      	mov	r3, r6
 8008ac6:	462a      	mov	r2, r5
 8008ac8:	4641      	mov	r1, r8
 8008aca:	4620      	mov	r0, r4
 8008acc:	f7ff ffaf 	bl	8008a2e <compareStrAndNum>
 8008ad0:	b9f8      	cbnz	r0, 8008b12 <matchPattern+0x78>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
 8008ad2:	f8cd 9000 	str.w	r9, [sp]
 8008ad6:	4633      	mov	r3, r6
 8008ad8:	462a      	mov	r2, r5
 8008ada:	4639      	mov	r1, r7
 8008adc:	4620      	mov	r0, r4
 8008ade:	f7ff ffa6 	bl	8008a2e <compareStrAndNum>
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);

        return compareStr(pattern, pattern_len, str, str_len) ||
 8008ae2:	f000 0001 	and.w	r0, r0, #1
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
    }
}
 8008ae6:	b003      	add	sp, #12
 8008ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 8008aec:	4639      	mov	r1, r7
 8008aee:	4620      	mov	r0, r4
 8008af0:	f7ff fedf 	bl	80088b2 <patternSeparatorShortPos>
        return compareStr(pattern, pattern_len, str, str_len) ||
 8008af4:	4633      	mov	r3, r6
        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 8008af6:	4680      	mov	r8, r0
        return compareStr(pattern, pattern_len, str, str_len) ||
 8008af8:	462a      	mov	r2, r5
 8008afa:	4639      	mov	r1, r7
 8008afc:	4620      	mov	r0, r4
 8008afe:	f7ff ff88 	bl	8008a12 <compareStr>
 8008b02:	b930      	cbnz	r0, 8008b12 <matchPattern+0x78>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
 8008b04:	4633      	mov	r3, r6
 8008b06:	462a      	mov	r2, r5
 8008b08:	4641      	mov	r1, r8
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7ff ff81 	bl	8008a12 <compareStr>
 8008b10:	e7e7      	b.n	8008ae2 <matchPattern+0x48>
        return compareStr(pattern, pattern_len, str, str_len) ||
 8008b12:	2001      	movs	r0, #1
 8008b14:	e7e5      	b.n	8008ae2 <matchPattern+0x48>
	...

08008b18 <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	4615      	mov	r5, r2
 8008b20:	4688      	mov	r8, r1
 8008b22:	9303      	str	r3, [sp, #12]
 8008b24:	4606      	mov	r6, r0

    size_t numbers_idx = 0;
    int32_t *number_ptr = NULL;

    const char * pattern_ptr = pattern;
    int pattern_len = strlen(pattern);
 8008b26:	f7f7 fb1d 	bl	8000164 <strlen>
 8008b2a:	4604      	mov	r4, r0

    const char * cmd_ptr = cmd;
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	4640      	mov	r0, r8
 8008b30:	f000 f9df 	bl	8008ef2 <strnlen>

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
 8008b34:	1933      	adds	r3, r6, r4
 8008b36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 8008b3a:	4605      	mov	r5, r0
    if (pattern_ptr[pattern_len - 1] == '?') {
 8008b3c:	2b3f      	cmp	r3, #63	; 0x3f
 8008b3e:	d106      	bne.n	8008b4e <matchCommand+0x36>
        if (cmd_ptr[cmd_len - 1] == '?') {
 8008b40:	1e45      	subs	r5, r0, #1
 8008b42:	f818 3005 	ldrb.w	r3, [r8, r5]
 8008b46:	2b3f      	cmp	r3, #63	; 0x3f
 8008b48:	f040 80e4 	bne.w	8008d14 <matchCommand+0x1fc>
            cmd_len -= 1;
            pattern_len -= 1;
 8008b4c:	3c01      	subs	r4, #1
            return FALSE;
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
 8008b4e:	7833      	ldrb	r3, [r6, #0]
 8008b50:	2b5b      	cmp	r3, #91	; 0x5b
        SKIP_PATTERN(1);
 8008b52:	bf08      	it	eq
 8008b54:	3601      	addeq	r6, #1
        brackets++;
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 8008b56:	7833      	ldrb	r3, [r6, #0]
        SKIP_PATTERN(1);
 8008b58:	bf06      	itte	eq
 8008b5a:	f104 34ff 	addeq.w	r4, r4, #4294967295
        brackets++;
 8008b5e:	f04f 0901 	moveq.w	r9, #1
    int brackets = 0;
 8008b62:	f04f 0900 	movne.w	r9, #0
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 8008b66:	2b3a      	cmp	r3, #58	; 0x3a
        SKIP_PATTERN(1);
    }

    if (cmd_ptr[0] == ':') {
 8008b68:	f898 3000 	ldrb.w	r3, [r8]
        SKIP_PATTERN(1);
 8008b6c:	bf04      	itt	eq
 8008b6e:	3601      	addeq	r6, #1
 8008b70:	f104 34ff 	addeq.w	r4, r4, #4294967295
    if (cmd_ptr[0] == ':') {
 8008b74:	2b3a      	cmp	r3, #58	; 0x3a
 8008b76:	d109      	bne.n	8008b8c <matchCommand+0x74>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
 8008b78:	2d01      	cmp	r5, #1
 8008b7a:	d907      	bls.n	8008b8c <matchCommand+0x74>
            if (cmd_ptr[1] != '*') {
 8008b7c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008b80:	2b2a      	cmp	r3, #42	; 0x2a
 8008b82:	f000 80c7 	beq.w	8008d14 <matchCommand+0x1fc>
                SKIP_CMD(1);
 8008b86:	f108 0801 	add.w	r8, r8, #1
 8008b8a:	3d01      	subs	r5, #1
        brackets++;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	9302      	str	r3, [sp, #8]
    char * separator = strnpbrk(pattern, len, "?:[]");
 8008b90:	4a61      	ldr	r2, [pc, #388]	; (8008d18 <matchCommand+0x200>)
 8008b92:	4621      	mov	r1, r4
 8008b94:	4630      	mov	r0, r6
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8008b96:	46a3      	mov	fp, r4
    char * separator = strnpbrk(pattern, len, "?:[]");
 8008b98:	f7ff fea5 	bl	80088e6 <strnpbrk>
    if (separator == NULL) {
 8008b9c:	b108      	cbz	r0, 8008ba2 <matchCommand+0x8a>
        return separator - pattern;
 8008b9e:	eba0 0b06 	sub.w	fp, r0, r6
    char * separator = strnpbrk(cmd, len, ":?");
 8008ba2:	4a5e      	ldr	r2, [pc, #376]	; (8008d1c <matchCommand+0x204>)
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	f7ff fe9d 	bl	80088e6 <strnpbrk>
    if (separator == NULL) {
 8008bac:	b398      	cbz	r0, 8008c16 <matchCommand+0xfe>
        result = separator - cmd;
 8008bae:	eba0 0a08 	sub.w	sl, r0, r8

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
 8008bb2:	f1bb 0f00 	cmp.w	fp, #0
 8008bb6:	dd32      	ble.n	8008c1e <matchCommand+0x106>
 8008bb8:	eb06 030b 	add.w	r3, r6, fp
 8008bbc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008bc0:	2b23      	cmp	r3, #35	; 0x23
 8008bc2:	d12c      	bne.n	8008c1e <matchCommand+0x106>
            if (numbers && (numbers_idx < numbers_len)) {
 8008bc4:	9b03      	ldr	r3, [sp, #12]
 8008bc6:	b343      	cbz	r3, 8008c1a <matchCommand+0x102>
 8008bc8:	9b02      	ldr	r3, [sp, #8]
 8008bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d224      	bcs.n	8008c1a <matchCommand+0x102>
                number_ptr = numbers + numbers_idx;
 8008bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bd4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                *number_ptr = default_value; /* default value */
 8008bd8:	9a03      	ldr	r2, [sp, #12]
 8008bda:	9902      	ldr	r1, [sp, #8]
 8008bdc:	4610      	mov	r0, r2
 8008bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008be0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
            } else {
                number_ptr = NULL;
            }
            numbers_idx++;
 8008be4:	9a02      	ldr	r2, [sp, #8]
 8008be6:	3201      	adds	r2, #1
 8008be8:	9202      	str	r2, [sp, #8]
        } else {
            number_ptr = NULL;
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	4642      	mov	r2, r8
 8008bee:	4653      	mov	r3, sl
 8008bf0:	4659      	mov	r1, fp
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7ff ff51 	bl	8008a9a <matchPattern>
 8008bf8:	eb06 070b 	add.w	r7, r6, fp
 8008bfc:	eba4 040b 	sub.w	r4, r4, fp
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d073      	beq.n	8008cec <matchCommand+0x1d4>
            SKIP_PATTERN(pattern_sep_pos);
            SKIP_CMD(cmd_sep_pos);
 8008c04:	eba5 050a 	sub.w	r5, r5, sl
            result = TRUE;

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
 8008c08:	b95c      	cbnz	r4, 8008c22 <matchCommand+0x10a>
 8008c0a:	fab5 f085 	clz	r0, r5
 8008c0e:	0940      	lsrs	r0, r0, #5
    }

    return result;
#undef SKIP_PATTERN
#undef SKIP_CMD
}
 8008c10:	b005      	add	sp, #20
 8008c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        result = len;
 8008c16:	46aa      	mov	sl, r5
 8008c18:	e7cb      	b.n	8008bb2 <matchCommand+0x9a>
                number_ptr = NULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e7e2      	b.n	8008be4 <matchCommand+0xcc>
            number_ptr = NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e7e3      	b.n	8008bea <matchCommand+0xd2>
            if (cmd_len == 0) {
 8008c22:	bb35      	cbnz	r5, 8008c72 <matchCommand+0x15a>
    char * separator = strnpbrk(pattern, len, "?:[]");
 8008c24:	4e3c      	ldr	r6, [pc, #240]	; (8008d18 <matchCommand+0x200>)
 8008c26:	4632      	mov	r2, r6
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4638      	mov	r0, r7
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8008c2c:	4625      	mov	r5, r4
    char * separator = strnpbrk(pattern, len, "?:[]");
 8008c2e:	f7ff fe5a 	bl	80088e6 <strnpbrk>
    if (separator == NULL) {
 8008c32:	b100      	cbz	r0, 8008c36 <matchCommand+0x11e>
        return separator - pattern;
 8008c34:	1bc5      	subs	r5, r0, r7
                    switch (pattern_ptr[pattern_sep_pos]) {
 8008c36:	5d7a      	ldrb	r2, [r7, r5]
 8008c38:	2a5b      	cmp	r2, #91	; 0x5b
 8008c3a:	d010      	beq.n	8008c5e <matchCommand+0x146>
 8008c3c:	2a5d      	cmp	r2, #93	; 0x5d
 8008c3e:	d011      	beq.n	8008c64 <matchCommand+0x14c>
                    SKIP_PATTERN(pattern_sep_pos + 1);
 8008c40:	3501      	adds	r5, #1
 8008c42:	442f      	add	r7, r5
 8008c44:	1b64      	subs	r4, r4, r5
                    if (brackets == 0) {
 8008c46:	f1b9 0f00 	cmp.w	r9, #0
 8008c4a:	d104      	bne.n	8008c56 <matchCommand+0x13e>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
 8008c4c:	2c00      	cmp	r4, #0
 8008c4e:	dd0c      	ble.n	8008c6a <matchCommand+0x152>
 8008c50:	783a      	ldrb	r2, [r7, #0]
 8008c52:	2a5b      	cmp	r2, #91	; 0x5b
 8008c54:	d15e      	bne.n	8008d14 <matchCommand+0x1fc>
                while (pattern_len) {
 8008c56:	2c00      	cmp	r4, #0
 8008c58:	d1e5      	bne.n	8008c26 <matchCommand+0x10e>
            result = TRUE;
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	e7d8      	b.n	8008c10 <matchCommand+0xf8>
                            brackets++;
 8008c5e:	f109 0901 	add.w	r9, r9, #1
                            break;
 8008c62:	e7ed      	b.n	8008c40 <matchCommand+0x128>
                            brackets--;
 8008c64:	f109 39ff 	add.w	r9, r9, #4294967295
                            break;
 8008c68:	e7ea      	b.n	8008c40 <matchCommand+0x128>
                if (pattern_len != 0) {
 8008c6a:	bf0c      	ite	eq
 8008c6c:	2001      	moveq	r0, #1
 8008c6e:	2000      	movne	r0, #0
 8008c70:	e7ce      	b.n	8008c10 <matchCommand+0xf8>
            if ((pattern_len > 0)
 8008c72:	2c00      	cmp	r4, #0
 8008c74:	dd4e      	ble.n	8008d14 <matchCommand+0x1fc>
                    && ((pattern_ptr[0] == cmd_ptr[0])
 8008c76:	7839      	ldrb	r1, [r7, #0]
 8008c78:	f818 200a 	ldrb.w	r2, [r8, sl]
            SKIP_CMD(cmd_sep_pos);
 8008c7c:	eb08 000a 	add.w	r0, r8, sl
                    && ((pattern_ptr[0] == cmd_ptr[0])
 8008c80:	4291      	cmp	r1, r2
 8008c82:	d107      	bne.n	8008c94 <matchCommand+0x17c>
                    && (pattern_ptr[0] == ':'))) {
 8008c84:	293a      	cmp	r1, #58	; 0x3a
 8008c86:	d105      	bne.n	8008c94 <matchCommand+0x17c>
                SKIP_PATTERN(1);
 8008c88:	1c7e      	adds	r6, r7, #1
 8008c8a:	3c01      	subs	r4, #1
                SKIP_CMD(1);
 8008c8c:	f100 0801 	add.w	r8, r0, #1
 8008c90:	3d01      	subs	r5, #1
 8008c92:	e77d      	b.n	8008b90 <matchCommand+0x78>
            } else if ((pattern_len > 1)
 8008c94:	2c01      	cmp	r4, #1
 8008c96:	d03d      	beq.n	8008d14 <matchCommand+0x1fc>
                    && (pattern_ptr[1] == cmd_ptr[0])
 8008c98:	787e      	ldrb	r6, [r7, #1]
 8008c9a:	42b2      	cmp	r2, r6
 8008c9c:	d117      	bne.n	8008cce <matchCommand+0x1b6>
                    && (pattern_ptr[0] == '[')
 8008c9e:	295b      	cmp	r1, #91	; 0x5b
 8008ca0:	d109      	bne.n	8008cb6 <matchCommand+0x19e>
                    && (pattern_ptr[1] == ':')) {
 8008ca2:	2a3a      	cmp	r2, #58	; 0x3a
 8008ca4:	d113      	bne.n	8008cce <matchCommand+0x1b6>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
 8008ca6:	1cbe      	adds	r6, r7, #2
 8008ca8:	3c02      	subs	r4, #2
                SKIP_CMD(1);
 8008caa:	f100 0801 	add.w	r8, r0, #1
 8008cae:	3d01      	subs	r5, #1
                brackets++;
 8008cb0:	f109 0901 	add.w	r9, r9, #1
 8008cb4:	e76c      	b.n	8008b90 <matchCommand+0x78>
                    && (pattern_ptr[0] == ']')
 8008cb6:	295d      	cmp	r1, #93	; 0x5d
 8008cb8:	d109      	bne.n	8008cce <matchCommand+0x1b6>
                    && (pattern_ptr[1] == ':')) {
 8008cba:	2a3a      	cmp	r2, #58	; 0x3a
 8008cbc:	d107      	bne.n	8008cce <matchCommand+0x1b6>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
 8008cbe:	1cbe      	adds	r6, r7, #2
 8008cc0:	3c02      	subs	r4, #2
                SKIP_CMD(1);
 8008cc2:	f100 0801 	add.w	r8, r0, #1
 8008cc6:	3d01      	subs	r5, #1
                brackets--;
 8008cc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8008ccc:	e760      	b.n	8008b90 <matchCommand+0x78>
            } else if ((pattern_len > 2)
 8008cce:	2c02      	cmp	r4, #2
 8008cd0:	d020      	beq.n	8008d14 <matchCommand+0x1fc>
                    && (pattern_ptr[2] == cmd_ptr[0])
 8008cd2:	f897 c002 	ldrb.w	ip, [r7, #2]
 8008cd6:	4594      	cmp	ip, r2
 8008cd8:	d11c      	bne.n	8008d14 <matchCommand+0x1fc>
                    && (pattern_ptr[0] == ']')
 8008cda:	295d      	cmp	r1, #93	; 0x5d
 8008cdc:	d11a      	bne.n	8008d14 <matchCommand+0x1fc>
                    && (pattern_ptr[1] == '[')
 8008cde:	2e5b      	cmp	r6, #91	; 0x5b
 8008ce0:	d118      	bne.n	8008d14 <matchCommand+0x1fc>
                    && (pattern_ptr[2] == ':')) {
 8008ce2:	2a3a      	cmp	r2, #58	; 0x3a
 8008ce4:	d116      	bne.n	8008d14 <matchCommand+0x1fc>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
 8008ce6:	1cfe      	adds	r6, r7, #3
 8008ce8:	3c03      	subs	r4, #3
 8008cea:	e7cf      	b.n	8008c8c <matchCommand+0x174>
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 8008cec:	f816 200b 	ldrb.w	r2, [r6, fp]
 8008cf0:	2a5d      	cmp	r2, #93	; 0x5d
 8008cf2:	d10f      	bne.n	8008d14 <matchCommand+0x1fc>
 8008cf4:	787a      	ldrb	r2, [r7, #1]
 8008cf6:	2a3a      	cmp	r2, #58	; 0x3a
 8008cf8:	d102      	bne.n	8008d00 <matchCommand+0x1e8>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 8008cfa:	1cbe      	adds	r6, r7, #2
 8008cfc:	3c02      	subs	r4, #2
 8008cfe:	e7e3      	b.n	8008cc8 <matchCommand+0x1b0>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
 8008d00:	2c02      	cmp	r4, #2
 8008d02:	dd07      	ble.n	8008d14 <matchCommand+0x1fc>
                    && (pattern_ptr[1] == '[')
 8008d04:	2a5b      	cmp	r2, #91	; 0x5b
 8008d06:	d105      	bne.n	8008d14 <matchCommand+0x1fc>
                    && (pattern_ptr[2] == ':')) {
 8008d08:	78ba      	ldrb	r2, [r7, #2]
 8008d0a:	2a3a      	cmp	r2, #58	; 0x3a
 8008d0c:	d102      	bne.n	8008d14 <matchCommand+0x1fc>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 8008d0e:	1cfe      	adds	r6, r7, #3
 8008d10:	3c03      	subs	r4, #3
 8008d12:	e73d      	b.n	8008b90 <matchCommand+0x78>
            return FALSE;
 8008d14:	2000      	movs	r0, #0
 8008d16:	e77b      	b.n	8008c10 <matchCommand+0xf8>
 8008d18:	0800b22b 	.word	0x0800b22b
 8008d1c:	0800b230 	.word	0x0800b230

08008d20 <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
 8008d22:	b1c1      	cbz	r1, 8008d56 <composeCompoundCommand+0x36>
 8008d24:	684c      	ldr	r4, [r1, #4]
 8008d26:	b1c4      	cbz	r4, 8008d5a <composeCompoundCommand+0x3a>
 8008d28:	688b      	ldr	r3, [r1, #8]
 8008d2a:	b1c3      	cbz	r3, 8008d5e <composeCompoundCommand+0x3e>
        return FALSE;

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
 8008d2c:	6845      	ldr	r5, [r0, #4]
 8008d2e:	b185      	cbz	r5, 8008d52 <composeCompoundCommand+0x32>
 8008d30:	6882      	ldr	r2, [r0, #8]
 8008d32:	b172      	cbz	r2, 8008d52 <composeCompoundCommand+0x32>
        return TRUE;

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
 8008d34:	7826      	ldrb	r6, [r4, #0]
 8008d36:	f006 06ef 	and.w	r6, r6, #239	; 0xef
 8008d3a:	2e2a      	cmp	r6, #42	; 0x2a
 8008d3c:	d009      	beq.n	8008d52 <composeCompoundCommand+0x32>
        return TRUE;

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
 8008d3e:	782e      	ldrb	r6, [r5, #0]
 8008d40:	2e2a      	cmp	r6, #42	; 0x2a
 8008d42:	d006      	beq.n	8008d52 <composeCompoundCommand+0x32>
        return TRUE;

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
        if (prev->ptr[i - 1] == ':') {
 8008d44:	1e56      	subs	r6, r2, #1
 8008d46:	5daf      	ldrb	r7, [r5, r6]
 8008d48:	2f3a      	cmp	r7, #58	; 0x3a
 8008d4a:	d00a      	beq.n	8008d62 <composeCompoundCommand+0x42>
    for (i = prev->len; i > 0; i--) {
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	d1f8      	bne.n	8008d44 <composeCompoundCommand+0x24>
        return TRUE;

    current->ptr -= i;
    current->len += i;
    memmove(current->ptr, prev->ptr, i);
    return TRUE;
 8008d52:	2001      	movs	r0, #1
 8008d54:	e000      	b.n	8008d58 <composeCompoundCommand+0x38>
        return FALSE;
 8008d56:	4608      	mov	r0, r1
}
 8008d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FALSE;
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	e7fc      	b.n	8008d58 <composeCompoundCommand+0x38>
 8008d5e:	4618      	mov	r0, r3
 8008d60:	e7fa      	b.n	8008d58 <composeCompoundCommand+0x38>
    current->ptr -= i;
 8008d62:	1aa4      	subs	r4, r4, r2
 8008d64:	604c      	str	r4, [r1, #4]
    current->len += i;
 8008d66:	4413      	add	r3, r2
 8008d68:	608b      	str	r3, [r1, #8]
    memmove(current->ptr, prev->ptr, i);
 8008d6a:	6841      	ldr	r1, [r0, #4]
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f000 f85a 	bl	8008e26 <memmove>
 8008d72:	e7ee      	b.n	8008d52 <composeCompoundCommand+0x32>

08008d74 <__errno>:
 8008d74:	4b01      	ldr	r3, [pc, #4]	; (8008d7c <__errno+0x8>)
 8008d76:	6818      	ldr	r0, [r3, #0]
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20000190 	.word	0x20000190

08008d80 <__libc_init_array>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	2500      	movs	r5, #0
 8008d84:	4e0c      	ldr	r6, [pc, #48]	; (8008db8 <__libc_init_array+0x38>)
 8008d86:	4c0d      	ldr	r4, [pc, #52]	; (8008dbc <__libc_init_array+0x3c>)
 8008d88:	1ba4      	subs	r4, r4, r6
 8008d8a:	10a4      	asrs	r4, r4, #2
 8008d8c:	42a5      	cmp	r5, r4
 8008d8e:	d109      	bne.n	8008da4 <__libc_init_array+0x24>
 8008d90:	f001 fde2 	bl	800a958 <_init>
 8008d94:	2500      	movs	r5, #0
 8008d96:	4e0a      	ldr	r6, [pc, #40]	; (8008dc0 <__libc_init_array+0x40>)
 8008d98:	4c0a      	ldr	r4, [pc, #40]	; (8008dc4 <__libc_init_array+0x44>)
 8008d9a:	1ba4      	subs	r4, r4, r6
 8008d9c:	10a4      	asrs	r4, r4, #2
 8008d9e:	42a5      	cmp	r5, r4
 8008da0:	d105      	bne.n	8008dae <__libc_init_array+0x2e>
 8008da2:	bd70      	pop	{r4, r5, r6, pc}
 8008da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008da8:	4798      	blx	r3
 8008daa:	3501      	adds	r5, #1
 8008dac:	e7ee      	b.n	8008d8c <__libc_init_array+0xc>
 8008dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008db2:	4798      	blx	r3
 8008db4:	3501      	adds	r5, #1
 8008db6:	e7f2      	b.n	8008d9e <__libc_init_array+0x1e>
 8008db8:	0800b3a8 	.word	0x0800b3a8
 8008dbc:	0800b3a8 	.word	0x0800b3a8
 8008dc0:	0800b3a8 	.word	0x0800b3a8
 8008dc4:	0800b3ac 	.word	0x0800b3ac

08008dc8 <__locale_ctype_ptr_l>:
 8008dc8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008dcc:	4770      	bx	lr
	...

08008dd0 <__locale_ctype_ptr>:
 8008dd0:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <__locale_ctype_ptr+0x14>)
 8008dd2:	4a05      	ldr	r2, [pc, #20]	; (8008de8 <__locale_ctype_ptr+0x18>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	bf08      	it	eq
 8008ddc:	4613      	moveq	r3, r2
 8008dde:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008de2:	4770      	bx	lr
 8008de4:	20000190 	.word	0x20000190
 8008de8:	200001f4 	.word	0x200001f4

08008dec <__ascii_mbtowc>:
 8008dec:	b082      	sub	sp, #8
 8008dee:	b901      	cbnz	r1, 8008df2 <__ascii_mbtowc+0x6>
 8008df0:	a901      	add	r1, sp, #4
 8008df2:	b142      	cbz	r2, 8008e06 <__ascii_mbtowc+0x1a>
 8008df4:	b14b      	cbz	r3, 8008e0a <__ascii_mbtowc+0x1e>
 8008df6:	7813      	ldrb	r3, [r2, #0]
 8008df8:	600b      	str	r3, [r1, #0]
 8008dfa:	7812      	ldrb	r2, [r2, #0]
 8008dfc:	1c10      	adds	r0, r2, #0
 8008dfe:	bf18      	it	ne
 8008e00:	2001      	movne	r0, #1
 8008e02:	b002      	add	sp, #8
 8008e04:	4770      	bx	lr
 8008e06:	4610      	mov	r0, r2
 8008e08:	e7fb      	b.n	8008e02 <__ascii_mbtowc+0x16>
 8008e0a:	f06f 0001 	mvn.w	r0, #1
 8008e0e:	e7f8      	b.n	8008e02 <__ascii_mbtowc+0x16>

08008e10 <memcpy>:
 8008e10:	b510      	push	{r4, lr}
 8008e12:	1e43      	subs	r3, r0, #1
 8008e14:	440a      	add	r2, r1
 8008e16:	4291      	cmp	r1, r2
 8008e18:	d100      	bne.n	8008e1c <memcpy+0xc>
 8008e1a:	bd10      	pop	{r4, pc}
 8008e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e24:	e7f7      	b.n	8008e16 <memcpy+0x6>

08008e26 <memmove>:
 8008e26:	4288      	cmp	r0, r1
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	eb01 0302 	add.w	r3, r1, r2
 8008e2e:	d807      	bhi.n	8008e40 <memmove+0x1a>
 8008e30:	1e42      	subs	r2, r0, #1
 8008e32:	4299      	cmp	r1, r3
 8008e34:	d00a      	beq.n	8008e4c <memmove+0x26>
 8008e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e3a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008e3e:	e7f8      	b.n	8008e32 <memmove+0xc>
 8008e40:	4283      	cmp	r3, r0
 8008e42:	d9f5      	bls.n	8008e30 <memmove+0xa>
 8008e44:	1881      	adds	r1, r0, r2
 8008e46:	1ad2      	subs	r2, r2, r3
 8008e48:	42d3      	cmn	r3, r2
 8008e4a:	d100      	bne.n	8008e4e <memmove+0x28>
 8008e4c:	bd10      	pop	{r4, pc}
 8008e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008e56:	e7f7      	b.n	8008e48 <memmove+0x22>

08008e58 <memset>:
 8008e58:	4603      	mov	r3, r0
 8008e5a:	4402      	add	r2, r0
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d100      	bne.n	8008e62 <memset+0xa>
 8008e60:	4770      	bx	lr
 8008e62:	f803 1b01 	strb.w	r1, [r3], #1
 8008e66:	e7f9      	b.n	8008e5c <memset+0x4>

08008e68 <siprintf>:
 8008e68:	b40e      	push	{r1, r2, r3}
 8008e6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e6e:	b500      	push	{lr}
 8008e70:	b09c      	sub	sp, #112	; 0x70
 8008e72:	ab1d      	add	r3, sp, #116	; 0x74
 8008e74:	9002      	str	r0, [sp, #8]
 8008e76:	9006      	str	r0, [sp, #24]
 8008e78:	9107      	str	r1, [sp, #28]
 8008e7a:	9104      	str	r1, [sp, #16]
 8008e7c:	4808      	ldr	r0, [pc, #32]	; (8008ea0 <siprintf+0x38>)
 8008e7e:	4909      	ldr	r1, [pc, #36]	; (8008ea4 <siprintf+0x3c>)
 8008e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e84:	9105      	str	r1, [sp, #20]
 8008e86:	6800      	ldr	r0, [r0, #0]
 8008e88:	a902      	add	r1, sp, #8
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	f000 fa20 	bl	80092d0 <_svfiprintf_r>
 8008e90:	2200      	movs	r2, #0
 8008e92:	9b02      	ldr	r3, [sp, #8]
 8008e94:	701a      	strb	r2, [r3, #0]
 8008e96:	b01c      	add	sp, #112	; 0x70
 8008e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e9c:	b003      	add	sp, #12
 8008e9e:	4770      	bx	lr
 8008ea0:	20000190 	.word	0x20000190
 8008ea4:	ffff0208 	.word	0xffff0208

08008ea8 <strncasecmp>:
 8008ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eac:	4606      	mov	r6, r0
 8008eae:	460f      	mov	r7, r1
 8008eb0:	eb00 0802 	add.w	r8, r0, r2
 8008eb4:	45b0      	cmp	r8, r6
 8008eb6:	d019      	beq.n	8008eec <strncasecmp+0x44>
 8008eb8:	f816 4b01 	ldrb.w	r4, [r6], #1
 8008ebc:	f7ff ff88 	bl	8008dd0 <__locale_ctype_ptr>
 8008ec0:	4420      	add	r0, r4
 8008ec2:	7843      	ldrb	r3, [r0, #1]
 8008ec4:	f817 5b01 	ldrb.w	r5, [r7], #1
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	bf08      	it	eq
 8008ed0:	3420      	addeq	r4, #32
 8008ed2:	f7ff ff7d 	bl	8008dd0 <__locale_ctype_ptr>
 8008ed6:	4428      	add	r0, r5
 8008ed8:	7842      	ldrb	r2, [r0, #1]
 8008eda:	f002 0203 	and.w	r2, r2, #3
 8008ede:	2a01      	cmp	r2, #1
 8008ee0:	bf08      	it	eq
 8008ee2:	3520      	addeq	r5, #32
 8008ee4:	1b60      	subs	r0, r4, r5
 8008ee6:	d102      	bne.n	8008eee <strncasecmp+0x46>
 8008ee8:	2d00      	cmp	r5, #0
 8008eea:	d1e3      	bne.n	8008eb4 <strncasecmp+0xc>
 8008eec:	2000      	movs	r0, #0
 8008eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008ef2 <strnlen>:
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	4401      	add	r1, r0
 8008ef8:	428b      	cmp	r3, r1
 8008efa:	d002      	beq.n	8008f02 <strnlen+0x10>
 8008efc:	781a      	ldrb	r2, [r3, #0]
 8008efe:	1c5c      	adds	r4, r3, #1
 8008f00:	b90a      	cbnz	r2, 8008f06 <strnlen+0x14>
 8008f02:	1a18      	subs	r0, r3, r0
 8008f04:	bd10      	pop	{r4, pc}
 8008f06:	4623      	mov	r3, r4
 8008f08:	e7f6      	b.n	8008ef8 <strnlen+0x6>

08008f0a <_strtol_l.isra.0>:
 8008f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f0e:	4680      	mov	r8, r0
 8008f10:	4689      	mov	r9, r1
 8008f12:	4692      	mov	sl, r2
 8008f14:	461e      	mov	r6, r3
 8008f16:	460f      	mov	r7, r1
 8008f18:	463d      	mov	r5, r7
 8008f1a:	9808      	ldr	r0, [sp, #32]
 8008f1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f20:	f7ff ff52 	bl	8008dc8 <__locale_ctype_ptr_l>
 8008f24:	4420      	add	r0, r4
 8008f26:	7843      	ldrb	r3, [r0, #1]
 8008f28:	f013 0308 	ands.w	r3, r3, #8
 8008f2c:	d132      	bne.n	8008f94 <_strtol_l.isra.0+0x8a>
 8008f2e:	2c2d      	cmp	r4, #45	; 0x2d
 8008f30:	d132      	bne.n	8008f98 <_strtol_l.isra.0+0x8e>
 8008f32:	2201      	movs	r2, #1
 8008f34:	787c      	ldrb	r4, [r7, #1]
 8008f36:	1cbd      	adds	r5, r7, #2
 8008f38:	2e00      	cmp	r6, #0
 8008f3a:	d05d      	beq.n	8008ff8 <_strtol_l.isra.0+0xee>
 8008f3c:	2e10      	cmp	r6, #16
 8008f3e:	d109      	bne.n	8008f54 <_strtol_l.isra.0+0x4a>
 8008f40:	2c30      	cmp	r4, #48	; 0x30
 8008f42:	d107      	bne.n	8008f54 <_strtol_l.isra.0+0x4a>
 8008f44:	782b      	ldrb	r3, [r5, #0]
 8008f46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f4a:	2b58      	cmp	r3, #88	; 0x58
 8008f4c:	d14f      	bne.n	8008fee <_strtol_l.isra.0+0xe4>
 8008f4e:	2610      	movs	r6, #16
 8008f50:	786c      	ldrb	r4, [r5, #1]
 8008f52:	3502      	adds	r5, #2
 8008f54:	2a00      	cmp	r2, #0
 8008f56:	bf14      	ite	ne
 8008f58:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008f5c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008f60:	2700      	movs	r7, #0
 8008f62:	fbb1 fcf6 	udiv	ip, r1, r6
 8008f66:	4638      	mov	r0, r7
 8008f68:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008f6c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008f70:	2b09      	cmp	r3, #9
 8008f72:	d817      	bhi.n	8008fa4 <_strtol_l.isra.0+0x9a>
 8008f74:	461c      	mov	r4, r3
 8008f76:	42a6      	cmp	r6, r4
 8008f78:	dd23      	ble.n	8008fc2 <_strtol_l.isra.0+0xb8>
 8008f7a:	1c7b      	adds	r3, r7, #1
 8008f7c:	d007      	beq.n	8008f8e <_strtol_l.isra.0+0x84>
 8008f7e:	4584      	cmp	ip, r0
 8008f80:	d31c      	bcc.n	8008fbc <_strtol_l.isra.0+0xb2>
 8008f82:	d101      	bne.n	8008f88 <_strtol_l.isra.0+0x7e>
 8008f84:	45a6      	cmp	lr, r4
 8008f86:	db19      	blt.n	8008fbc <_strtol_l.isra.0+0xb2>
 8008f88:	2701      	movs	r7, #1
 8008f8a:	fb00 4006 	mla	r0, r0, r6, r4
 8008f8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f92:	e7eb      	b.n	8008f6c <_strtol_l.isra.0+0x62>
 8008f94:	462f      	mov	r7, r5
 8008f96:	e7bf      	b.n	8008f18 <_strtol_l.isra.0+0xe>
 8008f98:	2c2b      	cmp	r4, #43	; 0x2b
 8008f9a:	bf04      	itt	eq
 8008f9c:	1cbd      	addeq	r5, r7, #2
 8008f9e:	787c      	ldrbeq	r4, [r7, #1]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	e7c9      	b.n	8008f38 <_strtol_l.isra.0+0x2e>
 8008fa4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008fa8:	2b19      	cmp	r3, #25
 8008faa:	d801      	bhi.n	8008fb0 <_strtol_l.isra.0+0xa6>
 8008fac:	3c37      	subs	r4, #55	; 0x37
 8008fae:	e7e2      	b.n	8008f76 <_strtol_l.isra.0+0x6c>
 8008fb0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008fb4:	2b19      	cmp	r3, #25
 8008fb6:	d804      	bhi.n	8008fc2 <_strtol_l.isra.0+0xb8>
 8008fb8:	3c57      	subs	r4, #87	; 0x57
 8008fba:	e7dc      	b.n	8008f76 <_strtol_l.isra.0+0x6c>
 8008fbc:	f04f 37ff 	mov.w	r7, #4294967295
 8008fc0:	e7e5      	b.n	8008f8e <_strtol_l.isra.0+0x84>
 8008fc2:	1c7b      	adds	r3, r7, #1
 8008fc4:	d108      	bne.n	8008fd8 <_strtol_l.isra.0+0xce>
 8008fc6:	2322      	movs	r3, #34	; 0x22
 8008fc8:	4608      	mov	r0, r1
 8008fca:	f8c8 3000 	str.w	r3, [r8]
 8008fce:	f1ba 0f00 	cmp.w	sl, #0
 8008fd2:	d107      	bne.n	8008fe4 <_strtol_l.isra.0+0xda>
 8008fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd8:	b102      	cbz	r2, 8008fdc <_strtol_l.isra.0+0xd2>
 8008fda:	4240      	negs	r0, r0
 8008fdc:	f1ba 0f00 	cmp.w	sl, #0
 8008fe0:	d0f8      	beq.n	8008fd4 <_strtol_l.isra.0+0xca>
 8008fe2:	b10f      	cbz	r7, 8008fe8 <_strtol_l.isra.0+0xde>
 8008fe4:	f105 39ff 	add.w	r9, r5, #4294967295
 8008fe8:	f8ca 9000 	str.w	r9, [sl]
 8008fec:	e7f2      	b.n	8008fd4 <_strtol_l.isra.0+0xca>
 8008fee:	2430      	movs	r4, #48	; 0x30
 8008ff0:	2e00      	cmp	r6, #0
 8008ff2:	d1af      	bne.n	8008f54 <_strtol_l.isra.0+0x4a>
 8008ff4:	2608      	movs	r6, #8
 8008ff6:	e7ad      	b.n	8008f54 <_strtol_l.isra.0+0x4a>
 8008ff8:	2c30      	cmp	r4, #48	; 0x30
 8008ffa:	d0a3      	beq.n	8008f44 <_strtol_l.isra.0+0x3a>
 8008ffc:	260a      	movs	r6, #10
 8008ffe:	e7a9      	b.n	8008f54 <_strtol_l.isra.0+0x4a>

08009000 <strtol>:
 8009000:	4b08      	ldr	r3, [pc, #32]	; (8009024 <strtol+0x24>)
 8009002:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009004:	681c      	ldr	r4, [r3, #0]
 8009006:	4d08      	ldr	r5, [pc, #32]	; (8009028 <strtol+0x28>)
 8009008:	6a23      	ldr	r3, [r4, #32]
 800900a:	2b00      	cmp	r3, #0
 800900c:	bf08      	it	eq
 800900e:	462b      	moveq	r3, r5
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	4613      	mov	r3, r2
 8009014:	460a      	mov	r2, r1
 8009016:	4601      	mov	r1, r0
 8009018:	4620      	mov	r0, r4
 800901a:	f7ff ff76 	bl	8008f0a <_strtol_l.isra.0>
 800901e:	b003      	add	sp, #12
 8009020:	bd30      	pop	{r4, r5, pc}
 8009022:	bf00      	nop
 8009024:	20000190 	.word	0x20000190
 8009028:	200001f4 	.word	0x200001f4

0800902c <_strtoul_l.isra.0>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	4680      	mov	r8, r0
 8009032:	4689      	mov	r9, r1
 8009034:	4692      	mov	sl, r2
 8009036:	461e      	mov	r6, r3
 8009038:	460f      	mov	r7, r1
 800903a:	463d      	mov	r5, r7
 800903c:	9808      	ldr	r0, [sp, #32]
 800903e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009042:	f7ff fec1 	bl	8008dc8 <__locale_ctype_ptr_l>
 8009046:	4420      	add	r0, r4
 8009048:	7843      	ldrb	r3, [r0, #1]
 800904a:	f013 0308 	ands.w	r3, r3, #8
 800904e:	d130      	bne.n	80090b2 <_strtoul_l.isra.0+0x86>
 8009050:	2c2d      	cmp	r4, #45	; 0x2d
 8009052:	d130      	bne.n	80090b6 <_strtoul_l.isra.0+0x8a>
 8009054:	2101      	movs	r1, #1
 8009056:	787c      	ldrb	r4, [r7, #1]
 8009058:	1cbd      	adds	r5, r7, #2
 800905a:	2e00      	cmp	r6, #0
 800905c:	d05c      	beq.n	8009118 <_strtoul_l.isra.0+0xec>
 800905e:	2e10      	cmp	r6, #16
 8009060:	d109      	bne.n	8009076 <_strtoul_l.isra.0+0x4a>
 8009062:	2c30      	cmp	r4, #48	; 0x30
 8009064:	d107      	bne.n	8009076 <_strtoul_l.isra.0+0x4a>
 8009066:	782b      	ldrb	r3, [r5, #0]
 8009068:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800906c:	2b58      	cmp	r3, #88	; 0x58
 800906e:	d14e      	bne.n	800910e <_strtoul_l.isra.0+0xe2>
 8009070:	2610      	movs	r6, #16
 8009072:	786c      	ldrb	r4, [r5, #1]
 8009074:	3502      	adds	r5, #2
 8009076:	f04f 32ff 	mov.w	r2, #4294967295
 800907a:	fbb2 f2f6 	udiv	r2, r2, r6
 800907e:	2300      	movs	r3, #0
 8009080:	fb06 fc02 	mul.w	ip, r6, r2
 8009084:	4618      	mov	r0, r3
 8009086:	ea6f 0c0c 	mvn.w	ip, ip
 800908a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800908e:	2f09      	cmp	r7, #9
 8009090:	d817      	bhi.n	80090c2 <_strtoul_l.isra.0+0x96>
 8009092:	463c      	mov	r4, r7
 8009094:	42a6      	cmp	r6, r4
 8009096:	dd23      	ble.n	80090e0 <_strtoul_l.isra.0+0xb4>
 8009098:	2b00      	cmp	r3, #0
 800909a:	db1e      	blt.n	80090da <_strtoul_l.isra.0+0xae>
 800909c:	4282      	cmp	r2, r0
 800909e:	d31c      	bcc.n	80090da <_strtoul_l.isra.0+0xae>
 80090a0:	d101      	bne.n	80090a6 <_strtoul_l.isra.0+0x7a>
 80090a2:	45a4      	cmp	ip, r4
 80090a4:	db19      	blt.n	80090da <_strtoul_l.isra.0+0xae>
 80090a6:	2301      	movs	r3, #1
 80090a8:	fb00 4006 	mla	r0, r0, r6, r4
 80090ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090b0:	e7eb      	b.n	800908a <_strtoul_l.isra.0+0x5e>
 80090b2:	462f      	mov	r7, r5
 80090b4:	e7c1      	b.n	800903a <_strtoul_l.isra.0+0xe>
 80090b6:	2c2b      	cmp	r4, #43	; 0x2b
 80090b8:	bf04      	itt	eq
 80090ba:	1cbd      	addeq	r5, r7, #2
 80090bc:	787c      	ldrbeq	r4, [r7, #1]
 80090be:	4619      	mov	r1, r3
 80090c0:	e7cb      	b.n	800905a <_strtoul_l.isra.0+0x2e>
 80090c2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80090c6:	2f19      	cmp	r7, #25
 80090c8:	d801      	bhi.n	80090ce <_strtoul_l.isra.0+0xa2>
 80090ca:	3c37      	subs	r4, #55	; 0x37
 80090cc:	e7e2      	b.n	8009094 <_strtoul_l.isra.0+0x68>
 80090ce:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80090d2:	2f19      	cmp	r7, #25
 80090d4:	d804      	bhi.n	80090e0 <_strtoul_l.isra.0+0xb4>
 80090d6:	3c57      	subs	r4, #87	; 0x57
 80090d8:	e7dc      	b.n	8009094 <_strtoul_l.isra.0+0x68>
 80090da:	f04f 33ff 	mov.w	r3, #4294967295
 80090de:	e7e5      	b.n	80090ac <_strtoul_l.isra.0+0x80>
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	da09      	bge.n	80090f8 <_strtoul_l.isra.0+0xcc>
 80090e4:	2322      	movs	r3, #34	; 0x22
 80090e6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ea:	f8c8 3000 	str.w	r3, [r8]
 80090ee:	f1ba 0f00 	cmp.w	sl, #0
 80090f2:	d107      	bne.n	8009104 <_strtoul_l.isra.0+0xd8>
 80090f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f8:	b101      	cbz	r1, 80090fc <_strtoul_l.isra.0+0xd0>
 80090fa:	4240      	negs	r0, r0
 80090fc:	f1ba 0f00 	cmp.w	sl, #0
 8009100:	d0f8      	beq.n	80090f4 <_strtoul_l.isra.0+0xc8>
 8009102:	b10b      	cbz	r3, 8009108 <_strtoul_l.isra.0+0xdc>
 8009104:	f105 39ff 	add.w	r9, r5, #4294967295
 8009108:	f8ca 9000 	str.w	r9, [sl]
 800910c:	e7f2      	b.n	80090f4 <_strtoul_l.isra.0+0xc8>
 800910e:	2430      	movs	r4, #48	; 0x30
 8009110:	2e00      	cmp	r6, #0
 8009112:	d1b0      	bne.n	8009076 <_strtoul_l.isra.0+0x4a>
 8009114:	2608      	movs	r6, #8
 8009116:	e7ae      	b.n	8009076 <_strtoul_l.isra.0+0x4a>
 8009118:	2c30      	cmp	r4, #48	; 0x30
 800911a:	d0a4      	beq.n	8009066 <_strtoul_l.isra.0+0x3a>
 800911c:	260a      	movs	r6, #10
 800911e:	e7aa      	b.n	8009076 <_strtoul_l.isra.0+0x4a>

08009120 <strtoul>:
 8009120:	4b08      	ldr	r3, [pc, #32]	; (8009144 <strtoul+0x24>)
 8009122:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009124:	681c      	ldr	r4, [r3, #0]
 8009126:	4d08      	ldr	r5, [pc, #32]	; (8009148 <strtoul+0x28>)
 8009128:	6a23      	ldr	r3, [r4, #32]
 800912a:	2b00      	cmp	r3, #0
 800912c:	bf08      	it	eq
 800912e:	462b      	moveq	r3, r5
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	4613      	mov	r3, r2
 8009134:	460a      	mov	r2, r1
 8009136:	4601      	mov	r1, r0
 8009138:	4620      	mov	r0, r4
 800913a:	f7ff ff77 	bl	800902c <_strtoul_l.isra.0>
 800913e:	b003      	add	sp, #12
 8009140:	bd30      	pop	{r4, r5, pc}
 8009142:	bf00      	nop
 8009144:	20000190 	.word	0x20000190
 8009148:	200001f4 	.word	0x200001f4

0800914c <__ascii_wctomb>:
 800914c:	b149      	cbz	r1, 8009162 <__ascii_wctomb+0x16>
 800914e:	2aff      	cmp	r2, #255	; 0xff
 8009150:	bf8b      	itete	hi
 8009152:	238a      	movhi	r3, #138	; 0x8a
 8009154:	700a      	strbls	r2, [r1, #0]
 8009156:	6003      	strhi	r3, [r0, #0]
 8009158:	2001      	movls	r0, #1
 800915a:	bf88      	it	hi
 800915c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009160:	4770      	bx	lr
 8009162:	4608      	mov	r0, r1
 8009164:	4770      	bx	lr
	...

08009168 <_malloc_r>:
 8009168:	b570      	push	{r4, r5, r6, lr}
 800916a:	1ccd      	adds	r5, r1, #3
 800916c:	f025 0503 	bic.w	r5, r5, #3
 8009170:	3508      	adds	r5, #8
 8009172:	2d0c      	cmp	r5, #12
 8009174:	bf38      	it	cc
 8009176:	250c      	movcc	r5, #12
 8009178:	2d00      	cmp	r5, #0
 800917a:	4606      	mov	r6, r0
 800917c:	db01      	blt.n	8009182 <_malloc_r+0x1a>
 800917e:	42a9      	cmp	r1, r5
 8009180:	d903      	bls.n	800918a <_malloc_r+0x22>
 8009182:	230c      	movs	r3, #12
 8009184:	6033      	str	r3, [r6, #0]
 8009186:	2000      	movs	r0, #0
 8009188:	bd70      	pop	{r4, r5, r6, pc}
 800918a:	f000 fb3f 	bl	800980c <__malloc_lock>
 800918e:	4a21      	ldr	r2, [pc, #132]	; (8009214 <_malloc_r+0xac>)
 8009190:	6814      	ldr	r4, [r2, #0]
 8009192:	4621      	mov	r1, r4
 8009194:	b991      	cbnz	r1, 80091bc <_malloc_r+0x54>
 8009196:	4c20      	ldr	r4, [pc, #128]	; (8009218 <_malloc_r+0xb0>)
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	b91b      	cbnz	r3, 80091a4 <_malloc_r+0x3c>
 800919c:	4630      	mov	r0, r6
 800919e:	f000 fb17 	bl	80097d0 <_sbrk_r>
 80091a2:	6020      	str	r0, [r4, #0]
 80091a4:	4629      	mov	r1, r5
 80091a6:	4630      	mov	r0, r6
 80091a8:	f000 fb12 	bl	80097d0 <_sbrk_r>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d124      	bne.n	80091fa <_malloc_r+0x92>
 80091b0:	230c      	movs	r3, #12
 80091b2:	4630      	mov	r0, r6
 80091b4:	6033      	str	r3, [r6, #0]
 80091b6:	f000 fb2a 	bl	800980e <__malloc_unlock>
 80091ba:	e7e4      	b.n	8009186 <_malloc_r+0x1e>
 80091bc:	680b      	ldr	r3, [r1, #0]
 80091be:	1b5b      	subs	r3, r3, r5
 80091c0:	d418      	bmi.n	80091f4 <_malloc_r+0x8c>
 80091c2:	2b0b      	cmp	r3, #11
 80091c4:	d90f      	bls.n	80091e6 <_malloc_r+0x7e>
 80091c6:	600b      	str	r3, [r1, #0]
 80091c8:	18cc      	adds	r4, r1, r3
 80091ca:	50cd      	str	r5, [r1, r3]
 80091cc:	4630      	mov	r0, r6
 80091ce:	f000 fb1e 	bl	800980e <__malloc_unlock>
 80091d2:	f104 000b 	add.w	r0, r4, #11
 80091d6:	1d23      	adds	r3, r4, #4
 80091d8:	f020 0007 	bic.w	r0, r0, #7
 80091dc:	1ac3      	subs	r3, r0, r3
 80091de:	d0d3      	beq.n	8009188 <_malloc_r+0x20>
 80091e0:	425a      	negs	r2, r3
 80091e2:	50e2      	str	r2, [r4, r3]
 80091e4:	e7d0      	b.n	8009188 <_malloc_r+0x20>
 80091e6:	684b      	ldr	r3, [r1, #4]
 80091e8:	428c      	cmp	r4, r1
 80091ea:	bf16      	itet	ne
 80091ec:	6063      	strne	r3, [r4, #4]
 80091ee:	6013      	streq	r3, [r2, #0]
 80091f0:	460c      	movne	r4, r1
 80091f2:	e7eb      	b.n	80091cc <_malloc_r+0x64>
 80091f4:	460c      	mov	r4, r1
 80091f6:	6849      	ldr	r1, [r1, #4]
 80091f8:	e7cc      	b.n	8009194 <_malloc_r+0x2c>
 80091fa:	1cc4      	adds	r4, r0, #3
 80091fc:	f024 0403 	bic.w	r4, r4, #3
 8009200:	42a0      	cmp	r0, r4
 8009202:	d005      	beq.n	8009210 <_malloc_r+0xa8>
 8009204:	1a21      	subs	r1, r4, r0
 8009206:	4630      	mov	r0, r6
 8009208:	f000 fae2 	bl	80097d0 <_sbrk_r>
 800920c:	3001      	adds	r0, #1
 800920e:	d0cf      	beq.n	80091b0 <_malloc_r+0x48>
 8009210:	6025      	str	r5, [r4, #0]
 8009212:	e7db      	b.n	80091cc <_malloc_r+0x64>
 8009214:	200005a8 	.word	0x200005a8
 8009218:	200005ac 	.word	0x200005ac

0800921c <__ssputs_r>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	688e      	ldr	r6, [r1, #8]
 8009222:	4682      	mov	sl, r0
 8009224:	429e      	cmp	r6, r3
 8009226:	460c      	mov	r4, r1
 8009228:	4690      	mov	r8, r2
 800922a:	4699      	mov	r9, r3
 800922c:	d837      	bhi.n	800929e <__ssputs_r+0x82>
 800922e:	898a      	ldrh	r2, [r1, #12]
 8009230:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009234:	d031      	beq.n	800929a <__ssputs_r+0x7e>
 8009236:	2302      	movs	r3, #2
 8009238:	6825      	ldr	r5, [r4, #0]
 800923a:	6909      	ldr	r1, [r1, #16]
 800923c:	1a6f      	subs	r7, r5, r1
 800923e:	6965      	ldr	r5, [r4, #20]
 8009240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009244:	fb95 f5f3 	sdiv	r5, r5, r3
 8009248:	f109 0301 	add.w	r3, r9, #1
 800924c:	443b      	add	r3, r7
 800924e:	429d      	cmp	r5, r3
 8009250:	bf38      	it	cc
 8009252:	461d      	movcc	r5, r3
 8009254:	0553      	lsls	r3, r2, #21
 8009256:	d530      	bpl.n	80092ba <__ssputs_r+0x9e>
 8009258:	4629      	mov	r1, r5
 800925a:	f7ff ff85 	bl	8009168 <_malloc_r>
 800925e:	4606      	mov	r6, r0
 8009260:	b950      	cbnz	r0, 8009278 <__ssputs_r+0x5c>
 8009262:	230c      	movs	r3, #12
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	f8ca 3000 	str.w	r3, [sl]
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009278:	463a      	mov	r2, r7
 800927a:	6921      	ldr	r1, [r4, #16]
 800927c:	f7ff fdc8 	bl	8008e10 <memcpy>
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800928a:	81a3      	strh	r3, [r4, #12]
 800928c:	6126      	str	r6, [r4, #16]
 800928e:	443e      	add	r6, r7
 8009290:	6026      	str	r6, [r4, #0]
 8009292:	464e      	mov	r6, r9
 8009294:	6165      	str	r5, [r4, #20]
 8009296:	1bed      	subs	r5, r5, r7
 8009298:	60a5      	str	r5, [r4, #8]
 800929a:	454e      	cmp	r6, r9
 800929c:	d900      	bls.n	80092a0 <__ssputs_r+0x84>
 800929e:	464e      	mov	r6, r9
 80092a0:	4632      	mov	r2, r6
 80092a2:	4641      	mov	r1, r8
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	f7ff fdbe 	bl	8008e26 <memmove>
 80092aa:	68a3      	ldr	r3, [r4, #8]
 80092ac:	2000      	movs	r0, #0
 80092ae:	1b9b      	subs	r3, r3, r6
 80092b0:	60a3      	str	r3, [r4, #8]
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	441e      	add	r6, r3
 80092b6:	6026      	str	r6, [r4, #0]
 80092b8:	e7dc      	b.n	8009274 <__ssputs_r+0x58>
 80092ba:	462a      	mov	r2, r5
 80092bc:	f000 faf4 	bl	80098a8 <_realloc_r>
 80092c0:	4606      	mov	r6, r0
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d1e2      	bne.n	800928c <__ssputs_r+0x70>
 80092c6:	6921      	ldr	r1, [r4, #16]
 80092c8:	4650      	mov	r0, sl
 80092ca:	f000 faa1 	bl	8009810 <_free_r>
 80092ce:	e7c8      	b.n	8009262 <__ssputs_r+0x46>

080092d0 <_svfiprintf_r>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	461d      	mov	r5, r3
 80092d6:	898b      	ldrh	r3, [r1, #12]
 80092d8:	b09d      	sub	sp, #116	; 0x74
 80092da:	061f      	lsls	r7, r3, #24
 80092dc:	4680      	mov	r8, r0
 80092de:	460c      	mov	r4, r1
 80092e0:	4616      	mov	r6, r2
 80092e2:	d50f      	bpl.n	8009304 <_svfiprintf_r+0x34>
 80092e4:	690b      	ldr	r3, [r1, #16]
 80092e6:	b96b      	cbnz	r3, 8009304 <_svfiprintf_r+0x34>
 80092e8:	2140      	movs	r1, #64	; 0x40
 80092ea:	f7ff ff3d 	bl	8009168 <_malloc_r>
 80092ee:	6020      	str	r0, [r4, #0]
 80092f0:	6120      	str	r0, [r4, #16]
 80092f2:	b928      	cbnz	r0, 8009300 <_svfiprintf_r+0x30>
 80092f4:	230c      	movs	r3, #12
 80092f6:	f8c8 3000 	str.w	r3, [r8]
 80092fa:	f04f 30ff 	mov.w	r0, #4294967295
 80092fe:	e0c8      	b.n	8009492 <_svfiprintf_r+0x1c2>
 8009300:	2340      	movs	r3, #64	; 0x40
 8009302:	6163      	str	r3, [r4, #20]
 8009304:	2300      	movs	r3, #0
 8009306:	9309      	str	r3, [sp, #36]	; 0x24
 8009308:	2320      	movs	r3, #32
 800930a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800930e:	2330      	movs	r3, #48	; 0x30
 8009310:	f04f 0b01 	mov.w	fp, #1
 8009314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009318:	9503      	str	r5, [sp, #12]
 800931a:	4637      	mov	r7, r6
 800931c:	463d      	mov	r5, r7
 800931e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009322:	b10b      	cbz	r3, 8009328 <_svfiprintf_r+0x58>
 8009324:	2b25      	cmp	r3, #37	; 0x25
 8009326:	d13e      	bne.n	80093a6 <_svfiprintf_r+0xd6>
 8009328:	ebb7 0a06 	subs.w	sl, r7, r6
 800932c:	d00b      	beq.n	8009346 <_svfiprintf_r+0x76>
 800932e:	4653      	mov	r3, sl
 8009330:	4632      	mov	r2, r6
 8009332:	4621      	mov	r1, r4
 8009334:	4640      	mov	r0, r8
 8009336:	f7ff ff71 	bl	800921c <__ssputs_r>
 800933a:	3001      	adds	r0, #1
 800933c:	f000 80a4 	beq.w	8009488 <_svfiprintf_r+0x1b8>
 8009340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009342:	4453      	add	r3, sl
 8009344:	9309      	str	r3, [sp, #36]	; 0x24
 8009346:	783b      	ldrb	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 809d 	beq.w	8009488 <_svfiprintf_r+0x1b8>
 800934e:	2300      	movs	r3, #0
 8009350:	f04f 32ff 	mov.w	r2, #4294967295
 8009354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009358:	9304      	str	r3, [sp, #16]
 800935a:	9307      	str	r3, [sp, #28]
 800935c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009360:	931a      	str	r3, [sp, #104]	; 0x68
 8009362:	462f      	mov	r7, r5
 8009364:	2205      	movs	r2, #5
 8009366:	f817 1b01 	ldrb.w	r1, [r7], #1
 800936a:	4850      	ldr	r0, [pc, #320]	; (80094ac <_svfiprintf_r+0x1dc>)
 800936c:	f000 fa40 	bl	80097f0 <memchr>
 8009370:	9b04      	ldr	r3, [sp, #16]
 8009372:	b9d0      	cbnz	r0, 80093aa <_svfiprintf_r+0xda>
 8009374:	06d9      	lsls	r1, r3, #27
 8009376:	bf44      	itt	mi
 8009378:	2220      	movmi	r2, #32
 800937a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800937e:	071a      	lsls	r2, r3, #28
 8009380:	bf44      	itt	mi
 8009382:	222b      	movmi	r2, #43	; 0x2b
 8009384:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009388:	782a      	ldrb	r2, [r5, #0]
 800938a:	2a2a      	cmp	r2, #42	; 0x2a
 800938c:	d015      	beq.n	80093ba <_svfiprintf_r+0xea>
 800938e:	462f      	mov	r7, r5
 8009390:	2000      	movs	r0, #0
 8009392:	250a      	movs	r5, #10
 8009394:	9a07      	ldr	r2, [sp, #28]
 8009396:	4639      	mov	r1, r7
 8009398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800939c:	3b30      	subs	r3, #48	; 0x30
 800939e:	2b09      	cmp	r3, #9
 80093a0:	d94d      	bls.n	800943e <_svfiprintf_r+0x16e>
 80093a2:	b1b8      	cbz	r0, 80093d4 <_svfiprintf_r+0x104>
 80093a4:	e00f      	b.n	80093c6 <_svfiprintf_r+0xf6>
 80093a6:	462f      	mov	r7, r5
 80093a8:	e7b8      	b.n	800931c <_svfiprintf_r+0x4c>
 80093aa:	4a40      	ldr	r2, [pc, #256]	; (80094ac <_svfiprintf_r+0x1dc>)
 80093ac:	463d      	mov	r5, r7
 80093ae:	1a80      	subs	r0, r0, r2
 80093b0:	fa0b f000 	lsl.w	r0, fp, r0
 80093b4:	4318      	orrs	r0, r3
 80093b6:	9004      	str	r0, [sp, #16]
 80093b8:	e7d3      	b.n	8009362 <_svfiprintf_r+0x92>
 80093ba:	9a03      	ldr	r2, [sp, #12]
 80093bc:	1d11      	adds	r1, r2, #4
 80093be:	6812      	ldr	r2, [r2, #0]
 80093c0:	9103      	str	r1, [sp, #12]
 80093c2:	2a00      	cmp	r2, #0
 80093c4:	db01      	blt.n	80093ca <_svfiprintf_r+0xfa>
 80093c6:	9207      	str	r2, [sp, #28]
 80093c8:	e004      	b.n	80093d4 <_svfiprintf_r+0x104>
 80093ca:	4252      	negs	r2, r2
 80093cc:	f043 0302 	orr.w	r3, r3, #2
 80093d0:	9207      	str	r2, [sp, #28]
 80093d2:	9304      	str	r3, [sp, #16]
 80093d4:	783b      	ldrb	r3, [r7, #0]
 80093d6:	2b2e      	cmp	r3, #46	; 0x2e
 80093d8:	d10c      	bne.n	80093f4 <_svfiprintf_r+0x124>
 80093da:	787b      	ldrb	r3, [r7, #1]
 80093dc:	2b2a      	cmp	r3, #42	; 0x2a
 80093de:	d133      	bne.n	8009448 <_svfiprintf_r+0x178>
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	3702      	adds	r7, #2
 80093e4:	1d1a      	adds	r2, r3, #4
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	9203      	str	r2, [sp, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	bfb8      	it	lt
 80093ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80093f2:	9305      	str	r3, [sp, #20]
 80093f4:	4d2e      	ldr	r5, [pc, #184]	; (80094b0 <_svfiprintf_r+0x1e0>)
 80093f6:	2203      	movs	r2, #3
 80093f8:	7839      	ldrb	r1, [r7, #0]
 80093fa:	4628      	mov	r0, r5
 80093fc:	f000 f9f8 	bl	80097f0 <memchr>
 8009400:	b138      	cbz	r0, 8009412 <_svfiprintf_r+0x142>
 8009402:	2340      	movs	r3, #64	; 0x40
 8009404:	1b40      	subs	r0, r0, r5
 8009406:	fa03 f000 	lsl.w	r0, r3, r0
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	3701      	adds	r7, #1
 800940e:	4303      	orrs	r3, r0
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	7839      	ldrb	r1, [r7, #0]
 8009414:	2206      	movs	r2, #6
 8009416:	4827      	ldr	r0, [pc, #156]	; (80094b4 <_svfiprintf_r+0x1e4>)
 8009418:	1c7e      	adds	r6, r7, #1
 800941a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800941e:	f000 f9e7 	bl	80097f0 <memchr>
 8009422:	2800      	cmp	r0, #0
 8009424:	d038      	beq.n	8009498 <_svfiprintf_r+0x1c8>
 8009426:	4b24      	ldr	r3, [pc, #144]	; (80094b8 <_svfiprintf_r+0x1e8>)
 8009428:	bb13      	cbnz	r3, 8009470 <_svfiprintf_r+0x1a0>
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	3307      	adds	r3, #7
 800942e:	f023 0307 	bic.w	r3, r3, #7
 8009432:	3308      	adds	r3, #8
 8009434:	9303      	str	r3, [sp, #12]
 8009436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009438:	444b      	add	r3, r9
 800943a:	9309      	str	r3, [sp, #36]	; 0x24
 800943c:	e76d      	b.n	800931a <_svfiprintf_r+0x4a>
 800943e:	fb05 3202 	mla	r2, r5, r2, r3
 8009442:	2001      	movs	r0, #1
 8009444:	460f      	mov	r7, r1
 8009446:	e7a6      	b.n	8009396 <_svfiprintf_r+0xc6>
 8009448:	2300      	movs	r3, #0
 800944a:	250a      	movs	r5, #10
 800944c:	4619      	mov	r1, r3
 800944e:	3701      	adds	r7, #1
 8009450:	9305      	str	r3, [sp, #20]
 8009452:	4638      	mov	r0, r7
 8009454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009458:	3a30      	subs	r2, #48	; 0x30
 800945a:	2a09      	cmp	r2, #9
 800945c:	d903      	bls.n	8009466 <_svfiprintf_r+0x196>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0c8      	beq.n	80093f4 <_svfiprintf_r+0x124>
 8009462:	9105      	str	r1, [sp, #20]
 8009464:	e7c6      	b.n	80093f4 <_svfiprintf_r+0x124>
 8009466:	fb05 2101 	mla	r1, r5, r1, r2
 800946a:	2301      	movs	r3, #1
 800946c:	4607      	mov	r7, r0
 800946e:	e7f0      	b.n	8009452 <_svfiprintf_r+0x182>
 8009470:	ab03      	add	r3, sp, #12
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	4622      	mov	r2, r4
 8009476:	4b11      	ldr	r3, [pc, #68]	; (80094bc <_svfiprintf_r+0x1ec>)
 8009478:	a904      	add	r1, sp, #16
 800947a:	4640      	mov	r0, r8
 800947c:	f3af 8000 	nop.w
 8009480:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009484:	4681      	mov	r9, r0
 8009486:	d1d6      	bne.n	8009436 <_svfiprintf_r+0x166>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	065b      	lsls	r3, r3, #25
 800948c:	f53f af35 	bmi.w	80092fa <_svfiprintf_r+0x2a>
 8009490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009492:	b01d      	add	sp, #116	; 0x74
 8009494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009498:	ab03      	add	r3, sp, #12
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	4622      	mov	r2, r4
 800949e:	4b07      	ldr	r3, [pc, #28]	; (80094bc <_svfiprintf_r+0x1ec>)
 80094a0:	a904      	add	r1, sp, #16
 80094a2:	4640      	mov	r0, r8
 80094a4:	f000 f882 	bl	80095ac <_printf_i>
 80094a8:	e7ea      	b.n	8009480 <_svfiprintf_r+0x1b0>
 80094aa:	bf00      	nop
 80094ac:	0800b33c 	.word	0x0800b33c
 80094b0:	0800b342 	.word	0x0800b342
 80094b4:	0800b346 	.word	0x0800b346
 80094b8:	00000000 	.word	0x00000000
 80094bc:	0800921d 	.word	0x0800921d

080094c0 <_printf_common>:
 80094c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c4:	4691      	mov	r9, r2
 80094c6:	461f      	mov	r7, r3
 80094c8:	688a      	ldr	r2, [r1, #8]
 80094ca:	690b      	ldr	r3, [r1, #16]
 80094cc:	4606      	mov	r6, r0
 80094ce:	4293      	cmp	r3, r2
 80094d0:	bfb8      	it	lt
 80094d2:	4613      	movlt	r3, r2
 80094d4:	f8c9 3000 	str.w	r3, [r9]
 80094d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094dc:	460c      	mov	r4, r1
 80094de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094e2:	b112      	cbz	r2, 80094ea <_printf_common+0x2a>
 80094e4:	3301      	adds	r3, #1
 80094e6:	f8c9 3000 	str.w	r3, [r9]
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	0699      	lsls	r1, r3, #26
 80094ee:	bf42      	ittt	mi
 80094f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80094f4:	3302      	addmi	r3, #2
 80094f6:	f8c9 3000 	strmi.w	r3, [r9]
 80094fa:	6825      	ldr	r5, [r4, #0]
 80094fc:	f015 0506 	ands.w	r5, r5, #6
 8009500:	d107      	bne.n	8009512 <_printf_common+0x52>
 8009502:	f104 0a19 	add.w	sl, r4, #25
 8009506:	68e3      	ldr	r3, [r4, #12]
 8009508:	f8d9 2000 	ldr.w	r2, [r9]
 800950c:	1a9b      	subs	r3, r3, r2
 800950e:	42ab      	cmp	r3, r5
 8009510:	dc29      	bgt.n	8009566 <_printf_common+0xa6>
 8009512:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009516:	6822      	ldr	r2, [r4, #0]
 8009518:	3300      	adds	r3, #0
 800951a:	bf18      	it	ne
 800951c:	2301      	movne	r3, #1
 800951e:	0692      	lsls	r2, r2, #26
 8009520:	d42e      	bmi.n	8009580 <_printf_common+0xc0>
 8009522:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009526:	4639      	mov	r1, r7
 8009528:	4630      	mov	r0, r6
 800952a:	47c0      	blx	r8
 800952c:	3001      	adds	r0, #1
 800952e:	d021      	beq.n	8009574 <_printf_common+0xb4>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	68e5      	ldr	r5, [r4, #12]
 8009534:	f003 0306 	and.w	r3, r3, #6
 8009538:	2b04      	cmp	r3, #4
 800953a:	bf18      	it	ne
 800953c:	2500      	movne	r5, #0
 800953e:	f8d9 2000 	ldr.w	r2, [r9]
 8009542:	f04f 0900 	mov.w	r9, #0
 8009546:	bf08      	it	eq
 8009548:	1aad      	subeq	r5, r5, r2
 800954a:	68a3      	ldr	r3, [r4, #8]
 800954c:	6922      	ldr	r2, [r4, #16]
 800954e:	bf08      	it	eq
 8009550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009554:	4293      	cmp	r3, r2
 8009556:	bfc4      	itt	gt
 8009558:	1a9b      	subgt	r3, r3, r2
 800955a:	18ed      	addgt	r5, r5, r3
 800955c:	341a      	adds	r4, #26
 800955e:	454d      	cmp	r5, r9
 8009560:	d11a      	bne.n	8009598 <_printf_common+0xd8>
 8009562:	2000      	movs	r0, #0
 8009564:	e008      	b.n	8009578 <_printf_common+0xb8>
 8009566:	2301      	movs	r3, #1
 8009568:	4652      	mov	r2, sl
 800956a:	4639      	mov	r1, r7
 800956c:	4630      	mov	r0, r6
 800956e:	47c0      	blx	r8
 8009570:	3001      	adds	r0, #1
 8009572:	d103      	bne.n	800957c <_printf_common+0xbc>
 8009574:	f04f 30ff 	mov.w	r0, #4294967295
 8009578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957c:	3501      	adds	r5, #1
 800957e:	e7c2      	b.n	8009506 <_printf_common+0x46>
 8009580:	2030      	movs	r0, #48	; 0x30
 8009582:	18e1      	adds	r1, r4, r3
 8009584:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800958e:	4422      	add	r2, r4
 8009590:	3302      	adds	r3, #2
 8009592:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009596:	e7c4      	b.n	8009522 <_printf_common+0x62>
 8009598:	2301      	movs	r3, #1
 800959a:	4622      	mov	r2, r4
 800959c:	4639      	mov	r1, r7
 800959e:	4630      	mov	r0, r6
 80095a0:	47c0      	blx	r8
 80095a2:	3001      	adds	r0, #1
 80095a4:	d0e6      	beq.n	8009574 <_printf_common+0xb4>
 80095a6:	f109 0901 	add.w	r9, r9, #1
 80095aa:	e7d8      	b.n	800955e <_printf_common+0x9e>

080095ac <_printf_i>:
 80095ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80095b4:	460c      	mov	r4, r1
 80095b6:	7e09      	ldrb	r1, [r1, #24]
 80095b8:	b085      	sub	sp, #20
 80095ba:	296e      	cmp	r1, #110	; 0x6e
 80095bc:	4617      	mov	r7, r2
 80095be:	4606      	mov	r6, r0
 80095c0:	4698      	mov	r8, r3
 80095c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095c4:	f000 80b3 	beq.w	800972e <_printf_i+0x182>
 80095c8:	d822      	bhi.n	8009610 <_printf_i+0x64>
 80095ca:	2963      	cmp	r1, #99	; 0x63
 80095cc:	d036      	beq.n	800963c <_printf_i+0x90>
 80095ce:	d80a      	bhi.n	80095e6 <_printf_i+0x3a>
 80095d0:	2900      	cmp	r1, #0
 80095d2:	f000 80b9 	beq.w	8009748 <_printf_i+0x19c>
 80095d6:	2958      	cmp	r1, #88	; 0x58
 80095d8:	f000 8083 	beq.w	80096e2 <_printf_i+0x136>
 80095dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80095e4:	e032      	b.n	800964c <_printf_i+0xa0>
 80095e6:	2964      	cmp	r1, #100	; 0x64
 80095e8:	d001      	beq.n	80095ee <_printf_i+0x42>
 80095ea:	2969      	cmp	r1, #105	; 0x69
 80095ec:	d1f6      	bne.n	80095dc <_printf_i+0x30>
 80095ee:	6820      	ldr	r0, [r4, #0]
 80095f0:	6813      	ldr	r3, [r2, #0]
 80095f2:	0605      	lsls	r5, r0, #24
 80095f4:	f103 0104 	add.w	r1, r3, #4
 80095f8:	d52a      	bpl.n	8009650 <_printf_i+0xa4>
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6011      	str	r1, [r2, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	da03      	bge.n	800960a <_printf_i+0x5e>
 8009602:	222d      	movs	r2, #45	; 0x2d
 8009604:	425b      	negs	r3, r3
 8009606:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800960a:	486f      	ldr	r0, [pc, #444]	; (80097c8 <_printf_i+0x21c>)
 800960c:	220a      	movs	r2, #10
 800960e:	e039      	b.n	8009684 <_printf_i+0xd8>
 8009610:	2973      	cmp	r1, #115	; 0x73
 8009612:	f000 809d 	beq.w	8009750 <_printf_i+0x1a4>
 8009616:	d808      	bhi.n	800962a <_printf_i+0x7e>
 8009618:	296f      	cmp	r1, #111	; 0x6f
 800961a:	d020      	beq.n	800965e <_printf_i+0xb2>
 800961c:	2970      	cmp	r1, #112	; 0x70
 800961e:	d1dd      	bne.n	80095dc <_printf_i+0x30>
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	f043 0320 	orr.w	r3, r3, #32
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	e003      	b.n	8009632 <_printf_i+0x86>
 800962a:	2975      	cmp	r1, #117	; 0x75
 800962c:	d017      	beq.n	800965e <_printf_i+0xb2>
 800962e:	2978      	cmp	r1, #120	; 0x78
 8009630:	d1d4      	bne.n	80095dc <_printf_i+0x30>
 8009632:	2378      	movs	r3, #120	; 0x78
 8009634:	4865      	ldr	r0, [pc, #404]	; (80097cc <_printf_i+0x220>)
 8009636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800963a:	e055      	b.n	80096e8 <_printf_i+0x13c>
 800963c:	6813      	ldr	r3, [r2, #0]
 800963e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009642:	1d19      	adds	r1, r3, #4
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6011      	str	r1, [r2, #0]
 8009648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800964c:	2301      	movs	r3, #1
 800964e:	e08c      	b.n	800976a <_printf_i+0x1be>
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009656:	6011      	str	r1, [r2, #0]
 8009658:	bf18      	it	ne
 800965a:	b21b      	sxthne	r3, r3
 800965c:	e7cf      	b.n	80095fe <_printf_i+0x52>
 800965e:	6813      	ldr	r3, [r2, #0]
 8009660:	6825      	ldr	r5, [r4, #0]
 8009662:	1d18      	adds	r0, r3, #4
 8009664:	6010      	str	r0, [r2, #0]
 8009666:	0628      	lsls	r0, r5, #24
 8009668:	d501      	bpl.n	800966e <_printf_i+0xc2>
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	e002      	b.n	8009674 <_printf_i+0xc8>
 800966e:	0668      	lsls	r0, r5, #25
 8009670:	d5fb      	bpl.n	800966a <_printf_i+0xbe>
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	296f      	cmp	r1, #111	; 0x6f
 8009676:	bf14      	ite	ne
 8009678:	220a      	movne	r2, #10
 800967a:	2208      	moveq	r2, #8
 800967c:	4852      	ldr	r0, [pc, #328]	; (80097c8 <_printf_i+0x21c>)
 800967e:	2100      	movs	r1, #0
 8009680:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009684:	6865      	ldr	r5, [r4, #4]
 8009686:	2d00      	cmp	r5, #0
 8009688:	60a5      	str	r5, [r4, #8]
 800968a:	f2c0 8095 	blt.w	80097b8 <_printf_i+0x20c>
 800968e:	6821      	ldr	r1, [r4, #0]
 8009690:	f021 0104 	bic.w	r1, r1, #4
 8009694:	6021      	str	r1, [r4, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d13d      	bne.n	8009716 <_printf_i+0x16a>
 800969a:	2d00      	cmp	r5, #0
 800969c:	f040 808e 	bne.w	80097bc <_printf_i+0x210>
 80096a0:	4665      	mov	r5, ip
 80096a2:	2a08      	cmp	r2, #8
 80096a4:	d10b      	bne.n	80096be <_printf_i+0x112>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	07db      	lsls	r3, r3, #31
 80096aa:	d508      	bpl.n	80096be <_printf_i+0x112>
 80096ac:	6923      	ldr	r3, [r4, #16]
 80096ae:	6862      	ldr	r2, [r4, #4]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	bfde      	ittt	le
 80096b4:	2330      	movle	r3, #48	; 0x30
 80096b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096be:	ebac 0305 	sub.w	r3, ip, r5
 80096c2:	6123      	str	r3, [r4, #16]
 80096c4:	f8cd 8000 	str.w	r8, [sp]
 80096c8:	463b      	mov	r3, r7
 80096ca:	aa03      	add	r2, sp, #12
 80096cc:	4621      	mov	r1, r4
 80096ce:	4630      	mov	r0, r6
 80096d0:	f7ff fef6 	bl	80094c0 <_printf_common>
 80096d4:	3001      	adds	r0, #1
 80096d6:	d14d      	bne.n	8009774 <_printf_i+0x1c8>
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	b005      	add	sp, #20
 80096de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096e2:	4839      	ldr	r0, [pc, #228]	; (80097c8 <_printf_i+0x21c>)
 80096e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80096e8:	6813      	ldr	r3, [r2, #0]
 80096ea:	6821      	ldr	r1, [r4, #0]
 80096ec:	1d1d      	adds	r5, r3, #4
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6015      	str	r5, [r2, #0]
 80096f2:	060a      	lsls	r2, r1, #24
 80096f4:	d50b      	bpl.n	800970e <_printf_i+0x162>
 80096f6:	07ca      	lsls	r2, r1, #31
 80096f8:	bf44      	itt	mi
 80096fa:	f041 0120 	orrmi.w	r1, r1, #32
 80096fe:	6021      	strmi	r1, [r4, #0]
 8009700:	b91b      	cbnz	r3, 800970a <_printf_i+0x15e>
 8009702:	6822      	ldr	r2, [r4, #0]
 8009704:	f022 0220 	bic.w	r2, r2, #32
 8009708:	6022      	str	r2, [r4, #0]
 800970a:	2210      	movs	r2, #16
 800970c:	e7b7      	b.n	800967e <_printf_i+0xd2>
 800970e:	064d      	lsls	r5, r1, #25
 8009710:	bf48      	it	mi
 8009712:	b29b      	uxthmi	r3, r3
 8009714:	e7ef      	b.n	80096f6 <_printf_i+0x14a>
 8009716:	4665      	mov	r5, ip
 8009718:	fbb3 f1f2 	udiv	r1, r3, r2
 800971c:	fb02 3311 	mls	r3, r2, r1, r3
 8009720:	5cc3      	ldrb	r3, [r0, r3]
 8009722:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009726:	460b      	mov	r3, r1
 8009728:	2900      	cmp	r1, #0
 800972a:	d1f5      	bne.n	8009718 <_printf_i+0x16c>
 800972c:	e7b9      	b.n	80096a2 <_printf_i+0xf6>
 800972e:	6813      	ldr	r3, [r2, #0]
 8009730:	6825      	ldr	r5, [r4, #0]
 8009732:	1d18      	adds	r0, r3, #4
 8009734:	6961      	ldr	r1, [r4, #20]
 8009736:	6010      	str	r0, [r2, #0]
 8009738:	0628      	lsls	r0, r5, #24
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	d501      	bpl.n	8009742 <_printf_i+0x196>
 800973e:	6019      	str	r1, [r3, #0]
 8009740:	e002      	b.n	8009748 <_printf_i+0x19c>
 8009742:	066a      	lsls	r2, r5, #25
 8009744:	d5fb      	bpl.n	800973e <_printf_i+0x192>
 8009746:	8019      	strh	r1, [r3, #0]
 8009748:	2300      	movs	r3, #0
 800974a:	4665      	mov	r5, ip
 800974c:	6123      	str	r3, [r4, #16]
 800974e:	e7b9      	b.n	80096c4 <_printf_i+0x118>
 8009750:	6813      	ldr	r3, [r2, #0]
 8009752:	1d19      	adds	r1, r3, #4
 8009754:	6011      	str	r1, [r2, #0]
 8009756:	681d      	ldr	r5, [r3, #0]
 8009758:	6862      	ldr	r2, [r4, #4]
 800975a:	2100      	movs	r1, #0
 800975c:	4628      	mov	r0, r5
 800975e:	f000 f847 	bl	80097f0 <memchr>
 8009762:	b108      	cbz	r0, 8009768 <_printf_i+0x1bc>
 8009764:	1b40      	subs	r0, r0, r5
 8009766:	6060      	str	r0, [r4, #4]
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	2300      	movs	r3, #0
 800976e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009772:	e7a7      	b.n	80096c4 <_printf_i+0x118>
 8009774:	6923      	ldr	r3, [r4, #16]
 8009776:	462a      	mov	r2, r5
 8009778:	4639      	mov	r1, r7
 800977a:	4630      	mov	r0, r6
 800977c:	47c0      	blx	r8
 800977e:	3001      	adds	r0, #1
 8009780:	d0aa      	beq.n	80096d8 <_printf_i+0x12c>
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	079b      	lsls	r3, r3, #30
 8009786:	d413      	bmi.n	80097b0 <_printf_i+0x204>
 8009788:	68e0      	ldr	r0, [r4, #12]
 800978a:	9b03      	ldr	r3, [sp, #12]
 800978c:	4298      	cmp	r0, r3
 800978e:	bfb8      	it	lt
 8009790:	4618      	movlt	r0, r3
 8009792:	e7a3      	b.n	80096dc <_printf_i+0x130>
 8009794:	2301      	movs	r3, #1
 8009796:	464a      	mov	r2, r9
 8009798:	4639      	mov	r1, r7
 800979a:	4630      	mov	r0, r6
 800979c:	47c0      	blx	r8
 800979e:	3001      	adds	r0, #1
 80097a0:	d09a      	beq.n	80096d8 <_printf_i+0x12c>
 80097a2:	3501      	adds	r5, #1
 80097a4:	68e3      	ldr	r3, [r4, #12]
 80097a6:	9a03      	ldr	r2, [sp, #12]
 80097a8:	1a9b      	subs	r3, r3, r2
 80097aa:	42ab      	cmp	r3, r5
 80097ac:	dcf2      	bgt.n	8009794 <_printf_i+0x1e8>
 80097ae:	e7eb      	b.n	8009788 <_printf_i+0x1dc>
 80097b0:	2500      	movs	r5, #0
 80097b2:	f104 0919 	add.w	r9, r4, #25
 80097b6:	e7f5      	b.n	80097a4 <_printf_i+0x1f8>
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1ac      	bne.n	8009716 <_printf_i+0x16a>
 80097bc:	7803      	ldrb	r3, [r0, #0]
 80097be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097c6:	e76c      	b.n	80096a2 <_printf_i+0xf6>
 80097c8:	0800b21a 	.word	0x0800b21a
 80097cc:	0800b34d 	.word	0x0800b34d

080097d0 <_sbrk_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	2300      	movs	r3, #0
 80097d4:	4c05      	ldr	r4, [pc, #20]	; (80097ec <_sbrk_r+0x1c>)
 80097d6:	4605      	mov	r5, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	6023      	str	r3, [r4, #0]
 80097dc:	f7f8 f912 	bl	8001a04 <_sbrk>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_sbrk_r+0x1a>
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_sbrk_r+0x1a>
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	200041f0 	.word	0x200041f0

080097f0 <memchr>:
 80097f0:	b510      	push	{r4, lr}
 80097f2:	b2c9      	uxtb	r1, r1
 80097f4:	4402      	add	r2, r0
 80097f6:	4290      	cmp	r0, r2
 80097f8:	4603      	mov	r3, r0
 80097fa:	d101      	bne.n	8009800 <memchr+0x10>
 80097fc:	2300      	movs	r3, #0
 80097fe:	e003      	b.n	8009808 <memchr+0x18>
 8009800:	781c      	ldrb	r4, [r3, #0]
 8009802:	3001      	adds	r0, #1
 8009804:	428c      	cmp	r4, r1
 8009806:	d1f6      	bne.n	80097f6 <memchr+0x6>
 8009808:	4618      	mov	r0, r3
 800980a:	bd10      	pop	{r4, pc}

0800980c <__malloc_lock>:
 800980c:	4770      	bx	lr

0800980e <__malloc_unlock>:
 800980e:	4770      	bx	lr

08009810 <_free_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4605      	mov	r5, r0
 8009814:	2900      	cmp	r1, #0
 8009816:	d043      	beq.n	80098a0 <_free_r+0x90>
 8009818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800981c:	1f0c      	subs	r4, r1, #4
 800981e:	2b00      	cmp	r3, #0
 8009820:	bfb8      	it	lt
 8009822:	18e4      	addlt	r4, r4, r3
 8009824:	f7ff fff2 	bl	800980c <__malloc_lock>
 8009828:	4a1e      	ldr	r2, [pc, #120]	; (80098a4 <_free_r+0x94>)
 800982a:	6813      	ldr	r3, [r2, #0]
 800982c:	4610      	mov	r0, r2
 800982e:	b933      	cbnz	r3, 800983e <_free_r+0x2e>
 8009830:	6063      	str	r3, [r4, #4]
 8009832:	6014      	str	r4, [r2, #0]
 8009834:	4628      	mov	r0, r5
 8009836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800983a:	f7ff bfe8 	b.w	800980e <__malloc_unlock>
 800983e:	42a3      	cmp	r3, r4
 8009840:	d90b      	bls.n	800985a <_free_r+0x4a>
 8009842:	6821      	ldr	r1, [r4, #0]
 8009844:	1862      	adds	r2, r4, r1
 8009846:	4293      	cmp	r3, r2
 8009848:	bf01      	itttt	eq
 800984a:	681a      	ldreq	r2, [r3, #0]
 800984c:	685b      	ldreq	r3, [r3, #4]
 800984e:	1852      	addeq	r2, r2, r1
 8009850:	6022      	streq	r2, [r4, #0]
 8009852:	6063      	str	r3, [r4, #4]
 8009854:	6004      	str	r4, [r0, #0]
 8009856:	e7ed      	b.n	8009834 <_free_r+0x24>
 8009858:	4613      	mov	r3, r2
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	b10a      	cbz	r2, 8009862 <_free_r+0x52>
 800985e:	42a2      	cmp	r2, r4
 8009860:	d9fa      	bls.n	8009858 <_free_r+0x48>
 8009862:	6819      	ldr	r1, [r3, #0]
 8009864:	1858      	adds	r0, r3, r1
 8009866:	42a0      	cmp	r0, r4
 8009868:	d10b      	bne.n	8009882 <_free_r+0x72>
 800986a:	6820      	ldr	r0, [r4, #0]
 800986c:	4401      	add	r1, r0
 800986e:	1858      	adds	r0, r3, r1
 8009870:	4282      	cmp	r2, r0
 8009872:	6019      	str	r1, [r3, #0]
 8009874:	d1de      	bne.n	8009834 <_free_r+0x24>
 8009876:	6810      	ldr	r0, [r2, #0]
 8009878:	6852      	ldr	r2, [r2, #4]
 800987a:	4401      	add	r1, r0
 800987c:	6019      	str	r1, [r3, #0]
 800987e:	605a      	str	r2, [r3, #4]
 8009880:	e7d8      	b.n	8009834 <_free_r+0x24>
 8009882:	d902      	bls.n	800988a <_free_r+0x7a>
 8009884:	230c      	movs	r3, #12
 8009886:	602b      	str	r3, [r5, #0]
 8009888:	e7d4      	b.n	8009834 <_free_r+0x24>
 800988a:	6820      	ldr	r0, [r4, #0]
 800988c:	1821      	adds	r1, r4, r0
 800988e:	428a      	cmp	r2, r1
 8009890:	bf01      	itttt	eq
 8009892:	6811      	ldreq	r1, [r2, #0]
 8009894:	6852      	ldreq	r2, [r2, #4]
 8009896:	1809      	addeq	r1, r1, r0
 8009898:	6021      	streq	r1, [r4, #0]
 800989a:	6062      	str	r2, [r4, #4]
 800989c:	605c      	str	r4, [r3, #4]
 800989e:	e7c9      	b.n	8009834 <_free_r+0x24>
 80098a0:	bd38      	pop	{r3, r4, r5, pc}
 80098a2:	bf00      	nop
 80098a4:	200005a8 	.word	0x200005a8

080098a8 <_realloc_r>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	4607      	mov	r7, r0
 80098ac:	4614      	mov	r4, r2
 80098ae:	460e      	mov	r6, r1
 80098b0:	b921      	cbnz	r1, 80098bc <_realloc_r+0x14>
 80098b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80098b6:	4611      	mov	r1, r2
 80098b8:	f7ff bc56 	b.w	8009168 <_malloc_r>
 80098bc:	b922      	cbnz	r2, 80098c8 <_realloc_r+0x20>
 80098be:	f7ff ffa7 	bl	8009810 <_free_r>
 80098c2:	4625      	mov	r5, r4
 80098c4:	4628      	mov	r0, r5
 80098c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c8:	f000 f814 	bl	80098f4 <_malloc_usable_size_r>
 80098cc:	42a0      	cmp	r0, r4
 80098ce:	d20f      	bcs.n	80098f0 <_realloc_r+0x48>
 80098d0:	4621      	mov	r1, r4
 80098d2:	4638      	mov	r0, r7
 80098d4:	f7ff fc48 	bl	8009168 <_malloc_r>
 80098d8:	4605      	mov	r5, r0
 80098da:	2800      	cmp	r0, #0
 80098dc:	d0f2      	beq.n	80098c4 <_realloc_r+0x1c>
 80098de:	4631      	mov	r1, r6
 80098e0:	4622      	mov	r2, r4
 80098e2:	f7ff fa95 	bl	8008e10 <memcpy>
 80098e6:	4631      	mov	r1, r6
 80098e8:	4638      	mov	r0, r7
 80098ea:	f7ff ff91 	bl	8009810 <_free_r>
 80098ee:	e7e9      	b.n	80098c4 <_realloc_r+0x1c>
 80098f0:	4635      	mov	r5, r6
 80098f2:	e7e7      	b.n	80098c4 <_realloc_r+0x1c>

080098f4 <_malloc_usable_size_r>:
 80098f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098f8:	1f18      	subs	r0, r3, #4
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	bfbc      	itt	lt
 80098fe:	580b      	ldrlt	r3, [r1, r0]
 8009900:	18c0      	addlt	r0, r0, r3
 8009902:	4770      	bx	lr

08009904 <pow>:
 8009904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	b08f      	sub	sp, #60	; 0x3c
 800990a:	461d      	mov	r5, r3
 800990c:	4680      	mov	r8, r0
 800990e:	4689      	mov	r9, r1
 8009910:	4614      	mov	r4, r2
 8009912:	f000 f955 	bl	8009bc0 <__ieee754_pow>
 8009916:	4fa1      	ldr	r7, [pc, #644]	; (8009b9c <pow+0x298>)
 8009918:	e9cd 0100 	strd	r0, r1, [sp]
 800991c:	f997 3000 	ldrsb.w	r3, [r7]
 8009920:	463e      	mov	r6, r7
 8009922:	9302      	str	r3, [sp, #8]
 8009924:	3301      	adds	r3, #1
 8009926:	d05f      	beq.n	80099e8 <pow+0xe4>
 8009928:	4622      	mov	r2, r4
 800992a:	462b      	mov	r3, r5
 800992c:	4620      	mov	r0, r4
 800992e:	4629      	mov	r1, r5
 8009930:	f7f7 f876 	bl	8000a20 <__aeabi_dcmpun>
 8009934:	4682      	mov	sl, r0
 8009936:	2800      	cmp	r0, #0
 8009938:	d156      	bne.n	80099e8 <pow+0xe4>
 800993a:	4642      	mov	r2, r8
 800993c:	464b      	mov	r3, r9
 800993e:	4640      	mov	r0, r8
 8009940:	4649      	mov	r1, r9
 8009942:	f7f7 f86d 	bl	8000a20 <__aeabi_dcmpun>
 8009946:	9003      	str	r0, [sp, #12]
 8009948:	b1e8      	cbz	r0, 8009986 <pow+0x82>
 800994a:	2200      	movs	r2, #0
 800994c:	2300      	movs	r3, #0
 800994e:	4620      	mov	r0, r4
 8009950:	4629      	mov	r1, r5
 8009952:	f7f7 f833 	bl	80009bc <__aeabi_dcmpeq>
 8009956:	2800      	cmp	r0, #0
 8009958:	d046      	beq.n	80099e8 <pow+0xe4>
 800995a:	2301      	movs	r3, #1
 800995c:	2200      	movs	r2, #0
 800995e:	9304      	str	r3, [sp, #16]
 8009960:	4b8f      	ldr	r3, [pc, #572]	; (8009ba0 <pow+0x29c>)
 8009962:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009966:	9305      	str	r3, [sp, #20]
 8009968:	4b8e      	ldr	r3, [pc, #568]	; (8009ba4 <pow+0x2a0>)
 800996a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800996e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009972:	9b02      	ldr	r3, [sp, #8]
 8009974:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009978:	2b02      	cmp	r3, #2
 800997a:	d031      	beq.n	80099e0 <pow+0xdc>
 800997c:	a804      	add	r0, sp, #16
 800997e:	f000 fedf 	bl	800a740 <matherr>
 8009982:	bb38      	cbnz	r0, 80099d4 <pow+0xd0>
 8009984:	e058      	b.n	8009a38 <pow+0x134>
 8009986:	f04f 0a00 	mov.w	sl, #0
 800998a:	f04f 0b00 	mov.w	fp, #0
 800998e:	4652      	mov	r2, sl
 8009990:	465b      	mov	r3, fp
 8009992:	4640      	mov	r0, r8
 8009994:	4649      	mov	r1, r9
 8009996:	f7f7 f811 	bl	80009bc <__aeabi_dcmpeq>
 800999a:	2800      	cmp	r0, #0
 800999c:	d051      	beq.n	8009a42 <pow+0x13e>
 800999e:	4652      	mov	r2, sl
 80099a0:	465b      	mov	r3, fp
 80099a2:	4620      	mov	r0, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7f7 f809 	bl	80009bc <__aeabi_dcmpeq>
 80099aa:	4606      	mov	r6, r0
 80099ac:	b308      	cbz	r0, 80099f2 <pow+0xee>
 80099ae:	2301      	movs	r3, #1
 80099b0:	9304      	str	r3, [sp, #16]
 80099b2:	4b7b      	ldr	r3, [pc, #492]	; (8009ba0 <pow+0x29c>)
 80099b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80099b8:	9305      	str	r3, [sp, #20]
 80099ba:	9b03      	ldr	r3, [sp, #12]
 80099bc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80099c0:	930c      	str	r3, [sp, #48]	; 0x30
 80099c2:	9b02      	ldr	r3, [sp, #8]
 80099c4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0d7      	beq.n	800997c <pow+0x78>
 80099cc:	2200      	movs	r2, #0
 80099ce:	4b75      	ldr	r3, [pc, #468]	; (8009ba4 <pow+0x2a0>)
 80099d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80099d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099d6:	b11b      	cbz	r3, 80099e0 <pow+0xdc>
 80099d8:	f7ff f9cc 	bl	8008d74 <__errno>
 80099dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099de:	6003      	str	r3, [r0, #0]
 80099e0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80099e4:	e9cd 3400 	strd	r3, r4, [sp]
 80099e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099ec:	b00f      	add	sp, #60	; 0x3c
 80099ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f2:	4620      	mov	r0, r4
 80099f4:	4629      	mov	r1, r5
 80099f6:	f000 fe9d 	bl	800a734 <finite>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d0f4      	beq.n	80099e8 <pow+0xe4>
 80099fe:	4652      	mov	r2, sl
 8009a00:	465b      	mov	r3, fp
 8009a02:	4620      	mov	r0, r4
 8009a04:	4629      	mov	r1, r5
 8009a06:	f7f6 ffe3 	bl	80009d0 <__aeabi_dcmplt>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d0ec      	beq.n	80099e8 <pow+0xe4>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	9304      	str	r3, [sp, #16]
 8009a12:	4b63      	ldr	r3, [pc, #396]	; (8009ba0 <pow+0x29c>)
 8009a14:	960c      	str	r6, [sp, #48]	; 0x30
 8009a16:	9305      	str	r3, [sp, #20]
 8009a18:	f997 3000 	ldrsb.w	r3, [r7]
 8009a1c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009a20:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009a24:	b913      	cbnz	r3, 8009a2c <pow+0x128>
 8009a26:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009a2a:	e7a7      	b.n	800997c <pow+0x78>
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	495e      	ldr	r1, [pc, #376]	; (8009ba8 <pow+0x2a4>)
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009a36:	d1a1      	bne.n	800997c <pow+0x78>
 8009a38:	f7ff f99c 	bl	8008d74 <__errno>
 8009a3c:	2321      	movs	r3, #33	; 0x21
 8009a3e:	6003      	str	r3, [r0, #0]
 8009a40:	e7c8      	b.n	80099d4 <pow+0xd0>
 8009a42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a46:	f000 fe75 	bl	800a734 <finite>
 8009a4a:	9002      	str	r0, [sp, #8]
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d177      	bne.n	8009b40 <pow+0x23c>
 8009a50:	4640      	mov	r0, r8
 8009a52:	4649      	mov	r1, r9
 8009a54:	f000 fe6e 	bl	800a734 <finite>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d071      	beq.n	8009b40 <pow+0x23c>
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f000 fe68 	bl	800a734 <finite>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d06b      	beq.n	8009b40 <pow+0x23c>
 8009a68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4610      	mov	r0, r2
 8009a70:	f7f6 ffd6 	bl	8000a20 <__aeabi_dcmpun>
 8009a74:	f997 7000 	ldrsb.w	r7, [r7]
 8009a78:	4b49      	ldr	r3, [pc, #292]	; (8009ba0 <pow+0x29c>)
 8009a7a:	b1a0      	cbz	r0, 8009aa6 <pow+0x1a2>
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a82:	9b02      	ldr	r3, [sp, #8]
 8009a84:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009a88:	930c      	str	r3, [sp, #48]	; 0x30
 8009a8a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009a8e:	2f00      	cmp	r7, #0
 8009a90:	d0c9      	beq.n	8009a26 <pow+0x122>
 8009a92:	4652      	mov	r2, sl
 8009a94:	465b      	mov	r3, fp
 8009a96:	4650      	mov	r0, sl
 8009a98:	4659      	mov	r1, fp
 8009a9a:	f7f6 fe51 	bl	8000740 <__aeabi_ddiv>
 8009a9e:	2f02      	cmp	r7, #2
 8009aa0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009aa4:	e7c7      	b.n	8009a36 <pow+0x132>
 8009aa6:	2203      	movs	r2, #3
 8009aa8:	900c      	str	r0, [sp, #48]	; 0x30
 8009aaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009aae:	4620      	mov	r0, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4b3d      	ldr	r3, [pc, #244]	; (8009bac <pow+0x2a8>)
 8009ab6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009aba:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009abe:	f7f6 fd15 	bl	80004ec <__aeabi_dmul>
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	460d      	mov	r5, r1
 8009ac6:	bb17      	cbnz	r7, 8009b0e <pow+0x20a>
 8009ac8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009acc:	4b38      	ldr	r3, [pc, #224]	; (8009bb0 <pow+0x2ac>)
 8009ace:	4640      	mov	r0, r8
 8009ad0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009ad4:	4649      	mov	r1, r9
 8009ad6:	4652      	mov	r2, sl
 8009ad8:	465b      	mov	r3, fp
 8009ada:	f7f6 ff79 	bl	80009d0 <__aeabi_dcmplt>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d054      	beq.n	8009b8c <pow+0x288>
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	f000 fe33 	bl	800a750 <rint>
 8009aea:	4622      	mov	r2, r4
 8009aec:	462b      	mov	r3, r5
 8009aee:	f7f6 ff65 	bl	80009bc <__aeabi_dcmpeq>
 8009af2:	b920      	cbnz	r0, 8009afe <pow+0x1fa>
 8009af4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009af8:	4b2e      	ldr	r3, [pc, #184]	; (8009bb4 <pow+0x2b0>)
 8009afa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009afe:	f996 3000 	ldrsb.w	r3, [r6]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d142      	bne.n	8009b8c <pow+0x288>
 8009b06:	f7ff f935 	bl	8008d74 <__errno>
 8009b0a:	2322      	movs	r3, #34	; 0x22
 8009b0c:	e797      	b.n	8009a3e <pow+0x13a>
 8009b0e:	2200      	movs	r2, #0
 8009b10:	4b29      	ldr	r3, [pc, #164]	; (8009bb8 <pow+0x2b4>)
 8009b12:	4640      	mov	r0, r8
 8009b14:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009b18:	4649      	mov	r1, r9
 8009b1a:	4652      	mov	r2, sl
 8009b1c:	465b      	mov	r3, fp
 8009b1e:	f7f6 ff57 	bl	80009d0 <__aeabi_dcmplt>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d0eb      	beq.n	8009afe <pow+0x1fa>
 8009b26:	4620      	mov	r0, r4
 8009b28:	4629      	mov	r1, r5
 8009b2a:	f000 fe11 	bl	800a750 <rint>
 8009b2e:	4622      	mov	r2, r4
 8009b30:	462b      	mov	r3, r5
 8009b32:	f7f6 ff43 	bl	80009bc <__aeabi_dcmpeq>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d1e1      	bne.n	8009afe <pow+0x1fa>
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	4b1a      	ldr	r3, [pc, #104]	; (8009ba8 <pow+0x2a4>)
 8009b3e:	e7dc      	b.n	8009afa <pow+0x1f6>
 8009b40:	2200      	movs	r2, #0
 8009b42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b46:	2300      	movs	r3, #0
 8009b48:	f7f6 ff38 	bl	80009bc <__aeabi_dcmpeq>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	f43f af4b 	beq.w	80099e8 <pow+0xe4>
 8009b52:	4640      	mov	r0, r8
 8009b54:	4649      	mov	r1, r9
 8009b56:	f000 fded 	bl	800a734 <finite>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	f43f af44 	beq.w	80099e8 <pow+0xe4>
 8009b60:	4620      	mov	r0, r4
 8009b62:	4629      	mov	r1, r5
 8009b64:	f000 fde6 	bl	800a734 <finite>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	f43f af3d 	beq.w	80099e8 <pow+0xe4>
 8009b6e:	2304      	movs	r3, #4
 8009b70:	9304      	str	r3, [sp, #16]
 8009b72:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <pow+0x29c>)
 8009b74:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009b78:	9305      	str	r3, [sp, #20]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	2400      	movs	r4, #0
 8009b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b80:	2300      	movs	r3, #0
 8009b82:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009b86:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8009b8a:	e7b8      	b.n	8009afe <pow+0x1fa>
 8009b8c:	a804      	add	r0, sp, #16
 8009b8e:	f000 fdd7 	bl	800a740 <matherr>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	f47f af1e 	bne.w	80099d4 <pow+0xd0>
 8009b98:	e7b5      	b.n	8009b06 <pow+0x202>
 8009b9a:	bf00      	nop
 8009b9c:	20000360 	.word	0x20000360
 8009ba0:	0800b35e 	.word	0x0800b35e
 8009ba4:	3ff00000 	.word	0x3ff00000
 8009ba8:	fff00000 	.word	0xfff00000
 8009bac:	3fe00000 	.word	0x3fe00000
 8009bb0:	47efffff 	.word	0x47efffff
 8009bb4:	c7efffff 	.word	0xc7efffff
 8009bb8:	7ff00000 	.word	0x7ff00000
 8009bbc:	00000000 	.word	0x00000000

08009bc0 <__ieee754_pow>:
 8009bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	b091      	sub	sp, #68	; 0x44
 8009bc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bca:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8009bce:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009bd2:	ea55 0302 	orrs.w	r3, r5, r2
 8009bd6:	4607      	mov	r7, r0
 8009bd8:	4688      	mov	r8, r1
 8009bda:	f000 84b7 	beq.w	800a54c <__ieee754_pow+0x98c>
 8009bde:	4b80      	ldr	r3, [pc, #512]	; (8009de0 <__ieee754_pow+0x220>)
 8009be0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009be4:	429c      	cmp	r4, r3
 8009be6:	4689      	mov	r9, r1
 8009be8:	4682      	mov	sl, r0
 8009bea:	dc09      	bgt.n	8009c00 <__ieee754_pow+0x40>
 8009bec:	d103      	bne.n	8009bf6 <__ieee754_pow+0x36>
 8009bee:	b938      	cbnz	r0, 8009c00 <__ieee754_pow+0x40>
 8009bf0:	42a5      	cmp	r5, r4
 8009bf2:	dc0d      	bgt.n	8009c10 <__ieee754_pow+0x50>
 8009bf4:	e001      	b.n	8009bfa <__ieee754_pow+0x3a>
 8009bf6:	429d      	cmp	r5, r3
 8009bf8:	dc02      	bgt.n	8009c00 <__ieee754_pow+0x40>
 8009bfa:	429d      	cmp	r5, r3
 8009bfc:	d10e      	bne.n	8009c1c <__ieee754_pow+0x5c>
 8009bfe:	b16a      	cbz	r2, 8009c1c <__ieee754_pow+0x5c>
 8009c00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009c04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009c08:	ea54 030a 	orrs.w	r3, r4, sl
 8009c0c:	f000 849e 	beq.w	800a54c <__ieee754_pow+0x98c>
 8009c10:	4874      	ldr	r0, [pc, #464]	; (8009de4 <__ieee754_pow+0x224>)
 8009c12:	b011      	add	sp, #68	; 0x44
 8009c14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c18:	f000 bd94 	b.w	800a744 <nan>
 8009c1c:	f1b9 0f00 	cmp.w	r9, #0
 8009c20:	da53      	bge.n	8009cca <__ieee754_pow+0x10a>
 8009c22:	4b71      	ldr	r3, [pc, #452]	; (8009de8 <__ieee754_pow+0x228>)
 8009c24:	429d      	cmp	r5, r3
 8009c26:	dc4e      	bgt.n	8009cc6 <__ieee754_pow+0x106>
 8009c28:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009c2c:	429d      	cmp	r5, r3
 8009c2e:	dd4c      	ble.n	8009cca <__ieee754_pow+0x10a>
 8009c30:	152b      	asrs	r3, r5, #20
 8009c32:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c36:	2b14      	cmp	r3, #20
 8009c38:	dd28      	ble.n	8009c8c <__ieee754_pow+0xcc>
 8009c3a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009c3e:	fa22 f103 	lsr.w	r1, r2, r3
 8009c42:	fa01 f303 	lsl.w	r3, r1, r3
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d13f      	bne.n	8009cca <__ieee754_pow+0x10a>
 8009c4a:	f001 0101 	and.w	r1, r1, #1
 8009c4e:	f1c1 0302 	rsb	r3, r1, #2
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	2a00      	cmp	r2, #0
 8009c56:	d15c      	bne.n	8009d12 <__ieee754_pow+0x152>
 8009c58:	4b61      	ldr	r3, [pc, #388]	; (8009de0 <__ieee754_pow+0x220>)
 8009c5a:	429d      	cmp	r5, r3
 8009c5c:	d126      	bne.n	8009cac <__ieee754_pow+0xec>
 8009c5e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009c62:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009c66:	ea53 030a 	orrs.w	r3, r3, sl
 8009c6a:	f000 846f 	beq.w	800a54c <__ieee754_pow+0x98c>
 8009c6e:	4b5f      	ldr	r3, [pc, #380]	; (8009dec <__ieee754_pow+0x22c>)
 8009c70:	429c      	cmp	r4, r3
 8009c72:	dd2c      	ble.n	8009cce <__ieee754_pow+0x10e>
 8009c74:	2e00      	cmp	r6, #0
 8009c76:	f280 846f 	bge.w	800a558 <__ieee754_pow+0x998>
 8009c7a:	f04f 0b00 	mov.w	fp, #0
 8009c7e:	f04f 0c00 	mov.w	ip, #0
 8009c82:	4658      	mov	r0, fp
 8009c84:	4661      	mov	r1, ip
 8009c86:	b011      	add	sp, #68	; 0x44
 8009c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	d13e      	bne.n	8009d0e <__ieee754_pow+0x14e>
 8009c90:	f1c3 0314 	rsb	r3, r3, #20
 8009c94:	fa45 f103 	asr.w	r1, r5, r3
 8009c98:	fa01 f303 	lsl.w	r3, r1, r3
 8009c9c:	42ab      	cmp	r3, r5
 8009c9e:	f040 8463 	bne.w	800a568 <__ieee754_pow+0x9a8>
 8009ca2:	f001 0101 	and.w	r1, r1, #1
 8009ca6:	f1c1 0302 	rsb	r3, r1, #2
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	4b50      	ldr	r3, [pc, #320]	; (8009df0 <__ieee754_pow+0x230>)
 8009cae:	429d      	cmp	r5, r3
 8009cb0:	d114      	bne.n	8009cdc <__ieee754_pow+0x11c>
 8009cb2:	2e00      	cmp	r6, #0
 8009cb4:	f280 8454 	bge.w	800a560 <__ieee754_pow+0x9a0>
 8009cb8:	463a      	mov	r2, r7
 8009cba:	4643      	mov	r3, r8
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	494c      	ldr	r1, [pc, #304]	; (8009df0 <__ieee754_pow+0x230>)
 8009cc0:	f7f6 fd3e 	bl	8000740 <__aeabi_ddiv>
 8009cc4:	e013      	b.n	8009cee <__ieee754_pow+0x12e>
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	e7c3      	b.n	8009c52 <__ieee754_pow+0x92>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e7c1      	b.n	8009c52 <__ieee754_pow+0x92>
 8009cce:	2e00      	cmp	r6, #0
 8009cd0:	dad3      	bge.n	8009c7a <__ieee754_pow+0xba>
 8009cd2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009cd6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009cda:	e7d2      	b.n	8009c82 <__ieee754_pow+0xc2>
 8009cdc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8009ce0:	d108      	bne.n	8009cf4 <__ieee754_pow+0x134>
 8009ce2:	463a      	mov	r2, r7
 8009ce4:	4643      	mov	r3, r8
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	4641      	mov	r1, r8
 8009cea:	f7f6 fbff 	bl	80004ec <__aeabi_dmul>
 8009cee:	4683      	mov	fp, r0
 8009cf0:	468c      	mov	ip, r1
 8009cf2:	e7c6      	b.n	8009c82 <__ieee754_pow+0xc2>
 8009cf4:	4b3f      	ldr	r3, [pc, #252]	; (8009df4 <__ieee754_pow+0x234>)
 8009cf6:	429e      	cmp	r6, r3
 8009cf8:	d10b      	bne.n	8009d12 <__ieee754_pow+0x152>
 8009cfa:	f1b9 0f00 	cmp.w	r9, #0
 8009cfe:	db08      	blt.n	8009d12 <__ieee754_pow+0x152>
 8009d00:	4638      	mov	r0, r7
 8009d02:	4641      	mov	r1, r8
 8009d04:	b011      	add	sp, #68	; 0x44
 8009d06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0a:	f000 bc63 	b.w	800a5d4 <__ieee754_sqrt>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	4638      	mov	r0, r7
 8009d14:	4641      	mov	r1, r8
 8009d16:	f000 fd09 	bl	800a72c <fabs>
 8009d1a:	4683      	mov	fp, r0
 8009d1c:	468c      	mov	ip, r1
 8009d1e:	f1ba 0f00 	cmp.w	sl, #0
 8009d22:	d12b      	bne.n	8009d7c <__ieee754_pow+0x1bc>
 8009d24:	b124      	cbz	r4, 8009d30 <__ieee754_pow+0x170>
 8009d26:	4b32      	ldr	r3, [pc, #200]	; (8009df0 <__ieee754_pow+0x230>)
 8009d28:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d125      	bne.n	8009d7c <__ieee754_pow+0x1bc>
 8009d30:	2e00      	cmp	r6, #0
 8009d32:	da07      	bge.n	8009d44 <__ieee754_pow+0x184>
 8009d34:	465a      	mov	r2, fp
 8009d36:	4663      	mov	r3, ip
 8009d38:	2000      	movs	r0, #0
 8009d3a:	492d      	ldr	r1, [pc, #180]	; (8009df0 <__ieee754_pow+0x230>)
 8009d3c:	f7f6 fd00 	bl	8000740 <__aeabi_ddiv>
 8009d40:	4683      	mov	fp, r0
 8009d42:	468c      	mov	ip, r1
 8009d44:	f1b9 0f00 	cmp.w	r9, #0
 8009d48:	da9b      	bge.n	8009c82 <__ieee754_pow+0xc2>
 8009d4a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009d4e:	9b00      	ldr	r3, [sp, #0]
 8009d50:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009d54:	4323      	orrs	r3, r4
 8009d56:	d108      	bne.n	8009d6a <__ieee754_pow+0x1aa>
 8009d58:	465a      	mov	r2, fp
 8009d5a:	4663      	mov	r3, ip
 8009d5c:	4658      	mov	r0, fp
 8009d5e:	4661      	mov	r1, ip
 8009d60:	f7f6 fa0c 	bl	800017c <__aeabi_dsub>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	e7aa      	b.n	8009cc0 <__ieee754_pow+0x100>
 8009d6a:	9b00      	ldr	r3, [sp, #0]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d188      	bne.n	8009c82 <__ieee754_pow+0xc2>
 8009d70:	4658      	mov	r0, fp
 8009d72:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009d76:	4683      	mov	fp, r0
 8009d78:	469c      	mov	ip, r3
 8009d7a:	e782      	b.n	8009c82 <__ieee754_pow+0xc2>
 8009d7c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8009d80:	f109 33ff 	add.w	r3, r9, #4294967295
 8009d84:	930d      	str	r3, [sp, #52]	; 0x34
 8009d86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d88:	9b00      	ldr	r3, [sp, #0]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	d104      	bne.n	8009d98 <__ieee754_pow+0x1d8>
 8009d8e:	463a      	mov	r2, r7
 8009d90:	4643      	mov	r3, r8
 8009d92:	4638      	mov	r0, r7
 8009d94:	4641      	mov	r1, r8
 8009d96:	e7e3      	b.n	8009d60 <__ieee754_pow+0x1a0>
 8009d98:	4b17      	ldr	r3, [pc, #92]	; (8009df8 <__ieee754_pow+0x238>)
 8009d9a:	429d      	cmp	r5, r3
 8009d9c:	f340 80fe 	ble.w	8009f9c <__ieee754_pow+0x3dc>
 8009da0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009da4:	429d      	cmp	r5, r3
 8009da6:	dd0b      	ble.n	8009dc0 <__ieee754_pow+0x200>
 8009da8:	4b10      	ldr	r3, [pc, #64]	; (8009dec <__ieee754_pow+0x22c>)
 8009daa:	429c      	cmp	r4, r3
 8009dac:	dc0e      	bgt.n	8009dcc <__ieee754_pow+0x20c>
 8009dae:	2e00      	cmp	r6, #0
 8009db0:	f6bf af63 	bge.w	8009c7a <__ieee754_pow+0xba>
 8009db4:	a308      	add	r3, pc, #32	; (adr r3, 8009dd8 <__ieee754_pow+0x218>)
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	4610      	mov	r0, r2
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	e794      	b.n	8009cea <__ieee754_pow+0x12a>
 8009dc0:	4b0e      	ldr	r3, [pc, #56]	; (8009dfc <__ieee754_pow+0x23c>)
 8009dc2:	429c      	cmp	r4, r3
 8009dc4:	ddf3      	ble.n	8009dae <__ieee754_pow+0x1ee>
 8009dc6:	4b0a      	ldr	r3, [pc, #40]	; (8009df0 <__ieee754_pow+0x230>)
 8009dc8:	429c      	cmp	r4, r3
 8009dca:	dd19      	ble.n	8009e00 <__ieee754_pow+0x240>
 8009dcc:	2e00      	cmp	r6, #0
 8009dce:	dcf1      	bgt.n	8009db4 <__ieee754_pow+0x1f4>
 8009dd0:	e753      	b.n	8009c7a <__ieee754_pow+0xba>
 8009dd2:	bf00      	nop
 8009dd4:	f3af 8000 	nop.w
 8009dd8:	8800759c 	.word	0x8800759c
 8009ddc:	7e37e43c 	.word	0x7e37e43c
 8009de0:	7ff00000 	.word	0x7ff00000
 8009de4:	0800ab6a 	.word	0x0800ab6a
 8009de8:	433fffff 	.word	0x433fffff
 8009dec:	3fefffff 	.word	0x3fefffff
 8009df0:	3ff00000 	.word	0x3ff00000
 8009df4:	3fe00000 	.word	0x3fe00000
 8009df8:	41e00000 	.word	0x41e00000
 8009dfc:	3feffffe 	.word	0x3feffffe
 8009e00:	4661      	mov	r1, ip
 8009e02:	2200      	movs	r2, #0
 8009e04:	4b60      	ldr	r3, [pc, #384]	; (8009f88 <__ieee754_pow+0x3c8>)
 8009e06:	4658      	mov	r0, fp
 8009e08:	f7f6 f9b8 	bl	800017c <__aeabi_dsub>
 8009e0c:	a354      	add	r3, pc, #336	; (adr r3, 8009f60 <__ieee754_pow+0x3a0>)
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	4604      	mov	r4, r0
 8009e14:	460d      	mov	r5, r1
 8009e16:	f7f6 fb69 	bl	80004ec <__aeabi_dmul>
 8009e1a:	a353      	add	r3, pc, #332	; (adr r3, 8009f68 <__ieee754_pow+0x3a8>)
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	4606      	mov	r6, r0
 8009e22:	460f      	mov	r7, r1
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7f6 fb60 	bl	80004ec <__aeabi_dmul>
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	4682      	mov	sl, r0
 8009e30:	468b      	mov	fp, r1
 8009e32:	4b56      	ldr	r3, [pc, #344]	; (8009f8c <__ieee754_pow+0x3cc>)
 8009e34:	4620      	mov	r0, r4
 8009e36:	4629      	mov	r1, r5
 8009e38:	f7f6 fb58 	bl	80004ec <__aeabi_dmul>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	a14b      	add	r1, pc, #300	; (adr r1, 8009f70 <__ieee754_pow+0x3b0>)
 8009e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e46:	f7f6 f999 	bl	800017c <__aeabi_dsub>
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	462b      	mov	r3, r5
 8009e4e:	f7f6 fb4d 	bl	80004ec <__aeabi_dmul>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	2000      	movs	r0, #0
 8009e58:	494d      	ldr	r1, [pc, #308]	; (8009f90 <__ieee754_pow+0x3d0>)
 8009e5a:	f7f6 f98f 	bl	800017c <__aeabi_dsub>
 8009e5e:	4622      	mov	r2, r4
 8009e60:	462b      	mov	r3, r5
 8009e62:	4680      	mov	r8, r0
 8009e64:	4689      	mov	r9, r1
 8009e66:	4620      	mov	r0, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	f7f6 fb3f 	bl	80004ec <__aeabi_dmul>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4640      	mov	r0, r8
 8009e74:	4649      	mov	r1, r9
 8009e76:	f7f6 fb39 	bl	80004ec <__aeabi_dmul>
 8009e7a:	a33f      	add	r3, pc, #252	; (adr r3, 8009f78 <__ieee754_pow+0x3b8>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f7f6 fb34 	bl	80004ec <__aeabi_dmul>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4650      	mov	r0, sl
 8009e8a:	4659      	mov	r1, fp
 8009e8c:	f7f6 f976 	bl	800017c <__aeabi_dsub>
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4604      	mov	r4, r0
 8009e96:	460d      	mov	r5, r1
 8009e98:	4630      	mov	r0, r6
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	f7f6 f970 	bl	8000180 <__adddf3>
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	468b      	mov	fp, r1
 8009ea4:	4682      	mov	sl, r0
 8009ea6:	4632      	mov	r2, r6
 8009ea8:	463b      	mov	r3, r7
 8009eaa:	f7f6 f967 	bl	800017c <__aeabi_dsub>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	f7f6 f961 	bl	800017c <__aeabi_dsub>
 8009eba:	9b00      	ldr	r3, [sp, #0]
 8009ebc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	f04f 0300 	mov.w	r3, #0
 8009ec6:	bf0c      	ite	eq
 8009ec8:	4c32      	ldreq	r4, [pc, #200]	; (8009f94 <__ieee754_pow+0x3d4>)
 8009eca:	4c2f      	ldrne	r4, [pc, #188]	; (8009f88 <__ieee754_pow+0x3c8>)
 8009ecc:	4606      	mov	r6, r0
 8009ece:	e9cd 3400 	strd	r3, r4, [sp]
 8009ed2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ed6:	2400      	movs	r4, #0
 8009ed8:	460f      	mov	r7, r1
 8009eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ede:	4622      	mov	r2, r4
 8009ee0:	462b      	mov	r3, r5
 8009ee2:	f7f6 f94b 	bl	800017c <__aeabi_dsub>
 8009ee6:	4652      	mov	r2, sl
 8009ee8:	465b      	mov	r3, fp
 8009eea:	f7f6 faff 	bl	80004ec <__aeabi_dmul>
 8009eee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ef2:	4680      	mov	r8, r0
 8009ef4:	4689      	mov	r9, r1
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	4639      	mov	r1, r7
 8009efa:	f7f6 faf7 	bl	80004ec <__aeabi_dmul>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	4640      	mov	r0, r8
 8009f04:	4649      	mov	r1, r9
 8009f06:	f7f6 f93b 	bl	8000180 <__adddf3>
 8009f0a:	4622      	mov	r2, r4
 8009f0c:	462b      	mov	r3, r5
 8009f0e:	4680      	mov	r8, r0
 8009f10:	4689      	mov	r9, r1
 8009f12:	4650      	mov	r0, sl
 8009f14:	4659      	mov	r1, fp
 8009f16:	f7f6 fae9 	bl	80004ec <__aeabi_dmul>
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	460d      	mov	r5, r1
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4602      	mov	r2, r0
 8009f22:	4649      	mov	r1, r9
 8009f24:	4640      	mov	r0, r8
 8009f26:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009f2a:	f7f6 f929 	bl	8000180 <__adddf3>
 8009f2e:	4b1a      	ldr	r3, [pc, #104]	; (8009f98 <__ieee754_pow+0x3d8>)
 8009f30:	4682      	mov	sl, r0
 8009f32:	4299      	cmp	r1, r3
 8009f34:	460f      	mov	r7, r1
 8009f36:	460e      	mov	r6, r1
 8009f38:	f340 82e1 	ble.w	800a4fe <__ieee754_pow+0x93e>
 8009f3c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009f40:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009f44:	4303      	orrs	r3, r0
 8009f46:	f000 81db 	beq.w	800a300 <__ieee754_pow+0x740>
 8009f4a:	a30d      	add	r3, pc, #52	; (adr r3, 8009f80 <__ieee754_pow+0x3c0>)
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f54:	f7f6 faca 	bl	80004ec <__aeabi_dmul>
 8009f58:	a309      	add	r3, pc, #36	; (adr r3, 8009f80 <__ieee754_pow+0x3c0>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	e6c4      	b.n	8009cea <__ieee754_pow+0x12a>
 8009f60:	60000000 	.word	0x60000000
 8009f64:	3ff71547 	.word	0x3ff71547
 8009f68:	f85ddf44 	.word	0xf85ddf44
 8009f6c:	3e54ae0b 	.word	0x3e54ae0b
 8009f70:	55555555 	.word	0x55555555
 8009f74:	3fd55555 	.word	0x3fd55555
 8009f78:	652b82fe 	.word	0x652b82fe
 8009f7c:	3ff71547 	.word	0x3ff71547
 8009f80:	8800759c 	.word	0x8800759c
 8009f84:	7e37e43c 	.word	0x7e37e43c
 8009f88:	3ff00000 	.word	0x3ff00000
 8009f8c:	3fd00000 	.word	0x3fd00000
 8009f90:	3fe00000 	.word	0x3fe00000
 8009f94:	bff00000 	.word	0xbff00000
 8009f98:	408fffff 	.word	0x408fffff
 8009f9c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	da08      	bge.n	8009fb8 <__ieee754_pow+0x3f8>
 8009fa6:	4658      	mov	r0, fp
 8009fa8:	4bcd      	ldr	r3, [pc, #820]	; (800a2e0 <__ieee754_pow+0x720>)
 8009faa:	4661      	mov	r1, ip
 8009fac:	f7f6 fa9e 	bl	80004ec <__aeabi_dmul>
 8009fb0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009fb4:	4683      	mov	fp, r0
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	1523      	asrs	r3, r4, #20
 8009fba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009fbe:	4413      	add	r3, r2
 8009fc0:	930c      	str	r3, [sp, #48]	; 0x30
 8009fc2:	4bc8      	ldr	r3, [pc, #800]	; (800a2e4 <__ieee754_pow+0x724>)
 8009fc4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009fc8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009fd2:	dd08      	ble.n	8009fe6 <__ieee754_pow+0x426>
 8009fd4:	4bc4      	ldr	r3, [pc, #784]	; (800a2e8 <__ieee754_pow+0x728>)
 8009fd6:	429c      	cmp	r4, r3
 8009fd8:	f340 815b 	ble.w	800a292 <__ieee754_pow+0x6d2>
 8009fdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fde:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	930c      	str	r3, [sp, #48]	; 0x30
 8009fe6:	f04f 0800 	mov.w	r8, #0
 8009fea:	4658      	mov	r0, fp
 8009fec:	4629      	mov	r1, r5
 8009fee:	4bbf      	ldr	r3, [pc, #764]	; (800a2ec <__ieee754_pow+0x72c>)
 8009ff0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8009ff4:	444b      	add	r3, r9
 8009ff6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ffa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009ffe:	461a      	mov	r2, r3
 800a000:	4623      	mov	r3, r4
 800a002:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a006:	f7f6 f8b9 	bl	800017c <__aeabi_dsub>
 800a00a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a00e:	4606      	mov	r6, r0
 800a010:	460f      	mov	r7, r1
 800a012:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a016:	f7f6 f8b3 	bl	8000180 <__adddf3>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	2000      	movs	r0, #0
 800a020:	49b3      	ldr	r1, [pc, #716]	; (800a2f0 <__ieee754_pow+0x730>)
 800a022:	f7f6 fb8d 	bl	8000740 <__aeabi_ddiv>
 800a026:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	4630      	mov	r0, r6
 800a030:	4639      	mov	r1, r7
 800a032:	f7f6 fa5b 	bl	80004ec <__aeabi_dmul>
 800a036:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a03a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a03e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a042:	2300      	movs	r3, #0
 800a044:	2200      	movs	r2, #0
 800a046:	106d      	asrs	r5, r5, #1
 800a048:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a04c:	9304      	str	r3, [sp, #16]
 800a04e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a052:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a056:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800a05a:	4650      	mov	r0, sl
 800a05c:	4659      	mov	r1, fp
 800a05e:	4614      	mov	r4, r2
 800a060:	461d      	mov	r5, r3
 800a062:	f7f6 fa43 	bl	80004ec <__aeabi_dmul>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	4630      	mov	r0, r6
 800a06c:	4639      	mov	r1, r7
 800a06e:	f7f6 f885 	bl	800017c <__aeabi_dsub>
 800a072:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a076:	4606      	mov	r6, r0
 800a078:	460f      	mov	r7, r1
 800a07a:	4620      	mov	r0, r4
 800a07c:	4629      	mov	r1, r5
 800a07e:	f7f6 f87d 	bl	800017c <__aeabi_dsub>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a08a:	f7f6 f877 	bl	800017c <__aeabi_dsub>
 800a08e:	4652      	mov	r2, sl
 800a090:	465b      	mov	r3, fp
 800a092:	f7f6 fa2b 	bl	80004ec <__aeabi_dmul>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	4630      	mov	r0, r6
 800a09c:	4639      	mov	r1, r7
 800a09e:	f7f6 f86d 	bl	800017c <__aeabi_dsub>
 800a0a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a0a6:	f7f6 fa21 	bl	80004ec <__aeabi_dmul>
 800a0aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	f7f6 fa19 	bl	80004ec <__aeabi_dmul>
 800a0ba:	a377      	add	r3, pc, #476	; (adr r3, 800a298 <__ieee754_pow+0x6d8>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	460d      	mov	r5, r1
 800a0c4:	f7f6 fa12 	bl	80004ec <__aeabi_dmul>
 800a0c8:	a375      	add	r3, pc, #468	; (adr r3, 800a2a0 <__ieee754_pow+0x6e0>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f7f6 f857 	bl	8000180 <__adddf3>
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	f7f6 fa09 	bl	80004ec <__aeabi_dmul>
 800a0da:	a373      	add	r3, pc, #460	; (adr r3, 800a2a8 <__ieee754_pow+0x6e8>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	f7f6 f84e 	bl	8000180 <__adddf3>
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	462b      	mov	r3, r5
 800a0e8:	f7f6 fa00 	bl	80004ec <__aeabi_dmul>
 800a0ec:	a370      	add	r3, pc, #448	; (adr r3, 800a2b0 <__ieee754_pow+0x6f0>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f7f6 f845 	bl	8000180 <__adddf3>
 800a0f6:	4622      	mov	r2, r4
 800a0f8:	462b      	mov	r3, r5
 800a0fa:	f7f6 f9f7 	bl	80004ec <__aeabi_dmul>
 800a0fe:	a36e      	add	r3, pc, #440	; (adr r3, 800a2b8 <__ieee754_pow+0x6f8>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f7f6 f83c 	bl	8000180 <__adddf3>
 800a108:	4622      	mov	r2, r4
 800a10a:	462b      	mov	r3, r5
 800a10c:	f7f6 f9ee 	bl	80004ec <__aeabi_dmul>
 800a110:	a36b      	add	r3, pc, #428	; (adr r3, 800a2c0 <__ieee754_pow+0x700>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	f7f6 f833 	bl	8000180 <__adddf3>
 800a11a:	4622      	mov	r2, r4
 800a11c:	4606      	mov	r6, r0
 800a11e:	460f      	mov	r7, r1
 800a120:	462b      	mov	r3, r5
 800a122:	4620      	mov	r0, r4
 800a124:	4629      	mov	r1, r5
 800a126:	f7f6 f9e1 	bl	80004ec <__aeabi_dmul>
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	4630      	mov	r0, r6
 800a130:	4639      	mov	r1, r7
 800a132:	f7f6 f9db 	bl	80004ec <__aeabi_dmul>
 800a136:	4604      	mov	r4, r0
 800a138:	460d      	mov	r5, r1
 800a13a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a13e:	4652      	mov	r2, sl
 800a140:	465b      	mov	r3, fp
 800a142:	f7f6 f81d 	bl	8000180 <__adddf3>
 800a146:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a14a:	f7f6 f9cf 	bl	80004ec <__aeabi_dmul>
 800a14e:	4622      	mov	r2, r4
 800a150:	462b      	mov	r3, r5
 800a152:	f7f6 f815 	bl	8000180 <__adddf3>
 800a156:	4652      	mov	r2, sl
 800a158:	4606      	mov	r6, r0
 800a15a:	460f      	mov	r7, r1
 800a15c:	465b      	mov	r3, fp
 800a15e:	4650      	mov	r0, sl
 800a160:	4659      	mov	r1, fp
 800a162:	f7f6 f9c3 	bl	80004ec <__aeabi_dmul>
 800a166:	2200      	movs	r2, #0
 800a168:	4b62      	ldr	r3, [pc, #392]	; (800a2f4 <__ieee754_pow+0x734>)
 800a16a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a16e:	f7f6 f807 	bl	8000180 <__adddf3>
 800a172:	4632      	mov	r2, r6
 800a174:	463b      	mov	r3, r7
 800a176:	f7f6 f803 	bl	8000180 <__adddf3>
 800a17a:	9804      	ldr	r0, [sp, #16]
 800a17c:	460d      	mov	r5, r1
 800a17e:	4604      	mov	r4, r0
 800a180:	4602      	mov	r2, r0
 800a182:	460b      	mov	r3, r1
 800a184:	4650      	mov	r0, sl
 800a186:	4659      	mov	r1, fp
 800a188:	f7f6 f9b0 	bl	80004ec <__aeabi_dmul>
 800a18c:	2200      	movs	r2, #0
 800a18e:	4682      	mov	sl, r0
 800a190:	468b      	mov	fp, r1
 800a192:	4b58      	ldr	r3, [pc, #352]	; (800a2f4 <__ieee754_pow+0x734>)
 800a194:	4620      	mov	r0, r4
 800a196:	4629      	mov	r1, r5
 800a198:	f7f5 fff0 	bl	800017c <__aeabi_dsub>
 800a19c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a1a0:	f7f5 ffec 	bl	800017c <__aeabi_dsub>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	f7f5 ffe6 	bl	800017c <__aeabi_dsub>
 800a1b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1b4:	f7f6 f99a 	bl	80004ec <__aeabi_dmul>
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	460f      	mov	r7, r1
 800a1be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1c2:	462b      	mov	r3, r5
 800a1c4:	f7f6 f992 	bl	80004ec <__aeabi_dmul>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	f7f5 ffd6 	bl	8000180 <__adddf3>
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	460f      	mov	r7, r1
 800a1d8:	4602      	mov	r2, r0
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4650      	mov	r0, sl
 800a1de:	4659      	mov	r1, fp
 800a1e0:	f7f5 ffce 	bl	8000180 <__adddf3>
 800a1e4:	a338      	add	r3, pc, #224	; (adr r3, 800a2c8 <__ieee754_pow+0x708>)
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	9804      	ldr	r0, [sp, #16]
 800a1ec:	460d      	mov	r5, r1
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	f7f6 f97c 	bl	80004ec <__aeabi_dmul>
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a1fa:	465b      	mov	r3, fp
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	4629      	mov	r1, r5
 800a200:	f7f5 ffbc 	bl	800017c <__aeabi_dsub>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4630      	mov	r0, r6
 800a20a:	4639      	mov	r1, r7
 800a20c:	f7f5 ffb6 	bl	800017c <__aeabi_dsub>
 800a210:	a32f      	add	r3, pc, #188	; (adr r3, 800a2d0 <__ieee754_pow+0x710>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f7f6 f969 	bl	80004ec <__aeabi_dmul>
 800a21a:	a32f      	add	r3, pc, #188	; (adr r3, 800a2d8 <__ieee754_pow+0x718>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	4606      	mov	r6, r0
 800a222:	460f      	mov	r7, r1
 800a224:	4620      	mov	r0, r4
 800a226:	4629      	mov	r1, r5
 800a228:	f7f6 f960 	bl	80004ec <__aeabi_dmul>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4630      	mov	r0, r6
 800a232:	4639      	mov	r1, r7
 800a234:	f7f5 ffa4 	bl	8000180 <__adddf3>
 800a238:	4b2f      	ldr	r3, [pc, #188]	; (800a2f8 <__ieee754_pow+0x738>)
 800a23a:	444b      	add	r3, r9
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	f7f5 ff9e 	bl	8000180 <__adddf3>
 800a244:	4604      	mov	r4, r0
 800a246:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a248:	460d      	mov	r5, r1
 800a24a:	f7f6 f8e5 	bl	8000418 <__aeabi_i2d>
 800a24e:	4606      	mov	r6, r0
 800a250:	460f      	mov	r7, r1
 800a252:	4b2a      	ldr	r3, [pc, #168]	; (800a2fc <__ieee754_pow+0x73c>)
 800a254:	4622      	mov	r2, r4
 800a256:	444b      	add	r3, r9
 800a258:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a25c:	462b      	mov	r3, r5
 800a25e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a262:	f7f5 ff8d 	bl	8000180 <__adddf3>
 800a266:	4642      	mov	r2, r8
 800a268:	464b      	mov	r3, r9
 800a26a:	f7f5 ff89 	bl	8000180 <__adddf3>
 800a26e:	4632      	mov	r2, r6
 800a270:	463b      	mov	r3, r7
 800a272:	f7f5 ff85 	bl	8000180 <__adddf3>
 800a276:	9804      	ldr	r0, [sp, #16]
 800a278:	4632      	mov	r2, r6
 800a27a:	463b      	mov	r3, r7
 800a27c:	4682      	mov	sl, r0
 800a27e:	468b      	mov	fp, r1
 800a280:	f7f5 ff7c 	bl	800017c <__aeabi_dsub>
 800a284:	4642      	mov	r2, r8
 800a286:	464b      	mov	r3, r9
 800a288:	f7f5 ff78 	bl	800017c <__aeabi_dsub>
 800a28c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a290:	e60b      	b.n	8009eaa <__ieee754_pow+0x2ea>
 800a292:	f04f 0801 	mov.w	r8, #1
 800a296:	e6a8      	b.n	8009fea <__ieee754_pow+0x42a>
 800a298:	4a454eef 	.word	0x4a454eef
 800a29c:	3fca7e28 	.word	0x3fca7e28
 800a2a0:	93c9db65 	.word	0x93c9db65
 800a2a4:	3fcd864a 	.word	0x3fcd864a
 800a2a8:	a91d4101 	.word	0xa91d4101
 800a2ac:	3fd17460 	.word	0x3fd17460
 800a2b0:	518f264d 	.word	0x518f264d
 800a2b4:	3fd55555 	.word	0x3fd55555
 800a2b8:	db6fabff 	.word	0xdb6fabff
 800a2bc:	3fdb6db6 	.word	0x3fdb6db6
 800a2c0:	33333303 	.word	0x33333303
 800a2c4:	3fe33333 	.word	0x3fe33333
 800a2c8:	e0000000 	.word	0xe0000000
 800a2cc:	3feec709 	.word	0x3feec709
 800a2d0:	dc3a03fd 	.word	0xdc3a03fd
 800a2d4:	3feec709 	.word	0x3feec709
 800a2d8:	145b01f5 	.word	0x145b01f5
 800a2dc:	be3e2fe0 	.word	0xbe3e2fe0
 800a2e0:	43400000 	.word	0x43400000
 800a2e4:	0003988e 	.word	0x0003988e
 800a2e8:	000bb679 	.word	0x000bb679
 800a2ec:	0800b368 	.word	0x0800b368
 800a2f0:	3ff00000 	.word	0x3ff00000
 800a2f4:	40080000 	.word	0x40080000
 800a2f8:	0800b388 	.word	0x0800b388
 800a2fc:	0800b378 	.word	0x0800b378
 800a300:	a39b      	add	r3, pc, #620	; (adr r3, 800a570 <__ieee754_pow+0x9b0>)
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	4640      	mov	r0, r8
 800a308:	4649      	mov	r1, r9
 800a30a:	f7f5 ff39 	bl	8000180 <__adddf3>
 800a30e:	4622      	mov	r2, r4
 800a310:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a314:	462b      	mov	r3, r5
 800a316:	4650      	mov	r0, sl
 800a318:	4639      	mov	r1, r7
 800a31a:	f7f5 ff2f 	bl	800017c <__aeabi_dsub>
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a326:	f7f6 fb71 	bl	8000a0c <__aeabi_dcmpgt>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	f47f ae0d 	bne.w	8009f4a <__ieee754_pow+0x38a>
 800a330:	4aa3      	ldr	r2, [pc, #652]	; (800a5c0 <__ieee754_pow+0xa00>)
 800a332:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a336:	4293      	cmp	r3, r2
 800a338:	f340 8103 	ble.w	800a542 <__ieee754_pow+0x982>
 800a33c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a340:	2000      	movs	r0, #0
 800a342:	151b      	asrs	r3, r3, #20
 800a344:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a348:	fa4a f303 	asr.w	r3, sl, r3
 800a34c:	4433      	add	r3, r6
 800a34e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a352:	4f9c      	ldr	r7, [pc, #624]	; (800a5c4 <__ieee754_pow+0xa04>)
 800a354:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a358:	4117      	asrs	r7, r2
 800a35a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a35e:	ea23 0107 	bic.w	r1, r3, r7
 800a362:	f1c2 0214 	rsb	r2, r2, #20
 800a366:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a36a:	fa4a fa02 	asr.w	sl, sl, r2
 800a36e:	2e00      	cmp	r6, #0
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	4620      	mov	r0, r4
 800a376:	4629      	mov	r1, r5
 800a378:	bfb8      	it	lt
 800a37a:	f1ca 0a00 	rsblt	sl, sl, #0
 800a37e:	f7f5 fefd 	bl	800017c <__aeabi_dsub>
 800a382:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a38a:	4642      	mov	r2, r8
 800a38c:	464b      	mov	r3, r9
 800a38e:	f7f5 fef7 	bl	8000180 <__adddf3>
 800a392:	a379      	add	r3, pc, #484	; (adr r3, 800a578 <__ieee754_pow+0x9b8>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	2000      	movs	r0, #0
 800a39a:	460d      	mov	r5, r1
 800a39c:	4604      	mov	r4, r0
 800a39e:	f7f6 f8a5 	bl	80004ec <__aeabi_dmul>
 800a3a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460f      	mov	r7, r1
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	f7f5 fee5 	bl	800017c <__aeabi_dsub>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	4640      	mov	r0, r8
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	f7f5 fedf 	bl	800017c <__aeabi_dsub>
 800a3be:	a370      	add	r3, pc, #448	; (adr r3, 800a580 <__ieee754_pow+0x9c0>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	f7f6 f892 	bl	80004ec <__aeabi_dmul>
 800a3c8:	a36f      	add	r3, pc, #444	; (adr r3, 800a588 <__ieee754_pow+0x9c8>)
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	4680      	mov	r8, r0
 800a3d0:	4689      	mov	r9, r1
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	f7f6 f889 	bl	80004ec <__aeabi_dmul>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	460b      	mov	r3, r1
 800a3de:	4640      	mov	r0, r8
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	f7f5 fecd 	bl	8000180 <__adddf3>
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	460d      	mov	r5, r1
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	4639      	mov	r1, r7
 800a3f2:	f7f5 fec5 	bl	8000180 <__adddf3>
 800a3f6:	4632      	mov	r2, r6
 800a3f8:	463b      	mov	r3, r7
 800a3fa:	4680      	mov	r8, r0
 800a3fc:	4689      	mov	r9, r1
 800a3fe:	f7f5 febd 	bl	800017c <__aeabi_dsub>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	4620      	mov	r0, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	f7f5 feb7 	bl	800017c <__aeabi_dsub>
 800a40e:	4642      	mov	r2, r8
 800a410:	4606      	mov	r6, r0
 800a412:	460f      	mov	r7, r1
 800a414:	464b      	mov	r3, r9
 800a416:	4640      	mov	r0, r8
 800a418:	4649      	mov	r1, r9
 800a41a:	f7f6 f867 	bl	80004ec <__aeabi_dmul>
 800a41e:	a35c      	add	r3, pc, #368	; (adr r3, 800a590 <__ieee754_pow+0x9d0>)
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	4604      	mov	r4, r0
 800a426:	460d      	mov	r5, r1
 800a428:	f7f6 f860 	bl	80004ec <__aeabi_dmul>
 800a42c:	a35a      	add	r3, pc, #360	; (adr r3, 800a598 <__ieee754_pow+0x9d8>)
 800a42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a432:	f7f5 fea3 	bl	800017c <__aeabi_dsub>
 800a436:	4622      	mov	r2, r4
 800a438:	462b      	mov	r3, r5
 800a43a:	f7f6 f857 	bl	80004ec <__aeabi_dmul>
 800a43e:	a358      	add	r3, pc, #352	; (adr r3, 800a5a0 <__ieee754_pow+0x9e0>)
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	f7f5 fe9c 	bl	8000180 <__adddf3>
 800a448:	4622      	mov	r2, r4
 800a44a:	462b      	mov	r3, r5
 800a44c:	f7f6 f84e 	bl	80004ec <__aeabi_dmul>
 800a450:	a355      	add	r3, pc, #340	; (adr r3, 800a5a8 <__ieee754_pow+0x9e8>)
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	f7f5 fe91 	bl	800017c <__aeabi_dsub>
 800a45a:	4622      	mov	r2, r4
 800a45c:	462b      	mov	r3, r5
 800a45e:	f7f6 f845 	bl	80004ec <__aeabi_dmul>
 800a462:	a353      	add	r3, pc, #332	; (adr r3, 800a5b0 <__ieee754_pow+0x9f0>)
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	f7f5 fe8a 	bl	8000180 <__adddf3>
 800a46c:	4622      	mov	r2, r4
 800a46e:	462b      	mov	r3, r5
 800a470:	f7f6 f83c 	bl	80004ec <__aeabi_dmul>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4640      	mov	r0, r8
 800a47a:	4649      	mov	r1, r9
 800a47c:	f7f5 fe7e 	bl	800017c <__aeabi_dsub>
 800a480:	4604      	mov	r4, r0
 800a482:	460d      	mov	r5, r1
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4640      	mov	r0, r8
 800a48a:	4649      	mov	r1, r9
 800a48c:	f7f6 f82e 	bl	80004ec <__aeabi_dmul>
 800a490:	2200      	movs	r2, #0
 800a492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a49a:	4620      	mov	r0, r4
 800a49c:	4629      	mov	r1, r5
 800a49e:	f7f5 fe6d 	bl	800017c <__aeabi_dsub>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4aa:	f7f6 f949 	bl	8000740 <__aeabi_ddiv>
 800a4ae:	4632      	mov	r2, r6
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	460d      	mov	r5, r1
 800a4b4:	463b      	mov	r3, r7
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	4649      	mov	r1, r9
 800a4ba:	f7f6 f817 	bl	80004ec <__aeabi_dmul>
 800a4be:	4632      	mov	r2, r6
 800a4c0:	463b      	mov	r3, r7
 800a4c2:	f7f5 fe5d 	bl	8000180 <__adddf3>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	f7f5 fe55 	bl	800017c <__aeabi_dsub>
 800a4d2:	4642      	mov	r2, r8
 800a4d4:	464b      	mov	r3, r9
 800a4d6:	f7f5 fe51 	bl	800017c <__aeabi_dsub>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	2000      	movs	r0, #0
 800a4e0:	4939      	ldr	r1, [pc, #228]	; (800a5c8 <__ieee754_pow+0xa08>)
 800a4e2:	f7f5 fe4b 	bl	800017c <__aeabi_dsub>
 800a4e6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a4ea:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a4ee:	da2b      	bge.n	800a548 <__ieee754_pow+0x988>
 800a4f0:	4652      	mov	r2, sl
 800a4f2:	f000 f9b9 	bl	800a868 <scalbn>
 800a4f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4fa:	f7ff bbf6 	b.w	8009cea <__ieee754_pow+0x12a>
 800a4fe:	4b33      	ldr	r3, [pc, #204]	; (800a5cc <__ieee754_pow+0xa0c>)
 800a500:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a504:	429f      	cmp	r7, r3
 800a506:	f77f af13 	ble.w	800a330 <__ieee754_pow+0x770>
 800a50a:	4b31      	ldr	r3, [pc, #196]	; (800a5d0 <__ieee754_pow+0xa10>)
 800a50c:	440b      	add	r3, r1
 800a50e:	4303      	orrs	r3, r0
 800a510:	d00b      	beq.n	800a52a <__ieee754_pow+0x96a>
 800a512:	a329      	add	r3, pc, #164	; (adr r3, 800a5b8 <__ieee754_pow+0x9f8>)
 800a514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a518:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a51c:	f7f5 ffe6 	bl	80004ec <__aeabi_dmul>
 800a520:	a325      	add	r3, pc, #148	; (adr r3, 800a5b8 <__ieee754_pow+0x9f8>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f7ff bbe0 	b.w	8009cea <__ieee754_pow+0x12a>
 800a52a:	4622      	mov	r2, r4
 800a52c:	462b      	mov	r3, r5
 800a52e:	f7f5 fe25 	bl	800017c <__aeabi_dsub>
 800a532:	4642      	mov	r2, r8
 800a534:	464b      	mov	r3, r9
 800a536:	f7f6 fa5f 	bl	80009f8 <__aeabi_dcmpge>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	f43f aef8 	beq.w	800a330 <__ieee754_pow+0x770>
 800a540:	e7e7      	b.n	800a512 <__ieee754_pow+0x952>
 800a542:	f04f 0a00 	mov.w	sl, #0
 800a546:	e71e      	b.n	800a386 <__ieee754_pow+0x7c6>
 800a548:	4621      	mov	r1, r4
 800a54a:	e7d4      	b.n	800a4f6 <__ieee754_pow+0x936>
 800a54c:	f04f 0b00 	mov.w	fp, #0
 800a550:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a5c8 <__ieee754_pow+0xa08>
 800a554:	f7ff bb95 	b.w	8009c82 <__ieee754_pow+0xc2>
 800a558:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a55c:	f7ff bb91 	b.w	8009c82 <__ieee754_pow+0xc2>
 800a560:	4638      	mov	r0, r7
 800a562:	4641      	mov	r1, r8
 800a564:	f7ff bbc3 	b.w	8009cee <__ieee754_pow+0x12e>
 800a568:	9200      	str	r2, [sp, #0]
 800a56a:	f7ff bb9f 	b.w	8009cac <__ieee754_pow+0xec>
 800a56e:	bf00      	nop
 800a570:	652b82fe 	.word	0x652b82fe
 800a574:	3c971547 	.word	0x3c971547
 800a578:	00000000 	.word	0x00000000
 800a57c:	3fe62e43 	.word	0x3fe62e43
 800a580:	fefa39ef 	.word	0xfefa39ef
 800a584:	3fe62e42 	.word	0x3fe62e42
 800a588:	0ca86c39 	.word	0x0ca86c39
 800a58c:	be205c61 	.word	0xbe205c61
 800a590:	72bea4d0 	.word	0x72bea4d0
 800a594:	3e663769 	.word	0x3e663769
 800a598:	c5d26bf1 	.word	0xc5d26bf1
 800a59c:	3ebbbd41 	.word	0x3ebbbd41
 800a5a0:	af25de2c 	.word	0xaf25de2c
 800a5a4:	3f11566a 	.word	0x3f11566a
 800a5a8:	16bebd93 	.word	0x16bebd93
 800a5ac:	3f66c16c 	.word	0x3f66c16c
 800a5b0:	5555553e 	.word	0x5555553e
 800a5b4:	3fc55555 	.word	0x3fc55555
 800a5b8:	c2f8f359 	.word	0xc2f8f359
 800a5bc:	01a56e1f 	.word	0x01a56e1f
 800a5c0:	3fe00000 	.word	0x3fe00000
 800a5c4:	000fffff 	.word	0x000fffff
 800a5c8:	3ff00000 	.word	0x3ff00000
 800a5cc:	4090cbff 	.word	0x4090cbff
 800a5d0:	3f6f3400 	.word	0x3f6f3400

0800a5d4 <__ieee754_sqrt>:
 800a5d4:	4b54      	ldr	r3, [pc, #336]	; (800a728 <__ieee754_sqrt+0x154>)
 800a5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5da:	438b      	bics	r3, r1
 800a5dc:	4606      	mov	r6, r0
 800a5de:	460d      	mov	r5, r1
 800a5e0:	460a      	mov	r2, r1
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	d10f      	bne.n	800a606 <__ieee754_sqrt+0x32>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	f7f5 ff7f 	bl	80004ec <__aeabi_dmul>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	f7f5 fdc3 	bl	8000180 <__adddf3>
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	460d      	mov	r5, r1
 800a5fe:	4630      	mov	r0, r6
 800a600:	4629      	mov	r1, r5
 800a602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a606:	2900      	cmp	r1, #0
 800a608:	4607      	mov	r7, r0
 800a60a:	4603      	mov	r3, r0
 800a60c:	dc0e      	bgt.n	800a62c <__ieee754_sqrt+0x58>
 800a60e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a612:	ea5c 0707 	orrs.w	r7, ip, r7
 800a616:	d0f2      	beq.n	800a5fe <__ieee754_sqrt+0x2a>
 800a618:	b141      	cbz	r1, 800a62c <__ieee754_sqrt+0x58>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	f7f5 fdad 	bl	800017c <__aeabi_dsub>
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	f7f6 f88b 	bl	8000740 <__aeabi_ddiv>
 800a62a:	e7e6      	b.n	800a5fa <__ieee754_sqrt+0x26>
 800a62c:	1512      	asrs	r2, r2, #20
 800a62e:	d074      	beq.n	800a71a <__ieee754_sqrt+0x146>
 800a630:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a634:	07d5      	lsls	r5, r2, #31
 800a636:	f04f 0500 	mov.w	r5, #0
 800a63a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a63e:	bf48      	it	mi
 800a640:	0fd9      	lsrmi	r1, r3, #31
 800a642:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800a646:	bf44      	itt	mi
 800a648:	005b      	lslmi	r3, r3, #1
 800a64a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800a64e:	1051      	asrs	r1, r2, #1
 800a650:	0fda      	lsrs	r2, r3, #31
 800a652:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800a656:	4628      	mov	r0, r5
 800a658:	2216      	movs	r2, #22
 800a65a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	1987      	adds	r7, r0, r6
 800a662:	42a7      	cmp	r7, r4
 800a664:	bfde      	ittt	le
 800a666:	19b8      	addle	r0, r7, r6
 800a668:	1be4      	suble	r4, r4, r7
 800a66a:	19ad      	addle	r5, r5, r6
 800a66c:	0fdf      	lsrs	r7, r3, #31
 800a66e:	3a01      	subs	r2, #1
 800a670:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800a674:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a678:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a67c:	d1f0      	bne.n	800a660 <__ieee754_sqrt+0x8c>
 800a67e:	f04f 0c20 	mov.w	ip, #32
 800a682:	4696      	mov	lr, r2
 800a684:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a688:	4284      	cmp	r4, r0
 800a68a:	eb06 070e 	add.w	r7, r6, lr
 800a68e:	dc02      	bgt.n	800a696 <__ieee754_sqrt+0xc2>
 800a690:	d112      	bne.n	800a6b8 <__ieee754_sqrt+0xe4>
 800a692:	429f      	cmp	r7, r3
 800a694:	d810      	bhi.n	800a6b8 <__ieee754_sqrt+0xe4>
 800a696:	2f00      	cmp	r7, #0
 800a698:	eb07 0e06 	add.w	lr, r7, r6
 800a69c:	da42      	bge.n	800a724 <__ieee754_sqrt+0x150>
 800a69e:	f1be 0f00 	cmp.w	lr, #0
 800a6a2:	db3f      	blt.n	800a724 <__ieee754_sqrt+0x150>
 800a6a4:	f100 0801 	add.w	r8, r0, #1
 800a6a8:	1a24      	subs	r4, r4, r0
 800a6aa:	4640      	mov	r0, r8
 800a6ac:	429f      	cmp	r7, r3
 800a6ae:	bf88      	it	hi
 800a6b0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800a6b4:	1bdb      	subs	r3, r3, r7
 800a6b6:	4432      	add	r2, r6
 800a6b8:	0064      	lsls	r4, r4, #1
 800a6ba:	f1bc 0c01 	subs.w	ip, ip, #1
 800a6be:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800a6c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a6c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a6ca:	d1dd      	bne.n	800a688 <__ieee754_sqrt+0xb4>
 800a6cc:	4323      	orrs	r3, r4
 800a6ce:	d006      	beq.n	800a6de <__ieee754_sqrt+0x10a>
 800a6d0:	1c54      	adds	r4, r2, #1
 800a6d2:	bf0b      	itete	eq
 800a6d4:	4662      	moveq	r2, ip
 800a6d6:	3201      	addne	r2, #1
 800a6d8:	3501      	addeq	r5, #1
 800a6da:	f022 0201 	bicne.w	r2, r2, #1
 800a6de:	106b      	asrs	r3, r5, #1
 800a6e0:	0852      	lsrs	r2, r2, #1
 800a6e2:	07e8      	lsls	r0, r5, #31
 800a6e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a6e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a6ec:	bf48      	it	mi
 800a6ee:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a6f2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800a6f6:	4616      	mov	r6, r2
 800a6f8:	e781      	b.n	800a5fe <__ieee754_sqrt+0x2a>
 800a6fa:	0adc      	lsrs	r4, r3, #11
 800a6fc:	3915      	subs	r1, #21
 800a6fe:	055b      	lsls	r3, r3, #21
 800a700:	2c00      	cmp	r4, #0
 800a702:	d0fa      	beq.n	800a6fa <__ieee754_sqrt+0x126>
 800a704:	02e6      	lsls	r6, r4, #11
 800a706:	d50a      	bpl.n	800a71e <__ieee754_sqrt+0x14a>
 800a708:	f1c2 0020 	rsb	r0, r2, #32
 800a70c:	fa23 f000 	lsr.w	r0, r3, r0
 800a710:	1e55      	subs	r5, r2, #1
 800a712:	4093      	lsls	r3, r2
 800a714:	4304      	orrs	r4, r0
 800a716:	1b4a      	subs	r2, r1, r5
 800a718:	e78a      	b.n	800a630 <__ieee754_sqrt+0x5c>
 800a71a:	4611      	mov	r1, r2
 800a71c:	e7f0      	b.n	800a700 <__ieee754_sqrt+0x12c>
 800a71e:	0064      	lsls	r4, r4, #1
 800a720:	3201      	adds	r2, #1
 800a722:	e7ef      	b.n	800a704 <__ieee754_sqrt+0x130>
 800a724:	4680      	mov	r8, r0
 800a726:	e7bf      	b.n	800a6a8 <__ieee754_sqrt+0xd4>
 800a728:	7ff00000 	.word	0x7ff00000

0800a72c <fabs>:
 800a72c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a730:	4619      	mov	r1, r3
 800a732:	4770      	bx	lr

0800a734 <finite>:
 800a734:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800a738:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800a73c:	0fc0      	lsrs	r0, r0, #31
 800a73e:	4770      	bx	lr

0800a740 <matherr>:
 800a740:	2000      	movs	r0, #0
 800a742:	4770      	bx	lr

0800a744 <nan>:
 800a744:	2000      	movs	r0, #0
 800a746:	4901      	ldr	r1, [pc, #4]	; (800a74c <nan+0x8>)
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	7ff80000 	.word	0x7ff80000

0800a750 <rint>:
 800a750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a752:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a756:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800a75a:	f1bc 0f13 	cmp.w	ip, #19
 800a75e:	4604      	mov	r4, r0
 800a760:	460d      	mov	r5, r1
 800a762:	460b      	mov	r3, r1
 800a764:	4606      	mov	r6, r0
 800a766:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800a76a:	dc5a      	bgt.n	800a822 <rint+0xd2>
 800a76c:	f1bc 0f00 	cmp.w	ip, #0
 800a770:	da2b      	bge.n	800a7ca <rint+0x7a>
 800a772:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a776:	4302      	orrs	r2, r0
 800a778:	d023      	beq.n	800a7c2 <rint+0x72>
 800a77a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a77e:	4302      	orrs	r2, r0
 800a780:	4256      	negs	r6, r2
 800a782:	4316      	orrs	r6, r2
 800a784:	0c4b      	lsrs	r3, r1, #17
 800a786:	0b36      	lsrs	r6, r6, #12
 800a788:	4934      	ldr	r1, [pc, #208]	; (800a85c <rint+0x10c>)
 800a78a:	045b      	lsls	r3, r3, #17
 800a78c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800a790:	ea46 0503 	orr.w	r5, r6, r3
 800a794:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800a798:	4602      	mov	r2, r0
 800a79a:	462b      	mov	r3, r5
 800a79c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	f7f5 fcec 	bl	8000180 <__adddf3>
 800a7a8:	e9cd 0100 	strd	r0, r1, [sp]
 800a7ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7b0:	462b      	mov	r3, r5
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	f7f5 fce2 	bl	800017c <__aeabi_dsub>
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7be:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	b003      	add	sp, #12
 800a7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ca:	4a25      	ldr	r2, [pc, #148]	; (800a860 <rint+0x110>)
 800a7cc:	fa42 f20c 	asr.w	r2, r2, ip
 800a7d0:	4011      	ands	r1, r2
 800a7d2:	4301      	orrs	r1, r0
 800a7d4:	d0f5      	beq.n	800a7c2 <rint+0x72>
 800a7d6:	0852      	lsrs	r2, r2, #1
 800a7d8:	ea05 0102 	and.w	r1, r5, r2
 800a7dc:	ea50 0601 	orrs.w	r6, r0, r1
 800a7e0:	d00c      	beq.n	800a7fc <rint+0xac>
 800a7e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a7e6:	f1bc 0f13 	cmp.w	ip, #19
 800a7ea:	bf0c      	ite	eq
 800a7ec:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800a7f0:	2600      	movne	r6, #0
 800a7f2:	ea25 0202 	bic.w	r2, r5, r2
 800a7f6:	fa43 f30c 	asr.w	r3, r3, ip
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	4917      	ldr	r1, [pc, #92]	; (800a85c <rint+0x10c>)
 800a7fe:	4632      	mov	r2, r6
 800a800:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800a804:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a808:	4620      	mov	r0, r4
 800a80a:	4629      	mov	r1, r5
 800a80c:	f7f5 fcb8 	bl	8000180 <__adddf3>
 800a810:	e9cd 0100 	strd	r0, r1, [sp]
 800a814:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a818:	4622      	mov	r2, r4
 800a81a:	462b      	mov	r3, r5
 800a81c:	f7f5 fcae 	bl	800017c <__aeabi_dsub>
 800a820:	e008      	b.n	800a834 <rint+0xe4>
 800a822:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800a826:	dd08      	ble.n	800a83a <rint+0xea>
 800a828:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800a82c:	d1c9      	bne.n	800a7c2 <rint+0x72>
 800a82e:	4602      	mov	r2, r0
 800a830:	f7f5 fca6 	bl	8000180 <__adddf3>
 800a834:	4604      	mov	r4, r0
 800a836:	460d      	mov	r5, r1
 800a838:	e7c3      	b.n	800a7c2 <rint+0x72>
 800a83a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800a83e:	f04f 32ff 	mov.w	r2, #4294967295
 800a842:	40ca      	lsrs	r2, r1
 800a844:	4210      	tst	r0, r2
 800a846:	d0bc      	beq.n	800a7c2 <rint+0x72>
 800a848:	0852      	lsrs	r2, r2, #1
 800a84a:	4210      	tst	r0, r2
 800a84c:	bf1f      	itttt	ne
 800a84e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800a852:	ea20 0202 	bicne.w	r2, r0, r2
 800a856:	410e      	asrne	r6, r1
 800a858:	4316      	orrne	r6, r2
 800a85a:	e7cf      	b.n	800a7fc <rint+0xac>
 800a85c:	0800b398 	.word	0x0800b398
 800a860:	000fffff 	.word	0x000fffff
 800a864:	00000000 	.word	0x00000000

0800a868 <scalbn>:
 800a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86a:	4616      	mov	r6, r2
 800a86c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a870:	4604      	mov	r4, r0
 800a872:	460d      	mov	r5, r1
 800a874:	460b      	mov	r3, r1
 800a876:	b982      	cbnz	r2, 800a89a <scalbn+0x32>
 800a878:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a87c:	4303      	orrs	r3, r0
 800a87e:	d034      	beq.n	800a8ea <scalbn+0x82>
 800a880:	4b2d      	ldr	r3, [pc, #180]	; (800a938 <scalbn+0xd0>)
 800a882:	2200      	movs	r2, #0
 800a884:	f7f5 fe32 	bl	80004ec <__aeabi_dmul>
 800a888:	4b2c      	ldr	r3, [pc, #176]	; (800a93c <scalbn+0xd4>)
 800a88a:	4604      	mov	r4, r0
 800a88c:	429e      	cmp	r6, r3
 800a88e:	460d      	mov	r5, r1
 800a890:	da0d      	bge.n	800a8ae <scalbn+0x46>
 800a892:	a325      	add	r3, pc, #148	; (adr r3, 800a928 <scalbn+0xc0>)
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	e01c      	b.n	800a8d4 <scalbn+0x6c>
 800a89a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a89e:	42ba      	cmp	r2, r7
 800a8a0:	d109      	bne.n	800a8b6 <scalbn+0x4e>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	f7f5 fc6c 	bl	8000180 <__adddf3>
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	460d      	mov	r5, r1
 800a8ac:	e01d      	b.n	800a8ea <scalbn+0x82>
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a8b4:	3a36      	subs	r2, #54	; 0x36
 800a8b6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a8ba:	4432      	add	r2, r6
 800a8bc:	428a      	cmp	r2, r1
 800a8be:	dd0c      	ble.n	800a8da <scalbn+0x72>
 800a8c0:	4622      	mov	r2, r4
 800a8c2:	462b      	mov	r3, r5
 800a8c4:	a11a      	add	r1, pc, #104	; (adr r1, 800a930 <scalbn+0xc8>)
 800a8c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8ca:	f000 f83b 	bl	800a944 <copysign>
 800a8ce:	a318      	add	r3, pc, #96	; (adr r3, 800a930 <scalbn+0xc8>)
 800a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d4:	f7f5 fe0a 	bl	80004ec <__aeabi_dmul>
 800a8d8:	e7e6      	b.n	800a8a8 <scalbn+0x40>
 800a8da:	2a00      	cmp	r2, #0
 800a8dc:	dd08      	ble.n	800a8f0 <scalbn+0x88>
 800a8de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a8e6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8f0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a8f4:	da0b      	bge.n	800a90e <scalbn+0xa6>
 800a8f6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a8fa:	429e      	cmp	r6, r3
 800a8fc:	4622      	mov	r2, r4
 800a8fe:	462b      	mov	r3, r5
 800a900:	dce0      	bgt.n	800a8c4 <scalbn+0x5c>
 800a902:	a109      	add	r1, pc, #36	; (adr r1, 800a928 <scalbn+0xc0>)
 800a904:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a908:	f000 f81c 	bl	800a944 <copysign>
 800a90c:	e7c1      	b.n	800a892 <scalbn+0x2a>
 800a90e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a912:	3236      	adds	r2, #54	; 0x36
 800a914:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a918:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a91c:	4620      	mov	r0, r4
 800a91e:	4629      	mov	r1, r5
 800a920:	2200      	movs	r2, #0
 800a922:	4b07      	ldr	r3, [pc, #28]	; (800a940 <scalbn+0xd8>)
 800a924:	e7d6      	b.n	800a8d4 <scalbn+0x6c>
 800a926:	bf00      	nop
 800a928:	c2f8f359 	.word	0xc2f8f359
 800a92c:	01a56e1f 	.word	0x01a56e1f
 800a930:	8800759c 	.word	0x8800759c
 800a934:	7e37e43c 	.word	0x7e37e43c
 800a938:	43500000 	.word	0x43500000
 800a93c:	ffff3cb0 	.word	0xffff3cb0
 800a940:	3c900000 	.word	0x3c900000

0800a944 <copysign>:
 800a944:	b530      	push	{r4, r5, lr}
 800a946:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a94a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a94e:	ea42 0503 	orr.w	r5, r2, r3
 800a952:	4629      	mov	r1, r5
 800a954:	bd30      	pop	{r4, r5, pc}
	...

0800a958 <_init>:
 800a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95a:	bf00      	nop
 800a95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95e:	bc08      	pop	{r3}
 800a960:	469e      	mov	lr, r3
 800a962:	4770      	bx	lr

0800a964 <_fini>:
 800a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a966:	bf00      	nop
 800a968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a96a:	bc08      	pop	{r3}
 800a96c:	469e      	mov	lr, r3
 800a96e:	4770      	bx	lr
