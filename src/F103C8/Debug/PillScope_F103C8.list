
PillScope_F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a510  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  0800a620  0800a620  0001a620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b030  0800b030  00020364  2**0
                  CONTENTS
  4 .ARM          00000000  0800b030  0800b030  00020364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b030  0800b030  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b034  0800b034  0001b034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800b038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000158c  20000364  0800b39c  00020364  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018f0  0800b39c  000218f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036879  00000000  00000000  0002038d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000071d3  00000000  00000000  00056c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013389  00000000  00000000  0005ddd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001360  00000000  00000000  00071168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002b28  00000000  00000000  000724c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00020fcf  00000000  00000000  00074ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000193ec  00000000  00000000  00095fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009ea7f  00000000  00000000  000af3ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0014de2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000406c  00000000  00000000  0014dea8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000364 	.word	0x20000364
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a608 	.word	0x0800a608

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000368 	.word	0x20000368
 800014c:	0800a608 	.word	0x0800a608

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <LL_APB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <LL_APB1_GRP1_EnableClock+0x18>)
{
 8001172:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR, Periphs);
 8001174:	69da      	ldr	r2, [r3, #28]
 8001176:	4302      	orrs	r2, r0
 8001178:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	4018      	ands	r0, r3
 800117e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001180:	9b01      	ldr	r3, [sp, #4]
}
 8001182:	b002      	add	sp, #8
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <LL_APB2_GRP1_EnableClock+0x18>)
{
 800118e:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	4302      	orrs	r2, r0
 8001194:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4018      	ands	r0, r3
 800119a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800119c:	9b01      	ldr	r3, [sp, #4]
}
 800119e:	b002      	add	sp, #8
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000

080011a8 <LL_ADC_SetChannelSamplingTime.constprop.23>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 80011a8:	b570      	push	{r4, r5, r6, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011ae:	fa93 f3a3 	rbit	r3, r3
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80011b2:	fab3 f383 	clz	r3, r3
 80011b6:	f000 7400 	and.w	r4, r0, #33554432	; 0x2000000
 80011ba:	4d0f      	ldr	r5, [pc, #60]	; (80011f8 <LL_ADC_SetChannelSamplingTime.constprop.23+0x50>)
 80011bc:	40dc      	lsrs	r4, r3
  
  MODIFY_REG(*preg,
 80011be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80011c2:	f000 70f8 	and.w	r0, r0, #32505856	; 0x1f00000
 80011c6:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80011ca:	fa93 f1a3 	rbit	r1, r3
 80011ce:	fab1 f181 	clz	r1, r1
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	fab3 f383 	clz	r3, r3
 80011da:	2607      	movs	r6, #7
 80011dc:	fa20 f101 	lsr.w	r1, r0, r1
 80011e0:	40d8      	lsrs	r0, r3
 80011e2:	2306      	movs	r3, #6
 80011e4:	fa06 f101 	lsl.w	r1, r6, r1
 80011e8:	ea22 0201 	bic.w	r2, r2, r1
 80011ec:	fa03 f000 	lsl.w	r0, r3, r0
 80011f0:	4310      	orrs	r0, r2
 80011f2:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
 80011f8:	4001240c 	.word	0x4001240c

080011fc <NVIC_EncodePriority.constprop.25>:

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80011fc:	2000      	movs	r0, #0
 80011fe:	4770      	bx	lr

08001200 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <SystemClock_Config+0xa0>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001202:	b510      	push	{r4, lr}
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	f022 0207 	bic.w	r2, r2, #7
 800120a:	f042 0202 	orr.w	r2, r2, #2
 800120e:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	f002 0207 	and.w	r2, r2, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001216:	2a02      	cmp	r2, #2
 8001218:	d1fa      	bne.n	8001210 <SystemClock_Config+0x10>
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800121a:	4c22      	ldr	r4, [pc, #136]	; (80012a4 <SystemClock_Config+0xa4>)
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001222:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001224:	6823      	ldr	r3, [r4, #0]
  {
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001226:	039a      	lsls	r2, r3, #14
 8001228:	d5fc      	bpl.n	8001224 <SystemClock_Config+0x24>
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001230:	6023      	str	r3, [r4, #0]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001232:	6863      	ldr	r3, [r4, #4]
 8001234:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001238:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800123c:	6063      	str	r3, [r4, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001244:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001246:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_EnableCSS();
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001248:	019b      	lsls	r3, r3, #6
 800124a:	d5fc      	bpl.n	8001246 <SystemClock_Config+0x46>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800124c:	6863      	ldr	r3, [r4, #4]
 800124e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001252:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001254:	6863      	ldr	r3, [r4, #4]
 8001256:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800125a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001260:	6863      	ldr	r3, [r4, #4]
 8001262:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001266:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001268:	6863      	ldr	r3, [r4, #4]
 800126a:	f023 0303 	bic.w	r3, r3, #3
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001274:	6863      	ldr	r3, [r4, #4]
 8001276:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800127a:	2b08      	cmp	r3, #8
 800127c:	d1fa      	bne.n	8001274 <SystemClock_Config+0x74>
  {

  }
  LL_SetSystemCoreClock(72000000);
 800127e:	480a      	ldr	r0, [pc, #40]	; (80012a8 <SystemClock_Config+0xa8>)
 8001280:	f002 fac8 	bl	8003814 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001284:	2000      	movs	r0, #0
 8001286:	f000 fbeb 	bl	8001a60 <HAL_InitTick>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 800128a:	6863      	ldr	r3, [r4, #4]
 800128c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001294:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 8001296:	6863      	ldr	r3, [r4, #4]
 8001298:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800129c:	6063      	str	r3, [r4, #4]
  {
    Error_Handler();
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
}
 800129e:	bd10      	pop	{r4, pc}
 80012a0:	40022000 	.word	0x40022000
 80012a4:	40021000 	.word	0x40021000
 80012a8:	044aa200 	.word	0x044aa200

080012ac <main>:
{
 80012ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f04f 0814 	mov.w	r8, #20
{
 80012b4:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 80012b6:	f000 fbf7 	bl	8001aa8 <HAL_Init>
  SystemClock_Config();
 80012ba:	f7ff ffa1 	bl	8001200 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	4642      	mov	r2, r8
 80012c0:	2100      	movs	r1, #0
 80012c2:	a80e      	add	r0, sp, #56	; 0x38
 80012c4:	f007 fc1a 	bl	8008afc <memset>

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80012c8:	2010      	movs	r0, #16
 80012ca:	f7ff ff5f 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80012ce:	2020      	movs	r0, #32
 80012d0:	f7ff ff5c 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80012d4:	2004      	movs	r0, #4
 80012d6:	f7ff ff59 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80012da:	2008      	movs	r0, #8
 80012dc:	f7ff ff56 	bl	800118c <LL_APB2_GRP1_EnableClock>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80012e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e4:	48cc      	ldr	r0, [pc, #816]	; (8001618 <main+0x36c>)

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012e6:	2400      	movs	r4, #0
 80012e8:	6103      	str	r3, [r0, #16]
 80012ea:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012ec:	2301      	movs	r3, #1
 80012ee:	4acb      	ldr	r2, [pc, #812]	; (800161c <main+0x370>)
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012f2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012f6:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fa:	f001 fae5 	bl	80028c8 <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 80012fe:	4bc8      	ldr	r3, [pc, #800]	; (8001620 <main+0x374>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8001660 <main+0x3b4>
 8001304:	695a      	ldr	r2, [r3, #20]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	4ec7      	ldr	r6, [pc, #796]	; (8001624 <main+0x378>)
 8001308:	f042 0201 	orr.w	r2, r2, #1
 800130c:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800130e:	695b      	ldr	r3, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f8df a350 	ldr.w	sl, [pc, #848]	; 8001664 <main+0x3b8>
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800131a:	9b03      	ldr	r3, [sp, #12]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	f8d9 000c 	ldr.w	r0, [r9, #12]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8001320:	f44f 7b80 	mov.w	fp, #256	; 0x100
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001324:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001328:	f7ff ff68 	bl	80011fc <NVIC_EncodePriority.constprop.25>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	0100      	lsls	r0, r0, #4
 8001332:	b2c0      	uxtb	r0, r0
 8001334:	f886 030b 	strb.w	r0, [r6, #779]	; 0x30b
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001338:	4642      	mov	r2, r8
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	6033      	str	r3, [r6, #0]
 800133c:	4621      	mov	r1, r4
 800133e:	a809      	add	r0, sp, #36	; 0x24
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001340:	e9cd 4404 	strd	r4, r4, [sp, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001344:	9402      	str	r4, [sp, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001346:	f007 fbd9 	bl	8008afc <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	4642      	mov	r2, r8
 800134c:	4621      	mov	r1, r4
 800134e:	a80e      	add	r0, sp, #56	; 0x38
 8001350:	f007 fbd4 	bl	8008afc <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001354:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001358:	f7ff ff18 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800135c:	2004      	movs	r0, #4
 800135e:	f7ff ff15 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8001362:	f641 631e 	movw	r3, #7710	; 0x1e1e
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	a90e      	add	r1, sp, #56	; 0x38
 8001368:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800136a:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f001 faab 	bl	80028c8 <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001372:	4bad      	ldr	r3, [pc, #692]	; (8001628 <main+0x37c>)
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001374:	4dad      	ldr	r5, [pc, #692]	; (800162c <main+0x380>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800137c:	f022 0210 	bic.w	r2, r2, #16
 8001380:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001388:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	f042 0220 	orr.w	r2, r2, #32
 8001390:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001398:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013a0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013ac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80013b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013b8:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ba:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013be:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80013c2:	f7ff ff1b 	bl	80011fc <NVIC_EncodePriority.constprop.25>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	0100      	lsls	r0, r0, #4
 80013cc:	b2c0      	uxtb	r0, r0
 80013ce:	f886 0312 	strb.w	r0, [r6, #786]	; 0x312
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80013d2:	a904      	add	r1, sp, #16
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d4:	6033      	str	r3, [r6, #0]
 80013d6:	4628      	mov	r0, r5
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80013d8:	f8cd b014 	str.w	fp, [sp, #20]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80013dc:	9404      	str	r4, [sp, #16]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80013de:	f001 f9e7 	bl	80027b0 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80013e2:	a916      	add	r1, sp, #88	; 0x58
 80013e4:	f841 4d50 	str.w	r4, [r1, #-80]!
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80013e8:	4628      	mov	r0, r5
 80013ea:	f001 f9c5 	bl	8002778 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 80013ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013f2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80013f6:	4628      	mov	r0, r5
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 80013f8:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80013fc:	a909      	add	r1, sp, #36	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80013fe:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001402:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001406:	f001 f9e8 	bl	80027da <LL_ADC_REG_Init>
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDChannelGroup)
{
  MODIFY_REG(ADCx->CR1,
 800140a:	686b      	ldr	r3, [r5, #4]
 800140c:	4a88      	ldr	r2, [pc, #544]	; (8001630 <main+0x384>)
 800140e:	f44f 7b40 	mov.w	fp, #768	; 0x300
 8001412:	401a      	ands	r2, r3
 8001414:	4b87      	ldr	r3, [pc, #540]	; (8001634 <main+0x388>)
 8001416:	4313      	orrs	r3, r2
 8001418:	606b      	str	r3, [r5, #4]
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDThresholdsHighLow, uint32_t AWDThresholdValue)
{
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->HTR, AWDThresholdsHighLow);
  
  MODIFY_REG(*preg,
 800141a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->HTR, AWDThresholdsHighLow);
 800141c:	4a86      	ldr	r2, [pc, #536]	; (8001638 <main+0x38c>)
  MODIFY_REG(*preg,
 800141e:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001422:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001426:	626b      	str	r3, [r5, #36]	; 0x24
 8001428:	6853      	ldr	r3, [r2, #4]
 800142a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800142e:	f023 030f 	bic.w	r3, r3, #15
 8001432:	6053      	str	r3, [r2, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR1, LL_ADC_IT_AWD1);
 8001434:	686b      	ldr	r3, [r5, #4]
 8001436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143a:	606b      	str	r3, [r5, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800143c:	4b7f      	ldr	r3, [pc, #508]	; (800163c <main+0x390>)
 800143e:	fa9b f1ab 	rbit	r1, fp
 8001442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001446:	fab1 f181 	clz	r1, r1
 800144a:	fa22 f101 	lsr.w	r1, r2, r1
  MODIFY_REG(*preg,
 800144e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001452:	9201      	str	r2, [sp, #4]
  MODIFY_REG(*preg,
 8001454:	f020 001f 	bic.w	r0, r0, #31
 8001458:	f040 0011 	orr.w	r0, r0, #17
 800145c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 8001460:	4877      	ldr	r0, [pc, #476]	; (8001640 <main+0x394>)
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	f7ff fea0 	bl	80011a8 <LL_ADC_SetChannelSamplingTime.constprop.23>
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8001468:	68a9      	ldr	r1, [r5, #8]
 800146a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800146e:	60a9      	str	r1, [r5, #8]
 8001470:	fa9b f1ab 	rbit	r1, fp
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001474:	fab1 f181 	clz	r1, r1
 8001478:	9a01      	ldr	r2, [sp, #4]
  MODIFY_REG(*preg,
 800147a:	9b00      	ldr	r3, [sp, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800147c:	fa22 f101 	lsr.w	r1, r2, r1
  MODIFY_REG(*preg,
 8001480:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001484:	f420 7078 	bic.w	r0, r0, #992	; 0x3e0
 8001488:	f040 0020 	orr.w	r0, r0, #32
 800148c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 8001490:	486c      	ldr	r0, [pc, #432]	; (8001644 <main+0x398>)
 8001492:	f7ff fe89 	bl	80011a8 <LL_ADC_SetChannelSamplingTime.constprop.23>
 8001496:	fa9b fbab 	rbit	fp, fp
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800149a:	fabb fb8b 	clz	fp, fp
 800149e:	9a01      	ldr	r2, [sp, #4]
  MODIFY_REG(*preg,
 80014a0:	9b00      	ldr	r3, [sp, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80014a2:	fa22 fb0b 	lsr.w	fp, r2, fp
  MODIFY_REG(*preg,
 80014a6:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 80014aa:	4867      	ldr	r0, [pc, #412]	; (8001648 <main+0x39c>)
 80014ac:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80014b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014b4:	f843 202b 	str.w	r2, [r3, fp, lsl #2]
 80014b8:	f7ff fe76 	bl	80011a8 <LL_ADC_SetChannelSamplingTime.constprop.23>
  MX_USB_DEVICE_Init();
 80014bc:	f002 fec0 	bl	8004240 <MX_USB_DEVICE_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80014c0:	4642      	mov	r2, r8
 80014c2:	4621      	mov	r1, r4
 80014c4:	a804      	add	r0, sp, #16
 80014c6:	f007 fb19 	bl	8008afc <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80014ca:	4621      	mov	r1, r4
 80014cc:	2220      	movs	r2, #32
 80014ce:	a80e      	add	r0, sp, #56	; 0x38
 80014d0:	f007 fb14 	bl	8008afc <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	4642      	mov	r2, r8
 80014d6:	4621      	mov	r1, r4
 80014d8:	a809      	add	r0, sp, #36	; 0x24
 80014da:	f007 fb0f 	bl	8008afc <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80014de:	2001      	movs	r0, #1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80014e0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80014e4:	f7ff fe44 	bl	8001170 <LL_APB1_GRP1_EnableClock>
  TIM_InitStruct.Autoreload = 1000;
 80014e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80014ec:	a904      	add	r1, sp, #16
 80014ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80014f2:	e9cd 3406 	strd	r3, r4, [sp, #24]
  TIM_InitStruct.Prescaler = 0;
 80014f6:	f8ad 4010 	strh.w	r4, [sp, #16]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80014fa:	9405      	str	r4, [sp, #20]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80014fc:	f001 fabe 	bl	8002a7c <LL_TIM_Init>
 8001500:	682b      	ldr	r3, [r5, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001502:	f04f 0b09 	mov.w	fp, #9
 8001506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800150a:	602b      	str	r3, [r5, #0]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800150c:	68ab      	ldr	r3, [r5, #8]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800150e:	4628      	mov	r0, r5
 8001510:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001514:	f023 0307 	bic.w	r3, r3, #7
 8001518:	60ab      	str	r3, [r5, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800151a:	69ab      	ldr	r3, [r5, #24]
 800151c:	aa0e      	add	r2, sp, #56	; 0x38
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	61ab      	str	r3, [r5, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001524:	2360      	movs	r3, #96	; 0x60
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001526:	2101      	movs	r1, #1
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001528:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  TIM_OC_InitStruct.CompareValue = 0;
 800152c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001530:	9412      	str	r4, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001532:	f001 fadb 	bl	8002aec <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001536:	69ab      	ldr	r3, [r5, #24]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001538:	4628      	mov	r0, r5
 800153a:	f023 0304 	bic.w	r3, r3, #4
 800153e:	61ab      	str	r3, [r5, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001540:	69ab      	ldr	r3, [r5, #24]
 8001542:	aa0e      	add	r2, sp, #56	; 0x38
 8001544:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001548:	61ab      	str	r3, [r5, #24]
 800154a:	2110      	movs	r1, #16
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800154c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001550:	f001 facc 	bl	8002aec <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001554:	69ab      	ldr	r3, [r5, #24]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001556:	2004      	movs	r0, #4
 8001558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800155c:	61ab      	str	r3, [r5, #24]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800155e:	686b      	ldr	r3, [r5, #4]
 8001560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001564:	606b      	str	r3, [r5, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001566:	68ab      	ldr	r3, [r5, #8]
 8001568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800156c:	60ab      	str	r3, [r5, #8]
 800156e:	f7ff fe0d 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001572:	2008      	movs	r0, #8
 8001574:	f7ff fe0a 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001578:	4b34      	ldr	r3, [pc, #208]	; (800164c <main+0x3a0>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	a909      	add	r1, sp, #36	; 0x24
 800157c:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800157e:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001582:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f001 f99f 	bl	80028c8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800158a:	f640 0308 	movw	r3, #2056	; 0x808
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	a909      	add	r1, sp, #36	; 0x24
 8001590:	482f      	ldr	r0, [pc, #188]	; (8001650 <main+0x3a4>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001592:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001596:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f001 f995 	bl	80028c8 <LL_GPIO_Init>
  * @note  PARTIAL_1: Partial remap (CH1/ETR/PA15, CH2/PB3, CH3/PA2,  CH4/PA3)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial1_TIM2(void)
{
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1 | AFIO_MAPR_SWJ_CFG));
 800159e:	4a2d      	ldr	r2, [pc, #180]	; (8001654 <main+0x3a8>)
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80015a0:	4621      	mov	r1, r4
 80015a2:	6853      	ldr	r3, [r2, #4]
 80015a4:	a80e      	add	r0, sp, #56	; 0x38
 80015a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b6:	6053      	str	r3, [r2, #4]
 80015b8:	221c      	movs	r2, #28
 80015ba:	f007 fa9f 	bl	8008afc <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	4642      	mov	r2, r8
 80015c0:	4621      	mov	r1, r4
 80015c2:	a809      	add	r0, sp, #36	; 0x24
 80015c4:	f007 fa9a 	bl	8008afc <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80015c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015cc:	f7ff fdde 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80015d0:	2004      	movs	r0, #4
 80015d2:	f7ff fddb 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <main+0x3ac>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015da:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015de:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80015e0:	f04f 0b04 	mov.w	fp, #4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	4650      	mov	r0, sl
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015e6:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f001 f96d 	bl	80028c8 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <main+0x3b0>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	a909      	add	r1, sp, #36	; 0x24
 80015f2:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80015f4:	e9cd 3b09 	strd	r3, fp, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f001 f966 	bl	80028c8 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001600:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001604:	f7ff fdfa 	bl	80011fc <NVIC_EncodePriority.constprop.25>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001608:	2320      	movs	r3, #32
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	fa00 f00b 	lsl.w	r0, r0, fp
 800160e:	b2c0      	uxtb	r0, r0
 8001610:	f886 0325 	strb.w	r0, [r6, #805]	; 0x325
 8001614:	e028      	b.n	8001668 <main+0x3bc>
 8001616:	bf00      	nop
 8001618:	40011000 	.word	0x40011000
 800161c:	04200020 	.word	0x04200020
 8001620:	40021000 	.word	0x40021000
 8001624:	e000e100 	.word	0xe000e100
 8001628:	40020008 	.word	0x40020008
 800162c:	40012400 	.word	0x40012400
 8001630:	ff3ffde0 	.word	0xff3ffde0
 8001634:	00800201 	.word	0x00800201
 8001638:	40012424 	.word	0x40012424
 800163c:	4001242c 	.word	0x4001242c
 8001640:	81500011 	.word	0x81500011
 8001644:	02300001 	.word	0x02300001
 8001648:	02600002 	.word	0x02600002
 800164c:	04800080 	.word	0x04800080
 8001650:	40010c00 	.word	0x40010c00
 8001654:	40010000 	.word	0x40010000
 8001658:	04020002 	.word	0x04020002
 800165c:	04040004 	.word	0x04040004
 8001660:	e000ed00 	.word	0xe000ed00
 8001664:	40010800 	.word	0x40010800
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001668:	6073      	str	r3, [r6, #4]
  USART_InitStruct.BaudRate = 115200;
 800166a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800166e:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001672:	230c      	movs	r3, #12
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001674:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  LL_USART_Init(USART1, &USART_InitStruct);
 8001678:	4ba4      	ldr	r3, [pc, #656]	; (800190c <main+0x660>)
 800167a:	a90e      	add	r1, sp, #56	; 0x38
 800167c:	4618      	mov	r0, r3
 800167e:	9300      	str	r3, [sp, #0]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001680:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001684:	9414      	str	r4, [sp, #80]	; 0x50
  LL_USART_Init(USART1, &USART_InitStruct);
 8001686:	f001 faf9 	bl	8002c7c <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800168a:	9b00      	ldr	r3, [sp, #0]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800168c:	4621      	mov	r1, r4
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	a809      	add	r0, sp, #36	; 0x24
 8001692:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001696:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800169e:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	4642      	mov	r2, r8
 80016aa:	f007 fa27 	bl	8008afc <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80016ae:	4621      	mov	r1, r4
 80016b0:	2220      	movs	r2, #32
 80016b2:	a80e      	add	r0, sp, #56	; 0x38
 80016b4:	f007 fa22 	bl	8008afc <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80016b8:	4638      	mov	r0, r7
 80016ba:	f7ff fd59 	bl	8001170 <LL_APB1_GRP1_EnableClock>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80016be:	4b94      	ldr	r3, [pc, #592]	; (8001910 <main+0x664>)
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80016c0:	4f94      	ldr	r7, [pc, #592]	; (8001914 <main+0x668>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016c8:	f022 0210 	bic.w	r2, r2, #16
 80016cc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80016d4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	f042 0220 	orr.w	r2, r2, #32
 80016dc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016e4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ec:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80016f4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80016fc:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fe:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001702:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001706:	f7ff fd79 	bl	80011fc <NVIC_EncodePriority.constprop.25>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	fa00 f00b 	lsl.w	r0, r0, fp
 8001712:	b2c0      	uxtb	r0, r0
 8001714:	f886 031d 	strb.w	r0, [r6, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001718:	6033      	str	r3, [r6, #0]
  TIM_InitStruct.Prescaler = 1000;
 800171a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  TIM_InitStruct.Autoreload = 72;
 8001722:	2348      	movs	r3, #72	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001724:	a909      	add	r1, sp, #36	; 0x24
 8001726:	4638      	mov	r0, r7
  TIM_InitStruct.Autoreload = 72;
 8001728:	930b      	str	r3, [sp, #44]	; 0x2c
 800172a:	9300      	str	r3, [sp, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800172c:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800172e:	940c      	str	r4, [sp, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001730:	f001 f9a4 	bl	8002a7c <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001734:	683a      	ldr	r2, [r7, #0]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001736:	2101      	movs	r1, #1
 8001738:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800173c:	603a      	str	r2, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	4638      	mov	r0, r7
 8001742:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001746:	f022 0207 	bic.w	r2, r2, #7
 800174a:	60ba      	str	r2, [r7, #8]
 800174c:	aa0e      	add	r2, sp, #56	; 0x38
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800174e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitStruct.CompareValue = 0;
 8001752:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001756:	9412      	str	r4, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001758:	f001 f9c8 	bl	8002aec <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800175c:	69ba      	ldr	r2, [r7, #24]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800175e:	4621      	mov	r1, r4
 8001760:	f022 0204 	bic.w	r2, r2, #4
 8001764:	61ba      	str	r2, [r7, #24]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	a809      	add	r0, sp, #36	; 0x24
 800176a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800176e:	f042 0220 	orr.w	r2, r2, #32
 8001772:	607a      	str	r2, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800177a:	60ba      	str	r2, [r7, #8]
 800177c:	4642      	mov	r2, r8
 800177e:	f007 f9bd 	bl	8008afc <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001782:	2220      	movs	r2, #32
 8001784:	4621      	mov	r1, r4
 8001786:	a80e      	add	r0, sp, #56	; 0x38
 8001788:	f007 f9b8 	bl	8008afc <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800178c:	4658      	mov	r0, fp
 800178e:	f7ff fcef 	bl	8001170 <LL_APB1_GRP1_EnableClock>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001792:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001796:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800179a:	f7ff fd2f 	bl	80011fc <NVIC_EncodePriority.constprop.25>
  TIM_InitStruct.Prescaler = 1000;
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	fa00 f00b 	lsl.w	r0, r0, fp
 80017a6:	b2c0      	uxtb	r0, r0
 80017a8:	f886 031e 	strb.w	r0, [r6, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ac:	6035      	str	r5, [r6, #0]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80017ae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
  TIM_InitStruct.Prescaler = 1000;
 80017b2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  TIM_InitStruct.Autoreload = 72;
 80017b6:	9b00      	ldr	r3, [sp, #0]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80017b8:	a909      	add	r1, sp, #36	; 0x24
 80017ba:	4628      	mov	r0, r5
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80017bc:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80017c0:	940a      	str	r4, [sp, #40]	; 0x28
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80017c2:	f001 f95b 	bl	8002a7c <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80017c6:	682b      	ldr	r3, [r5, #0]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80017c8:	aa0e      	add	r2, sp, #56	; 0x38
 80017ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ce:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80017d0:	68ab      	ldr	r3, [r5, #8]
 80017d2:	2101      	movs	r1, #1
 80017d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017d8:	f023 0307 	bic.w	r3, r3, #7
 80017dc:	60ab      	str	r3, [r5, #8]
 80017de:	4628      	mov	r0, r5
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80017e0:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitStruct.CompareValue = 0;
 80017e4:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80017e8:	9412      	str	r4, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80017ea:	f001 f97f 	bl	8002aec <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80017ee:	69ab      	ldr	r3, [r5, #24]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80017f0:	4642      	mov	r2, r8
 80017f2:	f023 0304 	bic.w	r3, r3, #4
 80017f6:	61ab      	str	r3, [r5, #24]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80017f8:	686b      	ldr	r3, [r5, #4]
 80017fa:	4621      	mov	r1, r4
 80017fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001800:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001802:	68ab      	ldr	r3, [r5, #8]
 8001804:	a809      	add	r0, sp, #36	; 0x24
 8001806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800180a:	60ab      	str	r3, [r5, #8]
 800180c:	f007 f976 	bl	8008afc <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	4642      	mov	r2, r8
 8001812:	4621      	mov	r1, r4
 8001814:	a80e      	add	r0, sp, #56	; 0x38
 8001816:	f007 f971 	bl	8008afc <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800181a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800181e:	f7ff fcb5 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001822:	4658      	mov	r0, fp
 8001824:	f7ff fcb2 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001828:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <main+0x66c>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	a90e      	add	r1, sp, #56	; 0x38
 800182c:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800182e:	e9cd 3b0e 	strd	r3, fp, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f001 f849 	bl	80028c8 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001836:	4b39      	ldr	r3, [pc, #228]	; (800191c <main+0x670>)
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001838:	f505 3592 	add.w	r5, r5, #74752	; 0x12400
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001842:	f022 0210 	bic.w	r2, r2, #16
 8001846:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800184e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001852:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	f042 0220 	orr.w	r2, r2, #32
 800185a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001862:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800186a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001876:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800187e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001882:	601a      	str	r2, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	f8d9 000c 	ldr.w	r0, [r9, #12]
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001888:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800188c:	f7ff fcb6 	bl	80011fc <NVIC_EncodePriority.constprop.25>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001894:	fa00 f00b 	lsl.w	r0, r0, fp
 8001898:	b2c0      	uxtb	r0, r0
 800189a:	f886 0319 	strb.w	r0, [r6, #793]	; 0x319
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	6033      	str	r3, [r6, #0]
  TIM_InitStruct.Autoreload = 65535;
 80018a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80018a4:	a909      	add	r1, sp, #36	; 0x24
 80018a6:	4628      	mov	r0, r5
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80018a8:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  TIM_InitStruct.Prescaler = 0;
 80018ac:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80018b0:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_InitStruct.RepetitionCounter = 0;
 80018b2:	940d      	str	r4, [sp, #52]	; 0x34
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80018b4:	f001 f8e2 	bl	8002a7c <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80018b8:	682b      	ldr	r3, [r5, #0]
 80018ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018be:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80018c0:	68ab      	ldr	r3, [r5, #8]
 80018c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c6:	f023 0307 	bic.w	r3, r3, #7
 80018ca:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80018cc:	686b      	ldr	r3, [r5, #4]
 80018ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018d2:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80018d4:	68ab      	ldr	r3, [r5, #8]
 80018d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018da:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80018dc:	69ab      	ldr	r3, [r5, #24]
 80018de:	f023 0303 	bic.w	r3, r3, #3
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	61ab      	str	r3, [r5, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80018e8:	69ab      	ldr	r3, [r5, #24]
 80018ea:	f023 030c 	bic.w	r3, r3, #12
 80018ee:	61ab      	str	r3, [r5, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80018f0:	69ab      	ldr	r3, [r5, #24]
 80018f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018f6:	61ab      	str	r3, [r5, #24]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80018f8:	6a2b      	ldr	r3, [r5, #32]
 80018fa:	f023 030a 	bic.w	r3, r3, #10
 80018fe:	622b      	str	r3, [r5, #32]
  app_main();
 8001900:	f002 feda 	bl	80046b8 <app_main>
}
 8001904:	4620      	mov	r0, r4
 8001906:	b017      	add	sp, #92	; 0x5c
 8001908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800190c:	40013800 	.word	0x40013800
 8001910:	4002006c 	.word	0x4002006c
 8001914:	40000400 	.word	0x40000400
 8001918:	04010001 	.word	0x04010001
 800191c:	4002001c 	.word	0x4002001c

08001920 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001920:	4770      	bx	lr
	...

08001924 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_MspInit+0x84>)
{
 8001926:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001928:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800192a:	2101      	movs	r1, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	619a      	str	r2, [r3, #24]
 8001932:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001934:	f06f 000b 	mvn.w	r0, #11
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001938:	f002 0201 	and.w	r2, r2, #1
 800193c:	9200      	str	r2, [sp, #0]
 800193e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	69da      	ldr	r2, [r3, #28]
 8001942:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001946:	61da      	str	r2, [r3, #28]
 8001948:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800194a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001954:	f000 f8d8 	bl	8001b08 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2101      	movs	r1, #1
 800195c:	f06f 000a 	mvn.w	r0, #10
 8001960:	f000 f8d2 	bl	8001b08 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2101      	movs	r1, #1
 8001968:	f06f 0009 	mvn.w	r0, #9
 800196c:	f000 f8cc 	bl	8001b08 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2101      	movs	r1, #1
 8001974:	f06f 0004 	mvn.w	r0, #4
 8001978:	f000 f8c6 	bl	8001b08 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2101      	movs	r1, #1
 8001980:	f06f 0003 	mvn.w	r0, #3
 8001984:	f000 f8c0 	bl	8001b08 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	210f      	movs	r1, #15
 800198c:	f06f 0001 	mvn.w	r0, #1
 8001990:	f000 f8ba 	bl	8001b08 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001994:	4a05      	ldr	r2, [pc, #20]	; (80019ac <HAL_MspInit+0x88>)
 8001996:	6853      	ldr	r3, [r2, #4]
 8001998:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800199c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a2:	b003      	add	sp, #12
 80019a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010000 	.word	0x40010000

080019b0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019b0:	4770      	bx	lr

080019b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b2:	e7fe      	b.n	80019b2 <HardFault_Handler>

080019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	e7fe      	b.n	80019b8 <UsageFault_Handler>

080019ba <SVC_Handler>:
 80019ba:	4770      	bx	lr

080019bc <DebugMon_Handler>:
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:
 80019be:	4770      	bx	lr

080019c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c0:	f000 b884 	b.w	8001acc <HAL_IncTick>

080019c4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019c4:	4801      	ldr	r0, [pc, #4]	; (80019cc <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80019c6:	f000 b99d 	b.w	8001d04 <HAL_PCD_IRQHandler>
 80019ca:	bf00      	nop
 80019cc:	20001314 	.word	0x20001314

080019d0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <_sbrk+0x30>)
{
 80019d2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80019d4:	6819      	ldr	r1, [r3, #0]
{
 80019d6:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80019d8:	b909      	cbnz	r1, 80019de <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80019da:	490a      	ldr	r1, [pc, #40]	; (8001a04 <_sbrk+0x34>)
 80019dc:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	4909      	ldr	r1, [pc, #36]	; (8001a08 <_sbrk+0x38>)
 80019e2:	4c0a      	ldr	r4, [pc, #40]	; (8001a0c <_sbrk+0x3c>)
 80019e4:	4402      	add	r2, r0
 80019e6:	1b09      	subs	r1, r1, r4
 80019e8:	428a      	cmp	r2, r1
 80019ea:	d906      	bls.n	80019fa <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80019ec:	f007 f804 	bl	80089f8 <__errno>
 80019f0:	230c      	movs	r3, #12
 80019f2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80019f8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80019fa:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80019fc:	e7fc      	b.n	80019f8 <_sbrk+0x28>
 80019fe:	bf00      	nop
 8001a00:	20000380 	.word	0x20000380
 8001a04:	200018f0 	.word	0x200018f0
 8001a08:	20005000 	.word	0x20005000
 8001a0c:	00000400 	.word	0x00000400

08001a10 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a10:	4770      	bx	lr
	...

08001a14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a16:	e003      	b.n	8001a20 <LoopCopyDataInit>

08001a18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a1e:	3104      	adds	r1, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a20:	480a      	ldr	r0, [pc, #40]	; (8001a4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a28:	d3f6      	bcc.n	8001a18 <CopyDataInit>
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a2c:	e002      	b.n	8001a34 <LoopFillZerobss>

08001a2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a30:	f842 3b04 	str.w	r3, [r2], #4

08001a34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a38:	d3f9      	bcc.n	8001a2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a3a:	f7ff ffe9 	bl	8001a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f006 ffe1 	bl	8008a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a42:	f7ff fc33 	bl	80012ac <main>
  bx lr
 8001a46:	4770      	bx	lr
  ldr r3, =_sidata
 8001a48:	0800b038 	.word	0x0800b038
  ldr r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a50:	20000364 	.word	0x20000364
  ldr r2, =_sbss
 8001a54:	20000364 	.word	0x20000364
  ldr r3, = _ebss
 8001a58:	200018f0 	.word	0x200018f0

08001a5c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <CAN1_RX1_IRQHandler>
	...

08001a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_InitTick+0x3c>)
{
 8001a64:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a66:	7818      	ldrb	r0, [r3, #0]
 8001a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a70:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <HAL_InitTick+0x40>)
 8001a72:	6810      	ldr	r0, [r2, #0]
 8001a74:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a78:	f000 f888 	bl	8001b8c <HAL_SYSTICK_Config>
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	b958      	cbnz	r0, 8001a98 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a80:	2d0f      	cmp	r5, #15
 8001a82:	d809      	bhi.n	8001a98 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	4602      	mov	r2, r0
 8001a86:	4629      	mov	r1, r5
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f83c 	bl	8001b08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4620      	mov	r0, r4
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <HAL_InitTick+0x44>)
 8001a94:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001a96:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a98:	2001      	movs	r0, #1
 8001a9a:	e7fc      	b.n	8001a96 <HAL_InitTick+0x36>
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_Init+0x20>)
{
 8001aaa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aac:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aae:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab0:	f043 0310 	orr.w	r3, r3, #16
 8001ab4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab6:	f000 f815 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff ffd0 	bl	8001a60 <HAL_InitTick>
  HAL_MspInit();
 8001ac0:	f7ff ff30 	bl	8001924 <HAL_MspInit>
}
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	bd08      	pop	{r3, pc}
 8001ac8:	40022000 	.word	0x40022000

08001acc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001acc:	4a03      	ldr	r2, [pc, #12]	; (8001adc <HAL_IncTick+0x10>)
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <HAL_IncTick+0x14>)
 8001ad0:	6811      	ldr	r1, [r2, #0]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	440b      	add	r3, r1
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	2000067c 	.word	0x2000067c
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ae6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001af2:	041b      	lsls	r3, r3, #16
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001afe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001b00:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0a:	b570      	push	{r4, r5, r6, lr}
 8001b0c:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0e:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b12:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b16:	f1c4 0507 	rsb	r5, r4, #7
 8001b1a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b20:	bf28      	it	cs
 8001b22:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b24:	2b06      	cmp	r3, #6
 8001b26:	bf98      	it	ls
 8001b28:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2e:	bf88      	it	hi
 8001b30:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b32:	ea21 0303 	bic.w	r3, r1, r3
 8001b36:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b38:	fa06 f404 	lsl.w	r4, r6, r4
 8001b3c:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001b40:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b42:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	bfa8      	it	ge
 8001b48:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001b4c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	bfb8      	it	lt
 8001b52:	4a06      	ldrlt	r2, [pc, #24]	; (8001b6c <HAL_NVIC_SetPriority+0x64>)
 8001b54:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	bfab      	itete	ge
 8001b58:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b64:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b66:	bd70      	pop	{r4, r5, r6, pc}
 8001b68:	e000ed00 	.word	0xe000ed00
 8001b6c:	e000ed14 	.word	0xe000ed14

08001b70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b70:	2800      	cmp	r0, #0
 8001b72:	db08      	blt.n	8001b86 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b74:	2301      	movs	r3, #1
 8001b76:	0942      	lsrs	r2, r0, #5
 8001b78:	f000 001f 	and.w	r0, r0, #31
 8001b7c:	fa03 f000 	lsl.w	r0, r3, r0
 8001b80:	4b01      	ldr	r3, [pc, #4]	; (8001b88 <HAL_NVIC_EnableIRQ+0x18>)
 8001b82:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	3801      	subs	r0, #1
 8001b8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b92:	d20a      	bcs.n	8001baa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bba:	4604      	mov	r4, r0
{
 8001bbc:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001bbe:	b310      	cbz	r0, 8001c06 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bc0:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8001bc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bc8:	b91b      	cbnz	r3, 8001bd2 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bca:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bce:	f002 fc41 	bl	8004454 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bd2:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bd4:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bd6:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8001bd8:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bdc:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8001be0:	f001 f8ae 	bl	8002d40 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001be8:	682b      	ldr	r3, [r5, #0]
 8001bea:	4625      	mov	r5, r4
 8001bec:	6033      	str	r3, [r6, #0]
 8001bee:	1d27      	adds	r7, r4, #4
 8001bf0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001bf4:	f855 0b10 	ldr.w	r0, [r5], #16
 8001bf8:	f001 f892 	bl	8002d20 <USB_CoreInit>
 8001bfc:	4606      	mov	r6, r0
 8001bfe:	b120      	cbz	r0, 8001c0a <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c00:	2302      	movs	r3, #2
 8001c02:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8001c06:	2501      	movs	r5, #1
 8001c08:	e04b      	b.n	8001ca2 <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c0a:	4601      	mov	r1, r0
 8001c0c:	6820      	ldr	r0, [r4, #0]
 8001c0e:	f001 f8a1 	bl	8002d54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c12:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c14:	f04f 0e01 	mov.w	lr, #1
 8001c18:	2628      	movs	r6, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c1a:	4601      	mov	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c1c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8001c20:	b2c2      	uxtb	r2, r0
 8001c22:	4594      	cmp	ip, r2
 8001c24:	f100 0001 	add.w	r0, r0, #1
 8001c28:	d818      	bhi.n	8001c5c <HAL_PCD_Init+0xa4>
 8001c2a:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c2c:	2628      	movs	r6, #40	; 0x28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c32:	4584      	cmp	ip, r0
 8001c34:	f103 0301 	add.w	r3, r3, #1
 8001c38:	d81d      	bhi.n	8001c76 <HAL_PCD_Init+0xbe>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3c:	466e      	mov	r6, sp
 8001c3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	6033      	str	r3, [r6, #0]
 8001c44:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001c48:	6820      	ldr	r0, [r4, #0]
 8001c4a:	f001 f885 	bl	8002d58 <USB_DevInit>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	4605      	mov	r5, r0
 8001c52:	b1f8      	cbz	r0, 8001c94 <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c54:	2202      	movs	r2, #2
 8001c56:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
 8001c5a:	e7d4      	b.n	8001c06 <HAL_PCD_Init+0x4e>
 8001c5c:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001c60:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001c64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c68:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c6a:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c6e:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c72:	6419      	str	r1, [r3, #64]	; 0x40
 8001c74:	e7d4      	b.n	8001c20 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8001c76:	fb06 4200 	mla	r2, r6, r0, r4
 8001c7a:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001c7e:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c82:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c86:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c8a:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c8e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 8001c92:	e7cd      	b.n	8001c30 <HAL_PCD_Init+0x78>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001c94:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c98:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c9c:	6820      	ldr	r0, [r4, #0]
 8001c9e:	f001 fada 	bl	8003256 <USB_DevDisconnect>

  return HAL_OK;
}
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	b007      	add	sp, #28
 8001ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ca8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ca8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8001caa:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8001cae:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d010      	beq.n	8001cd6 <HAL_PCD_Start+0x2e>
 8001cb4:	2501      	movs	r5, #1
 8001cb6:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cba:	6800      	ldr	r0, [r0, #0]
 8001cbc:	f001 f837 	bl	8002d2e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f002 fcf7 	bl	80046b6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001cc8:	6820      	ldr	r0, [r4, #0]
 8001cca:	f001 fac2 	bl	8003252 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001cd4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	e7fc      	b.n	8001cd4 <HAL_PCD_Start+0x2c>

08001cda <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001cda:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8001cde:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001ce0:	2a01      	cmp	r2, #1
{
 8001ce2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001ce4:	d00b      	beq.n	8001cfe <HAL_PCD_SetAddress+0x24>
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001cec:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cf0:	6800      	ldr	r0, [r0, #0]
 8001cf2:	f001 faa8 	bl	8003246 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001cfc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001cfe:	2002      	movs	r0, #2
 8001d00:	e7fc      	b.n	8001cfc <HAL_PCD_SetAddress+0x22>
	...

08001d04 <HAL_PCD_IRQHandler>:
{
 8001d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d08:	4604      	mov	r4, r0
 8001d0a:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d0c:	6800      	ldr	r0, [r0, #0]
 8001d0e:	f001 faa4 	bl	800325a <USB_ReadInterrupts>
 8001d12:	0402      	lsls	r2, r0, #16
 8001d14:	d509      	bpl.n	8001d2a <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d16:	f8df 9828 	ldr.w	r9, [pc, #2088]	; 8002540 <HAL_PCD_IRQHandler+0x83c>
 8001d1a:	f8df 8828 	ldr.w	r8, [pc, #2088]	; 8002544 <HAL_PCD_IRQHandler+0x840>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d1e:	6820      	ldr	r0, [r4, #0]
 8001d20:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001d24:	041b      	lsls	r3, r3, #16
 8001d26:	f100 80bc 	bmi.w	8001ea2 <HAL_PCD_IRQHandler+0x19e>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d2a:	6820      	ldr	r0, [r4, #0]
 8001d2c:	f001 fa95 	bl	800325a <USB_ReadInterrupts>
 8001d30:	0543      	lsls	r3, r0, #21
 8001d32:	d50f      	bpl.n	8001d54 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d34:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001d36:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d38:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	0c1b      	lsrs	r3, r3, #16
 8001d44:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001d48:	f002 fbbf 	bl	80044ca <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7ff ffc3 	bl	8001cda <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d54:	6820      	ldr	r0, [r4, #0]
 8001d56:	f001 fa80 	bl	800325a <USB_ReadInterrupts>
 8001d5a:	0447      	lsls	r7, r0, #17
 8001d5c:	d508      	bpl.n	8001d70 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d5e:	6822      	ldr	r2, [r4, #0]
 8001d60:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d68:	041b      	lsls	r3, r3, #16
 8001d6a:	0c1b      	lsrs	r3, r3, #16
 8001d6c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d70:	6820      	ldr	r0, [r4, #0]
 8001d72:	f001 fa72 	bl	800325a <USB_ReadInterrupts>
 8001d76:	0486      	lsls	r6, r0, #18
 8001d78:	d508      	bpl.n	8001d8c <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d7a:	6822      	ldr	r2, [r4, #0]
 8001d7c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	0c1b      	lsrs	r3, r3, #16
 8001d88:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d8c:	6820      	ldr	r0, [r4, #0]
 8001d8e:	f001 fa64 	bl	800325a <USB_ReadInterrupts>
 8001d92:	04c5      	lsls	r5, r0, #19
 8001d94:	d51c      	bpl.n	8001dd0 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d96:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001d98:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d9a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001d9e:	f023 0304 	bic.w	r3, r3, #4
 8001da2:	041b      	lsls	r3, r3, #16
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001daa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001dae:	f023 0308 	bic.w	r3, r3, #8
 8001db2:	041b      	lsls	r3, r3, #16
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001dba:	f002 fba9 	bl	8004510 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001dbe:	6822      	ldr	r2, [r4, #0]
 8001dc0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	0c1b      	lsrs	r3, r3, #16
 8001dcc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001dd0:	6820      	ldr	r0, [r4, #0]
 8001dd2:	f001 fa42 	bl	800325a <USB_ReadInterrupts>
 8001dd6:	0500      	lsls	r0, r0, #20
 8001dd8:	d541      	bpl.n	8001e5e <HAL_PCD_IRQHandler+0x15a>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001de2:	f82d 1012 	strh.w	r1, [sp, r2, lsl #1]
 8001de6:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8001de8:	2a08      	cmp	r2, #8
 8001dea:	d1f8      	bne.n	8001dde <HAL_PCD_IRQHandler+0xda>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001dec:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001df0:	f042 0201 	orr.w	r2, r2, #1
 8001df4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001df8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	0412      	lsls	r2, r2, #16
 8001e02:	0c12      	lsrs	r2, r2, #16
 8001e04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001e08:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001e0c:	0551      	lsls	r1, r2, #21
 8001e0e:	d5fb      	bpl.n	8001e08 <HAL_PCD_IRQHandler+0x104>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e10:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e18:	0412      	lsls	r2, r2, #16
 8001e1a:	0c12      	lsrs	r2, r2, #16
 8001e1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001e20:	2200      	movs	r2, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001e22:	f83d 1012 	ldrh.w	r1, [sp, r2, lsl #1]
 8001e26:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8001e2a:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8001e2c:	2a08      	cmp	r2, #8
 8001e2e:	d1f8      	bne.n	8001e22 <HAL_PCD_IRQHandler+0x11e>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e30:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001e34:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e36:	f042 0208 	orr.w	r2, r2, #8
 8001e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e3e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e46:	0412      	lsls	r2, r2, #16
 8001e48:	0c12      	lsrs	r2, r2, #16
 8001e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e4e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001e52:	f042 0204 	orr.w	r2, r2, #4
 8001e56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001e5a:	f002 fb49 	bl	80044f0 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e5e:	6820      	ldr	r0, [r4, #0]
 8001e60:	f001 f9fb 	bl	800325a <USB_ReadInterrupts>
 8001e64:	0582      	lsls	r2, r0, #22
 8001e66:	d50b      	bpl.n	8001e80 <HAL_PCD_IRQHandler+0x17c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e68:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001e6a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e6c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001e7c:	f002 fb21 	bl	80044c2 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e80:	6820      	ldr	r0, [r4, #0]
 8001e82:	f001 f9ea 	bl	800325a <USB_ReadInterrupts>
 8001e86:	05c3      	lsls	r3, r0, #23
 8001e88:	d508      	bpl.n	8001e9c <HAL_PCD_IRQHandler+0x198>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e8a:	6822      	ldr	r2, [r4, #0]
 8001e8c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	0c1b      	lsrs	r3, r3, #16
 8001e98:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001e9c:	b005      	add	sp, #20
 8001e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8001ea2:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8001ea6:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8001ea8:	f011 060f 	ands.w	r6, r1, #15
 8001eac:	f040 80b1 	bne.w	8002012 <HAL_PCD_IRQHandler+0x30e>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001eb0:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eb4:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001eb6:	d12a      	bne.n	8001f0e <HAL_PCD_IRQHandler+0x20a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eb8:	ea09 0303 	and.w	r3, r9, r3
 8001ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec0:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ec2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001ec6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001eca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001ece:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001ed2:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001ed6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001edc:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001ede:	4413      	add	r3, r2
 8001ee0:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f002 fae5 	bl	80044b2 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ee8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f43f af16 	beq.w	8001d1e <HAL_PCD_IRQHandler+0x1a>
 8001ef2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ef4:	2a00      	cmp	r2, #0
 8001ef6:	f47f af12 	bne.w	8001d1e <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001efa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001efe:	6821      	ldr	r1, [r4, #0]
 8001f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f04:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f08:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001f0c:	e707      	b.n	8001d1e <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f0e:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f10:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8001f14:	d020      	beq.n	8001f58 <HAL_PCD_IRQHandler+0x254>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f16:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f1a:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f1e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f26:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001f2a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f2e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f36:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f3a:	f001 fc4f 	bl	80037dc <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f3e:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001f40:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f42:	8813      	ldrh	r3, [r2, #0]
 8001f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f48:	051b      	lsls	r3, r3, #20
 8001f4a:	0d1b      	lsrs	r3, r3, #20
 8001f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f50:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001f52:	f002 fa9f 	bl	8004494 <HAL_PCD_SetupStageCallback>
 8001f56:	e6e2      	b.n	8001d1e <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f58:	041f      	lsls	r7, r3, #16
 8001f5a:	f57f aee0 	bpl.w	8001d1e <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f5e:	8803      	ldrh	r3, [r0, #0]
 8001f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f64:	051b      	lsls	r3, r3, #20
 8001f66:	0d1b      	lsrs	r3, r3, #20
 8001f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f6c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f6e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f72:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001f76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f7a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001f7e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f86:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f8a:	b18b      	cbz	r3, 8001fb0 <HAL_PCD_IRQHandler+0x2ac>
 8001f8c:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8001f90:	b171      	cbz	r1, 8001fb0 <HAL_PCD_IRQHandler+0x2ac>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f92:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001f96:	f001 fc21 	bl	80037dc <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001f9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001f9e:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fa2:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001faa:	4620      	mov	r0, r4
 8001fac:	f002 fa78 	bl	80044a0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fb0:	6821      	ldr	r1, [r4, #0]
 8001fb2:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8001fb6:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001fba:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	b9bd      	cbnz	r5, 8001ff2 <HAL_PCD_IRQHandler+0x2ee>
 8001fc2:	5ac2      	ldrh	r2, [r0, r3]
 8001fc4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001fc8:	0412      	lsls	r2, r2, #16
 8001fca:	0c12      	lsrs	r2, r2, #16
 8001fcc:	52c2      	strh	r2, [r0, r3]
 8001fce:	5ac2      	ldrh	r2, [r0, r3]
 8001fd0:	ea48 0202 	orr.w	r2, r8, r2
 8001fd4:	b292      	uxth	r2, r2
 8001fd6:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fd8:	880b      	ldrh	r3, [r1, #0]
 8001fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fee:	800b      	strh	r3, [r1, #0]
 8001ff0:	e695      	b.n	8001d1e <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ff2:	2d3e      	cmp	r5, #62	; 0x3e
 8001ff4:	d805      	bhi.n	8002002 <HAL_PCD_IRQHandler+0x2fe>
 8001ff6:	086a      	lsrs	r2, r5, #1
 8001ff8:	07ee      	lsls	r6, r5, #31
 8001ffa:	bf48      	it	mi
 8001ffc:	3201      	addmi	r2, #1
 8001ffe:	0292      	lsls	r2, r2, #10
 8002000:	e7e8      	b.n	8001fd4 <HAL_PCD_IRQHandler+0x2d0>
 8002002:	096a      	lsrs	r2, r5, #5
 8002004:	06ed      	lsls	r5, r5, #27
 8002006:	bf08      	it	eq
 8002008:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800200c:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8002010:	e7e0      	b.n	8001fd4 <HAL_PCD_IRQHandler+0x2d0>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002012:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
 8002016:	b2bf      	uxth	r7, r7
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002018:	0439      	lsls	r1, r7, #16
 800201a:	f140 80f2 	bpl.w	8002202 <HAL_PCD_IRQHandler+0x4fe>
        if (ep->doublebuffer == 0U)
 800201e:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002020:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002024:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202c:	051b      	lsls	r3, r3, #20
 800202e:	0d1b      	lsrs	r3, r3, #20
 8002030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002034:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002038:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 800203c:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8002040:	b9ab      	cbnz	r3, 800206e <HAL_PCD_IRQHandler+0x36a>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002042:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002046:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800204a:	3306      	adds	r3, #6
 800204c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002050:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002054:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8002058:	2d00      	cmp	r5, #0
 800205a:	f000 80b6 	beq.w	80021ca <HAL_PCD_IRQHandler+0x4c6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800205e:	462b      	mov	r3, r5
 8002060:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002064:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002068:	f001 fbb8 	bl	80037dc <USB_ReadPMA>
 800206c:	e0ad      	b.n	80021ca <HAL_PCD_IRQHandler+0x4c6>
          if (ep->type == EP_TYPE_BULK)
 800206e:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8002072:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002076:	2b02      	cmp	r3, #2
 8002078:	f040 8089 	bne.w	800218e <HAL_PCD_IRQHandler+0x48a>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800207c:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 8002080:	ea4f 05c2 	mov.w	r5, r2, lsl #3
 8002084:	f8d1 3180 	ldr.w	r3, [r1, #384]	; 0x180
 8002088:	f007 0e40 	and.w	lr, r7, #64	; 0x40
 800208c:	d03e      	beq.n	800210c <HAL_PCD_IRQHandler+0x408>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800208e:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 8002092:	4455      	add	r5, sl
 8002094:	3502      	adds	r5, #2
 8002096:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 800209a:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 800209e:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
    }
    else
    {
      ep->xfer_len = 0U;
 80020a0:	bf8c      	ite	hi
 80020a2:	2300      	movhi	r3, #0
      ep->xfer_len -= count;
 80020a4:	1b5b      	subls	r3, r3, r5
      ep->xfer_len = 0U;
 80020a6:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
 80020aa:	2328      	movs	r3, #40	; 0x28
 80020ac:	fb03 4306 	mla	r3, r3, r6, r4
 80020b0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80020b4:	b96b      	cbnz	r3, 80020d2 <HAL_PCD_IRQHandler+0x3ce>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020d2:	f1be 0f00 	cmp.w	lr, #0
 80020d6:	d010      	beq.n	80020fa <HAL_PCD_IRQHandler+0x3f6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020d8:	2328      	movs	r3, #40	; 0x28
 80020da:	fb03 4306 	mla	r3, r3, r6, r4
 80020de:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 80020e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ea:	051b      	lsls	r3, r3, #20
 80020ec:	0d1b      	lsrs	r3, r3, #20
 80020ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80020fa:	2d00      	cmp	r5, #0
 80020fc:	d065      	beq.n	80021ca <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020fe:	2128      	movs	r1, #40	; 0x28
 8002100:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002104:	462b      	mov	r3, r5
 8002106:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800210a:	e7ab      	b.n	8002064 <HAL_PCD_IRQHandler+0x360>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800210c:	f8b0 b050 	ldrh.w	fp, [r0, #80]	; 0x50
 8002110:	445d      	add	r5, fp
 8002112:	3506      	adds	r5, #6
 8002114:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8002118:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 800211c:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
 800211e:	bf9c      	itt	ls
 8002120:	1b5b      	subls	r3, r3, r5
 8002122:	f8c1 3180 	strls.w	r3, [r1, #384]	; 0x180
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8002126:	f04f 0328 	mov.w	r3, #40	; 0x28
 800212a:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 800212e:	bf88      	it	hi
 8002130:	f8c1 a180 	strhi.w	sl, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002134:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002138:	b96b      	cbnz	r3, 8002156 <HAL_PCD_IRQHandler+0x452>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800213a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800213e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002146:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800214a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800214e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002152:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002156:	f1be 0f00 	cmp.w	lr, #0
 800215a:	d110      	bne.n	800217e <HAL_PCD_IRQHandler+0x47a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800215c:	2328      	movs	r3, #40	; 0x28
 800215e:	fb03 4306 	mla	r3, r3, r6, r4
 8002162:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8002166:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800216a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800216e:	051b      	lsls	r3, r3, #20
 8002170:	0d1b      	lsrs	r3, r3, #20
 8002172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002176:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800217a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 800217e:	b325      	cbz	r5, 80021ca <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002180:	2128      	movs	r1, #40	; 0x28
 8002182:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002186:	462b      	mov	r3, r5
 8002188:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800218c:	e76a      	b.n	8002064 <HAL_PCD_IRQHandler+0x360>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800218e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002196:	051b      	lsls	r3, r3, #20
 8002198:	0d1b      	lsrs	r3, r3, #20
 800219a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021a6:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 80021aa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021b4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021b8:	d05e      	beq.n	8002278 <HAL_PCD_IRQHandler+0x574>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021ba:	3202      	adds	r2, #2
 80021bc:	4413      	add	r3, r2
 80021be:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80021c2:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80021c6:	2d00      	cmp	r5, #0
 80021c8:	d19c      	bne.n	8002104 <HAL_PCD_IRQHandler+0x400>
        ep->xfer_count += count;
 80021ca:	2128      	movs	r1, #40	; 0x28
 80021cc:	4371      	muls	r1, r6
 80021ce:	1863      	adds	r3, r4, r1
 80021d0:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80021d4:	442a      	add	r2, r5
 80021d6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80021da:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80021de:	442a      	add	r2, r5
 80021e0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021e4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80021e8:	b11a      	cbz	r2, 80021f2 <HAL_PCD_IRQHandler+0x4ee>
 80021ea:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80021ee:	429d      	cmp	r5, r3
 80021f0:	d24b      	bcs.n	800228a <HAL_PCD_IRQHandler+0x586>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021f2:	2328      	movs	r3, #40	; 0x28
 80021f4:	fb03 4306 	mla	r3, r3, r6, r4
 80021f8:	4620      	mov	r0, r4
 80021fa:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80021fe:	f002 f94f 	bl	80044a0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002202:	063a      	lsls	r2, r7, #24
 8002204:	f57f ad8b 	bpl.w	8001d1e <HAL_PCD_IRQHandler+0x1a>
 8002208:	2528      	movs	r5, #40	; 0x28
 800220a:	6820      	ldr	r0, [r4, #0]
 800220c:	fb05 4506 	mla	r5, r5, r6, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002210:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002214:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8002218:	ea09 0303 	and.w	r3, r9, r3
 800221c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002220:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8002224:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8002228:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800222c:	2b02      	cmp	r3, #2
 800222e:	d101      	bne.n	8002234 <HAL_PCD_IRQHandler+0x530>
 8002230:	05fb      	lsls	r3, r7, #23
 8002232:	d43d      	bmi.n	80022b0 <HAL_PCD_IRQHandler+0x5ac>
          if (ep->xfer_len > TxByteNbre)
 8002234:	2328      	movs	r3, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002236:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 800223a:	fb03 4c06 	mla	ip, r3, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800223e:	f10e 0e02 	add.w	lr, lr, #2
 8002242:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
 8002246:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 800224a:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 800224e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002252:	4297      	cmp	r7, r2
            ep->xfer_len = 0U;
 8002254:	bf92      	itee	ls
 8002256:	2100      	movls	r1, #0
            ep->xfer_len -= TxByteNbre;
 8002258:	1abf      	subhi	r7, r7, r2
 800225a:	f8cc 7040 	strhi.w	r7, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800225e:	fb03 4706 	mla	r7, r3, r6, r4
            ep->xfer_len = 0U;
 8002262:	bf98      	it	ls
 8002264:	f8cc 1040 	strls.w	r1, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8002268:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800226a:	b9a9      	cbnz	r1, 8002298 <HAL_PCD_IRQHandler+0x594>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800226c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002270:	4620      	mov	r0, r4
 8002272:	f002 f91e 	bl	80044b2 <HAL_PCD_DataInStageCallback>
 8002276:	e552      	b.n	8001d1e <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002278:	3206      	adds	r2, #6
 800227a:	4413      	add	r3, r2
 800227c:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002280:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8002284:	2d00      	cmp	r5, #0
 8002286:	d0a0      	beq.n	80021ca <HAL_PCD_IRQHandler+0x4c6>
 8002288:	e77d      	b.n	8002186 <HAL_PCD_IRQHandler+0x482>
        ep = &hpcd->OUT_ep[epindex];
 800228a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800228e:	4421      	add	r1, r4
 8002290:	6820      	ldr	r0, [r4, #0]
 8002292:	f000 fff7 	bl	8003284 <USB_EPStartXfer>
 8002296:	e7b4      	b.n	8002202 <HAL_PCD_IRQHandler+0x4fe>
            ep->xfer_buff += TxByteNbre;
 8002298:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 800229a:	fb06 3303 	mla	r3, r6, r3, r3
            ep->xfer_buff += TxByteNbre;
 800229e:	4411      	add	r1, r2
 80022a0:	63f9      	str	r1, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 80022a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80022a4:	440a      	add	r2, r1
 80022a6:	647a      	str	r2, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022a8:	18e1      	adds	r1, r4, r3
 80022aa:	f000 ffeb 	bl	8003284 <USB_EPStartXfer>
 80022ae:	e536      	b.n	8001d1e <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022b0:	f017 0e40 	ands.w	lr, r7, #64	; 0x40
 80022b4:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 80022b8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80022ba:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80022be:	f000 809e 	beq.w	80023fe <HAL_PCD_IRQHandler+0x6fa>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022c2:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 80022c6:	b2bf      	uxth	r7, r7
 80022c8:	44f4      	add	ip, lr
 80022ca:	f10c 0c02 	add.w	ip, ip, #2
 80022ce:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]

    if (ep->xfer_len > TxByteNbre)
 80022d2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80022d6:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 80022d8:	bf2c      	ite	cs
 80022da:	2300      	movcs	r3, #0
      ep->xfer_len -= TxByteNbre;
 80022dc:	eba3 030c 	subcc.w	r3, r3, ip
      ep->xfer_len = 0U;
 80022e0:	642b      	str	r3, [r5, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022e2:	2328      	movs	r3, #40	; 0x28
 80022e4:	fb03 4306 	mla	r3, r3, r6, r4
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	b9ab      	cbnz	r3, 8002318 <HAL_PCD_IRQHandler+0x614>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022ec:	4620      	mov	r0, r4
 80022ee:	f002 f8e0 	bl	80044b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022f2:	2f00      	cmp	r7, #0
 80022f4:	f000 80a1 	beq.w	800243a <HAL_PCD_IRQHandler+0x736>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022f8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80022fc:	6822      	ldr	r2, [r4, #0]
 80022fe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002306:	051b      	lsls	r3, r3, #20
 8002308:	0d1b      	lsrs	r3, r3, #20
 800230a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800230e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002312:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002316:	e090      	b.n	800243a <HAL_PCD_IRQHandler+0x736>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002318:	b15f      	cbz	r7, 8002332 <HAL_PCD_IRQHandler+0x62e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800231a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800231e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002322:	051b      	lsls	r3, r3, #20
 8002324:	0d1b      	lsrs	r3, r3, #20
 8002326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800232a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002332:	2328      	movs	r3, #40	; 0x28
 8002334:	fb03 4306 	mla	r3, r3, r6, r4
 8002338:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800233c:	2a01      	cmp	r2, #1
 800233e:	d17c      	bne.n	800243a <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 8002340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8002342:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8002344:	4462      	add	r2, ip
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002348:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 800234a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800234c:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 800234e:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8002350:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002352:	d325      	bcc.n	80023a0 <HAL_PCD_IRQHandler+0x69c>
          ep->xfer_len_db -= len;
 8002354:	1abf      	subs	r7, r7, r2
 8002356:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002358:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 800235c:	b293      	uxth	r3, r2
 800235e:	2f00      	cmp	r7, #0
 8002360:	d141      	bne.n	80023e6 <HAL_PCD_IRQHandler+0x6e2>
 8002362:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8002366:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 800236a:	44bc      	add	ip, r7
 800236c:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 8002370:	013f      	lsls	r7, r7, #4
 8002372:	bb02      	cbnz	r2, 80023b6 <HAL_PCD_IRQHandler+0x6b2>
 8002374:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8002378:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800237c:	0412      	lsls	r2, r2, #16
 800237e:	0c12      	lsrs	r2, r2, #16
 8002380:	f82c 2007 	strh.w	r2, [ip, r7]
 8002384:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8002388:	ea48 0202 	orr.w	r2, r8, r2
 800238c:	b292      	uxth	r2, r2
 800238e:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002392:	2228      	movs	r2, #40	; 0x28
 8002394:	fb02 4606 	mla	r6, r2, r6, r4
 8002398:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800239a:	f000 ff63 	bl	8003264 <USB_WritePMA>
 800239e:	e04c      	b.n	800243a <HAL_PCD_IRQHandler+0x736>
        else if (ep->xfer_len_db == 0U)
 80023a0:	b91f      	cbnz	r7, 80023aa <HAL_PCD_IRQHandler+0x6a6>
          ep->xfer_fill_db = 0U;
 80023a2:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 80023a6:	4662      	mov	r2, ip
 80023a8:	e7d6      	b.n	8002358 <HAL_PCD_IRQHandler+0x654>
          ep->xfer_fill_db = 0U;
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80023b0:	649a      	str	r2, [r3, #72]	; 0x48
 80023b2:	463a      	mov	r2, r7
 80023b4:	e7d0      	b.n	8002358 <HAL_PCD_IRQHandler+0x654>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023b6:	2a3e      	cmp	r2, #62	; 0x3e
 80023b8:	d80c      	bhi.n	80023d4 <HAL_PCD_IRQHandler+0x6d0>
 80023ba:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80023be:	07d2      	lsls	r2, r2, #31
 80023c0:	bf48      	it	mi
 80023c2:	f10e 0e01 	addmi.w	lr, lr, #1
 80023c6:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80023ca:	fa1f fe8e 	uxth.w	lr, lr
 80023ce:	f82c e007 	strh.w	lr, [ip, r7]
 80023d2:	e7de      	b.n	8002392 <HAL_PCD_IRQHandler+0x68e>
 80023d4:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 80023d8:	06d2      	lsls	r2, r2, #27
 80023da:	bf08      	it	eq
 80023dc:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 80023e0:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 80023e4:	e7f1      	b.n	80023ca <HAL_PCD_IRQHandler+0x6c6>
 80023e6:	2f01      	cmp	r7, #1
 80023e8:	d1d3      	bne.n	8002392 <HAL_PCD_IRQHandler+0x68e>
 80023ea:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80023ee:	f200 4704 	addw	r7, r0, #1028	; 0x404
 80023f2:	4417      	add	r7, r2
 80023f4:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	52bb      	strh	r3, [r7, r2]
 80023fc:	e7c9      	b.n	8002392 <HAL_PCD_IRQHandler+0x68e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023fe:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 8002402:	b2bf      	uxth	r7, r7
 8002404:	44d4      	add	ip, sl
 8002406:	f10c 0c06 	add.w	ip, ip, #6
 800240a:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 800240e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002412:	459c      	cmp	ip, r3
      ep->xfer_len -= TxByteNbre;
 8002414:	bf9c      	itt	ls
 8002416:	eba3 030c 	subls.w	r3, r3, ip
 800241a:	642b      	strls	r3, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800241c:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002420:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 8002424:	bf88      	it	hi
 8002426:	f8c5 e040 	strhi.w	lr, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	b9bb      	cbnz	r3, 800245e <HAL_PCD_IRQHandler+0x75a>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800242e:	4620      	mov	r0, r4
 8002430:	f002 f83f 	bl	80044b2 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002434:	2f00      	cmp	r7, #0
 8002436:	f43f af5f 	beq.w	80022f8 <HAL_PCD_IRQHandler+0x5f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800243a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800243e:	6822      	ldr	r2, [r4, #0]
 8002440:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800244c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002458:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800245c:	e45f      	b.n	8001d1e <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800245e:	b95f      	cbnz	r7, 8002478 <HAL_PCD_IRQHandler+0x774>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002460:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002468:	051b      	lsls	r3, r3, #20
 800246a:	0d1b      	lsrs	r3, r3, #20
 800246c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002474:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002478:	2328      	movs	r3, #40	; 0x28
 800247a:	fb03 4306 	mla	r3, r3, r6, r4
 800247e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8002482:	2a01      	cmp	r2, #1
 8002484:	d1d9      	bne.n	800243a <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 8002486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8002488:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800248a:	4462      	add	r2, ip
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800248e:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8002490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8002492:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8002494:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8002496:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002498:	d323      	bcc.n	80024e2 <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db -= len;
 800249a:	1abf      	subs	r7, r7, r2
 800249c:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800249e:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 80024a2:	b293      	uxth	r3, r2
 80024a4:	2f00      	cmp	r7, #0
 80024a6:	d13f      	bne.n	8002528 <HAL_PCD_IRQHandler+0x824>
 80024a8:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80024ac:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 80024b0:	44bc      	add	ip, r7
 80024b2:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 80024b6:	013f      	lsls	r7, r7, #4
 80024b8:	b9f2      	cbnz	r2, 80024f8 <HAL_PCD_IRQHandler+0x7f4>
 80024ba:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80024be:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80024c2:	0412      	lsls	r2, r2, #16
 80024c4:	0c12      	lsrs	r2, r2, #16
 80024c6:	f82c 2007 	strh.w	r2, [ip, r7]
 80024ca:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80024ce:	ea48 0202 	orr.w	r2, r8, r2
 80024d2:	b292      	uxth	r2, r2
 80024d4:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024d8:	2228      	movs	r2, #40	; 0x28
 80024da:	fb02 4606 	mla	r6, r2, r6, r4
 80024de:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80024e0:	e75b      	b.n	800239a <HAL_PCD_IRQHandler+0x696>
        else if (ep->xfer_len_db == 0U)
 80024e2:	b91f      	cbnz	r7, 80024ec <HAL_PCD_IRQHandler+0x7e8>
          ep->xfer_fill_db = 0U;
 80024e4:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 80024e8:	4662      	mov	r2, ip
 80024ea:	e7d8      	b.n	800249e <HAL_PCD_IRQHandler+0x79a>
          ep->xfer_len_db = 0U;
 80024ec:	2200      	movs	r2, #0
 80024ee:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80024f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80024f4:	463a      	mov	r2, r7
 80024f6:	e7d2      	b.n	800249e <HAL_PCD_IRQHandler+0x79a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024f8:	2a3e      	cmp	r2, #62	; 0x3e
 80024fa:	d80c      	bhi.n	8002516 <HAL_PCD_IRQHandler+0x812>
 80024fc:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8002500:	07d2      	lsls	r2, r2, #31
 8002502:	bf48      	it	mi
 8002504:	f10e 0e01 	addmi.w	lr, lr, #1
 8002508:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 800250c:	fa1f fe8e 	uxth.w	lr, lr
 8002510:	f82c e007 	strh.w	lr, [ip, r7]
 8002514:	e7e0      	b.n	80024d8 <HAL_PCD_IRQHandler+0x7d4>
 8002516:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800251a:	06d2      	lsls	r2, r2, #27
 800251c:	bf08      	it	eq
 800251e:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8002522:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8002526:	e7f1      	b.n	800250c <HAL_PCD_IRQHandler+0x808>
 8002528:	2f01      	cmp	r7, #1
 800252a:	d1d5      	bne.n	80024d8 <HAL_PCD_IRQHandler+0x7d4>
 800252c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002530:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 8002534:	4417      	add	r7, r2
 8002536:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800253a:	0112      	lsls	r2, r2, #4
 800253c:	52bb      	strh	r3, [r7, r2]
 800253e:	e7cb      	b.n	80024d8 <HAL_PCD_IRQHandler+0x7d4>
 8002540:	ffff8f0f 	.word	0xffff8f0f
 8002544:	ffff8000 	.word	0xffff8000

08002548 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002548:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800254c:	b570      	push	{r4, r5, r6, lr}
 800254e:	f001 0507 	and.w	r5, r1, #7
 8002552:	4604      	mov	r4, r0
 8002554:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8002558:	d01c      	beq.n	8002594 <HAL_PCD_EP_Open+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800255a:	fb05 1101 	mla	r1, r5, r1, r1
 800255e:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002560:	2001      	movs	r0, #1
 8002562:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 8002564:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8002566:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002568:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 800256a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800256c:	b102      	cbz	r2, 8002570 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 800256e:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8002570:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002572:	bf04      	itt	eq
 8002574:	2300      	moveq	r3, #0
 8002576:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8002578:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800257c:	2b01      	cmp	r3, #1
 800257e:	d013      	beq.n	80025a8 <HAL_PCD_EP_Open+0x60>
 8002580:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002582:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002584:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002588:	f000 fbfa 	bl	8002d80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800258c:	2000      	movs	r0, #0
 800258e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002592:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8002594:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002596:	fb01 f005 	mul.w	r0, r1, r5
 800259a:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 800259e:	4420      	add	r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025a0:	4421      	add	r1, r4
    ep->is_in = 0U;
 80025a2:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 80025a6:	e7dd      	b.n	8002564 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 80025a8:	2002      	movs	r0, #2
 80025aa:	e7f2      	b.n	8002592 <HAL_PCD_EP_Open+0x4a>

080025ac <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80025ac:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80025b0:	b510      	push	{r4, lr}
 80025b2:	f001 0207 	and.w	r2, r1, #7
 80025b6:	4604      	mov	r4, r0
 80025b8:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 80025bc:	d013      	beq.n	80025e6 <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 80025be:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c0:	fb02 1101 	mla	r1, r2, r1, r1
 80025c4:	4401      	add	r1, r0
    ep->is_in = 1U;
 80025c6:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025c8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80025ca:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d013      	beq.n	80025fa <HAL_PCD_EP_Close+0x4e>
 80025d2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025d4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80025d6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025da:	f000 fd0f 	bl	8002ffc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025de:	2000      	movs	r0, #0
 80025e0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80025e4:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e6:	fb01 f302 	mul.w	r3, r1, r2
 80025ea:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80025ee:	4401      	add	r1, r0
    ep->is_in = 0U;
 80025f0:	4403      	add	r3, r0
 80025f2:	2000      	movs	r0, #0
 80025f4:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80025f8:	e7e6      	b.n	80025c8 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 80025fa:	2002      	movs	r0, #2
 80025fc:	e7f2      	b.n	80025e4 <HAL_PCD_EP_Close+0x38>

080025fe <HAL_PCD_EP_Receive>:
{
 80025fe:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8002600:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 8002602:	2600      	movs	r6, #0
 8002604:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002608:	434c      	muls	r4, r1
 800260a:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 800260c:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002610:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002614:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8002616:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 800261a:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 800261e:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8002622:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002626:	6800      	ldr	r0, [r0, #0]
 8002628:	f000 fe2c 	bl	8003284 <USB_EPStartXfer>
}
 800262c:	4630      	mov	r0, r6
 800262e:	bd70      	pop	{r4, r5, r6, pc}

08002630 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002630:	2328      	movs	r3, #40	; 0x28
 8002632:	f001 0107 	and.w	r1, r1, #7
 8002636:	fb03 0101 	mla	r1, r3, r1, r0
}
 800263a:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 800263e:	4770      	bx	lr

08002640 <HAL_PCD_EP_Transmit>:
{
 8002640:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8002642:	2528      	movs	r5, #40	; 0x28
 8002644:	f001 0107 	and.w	r1, r1, #7
 8002648:	fb05 0401 	mla	r4, r5, r1, r0
  ep->xfer_count = 0U;
 800264c:	2600      	movs	r6, #0
  ep->xfer_len = len;
 800264e:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8002652:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002654:	fb01 5505 	mla	r5, r1, r5, r5
  ep->num = ep_addr & EP_ADDR_MSK;
 8002658:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_fill_db = 1U;
 800265c:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002660:	1941      	adds	r1, r0, r5
  ep->xfer_len_db = len;
 8002662:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8002664:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8002666:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800266a:	6800      	ldr	r0, [r0, #0]
 800266c:	f000 fe0a 	bl	8003284 <USB_EPStartXfer>
}
 8002670:	4630      	mov	r0, r6
 8002672:	bd70      	pop	{r4, r5, r6, pc}

08002674 <HAL_PCD_EP_SetStall>:
{
 8002674:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002676:	6843      	ldr	r3, [r0, #4]
 8002678:	f001 0507 	and.w	r5, r1, #7
 800267c:	429d      	cmp	r5, r3
{
 800267e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002680:	d828      	bhi.n	80026d4 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8002682:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002686:	f04f 0328 	mov.w	r3, #40	; 0x28
 800268a:	d01a      	beq.n	80026c2 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268c:	fb05 3303 	mla	r3, r5, r3, r3
 8002690:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8002692:	2301      	movs	r3, #1
 8002694:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8002696:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002698:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800269a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800269c:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d019      	beq.n	80026d8 <HAL_PCD_EP_SetStall+0x64>
 80026a4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026a8:	6820      	ldr	r0, [r4, #0]
 80026aa:	f000 fd6d 	bl	8003188 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026ae:	b925      	cbnz	r5, 80026ba <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80026b0:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80026b4:	6820      	ldr	r0, [r4, #0]
 80026b6:	f000 fdd3 	bl	8003260 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80026c0:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80026c2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80026c4:	434b      	muls	r3, r1
 80026c6:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80026ca:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80026cc:	4401      	add	r1, r0
    ep->is_in = 0U;
 80026ce:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 80026d2:	e7e0      	b.n	8002696 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80026d4:	2001      	movs	r0, #1
 80026d6:	e7f3      	b.n	80026c0 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80026d8:	2002      	movs	r0, #2
 80026da:	e7f1      	b.n	80026c0 <HAL_PCD_EP_SetStall+0x4c>

080026dc <HAL_PCD_EP_ClrStall>:
{
 80026dc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026de:	6843      	ldr	r3, [r0, #4]
 80026e0:	f001 020f 	and.w	r2, r1, #15
 80026e4:	429a      	cmp	r2, r3
{
 80026e6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026e8:	d826      	bhi.n	8002738 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80026ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80026ee:	f001 0207 	and.w	r2, r1, #7
 80026f2:	f04f 0128 	mov.w	r1, #40	; 0x28
 80026f6:	d015      	beq.n	8002724 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 80026f8:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fa:	fb02 1101 	mla	r1, r2, r1, r1
 80026fe:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002700:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 8002702:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002704:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8002706:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002708:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800270c:	2b01      	cmp	r3, #1
 800270e:	d015      	beq.n	800273c <HAL_PCD_EP_ClrStall+0x60>
 8002710:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002712:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002714:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002718:	f000 fd52 	bl	80031c0 <USB_EPClearStall>
  return HAL_OK;
 800271c:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800271e:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8002722:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002724:	fb01 f302 	mul.w	r3, r1, r2
 8002728:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800272c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800272e:	4403      	add	r3, r0
 8002730:	2000      	movs	r0, #0
 8002732:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8002736:	e7e4      	b.n	8002702 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8002738:	2001      	movs	r0, #1
 800273a:	e7f2      	b.n	8002722 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 800273c:	2002      	movs	r0, #2
 800273e:	e7f0      	b.n	8002722 <HAL_PCD_EP_ClrStall+0x46>

08002740 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002740:	b510      	push	{r4, lr}
 8002742:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002744:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002748:	bf1b      	ittet	ne
 800274a:	f001 0107 	andne.w	r1, r1, #7
 800274e:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002752:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002756:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8002758:	bf08      	it	eq
 800275a:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
 800275e:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002760:	b91a      	cbnz	r2, 800276a <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002762:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002764:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8002766:	2000      	movs	r0, #0
 8002768:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 800276a:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800276c:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 800276e:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002770:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002772:	8143      	strh	r3, [r0, #10]
 8002774:	e7f7      	b.n	8002766 <HAL_PCDEx_PMAConfig+0x26>
	...

08002778 <LL_ADC_CommonInit>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <LL_ADC_CommonInit+0x34>)
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002780:	689b      	ldr	r3, [r3, #8]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002782:	4313      	orrs	r3, r2
 8002784:	f013 0201 	ands.w	r2, r3, #1
 8002788:	d10e      	bne.n	80027a8 <LL_ADC_CommonInit+0x30>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800278a:	680b      	ldr	r3, [r1, #0]
 800278c:	b133      	cbz	r3, 800279c <LL_ADC_CommonInit+0x24>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800278e:	6841      	ldr	r1, [r0, #4]
 8002790:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8002794:	430b      	orrs	r3, r1
 8002796:	6043      	str	r3, [r0, #4]
  ErrorStatus status = SUCCESS;
 8002798:	4610      	mov	r0, r2
 800279a:	4770      	bx	lr
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800279c:	6842      	ldr	r2, [r0, #4]
 800279e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80027a2:	6042      	str	r2, [r0, #4]
  ErrorStatus status = SUCCESS;
 80027a4:	4618      	mov	r0, r3
 80027a6:	4770      	bx	lr
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80027a8:	2001      	movs	r0, #1
  }
  
  return status;
}
 80027aa:	4770      	bx	lr
 80027ac:	40012400 	.word	0x40012400

080027b0 <LL_ADC_Init>:
 80027b0:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80027b2:	b510      	push	{r4, lr}
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80027b4:	f013 0301 	ands.w	r3, r3, #1
 80027b8:	d10d      	bne.n	80027d6 <LL_ADC_Init+0x26>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80027ba:	6842      	ldr	r2, [r0, #4]
 80027bc:	684c      	ldr	r4, [r1, #4]
 80027be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c2:	4322      	orrs	r2, r4
 80027c4:	6042      	str	r2, [r0, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80027c6:	6882      	ldr	r2, [r0, #8]
 80027c8:	6809      	ldr	r1, [r1, #0]
 80027ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ce:	430a      	orrs	r2, r1
 80027d0:	6082      	str	r2, [r0, #8]
  ErrorStatus status = SUCCESS;
 80027d2:	4618      	mov	r0, r3
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80027d4:	bd10      	pop	{r4, pc}
    status = ERROR;
 80027d6:	2001      	movs	r0, #1
 80027d8:	e7fc      	b.n	80027d4 <LL_ADC_Init+0x24>

080027da <LL_ADC_REG_Init>:
 80027da:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80027dc:	b510      	push	{r4, lr}
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80027de:	07db      	lsls	r3, r3, #31
 80027e0:	d41b      	bmi.n	800281a <LL_ADC_REG_Init+0x40>
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CR1,
 80027e2:	6843      	ldr	r3, [r0, #4]
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80027e4:	684a      	ldr	r2, [r1, #4]
      MODIFY_REG(ADCx->CR1,
 80027e6:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80027ea:	b112      	cbz	r2, 80027f2 <LL_ADC_REG_Init+0x18>
      MODIFY_REG(ADCx->CR1,
 80027ec:	688c      	ldr	r4, [r1, #8]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	4323      	orrs	r3, r4
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80027f2:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80027f4:	6883      	ldr	r3, [r0, #8]
 80027f6:	680c      	ldr	r4, [r1, #0]
 80027f8:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80027fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002800:	4323      	orrs	r3, r4
 8002802:	68cc      	ldr	r4, [r1, #12]
 8002804:	6909      	ldr	r1, [r1, #16]
 8002806:	4323      	orrs	r3, r4
 8002808:	430b      	orrs	r3, r1
 800280a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800280c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800280e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002812:	4313      	orrs	r3, r2
 8002814:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 8002816:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8002818:	bd10      	pop	{r4, pc}
    status = ERROR;
 800281a:	2001      	movs	r0, #1
 800281c:	e7fc      	b.n	8002818 <LL_ADC_REG_Init+0x3e>
	...

08002820 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002820:	4602      	mov	r2, r0
 8002822:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002824:	7900      	ldrb	r0, [r0, #4]
{
 8002826:	b510      	push	{r4, lr}
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002828:	2800      	cmp	r0, #0
 800282a:	d03d      	beq.n	80028a8 <LL_EXTI_Init+0x88>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800282c:	2b00      	cmp	r3, #0
 800282e:	d044      	beq.n	80028ba <LL_EXTI_Init+0x9a>
    {
      switch (EXTI_InitStruct->Mode)
 8002830:	7951      	ldrb	r1, [r2, #5]
 8002832:	2901      	cmp	r1, #1
 8002834:	d01e      	beq.n	8002874 <LL_EXTI_Init+0x54>
 8002836:	d303      	bcc.n	8002840 <LL_EXTI_Init+0x20>
 8002838:	2902      	cmp	r1, #2
 800283a:	d024      	beq.n	8002886 <LL_EXTI_Init+0x66>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
          break;
        default:
          status = ERROR;
 800283c:	2001      	movs	r0, #1
 800283e:	e008      	b.n	8002852 <LL_EXTI_Init+0x32>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002840:	4920      	ldr	r1, [pc, #128]	; (80028c4 <LL_EXTI_Init+0xa4>)
 8002842:	6848      	ldr	r0, [r1, #4]
 8002844:	ea20 0003 	bic.w	r0, r0, r3
 8002848:	6048      	str	r0, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800284a:	6808      	ldr	r0, [r1, #0]
 800284c:	4318      	orrs	r0, r3
 800284e:	6008      	str	r0, [r1, #0]
  ErrorStatus status = SUCCESS;
 8002850:	2000      	movs	r0, #0
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002852:	7992      	ldrb	r2, [r2, #6]
 8002854:	b16a      	cbz	r2, 8002872 <LL_EXTI_Init+0x52>
      {
        switch (EXTI_InitStruct->Trigger)
 8002856:	2a02      	cmp	r2, #2
 8002858:	d019      	beq.n	800288e <LL_EXTI_Init+0x6e>
 800285a:	2a03      	cmp	r2, #3
 800285c:	d020      	beq.n	80028a0 <LL_EXTI_Init+0x80>
 800285e:	2a01      	cmp	r2, #1
 8002860:	d12d      	bne.n	80028be <LL_EXTI_Init+0x9e>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002862:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <LL_EXTI_Init+0xa4>)
 8002864:	68d1      	ldr	r1, [r2, #12]
 8002866:	ea21 0103 	bic.w	r1, r1, r3
 800286a:	60d1      	str	r1, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800286c:	6891      	ldr	r1, [r2, #8]
 800286e:	430b      	orrs	r3, r1
 8002870:	6093      	str	r3, [r2, #8]
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 8002872:	bd10      	pop	{r4, pc}
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002874:	4913      	ldr	r1, [pc, #76]	; (80028c4 <LL_EXTI_Init+0xa4>)
 8002876:	6808      	ldr	r0, [r1, #0]
 8002878:	ea20 0003 	bic.w	r0, r0, r3
  SET_BIT(EXTI->IMR, ExtiLine);
 800287c:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 800287e:	6848      	ldr	r0, [r1, #4]
 8002880:	4318      	orrs	r0, r3
 8002882:	6048      	str	r0, [r1, #4]
 8002884:	e7e4      	b.n	8002850 <LL_EXTI_Init+0x30>
  SET_BIT(EXTI->IMR, ExtiLine);
 8002886:	490f      	ldr	r1, [pc, #60]	; (80028c4 <LL_EXTI_Init+0xa4>)
 8002888:	6808      	ldr	r0, [r1, #0]
 800288a:	4318      	orrs	r0, r3
 800288c:	e7f6      	b.n	800287c <LL_EXTI_Init+0x5c>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800288e:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <LL_EXTI_Init+0xa4>)
 8002890:	6891      	ldr	r1, [r2, #8]
 8002892:	ea21 0103 	bic.w	r1, r1, r3
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002896:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002898:	68d1      	ldr	r1, [r2, #12]
 800289a:	430b      	orrs	r3, r1
 800289c:	60d3      	str	r3, [r2, #12]
 800289e:	e7e8      	b.n	8002872 <LL_EXTI_Init+0x52>
  SET_BIT(EXTI->RTSR, ExtiLine);
 80028a0:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <LL_EXTI_Init+0xa4>)
 80028a2:	6891      	ldr	r1, [r2, #8]
 80028a4:	4319      	orrs	r1, r3
 80028a6:	e7f6      	b.n	8002896 <LL_EXTI_Init+0x76>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80028a8:	43dc      	mvns	r4, r3
 80028aa:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <LL_EXTI_Init+0xa4>)
 80028ac:	6811      	ldr	r1, [r2, #0]
 80028ae:	4021      	ands	r1, r4
 80028b0:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80028b2:	6853      	ldr	r3, [r2, #4]
 80028b4:	4023      	ands	r3, r4
 80028b6:	6053      	str	r3, [r2, #4]
 80028b8:	e7db      	b.n	8002872 <LL_EXTI_Init+0x52>
  ErrorStatus status = SUCCESS;
 80028ba:	4618      	mov	r0, r3
 80028bc:	e7d9      	b.n	8002872 <LL_EXTI_Init+0x52>
            status = ERROR;
 80028be:	2001      	movs	r0, #1
 80028c0:	e7d7      	b.n	8002872 <LL_EXTI_Init+0x52>
 80028c2:	bf00      	nop
 80028c4:	40010400 	.word	0x40010400

080028c8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80028c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80028cc:	680c      	ldr	r4, [r1, #0]
 80028ce:	f3c4 240f 	ubfx	r4, r4, #8, #16
 80028d2:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80028d6:	f04f 0a0f 	mov.w	sl, #15
  pinpos = POSITION_VAL(pinmask);
 80028da:	fab2 f282 	clz	r2, r2
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80028de:	f04f 0903 	mov.w	r9, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80028e2:	2704      	movs	r7, #4
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80028e4:	f04f 1c01 	mov.w	ip, #65537	; 0x10001
        currentpin = (0x00000101uL << pinpos);
 80028e8:	f240 1e01 	movw	lr, #257	; 0x101
  while ((pinmask  >> pinpos) != 0u)
 80028ec:	fa34 f302 	lsrs.w	r3, r4, r2
 80028f0:	d102      	bne.n	80028f8 <LL_GPIO_Init+0x30>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1u << pinpos)) != 0u)
 80028f8:	2301      	movs	r3, #1
 80028fa:	4093      	lsls	r3, r2
 80028fc:	4223      	tst	r3, r4
 80028fe:	d05e      	beq.n	80029be <LL_GPIO_Init+0xf6>
      if (pinpos < GPIO_PIN_MASK_POS)
 8002900:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002902:	bf85      	ittet	hi
 8002904:	f1a2 0308 	subhi.w	r3, r2, #8
 8002908:	fa0c f303 	lslhi.w	r3, ip, r3
        currentpin = (0x00000101uL << pinpos);
 800290c:	fa0e f302 	lslls.w	r3, lr, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002910:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002914:	68c5      	ldr	r5, [r0, #12]
 8002916:	0a1e      	lsrs	r6, r3, #8
 8002918:	fa96 f8a6 	rbit	r8, r6
 800291c:	fab8 f888 	clz	r8, r8
 8002920:	ea25 0606 	bic.w	r6, r5, r6
 8002924:	690d      	ldr	r5, [r1, #16]
 8002926:	fa05 f508 	lsl.w	r5, r5, r8
 800292a:	4335      	orrs	r5, r6
 800292c:	60c5      	str	r5, [r0, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800292e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8002932:	fa93 f6a3 	rbit	r6, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002936:	fab6 f686 	clz	r6, r6
 800293a:	fa93 fba3 	rbit	fp, r3
 800293e:	fabb fb8b 	clz	fp, fp
 8002942:	00b6      	lsls	r6, r6, #2
 8002944:	fa0a f506 	lsl.w	r5, sl, r6
 8002948:	f850 6008 	ldr.w	r6, [r0, r8]
 800294c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002950:	ea26 0605 	bic.w	r6, r6, r5
 8002954:	684d      	ldr	r5, [r1, #4]
 8002956:	fa05 fb0b 	lsl.w	fp, r5, fp
 800295a:	ea46 060b 	orr.w	r6, r6, fp
 800295e:	f840 6008 	str.w	r6, [r0, r8]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002962:	684d      	ldr	r5, [r1, #4]
 8002964:	f025 0508 	bic.w	r5, r5, #8
 8002968:	2d01      	cmp	r5, #1
 800296a:	d128      	bne.n	80029be <LL_GPIO_Init+0xf6>
 800296c:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002970:	fab5 f585 	clz	r5, r5
 8002974:	fa93 fba3 	rbit	fp, r3
 8002978:	fabb fb8b 	clz	fp, fp
 800297c:	00ad      	lsls	r5, r5, #2
 800297e:	fa09 f505 	lsl.w	r5, r9, r5
 8002982:	ea26 0605 	bic.w	r6, r6, r5
 8002986:	688d      	ldr	r5, [r1, #8]
 8002988:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800298c:	fa05 fb0b 	lsl.w	fp, r5, fp
 8002990:	ea46 060b 	orr.w	r6, r6, fp
 8002994:	f840 6008 	str.w	r6, [r0, r8]
 8002998:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800299c:	fab5 f585 	clz	r5, r5
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	00ad      	lsls	r5, r5, #2
 80029aa:	fa07 f505 	lsl.w	r5, r7, r5
 80029ae:	ea26 0505 	bic.w	r5, r6, r5
 80029b2:	68ce      	ldr	r6, [r1, #12]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	409e      	lsls	r6, r3
 80029b8:	432e      	orrs	r6, r5
 80029ba:	f840 6008 	str.w	r6, [r0, r8]
    pinpos++;
 80029be:	3201      	adds	r2, #1
 80029c0:	e794      	b.n	80028ec <LL_GPIO_Init+0x24>
	...

080029c4 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80029c6:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <RCC_GetHCLKClockFreq+0x14>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029ce:	5cd3      	ldrb	r3, [r2, r3]
}
 80029d0:	40d8      	lsrs	r0, r3
 80029d2:	4770      	bx	lr
 80029d4:	40021000 	.word	0x40021000
 80029d8:	0800a620 	.word	0x0800a620

080029dc <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80029de:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <RCC_GetPCLK1ClockFreq+0x14>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80029e8:	40d8      	lsrs	r0, r3
 80029ea:	4770      	bx	lr
 80029ec:	40021000 	.word	0x40021000
 80029f0:	0800a630 	.word	0x0800a630

080029f4 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80029f6:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <RCC_GetPCLK2ClockFreq+0x14>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a00:	40d8      	lsrs	r0, r3
 8002a02:	4770      	bx	lr
 8002a04:	40021000 	.word	0x40021000
 8002a08:	0800a630 	.word	0x0800a630

08002a0c <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002a14:	b162      	cbz	r2, 8002a30 <RCC_PLL_GetFreqDomain_SYS+0x24>
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002a16:	6858      	ldr	r0, [r3, #4]
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002a18:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 8002a1a:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002a1e:	3001      	adds	r0, #1
 8002a20:	fbb2 f0f0 	udiv	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002a24:	685b      	ldr	r3, [r3, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002a26:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8002a2a:	3302      	adds	r3, #2
}
 8002a2c:	4358      	muls	r0, r3
 8002a2e:	4770      	bx	lr
      pllinputfreq = HSI_VALUE / 2U;
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8002a32:	e7f7      	b.n	8002a24 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8002a34:	40021000 	.word	0x40021000
 8002a38:	007a1200 	.word	0x007a1200
 8002a3c:	003d0900 	.word	0x003d0900

08002a40 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <RCC_GetSystemClockFreq+0x14>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d101      	bne.n	8002a50 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002a4c:	f7ff bfde 	b.w	8002a0c <RCC_PLL_GetFreqDomain_SYS>
}
 8002a50:	4801      	ldr	r0, [pc, #4]	; (8002a58 <RCC_GetSystemClockFreq+0x18>)
 8002a52:	4770      	bx	lr
 8002a54:	40021000 	.word	0x40021000
 8002a58:	007a1200 	.word	0x007a1200

08002a5c <LL_RCC_GetSystemClocksFreq>:
{
 8002a5c:	b508      	push	{r3, lr}
 8002a5e:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002a60:	f7ff ffee 	bl	8002a40 <RCC_GetSystemClockFreq>
 8002a64:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002a66:	f7ff ffad 	bl	80029c4 <RCC_GetHCLKClockFreq>
 8002a6a:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a6c:	f7ff ffb6 	bl	80029dc <RCC_GetPCLK1ClockFreq>
 8002a70:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a72:	6848      	ldr	r0, [r1, #4]
 8002a74:	f7ff ffbe 	bl	80029f4 <RCC_GetPCLK2ClockFreq>
 8002a78:	60c8      	str	r0, [r1, #12]
}
 8002a7a:	bd08      	pop	{r3, pc}

08002a7c <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ae8 <LL_TIM_Init+0x6c>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002a7e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a80:	4290      	cmp	r0, r2
 8002a82:	d00a      	beq.n	8002a9a <LL_TIM_Init+0x1e>
 8002a84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a88:	d007      	beq.n	8002a9a <LL_TIM_Init+0x1e>
 8002a8a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002a8e:	4290      	cmp	r0, r2
 8002a90:	d003      	beq.n	8002a9a <LL_TIM_Init+0x1e>
 8002a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a96:	4290      	cmp	r0, r2
 8002a98:	d115      	bne.n	8002ac6 <LL_TIM_Init+0x4a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002a9a:	684a      	ldr	r2, [r1, #4]
 8002a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aa2:	4a11      	ldr	r2, [pc, #68]	; (8002ae8 <LL_TIM_Init+0x6c>)
 8002aa4:	4290      	cmp	r0, r2
 8002aa6:	d00a      	beq.n	8002abe <LL_TIM_Init+0x42>
 8002aa8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002aac:	d007      	beq.n	8002abe <LL_TIM_Init+0x42>
 8002aae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ab2:	4290      	cmp	r0, r2
 8002ab4:	d003      	beq.n	8002abe <LL_TIM_Init+0x42>
 8002ab6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aba:	4290      	cmp	r0, r2
 8002abc:	d103      	bne.n	8002ac6 <LL_TIM_Init+0x4a>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002abe:	68ca      	ldr	r2, [r1, #12]
 8002ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac4:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002ac6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002ac8:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002aca:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002acc:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002ace:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <LL_TIM_Init+0x6c>)
 8002ad2:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002ad4:	bf04      	itt	eq
 8002ad6:	690b      	ldreq	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002ad8:	6303      	streq	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002ada:	6943      	ldr	r3, [r0, #20]
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40012c00 	.word	0x40012c00

08002aec <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8002aec:	2910      	cmp	r1, #16
{
 8002aee:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8002af0:	d05f      	beq.n	8002bb2 <LL_TIM_OC_Init+0xc6>
 8002af2:	d803      	bhi.n	8002afc <LL_TIM_OC_Init+0x10>
 8002af4:	2901      	cmp	r1, #1
 8002af6:	d02c      	beq.n	8002b52 <LL_TIM_OC_Init+0x66>
  ErrorStatus result = ERROR;
 8002af8:	2001      	movs	r0, #1
 8002afa:	e059      	b.n	8002bb0 <LL_TIM_OC_Init+0xc4>
  switch (Channel)
 8002afc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002b00:	f000 8089 	beq.w	8002c16 <LL_TIM_OC_Init+0x12a>
 8002b04:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002b08:	d1f6      	bne.n	8002af8 <LL_TIM_OC_Init+0xc>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002b0a:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002b0c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b12:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b14:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002b16:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002b18:	69c1      	ldr	r1, [r0, #28]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002b1e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8002b22:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002b26:	6915      	ldr	r5, [r2, #16]
 8002b28:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002b2c:	6855      	ldr	r5, [r2, #4]
 8002b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b32:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b36:	4d50      	ldr	r5, [pc, #320]	; (8002c78 <LL_TIM_OC_Init+0x18c>)
 8002b38:	42a8      	cmp	r0, r5
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002b3a:	bf04      	itt	eq
 8002b3c:	6995      	ldreq	r5, [r2, #24]
 8002b3e:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002b42:	68d2      	ldr	r2, [r2, #12]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002b44:	bf08      	it	eq
 8002b46:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b4a:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002b4c:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002b4e:	6402      	str	r2, [r0, #64]	; 0x40
 8002b50:	e02c      	b.n	8002bac <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002b52:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002b54:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b5c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b5e:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002b60:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002b62:	f023 0302 	bic.w	r3, r3, #2
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002b66:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002b6a:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002b6c:	6915      	ldr	r5, [r2, #16]
 8002b6e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002b70:	6855      	ldr	r5, [r2, #4]
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b78:	4d3f      	ldr	r5, [pc, #252]	; (8002c78 <LL_TIM_OC_Init+0x18c>)
 8002b7a:	42a8      	cmp	r0, r5
 8002b7c:	d112      	bne.n	8002ba4 <LL_TIM_OC_Init+0xb8>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002b7e:	6955      	ldr	r5, [r2, #20]
 8002b80:	f023 0308 	bic.w	r3, r3, #8
 8002b84:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002b88:	6895      	ldr	r5, [r2, #8]
 8002b8a:	f023 0304 	bic.w	r3, r3, #4
 8002b8e:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002b92:	6995      	ldr	r5, [r2, #24]
 8002b94:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002b98:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002b9a:	69d5      	ldr	r5, [r2, #28]
 8002b9c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002ba0:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002ba4:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ba6:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002ba8:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002baa:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002bac:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002bae:	2000      	movs	r0, #0
}
 8002bb0:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002bb2:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002bb4:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002bb6:	f023 0310 	bic.w	r3, r3, #16
 8002bba:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002bbc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002bbe:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002bc0:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002bc2:	f023 0320 	bic.w	r3, r3, #32
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002bc6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8002bca:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002bce:	6915      	ldr	r5, [r2, #16]
 8002bd0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002bd4:	6855      	ldr	r5, [r2, #4]
 8002bd6:	f023 0310 	bic.w	r3, r3, #16
 8002bda:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bde:	4d26      	ldr	r5, [pc, #152]	; (8002c78 <LL_TIM_OC_Init+0x18c>)
 8002be0:	42a8      	cmp	r0, r5
 8002be2:	d113      	bne.n	8002c0c <LL_TIM_OC_Init+0x120>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002be4:	6955      	ldr	r5, [r2, #20]
 8002be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bea:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002bee:	6895      	ldr	r5, [r2, #8]
 8002bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002bf8:	6995      	ldr	r5, [r2, #24]
 8002bfa:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002bfe:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002c02:	69d5      	ldr	r5, [r2, #28]
 8002c04:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002c08:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002c0c:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c0e:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c10:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c12:	6382      	str	r2, [r0, #56]	; 0x38
 8002c14:	e7ca      	b.n	8002bac <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c16:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c18:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c1e:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c20:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c22:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c24:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002c26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c2a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002c2e:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002c30:	6915      	ldr	r5, [r2, #16]
 8002c32:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002c36:	6855      	ldr	r5, [r2, #4]
 8002c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c3c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c40:	4d0d      	ldr	r5, [pc, #52]	; (8002c78 <LL_TIM_OC_Init+0x18c>)
 8002c42:	42a8      	cmp	r0, r5
 8002c44:	d113      	bne.n	8002c6e <LL_TIM_OC_Init+0x182>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002c46:	6955      	ldr	r5, [r2, #20]
 8002c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c4c:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002c50:	6895      	ldr	r5, [r2, #8]
 8002c52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c56:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002c5a:	6995      	ldr	r5, [r2, #24]
 8002c5c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002c60:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002c64:	69d5      	ldr	r5, [r2, #28]
 8002c66:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002c6a:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002c6e:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c70:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002c72:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002c74:	63c2      	str	r2, [r0, #60]	; 0x3c
 8002c76:	e799      	b.n	8002bac <LL_TIM_OC_Init+0xc0>
 8002c78:	40012c00 	.word	0x40012c00

08002c7c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002c7c:	b530      	push	{r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002c7e:	68c3      	ldr	r3, [r0, #12]
 8002c80:	b085      	sub	sp, #20
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002c82:	049b      	lsls	r3, r3, #18
{
 8002c84:	4604      	mov	r4, r0
 8002c86:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002c88:	d502      	bpl.n	8002c90 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 8002c8a:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8002c8c:	b005      	add	sp, #20
 8002c8e:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8002c90:	684b      	ldr	r3, [r1, #4]
 8002c92:	68c9      	ldr	r1, [r1, #12]
 8002c94:	68c2      	ldr	r2, [r0, #12]
 8002c96:	430b      	orrs	r3, r1
 8002c98:	6929      	ldr	r1, [r5, #16]
 8002c9a:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	f022 020c 	bic.w	r2, r2, #12
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002ca8:	6903      	ldr	r3, [r0, #16]
 8002caa:	68aa      	ldr	r2, [r5, #8]
 8002cac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	6103      	str	r3, [r0, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002cb4:	6943      	ldr	r3, [r0, #20]
 8002cb6:	696a      	ldr	r2, [r5, #20]
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002cc0:	4668      	mov	r0, sp
 8002cc2:	f7ff fecb 	bl	8002a5c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <LL_USART_Init+0x98>)
 8002cc8:	429c      	cmp	r4, r3
 8002cca:	d119      	bne.n	8002d00 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002ccc:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002cce:	2900      	cmp	r1, #0
 8002cd0:	d0db      	beq.n	8002c8a <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8002cd2:	682a      	ldr	r2, [r5, #0]
 8002cd4:	2a00      	cmp	r2, #0
 8002cd6:	d0d8      	beq.n	8002c8a <LL_USART_Init+0xe>
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002cd8:	2319      	movs	r3, #25
 8002cda:	434b      	muls	r3, r1
 8002cdc:	0092      	lsls	r2, r2, #2
 8002cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ce2:	2264      	movs	r2, #100	; 0x64
 8002ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ce8:	fb02 3311 	mls	r3, r2, r1, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	; 0x32
 8002cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cf4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	e7c5      	b.n	8002c8c <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <LL_USART_Init+0x9c>)
 8002d02:	429c      	cmp	r4, r3
 8002d04:	d101      	bne.n	8002d0a <LL_USART_Init+0x8e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d06:	9902      	ldr	r1, [sp, #8]
 8002d08:	e7e1      	b.n	8002cce <LL_USART_Init+0x52>
    else if (USARTx == USART3)
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <LL_USART_Init+0xa0>)
 8002d0c:	429c      	cmp	r4, r3
 8002d0e:	d1bc      	bne.n	8002c8a <LL_USART_Init+0xe>
 8002d10:	e7f9      	b.n	8002d06 <LL_USART_Init+0x8a>
 8002d12:	bf00      	nop
 8002d14:	40013800 	.word	0x40013800
 8002d18:	40004400 	.word	0x40004400
 8002d1c:	40004800 	.word	0x40004800

08002d20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d20:	b084      	sub	sp, #16
 8002d22:	a801      	add	r0, sp, #4
 8002d24:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002d28:	b004      	add	sp, #16
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	4770      	bx	lr

08002d2e <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d2e:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002d30:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8002d34:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8002d38:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	4770      	bx	lr

08002d40 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002d40:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002d44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d48:	045b      	lsls	r3, r3, #17
 8002d4a:	0c5b      	lsrs	r3, r3, #17
 8002d4c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002d50:	2000      	movs	r0, #0
 8002d52:	4770      	bx	lr

08002d54 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002d54:	2000      	movs	r0, #0
 8002d56:	4770      	bx	lr

08002d58 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d58:	b084      	sub	sp, #16
 8002d5a:	b510      	push	{r4, lr}
 8002d5c:	ac03      	add	r4, sp, #12
 8002d5e:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8002d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8002d70:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0U;
 8002d74:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d78:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	4770      	bx	lr

08002d80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d80:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d82:	780c      	ldrb	r4, [r1, #0]
{
 8002d84:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d86:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8002d8a:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d8c:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002d90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8002d94:	2803      	cmp	r0, #3
 8002d96:	d803      	bhi.n	8002da0 <USB_ActivateEndpoint+0x20>
 8002d98:	e8df f000 	tbb	[pc, r0]
 8002d9c:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8002da0:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002da2:	f248 0580 	movw	r5, #32896	; 0x8080
 8002da6:	432a      	orrs	r2, r5
 8002da8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002dac:	780e      	ldrb	r6, [r1, #0]
 8002dae:	4a90      	ldr	r2, [pc, #576]	; (8002ff0 <USB_ActivateEndpoint+0x270>)
 8002db0:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8002db4:	4335      	orrs	r5, r6
 8002db6:	4014      	ands	r4, r2
 8002db8:	432c      	orrs	r4, r5
 8002dba:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8002dbe:	7b0d      	ldrb	r5, [r1, #12]
 8002dc0:	780c      	ldrb	r4, [r1, #0]
 8002dc2:	2d00      	cmp	r5, #0
 8002dc4:	f040 8082 	bne.w	8002ecc <USB_ActivateEndpoint+0x14c>
 8002dc8:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 8002dca:	784e      	ldrb	r6, [r1, #1]
 8002dcc:	086d      	lsrs	r5, r5, #1
 8002dce:	006d      	lsls	r5, r5, #1
 8002dd0:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002dd4:	b376      	cbz	r6, 8002e34 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002dd6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002dda:	4434      	add	r4, r6
 8002ddc:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002de0:	780d      	ldrb	r5, [r1, #0]
 8002de2:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002de6:	0667      	lsls	r7, r4, #25
 8002de8:	d508      	bpl.n	8002dfc <USB_ActivateEndpoint+0x7c>
 8002dea:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002dee:	4022      	ands	r2, r4
 8002df0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002df8:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002dfc:	78ca      	ldrb	r2, [r1, #3]
 8002dfe:	780c      	ldrb	r4, [r1, #0]
 8002e00:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e02:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8002e06:	4a7b      	ldr	r2, [pc, #492]	; (8002ff4 <USB_ActivateEndpoint+0x274>)
 8002e08:	ea02 0201 	and.w	r2, r2, r1
 8002e0c:	bf18      	it	ne
 8002e0e:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e1a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8002e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8002e24:	2000      	movs	r0, #0
 8002e26:	e7bc      	b.n	8002da2 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002e28:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8002e2c:	e7fa      	b.n	8002e24 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002e2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e32:	e7f7      	b.n	8002e24 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e34:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e38:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e3a:	4414      	add	r4, r2
 8002e3c:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e40:	780a      	ldrb	r2, [r1, #0]
 8002e42:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002e46:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002e4a:	b2a4      	uxth	r4, r4
 8002e4c:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8002e50:	bb56      	cbnz	r6, 8002ea8 <USB_ActivateEndpoint+0x128>
 8002e52:	5b15      	ldrh	r5, [r2, r4]
 8002e54:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8002e58:	042d      	lsls	r5, r5, #16
 8002e5a:	0c2d      	lsrs	r5, r5, #16
 8002e5c:	5315      	strh	r5, [r2, r4]
 8002e5e:	5b15      	ldrh	r5, [r2, r4]
 8002e60:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8002e64:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e66:	780c      	ldrb	r4, [r1, #0]
 8002e68:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002e6c:	0457      	lsls	r7, r2, #17
 8002e6e:	d50b      	bpl.n	8002e88 <USB_ActivateEndpoint+0x108>
 8002e70:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002e74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e78:	0512      	lsls	r2, r2, #20
 8002e7a:	0d12      	lsrs	r2, r2, #20
 8002e7c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002e80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e84:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e88:	7809      	ldrb	r1, [r1, #0]
 8002e8a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002e8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e96:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ea2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002ea6:	e7ba      	b.n	8002e1e <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002ea8:	2e3e      	cmp	r6, #62	; 0x3e
 8002eaa:	d806      	bhi.n	8002eba <USB_ActivateEndpoint+0x13a>
 8002eac:	0875      	lsrs	r5, r6, #1
 8002eae:	07f6      	lsls	r6, r6, #31
 8002eb0:	bf48      	it	mi
 8002eb2:	3501      	addmi	r5, #1
 8002eb4:	02ad      	lsls	r5, r5, #10
 8002eb6:	b2ad      	uxth	r5, r5
 8002eb8:	e7d4      	b.n	8002e64 <USB_ActivateEndpoint+0xe4>
 8002eba:	0977      	lsrs	r7, r6, #5
 8002ebc:	06f5      	lsls	r5, r6, #27
 8002ebe:	4d4e      	ldr	r5, [pc, #312]	; (8002ff8 <USB_ActivateEndpoint+0x278>)
 8002ec0:	bf08      	it	eq
 8002ec2:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002ec6:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8002eca:	e7f4      	b.n	8002eb6 <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002ecc:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8002ed0:	4015      	ands	r5, r2
 8002ed2:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8002ed6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002eda:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002ede:	780c      	ldrb	r4, [r1, #0]
 8002ee0:	890d      	ldrh	r5, [r1, #8]
 8002ee2:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002ee6:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002eea:	086d      	lsrs	r5, r5, #1
 8002eec:	b2b6      	uxth	r6, r6
 8002eee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ef2:	006d      	lsls	r5, r5, #1
 8002ef4:	53a5      	strh	r5, [r4, r6]
 8002ef6:	780c      	ldrb	r4, [r1, #0]
 8002ef8:	894d      	ldrh	r5, [r1, #10]
 8002efa:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002efe:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002f02:	086d      	lsrs	r5, r5, #1
 8002f04:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 8002f08:	006d      	lsls	r5, r5, #1
 8002f0a:	b2b6      	uxth	r6, r6
 8002f0c:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 8002f0e:	784c      	ldrb	r4, [r1, #1]
 8002f10:	780d      	ldrb	r5, [r1, #0]
 8002f12:	bbb4      	cbnz	r4, 8002f82 <USB_ActivateEndpoint+0x202>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f14:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002f18:	0466      	lsls	r6, r4, #17
 8002f1a:	d508      	bpl.n	8002f2e <USB_ActivateEndpoint+0x1ae>
 8002f1c:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002f20:	4022      	ands	r2, r4
 8002f22:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f2a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f2e:	780c      	ldrb	r4, [r1, #0]
 8002f30:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f34:	0655      	lsls	r5, r2, #25
 8002f36:	d50b      	bpl.n	8002f50 <USB_ActivateEndpoint+0x1d0>
 8002f38:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f40:	0512      	lsls	r2, r2, #20
 8002f42:	0d12      	lsrs	r2, r2, #20
 8002f44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f48:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002f4c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f50:	f248 0480 	movw	r4, #32896	; 0x8080
 8002f54:	780d      	ldrb	r5, [r1, #0]
 8002f56:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002f5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f62:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002f66:	4322      	orrs	r2, r4
 8002f68:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f6c:	7809      	ldrb	r1, [r1, #0]
 8002f6e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002f72:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f7a:	4314      	orrs	r4, r2
 8002f7c:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8002f80:	e74d      	b.n	8002e1e <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f82:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002f86:	0464      	lsls	r4, r4, #17
 8002f88:	d508      	bpl.n	8002f9c <USB_ActivateEndpoint+0x21c>
 8002f8a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002f8e:	4022      	ands	r2, r4
 8002f90:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f98:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f9c:	780c      	ldrb	r4, [r1, #0]
 8002f9e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002fa2:	0652      	lsls	r2, r2, #25
 8002fa4:	d50b      	bpl.n	8002fbe <USB_ActivateEndpoint+0x23e>
 8002fa6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002faa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fae:	0512      	lsls	r2, r2, #20
 8002fb0:	0d12      	lsrs	r2, r2, #20
 8002fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002fba:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8002fbe:	78ca      	ldrb	r2, [r1, #3]
 8002fc0:	780c      	ldrb	r4, [r1, #0]
 8002fc2:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002fc4:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <USB_ActivateEndpoint+0x274>)
 8002fca:	ea02 0205 	and.w	r2, r2, r5
 8002fce:	bf18      	it	ne
 8002fd0:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fdc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fe0:	7809      	ldrb	r1, [r1, #0]
 8002fe2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002fe6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fea:	0492      	lsls	r2, r2, #18
 8002fec:	0c92      	lsrs	r2, r2, #18
 8002fee:	e754      	b.n	8002e9a <USB_ActivateEndpoint+0x11a>
 8002ff0:	ffff8f8f 	.word	0xffff8f8f
 8002ff4:	ffff8fbf 	.word	0xffff8fbf
 8002ff8:	ffff8000 	.word	0xffff8000

08002ffc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ffc:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8002ffe:	7b0c      	ldrb	r4, [r1, #12]
 8003000:	784a      	ldrb	r2, [r1, #1]
 8003002:	780b      	ldrb	r3, [r1, #0]
 8003004:	bbbc      	cbnz	r4, 8003076 <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 8003006:	b1f2      	cbz	r2, 8003046 <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003008:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800300c:	0652      	lsls	r2, r2, #25
 800300e:	d50b      	bpl.n	8003028 <USB_DeactivateEndpoint+0x2c>
 8003010:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003014:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003018:	0512      	lsls	r2, r2, #20
 800301a:	0d12      	lsrs	r2, r2, #20
 800301c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003020:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003024:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003028:	780a      	ldrb	r2, [r1, #0]
 800302a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800302e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003032:	051b      	lsls	r3, r3, #20
 8003034:	0d1b      	lsrs	r3, r3, #20
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800303a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8003042:	2000      	movs	r0, #0
 8003044:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003046:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800304a:	0454      	lsls	r4, r2, #17
 800304c:	d50b      	bpl.n	8003066 <USB_DeactivateEndpoint+0x6a>
 800304e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003052:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003056:	0512      	lsls	r2, r2, #20
 8003058:	0d12      	lsrs	r2, r2, #20
 800305a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800305e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003062:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003066:	780a      	ldrb	r2, [r1, #0]
 8003068:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800306c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003070:	049b      	lsls	r3, r3, #18
 8003072:	0c9b      	lsrs	r3, r3, #18
 8003074:	e7df      	b.n	8003036 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8003076:	2a00      	cmp	r2, #0
 8003078:	d144      	bne.n	8003104 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800307a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800307e:	0452      	lsls	r2, r2, #17
 8003080:	d50b      	bpl.n	800309a <USB_DeactivateEndpoint+0x9e>
 8003082:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003086:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800308a:	0512      	lsls	r2, r2, #20
 800308c:	0d12      	lsrs	r2, r2, #20
 800308e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003096:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800309a:	780a      	ldrb	r2, [r1, #0]
 800309c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030a0:	065c      	lsls	r4, r3, #25
 80030a2:	d50b      	bpl.n	80030bc <USB_DeactivateEndpoint+0xc0>
 80030a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ac:	051b      	lsls	r3, r3, #20
 80030ae:	0d1b      	lsrs	r3, r3, #20
 80030b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80030bc:	780a      	ldrb	r2, [r1, #0]
 80030be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c6:	051b      	lsls	r3, r3, #20
 80030c8:	0d1b      	lsrs	r3, r3, #20
 80030ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030d6:	f248 0280 	movw	r2, #32896	; 0x8080
 80030da:	780c      	ldrb	r4, [r1, #0]
 80030dc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80030e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030ee:	7809      	ldrb	r1, [r1, #0]
 80030f0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80030f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030fc:	431a      	orrs	r2, r3
 80030fe:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8003102:	e79e      	b.n	8003042 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003104:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003108:	0452      	lsls	r2, r2, #17
 800310a:	d50b      	bpl.n	8003124 <USB_DeactivateEndpoint+0x128>
 800310c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003110:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003114:	0512      	lsls	r2, r2, #20
 8003116:	0d12      	lsrs	r2, r2, #20
 8003118:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800311c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003120:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003124:	780a      	ldrb	r2, [r1, #0]
 8003126:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800312a:	065b      	lsls	r3, r3, #25
 800312c:	d50b      	bpl.n	8003146 <USB_DeactivateEndpoint+0x14a>
 800312e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003136:	051b      	lsls	r3, r3, #20
 8003138:	0d1b      	lsrs	r3, r3, #20
 800313a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800313e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003142:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003146:	780a      	ldrb	r2, [r1, #0]
 8003148:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800314c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003150:	051b      	lsls	r3, r3, #20
 8003152:	0d1b      	lsrs	r3, r3, #20
 8003154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003160:	f248 0280 	movw	r2, #32896	; 0x8080
 8003164:	780c      	ldrb	r4, [r1, #0]
 8003166:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800316a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003172:	4313      	orrs	r3, r2
 8003174:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003178:	7809      	ldrb	r1, [r1, #0]
 800317a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800317e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	e7b9      	b.n	80030fc <USB_DeactivateEndpoint+0x100>

08003188 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003188:	784b      	ldrb	r3, [r1, #1]
 800318a:	780a      	ldrb	r2, [r1, #0]
 800318c:	b17b      	cbz	r3, 80031ae <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800318e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800319a:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800319e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80031aa:	2000      	movs	r0, #0
 80031ac:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80031ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031be:	e7ee      	b.n	800319e <USB_EPSetStall+0x16>

080031c0 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80031c0:	7b0b      	ldrb	r3, [r1, #12]
 80031c2:	bb23      	cbnz	r3, 800320e <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 80031c4:	784b      	ldrb	r3, [r1, #1]
 80031c6:	780a      	ldrb	r2, [r1, #0]
 80031c8:	b31b      	cbz	r3, 8003212 <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031ce:	065b      	lsls	r3, r3, #25
 80031d0:	d50b      	bpl.n	80031ea <USB_EPClearStall+0x2a>
 80031d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031da:	051b      	lsls	r3, r3, #20
 80031dc:	0d1b      	lsrs	r3, r3, #20
 80031de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80031ea:	78cb      	ldrb	r3, [r1, #3]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d00e      	beq.n	800320e <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80031f0:	780a      	ldrb	r2, [r1, #0]
 80031f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fe:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800320a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800320e:	2000      	movs	r0, #0
 8003210:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003212:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003216:	045b      	lsls	r3, r3, #17
 8003218:	d50b      	bpl.n	8003232 <USB_EPClearStall+0x72>
 800321a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800321e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003222:	051b      	lsls	r3, r3, #20
 8003224:	0d1b      	lsrs	r3, r3, #20
 8003226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800322a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003232:	780a      	ldrb	r2, [r1, #0]
 8003234:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003238:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800323c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003240:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003244:	e7dd      	b.n	8003202 <USB_EPClearStall+0x42>

08003246 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003246:	b911      	cbnz	r1, 800324e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800324e:	2000      	movs	r0, #0
 8003250:	4770      	bx	lr

08003252 <USB_DevConnect>:
 8003252:	2000      	movs	r0, #0
 8003254:	4770      	bx	lr

08003256 <USB_DevDisconnect>:
 8003256:	2000      	movs	r0, #0
 8003258:	4770      	bx	lr

0800325a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800325a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800325e:	4770      	bx	lr

08003260 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003260:	2000      	movs	r0, #0
 8003262:	4770      	bx	lr

08003264 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003264:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003268:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800326a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8003274:	429a      	cmp	r2, r3
 8003276:	d100      	bne.n	800327a <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8003278:	4770      	bx	lr
 800327a:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800327e:	f822 0b04 	strh.w	r0, [r2], #4
 8003282:	e7f7      	b.n	8003274 <USB_WritePMA+0x10>

08003284 <USB_EPStartXfer>:
{
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8003288:	7849      	ldrb	r1, [r1, #1]
{
 800328a:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 800328c:	2901      	cmp	r1, #1
 800328e:	7b27      	ldrb	r7, [r4, #12]
 8003290:	f040 8183 	bne.w	800359a <USB_EPStartXfer+0x316>
    if (ep->xfer_len > ep->maxpacket)
 8003294:	6922      	ldr	r2, [r4, #16]
 8003296:	69a6      	ldr	r6, [r4, #24]
 8003298:	6961      	ldr	r1, [r4, #20]
 800329a:	4296      	cmp	r6, r2
 800329c:	bf28      	it	cs
 800329e:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 80032a0:	b9ef      	cbnz	r7, 80032de <USB_EPStartXfer+0x5a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80032a2:	b2b6      	uxth	r6, r6
 80032a4:	4633      	mov	r3, r6
 80032a6:	88e2      	ldrh	r2, [r4, #6]
 80032a8:	f7ff ffdc 	bl	8003264 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80032ac:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80032b0:	7822      	ldrb	r2, [r4, #0]
 80032b2:	f205 4304 	addw	r3, r5, #1028	; 0x404
 80032b6:	0112      	lsls	r2, r2, #4
 80032b8:	440b      	add	r3, r1
 80032ba:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80032bc:	7822      	ldrb	r2, [r4, #0]
 80032be:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80032c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ca:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 80032ce:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80032dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 80032de:	78e3      	ldrb	r3, [r4, #3]
 80032e0:	7827      	ldrb	r7, [r4, #0]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	f040 8124 	bne.w	8003530 <USB_EPStartXfer+0x2ac>
        if (ep->xfer_len_db > ep->maxpacket)
 80032e8:	6a23      	ldr	r3, [r4, #32]
 80032ea:	429a      	cmp	r2, r3
          PCD_SET_EP_DBUF(USBx, ep->num);
 80032ec:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 80032f0:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80032f4:	ea4f 5202 	mov.w	r2, r2, lsl #20
 80032f8:	ea4f 5212 	mov.w	r2, r2, lsr #20
        if (ep->xfer_len_db > ep->maxpacket)
 80032fc:	f080 8107 	bcs.w	800350e <USB_EPStartXfer+0x28a>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003300:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003304:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003308:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800330c:	7822      	ldrb	r2, [r4, #0]
          ep->xfer_len_db -= len;
 800330e:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003310:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8003314:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003316:	f010 0f40 	tst.w	r0, #64	; 0x40
 800331a:	b2b3      	uxth	r3, r6
 800331c:	7860      	ldrb	r0, [r4, #1]
 800331e:	d07c      	beq.n	800341a <USB_EPStartXfer+0x196>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003320:	2800      	cmp	r0, #0
 8003322:	d14d      	bne.n	80033c0 <USB_EPStartXfer+0x13c>
 8003324:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003328:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 800332c:	4407      	add	r7, r0
 800332e:	0112      	lsls	r2, r2, #4
 8003330:	2e00      	cmp	r6, #0
 8003332:	d131      	bne.n	8003398 <USB_EPStartXfer+0x114>
 8003334:	5ab8      	ldrh	r0, [r7, r2]
 8003336:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800333a:	0400      	lsls	r0, r0, #16
 800333c:	0c00      	lsrs	r0, r0, #16
 800333e:	52b8      	strh	r0, [r7, r2]
 8003340:	5ab8      	ldrh	r0, [r7, r2]
 8003342:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003346:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003348:	8962      	ldrh	r2, [r4, #10]
 800334a:	4628      	mov	r0, r5
 800334c:	f7ff ff8a 	bl	8003264 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003350:	6a22      	ldr	r2, [r4, #32]
 8003352:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003354:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003356:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8003358:	bf89      	itett	hi
 800335a:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 800335c:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 800335e:	6222      	strhi	r2, [r4, #32]
 8003360:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003362:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8003364:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 8003366:	bf98      	it	ls
 8003368:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 800336a:	6161      	str	r1, [r4, #20]
 800336c:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800336e:	2800      	cmp	r0, #0
 8003370:	d148      	bne.n	8003404 <USB_EPStartXfer+0x180>
 8003372:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003376:	7827      	ldrb	r7, [r4, #0]
 8003378:	f205 4604 	addw	r6, r5, #1028	; 0x404
 800337c:	013f      	lsls	r7, r7, #4
 800337e:	4406      	add	r6, r0
 8003380:	bb42      	cbnz	r2, 80033d4 <USB_EPStartXfer+0x150>
 8003382:	5bba      	ldrh	r2, [r7, r6]
 8003384:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003388:	0412      	lsls	r2, r2, #16
 800338a:	0c12      	lsrs	r2, r2, #16
 800338c:	53ba      	strh	r2, [r7, r6]
 800338e:	5bba      	ldrh	r2, [r7, r6]
 8003390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003394:	53ba      	strh	r2, [r7, r6]
 8003396:	e026      	b.n	80033e6 <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003398:	2e3e      	cmp	r6, #62	; 0x3e
 800339a:	d807      	bhi.n	80033ac <USB_EPStartXfer+0x128>
 800339c:	0870      	lsrs	r0, r6, #1
 800339e:	f016 0f01 	tst.w	r6, #1
 80033a2:	bf18      	it	ne
 80033a4:	3001      	addne	r0, #1
 80033a6:	0280      	lsls	r0, r0, #10
 80033a8:	b280      	uxth	r0, r0
 80033aa:	e7cc      	b.n	8003346 <USB_EPStartXfer+0xc2>
 80033ac:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 80033b0:	06f0      	lsls	r0, r6, #27
 80033b2:	4897      	ldr	r0, [pc, #604]	; (8003610 <USB_EPStartXfer+0x38c>)
 80033b4:	bf08      	it	eq
 80033b6:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80033ba:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80033be:	e7f3      	b.n	80033a8 <USB_EPStartXfer+0x124>
 80033c0:	2801      	cmp	r0, #1
 80033c2:	d1c1      	bne.n	8003348 <USB_EPStartXfer+0xc4>
 80033c4:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 80033c8:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 80033cc:	4438      	add	r0, r7
 80033ce:	0112      	lsls	r2, r2, #4
 80033d0:	5283      	strh	r3, [r0, r2]
 80033d2:	e7b9      	b.n	8003348 <USB_EPStartXfer+0xc4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80033d4:	2a3e      	cmp	r2, #62	; 0x3e
 80033d6:	d80b      	bhi.n	80033f0 <USB_EPStartXfer+0x16c>
 80033d8:	0850      	lsrs	r0, r2, #1
 80033da:	07d2      	lsls	r2, r2, #31
 80033dc:	bf48      	it	mi
 80033de:	3001      	addmi	r0, #1
 80033e0:	0280      	lsls	r0, r0, #10
 80033e2:	b280      	uxth	r0, r0
 80033e4:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80033e6:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80033e8:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80033ea:	f7ff ff3b 	bl	8003264 <USB_WritePMA>
 80033ee:	e765      	b.n	80032bc <USB_EPStartXfer+0x38>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80033f0:	0950      	lsrs	r0, r2, #5
 80033f2:	06d2      	lsls	r2, r2, #27
 80033f4:	4a86      	ldr	r2, [pc, #536]	; (8003610 <USB_EPStartXfer+0x38c>)
 80033f6:	bf08      	it	eq
 80033f8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80033fc:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8003400:	b292      	uxth	r2, r2
 8003402:	e7c7      	b.n	8003394 <USB_EPStartXfer+0x110>
 8003404:	2801      	cmp	r0, #1
 8003406:	d1ee      	bne.n	80033e6 <USB_EPStartXfer+0x162>
 8003408:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 800340c:	7820      	ldrb	r0, [r4, #0]
 800340e:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003412:	0100      	lsls	r0, r0, #4
 8003414:	4432      	add	r2, r6
 8003416:	5283      	strh	r3, [r0, r2]
 8003418:	e7e5      	b.n	80033e6 <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800341a:	2800      	cmp	r0, #0
 800341c:	d14d      	bne.n	80034ba <USB_EPStartXfer+0x236>
 800341e:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003422:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8003426:	4407      	add	r7, r0
 8003428:	0112      	lsls	r2, r2, #4
 800342a:	2e00      	cmp	r6, #0
 800342c:	d131      	bne.n	8003492 <USB_EPStartXfer+0x20e>
 800342e:	5ab8      	ldrh	r0, [r7, r2]
 8003430:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8003434:	0400      	lsls	r0, r0, #16
 8003436:	0c00      	lsrs	r0, r0, #16
 8003438:	52b8      	strh	r0, [r7, r2]
 800343a:	5ab8      	ldrh	r0, [r7, r2]
 800343c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003440:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003442:	8922      	ldrh	r2, [r4, #8]
 8003444:	4628      	mov	r0, r5
 8003446:	f7ff ff0d 	bl	8003264 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800344a:	6a22      	ldr	r2, [r4, #32]
 800344c:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800344e:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003450:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8003452:	bf89      	itett	hi
 8003454:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 8003456:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 8003458:	6222      	strhi	r2, [r4, #32]
 800345a:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800345c:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 800345e:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 8003460:	bf98      	it	ls
 8003462:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 8003464:	6161      	str	r1, [r4, #20]
 8003466:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003468:	2800      	cmp	r0, #0
 800346a:	d145      	bne.n	80034f8 <USB_EPStartXfer+0x274>
 800346c:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003470:	7827      	ldrb	r7, [r4, #0]
 8003472:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 8003476:	013f      	lsls	r7, r7, #4
 8003478:	4406      	add	r6, r0
 800347a:	bb42      	cbnz	r2, 80034ce <USB_EPStartXfer+0x24a>
 800347c:	5bba      	ldrh	r2, [r7, r6]
 800347e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003482:	0412      	lsls	r2, r2, #16
 8003484:	0c12      	lsrs	r2, r2, #16
 8003486:	53ba      	strh	r2, [r7, r6]
 8003488:	5bba      	ldrh	r2, [r7, r6]
 800348a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800348e:	53ba      	strh	r2, [r7, r6]
 8003490:	e026      	b.n	80034e0 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003492:	2e3e      	cmp	r6, #62	; 0x3e
 8003494:	d807      	bhi.n	80034a6 <USB_EPStartXfer+0x222>
 8003496:	0870      	lsrs	r0, r6, #1
 8003498:	f016 0f01 	tst.w	r6, #1
 800349c:	bf18      	it	ne
 800349e:	3001      	addne	r0, #1
 80034a0:	0280      	lsls	r0, r0, #10
 80034a2:	b280      	uxth	r0, r0
 80034a4:	e7cc      	b.n	8003440 <USB_EPStartXfer+0x1bc>
 80034a6:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 80034aa:	06f0      	lsls	r0, r6, #27
 80034ac:	4858      	ldr	r0, [pc, #352]	; (8003610 <USB_EPStartXfer+0x38c>)
 80034ae:	bf08      	it	eq
 80034b0:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80034b4:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80034b8:	e7f3      	b.n	80034a2 <USB_EPStartXfer+0x21e>
 80034ba:	2801      	cmp	r0, #1
 80034bc:	d1c1      	bne.n	8003442 <USB_EPStartXfer+0x1be>
 80034be:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 80034c2:	f205 4004 	addw	r0, r5, #1028	; 0x404
 80034c6:	4438      	add	r0, r7
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	5283      	strh	r3, [r0, r2]
 80034cc:	e7b9      	b.n	8003442 <USB_EPStartXfer+0x1be>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034ce:	2a3e      	cmp	r2, #62	; 0x3e
 80034d0:	d808      	bhi.n	80034e4 <USB_EPStartXfer+0x260>
 80034d2:	0850      	lsrs	r0, r2, #1
 80034d4:	07d2      	lsls	r2, r2, #31
 80034d6:	bf48      	it	mi
 80034d8:	3001      	addmi	r0, #1
 80034da:	0280      	lsls	r0, r0, #10
 80034dc:	b280      	uxth	r0, r0
 80034de:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80034e0:	8962      	ldrh	r2, [r4, #10]
 80034e2:	e781      	b.n	80033e8 <USB_EPStartXfer+0x164>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034e4:	0950      	lsrs	r0, r2, #5
 80034e6:	06d2      	lsls	r2, r2, #27
 80034e8:	4a49      	ldr	r2, [pc, #292]	; (8003610 <USB_EPStartXfer+0x38c>)
 80034ea:	bf08      	it	eq
 80034ec:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80034f0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80034f4:	b292      	uxth	r2, r2
 80034f6:	e7ca      	b.n	800348e <USB_EPStartXfer+0x20a>
 80034f8:	2801      	cmp	r0, #1
 80034fa:	d1f1      	bne.n	80034e0 <USB_EPStartXfer+0x25c>
 80034fc:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8003500:	7820      	ldrb	r0, [r4, #0]
 8003502:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003506:	0100      	lsls	r0, r0, #4
 8003508:	4432      	add	r2, r6
 800350a:	5283      	strh	r3, [r0, r2]
 800350c:	e7e8      	b.n	80034e0 <USB_EPStartXfer+0x25c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800350e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003512:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003516:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800351a:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 800351e:	7826      	ldrb	r6, [r4, #0]
 8003520:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003524:	443a      	add	r2, r7
 8003526:	0136      	lsls	r6, r6, #4
 8003528:	b29b      	uxth	r3, r3
 800352a:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800352c:	8922      	ldrh	r2, [r4, #8]
 800352e:	e75c      	b.n	80033ea <USB_EPStartXfer+0x166>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003530:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003534:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003538:	0652      	lsls	r2, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800353a:	bf4b      	itete	mi
 800353c:	f205 420c 	addwmi	r2, r5, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003540:	f205 4204 	addwpl	r2, r5, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003544:	1812      	addmi	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003546:	1812      	addpl	r2, r2, r0
 8003548:	b2b3      	uxth	r3, r6
 800354a:	ea4f 1707 	mov.w	r7, r7, lsl #4
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800354e:	bf4b      	itete	mi
 8003550:	53d3      	strhmi	r3, [r2, r7]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003552:	53d3      	strhpl	r3, [r2, r7]
          pmabuffer = ep->pmaaddr1;
 8003554:	8962      	ldrhmi	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 8003556:	8922      	ldrhpl	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003558:	4628      	mov	r0, r5
 800355a:	f7ff fe83 	bl	8003264 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800355e:	7863      	ldrb	r3, [r4, #1]
 8003560:	7822      	ldrb	r2, [r4, #0]
 8003562:	b963      	cbnz	r3, 800357e <USB_EPStartXfer+0x2fa>
 8003564:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003568:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800356c:	051b      	lsls	r3, r3, #20
 800356e:	0d1b      	lsrs	r3, r3, #20
 8003570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003574:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003578:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800357c:	e69e      	b.n	80032bc <USB_EPStartXfer+0x38>
 800357e:	2b01      	cmp	r3, #1
 8003580:	f47f ae9c 	bne.w	80032bc <USB_EPStartXfer+0x38>
 8003584:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800358c:	051b      	lsls	r3, r3, #20
 800358e:	0d1b      	lsrs	r3, r3, #20
 8003590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003598:	e7ee      	b.n	8003578 <USB_EPStartXfer+0x2f4>
    if (ep->doublebuffer == 0U)
 800359a:	2f00      	cmp	r7, #0
 800359c:	d13a      	bne.n	8003614 <USB_EPStartXfer+0x390>
      if (ep->xfer_len > ep->maxpacket)
 800359e:	69a2      	ldr	r2, [r4, #24]
 80035a0:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035a2:	f205 410c 	addw	r1, r5, #1036	; 0x40c
      if (ep->xfer_len > ep->maxpacket)
 80035a6:	429a      	cmp	r2, r3
        ep->xfer_len = 0U;
 80035a8:	bf92      	itee	ls
 80035aa:	4613      	movls	r3, r2
        ep->xfer_len -= len;
 80035ac:	1ad2      	subhi	r2, r2, r3
 80035ae:	61a2      	strhi	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035b0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80035b4:	7820      	ldrb	r0, [r4, #0]
        ep->xfer_len = 0U;
 80035b6:	bf98      	it	ls
 80035b8:	61a7      	strls	r7, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035ba:	0100      	lsls	r0, r0, #4
 80035bc:	4411      	add	r1, r2
 80035be:	b953      	cbnz	r3, 80035d6 <USB_EPStartXfer+0x352>
 80035c0:	5a43      	ldrh	r3, [r0, r1]
 80035c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	5243      	strh	r3, [r0, r1]
 80035cc:	5a43      	ldrh	r3, [r0, r1]
 80035ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d2:	5243      	strh	r3, [r0, r1]
 80035d4:	e008      	b.n	80035e8 <USB_EPStartXfer+0x364>
 80035d6:	2b3e      	cmp	r3, #62	; 0x3e
 80035d8:	d810      	bhi.n	80035fc <USB_EPStartXfer+0x378>
 80035da:	085a      	lsrs	r2, r3, #1
 80035dc:	07df      	lsls	r7, r3, #31
 80035de:	bf48      	it	mi
 80035e0:	3201      	addmi	r2, #1
 80035e2:	0292      	lsls	r2, r2, #10
 80035e4:	b292      	uxth	r2, r2
 80035e6:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035e8:	7822      	ldrb	r2, [r4, #0]
 80035ea:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80035ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80035fa:	e668      	b.n	80032ce <USB_EPStartXfer+0x4a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035fc:	095a      	lsrs	r2, r3, #5
 80035fe:	06de      	lsls	r6, r3, #27
 8003600:	4b03      	ldr	r3, [pc, #12]	; (8003610 <USB_EPStartXfer+0x38c>)
 8003602:	bf08      	it	eq
 8003604:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003608:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800360c:	b29b      	uxth	r3, r3
 800360e:	e7e0      	b.n	80035d2 <USB_EPStartXfer+0x34e>
 8003610:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8003614:	78e3      	ldrb	r3, [r4, #3]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d174      	bne.n	8003704 <USB_EPStartXfer+0x480>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800361a:	b999      	cbnz	r1, 8003644 <USB_EPStartXfer+0x3c0>
 800361c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003620:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003624:	7821      	ldrb	r1, [r4, #0]
 8003626:	6920      	ldr	r0, [r4, #16]
 8003628:	0109      	lsls	r1, r1, #4
 800362a:	441a      	add	r2, r3
 800362c:	2800      	cmp	r0, #0
 800362e:	d13a      	bne.n	80036a6 <USB_EPStartXfer+0x422>
 8003630:	5a8b      	ldrh	r3, [r1, r2]
 8003632:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	528b      	strh	r3, [r1, r2]
 800363c:	5a8b      	ldrh	r3, [r1, r2]
 800363e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003642:	528b      	strh	r3, [r1, r2]
 8003644:	7862      	ldrb	r2, [r4, #1]
 8003646:	7823      	ldrb	r3, [r4, #0]
 8003648:	2a00      	cmp	r2, #0
 800364a:	d150      	bne.n	80036ee <USB_EPStartXfer+0x46a>
 800364c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003650:	6920      	ldr	r0, [r4, #16]
 8003652:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003656:	4411      	add	r1, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	2800      	cmp	r0, #0
 800365c:	d135      	bne.n	80036ca <USB_EPStartXfer+0x446>
 800365e:	5aca      	ldrh	r2, [r1, r3]
 8003660:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003664:	0412      	lsls	r2, r2, #16
 8003666:	0c12      	lsrs	r2, r2, #16
 8003668:	52ca      	strh	r2, [r1, r3]
 800366a:	5aca      	ldrh	r2, [r1, r3]
 800366c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003670:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8003672:	69e3      	ldr	r3, [r4, #28]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0b7      	beq.n	80035e8 <USB_EPStartXfer+0x364>
 8003678:	f244 0140 	movw	r1, #16448	; 0x4040
 800367c:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800367e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003682:	400b      	ands	r3, r1
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003684:	428b      	cmp	r3, r1
 8003686:	d001      	beq.n	800368c <USB_EPStartXfer+0x408>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ad      	bne.n	80035e8 <USB_EPStartXfer+0x364>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800368c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003694:	051b      	lsls	r3, r3, #20
 8003696:	0d1b      	lsrs	r3, r3, #20
 8003698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800369c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036a0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80036a4:	e7a0      	b.n	80035e8 <USB_EPStartXfer+0x364>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80036a6:	283e      	cmp	r0, #62	; 0x3e
 80036a8:	d806      	bhi.n	80036b8 <USB_EPStartXfer+0x434>
 80036aa:	0843      	lsrs	r3, r0, #1
 80036ac:	07c0      	lsls	r0, r0, #31
 80036ae:	bf48      	it	mi
 80036b0:	3301      	addmi	r3, #1
 80036b2:	029b      	lsls	r3, r3, #10
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	e7c4      	b.n	8003642 <USB_EPStartXfer+0x3be>
 80036b8:	0946      	lsrs	r6, r0, #5
 80036ba:	06c7      	lsls	r7, r0, #27
 80036bc:	4b46      	ldr	r3, [pc, #280]	; (80037d8 <USB_EPStartXfer+0x554>)
 80036be:	bf08      	it	eq
 80036c0:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80036c4:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80036c8:	e7f4      	b.n	80036b4 <USB_EPStartXfer+0x430>
 80036ca:	283e      	cmp	r0, #62	; 0x3e
 80036cc:	d806      	bhi.n	80036dc <USB_EPStartXfer+0x458>
 80036ce:	0842      	lsrs	r2, r0, #1
 80036d0:	07c0      	lsls	r0, r0, #31
 80036d2:	bf48      	it	mi
 80036d4:	3201      	addmi	r2, #1
 80036d6:	0292      	lsls	r2, r2, #10
 80036d8:	b292      	uxth	r2, r2
 80036da:	e7c9      	b.n	8003670 <USB_EPStartXfer+0x3ec>
 80036dc:	0946      	lsrs	r6, r0, #5
 80036de:	06c7      	lsls	r7, r0, #27
 80036e0:	4a3d      	ldr	r2, [pc, #244]	; (80037d8 <USB_EPStartXfer+0x554>)
 80036e2:	bf08      	it	eq
 80036e4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80036e8:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80036ec:	e7f4      	b.n	80036d8 <USB_EPStartXfer+0x454>
 80036ee:	2a01      	cmp	r2, #1
 80036f0:	d1bf      	bne.n	8003672 <USB_EPStartXfer+0x3ee>
 80036f2:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80036f6:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80036fa:	440a      	add	r2, r1
 80036fc:	8a21      	ldrh	r1, [r4, #16]
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	52d1      	strh	r1, [r2, r3]
 8003702:	e7b6      	b.n	8003672 <USB_EPStartXfer+0x3ee>
      else if (ep->type == EP_TYPE_ISOC)
 8003704:	2b01      	cmp	r3, #1
 8003706:	d164      	bne.n	80037d2 <USB_EPStartXfer+0x54e>
        if (ep->xfer_len > ep->maxpacket)
 8003708:	69a2      	ldr	r2, [r4, #24]
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	429a      	cmp	r2, r3
          ep->xfer_len = 0U;
 800370e:	bf95      	itete	ls
 8003710:	2300      	movls	r3, #0
          ep->xfer_len -= len;
 8003712:	1ad2      	subhi	r2, r2, r3
          ep->xfer_len = 0U;
 8003714:	61a3      	strls	r3, [r4, #24]
          ep->xfer_len -= len;
 8003716:	61a2      	strhi	r2, [r4, #24]
          ep->xfer_len = 0U;
 8003718:	bf98      	it	ls
 800371a:	4613      	movls	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800371c:	b989      	cbnz	r1, 8003742 <USB_EPStartXfer+0x4be>
 800371e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003722:	7820      	ldrb	r0, [r4, #0]
 8003724:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8003728:	0100      	lsls	r0, r0, #4
 800372a:	4411      	add	r1, r2
 800372c:	b9fb      	cbnz	r3, 800376e <USB_EPStartXfer+0x4ea>
 800372e:	5a42      	ldrh	r2, [r0, r1]
 8003730:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003734:	0412      	lsls	r2, r2, #16
 8003736:	0c12      	lsrs	r2, r2, #16
 8003738:	5242      	strh	r2, [r0, r1]
 800373a:	5a42      	ldrh	r2, [r0, r1]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	5242      	strh	r2, [r0, r1]
 8003742:	7861      	ldrb	r1, [r4, #1]
 8003744:	7822      	ldrb	r2, [r4, #0]
 8003746:	2900      	cmp	r1, #0
 8003748:	d137      	bne.n	80037ba <USB_EPStartXfer+0x536>
 800374a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800374e:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8003752:	4408      	add	r0, r1
 8003754:	0112      	lsls	r2, r2, #4
 8003756:	b9e3      	cbnz	r3, 8003792 <USB_EPStartXfer+0x50e>
 8003758:	5a83      	ldrh	r3, [r0, r2]
 800375a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800375e:	041b      	lsls	r3, r3, #16
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	5283      	strh	r3, [r0, r2]
 8003764:	5a83      	ldrh	r3, [r0, r2]
 8003766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376a:	5283      	strh	r3, [r0, r2]
 800376c:	e73c      	b.n	80035e8 <USB_EPStartXfer+0x364>
 800376e:	2b3e      	cmp	r3, #62	; 0x3e
 8003770:	d806      	bhi.n	8003780 <USB_EPStartXfer+0x4fc>
 8003772:	085a      	lsrs	r2, r3, #1
 8003774:	07de      	lsls	r6, r3, #31
 8003776:	bf48      	it	mi
 8003778:	3201      	addmi	r2, #1
 800377a:	0292      	lsls	r2, r2, #10
 800377c:	b292      	uxth	r2, r2
 800377e:	e7df      	b.n	8003740 <USB_EPStartXfer+0x4bc>
 8003780:	095e      	lsrs	r6, r3, #5
 8003782:	06df      	lsls	r7, r3, #27
 8003784:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <USB_EPStartXfer+0x554>)
 8003786:	bf08      	it	eq
 8003788:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800378c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003790:	e7f4      	b.n	800377c <USB_EPStartXfer+0x4f8>
 8003792:	2b3e      	cmp	r3, #62	; 0x3e
 8003794:	d807      	bhi.n	80037a6 <USB_EPStartXfer+0x522>
 8003796:	0859      	lsrs	r1, r3, #1
 8003798:	07de      	lsls	r6, r3, #31
 800379a:	bf48      	it	mi
 800379c:	3101      	addmi	r1, #1
 800379e:	0289      	lsls	r1, r1, #10
 80037a0:	b289      	uxth	r1, r1
 80037a2:	5281      	strh	r1, [r0, r2]
 80037a4:	e720      	b.n	80035e8 <USB_EPStartXfer+0x364>
 80037a6:	0959      	lsrs	r1, r3, #5
 80037a8:	06db      	lsls	r3, r3, #27
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <USB_EPStartXfer+0x554>)
 80037ac:	bf08      	it	eq
 80037ae:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80037b2:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	e7d7      	b.n	800376a <USB_EPStartXfer+0x4e6>
 80037ba:	2901      	cmp	r1, #1
 80037bc:	f47f af14 	bne.w	80035e8 <USB_EPStartXfer+0x364>
 80037c0:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80037c4:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80037c8:	4401      	add	r1, r0
 80037ca:	0112      	lsls	r2, r2, #4
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	528b      	strh	r3, [r1, r2]
 80037d0:	e70a      	b.n	80035e8 <USB_EPStartXfer+0x364>
        return HAL_ERROR;
 80037d2:	2001      	movs	r0, #1
 80037d4:	e582      	b.n	80032dc <USB_EPStartXfer+0x58>
 80037d6:	bf00      	nop
 80037d8:	ffff8000 	.word	0xffff8000

080037dc <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80037dc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 80037e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80037e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 80037e6:	085d      	lsrs	r5, r3, #1
 80037e8:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80037ea:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 80037ec:	462e      	mov	r6, r5
 80037ee:	3002      	adds	r0, #2
 80037f0:	b936      	cbnz	r6, 8003800 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80037f2:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 80037f4:	bf44      	itt	mi
 80037f6:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80037fa:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 80037fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003800:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8003804:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8003806:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003808:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800380c:	0a24      	lsrs	r4, r4, #8
 800380e:	f800 4c01 	strb.w	r4, [r0, #-1]
 8003812:	e7ec      	b.n	80037ee <USB_ReadPMA+0x12>

08003814 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003814:	4b01      	ldr	r3, [pc, #4]	; (800381c <LL_SetSystemCoreClock+0x8>)
 8003816:	6018      	str	r0, [r3, #0]
}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000000 	.word	0x20000000

08003820 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003820:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003824:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003826:	b16b      	cbz	r3, 8003844 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003828:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800382c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003830:	28ff      	cmp	r0, #255	; 0xff
 8003832:	d007      	beq.n	8003844 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800383a:	4621      	mov	r1, r4
 800383c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800383e:	23ff      	movs	r3, #255	; 0xff
 8003840:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003844:	2000      	movs	r0, #0
 8003846:	bd10      	pop	{r4, pc}

08003848 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003848:	2343      	movs	r3, #67	; 0x43
 800384a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800384c:	4800      	ldr	r0, [pc, #0]	; (8003850 <USBD_CDC_GetFSCfgDesc+0x8>)
 800384e:	4770      	bx	lr
 8003850:	20000044 	.word	0x20000044

08003854 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003854:	2343      	movs	r3, #67	; 0x43
 8003856:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003858:	4800      	ldr	r0, [pc, #0]	; (800385c <USBD_CDC_GetHSCfgDesc+0x8>)
 800385a:	4770      	bx	lr
 800385c:	20000088 	.word	0x20000088

08003860 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003860:	2343      	movs	r3, #67	; 0x43
 8003862:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003864:	4800      	ldr	r0, [pc, #0]	; (8003868 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003866:	4770      	bx	lr
 8003868:	200000d8 	.word	0x200000d8

0800386c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800386c:	230a      	movs	r3, #10
 800386e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003870:	4800      	ldr	r0, [pc, #0]	; (8003874 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003872:	4770      	bx	lr
 8003874:	200000cc 	.word	0x200000cc

08003878 <USBD_CDC_DataOut>:
{
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800387c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003880:	f000 ff10 	bl	80046a4 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8003884:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003888:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800388c:	b14b      	cbz	r3, 80038a2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800388e:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8003892:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800389c:	4798      	blx	r3
    return USBD_OK;
 800389e:	2000      	movs	r0, #0
}
 80038a0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80038a2:	2002      	movs	r0, #2
 80038a4:	e7fc      	b.n	80038a0 <USBD_CDC_DataOut+0x28>

080038a6 <USBD_CDC_DataIn>:
{
 80038a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80038a8:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80038ac:	b1d6      	cbz	r6, 80038e4 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80038ae:	2314      	movs	r3, #20
 80038b0:	fb03 0301 	mla	r3, r3, r1, r0
 80038b4:	69dd      	ldr	r5, [r3, #28]
 80038b6:	b18d      	cbz	r5, 80038dc <USBD_CDC_DataIn+0x36>
 80038b8:	2728      	movs	r7, #40	; 0x28
 80038ba:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 80038be:	fb07 4201 	mla	r2, r7, r1, r4
 80038c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038c4:	fbb5 f4f2 	udiv	r4, r5, r2
 80038c8:	fb02 5414 	mls	r4, r2, r4, r5
 80038cc:	b934      	cbnz	r4, 80038dc <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 80038ce:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80038d0:	4622      	mov	r2, r4
 80038d2:	4623      	mov	r3, r4
 80038d4:	f000 feca 	bl	800466c <USBD_LL_Transmit>
    return USBD_OK;
 80038d8:	4620      	mov	r0, r4
}
 80038da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80038dc:	2000      	movs	r0, #0
 80038de:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 80038e2:	e7fa      	b.n	80038da <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 80038e4:	2002      	movs	r0, #2
 80038e6:	e7f8      	b.n	80038da <USBD_CDC_DataIn+0x34>

080038e8 <USBD_CDC_Setup>:
{
 80038e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 80038ec:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80038f0:	780a      	ldrb	r2, [r1, #0]
{
 80038f2:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80038f4:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 80038f8:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80038fa:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80038fe:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003902:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003906:	d028      	beq.n	800395a <USBD_CDC_Setup+0x72>
 8003908:	2c20      	cmp	r4, #32
 800390a:	d145      	bne.n	8003998 <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 800390c:	88cc      	ldrh	r4, [r1, #6]
 800390e:	784b      	ldrb	r3, [r1, #1]
 8003910:	b1e4      	cbz	r4, 800394c <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003912:	0612      	lsls	r2, r2, #24
 8003914:	d511      	bpl.n	800393a <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003916:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800391a:	4639      	mov	r1, r7
 800391c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	4622      	mov	r2, r4
 8003924:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003926:	88f2      	ldrh	r2, [r6, #6]
 8003928:	4639      	mov	r1, r7
 800392a:	4628      	mov	r0, r5
 800392c:	f000 fc45 	bl	80041ba <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003930:	4644      	mov	r4, r8
}
 8003932:	4620      	mov	r0, r4
 8003934:	b003      	add	sp, #12
 8003936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 800393a:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800393e:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003942:	4622      	mov	r2, r4
 8003944:	4639      	mov	r1, r7
 8003946:	f000 fc4d 	bl	80041e4 <USBD_CtlPrepareRx>
 800394a:	e7f1      	b.n	8003930 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800394c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003950:	4618      	mov	r0, r3
 8003952:	6895      	ldr	r5, [r2, #8]
 8003954:	4622      	mov	r2, r4
 8003956:	47a8      	blx	r5
 8003958:	e7eb      	b.n	8003932 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800395a:	784f      	ldrb	r7, [r1, #1]
 800395c:	2f0a      	cmp	r7, #10
 800395e:	d00d      	beq.n	800397c <USBD_CDC_Setup+0x94>
 8003960:	2f0b      	cmp	r7, #11
 8003962:	d015      	beq.n	8003990 <USBD_CDC_Setup+0xa8>
 8003964:	b9c7      	cbnz	r7, 8003998 <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003966:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800396a:	2b03      	cmp	r3, #3
 800396c:	d114      	bne.n	8003998 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800396e:	2202      	movs	r2, #2
 8003970:	f10d 0106 	add.w	r1, sp, #6
 8003974:	f000 fc21 	bl	80041ba <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003978:	463c      	mov	r4, r7
 800397a:	e7da      	b.n	8003932 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800397c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003980:	2b03      	cmp	r3, #3
 8003982:	d109      	bne.n	8003998 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003984:	2201      	movs	r2, #1
 8003986:	f10d 0105 	add.w	r1, sp, #5
 800398a:	f000 fc16 	bl	80041ba <USBD_CtlSendData>
 800398e:	e7d0      	b.n	8003932 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003990:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003994:	2b03      	cmp	r3, #3
 8003996:	d0cc      	beq.n	8003932 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8003998:	4631      	mov	r1, r6
 800399a:	4628      	mov	r0, r5
 800399c:	f000 fbe6 	bl	800416c <USBD_CtlError>
          ret = USBD_FAIL;
 80039a0:	2402      	movs	r4, #2
          break;
 80039a2:	e7c6      	b.n	8003932 <USBD_CDC_Setup+0x4a>

080039a4 <USBD_CDC_DeInit>:
{
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80039a8:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80039aa:	2181      	movs	r1, #129	; 0x81
 80039ac:	f000 fe14 	bl	80045d8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80039b0:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80039b2:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80039b4:	4620      	mov	r0, r4
 80039b6:	f000 fe0f 	bl	80045d8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80039ba:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80039be:	2182      	movs	r1, #130	; 0x82
 80039c0:	4620      	mov	r0, r4
 80039c2:	f000 fe09 	bl	80045d8 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80039c6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80039ca:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80039cc:	b14b      	cbz	r3, 80039e2 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80039ce:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80039d6:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80039da:	f000 fe6b 	bl	80046b4 <USBD_static_free>
    pdev->pClassData = NULL;
 80039de:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80039e2:	2000      	movs	r0, #0
 80039e4:	bd38      	pop	{r3, r4, r5, pc}

080039e6 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80039e6:	7c03      	ldrb	r3, [r0, #16]
{
 80039e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ec:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80039ee:	bbcb      	cbnz	r3, 8003a64 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80039f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039f4:	2202      	movs	r2, #2
 80039f6:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80039f8:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80039fa:	f000 fddd 	bl	80045b8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80039fe:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003a02:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003a04:	4629      	mov	r1, r5
 8003a06:	2202      	movs	r2, #2
 8003a08:	4620      	mov	r0, r4
 8003a0a:	f000 fdd5 	bl	80045b8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003a0e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003a12:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003a14:	2308      	movs	r3, #8
 8003a16:	2203      	movs	r2, #3
 8003a18:	2182      	movs	r1, #130	; 0x82
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f000 fdcc 	bl	80045b8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003a20:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003a22:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003a26:	f000 fe41 	bl	80046ac <USBD_static_malloc>
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003a30:	b350      	cbz	r0, 8003a88 <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8003a32:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003a34:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a3c:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8003a40:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8003a44:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a48:	f1b8 0f00 	cmp.w	r8, #0
 8003a4c:	d113      	bne.n	8003a76 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a52:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003a56:	4629      	mov	r1, r5
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f000 fe15 	bl	8004688 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003a5e:	4640      	mov	r0, r8
}
 8003a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003a64:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003a66:	2340      	movs	r3, #64	; 0x40
 8003a68:	2202      	movs	r2, #2
 8003a6a:	2181      	movs	r1, #129	; 0x81
 8003a6c:	f000 fda4 	bl	80045b8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003a70:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003a72:	2340      	movs	r3, #64	; 0x40
 8003a74:	e7c6      	b.n	8003a04 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003a76:	2340      	movs	r3, #64	; 0x40
 8003a78:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f000 fe02 	bl	8004688 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003a84:	4638      	mov	r0, r7
 8003a86:	e7eb      	b.n	8003a60 <USBD_CDC_Init+0x7a>
    ret = 1U;
 8003a88:	4628      	mov	r0, r5
 8003a8a:	e7e9      	b.n	8003a60 <USBD_CDC_Init+0x7a>

08003a8c <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003a8c:	b119      	cbz	r1, 8003a96 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003a8e:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003a92:	2000      	movs	r0, #0
 8003a94:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003a96:	2002      	movs	r0, #2
  }

  return ret;
}
 8003a98:	4770      	bx	lr

08003a9a <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003a9a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8003a9e:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003aa0:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003aa4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003aa8:	4770      	bx	lr

08003aaa <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8003aaa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8003aae:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003ab0:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003ab4:	4770      	bx	lr

08003ab6 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ab6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003aba:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8003abc:	b182      	cbz	r2, 8003ae0 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8003abe:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	b974      	cbnz	r4, 8003ae4 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8003ac6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003aca:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003ace:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003ad0:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003ad2:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f000 fdc8 	bl	800466c <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8003adc:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003ade:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003ae0:	2002      	movs	r0, #2
 8003ae2:	e7fc      	b.n	8003ade <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	e7fa      	b.n	8003ade <USBD_CDC_TransmitPacket+0x28>

08003ae8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ae8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003aec:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003aee:	b162      	cbz	r2, 8003b0a <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003af0:	7c04      	ldrb	r4, [r0, #16]
 8003af2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003af6:	b934      	cbnz	r4, 8003b06 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003af8:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003afc:	2101      	movs	r1, #1
 8003afe:	f000 fdc3 	bl	8004688 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003b02:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003b04:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003b06:	2340      	movs	r3, #64	; 0x40
 8003b08:	e7f8      	b.n	8003afc <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	e7fa      	b.n	8003b04 <USBD_CDC_ReceivePacket+0x1c>

08003b0e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003b0e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003b10:	b180      	cbz	r0, 8003b34 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003b12:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b16:	b113      	cbz	r3, 8003b1e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003b1e:	b109      	cbz	r1, 8003b24 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003b20:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b24:	2301      	movs	r3, #1
  pdev->id = id;
 8003b26:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b28:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003b2c:	f000 fcf4 	bl	8004518 <USBD_LL_Init>

  return USBD_OK;
 8003b30:	2000      	movs	r0, #0
}
 8003b32:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003b34:	2002      	movs	r0, #2
 8003b36:	e7fc      	b.n	8003b32 <USBD_Init+0x24>

08003b38 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003b38:	b119      	cbz	r1, 8003b42 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003b3a:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003b3e:	2000      	movs	r0, #0
 8003b40:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003b42:	2002      	movs	r0, #2
  }

  return status;
}
 8003b44:	4770      	bx	lr

08003b46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003b46:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003b48:	f000 fd28 	bl	800459c <USBD_LL_Start>

  return USBD_OK;
}
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	bd08      	pop	{r3, pc}

08003b50 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003b50:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003b52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b56:	b90b      	cbnz	r3, 8003b5c <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003b58:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003b5a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4798      	blx	r3
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d0fa      	beq.n	8003b5a <USBD_SetClassConfig+0xa>
 8003b64:	e7f8      	b.n	8003b58 <USBD_SetClassConfig+0x8>

08003b66 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003b66:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003b68:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4798      	blx	r3

  return USBD_OK;
}
 8003b70:	2000      	movs	r0, #0
 8003b72:	bd08      	pop	{r3, pc}

08003b74 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003b74:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003b76:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8003b7a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f000 fae1 	bl	8004144 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003b82:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003b84:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8003b88:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003b8c:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003b90:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003b94:	f001 031f 	and.w	r3, r1, #31
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d00e      	beq.n	8003bba <USBD_LL_SetupStage+0x46>
 8003b9c:	d307      	bcc.n	8003bae <USBD_LL_SetupStage+0x3a>
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d010      	beq.n	8003bc4 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003ba2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f000 fd24 	bl	80045f4 <USBD_LL_StallEP>
      break;
 8003bac:	e003      	b.n	8003bb6 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003bae:	4629      	mov	r1, r5
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f000 f8f5 	bl	8003da0 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003bba:	4629      	mov	r1, r5
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f000 fa13 	bl	8003fe8 <USBD_StdItfReq>
      break;
 8003bc2:	e7f8      	b.n	8003bb6 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f000 fa33 	bl	8004032 <USBD_StdEPReq>
      break;
 8003bcc:	e7f3      	b.n	8003bb6 <USBD_LL_SetupStage+0x42>

08003bce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003bce:	b570      	push	{r4, r5, r6, lr}
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003bd4:	bb49      	cbnz	r1, 8003c2a <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003bd6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d11e      	bne.n	8003c1c <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003bde:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8003be2:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d90b      	bls.n	8003c02 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8003bea:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003bec:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8003bee:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003bf2:	bf8c      	ite	hi
 8003bf4:	b29a      	uxthhi	r2, r3
 8003bf6:	b292      	uxthls	r2, r2
 8003bf8:	4631      	mov	r1, r6
 8003bfa:	f000 fb02 	bl	8004202 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003bfe:	2000      	movs	r0, #0
}
 8003c00:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003c02:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	b123      	cbz	r3, 8003c14 <USBD_LL_DataOutStage+0x46>
 8003c0a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003c0e:	2a03      	cmp	r2, #3
 8003c10:	d100      	bne.n	8003c14 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8003c12:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003c14:	4628      	mov	r0, r5
 8003c16:	f000 fafc 	bl	8004212 <USBD_CtlSendStatus>
 8003c1a:	e7f0      	b.n	8003bfe <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003c1c:	2b05      	cmp	r3, #5
 8003c1e:	d1ee      	bne.n	8003bfe <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003c20:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003c24:	f000 fce6 	bl	80045f4 <USBD_LL_StallEP>
 8003c28:	e7e9      	b.n	8003bfe <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003c2a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	b12b      	cbz	r3, 8003c3e <USBD_LL_DataOutStage+0x70>
 8003c32:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003c36:	2a03      	cmp	r2, #3
 8003c38:	d101      	bne.n	8003c3e <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8003c3a:	4798      	blx	r3
 8003c3c:	e7df      	b.n	8003bfe <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8003c3e:	2002      	movs	r0, #2
 8003c40:	e7de      	b.n	8003c00 <USBD_LL_DataOutStage+0x32>

08003c42 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003c42:	b570      	push	{r4, r5, r6, lr}
 8003c44:	4613      	mov	r3, r2
 8003c46:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003c48:	460e      	mov	r6, r1
 8003c4a:	2900      	cmp	r1, #0
 8003c4c:	d147      	bne.n	8003cde <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003c4e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003c52:	2a02      	cmp	r2, #2
 8003c54:	d13c      	bne.n	8003cd0 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003c56:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8003c5a:	4295      	cmp	r5, r2
 8003c5c:	d913      	bls.n	8003c86 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8003c5e:	1aaa      	subs	r2, r5, r2
 8003c60:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003c62:	4619      	mov	r1, r3
 8003c64:	b292      	uxth	r2, r2
 8003c66:	f000 fab5 	bl	80041d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003c6a:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4620      	mov	r0, r4
 8003c72:	f000 fd09 	bl	8004688 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003c76:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8003c80:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8003c84:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003c86:	69c3      	ldr	r3, [r0, #28]
 8003c88:	fbb3 f5f2 	udiv	r5, r3, r2
 8003c8c:	fb02 3515 	mls	r5, r2, r5, r3
 8003c90:	b965      	cbnz	r5, 8003cac <USBD_LL_DataInStage+0x6a>
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d80a      	bhi.n	8003cac <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8003c96:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d206      	bcs.n	8003cac <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003c9e:	462a      	mov	r2, r5
 8003ca0:	f000 fa98 	bl	80041d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003ca4:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003ca8:	462b      	mov	r3, r5
 8003caa:	e7df      	b.n	8003c6c <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003cac:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	b12b      	cbz	r3, 8003cc0 <USBD_LL_DataInStage+0x7e>
 8003cb4:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003cb8:	2a03      	cmp	r2, #3
 8003cba:	d101      	bne.n	8003cc0 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003cc0:	2180      	movs	r1, #128	; 0x80
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f000 fc96 	bl	80045f4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f000 faad 	bl	8004228 <USBD_CtlReceiveStatus>
 8003cce:	e7d2      	b.n	8003c76 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003cd0:	f032 0304 	bics.w	r3, r2, #4
 8003cd4:	d1cf      	bne.n	8003c76 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003cd6:	2180      	movs	r1, #128	; 0x80
 8003cd8:	f000 fc8c 	bl	80045f4 <USBD_LL_StallEP>
 8003cdc:	e7cb      	b.n	8003c76 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003cde:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	b133      	cbz	r3, 8003cf4 <USBD_LL_DataInStage+0xb2>
 8003ce6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003cea:	2a03      	cmp	r2, #3
 8003cec:	d102      	bne.n	8003cf4 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8003cee:	4798      	blx	r3
  return USBD_OK;
 8003cf0:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003cf2:	e7c7      	b.n	8003c84 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8003cf4:	2002      	movs	r0, #2
 8003cf6:	e7c5      	b.n	8003c84 <USBD_LL_DataInStage+0x42>

08003cf8 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003cf8:	2200      	movs	r2, #0
{
 8003cfa:	b570      	push	{r4, r5, r6, lr}
 8003cfc:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003cfe:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d00:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d02:	4611      	mov	r1, r2
 8003d04:	2340      	movs	r3, #64	; 0x40
 8003d06:	f000 fc57 	bl	80045b8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d0a:	4633      	mov	r3, r6
 8003d0c:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003d0e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d12:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d16:	2200      	movs	r2, #0
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f000 fc4d 	bl	80045b8 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8003d1e:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8003d20:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003d24:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d26:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003d28:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003d2c:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003d30:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003d32:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8003d36:	b123      	cbz	r3, 8003d42 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003d38:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003d42:	2000      	movs	r0, #0
 8003d44:	bd70      	pop	{r4, r5, r6, pc}

08003d46 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003d46:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003d48:	2000      	movs	r0, #0
 8003d4a:	4770      	bx	lr

08003d4c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003d4c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d50:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003d54:	2304      	movs	r3, #4
 8003d56:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	4770      	bx	lr

08003d5e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003d5e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d62:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8003d64:	bf04      	itt	eq
 8003d66:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8003d6a:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8003d6e:	2000      	movs	r0, #0
 8003d70:	4770      	bx	lr

08003d72 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003d72:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d74:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003d78:	2a03      	cmp	r2, #3
 8003d7a:	d104      	bne.n	8003d86 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8003d7c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	b103      	cbz	r3, 8003d86 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003d84:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003d86:	2000      	movs	r0, #0
 8003d88:	bd08      	pop	{r3, pc}

08003d8a <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8003d8a:	b510      	push	{r4, lr}
 8003d8c:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	f000 fc30 	bl	80045f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003d94:	4620      	mov	r0, r4
}
 8003d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	f000 bc2a 	b.w	80045f4 <USBD_LL_StallEP>

08003da0 <USBD_StdDevReq>:
{
 8003da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003da2:	780b      	ldrb	r3, [r1, #0]
{
 8003da4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003da6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003daa:	2b20      	cmp	r3, #32
{
 8003dac:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003dae:	d012      	beq.n	8003dd6 <USBD_StdDevReq+0x36>
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d010      	beq.n	8003dd6 <USBD_StdDevReq+0x36>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d15b      	bne.n	8003e70 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 8003db8:	784b      	ldrb	r3, [r1, #1]
 8003dba:	2b09      	cmp	r3, #9
 8003dbc:	d858      	bhi.n	8003e70 <USBD_StdDevReq+0xd0>
 8003dbe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003dc2:	00e9      	.short	0x00e9
 8003dc4:	00570105 	.word	0x00570105
 8003dc8:	005700fe 	.word	0x005700fe
 8003dcc:	00130084 	.word	0x00130084
 8003dd0:	00d20057 	.word	0x00d20057
 8003dd4:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8003dd6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003dda:	4629      	mov	r1, r5
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	4620      	mov	r0, r4
 8003de0:	4798      	blx	r3
}
 8003de2:	2000      	movs	r0, #0
 8003de4:	b003      	add	sp, #12
 8003de6:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003dee:	884b      	ldrh	r3, [r1, #2]
 8003df0:	0a1a      	lsrs	r2, r3, #8
 8003df2:	3a01      	subs	r2, #1
 8003df4:	2a06      	cmp	r2, #6
 8003df6:	d83b      	bhi.n	8003e70 <USBD_StdDevReq+0xd0>
 8003df8:	e8df f002 	tbb	[pc, r2]
 8003dfc:	3a2d2004 	.word	0x3a2d2004
 8003e00:	523a      	.short	0x523a
 8003e02:	5c          	.byte	0x5c
 8003e03:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003e04:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e08:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003e0a:	f10d 0106 	add.w	r1, sp, #6
 8003e0e:	7c20      	ldrb	r0, [r4, #16]
 8003e10:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003e12:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003e16:	b152      	cbz	r2, 8003e2e <USBD_StdDevReq+0x8e>
 8003e18:	88eb      	ldrh	r3, [r5, #6]
 8003e1a:	b143      	cbz	r3, 8003e2e <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	bf28      	it	cs
 8003e20:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003e22:	4601      	mov	r1, r0
 8003e24:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8003e26:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003e2a:	f000 f9c6 	bl	80041ba <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003e2e:	88eb      	ldrh	r3, [r5, #6]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1d6      	bne.n	8003de2 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8003e34:	4620      	mov	r0, r4
 8003e36:	f000 f9ec 	bl	8004212 <USBD_CtlSendStatus>
 8003e3a:	e7d2      	b.n	8003de2 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e3c:	7c02      	ldrb	r2, [r0, #16]
 8003e3e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e42:	b932      	cbnz	r2, 8003e52 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003e46:	f10d 0006 	add.w	r0, sp, #6
 8003e4a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003e4c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003e4e:	7043      	strb	r3, [r0, #1]
 8003e50:	e7df      	b.n	8003e12 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	e7f7      	b.n	8003e46 <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b05      	cmp	r3, #5
 8003e5a:	d809      	bhi.n	8003e70 <USBD_StdDevReq+0xd0>
 8003e5c:	e8df f003 	tbb	[pc, r3]
 8003e60:	14100c03 	.word	0x14100c03
 8003e64:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003e66:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e6a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1cc      	bne.n	8003e0a <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8003e70:	4620      	mov	r0, r4
 8003e72:	f7ff ff8a 	bl	8003d8a <USBD_CtlError.constprop.1>
 8003e76:	e7b4      	b.n	8003de2 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003e78:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	e7f5      	b.n	8003e6c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003e80:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	e7f1      	b.n	8003e6c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003e88:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	e7ed      	b.n	8003e6c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003e90:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	e7e9      	b.n	8003e6c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003e98:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	e7e5      	b.n	8003e6c <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ea0:	7c03      	ldrb	r3, [r0, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e4      	bne.n	8003e70 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003ea6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003eaa:	f10d 0006 	add.w	r0, sp, #6
 8003eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb0:	4798      	blx	r3
 8003eb2:	e7ae      	b.n	8003e12 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003eb4:	7c03      	ldrb	r3, [r0, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1da      	bne.n	8003e70 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003eba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ebe:	f10d 0006 	add.w	r0, sp, #6
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003ec6:	2307      	movs	r3, #7
 8003ec8:	e7c1      	b.n	8003e4e <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003eca:	888b      	ldrh	r3, [r1, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1cf      	bne.n	8003e70 <USBD_StdDevReq+0xd0>
 8003ed0:	88cb      	ldrh	r3, [r1, #6]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1cc      	bne.n	8003e70 <USBD_StdDevReq+0xd0>
 8003ed6:	884d      	ldrh	r5, [r1, #2]
 8003ed8:	2d7f      	cmp	r5, #127	; 0x7f
 8003eda:	d8c9      	bhi.n	8003e70 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003edc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d0c5      	beq.n	8003e70 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003ee4:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8003ee6:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003eea:	f000 fbb1 	bl	8004650 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f000 f98f 	bl	8004212 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003ef4:	b11d      	cbz	r5, 8003efe <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003ef6:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003ef8:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003efc:	e771      	b.n	8003de2 <USBD_StdDevReq+0x42>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e7fa      	b.n	8003ef8 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8003f02:	7889      	ldrb	r1, [r1, #2]
 8003f04:	4d37      	ldr	r5, [pc, #220]	; (8003fe4 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003f06:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003f08:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003f0a:	d8b1      	bhi.n	8003e70 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003f0c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d008      	beq.n	8003f26 <USBD_StdDevReq+0x186>
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d014      	beq.n	8003f42 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8003f18:	f7ff ff37 	bl	8003d8a <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003f1c:	7829      	ldrb	r1, [r5, #0]
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f7ff fe21 	bl	8003b66 <USBD_ClrClassConfig>
 8003f24:	e75d      	b.n	8003de2 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8003f26:	2900      	cmp	r1, #0
 8003f28:	d084      	beq.n	8003e34 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8003f2a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003f2c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8003f2e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003f30:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003f34:	4620      	mov	r0, r4
 8003f36:	f7ff fe0b 	bl	8003b50 <USBD_SetClassConfig>
 8003f3a:	2802      	cmp	r0, #2
 8003f3c:	f47f af7a 	bne.w	8003e34 <USBD_StdDevReq+0x94>
 8003f40:	e796      	b.n	8003e70 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8003f42:	b931      	cbnz	r1, 8003f52 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003f44:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8003f46:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003f48:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8003f4c:	f7ff fe0b 	bl	8003b66 <USBD_ClrClassConfig>
 8003f50:	e770      	b.n	8003e34 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8003f52:	6841      	ldr	r1, [r0, #4]
 8003f54:	2901      	cmp	r1, #1
 8003f56:	f43f af6d 	beq.w	8003e34 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003f5a:	b2c9      	uxtb	r1, r1
 8003f5c:	f7ff fe03 	bl	8003b66 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003f60:	7829      	ldrb	r1, [r5, #0]
 8003f62:	6061      	str	r1, [r4, #4]
 8003f64:	e7e6      	b.n	8003f34 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 8003f66:	88ca      	ldrh	r2, [r1, #6]
 8003f68:	2a01      	cmp	r2, #1
 8003f6a:	d181      	bne.n	8003e70 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003f6c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f43f af7d 	beq.w	8003e70 <USBD_StdDevReq+0xd0>
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d904      	bls.n	8003f84 <USBD_StdDevReq+0x1e4>
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	f47f af78 	bne.w	8003e70 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003f80:	1d01      	adds	r1, r0, #4
 8003f82:	e003      	b.n	8003f8c <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8003f84:	4601      	mov	r1, r0
 8003f86:	2300      	movs	r3, #0
 8003f88:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f000 f914 	bl	80041ba <USBD_CtlSendData>
 8003f92:	e726      	b.n	8003de2 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8003f94:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	f63f af68 	bhi.w	8003e70 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8003fa0:	88cb      	ldrh	r3, [r1, #6]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	f47f af64 	bne.w	8003e70 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003fac:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003fb0:	b10b      	cbz	r3, 8003fb6 <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f104 010c 	add.w	r1, r4, #12
 8003fbc:	e7e6      	b.n	8003f8c <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003fbe:	884b      	ldrh	r3, [r1, #2]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	f47f af0e 	bne.w	8003de2 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003fc6:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8003fca:	e733      	b.n	8003e34 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8003fcc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	f63f af4c 	bhi.w	8003e70 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003fd8:	884b      	ldrh	r3, [r1, #2]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	f47f af01 	bne.w	8003de2 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e7f0      	b.n	8003fc6 <USBD_StdDevReq+0x226>
 8003fe4:	20000384 	.word	0x20000384

08003fe8 <USBD_StdItfReq>:
{
 8003fe8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fea:	780b      	ldrb	r3, [r1, #0]
{
 8003fec:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003ff2:	2b20      	cmp	r3, #32
{
 8003ff4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ff6:	d002      	beq.n	8003ffe <USBD_StdItfReq+0x16>
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d000      	beq.n	8003ffe <USBD_StdItfReq+0x16>
 8003ffc:	b9ab      	cbnz	r3, 800402a <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8003ffe:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004002:	3b01      	subs	r3, #1
 8004004:	2b02      	cmp	r3, #2
 8004006:	d810      	bhi.n	800402a <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004008:	792b      	ldrb	r3, [r5, #4]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d80d      	bhi.n	800402a <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800400e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004012:	4629      	mov	r1, r5
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	4620      	mov	r0, r4
 8004018:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800401a:	88eb      	ldrh	r3, [r5, #6]
 800401c:	b91b      	cbnz	r3, 8004026 <USBD_StdItfReq+0x3e>
 800401e:	b910      	cbnz	r0, 8004026 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8004020:	4620      	mov	r0, r4
 8004022:	f000 f8f6 	bl	8004212 <USBD_CtlSendStatus>
}
 8004026:	2000      	movs	r0, #0
 8004028:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800402a:	4620      	mov	r0, r4
 800402c:	f7ff fead 	bl	8003d8a <USBD_CtlError.constprop.1>
          break;
 8004030:	e7f9      	b.n	8004026 <USBD_StdItfReq+0x3e>

08004032 <USBD_StdEPReq>:
{
 8004032:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004034:	780a      	ldrb	r2, [r1, #0]
{
 8004036:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004038:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800403c:	2a20      	cmp	r2, #32
{
 800403e:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004040:	d014      	beq.n	800406c <USBD_StdEPReq+0x3a>
 8004042:	2a40      	cmp	r2, #64	; 0x40
 8004044:	d012      	beq.n	800406c <USBD_StdEPReq+0x3a>
 8004046:	b96a      	cbnz	r2, 8004064 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8004048:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800404a:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 800404c:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 800404e:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8004050:	d020      	beq.n	8004094 <USBD_StdEPReq+0x62>
 8004052:	d336      	bcc.n	80040c2 <USBD_StdEPReq+0x90>
 8004054:	2a03      	cmp	r2, #3
 8004056:	d105      	bne.n	8004064 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8004058:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800405c:	2a02      	cmp	r2, #2
 800405e:	d027      	beq.n	80040b0 <USBD_StdEPReq+0x7e>
 8004060:	2a03      	cmp	r2, #3
 8004062:	d00b      	beq.n	800407c <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 8004064:	4620      	mov	r0, r4
 8004066:	f7ff fe90 	bl	8003d8a <USBD_CtlError.constprop.1>
              break;
 800406a:	e005      	b.n	8004078 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 800406c:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8004070:	4619      	mov	r1, r3
 8004072:	6892      	ldr	r2, [r2, #8]
 8004074:	4620      	mov	r0, r4
 8004076:	4790      	blx	r2
}
 8004078:	2000      	movs	r0, #0
 800407a:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 800407c:	885a      	ldrh	r2, [r3, #2]
 800407e:	b92a      	cbnz	r2, 800408c <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8004080:	064a      	lsls	r2, r1, #25
 8004082:	d003      	beq.n	800408c <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004084:	88db      	ldrh	r3, [r3, #6]
 8004086:	b90b      	cbnz	r3, 800408c <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004088:	f000 fab4 	bl	80045f4 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800408c:	4620      	mov	r0, r4
 800408e:	f000 f8c0 	bl	8004212 <USBD_CtlSendStatus>
              break;
 8004092:	e7f1      	b.n	8004078 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8004094:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004098:	2a02      	cmp	r2, #2
 800409a:	d009      	beq.n	80040b0 <USBD_StdEPReq+0x7e>
 800409c:	2a03      	cmp	r2, #3
 800409e:	d1e1      	bne.n	8004064 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80040a0:	885b      	ldrh	r3, [r3, #2]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e8      	bne.n	8004078 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 80040a6:	064d      	lsls	r5, r1, #25
 80040a8:	d0f0      	beq.n	800408c <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80040aa:	f000 fab1 	bl	8004610 <USBD_LL_ClearStallEP>
 80040ae:	e7ed      	b.n	800408c <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80040b0:	064b      	lsls	r3, r1, #25
 80040b2:	d0d7      	beq.n	8004064 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80040b4:	f000 fa9e 	bl	80045f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80040b8:	2180      	movs	r1, #128	; 0x80
 80040ba:	4620      	mov	r0, r4
 80040bc:	f000 fa9a 	bl	80045f4 <USBD_LL_StallEP>
 80040c0:	e7da      	b.n	8004078 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80040c2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d018      	beq.n	80040fc <USBD_StdEPReq+0xca>
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d1ca      	bne.n	8004064 <USBD_StdEPReq+0x32>
 80040ce:	2314      	movs	r3, #20
 80040d0:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80040d4:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80040d8:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80040dc:	d01f      	beq.n	800411e <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80040de:	6992      	ldr	r2, [r2, #24]
 80040e0:	2a00      	cmp	r2, #0
 80040e2:	d0bf      	beq.n	8004064 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80040e4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80040e8:	fb05 3503 	mla	r5, r5, r3, r3
 80040ec:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80040ee:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80040f2:	d11f      	bne.n	8004134 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80040f4:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80040f6:	2202      	movs	r2, #2
 80040f8:	4629      	mov	r1, r5
 80040fa:	e00c      	b.n	8004116 <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80040fc:	064a      	lsls	r2, r1, #25
 80040fe:	d1b1      	bne.n	8004064 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004100:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8004102:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004106:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800410a:	bf4c      	ite	mi
 800410c:	f100 0114 	addmi.w	r1, r0, #20
 8004110:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8004114:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004116:	4620      	mov	r0, r4
 8004118:	f000 f84f 	bl	80041ba <USBD_CtlSendData>
              break;
 800411c:	e7ac      	b.n	8004078 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800411e:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8004122:	2a00      	cmp	r2, #0
 8004124:	d09e      	beq.n	8004064 <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004126:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800412a:	fb03 0505 	mla	r5, r3, r5, r0
 800412e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004132:	e7dc      	b.n	80040ee <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004134:	4620      	mov	r0, r4
 8004136:	f000 fa79 	bl	800462c <USBD_LL_IsStallEP>
 800413a:	b108      	cbz	r0, 8004140 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 800413c:	2301      	movs	r3, #1
 800413e:	e7d9      	b.n	80040f4 <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8004140:	6028      	str	r0, [r5, #0]
 8004142:	e7d8      	b.n	80040f6 <USBD_StdEPReq+0xc4>

08004144 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8004144:	780b      	ldrb	r3, [r1, #0]
 8004146:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004148:	784b      	ldrb	r3, [r1, #1]
 800414a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800414c:	78ca      	ldrb	r2, [r1, #3]
 800414e:	788b      	ldrb	r3, [r1, #2]
 8004150:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004154:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004156:	794a      	ldrb	r2, [r1, #5]
 8004158:	790b      	ldrb	r3, [r1, #4]
 800415a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800415e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004160:	79ca      	ldrb	r2, [r1, #7]
 8004162:	798b      	ldrb	r3, [r1, #6]
 8004164:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004168:	80c3      	strh	r3, [r0, #6]
}
 800416a:	4770      	bx	lr

0800416c <USBD_CtlError>:
{
 800416c:	b510      	push	{r4, lr}
 800416e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	f000 fa3f 	bl	80045f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004176:	4620      	mov	r0, r4
}
 8004178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800417c:	2100      	movs	r1, #0
 800417e:	f000 ba39 	b.w	80045f4 <USBD_LL_StallEP>

08004182 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004182:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8004184:	b188      	cbz	r0, 80041aa <USBD_GetString+0x28>
 8004186:	4605      	mov	r5, r0
 8004188:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800418a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2c00      	cmp	r4, #0
 8004192:	d1f9      	bne.n	8004188 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004194:	3301      	adds	r3, #1
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800419a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800419c:	2303      	movs	r3, #3
 800419e:	704b      	strb	r3, [r1, #1]
 80041a0:	2302      	movs	r3, #2
 80041a2:	3801      	subs	r0, #1
    while (*desc != '\0')
 80041a4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80041a8:	b905      	cbnz	r5, 80041ac <USBD_GetString+0x2a>
}
 80041aa:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	54cd      	strb	r5, [r1, r3]
 80041b0:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80041b2:	3302      	adds	r3, #2
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	548c      	strb	r4, [r1, r2]
 80041b8:	e7f4      	b.n	80041a4 <USBD_GetString+0x22>

080041ba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80041ba:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80041bc:	2202      	movs	r2, #2
{
 80041be:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80041c0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80041c4:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80041c8:	460a      	mov	r2, r1
 80041ca:	2100      	movs	r1, #0
 80041cc:	f000 fa4e 	bl	800466c <USBD_LL_Transmit>

  return USBD_OK;
}
 80041d0:	2000      	movs	r0, #0
 80041d2:	bd10      	pop	{r4, pc}

080041d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80041d4:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80041d6:	4613      	mov	r3, r2
 80041d8:	460a      	mov	r2, r1
 80041da:	2100      	movs	r1, #0
 80041dc:	f000 fa46 	bl	800466c <USBD_LL_Transmit>

  return USBD_OK;
}
 80041e0:	2000      	movs	r0, #0
 80041e2:	bd08      	pop	{r3, pc}

080041e4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80041e4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80041e6:	2203      	movs	r2, #3
{
 80041e8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80041ea:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80041ee:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80041f2:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80041f4:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80041f8:	2100      	movs	r1, #0
 80041fa:	f000 fa45 	bl	8004688 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80041fe:	2000      	movs	r0, #0
 8004200:	bd10      	pop	{r4, pc}

08004202 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004202:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004204:	4613      	mov	r3, r2
 8004206:	460a      	mov	r2, r1
 8004208:	2100      	movs	r1, #0
 800420a:	f000 fa3d 	bl	8004688 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800420e:	2000      	movs	r0, #0
 8004210:	bd08      	pop	{r3, pc}

08004212 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004212:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004214:	2304      	movs	r3, #4
 8004216:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800421a:	2300      	movs	r3, #0
 800421c:	461a      	mov	r2, r3
 800421e:	4619      	mov	r1, r3
 8004220:	f000 fa24 	bl	800466c <USBD_LL_Transmit>

  return USBD_OK;
}
 8004224:	2000      	movs	r0, #0
 8004226:	bd08      	pop	{r3, pc}

08004228 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004228:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800422a:	2305      	movs	r3, #5
 800422c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004230:	2300      	movs	r3, #0
 8004232:	461a      	mov	r2, r3
 8004234:	4619      	mov	r1, r3
 8004236:	f000 fa27 	bl	8004688 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800423a:	2000      	movs	r0, #0
 800423c:	bd08      	pop	{r3, pc}
	...

08004240 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004240:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004242:	2200      	movs	r2, #0
 8004244:	490e      	ldr	r1, [pc, #56]	; (8004280 <MX_USB_DEVICE_Init+0x40>)
 8004246:	480f      	ldr	r0, [pc, #60]	; (8004284 <MX_USB_DEVICE_Init+0x44>)
 8004248:	f7ff fc61 	bl	8003b0e <USBD_Init>
 800424c:	b108      	cbz	r0, 8004252 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800424e:	f7fd fb67 	bl	8001920 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004252:	490d      	ldr	r1, [pc, #52]	; (8004288 <MX_USB_DEVICE_Init+0x48>)
 8004254:	480b      	ldr	r0, [pc, #44]	; (8004284 <MX_USB_DEVICE_Init+0x44>)
 8004256:	f7ff fc6f 	bl	8003b38 <USBD_RegisterClass>
 800425a:	b108      	cbz	r0, 8004260 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800425c:	f7fd fb60 	bl	8001920 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004260:	490a      	ldr	r1, [pc, #40]	; (800428c <MX_USB_DEVICE_Init+0x4c>)
 8004262:	4808      	ldr	r0, [pc, #32]	; (8004284 <MX_USB_DEVICE_Init+0x44>)
 8004264:	f7ff fc12 	bl	8003a8c <USBD_CDC_RegisterInterface>
 8004268:	b108      	cbz	r0, 800426e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800426a:	f7fd fb59 	bl	8001920 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800426e:	4805      	ldr	r0, [pc, #20]	; (8004284 <MX_USB_DEVICE_Init+0x44>)
 8004270:	f7ff fc69 	bl	8003b46 <USBD_Start>
 8004274:	b118      	cbz	r0, 800427e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800427a:	f7fd bb51 	b.w	8001920 <Error_Handler>
}
 800427e:	bd08      	pop	{r3, pc}
 8004280:	2000012c 	.word	0x2000012c
 8004284:	20000680 	.word	0x20000680
 8004288:	2000000c 	.word	0x2000000c
 800428c:	2000011c 	.word	0x2000011c

08004290 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004290:	2000      	movs	r0, #0
 8004292:	4770      	bx	lr

08004294 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004294:	2000      	movs	r0, #0
 8004296:	4770      	bx	lr

08004298 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN 6 */
  uint32_t len=*Len;
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800429a:	4e1a      	ldr	r6, [pc, #104]	; (8004304 <CDC_Receive_FS+0x6c>)
{
 800429c:	4604      	mov	r4, r0
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800429e:	f896 329c 	ldrb.w	r3, [r6, #668]	; 0x29c
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d12c      	bne.n	8004300 <CDC_Receive_FS+0x68>
  {
     return USBD_FAIL;
  }

  if (((Buf == NULL) || (Len == NULL)) || (*Len <= 0))
 80042a6:	b358      	cbz	r0, 8004300 <CDC_Receive_FS+0x68>
  uint32_t len=*Len;
 80042a8:	680d      	ldr	r5, [r1, #0]
  if (((Buf == NULL) || (Len == NULL)) || (*Len <= 0))
 80042aa:	b34d      	cbz	r5, 8004300 <CDC_Receive_FS+0x68>

  /* Get data */
  uint8_t result = USBD_OK;
  do
  {
      result = USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80042ac:	4621      	mov	r1, r4
 80042ae:	4630      	mov	r0, r6
 80042b0:	f7ff fbfb 	bl	8003aaa <USBD_CDC_SetRxBuffer>
  }
  while(result != USBD_OK);
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d1f9      	bne.n	80042ac <CDC_Receive_FS+0x14>

  do
  {
     result = USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80042b8:	4e12      	ldr	r6, [pc, #72]	; (8004304 <CDC_Receive_FS+0x6c>)
 80042ba:	4630      	mov	r0, r6
 80042bc:	f7ff fc14 	bl	8003ae8 <USBD_CDC_ReceivePacket>
  }
  while(result != USBD_OK);
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d1fa      	bne.n	80042ba <CDC_Receive_FS+0x22>
 80042c4:	4621      	mov	r1, r4

     if (comm_d_usb.rx_index >= RX_BUFF_LAST)
         comm_d_usb.rx_index = 0;

     if (*Buf == '\n')
         comm_d_usb.available = 1;
 80042c6:	2601      	movs	r6, #1
     comm_d_usb.rx_buffer[comm_d_usb.rx_index++] = *Buf;
 80042c8:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <CDC_Receive_FS+0x70>)
 80042ca:	4425      	add	r5, r4
  while (len--)
 80042cc:	42a9      	cmp	r1, r5
 80042ce:	d101      	bne.n	80042d4 <CDC_Receive_FS+0x3c>
     Buf++;
  }

  return USBD_OK;
 80042d0:	2000      	movs	r0, #0
  /* USER CODE END 6 */
}
 80042d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d4:	460f      	mov	r7, r1
     comm_d_usb.rx_buffer[comm_d_usb.rx_index++] = *Buf;
 80042d6:	f893 4065 	ldrb.w	r4, [r3, #101]	; 0x65
 80042da:	3101      	adds	r1, #1
 80042dc:	1c62      	adds	r2, r4, #1
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80042e4:	f811 cc01 	ldrb.w	ip, [r1, #-1]
     if (comm_d_usb.rx_index >= RX_BUFF_LAST)
 80042e8:	2a62      	cmp	r2, #98	; 0x62
         comm_d_usb.rx_index = 0;
 80042ea:	bf88      	it	hi
 80042ec:	f883 0065 	strbhi.w	r0, [r3, #101]	; 0x65
     comm_d_usb.rx_buffer[comm_d_usb.rx_index++] = *Buf;
 80042f0:	f803 c004 	strb.w	ip, [r3, r4]
     if (*Buf == '\n')
 80042f4:	783a      	ldrb	r2, [r7, #0]
 80042f6:	2a0a      	cmp	r2, #10
         comm_d_usb.available = 1;
 80042f8:	bf08      	it	eq
 80042fa:	f883 6064 	strbeq.w	r6, [r3, #100]	; 0x64
 80042fe:	e7e5      	b.n	80042cc <CDC_Receive_FS+0x34>
     return USBD_FAIL;
 8004300:	2002      	movs	r0, #2
 8004302:	e7e6      	b.n	80042d2 <CDC_Receive_FS+0x3a>
 8004304:	20000680 	.word	0x20000680
 8004308:	20000616 	.word	0x20000616

0800430c <CDC_Init_FS>:
{
 800430c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800430e:	4c06      	ldr	r4, [pc, #24]	; (8004328 <CDC_Init_FS+0x1c>)
 8004310:	2200      	movs	r2, #0
 8004312:	4906      	ldr	r1, [pc, #24]	; (800432c <CDC_Init_FS+0x20>)
 8004314:	4620      	mov	r0, r4
 8004316:	f7ff fbc0 	bl	8003a9a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800431a:	4905      	ldr	r1, [pc, #20]	; (8004330 <CDC_Init_FS+0x24>)
 800431c:	4620      	mov	r0, r4
 800431e:	f7ff fbc4 	bl	8003aaa <USBD_CDC_SetRxBuffer>
}
 8004322:	2000      	movs	r0, #0
 8004324:	bd10      	pop	{r4, pc}
 8004326:	bf00      	nop
 8004328:	20000680 	.word	0x20000680
 800432c:	20000d2c 	.word	0x20000d2c
 8004330:	20000944 	.word	0x20000944

08004334 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004334:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004336:	4c09      	ldr	r4, [pc, #36]	; (800435c <CDC_Transmit_FS+0x28>)
{
 8004338:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800433a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800433e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004342:	b943      	cbnz	r3, 8004356 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004344:	4601      	mov	r1, r0
 8004346:	4620      	mov	r0, r4
 8004348:	f7ff fba7 	bl	8003a9a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800434c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800434e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004352:	f7ff bbb0 	b.w	8003ab6 <USBD_CDC_TransmitPacket>
}
 8004356:	2001      	movs	r0, #1
 8004358:	bd10      	pop	{r4, pc}
 800435a:	bf00      	nop
 800435c:	20000680 	.word	0x20000680

08004360 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004360:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004362:	4801      	ldr	r0, [pc, #4]	; (8004368 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004364:	800b      	strh	r3, [r1, #0]
}
 8004366:	4770      	bx	lr
 8004368:	20000148 	.word	0x20000148

0800436c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800436c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800436e:	4801      	ldr	r0, [pc, #4]	; (8004374 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004370:	800b      	strh	r3, [r1, #0]
}
 8004372:	4770      	bx	lr
 8004374:	2000015c 	.word	0x2000015c

08004378 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004378:	2300      	movs	r3, #0
 800437a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800437c:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 800437e:	0f05      	lsrs	r5, r0, #28
 8004380:	b2ec      	uxtb	r4, r5
 8004382:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8004384:	bf94      	ite	ls
 8004386:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004388:	3437      	addhi	r4, #55	; 0x37
 800438a:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800438e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8004392:	3301      	adds	r3, #1
 8004394:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 8004396:	b2dc      	uxtb	r4, r3
 8004398:	42a2      	cmp	r2, r4
    value = value << 4;
 800439a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800439e:	d8ee      	bhi.n	800437e <IntToUnicode+0x6>
  }
}
 80043a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080043a4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80043a4:	231a      	movs	r3, #26
{
 80043a6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80043a8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <USBD_FS_SerialStrDescriptor+0x2c>)
 80043ac:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80043ae:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80043b0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80043b2:	18c0      	adds	r0, r0, r3
 80043b4:	d00a      	beq.n	80043cc <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80043b6:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80043b8:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80043ba:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80043bc:	4906      	ldr	r1, [pc, #24]	; (80043d8 <USBD_FS_SerialStrDescriptor+0x34>)
 80043be:	f7ff ffdb 	bl	8004378 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80043c2:	2204      	movs	r2, #4
 80043c4:	4905      	ldr	r1, [pc, #20]	; (80043dc <USBD_FS_SerialStrDescriptor+0x38>)
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7ff ffd6 	bl	8004378 <IntToUnicode>
}
 80043cc:	4804      	ldr	r0, [pc, #16]	; (80043e0 <USBD_FS_SerialStrDescriptor+0x3c>)
 80043ce:	bd10      	pop	{r4, pc}
 80043d0:	1ffff7e8 	.word	0x1ffff7e8
 80043d4:	1ffff7ec 	.word	0x1ffff7ec
 80043d8:	20000162 	.word	0x20000162
 80043dc:	20000172 	.word	0x20000172
 80043e0:	20000160 	.word	0x20000160

080043e4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80043e4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80043e6:	4c04      	ldr	r4, [pc, #16]	; (80043f8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80043e8:	460a      	mov	r2, r1
 80043ea:	4804      	ldr	r0, [pc, #16]	; (80043fc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80043ec:	4621      	mov	r1, r4
 80043ee:	f7ff fec8 	bl	8004182 <USBD_GetString>
}
 80043f2:	4620      	mov	r0, r4
 80043f4:	bd10      	pop	{r4, pc}
 80043f6:	bf00      	nop
 80043f8:	20001114 	.word	0x20001114
 80043fc:	0800a651 	.word	0x0800a651

08004400 <USBD_FS_ProductStrDescriptor>:
{
 8004400:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004402:	4c04      	ldr	r4, [pc, #16]	; (8004414 <USBD_FS_ProductStrDescriptor+0x14>)
 8004404:	460a      	mov	r2, r1
 8004406:	4804      	ldr	r0, [pc, #16]	; (8004418 <USBD_FS_ProductStrDescriptor+0x18>)
 8004408:	4621      	mov	r1, r4
 800440a:	f7ff feba 	bl	8004182 <USBD_GetString>
}
 800440e:	4620      	mov	r0, r4
 8004410:	bd10      	pop	{r4, pc}
 8004412:	bf00      	nop
 8004414:	20001114 	.word	0x20001114
 8004418:	0800a661 	.word	0x0800a661

0800441c <USBD_FS_ConfigStrDescriptor>:
{
 800441c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800441e:	4c04      	ldr	r4, [pc, #16]	; (8004430 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004420:	460a      	mov	r2, r1
 8004422:	4804      	ldr	r0, [pc, #16]	; (8004434 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004424:	4621      	mov	r1, r4
 8004426:	f7ff feac 	bl	8004182 <USBD_GetString>
}
 800442a:	4620      	mov	r0, r4
 800442c:	bd10      	pop	{r4, pc}
 800442e:	bf00      	nop
 8004430:	20001114 	.word	0x20001114
 8004434:	0800a638 	.word	0x0800a638

08004438 <USBD_FS_InterfaceStrDescriptor>:
{
 8004438:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800443a:	4c04      	ldr	r4, [pc, #16]	; (800444c <USBD_FS_InterfaceStrDescriptor+0x14>)
 800443c:	460a      	mov	r2, r1
 800443e:	4804      	ldr	r0, [pc, #16]	; (8004450 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004440:	4621      	mov	r1, r4
 8004442:	f7ff fe9e 	bl	8004182 <USBD_GetString>
}
 8004446:	4620      	mov	r0, r4
 8004448:	bd10      	pop	{r4, pc}
 800444a:	bf00      	nop
 800444c:	20001114 	.word	0x20001114
 8004450:	0800a643 	.word	0x0800a643

08004454 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004454:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <HAL_PCD_MspInit+0x3c>)
 8004458:	6802      	ldr	r2, [r0, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d115      	bne.n	800448a <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800445e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004462:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004464:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8004466:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800446a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800446c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800446e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004470:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8004472:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800447a:	f7fd fb45 	bl	8001b08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800447e:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004480:	b003      	add	sp, #12
 8004482:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004486:	f7fd bb73 	b.w	8001b70 <HAL_NVIC_EnableIRQ>
}
 800448a:	b003      	add	sp, #12
 800448c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004490:	40005c00 	.word	0x40005c00

08004494 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004494:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8004498:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800449c:	f7ff bb6a 	b.w	8003b74 <USBD_LL_SetupStage>

080044a0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80044a0:	2328      	movs	r3, #40	; 0x28
 80044a2:	fb03 0301 	mla	r3, r3, r1, r0
 80044a6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80044aa:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80044ae:	f7ff bb8e 	b.w	8003bce <USBD_LL_DataOutStage>

080044b2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80044b2:	2328      	movs	r3, #40	; 0x28
 80044b4:	fb03 0301 	mla	r3, r3, r1, r0
 80044b8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80044bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044be:	f7ff bbc0 	b.w	8003c42 <USBD_LL_DataInStage>

080044c2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80044c2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80044c6:	f7ff bc54 	b.w	8003d72 <USBD_LL_SOF>

080044ca <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80044ca:	6883      	ldr	r3, [r0, #8]
{
 80044cc:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80044ce:	2b02      	cmp	r3, #2
{
 80044d0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80044d2:	d001      	beq.n	80044d8 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80044d4:	f7fd fa24 	bl	8001920 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80044d8:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80044dc:	2101      	movs	r1, #1
 80044de:	f7ff fc32 	bl	8003d46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80044e2:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 80044e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80044ea:	f7ff bc05 	b.w	8003cf8 <USBD_LL_Reset>
	...

080044f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80044f0:	b510      	push	{r4, lr}
 80044f2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80044f4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80044f8:	f7ff fc28 	bl	8003d4c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80044fc:	69a3      	ldr	r3, [r4, #24]
 80044fe:	b123      	cbz	r3, 800450a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004500:	4a02      	ldr	r2, [pc, #8]	; (800450c <HAL_PCD_SuspendCallback+0x1c>)
 8004502:	6913      	ldr	r3, [r2, #16]
 8004504:	f043 0306 	orr.w	r3, r3, #6
 8004508:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800450a:	bd10      	pop	{r4, pc}
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004510:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004514:	f7ff bc23 	b.w	8003d5e <USBD_LL_Resume>

08004518 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004518:	2308      	movs	r3, #8
{
 800451a:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800451c:	4a1d      	ldr	r2, [pc, #116]	; (8004594 <USBD_LL_Init+0x7c>)
{
 800451e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004520:	481d      	ldr	r0, [pc, #116]	; (8004598 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004522:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004526:	2302      	movs	r3, #2
 8004528:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800452a:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800452c:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8004530:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004534:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004538:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800453a:	f7fd fb3d 	bl	8001bb8 <HAL_PCD_Init>
 800453e:	b108      	cbz	r0, 8004544 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8004540:	f7fd f9ee 	bl	8001920 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004544:	2200      	movs	r2, #0
 8004546:	2318      	movs	r3, #24
 8004548:	4611      	mov	r1, r2
 800454a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800454e:	f7fe f8f7 	bl	8002740 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004552:	2358      	movs	r3, #88	; 0x58
 8004554:	2200      	movs	r2, #0
 8004556:	2180      	movs	r1, #128	; 0x80
 8004558:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800455c:	f7fe f8f0 	bl	8002740 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004560:	23c0      	movs	r3, #192	; 0xc0
 8004562:	2200      	movs	r2, #0
 8004564:	2181      	movs	r1, #129	; 0x81
 8004566:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800456a:	f7fe f8e9 	bl	8002740 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800456e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004572:	2200      	movs	r2, #0
 8004574:	2101      	movs	r1, #1
 8004576:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800457a:	f7fe f8e1 	bl	8002740 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800457e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004582:	2200      	movs	r2, #0
 8004584:	2182      	movs	r1, #130	; 0x82
 8004586:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800458a:	f7fe f8d9 	bl	8002740 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800458e:	2000      	movs	r0, #0
 8004590:	bd10      	pop	{r4, pc}
 8004592:	bf00      	nop
 8004594:	40005c00 	.word	0x40005c00
 8004598:	20001314 	.word	0x20001314

0800459c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800459c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800459e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80045a2:	f7fd fb81 	bl	8001ca8 <HAL_PCD_Start>
 80045a6:	2803      	cmp	r0, #3
 80045a8:	bf96      	itet	ls
 80045aa:	4b02      	ldrls	r3, [pc, #8]	; (80045b4 <USBD_LL_Start+0x18>)
 80045ac:	2002      	movhi	r0, #2
 80045ae:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80045b0:	bd08      	pop	{r3, pc}
 80045b2:	bf00      	nop
 80045b4:	0800a673 	.word	0x0800a673

080045b8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80045b8:	b510      	push	{r4, lr}
 80045ba:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80045bc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80045c0:	4613      	mov	r3, r2
 80045c2:	4622      	mov	r2, r4
 80045c4:	f7fd ffc0 	bl	8002548 <HAL_PCD_EP_Open>
 80045c8:	2803      	cmp	r0, #3
 80045ca:	bf96      	itet	ls
 80045cc:	4b01      	ldrls	r3, [pc, #4]	; (80045d4 <USBD_LL_OpenEP+0x1c>)
 80045ce:	2002      	movhi	r0, #2
 80045d0:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80045d2:	bd10      	pop	{r4, pc}
 80045d4:	0800a673 	.word	0x0800a673

080045d8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80045d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80045da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80045de:	f7fd ffe5 	bl	80025ac <HAL_PCD_EP_Close>
 80045e2:	2803      	cmp	r0, #3
 80045e4:	bf96      	itet	ls
 80045e6:	4b02      	ldrls	r3, [pc, #8]	; (80045f0 <USBD_LL_CloseEP+0x18>)
 80045e8:	2002      	movhi	r0, #2
 80045ea:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80045ec:	bd08      	pop	{r3, pc}
 80045ee:	bf00      	nop
 80045f0:	0800a673 	.word	0x0800a673

080045f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80045f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80045f6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80045fa:	f7fe f83b 	bl	8002674 <HAL_PCD_EP_SetStall>
 80045fe:	2803      	cmp	r0, #3
 8004600:	bf96      	itet	ls
 8004602:	4b02      	ldrls	r3, [pc, #8]	; (800460c <USBD_LL_StallEP+0x18>)
 8004604:	2002      	movhi	r0, #2
 8004606:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004608:	bd08      	pop	{r3, pc}
 800460a:	bf00      	nop
 800460c:	0800a673 	.word	0x0800a673

08004610 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004610:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004612:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004616:	f7fe f861 	bl	80026dc <HAL_PCD_EP_ClrStall>
 800461a:	2803      	cmp	r0, #3
 800461c:	bf96      	itet	ls
 800461e:	4b02      	ldrls	r3, [pc, #8]	; (8004628 <USBD_LL_ClearStallEP+0x18>)
 8004620:	2002      	movhi	r0, #2
 8004622:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004624:	bd08      	pop	{r3, pc}
 8004626:	bf00      	nop
 8004628:	0800a673 	.word	0x0800a673

0800462c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800462c:	2228      	movs	r2, #40	; 0x28
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 800462e:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004632:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004636:	bf1b      	ittet	ne
 8004638:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 800463c:	fb03 2102 	mlane	r1, r3, r2, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004640:	fb02 0101 	mlaeq	r1, r2, r1, r0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004644:	1809      	addne	r1, r1, r0
 8004646:	bf14      	ite	ne
 8004648:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800464a:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
  }
}
 800464e:	4770      	bx	lr

08004650 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004650:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004652:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004656:	f7fd fb40 	bl	8001cda <HAL_PCD_SetAddress>
 800465a:	2803      	cmp	r0, #3
 800465c:	bf96      	itet	ls
 800465e:	4b02      	ldrls	r3, [pc, #8]	; (8004668 <USBD_LL_SetUSBAddress+0x18>)
 8004660:	2002      	movhi	r0, #2
 8004662:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004664:	bd08      	pop	{r3, pc}
 8004666:	bf00      	nop
 8004668:	0800a673 	.word	0x0800a673

0800466c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800466c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800466e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004672:	f7fd ffe5 	bl	8002640 <HAL_PCD_EP_Transmit>
 8004676:	2803      	cmp	r0, #3
 8004678:	bf96      	itet	ls
 800467a:	4b02      	ldrls	r3, [pc, #8]	; (8004684 <USBD_LL_Transmit+0x18>)
 800467c:	2002      	movhi	r0, #2
 800467e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004680:	bd08      	pop	{r3, pc}
 8004682:	bf00      	nop
 8004684:	0800a673 	.word	0x0800a673

08004688 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004688:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800468a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800468e:	f7fd ffb6 	bl	80025fe <HAL_PCD_EP_Receive>
 8004692:	2803      	cmp	r0, #3
 8004694:	bf96      	itet	ls
 8004696:	4b02      	ldrls	r3, [pc, #8]	; (80046a0 <USBD_LL_PrepareReceive+0x18>)
 8004698:	2002      	movhi	r0, #2
 800469a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800469c:	bd08      	pop	{r3, pc}
 800469e:	bf00      	nop
 80046a0:	0800a673 	.word	0x0800a673

080046a4 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80046a4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046a8:	f7fd bfc2 	b.w	8002630 <HAL_PCD_EP_GetRxCount>

080046ac <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80046ac:	4800      	ldr	r0, [pc, #0]	; (80046b0 <USBD_static_malloc+0x4>)
 80046ae:	4770      	bx	lr
 80046b0:	20000388 	.word	0x20000388

080046b4 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 80046b4:	4770      	bx	lr

080046b6 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80046b6:	4770      	bx	lr

080046b8 <app_main>:
#include "comm.h"
#include "main.h"


void app_main(void)
{
 80046b8:	b580      	push	{r7, lr}
    pwm_init(&pwm);
 80046ba:	482a      	ldr	r0, [pc, #168]	; (8004764 <app_main+0xac>)
 80046bc:	f000 fb6e 	bl	8004d9c <pwm_init>
    led_init(&led);
 80046c0:	4829      	ldr	r0, [pc, #164]	; (8004768 <app_main+0xb0>)
 80046c2:	f000 faf6 	bl	8004cb2 <led_init>
    daq_init(&daq);
 80046c6:	4829      	ldr	r0, [pc, #164]	; (800476c <app_main+0xb4>)
 80046c8:	f000 fdc0 	bl	800524c <daq_init>
    cntr_init(&cntr);
 80046cc:	4828      	ldr	r0, [pc, #160]	; (8004770 <app_main+0xb8>)
 80046ce:	f000 fb31 	bl	8004d34 <cntr_init>

    // init PWM (debug enable)
    pwm_set(&pwm, 1, 10, 50);
 80046d2:	4b28      	ldr	r3, [pc, #160]	; (8004774 <app_main+0xbc>)
 80046d4:	4a28      	ldr	r2, [pc, #160]	; (8004778 <app_main+0xc0>)
 80046d6:	2101      	movs	r1, #1
 80046d8:	4822      	ldr	r0, [pc, #136]	; (8004764 <app_main+0xac>)
 80046da:	f000 fb63 	bl	8004da4 <pwm_set>
    pwm_set(&pwm, 2, 10, 50);
 80046de:	2102      	movs	r1, #2
 80046e0:	4b24      	ldr	r3, [pc, #144]	; (8004774 <app_main+0xbc>)
 80046e2:	4a25      	ldr	r2, [pc, #148]	; (8004778 <app_main+0xc0>)
 80046e4:	481f      	ldr	r0, [pc, #124]	; (8004764 <app_main+0xac>)
 80046e6:	f000 fb5d 	bl	8004da4 <pwm_set>
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80046ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046ee:	681a      	ldr	r2, [r3, #0]
    LL_TIM_EnableCounter(PS_TIM_PWM);
    LL_TIM_CC_EnableChannel(PS_TIM_PWM, LL_TIM_CHANNEL_CH1);
    LL_TIM_CC_EnableChannel(PS_TIM_PWM, LL_TIM_CHANNEL_CH2);

    LL_USART_EnableIT_RXNE(PS_UART);
    uart_put_text(WELCOME_STR);
 80046f0:	4822      	ldr	r0, [pc, #136]	; (800477c <app_main+0xc4>)
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 80046f8:	6a1a      	ldr	r2, [r3, #32]

    led_blink_set(&led, 3, PS_BLINK_LONG);

    while (1)
    {
        IWDG->KR = 0xAAAA;
 80046fa:	f64a 26aa 	movw	r6, #43690	; 0xaaaa
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	621a      	str	r2, [r3, #32]
 8004704:	6a1a      	ldr	r2, [r3, #32]
 8004706:	4d1e      	ldr	r5, [pc, #120]	; (8004780 <app_main+0xc8>)
 8004708:	f042 0210 	orr.w	r2, r2, #16
 800470c:	621a      	str	r2, [r3, #32]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800470e:	4a1d      	ldr	r2, [pc, #116]	; (8004784 <app_main+0xcc>)

        daq_trig_check(&daq); // 100x less??

        led_blink_do(&led);
 8004710:	4c15      	ldr	r4, [pc, #84]	; (8004768 <app_main+0xb0>)
 8004712:	68d3      	ldr	r3, [r2, #12]
 8004714:	f043 0320 	orr.w	r3, r3, #32
 8004718:	60d3      	str	r3, [r2, #12]
    uart_put_text(WELCOME_STR);
 800471a:	f000 f8a7 	bl	800486c <uart_put_text>
    comm_init();
 800471e:	f000 f8b9 	bl	8004894 <comm_init>
    daq_mode_set(&daq, SCOPE);
 8004722:	2100      	movs	r1, #0
 8004724:	4811      	ldr	r0, [pc, #68]	; (800476c <app_main+0xb4>)
 8004726:	f001 fa75 	bl	8005c14 <daq_mode_set>
    daq_enable(&daq, 1);
 800472a:	2101      	movs	r1, #1
 800472c:	480f      	ldr	r0, [pc, #60]	; (800476c <app_main+0xb4>)
 800472e:	f000 fec1 	bl	80054b4 <daq_enable>
    led_blink_set(&led, 3, PS_BLINK_LONG);
 8004732:	4a15      	ldr	r2, [pc, #84]	; (8004788 <app_main+0xd0>)
 8004734:	2103      	movs	r1, #3
 8004736:	480c      	ldr	r0, [pc, #48]	; (8004768 <app_main+0xb0>)
 8004738:	f000 fae4 	bl	8004d04 <led_blink_set>
        daq_trig_check(&daq); // 100x less??
 800473c:	4f0b      	ldr	r7, [pc, #44]	; (800476c <app_main+0xb4>)
 800473e:	4638      	mov	r0, r7
        IWDG->KR = 0xAAAA;
 8004740:	602e      	str	r6, [r5, #0]
        daq_trig_check(&daq); // 100x less??
 8004742:	f000 fc9f 	bl	8005084 <daq_trig_check>
        led_blink_do(&led);
 8004746:	4808      	ldr	r0, [pc, #32]	; (8004768 <app_main+0xb0>)
 8004748:	f000 fae4 	bl	8004d14 <led_blink_do>

        if (comm_main())
 800474c:	f000 f8e2 	bl	8004914 <comm_main>
 8004750:	2800      	cmp	r0, #0
 8004752:	d0f4      	beq.n	800473e <app_main+0x86>
            led_blink_set(&led, 1, PS_BLINK_SHORT);
 8004754:	f247 5230 	movw	r2, #30000	; 0x7530
 8004758:	2101      	movs	r1, #1
 800475a:	4620      	mov	r0, r4
 800475c:	f000 fad2 	bl	8004d04 <led_blink_set>
 8004760:	e7ec      	b.n	800473c <app_main+0x84>
 8004762:	bf00      	nop
 8004764:	200016e4 	.word	0x200016e4
 8004768:	200016d4 	.word	0x200016d4
 800476c:	20001610 	.word	0x20001610
 8004770:	20001600 	.word	0x20001600
 8004774:	42480000 	.word	0x42480000
 8004778:	41200000 	.word	0x41200000
 800477c:	0800a677 	.word	0x0800a677
 8004780:	40003000 	.word	0x40003000
 8004784:	40013800 	.word	0x40013800
 8004788:	000493e0 	.word	0x000493e0

0800478c <SCPI_Flush>:
scpi_result_t SCPI_Flush(scpi_t * context)
{
    (void) context;

    return SCPI_RES_OK;
}
 800478c:	2001      	movs	r0, #1
 800478e:	4770      	bx	lr

08004790 <respond>:
    for (int i = 0; i < len; i++)
        uart_put_char(data[i]);
}

static int respond(const char* data, int len)
{
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (comm_d_uart.available)
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <respond+0x4c>)
{
 8004794:	4606      	mov	r6, r0
    if (comm_d_uart.available)
 8004796:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
{
 800479a:	460c      	mov	r4, r1
    if (comm_d_uart.available)
 800479c:	b16b      	cbz	r3, 80047ba <respond+0x2a>
 800479e:	4603      	mov	r3, r0
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80047a0:	4a0f      	ldr	r2, [pc, #60]	; (80047e0 <respond+0x50>)
    for (int i = 0; i < len; i++)
 80047a2:	1b99      	subs	r1, r3, r6
 80047a4:	42a1      	cmp	r1, r4
 80047a6:	db01      	blt.n	80047ac <respond+0x1c>
        }

        return len;
    }
    return 0;
}
 80047a8:	4620      	mov	r0, r4
 80047aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uart_put_char(data[i]);
 80047ac:	f813 1b01 	ldrb.w	r1, [r3], #1
 80047b0:	6810      	ldr	r0, [r2, #0]
    while(!LL_USART_IsActiveFlag_TXE(PS_UART));
 80047b2:	0600      	lsls	r0, r0, #24
 80047b4:	d5fc      	bpl.n	80047b0 <respond+0x20>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80047b6:	6051      	str	r1, [r2, #4]
 80047b8:	e7f3      	b.n	80047a2 <respond+0x12>
    else if (comm_d_usb.available)
 80047ba:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <respond+0x54>)
 80047bc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80047c0:	b153      	cbz	r3, 80047d8 <respond+0x48>
 80047c2:	4d09      	ldr	r5, [pc, #36]	; (80047e8 <respond+0x58>)
            ret = CDC_Transmit_FS((uint8_t *)data, len);
 80047c4:	b28f      	uxth	r7, r1
 80047c6:	4639      	mov	r1, r7
 80047c8:	4630      	mov	r0, r6
 80047ca:	f7ff fdb3 	bl	8004334 <CDC_Transmit_FS>
        while (ret == USBD_BUSY && cntr > 0)
 80047ce:	2801      	cmp	r0, #1
 80047d0:	d1ea      	bne.n	80047a8 <respond+0x18>
 80047d2:	3d01      	subs	r5, #1
 80047d4:	d1f7      	bne.n	80047c6 <respond+0x36>
 80047d6:	e7e7      	b.n	80047a8 <respond+0x18>
    return 0;
 80047d8:	461c      	mov	r4, r3
 80047da:	e7e5      	b.n	80047a8 <respond+0x18>
 80047dc:	200005b0 	.word	0x200005b0
 80047e0:	40013800 	.word	0x40013800
 80047e4:	20000616 	.word	0x20000616
 80047e8:	000f4240 	.word	0x000f4240

080047ec <SCPI_Write>:
{
 80047ec:	4608      	mov	r0, r1
    return respond(data, len);
 80047ee:	4611      	mov	r1, r2
 80047f0:	f7ff bfce 	b.w	8004790 <respond>

080047f4 <SCPI_Reset>:
{
 80047f4:	b508      	push	{r3, lr}
    respond("**Reset\r\n", 9);
 80047f6:	2109      	movs	r1, #9
 80047f8:	4802      	ldr	r0, [pc, #8]	; (8004804 <SCPI_Reset+0x10>)
 80047fa:	f7ff ffc9 	bl	8004790 <respond>
}
 80047fe:	2001      	movs	r0, #1
 8004800:	bd08      	pop	{r3, pc}
 8004802:	bf00      	nop
 8004804:	0800a81f 	.word	0x0800a81f

08004808 <SCPI_Error>:
{
 8004808:	b510      	push	{r4, lr}
    int len = sprintf(buff, "**ERROR: %d, \"%s\"\r\n", (int16_t) err, SCPI_ErrorTranslate(err));
 800480a:	b20c      	sxth	r4, r1
{
 800480c:	b09a      	sub	sp, #104	; 0x68
    int len = sprintf(buff, "**ERROR: %d, \"%s\"\r\n", (int16_t) err, SCPI_ErrorTranslate(err));
 800480e:	4620      	mov	r0, r4
 8004810:	f002 fc90 	bl	8007134 <SCPI_ErrorTranslate>
 8004814:	4622      	mov	r2, r4
 8004816:	4603      	mov	r3, r0
 8004818:	4905      	ldr	r1, [pc, #20]	; (8004830 <SCPI_Error+0x28>)
 800481a:	a801      	add	r0, sp, #4
 800481c:	f004 fa2c 	bl	8008c78 <siprintf>
    respond(buff, len);
 8004820:	4601      	mov	r1, r0
 8004822:	a801      	add	r0, sp, #4
 8004824:	f7ff ffb4 	bl	8004790 <respond>
}
 8004828:	2000      	movs	r0, #0
 800482a:	b01a      	add	sp, #104	; 0x68
 800482c:	bd10      	pop	{r4, pc}
 800482e:	bf00      	nop
 8004830:	0800a80b 	.word	0x0800a80b

08004834 <SCPI_Control>:
{
 8004834:	b500      	push	{lr}
    if (SCPI_CTRL_SRQ == ctrl)
 8004836:	2901      	cmp	r1, #1
{
 8004838:	b09d      	sub	sp, #116	; 0x74
 800483a:	4613      	mov	r3, r2
    if (SCPI_CTRL_SRQ == ctrl)
 800483c:	d10b      	bne.n	8004856 <SCPI_Control+0x22>
        len = sprintf(buff, "**SRQ: 0x%X (%d)\r\n", val, val);
 800483e:	4909      	ldr	r1, [pc, #36]	; (8004864 <SCPI_Control+0x30>)
 8004840:	a803      	add	r0, sp, #12
 8004842:	f004 fa19 	bl	8008c78 <siprintf>
    respond(buff, len);
 8004846:	4601      	mov	r1, r0
 8004848:	a803      	add	r0, sp, #12
 800484a:	f7ff ffa1 	bl	8004790 <respond>
}
 800484e:	2001      	movs	r0, #1
 8004850:	b01d      	add	sp, #116	; 0x74
 8004852:	f85d fb04 	ldr.w	pc, [sp], #4
        len = sprintf(buff, "**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
 8004856:	9200      	str	r2, [sp, #0]
 8004858:	a803      	add	r0, sp, #12
 800485a:	460a      	mov	r2, r1
 800485c:	4902      	ldr	r1, [pc, #8]	; (8004868 <SCPI_Control+0x34>)
 800485e:	f004 fa0b 	bl	8008c78 <siprintf>
 8004862:	e7f0      	b.n	8004846 <SCPI_Control+0x12>
 8004864:	0800a7df 	.word	0x0800a7df
 8004868:	0800a7f2 	.word	0x0800a7f2

0800486c <uart_put_text>:
{
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	4604      	mov	r4, r0
    for (int i = 0; i < strlen(data); i++)
 8004870:	4605      	mov	r5, r0
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004872:	4e07      	ldr	r6, [pc, #28]	; (8004890 <uart_put_text+0x24>)
 8004874:	4620      	mov	r0, r4
 8004876:	f7fb fc75 	bl	8000164 <strlen>
 800487a:	1b2b      	subs	r3, r5, r4
 800487c:	4298      	cmp	r0, r3
 800487e:	d800      	bhi.n	8004882 <uart_put_text+0x16>
}
 8004880:	bd70      	pop	{r4, r5, r6, pc}
        uart_put_char(data[i]);
 8004882:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004886:	6832      	ldr	r2, [r6, #0]
    while(!LL_USART_IsActiveFlag_TXE(PS_UART));
 8004888:	0612      	lsls	r2, r2, #24
 800488a:	d5fc      	bpl.n	8004886 <uart_put_text+0x1a>
  USARTx->DR = Value;
 800488c:	6073      	str	r3, [r6, #4]
 800488e:	e7f1      	b.n	8004874 <uart_put_text+0x8>
 8004890:	40013800 	.word	0x40013800

08004894 <comm_init>:

/************************* Main Comm *************************/

void comm_init(void)
{
    comm_d_uart.available = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <comm_init+0x50>)
{
 8004898:	b500      	push	{lr}
    comm_d_uart.available = 0;
 800489a:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    comm_d_uart.rx_index = 0;
 800489e:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
    comm_d_usb.available = 0;
 80048a2:	4a11      	ldr	r2, [pc, #68]	; (80048e8 <comm_init+0x54>)
{
 80048a4:	b089      	sub	sp, #36	; 0x24
    comm_d_usb.available = 0;
 80048a6:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    comm_d_usb.rx_index = 0;
 80048aa:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65

    SCPI_Init(&scpi_context,
 80048ae:	2311      	movs	r3, #17
 80048b0:	9307      	str	r3, [sp, #28]
 80048b2:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <comm_init+0x58>)
 80048b4:	4a0e      	ldr	r2, [pc, #56]	; (80048f0 <comm_init+0x5c>)
 80048b6:	9306      	str	r3, [sp, #24]
 80048b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048bc:	9305      	str	r3, [sp, #20]
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <comm_init+0x60>)
 80048c0:	490d      	ldr	r1, [pc, #52]	; (80048f8 <comm_init+0x64>)
 80048c2:	9304      	str	r3, [sp, #16]
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <comm_init+0x68>)
 80048c6:	480e      	ldr	r0, [pc, #56]	; (8004900 <comm_init+0x6c>)
 80048c8:	9303      	str	r3, [sp, #12]
 80048ca:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <comm_init+0x70>)
 80048cc:	9302      	str	r3, [sp, #8]
 80048ce:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <comm_init+0x74>)
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	4b0e      	ldr	r3, [pc, #56]	; (800490c <comm_init+0x78>)
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <comm_init+0x7c>)
 80048d8:	f003 fa40 	bl	8007d5c <SCPI_Init>
             &scpi_interface,
             scpi_units_def,
             SCPI_IDN1, SCPI_IDN2, SCPI_IDN3, SCPI_IDN4,
             scpi_input_buffer, SCPI_INPUT_BUFFER_LENGTH,
             scpi_error_queue_data, SCPI_ERROR_QUEUE_SIZE);
}
 80048dc:	b009      	add	sp, #36	; 0x24
 80048de:	f85d fb04 	ldr.w	pc, [sp], #4
 80048e2:	bf00      	nop
 80048e4:	200005b0 	.word	0x200005b0
 80048e8:	20000616 	.word	0x20000616
 80048ec:	200018c8 	.word	0x200018c8
 80048f0:	2000017c 	.word	0x2000017c
 80048f4:	200017c8 	.word	0x200017c8
 80048f8:	0800a840 	.word	0x0800a840
 80048fc:	0800ad93 	.word	0x0800ad93
 8004900:	200016f4 	.word	0x200016f4
 8004904:	0800a829 	.word	0x0800a829
 8004908:	0800a82f 	.word	0x0800a82f
 800490c:	0800a651 	.word	0x0800a651
 8004910:	0800ae00 	.word	0x0800ae00

08004914 <comm_main>:

uint8_t comm_main(void)
{
 8004914:	b538      	push	{r3, r4, r5, lr}
    if (comm_d_uart.available)
 8004916:	4c15      	ldr	r4, [pc, #84]	; (800496c <comm_main+0x58>)
 8004918:	f894 5064 	ldrb.w	r5, [r4, #100]	; 0x64
 800491c:	b18d      	cbz	r5, 8004942 <comm_main+0x2e>
    {
        SCPI_Input(&scpi_context, comm_d_uart.rx_buffer, comm_d_uart.rx_index);
 800491e:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8004922:	4621      	mov	r1, r4
 8004924:	4812      	ldr	r0, [pc, #72]	; (8004970 <comm_main+0x5c>)
 8004926:	f003 fdb7 	bl	8008498 <SCPI_Input>

        memset(comm_d_uart.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
 800492a:	2264      	movs	r2, #100	; 0x64
 800492c:	2100      	movs	r1, #0
 800492e:	4620      	mov	r0, r4
 8004930:	f004 f8e4 	bl	8008afc <memset>
        comm_d_uart.rx_index = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
        comm_d_uart.available = 0;
 800493a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        SCPI_Input(&scpi_context, comm_d_usb.rx_buffer, comm_d_usb.rx_index);

        memset(comm_d_usb.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
        comm_d_usb.rx_index = 0;
        comm_d_usb.available = 0;
        return 1;
 800493e:	2001      	movs	r0, #1
    }
    return 0;
}
 8004940:	bd38      	pop	{r3, r4, r5, pc}
    else if (comm_d_usb.available)
 8004942:	4c0c      	ldr	r4, [pc, #48]	; (8004974 <comm_main+0x60>)
 8004944:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8004948:	2800      	cmp	r0, #0
 800494a:	d0f9      	beq.n	8004940 <comm_main+0x2c>
        SCPI_Input(&scpi_context, comm_d_usb.rx_buffer, comm_d_usb.rx_index);
 800494c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8004950:	4621      	mov	r1, r4
 8004952:	4807      	ldr	r0, [pc, #28]	; (8004970 <comm_main+0x5c>)
 8004954:	f003 fda0 	bl	8008498 <SCPI_Input>
        memset(comm_d_usb.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
 8004958:	2264      	movs	r2, #100	; 0x64
 800495a:	4629      	mov	r1, r5
 800495c:	4620      	mov	r0, r4
 800495e:	f004 f8cd 	bl	8008afc <memset>
        comm_d_usb.rx_index = 0;
 8004962:	f884 5065 	strb.w	r5, [r4, #101]	; 0x65
        comm_d_usb.available = 0;
 8004966:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 800496a:	e7e8      	b.n	800493e <comm_main+0x2a>
 800496c:	200005b0 	.word	0x200005b0
 8004970:	200016f4 	.word	0x200016f4
 8004974:	20000616 	.word	0x20000616

08004978 <USART1_IRQHandler>:
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004978:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <USART1_IRQHandler+0x38>)
 800497a:	681a      	ldr	r2, [r3, #0]
}
*/

void USART1_IRQHandler(void)
{
    if (LL_USART_IsActiveFlag_RXNE(PS_UART))
 800497c:	0692      	lsls	r2, r2, #26
 800497e:	d516      	bpl.n	80049ae <USART1_IRQHandler+0x36>
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8004980:	f06f 0220 	mvn.w	r2, #32
 8004984:	601a      	str	r2, [r3, #0]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004986:	685a      	ldr	r2, [r3, #4]
    {
        LL_USART_ClearFlag_RXNE(PS_UART);
        char rx = LL_USART_ReceiveData8(PS_UART);

        comm_d_uart.rx_buffer[comm_d_uart.rx_index++] = rx;
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <USART1_IRQHandler+0x3c>)
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	f893 0065 	ldrb.w	r0, [r3, #101]	; 0x65
 8004990:	1c41      	adds	r1, r0, #1
 8004992:	b2c9      	uxtb	r1, r1

        if (comm_d_uart.rx_index >= RX_BUFF_LAST)
 8004994:	2962      	cmp	r1, #98	; 0x62
        comm_d_uart.rx_buffer[comm_d_uart.rx_index++] = rx;
 8004996:	f883 1065 	strb.w	r1, [r3, #101]	; 0x65
            comm_d_uart.rx_index = 0;
 800499a:	bf84      	itt	hi
 800499c:	2100      	movhi	r1, #0
 800499e:	f883 1065 	strbhi.w	r1, [r3, #101]	; 0x65

        if (rx == '\n')
 80049a2:	2a0a      	cmp	r2, #10
        comm_d_uart.rx_buffer[comm_d_uart.rx_index++] = rx;
 80049a4:	541a      	strb	r2, [r3, r0]
            comm_d_uart.available = 1;
 80049a6:	bf04      	itt	eq
 80049a8:	2201      	moveq	r2, #1
 80049aa:	f883 2064 	strbeq.w	r2, [r3, #100]	; 0x64
    }
}
 80049ae:	4770      	bx	lr
 80049b0:	40013800 	.word	0x40013800
 80049b4:	200005b0 	.word	0x200005b0

080049b8 <ADC1_2_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1));
 80049b8:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <ADC1_2_IRQHandler+0x18>)
 80049ba:	681a      	ldr	r2, [r3, #0]

void ADC1_2_IRQHandler(void)
{
#if defined(PS_ADC_MODE_ADC1)
    if (LL_ADC_IsActiveFlag_AWD1(ADC1))
 80049bc:	07d2      	lsls	r2, r2, #31
 80049be:	d505      	bpl.n	80049cc <ADC1_2_IRQHandler+0x14>
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_AWD1);
 80049c0:	f06f 0201 	mvn.w	r2, #1
#ifdef PS_ADC_MODE_ADC1234
        LL_ADC_ClearFlag_AWD1(ADC3);
        LL_ADC_ClearFlag_AWD1(ADC4);
#endif

        daq_trig_trigger_scope(&daq);
 80049c4:	4803      	ldr	r0, [pc, #12]	; (80049d4 <ADC1_2_IRQHandler+0x1c>)
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	f000 bb94 	b.w	80050f4 <daq_trig_trigger_scope>
    }
}
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40012400 	.word	0x40012400
 80049d4:	20001610 	.word	0x20001610

080049d8 <DMA1_Channel1_IRQHandler>:
}


void DMA1_Channel1_IRQHandler(void)
{
    asm("nop");
 80049d8:	bf00      	nop
}
 80049da:	4770      	bx	lr

080049dc <TIM3_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80049dc:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <TIM3_IRQHandler+0x98>)

void PS_TIM_TRIG_IRQh(void)
{
 80049de:	b510      	push	{r4, lr}
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	079b      	lsls	r3, r3, #30
 80049e4:	d544      	bpl.n	8004a70 <TIM3_IRQHandler+0x94>
    if(LL_TIM_IsActiveFlag_CC1(PS_TIM_TRIG) == 1)
    {
        ASSERT(daq.trig.buff_trig != NULL);
 80049e6:	4c24      	ldr	r4, [pc, #144]	; (8004a78 <TIM3_IRQHandler+0x9c>)
 80049e8:	f8d4 30b5 	ldr.w	r3, [r4, #181]	; 0xb5
 80049ec:	b91b      	cbnz	r3, 80049f6 <TIM3_IRQHandler+0x1a>
 80049ee:	2175      	movs	r1, #117	; 0x75
 80049f0:	4822      	ldr	r0, [pc, #136]	; (8004a7c <TIM3_IRQHandler+0xa0>)
 80049f2:	f002 f8fe 	bl	8006bf2 <assert2>
        ASSERT(daq.trig.dma_trig != 0);
 80049f6:	f8d4 30b9 	ldr.w	r3, [r4, #185]	; 0xb9
 80049fa:	b91b      	cbnz	r3, 8004a04 <TIM3_IRQHandler+0x28>
 80049fc:	2176      	movs	r1, #118	; 0x76
 80049fe:	481f      	ldr	r0, [pc, #124]	; (8004a7c <TIM3_IRQHandler+0xa0>)
 8004a00:	f002 f8f7 	bl	8006bf2 <assert2>

        int pos = daq.trig.buff_trig->len - LL_DMA_GetDataLength(DMA1, daq.trig.dma_trig);
 8004a04:	f8d4 30b5 	ldr.w	r3, [r4, #181]	; 0xb5
 8004a08:	f8d4 10b9 	ldr.w	r1, [r4, #185]	; 0xb9
 8004a0c:	88da      	ldrh	r2, [r3, #6]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <TIM3_IRQHandler+0xa4>)
 8004a10:	440b      	add	r3, r1
 8004a12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
        int last_idx = pos - 1;
        if (last_idx < 0)
            last_idx = daq.trig.buff_trig->len - 1;

        daq.trig.pos_last = last_idx;
        daq.trig.pos_diff = daq.trig.pos_last - daq.trig.pos_trig;
 8004a16:	f8d4 1095 	ldr.w	r1, [r4, #149]	; 0x95
 8004a1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a1e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	b29b      	uxth	r3, r3
        int pos = daq.trig.buff_trig->len - LL_DMA_GetDataLength(DMA1, daq.trig.dma_trig);
 8004a26:	1ad3      	subs	r3, r2, r3
        if (last_idx < 0)
 8004a28:	3b01      	subs	r3, #1
            last_idx = daq.trig.buff_trig->len - 1;
 8004a2a:	bf48      	it	mi
 8004a2c:	f102 33ff 	addmi.w	r3, r2, #4294967295
        daq.trig.pos_last = last_idx;
 8004a30:	f8c4 3099 	str.w	r3, [r4, #153]	; 0x99

        if (daq.trig.pos_diff < 0)
 8004a34:	1a5b      	subs	r3, r3, r1
            daq.trig.pos_diff += daq.trig.buff_trig->len;
 8004a36:	bf48      	it	mi
 8004a38:	189b      	addmi	r3, r3, r2
 8004a3a:	f8c4 309d 	str.w	r3, [r4, #157]	; 0x9d

        if (daq.trig.pos_diff >= daq.trig.posttrig_size)
 8004a3e:	f8d4 209d 	ldr.w	r2, [r4, #157]	; 0x9d
 8004a42:	f8d4 30ad 	ldr.w	r3, [r4, #173]	; 0xad
 8004a46:	429a      	cmp	r2, r3
 8004a48:	db0e      	blt.n	8004a68 <TIM3_IRQHandler+0x8c>
        {
            daq_enable(&daq, 0);
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	480a      	ldr	r0, [pc, #40]	; (8004a78 <TIM3_IRQHandler+0x9c>)
 8004a4e:	f000 fd31 	bl	80054b4 <daq_enable>
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004a52:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <TIM3_IRQHandler+0x98>)
 8004a54:	68d3      	ldr	r3, [r2, #12]
 8004a56:	f023 0302 	bic.w	r3, r3, #2
 8004a5a:	60d3      	str	r3, [r2, #12]
            //LL_TIM_DisableCounter(PS_TIM_TRIG);
            LL_TIM_DisableIT_CC1(PS_TIM_ADC);
            daq.trig.ready = 1;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
            daq.trig.is_post = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004a68:	f06f 0202 	mvn.w	r2, #2
 8004a6c:	4b01      	ldr	r3, [pc, #4]	; (8004a74 <TIM3_IRQHandler+0x98>)
 8004a6e:	611a      	str	r2, [r3, #16]
        }

        LL_TIM_ClearFlag_CC1(PS_TIM_TRIG);
    }
}
 8004a70:	bd10      	pop	{r4, pc}
 8004a72:	bf00      	nop
 8004a74:	40000400 	.word	0x40000400
 8004a78:	20001610 	.word	0x20001610
 8004a7c:	0800aad5 	.word	0x0800aad5
 8004a80:	0800aace 	.word	0x0800aace

08004a84 <TIM1_UP_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <TIM1_UP_IRQHandler+0x18>)
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	07d2      	lsls	r2, r2, #31
 8004a8a:	d506      	bpl.n	8004a9a <TIM1_UP_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004a8c:	f06f 0201 	mvn.w	r2, #1
 8004a90:	611a      	str	r2, [r3, #16]
void PS_TIM_CNTR_IRQh(void)
{
    if(LL_TIM_IsActiveFlag_UPDATE(PS_TIM_CNTR) == 1)
    {
        LL_TIM_ClearFlag_UPDATE(PS_TIM_CNTR);
        cntr.ovf++;
 8004a92:	4a03      	ldr	r2, [pc, #12]	; (8004aa0 <TIM1_UP_IRQHandler+0x1c>)
 8004a94:	68d3      	ldr	r3, [r2, #12]
 8004a96:	3301      	adds	r3, #1
 8004a98:	60d3      	str	r3, [r2, #12]
    }
}
 8004a9a:	4770      	bx	lr
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	20001600 	.word	0x20001600

08004aa4 <EXTI1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <EXTI1_IRQHandler+0x14>)
 8004aa6:	695a      	ldr	r2, [r3, #20]

void PS_LA_CH1_IRQh(void)
{
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI1) != RESET)
 8004aa8:	0792      	lsls	r2, r2, #30
 8004aaa:	d504      	bpl.n	8004ab6 <EXTI1_IRQHandler+0x12>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8004aac:	2202      	movs	r2, #2
    {
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI1);
        daq_trig_trigger_la(&daq);
 8004aae:	4803      	ldr	r0, [pc, #12]	; (8004abc <EXTI1_IRQHandler+0x18>)
 8004ab0:	615a      	str	r2, [r3, #20]
 8004ab2:	f000 bb89 	b.w	80051c8 <daq_trig_trigger_la>
    }
}
 8004ab6:	4770      	bx	lr
 8004ab8:	40010400 	.word	0x40010400
 8004abc:	20001610 	.word	0x20001610

08004ac0 <EXTI2_IRQHandler>:
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8004ac0:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <EXTI2_IRQHandler+0x14>)
 8004ac2:	695a      	ldr	r2, [r3, #20]

void PS_LA_CH2_IRQh(void)
{
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI2) != RESET)
 8004ac4:	0752      	lsls	r2, r2, #29
 8004ac6:	d504      	bpl.n	8004ad2 <EXTI2_IRQHandler+0x12>
  WRITE_REG(EXTI->PR, ExtiLine);
 8004ac8:	2204      	movs	r2, #4
    {
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI2);
        daq_trig_trigger_la(&daq);
 8004aca:	4803      	ldr	r0, [pc, #12]	; (8004ad8 <EXTI2_IRQHandler+0x18>)
 8004acc:	615a      	str	r2, [r3, #20]
 8004ace:	f000 bb7b 	b.w	80051c8 <daq_trig_trigger_la>
    }
}
 8004ad2:	4770      	bx	lr
 8004ad4:	40010400 	.word	0x40010400
 8004ad8:	20001610 	.word	0x20001610

08004adc <EXTI3_IRQHandler>:
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8004adc:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <EXTI3_IRQHandler+0x14>)
 8004ade:	695a      	ldr	r2, [r3, #20]

void PS_LA_CH3_IRQh(void)
{
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI3) != RESET)
 8004ae0:	0712      	lsls	r2, r2, #28
 8004ae2:	d504      	bpl.n	8004aee <EXTI3_IRQHandler+0x12>
  WRITE_REG(EXTI->PR, ExtiLine);
 8004ae4:	2208      	movs	r2, #8
    {
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI3);
        daq_trig_trigger_la(&daq);
 8004ae6:	4803      	ldr	r0, [pc, #12]	; (8004af4 <EXTI3_IRQHandler+0x18>)
 8004ae8:	615a      	str	r2, [r3, #20]
 8004aea:	f000 bb6d 	b.w	80051c8 <daq_trig_trigger_la>
    }
}
 8004aee:	4770      	bx	lr
 8004af0:	40010400 	.word	0x40010400
 8004af4:	20001610 	.word	0x20001610

08004af8 <EXTI4_IRQHandler>:
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <EXTI4_IRQHandler+0x14>)
 8004afa:	695a      	ldr	r2, [r3, #20]

void PS_LA_CH4_IRQh(void)
{
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI4) != RESET)
 8004afc:	06d2      	lsls	r2, r2, #27
 8004afe:	d504      	bpl.n	8004b0a <EXTI4_IRQHandler+0x12>
  WRITE_REG(EXTI->PR, ExtiLine);
 8004b00:	2210      	movs	r2, #16
    {
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI4);
        daq_trig_trigger_la(&daq);
 8004b02:	4803      	ldr	r0, [pc, #12]	; (8004b10 <EXTI4_IRQHandler+0x18>)
 8004b04:	615a      	str	r2, [r3, #20]
 8004b06:	f000 bb5f 	b.w	80051c8 <daq_trig_trigger_la>
    }
}
 8004b0a:	4770      	bx	lr
 8004b0c:	40010400 	.word	0x40010400
 8004b10:	20001610 	.word	0x20001610

08004b14 <daq_clear_buff>:
    }
}

static void daq_clear_buff(daq_buff_t* buff)
{
    buff->chans = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	7103      	strb	r3, [r0, #4]
 8004b18:	7143      	strb	r3, [r0, #5]
    buff->len = 0;
 8004b1a:	7183      	strb	r3, [r0, #6]
 8004b1c:	71c3      	strb	r3, [r0, #7]
    if (buff->data != NULL)
 8004b1e:	6800      	ldr	r0, [r0, #0]
 8004b20:	b108      	cbz	r0, 8004b26 <daq_clear_buff+0x12>
        free(buff->data);
 8004b22:	f003 bfad 	b.w	8008a80 <free>
}
 8004b26:	4770      	bx	lr

08004b28 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	db0d      	blt.n	8004b48 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	0943      	lsrs	r3, r0, #5
 8004b30:	f000 001f 	and.w	r0, r0, #31
 8004b34:	fa02 f000 	lsl.w	r0, r2, r0
 8004b38:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <__NVIC_DisableIRQ+0x24>)
 8004b3a:	3320      	adds	r3, #32
 8004b3c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b44:	f3bf 8f6f 	isb	sy
}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	e000e100 	.word	0xe000e100

08004b50 <LL_ADC_REG_SetSequencerRanks.constprop.18>:
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
 8004b50:	b530      	push	{r4, r5, lr}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b56:	fa93 f3a3 	rbit	r3, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004b5a:	fab3 f383 	clz	r3, r3
  MODIFY_REG(*preg,
 8004b5e:	241f      	movs	r4, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004b60:	f400 7240 	and.w	r2, r0, #768	; 0x300
 8004b64:	4d07      	ldr	r5, [pc, #28]	; (8004b84 <LL_ADC_REG_SetSequencerRanks.constprop.18+0x34>)
 8004b66:	40da      	lsrs	r2, r3
  MODIFY_REG(*preg,
 8004b68:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8004b6c:	f000 001f 	and.w	r0, r0, #31
 8004b70:	4084      	lsls	r4, r0
 8004b72:	f001 011f 	and.w	r1, r1, #31
 8004b76:	ea23 0304 	bic.w	r3, r3, r4
 8004b7a:	4081      	lsls	r1, r0
 8004b7c:	4319      	orrs	r1, r3
 8004b7e:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
}
 8004b82:	bd30      	pop	{r4, r5, pc}
 8004b84:	4001242c 	.word	0x4001242c

08004b88 <LL_ADC_SetChannelSamplingTime.constprop.19>:
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b8e:	fa93 f3a3 	rbit	r3, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8004b92:	fab3 f383 	clz	r3, r3
 8004b96:	f000 7400 	and.w	r4, r0, #33554432	; 0x2000000
 8004b9a:	4d0f      	ldr	r5, [pc, #60]	; (8004bd8 <LL_ADC_SetChannelSamplingTime.constprop.19+0x50>)
 8004b9c:	40dc      	lsrs	r4, r3
  MODIFY_REG(*preg,
 8004b9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ba2:	f000 70f8 	and.w	r0, r0, #32505856	; 0x1f00000
 8004ba6:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8004baa:	fa93 f1a3 	rbit	r1, r3
 8004bae:	fab1 f181 	clz	r1, r1
 8004bb2:	fa93 f3a3 	rbit	r3, r3
 8004bb6:	fab3 f383 	clz	r3, r3
 8004bba:	2607      	movs	r6, #7
 8004bbc:	fa20 f101 	lsr.w	r1, r0, r1
 8004bc0:	40d8      	lsrs	r0, r3
 8004bc2:	2306      	movs	r3, #6
 8004bc4:	fa06 f101 	lsl.w	r1, r6, r1
 8004bc8:	ea22 0201 	bic.w	r2, r2, r1
 8004bcc:	fa03 f000 	lsl.w	r0, r3, r0
 8004bd0:	4310      	orrs	r0, r2
 8004bd2:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
}
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	4001240c 	.word	0x4001240c

08004bdc <dma_set.constprop.9>:
static void dma_set(uint32_t src, DMA_TypeDef* dma, uint32_t dma_ch, uint16_t* buff, uint32_t buff_size, uint32_t sz)
 8004bdc:	b510      	push	{r4, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004bde:	4c0f      	ldr	r4, [pc, #60]	; (8004c1c <dma_set.constprop.9+0x40>)
 8004be0:	4421      	add	r1, r4
 8004be2:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8004be6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004bea:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 8004bee:	680c      	ldr	r4, [r1, #0]
 8004bf0:	f024 0401 	bic.w	r4, r4, #1
 8004bf4:	600c      	str	r4, [r1, #0]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8004bf6:	6088      	str	r0, [r1, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8004bf8:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8004bfa:	680a      	ldr	r2, [r1, #0]
 8004bfc:	9802      	ldr	r0, [sp, #8]
 8004bfe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c02:	4302      	orrs	r2, r0
 8004c04:	600a      	str	r2, [r1, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004c06:	684a      	ldr	r2, [r1, #4]
 8004c08:	0c12      	lsrs	r2, r2, #16
 8004c0a:	0412      	lsls	r2, r2, #16
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004c10:	680b      	ldr	r3, [r1, #0]
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	600b      	str	r3, [r1, #0]
}
 8004c18:	bd10      	pop	{r4, pc}
 8004c1a:	bf00      	nop
 8004c1c:	0800ab00 	.word	0x0800ab00

08004c20 <daq_malloc>:
{
 8004c20:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c24:	461e      	mov	r6, r3
 8004c26:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8004c2a:	4605      	mov	r5, r0
    if (bits == B12)
 8004c2c:	2b0c      	cmp	r3, #12
{
 8004c2e:	460c      	mov	r4, r1
 8004c30:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8004c34:	fa1f f882 	uxth.w	r8, r2
 8004c38:	b28f      	uxth	r7, r1
    if (bits == B12)
 8004c3a:	d119      	bne.n	8004c70 <daq_malloc+0x50>
        size_t ln = mem * sizeof(uint16_t);
 8004c3c:	ea4f 0b41 	mov.w	fp, r1, lsl #1
        buff->data = (uint16_t*) malloc(ln);
 8004c40:	4658      	mov	r0, fp
 8004c42:	f003 ff15 	bl	8008a70 <malloc>
        buff->chans = chans;
 8004c46:	f8a5 8004 	strh.w	r8, [r5, #4]
        buff->data = (uint16_t*) malloc(ln);
 8004c4a:	6028      	str	r0, [r5, #0]
        buff->len = mem;
 8004c4c:	80ef      	strh	r7, [r5, #6]
        memset(buff->data, 0, ln);
 8004c4e:	465a      	mov	r2, fp
 8004c50:	2100      	movs	r1, #0
        buff->data = (uint16_t*) malloc(ln);
 8004c52:	4682      	mov	sl, r0
        memset(buff->data, 0, ln);
 8004c54:	f003 ff52 	bl	8008afc <memset>
        dma_set(src, DMA1, dma_ch, buff->data, mem, LL_DMA_PDATAALIGN_HALFWORD);
 8004c58:	f44f 7380 	mov.w	r3, #256	; 0x100
        dma_set(src, DMA1, dma_ch, buff->data, mem, LL_DMA_PDATAALIGN_BYTE);
 8004c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8004c5e:	4652      	mov	r2, sl
 8004c60:	4623      	mov	r3, r4
 8004c62:	4649      	mov	r1, r9
        dma_set(src, DMA1, PS_DMA_LA, buff->data, mem, LL_DMA_PDATAALIGN_BYTE);
 8004c64:	4630      	mov	r0, r6
}
 8004c66:	b001      	add	sp, #4
 8004c68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        dma_set(src, DMA1, PS_DMA_LA, buff->data, mem, LL_DMA_PDATAALIGN_BYTE);
 8004c6c:	f7ff bfb6 	b.w	8004bdc <dma_set.constprop.9>
    else if (bits == B8)
 8004c70:	2b08      	cmp	r3, #8
        buff->data = (uint8_t*) malloc(ln);
 8004c72:	4608      	mov	r0, r1
    else if (bits == B8)
 8004c74:	d10c      	bne.n	8004c90 <daq_malloc+0x70>
        buff->data = (uint8_t*) malloc(ln);
 8004c76:	f003 fefb 	bl	8008a70 <malloc>
        buff->chans = chans;
 8004c7a:	f8a5 8004 	strh.w	r8, [r5, #4]
        buff->data = (uint8_t*) malloc(ln);
 8004c7e:	6028      	str	r0, [r5, #0]
        buff->len = mem;
 8004c80:	80ef      	strh	r7, [r5, #6]
        memset(buff->data, 0, ln);
 8004c82:	4622      	mov	r2, r4
 8004c84:	2100      	movs	r1, #0
        buff->data = (uint8_t*) malloc(ln);
 8004c86:	4682      	mov	sl, r0
        memset(buff->data, 0, ln);
 8004c88:	f003 ff38 	bl	8008afc <memset>
        dma_set(src, DMA1, dma_ch, buff->data, mem, LL_DMA_PDATAALIGN_BYTE);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e7e5      	b.n	8004c5c <daq_malloc+0x3c>
        buff->data = (uint8_t*) malloc(ln);
 8004c90:	f003 feee 	bl	8008a70 <malloc>
        memset(buff->data, 0, ln);
 8004c94:	4622      	mov	r2, r4
 8004c96:	2100      	movs	r1, #0
        buff->data = (uint8_t*) malloc(ln);
 8004c98:	6028      	str	r0, [r5, #0]
        buff->chans = chans;
 8004c9a:	f8a5 8004 	strh.w	r8, [r5, #4]
        buff->len = mem;
 8004c9e:	80ef      	strh	r7, [r5, #6]
        buff->data = (uint8_t*) malloc(ln);
 8004ca0:	4681      	mov	r9, r0
        memset(buff->data, 0, ln);
 8004ca2:	f003 ff2b 	bl	8008afc <memset>
        dma_set(src, DMA1, PS_DMA_LA, buff->data, mem, LL_DMA_PDATAALIGN_BYTE);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	464a      	mov	r2, r9
 8004caa:	930a      	str	r3, [sp, #40]	; 0x28
 8004cac:	2106      	movs	r1, #6
 8004cae:	4623      	mov	r3, r4
 8004cb0:	e7d8      	b.n	8004c64 <daq_malloc+0x44>

08004cb2 <led_init>:
    self->blink_cntr = 0;
 8004cb2:	2300      	movs	r3, #0
    self->blink_len = 0;
 8004cb4:	e9c0 3301 	strd	r3, r3, [r0, #4]
    self->enabled = 0;
 8004cb8:	60c3      	str	r3, [r0, #12]
}
 8004cba:	4770      	bx	lr

08004cbc <led_set>:
    self->enabled = enable;
 8004cbc:	60c1      	str	r1, [r0, #12]
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <led_set+0x1c>)
    if (!self->enabled)
 8004cc0:	b921      	cbnz	r1, 8004ccc <led_set+0x10>
        PS_LED_PORT->BSRR |= (1 << PS_LED_PIN);  // 1
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc8:	611a      	str	r2, [r3, #16]
 8004cca:	4770      	bx	lr
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cd2:	615a      	str	r2, [r3, #20]
}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40011000 	.word	0x40011000

08004cdc <led_toggle>:
    if (self->enabled)
 8004cdc:	68c3      	ldr	r3, [r0, #12]
 8004cde:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <led_toggle+0x24>)
 8004ce0:	b143      	cbz	r3, 8004cf4 <led_toggle+0x18>
        PS_LED_PORT->BSRR |= (1 << PS_LED_PIN);  // 1
 8004ce2:	6911      	ldr	r1, [r2, #16]
 8004ce4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8004ce8:	6111      	str	r1, [r2, #16]
    self->enabled = !self->enabled;
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	60c3      	str	r3, [r0, #12]
}
 8004cf2:	4770      	bx	lr
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
 8004cf4:	6951      	ldr	r1, [r2, #20]
 8004cf6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8004cfa:	6151      	str	r1, [r2, #20]
 8004cfc:	e7f5      	b.n	8004cea <led_toggle+0xe>
 8004cfe:	bf00      	nop
 8004d00:	40011000 	.word	0x40011000

08004d04 <led_blink_set>:
    self->blink_num = (num * 2) - 1;
 8004d04:	0049      	lsls	r1, r1, #1
 8004d06:	3901      	subs	r1, #1
    self->blink_len = len;
 8004d08:	e9c0 1200 	strd	r1, r2, [r0]
    self->blink_cntr = len;
 8004d0c:	6082      	str	r2, [r0, #8]
    led_set(self, 1);
 8004d0e:	2101      	movs	r1, #1
 8004d10:	f7ff bfd4 	b.w	8004cbc <led_set>

08004d14 <led_blink_do>:
    if (self->blink_num > 0)
 8004d14:	6802      	ldr	r2, [r0, #0]
 8004d16:	2a00      	cmp	r2, #0
 8004d18:	dd0b      	ble.n	8004d32 <led_blink_do+0x1e>
        if (self->blink_cntr > 0)
 8004d1a:	6881      	ldr	r1, [r0, #8]
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	dd02      	ble.n	8004d26 <led_blink_do+0x12>
            self->blink_cntr--;
 8004d20:	3901      	subs	r1, #1
 8004d22:	6081      	str	r1, [r0, #8]
 8004d24:	4770      	bx	lr
            self->blink_cntr = self->blink_len;
 8004d26:	6841      	ldr	r1, [r0, #4]
            self->blink_num--;
 8004d28:	3a01      	subs	r2, #1
            self->blink_cntr = self->blink_len;
 8004d2a:	6081      	str	r1, [r0, #8]
            self->blink_num--;
 8004d2c:	6002      	str	r2, [r0, #0]
            led_toggle(self);
 8004d2e:	f7ff bfd5 	b.w	8004cdc <led_toggle>
}
 8004d32:	4770      	bx	lr

08004d34 <cntr_init>:
{
 8004d34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d36:	4604      	mov	r4, r0
    self->data = (uint16_t*) malloc(ln);
 8004d38:	20c8      	movs	r0, #200	; 0xc8
 8004d3a:	f003 fe99 	bl	8008a70 <malloc>
    self->data_len = PS_CNTR_BUFF_SZ;
 8004d3e:	2664      	movs	r6, #100	; 0x64
    self->ovf = 0;
 8004d40:	2100      	movs	r1, #0
    self->freq = 0;
 8004d42:	2300      	movs	r3, #0
    self->ovf = 0;
 8004d44:	60e1      	str	r1, [r4, #12]
    self->freq = 0;
 8004d46:	60a3      	str	r3, [r4, #8]
    self->enabled = 0;
 8004d48:	71a1      	strb	r1, [r4, #6]
    self->data = (uint16_t*) malloc(ln);
 8004d4a:	6020      	str	r0, [r4, #0]
    self->data_len = PS_CNTR_BUFF_SZ;
 8004d4c:	80a6      	strh	r6, [r4, #4]
    memset(self->data, 0, ln);
 8004d4e:	22c8      	movs	r2, #200	; 0xc8
    self->data = (uint16_t*) malloc(ln);
 8004d50:	4605      	mov	r5, r0
    memset(self->data, 0, ln);
 8004d52:	f003 fed3 	bl	8008afc <memset>
    dma_set((uint32_t)&PS_TIM_CNTR->CCR1, DMA1, PS_DMA_CNTR, self->data, PS_CNTR_BUFF_SZ, LL_DMA_PDATAALIGN_HALFWORD);
 8004d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d5a:	462a      	mov	r2, r5
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	2102      	movs	r1, #2
 8004d60:	4633      	mov	r3, r6
 8004d62:	4802      	ldr	r0, [pc, #8]	; (8004d6c <cntr_init+0x38>)
 8004d64:	f7ff ff3a 	bl	8004bdc <dma_set.constprop.9>
}
 8004d68:	b002      	add	sp, #8
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	40012c34 	.word	0x40012c34

08004d70 <cntr_enable>:
{
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <cntr_enable+0x28>)
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004d72:	681a      	ldr	r2, [r3, #0]
    if (enable)
 8004d74:	b141      	cbz	r1, 8004d88 <cntr_enable+0x18>
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004d7c:	6a1a      	ldr	r2, [r3, #32]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
  CLEAR_BIT(TIMx->CCER, Channels);
 8004d82:	621a      	str	r2, [r3, #32]
    self->enabled = enable;
 8004d84:	7181      	strb	r1, [r0, #6]
}
 8004d86:	4770      	bx	lr
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004d8e:	6a1a      	ldr	r2, [r3, #32]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	e7f5      	b.n	8004d82 <cntr_enable+0x12>
 8004d96:	bf00      	nop
 8004d98:	40012c00 	.word	0x40012c00

08004d9c <pwm_init>:
    self->enabled_ch1 = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	8003      	strh	r3, [r0, #0]
}
 8004da0:	4770      	bx	lr
	...

08004da4 <pwm_set>:
{
 8004da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004da8:	4698      	mov	r8, r3
    ASSERT(ch >= 1 && ch <= 2);
 8004daa:	1e4b      	subs	r3, r1, #1
 8004dac:	2b01      	cmp	r3, #1
{
 8004dae:	b085      	sub	sp, #20
 8004db0:	4604      	mov	r4, r0
 8004db2:	460e      	mov	r6, r1
 8004db4:	4691      	mov	r9, r2
    ASSERT(ch >= 1 && ch <= 2);
 8004db6:	d947      	bls.n	8004e48 <pwm_set+0xa4>
 8004db8:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004dbc:	4829      	ldr	r0, [pc, #164]	; (8004e64 <pwm_set+0xc0>)
 8004dbe:	f001 ff18 	bl	8006bf2 <assert2>
    LL_TIM_CC_DisableChannel(PS_TIM_PWM, (ch == 1 ? LL_TIM_CHANNEL_CH1 : LL_TIM_CHANNEL_CH2));
 8004dc2:	2110      	movs	r1, #16
 8004dc4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8004dc8:	6a2b      	ldr	r3, [r5, #32]
    int reload = 0;
 8004dca:	af04      	add	r7, sp, #16
 8004dcc:	ea23 0301 	bic.w	r3, r3, r1
 8004dd0:	622b      	str	r3, [r5, #32]
    int prescaler = 1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	9302      	str	r3, [sp, #8]
    int reload = 0;
 8004dd6:	2300      	movs	r3, #0
    self->freq = get_freq(&prescaler, &reload, PS_TIM_PWM_MAX, PS_TIM_PWM_FREQ, freq);
 8004dd8:	4648      	mov	r0, r9
    int reload = 0;
 8004dda:	f847 3d04 	str.w	r3, [r7, #-4]!
    self->freq = get_freq(&prescaler, &reload, PS_TIM_PWM_MAX, PS_TIM_PWM_FREQ, freq);
 8004dde:	f7fc f981 	bl	80010e4 <__aeabi_f2iz>
 8004de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004de6:	4639      	mov	r1, r7
 8004de8:	9000      	str	r0, [sp, #0]
 8004dea:	4b1f      	ldr	r3, [pc, #124]	; (8004e68 <pwm_set+0xc4>)
 8004dec:	a802      	add	r0, sp, #8
 8004dee:	f002 f81a 	bl	8006e26 <get_freq>
    if (prescaler > 1)
 8004df2:	9b02      	ldr	r3, [sp, #8]
    self->freq = get_freq(&prescaler, &reload, PS_TIM_PWM_MAX, PS_TIM_PWM_FREQ, freq);
 8004df4:	6060      	str	r0, [r4, #4]
    LL_TIM_SetAutoReload(PS_TIM_PWM, reload);
 8004df6:	9803      	ldr	r0, [sp, #12]
    if (prescaler > 1)
 8004df8:	2b01      	cmp	r3, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 8004dfa:	62e8      	str	r0, [r5, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8004dfc:	bfc8      	it	gt
 8004dfe:	62ab      	strgt	r3, [r5, #40]	; 0x28
    int compare = (duty / (float)100) * reload;
 8004e00:	f7fb ff56 	bl	8000cb0 <__aeabi_i2f>
 8004e04:	4607      	mov	r7, r0
 8004e06:	4919      	ldr	r1, [pc, #100]	; (8004e6c <pwm_set+0xc8>)
 8004e08:	4640      	mov	r0, r8
 8004e0a:	f7fc f859 	bl	8000ec0 <__aeabi_fdiv>
 8004e0e:	4639      	mov	r1, r7
 8004e10:	f7fb ffa2 	bl	8000d58 <__aeabi_fmul>
 8004e14:	f7fc f966 	bl	80010e4 <__aeabi_f2iz>
 8004e18:	4605      	mov	r5, r0
    float real_duty = ((float)compare / (float)reload) * (float)100;
 8004e1a:	f7fb ff49 	bl	8000cb0 <__aeabi_i2f>
 8004e1e:	4639      	mov	r1, r7
 8004e20:	f7fc f84e 	bl	8000ec0 <__aeabi_fdiv>
 8004e24:	4911      	ldr	r1, [pc, #68]	; (8004e6c <pwm_set+0xc8>)
 8004e26:	f7fb ff97 	bl	8000d58 <__aeabi_fmul>
    if (ch == 1)
 8004e2a:	2e01      	cmp	r6, #1
 8004e2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e30:	d10f      	bne.n	8004e52 <pwm_set+0xae>
        self->duty_ch1 = real_duty;
 8004e32:	60a0      	str	r0, [r4, #8]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004e34:	635d      	str	r5, [r3, #52]	; 0x34
        if (self->enabled_ch1)
 8004e36:	7822      	ldrb	r2, [r4, #0]
 8004e38:	b11a      	cbz	r2, 8004e42 <pwm_set+0x9e>
  SET_BIT(TIMx->CCER, Channels);
 8004e3a:	6a1a      	ldr	r2, [r3, #32]
 8004e3c:	f042 0201 	orr.w	r2, r2, #1
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	b005      	add	sp, #20
 8004e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LL_TIM_CC_DisableChannel(PS_TIM_PWM, (ch == 1 ? LL_TIM_CHANNEL_CH1 : LL_TIM_CHANNEL_CH2));
 8004e48:	2901      	cmp	r1, #1
 8004e4a:	bf14      	ite	ne
 8004e4c:	2110      	movne	r1, #16
 8004e4e:	2101      	moveq	r1, #1
 8004e50:	e7b8      	b.n	8004dc4 <pwm_set+0x20>
        self->duty_ch2 = real_duty;
 8004e52:	60e0      	str	r0, [r4, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004e54:	639d      	str	r5, [r3, #56]	; 0x38
        if (self->enabled_ch2)
 8004e56:	7862      	ldrb	r2, [r4, #1]
 8004e58:	2a00      	cmp	r2, #0
 8004e5a:	d0f2      	beq.n	8004e42 <pwm_set+0x9e>
  SET_BIT(TIMx->CCER, Channels);
 8004e5c:	6a1a      	ldr	r2, [r3, #32]
 8004e5e:	f042 0210 	orr.w	r2, r2, #16
 8004e62:	e7ed      	b.n	8004e40 <pwm_set+0x9c>
 8004e64:	0800ab07 	.word	0x0800ab07
 8004e68:	02255100 	.word	0x02255100
 8004e6c:	42c80000 	.word	0x42c80000

08004e70 <daq_trig_init>:
    self->trig.ignore = 0;
 8004e70:	2300      	movs	r3, #0
    self->trig.dma_trig = PS_DMA_ADC1;
 8004e72:	2201      	movs	r2, #1
    self->trig.ignore = 0;
 8004e74:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
    self->trig.ready = 0;
 8004e78:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
    self->trig.cntr = 0;
 8004e7c:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
 8004e80:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
 8004e84:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
 8004e88:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
    self->trig.ch_reg = 0;
 8004e8c:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
 8004e90:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
 8004e94:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
 8004e98:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
    self->trig.all_cntr = 0;
 8004e9c:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
 8004ea0:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
 8004ea4:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
 8004ea8:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
    self->trig.pos_frst = 0;
 8004eac:	f880 3091 	strb.w	r3, [r0, #145]	; 0x91
 8004eb0:	f880 3092 	strb.w	r3, [r0, #146]	; 0x92
 8004eb4:	f880 3093 	strb.w	r3, [r0, #147]	; 0x93
 8004eb8:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
    self->trig.pos_trig = 0;
 8004ebc:	f880 3095 	strb.w	r3, [r0, #149]	; 0x95
 8004ec0:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 8004ec4:	f880 3097 	strb.w	r3, [r0, #151]	; 0x97
 8004ec8:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    self->trig.pos_last = 0;
 8004ecc:	f880 3099 	strb.w	r3, [r0, #153]	; 0x99
 8004ed0:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
 8004ed4:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 8004ed8:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
    self->trig.pos_diff = 0;
 8004edc:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
 8004ee0:	f880 309e 	strb.w	r3, [r0, #158]	; 0x9e
 8004ee4:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
 8004ee8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    self->trig.uwtick_last = 0;
 8004eec:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
 8004ef0:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
 8004ef4:	f880 30a3 	strb.w	r3, [r0, #163]	; 0xa3
    self->trig.dma_trig = PS_DMA_ADC1;
 8004ef8:	f880 20b9 	strb.w	r2, [r0, #185]	; 0xb9
    self->trig.exti_trig = PS_LA_IRQ_EXTI1;
 8004efc:	2207      	movs	r2, #7
    self->trig.uwtick_last = 0;
 8004efe:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
    self->trig.pretrig_cntr = 0;
 8004f02:	f880 30a5 	strb.w	r3, [r0, #165]	; 0xa5
 8004f06:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8004f0a:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 8004f0e:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
    self->trig.is_post = 0;
 8004f12:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
    self->trig.posttrig_size = 0;
 8004f16:	f880 30ad 	strb.w	r3, [r0, #173]	; 0xad
 8004f1a:	f880 30ae 	strb.w	r3, [r0, #174]	; 0xae
 8004f1e:	f880 30af 	strb.w	r3, [r0, #175]	; 0xaf
 8004f22:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
    self->trig.pretrig_val = 0;
 8004f26:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
 8004f2a:	f880 30aa 	strb.w	r3, [r0, #170]	; 0xaa
 8004f2e:	f880 30ab 	strb.w	r3, [r0, #171]	; 0xab
 8004f32:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
    self->trig.fullmem_val = 0;
 8004f36:	f880 30b1 	strb.w	r3, [r0, #177]	; 0xb1
 8004f3a:	f880 30b2 	strb.w	r3, [r0, #178]	; 0xb2
 8004f3e:	f880 30b3 	strb.w	r3, [r0, #179]	; 0xb3
 8004f42:	f880 30b4 	strb.w	r3, [r0, #180]	; 0xb4
    self->trig.buff_trig = NULL;
 8004f46:	f880 30b5 	strb.w	r3, [r0, #181]	; 0xb5
 8004f4a:	f880 30b6 	strb.w	r3, [r0, #182]	; 0xb6
 8004f4e:	f880 30b7 	strb.w	r3, [r0, #183]	; 0xb7
 8004f52:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
    self->trig.dma_trig = PS_DMA_ADC1;
 8004f56:	f880 30ba 	strb.w	r3, [r0, #186]	; 0xba
 8004f5a:	f880 30bb 	strb.w	r3, [r0, #187]	; 0xbb
 8004f5e:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
    self->trig.exti_trig = PS_LA_IRQ_EXTI1;
 8004f62:	f880 20bd 	strb.w	r2, [r0, #189]	; 0xbd
 8004f66:	f880 30be 	strb.w	r3, [r0, #190]	; 0xbe
 8004f6a:	f880 30bf 	strb.w	r3, [r0, #191]	; 0xbf
 8004f6e:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
}
 8004f72:	4770      	bx	lr

08004f74 <daq_trig_trigger>:
{
 8004f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ASSERT(self->trig.buff_trig != NULL);
 8004f78:	f8d0 30b5 	ldr.w	r3, [r0, #181]	; 0xb5
{
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	460e      	mov	r6, r1
 8004f80:	4615      	mov	r5, r2
    ASSERT(self->trig.buff_trig != NULL);
 8004f82:	b923      	cbnz	r3, 8004f8e <daq_trig_trigger+0x1a>
 8004f84:	f240 11c9 	movw	r1, #457	; 0x1c9
 8004f88:	4838      	ldr	r0, [pc, #224]	; (800506c <daq_trig_trigger+0xf8>)
 8004f8a:	f001 fe32 	bl	8006bf2 <assert2>
    if (pos == -1)
 8004f8e:	3601      	adds	r6, #1
 8004f90:	d112      	bne.n	8004fb8 <daq_trig_trigger+0x44>
        last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_trig);
 8004f92:	f8d4 30b5 	ldr.w	r3, [r4, #181]	; 0xb5
 8004f96:	f8d4 20b9 	ldr.w	r2, [r4, #185]	; 0xb9
 8004f9a:	88d9      	ldrh	r1, [r3, #6]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004f9c:	4b34      	ldr	r3, [pc, #208]	; (8005070 <daq_trig_trigger+0xfc>)
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004fa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fa8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fac:	6858      	ldr	r0, [r3, #4]
 8004fae:	b280      	uxth	r0, r0
 8004fb0:	1a08      	subs	r0, r1, r0
 8004fb2:	f001 ff33 	bl	8006e1c <get_last_circ_idx>
 8004fb6:	4605      	mov	r5, r0
    self->trig.is_post = 1;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
    self->trig.cntr++;
 8004fbe:	f8d4 3089 	ldr.w	r3, [r4, #137]	; 0x89
    self->trig.pos_trig = last_idx;
 8004fc2:	f8c4 5095 	str.w	r5, [r4, #149]	; 0x95
    self->trig.cntr++;
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	f8c4 3089 	str.w	r3, [r4, #137]	; 0x89
    self->trig.posttrig_size = (int)((float)self->trig.buff_trig->len * ((float)(100 - self->trig.set.pretrigger) / 100.0));
 8004fcc:	f8d4 30b5 	ldr.w	r3, [r4, #181]	; 0xb5
 8004fd0:	88de      	ldrh	r6, [r3, #6]
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f7fb fe68 	bl	8000ca8 <__aeabi_ui2f>
 8004fd8:	f7fb fa30 	bl	800043c <__aeabi_f2d>
 8004fdc:	4689      	mov	r9, r1
 8004fde:	4680      	mov	r8, r0
 8004fe0:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8004fe2:	f1c7 0064 	rsb	r0, r7, #100	; 0x64
 8004fe6:	f7fb fe63 	bl	8000cb0 <__aeabi_i2f>
 8004fea:	f7fb fa27 	bl	800043c <__aeabi_f2d>
 8004fee:	2200      	movs	r2, #0
 8004ff0:	4b20      	ldr	r3, [pc, #128]	; (8005074 <daq_trig_trigger+0x100>)
 8004ff2:	f7fb fba5 	bl	8000740 <__aeabi_ddiv>
 8004ff6:	4642      	mov	r2, r8
 8004ff8:	464b      	mov	r3, r9
 8004ffa:	f7fb fa77 	bl	80004ec <__aeabi_dmul>
 8004ffe:	f7fb fd25 	bl	8000a4c <__aeabi_d2iz>
 8005002:	f8c4 00ad 	str.w	r0, [r4, #173]	; 0xad
    self->trig.pos_frst = last_idx - (int)((float)self->trig.buff_trig->len * ((float)self->trig.set.pretrigger / 100.0));
 8005006:	4638      	mov	r0, r7
 8005008:	f7fb fe52 	bl	8000cb0 <__aeabi_i2f>
 800500c:	f7fb fa16 	bl	800043c <__aeabi_f2d>
 8005010:	2200      	movs	r2, #0
 8005012:	4b18      	ldr	r3, [pc, #96]	; (8005074 <daq_trig_trigger+0x100>)
 8005014:	f7fb fb94 	bl	8000740 <__aeabi_ddiv>
 8005018:	464b      	mov	r3, r9
 800501a:	4642      	mov	r2, r8
 800501c:	f7fb fa66 	bl	80004ec <__aeabi_dmul>
 8005020:	f7fb fd14 	bl	8000a4c <__aeabi_d2iz>
    if (self->mode != LA)
 8005024:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    if (self->trig.pos_frst < 0)
 8005028:	1a28      	subs	r0, r5, r0
        self->trig.pos_frst += self->trig.buff_trig->len;
 800502a:	bf48      	it	mi
 800502c:	1980      	addmi	r0, r0, r6
    if (self->mode != LA)
 800502e:	2b02      	cmp	r3, #2
        self->trig.pos_frst += self->trig.buff_trig->len;
 8005030:	f8c4 0091 	str.w	r0, [r4, #145]	; 0x91
    if (self->mode != LA)
 8005034:	d014      	beq.n	8005060 <daq_trig_trigger+0xec>
  MODIFY_REG(ADCx->CR1,
 8005036:	4a10      	ldr	r2, [pc, #64]	; (8005078 <daq_trig_trigger+0x104>)
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <daq_trig_trigger+0x108>)
 800503a:	6851      	ldr	r1, [r2, #4]
 800503c:	400b      	ands	r3, r1
 800503e:	6053      	str	r3, [r2, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005040:	4a0f      	ldr	r2, [pc, #60]	; (8005080 <daq_trig_trigger+0x10c>)
 8005042:	68d3      	ldr	r3, [r2, #12]
 8005044:	f043 0302 	orr.w	r3, r3, #2
 8005048:	60d3      	str	r3, [r2, #12]
    self->trig.pretrig_cntr = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8005050:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8005054:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 8005058:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
}
 800505c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        NVIC_DisableIRQ(self->trig.exti_trig);
 8005060:	f8d4 00bd 	ldr.w	r0, [r4, #189]	; 0xbd
 8005064:	b240      	sxtb	r0, r0
 8005066:	f7ff fd5f 	bl	8004b28 <__NVIC_DisableIRQ>
 800506a:	e7e9      	b.n	8005040 <daq_trig_trigger+0xcc>
 800506c:	0800ab07 	.word	0x0800ab07
 8005070:	0800ab00 	.word	0x0800ab00
 8005074:	40590000 	.word	0x40590000
 8005078:	40012400 	.word	0x40012400
 800507c:	ff3ffde0 	.word	0xff3ffde0
 8005080:	40000400 	.word	0x40000400

08005084 <daq_trig_check>:
    if (uwTick >= self->trig.uwtick_last)
 8005084:	4a1a      	ldr	r2, [pc, #104]	; (80050f0 <daq_trig_check+0x6c>)
 8005086:	f8d0 10a1 	ldr.w	r1, [r0, #161]	; 0xa1
 800508a:	6813      	ldr	r3, [r2, #0]
{
 800508c:	b410      	push	{r4}
    if (uwTick >= self->trig.uwtick_last)
 800508e:	4299      	cmp	r1, r3
        self->trig.pretrig_cntr += uwTick - self->trig.uwtick_last;
 8005090:	6813      	ldr	r3, [r2, #0]
 8005092:	f8d0 40a5 	ldr.w	r4, [r0, #165]	; 0xa5
        self->trig.pretrig_cntr += (uwTick - self->trig.uwtick_last) + 4294967295;
 8005096:	bf88      	it	hi
 8005098:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800509c:	4423      	add	r3, r4
 800509e:	1a5b      	subs	r3, r3, r1
 80050a0:	f8c0 30a5 	str.w	r3, [r0, #165]	; 0xa5
    self->trig.uwtick_last = uwTick;
 80050a4:	6813      	ldr	r3, [r2, #0]
 80050a6:	f8c0 30a1 	str.w	r3, [r0, #161]	; 0xa1
    if (self->trig.set.mode == AUTO &&
 80050aa:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80050ae:	b993      	cbnz	r3, 80050d6 <daq_trig_check+0x52>
 80050b0:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
 80050b4:	b9d3      	cbnz	r3, 80050ec <daq_trig_check+0x68>
        self->trig.is_post == 0 &&
 80050b6:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 80050ba:	b9bb      	cbnz	r3, 80050ec <daq_trig_check+0x68>
        self->trig.pretrig_cntr >= self->trig.pretrig_val + PS_AUTRIG_SYSTCKS)
 80050bc:	f8d0 30a9 	ldr.w	r3, [r0, #169]	; 0xa9
 80050c0:	f8d0 20a5 	ldr.w	r2, [r0, #165]	; 0xa5
 80050c4:	3363      	adds	r3, #99	; 0x63
        self->trig.ready == 0 &&
 80050c6:	4293      	cmp	r3, r2
 80050c8:	da10      	bge.n	80050ec <daq_trig_check+0x68>
        daq_trig_trigger(self, -1, -1);
 80050ca:	f04f 32ff 	mov.w	r2, #4294967295
}
 80050ce:	bc10      	pop	{r4}
        daq_trig_trigger(self, -1, -1);
 80050d0:	4611      	mov	r1, r2
 80050d2:	f7ff bf4f 	b.w	8004f74 <daq_trig_trigger>
    else if (self->trig.set.mode == DISABLED &&
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d108      	bne.n	80050ec <daq_trig_check+0x68>
             self->trig.pretrig_cntr >= self->trig.fullmem_val)
 80050da:	f8d0 30b1 	ldr.w	r3, [r0, #177]	; 0xb1
 80050de:	f8d0 20a5 	ldr.w	r2, [r0, #165]	; 0xa5
    else if (self->trig.set.mode == DISABLED &&
 80050e2:	429a      	cmp	r2, r3
        self->trig.ready = 1;
 80050e4:	bfa4      	itt	ge
 80050e6:	2301      	movge	r3, #1
 80050e8:	f880 3088 	strbge.w	r3, [r0, #136]	; 0x88
}
 80050ec:	bc10      	pop	{r4}
 80050ee:	4770      	bx	lr
 80050f0:	2000067c 	.word	0x2000067c

080050f4 <daq_trig_trigger_scope>:
{
 80050f4:	b510      	push	{r4, lr}
    ASSERT(self->trig.buff_trig != NULL);
 80050f6:	f8d0 30b5 	ldr.w	r3, [r0, #181]	; 0xb5
{
 80050fa:	4604      	mov	r4, r0
    ASSERT(self->trig.buff_trig != NULL);
 80050fc:	b923      	cbnz	r3, 8005108 <daq_trig_trigger_scope+0x14>
 80050fe:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8005102:	482f      	ldr	r0, [pc, #188]	; (80051c0 <daq_trig_trigger_scope+0xcc>)
 8005104:	f001 fd75 	bl	8006bf2 <assert2>
    ASSERT(self->trig.dma_trig != 0);
 8005108:	f8d4 30b9 	ldr.w	r3, [r4, #185]	; 0xb9
 800510c:	b923      	cbnz	r3, 8005118 <daq_trig_trigger_scope+0x24>
 800510e:	f240 1173 	movw	r1, #371	; 0x173
 8005112:	482b      	ldr	r0, [pc, #172]	; (80051c0 <daq_trig_trigger_scope+0xcc>)
 8005114:	f001 fd6d 	bl	8006bf2 <assert2>
    int last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_trig);
 8005118:	f8d4 30b5 	ldr.w	r3, [r4, #181]	; 0xb5
 800511c:	f8d4 20b9 	ldr.w	r2, [r4, #185]	; 0xb9
 8005120:	88d9      	ldrh	r1, [r3, #6]
 8005122:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <daq_trig_trigger_scope+0xd0>)
 8005124:	4413      	add	r3, r2
 8005126:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800512a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800512e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005132:	6858      	ldr	r0, [r3, #4]
 8005134:	b280      	uxth	r0, r0
 8005136:	1a08      	subs	r0, r1, r0
 8005138:	f001 fe70 	bl	8006e1c <get_last_circ_idx>
    if (self->trig.ready)
 800513c:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    int last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_trig);
 8005140:	4602      	mov	r2, r0
    if (self->trig.ready)
 8005142:	bb03      	cbnz	r3, 8005186 <daq_trig_trigger_scope+0x92>
    int prev_last_idx = last_idx - self->trig.buff_trig->chans;
 8005144:	f8d4 10b5 	ldr.w	r1, [r4, #181]	; 0xb5
 8005148:	888b      	ldrh	r3, [r1, #4]
    if (prev_last_idx < 0)
 800514a:	1ac3      	subs	r3, r0, r3
        prev_last_idx += self->trig.buff_trig->len;
 800514c:	bf48      	it	mi
 800514e:	88c8      	ldrhmi	r0, [r1, #6]
 8005150:	6809      	ldr	r1, [r1, #0]
 8005152:	bf48      	it	mi
 8005154:	181b      	addmi	r3, r3, r0
    if (self->set.bits == B8)
 8005156:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 800515a:	2808      	cmp	r0, #8
        last_val = (uint16_t)(((uint8_t*)(self->trig.buff_trig->data))[last_idx]);
 800515c:	bf07      	ittee	eq
 800515e:	5c88      	ldrbeq	r0, [r1, r2]
        prev_last_val = (uint16_t)(((uint8_t*)(self->trig.buff_trig->data))[prev_last_idx]);
 8005160:	5ccb      	ldrbeq	r3, [r1, r3]
        last_val = ((uint16_t*)(self->trig.buff_trig->data))[last_idx];
 8005162:	f831 0012 	ldrhne.w	r0, [r1, r2, lsl #1]
        prev_last_val = ((uint16_t*)(self->trig.buff_trig->data))[prev_last_idx];
 8005166:	f831 3013 	ldrhne.w	r3, [r1, r3, lsl #1]
        if ((self->trig.set.edge == RISING && last_val > self->trig.set.val && prev_last_val <= self->trig.set.val) ||
 800516a:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 800516e:	b959      	cbnz	r1, 8005188 <daq_trig_trigger_scope+0x94>
 8005170:	f8d4 1056 	ldr.w	r1, [r4, #86]	; 0x56
 8005174:	4288      	cmp	r0, r1
 8005176:	dd01      	ble.n	800517c <daq_trig_trigger_scope+0x88>
 8005178:	4299      	cmp	r1, r3
 800517a:	da0d      	bge.n	8005198 <daq_trig_trigger_scope+0xa4>
        self->trig.all_cntr++;
 800517c:	f8d4 308d 	ldr.w	r3, [r4, #141]	; 0x8d
 8005180:	3301      	adds	r3, #1
 8005182:	f8c4 308d 	str.w	r3, [r4, #141]	; 0x8d
}
 8005186:	bd10      	pop	{r4, pc}
        if ((self->trig.set.edge == RISING && last_val > self->trig.set.val && prev_last_val <= self->trig.set.val) ||
 8005188:	2901      	cmp	r1, #1
 800518a:	d1f7      	bne.n	800517c <daq_trig_trigger_scope+0x88>
            (self->trig.set.edge == FALLING && last_val < self->trig.set.val && prev_last_val >= self->trig.set.val))
 800518c:	f8d4 1056 	ldr.w	r1, [r4, #86]	; 0x56
 8005190:	4288      	cmp	r0, r1
 8005192:	daf3      	bge.n	800517c <daq_trig_trigger_scope+0x88>
 8005194:	4299      	cmp	r1, r3
 8005196:	dcf1      	bgt.n	800517c <daq_trig_trigger_scope+0x88>
            if (self->trig.pretrig_cntr > self->trig.pretrig_val) // pretrigger counter
 8005198:	f8d4 10a5 	ldr.w	r1, [r4, #165]	; 0xa5
 800519c:	f8d4 30a9 	ldr.w	r3, [r4, #169]	; 0xa9
 80051a0:	4299      	cmp	r1, r3
 80051a2:	ddeb      	ble.n	800517c <daq_trig_trigger_scope+0x88>
                self->trig.pretrig_cntr = 0;
 80051a4:	2300      	movs	r3, #0
                daq_trig_trigger(self, last_idx, last_idx);
 80051a6:	4611      	mov	r1, r2
                self->trig.pretrig_cntr = 0;
 80051a8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80051ac:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80051b0:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 80051b4:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
                daq_trig_trigger(self, last_idx, last_idx);
 80051b8:	4620      	mov	r0, r4
 80051ba:	f7ff fedb 	bl	8004f74 <daq_trig_trigger>
 80051be:	e7dd      	b.n	800517c <daq_trig_trigger_scope+0x88>
 80051c0:	0800ab07 	.word	0x0800ab07
 80051c4:	0800ab00 	.word	0x0800ab00

080051c8 <daq_trig_trigger_la>:
{
 80051c8:	b510      	push	{r4, lr}
    ASSERT(self->trig.buff_trig != NULL);
 80051ca:	f8d0 30b5 	ldr.w	r3, [r0, #181]	; 0xb5
{
 80051ce:	4604      	mov	r4, r0
    ASSERT(self->trig.buff_trig != NULL);
 80051d0:	b923      	cbnz	r3, 80051dc <daq_trig_trigger_la+0x14>
 80051d2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80051d6:	481b      	ldr	r0, [pc, #108]	; (8005244 <daq_trig_trigger_la+0x7c>)
 80051d8:	f001 fd0b 	bl	8006bf2 <assert2>
    ASSERT(self->trig.dma_trig != 0);
 80051dc:	f8d4 30b9 	ldr.w	r3, [r4, #185]	; 0xb9
 80051e0:	b923      	cbnz	r3, 80051ec <daq_trig_trigger_la+0x24>
 80051e2:	f240 11b9 	movw	r1, #441	; 0x1b9
 80051e6:	4817      	ldr	r0, [pc, #92]	; (8005244 <daq_trig_trigger_la+0x7c>)
 80051e8:	f001 fd03 	bl	8006bf2 <assert2>
    int last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_trig);
 80051ec:	f8d4 30b5 	ldr.w	r3, [r4, #181]	; 0xb5
 80051f0:	f8d4 20b9 	ldr.w	r2, [r4, #185]	; 0xb9
 80051f4:	88d9      	ldrh	r1, [r3, #6]
 80051f6:	4b14      	ldr	r3, [pc, #80]	; (8005248 <daq_trig_trigger_la+0x80>)
 80051f8:	4413      	add	r3, r2
 80051fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80051fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005202:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005206:	6858      	ldr	r0, [r3, #4]
 8005208:	b280      	uxth	r0, r0
 800520a:	1a08      	subs	r0, r1, r0
 800520c:	f001 fe06 	bl	8006e1c <get_last_circ_idx>
    if (self->trig.ready)
 8005210:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    int last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_trig);
 8005214:	4602      	mov	r2, r0
    if (self->trig.ready)
 8005216:	b99b      	cbnz	r3, 8005240 <daq_trig_trigger_la+0x78>
    if (self->trig.pretrig_cntr > self->trig.pretrig_val)
 8005218:	f8d4 00a5 	ldr.w	r0, [r4, #165]	; 0xa5
 800521c:	f8d4 10a9 	ldr.w	r1, [r4, #169]	; 0xa9
 8005220:	4288      	cmp	r0, r1
 8005222:	dd0d      	ble.n	8005240 <daq_trig_trigger_la+0x78>
        self->trig.pretrig_cntr = 0;
 8005224:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8005228:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 800522c:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 8005230:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
        daq_trig_trigger(self, last_idx, last_idx);
 8005234:	4620      	mov	r0, r4
}
 8005236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        daq_trig_trigger(self, last_idx, last_idx);
 800523a:	4611      	mov	r1, r2
 800523c:	f7ff be9a 	b.w	8004f74 <daq_trig_trigger>
}
 8005240:	bd10      	pop	{r4, pc}
 8005242:	bf00      	nop
 8005244:	0800ab07 	.word	0x0800ab07
 8005248:	0800ab00 	.word	0x0800ab00

0800524c <daq_init>:
{
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	4604      	mov	r4, r0
    self->save_s.mem = 500;
 8005250:	2500      	movs	r5, #0
    daq_trig_init(self);
 8005252:	f7ff fe0d 	bl	8004e70 <daq_trig_init>
    self->save_s.mem = 500;
 8005256:	f06f 070b 	mvn.w	r7, #11
 800525a:	2301      	movs	r3, #1
    self->save_s.bits = B12;
 800525c:	260c      	movs	r6, #12
    self->save_s.fs = 1000;
 800525e:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 800542c <daq_init+0x1e0>
    self->save_l.fs = 100000;
 8005262:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8005430 <daq_init+0x1e4>
    self->save_s.mem = 500;
 8005266:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    self->save_s.ch1_en = 1;
 800526a:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    self->save_s.ch2_en = 1;
 800526e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    self->save_s.fs = 1000;
 8005272:	f8c0 c037 	str.w	ip, [r0, #55]	; 0x37
    self->save_s.mem = 500;
 8005276:	f880 703b 	strb.w	r7, [r0, #59]	; 0x3b
    self->save_s.bits = B12;
 800527a:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
    self->save_s.ch3_en = 0;
 800527e:	f880 5035 	strb.w	r5, [r0, #53]	; 0x35
    self->save_s.ch4_en = 0;
 8005282:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    self->save_l.fs = 100000;
 8005286:	f8c4 e042 	str.w	lr, [r4, #66]	; 0x42
    self->save_l.mem = 1000;
 800528a:	f06f 0e17 	mvn.w	lr, #23
    self->trig.save_s.pretrigger = 50;
 800528e:	2232      	movs	r2, #50	; 0x32
    self->trig.save_s.val = 2047;
 8005290:	2107      	movs	r1, #7
 8005292:	f04f 30ff 	mov.w	r0, #4294967295
    self->save_l.mem = 1000;
 8005296:	f884 e046 	strb.w	lr, [r4, #70]	; 0x46
 800529a:	f04f 0e03 	mov.w	lr, #3
    self->trig.save_s.val = 2047;
 800529e:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
    self->trig.save_s.ch = 1;
 80052a2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    self->trig.save_s.pretrigger = 50;
 80052a6:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
    self->save_l.bits = B1;
 80052aa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    self->save_l.ch1_en = 1;
 80052ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    self->save_l.ch2_en = 1;
 80052b2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    self->save_l.ch3_en = 1;
 80052b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    self->save_l.ch4_en = 1;
 80052ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    self->save_l.mem = 1000;
 80052be:	f884 e047 	strb.w	lr, [r4, #71]	; 0x47
    self->trig.save_s.val = 2047;
 80052c2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
 80052c6:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
 80052ca:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
    self->trig.save_s.ch = 1;
 80052ce:	f884 5065 	strb.w	r5, [r4, #101]	; 0x65
 80052d2:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
 80052d6:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    self->trig.save_s.edge = RISING;
 80052da:	f884 5063 	strb.w	r5, [r4, #99]	; 0x63
    self->trig.save_s.mode = AUTO;
 80052de:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    self->trig.save_s.pretrigger = 50;
 80052e2:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
 80052e6:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
 80052ea:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    self->trig.save_s.val_percent = 0;
 80052ee:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
 80052f2:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
 80052f6:	f884 506e 	strb.w	r5, [r4, #110]	; 0x6e
    self->trig.save_l.ch = 1;
 80052fa:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    self->trig.save_l.pretrigger = 50;
 80052fe:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    dst1->mem = src1->mem;
 8005302:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    dst1->ch1_en = src1->ch1_en;
 8005306:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    dst1->ch2_en = src1->ch2_en;
 800530a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    dst2->val = src2->val;
 800530e:	f884 1057 	strb.w	r1, [r4, #87]	; 0x57
    dst2->ch = src2->ch;
 8005312:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    dst1->fs = src1->fs;
 8005316:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
    dst2->val = src2->val;
 800531a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    self->trig.save_s.val_percent = 0;
 800531e:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
    daq_clear_buff(&self->buff1);
 8005322:	4620      	mov	r0, r4
    self->trig.save_l.val = 0;
 8005324:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
 8005328:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 800532c:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
 8005330:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
    self->trig.save_l.ch = 1;
 8005334:	f884 5077 	strb.w	r5, [r4, #119]	; 0x77
 8005338:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800533c:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
    self->trig.save_l.edge = RISING;
 8005340:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    self->trig.save_l.mode = AUTO;
 8005344:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    self->trig.save_l.pretrigger = 50;
 8005348:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
 800534c:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
 8005350:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    dst1->mem = src1->mem;
 8005354:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    dst1->bits = src1->bits;
 8005358:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    dst1->ch3_en = src1->ch3_en;
 800535c:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
    dst1->ch4_en = src1->ch4_en;
 8005360:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
    dst2->val_percent = src2->val_percent;
 8005364:	f884 505a 	strb.w	r5, [r4, #90]	; 0x5a
 8005368:	f884 505b 	strb.w	r5, [r4, #91]	; 0x5b
 800536c:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
 8005370:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    dst2->val = src2->val;
 8005374:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8005378:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
    dst2->ch = src2->ch;
 800537c:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
    dst2->pretrigger = src2->pretrigger;
 8005380:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    dst2->ch = src2->ch;
 8005384:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8005388:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
    dst2->edge = src2->edge;
 800538c:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
    dst2->mode = src2->mode;
 8005390:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    dst2->pretrigger = src2->pretrigger;
 8005394:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
 8005398:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 800539c:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
    self->mode = SCOPE;
 80053a0:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
    daq_clear_buff(&self->buff1);
 80053a4:	f7ff fbb6 	bl	8004b14 <daq_clear_buff>
    daq_clear_buff(&self->buff2);
 80053a8:	f104 0008 	add.w	r0, r4, #8
 80053ac:	f7ff fbb2 	bl	8004b14 <daq_clear_buff>
    daq_clear_buff(&self->buff3);
 80053b0:	f104 0010 	add.w	r0, r4, #16
 80053b4:	f7ff fbae 	bl	8004b14 <daq_clear_buff>
    daq_clear_buff(&self->buff4);
 80053b8:	f104 0018 	add.w	r0, r4, #24
 80053bc:	f7ff fbaa 	bl	8004b14 <daq_clear_buff>
    daq_clear_buff(&self->buff_out);
 80053c0:	f104 0020 	add.w	r0, r4, #32
 80053c4:	f7ff fba6 	bl	8004b14 <daq_clear_buff>
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80053c8:	4b17      	ldr	r3, [pc, #92]	; (8005428 <daq_init+0x1dc>)
    self->enabled = 0;
 80053ca:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
    self->dis_hold = 0;
 80053ce:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 80053d2:	689a      	ldr	r2, [r3, #8]
    self->trig.buff_trig = NULL;
 80053d4:	f884 50b5 	strb.w	r5, [r4, #181]	; 0xb5
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 80053e0:	f884 50b7 	strb.w	r5, [r4, #183]	; 0xb7
 80053e4:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 80053e8:	609a      	str	r2, [r3, #8]
    adc->CR2 |= ADC_CR2_TSVREFE;
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80053f0:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_DMA));
 80053f2:	689a      	ldr	r2, [r3, #8]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 80053f4:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_DMA));
 80053f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 80053fa:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80053fe:	6099      	str	r1, [r3, #8]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8005400:	6899      	ldr	r1, [r3, #8]
 8005402:	f041 0104 	orr.w	r1, r1, #4
 8005406:	6099      	str	r1, [r3, #8]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8005408:	6899      	ldr	r1, [r3, #8]
    while (LL_ADC_IsCalibrationOnGoing(adc) != 0);
 800540a:	0749      	lsls	r1, r1, #29
 800540c:	d4fc      	bmi.n	8005408 <daq_init+0x1bc>
 800540e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    for (int i = 0; i <  1000; ++i) asm("nop");
 8005412:	bf00      	nop
 8005414:	3b01      	subs	r3, #1
 8005416:	d1fc      	bne.n	8005412 <daq_init+0x1c6>
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8005418:	4903      	ldr	r1, [pc, #12]	; (8005428 <daq_init+0x1dc>)
 800541a:	688b      	ldr	r3, [r1, #8]
 800541c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005420:	4313      	orrs	r3, r2
 8005422:	608b      	str	r3, [r1, #8]
}
 8005424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005426:	bf00      	nop
 8005428:	40012400 	.word	0x40012400
 800542c:	447a0000 	.word	0x447a0000
 8005430:	47c35000 	.word	0x47c35000

08005434 <daq_reset>:
}

void daq_reset(daq_data_t* self)
{
    LL_TIM_DisableCounter(PS_TIM_TRIG);
    self->trig.ready = 0;
 8005434:	2100      	movs	r1, #0
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005436:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <daq_reset+0x7c>)
{
 8005438:	b510      	push	{r4, lr}
 800543a:	6813      	ldr	r3, [r2, #0]
 800543c:	4604      	mov	r4, r0
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	6013      	str	r3, [r2, #0]
    //self->trig.pos_last = 0;
    //self->trig.pos_diff = 0;
    self->trig.pretrig_cntr = 0;
    self->trig.is_post = 0;

    if (self->buff1.len > 0)
 8005444:	88c2      	ldrh	r2, [r0, #6]
    self->trig.ready = 0;
 8005446:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    self->trig.cntr = 0;
 800544a:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
 800544e:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
 8005452:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
 8005456:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
    self->trig.all_cntr = 0;
 800545a:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
 800545e:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8005462:	f880 108f 	strb.w	r1, [r0, #143]	; 0x8f
 8005466:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
    self->trig.pretrig_cntr = 0;
 800546a:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
 800546e:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
 8005472:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
 8005476:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    self->trig.is_post = 0;
 800547a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    if (self->buff1.len > 0)
 800547e:	b112      	cbz	r2, 8005486 <daq_reset+0x52>
        memset(self->buff1.data, 0, self->buff1.len);
 8005480:	6800      	ldr	r0, [r0, #0]
 8005482:	f003 fb3b 	bl	8008afc <memset>
    if (self->buff2.len > 0)
 8005486:	89e2      	ldrh	r2, [r4, #14]
 8005488:	b11a      	cbz	r2, 8005492 <daq_reset+0x5e>
        memset(self->buff2.data, 0, self->buff2.len);
 800548a:	2100      	movs	r1, #0
 800548c:	68a0      	ldr	r0, [r4, #8]
 800548e:	f003 fb35 	bl	8008afc <memset>
    if (self->buff3.len > 0)
 8005492:	8ae2      	ldrh	r2, [r4, #22]
 8005494:	b11a      	cbz	r2, 800549e <daq_reset+0x6a>
        memset(self->buff3.data, 0, self->buff3.len);
 8005496:	2100      	movs	r1, #0
 8005498:	6920      	ldr	r0, [r4, #16]
 800549a:	f003 fb2f 	bl	8008afc <memset>
    if (self->buff4.len > 0)
 800549e:	8be2      	ldrh	r2, [r4, #30]
 80054a0:	b12a      	cbz	r2, 80054ae <daq_reset+0x7a>
        memset(self->buff4.data, 0, self->buff4.len);
 80054a2:	69a0      	ldr	r0, [r4, #24]
 80054a4:	2100      	movs	r1, #0
}
 80054a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset(self->buff4.data, 0, self->buff4.len);
 80054aa:	f003 bb27 	b.w	8008afc <memset>
}
 80054ae:	bd10      	pop	{r4, pc}
 80054b0:	40000400 	.word	0x40000400

080054b4 <daq_enable>:

void daq_enable(daq_data_t* self, uint8_t enable)
{
 80054b4:	b538      	push	{r3, r4, r5, lr}
    if (self->enabled && self->dis_hold)
 80054b6:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
{
 80054ba:	4604      	mov	r4, r0
 80054bc:	460d      	mov	r5, r1
    if (self->enabled && self->dis_hold)
 80054be:	b113      	cbz	r3, 80054c6 <daq_enable+0x12>
 80054c0:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80054c4:	bb23      	cbnz	r3, 8005510 <daq_enable+0x5c>
        return;

    if (self->mode == SCOPE || self->mode == VM)
 80054c6:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d829      	bhi.n	8005522 <daq_enable+0x6e>
 80054ce:	4b2a      	ldr	r3, [pc, #168]	; (8005578 <daq_enable+0xc4>)
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80054d0:	689a      	ldr	r2, [r3, #8]
    self->enabled = enable;
}

static void daq_enable_adc(daq_data_t* self, ADC_TypeDef* adc, uint8_t enable)
{
    if (enable)
 80054d2:	b1f5      	cbz	r5, 8005512 <daq_enable+0x5e>
 80054d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80054d8:	609a      	str	r2, [r3, #8]
    {
        LL_ADC_REG_StartConversionExtTrig(adc, LL_ADC_REG_TRIG_EXT_RISING);
        if (self->trig.set.mode != DISABLED)
 80054da:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d00f      	beq.n	8005502 <daq_enable+0x4e>
        {
            ASSERT(self->trig.ch_reg != 0);
 80054e2:	f8d4 3082 	ldr.w	r3, [r4, #130]	; 0x82
 80054e6:	b923      	cbnz	r3, 80054f2 <daq_enable+0x3e>
 80054e8:	f44f 6189 	mov.w	r1, #1096	; 0x448
 80054ec:	4823      	ldr	r0, [pc, #140]	; (800557c <daq_enable+0xc8>)
 80054ee:	f001 fb80 	bl	8006bf2 <assert2>
  MODIFY_REG(ADCx->CR1,
 80054f2:	4921      	ldr	r1, [pc, #132]	; (8005578 <daq_enable+0xc4>)
 80054f4:	4a22      	ldr	r2, [pc, #136]	; (8005580 <daq_enable+0xcc>)
 80054f6:	6848      	ldr	r0, [r1, #4]
            LL_ADC_SetAnalogWDMonitChannels(adc, self->trig.ch_reg);
 80054f8:	f8d4 3082 	ldr.w	r3, [r4, #130]	; 0x82
 80054fc:	4002      	ands	r2, r0
 80054fe:	4313      	orrs	r3, r2
 8005500:	604b      	str	r3, [r1, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005502:	4a20      	ldr	r2, [pc, #128]	; (8005584 <daq_enable+0xd0>)
 8005504:	6813      	ldr	r3, [r2, #0]
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	6013      	str	r3, [r2, #0]
    self->enabled = enable;
 800550c:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
}
 8005510:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(ADCx->CR2, ADC_CR2_EXTTRIG);
 8005512:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005516:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR1,
 8005518:	6859      	ldr	r1, [r3, #4]
 800551a:	4a19      	ldr	r2, [pc, #100]	; (8005580 <daq_enable+0xcc>)
 800551c:	400a      	ands	r2, r1
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	e7ef      	b.n	8005502 <daq_enable+0x4e>
        ASSERT(self->trig.exti_trig != 0);
 8005522:	f8d4 30bd 	ldr.w	r3, [r4, #189]	; 0xbd
 8005526:	b923      	cbnz	r3, 8005532 <daq_enable+0x7e>
 8005528:	f240 412b 	movw	r1, #1067	; 0x42b
 800552c:	4813      	ldr	r0, [pc, #76]	; (800557c <daq_enable+0xc8>)
 800552e:	f001 fb60 	bl	8006bf2 <assert2>
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <daq_enable+0xd4>)
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8005534:	681a      	ldr	r2, [r3, #0]
        if (enable)
 8005536:	b1ad      	cbz	r5, 8005564 <daq_enable+0xb0>
 8005538:	f042 0201 	orr.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]
            if (self->trig.set.mode != DISABLED)
 800553e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005542:	2b02      	cmp	r3, #2
 8005544:	d0dd      	beq.n	8005502 <daq_enable+0x4e>
                NVIC_EnableIRQ(self->trig.exti_trig);
 8005546:	f8d4 20bd 	ldr.w	r2, [r4, #189]	; 0xbd
 800554a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 800554c:	2b00      	cmp	r3, #0
 800554e:	dbd8      	blt.n	8005502 <daq_enable+0x4e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005550:	2101      	movs	r1, #1
 8005552:	f002 021f 	and.w	r2, r2, #31
 8005556:	fa01 f202 	lsl.w	r2, r1, r2
 800555a:	490c      	ldr	r1, [pc, #48]	; (800558c <daq_enable+0xd8>)
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005562:	e7ce      	b.n	8005502 <daq_enable+0x4e>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]
            NVIC_DisableIRQ(self->trig.exti_trig);
 800556a:	f8d4 00bd 	ldr.w	r0, [r4, #189]	; 0xbd
 800556e:	b240      	sxtb	r0, r0
 8005570:	f7ff fada 	bl	8004b28 <__NVIC_DisableIRQ>
 8005574:	e7c5      	b.n	8005502 <daq_enable+0x4e>
 8005576:	bf00      	nop
 8005578:	40012400 	.word	0x40012400
 800557c:	0800ab07 	.word	0x0800ab07
 8005580:	ff3ffde0 	.word	0xff3ffde0
 8005584:	40000400 	.word	0x40000400
 8005588:	4002006c 	.word	0x4002006c
 800558c:	e000e100 	.word	0xe000e100

08005590 <daq_trig_set>:
{
 8005590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((level < 0 || level > 100) ||
 8005594:	2a64      	cmp	r2, #100	; 0x64
{
 8005596:	b085      	sub	sp, #20
 8005598:	4604      	mov	r4, r0
 800559a:	460d      	mov	r5, r1
 800559c:	4617      	mov	r7, r2
 800559e:	469a      	mov	sl, r3
 80055a0:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
    if((level < 0 || level > 100) ||
 80055a4:	d904      	bls.n	80055b0 <daq_trig_set+0x20>
        return -1;
 80055a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80055aa:	b005      	add	sp, #20
 80055ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((level < 0 || level > 100) ||
 80055b0:	2904      	cmp	r1, #4
 80055b2:	d8f8      	bhi.n	80055a6 <daq_trig_set+0x16>
       (pretrigger > 99 || pretrigger < 1))
 80055b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055b6:	3b01      	subs	r3, #1
       (ch < 0 || ch > 4) ||
 80055b8:	2b62      	cmp	r3, #98	; 0x62
 80055ba:	d8f4      	bhi.n	80055a6 <daq_trig_set+0x16>
        daq_enable(self, 0);
 80055bc:	2100      	movs	r1, #0
 80055be:	f7ff ff79 	bl	80054b4 <daq_enable>
        daq_reset(self);
 80055c2:	4620      	mov	r0, r4
 80055c4:	f7ff ff36 	bl	8005434 <daq_reset>
    self->trig.dma_trig = PS_DMA_ADC1;
 80055c8:	2600      	movs	r6, #0
 80055ca:	2301      	movs	r3, #1
    self->trig.buff_trig = &self->buff1;
 80055cc:	f8c4 40b5 	str.w	r4, [r4, #181]	; 0xb5
    self->trig.dma_trig = PS_DMA_ADC1;
 80055d0:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
 80055d4:	f884 60ba 	strb.w	r6, [r4, #186]	; 0xba
 80055d8:	f884 60bb 	strb.w	r6, [r4, #187]	; 0xbb
 80055dc:	f884 60bc 	strb.w	r6, [r4, #188]	; 0xbc
    self->trig.fullmem_val = (int)(((1.0 / (float)self->set.fs) * (float)self->set.mem) * (float)PS_SYSTICK_FREQ); // ?
 80055e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80055e2:	f7fa ff2b 	bl	800043c <__aeabi_f2d>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	2000      	movs	r0, #0
 80055ec:	49bb      	ldr	r1, [pc, #748]	; (80058dc <daq_trig_set+0x34c>)
 80055ee:	f7fb f8a7 	bl	8000740 <__aeabi_ddiv>
 80055f2:	4680      	mov	r8, r0
 80055f4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80055f6:	4689      	mov	r9, r1
 80055f8:	f7fb fb56 	bl	8000ca8 <__aeabi_ui2f>
 80055fc:	f7fa ff1e 	bl	800043c <__aeabi_f2d>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4640      	mov	r0, r8
 8005606:	4649      	mov	r1, r9
 8005608:	f7fa ff70 	bl	80004ec <__aeabi_dmul>
 800560c:	2200      	movs	r2, #0
 800560e:	4bb4      	ldr	r3, [pc, #720]	; (80058e0 <daq_trig_set+0x350>)
 8005610:	f7fa ff6c 	bl	80004ec <__aeabi_dmul>
 8005614:	f7fb fa1a 	bl	8000a4c <__aeabi_d2iz>
 8005618:	f8c4 00b1 	str.w	r0, [r4, #177]	; 0xb1
    if (ch == 0 || mode == DISABLED)
 800561c:	b115      	cbz	r5, 8005624 <daq_trig_set+0x94>
 800561e:	f1bb 0f02 	cmp.w	fp, #2
 8005622:	d11e      	bne.n	8005662 <daq_trig_set+0xd2>
        ASSERT(self->trig.exti_trig != 0);
 8005624:	f8d4 30bd 	ldr.w	r3, [r4, #189]	; 0xbd
 8005628:	b923      	cbnz	r3, 8005634 <daq_trig_set+0xa4>
 800562a:	f240 2141 	movw	r1, #577	; 0x241
 800562e:	48ad      	ldr	r0, [pc, #692]	; (80058e4 <daq_trig_set+0x354>)
 8005630:	f001 fadf 	bl	8006bf2 <assert2>
        NVIC_DisableIRQ(self->trig.exti_trig);
 8005634:	f8d4 00bd 	ldr.w	r0, [r4, #189]	; 0xbd
 8005638:	b240      	sxtb	r0, r0
 800563a:	f7ff fa75 	bl	8004b28 <__NVIC_DisableIRQ>
 800563e:	4aaa      	ldr	r2, [pc, #680]	; (80058e8 <daq_trig_set+0x358>)
 8005640:	4baa      	ldr	r3, [pc, #680]	; (80058ec <daq_trig_set+0x35c>)
 8005642:	6851      	ldr	r1, [r2, #4]
        self->trig.set.ch = 0;
 8005644:	2000      	movs	r0, #0
 8005646:	400b      	ands	r3, r1
 8005648:	6053      	str	r3, [r2, #4]
        self->trig.set.mode = DISABLED;
 800564a:	2302      	movs	r3, #2
        self->trig.set.ch = 0;
 800564c:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
 8005650:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
 8005654:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
 8005658:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
        self->trig.set.mode = DISABLED;
 800565c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return 0;
 8005660:	e7a3      	b.n	80055aa <daq_trig_set+0x1a>
    if (self->mode == LA)
 8005662:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 8005666:	2902      	cmp	r1, #2
 8005668:	f040 8093 	bne.w	8005792 <daq_trig_set+0x202>
        self->trig.dma_trig = PS_DMA_LA;
 800566c:	2306      	movs	r3, #6
 800566e:	4a9e      	ldr	r2, [pc, #632]	; (80058e8 <daq_trig_set+0x358>)
 8005670:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
 8005674:	6850      	ldr	r0, [r2, #4]
 8005676:	4b9d      	ldr	r3, [pc, #628]	; (80058ec <daq_trig_set+0x35c>)
 8005678:	4003      	ands	r3, r0
 800567a:	6053      	str	r3, [r2, #4]
        if (self->set.ch1_en)
 800567c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
        LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8005680:	e9cd 6602 	strd	r6, r6, [sp, #8]
        if (self->set.ch1_en)
 8005684:	2b00      	cmp	r3, #0
 8005686:	d051      	beq.n	800572c <daq_trig_set+0x19c>
            self->trig.exti_trig = PS_LA_IRQ_EXTI1;
 8005688:	2307      	movs	r3, #7
 800568a:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
            extiline = PS_LA_EXTILINE1;
 800568e:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
            self->trig.exti_trig = PS_LA_IRQ_EXTI1;
 8005692:	f884 60be 	strb.w	r6, [r4, #190]	; 0xbe
 8005696:	f884 60bf 	strb.w	r6, [r4, #191]	; 0xbf
 800569a:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	0092      	lsls	r2, r2, #2
 80056a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80056a6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80056aa:	6890      	ldr	r0, [r2, #8]
 80056ac:	0c1b      	lsrs	r3, r3, #16
 80056ae:	ea20 0003 	bic.w	r0, r0, r3
 80056b2:	fa93 f3a3 	rbit	r3, r3
        EXTI_InitStruct.LineCommand = ENABLE;
 80056b6:	2501      	movs	r5, #1
        EXTI_InitStruct.Trigger = (self->trig.set.edge == RISING ? LL_EXTI_TRIGGER_RISING : LL_EXTI_TRIGGER_FALLING);
 80056b8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80056bc:	6090      	str	r0, [r2, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	bf14      	ite	ne
 80056c2:	2302      	movne	r3, #2
 80056c4:	462b      	moveq	r3, r5
        LL_EXTI_Init(&EXTI_InitStruct);
 80056c6:	a802      	add	r0, sp, #8
        EXTI_InitStruct.Line_0_31 = exti;
 80056c8:	9102      	str	r1, [sp, #8]
        EXTI_InitStruct.Trigger = (self->trig.set.edge == RISING ? LL_EXTI_TRIGGER_RISING : LL_EXTI_TRIGGER_FALLING);
 80056ca:	f88d 300e 	strb.w	r3, [sp, #14]
        EXTI_InitStruct.LineCommand = ENABLE;
 80056ce:	f88d 500c 	strb.w	r5, [sp, #12]
        LL_EXTI_Init(&EXTI_InitStruct);
 80056d2:	f7fd f8a5 	bl	8002820 <LL_EXTI_Init>
        NVIC_SetPriority(self->trig.exti_trig, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80056d6:	f8d4 30bd 	ldr.w	r3, [r4, #189]	; 0xbd
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056da:	4985      	ldr	r1, [pc, #532]	; (80058f0 <daq_trig_set+0x360>)
 80056dc:	b25a      	sxtb	r2, r3
  if ((int32_t)(IRQn) >= 0)
 80056de:	2a00      	cmp	r2, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056e0:	68c8      	ldr	r0, [r1, #12]
  if ((int32_t)(IRQn) >= 0)
 80056e2:	db4f      	blt.n	8005784 <daq_trig_set+0x1f4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e4:	2600      	movs	r6, #0
 80056e6:	f5a1 6140 	sub.w	r1, r1, #3072	; 0xc00
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ea:	f003 031f 	and.w	r3, r3, #31
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ee:	1888      	adds	r0, r1, r2
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056f0:	fa05 f303 	lsl.w	r3, r5, r3
 80056f4:	0952      	lsrs	r2, r2, #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f6:	f880 6300 	strb.w	r6, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        self->trig.set.val = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 8005704:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 8005708:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 800570c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        self->trig.set.val_percent = 0;
 8005710:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 8005714:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 8005718:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800571c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    daq_enable(self, 1);
 8005720:	4620      	mov	r0, r4
 8005722:	2101      	movs	r1, #1
 8005724:	f7ff fec6 	bl	80054b4 <daq_enable>
    return 0;
 8005728:	2000      	movs	r0, #0
 800572a:	e73e      	b.n	80055aa <daq_trig_set+0x1a>
        else if (self->set.ch2_en)
 800572c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8005730:	b162      	cbz	r2, 800574c <daq_trig_set+0x1bc>
            self->trig.exti_trig = PS_LA_IRQ_EXTI2;
 8005732:	2208      	movs	r2, #8
 8005734:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 8005738:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 800573c:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 8005740:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
            exti = PS_LA_EXTI2;
 8005744:	2104      	movs	r1, #4
            extiline = PS_LA_EXTILINE2;
 8005746:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800574a:	e7a8      	b.n	800569e <daq_trig_set+0x10e>
        else if (self->set.ch3_en)
 800574c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8005750:	b163      	cbz	r3, 800576c <daq_trig_set+0x1dc>
            self->trig.exti_trig = PS_LA_IRQ_EXTI3;
 8005752:	2309      	movs	r3, #9
 8005754:	f884 20be 	strb.w	r2, [r4, #190]	; 0xbe
 8005758:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 800575c:	f884 20bf 	strb.w	r2, [r4, #191]	; 0xbf
 8005760:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
            exti = PS_LA_EXTI3;
 8005764:	2108      	movs	r1, #8
            extiline = PS_LA_EXTILINE3;
 8005766:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 800576a:	e798      	b.n	800569e <daq_trig_set+0x10e>
            self->trig.exti_trig = PS_LA_IRQ_EXTI4;
 800576c:	220a      	movs	r2, #10
 800576e:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 8005772:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 8005776:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 800577a:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
            exti = PS_LA_EXTI4;
 800577e:	2110      	movs	r1, #16
            extiline = PS_LA_EXTILINE4;
 8005780:	4b5c      	ldr	r3, [pc, #368]	; (80058f4 <daq_trig_set+0x364>)
 8005782:	e78c      	b.n	800569e <daq_trig_set+0x10e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005784:	2200      	movs	r2, #0
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	3b04      	subs	r3, #4
 800578c:	440b      	add	r3, r1
 800578e:	761a      	strb	r2, [r3, #24]
 8005790:	e7b5      	b.n	80056fe <daq_trig_set+0x16e>
        ASSERT(self->trig.exti_trig != 0);
 8005792:	f8d4 30bd 	ldr.w	r3, [r4, #189]	; 0xbd
 8005796:	b923      	cbnz	r3, 80057a2 <daq_trig_set+0x212>
 8005798:	f240 217f 	movw	r1, #639	; 0x27f
 800579c:	4851      	ldr	r0, [pc, #324]	; (80058e4 <daq_trig_set+0x354>)
 800579e:	f001 fa28 	bl	8006bf2 <assert2>
        NVIC_DisableIRQ(self->trig.exti_trig);
 80057a2:	f8d4 00bd 	ldr.w	r0, [r4, #189]	; 0xbd
 80057a6:	b240      	sxtb	r0, r0
 80057a8:	f7ff f9be 	bl	8004b28 <__NVIC_DisableIRQ>
        if ((ch == 1 && self->set.ch1_en) ||
 80057ac:	2d01      	cmp	r5, #1
 80057ae:	d10a      	bne.n	80057c6 <daq_trig_set+0x236>
 80057b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
            (ch == 3 && self->set.ch3_en) ||
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f43f aef6 	beq.w	80055a6 <daq_trig_set+0x16>
                self->trig.ch_reg = PS_ADC_AWD3;
 80057ba:	f884 5082 	strb.w	r5, [r4, #130]	; 0x82
                self->trig.ch_reg = PS_ADC_AWD4;
 80057be:	2302      	movs	r3, #2
 80057c0:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
 80057c4:	e00a      	b.n	80057dc <daq_trig_set+0x24c>
        if ((ch == 1 && self->set.ch1_en) ||
 80057c6:	2d02      	cmp	r5, #2
 80057c8:	d16e      	bne.n	80058a8 <daq_trig_set+0x318>
            (ch == 2 && self->set.ch2_en) ||
 80057ca:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f43f aee9 	beq.w	80055a6 <daq_trig_set+0x16>
                self->trig.ch_reg = PS_ADC_AWD2;
 80057d4:	f884 5082 	strb.w	r5, [r4, #130]	; 0x82
 80057d8:	f884 5083 	strb.w	r5, [r4, #131]	; 0x83
                self->trig.ch_reg = PS_ADC_AWD4;
 80057dc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80057e0:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 80057e4:	2300      	movs	r3, #0
 80057e6:	4e40      	ldr	r6, [pc, #256]	; (80058e8 <daq_trig_set+0x358>)
 80057e8:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
 80057ec:	6871      	ldr	r1, [r6, #4]
 80057ee:	4a3f      	ldr	r2, [pc, #252]	; (80058ec <daq_trig_set+0x35c>)
            LL_ADC_SetAnalogWDMonitChannels(adc, self->trig.ch_reg);
 80057f0:	f8d4 3082 	ldr.w	r3, [r4, #130]	; 0x82
 80057f4:	400a      	ands	r2, r1
 80057f6:	4313      	orrs	r3, r2
 80057f8:	6073      	str	r3, [r6, #4]
            if (self->set.bits == B12)
 80057fa:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
                level_max = 4095;
 80057fe:	f640 78ff 	movw	r8, #4095	; 0xfff
 8005802:	2b0c      	cmp	r3, #12
 8005804:	bf18      	it	ne
 8005806:	f04f 08ff 	movne.w	r8, #255	; 0xff
            level_raw = (int)((float)level_max / 100.0 * (float)level);
 800580a:	4640      	mov	r0, r8
 800580c:	f7fb fa4c 	bl	8000ca8 <__aeabi_ui2f>
 8005810:	f7fa fe14 	bl	800043c <__aeabi_f2d>
 8005814:	2200      	movs	r2, #0
 8005816:	4b38      	ldr	r3, [pc, #224]	; (80058f8 <daq_trig_set+0x368>)
 8005818:	f7fa ff92 	bl	8000740 <__aeabi_ddiv>
 800581c:	e9cd 0100 	strd	r0, r1, [sp]
 8005820:	4638      	mov	r0, r7
 8005822:	f7fb fa41 	bl	8000ca8 <__aeabi_ui2f>
 8005826:	f7fa fe09 	bl	800043c <__aeabi_f2d>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005832:	f7fa fe5b 	bl	80004ec <__aeabi_dmul>
 8005836:	f7fb f909 	bl	8000a4c <__aeabi_d2iz>
 800583a:	4930      	ldr	r1, [pc, #192]	; (80058fc <daq_trig_set+0x36c>)
 800583c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8005900 <daq_trig_set+0x370>
            if (edge == RISING)
 8005840:	f1ba 0f00 	cmp.w	sl, #0
 8005844:	d13e      	bne.n	80058c4 <daq_trig_set+0x334>
  MODIFY_REG(*preg,
 8005846:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005848:	ea03 030c 	and.w	r3, r3, ip
 800584c:	433b      	orrs	r3, r7
 800584e:	6273      	str	r3, [r6, #36]	; 0x24
 8005850:	684b      	ldr	r3, [r1, #4]
 8005852:	ea03 030c 	and.w	r3, r3, ip
 8005856:	604b      	str	r3, [r1, #4]
            self->trig.set.val = level_raw;
 8005858:	f8c4 0056 	str.w	r0, [r4, #86]	; 0x56
            self->trig.set.val_percent = level;
 800585c:	f8c4 705a 	str.w	r7, [r4, #90]	; 0x5a
        self->trig.pretrig_val = (int)((float)self->trig.fullmem_val * ((float)pretrigger / 100.0));
 8005860:	f8d4 00b1 	ldr.w	r0, [r4, #177]	; 0xb1
 8005864:	f7fb fa24 	bl	8000cb0 <__aeabi_i2f>
 8005868:	f7fa fde8 	bl	800043c <__aeabi_f2d>
 800586c:	4606      	mov	r6, r0
 800586e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005870:	460f      	mov	r7, r1
 8005872:	f7fb fa1d 	bl	8000cb0 <__aeabi_i2f>
 8005876:	f7fa fde1 	bl	800043c <__aeabi_f2d>
 800587a:	2200      	movs	r2, #0
 800587c:	4b1e      	ldr	r3, [pc, #120]	; (80058f8 <daq_trig_set+0x368>)
 800587e:	f7fa ff5f 	bl	8000740 <__aeabi_ddiv>
 8005882:	460b      	mov	r3, r1
 8005884:	4602      	mov	r2, r0
 8005886:	4639      	mov	r1, r7
 8005888:	4630      	mov	r0, r6
 800588a:	f7fa fe2f 	bl	80004ec <__aeabi_dmul>
 800588e:	f7fb f8dd 	bl	8000a4c <__aeabi_d2iz>
        self->trig.set.pretrigger = pretrigger;
 8005892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        self->trig.pretrig_val = (int)((float)self->trig.fullmem_val * ((float)pretrigger / 100.0));
 8005894:	f8c4 00a9 	str.w	r0, [r4, #169]	; 0xa9
        self->trig.set.pretrigger = pretrigger;
 8005898:	64e3      	str	r3, [r4, #76]	; 0x4c
        self->trig.set.mode = mode;
 800589a:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
        self->trig.set.edge = edge;
 800589e:	f884 a051 	strb.w	sl, [r4, #81]	; 0x51
        self->trig.set.ch = ch;
 80058a2:	f8c4 5052 	str.w	r5, [r4, #82]	; 0x52
 80058a6:	e73b      	b.n	8005720 <daq_trig_set+0x190>
            (ch == 2 && self->set.ch2_en) ||
 80058a8:	2d03      	cmp	r5, #3
 80058aa:	d102      	bne.n	80058b2 <daq_trig_set+0x322>
            (ch == 3 && self->set.ch3_en) ||
 80058ac:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80058b0:	e780      	b.n	80057b4 <daq_trig_set+0x224>
            (ch == 4 && self->set.ch4_en))
 80058b2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f43f ae75 	beq.w	80055a6 <daq_trig_set+0x16>
                self->trig.ch_reg = PS_ADC_AWD4;
 80058bc:	2304      	movs	r3, #4
 80058be:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 80058c2:	e77c      	b.n	80057be <daq_trig_set+0x22e>
 80058c4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80058c6:	ea02 020c 	and.w	r2, r2, ip
 80058ca:	ea42 0208 	orr.w	r2, r2, r8
 80058ce:	6272      	str	r2, [r6, #36]	; 0x24
 80058d0:	684b      	ldr	r3, [r1, #4]
 80058d2:	ea03 030c 	and.w	r3, r3, ip
 80058d6:	433b      	orrs	r3, r7
 80058d8:	e7bd      	b.n	8005856 <daq_trig_set+0x2c6>
 80058da:	bf00      	nop
 80058dc:	3ff00000 	.word	0x3ff00000
 80058e0:	408f4000 	.word	0x408f4000
 80058e4:	0800ab07 	.word	0x0800ab07
 80058e8:	40012400 	.word	0x40012400
 80058ec:	ff3ffde0 	.word	0xff3ffde0
 80058f0:	e000ed00 	.word	0xe000ed00
 80058f4:	000f0001 	.word	0x000f0001
 80058f8:	40590000 	.word	0x40590000
 80058fc:	40012424 	.word	0x40012424
 8005900:	fffff000 	.word	0xfffff000

08005904 <daq_trig_update>:
{
 8005904:	b537      	push	{r0, r1, r2, r4, r5, lr}
    daq_trig_set(self, self->trig.set.ch, self->trig.set.val_percent,
 8005906:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8005908:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800590c:	f8d0 205a 	ldr.w	r2, [r0, #90]	; 0x5a
 8005910:	f8d0 1052 	ldr.w	r1, [r0, #82]	; 0x52
 8005914:	9501      	str	r5, [sp, #4]
 8005916:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	9400      	str	r4, [sp, #0]
 800591e:	f7ff fe37 	bl	8005590 <daq_trig_set>
}
 8005922:	b003      	add	sp, #12
 8005924:	bd30      	pop	{r4, r5, pc}

08005926 <daq_trig_disable>:
{
 8005926:	b507      	push	{r0, r1, r2, lr}
    daq_trig_set(self, 0, self->trig.set.val_percent, self->trig.set.edge, DISABLED, self->trig.set.pretrigger);
 8005928:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800592a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800592e:	f8d0 205a 	ldr.w	r2, [r0, #90]	; 0x5a
 8005932:	9101      	str	r1, [sp, #4]
 8005934:	2102      	movs	r1, #2
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	9100      	str	r1, [sp, #0]
 800593a:	2100      	movs	r1, #0
 800593c:	f7ff fe28 	bl	8005590 <daq_trig_set>
}
 8005940:	b003      	add	sp, #12
 8005942:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005948 <daq_mem_set>:
{
 8005948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800594c:	4604      	mov	r4, r0
 800594e:	460d      	mov	r5, r1
        daq_enable(self, 0);
 8005950:	2100      	movs	r1, #0
 8005952:	f7ff fdaf 	bl	80054b4 <daq_enable>
        daq_reset(self);
 8005956:	4620      	mov	r0, r4
 8005958:	f7ff fd6c 	bl	8005434 <daq_reset>
    daq_clear_buff(&self->buff1);
 800595c:	4620      	mov	r0, r4
 800595e:	f7ff f8d9 	bl	8004b14 <daq_clear_buff>
    daq_clear_buff(&self->buff2);
 8005962:	f104 0008 	add.w	r0, r4, #8
 8005966:	f7ff f8d5 	bl	8004b14 <daq_clear_buff>
    daq_clear_buff(&self->buff3);
 800596a:	f104 0010 	add.w	r0, r4, #16
 800596e:	f7ff f8d1 	bl	8004b14 <daq_clear_buff>
    daq_clear_buff(&self->buff4);
 8005972:	f104 0018 	add.w	r0, r4, #24
 8005976:	f7ff f8cd 	bl	8004b14 <daq_clear_buff>
    daq_clear_buff(&self->buff_out);
 800597a:	f104 0020 	add.w	r0, r4, #32
 800597e:	f7ff f8c9 	bl	8004b14 <daq_clear_buff>
    if (self->set.bits == B12)
 8005982:	f894 6032 	ldrb.w	r6, [r4, #50]	; 0x32
    if (self->mode != LA)
 8005986:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    if (self->set.bits == B12)
 800598a:	2e0c      	cmp	r6, #12
        out_per_ch *= 2;
 800598c:	bf07      	ittee	eq
 800598e:	006a      	lsleq	r2, r5, #1
        max_len /= 2;
 8005990:	f241 3788 	movweq	r7, #5000	; 0x1388
    int out_per_ch = mem_per_ch;
 8005994:	462a      	movne	r2, r5
    int max_len = PS_DAQ_MAX_MEM;
 8005996:	f242 7710 	movwne	r7, #10000	; 0x2710
    if (self->mode != LA)
 800599a:	2b02      	cmp	r3, #2
 800599c:	d02f      	beq.n	80059fe <daq_mem_set+0xb6>
        int len1 = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + 1;
 800599e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 80059a2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80059a6:	4403      	add	r3, r0
 80059a8:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80059ac:	4403      	add	r3, r0
 80059ae:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80059b2:	4418      	add	r0, r3
 80059b4:	f100 0901 	add.w	r9, r0, #1
        if (mem_per_ch < 0 || (mem_per_ch * len1) + (mem_per_ch * len1 - 1) > max_len)
 80059b8:	fb09 f805 	mul.w	r8, r9, r5
 80059bc:	f108 33ff 	add.w	r3, r8, #4294967295
 80059c0:	4443      	add	r3, r8
 80059c2:	42bb      	cmp	r3, r7
 80059c4:	dc30      	bgt.n	8005a28 <daq_mem_set+0xe0>
        self->buff_out.chans = len1 - 1;
 80059c6:	84a0      	strh	r0, [r4, #36]	; 0x24
        self->buff_out.len = out_per_ch * (len1 - 1);
 80059c8:	4350      	muls	r0, r2
 80059ca:	b280      	uxth	r0, r0
 80059cc:	84e0      	strh	r0, [r4, #38]	; 0x26
        self->buff_out.data = malloc(self->buff_out.len * sizeof(uint8_t));
 80059ce:	f003 f84f 	bl	8008a70 <malloc>
        daq_malloc(&self->buff1, mem_per_ch * len1, len1, PS_ADC_ADDR(ADC1), PS_DMA_ADC1, self->set.bits);
 80059d2:	2301      	movs	r3, #1
 80059d4:	464a      	mov	r2, r9
 80059d6:	4641      	mov	r1, r8
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <daq_mem_set+0xe8>)
        self->buff_out.data = malloc(self->buff_out.len * sizeof(uint8_t));
 80059dc:	6220      	str	r0, [r4, #32]
        daq_malloc(&self->buff1, mem_per_ch * len1, len1, PS_ADC_ADDR(ADC1), PS_DMA_ADC1, self->set.bits);
 80059de:	9601      	str	r6, [sp, #4]
        daq_malloc(&self->buff1, mem_per_ch, 4, PS_DAQ_PORT->ODR, PS_DMA_LA, self->set.bits);
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff f91d 	bl	8004c20 <daq_malloc>
    daq_trig_update(self);
 80059e6:	4620      	mov	r0, r4
    self->set.mem = mem_per_ch;
 80059e8:	8625      	strh	r5, [r4, #48]	; 0x30
    daq_trig_update(self);
 80059ea:	f7ff ff8b 	bl	8005904 <daq_trig_update>
        daq_enable(self, 1);
 80059ee:	4620      	mov	r0, r4
 80059f0:	2101      	movs	r1, #1
 80059f2:	f7ff fd5f 	bl	80054b4 <daq_enable>
    return 0;
 80059f6:	2000      	movs	r0, #0
}
 80059f8:	b003      	add	sp, #12
 80059fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (mem_per_ch < 0 || mem_per_ch > max_len)
 80059fe:	42af      	cmp	r7, r5
 8005a00:	db12      	blt.n	8005a28 <daq_mem_set+0xe0>
        self->buff_out.chans = 4;
 8005a02:	2300      	movs	r3, #0
 8005a04:	2704      	movs	r7, #4
 8005a06:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 8005a0a:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
        self->buff_out.len = mem_per_ch;
 8005a0e:	84e5      	strh	r5, [r4, #38]	; 0x26
        self->buff_out.data = malloc(mem_per_ch * sizeof(uint8_t));
 8005a10:	4628      	mov	r0, r5
 8005a12:	f003 f82d 	bl	8008a70 <malloc>
        daq_malloc(&self->buff1, mem_per_ch, 4, PS_DAQ_PORT->ODR, PS_DMA_LA, self->set.bits);
 8005a16:	2206      	movs	r2, #6
 8005a18:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <daq_mem_set+0xec>)
        self->buff_out.data = malloc(mem_per_ch * sizeof(uint8_t));
 8005a1a:	6220      	str	r0, [r4, #32]
        daq_malloc(&self->buff1, mem_per_ch, 4, PS_DAQ_PORT->ODR, PS_DMA_LA, self->set.bits);
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	4629      	mov	r1, r5
 8005a20:	9200      	str	r2, [sp, #0]
 8005a22:	9601      	str	r6, [sp, #4]
 8005a24:	463a      	mov	r2, r7
 8005a26:	e7db      	b.n	80059e0 <daq_mem_set+0x98>
            return -2;
 8005a28:	f06f 0001 	mvn.w	r0, #1
 8005a2c:	e7e4      	b.n	80059f8 <daq_mem_set+0xb0>
 8005a2e:	bf00      	nop
 8005a30:	4001244c 	.word	0x4001244c
 8005a34:	40010800 	.word	0x40010800

08005a38 <daq_bit_set>:
{
 8005a38:	b538      	push	{r3, r4, r5, lr}
    if (bits != B12 && bits != B8 && bits != B1)
 8005a3a:	f001 03fb 	and.w	r3, r1, #251	; 0xfb
 8005a3e:	2b08      	cmp	r3, #8
{
 8005a40:	4604      	mov	r4, r0
    if (bits != B12 && bits != B8 && bits != B1)
 8005a42:	d001      	beq.n	8005a48 <daq_bit_set+0x10>
 8005a44:	2901      	cmp	r1, #1
 8005a46:	d117      	bne.n	8005a78 <daq_bit_set+0x40>
    if (self->mode == SCOPE || self->mode == VM)
 8005a48:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    self->set.bits = bits;
 8005a4c:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    if (self->mode == SCOPE || self->mode == VM)
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d814      	bhi.n	8005a7e <daq_bit_set+0x46>
            daq_enable(self, 0);
 8005a54:	2100      	movs	r1, #0
 8005a56:	4620      	mov	r0, r4
 8005a58:	f7ff fd2c 	bl	80054b4 <daq_enable>
            daq_reset(self);
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f7ff fce9 	bl	8005434 <daq_reset>
        int ret = daq_mem_set(self, self->set.mem);
 8005a62:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7ff ff6f 	bl	8005948 <daq_mem_set>
            daq_enable(self, 1);
 8005a6a:	2101      	movs	r1, #1
        int ret = daq_mem_set(self, self->set.mem);
 8005a6c:	4605      	mov	r5, r0
            daq_enable(self, 1);
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f7ff fd20 	bl	80054b4 <daq_enable>
}
 8005a74:	4628      	mov	r0, r5
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
 8005a78:	f04f 35ff 	mov.w	r5, #4294967295
 8005a7c:	e7fa      	b.n	8005a74 <daq_bit_set+0x3c>
    return 0;
 8005a7e:	2500      	movs	r5, #0
 8005a80:	e7f8      	b.n	8005a74 <daq_bit_set+0x3c>
	...

08005a84 <daq_fs_set>:
{
 8005a84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005a88:	460e      	mov	r6, r1
 8005a8a:	4605      	mov	r5, r0
    if (fs < 0 || fs > PS_DAQ_MAX_FS)
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f7fb fb00 	bl	8001094 <__aeabi_fcmplt>
 8005a94:	bb78      	cbnz	r0, 8005af6 <daq_fs_set+0x72>
 8005a96:	4919      	ldr	r1, [pc, #100]	; (8005afc <daq_fs_set+0x78>)
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f7fb fb19 	bl	80010d0 <__aeabi_fcmpgt>
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	bb48      	cbnz	r0, 8005af6 <daq_fs_set+0x72>
    int prescaler = 1;
 8005aa2:	2701      	movs	r7, #1
        daq_enable(self, 0);
 8005aa4:	4601      	mov	r1, r0
    self->set.fs = fs;
 8005aa6:	62ee      	str	r6, [r5, #44]	; 0x2c
        daq_enable(self, 0);
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f7ff fd03 	bl	80054b4 <daq_enable>
        daq_reset(self);
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f7ff fcc0 	bl	8005434 <daq_reset>
    int reload = 1;
 8005ab4:	f10d 0810 	add.w	r8, sp, #16
    self->set.fs = get_freq(&prescaler, &reload, PS_TIM_ADC_MAX, PS_TIM_ADC_FREQ, fs);
 8005ab8:	4630      	mov	r0, r6
    int reload = 1;
 8005aba:	f848 7d04 	str.w	r7, [r8, #-4]!
    int prescaler = 1;
 8005abe:	9702      	str	r7, [sp, #8]
    self->set.fs = get_freq(&prescaler, &reload, PS_TIM_ADC_MAX, PS_TIM_ADC_FREQ, fs);
 8005ac0:	f7fb fb10 	bl	80010e4 <__aeabi_f2iz>
 8005ac4:	4641      	mov	r1, r8
 8005ac6:	9000      	str	r0, [sp, #0]
 8005ac8:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <daq_fs_set+0x7c>)
 8005aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ace:	a802      	add	r0, sp, #8
 8005ad0:	f001 f9a9 	bl	8006e26 <get_freq>
  WRITE_REG(TIMx->PSC, Prescaler);
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <daq_fs_set+0x80>)
 8005ad6:	9a02      	ldr	r2, [sp, #8]
 8005ad8:	62e8      	str	r0, [r5, #44]	; 0x2c
 8005ada:	629a      	str	r2, [r3, #40]	; 0x28
    LL_TIM_SetAutoReload(PS_TIM_ADC, reload);
 8005adc:	9a03      	ldr	r2, [sp, #12]
    daq_trig_update(self);
 8005ade:	4628      	mov	r0, r5
  WRITE_REG(TIMx->ARR, AutoReload);
 8005ae0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ae2:	f7ff ff0f 	bl	8005904 <daq_trig_update>
        daq_enable(self, 1);
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	4639      	mov	r1, r7
 8005aea:	f7ff fce3 	bl	80054b4 <daq_enable>
    return 0;
 8005aee:	4620      	mov	r0, r4
}
 8005af0:	b004      	add	sp, #16
 8005af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
 8005af6:	f04f 30ff 	mov.w	r0, #4294967295
 8005afa:	e7f9      	b.n	8005af0 <daq_fs_set+0x6c>
 8005afc:	47c35000 	.word	0x47c35000
 8005b00:	02255100 	.word	0x02255100
 8005b04:	40000400 	.word	0x40000400

08005b08 <daq_ch_set>:
{
 8005b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b0c:	4604      	mov	r4, r0
    self->set.ch1_en = ch1;
 8005b0e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    self->set.ch2_en = ch2;
 8005b12:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    self->set.ch3_en = ch3;
 8005b16:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
{
 8005b1a:	f89d 6020 	ldrb.w	r6, [sp, #32]
    if (self->enabled)
 8005b1e:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
{
 8005b22:	4689      	mov	r9, r1
 8005b24:	4690      	mov	r8, r2
 8005b26:	461f      	mov	r7, r3
    self->set.ch4_en = ch4;
 8005b28:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
    if (self->enabled)
 8005b2c:	b135      	cbz	r5, 8005b3c <daq_ch_set+0x34>
        daq_enable(self, 0);
 8005b2e:	2100      	movs	r1, #0
 8005b30:	f7ff fcc0 	bl	80054b4 <daq_enable>
        daq_reset(self);
 8005b34:	4620      	mov	r0, r4
 8005b36:	f7ff fc7d 	bl	8005434 <daq_reset>
        reen = 1;
 8005b3a:	2501      	movs	r5, #1
    if (self->mode != LA)
 8005b3c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d045      	beq.n	8005bd0 <daq_ch_set+0xc8>
    int len = ch1 + ch2 + ch3 + ch4 + vrefint;
 8005b44:	eb09 0308 	add.w	r3, r9, r8
 8005b48:	443b      	add	r3, r7
 8005b4a:	4433      	add	r3, r6
 8005b4c:	3301      	adds	r3, #1
    if (len == 2)
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d04b      	beq.n	8005bea <daq_ch_set+0xe2>
    if (len == 3)
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d04c      	beq.n	8005bf0 <daq_ch_set+0xe8>
    else if (len == 4)
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d04d      	beq.n	8005bf6 <daq_ch_set+0xee>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS;
 8005b5a:	2b05      	cmp	r3, #5
 8005b5c:	bf14      	ite	ne
 8005b5e:	2200      	movne	r2, #0
 8005b60:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005b64:	4925      	ldr	r1, [pc, #148]	; (8005bfc <daq_ch_set+0xf4>)
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, LL_ADC_CHANNEL_VREFINT);
 8005b66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005b6a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005b6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b70:	4313      	orrs	r3, r2
 8005b72:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005b74:	4922      	ldr	r1, [pc, #136]	; (8005c00 <daq_ch_set+0xf8>)
 8005b76:	f7fe ffeb 	bl	8004b50 <LL_ADC_REG_SetSequencerRanks.constprop.18>
        LL_ADC_SetChannelSamplingTime(adc, LL_ADC_CHANNEL_VREFINT, PS_ADC_SMPL_TIME);
 8005b7a:	4821      	ldr	r0, [pc, #132]	; (8005c00 <daq_ch_set+0xf8>)
 8005b7c:	f7ff f804 	bl	8004b88 <LL_ADC_SetChannelSamplingTime.constprop.19>
    if (ch1) {
 8005b80:	f1b9 0f00 	cmp.w	r9, #0
 8005b84:	d007      	beq.n	8005b96 <daq_ch_set+0x8e>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH1);
 8005b86:	f240 2019 	movw	r0, #537	; 0x219
 8005b8a:	491e      	ldr	r1, [pc, #120]	; (8005c04 <daq_ch_set+0xfc>)
 8005b8c:	f7fe ffe0 	bl	8004b50 <LL_ADC_REG_SetSequencerRanks.constprop.18>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH1, PS_ADC_SMPL_TIME);
 8005b90:	481c      	ldr	r0, [pc, #112]	; (8005c04 <daq_ch_set+0xfc>)
 8005b92:	f7fe fff9 	bl	8004b88 <LL_ADC_SetChannelSamplingTime.constprop.19>
    if (ch2) {
 8005b96:	f1b8 0f00 	cmp.w	r8, #0
 8005b9a:	d007      	beq.n	8005bac <daq_ch_set+0xa4>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH2);
 8005b9c:	f240 2019 	movw	r0, #537	; 0x219
 8005ba0:	4919      	ldr	r1, [pc, #100]	; (8005c08 <daq_ch_set+0x100>)
 8005ba2:	f7fe ffd5 	bl	8004b50 <LL_ADC_REG_SetSequencerRanks.constprop.18>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH2, PS_ADC_SMPL_TIME);
 8005ba6:	4818      	ldr	r0, [pc, #96]	; (8005c08 <daq_ch_set+0x100>)
 8005ba8:	f7fe ffee 	bl	8004b88 <LL_ADC_SetChannelSamplingTime.constprop.19>
    if (ch3) {
 8005bac:	b13f      	cbz	r7, 8005bbe <daq_ch_set+0xb6>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH3);
 8005bae:	f240 2019 	movw	r0, #537	; 0x219
 8005bb2:	4916      	ldr	r1, [pc, #88]	; (8005c0c <daq_ch_set+0x104>)
 8005bb4:	f7fe ffcc 	bl	8004b50 <LL_ADC_REG_SetSequencerRanks.constprop.18>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH3, PS_ADC_SMPL_TIME);
 8005bb8:	4814      	ldr	r0, [pc, #80]	; (8005c0c <daq_ch_set+0x104>)
 8005bba:	f7fe ffe5 	bl	8004b88 <LL_ADC_SetChannelSamplingTime.constprop.19>
    if (ch4) {
 8005bbe:	b13e      	cbz	r6, 8005bd0 <daq_ch_set+0xc8>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH4);
 8005bc0:	f240 2019 	movw	r0, #537	; 0x219
 8005bc4:	4912      	ldr	r1, [pc, #72]	; (8005c10 <daq_ch_set+0x108>)
 8005bc6:	f7fe ffc3 	bl	8004b50 <LL_ADC_REG_SetSequencerRanks.constprop.18>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH4, PS_ADC_SMPL_TIME);
 8005bca:	4811      	ldr	r0, [pc, #68]	; (8005c10 <daq_ch_set+0x108>)
 8005bcc:	f7fe ffdc 	bl	8004b88 <LL_ADC_SetChannelSamplingTime.constprop.19>
    int ret = daq_mem_set(self, self->set.mem);
 8005bd0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7ff feb8 	bl	8005948 <daq_mem_set>
 8005bd8:	4606      	mov	r6, r0
    if (reen)
 8005bda:	b11d      	cbz	r5, 8005be4 <daq_ch_set+0xdc>
        daq_enable(self, 1);
 8005bdc:	2101      	movs	r1, #1
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff fc68 	bl	80054b4 <daq_enable>
}
 8005be4:	4630      	mov	r0, r6
 8005be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8005bea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bee:	e7b9      	b.n	8005b64 <daq_ch_set+0x5c>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 8005bf0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005bf4:	e7b6      	b.n	8005b64 <daq_ch_set+0x5c>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
 8005bf6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005bfa:	e7b3      	b.n	8005b64 <daq_ch_set+0x5c>
 8005bfc:	40012400 	.word	0x40012400
 8005c00:	81500011 	.word	0x81500011
 8005c04:	02300001 	.word	0x02300001
 8005c08:	02600002 	.word	0x02600002
 8005c0c:	02900003 	.word	0x02900003
 8005c10:	02c00004 	.word	0x02c00004

08005c14 <daq_mode_set>:
        LL_ADC_SetAnalogWDMonitChannels(adc, LL_ADC_AWD_DISABLE);
    }
}

void daq_mode_set(daq_data_t* self, enum daq_mode mode)
{
 8005c14:	b530      	push	{r4, r5, lr}
    if (self->mode == SCOPE)
 8005c16:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
 8005c1a:	b089      	sub	sp, #36	; 0x24
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	460d      	mov	r5, r1
    if (self->mode == SCOPE)
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d177      	bne.n	8005d14 <daq_mode_set+0x100>
    dst1->fs = src1->fs;
 8005c24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005c26:	f8c0 3037 	str.w	r3, [r0, #55]	; 0x37
    dst1->mem = src1->mem;
 8005c2a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8005c2c:	f8a0 303b 	strh.w	r3, [r0, #59]	; 0x3b
    dst1->bits = src1->bits;
 8005c30:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8005c34:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    dst1->ch1_en = src1->ch1_en;
 8005c38:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8005c3c:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    dst1->ch2_en = src1->ch2_en;
 8005c40:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005c44:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    dst1->ch3_en = src1->ch3_en;
 8005c48:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005c4c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dst1->ch4_en = src1->ch4_en;
 8005c50:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8005c54:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
    dst2->val_percent = src2->val_percent;
 8005c58:	f8d0 305a 	ldr.w	r3, [r0, #90]	; 0x5a
 8005c5c:	66c3      	str	r3, [r0, #108]	; 0x6c
    dst2->val = src2->val;
 8005c5e:	f8d0 3056 	ldr.w	r3, [r0, #86]	; 0x56
 8005c62:	6683      	str	r3, [r0, #104]	; 0x68
    dst2->ch = src2->ch;
 8005c64:	f8d0 3052 	ldr.w	r3, [r0, #82]	; 0x52
 8005c68:	6643      	str	r3, [r0, #100]	; 0x64
    dst2->edge = src2->edge;
 8005c6a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005c6e:	f880 3063 	strb.w	r3, [r0, #99]	; 0x63
    dst2->mode = src2->mode;
 8005c72:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005c76:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
    dst2->pretrigger = src2->pretrigger;
 8005c7a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005c7c:	f8c0 305e 	str.w	r3, [r0, #94]	; 0x5e
    self->mode = mode;
    //int reen = 0;
    //if (self->enabled)
    //{
    //    reen = 1;
        daq_enable(self, 0);
 8005c80:	2100      	movs	r1, #0
 8005c82:	4620      	mov	r0, r4
    self->mode = mode;
 8005c84:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
        daq_enable(self, 0);
 8005c88:	f7ff fc14 	bl	80054b4 <daq_enable>
        daq_trig_disable(self);
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f7ff fe4a 	bl	8005926 <daq_trig_disable>
        daq_reset(self);
 8005c92:	4620      	mov	r0, r4
 8005c94:	f7ff fbce 	bl	8005434 <daq_reset>
        self->dis_hold = 1;
 8005c98:	2301      	movs	r3, #1
    //}

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c9a:	2210      	movs	r2, #16
        self->dis_hold = 1;
 8005c9c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	eb0d 0002 	add.w	r0, sp, r2
 8005ca6:	f002 ff29 	bl	8008afc <memset>
    GPIO_InitStruct.Pin = PS_DAQ_CH1 | PS_DAQ_CH2 | PS_DAQ_CH3 | PS_DAQ_CH4;
 8005caa:	f641 631e 	movw	r3, #7710	; 0x1e1e
 8005cae:	a908      	add	r1, sp, #32
 8005cb0:	f841 3d14 	str.w	r3, [r1, #-20]!

    if (mode == SCOPE) // save settings
 8005cb4:	2d00      	cmp	r5, #0
 8005cb6:	d160      	bne.n	8005d7a <daq_mode_set+0x166>
    {
        GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
        LL_GPIO_Init(PS_DAQ_PORT, &GPIO_InitStruct);
 8005cb8:	485f      	ldr	r0, [pc, #380]	; (8005e38 <daq_mode_set+0x224>)
 8005cba:	f7fc fe05 	bl	80028c8 <LL_GPIO_Init>

        daq_mem_set(self, 3); // safety guard
 8005cbe:	2103      	movs	r1, #3
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f7ff fe41 	bl	8005948 <daq_mem_set>
        daq_bit_set(self, self->save_s.bits);
 8005cc6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f7ff feb4 	bl	8005a38 <daq_bit_set>
        daq_ch_set(self, self->save_s.ch1_en, self->save_s.ch2_en, self->save_s.ch3_en, self->save_s.ch4_en);
 8005cd0:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 8005cd4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005cd8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005cdc:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 8005ce0:	9000      	str	r0, [sp, #0]
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f7ff ff10 	bl	8005b08 <daq_ch_set>
        daq_fs_set(self, self->save_s.fs);
 8005ce8:	f8d4 1037 	ldr.w	r1, [r4, #55]	; 0x37
 8005cec:	4620      	mov	r0, r4
 8005cee:	f7ff fec9 	bl	8005a84 <daq_fs_set>
        daq_mem_set(self, self->save_s.mem);
 8005cf2:	f8b4 103b 	ldrh.w	r1, [r4, #59]	; 0x3b
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f7ff fe26 	bl	8005948 <daq_mem_set>
        daq_trig_set(self, self->trig.save_s.ch, self->trig.save_s.val, self->trig.save_s.edge,
 8005cfc:	f8d4 005e 	ldr.w	r0, [r4, #94]	; 0x5e
 8005d00:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
 8005d04:	9001      	str	r0, [sp, #4]
 8005d06:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005d08:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005d0a:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
        daq_mem_set(self, 3); // safety guard
        daq_bit_set(self, self->save_l.bits);
        daq_ch_set(self, self->save_l.ch1_en, self->save_l.ch2_en, self->save_l.ch3_en, self->save_l.ch4_en);
        daq_fs_set(self, self->save_l.fs);
        daq_mem_set(self, self->save_l.mem);
        daq_trig_set(self, self->trig.save_l.ch, self->trig.save_l.val, self->trig.save_l.edge,
 8005d0e:	9000      	str	r0, [sp, #0]
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	e055      	b.n	8005dc0 <daq_mode_set+0x1ac>
    else if (self->mode == LA)
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d1b3      	bne.n	8005c80 <daq_mode_set+0x6c>
    dst1->fs = src1->fs;
 8005d18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005d1a:	f8c0 3042 	str.w	r3, [r0, #66]	; 0x42
    dst1->mem = src1->mem;
 8005d1e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8005d20:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    dst1->bits = src1->bits;
 8005d24:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8005d28:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    dst1->ch1_en = src1->ch1_en;
 8005d2c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8005d30:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    dst1->ch2_en = src1->ch2_en;
 8005d34:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005d38:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    dst1->ch3_en = src1->ch3_en;
 8005d3c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005d40:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    dst1->ch4_en = src1->ch4_en;
 8005d44:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8005d48:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    dst2->val_percent = src2->val_percent;
 8005d4c:	f8d0 305a 	ldr.w	r3, [r0, #90]	; 0x5a
 8005d50:	f8c0 307e 	str.w	r3, [r0, #126]	; 0x7e
    dst2->val = src2->val;
 8005d54:	f8d0 3056 	ldr.w	r3, [r0, #86]	; 0x56
 8005d58:	f8c0 307a 	str.w	r3, [r0, #122]	; 0x7a
    dst2->ch = src2->ch;
 8005d5c:	f8d0 3052 	ldr.w	r3, [r0, #82]	; 0x52
 8005d60:	f8c0 3076 	str.w	r3, [r0, #118]	; 0x76
    dst2->edge = src2->edge;
 8005d64:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005d68:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    dst2->mode = src2->mode;
 8005d6c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005d70:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    dst2->pretrigger = src2->pretrigger;
 8005d74:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005d76:	6703      	str	r3, [r0, #112]	; 0x70
 8005d78:	e782      	b.n	8005c80 <daq_mode_set+0x6c>
    else if (mode == VM)
 8005d7a:	2d01      	cmp	r5, #1
 8005d7c:	d12c      	bne.n	8005dd8 <daq_mode_set+0x1c4>
        LL_GPIO_Init(PS_DAQ_PORT, &GPIO_InitStruct);
 8005d7e:	482e      	ldr	r0, [pc, #184]	; (8005e38 <daq_mode_set+0x224>)
 8005d80:	f7fc fda2 	bl	80028c8 <LL_GPIO_Init>
        daq_mem_set(self, 3); // safety guard
 8005d84:	2103      	movs	r1, #3
 8005d86:	4620      	mov	r0, r4
 8005d88:	f7ff fdde 	bl	8005948 <daq_mem_set>
        daq_bit_set(self, B12);
 8005d8c:	210c      	movs	r1, #12
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f7ff fe52 	bl	8005a38 <daq_bit_set>
        daq_ch_set(self, 1, 1, 1, 1);
 8005d94:	462b      	mov	r3, r5
 8005d96:	462a      	mov	r2, r5
 8005d98:	4629      	mov	r1, r5
 8005d9a:	9500      	str	r5, [sp, #0]
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f7ff feb3 	bl	8005b08 <daq_ch_set>
        daq_mem_set(self, 200);
 8005da2:	21c8      	movs	r1, #200	; 0xc8
 8005da4:	4620      	mov	r0, r4
 8005da6:	f7ff fdcf 	bl	8005948 <daq_mem_set>
        daq_fs_set(self, 100);
 8005daa:	4924      	ldr	r1, [pc, #144]	; (8005e3c <daq_mode_set+0x228>)
 8005dac:	4620      	mov	r0, r4
 8005dae:	f7ff fe69 	bl	8005a84 <daq_fs_set>
        daq_trig_set(self, 0, 0, RISING, DISABLED, 50);
 8005db2:	2302      	movs	r3, #2
 8005db4:	2232      	movs	r2, #50	; 0x32
 8005db6:	e9cd 3200 	strd	r3, r2, [sp]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4619      	mov	r1, r3
        daq_trig_set(self, self->trig.save_l.ch, self->trig.save_l.val, self->trig.save_l.edge,
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7ff fbe5 	bl	8005590 <daq_trig_set>
                     self->trig.save_l.mode, self->trig.save_l.pretrigger);
    }

    //if (reen)
    self->dis_hold = 0;
 8005dc6:	2300      	movs	r3, #0
    daq_enable(self, 1);
 8005dc8:	2101      	movs	r1, #1
    self->dis_hold = 0;
 8005dca:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
    daq_enable(self, 1);
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f7ff fb70 	bl	80054b4 <daq_enable>
}
 8005dd4:	b009      	add	sp, #36	; 0x24
 8005dd6:	bd30      	pop	{r4, r5, pc}
        GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005dd8:	2308      	movs	r3, #8
        LL_GPIO_Init(PS_DAQ_PORT, &GPIO_InitStruct);
 8005dda:	4817      	ldr	r0, [pc, #92]	; (8005e38 <daq_mode_set+0x224>)
        GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005ddc:	9304      	str	r3, [sp, #16]
        LL_GPIO_Init(PS_DAQ_PORT, &GPIO_InitStruct);
 8005dde:	f7fc fd73 	bl	80028c8 <LL_GPIO_Init>
        daq_mem_set(self, 3); // safety guard
 8005de2:	2103      	movs	r1, #3
 8005de4:	4620      	mov	r0, r4
 8005de6:	f7ff fdaf 	bl	8005948 <daq_mem_set>
        daq_bit_set(self, self->save_l.bits);
 8005dea:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8005dee:	4620      	mov	r0, r4
 8005df0:	f7ff fe22 	bl	8005a38 <daq_bit_set>
        daq_ch_set(self, self->save_l.ch1_en, self->save_l.ch2_en, self->save_l.ch3_en, self->save_l.ch4_en);
 8005df4:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8005df8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005dfc:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8005e00:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8005e04:	9000      	str	r0, [sp, #0]
 8005e06:	4620      	mov	r0, r4
 8005e08:	f7ff fe7e 	bl	8005b08 <daq_ch_set>
        daq_fs_set(self, self->save_l.fs);
 8005e0c:	f8d4 1042 	ldr.w	r1, [r4, #66]	; 0x42
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7ff fe37 	bl	8005a84 <daq_fs_set>
        daq_mem_set(self, self->save_l.mem);
 8005e16:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f7ff fd94 	bl	8005948 <daq_mem_set>
        daq_trig_set(self, self->trig.save_l.ch, self->trig.save_l.val, self->trig.save_l.edge,
 8005e20:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005e22:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8005e26:	9001      	str	r0, [sp, #4]
 8005e28:	f8d4 207a 	ldr.w	r2, [r4, #122]	; 0x7a
 8005e2c:	f8d4 1076 	ldr.w	r1, [r4, #118]	; 0x76
 8005e30:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 8005e34:	e76b      	b.n	8005d0e <daq_mode_set+0xfa>
 8005e36:	bf00      	nop
 8005e38:	40010800 	.word	0x40010800
 8005e3c:	42c80000 	.word	0x42c80000

08005e40 <PS_System_Mode>:
#include "main.h"

/************************* [System Actions] *************************/

scpi_result_t PS_System_Mode(scpi_t * context)
{
 8005e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    const char* p1;
    size_t p1l;

    if (!SCPI_ParamCharacters(context, &p1, &p1l, TRUE))
 8005e42:	2301      	movs	r3, #1
 8005e44:	aa01      	add	r2, sp, #4
 8005e46:	4669      	mov	r1, sp
{
 8005e48:	4605      	mov	r5, r0
    if (!SCPI_ParamCharacters(context, &p1, &p1l, TRUE))
 8005e4a:	f002 f9b1 	bl	80081b0 <SCPI_ParamCharacters>
 8005e4e:	b938      	cbnz	r0, 8005e60 <PS_System_Mode+0x20>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8005e50:	f06f 016c 	mvn.w	r1, #108	; 0x6c
        daq_mode_set(&daq, VM);
    else if (strcmp(p1, "LA\r\n") == 0)
        daq_mode_set(&daq, LA);
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8005e54:	4628      	mov	r0, r5
 8005e56:	f001 f969 	bl	800712c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5e:	e00a      	b.n	8005e76 <PS_System_Mode+0x36>
    if (strcmp(p1, "SCOPE\r\n") == 0)
 8005e60:	9c00      	ldr	r4, [sp, #0]
 8005e62:	490e      	ldr	r1, [pc, #56]	; (8005e9c <PS_System_Mode+0x5c>)
 8005e64:	4620      	mov	r0, r4
 8005e66:	f7fa f973 	bl	8000150 <strcmp>
 8005e6a:	4601      	mov	r1, r0
 8005e6c:	b928      	cbnz	r0, 8005e7a <PS_System_Mode+0x3a>
        daq_mode_set(&daq, LA);
 8005e6e:	480c      	ldr	r0, [pc, #48]	; (8005ea0 <PS_System_Mode+0x60>)
 8005e70:	f7ff fed0 	bl	8005c14 <daq_mode_set>
    }


    return SCPI_RES_OK;
 8005e74:	2001      	movs	r0, #1
}
 8005e76:	b003      	add	sp, #12
 8005e78:	bd30      	pop	{r4, r5, pc}
    else if (strcmp(p1, "VM\r\n") == 0)
 8005e7a:	490a      	ldr	r1, [pc, #40]	; (8005ea4 <PS_System_Mode+0x64>)
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f7fa f967 	bl	8000150 <strcmp>
 8005e82:	b908      	cbnz	r0, 8005e88 <PS_System_Mode+0x48>
        daq_mode_set(&daq, VM);
 8005e84:	2101      	movs	r1, #1
 8005e86:	e7f2      	b.n	8005e6e <PS_System_Mode+0x2e>
    else if (strcmp(p1, "LA\r\n") == 0)
 8005e88:	4907      	ldr	r1, [pc, #28]	; (8005ea8 <PS_System_Mode+0x68>)
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7fa f960 	bl	8000150 <strcmp>
 8005e90:	b908      	cbnz	r0, 8005e96 <PS_System_Mode+0x56>
        daq_mode_set(&daq, LA);
 8005e92:	2102      	movs	r1, #2
 8005e94:	e7eb      	b.n	8005e6e <PS_System_Mode+0x2e>
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8005e96:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8005e9a:	e7db      	b.n	8005e54 <PS_System_Mode+0x14>
 8005e9c:	0800abf9 	.word	0x0800abf9
 8005ea0:	20001610 	.word	0x20001610
 8005ea4:	0800ac01 	.word	0x0800ac01
 8005ea8:	0800ac06 	.word	0x0800ac06

08005eac <PS_System_ModeQ>:

scpi_result_t PS_System_ModeQ(scpi_t * context)
{
 8005eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    char buff[10];
    int len;

    if (daq.mode == SCOPE)
 8005eae:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <PS_System_ModeQ+0x38>)
{
 8005eb0:	4604      	mov	r4, r0
    if (daq.mode == SCOPE)
 8005eb2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005eb6:	b95b      	cbnz	r3, 8005ed0 <PS_System_ModeQ+0x24>
        len = sprintf(buff, "SCOPE");
 8005eb8:	490b      	ldr	r1, [pc, #44]	; (8005ee8 <PS_System_ModeQ+0x3c>)
 8005eba:	a801      	add	r0, sp, #4
 8005ebc:	f002 fefc 	bl	8008cb8 <strcpy>
 8005ec0:	2205      	movs	r2, #5
    else if (daq.mode == VM)
        len = sprintf(buff, "VM");
    else
        len = sprintf(buff, "LA");

    SCPI_ResultCharacters(context, buff, len);
 8005ec2:	a901      	add	r1, sp, #4
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f001 ff97 	bl	8007df8 <SCPI_ResultCharacters>

    return SCPI_RES_OK;
}
 8005eca:	2001      	movs	r0, #1
 8005ecc:	b004      	add	sp, #16
 8005ece:	bd10      	pop	{r4, pc}
    else if (daq.mode == VM)
 8005ed0:	2b01      	cmp	r3, #1
        len = sprintf(buff, "VM");
 8005ed2:	bf0c      	ite	eq
 8005ed4:	4905      	ldreq	r1, [pc, #20]	; (8005eec <PS_System_ModeQ+0x40>)
        len = sprintf(buff, "LA");
 8005ed6:	4906      	ldrne	r1, [pc, #24]	; (8005ef0 <PS_System_ModeQ+0x44>)
 8005ed8:	a801      	add	r0, sp, #4
 8005eda:	f002 feed 	bl	8008cb8 <strcpy>
 8005ede:	2202      	movs	r2, #2
 8005ee0:	e7ef      	b.n	8005ec2 <PS_System_ModeQ+0x16>
 8005ee2:	bf00      	nop
 8005ee4:	20001610 	.word	0x20001610
 8005ee8:	0800ac0b 	.word	0x0800ac0b
 8005eec:	0800ac11 	.word	0x0800ac11
 8005ef0:	0800ac14 	.word	0x0800ac14
 8005ef4:	00000000 	.word	0x00000000

08005ef8 <PS_VM_ReadQ>:

/************************* [VM Actions] *************************/

scpi_result_t PS_VM_ReadQ(scpi_t * context)
{
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //char f1[10];
    //sprintFast(f1, " %s M", , 0);
    if (daq.mode == VM)
 8005efc:	4d5e      	ldr	r5, [pc, #376]	; (8006078 <PS_VM_ReadQ+0x180>)
{
 8005efe:	b0b7      	sub	sp, #220	; 0xdc
    if (daq.mode == VM)
 8005f00:	f895 404b 	ldrb.w	r4, [r5, #75]	; 0x4b
{
 8005f04:	4607      	mov	r7, r0
    if (daq.mode == VM)
 8005f06:	2c01      	cmp	r4, #1
 8005f08:	f040 80ac 	bne.w	8006064 <PS_VM_ReadQ+0x16c>
        //int vcc_mv = (4095 * 1200) / raw_vref;

        //int ch3 = (3300 * raw_cal * raw_ch3) / (raw_vref * 4095);
        //int ch4 = (3300 * raw_cal * raw_ch4) / (raw_vref * 4095);

        daq_enable(&daq, 0);
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f7ff fad0 	bl	80054b4 <daq_enable>

        uint32_t p1 = 0;
 8005f14:	2200      	movs	r2, #0
 8005f16:	a936      	add	r1, sp, #216	; 0xd8
 8005f18:	f841 2db8 	str.w	r2, [r1, #-184]!
        SCPI_ParamUInt32(context, &p1, FALSE);
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	f002 f944 	bl	80081aa <SCPI_ParamUInt32>
        float ch2_raw = 0;
        float ch3_raw = 0;
        float ch4_raw = 0;

        int avg_num = 1;
        if (p1 > 0)
 8005f22:	9e08      	ldr	r6, [sp, #32]
        float vcc_raw = 0;
 8005f24:	2300      	movs	r3, #0
        if (p1 > 0)
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	bf08      	it	eq
 8005f2a:	2601      	moveq	r6, #1
        float vcc_raw = 0;
 8005f2c:	9309      	str	r3, [sp, #36]	; 0x24
        float ch1_raw = 0;
 8005f2e:	930a      	str	r3, [sp, #40]	; 0x28
        float ch2_raw = 0;
 8005f30:	930b      	str	r3, [sp, #44]	; 0x2c
        float ch3_raw = 0;
 8005f32:	930c      	str	r3, [sp, #48]	; 0x30
        float ch4_raw = 0;
 8005f34:	930d      	str	r3, [sp, #52]	; 0x34
            avg_num = (int)p1;

        if (avg_num > daq.set.mem)
 8005f36:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8005f38:	42b3      	cmp	r3, r6
 8005f3a:	da07      	bge.n	8005f4c <PS_VM_ReadQ+0x54>
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8005f3c:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8005f40:	4638      	mov	r0, r7
        daq_enable(&daq, 1);
        SCPI_ResultCharacters(context, buff, len);
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8005f42:	f001 f8f3 	bl	800712c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8005f46:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4a:	e088      	b.n	800605e <PS_VM_ReadQ+0x166>
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8005f4c:	4b4b      	ldr	r3, [pc, #300]	; (800607c <PS_VM_ReadQ+0x184>)
        int last1 = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_ADC1);
 8005f4e:	88e9      	ldrh	r1, [r5, #6]
 8005f50:	6858      	ldr	r0, [r3, #4]
        sprint_fast(vcc_s, "%s", vcc, 4);
 8005f52:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005f56:	b280      	uxth	r0, r0
        int last1 = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_ADC1);
 8005f58:	1a08      	subs	r0, r1, r0
 8005f5a:	f000 ff5f 	bl	8006e1c <get_last_circ_idx>
        get_avg_from_circ(last1, 5, avg_num, daq.buff1.data, &vcc_raw, &ch1_raw, &ch2_raw, &ch3_raw, &ch4_raw);
 8005f5e:	aa0d      	add	r2, sp, #52	; 0x34
 8005f60:	9204      	str	r2, [sp, #16]
 8005f62:	aa0c      	add	r2, sp, #48	; 0x30
 8005f64:	9203      	str	r2, [sp, #12]
 8005f66:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f68:	9202      	str	r2, [sp, #8]
 8005f6a:	aa0a      	add	r2, sp, #40	; 0x28
 8005f6c:	9201      	str	r2, [sp, #4]
 8005f6e:	aa09      	add	r2, sp, #36	; 0x24
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	9200      	str	r2, [sp, #0]
 8005f74:	2105      	movs	r1, #5
 8005f76:	4632      	mov	r2, r6
 8005f78:	f000 fe3c 	bl	8006bf4 <get_avg_from_circ>
        float vcc = 4095.0 * PS_ADC_VREF_CAL / vcc_raw / 1000;
 8005f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f7e:	f7fa fa5d 	bl	800043c <__aeabi_f2d>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	a13a      	add	r1, pc, #232	; (adr r1, 8006070 <PS_VM_ReadQ+0x178>)
 8005f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f8c:	f7fa fbd8 	bl	8000740 <__aeabi_ddiv>
 8005f90:	2200      	movs	r2, #0
 8005f92:	4b3b      	ldr	r3, [pc, #236]	; (8006080 <PS_VM_ReadQ+0x188>)
 8005f94:	f7fa fbd4 	bl	8000740 <__aeabi_ddiv>
 8005f98:	f7fa fd80 	bl	8000a9c <__aeabi_d2f>
        float ch1 = vcc * ch1_raw / 4095 / 1000;
 8005f9c:	990a      	ldr	r1, [sp, #40]	; 0x28
        float vcc = 4095.0 * PS_ADC_VREF_CAL / vcc_raw / 1000;
 8005f9e:	4606      	mov	r6, r0
        float ch1 = vcc * ch1_raw / 4095 / 1000;
 8005fa0:	f7fa feda 	bl	8000d58 <__aeabi_fmul>
 8005fa4:	4937      	ldr	r1, [pc, #220]	; (8006084 <PS_VM_ReadQ+0x18c>)
 8005fa6:	f7fa ff8b 	bl	8000ec0 <__aeabi_fdiv>
 8005faa:	4937      	ldr	r1, [pc, #220]	; (8006088 <PS_VM_ReadQ+0x190>)
 8005fac:	f7fa ff88 	bl	8000ec0 <__aeabi_fdiv>
        float ch2 = vcc * ch2_raw / 4095 / 1000;
 8005fb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
        float ch1 = vcc * ch1_raw / 4095 / 1000;
 8005fb2:	4683      	mov	fp, r0
        float ch2 = vcc * ch2_raw / 4095 / 1000;
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f7fa fecf 	bl	8000d58 <__aeabi_fmul>
 8005fba:	4932      	ldr	r1, [pc, #200]	; (8006084 <PS_VM_ReadQ+0x18c>)
 8005fbc:	f7fa ff80 	bl	8000ec0 <__aeabi_fdiv>
 8005fc0:	4931      	ldr	r1, [pc, #196]	; (8006088 <PS_VM_ReadQ+0x190>)
 8005fc2:	f7fa ff7d 	bl	8000ec0 <__aeabi_fdiv>
        float ch3 = vcc * ch3_raw / 4095 / 1000;
 8005fc6:	990c      	ldr	r1, [sp, #48]	; 0x30
        float ch2 = vcc * ch2_raw / 4095 / 1000;
 8005fc8:	4682      	mov	sl, r0
        float ch3 = vcc * ch3_raw / 4095 / 1000;
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7fa fec4 	bl	8000d58 <__aeabi_fmul>
 8005fd0:	492c      	ldr	r1, [pc, #176]	; (8006084 <PS_VM_ReadQ+0x18c>)
 8005fd2:	f7fa ff75 	bl	8000ec0 <__aeabi_fdiv>
 8005fd6:	492c      	ldr	r1, [pc, #176]	; (8006088 <PS_VM_ReadQ+0x190>)
 8005fd8:	f7fa ff72 	bl	8000ec0 <__aeabi_fdiv>
        float ch4 = vcc * ch4_raw / 4095 / 1000;
 8005fdc:	990d      	ldr	r1, [sp, #52]	; 0x34
        float ch3 = vcc * ch3_raw / 4095 / 1000;
 8005fde:	4681      	mov	r9, r0
        float ch4 = vcc * ch4_raw / 4095 / 1000;
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f7fa feb9 	bl	8000d58 <__aeabi_fmul>
 8005fe6:	4927      	ldr	r1, [pc, #156]	; (8006084 <PS_VM_ReadQ+0x18c>)
 8005fe8:	f7fa ff6a 	bl	8000ec0 <__aeabi_fdiv>
 8005fec:	4926      	ldr	r1, [pc, #152]	; (8006088 <PS_VM_ReadQ+0x190>)
 8005fee:	f7fa ff67 	bl	8000ec0 <__aeabi_fdiv>
        sprint_fast(vcc_s, "%s", vcc, 4);
 8005ff2:	4632      	mov	r2, r6
        float ch4 = vcc * ch4_raw / 4095 / 1000;
 8005ff4:	9007      	str	r0, [sp, #28]
        sprint_fast(vcc_s, "%s", vcc, 4);
 8005ff6:	2304      	movs	r3, #4
 8005ff8:	4924      	ldr	r1, [pc, #144]	; (800608c <PS_VM_ReadQ+0x194>)
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	f000 ff54 	bl	8006ea8 <sprint_fast>
        sprint_fast(ch1_s, "%s", ch1, 4);
 8006000:	2304      	movs	r3, #4
 8006002:	465a      	mov	r2, fp
 8006004:	4921      	ldr	r1, [pc, #132]	; (800608c <PS_VM_ReadQ+0x194>)
 8006006:	a811      	add	r0, sp, #68	; 0x44
 8006008:	f000 ff4e 	bl	8006ea8 <sprint_fast>
        sprint_fast(ch3_s, "%s", ch3, 4);
 800600c:	ae17      	add	r6, sp, #92	; 0x5c
        sprint_fast(ch2_s, "%s", ch2, 4);
 800600e:	2304      	movs	r3, #4
 8006010:	4652      	mov	r2, sl
 8006012:	491e      	ldr	r1, [pc, #120]	; (800608c <PS_VM_ReadQ+0x194>)
 8006014:	a814      	add	r0, sp, #80	; 0x50
 8006016:	f000 ff47 	bl	8006ea8 <sprint_fast>
        sprint_fast(ch3_s, "%s", ch3, 4);
 800601a:	464a      	mov	r2, r9
 800601c:	4630      	mov	r0, r6
 800601e:	2304      	movs	r3, #4
 8006020:	491a      	ldr	r1, [pc, #104]	; (800608c <PS_VM_ReadQ+0x194>)
        sprint_fast(ch4_s, "%s", ch4, 4);
 8006022:	f10d 0968 	add.w	r9, sp, #104	; 0x68
        sprint_fast(ch3_s, "%s", ch3, 4);
 8006026:	f000 ff3f 	bl	8006ea8 <sprint_fast>
        sprint_fast(ch4_s, "%s", ch4, 4);
 800602a:	2304      	movs	r3, #4
 800602c:	9a07      	ldr	r2, [sp, #28]
 800602e:	4917      	ldr	r1, [pc, #92]	; (800608c <PS_VM_ReadQ+0x194>)
 8006030:	4648      	mov	r0, r9
 8006032:	f000 ff39 	bl	8006ea8 <sprint_fast>
        int len = sprintf(buff, "%s,%s,%s,%s,%s", ch1_s, ch2_s, ch3_s, ch4_s, vcc_s);
 8006036:	ab14      	add	r3, sp, #80	; 0x50
 8006038:	aa11      	add	r2, sp, #68	; 0x44
 800603a:	9600      	str	r6, [sp, #0]
 800603c:	4914      	ldr	r1, [pc, #80]	; (8006090 <PS_VM_ReadQ+0x198>)
 800603e:	e9cd 9801 	strd	r9, r8, [sp, #4]
 8006042:	a81d      	add	r0, sp, #116	; 0x74
 8006044:	f002 fe18 	bl	8008c78 <siprintf>
 8006048:	4606      	mov	r6, r0
        daq_enable(&daq, 1);
 800604a:	4621      	mov	r1, r4
 800604c:	4628      	mov	r0, r5
 800604e:	f7ff fa31 	bl	80054b4 <daq_enable>
        SCPI_ResultCharacters(context, buff, len);
 8006052:	4632      	mov	r2, r6
 8006054:	a91d      	add	r1, sp, #116	; 0x74
 8006056:	4638      	mov	r0, r7
 8006058:	f001 fece 	bl	8007df8 <SCPI_ResultCharacters>
    }


    return SCPI_RES_OK;
 800605c:	4620      	mov	r0, r4
}
 800605e:	b037      	add	sp, #220	; 0xdc
 8006060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006064:	f46f 7195 	mvn.w	r1, #298	; 0x12a
 8006068:	e76b      	b.n	8005f42 <PS_VM_ReadQ+0x4a>
 800606a:	bf00      	nop
 800606c:	f3af 8000 	nop.w
 8006070:	00000000 	.word	0x00000000
 8006074:	4152bed4 	.word	0x4152bed4
 8006078:	20001610 	.word	0x20001610
 800607c:	40020008 	.word	0x40020008
 8006080:	408f4000 	.word	0x408f4000
 8006084:	457ff000 	.word	0x457ff000
 8006088:	447a0000 	.word	0x447a0000
 800608c:	0800ab91 	.word	0x0800ab91
 8006090:	0800ac17 	.word	0x0800ac17

08006094 <PS_SCOPE_ReadQ>:

/************************* [SCOPE Actions] *************************/

scpi_result_t PS_SCOPE_ReadQ(scpi_t * context)
{
 8006094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (daq.mode == SCOPE)
 8006098:	4b6e      	ldr	r3, [pc, #440]	; (8006254 <PS_SCOPE_ReadQ+0x1c0>)
{
 800609a:	b089      	sub	sp, #36	; 0x24
    if (daq.mode == SCOPE)
 800609c:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
{
 80060a0:	4606      	mov	r6, r0
 80060a2:	461c      	mov	r4, r3
    if (daq.mode == SCOPE)
 80060a4:	2900      	cmp	r1, #0
 80060a6:	f040 80cd 	bne.w	8006244 <PS_SCOPE_ReadQ+0x1b0>
    {
        if (daq.trig.ready == 0)
 80060aa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80060ae:	b933      	cbnz	r3, 80060be <PS_SCOPE_ReadQ+0x2a>
        {
            SCPI_ResultText(context, "0");
 80060b0:	4969      	ldr	r1, [pc, #420]	; (8006258 <PS_SCOPE_ReadQ+0x1c4>)
            cal = PS_ADC_VREF_CAL_B8;

        float vcc = get_vcc_from_circ(daq.trig.pos_frst, daq.buff1.len, daq.buff1.chans, daq.set.bits, daq.buff1.data);
        if (vcc == 0)
        {
            SCPI_ResultText(context, "VCC = 0 ?!"); // TODO DEBUG
 80060b2:	f001 feb7 	bl	8007e24 <SCPI_ResultText>
            return SCPI_RES_OK;
 80060b6:	2001      	movs	r0, #1
        return SCPI_RES_ERR;
    }


    return SCPI_RES_OK;
}
 80060b8:	b009      	add	sp, #36	; 0x24
 80060ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (daq.trig.set.mode == DISABLED)
 80060be:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d110      	bne.n	80060e8 <PS_SCOPE_ReadQ+0x54>
            daq_enable(&daq, 0);
 80060c6:	4620      	mov	r0, r4
 80060c8:	f7ff f9f4 	bl	80054b4 <daq_enable>
 80060cc:	4b63      	ldr	r3, [pc, #396]	; (800625c <PS_SCOPE_ReadQ+0x1c8>)
            daq.trig.pos_frst = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_ADC1) - daq.buff1.len;
 80060ce:	88e1      	ldrh	r1, [r4, #6]
 80060d0:	6858      	ldr	r0, [r3, #4]
 80060d2:	b280      	uxth	r0, r0
 80060d4:	1a08      	subs	r0, r1, r0
 80060d6:	f000 fea1 	bl	8006e1c <get_last_circ_idx>
 80060da:	88e3      	ldrh	r3, [r4, #6]
            if (daq.trig.pos_frst < 0)
 80060dc:	1ac3      	subs	r3, r0, r3
            daq.trig.pos_frst = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_ADC1) - daq.buff1.len;
 80060de:	bf54      	ite	pl
 80060e0:	f8c4 3091 	strpl.w	r3, [r4, #145]	; 0x91
                daq.trig.pos_frst += daq.buff1.len;
 80060e4:	f8c4 0091 	strmi.w	r0, [r4, #145]	; 0x91
        if (daq.set.bits == B8)
 80060e8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
        float vcc = get_vcc_from_circ(daq.trig.pos_frst, daq.buff1.len, daq.buff1.chans, daq.set.bits, daq.buff1.data);
 80060ec:	6825      	ldr	r5, [r4, #0]
        if (daq.set.bits == B8)
 80060ee:	2b08      	cmp	r3, #8
        float vcc = get_vcc_from_circ(daq.trig.pos_frst, daq.buff1.len, daq.buff1.chans, daq.set.bits, daq.buff1.data);
 80060f0:	88e1      	ldrh	r1, [r4, #6]
 80060f2:	88a2      	ldrh	r2, [r4, #4]
 80060f4:	f8d4 0091 	ldr.w	r0, [r4, #145]	; 0x91
 80060f8:	9500      	str	r5, [sp, #0]
            cal = PS_ADC_VREF_CAL_B8;
 80060fa:	bf0c      	ite	eq
 80060fc:	4f58      	ldreq	r7, [pc, #352]	; (8006260 <PS_SCOPE_ReadQ+0x1cc>)
        float cal = PS_ADC_VREF_CAL_B12;
 80060fe:	4f59      	ldrne	r7, [pc, #356]	; (8006264 <PS_SCOPE_ReadQ+0x1d0>)
        float vcc = get_vcc_from_circ(daq.trig.pos_frst, daq.buff1.len, daq.buff1.chans, daq.set.bits, daq.buff1.data);
 8006100:	f000 fe10 	bl	8006d24 <get_vcc_from_circ>
 8006104:	f7fa fdd4 	bl	8000cb0 <__aeabi_i2f>
        if (vcc == 0)
 8006108:	2100      	movs	r1, #0
        float vcc = get_vcc_from_circ(daq.trig.pos_frst, daq.buff1.len, daq.buff1.chans, daq.set.bits, daq.buff1.data);
 800610a:	4680      	mov	r8, r0
        if (vcc == 0)
 800610c:	f7fa ffb8 	bl	8001080 <__aeabi_fcmpeq>
 8006110:	b110      	cbz	r0, 8006118 <PS_SCOPE_ReadQ+0x84>
            SCPI_ResultText(context, "VCC = 0 ?!"); // TODO DEBUG
 8006112:	4955      	ldr	r1, [pc, #340]	; (8006268 <PS_SCOPE_ReadQ+0x1d4>)
 8006114:	4630      	mov	r0, r6
 8006116:	e7cc      	b.n	80060b2 <PS_SCOPE_ReadQ+0x1e>
        if (daq.set.ch1_en)
 8006118:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
        int idx = 0;
 800611c:	9007      	str	r0, [sp, #28]
        if (daq.set.ch1_en)
 800611e:	2d00      	cmp	r5, #0
 8006120:	f000 808e 	beq.w	8006240 <PS_SCOPE_ReadQ+0x1ac>
            added += get_1ch_from_circ(daq.trig.pos_frst, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006124:	aa07      	add	r2, sp, #28
 8006126:	88a3      	ldrh	r3, [r4, #4]
 8006128:	88e1      	ldrh	r1, [r4, #6]
 800612a:	f8d4 0091 	ldr.w	r0, [r4, #145]	; 0x91
 800612e:	9205      	str	r2, [sp, #20]
                                       daq.set.bits, vcc, cal, daq.buff1.data, daq.buff_out.data, &idx);
 8006130:	6a22      	ldr	r2, [r4, #32]
            added += get_1ch_from_circ(daq.trig.pos_frst, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006132:	9204      	str	r2, [sp, #16]
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	9702      	str	r7, [sp, #8]
 8006138:	9203      	str	r2, [sp, #12]
 800613a:	f8cd 8004 	str.w	r8, [sp, #4]
 800613e:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8006142:	9200      	str	r2, [sp, #0]
 8006144:	2202      	movs	r2, #2
 8006146:	f000 fe0c 	bl	8006d62 <get_1ch_from_circ>
 800614a:	2203      	movs	r2, #3
 800614c:	4605      	mov	r5, r0
        if (daq.set.ch2_en)
 800614e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8006152:	b1e3      	cbz	r3, 800618e <PS_SCOPE_ReadQ+0xfa>
            added += get_1ch_from_circ(daq.trig.pos_frst, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006154:	f10d 0c1c 	add.w	ip, sp, #28
 8006158:	88a3      	ldrh	r3, [r4, #4]
 800615a:	88e1      	ldrh	r1, [r4, #6]
 800615c:	f8d4 0091 	ldr.w	r0, [r4, #145]	; 0x91
 8006160:	f8cd c014 	str.w	ip, [sp, #20]
                                       daq.set.bits, vcc, cal, daq.buff1.data, daq.buff_out.data, &idx);
 8006164:	f8d4 c020 	ldr.w	ip, [r4, #32]
            added += get_1ch_from_circ(daq.trig.pos_frst, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006168:	f102 0901 	add.w	r9, r2, #1
 800616c:	f8cd c010 	str.w	ip, [sp, #16]
 8006170:	f8d4 c000 	ldr.w	ip, [r4]
 8006174:	9702      	str	r7, [sp, #8]
 8006176:	f8cd c00c 	str.w	ip, [sp, #12]
 800617a:	f8cd 8004 	str.w	r8, [sp, #4]
 800617e:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 8006182:	f8cd c000 	str.w	ip, [sp]
 8006186:	f000 fdec 	bl	8006d62 <get_1ch_from_circ>
 800618a:	464a      	mov	r2, r9
 800618c:	4405      	add	r5, r0
        if (daq.set.ch3_en)
 800618e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006192:	b1e3      	cbz	r3, 80061ce <PS_SCOPE_ReadQ+0x13a>
            added += get_1ch_from_circ(daq.trig.pos_frst, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006194:	f10d 0c1c 	add.w	ip, sp, #28
 8006198:	88a3      	ldrh	r3, [r4, #4]
 800619a:	88e1      	ldrh	r1, [r4, #6]
 800619c:	f8d4 0091 	ldr.w	r0, [r4, #145]	; 0x91
 80061a0:	f8cd c014 	str.w	ip, [sp, #20]
                                       daq.set.bits, vcc, cal, daq.buff1.data, daq.buff_out.data, &idx);
 80061a4:	f8d4 c020 	ldr.w	ip, [r4, #32]
            added += get_1ch_from_circ(daq.trig.pos_frst, daq.buff1.len, ch_it++, daq.buff1.chans,
 80061a8:	f102 0901 	add.w	r9, r2, #1
 80061ac:	f8cd c010 	str.w	ip, [sp, #16]
 80061b0:	f8d4 c000 	ldr.w	ip, [r4]
 80061b4:	9702      	str	r7, [sp, #8]
 80061b6:	f8cd c00c 	str.w	ip, [sp, #12]
 80061ba:	f8cd 8004 	str.w	r8, [sp, #4]
 80061be:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 80061c2:	f8cd c000 	str.w	ip, [sp]
 80061c6:	f000 fdcc 	bl	8006d62 <get_1ch_from_circ>
 80061ca:	464a      	mov	r2, r9
 80061cc:	4405      	add	r5, r0
        if (daq.set.ch4_en)
 80061ce:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80061d2:	b1c3      	cbz	r3, 8006206 <PS_SCOPE_ReadQ+0x172>
            added += get_1ch_from_circ(daq.trig.pos_frst, daq.buff1.len, ch_it++, daq.buff1.chans,
 80061d4:	f10d 0c1c 	add.w	ip, sp, #28
 80061d8:	88a3      	ldrh	r3, [r4, #4]
 80061da:	88e1      	ldrh	r1, [r4, #6]
 80061dc:	f8d4 0091 	ldr.w	r0, [r4, #145]	; 0x91
 80061e0:	f8cd c014 	str.w	ip, [sp, #20]
                                       daq.set.bits, vcc, cal, daq.buff1.data, daq.buff_out.data, &idx);
 80061e4:	f8d4 c020 	ldr.w	ip, [r4, #32]
            added += get_1ch_from_circ(daq.trig.pos_frst, daq.buff1.len, ch_it++, daq.buff1.chans,
 80061e8:	f8cd c010 	str.w	ip, [sp, #16]
 80061ec:	f8d4 c000 	ldr.w	ip, [r4]
 80061f0:	9702      	str	r7, [sp, #8]
 80061f2:	f8cd c00c 	str.w	ip, [sp, #12]
 80061f6:	f8cd 8004 	str.w	r8, [sp, #4]
 80061fa:	f894 7032 	ldrb.w	r7, [r4, #50]	; 0x32
 80061fe:	9700      	str	r7, [sp, #0]
 8006200:	f000 fdaf 	bl	8006d62 <get_1ch_from_circ>
 8006204:	4405      	add	r5, r0
        daq.trig.pretrig_cntr = 0;
 8006206:	2300      	movs	r3, #0
        daq_enable(&daq, 1);
 8006208:	2101      	movs	r1, #1
 800620a:	4812      	ldr	r0, [pc, #72]	; (8006254 <PS_SCOPE_ReadQ+0x1c0>)
        daq.trig.pretrig_cntr = 0;
 800620c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8006210:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8006214:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 8006218:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
        daq.trig.ready = 0;
 800621c:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
        daq_enable(&daq, 1);
 8006220:	f7ff f948 	bl	80054b4 <daq_enable>
        ASSERT(added == daq.buff_out.len);
 8006224:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006226:	42ab      	cmp	r3, r5
 8006228:	d004      	beq.n	8006234 <PS_SCOPE_ReadQ+0x1a0>
 800622a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800622e:	480f      	ldr	r0, [pc, #60]	; (800626c <PS_SCOPE_ReadQ+0x1d8>)
 8006230:	f000 fcdf 	bl	8006bf2 <assert2>
        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len); // idx??
 8006234:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8006236:	6a21      	ldr	r1, [r4, #32]
 8006238:	4630      	mov	r0, r6
 800623a:	f001 fecb 	bl	8007fd4 <SCPI_ResultArbitraryBlock>
 800623e:	e73a      	b.n	80060b6 <PS_SCOPE_ReadQ+0x22>
        int ch_it = 2;
 8006240:	2202      	movs	r2, #2
 8006242:	e784      	b.n	800614e <PS_SCOPE_ReadQ+0xba>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006244:	f46f 7195 	mvn.w	r1, #298	; 0x12a
 8006248:	f000 ff70 	bl	800712c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	e732      	b.n	80060b8 <PS_SCOPE_ReadQ+0x24>
 8006252:	bf00      	nop
 8006254:	20001610 	.word	0x20001610
 8006258:	0800ad93 	.word	0x0800ad93
 800625c:	40020008 	.word	0x40020008
 8006260:	42f00000 	.word	0x42f00000
 8006264:	463b8000 	.word	0x463b8000
 8006268:	0800ab94 	.word	0x0800ab94
 800626c:	0800ab9f 	.word	0x0800ab9f

08006270 <PS_SCOPE_Set>:

scpi_result_t PS_SCOPE_Set(scpi_t * context)
{
 8006270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (daq.mode == SCOPE)
 8006274:	4e78      	ldr	r6, [pc, #480]	; (8006458 <PS_SCOPE_Set+0x1e8>)
{
 8006276:	b08e      	sub	sp, #56	; 0x38
    if (daq.mode == SCOPE)
 8006278:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
{
 800627c:	4605      	mov	r5, r0
    if (daq.mode == SCOPE)
 800627e:	2b00      	cmp	r3, #0
 8006280:	f040 80e6 	bne.w	8006450 <PS_SCOPE_Set+0x1e0>
        const char* p4;
        const char* p7;
        const char* p8;
        size_t p4l, p7l, p8l;

        if (!SCPI_ParamUInt32(context, &p1, TRUE) ||
 8006284:	2201      	movs	r2, #1
 8006286:	a902      	add	r1, sp, #8
 8006288:	f001 ff8f 	bl	80081aa <SCPI_ParamUInt32>
 800628c:	b938      	cbnz	r0, 800629e <PS_SCOPE_Set+0x2e>
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
            !SCPI_ParamUInt32(context, &p9, TRUE))
        {
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 800628e:	f06f 016c 	mvn.w	r1, #108	; 0x6c
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'D'))
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006292:	4628      	mov	r0, r5
            return SCPI_RES_ERR;
        }
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006294:	f000 ff4a 	bl	800712c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006298:	f04f 30ff 	mov.w	r0, #4294967295
 800629c:	e0d5      	b.n	800644a <PS_SCOPE_Set+0x1da>
            !SCPI_ParamUInt32(context, &p2, TRUE) ||
 800629e:	2201      	movs	r2, #1
 80062a0:	a903      	add	r1, sp, #12
 80062a2:	4628      	mov	r0, r5
 80062a4:	f001 ff81 	bl	80081aa <SCPI_ParamUInt32>
        if (!SCPI_ParamUInt32(context, &p1, TRUE) ||
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d0f0      	beq.n	800628e <PS_SCOPE_Set+0x1e>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 80062ac:	2201      	movs	r2, #1
 80062ae:	a904      	add	r1, sp, #16
 80062b0:	4628      	mov	r0, r5
 80062b2:	f001 ff7a 	bl	80081aa <SCPI_ParamUInt32>
            !SCPI_ParamUInt32(context, &p2, TRUE) ||
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d0e9      	beq.n	800628e <PS_SCOPE_Set+0x1e>
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 80062ba:	2301      	movs	r3, #1
 80062bc:	aa0b      	add	r2, sp, #44	; 0x2c
 80062be:	a908      	add	r1, sp, #32
 80062c0:	4628      	mov	r0, r5
 80062c2:	f001 ff75 	bl	80081b0 <SCPI_ParamCharacters>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d0e1      	beq.n	800628e <PS_SCOPE_Set+0x1e>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 80062ca:	2201      	movs	r2, #1
 80062cc:	a905      	add	r1, sp, #20
 80062ce:	4628      	mov	r0, r5
 80062d0:	f001 ff6b 	bl	80081aa <SCPI_ParamUInt32>
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d0da      	beq.n	800628e <PS_SCOPE_Set+0x1e>
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
 80062d8:	2201      	movs	r2, #1
 80062da:	a906      	add	r1, sp, #24
 80062dc:	4628      	mov	r0, r5
 80062de:	f001 ff64 	bl	80081aa <SCPI_ParamUInt32>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d0d3      	beq.n	800628e <PS_SCOPE_Set+0x1e>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 80062e6:	2301      	movs	r3, #1
 80062e8:	aa0c      	add	r2, sp, #48	; 0x30
 80062ea:	a909      	add	r1, sp, #36	; 0x24
 80062ec:	4628      	mov	r0, r5
 80062ee:	f001 ff5f 	bl	80081b0 <SCPI_ParamCharacters>
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d0cb      	beq.n	800628e <PS_SCOPE_Set+0x1e>
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
 80062f6:	2301      	movs	r3, #1
 80062f8:	aa0d      	add	r2, sp, #52	; 0x34
 80062fa:	a90a      	add	r1, sp, #40	; 0x28
 80062fc:	4628      	mov	r0, r5
 80062fe:	f001 ff57 	bl	80081b0 <SCPI_ParamCharacters>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 8006302:	2800      	cmp	r0, #0
 8006304:	d0c3      	beq.n	800628e <PS_SCOPE_Set+0x1e>
            !SCPI_ParamUInt32(context, &p9, TRUE))
 8006306:	2201      	movs	r2, #1
 8006308:	a907      	add	r1, sp, #28
 800630a:	4628      	mov	r0, r5
 800630c:	f001 ff4d 	bl	80081aa <SCPI_ParamUInt32>
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
 8006310:	2800      	cmp	r0, #0
 8006312:	d0bc      	beq.n	800628e <PS_SCOPE_Set+0x1e>
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 8006314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006316:	2b04      	cmp	r3, #4
 8006318:	d12d      	bne.n	8006376 <PS_SCOPE_Set+0x106>
 800631a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800631c:	2b01      	cmp	r3, #1
 800631e:	d12a      	bne.n	8006376 <PS_SCOPE_Set+0x106>
 8006320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006322:	2b01      	cmp	r3, #1
 8006324:	d127      	bne.n	8006376 <PS_SCOPE_Set+0x106>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 8006326:	9b08      	ldr	r3, [sp, #32]
 8006328:	781a      	ldrb	r2, [r3, #0]
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 800632a:	2a54      	cmp	r2, #84	; 0x54
 800632c:	d001      	beq.n	8006332 <PS_SCOPE_Set+0xc2>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 800632e:	2a46      	cmp	r2, #70	; 0x46
 8006330:	d121      	bne.n	8006376 <PS_SCOPE_Set+0x106>
 8006332:	785a      	ldrb	r2, [r3, #1]
 8006334:	2a54      	cmp	r2, #84	; 0x54
 8006336:	d001      	beq.n	800633c <PS_SCOPE_Set+0xcc>
 8006338:	2a46      	cmp	r2, #70	; 0x46
 800633a:	d11c      	bne.n	8006376 <PS_SCOPE_Set+0x106>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 800633c:	789a      	ldrb	r2, [r3, #2]
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 800633e:	2a54      	cmp	r2, #84	; 0x54
 8006340:	d001      	beq.n	8006346 <PS_SCOPE_Set+0xd6>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 8006342:	2a46      	cmp	r2, #70	; 0x46
 8006344:	d117      	bne.n	8006376 <PS_SCOPE_Set+0x106>
 8006346:	78db      	ldrb	r3, [r3, #3]
 8006348:	2b54      	cmp	r3, #84	; 0x54
 800634a:	d001      	beq.n	8006350 <PS_SCOPE_Set+0xe0>
 800634c:	2b46      	cmp	r3, #70	; 0x46
 800634e:	d112      	bne.n	8006376 <PS_SCOPE_Set+0x106>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'D'))
 8006350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006352:	781b      	ldrb	r3, [r3, #0]
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 8006354:	2b52      	cmp	r3, #82	; 0x52
 8006356:	d001      	beq.n	800635c <PS_SCOPE_Set+0xec>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'D'))
 8006358:	2b46      	cmp	r3, #70	; 0x46
 800635a:	d10c      	bne.n	8006376 <PS_SCOPE_Set+0x106>
 800635c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800635e:	781c      	ldrb	r4, [r3, #0]
 8006360:	3c41      	subs	r4, #65	; 0x41
 8006362:	b2e3      	uxtb	r3, r4
 8006364:	2b0d      	cmp	r3, #13
 8006366:	d806      	bhi.n	8006376 <PS_SCOPE_Set+0x106>
 8006368:	f242 0409 	movw	r4, #8201	; 0x2009
 800636c:	40dc      	lsrs	r4, r3
 800636e:	43e4      	mvns	r4, r4
 8006370:	f014 0401 	ands.w	r4, r4, #1
 8006374:	d002      	beq.n	800637c <PS_SCOPE_Set+0x10c>
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006376:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800637a:	e78a      	b.n	8006292 <PS_SCOPE_Set+0x22>
            daq_enable(&daq, 0);
 800637c:	4621      	mov	r1, r4
 800637e:	4836      	ldr	r0, [pc, #216]	; (8006458 <PS_SCOPE_Set+0x1e8>)
 8006380:	f7ff f898 	bl	80054b4 <daq_enable>
            daq_reset(&daq);
 8006384:	4834      	ldr	r0, [pc, #208]	; (8006458 <PS_SCOPE_Set+0x1e8>)
 8006386:	f7ff f855 	bl	8005434 <daq_reset>
            daq.dis_hold = 1;
 800638a:	2301      	movs	r3, #1
        daq_mem_set(&daq, 3); // safety guard
 800638c:	2103      	movs	r1, #3
 800638e:	4832      	ldr	r0, [pc, #200]	; (8006458 <PS_SCOPE_Set+0x1e8>)
            daq.dis_hold = 1;
 8006390:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
        daq_mem_set(&daq, 3); // safety guard
 8006394:	f7ff fad8 	bl	8005948 <daq_mem_set>
        int ret2 = daq_bit_set(&daq, (int)p1);
 8006398:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800639c:	482e      	ldr	r0, [pc, #184]	; (8006458 <PS_SCOPE_Set+0x1e8>)
 800639e:	f7ff fb4b 	bl	8005a38 <daq_bit_set>
 80063a2:	4607      	mov	r7, r0
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 80063a4:	9808      	ldr	r0, [sp, #32]
 80063a6:	7883      	ldrb	r3, [r0, #2]
 80063a8:	7842      	ldrb	r2, [r0, #1]
 80063aa:	7801      	ldrb	r1, [r0, #0]
 80063ac:	78c0      	ldrb	r0, [r0, #3]
 80063ae:	f1a3 0e54 	sub.w	lr, r3, #84	; 0x54
 80063b2:	f1a0 0c54 	sub.w	ip, r0, #84	; 0x54
 80063b6:	f1dc 0000 	rsbs	r0, ip, #0
 80063ba:	eb40 000c 	adc.w	r0, r0, ip
 80063be:	f1a2 0854 	sub.w	r8, r2, #84	; 0x54
 80063c2:	f1de 0300 	rsbs	r3, lr, #0
 80063c6:	eb43 030e 	adc.w	r3, r3, lr
 80063ca:	f1a1 0954 	sub.w	r9, r1, #84	; 0x54
 80063ce:	f1d8 0200 	rsbs	r2, r8, #0
 80063d2:	eb42 0208 	adc.w	r2, r2, r8
 80063d6:	f1d9 0100 	rsbs	r1, r9, #0
 80063da:	eb41 0109 	adc.w	r1, r1, r9
 80063de:	9000      	str	r0, [sp, #0]
 80063e0:	481d      	ldr	r0, [pc, #116]	; (8006458 <PS_SCOPE_Set+0x1e8>)
 80063e2:	f7ff fb91 	bl	8005b08 <daq_ch_set>
 80063e6:	4680      	mov	r8, r0
        int ret3 = daq_fs_set(&daq, (int)p3);
 80063e8:	9804      	ldr	r0, [sp, #16]
 80063ea:	f7fa fc61 	bl	8000cb0 <__aeabi_i2f>
 80063ee:	4601      	mov	r1, r0
 80063f0:	4819      	ldr	r0, [pc, #100]	; (8006458 <PS_SCOPE_Set+0x1e8>)
 80063f2:	f7ff fb47 	bl	8005a84 <daq_fs_set>
        int ret1 = daq_mem_set(&daq, (int)p2);
 80063f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        int ret3 = daq_fs_set(&daq, (int)p3);
 80063fa:	4681      	mov	r9, r0
        int ret1 = daq_mem_set(&daq, (int)p2);
 80063fc:	4816      	ldr	r0, [pc, #88]	; (8006458 <PS_SCOPE_Set+0x1e8>)
 80063fe:	f7ff faa3 	bl	8005948 <daq_mem_set>
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 8006402:	9b09      	ldr	r3, [sp, #36]	; 0x24
        int ret1 = daq_mem_set(&daq, (int)p2);
 8006404:	4682      	mov	sl, r0
                                (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : DISABLED)), (int)p9);
 8006406:	980a      	ldr	r0, [sp, #40]	; 0x28
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 8006408:	781b      	ldrb	r3, [r3, #0]
                                (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : DISABLED)), (int)p9);
 800640a:	7800      	ldrb	r0, [r0, #0]
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 800640c:	3b52      	subs	r3, #82	; 0x52
 800640e:	bf18      	it	ne
 8006410:	2301      	movne	r3, #1
 8006412:	2841      	cmp	r0, #65	; 0x41
 8006414:	9905      	ldr	r1, [sp, #20]
 8006416:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800641a:	d003      	beq.n	8006424 <PS_SCOPE_Set+0x1b4>
                                (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : DISABLED)), (int)p9);
 800641c:	284e      	cmp	r0, #78	; 0x4e
 800641e:	bf14      	ite	ne
 8006420:	2402      	movne	r4, #2
 8006422:	2401      	moveq	r4, #1
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 8006424:	9807      	ldr	r0, [sp, #28]
 8006426:	e9cd 4000 	strd	r4, r0, [sp]
 800642a:	480b      	ldr	r0, [pc, #44]	; (8006458 <PS_SCOPE_Set+0x1e8>)
 800642c:	f7ff f8b0 	bl	8005590 <daq_trig_set>
        if (ret1 + ret2 + ret3 + ret4 + ret5 == 0)
 8006430:	eb07 030a 	add.w	r3, r7, sl
 8006434:	444b      	add	r3, r9
 8006436:	4443      	add	r3, r8
 8006438:	1818      	adds	r0, r3, r0
 800643a:	d19c      	bne.n	8006376 <PS_SCOPE_Set+0x106>
                daq.dis_hold = 0;
 800643c:	f886 0049 	strb.w	r0, [r6, #73]	; 0x49
                daq_enable(&daq, 1);
 8006440:	2101      	movs	r1, #1
 8006442:	4805      	ldr	r0, [pc, #20]	; (8006458 <PS_SCOPE_Set+0x1e8>)
 8006444:	f7ff f836 	bl	80054b4 <daq_enable>
            return SCPI_RES_OK;
 8006448:	2001      	movs	r0, #1
    }
}
 800644a:	b00e      	add	sp, #56	; 0x38
 800644c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006450:	f46f 7195 	mvn.w	r1, #298	; 0x12a
 8006454:	e71e      	b.n	8006294 <PS_SCOPE_Set+0x24>
 8006456:	bf00      	nop
 8006458:	20001610 	.word	0x20001610

0800645c <PS_SCOPE_SetQ>:

scpi_result_t PS_SCOPE_SetQ(scpi_t * context)
{
 800645c:	b570      	push	{r4, r5, r6, lr}
    if (daq.mode == SCOPE)
 800645e:	4c36      	ldr	r4, [pc, #216]	; (8006538 <PS_SCOPE_SetQ+0xdc>)
{
 8006460:	b0ae      	sub	sp, #184	; 0xb8
    if (daq.mode == SCOPE)
 8006462:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
{
 8006466:	4606      	mov	r6, r0
    if (daq.mode == SCOPE)
 8006468:	2b00      	cmp	r3, #0
 800646a:	d15e      	bne.n	800652a <PS_SCOPE_SetQ+0xce>
        char freq_s[30];
        char chans_en[5];
        char edge_s[2];
        char mode_s[2];

        sprint_fast(freq_s, "%s", daq.set.fs, 3);
 800646c:	ad0d      	add	r5, sp, #52	; 0x34
 800646e:	2303      	movs	r3, #3
 8006470:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006472:	4932      	ldr	r1, [pc, #200]	; (800653c <PS_SCOPE_SetQ+0xe0>)
 8006474:	4628      	mov	r0, r5
 8006476:	f000 fd17 	bl	8006ea8 <sprint_fast>
        chans_en[0] = daq.set.ch1_en ? 'T' : 'F';
 800647a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800647e:	2b00      	cmp	r3, #0
 8006480:	bf14      	ite	ne
 8006482:	2354      	movne	r3, #84	; 0x54
 8006484:	2346      	moveq	r3, #70	; 0x46
 8006486:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        chans_en[1] = daq.set.ch2_en ? 'T' : 'F';
 800648a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800648e:	2b00      	cmp	r3, #0
 8006490:	bf14      	ite	ne
 8006492:	2354      	movne	r3, #84	; 0x54
 8006494:	2346      	moveq	r3, #70	; 0x46
 8006496:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        chans_en[2] = daq.set.ch3_en ? 'T' : 'F';
 800649a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bf14      	ite	ne
 80064a2:	2354      	movne	r3, #84	; 0x54
 80064a4:	2346      	moveq	r3, #70	; 0x46
 80064a6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
        chans_en[3] = daq.set.ch4_en ? 'T' : 'F';
 80064aa:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bf14      	ite	ne
 80064b2:	2354      	movne	r3, #84	; 0x54
 80064b4:	2346      	moveq	r3, #70	; 0x46
 80064b6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
        edge_s[0] = daq.trig.set.edge == RISING ? 'R' : 'F';
 80064ba:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bf0c      	ite	eq
 80064c2:	2352      	moveq	r3, #82	; 0x52
 80064c4:	2346      	movne	r3, #70	; 0x46
 80064c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' : 'D');
 80064ca:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80064ce:	b353      	cbz	r3, 8006526 <PS_SCOPE_SetQ+0xca>
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	bf0c      	ite	eq
 80064d4:	234e      	moveq	r3, #78	; 0x4e
 80064d6:	2344      	movne	r3, #68	; 0x44
 80064d8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        chans_en[4] = '\0';
 80064dc:	2300      	movs	r3, #0
        edge_s[1] = '\0';
        mode_s[1] = '\0';

        int len = sprintf(buff, "%d,%d,%s,%s,%d,%d,%s,%s,%d", daq.set.bits, daq.set.mem, freq_s, chans_en,
 80064de:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        chans_en[4] = '\0';
 80064e0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        int len = sprintf(buff, "%d,%d,%s,%s,%d,%d,%s,%s,%d", daq.set.bits, daq.set.mem, freq_s, chans_en,
 80064e4:	9106      	str	r1, [sp, #24]
 80064e6:	a90a      	add	r1, sp, #40	; 0x28
 80064e8:	9105      	str	r1, [sp, #20]
 80064ea:	a909      	add	r1, sp, #36	; 0x24
 80064ec:	9104      	str	r1, [sp, #16]
 80064ee:	f8d4 105a 	ldr.w	r1, [r4, #90]	; 0x5a
        edge_s[1] = '\0';
 80064f2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        int len = sprintf(buff, "%d,%d,%s,%s,%d,%d,%s,%s,%d", daq.set.bits, daq.set.mem, freq_s, chans_en,
 80064f6:	9103      	str	r1, [sp, #12]
 80064f8:	f8d4 1052 	ldr.w	r1, [r4, #82]	; 0x52
        mode_s[1] = '\0';
 80064fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        int len = sprintf(buff, "%d,%d,%s,%s,%d,%d,%s,%s,%d", daq.set.bits, daq.set.mem, freq_s, chans_en,
 8006500:	9102      	str	r1, [sp, #8]
 8006502:	a90b      	add	r1, sp, #44	; 0x2c
 8006504:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8006506:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800650a:	e9cd 5100 	strd	r5, r1, [sp]
 800650e:	a815      	add	r0, sp, #84	; 0x54
 8006510:	490b      	ldr	r1, [pc, #44]	; (8006540 <PS_SCOPE_SetQ+0xe4>)
 8006512:	f002 fbb1 	bl	8008c78 <siprintf>
                          daq.trig.set.ch, daq.trig.set.val_percent, edge_s, mode_s, daq.trig.set.pretrigger);

        SCPI_ResultCharacters(context, buff, len);
 8006516:	a915      	add	r1, sp, #84	; 0x54
 8006518:	4602      	mov	r2, r0
 800651a:	4630      	mov	r0, r6
 800651c:	f001 fc6c 	bl	8007df8 <SCPI_ResultCharacters>

        return SCPI_RES_OK;
 8006520:	2001      	movs	r0, #1
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }
}
 8006522:	b02e      	add	sp, #184	; 0xb8
 8006524:	bd70      	pop	{r4, r5, r6, pc}
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' : 'D');
 8006526:	2341      	movs	r3, #65	; 0x41
 8006528:	e7d6      	b.n	80064d8 <PS_SCOPE_SetQ+0x7c>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800652a:	f46f 7195 	mvn.w	r1, #298	; 0x12a
 800652e:	f000 fdfd 	bl	800712c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006532:	f04f 30ff 	mov.w	r0, #4294967295
 8006536:	e7f4      	b.n	8006522 <PS_SCOPE_SetQ+0xc6>
 8006538:	20001610 	.word	0x20001610
 800653c:	0800ab91 	.word	0x0800ab91
 8006540:	0800abcc 	.word	0x0800abcc

08006544 <PS_LA_ReadQ>:

/************************* [LA Actions] *************************/

scpi_result_t PS_LA_ReadQ(scpi_t * context)
{
 8006544:	b538      	push	{r3, r4, r5, lr}
    if (daq.mode == LA)
 8006546:	4b28      	ldr	r3, [pc, #160]	; (80065e8 <PS_LA_ReadQ+0xa4>)
{
 8006548:	4605      	mov	r5, r0
    if (daq.mode == LA)
 800654a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800654e:	461c      	mov	r4, r3
 8006550:	2a02      	cmp	r2, #2
 8006552:	d142      	bne.n	80065da <PS_LA_ReadQ+0x96>
    {
        if (daq.trig.ready == 0)
 8006554:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006558:	b923      	cbnz	r3, 8006564 <PS_LA_ReadQ+0x20>
        {
            SCPI_ResultText(context, "0");
 800655a:	4924      	ldr	r1, [pc, #144]	; (80065ec <PS_LA_ReadQ+0xa8>)
 800655c:	f001 fc62 	bl	8007e24 <SCPI_ResultText>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }


    return SCPI_RES_OK;
 8006560:	2001      	movs	r0, #1
}
 8006562:	bd38      	pop	{r3, r4, r5, pc}
        if (daq.trig.set.mode == DISABLED)
 8006564:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006568:	2b02      	cmp	r3, #2
 800656a:	d111      	bne.n	8006590 <PS_LA_ReadQ+0x4c>
            daq_enable(&daq, 0);
 800656c:	2100      	movs	r1, #0
 800656e:	4620      	mov	r0, r4
 8006570:	f7fe ffa0 	bl	80054b4 <daq_enable>
 8006574:	4b1e      	ldr	r3, [pc, #120]	; (80065f0 <PS_LA_ReadQ+0xac>)
            daq.trig.pos_frst = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_LA) - daq.buff1.len;
 8006576:	88e1      	ldrh	r1, [r4, #6]
 8006578:	6858      	ldr	r0, [r3, #4]
 800657a:	b280      	uxth	r0, r0
 800657c:	1a08      	subs	r0, r1, r0
 800657e:	f000 fc4d 	bl	8006e1c <get_last_circ_idx>
 8006582:	88e3      	ldrh	r3, [r4, #6]
            if (daq.trig.pos_frst < 0)
 8006584:	1ac3      	subs	r3, r0, r3
            daq.trig.pos_frst = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_LA) - daq.buff1.len;
 8006586:	bf54      	ite	pl
 8006588:	f8c4 3091 	strpl.w	r3, [r4, #145]	; 0x91
                daq.trig.pos_frst += daq.buff1.len;
 800658c:	f8c4 0091 	strmi.w	r0, [r4, #145]	; 0x91
        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 8006590:	2200      	movs	r2, #0
 8006592:	f8d4 3091 	ldr.w	r3, [r4, #145]	; 0x91
 8006596:	88e1      	ldrh	r1, [r4, #6]
 8006598:	4291      	cmp	r1, r2
 800659a:	dc14      	bgt.n	80065c6 <PS_LA_ReadQ+0x82>
        daq.trig.pretrig_cntr = 0;
 800659c:	2300      	movs	r3, #0
        daq_enable(&daq, 1);
 800659e:	2101      	movs	r1, #1
 80065a0:	4811      	ldr	r0, [pc, #68]	; (80065e8 <PS_LA_ReadQ+0xa4>)
        daq.trig.pretrig_cntr = 0;
 80065a2:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80065a6:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80065aa:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 80065ae:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
        daq.trig.ready = 0;
 80065b2:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
        daq_enable(&daq, 1);
 80065b6:	f7fe ff7d 	bl	80054b4 <daq_enable>
        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len); // idx??
 80065ba:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80065bc:	6a21      	ldr	r1, [r4, #32]
 80065be:	4628      	mov	r0, r5
 80065c0:	f001 fd08 	bl	8007fd4 <SCPI_ResultArbitraryBlock>
 80065c4:	e7cc      	b.n	8006560 <PS_LA_ReadQ+0x1c>
                i = 0;
 80065c6:	4299      	cmp	r1, r3
 80065c8:	bfd8      	it	le
 80065ca:	2300      	movle	r3, #0
            ((uint8_t*)daq.buff_out.data)[k] = (uint8_t)(((uint8_t*)daq.buff1.data)[i]);
 80065cc:	6821      	ldr	r1, [r4, #0]
 80065ce:	5cc8      	ldrb	r0, [r1, r3]
 80065d0:	6a21      	ldr	r1, [r4, #32]
        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 80065d2:	3301      	adds	r3, #1
            ((uint8_t*)daq.buff_out.data)[k] = (uint8_t)(((uint8_t*)daq.buff1.data)[i]);
 80065d4:	5488      	strb	r0, [r1, r2]
        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 80065d6:	3201      	adds	r2, #1
 80065d8:	e7dd      	b.n	8006596 <PS_LA_ReadQ+0x52>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 80065da:	f46f 7195 	mvn.w	r1, #298	; 0x12a
 80065de:	f000 fda5 	bl	800712c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 80065e2:	f04f 30ff 	mov.w	r0, #4294967295
 80065e6:	e7bc      	b.n	8006562 <PS_LA_ReadQ+0x1e>
 80065e8:	20001610 	.word	0x20001610
 80065ec:	0800ad93 	.word	0x0800ad93
 80065f0:	4002006c 	.word	0x4002006c

080065f4 <PS_LA_Set>:

scpi_result_t PS_LA_Set(scpi_t * context)
{
 80065f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (daq.mode == LA)
 80065f8:	4e70      	ldr	r6, [pc, #448]	; (80067bc <PS_LA_Set+0x1c8>)
{
 80065fa:	b08c      	sub	sp, #48	; 0x30
    if (daq.mode == LA)
 80065fc:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
{
 8006600:	4605      	mov	r5, r0
    if (daq.mode == LA)
 8006602:	2b02      	cmp	r3, #2
 8006604:	f040 80d6 	bne.w	80067b4 <PS_LA_Set+0x1c0>
        const char* p4;
        const char* p7;
        const char* p8;
        size_t p4l, p7l, p8l;

        if (!SCPI_ParamUInt32(context, &p2, TRUE) ||
 8006608:	2201      	movs	r2, #1
 800660a:	a902      	add	r1, sp, #8
 800660c:	f001 fdcd 	bl	80081aa <SCPI_ParamUInt32>
 8006610:	b938      	cbnz	r0, 8006622 <PS_LA_Set+0x2e>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
            !SCPI_ParamUInt32(context, &p9, TRUE))
        {
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8006612:	f06f 016c 	mvn.w	r1, #108	; 0x6c
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'D'))
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006616:	4628      	mov	r0, r5
            return SCPI_RES_ERR;
        }
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006618:	f000 fd88 	bl	800712c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	e0c5      	b.n	80067ae <PS_LA_Set+0x1ba>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 8006622:	2201      	movs	r2, #1
 8006624:	a903      	add	r1, sp, #12
 8006626:	4628      	mov	r0, r5
 8006628:	f001 fdbf 	bl	80081aa <SCPI_ParamUInt32>
        if (!SCPI_ParamUInt32(context, &p2, TRUE) ||
 800662c:	2800      	cmp	r0, #0
 800662e:	d0f0      	beq.n	8006612 <PS_LA_Set+0x1e>
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 8006630:	2301      	movs	r3, #1
 8006632:	aa09      	add	r2, sp, #36	; 0x24
 8006634:	a906      	add	r1, sp, #24
 8006636:	4628      	mov	r0, r5
 8006638:	f001 fdba 	bl	80081b0 <SCPI_ParamCharacters>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800663c:	2800      	cmp	r0, #0
 800663e:	d0e8      	beq.n	8006612 <PS_LA_Set+0x1e>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 8006640:	2201      	movs	r2, #1
 8006642:	a904      	add	r1, sp, #16
 8006644:	4628      	mov	r0, r5
 8006646:	f001 fdb0 	bl	80081aa <SCPI_ParamUInt32>
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 800664a:	2800      	cmp	r0, #0
 800664c:	d0e1      	beq.n	8006612 <PS_LA_Set+0x1e>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800664e:	2301      	movs	r3, #1
 8006650:	aa0a      	add	r2, sp, #40	; 0x28
 8006652:	a907      	add	r1, sp, #28
 8006654:	4628      	mov	r0, r5
 8006656:	f001 fdab 	bl	80081b0 <SCPI_ParamCharacters>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800665a:	2800      	cmp	r0, #0
 800665c:	d0d9      	beq.n	8006612 <PS_LA_Set+0x1e>
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
 800665e:	2301      	movs	r3, #1
 8006660:	aa0b      	add	r2, sp, #44	; 0x2c
 8006662:	a908      	add	r1, sp, #32
 8006664:	4628      	mov	r0, r5
 8006666:	f001 fda3 	bl	80081b0 <SCPI_ParamCharacters>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800666a:	2800      	cmp	r0, #0
 800666c:	d0d1      	beq.n	8006612 <PS_LA_Set+0x1e>
            !SCPI_ParamUInt32(context, &p9, TRUE))
 800666e:	2201      	movs	r2, #1
 8006670:	a905      	add	r1, sp, #20
 8006672:	4628      	mov	r0, r5
 8006674:	f001 fd99 	bl	80081aa <SCPI_ParamUInt32>
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
 8006678:	2800      	cmp	r0, #0
 800667a:	d0ca      	beq.n	8006612 <PS_LA_Set+0x1e>
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 800667c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667e:	2b04      	cmp	r3, #4
 8006680:	d12d      	bne.n	80066de <PS_LA_Set+0xea>
 8006682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006684:	2b01      	cmp	r3, #1
 8006686:	d12a      	bne.n	80066de <PS_LA_Set+0xea>
 8006688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800668a:	2b01      	cmp	r3, #1
 800668c:	d127      	bne.n	80066de <PS_LA_Set+0xea>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 800668e:	9b06      	ldr	r3, [sp, #24]
 8006690:	781a      	ldrb	r2, [r3, #0]
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 8006692:	2a54      	cmp	r2, #84	; 0x54
 8006694:	d001      	beq.n	800669a <PS_LA_Set+0xa6>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 8006696:	2a46      	cmp	r2, #70	; 0x46
 8006698:	d121      	bne.n	80066de <PS_LA_Set+0xea>
 800669a:	785a      	ldrb	r2, [r3, #1]
 800669c:	2a54      	cmp	r2, #84	; 0x54
 800669e:	d001      	beq.n	80066a4 <PS_LA_Set+0xb0>
 80066a0:	2a46      	cmp	r2, #70	; 0x46
 80066a2:	d11c      	bne.n	80066de <PS_LA_Set+0xea>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 80066a4:	789a      	ldrb	r2, [r3, #2]
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 80066a6:	2a54      	cmp	r2, #84	; 0x54
 80066a8:	d001      	beq.n	80066ae <PS_LA_Set+0xba>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 80066aa:	2a46      	cmp	r2, #70	; 0x46
 80066ac:	d117      	bne.n	80066de <PS_LA_Set+0xea>
 80066ae:	78db      	ldrb	r3, [r3, #3]
 80066b0:	2b54      	cmp	r3, #84	; 0x54
 80066b2:	d001      	beq.n	80066b8 <PS_LA_Set+0xc4>
 80066b4:	2b46      	cmp	r3, #70	; 0x46
 80066b6:	d112      	bne.n	80066de <PS_LA_Set+0xea>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'D'))
 80066b8:	9b07      	ldr	r3, [sp, #28]
 80066ba:	781b      	ldrb	r3, [r3, #0]
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 80066bc:	2b52      	cmp	r3, #82	; 0x52
 80066be:	d001      	beq.n	80066c4 <PS_LA_Set+0xd0>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'D'))
 80066c0:	2b46      	cmp	r3, #70	; 0x46
 80066c2:	d10c      	bne.n	80066de <PS_LA_Set+0xea>
 80066c4:	9b08      	ldr	r3, [sp, #32]
 80066c6:	781c      	ldrb	r4, [r3, #0]
 80066c8:	3c41      	subs	r4, #65	; 0x41
 80066ca:	b2e3      	uxtb	r3, r4
 80066cc:	2b0d      	cmp	r3, #13
 80066ce:	d806      	bhi.n	80066de <PS_LA_Set+0xea>
 80066d0:	f242 0409 	movw	r4, #8201	; 0x2009
 80066d4:	40dc      	lsrs	r4, r3
 80066d6:	43e4      	mvns	r4, r4
 80066d8:	f014 0401 	ands.w	r4, r4, #1
 80066dc:	d002      	beq.n	80066e4 <PS_LA_Set+0xf0>
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 80066de:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 80066e2:	e798      	b.n	8006616 <PS_LA_Set+0x22>
            daq.dis_hold = 1;
 80066e4:	2701      	movs	r7, #1
            daq_enable(&daq, 0);
 80066e6:	4621      	mov	r1, r4
 80066e8:	4834      	ldr	r0, [pc, #208]	; (80067bc <PS_LA_Set+0x1c8>)
 80066ea:	f7fe fee3 	bl	80054b4 <daq_enable>
            daq_reset(&daq);
 80066ee:	4833      	ldr	r0, [pc, #204]	; (80067bc <PS_LA_Set+0x1c8>)
 80066f0:	f7fe fea0 	bl	8005434 <daq_reset>
        daq_mem_set(&daq, 3); // safety guard
 80066f4:	2103      	movs	r1, #3
 80066f6:	4831      	ldr	r0, [pc, #196]	; (80067bc <PS_LA_Set+0x1c8>)
            daq.dis_hold = 1;
 80066f8:	f886 7049 	strb.w	r7, [r6, #73]	; 0x49
        daq_mem_set(&daq, 3); // safety guard
 80066fc:	f7ff f924 	bl	8005948 <daq_mem_set>
        int ret2 = daq_bit_set(&daq, B1);
 8006700:	4639      	mov	r1, r7
 8006702:	482e      	ldr	r0, [pc, #184]	; (80067bc <PS_LA_Set+0x1c8>)
 8006704:	f7ff f998 	bl	8005a38 <daq_bit_set>
 8006708:	4607      	mov	r7, r0
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800670a:	9806      	ldr	r0, [sp, #24]
 800670c:	7883      	ldrb	r3, [r0, #2]
 800670e:	7842      	ldrb	r2, [r0, #1]
 8006710:	7801      	ldrb	r1, [r0, #0]
 8006712:	78c0      	ldrb	r0, [r0, #3]
 8006714:	f1a3 0e54 	sub.w	lr, r3, #84	; 0x54
 8006718:	f1a0 0c54 	sub.w	ip, r0, #84	; 0x54
 800671c:	f1dc 0000 	rsbs	r0, ip, #0
 8006720:	eb40 000c 	adc.w	r0, r0, ip
 8006724:	f1a2 0854 	sub.w	r8, r2, #84	; 0x54
 8006728:	f1de 0300 	rsbs	r3, lr, #0
 800672c:	eb43 030e 	adc.w	r3, r3, lr
 8006730:	f1a1 0954 	sub.w	r9, r1, #84	; 0x54
 8006734:	f1d8 0200 	rsbs	r2, r8, #0
 8006738:	eb42 0208 	adc.w	r2, r2, r8
 800673c:	f1d9 0100 	rsbs	r1, r9, #0
 8006740:	eb41 0109 	adc.w	r1, r1, r9
 8006744:	9000      	str	r0, [sp, #0]
 8006746:	481d      	ldr	r0, [pc, #116]	; (80067bc <PS_LA_Set+0x1c8>)
 8006748:	f7ff f9de 	bl	8005b08 <daq_ch_set>
 800674c:	4680      	mov	r8, r0
        int ret3 = daq_fs_set(&daq, (int)p3);
 800674e:	9803      	ldr	r0, [sp, #12]
 8006750:	f7fa faae 	bl	8000cb0 <__aeabi_i2f>
 8006754:	4601      	mov	r1, r0
 8006756:	4819      	ldr	r0, [pc, #100]	; (80067bc <PS_LA_Set+0x1c8>)
 8006758:	f7ff f994 	bl	8005a84 <daq_fs_set>
        int ret1 = daq_mem_set(&daq, (int)p2);
 800675c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
        int ret3 = daq_fs_set(&daq, (int)p3);
 8006760:	4681      	mov	r9, r0
        int ret1 = daq_mem_set(&daq, (int)p2);
 8006762:	4816      	ldr	r0, [pc, #88]	; (80067bc <PS_LA_Set+0x1c8>)
 8006764:	f7ff f8f0 	bl	8005948 <daq_mem_set>
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 8006768:	9b07      	ldr	r3, [sp, #28]
                                (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : DISABLED)), (int)p9);
 800676a:	9a08      	ldr	r2, [sp, #32]
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800676c:	781b      	ldrb	r3, [r3, #0]
                                (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : DISABLED)), (int)p9);
 800676e:	7812      	ldrb	r2, [r2, #0]
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 8006770:	3b52      	subs	r3, #82	; 0x52
 8006772:	bf18      	it	ne
 8006774:	2301      	movne	r3, #1
 8006776:	2a41      	cmp	r2, #65	; 0x41
        int ret1 = daq_mem_set(&daq, (int)p2);
 8006778:	4682      	mov	sl, r0
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800677a:	9904      	ldr	r1, [sp, #16]
 800677c:	d003      	beq.n	8006786 <PS_LA_Set+0x192>
                                (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : DISABLED)), (int)p9);
 800677e:	2a4e      	cmp	r2, #78	; 0x4e
 8006780:	bf14      	ite	ne
 8006782:	2402      	movne	r4, #2
 8006784:	2401      	moveq	r4, #1
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 8006786:	9a05      	ldr	r2, [sp, #20]
 8006788:	480c      	ldr	r0, [pc, #48]	; (80067bc <PS_LA_Set+0x1c8>)
 800678a:	e9cd 4200 	strd	r4, r2, [sp]
 800678e:	2200      	movs	r2, #0
 8006790:	f7fe fefe 	bl	8005590 <daq_trig_set>
        if (ret1 + ret2 + ret3 + ret4 + ret5 == 0)
 8006794:	eb07 030a 	add.w	r3, r7, sl
 8006798:	444b      	add	r3, r9
 800679a:	4443      	add	r3, r8
 800679c:	1818      	adds	r0, r3, r0
 800679e:	d19e      	bne.n	80066de <PS_LA_Set+0xea>
                daq.dis_hold = 0;
 80067a0:	f886 0049 	strb.w	r0, [r6, #73]	; 0x49
                daq_enable(&daq, 1);
 80067a4:	2101      	movs	r1, #1
 80067a6:	4805      	ldr	r0, [pc, #20]	; (80067bc <PS_LA_Set+0x1c8>)
 80067a8:	f7fe fe84 	bl	80054b4 <daq_enable>
            return SCPI_RES_OK;
 80067ac:	2001      	movs	r0, #1
    }
}
 80067ae:	b00c      	add	sp, #48	; 0x30
 80067b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 80067b4:	f46f 7195 	mvn.w	r1, #298	; 0x12a
 80067b8:	e72e      	b.n	8006618 <PS_LA_Set+0x24>
 80067ba:	bf00      	nop
 80067bc:	20001610 	.word	0x20001610

080067c0 <PS_LA_SetQ>:

scpi_result_t PS_LA_SetQ(scpi_t * context)
{
 80067c0:	b530      	push	{r4, r5, lr}
    if (daq.mode == LA)
 80067c2:	4c33      	ldr	r4, [pc, #204]	; (8006890 <PS_LA_SetQ+0xd0>)
{
 80067c4:	b0ad      	sub	sp, #180	; 0xb4
    if (daq.mode == LA)
 80067c6:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
{
 80067ca:	4605      	mov	r5, r0
    if (daq.mode == LA)
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d158      	bne.n	8006882 <PS_LA_SetQ+0xc2>
        char freq_s[30];
        char chans_en[5];
        char edge_s[2];
        char mode_s[2];

        sprint_fast(freq_s, "%s", daq.set.fs, 3);
 80067d0:	2303      	movs	r3, #3
 80067d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80067d4:	492f      	ldr	r1, [pc, #188]	; (8006894 <PS_LA_SetQ+0xd4>)
 80067d6:	a80b      	add	r0, sp, #44	; 0x2c
 80067d8:	f000 fb66 	bl	8006ea8 <sprint_fast>
        chans_en[0] = daq.set.ch1_en ? 'T' : 'F';
 80067dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bf14      	ite	ne
 80067e4:	2354      	movne	r3, #84	; 0x54
 80067e6:	2346      	moveq	r3, #70	; 0x46
 80067e8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        chans_en[1] = daq.set.ch2_en ? 'T' : 'F';
 80067ec:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf14      	ite	ne
 80067f4:	2354      	movne	r3, #84	; 0x54
 80067f6:	2346      	moveq	r3, #70	; 0x46
 80067f8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        chans_en[2] = daq.set.ch3_en ? 'T' : 'F';
 80067fc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006800:	2b00      	cmp	r3, #0
 8006802:	bf14      	ite	ne
 8006804:	2354      	movne	r3, #84	; 0x54
 8006806:	2346      	moveq	r3, #70	; 0x46
 8006808:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        chans_en[3] = daq.set.ch4_en ? 'T' : 'F';
 800680c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8006810:	2b00      	cmp	r3, #0
 8006812:	bf14      	ite	ne
 8006814:	2354      	movne	r3, #84	; 0x54
 8006816:	2346      	moveq	r3, #70	; 0x46
 8006818:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        edge_s[0] = daq.trig.set.edge == RISING ? 'R' : 'F';
 800681c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006820:	2b00      	cmp	r3, #0
 8006822:	bf0c      	ite	eq
 8006824:	2352      	moveq	r3, #82	; 0x52
 8006826:	2346      	movne	r3, #70	; 0x46
 8006828:	f88d 301c 	strb.w	r3, [sp, #28]
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' : 'D');
 800682c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006830:	b32b      	cbz	r3, 800687e <PS_LA_SetQ+0xbe>
 8006832:	2b01      	cmp	r3, #1
 8006834:	bf0c      	ite	eq
 8006836:	234e      	moveq	r3, #78	; 0x4e
 8006838:	2344      	movne	r3, #68	; 0x44
 800683a:	f88d 3020 	strb.w	r3, [sp, #32]
        chans_en[4] = '\0';
 800683e:	2300      	movs	r3, #0
 8006840:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        edge_s[1] = '\0';
 8006844:	f88d 301d 	strb.w	r3, [sp, #29]
        mode_s[1] = '\0';
 8006848:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21

        int len = sprintf(buff, "%d,%s,%s,%d,%s,%s,%d", daq.set.mem, freq_s, chans_en,
 800684c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800684e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	ab08      	add	r3, sp, #32
 8006854:	9303      	str	r3, [sp, #12]
 8006856:	ab07      	add	r3, sp, #28
 8006858:	9302      	str	r3, [sp, #8]
 800685a:	f8d4 3052 	ldr.w	r3, [r4, #82]	; 0x52
 800685e:	490e      	ldr	r1, [pc, #56]	; (8006898 <PS_LA_SetQ+0xd8>)
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	ab09      	add	r3, sp, #36	; 0x24
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	a813      	add	r0, sp, #76	; 0x4c
 8006868:	ab0b      	add	r3, sp, #44	; 0x2c
 800686a:	f002 fa05 	bl	8008c78 <siprintf>
                          daq.trig.set.ch, edge_s, mode_s, daq.trig.set.pretrigger);

        SCPI_ResultCharacters(context, buff, len);
 800686e:	a913      	add	r1, sp, #76	; 0x4c
 8006870:	4602      	mov	r2, r0
 8006872:	4628      	mov	r0, r5
 8006874:	f001 fac0 	bl	8007df8 <SCPI_ResultCharacters>

        return SCPI_RES_OK;
 8006878:	2001      	movs	r0, #1
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }
}
 800687a:	b02d      	add	sp, #180	; 0xb4
 800687c:	bd30      	pop	{r4, r5, pc}
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' : 'D');
 800687e:	2341      	movs	r3, #65	; 0x41
 8006880:	e7db      	b.n	800683a <PS_LA_SetQ+0x7a>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006882:	f46f 7195 	mvn.w	r1, #298	; 0x12a
 8006886:	f000 fc51 	bl	800712c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800688a:	f04f 30ff 	mov.w	r0, #4294967295
 800688e:	e7f4      	b.n	800687a <PS_LA_SetQ+0xba>
 8006890:	20001610 	.word	0x20001610
 8006894:	0800ab91 	.word	0x0800ab91
 8006898:	0800ab76 	.word	0x0800ab76
 800689c:	00000000 	.word	0x00000000

080068a0 <PS_CNTR_ReadQ>:

/************************* [CNTR Actions] *************************/

scpi_result_t PS_CNTR_ReadQ(scpi_t * context)
{
 80068a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cntr_enable(&cntr, 0);
 80068a4:	4c5e      	ldr	r4, [pc, #376]	; (8006a20 <PS_CNTR_ReadQ+0x180>)
{
 80068a6:	b0a2      	sub	sp, #136	; 0x88
    cntr_enable(&cntr, 0);
 80068a8:	2100      	movs	r1, #0
{
 80068aa:	4607      	mov	r7, r0
    cntr_enable(&cntr, 0);
 80068ac:	4620      	mov	r0, r4
 80068ae:	f7fe fa5f 	bl	8004d70 <cntr_enable>
    cntr.ovf = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	4d5b      	ldr	r5, [pc, #364]	; (8006a24 <PS_CNTR_ReadQ+0x184>)
 80068b6:	60e3      	str	r3, [r4, #12]
 80068b8:	6868      	ldr	r0, [r5, #4]
    int last1 = PS_DMA_LAST_IDX(cntr.data_len, PS_DMA_CNTR);
 80068ba:	88a1      	ldrh	r1, [r4, #4]
 80068bc:	b280      	uxth	r0, r0
 80068be:	1a08      	subs	r0, r1, r0
 80068c0:	f000 faac 	bl	8006e1c <get_last_circ_idx>
    cntr_enable(&cntr, 1);
 80068c4:	2101      	movs	r1, #1
    int last1 = PS_DMA_LAST_IDX(cntr.data_len, PS_DMA_CNTR);
 80068c6:	4680      	mov	r8, r0
    cntr_enable(&cntr, 1);
 80068c8:	4620      	mov	r0, r4
 80068ca:	f7fe fa51 	bl	8004d70 <cntr_enable>
 80068ce:	46aa      	mov	sl, r5
 80068d0:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8006a58 <PS_CNTR_ReadQ+0x1b8>
 80068d4:	f8da 0004 	ldr.w	r0, [sl, #4]
    uint32_t cc = 0;

    while (1)
    {
        cc = cntr.ovf;
        int last2 = PS_DMA_LAST_IDX(cntr.data_len, PS_DMA_CNTR);
 80068d8:	88a1      	ldrh	r1, [r4, #4]
 80068da:	b280      	uxth	r0, r0
 80068dc:	1a08      	subs	r0, r1, r0
        cc = cntr.ovf;
 80068de:	68e6      	ldr	r6, [r4, #12]
        int last2 = PS_DMA_LAST_IDX(cntr.data_len, PS_DMA_CNTR);
 80068e0:	f000 fa9c 	bl	8006e1c <get_last_circ_idx>
        diff = last2 - last1;
        if (diff < 0)
 80068e4:	ebb0 0508 	subs.w	r5, r0, r8
            diff += cntr.data_len;
 80068e8:	bf44      	itt	mi
 80068ea:	88a3      	ldrhmi	r3, [r4, #4]
 80068ec:	18ed      	addmi	r5, r5, r3
        timeout--;
        if (diff >= 3 || timeout < 0)
 80068ee:	2d02      	cmp	r5, #2
 80068f0:	dc35      	bgt.n	800695e <PS_CNTR_ReadQ+0xbe>
 80068f2:	f1b9 0901 	subs.w	r9, r9, #1
 80068f6:	d1ed      	bne.n	80068d4 <PS_CNTR_ReadQ+0x34>
        int len = sprintf(buff, "%s,%s", f_s, T_s);
        SCPI_ResultCharacters(context, buff, len);
    }
    else
    {
        SCPI_ResultText(context, "Measuring failed! (timeout)"); // TODO ERROR
 80068f8:	494b      	ldr	r1, [pc, #300]	; (8006a28 <PS_CNTR_ReadQ+0x188>)
 80068fa:	4638      	mov	r0, r7
 80068fc:	f001 fa92 	bl	8007e24 <SCPI_ResultText>
 8006900:	e080      	b.n	8006a04 <PS_CNTR_ReadQ+0x164>
        else if (f < 1000000)
 8006902:	494a      	ldr	r1, [pc, #296]	; (8006a2c <PS_CNTR_ReadQ+0x18c>)
 8006904:	4620      	mov	r0, r4
 8006906:	f7fa fbc5 	bl	8001094 <__aeabi_fcmplt>
 800690a:	b138      	cbz	r0, 800691c <PS_CNTR_ReadQ+0x7c>
            sprint_fast(f_s, "%s kHz", f / 1000.0, 2);
 800690c:	4948      	ldr	r1, [pc, #288]	; (8006a30 <PS_CNTR_ReadQ+0x190>)
 800690e:	4620      	mov	r0, r4
 8006910:	f7fa fad6 	bl	8000ec0 <__aeabi_fdiv>
 8006914:	2302      	movs	r3, #2
 8006916:	4602      	mov	r2, r0
 8006918:	4946      	ldr	r1, [pc, #280]	; (8006a34 <PS_CNTR_ReadQ+0x194>)
 800691a:	e058      	b.n	80069ce <PS_CNTR_ReadQ+0x12e>
            sprint_fast(f_s, "%s MHz", f / 1000000.0, 2);
 800691c:	4943      	ldr	r1, [pc, #268]	; (8006a2c <PS_CNTR_ReadQ+0x18c>)
 800691e:	4620      	mov	r0, r4
 8006920:	f7fa face 	bl	8000ec0 <__aeabi_fdiv>
 8006924:	2302      	movs	r3, #2
 8006926:	4602      	mov	r2, r0
 8006928:	4943      	ldr	r1, [pc, #268]	; (8006a38 <PS_CNTR_ReadQ+0x198>)
 800692a:	e050      	b.n	80069ce <PS_CNTR_ReadQ+0x12e>
        else if (T >= 0.001)
 800692c:	4628      	mov	r0, r5
 800692e:	f7f9 fd85 	bl	800043c <__aeabi_f2d>
 8006932:	a339      	add	r3, pc, #228	; (adr r3, 8006a18 <PS_CNTR_ReadQ+0x178>)
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	f7fa f85e 	bl	80009f8 <__aeabi_dcmpge>
 800693c:	b138      	cbz	r0, 800694e <PS_CNTR_ReadQ+0xae>
            sprint_fast(T_s, "%s ms", T * 1000.0, 2);
 800693e:	493c      	ldr	r1, [pc, #240]	; (8006a30 <PS_CNTR_ReadQ+0x190>)
 8006940:	4628      	mov	r0, r5
 8006942:	f7fa fa09 	bl	8000d58 <__aeabi_fmul>
 8006946:	2302      	movs	r3, #2
 8006948:	4602      	mov	r2, r0
 800694a:	493c      	ldr	r1, [pc, #240]	; (8006a3c <PS_CNTR_ReadQ+0x19c>)
 800694c:	e04c      	b.n	80069e8 <PS_CNTR_ReadQ+0x148>
            sprint_fast(T_s, "%s us", T * 1000000.0, 2);
 800694e:	4937      	ldr	r1, [pc, #220]	; (8006a2c <PS_CNTR_ReadQ+0x18c>)
 8006950:	4628      	mov	r0, r5
 8006952:	f7fa fa01 	bl	8000d58 <__aeabi_fmul>
 8006956:	2302      	movs	r3, #2
 8006958:	4602      	mov	r2, r0
 800695a:	4939      	ldr	r1, [pc, #228]	; (8006a40 <PS_CNTR_ReadQ+0x1a0>)
 800695c:	e044      	b.n	80069e8 <PS_CNTR_ReadQ+0x148>
        float total = (cc * PS_TIM_CNTR_MAX) + cntr.data[last2];
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	ebc6 4606 	rsb	r6, r6, r6, lsl #16
 8006964:	8818      	ldrh	r0, [r3, #0]
 8006966:	4430      	add	r0, r6
 8006968:	f7fa f99e 	bl	8000ca8 <__aeabi_ui2f>
        if (diff > 3)
 800696c:	2d03      	cmp	r5, #3
        float total = (cc * PS_TIM_CNTR_MAX) + cntr.data[last2];
 800696e:	4603      	mov	r3, r0
        if (diff > 3)
 8006970:	d019      	beq.n	80069a6 <PS_CNTR_ReadQ+0x106>
            total /= (((float)diff / 2.0) - 0.5); // too fast, 1 period normalize
 8006972:	f7f9 fd63 	bl	800043c <__aeabi_f2d>
 8006976:	4680      	mov	r8, r0
 8006978:	4628      	mov	r0, r5
 800697a:	4689      	mov	r9, r1
 800697c:	f7fa f998 	bl	8000cb0 <__aeabi_i2f>
 8006980:	f7f9 fd5c 	bl	800043c <__aeabi_f2d>
 8006984:	2200      	movs	r2, #0
 8006986:	4b2f      	ldr	r3, [pc, #188]	; (8006a44 <PS_CNTR_ReadQ+0x1a4>)
 8006988:	f7f9 fdb0 	bl	80004ec <__aeabi_dmul>
 800698c:	2200      	movs	r2, #0
 800698e:	4b2d      	ldr	r3, [pc, #180]	; (8006a44 <PS_CNTR_ReadQ+0x1a4>)
 8006990:	f7f9 fbf4 	bl	800017c <__aeabi_dsub>
 8006994:	460b      	mov	r3, r1
 8006996:	4602      	mov	r2, r0
 8006998:	4649      	mov	r1, r9
 800699a:	4640      	mov	r0, r8
 800699c:	f7f9 fed0 	bl	8000740 <__aeabi_ddiv>
 80069a0:	f7fa f87c 	bl	8000a9c <__aeabi_d2f>
 80069a4:	4603      	mov	r3, r0
        float f = total / (float)PS_TIM_CNTR_FREQ;
 80069a6:	4928      	ldr	r1, [pc, #160]	; (8006a48 <PS_CNTR_ReadQ+0x1a8>)
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fa fa89 	bl	8000ec0 <__aeabi_fdiv>
        float T = 1.0 / f;
 80069ae:	4601      	mov	r1, r0
        float f = total / (float)PS_TIM_CNTR_FREQ;
 80069b0:	4604      	mov	r4, r0
        float T = 1.0 / f;
 80069b2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80069b6:	f7fa fa83 	bl	8000ec0 <__aeabi_fdiv>
        if (f < 1000)
 80069ba:	491d      	ldr	r1, [pc, #116]	; (8006a30 <PS_CNTR_ReadQ+0x190>)
        float T = 1.0 / f;
 80069bc:	4605      	mov	r5, r0
        if (f < 1000)
 80069be:	4620      	mov	r0, r4
 80069c0:	f7fa fb68 	bl	8001094 <__aeabi_fcmplt>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	d09c      	beq.n	8006902 <PS_CNTR_ReadQ+0x62>
            sprint_fast(f_s, "%s Hz", f, 2);
 80069c8:	2302      	movs	r3, #2
 80069ca:	4622      	mov	r2, r4
 80069cc:	491f      	ldr	r1, [pc, #124]	; (8006a4c <PS_CNTR_ReadQ+0x1ac>)
            sprint_fast(f_s, "%s MHz", f / 1000000.0, 2);
 80069ce:	a801      	add	r0, sp, #4
 80069d0:	f000 fa6a 	bl	8006ea8 <sprint_fast>
        if (T >= 1)
 80069d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80069d8:	4628      	mov	r0, r5
 80069da:	f7fa fb6f 	bl	80010bc <__aeabi_fcmpge>
 80069de:	2800      	cmp	r0, #0
 80069e0:	d0a4      	beq.n	800692c <PS_CNTR_ReadQ+0x8c>
            sprint_fast(T_s, "%s s", T, 2);
 80069e2:	2302      	movs	r3, #2
 80069e4:	462a      	mov	r2, r5
 80069e6:	491a      	ldr	r1, [pc, #104]	; (8006a50 <PS_CNTR_ReadQ+0x1b0>)
            sprint_fast(T_s, "%s us", T * 1000000.0, 2);
 80069e8:	a805      	add	r0, sp, #20
 80069ea:	f000 fa5d 	bl	8006ea8 <sprint_fast>
        int len = sprintf(buff, "%s,%s", f_s, T_s);
 80069ee:	aa01      	add	r2, sp, #4
 80069f0:	4918      	ldr	r1, [pc, #96]	; (8006a54 <PS_CNTR_ReadQ+0x1b4>)
 80069f2:	ab05      	add	r3, sp, #20
 80069f4:	a809      	add	r0, sp, #36	; 0x24
 80069f6:	f002 f93f 	bl	8008c78 <siprintf>
        SCPI_ResultCharacters(context, buff, len);
 80069fa:	a909      	add	r1, sp, #36	; 0x24
 80069fc:	4602      	mov	r2, r0
 80069fe:	4638      	mov	r0, r7
 8006a00:	f001 f9fa 	bl	8007df8 <SCPI_ResultCharacters>
    }

    cntr_enable(&cntr, 0);
 8006a04:	2100      	movs	r1, #0
 8006a06:	4806      	ldr	r0, [pc, #24]	; (8006a20 <PS_CNTR_ReadQ+0x180>)
 8006a08:	f7fe f9b2 	bl	8004d70 <cntr_enable>
    return SCPI_RES_OK;
}
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	b022      	add	sp, #136	; 0x88
 8006a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a14:	f3af 8000 	nop.w
 8006a18:	d2f1a9fc 	.word	0xd2f1a9fc
 8006a1c:	3f50624d 	.word	0x3f50624d
 8006a20:	20001600 	.word	0x20001600
 8006a24:	4002001c 	.word	0x4002001c
 8006a28:	0800ab5a 	.word	0x0800ab5a
 8006a2c:	49742400 	.word	0x49742400
 8006a30:	447a0000 	.word	0x447a0000
 8006a34:	0800ab3b 	.word	0x0800ab3b
 8006a38:	0800ab42 	.word	0x0800ab42
 8006a3c:	0800ab4e 	.word	0x0800ab4e
 8006a40:	0800ab54 	.word	0x0800ab54
 8006a44:	3fe00000 	.word	0x3fe00000
 8006a48:	4c895440 	.word	0x4c895440
 8006a4c:	0800ab35 	.word	0x0800ab35
 8006a50:	0800ab49 	.word	0x0800ab49
 8006a54:	0800ab8e 	.word	0x0800ab8e
 8006a58:	0015f901 	.word	0x0015f901

08006a5c <PS_SGEN_Set>:

/************************* [SGEN Actions] *************************/
scpi_result_t PS_SGEN_Set(scpi_t * context)
{
 8006a5c:	b508      	push	{r3, lr}
    // TODO range check

    LL_DAC_SetOutputBuffer(PS_DAC, PS_DAC_CH, p1);

#else
    SCPI_ResultText(context, "DAC not available"); // TODO ERROR
 8006a5e:	4902      	ldr	r1, [pc, #8]	; (8006a68 <PS_SGEN_Set+0xc>)
 8006a60:	f001 f9e0 	bl	8007e24 <SCPI_ResultText>
#endif

    return SCPI_RES_OK;
}
 8006a64:	2001      	movs	r0, #1
 8006a66:	bd08      	pop	{r3, pc}
 8006a68:	0800abe7 	.word	0x0800abe7

08006a6c <PS_PWM_SetChQ>:

/************************* [PWM Actions] *************************/

scpi_result_t PS_PWM_SetChQ(scpi_t * context)
{
 8006a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a6e:	b093      	sub	sp, #76	; 0x4c

    char buff[30];
    char buff_freq[10];
    char buff_duty[10];

    if (!SCPI_ParamUInt32(context, &param1d, TRUE))
 8006a70:	2201      	movs	r2, #1
 8006a72:	a903      	add	r1, sp, #12
{
 8006a74:	4604      	mov	r4, r0
    if (!SCPI_ParamUInt32(context, &param1d, TRUE))
 8006a76:	f001 fb98 	bl	80081aa <SCPI_ParamUInt32>
 8006a7a:	b940      	cbnz	r0, 8006a8e <PS_PWM_SetChQ+0x22>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8006a7c:	f06f 016c 	mvn.w	r1, #108	; 0x6c
        real_duty = pwm.duty_ch2;
        enabled = pwm.enabled_ch2;
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 fb53 	bl	800712c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006a86:	f04f 30ff 	mov.w	r0, #4294967295
    int len = sprintf(buff, "%d,%s,%s", enabled, buff_freq, buff_duty);

    SCPI_ResultCharacters(context, buff, len);

    return SCPI_RES_OK;
}
 8006a8a:	b013      	add	sp, #76	; 0x4c
 8006a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    param1 = param1d;
 8006a8e:	9903      	ldr	r1, [sp, #12]
    float real_freq = pwm.freq;
 8006a90:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <PS_PWM_SetChQ+0x74>)
    if (param1 == 1)
 8006a92:	2901      	cmp	r1, #1
    float real_freq = pwm.freq;
 8006a94:	685a      	ldr	r2, [r3, #4]
    if (param1 == 1)
 8006a96:	d11b      	bne.n	8006ad0 <PS_PWM_SetChQ+0x64>
        real_duty = pwm.duty_ch1;
 8006a98:	689f      	ldr	r7, [r3, #8]
        enabled = pwm.enabled_ch1;
 8006a9a:	781d      	ldrb	r5, [r3, #0]
    sprint_fast(buff_freq, "%s", real_freq, 5);
 8006a9c:	2305      	movs	r3, #5
 8006a9e:	4911      	ldr	r1, [pc, #68]	; (8006ae4 <PS_PWM_SetChQ+0x78>)
 8006aa0:	a804      	add	r0, sp, #16
    sprint_fast(buff_duty, "%s", real_duty, 5);
 8006aa2:	ae07      	add	r6, sp, #28
    sprint_fast(buff_freq, "%s", real_freq, 5);
 8006aa4:	f000 fa00 	bl	8006ea8 <sprint_fast>
    sprint_fast(buff_duty, "%s", real_duty, 5);
 8006aa8:	2305      	movs	r3, #5
 8006aaa:	463a      	mov	r2, r7
 8006aac:	490d      	ldr	r1, [pc, #52]	; (8006ae4 <PS_PWM_SetChQ+0x78>)
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f000 f9fa 	bl	8006ea8 <sprint_fast>
    int len = sprintf(buff, "%d,%s,%s", enabled, buff_freq, buff_duty);
 8006ab4:	ab04      	add	r3, sp, #16
 8006ab6:	462a      	mov	r2, r5
 8006ab8:	490b      	ldr	r1, [pc, #44]	; (8006ae8 <PS_PWM_SetChQ+0x7c>)
 8006aba:	9600      	str	r6, [sp, #0]
 8006abc:	a80a      	add	r0, sp, #40	; 0x28
 8006abe:	f002 f8db 	bl	8008c78 <siprintf>
    SCPI_ResultCharacters(context, buff, len);
 8006ac2:	a90a      	add	r1, sp, #40	; 0x28
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f001 f996 	bl	8007df8 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 8006acc:	2001      	movs	r0, #1
 8006ace:	e7dc      	b.n	8006a8a <PS_PWM_SetChQ+0x1e>
    else if (param1 == 2)
 8006ad0:	2902      	cmp	r1, #2
 8006ad2:	d102      	bne.n	8006ada <PS_PWM_SetChQ+0x6e>
        real_duty = pwm.duty_ch2;
 8006ad4:	68df      	ldr	r7, [r3, #12]
        enabled = pwm.enabled_ch2;
 8006ad6:	785d      	ldrb	r5, [r3, #1]
 8006ad8:	e7e0      	b.n	8006a9c <PS_PWM_SetChQ+0x30>
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006ada:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8006ade:	e7cf      	b.n	8006a80 <PS_PWM_SetChQ+0x14>
 8006ae0:	200016e4 	.word	0x200016e4
 8006ae4:	0800ab91 	.word	0x0800ab91
 8006ae8:	0800ab8b 	.word	0x0800ab8b

08006aec <PS_PWM_SetCh>:

scpi_result_t PS_PWM_SetCh(scpi_t * context)
{
 8006aec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int param1;
    uint32_t param1d, param2, param3;

    if (!SCPI_ParamUInt32(context, &param1d, TRUE) ||
 8006aee:	2201      	movs	r2, #1
 8006af0:	a901      	add	r1, sp, #4
{
 8006af2:	4604      	mov	r4, r0
    if (!SCPI_ParamUInt32(context, &param1d, TRUE) ||
 8006af4:	f001 fb59 	bl	80081aa <SCPI_ParamUInt32>
 8006af8:	b940      	cbnz	r0, 8006b0c <PS_PWM_SetCh+0x20>
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
        !SCPI_ParamUInt32(context, &param3, TRUE))
    {
        SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8006afa:	f06f 016c 	mvn.w	r1, #108	; 0x6c
    param1 = param1d;
    if (param1 < 1 || param1 > 2 ||
        (param2 <= 0 || param2 > 12000000) ||
        (param3 < 0 || param3 > 100))
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 fb14 	bl	800712c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
    }

    pwm_set(&pwm, param1, param2, param3);

    return SCPI_RES_OK;
}
 8006b08:	b004      	add	sp, #16
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	a902      	add	r1, sp, #8
 8006b10:	4620      	mov	r0, r4
 8006b12:	f001 fb4a 	bl	80081aa <SCPI_ParamUInt32>
    if (!SCPI_ParamUInt32(context, &param1d, TRUE) ||
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d0ef      	beq.n	8006afa <PS_PWM_SetCh+0xe>
        !SCPI_ParamUInt32(context, &param3, TRUE))
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	a903      	add	r1, sp, #12
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f001 fb43 	bl	80081aa <SCPI_ParamUInt32>
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d0e8      	beq.n	8006afa <PS_PWM_SetCh+0xe>
    param1 = param1d;
 8006b28:	9d01      	ldr	r5, [sp, #4]
    if (param1 < 1 || param1 > 2 ||
 8006b2a:	1e6b      	subs	r3, r5, #1
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d807      	bhi.n	8006b40 <PS_PWM_SetCh+0x54>
        (param2 <= 0 || param2 > 12000000) ||
 8006b30:	9e02      	ldr	r6, [sp, #8]
    if (param1 < 1 || param1 > 2 ||
 8006b32:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <PS_PWM_SetCh+0x78>)
        (param2 <= 0 || param2 > 12000000) ||
 8006b34:	1e72      	subs	r2, r6, #1
    if (param1 < 1 || param1 > 2 ||
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d802      	bhi.n	8006b40 <PS_PWM_SetCh+0x54>
        (param3 < 0 || param3 > 100))
 8006b3a:	9803      	ldr	r0, [sp, #12]
        (param2 <= 0 || param2 > 12000000) ||
 8006b3c:	2864      	cmp	r0, #100	; 0x64
 8006b3e:	d902      	bls.n	8006b46 <PS_PWM_SetCh+0x5a>
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006b40:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8006b44:	e7db      	b.n	8006afe <PS_PWM_SetCh+0x12>
    pwm_set(&pwm, param1, param2, param3);
 8006b46:	f7fa f8af 	bl	8000ca8 <__aeabi_ui2f>
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7fa f8ab 	bl	8000ca8 <__aeabi_ui2f>
 8006b52:	4623      	mov	r3, r4
 8006b54:	4602      	mov	r2, r0
 8006b56:	4629      	mov	r1, r5
 8006b58:	4803      	ldr	r0, [pc, #12]	; (8006b68 <PS_PWM_SetCh+0x7c>)
 8006b5a:	f7fe f923 	bl	8004da4 <pwm_set>
    return SCPI_RES_OK;
 8006b5e:	2001      	movs	r0, #1
 8006b60:	e7d2      	b.n	8006b08 <PS_PWM_SetCh+0x1c>
 8006b62:	bf00      	nop
 8006b64:	00b71aff 	.word	0x00b71aff
 8006b68:	200016e4 	.word	0x200016e4

08006b6c <PS_PWM_StartCh>:

scpi_result_t PS_PWM_StartCh(scpi_t * context)
{
 8006b6c:	b513      	push	{r0, r1, r4, lr}
    int param1;
    uint32_t param1d;

    if (!SCPI_ParamUInt32(context, &param1d, TRUE))
 8006b6e:	2201      	movs	r2, #1
 8006b70:	a901      	add	r1, sp, #4
{
 8006b72:	4604      	mov	r4, r0
    if (!SCPI_ParamUInt32(context, &param1d, TRUE))
 8006b74:	f001 fb19 	bl	80081aa <SCPI_ParamUInt32>
 8006b78:	b940      	cbnz	r0, 8006b8c <PS_PWM_StartCh+0x20>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8006b7a:	f06f 016c 	mvn.w	r1, #108	; 0x6c
    }

    param1 = param1d;
    if (param1 < 1 || param1 > 2)
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f000 fad4 	bl	800712c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
    }

    LL_TIM_CC_EnableChannel(PS_TIM_PWM, (param1 == 1 ? LL_TIM_CHANNEL_CH1 : LL_TIM_CHANNEL_CH2));
    return SCPI_RES_OK;
}
 8006b88:	b002      	add	sp, #8
 8006b8a:	bd10      	pop	{r4, pc}
    param1 = param1d;
 8006b8c:	9b01      	ldr	r3, [sp, #4]
    if (param1 < 1 || param1 > 2)
 8006b8e:	1e5a      	subs	r2, r3, #1
 8006b90:	2a01      	cmp	r2, #1
 8006b92:	d902      	bls.n	8006b9a <PS_PWM_StartCh+0x2e>
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006b94:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8006b98:	e7f1      	b.n	8006b7e <PS_PWM_StartCh+0x12>
  SET_BIT(TIMx->CCER, Channels);
 8006b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    LL_TIM_CC_EnableChannel(PS_TIM_PWM, (param1 == 1 ? LL_TIM_CHANNEL_CH1 : LL_TIM_CHANNEL_CH2));
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	bf18      	it	ne
 8006ba2:	2310      	movne	r3, #16
 8006ba4:	6a11      	ldr	r1, [r2, #32]
    return SCPI_RES_OK;
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	6213      	str	r3, [r2, #32]
 8006bac:	e7ec      	b.n	8006b88 <PS_PWM_StartCh+0x1c>

08006bae <PS_PWM_StopCh>:

scpi_result_t PS_PWM_StopCh(scpi_t * context)
{
 8006bae:	b513      	push	{r0, r1, r4, lr}
    int param1;
    uint32_t param1d;

    if (!SCPI_ParamUInt32(context, &param1d, TRUE))
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	a901      	add	r1, sp, #4
{
 8006bb4:	4604      	mov	r4, r0
    if (!SCPI_ParamUInt32(context, &param1d, TRUE))
 8006bb6:	f001 faf8 	bl	80081aa <SCPI_ParamUInt32>
 8006bba:	b940      	cbnz	r0, 8006bce <PS_PWM_StopCh+0x20>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8006bbc:	f06f 016c 	mvn.w	r1, #108	; 0x6c
    }

    param1 = param1d;
    if (param1 < 1 || param1 > 2)
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 fab3 	bl	800712c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006bc6:	f04f 30ff 	mov.w	r0, #4294967295
    }

    LL_TIM_CC_DisableChannel(PS_TIM_PWM, (param1 == 1 ? LL_TIM_CHANNEL_CH1 : LL_TIM_CHANNEL_CH2));
    return SCPI_RES_OK;
}
 8006bca:	b002      	add	sp, #8
 8006bcc:	bd10      	pop	{r4, pc}
    param1 = param1d;
 8006bce:	9b01      	ldr	r3, [sp, #4]
    if (param1 < 1 || param1 > 2)
 8006bd0:	1e5a      	subs	r2, r3, #1
 8006bd2:	2a01      	cmp	r2, #1
 8006bd4:	d902      	bls.n	8006bdc <PS_PWM_StopCh+0x2e>
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006bd6:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8006bda:	e7f1      	b.n	8006bc0 <PS_PWM_StopCh+0x12>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006bdc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    LL_TIM_CC_DisableChannel(PS_TIM_PWM, (param1 == 1 ? LL_TIM_CHANNEL_CH1 : LL_TIM_CHANNEL_CH2));
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	bf18      	it	ne
 8006be4:	2310      	movne	r3, #16
 8006be6:	6a0a      	ldr	r2, [r1, #32]
    return SCPI_RES_OK;
 8006be8:	2001      	movs	r0, #1
 8006bea:	ea22 0303 	bic.w	r3, r2, r3
 8006bee:	620b      	str	r3, [r1, #32]
 8006bf0:	e7eb      	b.n	8006bca <PS_PWM_StopCh+0x1c>

08006bf2 <assert2>:

#include "utility.h"
#include "cfg.h"

void assert2(const char *file, uint32_t line)
{
 8006bf2:	e7fe      	b.n	8006bf2 <assert2>

08006bf4 <get_avg_from_circ>:
    while(1);
    //__asm("bkpt 3");
}

void get_avg_from_circ(int last_idx, int ch_num, int avg_num, uint16_t* buff, float* v1, float* v2, float* v3, float* v4, float* v5)
{
 8006bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	e9dd 980c 	ldrd	r9, r8, [sp, #48]	; 0x30
 8006c00:	460d      	mov	r5, r1
 8006c02:	9201      	str	r2, [sp, #4]
 8006c04:	461e      	mov	r6, r3
    int total = ch_num * avg_num;
 8006c06:	fb02 fb01 	mul.w	fp, r2, r1
    ASSERT(v1 != NULL && total > 0 && buff != NULL);
 8006c0a:	f1b9 0f00 	cmp.w	r9, #0
 8006c0e:	d003      	beq.n	8006c18 <get_avg_from_circ+0x24>
 8006c10:	f1bb 0f00 	cmp.w	fp, #0
 8006c14:	dd00      	ble.n	8006c18 <get_avg_from_circ+0x24>
 8006c16:	b906      	cbnz	r6, 8006c1a <get_avg_from_circ+0x26>
 8006c18:	e7fe      	b.n	8006c18 <get_avg_from_circ+0x24>

    for (int i = last_idx, j = 0; j < total; j++, i++)
 8006c1a:	f04f 0a00 	mov.w	sl, #0
    {
        if (i >= total)
            i = 0;
 8006c1e:	45a3      	cmp	fp, r4
 8006c20:	bfd8      	it	le
 8006c22:	2400      	movle	r4, #0

        if (i % ch_num == 0)
 8006c24:	fb94 f3f5 	sdiv	r3, r4, r5
 8006c28:	fb05 4313 	mls	r3, r5, r3, r4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d13e      	bne.n	8006cae <get_avg_from_circ+0xba>
            *v1 += buff[i];
 8006c30:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 8006c34:	f7fa f83c 	bl	8000cb0 <__aeabi_i2f>
 8006c38:	4601      	mov	r1, r0
 8006c3a:	f8d9 0000 	ldr.w	r0, [r9]
 8006c3e:	f7f9 ff83 	bl	8000b48 <__addsf3>
 8006c42:	f8c9 0000 	str.w	r0, [r9]
    for (int i = last_idx, j = 0; j < total; j++, i++)
 8006c46:	f10a 0a01 	add.w	sl, sl, #1
 8006c4a:	45d3      	cmp	fp, sl
 8006c4c:	f104 0401 	add.w	r4, r4, #1
 8006c50:	d1e5      	bne.n	8006c1e <get_avg_from_circ+0x2a>
        else if (ch_num > 3 && i % ch_num == 3)
            *v4 += buff[i];
        else if (ch_num > 4)  // && i % ch_num == 4)
            *v5 += buff[i];
    }
    *v1 /= avg_num;
 8006c52:	9801      	ldr	r0, [sp, #4]
 8006c54:	f7fa f82c 	bl	8000cb0 <__aeabi_i2f>
 8006c58:	4601      	mov	r1, r0
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	f8d9 0000 	ldr.w	r0, [r9]
 8006c60:	f7fa f92e 	bl	8000ec0 <__aeabi_fdiv>
 8006c64:	f8c9 0000 	str.w	r0, [r9]
    if (v2 != NULL) *v2 /= avg_num;
 8006c68:	f1b8 0f00 	cmp.w	r8, #0
 8006c6c:	d006      	beq.n	8006c7c <get_avg_from_circ+0x88>
 8006c6e:	f8d8 0000 	ldr.w	r0, [r8]
 8006c72:	4621      	mov	r1, r4
 8006c74:	f7fa f924 	bl	8000ec0 <__aeabi_fdiv>
 8006c78:	f8c8 0000 	str.w	r0, [r8]
    if (v3 != NULL) *v3 /= avg_num;
 8006c7c:	b127      	cbz	r7, 8006c88 <get_avg_from_circ+0x94>
 8006c7e:	6838      	ldr	r0, [r7, #0]
 8006c80:	4621      	mov	r1, r4
 8006c82:	f7fa f91d 	bl	8000ec0 <__aeabi_fdiv>
 8006c86:	6038      	str	r0, [r7, #0]
    if (v4 != NULL) *v4 /= avg_num;
 8006c88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c8a:	b12b      	cbz	r3, 8006c98 <get_avg_from_circ+0xa4>
 8006c8c:	6818      	ldr	r0, [r3, #0]
 8006c8e:	4621      	mov	r1, r4
 8006c90:	f7fa f916 	bl	8000ec0 <__aeabi_fdiv>
 8006c94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c96:	6018      	str	r0, [r3, #0]
    if (v5 != NULL) *v5 /= avg_num;
 8006c98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c9a:	b12b      	cbz	r3, 8006ca8 <get_avg_from_circ+0xb4>
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	f7fa f90e 	bl	8000ec0 <__aeabi_fdiv>
 8006ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ca6:	6018      	str	r0, [r3, #0]
}
 8006ca8:	b003      	add	sp, #12
 8006caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (ch_num > 1 && i % ch_num == 1)
 8006cae:	2d01      	cmp	r5, #1
 8006cb0:	ddc9      	ble.n	8006c46 <get_avg_from_circ+0x52>
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d10b      	bne.n	8006cce <get_avg_from_circ+0xda>
            *v2 += buff[i];
 8006cb6:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 8006cba:	f7f9 fff9 	bl	8000cb0 <__aeabi_i2f>
 8006cbe:	4601      	mov	r1, r0
 8006cc0:	f8d8 0000 	ldr.w	r0, [r8]
 8006cc4:	f7f9 ff40 	bl	8000b48 <__addsf3>
 8006cc8:	f8c8 0000 	str.w	r0, [r8]
 8006ccc:	e7bb      	b.n	8006c46 <get_avg_from_circ+0x52>
        else if (ch_num > 2 && i % ch_num == 2)
 8006cce:	2d02      	cmp	r5, #2
 8006cd0:	d0b9      	beq.n	8006c46 <get_avg_from_circ+0x52>
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d109      	bne.n	8006cea <get_avg_from_circ+0xf6>
            *v3 += buff[i];
 8006cd6:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 8006cda:	f7f9 ffe9 	bl	8000cb0 <__aeabi_i2f>
 8006cde:	4601      	mov	r1, r0
 8006ce0:	6838      	ldr	r0, [r7, #0]
 8006ce2:	f7f9 ff31 	bl	8000b48 <__addsf3>
 8006ce6:	6038      	str	r0, [r7, #0]
 8006ce8:	e7ad      	b.n	8006c46 <get_avg_from_circ+0x52>
        else if (ch_num > 3 && i % ch_num == 3)
 8006cea:	2d03      	cmp	r5, #3
 8006cec:	d0ab      	beq.n	8006c46 <get_avg_from_circ+0x52>
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d10b      	bne.n	8006d0a <get_avg_from_circ+0x116>
            *v4 += buff[i];
 8006cf2:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 8006cf6:	f7f9 ffdb 	bl	8000cb0 <__aeabi_i2f>
 8006cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cfc:	4601      	mov	r1, r0
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	f7f9 ff22 	bl	8000b48 <__addsf3>
 8006d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            *v5 += buff[i];
 8006d06:	6018      	str	r0, [r3, #0]
 8006d08:	e79d      	b.n	8006c46 <get_avg_from_circ+0x52>
        else if (ch_num > 4)  // && i % ch_num == 4)
 8006d0a:	2d04      	cmp	r5, #4
 8006d0c:	d09b      	beq.n	8006c46 <get_avg_from_circ+0x52>
            *v5 += buff[i];
 8006d0e:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 8006d12:	f7f9 ffcd 	bl	8000cb0 <__aeabi_i2f>
 8006d16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d18:	4601      	mov	r1, r0
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	f7f9 ff14 	bl	8000b48 <__addsf3>
 8006d20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d22:	e7f0      	b.n	8006d06 <get_avg_from_circ+0x112>

08006d24 <get_vcc_from_circ>:

int get_vcc_from_circ(int from, int total, int ch_num, int daq_bits, void* buff)
{
 8006d24:	b570      	push	{r4, r5, r6, lr}
    ASSERT(ch_num > 0 && total > 0 && buff != NULL);
 8006d26:	2a00      	cmp	r2, #0
{
 8006d28:	9d04      	ldr	r5, [sp, #16]
    ASSERT(ch_num > 0 && total > 0 && buff != NULL);
 8006d2a:	dd02      	ble.n	8006d32 <get_vcc_from_circ+0xe>
 8006d2c:	2900      	cmp	r1, #0
 8006d2e:	dd00      	ble.n	8006d32 <get_vcc_from_circ+0xe>
 8006d30:	b905      	cbnz	r5, 8006d34 <get_vcc_from_circ+0x10>
 8006d32:	e7fe      	b.n	8006d32 <get_vcc_from_circ+0xe>

    for (int k = 0, i = from; k < total; k++, i++)
 8006d34:	2400      	movs	r4, #0
    {
        if (i >= total)
            i = 0;
 8006d36:	4281      	cmp	r1, r0
 8006d38:	bfd8      	it	le
 8006d3a:	2000      	movle	r0, #0

        if (i % ch_num == 0)
 8006d3c:	fb90 f6f2 	sdiv	r6, r0, r2
 8006d40:	fb02 0616 	mls	r6, r2, r6, r0
 8006d44:	b92e      	cbnz	r6, 8006d52 <get_vcc_from_circ+0x2e>
        {
           if (daq_bits == 12)
 8006d46:	2b0c      	cmp	r3, #12
               return (int)(((uint16_t*)buff)[i]);
 8006d48:	bf0c      	ite	eq
 8006d4a:	f835 0010 	ldrheq.w	r0, [r5, r0, lsl #1]
           else
               return (int)(((uint8_t*)buff)[i]);
 8006d4e:	5c28      	ldrbne	r0, [r5, r0]
        }
    }
    return -1;
}
 8006d50:	bd70      	pop	{r4, r5, r6, pc}
    for (int k = 0, i = from; k < total; k++, i++)
 8006d52:	3401      	adds	r4, #1
 8006d54:	42a1      	cmp	r1, r4
 8006d56:	f100 0001 	add.w	r0, r0, #1
 8006d5a:	d1ec      	bne.n	8006d36 <get_vcc_from_circ+0x12>
    return -1;
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	e7f6      	b.n	8006d50 <get_vcc_from_circ+0x2c>

08006d62 <get_1ch_from_circ>:

int get_1ch_from_circ(int from, int total, int ch, int ch_num, int daq_bits, float vcc, float vref_cal, void* buff, uint8_t* out, int* idx)
{
 8006d62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ASSERT(ch > 0 && ch_num > 0 && total > 0 && buff != NULL);
 8006d66:	2a00      	cmp	r2, #0
{
 8006d68:	4604      	mov	r4, r0
 8006d6a:	4689      	mov	r9, r1
 8006d6c:	469a      	mov	sl, r3
 8006d6e:	9e11      	ldr	r6, [sp, #68]	; 0x44
    ASSERT(ch > 0 && ch_num > 0 && total > 0 && buff != NULL);
 8006d70:	dd05      	ble.n	8006d7e <get_1ch_from_circ+0x1c>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dd03      	ble.n	8006d7e <get_1ch_from_circ+0x1c>
 8006d76:	2900      	cmp	r1, #0
 8006d78:	dd01      	ble.n	8006d7e <get_1ch_from_circ+0x1c>
 8006d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d7c:	b903      	cbnz	r3, 8006d80 <get_1ch_from_circ+0x1e>
 8006d7e:	e7fe      	b.n	8006d7e <get_1ch_from_circ+0x1c>
    int mod2 = ch_num - 1;
    int mod3 = mod2 - 1;
    int mod4 = mod3 - 1;

    int found = 0;
    for (int k = 0, i = from; k < total; k++, i++)
 8006d80:	f04f 0800 	mov.w	r8, #0
    int found = 0;
 8006d84:	4645      	mov	r5, r8
    {
        if (i >= total)
            i = 0;

        if (i % ch_num == ch - 1)
 8006d86:	1e53      	subs	r3, r2, #1
 8006d88:	9300      	str	r3, [sp, #0]
            i = 0;
 8006d8a:	45a1      	cmp	r9, r4
 8006d8c:	bfd8      	it	le
 8006d8e:	2400      	movle	r4, #0
        if (i % ch_num == ch - 1)
 8006d90:	fb94 f3fa 	sdiv	r3, r4, sl
 8006d94:	fb0a 4313 	mls	r3, sl, r3, r4
 8006d98:	9a00      	ldr	r2, [sp, #0]
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d120      	bne.n	8006de0 <get_1ch_from_circ+0x7e>
        {
            found++;
            float val = 0;
            if (daq_bits == 12)
 8006d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006da0:	6837      	ldr	r7, [r6, #0]
 8006da2:	2b0c      	cmp	r3, #12
            found++;
 8006da4:	f105 0201 	add.w	r2, r5, #1
 8006da8:	f107 0b01 	add.w	fp, r7, #1
            if (daq_bits == 12)
 8006dac:	d122      	bne.n	8006df4 <get_1ch_from_circ+0x92>
            {
                val = (float)(((uint16_t*)buff)[i]);
 8006dae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                uint16_t ret = (uint16_t)(vref_cal * (val / vcc)); // 0.8 mV precision rounded (output in mV*10)
                out[(*idx)++] = LO_BYTE16(ret);
                out[(*idx)++] = HI_BYTE16(ret);
                found++;
 8006db0:	3502      	adds	r5, #2
                val = (float)(((uint16_t*)buff)[i]);
 8006db2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8006db6:	f7f9 ff77 	bl	8000ca8 <__aeabi_ui2f>
                uint16_t ret = (uint16_t)(vref_cal * (val / vcc)); // 0.8 mV precision rounded (output in mV*10)
 8006dba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006dbc:	f7fa f880 	bl	8000ec0 <__aeabi_fdiv>
 8006dc0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006dc2:	f7f9 ffc9 	bl	8000d58 <__aeabi_fmul>
 8006dc6:	f7fa f9b3 	bl	8001130 <__aeabi_f2uiz>
                out[(*idx)++] = LO_BYTE16(ret);
 8006dca:	9b10      	ldr	r3, [sp, #64]	; 0x40
                uint16_t ret = (uint16_t)(vref_cal * (val / vcc)); // 0.8 mV precision rounded (output in mV*10)
 8006dcc:	b280      	uxth	r0, r0
                out[(*idx)++] = LO_BYTE16(ret);
 8006dce:	f8c6 b000 	str.w	fp, [r6]
 8006dd2:	55d8      	strb	r0, [r3, r7]
                out[(*idx)++] = HI_BYTE16(ret);
 8006dd4:	6833      	ldr	r3, [r6, #0]
 8006dd6:	0a00      	lsrs	r0, r0, #8
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	6032      	str	r2, [r6, #0]
 8006ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006dde:	54d0      	strb	r0, [r2, r3]
    for (int k = 0, i = from; k < total; k++, i++)
 8006de0:	f108 0801 	add.w	r8, r8, #1
 8006de4:	45c1      	cmp	r9, r8
 8006de6:	f104 0401 	add.w	r4, r4, #1
 8006dea:	d1ce      	bne.n	8006d8a <get_1ch_from_circ+0x28>
                out[(*idx)++] = ret;
            }
        }
    }
    return found;
}
 8006dec:	4628      	mov	r0, r5
 8006dee:	b003      	add	sp, #12
 8006df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                val = (float)(((uint8_t*)buff)[i]);
 8006df4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006df6:	9201      	str	r2, [sp, #4]
 8006df8:	5d18      	ldrb	r0, [r3, r4]
 8006dfa:	f7f9 ff55 	bl	8000ca8 <__aeabi_ui2f>
                uint8_t ret = (uint8_t)(vref_cal * (val / vcc));   // 13 mV precision rounded (output in mV/10)
 8006dfe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e00:	f7fa f85e 	bl	8000ec0 <__aeabi_fdiv>
 8006e04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006e06:	f7f9 ffa7 	bl	8000d58 <__aeabi_fmul>
 8006e0a:	f7fa f991 	bl	8001130 <__aeabi_f2uiz>
                out[(*idx)++] = ret;
 8006e0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
            found++;
 8006e10:	9a01      	ldr	r2, [sp, #4]
                out[(*idx)++] = ret;
 8006e12:	f8c6 b000 	str.w	fp, [r6]
            found++;
 8006e16:	4615      	mov	r5, r2
                out[(*idx)++] = ret;
 8006e18:	55d8      	strb	r0, [r3, r7]
 8006e1a:	e7e1      	b.n	8006de0 <get_1ch_from_circ+0x7e>

08006e1c <get_last_circ_idx>:

int get_last_circ_idx(int pos, int len)
{
    int last_idx = pos - 1;
    if (last_idx < 0)
 8006e1c:	3801      	subs	r0, #1
        last_idx = len - 1;
 8006e1e:	bf48      	it	mi
 8006e20:	f101 30ff 	addmi.w	r0, r1, #4294967295
    return last_idx;
}
 8006e24:	4770      	bx	lr

08006e26 <get_freq>:

float get_freq(int* prescaler, int* reload, int max_reload, int freq_osc, int freq_want)
{
 8006e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e2a:	9c08      	ldr	r4, [sp, #32]
 8006e2c:	4606      	mov	r6, r0
    ASSERT(freq_osc >= freq_want && freq_want > 0 && freq_osc > 0 && max_reload > 0);
 8006e2e:	42a3      	cmp	r3, r4
{
 8006e30:	4689      	mov	r9, r1
 8006e32:	4617      	mov	r7, r2
 8006e34:	461d      	mov	r5, r3
    ASSERT(freq_osc >= freq_want && freq_want > 0 && freq_osc > 0 && max_reload > 0);
 8006e36:	db05      	blt.n	8006e44 <get_freq+0x1e>
 8006e38:	2c00      	cmp	r4, #0
 8006e3a:	dd03      	ble.n	8006e44 <get_freq+0x1e>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dd01      	ble.n	8006e44 <get_freq+0x1e>
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	dc00      	bgt.n	8006e46 <get_freq+0x20>
 8006e44:	e7fe      	b.n	8006e44 <get_freq+0x1e>
    *prescaler = 1;
 8006e46:	2301      	movs	r3, #1
 8006e48:	6003      	str	r3, [r0, #0]

    do
    {
        *reload = (float)freq_osc / freq_want;
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f7f9 ff30 	bl	8000cb0 <__aeabi_i2f>
 8006e50:	4680      	mov	r8, r0
 8006e52:	4620      	mov	r0, r4
 8006e54:	f7f9 ff2c 	bl	8000cb0 <__aeabi_i2f>
 8006e58:	4601      	mov	r1, r0
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	f7fa f830 	bl	8000ec0 <__aeabi_fdiv>
 8006e60:	f7fa f940 	bl	80010e4 <__aeabi_f2iz>
        if (*reload > max_reload)
 8006e64:	42b8      	cmp	r0, r7
        *reload = (float)freq_osc / freq_want;
 8006e66:	f8c9 0000 	str.w	r0, [r9]
        {
            (*prescaler)++;
 8006e6a:	bfc2      	ittt	gt
 8006e6c:	6834      	ldrgt	r4, [r6, #0]
 8006e6e:	3401      	addgt	r4, #1
 8006e70:	6034      	strgt	r4, [r6, #0]
            freq_want = freq_osc / *prescaler;
        }
    }
    while (*reload > max_reload);
 8006e72:	f8d9 a000 	ldr.w	sl, [r9]
            freq_want = freq_osc / *prescaler;
 8006e76:	bfc8      	it	gt
 8006e78:	fb95 f4f4 	sdivgt	r4, r5, r4
    while (*reload > max_reload);
 8006e7c:	45ba      	cmp	sl, r7
 8006e7e:	dce4      	bgt.n	8006e4a <get_freq+0x24>

    return (float)freq_osc / (float)(*prescaler) / (float)(*reload);
 8006e80:	6830      	ldr	r0, [r6, #0]
 8006e82:	f7f9 ff15 	bl	8000cb0 <__aeabi_i2f>
 8006e86:	4601      	mov	r1, r0
 8006e88:	4640      	mov	r0, r8
 8006e8a:	f7fa f819 	bl	8000ec0 <__aeabi_fdiv>
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4650      	mov	r0, sl
 8006e92:	f7f9 ff0d 	bl	8000cb0 <__aeabi_i2f>
 8006e96:	4601      	mov	r1, r0
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f7fa f811 	bl	8000ec0 <__aeabi_fdiv>
}
 8006e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea2:	0000      	movs	r0, r0
 8006ea4:	0000      	movs	r0, r0
	...

08006ea8 <sprint_fast>:
    }
    s[str_loc] = 0; // add null termination.
}

void sprint_fast(char* s, const char* format, float fVal, int prec)
{
 8006ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	b0b3      	sub	sp, #204	; 0xcc
 8006eae:	4605      	mov	r5, r0
 8006eb0:	468a      	mov	sl, r1
 8006eb2:	4693      	mov	fp, r2
    char result[100] = { '\0' };
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	2264      	movs	r2, #100	; 0x64
 8006eb8:	4668      	mov	r0, sp
{
 8006eba:	461c      	mov	r4, r3
    char result[100] = { '\0' };
 8006ebc:	f001 fe1e 	bl	8008afc <memset>
    char result_rev[100] = { '\0' };
 8006ec0:	2264      	movs	r2, #100	; 0x64
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	eb0d 0002 	add.w	r0, sp, r2
 8006ec8:	f001 fe18 	bl	8008afc <memset>
    int dVal, dec, i, j, k;

    if (prec <= 0)
 8006ecc:	2c00      	cmp	r4, #0
 8006ece:	dc0f      	bgt.n	8006ef0 <sprint_fast+0x48>
    {
        sprintf(result, "%d", (int)fVal);
 8006ed0:	4658      	mov	r0, fp
 8006ed2:	f7fa f907 	bl	80010e4 <__aeabi_f2iz>
 8006ed6:	493e      	ldr	r1, [pc, #248]	; (8006fd0 <sprint_fast+0x128>)
 8006ed8:	4602      	mov	r2, r0
 8006eda:	4668      	mov	r0, sp
 8006edc:	f001 fecc 	bl	8008c78 <siprintf>
        sprintf(s, format, result);
 8006ee0:	466a      	mov	r2, sp
        result[i] = '0';

    for (j = 0; i >= 0; i--, j++)
        result_rev[j] = result[i];

    sprintf(s, format, result_rev);
 8006ee2:	4651      	mov	r1, sl
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f001 fec7 	bl	8008c78 <siprintf>
}
 8006eea:	b033      	add	sp, #204	; 0xcc
 8006eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fVal += 0.5 * pow(0.1, prec);
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f7f9 fa91 	bl	8000418 <__aeabi_i2d>
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460f      	mov	r7, r1
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	a132      	add	r1, pc, #200	; (adr r1, 8006fc8 <sprint_fast+0x120>)
 8006f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f04:	f002 fb58 	bl	80095b8 <pow>
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4b32      	ldr	r3, [pc, #200]	; (8006fd4 <sprint_fast+0x12c>)
 8006f0c:	f7f9 faee 	bl	80004ec <__aeabi_dmul>
 8006f10:	4680      	mov	r8, r0
 8006f12:	4658      	mov	r0, fp
 8006f14:	4689      	mov	r9, r1
 8006f16:	f7f9 fa91 	bl	800043c <__aeabi_f2d>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4640      	mov	r0, r8
 8006f20:	4649      	mov	r1, r9
 8006f22:	f7f9 f92d 	bl	8000180 <__adddf3>
 8006f26:	f7f9 fdb9 	bl	8000a9c <__aeabi_d2f>
    k = pow(10, prec);
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	4632      	mov	r2, r6
    fVal += 0.5 * pow(0.1, prec);
 8006f2e:	4680      	mov	r8, r0
    k = pow(10, prec);
 8006f30:	4929      	ldr	r1, [pc, #164]	; (8006fd8 <sprint_fast+0x130>)
 8006f32:	2000      	movs	r0, #0
 8006f34:	f002 fb40 	bl	80095b8 <pow>
 8006f38:	f7f9 fd88 	bl	8000a4c <__aeabi_d2iz>
 8006f3c:	4606      	mov	r6, r0
    dVal = fVal;
 8006f3e:	4640      	mov	r0, r8
 8006f40:	f7fa f8d0 	bl	80010e4 <__aeabi_f2iz>
 8006f44:	4607      	mov	r7, r0
    dec = ((int)(fVal * k)) % k;
 8006f46:	4630      	mov	r0, r6
 8006f48:	f7f9 feb2 	bl	8000cb0 <__aeabi_i2f>
 8006f4c:	4641      	mov	r1, r8
 8006f4e:	f7f9 ff03 	bl	8000d58 <__aeabi_fmul>
 8006f52:	f7fa f8c7 	bl	80010e4 <__aeabi_f2iz>
 8006f56:	fb90 f3f6 	sdiv	r3, r0, r6
        result[i] = (dec % 10) + '0';
 8006f5a:	210a      	movs	r1, #10
    dec = ((int)(fVal * k)) % k;
 8006f5c:	fb03 0016 	mls	r0, r3, r6, r0
    for (i = 0; i < prec; i++)
 8006f60:	2300      	movs	r3, #0
        result[i] = (dec % 10) + '0';
 8006f62:	fb90 f2f1 	sdiv	r2, r0, r1
 8006f66:	fb01 0012 	mls	r0, r1, r2, r0
 8006f6a:	3030      	adds	r0, #48	; 0x30
 8006f6c:	f80d 0003 	strb.w	r0, [sp, r3]
    for (i = 0; i < prec; i++)
 8006f70:	3301      	adds	r3, #1
 8006f72:	429c      	cmp	r4, r3
        dec /= 10;
 8006f74:	4610      	mov	r0, r2
    for (i = 0; i < prec; i++)
 8006f76:	d1f4      	bne.n	8006f62 <sprint_fast+0xba>
    result[i] = '.';
 8006f78:	222e      	movs	r2, #46	; 0x2e
 8006f7a:	ab32      	add	r3, sp, #200	; 0xc8
 8006f7c:	4423      	add	r3, r4
    if (dVal > 0)
 8006f7e:	2f00      	cmp	r7, #0
    result[i] = '.';
 8006f80:	f803 2cc8 	strb.w	r2, [r3, #-200]
    i++;
 8006f84:	f104 0301 	add.w	r3, r4, #1
    if (dVal > 0)
 8006f88:	dd17      	ble.n	8006fba <sprint_fast+0x112>
            result[i] = (dVal % 10) + '0';
 8006f8a:	210a      	movs	r1, #10
 8006f8c:	fb97 f2f1 	sdiv	r2, r7, r1
 8006f90:	fb01 7712 	mls	r7, r1, r2, r7
 8006f94:	3730      	adds	r7, #48	; 0x30
 8006f96:	f80d 7003 	strb.w	r7, [sp, r3]
            i++;
 8006f9a:	1c58      	adds	r0, r3, #1
        while (dVal > 0)
 8006f9c:	4617      	mov	r7, r2
 8006f9e:	b952      	cbnz	r2, 8006fb6 <sprint_fast+0x10e>
 8006fa0:	f10d 0263 	add.w	r2, sp, #99	; 0x63
        result_rev[j] = result[i];
 8006fa4:	f81d 1003 	ldrb.w	r1, [sp, r3]
    for (j = 0; i >= 0; i--, j++)
 8006fa8:	f113 33ff 	adds.w	r3, r3, #4294967295
        result_rev[j] = result[i];
 8006fac:	f802 1f01 	strb.w	r1, [r2, #1]!
    for (j = 0; i >= 0; i--, j++)
 8006fb0:	d2f8      	bcs.n	8006fa4 <sprint_fast+0xfc>
    sprintf(s, format, result_rev);
 8006fb2:	aa19      	add	r2, sp, #100	; 0x64
 8006fb4:	e795      	b.n	8006ee2 <sprint_fast+0x3a>
            i++;
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	e7e8      	b.n	8006f8c <sprint_fast+0xe4>
        result[i] = '0';
 8006fba:	2130      	movs	r1, #48	; 0x30
 8006fbc:	aa32      	add	r2, sp, #200	; 0xc8
 8006fbe:	441a      	add	r2, r3
 8006fc0:	f802 1cc8 	strb.w	r1, [r2, #-200]
 8006fc4:	e7ec      	b.n	8006fa0 <sprint_fast+0xf8>
 8006fc6:	bf00      	nop
 8006fc8:	9999999a 	.word	0x9999999a
 8006fcc:	3fb99999 	.word	0x3fb99999
 8006fd0:	0800abe4 	.word	0x0800abe4
 8006fd4:	3fe00000 	.word	0x3fe00000
 8006fd8:	40240000 	.word	0x40240000

08006fdc <SCPI_ErrorEmit>:
/**
 * Emit error
 * @param context scpi context
 * @param err Error to emit
 */
static void SCPI_ErrorEmit(scpi_t * context, int16_t err) {
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	4604      	mov	r4, r0
 8006fe0:	460d      	mov	r5, r1
    SCPI_RegSetBits(context, SCPI_REG_STB, STB_QMA);
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	f000 fa1a 	bl	800741e <SCPI_RegSetBits>

    if (context->interface && context->interface->error) {
 8006fea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006fec:	b133      	cbz	r3, 8006ffc <SCPI_ErrorEmit+0x20>
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	b123      	cbz	r3, 8006ffc <SCPI_ErrorEmit+0x20>
        context->interface->error(context, err);
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	4620      	mov	r0, r4
    }
}
 8006ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        context->interface->error(context, err);
 8006ffa:	4718      	bx	r3
}
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}

08006ffe <SCPI_ErrorInit>:
    fifo_init(&context->error_queue, data, size);
 8006ffe:	303c      	adds	r0, #60	; 0x3c
 8007000:	f000 b918 	b.w	8007234 <fifo_init>

08007004 <SCPI_ErrorCount>:
 * Return number of errors/events in the queue
 * @param context
 * @return
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
    int16_t result = 0;
 8007004:	2300      	movs	r3, #0
int32_t SCPI_ErrorCount(scpi_t * context) {
 8007006:	b507      	push	{r0, r1, r2, lr}
    int16_t result = 0;
 8007008:	a902      	add	r1, sp, #8
 800700a:	f821 3d02 	strh.w	r3, [r1, #-2]!

    fifo_count(&context->error_queue, &result);
 800700e:	303c      	adds	r0, #60	; 0x3c
 8007010:	f000 f969 	bl	80072e6 <fifo_count>

    return result;
}
 8007014:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8007018:	b003      	add	sp, #12
 800701a:	f85d fb04 	ldr.w	pc, [sp], #4

0800701e <SCPI_ErrorEmitEmpty>:
static void SCPI_ErrorEmitEmpty(scpi_t * context) {
 800701e:	b570      	push	{r4, r5, r6, lr}
 8007020:	4604      	mov	r4, r0
    if ((SCPI_ErrorCount(context) == 0) && (SCPI_RegGet(context, SCPI_REG_STB) & STB_QMA)) {
 8007022:	f7ff ffef 	bl	8007004 <SCPI_ErrorCount>
 8007026:	4605      	mov	r5, r0
 8007028:	b998      	cbnz	r0, 8007052 <SCPI_ErrorEmitEmpty+0x34>
 800702a:	4601      	mov	r1, r0
 800702c:	4620      	mov	r0, r4
 800702e:	f000 f95f 	bl	80072f0 <SCPI_RegGet>
 8007032:	0743      	lsls	r3, r0, #29
 8007034:	d50d      	bpl.n	8007052 <SCPI_ErrorEmitEmpty+0x34>
        SCPI_RegClearBits(context, SCPI_REG_STB, STB_QMA);
 8007036:	2204      	movs	r2, #4
 8007038:	4629      	mov	r1, r5
 800703a:	4620      	mov	r0, r4
 800703c:	f000 f961 	bl	8007302 <SCPI_RegClearBits>
        if (context->interface && context->interface->error) {
 8007040:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007042:	b133      	cbz	r3, 8007052 <SCPI_ErrorEmitEmpty+0x34>
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	b123      	cbz	r3, 8007052 <SCPI_ErrorEmitEmpty+0x34>
            context->interface->error(context, 0);
 8007048:	4629      	mov	r1, r5
 800704a:	4620      	mov	r0, r4
}
 800704c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            context->interface->error(context, 0);
 8007050:	4718      	bx	r3
}
 8007052:	bd70      	pop	{r4, r5, r6, pc}

08007054 <SCPI_ErrorClear>:
void SCPI_ErrorClear(scpi_t * context) {
 8007054:	b510      	push	{r4, lr}
 8007056:	4604      	mov	r4, r0
    fifo_clear(&context->error_queue);
 8007058:	303c      	adds	r0, #60	; 0x3c
 800705a:	f000 f8f1 	bl	8007240 <fifo_clear>
    SCPI_ErrorEmitEmpty(context);
 800705e:	4620      	mov	r0, r4
}
 8007060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_ErrorEmitEmpty(context);
 8007064:	f7ff bfdb 	b.w	800701e <SCPI_ErrorEmitEmpty>

08007068 <SCPI_ErrorPop>:
scpi_bool_t SCPI_ErrorPop(scpi_t * context, scpi_error_t * error) {
 8007068:	b510      	push	{r4, lr}
 800706a:	4604      	mov	r4, r0
    if (!error || !context) return FALSE;
 800706c:	4608      	mov	r0, r1
 800706e:	b151      	cbz	r1, 8007086 <SCPI_ErrorPop+0x1e>
 8007070:	b154      	cbz	r4, 8007088 <SCPI_ErrorPop+0x20>
    SCPI_ERROR_SETVAL(error, 0, NULL);
 8007072:	2300      	movs	r3, #0
    fifo_remove(&context->error_queue, error);
 8007074:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    SCPI_ERROR_SETVAL(error, 0, NULL);
 8007078:	800b      	strh	r3, [r1, #0]
    fifo_remove(&context->error_queue, error);
 800707a:	f000 f901 	bl	8007280 <fifo_remove>
    SCPI_ErrorEmitEmpty(context);
 800707e:	4620      	mov	r0, r4
 8007080:	f7ff ffcd 	bl	800701e <SCPI_ErrorEmitEmpty>
    return TRUE;
 8007084:	2001      	movs	r0, #1
}
 8007086:	bd10      	pop	{r4, pc}
    if (!error || !context) return FALSE;
 8007088:	4620      	mov	r0, r4
 800708a:	e7fc      	b.n	8007086 <SCPI_ErrorPop+0x1e>

0800708c <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800708c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007090:	4604      	mov	r4, r0
 8007092:	460f      	mov	r7, r1
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
 8007094:	b122      	cbz	r2, 80070a0 <SCPI_ErrorPushEx+0x14>
 8007096:	b91b      	cbnz	r3, 80070a0 <SCPI_ErrorPushEx+0x14>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
 8007098:	21ff      	movs	r1, #255	; 0xff
 800709a:	4610      	mov	r0, r2
 800709c:	f001 fe39 	bl	8008d12 <strnlen>
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
 80070a0:	ae02      	add	r6, sp, #8
 80070a2:	f826 7d04 	strh.w	r7, [r6, #-4]!
    if (!fifo_add(&context->error_queue, &error_value)) {
 80070a6:	f104 083c 	add.w	r8, r4, #60	; 0x3c
 80070aa:	4631      	mov	r1, r6
 80070ac:	4640      	mov	r0, r8
 80070ae:	f000 f8cb 	bl	8007248 <fifo_add>
 80070b2:	4605      	mov	r5, r0
 80070b4:	bb98      	cbnz	r0, 800711e <SCPI_ErrorPushEx+0x92>
        fifo_remove_last(&context->error_queue, &error_value);
 80070b6:	4631      	mov	r1, r6
 80070b8:	4640      	mov	r0, r8
 80070ba:	f000 f8fa 	bl	80072b2 <fifo_remove_last>
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 80070be:	f64f 63a2 	movw	r3, #65186	; 0xfea2
        fifo_add(&context->error_queue, &error_value);
 80070c2:	4631      	mov	r1, r6
 80070c4:	4640      	mov	r0, r8
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 80070c6:	f8ad 3004 	strh.w	r3, [sp, #4]
        fifo_add(&context->error_queue, &error_value);
 80070ca:	f000 f8bd 	bl	8007248 <fifo_add>
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);

    for (i = 0; i < ERROR_DEFS_N; i++) {
 80070ce:	2600      	movs	r6, #0
 80070d0:	f04f 0906 	mov.w	r9, #6
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 80070d4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8007128 <SCPI_ErrorPushEx+0x9c>
 80070d8:	fb09 f306 	mul.w	r3, r9, r6
 80070dc:	f933 2008 	ldrsh.w	r2, [r3, r8]
 80070e0:	42ba      	cmp	r2, r7
 80070e2:	db09      	blt.n	80070f8 <SCPI_ErrorPushEx+0x6c>
 80070e4:	4443      	add	r3, r8
 80070e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80070ea:	42ba      	cmp	r2, r7
 80070ec:	dc04      	bgt.n	80070f8 <SCPI_ErrorPushEx+0x6c>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
 80070ee:	889a      	ldrh	r2, [r3, #4]
 80070f0:	2102      	movs	r1, #2
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 f993 	bl	800741e <SCPI_RegSetBits>
    for (i = 0; i < ERROR_DEFS_N; i++) {
 80070f8:	3601      	adds	r6, #1
 80070fa:	2e09      	cmp	r6, #9
 80070fc:	d1ec      	bne.n	80070d8 <SCPI_ErrorPushEx+0x4c>
        }
    }

    SCPI_ErrorEmit(context, err);
 80070fe:	4639      	mov	r1, r7
 8007100:	4620      	mov	r0, r4
 8007102:	f7ff ff6b 	bl	8006fdc <SCPI_ErrorEmit>
    if (queue_overflow) {
 8007106:	b91d      	cbnz	r5, 8007110 <SCPI_ErrorPushEx+0x84>
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
 8007108:	4906      	ldr	r1, [pc, #24]	; (8007124 <SCPI_ErrorPushEx+0x98>)
 800710a:	4620      	mov	r0, r4
 800710c:	f7ff ff66 	bl	8006fdc <SCPI_ErrorEmit>
    }

    if (context) {
 8007110:	b114      	cbz	r4, 8007118 <SCPI_ErrorPushEx+0x8c>
        context->cmd_error = TRUE;
 8007112:	2301      	movs	r3, #1
 8007114:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    }
}
 8007118:	b003      	add	sp, #12
 800711a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return TRUE;
 800711e:	2501      	movs	r5, #1
 8007120:	e7d5      	b.n	80070ce <SCPI_ErrorPushEx+0x42>
 8007122:	bf00      	nop
 8007124:	fffffea2 	.word	0xfffffea2
 8007128:	0800ad58 	.word	0x0800ad58

0800712c <SCPI_ErrorPush>:
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
    SCPI_ErrorPushEx(context, err, NULL, 0);
 800712c:	2300      	movs	r3, #0
 800712e:	461a      	mov	r2, r3
 8007130:	f7ff bfac 	b.w	800708c <SCPI_ErrorPushEx>

08007134 <SCPI_ErrorTranslate>:
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
 8007134:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
 8007138:	d049      	beq.n	80071ce <SCPI_ErrorTranslate+0x9a>
 800713a:	dc21      	bgt.n	8007180 <SCPI_ErrorTranslate+0x4c>
 800713c:	f46f 7395 	mvn.w	r3, #298	; 0x12a
 8007140:	4298      	cmp	r0, r3
 8007142:	d050      	beq.n	80071e6 <SCPI_ErrorTranslate+0xb2>
 8007144:	f510 7f95 	cmn.w	r0, #298	; 0x12a
 8007148:	da0b      	bge.n	8007162 <SCPI_ErrorTranslate+0x2e>
 800714a:	f510 7faf 	cmn.w	r0, #350	; 0x15e
 800714e:	d048      	beq.n	80071e2 <SCPI_ErrorTranslate+0xae>
 8007150:	f510 7f9b 	cmn.w	r0, #310	; 0x136
 8007154:	d043      	beq.n	80071de <SCPI_ErrorTranslate+0xaa>
 8007156:	f46f 73b5 	mvn.w	r3, #362	; 0x16a
 800715a:	4298      	cmp	r0, r3
 800715c:	d107      	bne.n	800716e <SCPI_ErrorTranslate+0x3a>
#if USE_FULL_ERROR_LIST
#define XE X
#else
#define XE(def, val, str)
#endif
        LIST_OF_ERRORS
 800715e:	4823      	ldr	r0, [pc, #140]	; (80071ec <SCPI_ErrorTranslate+0xb8>)
 8007160:	4770      	bx	lr
    switch (err) {
 8007162:	f110 0fc8 	cmn.w	r0, #200	; 0xc8
 8007166:	d036      	beq.n	80071d6 <SCPI_ErrorTranslate+0xa2>
 8007168:	dc03      	bgt.n	8007172 <SCPI_ErrorTranslate+0x3e>
 800716a:	30e0      	adds	r0, #224	; 0xe0
 800716c:	d035      	beq.n	80071da <SCPI_ErrorTranslate+0xa6>
#if USE_USER_ERROR_LIST
        LIST_OF_USER_ERRORS
#endif
#undef X
#undef XE
        default: return "Unknown error";
 800716e:	4820      	ldr	r0, [pc, #128]	; (80071f0 <SCPI_ErrorTranslate+0xbc>)
 8007170:	4770      	bx	lr
    switch (err) {
 8007172:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 8007176:	d02c      	beq.n	80071d2 <SCPI_ErrorTranslate+0x9e>
 8007178:	3097      	adds	r0, #151	; 0x97
 800717a:	d1f8      	bne.n	800716e <SCPI_ErrorTranslate+0x3a>
        LIST_OF_ERRORS
 800717c:	481d      	ldr	r0, [pc, #116]	; (80071f4 <SCPI_ErrorTranslate+0xc0>)
 800717e:	4770      	bx	lr
    switch (err) {
 8007180:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8007184:	d01d      	beq.n	80071c2 <SCPI_ErrorTranslate+0x8e>
 8007186:	dc09      	bgt.n	800719c <SCPI_ErrorTranslate+0x68>
 8007188:	f110 0f71 	cmn.w	r0, #113	; 0x71
 800718c:	d01d      	beq.n	80071ca <SCPI_ErrorTranslate+0x96>
 800718e:	f110 0f6d 	cmn.w	r0, #109	; 0x6d
 8007192:	d018      	beq.n	80071c6 <SCPI_ErrorTranslate+0x92>
 8007194:	3083      	adds	r0, #131	; 0x83
 8007196:	d1ea      	bne.n	800716e <SCPI_ErrorTranslate+0x3a>
        LIST_OF_ERRORS
 8007198:	4817      	ldr	r0, [pc, #92]	; (80071f8 <SCPI_ErrorTranslate+0xc4>)
 800719a:	4770      	bx	lr
    switch (err) {
 800719c:	f110 0f67 	cmn.w	r0, #103	; 0x67
 80071a0:	d00d      	beq.n	80071be <SCPI_ErrorTranslate+0x8a>
 80071a2:	dc03      	bgt.n	80071ac <SCPI_ErrorTranslate+0x78>
 80071a4:	3068      	adds	r0, #104	; 0x68
 80071a6:	d1e2      	bne.n	800716e <SCPI_ErrorTranslate+0x3a>
        LIST_OF_ERRORS
 80071a8:	4814      	ldr	r0, [pc, #80]	; (80071fc <SCPI_ErrorTranslate+0xc8>)
 80071aa:	4770      	bx	lr
    switch (err) {
 80071ac:	f110 0f65 	cmn.w	r0, #101	; 0x65
 80071b0:	d003      	beq.n	80071ba <SCPI_ErrorTranslate+0x86>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d1db      	bne.n	800716e <SCPI_ErrorTranslate+0x3a>
        LIST_OF_ERRORS
 80071b6:	4812      	ldr	r0, [pc, #72]	; (8007200 <SCPI_ErrorTranslate+0xcc>)
    }
}
 80071b8:	4770      	bx	lr
        LIST_OF_ERRORS
 80071ba:	4812      	ldr	r0, [pc, #72]	; (8007204 <SCPI_ErrorTranslate+0xd0>)
 80071bc:	4770      	bx	lr
 80071be:	4812      	ldr	r0, [pc, #72]	; (8007208 <SCPI_ErrorTranslate+0xd4>)
 80071c0:	4770      	bx	lr
 80071c2:	4812      	ldr	r0, [pc, #72]	; (800720c <SCPI_ErrorTranslate+0xd8>)
 80071c4:	4770      	bx	lr
 80071c6:	4812      	ldr	r0, [pc, #72]	; (8007210 <SCPI_ErrorTranslate+0xdc>)
 80071c8:	4770      	bx	lr
 80071ca:	4812      	ldr	r0, [pc, #72]	; (8007214 <SCPI_ErrorTranslate+0xe0>)
 80071cc:	4770      	bx	lr
 80071ce:	4812      	ldr	r0, [pc, #72]	; (8007218 <SCPI_ErrorTranslate+0xe4>)
 80071d0:	4770      	bx	lr
 80071d2:	4812      	ldr	r0, [pc, #72]	; (800721c <SCPI_ErrorTranslate+0xe8>)
 80071d4:	4770      	bx	lr
 80071d6:	4812      	ldr	r0, [pc, #72]	; (8007220 <SCPI_ErrorTranslate+0xec>)
 80071d8:	4770      	bx	lr
 80071da:	4812      	ldr	r0, [pc, #72]	; (8007224 <SCPI_ErrorTranslate+0xf0>)
 80071dc:	4770      	bx	lr
 80071de:	4812      	ldr	r0, [pc, #72]	; (8007228 <SCPI_ErrorTranslate+0xf4>)
 80071e0:	4770      	bx	lr
 80071e2:	4812      	ldr	r0, [pc, #72]	; (800722c <SCPI_ErrorTranslate+0xf8>)
 80071e4:	4770      	bx	lr
 80071e6:	4812      	ldr	r0, [pc, #72]	; (8007230 <SCPI_ErrorTranslate+0xfc>)
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	0800ad27 	.word	0x0800ad27
 80071f0:	0800ad49 	.word	0x0800ad49
 80071f4:	0800acbe 	.word	0x0800acbe
 80071f8:	0800ac9c 	.word	0x0800ac9c
 80071fc:	0800ac53 	.word	0x0800ac53
 8007200:	0800ac26 	.word	0x0800ac26
 8007204:	0800ac2f 	.word	0x0800ac2f
 8007208:	0800ac41 	.word	0x0800ac41
 800720c:	0800ac63 	.word	0x0800ac63
 8007210:	0800ac79 	.word	0x0800ac79
 8007214:	0800ac8b 	.word	0x0800ac8b
 8007218:	0800acab 	.word	0x0800acab
 800721c:	0800acd2 	.word	0x0800acd2
 8007220:	0800ace3 	.word	0x0800ace3
 8007224:	0800acf3 	.word	0x0800acf3
 8007228:	0800ad0b 	.word	0x0800ad0b
 800722c:	0800ad18 	.word	0x0800ad18
 8007230:	0800ad3c 	.word	0x0800ad3c

08007234 <fifo_init>:
/**
 * Initialize fifo
 * @param fifo
 */
void fifo_init(scpi_fifo_t * fifo, scpi_error_t * data, int16_t size) {
    fifo->wr = 0;
 8007234:	2300      	movs	r3, #0
    fifo->rd = 0;
    fifo->count = 0;
    fifo->data = data;
 8007236:	6081      	str	r1, [r0, #8]
    fifo->wr = 0;
 8007238:	6003      	str	r3, [r0, #0]
    fifo->rd = 0;
 800723a:	8083      	strh	r3, [r0, #4]
    fifo->size = size;
 800723c:	80c2      	strh	r2, [r0, #6]
}
 800723e:	4770      	bx	lr

08007240 <fifo_clear>:
/**
 * Empty fifo
 * @param fifo
 */
void fifo_clear(scpi_fifo_t * fifo) {
    fifo->wr = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	6003      	str	r3, [r0, #0]
    fifo->rd = 0;
 8007244:	8083      	strh	r3, [r0, #4]
    fifo->count = 0;
}
 8007246:	4770      	bx	lr

08007248 <fifo_add>:
 * @param fifo
 * @param err
 * @param info
 * @return
 */
scpi_bool_t fifo_add(scpi_fifo_t * fifo, const scpi_error_t * value) {
 8007248:	b530      	push	{r4, r5, lr}
    return fifo->count == fifo->size;
 800724a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800724e:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    /* FIFO full? */
    if (fifo_is_full(fifo)) {
 8007252:	42a2      	cmp	r2, r4
 8007254:	d010      	beq.n	8007278 <fifo_add+0x30>
        return FALSE;
    }
    if (!value) {
 8007256:	b189      	cbz	r1, 800727c <fifo_add+0x34>
        return FALSE;
    }

    fifo->data[fifo->wr] = *value;
 8007258:	f9b0 3000 	ldrsh.w	r3, [r0]
 800725c:	8809      	ldrh	r1, [r1, #0]
 800725e:	6885      	ldr	r5, [r0, #8]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
    fifo->count += 1;
 8007260:	3201      	adds	r2, #1
    fifo->data[fifo->wr] = *value;
 8007262:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 8007266:	3301      	adds	r3, #1
 8007268:	fb93 f1f4 	sdiv	r1, r3, r4
 800726c:	fb04 3311 	mls	r3, r4, r1, r3
    fifo->count += 1;
 8007270:	8082      	strh	r2, [r0, #4]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 8007272:	8003      	strh	r3, [r0, #0]
    return TRUE;
 8007274:	2001      	movs	r0, #1
}
 8007276:	bd30      	pop	{r4, r5, pc}
        return FALSE;
 8007278:	2000      	movs	r0, #0
 800727a:	e7fc      	b.n	8007276 <fifo_add+0x2e>
 800727c:	4608      	mov	r0, r1
 800727e:	e7fa      	b.n	8007276 <fifo_add+0x2e>

08007280 <fifo_remove>:
    return fifo->count == 0;
 8007280:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 * Remove element form fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove(scpi_fifo_t * fifo, scpi_error_t * value) {
 8007284:	b510      	push	{r4, lr}
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 8007286:	b193      	cbz	r3, 80072ae <fifo_remove+0x2e>
 8007288:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
        return FALSE;
    }

    if (value) {
 800728c:	b119      	cbz	r1, 8007296 <fifo_remove+0x16>
        *value = fifo->data[fifo->rd];
 800728e:	6884      	ldr	r4, [r0, #8]
 8007290:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
 8007294:	800c      	strh	r4, [r1, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size);
 8007296:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800729a:	3201      	adds	r2, #1
 800729c:	fb92 f1f4 	sdiv	r1, r2, r4
 80072a0:	fb04 2211 	mls	r2, r4, r1, r2
    fifo->count -= 1;
 80072a4:	3b01      	subs	r3, #1
    fifo->rd = (fifo->rd + 1) % (fifo->size);
 80072a6:	8042      	strh	r2, [r0, #2]
    fifo->count -= 1;
 80072a8:	8083      	strh	r3, [r0, #4]

    return TRUE;
 80072aa:	2001      	movs	r0, #1
}
 80072ac:	bd10      	pop	{r4, pc}
        return FALSE;
 80072ae:	4618      	mov	r0, r3
 80072b0:	e7fc      	b.n	80072ac <fifo_remove+0x2c>

080072b2 <fifo_remove_last>:
    return fifo->count == 0;
 80072b2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
 80072b6:	b530      	push	{r4, r5, lr}
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 80072b8:	b19b      	cbz	r3, 80072e2 <fifo_remove_last+0x30>
        return FALSE;
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
 80072ba:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 80072be:	f9b0 2000 	ldrsh.w	r2, [r0]
 80072c2:	442a      	add	r2, r5
 80072c4:	3a01      	subs	r2, #1
 80072c6:	fb92 f4f5 	sdiv	r4, r2, r5
 80072ca:	fb05 2214 	mls	r2, r5, r4, r2
 80072ce:	8002      	strh	r2, [r0, #0]

    if (value) {
 80072d0:	b119      	cbz	r1, 80072da <fifo_remove_last+0x28>
        *value = fifo->data[fifo->wr];
 80072d2:	6884      	ldr	r4, [r0, #8]
 80072d4:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 80072d8:	800a      	strh	r2, [r1, #0]
    }
    fifo->count -= 1;
 80072da:	3b01      	subs	r3, #1
 80072dc:	8083      	strh	r3, [r0, #4]

    return TRUE;
 80072de:	2001      	movs	r0, #1
}
 80072e0:	bd30      	pop	{r4, r5, pc}
        return FALSE;
 80072e2:	4618      	mov	r0, r3
 80072e4:	e7fc      	b.n	80072e0 <fifo_remove_last+0x2e>

080072e6 <fifo_count>:
 * @param fifo
 * @param value
 * @return
 */
scpi_bool_t fifo_count(scpi_fifo_t * fifo, int16_t * value) {
    *value = fifo->count;
 80072e6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    return TRUE;
}
 80072ea:	2001      	movs	r0, #1
    *value = fifo->count;
 80072ec:	800b      	strh	r3, [r1, #0]
}
 80072ee:	4770      	bx	lr

080072f0 <SCPI_RegGet>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && context) {
 80072f0:	2909      	cmp	r1, #9
 80072f2:	d804      	bhi.n	80072fe <SCPI_RegGet+0xe>
 80072f4:	b120      	cbz	r0, 8007300 <SCPI_RegGet+0x10>
        return context->registers[name];
 80072f6:	3124      	adds	r1, #36	; 0x24
 80072f8:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80072fc:	4770      	bx	lr
    } else {
        return 0;
 80072fe:	2000      	movs	r0, #0
    }
}
 8007300:	4770      	bx	lr

08007302 <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 8007302:	b510      	push	{r4, lr}
 8007304:	4603      	mov	r3, r0
 8007306:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 8007308:	f7ff fff2 	bl	80072f0 <SCPI_RegGet>
 800730c:	ea20 0202 	bic.w	r2, r0, r2
 8007310:	4621      	mov	r1, r4
}
 8007312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 8007316:	b292      	uxth	r2, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f000 b815 	b.w	8007348 <SCPI_RegSet>

0800731e <regUpdateSTB>:
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 800731e:	b538      	push	{r3, r4, r5, lr}
 8007320:	460c      	mov	r4, r1
    if (val & SCPI_RegGet(context, mask)) {
 8007322:	4611      	mov	r1, r2
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 8007324:	4605      	mov	r5, r0
    if (val & SCPI_RegGet(context, mask)) {
 8007326:	f7ff ffe3 	bl	80072f0 <SCPI_RegGet>
 800732a:	ea10 0104 	ands.w	r1, r0, r4
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 800732e:	461a      	mov	r2, r3
    if (val & SCPI_RegGet(context, mask)) {
 8007330:	d005      	beq.n	800733e <regUpdateSTB+0x20>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 8007332:	4628      	mov	r0, r5
}
 8007334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 8007338:	2100      	movs	r1, #0
 800733a:	f000 b870 	b.w	800741e <SCPI_RegSetBits>
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 800733e:	4628      	mov	r0, r5
}
 8007340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 8007344:	f7ff bfdd 	b.w	8007302 <SCPI_RegClearBits>

08007348 <SCPI_RegSet>:
    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 8007348:	2909      	cmp	r1, #9
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 800734a:	b570      	push	{r4, r5, r6, lr}
 800734c:	4604      	mov	r4, r0
 800734e:	4615      	mov	r5, r2
    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 8007350:	d858      	bhi.n	8007404 <SCPI_RegSet+0xbc>
 8007352:	2800      	cmp	r0, #0
 8007354:	d056      	beq.n	8007404 <SCPI_RegSet+0xbc>
 8007356:	eb00 0641 	add.w	r6, r0, r1, lsl #1
    switch (name) {
 800735a:	3901      	subs	r1, #1
    old_val = context->registers[name];
 800735c:	f8b6 0048 	ldrh.w	r0, [r6, #72]	; 0x48
    context->registers[name] = val;
 8007360:	f8a6 2048 	strh.w	r2, [r6, #72]	; 0x48
    switch (name) {
 8007364:	2908      	cmp	r1, #8
 8007366:	d806      	bhi.n	8007376 <SCPI_RegSet+0x2e>
 8007368:	e8df f001 	tbb	[pc, r1]
 800736c:	3e2d2520 	.word	0x3e2d2520
 8007370:	322f4341 	.word	0x322f4341
 8007374:	34          	.byte	0x34
 8007375:	00          	.byte	0x00
 8007376:	f022 0140 	bic.w	r1, r2, #64	; 0x40
            if (val & mask) {
 800737a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800737e:	b289      	uxth	r1, r1
 8007380:	ea11 0203 	ands.w	r2, r1, r3
 8007384:	d03c      	beq.n	8007400 <SCPI_RegSet+0xb8>
                val |= STB_SRQ;
 8007386:	f045 0540 	orr.w	r5, r5, #64	; 0x40
                if (old_val != val) {
 800738a:	1b42      	subs	r2, r0, r5
 800738c:	bf18      	it	ne
 800738e:	2201      	movne	r2, #1
    context->registers[name] = val;
 8007390:	f8a6 5048 	strh.w	r5, [r6, #72]	; 0x48
    if (srq) {
 8007394:	b3b2      	cbz	r2, 8007404 <SCPI_RegSet+0xbc>
    if (context && context->interface && context->interface->control) {
 8007396:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007398:	b3a3      	cbz	r3, 8007404 <SCPI_RegSet+0xbc>
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	b393      	cbz	r3, 8007404 <SCPI_RegSet+0xbc>
        return context->interface->control(context, ctrl, val);
 800739e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80073a2:	4620      	mov	r0, r4
}
 80073a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return context->interface->control(context, ctrl, val);
 80073a8:	2101      	movs	r1, #1
 80073aa:	4718      	bx	r3
            regUpdate(context, SCPI_REG_STB);
 80073ac:	2100      	movs	r1, #0
            regUpdate(context, SCPI_REG_OPER);
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 f829 	bl	8007406 <regUpdate>
 80073b4:	e005      	b.n	80073c2 <SCPI_RegSet+0x7a>
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
 80073b6:	2320      	movs	r3, #32
 80073b8:	2203      	movs	r2, #3
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 80073ba:	4629      	mov	r1, r5
 80073bc:	4620      	mov	r0, r4
 80073be:	f7ff ffae 	bl	800731e <regUpdateSTB>
    scpi_bool_t srq = FALSE;
 80073c2:	2200      	movs	r2, #0
 80073c4:	e7e4      	b.n	8007390 <SCPI_RegSet+0x48>
            regUpdate(context, SCPI_REG_ESR);
 80073c6:	2102      	movs	r1, #2
 80073c8:	e7f1      	b.n	80073ae <SCPI_RegSet+0x66>
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
 80073ca:	2308      	movs	r3, #8
 80073cc:	461a      	mov	r2, r3
 80073ce:	e7f4      	b.n	80073ba <SCPI_RegSet+0x72>
            regUpdate(context, SCPI_REG_QUES);
 80073d0:	2107      	movs	r1, #7
 80073d2:	e7ec      	b.n	80073ae <SCPI_RegSet+0x66>
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 80073d4:	2107      	movs	r1, #7
 80073d6:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 80073da:	ea22 0200 	bic.w	r2, r2, r0
 80073de:	431a      	orrs	r2, r3
 80073e0:	4620      	mov	r0, r4
 80073e2:	f7ff ffb1 	bl	8007348 <SCPI_RegSet>
 80073e6:	e7ec      	b.n	80073c2 <SCPI_RegSet+0x7a>
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 80073e8:	2380      	movs	r3, #128	; 0x80
 80073ea:	2205      	movs	r2, #5
 80073ec:	e7e5      	b.n	80073ba <SCPI_RegSet+0x72>
            regUpdate(context, SCPI_REG_OPER);
 80073ee:	2104      	movs	r1, #4
 80073f0:	e7dd      	b.n	80073ae <SCPI_RegSet+0x66>
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 80073f2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80073f6:	ea22 0200 	bic.w	r2, r2, r0
 80073fa:	431a      	orrs	r2, r3
 80073fc:	2104      	movs	r1, #4
 80073fe:	e7ef      	b.n	80073e0 <SCPI_RegSet+0x98>
            if (val & mask) {
 8007400:	460d      	mov	r5, r1
 8007402:	e7c5      	b.n	8007390 <SCPI_RegSet+0x48>
}
 8007404:	bd70      	pop	{r4, r5, r6, pc}

08007406 <regUpdate>:
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
 8007406:	b510      	push	{r4, lr}
 8007408:	4603      	mov	r3, r0
 800740a:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 800740c:	f7ff ff70 	bl	80072f0 <SCPI_RegGet>
 8007410:	4621      	mov	r1, r4
}
 8007412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 8007416:	4602      	mov	r2, r0
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff bf95 	b.w	8007348 <SCPI_RegSet>

0800741e <SCPI_RegSetBits>:
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 800741e:	b510      	push	{r4, lr}
 8007420:	4603      	mov	r3, r0
 8007422:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 8007424:	f7ff ff64 	bl	80072f0 <SCPI_RegGet>
 8007428:	4302      	orrs	r2, r0
 800742a:	4621      	mov	r1, r4
}
 800742c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 8007430:	b292      	uxth	r2, r2
 8007432:	4618      	mov	r0, r3
 8007434:	f7ff bf88 	b.w	8007348 <SCPI_RegSet>

08007438 <SCPI_EventClear>:
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 8007438:	2200      	movs	r2, #0
 800743a:	2102      	movs	r1, #2
 800743c:	f7ff bf84 	b.w	8007348 <SCPI_RegSet>

08007440 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
 8007440:	b510      	push	{r4, lr}
 8007442:	4604      	mov	r4, r0
    SCPI_EventClear(context);
 8007444:	f7ff fff8 	bl	8007438 <SCPI_EventClear>
    SCPI_ErrorClear(context);
 8007448:	4620      	mov	r0, r4
 800744a:	f7ff fe03 	bl	8007054 <SCPI_ErrorClear>
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
 800744e:	4620      	mov	r0, r4
 8007450:	2200      	movs	r2, #0
 8007452:	2104      	movs	r1, #4
 8007454:	f7ff ff78 	bl	8007348 <SCPI_RegSet>
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 8007458:	4620      	mov	r0, r4
 800745a:	2200      	movs	r2, #0
 800745c:	2107      	movs	r1, #7
 800745e:	f7ff ff73 	bl	8007348 <SCPI_RegSet>
    return SCPI_RES_OK;
}
 8007462:	2001      	movs	r0, #1
 8007464:	bd10      	pop	{r4, pc}

08007466 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 8007466:	b513      	push	{r0, r1, r4, lr}
    int32_t new_ESE;
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 8007468:	2201      	movs	r2, #1
 800746a:	a901      	add	r1, sp, #4
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 800746c:	4604      	mov	r4, r0
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 800746e:	f000 fe99 	bl	80081a4 <SCPI_ParamInt32>
 8007472:	b140      	cbz	r0, 8007486 <SCPI_CoreEse+0x20>
        SCPI_RegSet(context, SCPI_REG_ESE, (scpi_reg_val_t) new_ESE);
 8007474:	4620      	mov	r0, r4
 8007476:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800747a:	2103      	movs	r1, #3
 800747c:	f7ff ff64 	bl	8007348 <SCPI_RegSet>
        return SCPI_RES_OK;
 8007480:	2001      	movs	r0, #1
    }
    return SCPI_RES_ERR;
}
 8007482:	b002      	add	sp, #8
 8007484:	bd10      	pop	{r4, pc}
    return SCPI_RES_ERR;
 8007486:	f04f 30ff 	mov.w	r0, #4294967295
 800748a:	e7fa      	b.n	8007482 <SCPI_CoreEse+0x1c>

0800748c <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
 800748c:	b508      	push	{r3, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 800748e:	b128      	cbz	r0, 800749c <SCPI_CoreEseQ+0x10>
        return context->registers[name];
 8007490:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESE));
 8007494:	f000 fcc1 	bl	8007e1a <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 8007498:	2001      	movs	r0, #1
 800749a:	bd08      	pop	{r3, pc}
        return 0;
 800749c:	4601      	mov	r1, r0
 800749e:	e7f9      	b.n	8007494 <SCPI_CoreEseQ+0x8>

080074a0 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
 80074a0:	b510      	push	{r4, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 80074a2:	4604      	mov	r4, r0
 80074a4:	b158      	cbz	r0, 80074be <SCPI_CoreEsrQ+0x1e>
        return context->registers[name];
 80074a6:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESR));
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 fcb5 	bl	8007e1a <SCPI_ResultInt32>
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 80074b0:	4620      	mov	r0, r4
 80074b2:	2200      	movs	r2, #0
 80074b4:	2102      	movs	r1, #2
 80074b6:	f7ff ff47 	bl	8007348 <SCPI_RegSet>
    return SCPI_RES_OK;
}
 80074ba:	2001      	movs	r0, #1
 80074bc:	bd10      	pop	{r4, pc}
        return 0;
 80074be:	4601      	mov	r1, r0
 80074c0:	e7f3      	b.n	80074aa <SCPI_CoreEsrQ+0xa>
	...

080074c4 <SCPI_CoreIdnQ>:
 * 
 * example: MANUFACTURE,MODEL,0,01-02-01
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
 80074c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074c8:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < 4; i++) {
 80074ca:	2400      	movs	r4, #0
            else if (i == 1) // comm_data_usb.available
                j = 5;

            SCPI_ResultMnemonic(context, context->idn[j]);
        } else {
            SCPI_ResultMnemonic(context, "0");
 80074cc:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800751c <SCPI_CoreIdnQ+0x58>
            if (i == 1 && comm_d_uart.available)
 80074d0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8007520 <SCPI_CoreIdnQ+0x5c>
 80074d4:	f100 0684 	add.w	r6, r0, #132	; 0x84
        if (context->idn[i])
 80074d8:	f856 3b04 	ldr.w	r3, [r6], #4
 80074dc:	b1db      	cbz	r3, 8007516 <SCPI_CoreIdnQ+0x52>
            if (i == 1 && comm_d_uart.available)
 80074de:	2c01      	cmp	r4, #1
 80074e0:	d117      	bne.n	8007512 <SCPI_CoreIdnQ+0x4e>
 80074e2:	f899 3064 	ldrb.w	r3, [r9, #100]	; 0x64
                j = 5;
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bf14      	ite	ne
 80074ea:	2304      	movne	r3, #4
 80074ec:	2305      	moveq	r3, #5
            SCPI_ResultMnemonic(context, context->idn[j]);
 80074ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80074f2:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 80074f6:	4638      	mov	r0, r7
 80074f8:	f7f8 fe34 	bl	8000164 <strlen>
 80074fc:	4639      	mov	r1, r7
 80074fe:	4602      	mov	r2, r0
            SCPI_ResultMnemonic(context, "0");
 8007500:	4628      	mov	r0, r5
    for (i = 0; i < 4; i++) {
 8007502:	3401      	adds	r4, #1
            SCPI_ResultMnemonic(context, "0");
 8007504:	f000 fc78 	bl	8007df8 <SCPI_ResultCharacters>
    for (i = 0; i < 4; i++) {
 8007508:	2c04      	cmp	r4, #4
 800750a:	d1e5      	bne.n	80074d8 <SCPI_CoreIdnQ+0x14>
        }
    }
    return SCPI_RES_OK;
}
 800750c:	2001      	movs	r0, #1
 800750e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007512:	4623      	mov	r3, r4
 8007514:	e7eb      	b.n	80074ee <SCPI_CoreIdnQ+0x2a>
            SCPI_ResultMnemonic(context, "0");
 8007516:	2201      	movs	r2, #1
 8007518:	4641      	mov	r1, r8
 800751a:	e7f1      	b.n	8007500 <SCPI_CoreIdnQ+0x3c>
 800751c:	0800ad93 	.word	0x0800ad93
 8007520:	200005b0 	.word	0x200005b0

08007524 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
 8007524:	b508      	push	{r3, lr}
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
 8007526:	2201      	movs	r2, #1
 8007528:	2102      	movs	r1, #2
 800752a:	f7ff ff78 	bl	800741e <SCPI_RegSetBits>
    return SCPI_RES_OK;
}
 800752e:	2001      	movs	r0, #1
 8007530:	bd08      	pop	{r3, pc}

08007532 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
 8007532:	b508      	push	{r3, lr}
    /* Operation is always completed */
    SCPI_ResultInt32(context, 1);
 8007534:	2101      	movs	r1, #1
 8007536:	f000 fc70 	bl	8007e1a <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 800753a:	2001      	movs	r0, #1
 800753c:	bd08      	pop	{r3, pc}

0800753e <SCPI_CoreRst>:
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
    if (context && context->interface && context->interface->reset) {
 800753e:	b120      	cbz	r0, 800754a <SCPI_CoreRst+0xc>
 8007540:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007542:	b113      	cbz	r3, 800754a <SCPI_CoreRst+0xc>
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	b103      	cbz	r3, 800754a <SCPI_CoreRst+0xc>
        return context->interface->reset(context);
 8007548:	4718      	bx	r3
    }
    return SCPI_RES_OK;
}
 800754a:	2001      	movs	r0, #1
 800754c:	4770      	bx	lr

0800754e <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 800754e:	b513      	push	{r0, r1, r4, lr}
    int32_t new_SRE;
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 8007550:	2201      	movs	r2, #1
 8007552:	a901      	add	r1, sp, #4
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 8007554:	4604      	mov	r4, r0
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 8007556:	f000 fe25 	bl	80081a4 <SCPI_ParamInt32>
 800755a:	b140      	cbz	r0, 800756e <SCPI_CoreSre+0x20>
        SCPI_RegSet(context, SCPI_REG_SRE, (scpi_reg_val_t) new_SRE);
 800755c:	4620      	mov	r0, r4
 800755e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8007562:	2101      	movs	r1, #1
 8007564:	f7ff fef0 	bl	8007348 <SCPI_RegSet>
        return SCPI_RES_OK;
 8007568:	2001      	movs	r0, #1
    }
    return SCPI_RES_ERR;
}
 800756a:	b002      	add	sp, #8
 800756c:	bd10      	pop	{r4, pc}
    return SCPI_RES_ERR;
 800756e:	f04f 30ff 	mov.w	r0, #4294967295
 8007572:	e7fa      	b.n	800756a <SCPI_CoreSre+0x1c>

08007574 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
 8007574:	b508      	push	{r3, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 8007576:	b128      	cbz	r0, 8007584 <SCPI_CoreSreQ+0x10>
        return context->registers[name];
 8007578:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_SRE));
 800757c:	f000 fc4d 	bl	8007e1a <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 8007580:	2001      	movs	r0, #1
 8007582:	bd08      	pop	{r3, pc}
        return 0;
 8007584:	4601      	mov	r1, r0
 8007586:	e7f9      	b.n	800757c <SCPI_CoreSreQ+0x8>

08007588 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
 8007588:	b508      	push	{r3, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 800758a:	b128      	cbz	r0, 8007598 <SCPI_CoreStbQ+0x10>
        return context->registers[name];
 800758c:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_STB));
 8007590:	f000 fc43 	bl	8007e1a <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 8007594:	2001      	movs	r0, #1
 8007596:	bd08      	pop	{r3, pc}
        return 0;
 8007598:	4601      	mov	r1, r0
 800759a:	e7f9      	b.n	8007590 <SCPI_CoreStbQ+0x8>

0800759c <SCPI_CoreWai>:
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
}
 800759c:	2001      	movs	r0, #1
 800759e:	4770      	bx	lr

080075a0 <iseos>:
 * Is end of string
 * @param state
 * @return 
 */
static int iseos(lex_state_t * state) {
    if ((state->buffer + state->len) <= (state->pos)) {
 80075a0:	6803      	ldr	r3, [r0, #0]
 80075a2:	6882      	ldr	r2, [r0, #8]
 80075a4:	6840      	ldr	r0, [r0, #4]
 80075a6:	4413      	add	r3, r2
        return 1;
    } else {
        return 0;
    }
}
 80075a8:	4298      	cmp	r0, r3
 80075aa:	bf34      	ite	cc
 80075ac:	2000      	movcc	r0, #0
 80075ae:	2001      	movcs	r0, #1
 80075b0:	4770      	bx	lr

080075b2 <skipWs>:
/**
 * Skip all whitespaces
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
 80075b2:	b510      	push	{r4, lr}
    int someSpace = 0;
 80075b4:	2100      	movs	r1, #0
static int skipWs(lex_state_t * state) {
 80075b6:	4604      	mov	r4, r0
    while (!iseos(state) && isws(state->pos[0])) {
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7ff fff1 	bl	80075a0 <iseos>
 80075be:	b928      	cbnz	r0, 80075cc <skipWs+0x1a>
 80075c0:	6863      	ldr	r3, [r4, #4]
 80075c2:	781a      	ldrb	r2, [r3, #0]
    if ((c == ' ') || (c == '\t')) {
 80075c4:	2a20      	cmp	r2, #32
 80075c6:	d003      	beq.n	80075d0 <skipWs+0x1e>
 80075c8:	2a09      	cmp	r2, #9
 80075ca:	d001      	beq.n	80075d0 <skipWs+0x1e>
        state->pos++;
        someSpace++;
    }

    return someSpace;
}
 80075cc:	4608      	mov	r0, r1
 80075ce:	bd10      	pop	{r4, pc}
        state->pos++;
 80075d0:	3301      	adds	r3, #1
 80075d2:	6063      	str	r3, [r4, #4]
        someSpace++;
 80075d4:	3101      	adds	r1, #1
 80075d6:	e7ef      	b.n	80075b8 <skipWs+0x6>

080075d8 <skipQuoteProgramData>:
/* 7.7.5 <STRING PROGRAM DATA> */
static int isascii7bit(int c) {
    return (c >= 0) && (c <= 0x7f);
}

static void skipQuoteProgramData(lex_state_t * state, char quote) {
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4604      	mov	r4, r0
    while (!iseos(state)) {
 80075dc:	4620      	mov	r0, r4
 80075de:	f7ff ffdf 	bl	80075a0 <iseos>
 80075e2:	b990      	cbnz	r0, 800760a <skipQuoteProgramData+0x32>
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 80075e4:	6865      	ldr	r5, [r4, #4]
 80075e6:	782a      	ldrb	r2, [r5, #0]
 80075e8:	0613      	lsls	r3, r2, #24
 80075ea:	d40e      	bmi.n	800760a <skipQuoteProgramData+0x32>
 80075ec:	1c6b      	adds	r3, r5, #1
 80075ee:	428a      	cmp	r2, r1
            state->pos++;
 80075f0:	6063      	str	r3, [r4, #4]
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 80075f2:	d1f3      	bne.n	80075dc <skipQuoteProgramData+0x4>
        } else if (ischr(state, quote)) {
            state->pos++;
            if (!iseos(state) && ischr(state, quote)) {
 80075f4:	4620      	mov	r0, r4
 80075f6:	f7ff ffd3 	bl	80075a0 <iseos>
 80075fa:	b928      	cbnz	r0, 8007608 <skipQuoteProgramData+0x30>
 80075fc:	786b      	ldrb	r3, [r5, #1]
 80075fe:	428b      	cmp	r3, r1
 8007600:	d102      	bne.n	8007608 <skipQuoteProgramData+0x30>
                state->pos++;
 8007602:	3502      	adds	r5, #2
 8007604:	6065      	str	r5, [r4, #4]
 8007606:	e7e9      	b.n	80075dc <skipQuoteProgramData+0x4>
            } else {
                state->pos--;
 8007608:	6065      	str	r5, [r4, #4]
            }
        } else {
            break;
        }
    }
}
 800760a:	bd38      	pop	{r3, r4, r5, pc}

0800760c <skipProgramMnemonic>:
static int skipProgramMnemonic(lex_state_t * state) {
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4604      	mov	r4, r0
    const char * startPos = state->pos;
 8007610:	6845      	ldr	r5, [r0, #4]
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8007612:	f7ff ffc5 	bl	80075a0 <iseos>
 8007616:	b130      	cbz	r0, 8007626 <skipProgramMnemonic+0x1a>
    if (iseos(state)) {
 8007618:	4620      	mov	r0, r4
 800761a:	f7ff ffc1 	bl	80075a0 <iseos>
 800761e:	6863      	ldr	r3, [r4, #4]
 8007620:	b1d8      	cbz	r0, 800765a <skipProgramMnemonic+0x4e>
        return (state->pos - startPos) * SKIP_INCOMPLETE;
 8007622:	1ae8      	subs	r0, r5, r3
}
 8007624:	bd38      	pop	{r3, r4, r5, pc}
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8007626:	f001 fa15 	bl	8008a54 <__locale_ctype_ptr>
 800762a:	6863      	ldr	r3, [r4, #4]
 800762c:	781a      	ldrb	r2, [r3, #0]
 800762e:	4410      	add	r0, r2
 8007630:	7842      	ldrb	r2, [r0, #1]
 8007632:	0790      	lsls	r0, r2, #30
 8007634:	d0f0      	beq.n	8007618 <skipProgramMnemonic+0xc>
            state->pos++;
 8007636:	3301      	adds	r3, #1
 8007638:	6063      	str	r3, [r4, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800763a:	4620      	mov	r0, r4
 800763c:	f7ff ffb0 	bl	80075a0 <iseos>
 8007640:	2800      	cmp	r0, #0
 8007642:	d1e9      	bne.n	8007618 <skipProgramMnemonic+0xc>
 8007644:	f001 fa06 	bl	8008a54 <__locale_ctype_ptr>
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	781a      	ldrb	r2, [r3, #0]
 800764c:	4410      	add	r0, r2
 800764e:	7841      	ldrb	r1, [r0, #1]
 8007650:	0749      	lsls	r1, r1, #29
 8007652:	d1f0      	bne.n	8007636 <skipProgramMnemonic+0x2a>
 8007654:	2a5f      	cmp	r2, #95	; 0x5f
 8007656:	d0ee      	beq.n	8007636 <skipProgramMnemonic+0x2a>
 8007658:	e7de      	b.n	8007618 <skipProgramMnemonic+0xc>
        return (state->pos - startPos) * SKIP_OK;
 800765a:	1b58      	subs	r0, r3, r5
 800765c:	e7e2      	b.n	8007624 <skipProgramMnemonic+0x18>

0800765e <skipNumbers>:
static int skipNumbers(lex_state_t * state) {
 800765e:	b538      	push	{r3, r4, r5, lr}
 8007660:	4605      	mov	r5, r0
    int someNumbers = 0;
 8007662:	2400      	movs	r4, #0
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8007664:	4628      	mov	r0, r5
 8007666:	f7ff ff9b 	bl	80075a0 <iseos>
 800766a:	b938      	cbnz	r0, 800767c <skipNumbers+0x1e>
 800766c:	f001 f9f2 	bl	8008a54 <__locale_ctype_ptr>
 8007670:	686b      	ldr	r3, [r5, #4]
 8007672:	781a      	ldrb	r2, [r3, #0]
 8007674:	4410      	add	r0, r2
 8007676:	7842      	ldrb	r2, [r0, #1]
 8007678:	0752      	lsls	r2, r2, #29
 800767a:	d401      	bmi.n	8007680 <skipNumbers+0x22>
}
 800767c:	4620      	mov	r0, r4
 800767e:	bd38      	pop	{r3, r4, r5, pc}
        state->pos++;
 8007680:	3301      	adds	r3, #1
 8007682:	606b      	str	r3, [r5, #4]
        someNumbers++;
 8007684:	3401      	adds	r4, #1
 8007686:	e7ed      	b.n	8007664 <skipNumbers+0x6>

08007688 <skipAlpha>:
static int skipAlpha(lex_state_t * state) {
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4605      	mov	r5, r0
    int someLetters = 0;
 800768c:	2400      	movs	r4, #0
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800768e:	4628      	mov	r0, r5
 8007690:	f7ff ff86 	bl	80075a0 <iseos>
 8007694:	b938      	cbnz	r0, 80076a6 <skipAlpha+0x1e>
 8007696:	f001 f9dd 	bl	8008a54 <__locale_ctype_ptr>
 800769a:	686b      	ldr	r3, [r5, #4]
 800769c:	781a      	ldrb	r2, [r3, #0]
 800769e:	4410      	add	r0, r2
 80076a0:	7842      	ldrb	r2, [r0, #1]
 80076a2:	0792      	lsls	r2, r2, #30
 80076a4:	d101      	bne.n	80076aa <skipAlpha+0x22>
}
 80076a6:	4620      	mov	r0, r4
 80076a8:	bd38      	pop	{r3, r4, r5, pc}
        state->pos++;
 80076aa:	3301      	adds	r3, #1
 80076ac:	606b      	str	r3, [r5, #4]
        someLetters++;
 80076ae:	3401      	adds	r4, #1
 80076b0:	e7ed      	b.n	800768e <skipAlpha+0x6>

080076b2 <skipPlusmn>:
static int skipPlusmn(lex_state_t * state) {
 80076b2:	b508      	push	{r3, lr}
 80076b4:	4601      	mov	r1, r0
    if (!iseos(state) && isplusmn(state->pos[0])) {
 80076b6:	f7ff ff73 	bl	80075a0 <iseos>
 80076ba:	b948      	cbnz	r0, 80076d0 <skipPlusmn+0x1e>
 80076bc:	684b      	ldr	r3, [r1, #4]
 80076be:	781a      	ldrb	r2, [r3, #0]
    return c == '+' || c == '-';
 80076c0:	2a2b      	cmp	r2, #43	; 0x2b
 80076c2:	d001      	beq.n	80076c8 <skipPlusmn+0x16>
 80076c4:	2a2d      	cmp	r2, #45	; 0x2d
 80076c6:	d102      	bne.n	80076ce <skipPlusmn+0x1c>
        return SKIP_OK;
 80076c8:	2001      	movs	r0, #1
        state->pos++;
 80076ca:	3301      	adds	r3, #1
 80076cc:	604b      	str	r3, [r1, #4]
}
 80076ce:	bd08      	pop	{r3, pc}
        return SKIP_NONE;
 80076d0:	2000      	movs	r0, #0
 80076d2:	e7fc      	b.n	80076ce <skipPlusmn+0x1c>

080076d4 <skipChr>:
static int skipChr(lex_state_t * state, char chr) {
 80076d4:	b510      	push	{r4, lr}
 80076d6:	4604      	mov	r4, r0
    if (!iseos(state) && ischr(state, chr)) {
 80076d8:	f7ff ff62 	bl	80075a0 <iseos>
 80076dc:	b938      	cbnz	r0, 80076ee <skipChr+0x1a>
 80076de:	6863      	ldr	r3, [r4, #4]
 80076e0:	781a      	ldrb	r2, [r3, #0]
 80076e2:	428a      	cmp	r2, r1
 80076e4:	d102      	bne.n	80076ec <skipChr+0x18>
        return SKIP_OK;
 80076e6:	2001      	movs	r0, #1
        state->pos++;
 80076e8:	3301      	adds	r3, #1
 80076ea:	6063      	str	r3, [r4, #4]
}
 80076ec:	bd10      	pop	{r4, pc}
        return SKIP_NONE;
 80076ee:	2000      	movs	r0, #0
 80076f0:	e7fc      	b.n	80076ec <skipChr+0x18>

080076f2 <skipDigit>:
static int skipDigit(lex_state_t * state) {
 80076f2:	b510      	push	{r4, lr}
 80076f4:	4604      	mov	r4, r0
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 80076f6:	f7ff ff53 	bl	80075a0 <iseos>
 80076fa:	b108      	cbz	r0, 8007700 <skipDigit+0xe>
        return SKIP_NONE;
 80076fc:	2000      	movs	r0, #0
}
 80076fe:	bd10      	pop	{r4, pc}
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8007700:	f001 f9a8 	bl	8008a54 <__locale_ctype_ptr>
 8007704:	6863      	ldr	r3, [r4, #4]
 8007706:	781a      	ldrb	r2, [r3, #0]
 8007708:	4410      	add	r0, r2
 800770a:	7842      	ldrb	r2, [r0, #1]
 800770c:	0752      	lsls	r2, r2, #29
 800770e:	d5f5      	bpl.n	80076fc <skipDigit+0xa>
        state->pos++;
 8007710:	3301      	adds	r3, #1
 8007712:	6063      	str	r3, [r4, #4]
        return SKIP_OK;
 8007714:	2001      	movs	r0, #1
 8007716:	e7f2      	b.n	80076fe <skipDigit+0xc>

08007718 <scpiLex_IsEos>:
    return iseos(state);
 8007718:	f7ff bf42 	b.w	80075a0 <iseos>

0800771c <scpiLex_WhiteSpace>:
int scpiLex_WhiteSpace(lex_state_t * state, scpi_token_t * token) {
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	460c      	mov	r4, r1
 8007720:	4605      	mov	r5, r0
    token->ptr = state->pos;
 8007722:	6843      	ldr	r3, [r0, #4]
 8007724:	604b      	str	r3, [r1, #4]
    skipWs(state);
 8007726:	f7ff ff44 	bl	80075b2 <skipWs>
    token->len = state->pos - token->ptr;
 800772a:	6863      	ldr	r3, [r4, #4]
 800772c:	6868      	ldr	r0, [r5, #4]
 800772e:	1ac0      	subs	r0, r0, r3
    if (token->len > 0) {
 8007730:	2800      	cmp	r0, #0
        token->type = SCPI_TOKEN_WS;
 8007732:	bfcc      	ite	gt
 8007734:	2317      	movgt	r3, #23
        token->type = SCPI_TOKEN_UNKNOWN;
 8007736:	231a      	movle	r3, #26
    token->len = state->pos - token->ptr;
 8007738:	60a0      	str	r0, [r4, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 800773a:	7023      	strb	r3, [r4, #0]
}
 800773c:	bd38      	pop	{r3, r4, r5, pc}

0800773e <scpiLex_ProgramHeader>:
    token->ptr = state->pos;
 800773e:	6843      	ldr	r3, [r0, #4]
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 8007740:	b570      	push	{r4, r5, r6, lr}
    token->ptr = state->pos;
 8007742:	604b      	str	r3, [r1, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8007744:	231a      	movs	r3, #26
 8007746:	700b      	strb	r3, [r1, #0]
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 8007748:	4604      	mov	r4, r0
 800774a:	460d      	mov	r5, r1
    if (!iseos(state) && ischr(state, '*')) {
 800774c:	f7ff ff28 	bl	80075a0 <iseos>
 8007750:	4606      	mov	r6, r0
 8007752:	2800      	cmp	r0, #0
 8007754:	d130      	bne.n	80077b8 <scpiLex_ProgramHeader+0x7a>
 8007756:	6863      	ldr	r3, [r4, #4]
 8007758:	781a      	ldrb	r2, [r3, #0]
 800775a:	2a2a      	cmp	r2, #42	; 0x2a
 800775c:	d11d      	bne.n	800779a <scpiLex_ProgramHeader+0x5c>
        state->pos++;
 800775e:	3301      	adds	r3, #1
 8007760:	6063      	str	r3, [r4, #4]
        res = skipProgramMnemonic(state);
 8007762:	4620      	mov	r0, r4
 8007764:	f7ff ff52 	bl	800760c <skipProgramMnemonic>
        if (res == SKIP_NONE && iseos(state)) {
 8007768:	b970      	cbnz	r0, 8007788 <scpiLex_ProgramHeader+0x4a>
        token->type = SCPI_TOKEN_INCOMPLETE_COMMON_PROGRAM_HEADER;
 800776a:	2314      	movs	r3, #20
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 800776c:	702b      	strb	r3, [r5, #0]
    if (token->type != SCPI_TOKEN_UNKNOWN) {
 800776e:	782b      	ldrb	r3, [r5, #0]
 8007770:	686a      	ldr	r2, [r5, #4]
 8007772:	2b1a      	cmp	r3, #26
        token->len = 0;
 8007774:	bf0b      	itete	eq
 8007776:	2300      	moveq	r3, #0
        token->len = state->pos - token->ptr;
 8007778:	6863      	ldrne	r3, [r4, #4]
        token->len = 0;
 800777a:	60ab      	streq	r3, [r5, #8]
        token->len = state->pos - token->ptr;
 800777c:	1a9b      	subne	r3, r3, r2
 800777e:	bf14      	ite	ne
 8007780:	60ab      	strne	r3, [r5, #8]
        state->pos = token->ptr;
 8007782:	6062      	streq	r2, [r4, #4]
}
 8007784:	68a8      	ldr	r0, [r5, #8]
 8007786:	bd70      	pop	{r4, r5, r6, pc}
        if (skipChr(state, '?') >= SKIP_OK) {
 8007788:	213f      	movs	r1, #63	; 0x3f
 800778a:	4620      	mov	r0, r4
 800778c:	f7ff ffa2 	bl	80076d4 <skipChr>
 8007790:	2800      	cmp	r0, #0
            token->type = SCPI_TOKEN_COMMON_QUERY_PROGRAM_HEADER;
 8007792:	bfcc      	ite	gt
 8007794:	2316      	movgt	r3, #22
            token->type = SCPI_TOKEN_COMMON_PROGRAM_HEADER;
 8007796:	2313      	movle	r3, #19
 8007798:	e7e8      	b.n	800776c <scpiLex_ProgramHeader+0x2e>
    if (!iseos(state) && ischr(state, ':')) {
 800779a:	2a3a      	cmp	r2, #58	; 0x3a
 800779c:	d102      	bne.n	80077a4 <scpiLex_ProgramHeader+0x66>
        return SKIP_OK;
 800779e:	2601      	movs	r6, #1
        state->pos++;
 80077a0:	3301      	adds	r3, #1
 80077a2:	6063      	str	r3, [r4, #4]
    res = skipProgramMnemonic(state);
 80077a4:	4620      	mov	r0, r4
 80077a6:	f7ff ff31 	bl	800760c <skipProgramMnemonic>
    if (res >= SKIP_OK) {
 80077aa:	2800      	cmp	r0, #0
 80077ac:	dc07      	bgt.n	80077be <scpiLex_ProgramHeader+0x80>
    } else if (res <= SKIP_INCOMPLETE) {
 80077ae:	d115      	bne.n	80077dc <scpiLex_ProgramHeader+0x9e>
    } else if (firstColon) {
 80077b0:	2e00      	cmp	r6, #0
 80077b2:	d0dc      	beq.n	800776e <scpiLex_ProgramHeader+0x30>
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 80077b4:	2312      	movs	r3, #18
 80077b6:	e7d9      	b.n	800776c <scpiLex_ProgramHeader+0x2e>
        return SKIP_NONE;
 80077b8:	2600      	movs	r6, #0
 80077ba:	e7f3      	b.n	80077a4 <scpiLex_ProgramHeader+0x66>
            } else if (res == SKIP_NONE) {
 80077bc:	d0fa      	beq.n	80077b4 <scpiLex_ProgramHeader+0x76>
    if (!iseos(state) && ischr(state, ':')) {
 80077be:	4620      	mov	r0, r4
 80077c0:	f7ff feee 	bl	80075a0 <iseos>
 80077c4:	b950      	cbnz	r0, 80077dc <scpiLex_ProgramHeader+0x9e>
 80077c6:	6863      	ldr	r3, [r4, #4]
 80077c8:	781a      	ldrb	r2, [r3, #0]
 80077ca:	2a3a      	cmp	r2, #58	; 0x3a
 80077cc:	d106      	bne.n	80077dc <scpiLex_ProgramHeader+0x9e>
        state->pos++;
 80077ce:	3301      	adds	r3, #1
 80077d0:	6063      	str	r3, [r4, #4]
            res = skipProgramMnemonic(state);
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7ff ff1a 	bl	800760c <skipProgramMnemonic>
            if (res <= SKIP_INCOMPLETE) {
 80077d8:	2800      	cmp	r0, #0
 80077da:	daef      	bge.n	80077bc <scpiLex_ProgramHeader+0x7e>
            if (skipChr(state, '?') >= SKIP_OK) {
 80077dc:	213f      	movs	r1, #63	; 0x3f
 80077de:	4620      	mov	r0, r4
 80077e0:	f7ff ff78 	bl	80076d4 <skipChr>
 80077e4:	2800      	cmp	r0, #0
                token->type = SCPI_TOKEN_COMPOUND_QUERY_PROGRAM_HEADER;
 80077e6:	bfcc      	ite	gt
 80077e8:	2315      	movgt	r3, #21
                token->type = SCPI_TOKEN_COMPOUND_PROGRAM_HEADER;
 80077ea:	2311      	movle	r3, #17
 80077ec:	e7be      	b.n	800776c <scpiLex_ProgramHeader+0x2e>

080077ee <scpiLex_CharacterProgramData>:
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 80077ee:	b538      	push	{r3, r4, r5, lr}
    token->ptr = state->pos;
 80077f0:	6843      	ldr	r3, [r0, #4]
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 80077f2:	4604      	mov	r4, r0
    token->ptr = state->pos;
 80077f4:	604b      	str	r3, [r1, #4]
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 80077f6:	460d      	mov	r5, r1
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 80077f8:	f7ff fed2 	bl	80075a0 <iseos>
 80077fc:	b138      	cbz	r0, 800780e <scpiLex_CharacterProgramData+0x20>
    token->len = state->pos - token->ptr;
 80077fe:	6860      	ldr	r0, [r4, #4]
 8007800:	686b      	ldr	r3, [r5, #4]
 8007802:	1ac0      	subs	r0, r0, r3
    if (token->len > 0) {
 8007804:	2800      	cmp	r0, #0
    token->len = state->pos - token->ptr;
 8007806:	60a8      	str	r0, [r5, #8]
    if (token->len > 0) {
 8007808:	dc1b      	bgt.n	8007842 <scpiLex_CharacterProgramData+0x54>
        token->type = SCPI_TOKEN_UNKNOWN;
 800780a:	231a      	movs	r3, #26
 800780c:	e01a      	b.n	8007844 <scpiLex_CharacterProgramData+0x56>
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800780e:	f001 f921 	bl	8008a54 <__locale_ctype_ptr>
 8007812:	6863      	ldr	r3, [r4, #4]
 8007814:	781a      	ldrb	r2, [r3, #0]
 8007816:	4410      	add	r0, r2
 8007818:	7842      	ldrb	r2, [r0, #1]
 800781a:	0790      	lsls	r0, r2, #30
 800781c:	d0ef      	beq.n	80077fe <scpiLex_CharacterProgramData+0x10>
            state->pos++;
 800781e:	3301      	adds	r3, #1
 8007820:	6063      	str	r3, [r4, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8007822:	4620      	mov	r0, r4
 8007824:	f7ff febc 	bl	80075a0 <iseos>
 8007828:	2800      	cmp	r0, #0
 800782a:	d1e8      	bne.n	80077fe <scpiLex_CharacterProgramData+0x10>
 800782c:	f001 f912 	bl	8008a54 <__locale_ctype_ptr>
 8007830:	6863      	ldr	r3, [r4, #4]
 8007832:	781a      	ldrb	r2, [r3, #0]
 8007834:	4410      	add	r0, r2
 8007836:	7841      	ldrb	r1, [r0, #1]
 8007838:	0749      	lsls	r1, r1, #29
 800783a:	d1f0      	bne.n	800781e <scpiLex_CharacterProgramData+0x30>
 800783c:	2a5f      	cmp	r2, #95	; 0x5f
 800783e:	d0ee      	beq.n	800781e <scpiLex_CharacterProgramData+0x30>
 8007840:	e7dd      	b.n	80077fe <scpiLex_CharacterProgramData+0x10>
        token->type = SCPI_TOKEN_PROGRAM_MNEMONIC;
 8007842:	2309      	movs	r3, #9
        token->type = SCPI_TOKEN_UNKNOWN;
 8007844:	702b      	strb	r3, [r5, #0]
}
 8007846:	bd38      	pop	{r3, r4, r5, pc}

08007848 <scpiLex_DecimalNumericProgramData>:
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 8007848:	b570      	push	{r4, r5, r6, lr}
 800784a:	4604      	mov	r4, r0
    token->ptr = state->pos;
 800784c:	6843      	ldr	r3, [r0, #4]
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 800784e:	460d      	mov	r5, r1
    token->ptr = state->pos;
 8007850:	604b      	str	r3, [r1, #4]
    skipPlusmn(state);
 8007852:	f7ff ff2e 	bl	80076b2 <skipPlusmn>
    someNumbers += skipNumbers(state);
 8007856:	4620      	mov	r0, r4
 8007858:	f7ff ff01 	bl	800765e <skipNumbers>
    if (skipChr(state, '.')) {
 800785c:	212e      	movs	r1, #46	; 0x2e
    someNumbers += skipNumbers(state);
 800785e:	4606      	mov	r6, r0
    if (skipChr(state, '.')) {
 8007860:	4620      	mov	r0, r4
 8007862:	f7ff ff37 	bl	80076d4 <skipChr>
 8007866:	b118      	cbz	r0, 8007870 <scpiLex_DecimalNumericProgramData+0x28>
        someNumbers += skipNumbers(state);
 8007868:	4620      	mov	r0, r4
 800786a:	f7ff fef8 	bl	800765e <skipNumbers>
 800786e:	4406      	add	r6, r0
    if (skipMantisa(state)) {
 8007870:	b336      	cbz	r6, 80078c0 <scpiLex_DecimalNumericProgramData+0x78>
        skipWs(state);
 8007872:	4620      	mov	r0, r4
        rollback = state->pos;
 8007874:	6866      	ldr	r6, [r4, #4]
        skipWs(state);
 8007876:	f7ff fe9c 	bl	80075b2 <skipWs>
    if (!iseos(state) && isE(state->pos[0])) {
 800787a:	4620      	mov	r0, r4
 800787c:	f7ff fe90 	bl	80075a0 <iseos>
 8007880:	b150      	cbz	r0, 8007898 <scpiLex_DecimalNumericProgramData+0x50>
            state->pos = rollback;
 8007882:	6066      	str	r6, [r4, #4]
    token->len = state->pos - token->ptr;
 8007884:	686b      	ldr	r3, [r5, #4]
 8007886:	6860      	ldr	r0, [r4, #4]
 8007888:	1ac0      	subs	r0, r0, r3
    if (token->len > 0) {
 800788a:	2800      	cmp	r0, #0
        token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA;
 800788c:	bfcc      	ite	gt
 800788e:	230a      	movgt	r3, #10
        token->type = SCPI_TOKEN_UNKNOWN;
 8007890:	231a      	movle	r3, #26
    token->len = state->pos - token->ptr;
 8007892:	60a8      	str	r0, [r5, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8007894:	702b      	strb	r3, [r5, #0]
}
 8007896:	bd70      	pop	{r4, r5, r6, pc}
    if (!iseos(state) && isE(state->pos[0])) {
 8007898:	6863      	ldr	r3, [r4, #4]
    return c == 'e' || c == 'E';
 800789a:	781a      	ldrb	r2, [r3, #0]
 800789c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80078a0:	2a45      	cmp	r2, #69	; 0x45
 80078a2:	d1ee      	bne.n	8007882 <scpiLex_DecimalNumericProgramData+0x3a>
        state->pos++;
 80078a4:	3301      	adds	r3, #1
 80078a6:	6063      	str	r3, [r4, #4]
        skipWs(state);
 80078a8:	4620      	mov	r0, r4
 80078aa:	f7ff fe82 	bl	80075b2 <skipWs>
        skipPlusmn(state);
 80078ae:	4620      	mov	r0, r4
 80078b0:	f7ff feff 	bl	80076b2 <skipPlusmn>
        someNumbers = skipNumbers(state);
 80078b4:	4620      	mov	r0, r4
 80078b6:	f7ff fed2 	bl	800765e <skipNumbers>
        if (!skipExponent(state)) {
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d1e2      	bne.n	8007884 <scpiLex_DecimalNumericProgramData+0x3c>
 80078be:	e7e0      	b.n	8007882 <scpiLex_DecimalNumericProgramData+0x3a>
        state->pos = token->ptr;
 80078c0:	686b      	ldr	r3, [r5, #4]
 80078c2:	6063      	str	r3, [r4, #4]
 80078c4:	e7de      	b.n	8007884 <scpiLex_DecimalNumericProgramData+0x3c>

080078c6 <scpiLex_SuffixProgramData>:
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 80078c6:	b538      	push	{r3, r4, r5, lr}
 80078c8:	4604      	mov	r4, r0
    token->ptr = state->pos;
 80078ca:	6843      	ldr	r3, [r0, #4]
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 80078cc:	460d      	mov	r5, r1
    token->ptr = state->pos;
 80078ce:	604b      	str	r3, [r1, #4]
    skipChr(state, '/');
 80078d0:	212f      	movs	r1, #47	; 0x2f
 80078d2:	f7ff feff 	bl	80076d4 <skipChr>
    if (skipAlpha(state)) {
 80078d6:	4620      	mov	r0, r4
 80078d8:	f7ff fed6 	bl	8007688 <skipAlpha>
 80078dc:	b1a8      	cbz	r0, 800790a <scpiLex_SuffixProgramData+0x44>
        skipChr(state, '-');
 80078de:	212d      	movs	r1, #45	; 0x2d
 80078e0:	4620      	mov	r0, r4
 80078e2:	f7ff fef7 	bl	80076d4 <skipChr>
        skipDigit(state);
 80078e6:	4620      	mov	r0, r4
 80078e8:	f7ff ff03 	bl	80076f2 <skipDigit>
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 80078ec:	4620      	mov	r0, r4
 80078ee:	f7ff fe57 	bl	80075a0 <iseos>
 80078f2:	b950      	cbnz	r0, 800790a <scpiLex_SuffixProgramData+0x44>
 80078f4:	6863      	ldr	r3, [r4, #4]
    return (state->pos[0] == chr);
 80078f6:	781a      	ldrb	r2, [r3, #0]
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 80078f8:	3a2e      	subs	r2, #46	; 0x2e
 80078fa:	2a01      	cmp	r2, #1
 80078fc:	d805      	bhi.n	800790a <scpiLex_SuffixProgramData+0x44>
        state->pos++;
 80078fe:	3301      	adds	r3, #1
 8007900:	6063      	str	r3, [r4, #4]
            skipAlpha(state);
 8007902:	4620      	mov	r0, r4
 8007904:	f7ff fec0 	bl	8007688 <skipAlpha>
 8007908:	e7e9      	b.n	80078de <scpiLex_SuffixProgramData+0x18>
    token->len = state->pos - token->ptr;
 800790a:	6863      	ldr	r3, [r4, #4]
 800790c:	686a      	ldr	r2, [r5, #4]
 800790e:	1a9b      	subs	r3, r3, r2
    if ((token->len > 0)) {
 8007910:	2b00      	cmp	r3, #0
    token->len = state->pos - token->ptr;
 8007912:	60ab      	str	r3, [r5, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8007914:	bfdd      	ittte	le
 8007916:	231a      	movle	r3, #26
 8007918:	702b      	strble	r3, [r5, #0]
        token->len = 0;
 800791a:	2300      	movle	r3, #0
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 800791c:	230c      	movgt	r3, #12
        state->pos = token->ptr;
 800791e:	bfda      	itte	le
 8007920:	6062      	strle	r2, [r4, #4]
        token->len = 0;
 8007922:	60ab      	strle	r3, [r5, #8]
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 8007924:	702b      	strbgt	r3, [r5, #0]
}
 8007926:	68a8      	ldr	r0, [r5, #8]
 8007928:	bd38      	pop	{r3, r4, r5, pc}

0800792a <scpiLex_NondecimalNumericData>:
    token->ptr = state->pos;
 800792a:	6843      	ldr	r3, [r0, #4]
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	460d      	mov	r5, r1
    token->ptr = state->pos;
 8007930:	604b      	str	r3, [r1, #4]
    if (skipChr(state, '#')) {
 8007932:	2123      	movs	r1, #35	; 0x23
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 8007934:	4604      	mov	r4, r0
    if (skipChr(state, '#')) {
 8007936:	f7ff fecd 	bl	80076d4 <skipChr>
 800793a:	2800      	cmp	r0, #0
 800793c:	d054      	beq.n	80079e8 <scpiLex_NondecimalNumericData+0xbe>
        if (!iseos(state)) {
 800793e:	4620      	mov	r0, r4
 8007940:	f7ff fe2e 	bl	80075a0 <iseos>
 8007944:	4606      	mov	r6, r0
 8007946:	2800      	cmp	r0, #0
 8007948:	d14e      	bne.n	80079e8 <scpiLex_NondecimalNumericData+0xbe>
            if (isH(state->pos[0])) {
 800794a:	6863      	ldr	r3, [r4, #4]
    return c == 'h' || c == 'H';
 800794c:	781a      	ldrb	r2, [r3, #0]
 800794e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007952:	2a48      	cmp	r2, #72	; 0x48
 8007954:	d122      	bne.n	800799c <scpiLex_NondecimalNumericData+0x72>
                state->pos++;
 8007956:	3301      	adds	r3, #1
 8007958:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 800795a:	4620      	mov	r0, r4
 800795c:	f7ff fe20 	bl	80075a0 <iseos>
 8007960:	b178      	cbz	r0, 8007982 <scpiLex_NondecimalNumericData+0x58>
                token->type = SCPI_TOKEN_HEXNUM;
 8007962:	2306      	movs	r3, #6
                token->type = SCPI_TOKEN_BINNUM;
 8007964:	702b      	strb	r3, [r5, #0]
    if (someNumbers) {
 8007966:	2e00      	cmp	r6, #0
 8007968:	d03e      	beq.n	80079e8 <scpiLex_NondecimalNumericData+0xbe>
        token->ptr += 2; /* ignore number prefix */
 800796a:	686b      	ldr	r3, [r5, #4]
        token->len = state->pos - token->ptr;
 800796c:	6862      	ldr	r2, [r4, #4]
        token->ptr += 2; /* ignore number prefix */
 800796e:	3302      	adds	r3, #2
 8007970:	606b      	str	r3, [r5, #4]
        token->len = state->pos - token->ptr;
 8007972:	1ad3      	subs	r3, r2, r3
        token->len = 0;
 8007974:	60ab      	str	r3, [r5, #8]
    return token->len > 0 ? token->len + 2 : 0;
 8007976:	68a8      	ldr	r0, [r5, #8]
 8007978:	2800      	cmp	r0, #0
 800797a:	bfcc      	ite	gt
 800797c:	3002      	addgt	r0, #2
 800797e:	2000      	movle	r0, #0
}
 8007980:	bd70      	pop	{r4, r5, r6, pc}
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8007982:	f001 f867 	bl	8008a54 <__locale_ctype_ptr>
 8007986:	6863      	ldr	r3, [r4, #4]
 8007988:	781a      	ldrb	r2, [r3, #0]
 800798a:	4410      	add	r0, r2
 800798c:	7842      	ldrb	r2, [r0, #1]
 800798e:	f012 0f44 	tst.w	r2, #68	; 0x44
 8007992:	d0e6      	beq.n	8007962 <scpiLex_NondecimalNumericData+0x38>
        state->pos++;
 8007994:	3301      	adds	r3, #1
 8007996:	6063      	str	r3, [r4, #4]
        someNumbers++;
 8007998:	3601      	adds	r6, #1
 800799a:	e7de      	b.n	800795a <scpiLex_NondecimalNumericData+0x30>
    return c == 'q' || c == 'Q';
 800799c:	2a51      	cmp	r2, #81	; 0x51
 800799e:	d110      	bne.n	80079c2 <scpiLex_NondecimalNumericData+0x98>
                state->pos++;
 80079a0:	3301      	adds	r3, #1
 80079a2:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 80079a4:	4620      	mov	r0, r4
 80079a6:	f7ff fdfb 	bl	80075a0 <iseos>
 80079aa:	b940      	cbnz	r0, 80079be <scpiLex_NondecimalNumericData+0x94>
 80079ac:	6863      	ldr	r3, [r4, #4]
    if ((c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7')) {
 80079ae:	781a      	ldrb	r2, [r3, #0]
 80079b0:	3a30      	subs	r2, #48	; 0x30
 80079b2:	2a07      	cmp	r2, #7
 80079b4:	d803      	bhi.n	80079be <scpiLex_NondecimalNumericData+0x94>
        state->pos++;
 80079b6:	3301      	adds	r3, #1
 80079b8:	6063      	str	r3, [r4, #4]
        someNumbers++;
 80079ba:	3601      	adds	r6, #1
 80079bc:	e7f2      	b.n	80079a4 <scpiLex_NondecimalNumericData+0x7a>
                token->type = SCPI_TOKEN_OCTNUM;
 80079be:	2307      	movs	r3, #7
 80079c0:	e7d0      	b.n	8007964 <scpiLex_NondecimalNumericData+0x3a>
    return c == 'b' || c == 'B';
 80079c2:	2a42      	cmp	r2, #66	; 0x42
 80079c4:	d110      	bne.n	80079e8 <scpiLex_NondecimalNumericData+0xbe>
                state->pos++;
 80079c6:	3301      	adds	r3, #1
 80079c8:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 80079ca:	4620      	mov	r0, r4
 80079cc:	f7ff fde8 	bl	80075a0 <iseos>
 80079d0:	b940      	cbnz	r0, 80079e4 <scpiLex_NondecimalNumericData+0xba>
 80079d2:	6863      	ldr	r3, [r4, #4]
    if ((c == '0') || (c == '1')) {
 80079d4:	781a      	ldrb	r2, [r3, #0]
 80079d6:	3a30      	subs	r2, #48	; 0x30
 80079d8:	2a01      	cmp	r2, #1
 80079da:	d803      	bhi.n	80079e4 <scpiLex_NondecimalNumericData+0xba>
        state->pos++;
 80079dc:	3301      	adds	r3, #1
 80079de:	6063      	str	r3, [r4, #4]
        someNumbers++;
 80079e0:	3601      	adds	r6, #1
 80079e2:	e7f2      	b.n	80079ca <scpiLex_NondecimalNumericData+0xa0>
                token->type = SCPI_TOKEN_BINNUM;
 80079e4:	2308      	movs	r3, #8
 80079e6:	e7bd      	b.n	8007964 <scpiLex_NondecimalNumericData+0x3a>
        token->type = SCPI_TOKEN_UNKNOWN;
 80079e8:	231a      	movs	r3, #26
 80079ea:	702b      	strb	r3, [r5, #0]
        state->pos = token->ptr;
 80079ec:	686b      	ldr	r3, [r5, #4]
 80079ee:	6063      	str	r3, [r4, #4]
        token->len = 0;
 80079f0:	2300      	movs	r3, #0
 80079f2:	e7bf      	b.n	8007974 <scpiLex_NondecimalNumericData+0x4a>

080079f4 <scpiLex_StringProgramData>:
 * Detect token String data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 80079f4:	b538      	push	{r3, r4, r5, lr}
    token->ptr = state->pos;
 80079f6:	6843      	ldr	r3, [r0, #4]
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 80079f8:	4604      	mov	r4, r0
    token->ptr = state->pos;
 80079fa:	604b      	str	r3, [r1, #4]
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 80079fc:	460d      	mov	r5, r1

    if (!iseos(state)) {
 80079fe:	f7ff fdcf 	bl	80075a0 <iseos>
 8007a02:	b9a0      	cbnz	r0, 8007a2e <scpiLex_StringProgramData+0x3a>
        if (ischr(state, '"')) {
 8007a04:	6863      	ldr	r3, [r4, #4]
    return (state->pos[0] == chr);
 8007a06:	7819      	ldrb	r1, [r3, #0]
        if (ischr(state, '"')) {
 8007a08:	2922      	cmp	r1, #34	; 0x22
 8007a0a:	d11f      	bne.n	8007a4c <scpiLex_StringProgramData+0x58>
            state->pos++;
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	6063      	str	r3, [r4, #4]
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 8007a10:	230f      	movs	r3, #15
    skipQuoteProgramData(state, '"');
 8007a12:	4620      	mov	r0, r4
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 8007a14:	702b      	strb	r3, [r5, #0]
    skipQuoteProgramData(state, '"');
 8007a16:	f7ff fddf 	bl	80075d8 <skipQuoteProgramData>
            skipDoubleQuoteProgramData(state);
            if (!iseos(state) && ischr(state, '"')) {
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7ff fdc0 	bl	80075a0 <iseos>
 8007a20:	bb28      	cbnz	r0, 8007a6e <scpiLex_StringProgramData+0x7a>
 8007a22:	6863      	ldr	r3, [r4, #4]
 8007a24:	781a      	ldrb	r2, [r3, #0]
 8007a26:	2a22      	cmp	r2, #34	; 0x22
            }
        } else if (ischr(state, '\'')) {
            state->pos++;
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
            skipSingleQuoteProgramData(state);
            if (!iseos(state) && ischr(state, '\'')) {
 8007a28:	d121      	bne.n	8007a6e <scpiLex_StringProgramData+0x7a>
                state->pos++;
 8007a2a:	3301      	adds	r3, #1
                token->len = state->pos - token->ptr;
            } else {
                state->pos = token->ptr;
 8007a2c:	6063      	str	r3, [r4, #4]
            }
        }
    }

    token->len = state->pos - token->ptr;
 8007a2e:	6863      	ldr	r3, [r4, #4]
 8007a30:	686a      	ldr	r2, [r5, #4]
 8007a32:	1a9b      	subs	r3, r3, r2

    if ((token->len > 0)) {
 8007a34:	2b00      	cmp	r3, #0
    token->len = state->pos - token->ptr;
 8007a36:	60ab      	str	r3, [r5, #8]
    if ((token->len > 0)) {
 8007a38:	dc04      	bgt.n	8007a44 <scpiLex_StringProgramData+0x50>
        /* token->ptr++;
         * token->len -= 2; */
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8007a3a:	231a      	movs	r3, #26
 8007a3c:	702b      	strb	r3, [r5, #0]
        state->pos = token->ptr;
        token->len = 0;
 8007a3e:	2300      	movs	r3, #0
        state->pos = token->ptr;
 8007a40:	6062      	str	r2, [r4, #4]
        token->len = 0;
 8007a42:	60ab      	str	r3, [r5, #8]
    }

    return token->len > 0 ? token->len : 0;
 8007a44:	68a8      	ldr	r0, [r5, #8]
}
 8007a46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007a4a:	bd38      	pop	{r3, r4, r5, pc}
        } else if (ischr(state, '\'')) {
 8007a4c:	2927      	cmp	r1, #39	; 0x27
 8007a4e:	d1ee      	bne.n	8007a2e <scpiLex_StringProgramData+0x3a>
            state->pos++;
 8007a50:	3301      	adds	r3, #1
 8007a52:	6063      	str	r3, [r4, #4]
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 8007a54:	230e      	movs	r3, #14
    skipQuoteProgramData(state, '\'');
 8007a56:	4620      	mov	r0, r4
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 8007a58:	702b      	strb	r3, [r5, #0]
    skipQuoteProgramData(state, '\'');
 8007a5a:	f7ff fdbd 	bl	80075d8 <skipQuoteProgramData>
            if (!iseos(state) && ischr(state, '\'')) {
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f7ff fd9e 	bl	80075a0 <iseos>
 8007a64:	b918      	cbnz	r0, 8007a6e <scpiLex_StringProgramData+0x7a>
 8007a66:	6863      	ldr	r3, [r4, #4]
 8007a68:	781a      	ldrb	r2, [r3, #0]
 8007a6a:	2a27      	cmp	r2, #39	; 0x27
 8007a6c:	e7dc      	b.n	8007a28 <scpiLex_StringProgramData+0x34>
                state->pos = token->ptr;
 8007a6e:	686b      	ldr	r3, [r5, #4]
 8007a70:	e7dc      	b.n	8007a2c <scpiLex_StringProgramData+0x38>

08007a72 <scpiLex_ArbitraryBlockProgramData>:
 * Detect token Block Data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8007a72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int i;
    int arbitraryBlockLength = 0;
    const char * ptr = state->pos;
 8007a76:	f8d0 8004 	ldr.w	r8, [r0, #4]
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8007a7a:	460d      	mov	r5, r1
    int validData = -1;
    token->ptr = state->pos;
 8007a7c:	f8c1 8004 	str.w	r8, [r1, #4]

    if (skipChr(state, '#')) {
 8007a80:	2123      	movs	r1, #35	; 0x23
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8007a82:	4604      	mov	r4, r0
    if (skipChr(state, '#')) {
 8007a84:	f7ff fe26 	bl	80076d4 <skipChr>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d04d      	beq.n	8007b28 <scpiLex_ArbitraryBlockProgramData+0xb6>
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f7ff fd87 	bl	80075a0 <iseos>
 8007a92:	4606      	mov	r6, r0
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d142      	bne.n	8007b1e <scpiLex_ArbitraryBlockProgramData+0xac>
 8007a98:	6863      	ldr	r3, [r4, #4]
 8007a9a:	781f      	ldrb	r7, [r3, #0]
    return isdigit(c) && (c != '0');
 8007a9c:	f000 ffda 	bl	8008a54 <__locale_ctype_ptr>
 8007aa0:	4438      	add	r0, r7
 8007aa2:	7843      	ldrb	r3, [r0, #1]
 8007aa4:	0758      	lsls	r0, r3, #29
 8007aa6:	d53a      	bpl.n	8007b1e <scpiLex_ArbitraryBlockProgramData+0xac>
 8007aa8:	2f30      	cmp	r7, #48	; 0x30
 8007aaa:	d038      	beq.n	8007b1e <scpiLex_ArbitraryBlockProgramData+0xac>
            i = state->pos[0] - '0';
            state->pos++;

            for (; i > 0; i--) {
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
                    arbitraryBlockLength *= 10;
 8007aac:	f04f 090a 	mov.w	r9, #10
            i = state->pos[0] - '0';
 8007ab0:	6863      	ldr	r3, [r4, #4]
 8007ab2:	f813 7b01 	ldrb.w	r7, [r3], #1
 8007ab6:	3f30      	subs	r7, #48	; 0x30
            state->pos++;
 8007ab8:	6063      	str	r3, [r4, #4]
            for (; i > 0; i--) {
 8007aba:	2f00      	cmp	r7, #0
 8007abc:	dc17      	bgt.n	8007aee <scpiLex_ArbitraryBlockProgramData+0x7c>
                } else {
                    break;
                }
            }

            if (i == 0) {
 8007abe:	d12e      	bne.n	8007b1e <scpiLex_ArbitraryBlockProgramData+0xac>
                state->pos += arbitraryBlockLength;
 8007ac0:	6862      	ldr	r2, [r4, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	68a0      	ldr	r0, [r4, #8]
                state->pos += arbitraryBlockLength;
 8007ac6:	1991      	adds	r1, r2, r6
                if ((state->buffer + state->len) >= (state->pos)) {
 8007ac8:	4403      	add	r3, r0
 8007aca:	4299      	cmp	r1, r3
                state->pos += arbitraryBlockLength;
 8007acc:	6061      	str	r1, [r4, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 8007ace:	d921      	bls.n	8007b14 <scpiLex_ArbitraryBlockProgramData+0xa2>
    if (validData == 1) {
        /* valid */
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
    } else if (validData == 0) {
        /* incomplete */
        token->type = SCPI_TOKEN_UNKNOWN;
 8007ad0:	231a      	movs	r3, #26
 8007ad2:	702b      	strb	r3, [r5, #0]
        token->len = 0;
 8007ad4:	2300      	movs	r3, #0
        state->pos = state->buffer + state->len;
 8007ad6:	68a2      	ldr	r2, [r4, #8]
        token->len = 0;
 8007ad8:	60ab      	str	r3, [r5, #8]
        state->pos = state->buffer + state->len;
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	4413      	add	r3, r2
 8007ade:	6063      	str	r3, [r4, #4]
        token->type = SCPI_TOKEN_UNKNOWN;
        state->pos = token->ptr;
        token->len = 0;
    }

    return token->len + (token->ptr - ptr);
 8007ae0:	6868      	ldr	r0, [r5, #4]
 8007ae2:	68ab      	ldr	r3, [r5, #8]
 8007ae4:	eba0 0008 	sub.w	r0, r0, r8
}
 8007ae8:	4418      	add	r0, r3
 8007aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7ff fd56 	bl	80075a0 <iseos>
 8007af4:	b998      	cbnz	r0, 8007b1e <scpiLex_ArbitraryBlockProgramData+0xac>
 8007af6:	f000 ffad 	bl	8008a54 <__locale_ctype_ptr>
 8007afa:	6863      	ldr	r3, [r4, #4]
 8007afc:	781a      	ldrb	r2, [r3, #0]
 8007afe:	4410      	add	r0, r2
 8007b00:	7841      	ldrb	r1, [r0, #1]
 8007b02:	0749      	lsls	r1, r1, #29
 8007b04:	d50b      	bpl.n	8007b1e <scpiLex_ArbitraryBlockProgramData+0xac>
                    arbitraryBlockLength += (state->pos[0] - '0');
 8007b06:	3a30      	subs	r2, #48	; 0x30
                    state->pos++;
 8007b08:	3301      	adds	r3, #1
                    arbitraryBlockLength += (state->pos[0] - '0');
 8007b0a:	fb09 2606 	mla	r6, r9, r6, r2
                    state->pos++;
 8007b0e:	6063      	str	r3, [r4, #4]
            for (; i > 0; i--) {
 8007b10:	3f01      	subs	r7, #1
 8007b12:	e7d2      	b.n	8007aba <scpiLex_ArbitraryBlockProgramData+0x48>
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 8007b14:	230d      	movs	r3, #13
                    token->len = arbitraryBlockLength;
 8007b16:	e9c5 2601 	strd	r2, r6, [r5, #4]
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 8007b1a:	702b      	strb	r3, [r5, #0]
 8007b1c:	e7e0      	b.n	8007ae0 <scpiLex_ArbitraryBlockProgramData+0x6e>
        } else if (iseos(state)) {
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f7ff fd3e 	bl	80075a0 <iseos>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d1d3      	bne.n	8007ad0 <scpiLex_ArbitraryBlockProgramData+0x5e>
        token->type = SCPI_TOKEN_UNKNOWN;
 8007b28:	231a      	movs	r3, #26
 8007b2a:	702b      	strb	r3, [r5, #0]
        state->pos = token->ptr;
 8007b2c:	686b      	ldr	r3, [r5, #4]
 8007b2e:	6063      	str	r3, [r4, #4]
        token->len = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60ab      	str	r3, [r5, #8]
 8007b34:	e7d4      	b.n	8007ae0 <scpiLex_ArbitraryBlockProgramData+0x6e>
	...

08007b38 <scpiLex_ProgramExpression>:
 * Detect token Expression
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 8007b38:	b570      	push	{r4, r5, r6, lr}
    token->ptr = state->pos;
 8007b3a:	6845      	ldr	r5, [r0, #4]
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 8007b3c:	4604      	mov	r4, r0
    token->ptr = state->pos;
 8007b3e:	604d      	str	r5, [r1, #4]

    if (!iseos(state) && ischr(state, '(')) {
 8007b40:	f7ff fd2e 	bl	80075a0 <iseos>
 8007b44:	bb20      	cbnz	r0, 8007b90 <scpiLex_ProgramExpression+0x58>
 8007b46:	6863      	ldr	r3, [r4, #4]
 8007b48:	781a      	ldrb	r2, [r3, #0]
 8007b4a:	2a28      	cmp	r2, #40	; 0x28
 8007b4c:	d120      	bne.n	8007b90 <scpiLex_ProgramExpression+0x58>
        state->pos++;
 8007b4e:	3301      	adds	r3, #1
        if ((c != '"')
 8007b50:	4e16      	ldr	r6, [pc, #88]	; (8007bac <scpiLex_ProgramExpression+0x74>)
        state->pos++;
 8007b52:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 8007b54:	4620      	mov	r0, r4
 8007b56:	f7ff fd23 	bl	80075a0 <iseos>
 8007b5a:	b988      	cbnz	r0, 8007b80 <scpiLex_ProgramExpression+0x48>
 8007b5c:	6863      	ldr	r3, [r4, #4]
 8007b5e:	7818      	ldrb	r0, [r3, #0]
    if ((c >= 0x20) && (c <= 0x7e)) {
 8007b60:	f1a0 0220 	sub.w	r2, r0, #32
 8007b64:	2a5e      	cmp	r2, #94	; 0x5e
 8007b66:	d80d      	bhi.n	8007b84 <scpiLex_ProgramExpression+0x4c>
        if ((c != '"')
 8007b68:	f1a0 0222 	sub.w	r2, r0, #34	; 0x22
 8007b6c:	b2d2      	uxtb	r2, r2
 8007b6e:	2a19      	cmp	r2, #25
 8007b70:	d803      	bhi.n	8007b7a <scpiLex_ProgramExpression+0x42>
 8007b72:	fa26 f202 	lsr.w	r2, r6, r2
 8007b76:	07d2      	lsls	r2, r2, #31
 8007b78:	d404      	bmi.n	8007b84 <scpiLex_ProgramExpression+0x4c>
        state->pos++;
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	6063      	str	r3, [r4, #4]
 8007b7e:	e7e9      	b.n	8007b54 <scpiLex_ProgramExpression+0x1c>

        if (!iseos(state) && ischr(state, ')')) {
            state->pos++;
            token->len = state->pos - token->ptr;
        } else {
            token->len = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	e004      	b.n	8007b8e <scpiLex_ProgramExpression+0x56>
        if (!iseos(state) && ischr(state, ')')) {
 8007b84:	2829      	cmp	r0, #41	; 0x29
 8007b86:	d1fb      	bne.n	8007b80 <scpiLex_ProgramExpression+0x48>
            state->pos++;
 8007b88:	3301      	adds	r3, #1
 8007b8a:	6063      	str	r3, [r4, #4]
            token->len = state->pos - token->ptr;
 8007b8c:	1b5b      	subs	r3, r3, r5
            token->len = 0;
 8007b8e:	608b      	str	r3, [r1, #8]
        }
    }

    if ((token->len > 0)) {
 8007b90:	688b      	ldr	r3, [r1, #8]
 8007b92:	2b00      	cmp	r3, #0
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8007b94:	bfdd      	ittte	le
 8007b96:	231a      	movle	r3, #26
 8007b98:	700b      	strble	r3, [r1, #0]
        state->pos = token->ptr;
        token->len = 0;
 8007b9a:	2300      	movle	r3, #0
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 8007b9c:	2310      	movgt	r3, #16
        state->pos = token->ptr;
 8007b9e:	bfda      	itte	le
 8007ba0:	6065      	strle	r5, [r4, #4]
        token->len = 0;
 8007ba2:	608b      	strle	r3, [r1, #8]
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 8007ba4:	700b      	strbgt	r3, [r1, #0]
    }

    return token->len;
 8007ba6:	6888      	ldr	r0, [r1, #8]
}
 8007ba8:	bd70      	pop	{r4, r5, r6, pc}
 8007baa:	bf00      	nop
 8007bac:	020000e3 	.word	0x020000e3

08007bb0 <scpiLex_Comma>:
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
    token->ptr = state->pos;
 8007bb0:	6843      	ldr	r3, [r0, #4]
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
 8007bb2:	b510      	push	{r4, lr}
 8007bb4:	460c      	mov	r4, r1
    token->ptr = state->pos;
 8007bb6:	604b      	str	r3, [r1, #4]

    if (skipChr(state, ',')) {
 8007bb8:	212c      	movs	r1, #44	; 0x2c
 8007bba:	f7ff fd8b 	bl	80076d4 <skipChr>
 8007bbe:	b128      	cbz	r0, 8007bcc <scpiLex_Comma+0x1c>
        token->len = 1;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	60a3      	str	r3, [r4, #8]
        token->type = SCPI_TOKEN_COMMA;
 8007bc4:	2300      	movs	r3, #0
    } else {
        token->len = 0;
        token->type = SCPI_TOKEN_UNKNOWN;
 8007bc6:	7023      	strb	r3, [r4, #0]
    }

    return token->len;
}
 8007bc8:	68a0      	ldr	r0, [r4, #8]
 8007bca:	bd10      	pop	{r4, pc}
        token->len = 0;
 8007bcc:	60a0      	str	r0, [r4, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8007bce:	231a      	movs	r3, #26
 8007bd0:	e7f9      	b.n	8007bc6 <scpiLex_Comma+0x16>

08007bd2 <scpiLex_Semicolon>:
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
    token->ptr = state->pos;
 8007bd2:	6843      	ldr	r3, [r0, #4]
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	460c      	mov	r4, r1
    token->ptr = state->pos;
 8007bd8:	604b      	str	r3, [r1, #4]

    if (skipChr(state, ';')) {
 8007bda:	213b      	movs	r1, #59	; 0x3b
 8007bdc:	f7ff fd7a 	bl	80076d4 <skipChr>
 8007be0:	b120      	cbz	r0, 8007bec <scpiLex_Semicolon+0x1a>
        token->len = 1;
 8007be2:	2301      	movs	r3, #1
 8007be4:	60a3      	str	r3, [r4, #8]
        token->type = SCPI_TOKEN_SEMICOLON;
    } else {
        token->len = 0;
        token->type = SCPI_TOKEN_UNKNOWN;
 8007be6:	7023      	strb	r3, [r4, #0]
    }

    return token->len;
}
 8007be8:	68a0      	ldr	r0, [r4, #8]
 8007bea:	bd10      	pop	{r4, pc}
        token->len = 0;
 8007bec:	60a0      	str	r0, [r4, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8007bee:	231a      	movs	r3, #26
 8007bf0:	e7f9      	b.n	8007be6 <scpiLex_Semicolon+0x14>

08007bf2 <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
 8007bf2:	b538      	push	{r3, r4, r5, lr}
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	460c      	mov	r4, r1
    token->ptr = state->pos;
 8007bf8:	6843      	ldr	r3, [r0, #4]
 8007bfa:	604b      	str	r3, [r1, #4]

    skipChr(state, '\r');
 8007bfc:	210d      	movs	r1, #13
 8007bfe:	f7ff fd69 	bl	80076d4 <skipChr>
    skipChr(state, '\n');
 8007c02:	210a      	movs	r1, #10
 8007c04:	4628      	mov	r0, r5
 8007c06:	f7ff fd65 	bl	80076d4 <skipChr>

    token->len = state->pos - token->ptr;
 8007c0a:	686b      	ldr	r3, [r5, #4]
 8007c0c:	6862      	ldr	r2, [r4, #4]
 8007c0e:	1a9b      	subs	r3, r3, r2

    if ((token->len > 0)) {
 8007c10:	2b00      	cmp	r3, #0
    token->len = state->pos - token->ptr;
 8007c12:	60a3      	str	r3, [r4, #8]
        token->type = SCPI_TOKEN_NL;
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8007c14:	bfdd      	ittte	le
 8007c16:	231a      	movle	r3, #26
 8007c18:	7023      	strble	r3, [r4, #0]
        state->pos = token->ptr;
        token->len = 0;
 8007c1a:	2300      	movle	r3, #0
        token->type = SCPI_TOKEN_NL;
 8007c1c:	2305      	movgt	r3, #5
        state->pos = token->ptr;
 8007c1e:	bfda      	itte	le
 8007c20:	606a      	strle	r2, [r5, #4]
        token->len = 0;
 8007c22:	60a3      	strle	r3, [r4, #8]
        token->type = SCPI_TOKEN_NL;
 8007c24:	7023      	strbgt	r3, [r4, #0]
    }

    return token->len;
}
 8007c26:	68a0      	ldr	r0, [r4, #8]
 8007c28:	bd38      	pop	{r3, r4, r5, pc}
	...

08007c2c <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 8007c2c:	b508      	push	{r3, lr}
    SCPI_ResultMnemonic(context, SCPI_STD_VERSION_REVISION);
 8007c2e:	2206      	movs	r2, #6
 8007c30:	4902      	ldr	r1, [pc, #8]	; (8007c3c <SCPI_SystemVersionQ+0x10>)
 8007c32:	f000 f8e1 	bl	8007df8 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
}
 8007c36:	2001      	movs	r0, #1
 8007c38:	bd08      	pop	{r3, pc}
 8007c3a:	bf00      	nop
 8007c3c:	0800ad8e 	.word	0x0800ad8e

08007c40 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 8007c40:	b513      	push	{r0, r1, r4, lr}
 8007c42:	4604      	mov	r4, r0
    scpi_error_t error;
    SCPI_ErrorPop(context, &error);
 8007c44:	a901      	add	r1, sp, #4
 8007c46:	f7ff fa0f 	bl	8007068 <SCPI_ErrorPop>
    SCPI_ResultError(context, &error);
 8007c4a:	a901      	add	r1, sp, #4
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 f92f 	bl	8007eb0 <SCPI_ResultError>
#if USE_DEVICE_DEPENDENT_ERROR_INFORMATION
    SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
#endif
    return SCPI_RES_OK;
}
 8007c52:	2001      	movs	r0, #1
 8007c54:	b002      	add	sp, #8
 8007c56:	bd10      	pop	{r4, pc}

08007c58 <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 8007c58:	b510      	push	{r4, lr}
 8007c5a:	4604      	mov	r4, r0
    SCPI_ResultInt32(context, SCPI_ErrorCount(context));
 8007c5c:	f7ff f9d2 	bl	8007004 <SCPI_ErrorCount>
 8007c60:	4601      	mov	r1, r0
 8007c62:	4620      	mov	r0, r4
 8007c64:	f000 f8d9 	bl	8007e1a <SCPI_ResultInt32>

    return SCPI_RES_OK;
}
 8007c68:	2001      	movs	r0, #1
 8007c6a:	bd10      	pop	{r4, pc}

08007c6c <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 8007c6c:	b410      	push	{r4}
    if (len > 0) {
 8007c6e:	b11a      	cbz	r2, 8007c78 <writeData+0xc>
        return context->interface->write(context, data, len);
 8007c70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    } else {
        return 0;
    }
}
 8007c72:	bc10      	pop	{r4}
        return context->interface->write(context, data, len);
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	4718      	bx	r3
}
 8007c78:	4610      	mov	r0, r2
 8007c7a:	bc10      	pop	{r4}
 8007c7c:	4770      	bx	lr
	...

08007c80 <ParamSignToUInt32>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt32(scpi_t * context, scpi_parameter_t * parameter, uint32_t * value, scpi_bool_t sign) {
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	460d      	mov	r5, r1

    if (!value) {
 8007c84:	4614      	mov	r4, r2
 8007c86:	b922      	cbnz	r2, 8007c92 <ParamSignToUInt32+0x12>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8007c88:	4916      	ldr	r1, [pc, #88]	; (8007ce4 <ParamSignToUInt32+0x64>)
 8007c8a:	f7ff fa4f 	bl	800712c <SCPI_ErrorPush>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
            } else {
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
            }
        default:
            return FALSE;
 8007c8e:	2000      	movs	r0, #0
 8007c90:	e026      	b.n	8007ce0 <ParamSignToUInt32+0x60>
    switch (parameter->type) {
 8007c92:	780a      	ldrb	r2, [r1, #0]
 8007c94:	3a06      	subs	r2, #6
 8007c96:	2a05      	cmp	r2, #5
 8007c98:	d8f9      	bhi.n	8007c8e <ParamSignToUInt32+0xe>
 8007c9a:	a101      	add	r1, pc, #4	; (adr r1, 8007ca0 <ParamSignToUInt32+0x20>)
 8007c9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007ca0:	08007cb9 	.word	0x08007cb9
 8007ca4:	08007cc5 	.word	0x08007cc5
 8007ca8:	08007cc9 	.word	0x08007cc9
 8007cac:	08007c8f 	.word	0x08007c8f
 8007cb0:	08007ccd 	.word	0x08007ccd
 8007cb4:	08007ccd 	.word	0x08007ccd
            return strBaseToUInt32(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 8007cb8:	2210      	movs	r2, #16
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 8007cba:	4621      	mov	r1, r4
 8007cbc:	6868      	ldr	r0, [r5, #4]
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 8007cbe:	f000 fcdf 	bl	8008680 <strBaseToUInt32>
 8007cc2:	e00a      	b.n	8007cda <ParamSignToUInt32+0x5a>
            return strBaseToUInt32(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 8007cc4:	2208      	movs	r2, #8
 8007cc6:	e7f8      	b.n	8007cba <ParamSignToUInt32+0x3a>
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 8007cc8:	2202      	movs	r2, #2
 8007cca:	e7f6      	b.n	8007cba <ParamSignToUInt32+0x3a>
 8007ccc:	6868      	ldr	r0, [r5, #4]
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 8007cce:	220a      	movs	r2, #10
 8007cd0:	4621      	mov	r1, r4
            if (sign) {
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0f3      	beq.n	8007cbe <ParamSignToUInt32+0x3e>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 8007cd6:	f000 fcc8 	bl	800866a <strBaseToInt32>
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 8007cda:	3000      	adds	r0, #0
 8007cdc:	bf18      	it	ne
 8007cde:	2001      	movne	r0, #1
    }
}
 8007ce0:	bd38      	pop	{r3, r4, r5, pc}
 8007ce2:	bf00      	nop
 8007ce4:	fffffeca 	.word	0xfffffeca

08007ce8 <writeDelimiter>:
    if (context->output_count > 0) {
 8007ce8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dd03      	ble.n	8007cf6 <writeDelimiter+0xe>
        return writeData(context, ",", 1);
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4902      	ldr	r1, [pc, #8]	; (8007cfc <writeDelimiter+0x14>)
 8007cf2:	f7ff bfbb 	b.w	8007c6c <writeData>
}
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	0800adf7 	.word	0x0800adf7

08007d00 <resultUInt32BaseSign>:
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 8007d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d02:	4614      	mov	r4, r2
 8007d04:	b08d      	sub	sp, #52	; 0x34
 8007d06:	4605      	mov	r5, r0
    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 8007d08:	9300      	str	r3, [sp, #0]
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 8007d0a:	4608      	mov	r0, r1
    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	a903      	add	r1, sp, #12
 8007d10:	2221      	movs	r2, #33	; 0x21
 8007d12:	f000 fc3f 	bl	8008594 <UInt32ToStrBaseSign>
 8007d16:	3c02      	subs	r4, #2
 8007d18:	b2e4      	uxtb	r4, r4
 8007d1a:	2c0e      	cmp	r4, #14
 8007d1c:	bf98      	it	ls
 8007d1e:	4b0e      	ldrls	r3, [pc, #56]	; (8007d58 <resultUInt32BaseSign+0x58>)
 8007d20:	4607      	mov	r7, r0
    result += writeDelimiter(context);
 8007d22:	4628      	mov	r0, r5
 8007d24:	bf94      	ite	ls
 8007d26:	f853 6024 	ldrls.w	r6, [r3, r4, lsl #2]
    switch (base) {
 8007d2a:	2600      	movhi	r6, #0
    result += writeDelimiter(context);
 8007d2c:	f7ff ffdc 	bl	8007ce8 <writeDelimiter>
 8007d30:	4604      	mov	r4, r0
    if (basePrefix != NULL) {
 8007d32:	b12e      	cbz	r6, 8007d40 <resultUInt32BaseSign+0x40>
        result += writeData(context, basePrefix, 2);
 8007d34:	2202      	movs	r2, #2
 8007d36:	4631      	mov	r1, r6
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f7ff ff97 	bl	8007c6c <writeData>
 8007d3e:	4404      	add	r4, r0
    result += writeData(context, buffer, len);
 8007d40:	463a      	mov	r2, r7
 8007d42:	a903      	add	r1, sp, #12
 8007d44:	4628      	mov	r0, r5
 8007d46:	f7ff ff91 	bl	8007c6c <writeData>
    context->output_count++;
 8007d4a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
}
 8007d4c:	4420      	add	r0, r4
    context->output_count++;
 8007d4e:	3301      	adds	r3, #1
 8007d50:	632b      	str	r3, [r5, #48]	; 0x30
}
 8007d52:	b00d      	add	sp, #52	; 0x34
 8007d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d56:	bf00      	nop
 8007d58:	0800ad98 	.word	0x0800ad98

08007d5c <SCPI_Init>:
        scpi_error_t * error_queue_data, int16_t error_queue_size) {
 8007d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d60:	4604      	mov	r4, r0
 8007d62:	4692      	mov	sl, r2
 8007d64:	468b      	mov	fp, r1
 8007d66:	b085      	sub	sp, #20
 8007d68:	9303      	str	r3, [sp, #12]
 8007d6a:	e9dd 8310 	ldrd	r8, r3, [sp, #64]	; 0x40
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	9b12      	ldr	r3, [sp, #72]	; 0x48
    memset(context, 0, sizeof (*context));
 8007d72:	22d0      	movs	r2, #208	; 0xd0
        scpi_error_t * error_queue_data, int16_t error_queue_size) {
 8007d74:	e9dd 950e 	ldrd	r9, r5, [sp, #56]	; 0x38
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    memset(context, 0, sizeof (*context));
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	3004      	adds	r0, #4
        scpi_error_t * error_queue_data, int16_t error_queue_size) {
 8007d80:	9302      	str	r3, [sp, #8]
 8007d82:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007d84:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
    memset(context, 0, sizeof (*context));
 8007d88:	f000 feb8 	bl	8008afc <memset>
    context->units = units;
 8007d8c:	9b03      	ldr	r3, [sp, #12]
    context->interface = interface;
 8007d8e:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
    context->units = units;
 8007d92:	65e3      	str	r3, [r4, #92]	; 0x5c
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 8007d94:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8007df4 <SCPI_Init+0x98>
    context->idn[3] = idn4;
 8007d98:	9b00      	ldr	r3, [sp, #0]
    context->idn[1] = idn2;
 8007d9a:	e9c4 9521 	strd	r9, r5, [r4, #132]	; 0x84
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 8007d9e:	f104 099c 	add.w	r9, r4, #156	; 0x9c
    context->idn[2] = idn3;
 8007da2:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    context->idn[3] = idn4;
 8007da6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 8007daa:	462a      	mov	r2, r5
 8007dac:	4651      	mov	r1, sl
    sprintf(context->idn5, "%s-%s", idn2, "USB");
 8007dae:	f104 08b5 	add.w	r8, r4, #181	; 0xb5
    context->cmdlist = commands;
 8007db2:	f8c4 b000 	str.w	fp, [r4]
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 8007db6:	4b0d      	ldr	r3, [pc, #52]	; (8007dec <SCPI_Init+0x90>)
 8007db8:	4648      	mov	r0, r9
 8007dba:	f000 ff5d 	bl	8008c78 <siprintf>
    sprintf(context->idn5, "%s-%s", idn2, "USB");
 8007dbe:	462a      	mov	r2, r5
 8007dc0:	4651      	mov	r1, sl
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <SCPI_Init+0x94>)
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	f000 ff57 	bl	8008c78 <siprintf>
    context->buffer.data = input_buffer;
 8007dca:	9b01      	ldr	r3, [sp, #4]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8007dcc:	463a      	mov	r2, r7
    context->buffer.data = input_buffer;
 8007dce:	60e3      	str	r3, [r4, #12]
    context->buffer.length = input_buffer_length;
 8007dd0:	9b02      	ldr	r3, [sp, #8]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8007dd2:	4631      	mov	r1, r6
    context->buffer.length = input_buffer_length;
 8007dd4:	6063      	str	r3, [r4, #4]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8007dd6:	4620      	mov	r0, r4
    context->buffer.position = 0;
 8007dd8:	2300      	movs	r3, #0
    context->idn[5] = context->idn5;
 8007dda:	e9c4 9825 	strd	r9, r8, [r4, #148]	; 0x94
    context->buffer.position = 0;
 8007dde:	60a3      	str	r3, [r4, #8]
}
 8007de0:	b005      	add	sp, #20
 8007de2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8007de6:	f7ff b90a 	b.w	8006ffe <SCPI_ErrorInit>
 8007dea:	bf00      	nop
 8007dec:	0800add4 	.word	0x0800add4
 8007df0:	0800addf 	.word	0x0800addf
 8007df4:	0800add9 	.word	0x0800add9

08007df8 <SCPI_ResultCharacters>:
size_t SCPI_ResultCharacters(scpi_t * context, const char * data, size_t len) {
 8007df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	460e      	mov	r6, r1
 8007dfe:	4617      	mov	r7, r2
    result += writeDelimiter(context);
 8007e00:	f7ff ff72 	bl	8007ce8 <writeDelimiter>
    result += writeData(context, data, len);
 8007e04:	463a      	mov	r2, r7
    result += writeDelimiter(context);
 8007e06:	4605      	mov	r5, r0
    result += writeData(context, data, len);
 8007e08:	4631      	mov	r1, r6
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f7ff ff2e 	bl	8007c6c <writeData>
    context->output_count++;
 8007e10:	6b23      	ldr	r3, [r4, #48]	; 0x30
}
 8007e12:	4428      	add	r0, r5
    context->output_count++;
 8007e14:	3301      	adds	r3, #1
 8007e16:	6323      	str	r3, [r4, #48]	; 0x30
}
 8007e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e1a <SCPI_ResultInt32>:
    return resultUInt32BaseSign(context, val, 10, TRUE);
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	220a      	movs	r2, #10
 8007e1e:	f7ff bf6f 	b.w	8007d00 <resultUInt32BaseSign>
	...

08007e24 <SCPI_ResultText>:
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 8007e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e28:	4604      	mov	r4, r0
    size_t len = strlen(data);
 8007e2a:	4608      	mov	r0, r1
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 8007e2c:	460e      	mov	r6, r1
    size_t len = strlen(data);
 8007e2e:	f7f8 f999 	bl	8000164 <strlen>
 8007e32:	4607      	mov	r7, r0
    result += writeDelimiter(context);
 8007e34:	4620      	mov	r0, r4
 8007e36:	f7ff ff57 	bl	8007ce8 <writeDelimiter>
    result += writeData(context, "\"", 1);
 8007e3a:	2201      	movs	r2, #1
    result += writeDelimiter(context);
 8007e3c:	4605      	mov	r5, r0
    result += writeData(context, "\"", 1);
 8007e3e:	491b      	ldr	r1, [pc, #108]	; (8007eac <SCPI_ResultText+0x88>)
 8007e40:	4620      	mov	r0, r4
 8007e42:	f7ff ff13 	bl	8007c6c <writeData>
    while ((quote = strnpbrk(data, len, "\""))) {
 8007e46:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007eac <SCPI_ResultText+0x88>
    result += writeData(context, "\"", 1);
 8007e4a:	4405      	add	r5, r0
    while ((quote = strnpbrk(data, len, "\""))) {
 8007e4c:	4a17      	ldr	r2, [pc, #92]	; (8007eac <SCPI_ResultText+0x88>)
 8007e4e:	4639      	mov	r1, r7
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 fb8a 	bl	800856a <strnpbrk>
 8007e56:	4681      	mov	r9, r0
 8007e58:	b988      	cbnz	r0, 8007e7e <SCPI_ResultText+0x5a>
    result += writeData(context, data, len);
 8007e5a:	463a      	mov	r2, r7
 8007e5c:	4631      	mov	r1, r6
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f7ff ff04 	bl	8007c6c <writeData>
    result += writeData(context, "\"", 1);
 8007e64:	2201      	movs	r2, #1
    result += writeData(context, data, len);
 8007e66:	4606      	mov	r6, r0
    result += writeData(context, "\"", 1);
 8007e68:	4910      	ldr	r1, [pc, #64]	; (8007eac <SCPI_ResultText+0x88>)
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f7ff fefe 	bl	8007c6c <writeData>
    context->output_count++;
 8007e70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007e72:	4435      	add	r5, r6
 8007e74:	3301      	adds	r3, #1
 8007e76:	6323      	str	r3, [r4, #48]	; 0x30
}
 8007e78:	4428      	add	r0, r5
 8007e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        result += writeData(context, data, quote - data + 1);
 8007e7e:	eba9 0806 	sub.w	r8, r9, r6
 8007e82:	f108 0201 	add.w	r2, r8, #1
 8007e86:	4631      	mov	r1, r6
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f7ff feef 	bl	8007c6c <writeData>
        result += writeData(context, "\"", 1);
 8007e8e:	2201      	movs	r2, #1
        result += writeData(context, data, quote - data + 1);
 8007e90:	4606      	mov	r6, r0
        result += writeData(context, "\"", 1);
 8007e92:	4651      	mov	r1, sl
 8007e94:	4620      	mov	r0, r4
 8007e96:	f7ff fee9 	bl	8007c6c <writeData>
        len -= quote - data + 1;
 8007e9a:	ea6f 0808 	mvn.w	r8, r8
        result += writeData(context, "\"", 1);
 8007e9e:	4430      	add	r0, r6
 8007ea0:	4405      	add	r5, r0
        len -= quote - data + 1;
 8007ea2:	4447      	add	r7, r8
        data = quote + 1;
 8007ea4:	f109 0601 	add.w	r6, r9, #1
 8007ea8:	e7d0      	b.n	8007e4c <SCPI_ResultText+0x28>
 8007eaa:	bf00      	nop
 8007eac:	0800ade5 	.word	0x0800ade5

08007eb0 <SCPI_ResultError>:
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 8007eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	4607      	mov	r7, r0
    data[0] = SCPI_ErrorTranslate(error->error_code);
 8007eb6:	f9b1 0000 	ldrsh.w	r0, [r1]
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 8007eba:	460c      	mov	r4, r1
    data[0] = SCPI_ErrorTranslate(error->error_code);
 8007ebc:	f7ff f93a 	bl	8007134 <SCPI_ErrorTranslate>
 8007ec0:	4680      	mov	r8, r0
    len[0] = strlen(data[0]);
 8007ec2:	f7f8 f94f 	bl	8000164 <strlen>
    result += SCPI_ResultInt32(context, error->error_code);
 8007ec6:	f9b4 1000 	ldrsh.w	r1, [r4]
    len[0] = strlen(data[0]);
 8007eca:	4605      	mov	r5, r0
    result += SCPI_ResultInt32(context, error->error_code);
 8007ecc:	4638      	mov	r0, r7
 8007ece:	f7ff ffa4 	bl	8007e1a <SCPI_ResultInt32>
 8007ed2:	4604      	mov	r4, r0
    result += writeDelimiter(context);
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	f7ff ff07 	bl	8007ce8 <writeDelimiter>
    result += writeData(context, "\"", 1);
 8007eda:	2201      	movs	r2, #1
    result += writeDelimiter(context);
 8007edc:	4404      	add	r4, r0
    result += writeData(context, "\"", 1);
 8007ede:	491f      	ldr	r1, [pc, #124]	; (8007f5c <SCPI_ResultError+0xac>)
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff fec3 	bl	8007c6c <writeData>
 8007ee6:	2dff      	cmp	r5, #255	; 0xff
 8007ee8:	bf28      	it	cs
 8007eea:	25ff      	movcs	r5, #255	; 0xff
 8007eec:	f04f 09ff 	mov.w	r9, #255	; 0xff
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8007ef0:	f8df a068 	ldr.w	sl, [pc, #104]	; 8007f5c <SCPI_ResultError+0xac>
    result += writeData(context, "\"", 1);
 8007ef4:	4404      	add	r4, r0
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8007ef6:	4652      	mov	r2, sl
 8007ef8:	4629      	mov	r1, r5
 8007efa:	4640      	mov	r0, r8
 8007efc:	f000 fb35 	bl	800856a <strnpbrk>
 8007f00:	4683      	mov	fp, r0
 8007f02:	b128      	cbz	r0, 8007f10 <SCPI_ResultError+0x60>
            if ((step = quote - data[i] + 1) >= outputlimit) {
 8007f04:	ebab 0608 	sub.w	r6, fp, r8
 8007f08:	3601      	adds	r6, #1
 8007f0a:	45b1      	cmp	r9, r6
 8007f0c:	d80f      	bhi.n	8007f2e <SCPI_ResultError+0x7e>
                len[i] -= 1;
 8007f0e:	3d01      	subs	r5, #1
        result += writeData(context, data[i], len[i]);
 8007f10:	462a      	mov	r2, r5
 8007f12:	4641      	mov	r1, r8
 8007f14:	4638      	mov	r0, r7
 8007f16:	f7ff fea9 	bl	8007c6c <writeData>
    result += writeData(context, "\"", 1);
 8007f1a:	2201      	movs	r2, #1
        result += writeData(context, data[i], len[i]);
 8007f1c:	4605      	mov	r5, r0
    result += writeData(context, "\"", 1);
 8007f1e:	490f      	ldr	r1, [pc, #60]	; (8007f5c <SCPI_ResultError+0xac>)
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7ff fea3 	bl	8007c6c <writeData>
 8007f26:	442c      	add	r4, r5
}
 8007f28:	4420      	add	r0, r4
 8007f2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            result += writeData(context, data[i], step);
 8007f2e:	4641      	mov	r1, r8
 8007f30:	4632      	mov	r2, r6
 8007f32:	4638      	mov	r0, r7
 8007f34:	f7ff fe9a 	bl	8007c6c <writeData>
            result += writeData(context, "\"", 1);
 8007f38:	2201      	movs	r2, #1
            result += writeData(context, data[i], step);
 8007f3a:	4680      	mov	r8, r0
            result += writeData(context, "\"", 1);
 8007f3c:	4651      	mov	r1, sl
 8007f3e:	4638      	mov	r0, r7
 8007f40:	f7ff fe94 	bl	8007c6c <writeData>
            outputlimit -= step + 1;
 8007f44:	43f3      	mvns	r3, r6
            len[i] -= step;
 8007f46:	1bad      	subs	r5, r5, r6
            outputlimit -= step + 1;
 8007f48:	4499      	add	r9, r3
            result += writeData(context, "\"", 1);
 8007f4a:	4440      	add	r0, r8
 8007f4c:	454d      	cmp	r5, r9
 8007f4e:	4404      	add	r4, r0
 8007f50:	bf28      	it	cs
 8007f52:	464d      	movcs	r5, r9
            data[i] = quote + 1;
 8007f54:	f10b 0801 	add.w	r8, fp, #1
 8007f58:	e7cd      	b.n	8007ef6 <SCPI_ResultError+0x46>
 8007f5a:	bf00      	nop
 8007f5c:	0800ade5 	.word	0x0800ade5

08007f60 <SCPI_ResultArbitraryBlockHeader>:
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 8007f60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    block_header[0] = '#';
 8007f62:	2323      	movs	r3, #35	; 0x23
 8007f64:	ac04      	add	r4, sp, #16
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 8007f66:	460e      	mov	r6, r1
    block_header[0] = '#';
 8007f68:	f804 3d0c 	strb.w	r3, [r4, #-12]!
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 8007f6c:	230a      	movs	r3, #10
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 8007f6e:	4605      	mov	r5, r0
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 8007f70:	461a      	mov	r2, r3
 8007f72:	f10d 0106 	add.w	r1, sp, #6
 8007f76:	4630      	mov	r0, r6
 8007f78:	f000 fb70 	bl	800865c <SCPI_UInt32ToStrBase>
    header_len = strlen(block_header + 2);
 8007f7c:	f10d 0006 	add.w	r0, sp, #6
 8007f80:	f7f8 f8f0 	bl	8000164 <strlen>
    context->arbitrary_reminding = len;
 8007f84:	f8c5 60d0 	str.w	r6, [r5, #208]	; 0xd0
    block_header[1] = (char) (header_len + '0');
 8007f88:	f100 0330 	add.w	r3, r0, #48	; 0x30
    return writeData(context, block_header, header_len + 2);
 8007f8c:	1c82      	adds	r2, r0, #2
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4628      	mov	r0, r5
    block_header[1] = (char) (header_len + '0');
 8007f92:	f88d 3005 	strb.w	r3, [sp, #5]
    return writeData(context, block_header, header_len + 2);
 8007f96:	f7ff fe69 	bl	8007c6c <writeData>
}
 8007f9a:	b004      	add	sp, #16
 8007f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fa0 <SCPI_ResultArbitraryBlockData>:
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 8007fa0:	b510      	push	{r4, lr}
    if (context->arbitrary_reminding < len) {
 8007fa2:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 8007fa6:	4603      	mov	r3, r0
    if (context->arbitrary_reminding < len) {
 8007fa8:	4294      	cmp	r4, r2
 8007faa:	d30b      	bcc.n	8007fc4 <SCPI_ResultArbitraryBlockData+0x24>
    context->arbitrary_reminding -= len;
 8007fac:	1aa4      	subs	r4, r4, r2
 8007fae:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
    if (context->arbitrary_reminding == 0) {
 8007fb2:	b914      	cbnz	r4, 8007fba <SCPI_ResultArbitraryBlockData+0x1a>
        context->output_count++;
 8007fb4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	6318      	str	r0, [r3, #48]	; 0x30
    return writeData(context, (const char *) data, len);
 8007fba:	4618      	mov	r0, r3
}
 8007fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return writeData(context, (const char *) data, len);
 8007fc0:	f7ff be54 	b.w	8007c6c <writeData>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8007fc4:	4902      	ldr	r1, [pc, #8]	; (8007fd0 <SCPI_ResultArbitraryBlockData+0x30>)
 8007fc6:	f7ff f8b1 	bl	800712c <SCPI_ErrorPush>
}
 8007fca:	2000      	movs	r0, #0
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	bf00      	nop
 8007fd0:	fffffeca 	.word	0xfffffeca

08007fd4 <SCPI_ResultArbitraryBlock>:
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	460f      	mov	r7, r1
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 8007fd8:	4611      	mov	r1, r2
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 8007fda:	4606      	mov	r6, r0
 8007fdc:	4614      	mov	r4, r2
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 8007fde:	f7ff ffbf 	bl	8007f60 <SCPI_ResultArbitraryBlockHeader>
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 8007fe2:	4622      	mov	r2, r4
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 8007fe4:	4605      	mov	r5, r0
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f7ff ffd9 	bl	8007fa0 <SCPI_ResultArbitraryBlockData>
}
 8007fee:	4428      	add	r0, r5
 8007ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ff2 <SCPI_ParamIsNumber>:
    switch (parameter->type) {
 8007ff2:	7803      	ldrb	r3, [r0, #0]
 8007ff4:	3b06      	subs	r3, #6
 8007ff6:	2b05      	cmp	r3, #5
 8007ff8:	d806      	bhi.n	8008008 <SCPI_ParamIsNumber+0x16>
 8007ffa:	e8df f003 	tbb	[pc, r3]
 8007ffe:	0707      	.short	0x0707
 8008000:	03070507 	.word	0x03070507
            return suffixAllowed;
 8008004:	4608      	mov	r0, r1
 8008006:	4770      	bx	lr
            return FALSE;
 8008008:	2000      	movs	r0, #0
 800800a:	4770      	bx	lr
            return TRUE;
 800800c:	2001      	movs	r0, #1
}
 800800e:	4770      	bx	lr

08008010 <scpiParser_parseProgramData>:
 * Parse one parameter and detect type
 * @param state
 * @param token
 * @return
 */
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 8008010:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008014:	460e      	mov	r6, r1
    scpi_token_t tmp;
    int result = 0;
    int wsLen;
    int suffixLen;
    int realLen = 0;
    realLen += scpiLex_WhiteSpace(state, &tmp);
 8008016:	a901      	add	r1, sp, #4
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 8008018:	4605      	mov	r5, r0
    realLen += scpiLex_WhiteSpace(state, &tmp);
 800801a:	f7ff fb7f 	bl	800771c <scpiLex_WhiteSpace>

    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 800801e:	4631      	mov	r1, r6
    realLen += scpiLex_WhiteSpace(state, &tmp);
 8008020:	4607      	mov	r7, r0
    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 8008022:	4628      	mov	r0, r5
 8008024:	f7ff fc81 	bl	800792a <scpiLex_NondecimalNumericData>
    if (result == 0) result = scpiLex_CharacterProgramData(state, token);
 8008028:	4604      	mov	r4, r0
 800802a:	b988      	cbnz	r0, 8008050 <scpiParser_parseProgramData+0x40>
 800802c:	4631      	mov	r1, r6
 800802e:	4628      	mov	r0, r5
 8008030:	f7ff fbdd 	bl	80077ee <scpiLex_CharacterProgramData>
    if (result == 0) {
 8008034:	4604      	mov	r4, r0
 8008036:	b958      	cbnz	r0, 8008050 <scpiParser_parseProgramData+0x40>
        result = scpiLex_DecimalNumericProgramData(state, token);
 8008038:	4631      	mov	r1, r6
 800803a:	4628      	mov	r0, r5
 800803c:	f7ff fc04 	bl	8007848 <scpiLex_DecimalNumericProgramData>
        if (result != 0) {
 8008040:	4604      	mov	r4, r0
 8008042:	b970      	cbnz	r0, 8008062 <scpiParser_parseProgramData+0x52>
                result = token->len;
            }
        }
    }

    if (result == 0) result = scpiLex_StringProgramData(state, token);
 8008044:	4631      	mov	r1, r6
 8008046:	4628      	mov	r0, r5
 8008048:	f7ff fcd4 	bl	80079f4 <scpiLex_StringProgramData>
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 800804c:	4604      	mov	r4, r0
 800804e:	b1e0      	cbz	r0, 800808a <scpiParser_parseProgramData+0x7a>
    if (result == 0) result = scpiLex_ProgramExpression(state, token);

    realLen += scpiLex_WhiteSpace(state, &tmp);
 8008050:	a901      	add	r1, sp, #4
 8008052:	4628      	mov	r0, r5
 8008054:	f7ff fb62 	bl	800771c <scpiLex_WhiteSpace>
 8008058:	4438      	add	r0, r7

    return result + realLen;
}
 800805a:	4420      	add	r0, r4
 800805c:	b004      	add	sp, #16
 800805e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 8008062:	a901      	add	r1, sp, #4
 8008064:	4628      	mov	r0, r5
 8008066:	f7ff fb59 	bl	800771c <scpiLex_WhiteSpace>
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 800806a:	a901      	add	r1, sp, #4
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 800806c:	4680      	mov	r8, r0
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 800806e:	4628      	mov	r0, r5
 8008070:	f7ff fc29 	bl	80078c6 <scpiLex_SuffixProgramData>
            if (suffixLen > 0) {
 8008074:	2800      	cmp	r0, #0
 8008076:	ddeb      	ble.n	8008050 <scpiParser_parseProgramData+0x40>
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 8008078:	230b      	movs	r3, #11
                token->len += wsLen + suffixLen;
 800807a:	68b4      	ldr	r4, [r6, #8]
 800807c:	4480      	add	r8, r0
 800807e:	4444      	add	r4, r8
 8008080:	60b4      	str	r4, [r6, #8]
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 8008082:	7033      	strb	r3, [r6, #0]
    if (result == 0) result = scpiLex_StringProgramData(state, token);
 8008084:	2c00      	cmp	r4, #0
 8008086:	d0dd      	beq.n	8008044 <scpiParser_parseProgramData+0x34>
 8008088:	e7e2      	b.n	8008050 <scpiParser_parseProgramData+0x40>
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	f7ff fcf0 	bl	8007a72 <scpiLex_ArbitraryBlockProgramData>
    if (result == 0) result = scpiLex_ProgramExpression(state, token);
 8008092:	4604      	mov	r4, r0
 8008094:	2800      	cmp	r0, #0
 8008096:	d1db      	bne.n	8008050 <scpiParser_parseProgramData+0x40>
 8008098:	4631      	mov	r1, r6
 800809a:	4628      	mov	r0, r5
 800809c:	f7ff fd4c 	bl	8007b38 <scpiLex_ProgramExpression>
 80080a0:	4604      	mov	r4, r0
 80080a2:	e7d5      	b.n	8008050 <scpiParser_parseProgramData+0x40>

080080a4 <SCPI_Parameter>:
scpi_bool_t SCPI_Parameter(scpi_t * context, scpi_parameter_t * parameter, scpi_bool_t mandatory) {
 80080a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a8:	4606      	mov	r6, r0
    if (!parameter) {
 80080aa:	460d      	mov	r5, r1
 80080ac:	2400      	movs	r4, #0
 80080ae:	b939      	cbnz	r1, 80080c0 <SCPI_Parameter+0x1c>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 80080b0:	f5a1 719b 	sub.w	r1, r1, #310	; 0x136
 80080b4:	f7ff f83a 	bl	800712c <SCPI_ErrorPush>
        return FALSE;
 80080b8:	462a      	mov	r2, r5
}
 80080ba:	4610      	mov	r0, r2
 80080bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    token->type = SCPI_TOKEN_UNKNOWN;
 80080c0:	f04f 081a 	mov.w	r8, #26
    if (state->pos >= (state->buffer + state->len)) {
 80080c4:	69c7      	ldr	r7, [r0, #28]
 80080c6:	6943      	ldr	r3, [r0, #20]
    token->ptr = ptr;
 80080c8:	e9c1 4401 	strd	r4, r4, [r1, #4]
    if (state->pos >= (state->buffer + state->len)) {
 80080cc:	443b      	add	r3, r7
 80080ce:	6987      	ldr	r7, [r0, #24]
    token->type = SCPI_TOKEN_UNKNOWN;
 80080d0:	f881 8000 	strb.w	r8, [r1]
    if (state->pos >= (state->buffer + state->len)) {
 80080d4:	429f      	cmp	r7, r3
 80080d6:	d309      	bcc.n	80080ec <SCPI_Parameter+0x48>
        if (mandatory) {
 80080d8:	b12a      	cbz	r2, 80080e6 <SCPI_Parameter+0x42>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 80080da:	f06f 016c 	mvn.w	r1, #108	; 0x6c
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 80080de:	f7ff f825 	bl	800712c <SCPI_ErrorPush>
            return FALSE;
 80080e2:	4622      	mov	r2, r4
 80080e4:	e7e9      	b.n	80080ba <SCPI_Parameter+0x16>
            parameter->type = SCPI_TOKEN_PROGRAM_MNEMONIC; /* TODO: select something different */
 80080e6:	2309      	movs	r3, #9
 80080e8:	700b      	strb	r3, [r1, #0]
 80080ea:	e7e6      	b.n	80080ba <SCPI_Parameter+0x16>
    if (context->input_count != 0) {
 80080ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
    state = &context->param_list.lex_state;
 80080ee:	f100 0714 	add.w	r7, r0, #20
    if (context->input_count != 0) {
 80080f2:	b163      	cbz	r3, 800810e <SCPI_Parameter+0x6a>
        scpiLex_Comma(state, parameter);
 80080f4:	4638      	mov	r0, r7
 80080f6:	f7ff fd5b 	bl	8007bb0 <scpiLex_Comma>
        if (parameter->type != SCPI_TOKEN_COMMA) {
 80080fa:	782b      	ldrb	r3, [r5, #0]
 80080fc:	b13b      	cbz	r3, 800810e <SCPI_Parameter+0x6a>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 80080fe:	f06f 0166 	mvn.w	r1, #102	; 0x66
    token->ptr = ptr;
 8008102:	e9c5 4401 	strd	r4, r4, [r5, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8008106:	f885 8000 	strb.w	r8, [r5]
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 800810a:	4630      	mov	r0, r6
 800810c:	e7e7      	b.n	80080de <SCPI_Parameter+0x3a>
    context->input_count++;
 800810e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 8008110:	4629      	mov	r1, r5
    context->input_count++;
 8008112:	3301      	adds	r3, #1
 8008114:	6373      	str	r3, [r6, #52]	; 0x34
    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 8008116:	4638      	mov	r0, r7
 8008118:	f7ff ff7a 	bl	8008010 <scpiParser_parseProgramData>
 800811c:	782b      	ldrb	r3, [r5, #0]
 800811e:	3b06      	subs	r3, #6
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b0a      	cmp	r3, #10
 8008124:	d806      	bhi.n	8008134 <SCPI_Parameter+0x90>
 8008126:	2201      	movs	r2, #1
 8008128:	f240 71bf 	movw	r1, #1983	; 0x7bf
 800812c:	fa02 f303 	lsl.w	r3, r2, r3
 8008130:	420b      	tst	r3, r1
 8008132:	d1c2      	bne.n	80080ba <SCPI_Parameter+0x16>
    token->len = 0;
 8008134:	2400      	movs	r4, #0
    token->type = SCPI_TOKEN_UNKNOWN;
 8008136:	231a      	movs	r3, #26
    token->ptr = ptr;
 8008138:	e9c5 4401 	strd	r4, r4, [r5, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 800813c:	702b      	strb	r3, [r5, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 800813e:	f06f 0196 	mvn.w	r1, #150	; 0x96
 8008142:	e7e2      	b.n	800810a <SCPI_Parameter+0x66>

08008144 <ParamSignUInt32>:
static scpi_bool_t ParamSignUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory, scpi_bool_t sign) {
 8008144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008146:	4605      	mov	r5, r0
 8008148:	b085      	sub	sp, #20
 800814a:	461f      	mov	r7, r3
    if (!value) {
 800814c:	460c      	mov	r4, r1
 800814e:	b921      	cbnz	r1, 800815a <ParamSignUInt32+0x16>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8008150:	4913      	ldr	r1, [pc, #76]	; (80081a0 <ParamSignUInt32+0x5c>)
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8008152:	f7fe ffeb 	bl	800712c <SCPI_ErrorPush>
            result = FALSE;
 8008156:	4620      	mov	r0, r4
 8008158:	e00f      	b.n	800817a <ParamSignUInt32+0x36>
    result = SCPI_Parameter(context, &param, mandatory);
 800815a:	a901      	add	r1, sp, #4
 800815c:	f7ff ffa2 	bl	80080a4 <SCPI_Parameter>
    if (result) {
 8008160:	b158      	cbz	r0, 800817a <ParamSignUInt32+0x36>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 8008162:	2100      	movs	r1, #0
 8008164:	a801      	add	r0, sp, #4
 8008166:	f7ff ff44 	bl	8007ff2 <SCPI_ParamIsNumber>
 800816a:	4606      	mov	r6, r0
 800816c:	b138      	cbz	r0, 800817e <ParamSignUInt32+0x3a>
            result = ParamSignToUInt32(context, &param, value, sign);
 800816e:	463b      	mov	r3, r7
 8008170:	4622      	mov	r2, r4
 8008172:	a901      	add	r1, sp, #4
 8008174:	4628      	mov	r0, r5
 8008176:	f7ff fd83 	bl	8007c80 <ParamSignToUInt32>
}
 800817a:	b005      	add	sp, #20
 800817c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 800817e:	2101      	movs	r1, #1
 8008180:	a801      	add	r0, sp, #4
 8008182:	f7ff ff36 	bl	8007ff2 <SCPI_ParamIsNumber>
 8008186:	4604      	mov	r4, r0
 8008188:	b130      	cbz	r0, 8008198 <ParamSignUInt32+0x54>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 800818a:	4628      	mov	r0, r5
 800818c:	f06f 0189 	mvn.w	r1, #137	; 0x89
 8008190:	f7fe ffcc 	bl	800712c <SCPI_ErrorPush>
            result = FALSE;
 8008194:	4630      	mov	r0, r6
 8008196:	e7f0      	b.n	800817a <ParamSignUInt32+0x36>
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8008198:	f06f 0167 	mvn.w	r1, #103	; 0x67
 800819c:	4628      	mov	r0, r5
 800819e:	e7d8      	b.n	8008152 <ParamSignUInt32+0xe>
 80081a0:	fffffeca 	.word	0xfffffeca

080081a4 <SCPI_ParamInt32>:
    return ParamSignUInt32(context, (uint32_t *) value, mandatory, TRUE);
 80081a4:	2301      	movs	r3, #1
 80081a6:	f7ff bfcd 	b.w	8008144 <ParamSignUInt32>

080081aa <SCPI_ParamUInt32>:
    return ParamSignUInt32(context, value, mandatory, FALSE);
 80081aa:	2300      	movs	r3, #0
 80081ac:	f7ff bfca 	b.w	8008144 <ParamSignUInt32>

080081b0 <SCPI_ParamCharacters>:
scpi_bool_t SCPI_ParamCharacters(scpi_t * context, const char ** value, size_t * len, scpi_bool_t mandatory) {
 80081b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80081b2:	4606      	mov	r6, r0
 80081b4:	4614      	mov	r4, r2
    if (!value || !len) {
 80081b6:	460d      	mov	r5, r1
 80081b8:	b101      	cbz	r1, 80081bc <SCPI_ParamCharacters+0xc>
 80081ba:	b932      	cbnz	r2, 80081ca <SCPI_ParamCharacters+0x1a>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 80081bc:	4630      	mov	r0, r6
 80081be:	490d      	ldr	r1, [pc, #52]	; (80081f4 <SCPI_ParamCharacters+0x44>)
 80081c0:	f7fe ffb4 	bl	800712c <SCPI_ErrorPush>
        return FALSE;
 80081c4:	2000      	movs	r0, #0
}
 80081c6:	b004      	add	sp, #16
 80081c8:	bd70      	pop	{r4, r5, r6, pc}
    result = SCPI_Parameter(context, &param, mandatory);
 80081ca:	461a      	mov	r2, r3
 80081cc:	a901      	add	r1, sp, #4
 80081ce:	f7ff ff69 	bl	80080a4 <SCPI_Parameter>
    if (result) {
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d0f7      	beq.n	80081c6 <SCPI_ParamCharacters+0x16>
 80081d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        switch (param.type) {
 80081da:	f89d 1004 	ldrb.w	r1, [sp, #4]
                break;
 80081de:	2001      	movs	r0, #1
        switch (param.type) {
 80081e0:	390e      	subs	r1, #14
 80081e2:	2901      	cmp	r1, #1
                *value = param.ptr + 1;
 80081e4:	bf9d      	ittte	ls
 80081e6:	3201      	addls	r2, #1
                *len = param.len - 2;
 80081e8:	3b02      	subls	r3, #2
                *value = param.ptr + 1;
 80081ea:	602a      	strls	r2, [r5, #0]
                *value = param.ptr;
 80081ec:	602a      	strhi	r2, [r5, #0]
                *len = param.len;
 80081ee:	6023      	str	r3, [r4, #0]
                break;
 80081f0:	e7e9      	b.n	80081c6 <SCPI_ParamCharacters+0x16>
 80081f2:	bf00      	nop
 80081f4:	fffffeca 	.word	0xfffffeca

080081f8 <scpiParser_parseAllProgramData>:

    int result;
    scpi_token_t tmp;
    int paramCount = 0;

    token->len = -1;
 80081f8:	f04f 33ff 	mov.w	r3, #4294967295
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 80081fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    token->len = -1;
 80081fe:	608b      	str	r3, [r1, #8]
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 8008200:	2318      	movs	r3, #24
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8008202:	4606      	mov	r6, r0
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 8008204:	700b      	strb	r3, [r1, #0]
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8008206:	460c      	mov	r4, r1
    token->ptr = state->pos;
 8008208:	6843      	ldr	r3, [r0, #4]
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 800820a:	4617      	mov	r7, r2
    int paramCount = 0;
 800820c:	2500      	movs	r5, #0


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 800820e:	2001      	movs	r0, #1
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8008210:	b085      	sub	sp, #20
    token->ptr = state->pos;
 8008212:	604b      	str	r3, [r1, #4]
        token->len += result;
 8008214:	68a3      	ldr	r3, [r4, #8]
            token->len = 0;
            paramCount = -1;
            break;
        }

        result = scpiParser_parseProgramData(state, &tmp);
 8008216:	a901      	add	r1, sp, #4
        token->len += result;
 8008218:	4418      	add	r0, r3
 800821a:	60a0      	str	r0, [r4, #8]
        result = scpiParser_parseProgramData(state, &tmp);
 800821c:	4630      	mov	r0, r6
 800821e:	f7ff fef7 	bl	8008010 <scpiParser_parseProgramData>
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
 8008222:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008226:	2a1a      	cmp	r2, #26
 8008228:	d013      	beq.n	8008252 <scpiParser_parseAllProgramData+0x5a>
            token->len += result;
 800822a:	68a3      	ldr	r3, [r4, #8]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 800822c:	a901      	add	r1, sp, #4
            token->len += result;
 800822e:	4403      	add	r3, r0
 8008230:	60a3      	str	r3, [r4, #8]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8008232:	4630      	mov	r0, r6
            token->type = SCPI_TOKEN_UNKNOWN;
            token->len = 0;
            paramCount = -1;
            break;
        }
        paramCount++;
 8008234:	3501      	adds	r5, #1
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8008236:	f7ff fcbb 	bl	8007bb0 <scpiLex_Comma>
 800823a:	2800      	cmp	r0, #0
 800823c:	d1ea      	bne.n	8008214 <scpiParser_parseAllProgramData+0x1c>
    }

    if (token->len == -1) {
 800823e:	68a3      	ldr	r3, [r4, #8]
 8008240:	3301      	adds	r3, #1
        token->len = 0;
 8008242:	bf04      	itt	eq
 8008244:	2300      	moveq	r3, #0
 8008246:	60a3      	streq	r3, [r4, #8]
    }

    if (numberOfParameters != NULL) {
 8008248:	b107      	cbz	r7, 800824c <scpiParser_parseAllProgramData+0x54>
        *numberOfParameters = paramCount;
 800824a:	603d      	str	r5, [r7, #0]
    }
    return token->len;
}
 800824c:	68a0      	ldr	r0, [r4, #8]
 800824e:	b005      	add	sp, #20
 8008250:	bdf0      	pop	{r4, r5, r6, r7, pc}
            token->len = 0;
 8008252:	2300      	movs	r3, #0
            token->type = SCPI_TOKEN_UNKNOWN;
 8008254:	7022      	strb	r2, [r4, #0]
            token->len = 0;
 8008256:	60a3      	str	r3, [r4, #8]
            paramCount = -1;
 8008258:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800825c:	e7ef      	b.n	800823e <scpiParser_parseAllProgramData+0x46>

0800825e <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 800825e:	b530      	push	{r4, r5, lr}
    scpi_token_t tmp;
    int result = 0;

    lex_state.buffer = lex_state.pos = buffer;
    lex_state.len = len;
    state->numberOfParameters = 0;
 8008260:	2500      	movs	r5, #0
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 8008262:	4604      	mov	r4, r0
 8008264:	b087      	sub	sp, #28
    lex_state.buffer = lex_state.pos = buffer;
 8008266:	e9cd 1100 	strd	r1, r1, [sp]
    state->numberOfParameters = 0;
 800826a:	6185      	str	r5, [r0, #24]

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
 800826c:	a903      	add	r1, sp, #12
 800826e:	4668      	mov	r0, sp
    lex_state.len = len;
 8008270:	9202      	str	r2, [sp, #8]
    scpiLex_WhiteSpace(&lex_state, &tmp);
 8008272:	f7ff fa53 	bl	800771c <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
 8008276:	4621      	mov	r1, r4
 8008278:	4668      	mov	r0, sp
 800827a:	f7ff fa60 	bl	800773e <scpiLex_ProgramHeader>
 800827e:	42a8      	cmp	r0, r5
 8008280:	db38      	blt.n	80082f4 <scpiParser_detectProgramMessageUnit+0x96>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
 8008282:	a903      	add	r1, sp, #12
 8008284:	4668      	mov	r0, sp
 8008286:	f7ff fa49 	bl	800771c <scpiLex_WhiteSpace>
 800828a:	42a8      	cmp	r0, r5
 800828c:	dd2c      	ble.n	80082e8 <scpiParser_detectProgramMessageUnit+0x8a>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
 800828e:	f104 0218 	add.w	r2, r4, #24
 8008292:	f104 010c 	add.w	r1, r4, #12
 8008296:	4668      	mov	r0, sp
 8008298:	f7ff ffae 	bl	80081f8 <scpiParser_parseAllProgramData>
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
        invalidateToken(&state->programData, lex_state.buffer);
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
 800829c:	a903      	add	r1, sp, #12
 800829e:	4668      	mov	r0, sp
 80082a0:	f7ff fca7 	bl	8007bf2 <scpiLex_NewLine>
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
 80082a4:	4605      	mov	r5, r0
 80082a6:	b920      	cbnz	r0, 80082b2 <scpiParser_detectProgramMessageUnit+0x54>
 80082a8:	a903      	add	r1, sp, #12
 80082aa:	4668      	mov	r0, sp
 80082ac:	f7ff fc91 	bl	8007bd2 <scpiLex_Semicolon>
 80082b0:	4605      	mov	r5, r0

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
 80082b2:	4668      	mov	r0, sp
 80082b4:	f7ff fa30 	bl	8007718 <scpiLex_IsEos>
 80082b8:	9a00      	ldr	r2, [sp, #0]
 80082ba:	b958      	cbnz	r0, 80082d4 <scpiParser_detectProgramMessageUnit+0x76>
 80082bc:	b955      	cbnz	r5, 80082d4 <scpiParser_detectProgramMessageUnit+0x76>
        lex_state.pos++;
 80082be:	9b01      	ldr	r3, [sp, #4]
    token->ptr = ptr;
 80082c0:	e9c4 2504 	strd	r2, r5, [r4, #16]
        lex_state.pos++;
 80082c4:	3301      	adds	r3, #1
 80082c6:	9301      	str	r3, [sp, #4]

        state->programHeader.len = 1;
 80082c8:	2301      	movs	r3, #1
 80082ca:	60a3      	str	r3, [r4, #8]
        state->programHeader.type = SCPI_TOKEN_INVALID;
 80082cc:	2319      	movs	r3, #25
 80082ce:	7023      	strb	r3, [r4, #0]
    token->type = SCPI_TOKEN_UNKNOWN;
 80082d0:	231a      	movs	r3, #26
 80082d2:	7323      	strb	r3, [r4, #12]

        invalidateToken(&state->programData, lex_state.buffer);
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
 80082d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d113      	bne.n	8008304 <scpiParser_detectProgramMessageUnit+0xa6>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
 80082dc:	2302      	movs	r3, #2
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
    }

    return lex_state.pos - lex_state.buffer;
}
 80082de:	9801      	ldr	r0, [sp, #4]
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 80082e0:	7723      	strb	r3, [r4, #28]
}
 80082e2:	1a80      	subs	r0, r0, r2
 80082e4:	b007      	add	sp, #28
 80082e6:	bd30      	pop	{r4, r5, pc}
    token->ptr = ptr;
 80082e8:	9b01      	ldr	r3, [sp, #4]
    token->len = 0;
 80082ea:	6165      	str	r5, [r4, #20]
    token->ptr = ptr;
 80082ec:	6123      	str	r3, [r4, #16]
    token->type = SCPI_TOKEN_UNKNOWN;
 80082ee:	231a      	movs	r3, #26
 80082f0:	7323      	strb	r3, [r4, #12]
 80082f2:	e7d3      	b.n	800829c <scpiParser_detectProgramMessageUnit+0x3e>
 80082f4:	231a      	movs	r3, #26
        invalidateToken(&state->programHeader, lex_state.buffer);
 80082f6:	9a00      	ldr	r2, [sp, #0]
    token->type = SCPI_TOKEN_UNKNOWN;
 80082f8:	7023      	strb	r3, [r4, #0]
    token->ptr = ptr;
 80082fa:	e9c4 2501 	strd	r2, r5, [r4, #4]
 80082fe:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8008302:	e7f5      	b.n	80082f0 <scpiParser_detectProgramMessageUnit+0x92>
    } else if (SCPI_TOKEN_NL == tmp.type) {
 8008304:	2b05      	cmp	r3, #5
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
 8008306:	bf0c      	ite	eq
 8008308:	2301      	moveq	r3, #1
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 800830a:	2300      	movne	r3, #0
 800830c:	e7e7      	b.n	80082de <scpiParser_detectProgramMessageUnit+0x80>
	...

08008310 <SCPI_Parse>:
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 8008314:	231a      	movs	r3, #26
 8008316:	2500      	movs	r5, #0
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 8008318:	b08b      	sub	sp, #44	; 0x2c
 800831a:	460e      	mov	r6, r1
 800831c:	4690      	mov	r8, r2
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 800831e:	f88d 301c 	strb.w	r3, [sp, #28]
 8008322:	e9cd 5508 	strd	r5, r5, [sp, #32]
    if (context == NULL) {
 8008326:	4604      	mov	r4, r0
 8008328:	2800      	cmp	r0, #0
 800832a:	f000 80ae 	beq.w	800848a <SCPI_Parse+0x17a>
    scpi_bool_t result = TRUE;
 800832e:	2701      	movs	r7, #1
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 8008330:	46ab      	mov	fp, r5
    state = &context->parser_state;
 8008332:	f100 0364 	add.w	r3, r0, #100	; 0x64
 8008336:	9302      	str	r3, [sp, #8]
    context->output_count = 0;
 8008338:	6305      	str	r5, [r0, #48]	; 0x30
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 800833a:	4642      	mov	r2, r8
 800833c:	4631      	mov	r1, r6
 800833e:	9802      	ldr	r0, [sp, #8]
 8008340:	f7ff ff8d 	bl	800825e <scpiParser_detectProgramMessageUnit>
        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 8008344:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 8008348:	4681      	mov	r9, r0
        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 800834a:	2b19      	cmp	r3, #25
 800834c:	d106      	bne.n	800835c <SCPI_Parse+0x4c>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER);
 800834e:	f06f 0164 	mvn.w	r1, #100	; 0x64
 8008352:	4620      	mov	r0, r4
 8008354:	f7fe feea 	bl	800712c <SCPI_ErrorPush>
                result = FALSE;
 8008358:	2700      	movs	r7, #0
 800835a:	e07a      	b.n	8008452 <SCPI_Parse+0x142>
        } else if (state->programHeader.len > 0) {
 800835c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800835e:	2b00      	cmp	r3, #0
 8008360:	dd77      	ble.n	8008452 <SCPI_Parse+0x142>
            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 8008362:	f04f 0a00 	mov.w	sl, #0
            composeCompoundCommand(&cmd_prev, &state->programHeader);
 8008366:	9902      	ldr	r1, [sp, #8]
 8008368:	a807      	add	r0, sp, #28
 800836a:	f000 fb1b 	bl	80089a4 <composeCompoundCommand>
            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 800836e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008370:	9304      	str	r3, [sp, #16]
 8008372:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008374:	9305      	str	r3, [sp, #20]
    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	f853 000a 	ldr.w	r0, [r3, sl]
 800837c:	eb03 020a 	add.w	r2, r3, sl
 8008380:	9203      	str	r2, [sp, #12]
 8008382:	b990      	cbnz	r0, 80083aa <SCPI_Parse+0x9a>
 8008384:	eb06 0209 	add.w	r2, r6, r9
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
 8008388:	4296      	cmp	r6, r2
 800838a:	eba2 0306 	sub.w	r3, r2, r6
 800838e:	d068      	beq.n	8008462 <SCPI_Parse+0x152>
 8008390:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8008394:	290d      	cmp	r1, #13
 8008396:	d0f7      	beq.n	8008388 <SCPI_Parse+0x78>
 8008398:	290a      	cmp	r1, #10
 800839a:	d0f5      	beq.n	8008388 <SCPI_Parse+0x78>
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
 800839c:	4632      	mov	r2, r6
 800839e:	f06f 0170 	mvn.w	r1, #112	; 0x70
 80083a2:	4620      	mov	r0, r4
 80083a4:	f7fe fe72 	bl	800708c <SCPI_ErrorPushEx>
 80083a8:	e7d6      	b.n	8008358 <SCPI_Parse+0x48>
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 80083aa:	e9cd bb00 	strd	fp, fp, [sp]
 80083ae:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80083b2:	2300      	movs	r3, #0
 80083b4:	f000 f9f2 	bl	800879c <matchCommand>
 80083b8:	f10a 0a0c 	add.w	sl, sl, #12
 80083bc:	2800      	cmp	r0, #0
 80083be:	d0da      	beq.n	8008376 <SCPI_Parse+0x66>
            context->param_list.cmd = cmd;
 80083c0:	9b03      	ldr	r3, [sp, #12]
 80083c2:	6123      	str	r3, [r4, #16]
                context->param_list.lex_state.buffer = state->programData.ptr;
 80083c4:	6f63      	ldr	r3, [r4, #116]	; 0x74
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
 80083c6:	e9c4 3305 	strd	r3, r3, [r4, #20]
                context->param_list.lex_state.len = state->programData.len;
 80083ca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80083cc:	61e3      	str	r3, [r4, #28]
                context->param_list.cmd_raw.data = state->programHeader.ptr;
 80083ce:	6ea3      	ldr	r3, [r4, #104]	; 0x68
                context->param_list.cmd_raw.position = 0;
 80083d0:	e9c4 b309 	strd	fp, r3, [r4, #36]	; 0x24
                context->param_list.cmd_raw.length = state->programHeader.len;
 80083d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80083d6:	6223      	str	r3, [r4, #32]
    if (context->output_count > 0) {
 80083d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083da:	2b00      	cmp	r3, #0
 80083dc:	dc18      	bgt.n	8008410 <SCPI_Parse+0x100>
    if (cmd->callback != NULL) {
 80083de:	9b03      	ldr	r3, [sp, #12]
    context->cmd_error = FALSE;
 80083e0:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    if (cmd->callback != NULL) {
 80083e4:	685b      	ldr	r3, [r3, #4]
    context->input_count = 0;
 80083e6:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    context->arbitrary_reminding = 0;
 80083ea:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
    if (cmd->callback != NULL) {
 80083ee:	b3b3      	cbz	r3, 800845e <SCPI_Parse+0x14e>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
 80083f0:	4620      	mov	r0, r4
 80083f2:	4798      	blx	r3
 80083f4:	2801      	cmp	r0, #1
 80083f6:	f894 a038 	ldrb.w	sl, [r4, #56]	; 0x38
 80083fa:	d00f      	beq.n	800841c <SCPI_Parse+0x10c>
            if (!context->cmd_error) {
 80083fc:	f1ba 0f00 	cmp.w	sl, #0
 8008400:	d104      	bne.n	800840c <SCPI_Parse+0xfc>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 8008402:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8008406:	4620      	mov	r0, r4
 8008408:	f7fe fe90 	bl	800712c <SCPI_ErrorPush>
            result = FALSE;
 800840c:	2300      	movs	r3, #0
 800840e:	e007      	b.n	8008420 <SCPI_Parse+0x110>
        return writeData(context, ";", 1);
 8008410:	2201      	movs	r2, #1
 8008412:	491f      	ldr	r1, [pc, #124]	; (8008490 <SCPI_Parse+0x180>)
 8008414:	4620      	mov	r0, r4
 8008416:	f7ff fc29 	bl	8007c6c <writeData>
 800841a:	e7e0      	b.n	80083de <SCPI_Parse+0xce>
            if (context->cmd_error) {
 800841c:	f08a 0301 	eor.w	r3, sl, #1
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
 8008420:	69e1      	ldr	r1, [r4, #28]
 8008422:	6962      	ldr	r2, [r4, #20]
 8008424:	440a      	add	r2, r1
 8008426:	69a1      	ldr	r1, [r4, #24]
 8008428:	4291      	cmp	r1, r2
 800842a:	d20a      	bcs.n	8008442 <SCPI_Parse+0x132>
 800842c:	f894 a038 	ldrb.w	sl, [r4, #56]	; 0x38
 8008430:	f1ba 0f00 	cmp.w	sl, #0
 8008434:	d105      	bne.n	8008442 <SCPI_Parse+0x132>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 8008436:	f06f 016b 	mvn.w	r1, #107	; 0x6b
 800843a:	4620      	mov	r0, r4
 800843c:	f7fe fe76 	bl	800712c <SCPI_ErrorPush>
        result = FALSE;
 8008440:	4653      	mov	r3, sl
 8008442:	401f      	ands	r7, r3
                cmd_prev = state->programHeader;
 8008444:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8008448:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800844c:	ab0a      	add	r3, sp, #40	; 0x28
 800844e:	e903 0007 	stmdb	r3, {r0, r1, r2}
        if (r < len) {
 8008452:	45c8      	cmp	r8, r9
 8008454:	dd07      	ble.n	8008466 <SCPI_Parse+0x156>
            data += r;
 8008456:	444e      	add	r6, r9
            len -= r;
 8008458:	eba8 0809 	sub.w	r8, r8, r9
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 800845c:	e76d      	b.n	800833a <SCPI_Parse+0x2a>
    scpi_bool_t result = TRUE;
 800845e:	2301      	movs	r3, #1
 8008460:	e7de      	b.n	8008420 <SCPI_Parse+0x110>
 8008462:	2300      	movs	r3, #0
 8008464:	e79a      	b.n	800839c <SCPI_Parse+0x8c>
    if (context->output_count > 0) {
 8008466:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008468:	2b00      	cmp	r3, #0
 800846a:	dd0a      	ble.n	8008482 <SCPI_Parse+0x172>
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
 800846c:	2202      	movs	r2, #2
 800846e:	4909      	ldr	r1, [pc, #36]	; (8008494 <SCPI_Parse+0x184>)
 8008470:	4620      	mov	r0, r4
 8008472:	f7ff fbfb 	bl	8007c6c <writeData>
    if (context && context->interface && context->interface->flush) {
 8008476:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008478:	b11b      	cbz	r3, 8008482 <SCPI_Parse+0x172>
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	b10b      	cbz	r3, 8008482 <SCPI_Parse+0x172>
        return context->interface->flush(context);
 800847e:	4620      	mov	r0, r4
 8008480:	4798      	blx	r3
}
 8008482:	4638      	mov	r0, r7
 8008484:	b00b      	add	sp, #44	; 0x2c
 8008486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return FALSE;
 800848a:	4607      	mov	r7, r0
 800848c:	e7f9      	b.n	8008482 <SCPI_Parse+0x172>
 800848e:	bf00      	nop
 8008490:	0800ade3 	.word	0x0800ade3
 8008494:	0800a81c 	.word	0x0800a81c

08008498 <SCPI_Input>:
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	e9d0 3602 	ldrd	r3, r6, [r0, #8]
 800849e:	4604      	mov	r4, r0
    if (len == 0) {
 80084a0:	4615      	mov	r5, r2
 80084a2:	b942      	cbnz	r2, 80084b6 <SCPI_Input+0x1e>
        context->buffer.data[context->buffer.position] = 0;
 80084a4:	54f2      	strb	r2, [r6, r3]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 80084a6:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 80084aa:	f7ff ff31 	bl	8008310 <SCPI_Parse>
 80084ae:	4606      	mov	r6, r0
        context->buffer.position = 0;
 80084b0:	60a5      	str	r5, [r4, #8]
}
 80084b2:	4630      	mov	r0, r6
 80084b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buffer_free = context->buffer.length - context->buffer.position;
 80084b6:	6847      	ldr	r7, [r0, #4]
 80084b8:	1aff      	subs	r7, r7, r3
        if (len > (buffer_free - 1)) {
 80084ba:	42ba      	cmp	r2, r7
 80084bc:	db08      	blt.n	80084d0 <SCPI_Input+0x38>
            context->buffer.position = 0;
 80084be:	2500      	movs	r5, #0
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 80084c0:	f46f 71b5 	mvn.w	r1, #362	; 0x16a
            context->buffer.position = 0;
 80084c4:	6085      	str	r5, [r0, #8]
            context->buffer.data[context->buffer.position] = 0;
 80084c6:	7035      	strb	r5, [r6, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 80084c8:	f7fe fe30 	bl	800712c <SCPI_ErrorPush>
            return FALSE;
 80084cc:	462e      	mov	r6, r5
 80084ce:	e7f0      	b.n	80084b2 <SCPI_Input+0x1a>
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 80084d0:	18f0      	adds	r0, r6, r3
 80084d2:	f000 faef 	bl	8008ab4 <memcpy>
        context->buffer.position += len;
 80084d6:	68a3      	ldr	r3, [r4, #8]
    scpi_bool_t result = TRUE;
 80084d8:	2601      	movs	r6, #1
        context->buffer.position += len;
 80084da:	442b      	add	r3, r5
        context->buffer.data[context->buffer.position] = 0;
 80084dc:	2500      	movs	r5, #0
 80084de:	68e2      	ldr	r2, [r4, #12]
        context->buffer.position += len;
 80084e0:	60a3      	str	r3, [r4, #8]
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 80084e2:	f104 0764 	add.w	r7, r4, #100	; 0x64
        context->buffer.data[context->buffer.position] = 0;
 80084e6:	54d5      	strb	r5, [r2, r3]
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 80084e8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80084ec:	4638      	mov	r0, r7
 80084ee:	1b52      	subs	r2, r2, r5
 80084f0:	4429      	add	r1, r5
 80084f2:	f7ff feb4 	bl	800825e <scpiParser_detectProgramMessageUnit>
            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 80084f6:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
            totcmdlen += cmdlen;
 80084fa:	4405      	add	r5, r0
            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d110      	bne.n	8008522 <SCPI_Input+0x8a>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
 8008500:	462a      	mov	r2, r5
 8008502:	68e1      	ldr	r1, [r4, #12]
 8008504:	4620      	mov	r0, r4
 8008506:	f7ff ff03 	bl	8008310 <SCPI_Parse>
 800850a:	4606      	mov	r6, r0
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800850c:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8008510:	1b52      	subs	r2, r2, r5
 8008512:	1941      	adds	r1, r0, r5
 8008514:	f000 fad9 	bl	8008aca <memmove>
                context->buffer.position -= totcmdlen;
 8008518:	68a3      	ldr	r3, [r4, #8]
 800851a:	1b5d      	subs	r5, r3, r5
 800851c:	60a5      	str	r5, [r4, #8]
                totcmdlen = 0;
 800851e:	2500      	movs	r5, #0
 8008520:	e7e2      	b.n	80084e8 <SCPI_Input+0x50>
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN
 8008522:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
 8008526:	2a1a      	cmp	r2, #26
 8008528:	d101      	bne.n	800852e <SCPI_Input+0x96>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0c1      	beq.n	80084b2 <SCPI_Input+0x1a>
                if (totcmdlen >= context->buffer.position) break;
 800852e:	68a3      	ldr	r3, [r4, #8]
 8008530:	42ab      	cmp	r3, r5
 8008532:	d8d9      	bhi.n	80084e8 <SCPI_Input+0x50>
 8008534:	e7bd      	b.n	80084b2 <SCPI_Input+0x1a>

08008536 <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 8008536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800853a:	4605      	mov	r5, r0
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 800853c:	4604      	mov	r4, r0
 800853e:	eb00 0801 	add.w	r8, r0, r1
 8008542:	4544      	cmp	r4, r8
 8008544:	eba4 0605 	sub.w	r6, r4, r5
 8008548:	d00c      	beq.n	8008564 <patternSeparatorShortPos+0x2e>
 800854a:	7823      	ldrb	r3, [r4, #0]
 800854c:	4627      	mov	r7, r4
 800854e:	b14b      	cbz	r3, 8008564 <patternSeparatorShortPos+0x2e>
        if (islower((unsigned char) pattern[i])) {
 8008550:	f000 fa80 	bl	8008a54 <__locale_ctype_ptr>
 8008554:	783b      	ldrb	r3, [r7, #0]
 8008556:	3401      	adds	r4, #1
 8008558:	4418      	add	r0, r3
 800855a:	7843      	ldrb	r3, [r0, #1]
 800855c:	f003 0303 	and.w	r3, r3, #3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d1ee      	bne.n	8008542 <patternSeparatorShortPos+0xc>
            return i;
        }
    }
    return i;
}
 8008564:	4630      	mov	r0, r6
 8008566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800856a <strnpbrk>:
char * strnpbrk(const char *str, size_t size, const char *set) {
 800856a:	b570      	push	{r4, r5, r6, lr}
    const char * strend = str + size;
 800856c:	4401      	add	r1, r0
    while ((strend != str) && ((c = *str++) != 0)) {
 800856e:	4288      	cmp	r0, r1
 8008570:	d003      	beq.n	800857a <strnpbrk+0x10>
 8008572:	4604      	mov	r4, r0
 8008574:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008578:	b923      	cbnz	r3, 8008584 <strnpbrk+0x1a>
    return (NULL);
 800857a:	2000      	movs	r0, #0
 800857c:	e001      	b.n	8008582 <strnpbrk+0x18>
            if (sc == c)
 800857e:	42ab      	cmp	r3, r5
 8008580:	d101      	bne.n	8008586 <strnpbrk+0x1c>
}
 8008582:	bd70      	pop	{r4, r5, r6, pc}
        for (scanp = set; (sc = *scanp++) != '\0';)
 8008584:	4616      	mov	r6, r2
 8008586:	f816 5b01 	ldrb.w	r5, [r6], #1
 800858a:	2d00      	cmp	r5, #0
 800858c:	d1f7      	bne.n	800857e <strnpbrk+0x14>
 800858e:	4620      	mov	r0, r4
 8008590:	e7ed      	b.n	800856e <strnpbrk+0x4>
	...

08008594 <UInt32ToStrBaseSign>:
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 8008594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008598:	4605      	mov	r5, r0
 800859a:	460f      	mov	r7, r1
 800859c:	b086      	sub	sp, #24
    const char digits[] = "0123456789ABCDEF";
 800859e:	4e2d      	ldr	r6, [pc, #180]	; (8008654 <UInt32ToStrBaseSign+0xc0>)
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 80085a0:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
    const char digits[] = "0123456789ABCDEF";
 80085a4:	f10d 0c04 	add.w	ip, sp, #4
 80085a8:	f106 0810 	add.w	r8, r6, #16
 80085ac:	46e6      	mov	lr, ip
 80085ae:	6830      	ldr	r0, [r6, #0]
 80085b0:	6871      	ldr	r1, [r6, #4]
 80085b2:	3608      	adds	r6, #8
 80085b4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80085b8:	4546      	cmp	r6, r8
 80085ba:	46f4      	mov	ip, lr
 80085bc:	d1f6      	bne.n	80085ac <UInt32ToStrBaseSign+0x18>
 80085be:	7831      	ldrb	r1, [r6, #0]
 80085c0:	f88e 1000 	strb.w	r1, [lr]
    if (uval == 0) {
 80085c4:	b94d      	cbnz	r5, 80085da <UInt32ToStrBaseSign+0x46>
        ADD_CHAR('0');
 80085c6:	2a00      	cmp	r2, #0
 80085c8:	d041      	beq.n	800864e <UInt32ToStrBaseSign+0xba>
 80085ca:	2330      	movs	r3, #48	; 0x30
 80085cc:	2001      	movs	r0, #1
 80085ce:	703b      	strb	r3, [r7, #0]
    if (pos < len) str[pos] = 0;
 80085d0:	4290      	cmp	r0, r2
 80085d2:	d22f      	bcs.n	8008634 <UInt32ToStrBaseSign+0xa0>
 80085d4:	2300      	movs	r3, #0
 80085d6:	543b      	strb	r3, [r7, r0]
 80085d8:	e02c      	b.n	8008634 <UInt32ToStrBaseSign+0xa0>
        switch (base) {
 80085da:	2b08      	cmp	r3, #8
 80085dc:	d006      	beq.n	80085ec <UInt32ToStrBaseSign+0x58>
 80085de:	2b10      	cmp	r3, #16
 80085e0:	d02e      	beq.n	8008640 <UInt32ToStrBaseSign+0xac>
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d129      	bne.n	800863a <UInt32ToStrBaseSign+0xa6>
                x = 0x80000000L;
 80085e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80085ea:	e001      	b.n	80085f0 <UInt32ToStrBaseSign+0x5c>
                x = 0x40000000L;
 80085ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        if (sign && ((int32_t) val < 0) && (base == 10)) {
 80085f0:	b34c      	cbz	r4, 8008646 <UInt32ToStrBaseSign+0xb2>
 80085f2:	2d00      	cmp	r5, #0
 80085f4:	da27      	bge.n	8008646 <UInt32ToStrBaseSign+0xb2>
 80085f6:	2b0a      	cmp	r3, #10
 80085f8:	d125      	bne.n	8008646 <UInt32ToStrBaseSign+0xb2>
            uval = -val;
 80085fa:	426d      	negs	r5, r5
            ADD_CHAR('-');
 80085fc:	b31a      	cbz	r2, 8008646 <UInt32ToStrBaseSign+0xb2>
 80085fe:	202d      	movs	r0, #45	; 0x2d
 8008600:	7038      	strb	r0, [r7, #0]
 8008602:	2001      	movs	r0, #1
        while ((uval / x) == 0) {
 8008604:	fbb5 f4f1 	udiv	r4, r5, r1
 8008608:	fbb1 f6f3 	udiv	r6, r1, r3
 800860c:	b1ec      	cbz	r4, 800864a <UInt32ToStrBaseSign+0xb6>
            digit = (uint8_t) (uval / x);
 800860e:	fbb5 f4f1 	udiv	r4, r5, r1
            ADD_CHAR(digits[digit]);
 8008612:	4290      	cmp	r0, r2
 8008614:	b2e4      	uxtb	r4, r4
 8008616:	d205      	bcs.n	8008624 <UInt32ToStrBaseSign+0x90>
 8008618:	ae06      	add	r6, sp, #24
 800861a:	4426      	add	r6, r4
 800861c:	f816 6c14 	ldrb.w	r6, [r6, #-20]
 8008620:	543e      	strb	r6, [r7, r0]
 8008622:	3001      	adds	r0, #1
            uval -= digit * x;
 8008624:	fb04 5511 	mls	r5, r4, r1, r5
            x /= base;
 8008628:	fbb1 f1f3 	udiv	r1, r1, r3
        } while (x && (pos < len));
 800862c:	2900      	cmp	r1, #0
 800862e:	d0cf      	beq.n	80085d0 <UInt32ToStrBaseSign+0x3c>
 8008630:	4290      	cmp	r0, r2
 8008632:	d3ec      	bcc.n	800860e <UInt32ToStrBaseSign+0x7a>
}
 8008634:	b006      	add	sp, #24
 8008636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                x = 1000000000L;
 800863a:	4907      	ldr	r1, [pc, #28]	; (8008658 <UInt32ToStrBaseSign+0xc4>)
                base = 10;
 800863c:	230a      	movs	r3, #10
                break;
 800863e:	e7d7      	b.n	80085f0 <UInt32ToStrBaseSign+0x5c>
                x = 0x10000000L;
 8008640:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
                break;
 8008644:	e7d4      	b.n	80085f0 <UInt32ToStrBaseSign+0x5c>
    size_t pos = 0;
 8008646:	2000      	movs	r0, #0
 8008648:	e7dc      	b.n	8008604 <UInt32ToStrBaseSign+0x70>
            x /= base;
 800864a:	4631      	mov	r1, r6
 800864c:	e7da      	b.n	8008604 <UInt32ToStrBaseSign+0x70>
    size_t pos = 0;
 800864e:	4610      	mov	r0, r2
    return pos;
 8008650:	e7f0      	b.n	8008634 <UInt32ToStrBaseSign+0xa0>
 8008652:	bf00      	nop
 8008654:	0800aea2 	.word	0x0800aea2
 8008658:	3b9aca00 	.word	0x3b9aca00

0800865c <SCPI_UInt32ToStrBase>:
size_t SCPI_UInt32ToStrBase(uint32_t val, char * str, size_t len, int8_t base) {
 800865c:	b513      	push	{r0, r1, r4, lr}
    return UInt32ToStrBaseSign(val, str, len, base, FALSE);
 800865e:	2400      	movs	r4, #0
 8008660:	9400      	str	r4, [sp, #0]
 8008662:	f7ff ff97 	bl	8008594 <UInt32ToStrBaseSign>
}
 8008666:	b002      	add	sp, #8
 8008668:	bd10      	pop	{r4, pc}

0800866a <strBaseToInt32>:
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 800866a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800866c:	460d      	mov	r5, r1
    *val = strtol(str, &endptr, base);
 800866e:	a901      	add	r1, sp, #4
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 8008670:	4604      	mov	r4, r0
    *val = strtol(str, &endptr, base);
 8008672:	f000 fbd5 	bl	8008e20 <strtol>
 8008676:	6028      	str	r0, [r5, #0]
}
 8008678:	9801      	ldr	r0, [sp, #4]
 800867a:	1b00      	subs	r0, r0, r4
 800867c:	b003      	add	sp, #12
 800867e:	bd30      	pop	{r4, r5, pc}

08008680 <strBaseToUInt32>:
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 8008680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008682:	460d      	mov	r5, r1
    *val = strtoul(str, &endptr, base);
 8008684:	a901      	add	r1, sp, #4
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 8008686:	4604      	mov	r4, r0
    *val = strtoul(str, &endptr, base);
 8008688:	f000 fc5a 	bl	8008f40 <strtoul>
 800868c:	6028      	str	r0, [r5, #0]
}
 800868e:	9801      	ldr	r0, [sp, #4]
 8008690:	1b00      	subs	r0, r0, r4
 8008692:	b003      	add	sp, #12
 8008694:	bd30      	pop	{r4, r5, pc}

08008696 <compareStr>:
    if (len1 != len2) {
 8008696:	4299      	cmp	r1, r3
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 8008698:	b510      	push	{r4, lr}
 800869a:	4614      	mov	r4, r2
    if (len1 != len2) {
 800869c:	d107      	bne.n	80086ae <compareStr+0x18>
    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
 800869e:	460a      	mov	r2, r1
 80086a0:	4621      	mov	r1, r4
 80086a2:	f000 fb11 	bl	8008cc8 <strncasecmp>
 80086a6:	fab0 f080 	clz	r0, r0
 80086aa:	0940      	lsrs	r0, r0, #5
}
 80086ac:	bd10      	pop	{r4, pc}
        return FALSE;
 80086ae:	2000      	movs	r0, #0
 80086b0:	e7fc      	b.n	80086ac <compareStr+0x16>

080086b2 <compareStrAndNum>:
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 80086b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (len2 < len1) {
 80086b6:	428b      	cmp	r3, r1
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 80086b8:	460c      	mov	r4, r1
 80086ba:	4616      	mov	r6, r2
 80086bc:	461f      	mov	r7, r3
 80086be:	f8dd 8020 	ldr.w	r8, [sp, #32]
    if (len2 < len1) {
 80086c2:	d203      	bcs.n	80086cc <compareStrAndNum+0x1a>
        return FALSE;
 80086c4:	2000      	movs	r0, #0
}
 80086c6:	b002      	add	sp, #8
 80086c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
 80086cc:	460a      	mov	r2, r1
 80086ce:	4631      	mov	r1, r6
 80086d0:	f000 fafa 	bl	8008cc8 <strncasecmp>
 80086d4:	4605      	mov	r5, r0
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d1f4      	bne.n	80086c4 <compareStrAndNum+0x12>
        if (num) {
 80086da:	f1b8 0f00 	cmp.w	r8, #0
 80086de:	d10e      	bne.n	80086fe <compareStrAndNum+0x4c>
 80086e0:	4434      	add	r4, r6
 80086e2:	443e      	add	r6, r7
            for (i = len1; i < len2; i++) {
 80086e4:	42b4      	cmp	r4, r6
 80086e6:	d101      	bne.n	80086ec <compareStrAndNum+0x3a>
        result = TRUE;
 80086e8:	2001      	movs	r0, #1
 80086ea:	e7ec      	b.n	80086c6 <compareStrAndNum+0x14>
                if (!isdigit((int) str2[i])) {
 80086ec:	f000 f9b2 	bl	8008a54 <__locale_ctype_ptr>
 80086f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086f4:	4418      	add	r0, r3
 80086f6:	7843      	ldrb	r3, [r0, #1]
 80086f8:	075b      	lsls	r3, r3, #29
 80086fa:	d5e3      	bpl.n	80086c4 <compareStrAndNum+0x12>
 80086fc:	e7f2      	b.n	80086e4 <compareStrAndNum+0x32>
            if (len1 == len2) {
 80086fe:	42a7      	cmp	r7, r4
 8008700:	d0f2      	beq.n	80086e8 <compareStrAndNum+0x36>
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
 8008702:	1930      	adds	r0, r6, r4
 8008704:	220a      	movs	r2, #10
 8008706:	a901      	add	r1, sp, #4
 8008708:	f7ff ffaf 	bl	800866a <strBaseToInt32>
 800870c:	4404      	add	r4, r0
                if (i != len2) {
 800870e:	42a7      	cmp	r7, r4
 8008710:	d103      	bne.n	800871a <compareStrAndNum+0x68>
                    *num = tmpNum;
 8008712:	9b01      	ldr	r3, [sp, #4]
 8008714:	f8c8 3000 	str.w	r3, [r8]
 8008718:	e7e6      	b.n	80086e8 <compareStrAndNum+0x36>
                    result = FALSE;
 800871a:	4628      	mov	r0, r5
 800871c:	e7d3      	b.n	80086c6 <compareStrAndNum+0x14>

0800871e <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
 800871e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008722:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8008726:	4604      	mov	r4, r0
 8008728:	4615      	mov	r5, r2
 800872a:	461e      	mov	r6, r3
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
 800872c:	460f      	mov	r7, r1
 800872e:	b1f9      	cbz	r1, 8008770 <matchPattern+0x52>
 8008730:	f101 38ff 	add.w	r8, r1, #4294967295
 8008734:	f810 3008 	ldrb.w	r3, [r0, r8]
 8008738:	2b23      	cmp	r3, #35	; 0x23
 800873a:	d119      	bne.n	8008770 <matchPattern+0x52>
        size_t new_pattern_len = pattern_len - 1;

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 800873c:	4641      	mov	r1, r8
 800873e:	f7ff fefa 	bl	8008536 <patternSeparatorShortPos>

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 8008742:	f8cd 9000 	str.w	r9, [sp]
        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 8008746:	4607      	mov	r7, r0
        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 8008748:	4633      	mov	r3, r6
 800874a:	462a      	mov	r2, r5
 800874c:	4641      	mov	r1, r8
 800874e:	4620      	mov	r0, r4
 8008750:	f7ff ffaf 	bl	80086b2 <compareStrAndNum>
 8008754:	b9f8      	cbnz	r0, 8008796 <matchPattern+0x78>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
 8008756:	f8cd 9000 	str.w	r9, [sp]
 800875a:	4633      	mov	r3, r6
 800875c:	462a      	mov	r2, r5
 800875e:	4639      	mov	r1, r7
 8008760:	4620      	mov	r0, r4
 8008762:	f7ff ffa6 	bl	80086b2 <compareStrAndNum>
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);

        return compareStr(pattern, pattern_len, str, str_len) ||
 8008766:	f000 0001 	and.w	r0, r0, #1
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
    }
}
 800876a:	b003      	add	sp, #12
 800876c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 8008770:	4639      	mov	r1, r7
 8008772:	4620      	mov	r0, r4
 8008774:	f7ff fedf 	bl	8008536 <patternSeparatorShortPos>
        return compareStr(pattern, pattern_len, str, str_len) ||
 8008778:	4633      	mov	r3, r6
        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 800877a:	4680      	mov	r8, r0
        return compareStr(pattern, pattern_len, str, str_len) ||
 800877c:	462a      	mov	r2, r5
 800877e:	4639      	mov	r1, r7
 8008780:	4620      	mov	r0, r4
 8008782:	f7ff ff88 	bl	8008696 <compareStr>
 8008786:	b930      	cbnz	r0, 8008796 <matchPattern+0x78>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
 8008788:	4633      	mov	r3, r6
 800878a:	462a      	mov	r2, r5
 800878c:	4641      	mov	r1, r8
 800878e:	4620      	mov	r0, r4
 8008790:	f7ff ff81 	bl	8008696 <compareStr>
 8008794:	e7e7      	b.n	8008766 <matchPattern+0x48>
        return compareStr(pattern, pattern_len, str, str_len) ||
 8008796:	2001      	movs	r0, #1
 8008798:	e7e5      	b.n	8008766 <matchPattern+0x48>
	...

0800879c <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
 800879c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a0:	b085      	sub	sp, #20
 80087a2:	4615      	mov	r5, r2
 80087a4:	4688      	mov	r8, r1
 80087a6:	9303      	str	r3, [sp, #12]
 80087a8:	4606      	mov	r6, r0

    size_t numbers_idx = 0;
    int32_t *number_ptr = NULL;

    const char * pattern_ptr = pattern;
    int pattern_len = strlen(pattern);
 80087aa:	f7f7 fcdb 	bl	8000164 <strlen>
 80087ae:	4604      	mov	r4, r0

    const char * cmd_ptr = cmd;
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 80087b0:	4629      	mov	r1, r5
 80087b2:	4640      	mov	r0, r8
 80087b4:	f000 faad 	bl	8008d12 <strnlen>

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
 80087b8:	1933      	adds	r3, r6, r4
 80087ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 80087be:	4605      	mov	r5, r0
    if (pattern_ptr[pattern_len - 1] == '?') {
 80087c0:	2b3f      	cmp	r3, #63	; 0x3f
 80087c2:	d106      	bne.n	80087d2 <matchCommand+0x36>
        if (cmd_ptr[cmd_len - 1] == '?') {
 80087c4:	1e45      	subs	r5, r0, #1
 80087c6:	f818 3005 	ldrb.w	r3, [r8, r5]
 80087ca:	2b3f      	cmp	r3, #63	; 0x3f
 80087cc:	f040 80e4 	bne.w	8008998 <matchCommand+0x1fc>
            cmd_len -= 1;
            pattern_len -= 1;
 80087d0:	3c01      	subs	r4, #1
            return FALSE;
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
 80087d2:	7833      	ldrb	r3, [r6, #0]
 80087d4:	2b5b      	cmp	r3, #91	; 0x5b
        SKIP_PATTERN(1);
 80087d6:	bf08      	it	eq
 80087d8:	3601      	addeq	r6, #1
        brackets++;
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 80087da:	7833      	ldrb	r3, [r6, #0]
        SKIP_PATTERN(1);
 80087dc:	bf06      	itte	eq
 80087de:	f104 34ff 	addeq.w	r4, r4, #4294967295
        brackets++;
 80087e2:	f04f 0901 	moveq.w	r9, #1
    int brackets = 0;
 80087e6:	f04f 0900 	movne.w	r9, #0
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 80087ea:	2b3a      	cmp	r3, #58	; 0x3a
        SKIP_PATTERN(1);
    }

    if (cmd_ptr[0] == ':') {
 80087ec:	f898 3000 	ldrb.w	r3, [r8]
        SKIP_PATTERN(1);
 80087f0:	bf04      	itt	eq
 80087f2:	3601      	addeq	r6, #1
 80087f4:	f104 34ff 	addeq.w	r4, r4, #4294967295
    if (cmd_ptr[0] == ':') {
 80087f8:	2b3a      	cmp	r3, #58	; 0x3a
 80087fa:	d109      	bne.n	8008810 <matchCommand+0x74>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
 80087fc:	2d01      	cmp	r5, #1
 80087fe:	d907      	bls.n	8008810 <matchCommand+0x74>
            if (cmd_ptr[1] != '*') {
 8008800:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008804:	2b2a      	cmp	r3, #42	; 0x2a
 8008806:	f000 80c7 	beq.w	8008998 <matchCommand+0x1fc>
                SKIP_CMD(1);
 800880a:	f108 0801 	add.w	r8, r8, #1
 800880e:	3d01      	subs	r5, #1
        brackets++;
 8008810:	2300      	movs	r3, #0
 8008812:	9302      	str	r3, [sp, #8]
    char * separator = strnpbrk(pattern, len, "?:[]");
 8008814:	4a61      	ldr	r2, [pc, #388]	; (800899c <matchCommand+0x200>)
 8008816:	4621      	mov	r1, r4
 8008818:	4630      	mov	r0, r6
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 800881a:	46a3      	mov	fp, r4
    char * separator = strnpbrk(pattern, len, "?:[]");
 800881c:	f7ff fea5 	bl	800856a <strnpbrk>
    if (separator == NULL) {
 8008820:	b108      	cbz	r0, 8008826 <matchCommand+0x8a>
        return separator - pattern;
 8008822:	eba0 0b06 	sub.w	fp, r0, r6
    char * separator = strnpbrk(cmd, len, ":?");
 8008826:	4a5e      	ldr	r2, [pc, #376]	; (80089a0 <matchCommand+0x204>)
 8008828:	4629      	mov	r1, r5
 800882a:	4640      	mov	r0, r8
 800882c:	f7ff fe9d 	bl	800856a <strnpbrk>
    if (separator == NULL) {
 8008830:	b398      	cbz	r0, 800889a <matchCommand+0xfe>
        result = separator - cmd;
 8008832:	eba0 0a08 	sub.w	sl, r0, r8

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
 8008836:	f1bb 0f00 	cmp.w	fp, #0
 800883a:	dd32      	ble.n	80088a2 <matchCommand+0x106>
 800883c:	eb06 030b 	add.w	r3, r6, fp
 8008840:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008844:	2b23      	cmp	r3, #35	; 0x23
 8008846:	d12c      	bne.n	80088a2 <matchCommand+0x106>
            if (numbers && (numbers_idx < numbers_len)) {
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	b343      	cbz	r3, 800889e <matchCommand+0x102>
 800884c:	9b02      	ldr	r3, [sp, #8]
 800884e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008850:	4293      	cmp	r3, r2
 8008852:	d224      	bcs.n	800889e <matchCommand+0x102>
                number_ptr = numbers + numbers_idx;
 8008854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008858:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                *number_ptr = default_value; /* default value */
 800885c:	9a03      	ldr	r2, [sp, #12]
 800885e:	9902      	ldr	r1, [sp, #8]
 8008860:	4610      	mov	r0, r2
 8008862:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008864:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
            } else {
                number_ptr = NULL;
            }
            numbers_idx++;
 8008868:	9a02      	ldr	r2, [sp, #8]
 800886a:	3201      	adds	r2, #1
 800886c:	9202      	str	r2, [sp, #8]
        } else {
            number_ptr = NULL;
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	4642      	mov	r2, r8
 8008872:	4653      	mov	r3, sl
 8008874:	4659      	mov	r1, fp
 8008876:	4630      	mov	r0, r6
 8008878:	f7ff ff51 	bl	800871e <matchPattern>
 800887c:	eb06 070b 	add.w	r7, r6, fp
 8008880:	eba4 040b 	sub.w	r4, r4, fp
 8008884:	2800      	cmp	r0, #0
 8008886:	d073      	beq.n	8008970 <matchCommand+0x1d4>
            SKIP_PATTERN(pattern_sep_pos);
            SKIP_CMD(cmd_sep_pos);
 8008888:	eba5 050a 	sub.w	r5, r5, sl
            result = TRUE;

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
 800888c:	b95c      	cbnz	r4, 80088a6 <matchCommand+0x10a>
 800888e:	fab5 f085 	clz	r0, r5
 8008892:	0940      	lsrs	r0, r0, #5
    }

    return result;
#undef SKIP_PATTERN
#undef SKIP_CMD
}
 8008894:	b005      	add	sp, #20
 8008896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        result = len;
 800889a:	46aa      	mov	sl, r5
 800889c:	e7cb      	b.n	8008836 <matchCommand+0x9a>
                number_ptr = NULL;
 800889e:	2300      	movs	r3, #0
 80088a0:	e7e2      	b.n	8008868 <matchCommand+0xcc>
            number_ptr = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	e7e3      	b.n	800886e <matchCommand+0xd2>
            if (cmd_len == 0) {
 80088a6:	bb35      	cbnz	r5, 80088f6 <matchCommand+0x15a>
    char * separator = strnpbrk(pattern, len, "?:[]");
 80088a8:	4e3c      	ldr	r6, [pc, #240]	; (800899c <matchCommand+0x200>)
 80088aa:	4632      	mov	r2, r6
 80088ac:	4621      	mov	r1, r4
 80088ae:	4638      	mov	r0, r7
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 80088b0:	4625      	mov	r5, r4
    char * separator = strnpbrk(pattern, len, "?:[]");
 80088b2:	f7ff fe5a 	bl	800856a <strnpbrk>
    if (separator == NULL) {
 80088b6:	b100      	cbz	r0, 80088ba <matchCommand+0x11e>
        return separator - pattern;
 80088b8:	1bc5      	subs	r5, r0, r7
                    switch (pattern_ptr[pattern_sep_pos]) {
 80088ba:	5d7a      	ldrb	r2, [r7, r5]
 80088bc:	2a5b      	cmp	r2, #91	; 0x5b
 80088be:	d010      	beq.n	80088e2 <matchCommand+0x146>
 80088c0:	2a5d      	cmp	r2, #93	; 0x5d
 80088c2:	d011      	beq.n	80088e8 <matchCommand+0x14c>
                    SKIP_PATTERN(pattern_sep_pos + 1);
 80088c4:	3501      	adds	r5, #1
 80088c6:	442f      	add	r7, r5
 80088c8:	1b64      	subs	r4, r4, r5
                    if (brackets == 0) {
 80088ca:	f1b9 0f00 	cmp.w	r9, #0
 80088ce:	d104      	bne.n	80088da <matchCommand+0x13e>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
 80088d0:	2c00      	cmp	r4, #0
 80088d2:	dd0c      	ble.n	80088ee <matchCommand+0x152>
 80088d4:	783a      	ldrb	r2, [r7, #0]
 80088d6:	2a5b      	cmp	r2, #91	; 0x5b
 80088d8:	d15e      	bne.n	8008998 <matchCommand+0x1fc>
                while (pattern_len) {
 80088da:	2c00      	cmp	r4, #0
 80088dc:	d1e5      	bne.n	80088aa <matchCommand+0x10e>
            result = TRUE;
 80088de:	2001      	movs	r0, #1
 80088e0:	e7d8      	b.n	8008894 <matchCommand+0xf8>
                            brackets++;
 80088e2:	f109 0901 	add.w	r9, r9, #1
                            break;
 80088e6:	e7ed      	b.n	80088c4 <matchCommand+0x128>
                            brackets--;
 80088e8:	f109 39ff 	add.w	r9, r9, #4294967295
                            break;
 80088ec:	e7ea      	b.n	80088c4 <matchCommand+0x128>
                if (pattern_len != 0) {
 80088ee:	bf0c      	ite	eq
 80088f0:	2001      	moveq	r0, #1
 80088f2:	2000      	movne	r0, #0
 80088f4:	e7ce      	b.n	8008894 <matchCommand+0xf8>
            if ((pattern_len > 0)
 80088f6:	2c00      	cmp	r4, #0
 80088f8:	dd4e      	ble.n	8008998 <matchCommand+0x1fc>
                    && ((pattern_ptr[0] == cmd_ptr[0])
 80088fa:	7839      	ldrb	r1, [r7, #0]
 80088fc:	f818 200a 	ldrb.w	r2, [r8, sl]
            SKIP_CMD(cmd_sep_pos);
 8008900:	eb08 000a 	add.w	r0, r8, sl
                    && ((pattern_ptr[0] == cmd_ptr[0])
 8008904:	4291      	cmp	r1, r2
 8008906:	d107      	bne.n	8008918 <matchCommand+0x17c>
                    && (pattern_ptr[0] == ':'))) {
 8008908:	293a      	cmp	r1, #58	; 0x3a
 800890a:	d105      	bne.n	8008918 <matchCommand+0x17c>
                SKIP_PATTERN(1);
 800890c:	1c7e      	adds	r6, r7, #1
 800890e:	3c01      	subs	r4, #1
                SKIP_CMD(1);
 8008910:	f100 0801 	add.w	r8, r0, #1
 8008914:	3d01      	subs	r5, #1
 8008916:	e77d      	b.n	8008814 <matchCommand+0x78>
            } else if ((pattern_len > 1)
 8008918:	2c01      	cmp	r4, #1
 800891a:	d03d      	beq.n	8008998 <matchCommand+0x1fc>
                    && (pattern_ptr[1] == cmd_ptr[0])
 800891c:	787e      	ldrb	r6, [r7, #1]
 800891e:	42b2      	cmp	r2, r6
 8008920:	d117      	bne.n	8008952 <matchCommand+0x1b6>
                    && (pattern_ptr[0] == '[')
 8008922:	295b      	cmp	r1, #91	; 0x5b
 8008924:	d109      	bne.n	800893a <matchCommand+0x19e>
                    && (pattern_ptr[1] == ':')) {
 8008926:	2a3a      	cmp	r2, #58	; 0x3a
 8008928:	d113      	bne.n	8008952 <matchCommand+0x1b6>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
 800892a:	1cbe      	adds	r6, r7, #2
 800892c:	3c02      	subs	r4, #2
                SKIP_CMD(1);
 800892e:	f100 0801 	add.w	r8, r0, #1
 8008932:	3d01      	subs	r5, #1
                brackets++;
 8008934:	f109 0901 	add.w	r9, r9, #1
 8008938:	e76c      	b.n	8008814 <matchCommand+0x78>
                    && (pattern_ptr[0] == ']')
 800893a:	295d      	cmp	r1, #93	; 0x5d
 800893c:	d109      	bne.n	8008952 <matchCommand+0x1b6>
                    && (pattern_ptr[1] == ':')) {
 800893e:	2a3a      	cmp	r2, #58	; 0x3a
 8008940:	d107      	bne.n	8008952 <matchCommand+0x1b6>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
 8008942:	1cbe      	adds	r6, r7, #2
 8008944:	3c02      	subs	r4, #2
                SKIP_CMD(1);
 8008946:	f100 0801 	add.w	r8, r0, #1
 800894a:	3d01      	subs	r5, #1
                brackets--;
 800894c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008950:	e760      	b.n	8008814 <matchCommand+0x78>
            } else if ((pattern_len > 2)
 8008952:	2c02      	cmp	r4, #2
 8008954:	d020      	beq.n	8008998 <matchCommand+0x1fc>
                    && (pattern_ptr[2] == cmd_ptr[0])
 8008956:	f897 c002 	ldrb.w	ip, [r7, #2]
 800895a:	4594      	cmp	ip, r2
 800895c:	d11c      	bne.n	8008998 <matchCommand+0x1fc>
                    && (pattern_ptr[0] == ']')
 800895e:	295d      	cmp	r1, #93	; 0x5d
 8008960:	d11a      	bne.n	8008998 <matchCommand+0x1fc>
                    && (pattern_ptr[1] == '[')
 8008962:	2e5b      	cmp	r6, #91	; 0x5b
 8008964:	d118      	bne.n	8008998 <matchCommand+0x1fc>
                    && (pattern_ptr[2] == ':')) {
 8008966:	2a3a      	cmp	r2, #58	; 0x3a
 8008968:	d116      	bne.n	8008998 <matchCommand+0x1fc>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
 800896a:	1cfe      	adds	r6, r7, #3
 800896c:	3c03      	subs	r4, #3
 800896e:	e7cf      	b.n	8008910 <matchCommand+0x174>
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 8008970:	f816 200b 	ldrb.w	r2, [r6, fp]
 8008974:	2a5d      	cmp	r2, #93	; 0x5d
 8008976:	d10f      	bne.n	8008998 <matchCommand+0x1fc>
 8008978:	787a      	ldrb	r2, [r7, #1]
 800897a:	2a3a      	cmp	r2, #58	; 0x3a
 800897c:	d102      	bne.n	8008984 <matchCommand+0x1e8>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 800897e:	1cbe      	adds	r6, r7, #2
 8008980:	3c02      	subs	r4, #2
 8008982:	e7e3      	b.n	800894c <matchCommand+0x1b0>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
 8008984:	2c02      	cmp	r4, #2
 8008986:	dd07      	ble.n	8008998 <matchCommand+0x1fc>
                    && (pattern_ptr[1] == '[')
 8008988:	2a5b      	cmp	r2, #91	; 0x5b
 800898a:	d105      	bne.n	8008998 <matchCommand+0x1fc>
                    && (pattern_ptr[2] == ':')) {
 800898c:	78ba      	ldrb	r2, [r7, #2]
 800898e:	2a3a      	cmp	r2, #58	; 0x3a
 8008990:	d102      	bne.n	8008998 <matchCommand+0x1fc>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 8008992:	1cfe      	adds	r6, r7, #3
 8008994:	3c03      	subs	r4, #3
 8008996:	e73d      	b.n	8008814 <matchCommand+0x78>
            return FALSE;
 8008998:	2000      	movs	r0, #0
 800899a:	e77b      	b.n	8008894 <matchCommand+0xf8>
 800899c:	0800aeb3 	.word	0x0800aeb3
 80089a0:	0800aeb8 	.word	0x0800aeb8

080089a4 <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
 80089a6:	b1c1      	cbz	r1, 80089da <composeCompoundCommand+0x36>
 80089a8:	684c      	ldr	r4, [r1, #4]
 80089aa:	b1c4      	cbz	r4, 80089de <composeCompoundCommand+0x3a>
 80089ac:	688b      	ldr	r3, [r1, #8]
 80089ae:	b1c3      	cbz	r3, 80089e2 <composeCompoundCommand+0x3e>
        return FALSE;

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
 80089b0:	6845      	ldr	r5, [r0, #4]
 80089b2:	b185      	cbz	r5, 80089d6 <composeCompoundCommand+0x32>
 80089b4:	6882      	ldr	r2, [r0, #8]
 80089b6:	b172      	cbz	r2, 80089d6 <composeCompoundCommand+0x32>
        return TRUE;

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
 80089b8:	7826      	ldrb	r6, [r4, #0]
 80089ba:	f006 06ef 	and.w	r6, r6, #239	; 0xef
 80089be:	2e2a      	cmp	r6, #42	; 0x2a
 80089c0:	d009      	beq.n	80089d6 <composeCompoundCommand+0x32>
        return TRUE;

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
 80089c2:	782e      	ldrb	r6, [r5, #0]
 80089c4:	2e2a      	cmp	r6, #42	; 0x2a
 80089c6:	d006      	beq.n	80089d6 <composeCompoundCommand+0x32>
        return TRUE;

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
        if (prev->ptr[i - 1] == ':') {
 80089c8:	1e56      	subs	r6, r2, #1
 80089ca:	5daf      	ldrb	r7, [r5, r6]
 80089cc:	2f3a      	cmp	r7, #58	; 0x3a
 80089ce:	d00a      	beq.n	80089e6 <composeCompoundCommand+0x42>
    for (i = prev->len; i > 0; i--) {
 80089d0:	4632      	mov	r2, r6
 80089d2:	2e00      	cmp	r6, #0
 80089d4:	d1f8      	bne.n	80089c8 <composeCompoundCommand+0x24>
        return TRUE;

    current->ptr -= i;
    current->len += i;
    memmove(current->ptr, prev->ptr, i);
    return TRUE;
 80089d6:	2001      	movs	r0, #1
 80089d8:	e000      	b.n	80089dc <composeCompoundCommand+0x38>
        return FALSE;
 80089da:	4608      	mov	r0, r1
}
 80089dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FALSE;
 80089de:	4620      	mov	r0, r4
 80089e0:	e7fc      	b.n	80089dc <composeCompoundCommand+0x38>
 80089e2:	4618      	mov	r0, r3
 80089e4:	e7fa      	b.n	80089dc <composeCompoundCommand+0x38>
    current->ptr -= i;
 80089e6:	1aa4      	subs	r4, r4, r2
 80089e8:	604c      	str	r4, [r1, #4]
    current->len += i;
 80089ea:	4413      	add	r3, r2
 80089ec:	608b      	str	r3, [r1, #8]
    memmove(current->ptr, prev->ptr, i);
 80089ee:	6841      	ldr	r1, [r0, #4]
 80089f0:	4620      	mov	r0, r4
 80089f2:	f000 f86a 	bl	8008aca <memmove>
 80089f6:	e7ee      	b.n	80089d6 <composeCompoundCommand+0x32>

080089f8 <__errno>:
 80089f8:	4b01      	ldr	r3, [pc, #4]	; (8008a00 <__errno+0x8>)
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	20000190 	.word	0x20000190

08008a04 <__libc_init_array>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	2500      	movs	r5, #0
 8008a08:	4e0c      	ldr	r6, [pc, #48]	; (8008a3c <__libc_init_array+0x38>)
 8008a0a:	4c0d      	ldr	r4, [pc, #52]	; (8008a40 <__libc_init_array+0x3c>)
 8008a0c:	1ba4      	subs	r4, r4, r6
 8008a0e:	10a4      	asrs	r4, r4, #2
 8008a10:	42a5      	cmp	r5, r4
 8008a12:	d109      	bne.n	8008a28 <__libc_init_array+0x24>
 8008a14:	f001 fdf8 	bl	800a608 <_init>
 8008a18:	2500      	movs	r5, #0
 8008a1a:	4e0a      	ldr	r6, [pc, #40]	; (8008a44 <__libc_init_array+0x40>)
 8008a1c:	4c0a      	ldr	r4, [pc, #40]	; (8008a48 <__libc_init_array+0x44>)
 8008a1e:	1ba4      	subs	r4, r4, r6
 8008a20:	10a4      	asrs	r4, r4, #2
 8008a22:	42a5      	cmp	r5, r4
 8008a24:	d105      	bne.n	8008a32 <__libc_init_array+0x2e>
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
 8008a28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a2c:	4798      	blx	r3
 8008a2e:	3501      	adds	r5, #1
 8008a30:	e7ee      	b.n	8008a10 <__libc_init_array+0xc>
 8008a32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a36:	4798      	blx	r3
 8008a38:	3501      	adds	r5, #1
 8008a3a:	e7f2      	b.n	8008a22 <__libc_init_array+0x1e>
 8008a3c:	0800b030 	.word	0x0800b030
 8008a40:	0800b030 	.word	0x0800b030
 8008a44:	0800b030 	.word	0x0800b030
 8008a48:	0800b034 	.word	0x0800b034

08008a4c <__locale_ctype_ptr_l>:
 8008a4c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008a50:	4770      	bx	lr
	...

08008a54 <__locale_ctype_ptr>:
 8008a54:	4b04      	ldr	r3, [pc, #16]	; (8008a68 <__locale_ctype_ptr+0x14>)
 8008a56:	4a05      	ldr	r2, [pc, #20]	; (8008a6c <__locale_ctype_ptr+0x18>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bf08      	it	eq
 8008a60:	4613      	moveq	r3, r2
 8008a62:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008a66:	4770      	bx	lr
 8008a68:	20000190 	.word	0x20000190
 8008a6c:	200001f4 	.word	0x200001f4

08008a70 <malloc>:
 8008a70:	4b02      	ldr	r3, [pc, #8]	; (8008a7c <malloc+0xc>)
 8008a72:	4601      	mov	r1, r0
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	f000 b895 	b.w	8008ba4 <_malloc_r>
 8008a7a:	bf00      	nop
 8008a7c:	20000190 	.word	0x20000190

08008a80 <free>:
 8008a80:	4b02      	ldr	r3, [pc, #8]	; (8008a8c <free+0xc>)
 8008a82:	4601      	mov	r1, r0
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	f000 b841 	b.w	8008b0c <_free_r>
 8008a8a:	bf00      	nop
 8008a8c:	20000190 	.word	0x20000190

08008a90 <__ascii_mbtowc>:
 8008a90:	b082      	sub	sp, #8
 8008a92:	b901      	cbnz	r1, 8008a96 <__ascii_mbtowc+0x6>
 8008a94:	a901      	add	r1, sp, #4
 8008a96:	b142      	cbz	r2, 8008aaa <__ascii_mbtowc+0x1a>
 8008a98:	b14b      	cbz	r3, 8008aae <__ascii_mbtowc+0x1e>
 8008a9a:	7813      	ldrb	r3, [r2, #0]
 8008a9c:	600b      	str	r3, [r1, #0]
 8008a9e:	7812      	ldrb	r2, [r2, #0]
 8008aa0:	1c10      	adds	r0, r2, #0
 8008aa2:	bf18      	it	ne
 8008aa4:	2001      	movne	r0, #1
 8008aa6:	b002      	add	sp, #8
 8008aa8:	4770      	bx	lr
 8008aaa:	4610      	mov	r0, r2
 8008aac:	e7fb      	b.n	8008aa6 <__ascii_mbtowc+0x16>
 8008aae:	f06f 0001 	mvn.w	r0, #1
 8008ab2:	e7f8      	b.n	8008aa6 <__ascii_mbtowc+0x16>

08008ab4 <memcpy>:
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	1e43      	subs	r3, r0, #1
 8008ab8:	440a      	add	r2, r1
 8008aba:	4291      	cmp	r1, r2
 8008abc:	d100      	bne.n	8008ac0 <memcpy+0xc>
 8008abe:	bd10      	pop	{r4, pc}
 8008ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ac8:	e7f7      	b.n	8008aba <memcpy+0x6>

08008aca <memmove>:
 8008aca:	4288      	cmp	r0, r1
 8008acc:	b510      	push	{r4, lr}
 8008ace:	eb01 0302 	add.w	r3, r1, r2
 8008ad2:	d807      	bhi.n	8008ae4 <memmove+0x1a>
 8008ad4:	1e42      	subs	r2, r0, #1
 8008ad6:	4299      	cmp	r1, r3
 8008ad8:	d00a      	beq.n	8008af0 <memmove+0x26>
 8008ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ade:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008ae2:	e7f8      	b.n	8008ad6 <memmove+0xc>
 8008ae4:	4283      	cmp	r3, r0
 8008ae6:	d9f5      	bls.n	8008ad4 <memmove+0xa>
 8008ae8:	1881      	adds	r1, r0, r2
 8008aea:	1ad2      	subs	r2, r2, r3
 8008aec:	42d3      	cmn	r3, r2
 8008aee:	d100      	bne.n	8008af2 <memmove+0x28>
 8008af0:	bd10      	pop	{r4, pc}
 8008af2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008af6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008afa:	e7f7      	b.n	8008aec <memmove+0x22>

08008afc <memset>:
 8008afc:	4603      	mov	r3, r0
 8008afe:	4402      	add	r2, r0
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d100      	bne.n	8008b06 <memset+0xa>
 8008b04:	4770      	bx	lr
 8008b06:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0a:	e7f9      	b.n	8008b00 <memset+0x4>

08008b0c <_free_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4605      	mov	r5, r0
 8008b10:	2900      	cmp	r1, #0
 8008b12:	d043      	beq.n	8008b9c <_free_r+0x90>
 8008b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b18:	1f0c      	subs	r4, r1, #4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	bfb8      	it	lt
 8008b1e:	18e4      	addlt	r4, r4, r3
 8008b20:	f000 fa31 	bl	8008f86 <__malloc_lock>
 8008b24:	4a1e      	ldr	r2, [pc, #120]	; (8008ba0 <_free_r+0x94>)
 8008b26:	6813      	ldr	r3, [r2, #0]
 8008b28:	4610      	mov	r0, r2
 8008b2a:	b933      	cbnz	r3, 8008b3a <_free_r+0x2e>
 8008b2c:	6063      	str	r3, [r4, #4]
 8008b2e:	6014      	str	r4, [r2, #0]
 8008b30:	4628      	mov	r0, r5
 8008b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b36:	f000 ba27 	b.w	8008f88 <__malloc_unlock>
 8008b3a:	42a3      	cmp	r3, r4
 8008b3c:	d90b      	bls.n	8008b56 <_free_r+0x4a>
 8008b3e:	6821      	ldr	r1, [r4, #0]
 8008b40:	1862      	adds	r2, r4, r1
 8008b42:	4293      	cmp	r3, r2
 8008b44:	bf01      	itttt	eq
 8008b46:	681a      	ldreq	r2, [r3, #0]
 8008b48:	685b      	ldreq	r3, [r3, #4]
 8008b4a:	1852      	addeq	r2, r2, r1
 8008b4c:	6022      	streq	r2, [r4, #0]
 8008b4e:	6063      	str	r3, [r4, #4]
 8008b50:	6004      	str	r4, [r0, #0]
 8008b52:	e7ed      	b.n	8008b30 <_free_r+0x24>
 8008b54:	4613      	mov	r3, r2
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	b10a      	cbz	r2, 8008b5e <_free_r+0x52>
 8008b5a:	42a2      	cmp	r2, r4
 8008b5c:	d9fa      	bls.n	8008b54 <_free_r+0x48>
 8008b5e:	6819      	ldr	r1, [r3, #0]
 8008b60:	1858      	adds	r0, r3, r1
 8008b62:	42a0      	cmp	r0, r4
 8008b64:	d10b      	bne.n	8008b7e <_free_r+0x72>
 8008b66:	6820      	ldr	r0, [r4, #0]
 8008b68:	4401      	add	r1, r0
 8008b6a:	1858      	adds	r0, r3, r1
 8008b6c:	4282      	cmp	r2, r0
 8008b6e:	6019      	str	r1, [r3, #0]
 8008b70:	d1de      	bne.n	8008b30 <_free_r+0x24>
 8008b72:	6810      	ldr	r0, [r2, #0]
 8008b74:	6852      	ldr	r2, [r2, #4]
 8008b76:	4401      	add	r1, r0
 8008b78:	6019      	str	r1, [r3, #0]
 8008b7a:	605a      	str	r2, [r3, #4]
 8008b7c:	e7d8      	b.n	8008b30 <_free_r+0x24>
 8008b7e:	d902      	bls.n	8008b86 <_free_r+0x7a>
 8008b80:	230c      	movs	r3, #12
 8008b82:	602b      	str	r3, [r5, #0]
 8008b84:	e7d4      	b.n	8008b30 <_free_r+0x24>
 8008b86:	6820      	ldr	r0, [r4, #0]
 8008b88:	1821      	adds	r1, r4, r0
 8008b8a:	428a      	cmp	r2, r1
 8008b8c:	bf01      	itttt	eq
 8008b8e:	6811      	ldreq	r1, [r2, #0]
 8008b90:	6852      	ldreq	r2, [r2, #4]
 8008b92:	1809      	addeq	r1, r1, r0
 8008b94:	6021      	streq	r1, [r4, #0]
 8008b96:	6062      	str	r2, [r4, #4]
 8008b98:	605c      	str	r4, [r3, #4]
 8008b9a:	e7c9      	b.n	8008b30 <_free_r+0x24>
 8008b9c:	bd38      	pop	{r3, r4, r5, pc}
 8008b9e:	bf00      	nop
 8008ba0:	200005a8 	.word	0x200005a8

08008ba4 <_malloc_r>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	1ccd      	adds	r5, r1, #3
 8008ba8:	f025 0503 	bic.w	r5, r5, #3
 8008bac:	3508      	adds	r5, #8
 8008bae:	2d0c      	cmp	r5, #12
 8008bb0:	bf38      	it	cc
 8008bb2:	250c      	movcc	r5, #12
 8008bb4:	2d00      	cmp	r5, #0
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	db01      	blt.n	8008bbe <_malloc_r+0x1a>
 8008bba:	42a9      	cmp	r1, r5
 8008bbc:	d903      	bls.n	8008bc6 <_malloc_r+0x22>
 8008bbe:	230c      	movs	r3, #12
 8008bc0:	6033      	str	r3, [r6, #0]
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	bd70      	pop	{r4, r5, r6, pc}
 8008bc6:	f000 f9de 	bl	8008f86 <__malloc_lock>
 8008bca:	4a21      	ldr	r2, [pc, #132]	; (8008c50 <_malloc_r+0xac>)
 8008bcc:	6814      	ldr	r4, [r2, #0]
 8008bce:	4621      	mov	r1, r4
 8008bd0:	b991      	cbnz	r1, 8008bf8 <_malloc_r+0x54>
 8008bd2:	4c20      	ldr	r4, [pc, #128]	; (8008c54 <_malloc_r+0xb0>)
 8008bd4:	6823      	ldr	r3, [r4, #0]
 8008bd6:	b91b      	cbnz	r3, 8008be0 <_malloc_r+0x3c>
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f000 f83d 	bl	8008c58 <_sbrk_r>
 8008bde:	6020      	str	r0, [r4, #0]
 8008be0:	4629      	mov	r1, r5
 8008be2:	4630      	mov	r0, r6
 8008be4:	f000 f838 	bl	8008c58 <_sbrk_r>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d124      	bne.n	8008c36 <_malloc_r+0x92>
 8008bec:	230c      	movs	r3, #12
 8008bee:	4630      	mov	r0, r6
 8008bf0:	6033      	str	r3, [r6, #0]
 8008bf2:	f000 f9c9 	bl	8008f88 <__malloc_unlock>
 8008bf6:	e7e4      	b.n	8008bc2 <_malloc_r+0x1e>
 8008bf8:	680b      	ldr	r3, [r1, #0]
 8008bfa:	1b5b      	subs	r3, r3, r5
 8008bfc:	d418      	bmi.n	8008c30 <_malloc_r+0x8c>
 8008bfe:	2b0b      	cmp	r3, #11
 8008c00:	d90f      	bls.n	8008c22 <_malloc_r+0x7e>
 8008c02:	600b      	str	r3, [r1, #0]
 8008c04:	18cc      	adds	r4, r1, r3
 8008c06:	50cd      	str	r5, [r1, r3]
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f000 f9bd 	bl	8008f88 <__malloc_unlock>
 8008c0e:	f104 000b 	add.w	r0, r4, #11
 8008c12:	1d23      	adds	r3, r4, #4
 8008c14:	f020 0007 	bic.w	r0, r0, #7
 8008c18:	1ac3      	subs	r3, r0, r3
 8008c1a:	d0d3      	beq.n	8008bc4 <_malloc_r+0x20>
 8008c1c:	425a      	negs	r2, r3
 8008c1e:	50e2      	str	r2, [r4, r3]
 8008c20:	e7d0      	b.n	8008bc4 <_malloc_r+0x20>
 8008c22:	684b      	ldr	r3, [r1, #4]
 8008c24:	428c      	cmp	r4, r1
 8008c26:	bf16      	itet	ne
 8008c28:	6063      	strne	r3, [r4, #4]
 8008c2a:	6013      	streq	r3, [r2, #0]
 8008c2c:	460c      	movne	r4, r1
 8008c2e:	e7eb      	b.n	8008c08 <_malloc_r+0x64>
 8008c30:	460c      	mov	r4, r1
 8008c32:	6849      	ldr	r1, [r1, #4]
 8008c34:	e7cc      	b.n	8008bd0 <_malloc_r+0x2c>
 8008c36:	1cc4      	adds	r4, r0, #3
 8008c38:	f024 0403 	bic.w	r4, r4, #3
 8008c3c:	42a0      	cmp	r0, r4
 8008c3e:	d005      	beq.n	8008c4c <_malloc_r+0xa8>
 8008c40:	1a21      	subs	r1, r4, r0
 8008c42:	4630      	mov	r0, r6
 8008c44:	f000 f808 	bl	8008c58 <_sbrk_r>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d0cf      	beq.n	8008bec <_malloc_r+0x48>
 8008c4c:	6025      	str	r5, [r4, #0]
 8008c4e:	e7db      	b.n	8008c08 <_malloc_r+0x64>
 8008c50:	200005a8 	.word	0x200005a8
 8008c54:	200005ac 	.word	0x200005ac

08008c58 <_sbrk_r>:
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	4c05      	ldr	r4, [pc, #20]	; (8008c74 <_sbrk_r+0x1c>)
 8008c5e:	4605      	mov	r5, r0
 8008c60:	4608      	mov	r0, r1
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	f7f8 feb4 	bl	80019d0 <_sbrk>
 8008c68:	1c43      	adds	r3, r0, #1
 8008c6a:	d102      	bne.n	8008c72 <_sbrk_r+0x1a>
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	b103      	cbz	r3, 8008c72 <_sbrk_r+0x1a>
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	200018ec 	.word	0x200018ec

08008c78 <siprintf>:
 8008c78:	b40e      	push	{r1, r2, r3}
 8008c7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c7e:	b500      	push	{lr}
 8008c80:	b09c      	sub	sp, #112	; 0x70
 8008c82:	ab1d      	add	r3, sp, #116	; 0x74
 8008c84:	9002      	str	r0, [sp, #8]
 8008c86:	9006      	str	r0, [sp, #24]
 8008c88:	9107      	str	r1, [sp, #28]
 8008c8a:	9104      	str	r1, [sp, #16]
 8008c8c:	4808      	ldr	r0, [pc, #32]	; (8008cb0 <siprintf+0x38>)
 8008c8e:	4909      	ldr	r1, [pc, #36]	; (8008cb4 <siprintf+0x3c>)
 8008c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c94:	9105      	str	r1, [sp, #20]
 8008c96:	6800      	ldr	r0, [r0, #0]
 8008c98:	a902      	add	r1, sp, #8
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	f000 f9d0 	bl	8009040 <_svfiprintf_r>
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	9b02      	ldr	r3, [sp, #8]
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	b01c      	add	sp, #112	; 0x70
 8008ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cac:	b003      	add	sp, #12
 8008cae:	4770      	bx	lr
 8008cb0:	20000190 	.word	0x20000190
 8008cb4:	ffff0208 	.word	0xffff0208

08008cb8 <strcpy>:
 8008cb8:	4603      	mov	r3, r0
 8008cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cbe:	f803 2b01 	strb.w	r2, [r3], #1
 8008cc2:	2a00      	cmp	r2, #0
 8008cc4:	d1f9      	bne.n	8008cba <strcpy+0x2>
 8008cc6:	4770      	bx	lr

08008cc8 <strncasecmp>:
 8008cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ccc:	4606      	mov	r6, r0
 8008cce:	460f      	mov	r7, r1
 8008cd0:	eb00 0802 	add.w	r8, r0, r2
 8008cd4:	45b0      	cmp	r8, r6
 8008cd6:	d019      	beq.n	8008d0c <strncasecmp+0x44>
 8008cd8:	f816 4b01 	ldrb.w	r4, [r6], #1
 8008cdc:	f7ff feba 	bl	8008a54 <__locale_ctype_ptr>
 8008ce0:	4420      	add	r0, r4
 8008ce2:	7843      	ldrb	r3, [r0, #1]
 8008ce4:	f817 5b01 	ldrb.w	r5, [r7], #1
 8008ce8:	f003 0303 	and.w	r3, r3, #3
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	bf08      	it	eq
 8008cf0:	3420      	addeq	r4, #32
 8008cf2:	f7ff feaf 	bl	8008a54 <__locale_ctype_ptr>
 8008cf6:	4428      	add	r0, r5
 8008cf8:	7842      	ldrb	r2, [r0, #1]
 8008cfa:	f002 0203 	and.w	r2, r2, #3
 8008cfe:	2a01      	cmp	r2, #1
 8008d00:	bf08      	it	eq
 8008d02:	3520      	addeq	r5, #32
 8008d04:	1b60      	subs	r0, r4, r5
 8008d06:	d102      	bne.n	8008d0e <strncasecmp+0x46>
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	d1e3      	bne.n	8008cd4 <strncasecmp+0xc>
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008d12 <strnlen>:
 8008d12:	4603      	mov	r3, r0
 8008d14:	b510      	push	{r4, lr}
 8008d16:	4401      	add	r1, r0
 8008d18:	428b      	cmp	r3, r1
 8008d1a:	d002      	beq.n	8008d22 <strnlen+0x10>
 8008d1c:	781a      	ldrb	r2, [r3, #0]
 8008d1e:	1c5c      	adds	r4, r3, #1
 8008d20:	b90a      	cbnz	r2, 8008d26 <strnlen+0x14>
 8008d22:	1a18      	subs	r0, r3, r0
 8008d24:	bd10      	pop	{r4, pc}
 8008d26:	4623      	mov	r3, r4
 8008d28:	e7f6      	b.n	8008d18 <strnlen+0x6>

08008d2a <_strtol_l.isra.0>:
 8008d2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d2e:	4680      	mov	r8, r0
 8008d30:	4689      	mov	r9, r1
 8008d32:	4692      	mov	sl, r2
 8008d34:	461e      	mov	r6, r3
 8008d36:	460f      	mov	r7, r1
 8008d38:	463d      	mov	r5, r7
 8008d3a:	9808      	ldr	r0, [sp, #32]
 8008d3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d40:	f7ff fe84 	bl	8008a4c <__locale_ctype_ptr_l>
 8008d44:	4420      	add	r0, r4
 8008d46:	7843      	ldrb	r3, [r0, #1]
 8008d48:	f013 0308 	ands.w	r3, r3, #8
 8008d4c:	d132      	bne.n	8008db4 <_strtol_l.isra.0+0x8a>
 8008d4e:	2c2d      	cmp	r4, #45	; 0x2d
 8008d50:	d132      	bne.n	8008db8 <_strtol_l.isra.0+0x8e>
 8008d52:	2201      	movs	r2, #1
 8008d54:	787c      	ldrb	r4, [r7, #1]
 8008d56:	1cbd      	adds	r5, r7, #2
 8008d58:	2e00      	cmp	r6, #0
 8008d5a:	d05d      	beq.n	8008e18 <_strtol_l.isra.0+0xee>
 8008d5c:	2e10      	cmp	r6, #16
 8008d5e:	d109      	bne.n	8008d74 <_strtol_l.isra.0+0x4a>
 8008d60:	2c30      	cmp	r4, #48	; 0x30
 8008d62:	d107      	bne.n	8008d74 <_strtol_l.isra.0+0x4a>
 8008d64:	782b      	ldrb	r3, [r5, #0]
 8008d66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d6a:	2b58      	cmp	r3, #88	; 0x58
 8008d6c:	d14f      	bne.n	8008e0e <_strtol_l.isra.0+0xe4>
 8008d6e:	2610      	movs	r6, #16
 8008d70:	786c      	ldrb	r4, [r5, #1]
 8008d72:	3502      	adds	r5, #2
 8008d74:	2a00      	cmp	r2, #0
 8008d76:	bf14      	ite	ne
 8008d78:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008d7c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008d80:	2700      	movs	r7, #0
 8008d82:	fbb1 fcf6 	udiv	ip, r1, r6
 8008d86:	4638      	mov	r0, r7
 8008d88:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008d8c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008d90:	2b09      	cmp	r3, #9
 8008d92:	d817      	bhi.n	8008dc4 <_strtol_l.isra.0+0x9a>
 8008d94:	461c      	mov	r4, r3
 8008d96:	42a6      	cmp	r6, r4
 8008d98:	dd23      	ble.n	8008de2 <_strtol_l.isra.0+0xb8>
 8008d9a:	1c7b      	adds	r3, r7, #1
 8008d9c:	d007      	beq.n	8008dae <_strtol_l.isra.0+0x84>
 8008d9e:	4584      	cmp	ip, r0
 8008da0:	d31c      	bcc.n	8008ddc <_strtol_l.isra.0+0xb2>
 8008da2:	d101      	bne.n	8008da8 <_strtol_l.isra.0+0x7e>
 8008da4:	45a6      	cmp	lr, r4
 8008da6:	db19      	blt.n	8008ddc <_strtol_l.isra.0+0xb2>
 8008da8:	2701      	movs	r7, #1
 8008daa:	fb00 4006 	mla	r0, r0, r6, r4
 8008dae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008db2:	e7eb      	b.n	8008d8c <_strtol_l.isra.0+0x62>
 8008db4:	462f      	mov	r7, r5
 8008db6:	e7bf      	b.n	8008d38 <_strtol_l.isra.0+0xe>
 8008db8:	2c2b      	cmp	r4, #43	; 0x2b
 8008dba:	bf04      	itt	eq
 8008dbc:	1cbd      	addeq	r5, r7, #2
 8008dbe:	787c      	ldrbeq	r4, [r7, #1]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	e7c9      	b.n	8008d58 <_strtol_l.isra.0+0x2e>
 8008dc4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008dc8:	2b19      	cmp	r3, #25
 8008dca:	d801      	bhi.n	8008dd0 <_strtol_l.isra.0+0xa6>
 8008dcc:	3c37      	subs	r4, #55	; 0x37
 8008dce:	e7e2      	b.n	8008d96 <_strtol_l.isra.0+0x6c>
 8008dd0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008dd4:	2b19      	cmp	r3, #25
 8008dd6:	d804      	bhi.n	8008de2 <_strtol_l.isra.0+0xb8>
 8008dd8:	3c57      	subs	r4, #87	; 0x57
 8008dda:	e7dc      	b.n	8008d96 <_strtol_l.isra.0+0x6c>
 8008ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8008de0:	e7e5      	b.n	8008dae <_strtol_l.isra.0+0x84>
 8008de2:	1c7b      	adds	r3, r7, #1
 8008de4:	d108      	bne.n	8008df8 <_strtol_l.isra.0+0xce>
 8008de6:	2322      	movs	r3, #34	; 0x22
 8008de8:	4608      	mov	r0, r1
 8008dea:	f8c8 3000 	str.w	r3, [r8]
 8008dee:	f1ba 0f00 	cmp.w	sl, #0
 8008df2:	d107      	bne.n	8008e04 <_strtol_l.isra.0+0xda>
 8008df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df8:	b102      	cbz	r2, 8008dfc <_strtol_l.isra.0+0xd2>
 8008dfa:	4240      	negs	r0, r0
 8008dfc:	f1ba 0f00 	cmp.w	sl, #0
 8008e00:	d0f8      	beq.n	8008df4 <_strtol_l.isra.0+0xca>
 8008e02:	b10f      	cbz	r7, 8008e08 <_strtol_l.isra.0+0xde>
 8008e04:	f105 39ff 	add.w	r9, r5, #4294967295
 8008e08:	f8ca 9000 	str.w	r9, [sl]
 8008e0c:	e7f2      	b.n	8008df4 <_strtol_l.isra.0+0xca>
 8008e0e:	2430      	movs	r4, #48	; 0x30
 8008e10:	2e00      	cmp	r6, #0
 8008e12:	d1af      	bne.n	8008d74 <_strtol_l.isra.0+0x4a>
 8008e14:	2608      	movs	r6, #8
 8008e16:	e7ad      	b.n	8008d74 <_strtol_l.isra.0+0x4a>
 8008e18:	2c30      	cmp	r4, #48	; 0x30
 8008e1a:	d0a3      	beq.n	8008d64 <_strtol_l.isra.0+0x3a>
 8008e1c:	260a      	movs	r6, #10
 8008e1e:	e7a9      	b.n	8008d74 <_strtol_l.isra.0+0x4a>

08008e20 <strtol>:
 8008e20:	4b08      	ldr	r3, [pc, #32]	; (8008e44 <strtol+0x24>)
 8008e22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e24:	681c      	ldr	r4, [r3, #0]
 8008e26:	4d08      	ldr	r5, [pc, #32]	; (8008e48 <strtol+0x28>)
 8008e28:	6a23      	ldr	r3, [r4, #32]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	bf08      	it	eq
 8008e2e:	462b      	moveq	r3, r5
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	4613      	mov	r3, r2
 8008e34:	460a      	mov	r2, r1
 8008e36:	4601      	mov	r1, r0
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f7ff ff76 	bl	8008d2a <_strtol_l.isra.0>
 8008e3e:	b003      	add	sp, #12
 8008e40:	bd30      	pop	{r4, r5, pc}
 8008e42:	bf00      	nop
 8008e44:	20000190 	.word	0x20000190
 8008e48:	200001f4 	.word	0x200001f4

08008e4c <_strtoul_l.isra.0>:
 8008e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	4680      	mov	r8, r0
 8008e52:	4689      	mov	r9, r1
 8008e54:	4692      	mov	sl, r2
 8008e56:	461e      	mov	r6, r3
 8008e58:	460f      	mov	r7, r1
 8008e5a:	463d      	mov	r5, r7
 8008e5c:	9808      	ldr	r0, [sp, #32]
 8008e5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e62:	f7ff fdf3 	bl	8008a4c <__locale_ctype_ptr_l>
 8008e66:	4420      	add	r0, r4
 8008e68:	7843      	ldrb	r3, [r0, #1]
 8008e6a:	f013 0308 	ands.w	r3, r3, #8
 8008e6e:	d130      	bne.n	8008ed2 <_strtoul_l.isra.0+0x86>
 8008e70:	2c2d      	cmp	r4, #45	; 0x2d
 8008e72:	d130      	bne.n	8008ed6 <_strtoul_l.isra.0+0x8a>
 8008e74:	2101      	movs	r1, #1
 8008e76:	787c      	ldrb	r4, [r7, #1]
 8008e78:	1cbd      	adds	r5, r7, #2
 8008e7a:	2e00      	cmp	r6, #0
 8008e7c:	d05c      	beq.n	8008f38 <_strtoul_l.isra.0+0xec>
 8008e7e:	2e10      	cmp	r6, #16
 8008e80:	d109      	bne.n	8008e96 <_strtoul_l.isra.0+0x4a>
 8008e82:	2c30      	cmp	r4, #48	; 0x30
 8008e84:	d107      	bne.n	8008e96 <_strtoul_l.isra.0+0x4a>
 8008e86:	782b      	ldrb	r3, [r5, #0]
 8008e88:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e8c:	2b58      	cmp	r3, #88	; 0x58
 8008e8e:	d14e      	bne.n	8008f2e <_strtoul_l.isra.0+0xe2>
 8008e90:	2610      	movs	r6, #16
 8008e92:	786c      	ldrb	r4, [r5, #1]
 8008e94:	3502      	adds	r5, #2
 8008e96:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9a:	fbb2 f2f6 	udiv	r2, r2, r6
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	fb06 fc02 	mul.w	ip, r6, r2
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	ea6f 0c0c 	mvn.w	ip, ip
 8008eaa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008eae:	2f09      	cmp	r7, #9
 8008eb0:	d817      	bhi.n	8008ee2 <_strtoul_l.isra.0+0x96>
 8008eb2:	463c      	mov	r4, r7
 8008eb4:	42a6      	cmp	r6, r4
 8008eb6:	dd23      	ble.n	8008f00 <_strtoul_l.isra.0+0xb4>
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	db1e      	blt.n	8008efa <_strtoul_l.isra.0+0xae>
 8008ebc:	4282      	cmp	r2, r0
 8008ebe:	d31c      	bcc.n	8008efa <_strtoul_l.isra.0+0xae>
 8008ec0:	d101      	bne.n	8008ec6 <_strtoul_l.isra.0+0x7a>
 8008ec2:	45a4      	cmp	ip, r4
 8008ec4:	db19      	blt.n	8008efa <_strtoul_l.isra.0+0xae>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	fb00 4006 	mla	r0, r0, r6, r4
 8008ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ed0:	e7eb      	b.n	8008eaa <_strtoul_l.isra.0+0x5e>
 8008ed2:	462f      	mov	r7, r5
 8008ed4:	e7c1      	b.n	8008e5a <_strtoul_l.isra.0+0xe>
 8008ed6:	2c2b      	cmp	r4, #43	; 0x2b
 8008ed8:	bf04      	itt	eq
 8008eda:	1cbd      	addeq	r5, r7, #2
 8008edc:	787c      	ldrbeq	r4, [r7, #1]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	e7cb      	b.n	8008e7a <_strtoul_l.isra.0+0x2e>
 8008ee2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008ee6:	2f19      	cmp	r7, #25
 8008ee8:	d801      	bhi.n	8008eee <_strtoul_l.isra.0+0xa2>
 8008eea:	3c37      	subs	r4, #55	; 0x37
 8008eec:	e7e2      	b.n	8008eb4 <_strtoul_l.isra.0+0x68>
 8008eee:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008ef2:	2f19      	cmp	r7, #25
 8008ef4:	d804      	bhi.n	8008f00 <_strtoul_l.isra.0+0xb4>
 8008ef6:	3c57      	subs	r4, #87	; 0x57
 8008ef8:	e7dc      	b.n	8008eb4 <_strtoul_l.isra.0+0x68>
 8008efa:	f04f 33ff 	mov.w	r3, #4294967295
 8008efe:	e7e5      	b.n	8008ecc <_strtoul_l.isra.0+0x80>
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	da09      	bge.n	8008f18 <_strtoul_l.isra.0+0xcc>
 8008f04:	2322      	movs	r3, #34	; 0x22
 8008f06:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0a:	f8c8 3000 	str.w	r3, [r8]
 8008f0e:	f1ba 0f00 	cmp.w	sl, #0
 8008f12:	d107      	bne.n	8008f24 <_strtoul_l.isra.0+0xd8>
 8008f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f18:	b101      	cbz	r1, 8008f1c <_strtoul_l.isra.0+0xd0>
 8008f1a:	4240      	negs	r0, r0
 8008f1c:	f1ba 0f00 	cmp.w	sl, #0
 8008f20:	d0f8      	beq.n	8008f14 <_strtoul_l.isra.0+0xc8>
 8008f22:	b10b      	cbz	r3, 8008f28 <_strtoul_l.isra.0+0xdc>
 8008f24:	f105 39ff 	add.w	r9, r5, #4294967295
 8008f28:	f8ca 9000 	str.w	r9, [sl]
 8008f2c:	e7f2      	b.n	8008f14 <_strtoul_l.isra.0+0xc8>
 8008f2e:	2430      	movs	r4, #48	; 0x30
 8008f30:	2e00      	cmp	r6, #0
 8008f32:	d1b0      	bne.n	8008e96 <_strtoul_l.isra.0+0x4a>
 8008f34:	2608      	movs	r6, #8
 8008f36:	e7ae      	b.n	8008e96 <_strtoul_l.isra.0+0x4a>
 8008f38:	2c30      	cmp	r4, #48	; 0x30
 8008f3a:	d0a4      	beq.n	8008e86 <_strtoul_l.isra.0+0x3a>
 8008f3c:	260a      	movs	r6, #10
 8008f3e:	e7aa      	b.n	8008e96 <_strtoul_l.isra.0+0x4a>

08008f40 <strtoul>:
 8008f40:	4b08      	ldr	r3, [pc, #32]	; (8008f64 <strtoul+0x24>)
 8008f42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f44:	681c      	ldr	r4, [r3, #0]
 8008f46:	4d08      	ldr	r5, [pc, #32]	; (8008f68 <strtoul+0x28>)
 8008f48:	6a23      	ldr	r3, [r4, #32]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	bf08      	it	eq
 8008f4e:	462b      	moveq	r3, r5
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	4613      	mov	r3, r2
 8008f54:	460a      	mov	r2, r1
 8008f56:	4601      	mov	r1, r0
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f7ff ff77 	bl	8008e4c <_strtoul_l.isra.0>
 8008f5e:	b003      	add	sp, #12
 8008f60:	bd30      	pop	{r4, r5, pc}
 8008f62:	bf00      	nop
 8008f64:	20000190 	.word	0x20000190
 8008f68:	200001f4 	.word	0x200001f4

08008f6c <__ascii_wctomb>:
 8008f6c:	b149      	cbz	r1, 8008f82 <__ascii_wctomb+0x16>
 8008f6e:	2aff      	cmp	r2, #255	; 0xff
 8008f70:	bf8b      	itete	hi
 8008f72:	238a      	movhi	r3, #138	; 0x8a
 8008f74:	700a      	strbls	r2, [r1, #0]
 8008f76:	6003      	strhi	r3, [r0, #0]
 8008f78:	2001      	movls	r0, #1
 8008f7a:	bf88      	it	hi
 8008f7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f80:	4770      	bx	lr
 8008f82:	4608      	mov	r0, r1
 8008f84:	4770      	bx	lr

08008f86 <__malloc_lock>:
 8008f86:	4770      	bx	lr

08008f88 <__malloc_unlock>:
 8008f88:	4770      	bx	lr

08008f8a <__ssputs_r>:
 8008f8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f8e:	688e      	ldr	r6, [r1, #8]
 8008f90:	4682      	mov	sl, r0
 8008f92:	429e      	cmp	r6, r3
 8008f94:	460c      	mov	r4, r1
 8008f96:	4690      	mov	r8, r2
 8008f98:	4699      	mov	r9, r3
 8008f9a:	d837      	bhi.n	800900c <__ssputs_r+0x82>
 8008f9c:	898a      	ldrh	r2, [r1, #12]
 8008f9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fa2:	d031      	beq.n	8009008 <__ssputs_r+0x7e>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	6825      	ldr	r5, [r4, #0]
 8008fa8:	6909      	ldr	r1, [r1, #16]
 8008faa:	1a6f      	subs	r7, r5, r1
 8008fac:	6965      	ldr	r5, [r4, #20]
 8008fae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fb2:	fb95 f5f3 	sdiv	r5, r5, r3
 8008fb6:	f109 0301 	add.w	r3, r9, #1
 8008fba:	443b      	add	r3, r7
 8008fbc:	429d      	cmp	r5, r3
 8008fbe:	bf38      	it	cc
 8008fc0:	461d      	movcc	r5, r3
 8008fc2:	0553      	lsls	r3, r2, #21
 8008fc4:	d530      	bpl.n	8009028 <__ssputs_r+0x9e>
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	f7ff fdec 	bl	8008ba4 <_malloc_r>
 8008fcc:	4606      	mov	r6, r0
 8008fce:	b950      	cbnz	r0, 8008fe6 <__ssputs_r+0x5c>
 8008fd0:	230c      	movs	r3, #12
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd6:	f8ca 3000 	str.w	r3, [sl]
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fe0:	81a3      	strh	r3, [r4, #12]
 8008fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe6:	463a      	mov	r2, r7
 8008fe8:	6921      	ldr	r1, [r4, #16]
 8008fea:	f7ff fd63 	bl	8008ab4 <memcpy>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff8:	81a3      	strh	r3, [r4, #12]
 8008ffa:	6126      	str	r6, [r4, #16]
 8008ffc:	443e      	add	r6, r7
 8008ffe:	6026      	str	r6, [r4, #0]
 8009000:	464e      	mov	r6, r9
 8009002:	6165      	str	r5, [r4, #20]
 8009004:	1bed      	subs	r5, r5, r7
 8009006:	60a5      	str	r5, [r4, #8]
 8009008:	454e      	cmp	r6, r9
 800900a:	d900      	bls.n	800900e <__ssputs_r+0x84>
 800900c:	464e      	mov	r6, r9
 800900e:	4632      	mov	r2, r6
 8009010:	4641      	mov	r1, r8
 8009012:	6820      	ldr	r0, [r4, #0]
 8009014:	f7ff fd59 	bl	8008aca <memmove>
 8009018:	68a3      	ldr	r3, [r4, #8]
 800901a:	2000      	movs	r0, #0
 800901c:	1b9b      	subs	r3, r3, r6
 800901e:	60a3      	str	r3, [r4, #8]
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	441e      	add	r6, r3
 8009024:	6026      	str	r6, [r4, #0]
 8009026:	e7dc      	b.n	8008fe2 <__ssputs_r+0x58>
 8009028:	462a      	mov	r2, r5
 800902a:	f000 fa97 	bl	800955c <_realloc_r>
 800902e:	4606      	mov	r6, r0
 8009030:	2800      	cmp	r0, #0
 8009032:	d1e2      	bne.n	8008ffa <__ssputs_r+0x70>
 8009034:	6921      	ldr	r1, [r4, #16]
 8009036:	4650      	mov	r0, sl
 8009038:	f7ff fd68 	bl	8008b0c <_free_r>
 800903c:	e7c8      	b.n	8008fd0 <__ssputs_r+0x46>
	...

08009040 <_svfiprintf_r>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	461d      	mov	r5, r3
 8009046:	898b      	ldrh	r3, [r1, #12]
 8009048:	b09d      	sub	sp, #116	; 0x74
 800904a:	061f      	lsls	r7, r3, #24
 800904c:	4680      	mov	r8, r0
 800904e:	460c      	mov	r4, r1
 8009050:	4616      	mov	r6, r2
 8009052:	d50f      	bpl.n	8009074 <_svfiprintf_r+0x34>
 8009054:	690b      	ldr	r3, [r1, #16]
 8009056:	b96b      	cbnz	r3, 8009074 <_svfiprintf_r+0x34>
 8009058:	2140      	movs	r1, #64	; 0x40
 800905a:	f7ff fda3 	bl	8008ba4 <_malloc_r>
 800905e:	6020      	str	r0, [r4, #0]
 8009060:	6120      	str	r0, [r4, #16]
 8009062:	b928      	cbnz	r0, 8009070 <_svfiprintf_r+0x30>
 8009064:	230c      	movs	r3, #12
 8009066:	f8c8 3000 	str.w	r3, [r8]
 800906a:	f04f 30ff 	mov.w	r0, #4294967295
 800906e:	e0c8      	b.n	8009202 <_svfiprintf_r+0x1c2>
 8009070:	2340      	movs	r3, #64	; 0x40
 8009072:	6163      	str	r3, [r4, #20]
 8009074:	2300      	movs	r3, #0
 8009076:	9309      	str	r3, [sp, #36]	; 0x24
 8009078:	2320      	movs	r3, #32
 800907a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800907e:	2330      	movs	r3, #48	; 0x30
 8009080:	f04f 0b01 	mov.w	fp, #1
 8009084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009088:	9503      	str	r5, [sp, #12]
 800908a:	4637      	mov	r7, r6
 800908c:	463d      	mov	r5, r7
 800908e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009092:	b10b      	cbz	r3, 8009098 <_svfiprintf_r+0x58>
 8009094:	2b25      	cmp	r3, #37	; 0x25
 8009096:	d13e      	bne.n	8009116 <_svfiprintf_r+0xd6>
 8009098:	ebb7 0a06 	subs.w	sl, r7, r6
 800909c:	d00b      	beq.n	80090b6 <_svfiprintf_r+0x76>
 800909e:	4653      	mov	r3, sl
 80090a0:	4632      	mov	r2, r6
 80090a2:	4621      	mov	r1, r4
 80090a4:	4640      	mov	r0, r8
 80090a6:	f7ff ff70 	bl	8008f8a <__ssputs_r>
 80090aa:	3001      	adds	r0, #1
 80090ac:	f000 80a4 	beq.w	80091f8 <_svfiprintf_r+0x1b8>
 80090b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b2:	4453      	add	r3, sl
 80090b4:	9309      	str	r3, [sp, #36]	; 0x24
 80090b6:	783b      	ldrb	r3, [r7, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 809d 	beq.w	80091f8 <_svfiprintf_r+0x1b8>
 80090be:	2300      	movs	r3, #0
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090c8:	9304      	str	r3, [sp, #16]
 80090ca:	9307      	str	r3, [sp, #28]
 80090cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090d0:	931a      	str	r3, [sp, #104]	; 0x68
 80090d2:	462f      	mov	r7, r5
 80090d4:	2205      	movs	r2, #5
 80090d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80090da:	4850      	ldr	r0, [pc, #320]	; (800921c <_svfiprintf_r+0x1dc>)
 80090dc:	f000 fa30 	bl	8009540 <memchr>
 80090e0:	9b04      	ldr	r3, [sp, #16]
 80090e2:	b9d0      	cbnz	r0, 800911a <_svfiprintf_r+0xda>
 80090e4:	06d9      	lsls	r1, r3, #27
 80090e6:	bf44      	itt	mi
 80090e8:	2220      	movmi	r2, #32
 80090ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80090ee:	071a      	lsls	r2, r3, #28
 80090f0:	bf44      	itt	mi
 80090f2:	222b      	movmi	r2, #43	; 0x2b
 80090f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80090f8:	782a      	ldrb	r2, [r5, #0]
 80090fa:	2a2a      	cmp	r2, #42	; 0x2a
 80090fc:	d015      	beq.n	800912a <_svfiprintf_r+0xea>
 80090fe:	462f      	mov	r7, r5
 8009100:	2000      	movs	r0, #0
 8009102:	250a      	movs	r5, #10
 8009104:	9a07      	ldr	r2, [sp, #28]
 8009106:	4639      	mov	r1, r7
 8009108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800910c:	3b30      	subs	r3, #48	; 0x30
 800910e:	2b09      	cmp	r3, #9
 8009110:	d94d      	bls.n	80091ae <_svfiprintf_r+0x16e>
 8009112:	b1b8      	cbz	r0, 8009144 <_svfiprintf_r+0x104>
 8009114:	e00f      	b.n	8009136 <_svfiprintf_r+0xf6>
 8009116:	462f      	mov	r7, r5
 8009118:	e7b8      	b.n	800908c <_svfiprintf_r+0x4c>
 800911a:	4a40      	ldr	r2, [pc, #256]	; (800921c <_svfiprintf_r+0x1dc>)
 800911c:	463d      	mov	r5, r7
 800911e:	1a80      	subs	r0, r0, r2
 8009120:	fa0b f000 	lsl.w	r0, fp, r0
 8009124:	4318      	orrs	r0, r3
 8009126:	9004      	str	r0, [sp, #16]
 8009128:	e7d3      	b.n	80090d2 <_svfiprintf_r+0x92>
 800912a:	9a03      	ldr	r2, [sp, #12]
 800912c:	1d11      	adds	r1, r2, #4
 800912e:	6812      	ldr	r2, [r2, #0]
 8009130:	9103      	str	r1, [sp, #12]
 8009132:	2a00      	cmp	r2, #0
 8009134:	db01      	blt.n	800913a <_svfiprintf_r+0xfa>
 8009136:	9207      	str	r2, [sp, #28]
 8009138:	e004      	b.n	8009144 <_svfiprintf_r+0x104>
 800913a:	4252      	negs	r2, r2
 800913c:	f043 0302 	orr.w	r3, r3, #2
 8009140:	9207      	str	r2, [sp, #28]
 8009142:	9304      	str	r3, [sp, #16]
 8009144:	783b      	ldrb	r3, [r7, #0]
 8009146:	2b2e      	cmp	r3, #46	; 0x2e
 8009148:	d10c      	bne.n	8009164 <_svfiprintf_r+0x124>
 800914a:	787b      	ldrb	r3, [r7, #1]
 800914c:	2b2a      	cmp	r3, #42	; 0x2a
 800914e:	d133      	bne.n	80091b8 <_svfiprintf_r+0x178>
 8009150:	9b03      	ldr	r3, [sp, #12]
 8009152:	3702      	adds	r7, #2
 8009154:	1d1a      	adds	r2, r3, #4
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	9203      	str	r2, [sp, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	bfb8      	it	lt
 800915e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009162:	9305      	str	r3, [sp, #20]
 8009164:	4d2e      	ldr	r5, [pc, #184]	; (8009220 <_svfiprintf_r+0x1e0>)
 8009166:	2203      	movs	r2, #3
 8009168:	7839      	ldrb	r1, [r7, #0]
 800916a:	4628      	mov	r0, r5
 800916c:	f000 f9e8 	bl	8009540 <memchr>
 8009170:	b138      	cbz	r0, 8009182 <_svfiprintf_r+0x142>
 8009172:	2340      	movs	r3, #64	; 0x40
 8009174:	1b40      	subs	r0, r0, r5
 8009176:	fa03 f000 	lsl.w	r0, r3, r0
 800917a:	9b04      	ldr	r3, [sp, #16]
 800917c:	3701      	adds	r7, #1
 800917e:	4303      	orrs	r3, r0
 8009180:	9304      	str	r3, [sp, #16]
 8009182:	7839      	ldrb	r1, [r7, #0]
 8009184:	2206      	movs	r2, #6
 8009186:	4827      	ldr	r0, [pc, #156]	; (8009224 <_svfiprintf_r+0x1e4>)
 8009188:	1c7e      	adds	r6, r7, #1
 800918a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800918e:	f000 f9d7 	bl	8009540 <memchr>
 8009192:	2800      	cmp	r0, #0
 8009194:	d038      	beq.n	8009208 <_svfiprintf_r+0x1c8>
 8009196:	4b24      	ldr	r3, [pc, #144]	; (8009228 <_svfiprintf_r+0x1e8>)
 8009198:	bb13      	cbnz	r3, 80091e0 <_svfiprintf_r+0x1a0>
 800919a:	9b03      	ldr	r3, [sp, #12]
 800919c:	3307      	adds	r3, #7
 800919e:	f023 0307 	bic.w	r3, r3, #7
 80091a2:	3308      	adds	r3, #8
 80091a4:	9303      	str	r3, [sp, #12]
 80091a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a8:	444b      	add	r3, r9
 80091aa:	9309      	str	r3, [sp, #36]	; 0x24
 80091ac:	e76d      	b.n	800908a <_svfiprintf_r+0x4a>
 80091ae:	fb05 3202 	mla	r2, r5, r2, r3
 80091b2:	2001      	movs	r0, #1
 80091b4:	460f      	mov	r7, r1
 80091b6:	e7a6      	b.n	8009106 <_svfiprintf_r+0xc6>
 80091b8:	2300      	movs	r3, #0
 80091ba:	250a      	movs	r5, #10
 80091bc:	4619      	mov	r1, r3
 80091be:	3701      	adds	r7, #1
 80091c0:	9305      	str	r3, [sp, #20]
 80091c2:	4638      	mov	r0, r7
 80091c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091c8:	3a30      	subs	r2, #48	; 0x30
 80091ca:	2a09      	cmp	r2, #9
 80091cc:	d903      	bls.n	80091d6 <_svfiprintf_r+0x196>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0c8      	beq.n	8009164 <_svfiprintf_r+0x124>
 80091d2:	9105      	str	r1, [sp, #20]
 80091d4:	e7c6      	b.n	8009164 <_svfiprintf_r+0x124>
 80091d6:	fb05 2101 	mla	r1, r5, r1, r2
 80091da:	2301      	movs	r3, #1
 80091dc:	4607      	mov	r7, r0
 80091de:	e7f0      	b.n	80091c2 <_svfiprintf_r+0x182>
 80091e0:	ab03      	add	r3, sp, #12
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	4622      	mov	r2, r4
 80091e6:	4b11      	ldr	r3, [pc, #68]	; (800922c <_svfiprintf_r+0x1ec>)
 80091e8:	a904      	add	r1, sp, #16
 80091ea:	4640      	mov	r0, r8
 80091ec:	f3af 8000 	nop.w
 80091f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80091f4:	4681      	mov	r9, r0
 80091f6:	d1d6      	bne.n	80091a6 <_svfiprintf_r+0x166>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	065b      	lsls	r3, r3, #25
 80091fc:	f53f af35 	bmi.w	800906a <_svfiprintf_r+0x2a>
 8009200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009202:	b01d      	add	sp, #116	; 0x74
 8009204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009208:	ab03      	add	r3, sp, #12
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	4622      	mov	r2, r4
 800920e:	4b07      	ldr	r3, [pc, #28]	; (800922c <_svfiprintf_r+0x1ec>)
 8009210:	a904      	add	r1, sp, #16
 8009212:	4640      	mov	r0, r8
 8009214:	f000 f882 	bl	800931c <_printf_i>
 8009218:	e7ea      	b.n	80091f0 <_svfiprintf_r+0x1b0>
 800921a:	bf00      	nop
 800921c:	0800afc4 	.word	0x0800afc4
 8009220:	0800afca 	.word	0x0800afca
 8009224:	0800afce 	.word	0x0800afce
 8009228:	00000000 	.word	0x00000000
 800922c:	08008f8b 	.word	0x08008f8b

08009230 <_printf_common>:
 8009230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009234:	4691      	mov	r9, r2
 8009236:	461f      	mov	r7, r3
 8009238:	688a      	ldr	r2, [r1, #8]
 800923a:	690b      	ldr	r3, [r1, #16]
 800923c:	4606      	mov	r6, r0
 800923e:	4293      	cmp	r3, r2
 8009240:	bfb8      	it	lt
 8009242:	4613      	movlt	r3, r2
 8009244:	f8c9 3000 	str.w	r3, [r9]
 8009248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800924c:	460c      	mov	r4, r1
 800924e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009252:	b112      	cbz	r2, 800925a <_printf_common+0x2a>
 8009254:	3301      	adds	r3, #1
 8009256:	f8c9 3000 	str.w	r3, [r9]
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	0699      	lsls	r1, r3, #26
 800925e:	bf42      	ittt	mi
 8009260:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009264:	3302      	addmi	r3, #2
 8009266:	f8c9 3000 	strmi.w	r3, [r9]
 800926a:	6825      	ldr	r5, [r4, #0]
 800926c:	f015 0506 	ands.w	r5, r5, #6
 8009270:	d107      	bne.n	8009282 <_printf_common+0x52>
 8009272:	f104 0a19 	add.w	sl, r4, #25
 8009276:	68e3      	ldr	r3, [r4, #12]
 8009278:	f8d9 2000 	ldr.w	r2, [r9]
 800927c:	1a9b      	subs	r3, r3, r2
 800927e:	42ab      	cmp	r3, r5
 8009280:	dc29      	bgt.n	80092d6 <_printf_common+0xa6>
 8009282:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009286:	6822      	ldr	r2, [r4, #0]
 8009288:	3300      	adds	r3, #0
 800928a:	bf18      	it	ne
 800928c:	2301      	movne	r3, #1
 800928e:	0692      	lsls	r2, r2, #26
 8009290:	d42e      	bmi.n	80092f0 <_printf_common+0xc0>
 8009292:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009296:	4639      	mov	r1, r7
 8009298:	4630      	mov	r0, r6
 800929a:	47c0      	blx	r8
 800929c:	3001      	adds	r0, #1
 800929e:	d021      	beq.n	80092e4 <_printf_common+0xb4>
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	68e5      	ldr	r5, [r4, #12]
 80092a4:	f003 0306 	and.w	r3, r3, #6
 80092a8:	2b04      	cmp	r3, #4
 80092aa:	bf18      	it	ne
 80092ac:	2500      	movne	r5, #0
 80092ae:	f8d9 2000 	ldr.w	r2, [r9]
 80092b2:	f04f 0900 	mov.w	r9, #0
 80092b6:	bf08      	it	eq
 80092b8:	1aad      	subeq	r5, r5, r2
 80092ba:	68a3      	ldr	r3, [r4, #8]
 80092bc:	6922      	ldr	r2, [r4, #16]
 80092be:	bf08      	it	eq
 80092c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092c4:	4293      	cmp	r3, r2
 80092c6:	bfc4      	itt	gt
 80092c8:	1a9b      	subgt	r3, r3, r2
 80092ca:	18ed      	addgt	r5, r5, r3
 80092cc:	341a      	adds	r4, #26
 80092ce:	454d      	cmp	r5, r9
 80092d0:	d11a      	bne.n	8009308 <_printf_common+0xd8>
 80092d2:	2000      	movs	r0, #0
 80092d4:	e008      	b.n	80092e8 <_printf_common+0xb8>
 80092d6:	2301      	movs	r3, #1
 80092d8:	4652      	mov	r2, sl
 80092da:	4639      	mov	r1, r7
 80092dc:	4630      	mov	r0, r6
 80092de:	47c0      	blx	r8
 80092e0:	3001      	adds	r0, #1
 80092e2:	d103      	bne.n	80092ec <_printf_common+0xbc>
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295
 80092e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ec:	3501      	adds	r5, #1
 80092ee:	e7c2      	b.n	8009276 <_printf_common+0x46>
 80092f0:	2030      	movs	r0, #48	; 0x30
 80092f2:	18e1      	adds	r1, r4, r3
 80092f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092fe:	4422      	add	r2, r4
 8009300:	3302      	adds	r3, #2
 8009302:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009306:	e7c4      	b.n	8009292 <_printf_common+0x62>
 8009308:	2301      	movs	r3, #1
 800930a:	4622      	mov	r2, r4
 800930c:	4639      	mov	r1, r7
 800930e:	4630      	mov	r0, r6
 8009310:	47c0      	blx	r8
 8009312:	3001      	adds	r0, #1
 8009314:	d0e6      	beq.n	80092e4 <_printf_common+0xb4>
 8009316:	f109 0901 	add.w	r9, r9, #1
 800931a:	e7d8      	b.n	80092ce <_printf_common+0x9e>

0800931c <_printf_i>:
 800931c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009320:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009324:	460c      	mov	r4, r1
 8009326:	7e09      	ldrb	r1, [r1, #24]
 8009328:	b085      	sub	sp, #20
 800932a:	296e      	cmp	r1, #110	; 0x6e
 800932c:	4617      	mov	r7, r2
 800932e:	4606      	mov	r6, r0
 8009330:	4698      	mov	r8, r3
 8009332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009334:	f000 80b3 	beq.w	800949e <_printf_i+0x182>
 8009338:	d822      	bhi.n	8009380 <_printf_i+0x64>
 800933a:	2963      	cmp	r1, #99	; 0x63
 800933c:	d036      	beq.n	80093ac <_printf_i+0x90>
 800933e:	d80a      	bhi.n	8009356 <_printf_i+0x3a>
 8009340:	2900      	cmp	r1, #0
 8009342:	f000 80b9 	beq.w	80094b8 <_printf_i+0x19c>
 8009346:	2958      	cmp	r1, #88	; 0x58
 8009348:	f000 8083 	beq.w	8009452 <_printf_i+0x136>
 800934c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009350:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009354:	e032      	b.n	80093bc <_printf_i+0xa0>
 8009356:	2964      	cmp	r1, #100	; 0x64
 8009358:	d001      	beq.n	800935e <_printf_i+0x42>
 800935a:	2969      	cmp	r1, #105	; 0x69
 800935c:	d1f6      	bne.n	800934c <_printf_i+0x30>
 800935e:	6820      	ldr	r0, [r4, #0]
 8009360:	6813      	ldr	r3, [r2, #0]
 8009362:	0605      	lsls	r5, r0, #24
 8009364:	f103 0104 	add.w	r1, r3, #4
 8009368:	d52a      	bpl.n	80093c0 <_printf_i+0xa4>
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6011      	str	r1, [r2, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	da03      	bge.n	800937a <_printf_i+0x5e>
 8009372:	222d      	movs	r2, #45	; 0x2d
 8009374:	425b      	negs	r3, r3
 8009376:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800937a:	486f      	ldr	r0, [pc, #444]	; (8009538 <_printf_i+0x21c>)
 800937c:	220a      	movs	r2, #10
 800937e:	e039      	b.n	80093f4 <_printf_i+0xd8>
 8009380:	2973      	cmp	r1, #115	; 0x73
 8009382:	f000 809d 	beq.w	80094c0 <_printf_i+0x1a4>
 8009386:	d808      	bhi.n	800939a <_printf_i+0x7e>
 8009388:	296f      	cmp	r1, #111	; 0x6f
 800938a:	d020      	beq.n	80093ce <_printf_i+0xb2>
 800938c:	2970      	cmp	r1, #112	; 0x70
 800938e:	d1dd      	bne.n	800934c <_printf_i+0x30>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	f043 0320 	orr.w	r3, r3, #32
 8009396:	6023      	str	r3, [r4, #0]
 8009398:	e003      	b.n	80093a2 <_printf_i+0x86>
 800939a:	2975      	cmp	r1, #117	; 0x75
 800939c:	d017      	beq.n	80093ce <_printf_i+0xb2>
 800939e:	2978      	cmp	r1, #120	; 0x78
 80093a0:	d1d4      	bne.n	800934c <_printf_i+0x30>
 80093a2:	2378      	movs	r3, #120	; 0x78
 80093a4:	4865      	ldr	r0, [pc, #404]	; (800953c <_printf_i+0x220>)
 80093a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093aa:	e055      	b.n	8009458 <_printf_i+0x13c>
 80093ac:	6813      	ldr	r3, [r2, #0]
 80093ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093b2:	1d19      	adds	r1, r3, #4
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6011      	str	r1, [r2, #0]
 80093b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093bc:	2301      	movs	r3, #1
 80093be:	e08c      	b.n	80094da <_printf_i+0x1be>
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093c6:	6011      	str	r1, [r2, #0]
 80093c8:	bf18      	it	ne
 80093ca:	b21b      	sxthne	r3, r3
 80093cc:	e7cf      	b.n	800936e <_printf_i+0x52>
 80093ce:	6813      	ldr	r3, [r2, #0]
 80093d0:	6825      	ldr	r5, [r4, #0]
 80093d2:	1d18      	adds	r0, r3, #4
 80093d4:	6010      	str	r0, [r2, #0]
 80093d6:	0628      	lsls	r0, r5, #24
 80093d8:	d501      	bpl.n	80093de <_printf_i+0xc2>
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	e002      	b.n	80093e4 <_printf_i+0xc8>
 80093de:	0668      	lsls	r0, r5, #25
 80093e0:	d5fb      	bpl.n	80093da <_printf_i+0xbe>
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	296f      	cmp	r1, #111	; 0x6f
 80093e6:	bf14      	ite	ne
 80093e8:	220a      	movne	r2, #10
 80093ea:	2208      	moveq	r2, #8
 80093ec:	4852      	ldr	r0, [pc, #328]	; (8009538 <_printf_i+0x21c>)
 80093ee:	2100      	movs	r1, #0
 80093f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093f4:	6865      	ldr	r5, [r4, #4]
 80093f6:	2d00      	cmp	r5, #0
 80093f8:	60a5      	str	r5, [r4, #8]
 80093fa:	f2c0 8095 	blt.w	8009528 <_printf_i+0x20c>
 80093fe:	6821      	ldr	r1, [r4, #0]
 8009400:	f021 0104 	bic.w	r1, r1, #4
 8009404:	6021      	str	r1, [r4, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d13d      	bne.n	8009486 <_printf_i+0x16a>
 800940a:	2d00      	cmp	r5, #0
 800940c:	f040 808e 	bne.w	800952c <_printf_i+0x210>
 8009410:	4665      	mov	r5, ip
 8009412:	2a08      	cmp	r2, #8
 8009414:	d10b      	bne.n	800942e <_printf_i+0x112>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	07db      	lsls	r3, r3, #31
 800941a:	d508      	bpl.n	800942e <_printf_i+0x112>
 800941c:	6923      	ldr	r3, [r4, #16]
 800941e:	6862      	ldr	r2, [r4, #4]
 8009420:	429a      	cmp	r2, r3
 8009422:	bfde      	ittt	le
 8009424:	2330      	movle	r3, #48	; 0x30
 8009426:	f805 3c01 	strble.w	r3, [r5, #-1]
 800942a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800942e:	ebac 0305 	sub.w	r3, ip, r5
 8009432:	6123      	str	r3, [r4, #16]
 8009434:	f8cd 8000 	str.w	r8, [sp]
 8009438:	463b      	mov	r3, r7
 800943a:	aa03      	add	r2, sp, #12
 800943c:	4621      	mov	r1, r4
 800943e:	4630      	mov	r0, r6
 8009440:	f7ff fef6 	bl	8009230 <_printf_common>
 8009444:	3001      	adds	r0, #1
 8009446:	d14d      	bne.n	80094e4 <_printf_i+0x1c8>
 8009448:	f04f 30ff 	mov.w	r0, #4294967295
 800944c:	b005      	add	sp, #20
 800944e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009452:	4839      	ldr	r0, [pc, #228]	; (8009538 <_printf_i+0x21c>)
 8009454:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009458:	6813      	ldr	r3, [r2, #0]
 800945a:	6821      	ldr	r1, [r4, #0]
 800945c:	1d1d      	adds	r5, r3, #4
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6015      	str	r5, [r2, #0]
 8009462:	060a      	lsls	r2, r1, #24
 8009464:	d50b      	bpl.n	800947e <_printf_i+0x162>
 8009466:	07ca      	lsls	r2, r1, #31
 8009468:	bf44      	itt	mi
 800946a:	f041 0120 	orrmi.w	r1, r1, #32
 800946e:	6021      	strmi	r1, [r4, #0]
 8009470:	b91b      	cbnz	r3, 800947a <_printf_i+0x15e>
 8009472:	6822      	ldr	r2, [r4, #0]
 8009474:	f022 0220 	bic.w	r2, r2, #32
 8009478:	6022      	str	r2, [r4, #0]
 800947a:	2210      	movs	r2, #16
 800947c:	e7b7      	b.n	80093ee <_printf_i+0xd2>
 800947e:	064d      	lsls	r5, r1, #25
 8009480:	bf48      	it	mi
 8009482:	b29b      	uxthmi	r3, r3
 8009484:	e7ef      	b.n	8009466 <_printf_i+0x14a>
 8009486:	4665      	mov	r5, ip
 8009488:	fbb3 f1f2 	udiv	r1, r3, r2
 800948c:	fb02 3311 	mls	r3, r2, r1, r3
 8009490:	5cc3      	ldrb	r3, [r0, r3]
 8009492:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009496:	460b      	mov	r3, r1
 8009498:	2900      	cmp	r1, #0
 800949a:	d1f5      	bne.n	8009488 <_printf_i+0x16c>
 800949c:	e7b9      	b.n	8009412 <_printf_i+0xf6>
 800949e:	6813      	ldr	r3, [r2, #0]
 80094a0:	6825      	ldr	r5, [r4, #0]
 80094a2:	1d18      	adds	r0, r3, #4
 80094a4:	6961      	ldr	r1, [r4, #20]
 80094a6:	6010      	str	r0, [r2, #0]
 80094a8:	0628      	lsls	r0, r5, #24
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	d501      	bpl.n	80094b2 <_printf_i+0x196>
 80094ae:	6019      	str	r1, [r3, #0]
 80094b0:	e002      	b.n	80094b8 <_printf_i+0x19c>
 80094b2:	066a      	lsls	r2, r5, #25
 80094b4:	d5fb      	bpl.n	80094ae <_printf_i+0x192>
 80094b6:	8019      	strh	r1, [r3, #0]
 80094b8:	2300      	movs	r3, #0
 80094ba:	4665      	mov	r5, ip
 80094bc:	6123      	str	r3, [r4, #16]
 80094be:	e7b9      	b.n	8009434 <_printf_i+0x118>
 80094c0:	6813      	ldr	r3, [r2, #0]
 80094c2:	1d19      	adds	r1, r3, #4
 80094c4:	6011      	str	r1, [r2, #0]
 80094c6:	681d      	ldr	r5, [r3, #0]
 80094c8:	6862      	ldr	r2, [r4, #4]
 80094ca:	2100      	movs	r1, #0
 80094cc:	4628      	mov	r0, r5
 80094ce:	f000 f837 	bl	8009540 <memchr>
 80094d2:	b108      	cbz	r0, 80094d8 <_printf_i+0x1bc>
 80094d4:	1b40      	subs	r0, r0, r5
 80094d6:	6060      	str	r0, [r4, #4]
 80094d8:	6863      	ldr	r3, [r4, #4]
 80094da:	6123      	str	r3, [r4, #16]
 80094dc:	2300      	movs	r3, #0
 80094de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e2:	e7a7      	b.n	8009434 <_printf_i+0x118>
 80094e4:	6923      	ldr	r3, [r4, #16]
 80094e6:	462a      	mov	r2, r5
 80094e8:	4639      	mov	r1, r7
 80094ea:	4630      	mov	r0, r6
 80094ec:	47c0      	blx	r8
 80094ee:	3001      	adds	r0, #1
 80094f0:	d0aa      	beq.n	8009448 <_printf_i+0x12c>
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	079b      	lsls	r3, r3, #30
 80094f6:	d413      	bmi.n	8009520 <_printf_i+0x204>
 80094f8:	68e0      	ldr	r0, [r4, #12]
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	4298      	cmp	r0, r3
 80094fe:	bfb8      	it	lt
 8009500:	4618      	movlt	r0, r3
 8009502:	e7a3      	b.n	800944c <_printf_i+0x130>
 8009504:	2301      	movs	r3, #1
 8009506:	464a      	mov	r2, r9
 8009508:	4639      	mov	r1, r7
 800950a:	4630      	mov	r0, r6
 800950c:	47c0      	blx	r8
 800950e:	3001      	adds	r0, #1
 8009510:	d09a      	beq.n	8009448 <_printf_i+0x12c>
 8009512:	3501      	adds	r5, #1
 8009514:	68e3      	ldr	r3, [r4, #12]
 8009516:	9a03      	ldr	r2, [sp, #12]
 8009518:	1a9b      	subs	r3, r3, r2
 800951a:	42ab      	cmp	r3, r5
 800951c:	dcf2      	bgt.n	8009504 <_printf_i+0x1e8>
 800951e:	e7eb      	b.n	80094f8 <_printf_i+0x1dc>
 8009520:	2500      	movs	r5, #0
 8009522:	f104 0919 	add.w	r9, r4, #25
 8009526:	e7f5      	b.n	8009514 <_printf_i+0x1f8>
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1ac      	bne.n	8009486 <_printf_i+0x16a>
 800952c:	7803      	ldrb	r3, [r0, #0]
 800952e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009532:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009536:	e76c      	b.n	8009412 <_printf_i+0xf6>
 8009538:	0800aea2 	.word	0x0800aea2
 800953c:	0800afd5 	.word	0x0800afd5

08009540 <memchr>:
 8009540:	b510      	push	{r4, lr}
 8009542:	b2c9      	uxtb	r1, r1
 8009544:	4402      	add	r2, r0
 8009546:	4290      	cmp	r0, r2
 8009548:	4603      	mov	r3, r0
 800954a:	d101      	bne.n	8009550 <memchr+0x10>
 800954c:	2300      	movs	r3, #0
 800954e:	e003      	b.n	8009558 <memchr+0x18>
 8009550:	781c      	ldrb	r4, [r3, #0]
 8009552:	3001      	adds	r0, #1
 8009554:	428c      	cmp	r4, r1
 8009556:	d1f6      	bne.n	8009546 <memchr+0x6>
 8009558:	4618      	mov	r0, r3
 800955a:	bd10      	pop	{r4, pc}

0800955c <_realloc_r>:
 800955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955e:	4607      	mov	r7, r0
 8009560:	4614      	mov	r4, r2
 8009562:	460e      	mov	r6, r1
 8009564:	b921      	cbnz	r1, 8009570 <_realloc_r+0x14>
 8009566:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800956a:	4611      	mov	r1, r2
 800956c:	f7ff bb1a 	b.w	8008ba4 <_malloc_r>
 8009570:	b922      	cbnz	r2, 800957c <_realloc_r+0x20>
 8009572:	f7ff facb 	bl	8008b0c <_free_r>
 8009576:	4625      	mov	r5, r4
 8009578:	4628      	mov	r0, r5
 800957a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800957c:	f000 f814 	bl	80095a8 <_malloc_usable_size_r>
 8009580:	42a0      	cmp	r0, r4
 8009582:	d20f      	bcs.n	80095a4 <_realloc_r+0x48>
 8009584:	4621      	mov	r1, r4
 8009586:	4638      	mov	r0, r7
 8009588:	f7ff fb0c 	bl	8008ba4 <_malloc_r>
 800958c:	4605      	mov	r5, r0
 800958e:	2800      	cmp	r0, #0
 8009590:	d0f2      	beq.n	8009578 <_realloc_r+0x1c>
 8009592:	4631      	mov	r1, r6
 8009594:	4622      	mov	r2, r4
 8009596:	f7ff fa8d 	bl	8008ab4 <memcpy>
 800959a:	4631      	mov	r1, r6
 800959c:	4638      	mov	r0, r7
 800959e:	f7ff fab5 	bl	8008b0c <_free_r>
 80095a2:	e7e9      	b.n	8009578 <_realloc_r+0x1c>
 80095a4:	4635      	mov	r5, r6
 80095a6:	e7e7      	b.n	8009578 <_realloc_r+0x1c>

080095a8 <_malloc_usable_size_r>:
 80095a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ac:	1f18      	subs	r0, r3, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bfbc      	itt	lt
 80095b2:	580b      	ldrlt	r3, [r1, r0]
 80095b4:	18c0      	addlt	r0, r0, r3
 80095b6:	4770      	bx	lr

080095b8 <pow>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	b08f      	sub	sp, #60	; 0x3c
 80095be:	461d      	mov	r5, r3
 80095c0:	4680      	mov	r8, r0
 80095c2:	4689      	mov	r9, r1
 80095c4:	4614      	mov	r4, r2
 80095c6:	f000 f953 	bl	8009870 <__ieee754_pow>
 80095ca:	4fa1      	ldr	r7, [pc, #644]	; (8009850 <pow+0x298>)
 80095cc:	e9cd 0100 	strd	r0, r1, [sp]
 80095d0:	f997 3000 	ldrsb.w	r3, [r7]
 80095d4:	463e      	mov	r6, r7
 80095d6:	9302      	str	r3, [sp, #8]
 80095d8:	3301      	adds	r3, #1
 80095da:	d05f      	beq.n	800969c <pow+0xe4>
 80095dc:	4622      	mov	r2, r4
 80095de:	462b      	mov	r3, r5
 80095e0:	4620      	mov	r0, r4
 80095e2:	4629      	mov	r1, r5
 80095e4:	f7f7 fa1c 	bl	8000a20 <__aeabi_dcmpun>
 80095e8:	4682      	mov	sl, r0
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d156      	bne.n	800969c <pow+0xe4>
 80095ee:	4642      	mov	r2, r8
 80095f0:	464b      	mov	r3, r9
 80095f2:	4640      	mov	r0, r8
 80095f4:	4649      	mov	r1, r9
 80095f6:	f7f7 fa13 	bl	8000a20 <__aeabi_dcmpun>
 80095fa:	9003      	str	r0, [sp, #12]
 80095fc:	b1e8      	cbz	r0, 800963a <pow+0x82>
 80095fe:	2200      	movs	r2, #0
 8009600:	2300      	movs	r3, #0
 8009602:	4620      	mov	r0, r4
 8009604:	4629      	mov	r1, r5
 8009606:	f7f7 f9d9 	bl	80009bc <__aeabi_dcmpeq>
 800960a:	2800      	cmp	r0, #0
 800960c:	d046      	beq.n	800969c <pow+0xe4>
 800960e:	2301      	movs	r3, #1
 8009610:	2200      	movs	r2, #0
 8009612:	9304      	str	r3, [sp, #16]
 8009614:	4b8f      	ldr	r3, [pc, #572]	; (8009854 <pow+0x29c>)
 8009616:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800961a:	9305      	str	r3, [sp, #20]
 800961c:	4b8e      	ldr	r3, [pc, #568]	; (8009858 <pow+0x2a0>)
 800961e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009622:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009626:	9b02      	ldr	r3, [sp, #8]
 8009628:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d031      	beq.n	8009694 <pow+0xdc>
 8009630:	a804      	add	r0, sp, #16
 8009632:	f000 fedd 	bl	800a3f0 <matherr>
 8009636:	bb38      	cbnz	r0, 8009688 <pow+0xd0>
 8009638:	e058      	b.n	80096ec <pow+0x134>
 800963a:	f04f 0a00 	mov.w	sl, #0
 800963e:	f04f 0b00 	mov.w	fp, #0
 8009642:	4652      	mov	r2, sl
 8009644:	465b      	mov	r3, fp
 8009646:	4640      	mov	r0, r8
 8009648:	4649      	mov	r1, r9
 800964a:	f7f7 f9b7 	bl	80009bc <__aeabi_dcmpeq>
 800964e:	2800      	cmp	r0, #0
 8009650:	d051      	beq.n	80096f6 <pow+0x13e>
 8009652:	4652      	mov	r2, sl
 8009654:	465b      	mov	r3, fp
 8009656:	4620      	mov	r0, r4
 8009658:	4629      	mov	r1, r5
 800965a:	f7f7 f9af 	bl	80009bc <__aeabi_dcmpeq>
 800965e:	4606      	mov	r6, r0
 8009660:	b308      	cbz	r0, 80096a6 <pow+0xee>
 8009662:	2301      	movs	r3, #1
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	4b7b      	ldr	r3, [pc, #492]	; (8009854 <pow+0x29c>)
 8009668:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800966c:	9305      	str	r3, [sp, #20]
 800966e:	9b03      	ldr	r3, [sp, #12]
 8009670:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009674:	930c      	str	r3, [sp, #48]	; 0x30
 8009676:	9b02      	ldr	r3, [sp, #8]
 8009678:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800967c:	2b00      	cmp	r3, #0
 800967e:	d0d7      	beq.n	8009630 <pow+0x78>
 8009680:	2200      	movs	r2, #0
 8009682:	4b75      	ldr	r3, [pc, #468]	; (8009858 <pow+0x2a0>)
 8009684:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800968a:	b11b      	cbz	r3, 8009694 <pow+0xdc>
 800968c:	f7ff f9b4 	bl	80089f8 <__errno>
 8009690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009692:	6003      	str	r3, [r0, #0]
 8009694:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8009698:	e9cd 3400 	strd	r3, r4, [sp]
 800969c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096a0:	b00f      	add	sp, #60	; 0x3c
 80096a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a6:	4620      	mov	r0, r4
 80096a8:	4629      	mov	r1, r5
 80096aa:	f000 fe9b 	bl	800a3e4 <finite>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d0f4      	beq.n	800969c <pow+0xe4>
 80096b2:	4652      	mov	r2, sl
 80096b4:	465b      	mov	r3, fp
 80096b6:	4620      	mov	r0, r4
 80096b8:	4629      	mov	r1, r5
 80096ba:	f7f7 f989 	bl	80009d0 <__aeabi_dcmplt>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d0ec      	beq.n	800969c <pow+0xe4>
 80096c2:	2301      	movs	r3, #1
 80096c4:	9304      	str	r3, [sp, #16]
 80096c6:	4b63      	ldr	r3, [pc, #396]	; (8009854 <pow+0x29c>)
 80096c8:	960c      	str	r6, [sp, #48]	; 0x30
 80096ca:	9305      	str	r3, [sp, #20]
 80096cc:	f997 3000 	ldrsb.w	r3, [r7]
 80096d0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80096d4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80096d8:	b913      	cbnz	r3, 80096e0 <pow+0x128>
 80096da:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80096de:	e7a7      	b.n	8009630 <pow+0x78>
 80096e0:	2000      	movs	r0, #0
 80096e2:	495e      	ldr	r1, [pc, #376]	; (800985c <pow+0x2a4>)
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80096ea:	d1a1      	bne.n	8009630 <pow+0x78>
 80096ec:	f7ff f984 	bl	80089f8 <__errno>
 80096f0:	2321      	movs	r3, #33	; 0x21
 80096f2:	6003      	str	r3, [r0, #0]
 80096f4:	e7c8      	b.n	8009688 <pow+0xd0>
 80096f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096fa:	f000 fe73 	bl	800a3e4 <finite>
 80096fe:	9002      	str	r0, [sp, #8]
 8009700:	2800      	cmp	r0, #0
 8009702:	d177      	bne.n	80097f4 <pow+0x23c>
 8009704:	4640      	mov	r0, r8
 8009706:	4649      	mov	r1, r9
 8009708:	f000 fe6c 	bl	800a3e4 <finite>
 800970c:	2800      	cmp	r0, #0
 800970e:	d071      	beq.n	80097f4 <pow+0x23c>
 8009710:	4620      	mov	r0, r4
 8009712:	4629      	mov	r1, r5
 8009714:	f000 fe66 	bl	800a3e4 <finite>
 8009718:	2800      	cmp	r0, #0
 800971a:	d06b      	beq.n	80097f4 <pow+0x23c>
 800971c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f7f7 f97c 	bl	8000a20 <__aeabi_dcmpun>
 8009728:	f997 7000 	ldrsb.w	r7, [r7]
 800972c:	4b49      	ldr	r3, [pc, #292]	; (8009854 <pow+0x29c>)
 800972e:	b1a0      	cbz	r0, 800975a <pow+0x1a2>
 8009730:	2201      	movs	r2, #1
 8009732:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009736:	9b02      	ldr	r3, [sp, #8]
 8009738:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800973c:	930c      	str	r3, [sp, #48]	; 0x30
 800973e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009742:	2f00      	cmp	r7, #0
 8009744:	d0c9      	beq.n	80096da <pow+0x122>
 8009746:	4652      	mov	r2, sl
 8009748:	465b      	mov	r3, fp
 800974a:	4650      	mov	r0, sl
 800974c:	4659      	mov	r1, fp
 800974e:	f7f6 fff7 	bl	8000740 <__aeabi_ddiv>
 8009752:	2f02      	cmp	r7, #2
 8009754:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009758:	e7c7      	b.n	80096ea <pow+0x132>
 800975a:	2203      	movs	r2, #3
 800975c:	900c      	str	r0, [sp, #48]	; 0x30
 800975e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009762:	4620      	mov	r0, r4
 8009764:	4629      	mov	r1, r5
 8009766:	2200      	movs	r2, #0
 8009768:	4b3d      	ldr	r3, [pc, #244]	; (8009860 <pow+0x2a8>)
 800976a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800976e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009772:	f7f6 febb 	bl	80004ec <__aeabi_dmul>
 8009776:	4604      	mov	r4, r0
 8009778:	460d      	mov	r5, r1
 800977a:	bb17      	cbnz	r7, 80097c2 <pow+0x20a>
 800977c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009780:	4b38      	ldr	r3, [pc, #224]	; (8009864 <pow+0x2ac>)
 8009782:	4640      	mov	r0, r8
 8009784:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009788:	4649      	mov	r1, r9
 800978a:	4652      	mov	r2, sl
 800978c:	465b      	mov	r3, fp
 800978e:	f7f7 f91f 	bl	80009d0 <__aeabi_dcmplt>
 8009792:	2800      	cmp	r0, #0
 8009794:	d054      	beq.n	8009840 <pow+0x288>
 8009796:	4620      	mov	r0, r4
 8009798:	4629      	mov	r1, r5
 800979a:	f000 fe31 	bl	800a400 <rint>
 800979e:	4622      	mov	r2, r4
 80097a0:	462b      	mov	r3, r5
 80097a2:	f7f7 f90b 	bl	80009bc <__aeabi_dcmpeq>
 80097a6:	b920      	cbnz	r0, 80097b2 <pow+0x1fa>
 80097a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80097ac:	4b2e      	ldr	r3, [pc, #184]	; (8009868 <pow+0x2b0>)
 80097ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80097b2:	f996 3000 	ldrsb.w	r3, [r6]
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d142      	bne.n	8009840 <pow+0x288>
 80097ba:	f7ff f91d 	bl	80089f8 <__errno>
 80097be:	2322      	movs	r3, #34	; 0x22
 80097c0:	e797      	b.n	80096f2 <pow+0x13a>
 80097c2:	2200      	movs	r2, #0
 80097c4:	4b29      	ldr	r3, [pc, #164]	; (800986c <pow+0x2b4>)
 80097c6:	4640      	mov	r0, r8
 80097c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80097cc:	4649      	mov	r1, r9
 80097ce:	4652      	mov	r2, sl
 80097d0:	465b      	mov	r3, fp
 80097d2:	f7f7 f8fd 	bl	80009d0 <__aeabi_dcmplt>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d0eb      	beq.n	80097b2 <pow+0x1fa>
 80097da:	4620      	mov	r0, r4
 80097dc:	4629      	mov	r1, r5
 80097de:	f000 fe0f 	bl	800a400 <rint>
 80097e2:	4622      	mov	r2, r4
 80097e4:	462b      	mov	r3, r5
 80097e6:	f7f7 f8e9 	bl	80009bc <__aeabi_dcmpeq>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d1e1      	bne.n	80097b2 <pow+0x1fa>
 80097ee:	2200      	movs	r2, #0
 80097f0:	4b1a      	ldr	r3, [pc, #104]	; (800985c <pow+0x2a4>)
 80097f2:	e7dc      	b.n	80097ae <pow+0x1f6>
 80097f4:	2200      	movs	r2, #0
 80097f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097fa:	2300      	movs	r3, #0
 80097fc:	f7f7 f8de 	bl	80009bc <__aeabi_dcmpeq>
 8009800:	2800      	cmp	r0, #0
 8009802:	f43f af4b 	beq.w	800969c <pow+0xe4>
 8009806:	4640      	mov	r0, r8
 8009808:	4649      	mov	r1, r9
 800980a:	f000 fdeb 	bl	800a3e4 <finite>
 800980e:	2800      	cmp	r0, #0
 8009810:	f43f af44 	beq.w	800969c <pow+0xe4>
 8009814:	4620      	mov	r0, r4
 8009816:	4629      	mov	r1, r5
 8009818:	f000 fde4 	bl	800a3e4 <finite>
 800981c:	2800      	cmp	r0, #0
 800981e:	f43f af3d 	beq.w	800969c <pow+0xe4>
 8009822:	2304      	movs	r3, #4
 8009824:	9304      	str	r3, [sp, #16]
 8009826:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <pow+0x29c>)
 8009828:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800982c:	9305      	str	r3, [sp, #20]
 800982e:	2300      	movs	r3, #0
 8009830:	2400      	movs	r4, #0
 8009832:	930c      	str	r3, [sp, #48]	; 0x30
 8009834:	2300      	movs	r3, #0
 8009836:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800983a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800983e:	e7b8      	b.n	80097b2 <pow+0x1fa>
 8009840:	a804      	add	r0, sp, #16
 8009842:	f000 fdd5 	bl	800a3f0 <matherr>
 8009846:	2800      	cmp	r0, #0
 8009848:	f47f af1e 	bne.w	8009688 <pow+0xd0>
 800984c:	e7b5      	b.n	80097ba <pow+0x202>
 800984e:	bf00      	nop
 8009850:	20000360 	.word	0x20000360
 8009854:	0800afe6 	.word	0x0800afe6
 8009858:	3ff00000 	.word	0x3ff00000
 800985c:	fff00000 	.word	0xfff00000
 8009860:	3fe00000 	.word	0x3fe00000
 8009864:	47efffff 	.word	0x47efffff
 8009868:	c7efffff 	.word	0xc7efffff
 800986c:	7ff00000 	.word	0x7ff00000

08009870 <__ieee754_pow>:
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	b091      	sub	sp, #68	; 0x44
 8009876:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800987a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800987e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009882:	ea55 0302 	orrs.w	r3, r5, r2
 8009886:	4607      	mov	r7, r0
 8009888:	4688      	mov	r8, r1
 800988a:	f000 84b7 	beq.w	800a1fc <__ieee754_pow+0x98c>
 800988e:	4b80      	ldr	r3, [pc, #512]	; (8009a90 <__ieee754_pow+0x220>)
 8009890:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009894:	429c      	cmp	r4, r3
 8009896:	4689      	mov	r9, r1
 8009898:	4682      	mov	sl, r0
 800989a:	dc09      	bgt.n	80098b0 <__ieee754_pow+0x40>
 800989c:	d103      	bne.n	80098a6 <__ieee754_pow+0x36>
 800989e:	b938      	cbnz	r0, 80098b0 <__ieee754_pow+0x40>
 80098a0:	42a5      	cmp	r5, r4
 80098a2:	dc0d      	bgt.n	80098c0 <__ieee754_pow+0x50>
 80098a4:	e001      	b.n	80098aa <__ieee754_pow+0x3a>
 80098a6:	429d      	cmp	r5, r3
 80098a8:	dc02      	bgt.n	80098b0 <__ieee754_pow+0x40>
 80098aa:	429d      	cmp	r5, r3
 80098ac:	d10e      	bne.n	80098cc <__ieee754_pow+0x5c>
 80098ae:	b16a      	cbz	r2, 80098cc <__ieee754_pow+0x5c>
 80098b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80098b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80098b8:	ea54 030a 	orrs.w	r3, r4, sl
 80098bc:	f000 849e 	beq.w	800a1fc <__ieee754_pow+0x98c>
 80098c0:	4874      	ldr	r0, [pc, #464]	; (8009a94 <__ieee754_pow+0x224>)
 80098c2:	b011      	add	sp, #68	; 0x44
 80098c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	f000 bd94 	b.w	800a3f4 <nan>
 80098cc:	f1b9 0f00 	cmp.w	r9, #0
 80098d0:	da53      	bge.n	800997a <__ieee754_pow+0x10a>
 80098d2:	4b71      	ldr	r3, [pc, #452]	; (8009a98 <__ieee754_pow+0x228>)
 80098d4:	429d      	cmp	r5, r3
 80098d6:	dc4e      	bgt.n	8009976 <__ieee754_pow+0x106>
 80098d8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80098dc:	429d      	cmp	r5, r3
 80098de:	dd4c      	ble.n	800997a <__ieee754_pow+0x10a>
 80098e0:	152b      	asrs	r3, r5, #20
 80098e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098e6:	2b14      	cmp	r3, #20
 80098e8:	dd28      	ble.n	800993c <__ieee754_pow+0xcc>
 80098ea:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80098ee:	fa22 f103 	lsr.w	r1, r2, r3
 80098f2:	fa01 f303 	lsl.w	r3, r1, r3
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d13f      	bne.n	800997a <__ieee754_pow+0x10a>
 80098fa:	f001 0101 	and.w	r1, r1, #1
 80098fe:	f1c1 0302 	rsb	r3, r1, #2
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	2a00      	cmp	r2, #0
 8009906:	d15c      	bne.n	80099c2 <__ieee754_pow+0x152>
 8009908:	4b61      	ldr	r3, [pc, #388]	; (8009a90 <__ieee754_pow+0x220>)
 800990a:	429d      	cmp	r5, r3
 800990c:	d126      	bne.n	800995c <__ieee754_pow+0xec>
 800990e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009912:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009916:	ea53 030a 	orrs.w	r3, r3, sl
 800991a:	f000 846f 	beq.w	800a1fc <__ieee754_pow+0x98c>
 800991e:	4b5f      	ldr	r3, [pc, #380]	; (8009a9c <__ieee754_pow+0x22c>)
 8009920:	429c      	cmp	r4, r3
 8009922:	dd2c      	ble.n	800997e <__ieee754_pow+0x10e>
 8009924:	2e00      	cmp	r6, #0
 8009926:	f280 846f 	bge.w	800a208 <__ieee754_pow+0x998>
 800992a:	f04f 0b00 	mov.w	fp, #0
 800992e:	f04f 0c00 	mov.w	ip, #0
 8009932:	4658      	mov	r0, fp
 8009934:	4661      	mov	r1, ip
 8009936:	b011      	add	sp, #68	; 0x44
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	2a00      	cmp	r2, #0
 800993e:	d13e      	bne.n	80099be <__ieee754_pow+0x14e>
 8009940:	f1c3 0314 	rsb	r3, r3, #20
 8009944:	fa45 f103 	asr.w	r1, r5, r3
 8009948:	fa01 f303 	lsl.w	r3, r1, r3
 800994c:	42ab      	cmp	r3, r5
 800994e:	f040 8463 	bne.w	800a218 <__ieee754_pow+0x9a8>
 8009952:	f001 0101 	and.w	r1, r1, #1
 8009956:	f1c1 0302 	rsb	r3, r1, #2
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	4b50      	ldr	r3, [pc, #320]	; (8009aa0 <__ieee754_pow+0x230>)
 800995e:	429d      	cmp	r5, r3
 8009960:	d114      	bne.n	800998c <__ieee754_pow+0x11c>
 8009962:	2e00      	cmp	r6, #0
 8009964:	f280 8454 	bge.w	800a210 <__ieee754_pow+0x9a0>
 8009968:	463a      	mov	r2, r7
 800996a:	4643      	mov	r3, r8
 800996c:	2000      	movs	r0, #0
 800996e:	494c      	ldr	r1, [pc, #304]	; (8009aa0 <__ieee754_pow+0x230>)
 8009970:	f7f6 fee6 	bl	8000740 <__aeabi_ddiv>
 8009974:	e013      	b.n	800999e <__ieee754_pow+0x12e>
 8009976:	2302      	movs	r3, #2
 8009978:	e7c3      	b.n	8009902 <__ieee754_pow+0x92>
 800997a:	2300      	movs	r3, #0
 800997c:	e7c1      	b.n	8009902 <__ieee754_pow+0x92>
 800997e:	2e00      	cmp	r6, #0
 8009980:	dad3      	bge.n	800992a <__ieee754_pow+0xba>
 8009982:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009986:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800998a:	e7d2      	b.n	8009932 <__ieee754_pow+0xc2>
 800998c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8009990:	d108      	bne.n	80099a4 <__ieee754_pow+0x134>
 8009992:	463a      	mov	r2, r7
 8009994:	4643      	mov	r3, r8
 8009996:	4638      	mov	r0, r7
 8009998:	4641      	mov	r1, r8
 800999a:	f7f6 fda7 	bl	80004ec <__aeabi_dmul>
 800999e:	4683      	mov	fp, r0
 80099a0:	468c      	mov	ip, r1
 80099a2:	e7c6      	b.n	8009932 <__ieee754_pow+0xc2>
 80099a4:	4b3f      	ldr	r3, [pc, #252]	; (8009aa4 <__ieee754_pow+0x234>)
 80099a6:	429e      	cmp	r6, r3
 80099a8:	d10b      	bne.n	80099c2 <__ieee754_pow+0x152>
 80099aa:	f1b9 0f00 	cmp.w	r9, #0
 80099ae:	db08      	blt.n	80099c2 <__ieee754_pow+0x152>
 80099b0:	4638      	mov	r0, r7
 80099b2:	4641      	mov	r1, r8
 80099b4:	b011      	add	sp, #68	; 0x44
 80099b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ba:	f000 bc63 	b.w	800a284 <__ieee754_sqrt>
 80099be:	2300      	movs	r3, #0
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	4638      	mov	r0, r7
 80099c4:	4641      	mov	r1, r8
 80099c6:	f000 fd09 	bl	800a3dc <fabs>
 80099ca:	4683      	mov	fp, r0
 80099cc:	468c      	mov	ip, r1
 80099ce:	f1ba 0f00 	cmp.w	sl, #0
 80099d2:	d12b      	bne.n	8009a2c <__ieee754_pow+0x1bc>
 80099d4:	b124      	cbz	r4, 80099e0 <__ieee754_pow+0x170>
 80099d6:	4b32      	ldr	r3, [pc, #200]	; (8009aa0 <__ieee754_pow+0x230>)
 80099d8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80099dc:	429a      	cmp	r2, r3
 80099de:	d125      	bne.n	8009a2c <__ieee754_pow+0x1bc>
 80099e0:	2e00      	cmp	r6, #0
 80099e2:	da07      	bge.n	80099f4 <__ieee754_pow+0x184>
 80099e4:	465a      	mov	r2, fp
 80099e6:	4663      	mov	r3, ip
 80099e8:	2000      	movs	r0, #0
 80099ea:	492d      	ldr	r1, [pc, #180]	; (8009aa0 <__ieee754_pow+0x230>)
 80099ec:	f7f6 fea8 	bl	8000740 <__aeabi_ddiv>
 80099f0:	4683      	mov	fp, r0
 80099f2:	468c      	mov	ip, r1
 80099f4:	f1b9 0f00 	cmp.w	r9, #0
 80099f8:	da9b      	bge.n	8009932 <__ieee754_pow+0xc2>
 80099fa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80099fe:	9b00      	ldr	r3, [sp, #0]
 8009a00:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009a04:	4323      	orrs	r3, r4
 8009a06:	d108      	bne.n	8009a1a <__ieee754_pow+0x1aa>
 8009a08:	465a      	mov	r2, fp
 8009a0a:	4663      	mov	r3, ip
 8009a0c:	4658      	mov	r0, fp
 8009a0e:	4661      	mov	r1, ip
 8009a10:	f7f6 fbb4 	bl	800017c <__aeabi_dsub>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	e7aa      	b.n	8009970 <__ieee754_pow+0x100>
 8009a1a:	9b00      	ldr	r3, [sp, #0]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d188      	bne.n	8009932 <__ieee754_pow+0xc2>
 8009a20:	4658      	mov	r0, fp
 8009a22:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009a26:	4683      	mov	fp, r0
 8009a28:	469c      	mov	ip, r3
 8009a2a:	e782      	b.n	8009932 <__ieee754_pow+0xc2>
 8009a2c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8009a30:	f109 33ff 	add.w	r3, r9, #4294967295
 8009a34:	930d      	str	r3, [sp, #52]	; 0x34
 8009a36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a38:	9b00      	ldr	r3, [sp, #0]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	d104      	bne.n	8009a48 <__ieee754_pow+0x1d8>
 8009a3e:	463a      	mov	r2, r7
 8009a40:	4643      	mov	r3, r8
 8009a42:	4638      	mov	r0, r7
 8009a44:	4641      	mov	r1, r8
 8009a46:	e7e3      	b.n	8009a10 <__ieee754_pow+0x1a0>
 8009a48:	4b17      	ldr	r3, [pc, #92]	; (8009aa8 <__ieee754_pow+0x238>)
 8009a4a:	429d      	cmp	r5, r3
 8009a4c:	f340 80fe 	ble.w	8009c4c <__ieee754_pow+0x3dc>
 8009a50:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009a54:	429d      	cmp	r5, r3
 8009a56:	dd0b      	ble.n	8009a70 <__ieee754_pow+0x200>
 8009a58:	4b10      	ldr	r3, [pc, #64]	; (8009a9c <__ieee754_pow+0x22c>)
 8009a5a:	429c      	cmp	r4, r3
 8009a5c:	dc0e      	bgt.n	8009a7c <__ieee754_pow+0x20c>
 8009a5e:	2e00      	cmp	r6, #0
 8009a60:	f6bf af63 	bge.w	800992a <__ieee754_pow+0xba>
 8009a64:	a308      	add	r3, pc, #32	; (adr r3, 8009a88 <__ieee754_pow+0x218>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	e794      	b.n	800999a <__ieee754_pow+0x12a>
 8009a70:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <__ieee754_pow+0x23c>)
 8009a72:	429c      	cmp	r4, r3
 8009a74:	ddf3      	ble.n	8009a5e <__ieee754_pow+0x1ee>
 8009a76:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <__ieee754_pow+0x230>)
 8009a78:	429c      	cmp	r4, r3
 8009a7a:	dd19      	ble.n	8009ab0 <__ieee754_pow+0x240>
 8009a7c:	2e00      	cmp	r6, #0
 8009a7e:	dcf1      	bgt.n	8009a64 <__ieee754_pow+0x1f4>
 8009a80:	e753      	b.n	800992a <__ieee754_pow+0xba>
 8009a82:	bf00      	nop
 8009a84:	f3af 8000 	nop.w
 8009a88:	8800759c 	.word	0x8800759c
 8009a8c:	7e37e43c 	.word	0x7e37e43c
 8009a90:	7ff00000 	.word	0x7ff00000
 8009a94:	0800a7de 	.word	0x0800a7de
 8009a98:	433fffff 	.word	0x433fffff
 8009a9c:	3fefffff 	.word	0x3fefffff
 8009aa0:	3ff00000 	.word	0x3ff00000
 8009aa4:	3fe00000 	.word	0x3fe00000
 8009aa8:	41e00000 	.word	0x41e00000
 8009aac:	3feffffe 	.word	0x3feffffe
 8009ab0:	4661      	mov	r1, ip
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4b60      	ldr	r3, [pc, #384]	; (8009c38 <__ieee754_pow+0x3c8>)
 8009ab6:	4658      	mov	r0, fp
 8009ab8:	f7f6 fb60 	bl	800017c <__aeabi_dsub>
 8009abc:	a354      	add	r3, pc, #336	; (adr r3, 8009c10 <__ieee754_pow+0x3a0>)
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	460d      	mov	r5, r1
 8009ac6:	f7f6 fd11 	bl	80004ec <__aeabi_dmul>
 8009aca:	a353      	add	r3, pc, #332	; (adr r3, 8009c18 <__ieee754_pow+0x3a8>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	460f      	mov	r7, r1
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f7f6 fd08 	bl	80004ec <__aeabi_dmul>
 8009adc:	2200      	movs	r2, #0
 8009ade:	4682      	mov	sl, r0
 8009ae0:	468b      	mov	fp, r1
 8009ae2:	4b56      	ldr	r3, [pc, #344]	; (8009c3c <__ieee754_pow+0x3cc>)
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	f7f6 fd00 	bl	80004ec <__aeabi_dmul>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	a14b      	add	r1, pc, #300	; (adr r1, 8009c20 <__ieee754_pow+0x3b0>)
 8009af2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009af6:	f7f6 fb41 	bl	800017c <__aeabi_dsub>
 8009afa:	4622      	mov	r2, r4
 8009afc:	462b      	mov	r3, r5
 8009afe:	f7f6 fcf5 	bl	80004ec <__aeabi_dmul>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	2000      	movs	r0, #0
 8009b08:	494d      	ldr	r1, [pc, #308]	; (8009c40 <__ieee754_pow+0x3d0>)
 8009b0a:	f7f6 fb37 	bl	800017c <__aeabi_dsub>
 8009b0e:	4622      	mov	r2, r4
 8009b10:	462b      	mov	r3, r5
 8009b12:	4680      	mov	r8, r0
 8009b14:	4689      	mov	r9, r1
 8009b16:	4620      	mov	r0, r4
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7f6 fce7 	bl	80004ec <__aeabi_dmul>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4640      	mov	r0, r8
 8009b24:	4649      	mov	r1, r9
 8009b26:	f7f6 fce1 	bl	80004ec <__aeabi_dmul>
 8009b2a:	a33f      	add	r3, pc, #252	; (adr r3, 8009c28 <__ieee754_pow+0x3b8>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fcdc 	bl	80004ec <__aeabi_dmul>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4650      	mov	r0, sl
 8009b3a:	4659      	mov	r1, fp
 8009b3c:	f7f6 fb1e 	bl	800017c <__aeabi_dsub>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	4604      	mov	r4, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	4630      	mov	r0, r6
 8009b4a:	4639      	mov	r1, r7
 8009b4c:	f7f6 fb18 	bl	8000180 <__adddf3>
 8009b50:	2000      	movs	r0, #0
 8009b52:	468b      	mov	fp, r1
 8009b54:	4682      	mov	sl, r0
 8009b56:	4632      	mov	r2, r6
 8009b58:	463b      	mov	r3, r7
 8009b5a:	f7f6 fb0f 	bl	800017c <__aeabi_dsub>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4620      	mov	r0, r4
 8009b64:	4629      	mov	r1, r5
 8009b66:	f7f6 fb09 	bl	800017c <__aeabi_dsub>
 8009b6a:	9b00      	ldr	r3, [sp, #0]
 8009b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	4313      	orrs	r3, r2
 8009b72:	f04f 0300 	mov.w	r3, #0
 8009b76:	bf0c      	ite	eq
 8009b78:	4c32      	ldreq	r4, [pc, #200]	; (8009c44 <__ieee754_pow+0x3d4>)
 8009b7a:	4c2f      	ldrne	r4, [pc, #188]	; (8009c38 <__ieee754_pow+0x3c8>)
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	e9cd 3400 	strd	r3, r4, [sp]
 8009b82:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b86:	2400      	movs	r4, #0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b8e:	4622      	mov	r2, r4
 8009b90:	462b      	mov	r3, r5
 8009b92:	f7f6 faf3 	bl	800017c <__aeabi_dsub>
 8009b96:	4652      	mov	r2, sl
 8009b98:	465b      	mov	r3, fp
 8009b9a:	f7f6 fca7 	bl	80004ec <__aeabi_dmul>
 8009b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ba2:	4680      	mov	r8, r0
 8009ba4:	4689      	mov	r9, r1
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	4639      	mov	r1, r7
 8009baa:	f7f6 fc9f 	bl	80004ec <__aeabi_dmul>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	f7f6 fae3 	bl	8000180 <__adddf3>
 8009bba:	4622      	mov	r2, r4
 8009bbc:	462b      	mov	r3, r5
 8009bbe:	4680      	mov	r8, r0
 8009bc0:	4689      	mov	r9, r1
 8009bc2:	4650      	mov	r0, sl
 8009bc4:	4659      	mov	r1, fp
 8009bc6:	f7f6 fc91 	bl	80004ec <__aeabi_dmul>
 8009bca:	4604      	mov	r4, r0
 8009bcc:	460d      	mov	r5, r1
 8009bce:	460b      	mov	r3, r1
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009bda:	f7f6 fad1 	bl	8000180 <__adddf3>
 8009bde:	4b1a      	ldr	r3, [pc, #104]	; (8009c48 <__ieee754_pow+0x3d8>)
 8009be0:	4682      	mov	sl, r0
 8009be2:	4299      	cmp	r1, r3
 8009be4:	460f      	mov	r7, r1
 8009be6:	460e      	mov	r6, r1
 8009be8:	f340 82e1 	ble.w	800a1ae <__ieee754_pow+0x93e>
 8009bec:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009bf0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009bf4:	4303      	orrs	r3, r0
 8009bf6:	f000 81db 	beq.w	8009fb0 <__ieee754_pow+0x740>
 8009bfa:	a30d      	add	r3, pc, #52	; (adr r3, 8009c30 <__ieee754_pow+0x3c0>)
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c04:	f7f6 fc72 	bl	80004ec <__aeabi_dmul>
 8009c08:	a309      	add	r3, pc, #36	; (adr r3, 8009c30 <__ieee754_pow+0x3c0>)
 8009c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0e:	e6c4      	b.n	800999a <__ieee754_pow+0x12a>
 8009c10:	60000000 	.word	0x60000000
 8009c14:	3ff71547 	.word	0x3ff71547
 8009c18:	f85ddf44 	.word	0xf85ddf44
 8009c1c:	3e54ae0b 	.word	0x3e54ae0b
 8009c20:	55555555 	.word	0x55555555
 8009c24:	3fd55555 	.word	0x3fd55555
 8009c28:	652b82fe 	.word	0x652b82fe
 8009c2c:	3ff71547 	.word	0x3ff71547
 8009c30:	8800759c 	.word	0x8800759c
 8009c34:	7e37e43c 	.word	0x7e37e43c
 8009c38:	3ff00000 	.word	0x3ff00000
 8009c3c:	3fd00000 	.word	0x3fd00000
 8009c40:	3fe00000 	.word	0x3fe00000
 8009c44:	bff00000 	.word	0xbff00000
 8009c48:	408fffff 	.word	0x408fffff
 8009c4c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009c50:	f04f 0200 	mov.w	r2, #0
 8009c54:	da08      	bge.n	8009c68 <__ieee754_pow+0x3f8>
 8009c56:	4658      	mov	r0, fp
 8009c58:	4bcd      	ldr	r3, [pc, #820]	; (8009f90 <__ieee754_pow+0x720>)
 8009c5a:	4661      	mov	r1, ip
 8009c5c:	f7f6 fc46 	bl	80004ec <__aeabi_dmul>
 8009c60:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009c64:	4683      	mov	fp, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	1523      	asrs	r3, r4, #20
 8009c6a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c6e:	4413      	add	r3, r2
 8009c70:	930c      	str	r3, [sp, #48]	; 0x30
 8009c72:	4bc8      	ldr	r3, [pc, #800]	; (8009f94 <__ieee754_pow+0x724>)
 8009c74:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009c78:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009c7c:	429c      	cmp	r4, r3
 8009c7e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009c82:	dd08      	ble.n	8009c96 <__ieee754_pow+0x426>
 8009c84:	4bc4      	ldr	r3, [pc, #784]	; (8009f98 <__ieee754_pow+0x728>)
 8009c86:	429c      	cmp	r4, r3
 8009c88:	f340 815b 	ble.w	8009f42 <__ieee754_pow+0x6d2>
 8009c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009c92:	3301      	adds	r3, #1
 8009c94:	930c      	str	r3, [sp, #48]	; 0x30
 8009c96:	f04f 0800 	mov.w	r8, #0
 8009c9a:	4658      	mov	r0, fp
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4bbf      	ldr	r3, [pc, #764]	; (8009f9c <__ieee754_pow+0x72c>)
 8009ca0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8009ca4:	444b      	add	r3, r9
 8009ca6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009caa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	4623      	mov	r3, r4
 8009cb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009cb6:	f7f6 fa61 	bl	800017c <__aeabi_dsub>
 8009cba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	460f      	mov	r7, r1
 8009cc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cc6:	f7f6 fa5b 	bl	8000180 <__adddf3>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	2000      	movs	r0, #0
 8009cd0:	49b3      	ldr	r1, [pc, #716]	; (8009fa0 <__ieee754_pow+0x730>)
 8009cd2:	f7f6 fd35 	bl	8000740 <__aeabi_ddiv>
 8009cd6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4630      	mov	r0, r6
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	f7f6 fc03 	bl	80004ec <__aeabi_dmul>
 8009ce6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cea:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009cee:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	106d      	asrs	r5, r5, #1
 8009cf8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009cfc:	9304      	str	r3, [sp, #16]
 8009cfe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009d02:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009d06:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8009d0a:	4650      	mov	r0, sl
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	4614      	mov	r4, r2
 8009d10:	461d      	mov	r5, r3
 8009d12:	f7f6 fbeb 	bl	80004ec <__aeabi_dmul>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	4639      	mov	r1, r7
 8009d1e:	f7f6 fa2d 	bl	800017c <__aeabi_dsub>
 8009d22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d26:	4606      	mov	r6, r0
 8009d28:	460f      	mov	r7, r1
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	f7f6 fa25 	bl	800017c <__aeabi_dsub>
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d3a:	f7f6 fa1f 	bl	800017c <__aeabi_dsub>
 8009d3e:	4652      	mov	r2, sl
 8009d40:	465b      	mov	r3, fp
 8009d42:	f7f6 fbd3 	bl	80004ec <__aeabi_dmul>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	4639      	mov	r1, r7
 8009d4e:	f7f6 fa15 	bl	800017c <__aeabi_dsub>
 8009d52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d56:	f7f6 fbc9 	bl	80004ec <__aeabi_dmul>
 8009d5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d62:	4610      	mov	r0, r2
 8009d64:	4619      	mov	r1, r3
 8009d66:	f7f6 fbc1 	bl	80004ec <__aeabi_dmul>
 8009d6a:	a377      	add	r3, pc, #476	; (adr r3, 8009f48 <__ieee754_pow+0x6d8>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	4604      	mov	r4, r0
 8009d72:	460d      	mov	r5, r1
 8009d74:	f7f6 fbba 	bl	80004ec <__aeabi_dmul>
 8009d78:	a375      	add	r3, pc, #468	; (adr r3, 8009f50 <__ieee754_pow+0x6e0>)
 8009d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7e:	f7f6 f9ff 	bl	8000180 <__adddf3>
 8009d82:	4622      	mov	r2, r4
 8009d84:	462b      	mov	r3, r5
 8009d86:	f7f6 fbb1 	bl	80004ec <__aeabi_dmul>
 8009d8a:	a373      	add	r3, pc, #460	; (adr r3, 8009f58 <__ieee754_pow+0x6e8>)
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	f7f6 f9f6 	bl	8000180 <__adddf3>
 8009d94:	4622      	mov	r2, r4
 8009d96:	462b      	mov	r3, r5
 8009d98:	f7f6 fba8 	bl	80004ec <__aeabi_dmul>
 8009d9c:	a370      	add	r3, pc, #448	; (adr r3, 8009f60 <__ieee754_pow+0x6f0>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f7f6 f9ed 	bl	8000180 <__adddf3>
 8009da6:	4622      	mov	r2, r4
 8009da8:	462b      	mov	r3, r5
 8009daa:	f7f6 fb9f 	bl	80004ec <__aeabi_dmul>
 8009dae:	a36e      	add	r3, pc, #440	; (adr r3, 8009f68 <__ieee754_pow+0x6f8>)
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	f7f6 f9e4 	bl	8000180 <__adddf3>
 8009db8:	4622      	mov	r2, r4
 8009dba:	462b      	mov	r3, r5
 8009dbc:	f7f6 fb96 	bl	80004ec <__aeabi_dmul>
 8009dc0:	a36b      	add	r3, pc, #428	; (adr r3, 8009f70 <__ieee754_pow+0x700>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f7f6 f9db 	bl	8000180 <__adddf3>
 8009dca:	4622      	mov	r2, r4
 8009dcc:	4606      	mov	r6, r0
 8009dce:	460f      	mov	r7, r1
 8009dd0:	462b      	mov	r3, r5
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	f7f6 fb89 	bl	80004ec <__aeabi_dmul>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4630      	mov	r0, r6
 8009de0:	4639      	mov	r1, r7
 8009de2:	f7f6 fb83 	bl	80004ec <__aeabi_dmul>
 8009de6:	4604      	mov	r4, r0
 8009de8:	460d      	mov	r5, r1
 8009dea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dee:	4652      	mov	r2, sl
 8009df0:	465b      	mov	r3, fp
 8009df2:	f7f6 f9c5 	bl	8000180 <__adddf3>
 8009df6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009dfa:	f7f6 fb77 	bl	80004ec <__aeabi_dmul>
 8009dfe:	4622      	mov	r2, r4
 8009e00:	462b      	mov	r3, r5
 8009e02:	f7f6 f9bd 	bl	8000180 <__adddf3>
 8009e06:	4652      	mov	r2, sl
 8009e08:	4606      	mov	r6, r0
 8009e0a:	460f      	mov	r7, r1
 8009e0c:	465b      	mov	r3, fp
 8009e0e:	4650      	mov	r0, sl
 8009e10:	4659      	mov	r1, fp
 8009e12:	f7f6 fb6b 	bl	80004ec <__aeabi_dmul>
 8009e16:	2200      	movs	r2, #0
 8009e18:	4b62      	ldr	r3, [pc, #392]	; (8009fa4 <__ieee754_pow+0x734>)
 8009e1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009e1e:	f7f6 f9af 	bl	8000180 <__adddf3>
 8009e22:	4632      	mov	r2, r6
 8009e24:	463b      	mov	r3, r7
 8009e26:	f7f6 f9ab 	bl	8000180 <__adddf3>
 8009e2a:	9804      	ldr	r0, [sp, #16]
 8009e2c:	460d      	mov	r5, r1
 8009e2e:	4604      	mov	r4, r0
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4650      	mov	r0, sl
 8009e36:	4659      	mov	r1, fp
 8009e38:	f7f6 fb58 	bl	80004ec <__aeabi_dmul>
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	4682      	mov	sl, r0
 8009e40:	468b      	mov	fp, r1
 8009e42:	4b58      	ldr	r3, [pc, #352]	; (8009fa4 <__ieee754_pow+0x734>)
 8009e44:	4620      	mov	r0, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	f7f6 f998 	bl	800017c <__aeabi_dsub>
 8009e4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e50:	f7f6 f994 	bl	800017c <__aeabi_dsub>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4630      	mov	r0, r6
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	f7f6 f98e 	bl	800017c <__aeabi_dsub>
 8009e60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e64:	f7f6 fb42 	bl	80004ec <__aeabi_dmul>
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e72:	462b      	mov	r3, r5
 8009e74:	f7f6 fb3a 	bl	80004ec <__aeabi_dmul>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	4639      	mov	r1, r7
 8009e80:	f7f6 f97e 	bl	8000180 <__adddf3>
 8009e84:	4606      	mov	r6, r0
 8009e86:	460f      	mov	r7, r1
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4650      	mov	r0, sl
 8009e8e:	4659      	mov	r1, fp
 8009e90:	f7f6 f976 	bl	8000180 <__adddf3>
 8009e94:	a338      	add	r3, pc, #224	; (adr r3, 8009f78 <__ieee754_pow+0x708>)
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	9804      	ldr	r0, [sp, #16]
 8009e9c:	460d      	mov	r5, r1
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	f7f6 fb24 	bl	80004ec <__aeabi_dmul>
 8009ea4:	4652      	mov	r2, sl
 8009ea6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009eaa:	465b      	mov	r3, fp
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7f6 f964 	bl	800017c <__aeabi_dsub>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4630      	mov	r0, r6
 8009eba:	4639      	mov	r1, r7
 8009ebc:	f7f6 f95e 	bl	800017c <__aeabi_dsub>
 8009ec0:	a32f      	add	r3, pc, #188	; (adr r3, 8009f80 <__ieee754_pow+0x710>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	f7f6 fb11 	bl	80004ec <__aeabi_dmul>
 8009eca:	a32f      	add	r3, pc, #188	; (adr r3, 8009f88 <__ieee754_pow+0x718>)
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	f7f6 fb08 	bl	80004ec <__aeabi_dmul>
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	4639      	mov	r1, r7
 8009ee4:	f7f6 f94c 	bl	8000180 <__adddf3>
 8009ee8:	4b2f      	ldr	r3, [pc, #188]	; (8009fa8 <__ieee754_pow+0x738>)
 8009eea:	444b      	add	r3, r9
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	f7f6 f946 	bl	8000180 <__adddf3>
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009ef8:	460d      	mov	r5, r1
 8009efa:	f7f6 fa8d 	bl	8000418 <__aeabi_i2d>
 8009efe:	4606      	mov	r6, r0
 8009f00:	460f      	mov	r7, r1
 8009f02:	4b2a      	ldr	r3, [pc, #168]	; (8009fac <__ieee754_pow+0x73c>)
 8009f04:	4622      	mov	r2, r4
 8009f06:	444b      	add	r3, r9
 8009f08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f0c:	462b      	mov	r3, r5
 8009f0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f12:	f7f6 f935 	bl	8000180 <__adddf3>
 8009f16:	4642      	mov	r2, r8
 8009f18:	464b      	mov	r3, r9
 8009f1a:	f7f6 f931 	bl	8000180 <__adddf3>
 8009f1e:	4632      	mov	r2, r6
 8009f20:	463b      	mov	r3, r7
 8009f22:	f7f6 f92d 	bl	8000180 <__adddf3>
 8009f26:	9804      	ldr	r0, [sp, #16]
 8009f28:	4632      	mov	r2, r6
 8009f2a:	463b      	mov	r3, r7
 8009f2c:	4682      	mov	sl, r0
 8009f2e:	468b      	mov	fp, r1
 8009f30:	f7f6 f924 	bl	800017c <__aeabi_dsub>
 8009f34:	4642      	mov	r2, r8
 8009f36:	464b      	mov	r3, r9
 8009f38:	f7f6 f920 	bl	800017c <__aeabi_dsub>
 8009f3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f40:	e60b      	b.n	8009b5a <__ieee754_pow+0x2ea>
 8009f42:	f04f 0801 	mov.w	r8, #1
 8009f46:	e6a8      	b.n	8009c9a <__ieee754_pow+0x42a>
 8009f48:	4a454eef 	.word	0x4a454eef
 8009f4c:	3fca7e28 	.word	0x3fca7e28
 8009f50:	93c9db65 	.word	0x93c9db65
 8009f54:	3fcd864a 	.word	0x3fcd864a
 8009f58:	a91d4101 	.word	0xa91d4101
 8009f5c:	3fd17460 	.word	0x3fd17460
 8009f60:	518f264d 	.word	0x518f264d
 8009f64:	3fd55555 	.word	0x3fd55555
 8009f68:	db6fabff 	.word	0xdb6fabff
 8009f6c:	3fdb6db6 	.word	0x3fdb6db6
 8009f70:	33333303 	.word	0x33333303
 8009f74:	3fe33333 	.word	0x3fe33333
 8009f78:	e0000000 	.word	0xe0000000
 8009f7c:	3feec709 	.word	0x3feec709
 8009f80:	dc3a03fd 	.word	0xdc3a03fd
 8009f84:	3feec709 	.word	0x3feec709
 8009f88:	145b01f5 	.word	0x145b01f5
 8009f8c:	be3e2fe0 	.word	0xbe3e2fe0
 8009f90:	43400000 	.word	0x43400000
 8009f94:	0003988e 	.word	0x0003988e
 8009f98:	000bb679 	.word	0x000bb679
 8009f9c:	0800aff0 	.word	0x0800aff0
 8009fa0:	3ff00000 	.word	0x3ff00000
 8009fa4:	40080000 	.word	0x40080000
 8009fa8:	0800b010 	.word	0x0800b010
 8009fac:	0800b000 	.word	0x0800b000
 8009fb0:	a39b      	add	r3, pc, #620	; (adr r3, 800a220 <__ieee754_pow+0x9b0>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	4640      	mov	r0, r8
 8009fb8:	4649      	mov	r1, r9
 8009fba:	f7f6 f8e1 	bl	8000180 <__adddf3>
 8009fbe:	4622      	mov	r2, r4
 8009fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fc4:	462b      	mov	r3, r5
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	4639      	mov	r1, r7
 8009fca:	f7f6 f8d7 	bl	800017c <__aeabi_dsub>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fd6:	f7f6 fd19 	bl	8000a0c <__aeabi_dcmpgt>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	f47f ae0d 	bne.w	8009bfa <__ieee754_pow+0x38a>
 8009fe0:	4aa3      	ldr	r2, [pc, #652]	; (800a270 <__ieee754_pow+0xa00>)
 8009fe2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	f340 8103 	ble.w	800a1f2 <__ieee754_pow+0x982>
 8009fec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	151b      	asrs	r3, r3, #20
 8009ff4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009ff8:	fa4a f303 	asr.w	r3, sl, r3
 8009ffc:	4433      	add	r3, r6
 8009ffe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a002:	4f9c      	ldr	r7, [pc, #624]	; (800a274 <__ieee754_pow+0xa04>)
 800a004:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a008:	4117      	asrs	r7, r2
 800a00a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a00e:	ea23 0107 	bic.w	r1, r3, r7
 800a012:	f1c2 0214 	rsb	r2, r2, #20
 800a016:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a01a:	fa4a fa02 	asr.w	sl, sl, r2
 800a01e:	2e00      	cmp	r6, #0
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4620      	mov	r0, r4
 800a026:	4629      	mov	r1, r5
 800a028:	bfb8      	it	lt
 800a02a:	f1ca 0a00 	rsblt	sl, sl, #0
 800a02e:	f7f6 f8a5 	bl	800017c <__aeabi_dsub>
 800a032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a03a:	4642      	mov	r2, r8
 800a03c:	464b      	mov	r3, r9
 800a03e:	f7f6 f89f 	bl	8000180 <__adddf3>
 800a042:	a379      	add	r3, pc, #484	; (adr r3, 800a228 <__ieee754_pow+0x9b8>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	2000      	movs	r0, #0
 800a04a:	460d      	mov	r5, r1
 800a04c:	4604      	mov	r4, r0
 800a04e:	f7f6 fa4d 	bl	80004ec <__aeabi_dmul>
 800a052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a056:	4606      	mov	r6, r0
 800a058:	460f      	mov	r7, r1
 800a05a:	4620      	mov	r0, r4
 800a05c:	4629      	mov	r1, r5
 800a05e:	f7f6 f88d 	bl	800017c <__aeabi_dsub>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	4640      	mov	r0, r8
 800a068:	4649      	mov	r1, r9
 800a06a:	f7f6 f887 	bl	800017c <__aeabi_dsub>
 800a06e:	a370      	add	r3, pc, #448	; (adr r3, 800a230 <__ieee754_pow+0x9c0>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	f7f6 fa3a 	bl	80004ec <__aeabi_dmul>
 800a078:	a36f      	add	r3, pc, #444	; (adr r3, 800a238 <__ieee754_pow+0x9c8>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	4680      	mov	r8, r0
 800a080:	4689      	mov	r9, r1
 800a082:	4620      	mov	r0, r4
 800a084:	4629      	mov	r1, r5
 800a086:	f7f6 fa31 	bl	80004ec <__aeabi_dmul>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4640      	mov	r0, r8
 800a090:	4649      	mov	r1, r9
 800a092:	f7f6 f875 	bl	8000180 <__adddf3>
 800a096:	4604      	mov	r4, r0
 800a098:	460d      	mov	r5, r1
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4630      	mov	r0, r6
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	f7f6 f86d 	bl	8000180 <__adddf3>
 800a0a6:	4632      	mov	r2, r6
 800a0a8:	463b      	mov	r3, r7
 800a0aa:	4680      	mov	r8, r0
 800a0ac:	4689      	mov	r9, r1
 800a0ae:	f7f6 f865 	bl	800017c <__aeabi_dsub>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	f7f6 f85f 	bl	800017c <__aeabi_dsub>
 800a0be:	4642      	mov	r2, r8
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	460f      	mov	r7, r1
 800a0c4:	464b      	mov	r3, r9
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	f7f6 fa0f 	bl	80004ec <__aeabi_dmul>
 800a0ce:	a35c      	add	r3, pc, #368	; (adr r3, 800a240 <__ieee754_pow+0x9d0>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	f7f6 fa08 	bl	80004ec <__aeabi_dmul>
 800a0dc:	a35a      	add	r3, pc, #360	; (adr r3, 800a248 <__ieee754_pow+0x9d8>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 f84b 	bl	800017c <__aeabi_dsub>
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	462b      	mov	r3, r5
 800a0ea:	f7f6 f9ff 	bl	80004ec <__aeabi_dmul>
 800a0ee:	a358      	add	r3, pc, #352	; (adr r3, 800a250 <__ieee754_pow+0x9e0>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 f844 	bl	8000180 <__adddf3>
 800a0f8:	4622      	mov	r2, r4
 800a0fa:	462b      	mov	r3, r5
 800a0fc:	f7f6 f9f6 	bl	80004ec <__aeabi_dmul>
 800a100:	a355      	add	r3, pc, #340	; (adr r3, 800a258 <__ieee754_pow+0x9e8>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 f839 	bl	800017c <__aeabi_dsub>
 800a10a:	4622      	mov	r2, r4
 800a10c:	462b      	mov	r3, r5
 800a10e:	f7f6 f9ed 	bl	80004ec <__aeabi_dmul>
 800a112:	a353      	add	r3, pc, #332	; (adr r3, 800a260 <__ieee754_pow+0x9f0>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	f7f6 f832 	bl	8000180 <__adddf3>
 800a11c:	4622      	mov	r2, r4
 800a11e:	462b      	mov	r3, r5
 800a120:	f7f6 f9e4 	bl	80004ec <__aeabi_dmul>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4640      	mov	r0, r8
 800a12a:	4649      	mov	r1, r9
 800a12c:	f7f6 f826 	bl	800017c <__aeabi_dsub>
 800a130:	4604      	mov	r4, r0
 800a132:	460d      	mov	r5, r1
 800a134:	4602      	mov	r2, r0
 800a136:	460b      	mov	r3, r1
 800a138:	4640      	mov	r0, r8
 800a13a:	4649      	mov	r1, r9
 800a13c:	f7f6 f9d6 	bl	80004ec <__aeabi_dmul>
 800a140:	2200      	movs	r2, #0
 800a142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a14a:	4620      	mov	r0, r4
 800a14c:	4629      	mov	r1, r5
 800a14e:	f7f6 f815 	bl	800017c <__aeabi_dsub>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a15a:	f7f6 faf1 	bl	8000740 <__aeabi_ddiv>
 800a15e:	4632      	mov	r2, r6
 800a160:	4604      	mov	r4, r0
 800a162:	460d      	mov	r5, r1
 800a164:	463b      	mov	r3, r7
 800a166:	4640      	mov	r0, r8
 800a168:	4649      	mov	r1, r9
 800a16a:	f7f6 f9bf 	bl	80004ec <__aeabi_dmul>
 800a16e:	4632      	mov	r2, r6
 800a170:	463b      	mov	r3, r7
 800a172:	f7f6 f805 	bl	8000180 <__adddf3>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4620      	mov	r0, r4
 800a17c:	4629      	mov	r1, r5
 800a17e:	f7f5 fffd 	bl	800017c <__aeabi_dsub>
 800a182:	4642      	mov	r2, r8
 800a184:	464b      	mov	r3, r9
 800a186:	f7f5 fff9 	bl	800017c <__aeabi_dsub>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	2000      	movs	r0, #0
 800a190:	4939      	ldr	r1, [pc, #228]	; (800a278 <__ieee754_pow+0xa08>)
 800a192:	f7f5 fff3 	bl	800017c <__aeabi_dsub>
 800a196:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a19a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a19e:	da2b      	bge.n	800a1f8 <__ieee754_pow+0x988>
 800a1a0:	4652      	mov	r2, sl
 800a1a2:	f000 f9b9 	bl	800a518 <scalbn>
 800a1a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1aa:	f7ff bbf6 	b.w	800999a <__ieee754_pow+0x12a>
 800a1ae:	4b33      	ldr	r3, [pc, #204]	; (800a27c <__ieee754_pow+0xa0c>)
 800a1b0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a1b4:	429f      	cmp	r7, r3
 800a1b6:	f77f af13 	ble.w	8009fe0 <__ieee754_pow+0x770>
 800a1ba:	4b31      	ldr	r3, [pc, #196]	; (800a280 <__ieee754_pow+0xa10>)
 800a1bc:	440b      	add	r3, r1
 800a1be:	4303      	orrs	r3, r0
 800a1c0:	d00b      	beq.n	800a1da <__ieee754_pow+0x96a>
 800a1c2:	a329      	add	r3, pc, #164	; (adr r3, 800a268 <__ieee754_pow+0x9f8>)
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1cc:	f7f6 f98e 	bl	80004ec <__aeabi_dmul>
 800a1d0:	a325      	add	r3, pc, #148	; (adr r3, 800a268 <__ieee754_pow+0x9f8>)
 800a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d6:	f7ff bbe0 	b.w	800999a <__ieee754_pow+0x12a>
 800a1da:	4622      	mov	r2, r4
 800a1dc:	462b      	mov	r3, r5
 800a1de:	f7f5 ffcd 	bl	800017c <__aeabi_dsub>
 800a1e2:	4642      	mov	r2, r8
 800a1e4:	464b      	mov	r3, r9
 800a1e6:	f7f6 fc07 	bl	80009f8 <__aeabi_dcmpge>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	f43f aef8 	beq.w	8009fe0 <__ieee754_pow+0x770>
 800a1f0:	e7e7      	b.n	800a1c2 <__ieee754_pow+0x952>
 800a1f2:	f04f 0a00 	mov.w	sl, #0
 800a1f6:	e71e      	b.n	800a036 <__ieee754_pow+0x7c6>
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	e7d4      	b.n	800a1a6 <__ieee754_pow+0x936>
 800a1fc:	f04f 0b00 	mov.w	fp, #0
 800a200:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a278 <__ieee754_pow+0xa08>
 800a204:	f7ff bb95 	b.w	8009932 <__ieee754_pow+0xc2>
 800a208:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a20c:	f7ff bb91 	b.w	8009932 <__ieee754_pow+0xc2>
 800a210:	4638      	mov	r0, r7
 800a212:	4641      	mov	r1, r8
 800a214:	f7ff bbc3 	b.w	800999e <__ieee754_pow+0x12e>
 800a218:	9200      	str	r2, [sp, #0]
 800a21a:	f7ff bb9f 	b.w	800995c <__ieee754_pow+0xec>
 800a21e:	bf00      	nop
 800a220:	652b82fe 	.word	0x652b82fe
 800a224:	3c971547 	.word	0x3c971547
 800a228:	00000000 	.word	0x00000000
 800a22c:	3fe62e43 	.word	0x3fe62e43
 800a230:	fefa39ef 	.word	0xfefa39ef
 800a234:	3fe62e42 	.word	0x3fe62e42
 800a238:	0ca86c39 	.word	0x0ca86c39
 800a23c:	be205c61 	.word	0xbe205c61
 800a240:	72bea4d0 	.word	0x72bea4d0
 800a244:	3e663769 	.word	0x3e663769
 800a248:	c5d26bf1 	.word	0xc5d26bf1
 800a24c:	3ebbbd41 	.word	0x3ebbbd41
 800a250:	af25de2c 	.word	0xaf25de2c
 800a254:	3f11566a 	.word	0x3f11566a
 800a258:	16bebd93 	.word	0x16bebd93
 800a25c:	3f66c16c 	.word	0x3f66c16c
 800a260:	5555553e 	.word	0x5555553e
 800a264:	3fc55555 	.word	0x3fc55555
 800a268:	c2f8f359 	.word	0xc2f8f359
 800a26c:	01a56e1f 	.word	0x01a56e1f
 800a270:	3fe00000 	.word	0x3fe00000
 800a274:	000fffff 	.word	0x000fffff
 800a278:	3ff00000 	.word	0x3ff00000
 800a27c:	4090cbff 	.word	0x4090cbff
 800a280:	3f6f3400 	.word	0x3f6f3400

0800a284 <__ieee754_sqrt>:
 800a284:	4b54      	ldr	r3, [pc, #336]	; (800a3d8 <__ieee754_sqrt+0x154>)
 800a286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a28a:	438b      	bics	r3, r1
 800a28c:	4606      	mov	r6, r0
 800a28e:	460d      	mov	r5, r1
 800a290:	460a      	mov	r2, r1
 800a292:	460c      	mov	r4, r1
 800a294:	d10f      	bne.n	800a2b6 <__ieee754_sqrt+0x32>
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	f7f6 f927 	bl	80004ec <__aeabi_dmul>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	f7f5 ff6b 	bl	8000180 <__adddf3>
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460d      	mov	r5, r1
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b6:	2900      	cmp	r1, #0
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	dc0e      	bgt.n	800a2dc <__ieee754_sqrt+0x58>
 800a2be:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a2c2:	ea5c 0707 	orrs.w	r7, ip, r7
 800a2c6:	d0f2      	beq.n	800a2ae <__ieee754_sqrt+0x2a>
 800a2c8:	b141      	cbz	r1, 800a2dc <__ieee754_sqrt+0x58>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	f7f5 ff55 	bl	800017c <__aeabi_dsub>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	f7f6 fa33 	bl	8000740 <__aeabi_ddiv>
 800a2da:	e7e6      	b.n	800a2aa <__ieee754_sqrt+0x26>
 800a2dc:	1512      	asrs	r2, r2, #20
 800a2de:	d074      	beq.n	800a3ca <__ieee754_sqrt+0x146>
 800a2e0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a2e4:	07d5      	lsls	r5, r2, #31
 800a2e6:	f04f 0500 	mov.w	r5, #0
 800a2ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a2ee:	bf48      	it	mi
 800a2f0:	0fd9      	lsrmi	r1, r3, #31
 800a2f2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800a2f6:	bf44      	itt	mi
 800a2f8:	005b      	lslmi	r3, r3, #1
 800a2fa:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800a2fe:	1051      	asrs	r1, r2, #1
 800a300:	0fda      	lsrs	r2, r3, #31
 800a302:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800a306:	4628      	mov	r0, r5
 800a308:	2216      	movs	r2, #22
 800a30a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	1987      	adds	r7, r0, r6
 800a312:	42a7      	cmp	r7, r4
 800a314:	bfde      	ittt	le
 800a316:	19b8      	addle	r0, r7, r6
 800a318:	1be4      	suble	r4, r4, r7
 800a31a:	19ad      	addle	r5, r5, r6
 800a31c:	0fdf      	lsrs	r7, r3, #31
 800a31e:	3a01      	subs	r2, #1
 800a320:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800a324:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a328:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a32c:	d1f0      	bne.n	800a310 <__ieee754_sqrt+0x8c>
 800a32e:	f04f 0c20 	mov.w	ip, #32
 800a332:	4696      	mov	lr, r2
 800a334:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a338:	4284      	cmp	r4, r0
 800a33a:	eb06 070e 	add.w	r7, r6, lr
 800a33e:	dc02      	bgt.n	800a346 <__ieee754_sqrt+0xc2>
 800a340:	d112      	bne.n	800a368 <__ieee754_sqrt+0xe4>
 800a342:	429f      	cmp	r7, r3
 800a344:	d810      	bhi.n	800a368 <__ieee754_sqrt+0xe4>
 800a346:	2f00      	cmp	r7, #0
 800a348:	eb07 0e06 	add.w	lr, r7, r6
 800a34c:	da42      	bge.n	800a3d4 <__ieee754_sqrt+0x150>
 800a34e:	f1be 0f00 	cmp.w	lr, #0
 800a352:	db3f      	blt.n	800a3d4 <__ieee754_sqrt+0x150>
 800a354:	f100 0801 	add.w	r8, r0, #1
 800a358:	1a24      	subs	r4, r4, r0
 800a35a:	4640      	mov	r0, r8
 800a35c:	429f      	cmp	r7, r3
 800a35e:	bf88      	it	hi
 800a360:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800a364:	1bdb      	subs	r3, r3, r7
 800a366:	4432      	add	r2, r6
 800a368:	0064      	lsls	r4, r4, #1
 800a36a:	f1bc 0c01 	subs.w	ip, ip, #1
 800a36e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800a372:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a376:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a37a:	d1dd      	bne.n	800a338 <__ieee754_sqrt+0xb4>
 800a37c:	4323      	orrs	r3, r4
 800a37e:	d006      	beq.n	800a38e <__ieee754_sqrt+0x10a>
 800a380:	1c54      	adds	r4, r2, #1
 800a382:	bf0b      	itete	eq
 800a384:	4662      	moveq	r2, ip
 800a386:	3201      	addne	r2, #1
 800a388:	3501      	addeq	r5, #1
 800a38a:	f022 0201 	bicne.w	r2, r2, #1
 800a38e:	106b      	asrs	r3, r5, #1
 800a390:	0852      	lsrs	r2, r2, #1
 800a392:	07e8      	lsls	r0, r5, #31
 800a394:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a398:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a39c:	bf48      	it	mi
 800a39e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a3a2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800a3a6:	4616      	mov	r6, r2
 800a3a8:	e781      	b.n	800a2ae <__ieee754_sqrt+0x2a>
 800a3aa:	0adc      	lsrs	r4, r3, #11
 800a3ac:	3915      	subs	r1, #21
 800a3ae:	055b      	lsls	r3, r3, #21
 800a3b0:	2c00      	cmp	r4, #0
 800a3b2:	d0fa      	beq.n	800a3aa <__ieee754_sqrt+0x126>
 800a3b4:	02e6      	lsls	r6, r4, #11
 800a3b6:	d50a      	bpl.n	800a3ce <__ieee754_sqrt+0x14a>
 800a3b8:	f1c2 0020 	rsb	r0, r2, #32
 800a3bc:	fa23 f000 	lsr.w	r0, r3, r0
 800a3c0:	1e55      	subs	r5, r2, #1
 800a3c2:	4093      	lsls	r3, r2
 800a3c4:	4304      	orrs	r4, r0
 800a3c6:	1b4a      	subs	r2, r1, r5
 800a3c8:	e78a      	b.n	800a2e0 <__ieee754_sqrt+0x5c>
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	e7f0      	b.n	800a3b0 <__ieee754_sqrt+0x12c>
 800a3ce:	0064      	lsls	r4, r4, #1
 800a3d0:	3201      	adds	r2, #1
 800a3d2:	e7ef      	b.n	800a3b4 <__ieee754_sqrt+0x130>
 800a3d4:	4680      	mov	r8, r0
 800a3d6:	e7bf      	b.n	800a358 <__ieee754_sqrt+0xd4>
 800a3d8:	7ff00000 	.word	0x7ff00000

0800a3dc <fabs>:
 800a3dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4770      	bx	lr

0800a3e4 <finite>:
 800a3e4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800a3e8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800a3ec:	0fc0      	lsrs	r0, r0, #31
 800a3ee:	4770      	bx	lr

0800a3f0 <matherr>:
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	4770      	bx	lr

0800a3f4 <nan>:
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	4901      	ldr	r1, [pc, #4]	; (800a3fc <nan+0x8>)
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	7ff80000 	.word	0x7ff80000

0800a400 <rint>:
 800a400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a402:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a406:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800a40a:	f1bc 0f13 	cmp.w	ip, #19
 800a40e:	4604      	mov	r4, r0
 800a410:	460d      	mov	r5, r1
 800a412:	460b      	mov	r3, r1
 800a414:	4606      	mov	r6, r0
 800a416:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800a41a:	dc5a      	bgt.n	800a4d2 <rint+0xd2>
 800a41c:	f1bc 0f00 	cmp.w	ip, #0
 800a420:	da2b      	bge.n	800a47a <rint+0x7a>
 800a422:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a426:	4302      	orrs	r2, r0
 800a428:	d023      	beq.n	800a472 <rint+0x72>
 800a42a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a42e:	4302      	orrs	r2, r0
 800a430:	4256      	negs	r6, r2
 800a432:	4316      	orrs	r6, r2
 800a434:	0c4b      	lsrs	r3, r1, #17
 800a436:	0b36      	lsrs	r6, r6, #12
 800a438:	4934      	ldr	r1, [pc, #208]	; (800a50c <rint+0x10c>)
 800a43a:	045b      	lsls	r3, r3, #17
 800a43c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800a440:	ea46 0503 	orr.w	r5, r6, r3
 800a444:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800a448:	4602      	mov	r2, r0
 800a44a:	462b      	mov	r3, r5
 800a44c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a450:	4620      	mov	r0, r4
 800a452:	4629      	mov	r1, r5
 800a454:	f7f5 fe94 	bl	8000180 <__adddf3>
 800a458:	e9cd 0100 	strd	r0, r1, [sp]
 800a45c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a460:	462b      	mov	r3, r5
 800a462:	4622      	mov	r2, r4
 800a464:	f7f5 fe8a 	bl	800017c <__aeabi_dsub>
 800a468:	4604      	mov	r4, r0
 800a46a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a46e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800a472:	4620      	mov	r0, r4
 800a474:	4629      	mov	r1, r5
 800a476:	b003      	add	sp, #12
 800a478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a47a:	4a25      	ldr	r2, [pc, #148]	; (800a510 <rint+0x110>)
 800a47c:	fa42 f20c 	asr.w	r2, r2, ip
 800a480:	4011      	ands	r1, r2
 800a482:	4301      	orrs	r1, r0
 800a484:	d0f5      	beq.n	800a472 <rint+0x72>
 800a486:	0852      	lsrs	r2, r2, #1
 800a488:	ea05 0102 	and.w	r1, r5, r2
 800a48c:	ea50 0601 	orrs.w	r6, r0, r1
 800a490:	d00c      	beq.n	800a4ac <rint+0xac>
 800a492:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a496:	f1bc 0f13 	cmp.w	ip, #19
 800a49a:	bf0c      	ite	eq
 800a49c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800a4a0:	2600      	movne	r6, #0
 800a4a2:	ea25 0202 	bic.w	r2, r5, r2
 800a4a6:	fa43 f30c 	asr.w	r3, r3, ip
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	4917      	ldr	r1, [pc, #92]	; (800a50c <rint+0x10c>)
 800a4ae:	4632      	mov	r2, r6
 800a4b0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800a4b4:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	f7f5 fe60 	bl	8000180 <__adddf3>
 800a4c0:	e9cd 0100 	strd	r0, r1, [sp]
 800a4c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	462b      	mov	r3, r5
 800a4cc:	f7f5 fe56 	bl	800017c <__aeabi_dsub>
 800a4d0:	e008      	b.n	800a4e4 <rint+0xe4>
 800a4d2:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800a4d6:	dd08      	ble.n	800a4ea <rint+0xea>
 800a4d8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800a4dc:	d1c9      	bne.n	800a472 <rint+0x72>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	f7f5 fe4e 	bl	8000180 <__adddf3>
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	460d      	mov	r5, r1
 800a4e8:	e7c3      	b.n	800a472 <rint+0x72>
 800a4ea:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800a4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f2:	40ca      	lsrs	r2, r1
 800a4f4:	4210      	tst	r0, r2
 800a4f6:	d0bc      	beq.n	800a472 <rint+0x72>
 800a4f8:	0852      	lsrs	r2, r2, #1
 800a4fa:	4210      	tst	r0, r2
 800a4fc:	bf1f      	itttt	ne
 800a4fe:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800a502:	ea20 0202 	bicne.w	r2, r0, r2
 800a506:	410e      	asrne	r6, r1
 800a508:	4316      	orrne	r6, r2
 800a50a:	e7cf      	b.n	800a4ac <rint+0xac>
 800a50c:	0800b020 	.word	0x0800b020
 800a510:	000fffff 	.word	0x000fffff
 800a514:	00000000 	.word	0x00000000

0800a518 <scalbn>:
 800a518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51a:	4616      	mov	r6, r2
 800a51c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a520:	4604      	mov	r4, r0
 800a522:	460d      	mov	r5, r1
 800a524:	460b      	mov	r3, r1
 800a526:	b982      	cbnz	r2, 800a54a <scalbn+0x32>
 800a528:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a52c:	4303      	orrs	r3, r0
 800a52e:	d034      	beq.n	800a59a <scalbn+0x82>
 800a530:	4b2d      	ldr	r3, [pc, #180]	; (800a5e8 <scalbn+0xd0>)
 800a532:	2200      	movs	r2, #0
 800a534:	f7f5 ffda 	bl	80004ec <__aeabi_dmul>
 800a538:	4b2c      	ldr	r3, [pc, #176]	; (800a5ec <scalbn+0xd4>)
 800a53a:	4604      	mov	r4, r0
 800a53c:	429e      	cmp	r6, r3
 800a53e:	460d      	mov	r5, r1
 800a540:	da0d      	bge.n	800a55e <scalbn+0x46>
 800a542:	a325      	add	r3, pc, #148	; (adr r3, 800a5d8 <scalbn+0xc0>)
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	e01c      	b.n	800a584 <scalbn+0x6c>
 800a54a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a54e:	42ba      	cmp	r2, r7
 800a550:	d109      	bne.n	800a566 <scalbn+0x4e>
 800a552:	4602      	mov	r2, r0
 800a554:	f7f5 fe14 	bl	8000180 <__adddf3>
 800a558:	4604      	mov	r4, r0
 800a55a:	460d      	mov	r5, r1
 800a55c:	e01d      	b.n	800a59a <scalbn+0x82>
 800a55e:	460b      	mov	r3, r1
 800a560:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a564:	3a36      	subs	r2, #54	; 0x36
 800a566:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a56a:	4432      	add	r2, r6
 800a56c:	428a      	cmp	r2, r1
 800a56e:	dd0c      	ble.n	800a58a <scalbn+0x72>
 800a570:	4622      	mov	r2, r4
 800a572:	462b      	mov	r3, r5
 800a574:	a11a      	add	r1, pc, #104	; (adr r1, 800a5e0 <scalbn+0xc8>)
 800a576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a57a:	f000 f83b 	bl	800a5f4 <copysign>
 800a57e:	a318      	add	r3, pc, #96	; (adr r3, 800a5e0 <scalbn+0xc8>)
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	f7f5 ffb2 	bl	80004ec <__aeabi_dmul>
 800a588:	e7e6      	b.n	800a558 <scalbn+0x40>
 800a58a:	2a00      	cmp	r2, #0
 800a58c:	dd08      	ble.n	800a5a0 <scalbn+0x88>
 800a58e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a592:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a596:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a59a:	4620      	mov	r0, r4
 800a59c:	4629      	mov	r1, r5
 800a59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a5a4:	da0b      	bge.n	800a5be <scalbn+0xa6>
 800a5a6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a5aa:	429e      	cmp	r6, r3
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	462b      	mov	r3, r5
 800a5b0:	dce0      	bgt.n	800a574 <scalbn+0x5c>
 800a5b2:	a109      	add	r1, pc, #36	; (adr r1, 800a5d8 <scalbn+0xc0>)
 800a5b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5b8:	f000 f81c 	bl	800a5f4 <copysign>
 800a5bc:	e7c1      	b.n	800a542 <scalbn+0x2a>
 800a5be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a5c2:	3236      	adds	r2, #54	; 0x36
 800a5c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a5c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <scalbn+0xd8>)
 800a5d4:	e7d6      	b.n	800a584 <scalbn+0x6c>
 800a5d6:	bf00      	nop
 800a5d8:	c2f8f359 	.word	0xc2f8f359
 800a5dc:	01a56e1f 	.word	0x01a56e1f
 800a5e0:	8800759c 	.word	0x8800759c
 800a5e4:	7e37e43c 	.word	0x7e37e43c
 800a5e8:	43500000 	.word	0x43500000
 800a5ec:	ffff3cb0 	.word	0xffff3cb0
 800a5f0:	3c900000 	.word	0x3c900000

0800a5f4 <copysign>:
 800a5f4:	b530      	push	{r4, r5, lr}
 800a5f6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a5fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5fe:	ea42 0503 	orr.w	r5, r2, r3
 800a602:	4629      	mov	r1, r5
 800a604:	bd30      	pop	{r4, r5, pc}
	...

0800a608 <_init>:
 800a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60a:	bf00      	nop
 800a60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a60e:	bc08      	pop	{r3}
 800a610:	469e      	mov	lr, r3
 800a612:	4770      	bx	lr

0800a614 <_fini>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	bf00      	nop
 800a618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a61a:	bc08      	pop	{r3}
 800a61c:	469e      	mov	lr, r3
 800a61e:	4770      	bx	lr
