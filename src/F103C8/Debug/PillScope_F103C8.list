
PillScope_F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c308  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  0800c418  0800c418  0001c418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce98  0800ce98  00020368  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce98  0800ce98  00020368  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce98  0800ce98  00020368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce98  0800ce98  0001ce98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce9c  0800ce9c  0001ce9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0800cea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000430c  20000368  0800d208  00020368  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004674  0800d208  00024674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046a04  00000000  00000000  00020391  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000091a0  00000000  00000000  00066d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016660  00000000  00000000  0006ff35  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001778  00000000  00000000  00086598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000031a0  00000000  00000000  00087d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000244ea  00000000  00000000  0008aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00020ba3  00000000  00000000  000af39a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000a61a9  00000000  00000000  000cff3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001760e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b34  00000000  00000000  00176164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000368 	.word	0x20000368
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c400 	.word	0x0800c400

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000036c 	.word	0x2000036c
 800014c:	0800c400 	.word	0x0800c400

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <LL_APB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <LL_APB1_GRP1_EnableClock+0x18>)
{
 8001172:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR, Periphs);
 8001174:	69da      	ldr	r2, [r3, #28]
 8001176:	4302      	orrs	r2, r0
 8001178:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	4018      	ands	r0, r3
 800117e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001180:	9b01      	ldr	r3, [sp, #4]
}
 8001182:	b002      	add	sp, #8
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <LL_APB2_GRP1_EnableClock+0x18>)
{
 800118e:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	4302      	orrs	r2, r0
 8001194:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4018      	ands	r0, r3
 800119a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800119c:	9b01      	ldr	r3, [sp, #4]
}
 800119e:	b002      	add	sp, #8
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000

080011a8 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011a8:	b530      	push	{r4, r5, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ae:	fa93 f3a3 	rbit	r3, r3
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80011b2:	f44f 7400 	mov.w	r4, #512	; 0x200
 80011b6:	fab3 f383 	clz	r3, r3
  
  MODIFY_REG(*preg,
 80011ba:	251f      	movs	r5, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80011bc:	40dc      	lsrs	r4, r3
 80011be:	302c      	adds	r0, #44	; 0x2c
  MODIFY_REG(*preg,
 80011c0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80011c4:	f001 011f 	and.w	r1, r1, #31
 80011c8:	408d      	lsls	r5, r1
 80011ca:	f002 021f 	and.w	r2, r2, #31
 80011ce:	ea23 0305 	bic.w	r3, r3, r5
 80011d2:	408a      	lsls	r2, r1
 80011d4:	431a      	orrs	r2, r3
 80011d6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011da:	bd30      	pop	{r4, r5, pc}

080011dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011de:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80011e2:	fa96 f6a6 	rbit	r6, r6
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80011e6:	fab6 f386 	clz	r3, r6
 80011ea:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 80011ee:	40de      	lsrs	r6, r3
 80011f0:	300c      	adds	r0, #12
  
  MODIFY_REG(*preg,
 80011f2:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80011f6:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 80011fa:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80011fe:	fa93 f5a3 	rbit	r5, r3
 8001202:	fab5 f585 	clz	r5, r5
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	2707      	movs	r7, #7
 800120c:	fab3 f383 	clz	r3, r3
 8001210:	fa21 f505 	lsr.w	r5, r1, r5
 8001214:	fa07 f505 	lsl.w	r5, r7, r5
 8001218:	40d9      	lsrs	r1, r3
 800121a:	ea24 0405 	bic.w	r4, r4, r5
 800121e:	fa02 f101 	lsl.w	r1, r2, r1
 8001222:	4321      	orrs	r1, r4
 8001224:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001228:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800122c <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <SystemClock_Config+0xa0>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122e:	b510      	push	{r4, lr}
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	f022 0207 	bic.w	r2, r2, #7
 8001236:	f042 0202 	orr.w	r2, r2, #2
 800123a:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	f002 0207 	and.w	r2, r2, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001242:	2a02      	cmp	r2, #2
 8001244:	d1fa      	bne.n	800123c <SystemClock_Config+0x10>
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001246:	4c22      	ldr	r4, [pc, #136]	; (80012d0 <SystemClock_Config+0xa4>)
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124e:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001250:	6823      	ldr	r3, [r4, #0]
  {
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001252:	039a      	lsls	r2, r3, #14
 8001254:	d5fc      	bpl.n	8001250 <SystemClock_Config+0x24>
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800125c:	6023      	str	r3, [r4, #0]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800125e:	6863      	ldr	r3, [r4, #4]
 8001260:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001264:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001268:	6063      	str	r3, [r4, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001270:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001272:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_EnableCSS();
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	d5fc      	bpl.n	8001272 <SystemClock_Config+0x46>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001278:	6863      	ldr	r3, [r4, #4]
 800127a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800127e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001280:	6863      	ldr	r3, [r4, #4]
 8001282:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800128c:	6863      	ldr	r3, [r4, #4]
 800128e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001292:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001294:	6863      	ldr	r3, [r4, #4]
 8001296:	f023 0303 	bic.w	r3, r3, #3
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012a0:	6863      	ldr	r3, [r4, #4]
 80012a2:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d1fa      	bne.n	80012a0 <SystemClock_Config+0x74>
  {

  }
  LL_SetSystemCoreClock(72000000);
 80012aa:	480a      	ldr	r0, [pc, #40]	; (80012d4 <SystemClock_Config+0xa8>)
 80012ac:	f002 faac 	bl	8003808 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80012b0:	200f      	movs	r0, #15
 80012b2:	f000 fbcf 	bl	8001a54 <HAL_InitTick>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 80012b6:	6863      	ldr	r3, [r4, #4]
 80012b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c0:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 80012c2:	6863      	ldr	r3, [r4, #4]
 80012c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012c8:	6063      	str	r3, [r4, #4]
  {
    Error_Handler();
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
}
 80012ca:	bd10      	pop	{r4, pc}
 80012cc:	40022000 	.word	0x40022000
 80012d0:	40021000 	.word	0x40021000
 80012d4:	044aa200 	.word	0x044aa200

080012d8 <main>:
{
 80012d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	2514      	movs	r5, #20
{
 80012de:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 80012e0:	f000 fbdc 	bl	8001a9c <HAL_Init>
  SystemClock_Config();
 80012e4:	f7ff ffa2 	bl	800122c <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	462a      	mov	r2, r5
 80012ea:	2100      	movs	r1, #0
 80012ec:	a80e      	add	r0, sp, #56	; 0x38
 80012ee:	f009 fb07 	bl	800a900 <memset>

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80012f2:	2010      	movs	r0, #16
 80012f4:	f7ff ff4a 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80012f8:	2020      	movs	r0, #32
 80012fa:	f7ff ff47 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80012fe:	2004      	movs	r0, #4
 8001300:	f7ff ff44 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001304:	2008      	movs	r0, #8
 8001306:	f7ff ff41 	bl	800118c <LL_APB2_GRP1_EnableClock>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800130a:	f44f 5300 	mov.w	r3, #8192	; 0x2000

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800130e:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001310:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001314:	2602      	movs	r6, #2
 8001316:	48d2      	ldr	r0, [pc, #840]	; (8001660 <main+0x388>)
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	a90e      	add	r1, sp, #56	; 0x38
 800131a:	6103      	str	r3, [r0, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800131c:	4bd1      	ldr	r3, [pc, #836]	; (8001664 <main+0x38c>)
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800131e:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001322:	e9cd 390e 	strd	r3, r9, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001326:	f001 fac9 	bl	80028bc <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 800132a:	4bcf      	ldr	r3, [pc, #828]	; (8001668 <main+0x390>)
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800132c:	4621      	mov	r1, r4
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	a809      	add	r0, sp, #36	; 0x24
 8001332:	ea42 0209 	orr.w	r2, r2, r9
 8001336:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	462a      	mov	r2, r5
 800133c:	ea03 0309 	and.w	r3, r3, r9
 8001340:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001342:	9b03      	ldr	r3, [sp, #12]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001344:	e9cd 4404 	strd	r4, r4, [sp, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001348:	9402      	str	r4, [sp, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800134a:	f009 fad9 	bl	800a900 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	462a      	mov	r2, r5
 8001350:	4621      	mov	r1, r4
 8001352:	a80e      	add	r0, sp, #56	; 0x38
 8001354:	f009 fad4 	bl	800a900 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001358:	f44f 7000 	mov.w	r0, #512	; 0x200
 800135c:	f7ff ff16 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001360:	2004      	movs	r0, #4
 8001362:	f7ff ff13 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8001366:	f641 631e 	movw	r3, #7710	; 0x1e1e
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	4fc0      	ldr	r7, [pc, #768]	; (800166c <main+0x394>)
 800136c:	a90e      	add	r1, sp, #56	; 0x38
 800136e:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001370:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f001 faa2 	bl	80028bc <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001378:	4bbd      	ldr	r3, [pc, #756]	; (8001670 <main+0x398>)
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800137a:	f8df 8320 	ldr.w	r8, [pc, #800]	; 800169c <main+0x3c4>
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	a904      	add	r1, sp, #16
 8001382:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001386:	f022 0210 	bic.w	r2, r2, #16
 800138a:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4640      	mov	r0, r8
 8001390:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001394:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001396:	681a      	ldr	r2, [r3, #0]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001398:	f04f 0b20 	mov.w	fp, #32
 800139c:	f042 0220 	orr.w	r2, r2, #32
 80013a0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80013a2:	681a      	ldr	r2, [r3, #0]
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_VREFINT);
 80013a4:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 80016a0 <main+0x3c8>
 80013a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013ac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013b4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013c0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80013c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013cc:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80013ce:	f44f 7380 	mov.w	r3, #256	; 0x100
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80013d2:	9404      	str	r4, [sp, #16]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80013d4:	9305      	str	r3, [sp, #20]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80013d6:	f001 f9e5 	bl	80027a4 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80013da:	a916      	add	r1, sp, #88	; 0x58
 80013dc:	f841 4d50 	str.w	r4, [r1, #-80]!
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80013e0:	4640      	mov	r0, r8
 80013e2:	f001 f9c3 	bl	800276c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 80013e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013ee:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80013f2:	f44f 7380 	mov.w	r3, #256	; 0x100
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80013f6:	a909      	add	r1, sp, #36	; 0x24
 80013f8:	4640      	mov	r0, r8
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80013fa:	930d      	str	r3, [sp, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80013fc:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001400:	f001 f9e5 	bl	80027ce <LL_ADC_REG_Init>
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDChannelGroup)
{
  MODIFY_REG(ADCx->CR1,
 8001404:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001408:	4a9a      	ldr	r2, [pc, #616]	; (8001674 <main+0x39c>)
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_VREFINT);
 800140a:	4640      	mov	r0, r8
 800140c:	401a      	ands	r2, r3
 800140e:	4b9a      	ldr	r3, [pc, #616]	; (8001678 <main+0x3a0>)
 8001410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001414:	4313      	orrs	r3, r2
 8001416:	f8c8 3004 	str.w	r3, [r8, #4]
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDThresholdsHighLow, uint32_t AWDThresholdValue)
{
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->HTR, AWDThresholdsHighLow);
  
  MODIFY_REG(*preg,
 800141a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->HTR, AWDThresholdsHighLow);
 800141e:	4a97      	ldr	r2, [pc, #604]	; (800167c <main+0x3a4>)
  MODIFY_REG(*preg,
 8001420:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001424:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001428:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 800142c:	6853      	ldr	r3, [r2, #4]
 800142e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001432:	f023 030f 	bic.w	r3, r3, #15
 8001436:	6053      	str	r3, [r2, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR1, LL_ADC_IT_AWD1);
 8001438:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800143c:	4652      	mov	r2, sl
 800143e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001442:	f8c8 3004 	str.w	r3, [r8, #4]
 8001446:	f7ff feaf 	bl	80011a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 800144a:	4651      	mov	r1, sl
 800144c:	4640      	mov	r0, r8
 800144e:	2206      	movs	r2, #6
 8001450:	f7ff fec4 	bl	80011dc <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8001454:	f8d8 3008 	ldr.w	r3, [r8, #8]
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8001458:	f8df a248 	ldr.w	sl, [pc, #584]	; 80016a4 <main+0x3cc>
 800145c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001460:	f8c8 3008 	str.w	r3, [r8, #8]
 8001464:	4652      	mov	r2, sl
 8001466:	4640      	mov	r0, r8
 8001468:	f240 2105 	movw	r1, #517	; 0x205
 800146c:	f7ff fe9c 	bl	80011a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 8001470:	4651      	mov	r1, sl
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8001472:	f8df a234 	ldr.w	sl, [pc, #564]	; 80016a8 <main+0x3d0>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 8001476:	4640      	mov	r0, r8
 8001478:	2206      	movs	r2, #6
 800147a:	f7ff feaf 	bl	80011dc <LL_ADC_SetChannelSamplingTime>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 800147e:	4652      	mov	r2, sl
 8001480:	4640      	mov	r0, r8
 8001482:	f240 210a 	movw	r1, #522	; 0x20a
 8001486:	f7ff fe8f 	bl	80011a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 800148a:	4651      	mov	r1, sl
 800148c:	4640      	mov	r0, r8
 800148e:	2206      	movs	r2, #6
 8001490:	f7ff fea4 	bl	80011dc <LL_ADC_SetChannelSamplingTime>
  MX_USB_DEVICE_Init();
 8001494:	f002 fece 	bl	8004234 <MX_USB_DEVICE_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001498:	462a      	mov	r2, r5
 800149a:	4621      	mov	r1, r4
 800149c:	a804      	add	r0, sp, #16
 800149e:	f009 fa2f 	bl	800a900 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80014a2:	465a      	mov	r2, fp
 80014a4:	4621      	mov	r1, r4
 80014a6:	a80e      	add	r0, sp, #56	; 0x38
 80014a8:	f009 fa2a 	bl	800a900 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	462a      	mov	r2, r5
 80014ae:	4621      	mov	r1, r4
 80014b0:	a809      	add	r0, sp, #36	; 0x24
 80014b2:	f009 fa25 	bl	800a900 <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80014b6:	4648      	mov	r0, r9
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80014b8:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80014bc:	f7ff fe58 	bl	8001170 <LL_APB1_GRP1_EnableClock>
  TIM_InitStruct.Autoreload = 1000;
 80014c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80014c4:	a904      	add	r1, sp, #16
 80014c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80014ca:	e9cd 3406 	strd	r3, r4, [sp, #24]
  TIM_InitStruct.Prescaler = 0;
 80014ce:	f8ad 4010 	strh.w	r4, [sp, #16]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80014d2:	9405      	str	r4, [sp, #20]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80014d4:	f001 facc 	bl	8002a70 <LL_TIM_Init>
 80014d8:	f8d8 3000 	ldr.w	r3, [r8]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80014dc:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80016ac <main+0x3d4>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80014e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014e4:	f8c8 3000 	str.w	r3, [r8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80014e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80014ec:	aa0e      	add	r2, sp, #56	; 0x38
 80014ee:	ea03 030a 	and.w	r3, r3, sl
 80014f2:	f8c8 3008 	str.w	r3, [r8, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80014f6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80014fa:	4649      	mov	r1, r9
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	f8c8 3018 	str.w	r3, [r8, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001504:	2360      	movs	r3, #96	; 0x60
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001506:	4640      	mov	r0, r8
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001508:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  TIM_OC_InitStruct.CompareValue = 0;
 800150c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001510:	9412      	str	r4, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001512:	f001 fae5 	bl	8002ae0 <LL_TIM_OC_Init>
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001516:	f8d8 3018 	ldr.w	r3, [r8, #24]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800151a:	2004      	movs	r0, #4
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	f8c8 3018 	str.w	r3, [r8, #24]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001524:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	f8c8 3004 	str.w	r3, [r8, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001534:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800153c:	f8c8 3008 	str.w	r3, [r8, #8]
 8001540:	f7ff fe24 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001544:	2309      	movs	r3, #9
 8001546:	494e      	ldr	r1, [pc, #312]	; (8001680 <main+0x3a8>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800154a:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800154e:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001552:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f001 f9b1 	bl	80028bc <LL_GPIO_Init>
  * @note  PARTIAL_1: Partial remap (CH1/ETR/PA15, CH2/PB3, CH3/PA2,  CH4/PA3)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial1_TIM2(void)
{
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1 | AFIO_MAPR_SWJ_CFG));
 800155a:	4a4a      	ldr	r2, [pc, #296]	; (8001684 <main+0x3ac>)
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800155c:	4621      	mov	r1, r4
 800155e:	6853      	ldr	r3, [r2, #4]
 8001560:	a80e      	add	r0, sp, #56	; 0x38
 8001562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800156a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800156e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001572:	6053      	str	r3, [r2, #4]
 8001574:	221c      	movs	r2, #28
 8001576:	f009 f9c3 	bl	800a900 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	462a      	mov	r2, r5
 800157c:	4621      	mov	r1, r4
 800157e:	a809      	add	r0, sp, #36	; 0x24
 8001580:	f009 f9be 	bl	800a900 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001584:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001588:	f7ff fe00 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff fdfd 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001592:	2309      	movs	r3, #9
 8001594:	483c      	ldr	r0, [pc, #240]	; (8001688 <main+0x3b0>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001596:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800159a:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800159e:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	a909      	add	r1, sp, #36	; 0x24
 80015a2:	4638      	mov	r0, r7
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015a4:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f001 f988 	bl	80028bc <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80015ac:	4b37      	ldr	r3, [pc, #220]	; (800168c <main+0x3b4>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	a909      	add	r1, sp, #36	; 0x24
 80015b0:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80015b2:	e9cd 3809 	strd	r3, r8, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f001 f981 	bl	80028bc <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 80015ba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80015be:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80015c2:	230c      	movs	r3, #12
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80015c4:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  LL_USART_Init(USART1, &USART_InitStruct);
 80015c8:	4b31      	ldr	r3, [pc, #196]	; (8001690 <main+0x3b8>)
 80015ca:	a90e      	add	r1, sp, #56	; 0x38
 80015cc:	4618      	mov	r0, r3
 80015ce:	9301      	str	r3, [sp, #4]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80015d0:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80015d4:	9414      	str	r4, [sp, #80]	; 0x50
  LL_USART_Init(USART1, &USART_InitStruct);
 80015d6:	f001 fb4b 	bl	8002c70 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015da:	9b01      	ldr	r3, [sp, #4]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80015dc:	4621      	mov	r1, r4
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	a809      	add	r0, sp, #36	; 0x24
 80015e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015ee:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	462a      	mov	r2, r5
 80015fa:	f009 f981 	bl	800a900 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80015fe:	465a      	mov	r2, fp
 8001600:	4621      	mov	r1, r4
 8001602:	a80e      	add	r0, sp, #56	; 0x38
 8001604:	f009 f97c 	bl	800a900 <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001608:	4630      	mov	r0, r6
 800160a:	f7ff fdb1 	bl	8001170 <LL_APB1_GRP1_EnableClock>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <main+0x3bc>)
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001610:	4e21      	ldr	r6, [pc, #132]	; (8001698 <main+0x3c0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4630      	mov	r0, r6
 8001616:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800161a:	f022 0210 	bic.w	r2, r2, #16
 800161e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	a909      	add	r1, sp, #36	; 0x24
 8001624:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001628:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	ea42 020b 	orr.w	r2, r2, fp
 8001630:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001638:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001640:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001648:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001650:	601a      	str	r2, [r3, #0]
  TIM_InitStruct.Prescaler = 1000;
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  TIM_InitStruct.Autoreload = 72;
 800165a:	2348      	movs	r3, #72	; 0x48
 800165c:	e028      	b.n	80016b0 <main+0x3d8>
 800165e:	bf00      	nop
 8001660:	40011000 	.word	0x40011000
 8001664:	04200020 	.word	0x04200020
 8001668:	40021000 	.word	0x40021000
 800166c:	40010800 	.word	0x40010800
 8001670:	40020008 	.word	0x40020008
 8001674:	ff3ffde0 	.word	0xff3ffde0
 8001678:	00800201 	.word	0x00800201
 800167c:	40012424 	.word	0x40012424
 8001680:	04800080 	.word	0x04800080
 8001684:	40010000 	.word	0x40010000
 8001688:	04020002 	.word	0x04020002
 800168c:	04040004 	.word	0x04040004
 8001690:	40013800 	.word	0x40013800
 8001694:	4002006c 	.word	0x4002006c
 8001698:	40000400 	.word	0x40000400
 800169c:	40012400 	.word	0x40012400
 80016a0:	81500011 	.word	0x81500011
 80016a4:	02300001 	.word	0x02300001
 80016a8:	02600002 	.word	0x02600002
 80016ac:	ffffbff8 	.word	0xffffbff8
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80016b0:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_InitStruct.Autoreload = 72;
 80016b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80016b4:	9301      	str	r3, [sp, #4]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80016b6:	940c      	str	r4, [sp, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80016b8:	f001 f9da 	bl	8002a70 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80016bc:	6832      	ldr	r2, [r6, #0]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80016be:	4630      	mov	r0, r6
 80016c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016c4:	6032      	str	r2, [r6, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80016c6:	68b2      	ldr	r2, [r6, #8]
 80016c8:	4649      	mov	r1, r9
 80016ca:	ea02 020a 	and.w	r2, r2, sl
 80016ce:	60b2      	str	r2, [r6, #8]
 80016d0:	aa0e      	add	r2, sp, #56	; 0x38
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80016d2:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_OC_InitStruct.CompareValue = 0;
 80016d6:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80016da:	9412      	str	r4, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80016dc:	f001 fa00 	bl	8002ae0 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80016e0:	69b2      	ldr	r2, [r6, #24]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80016e2:	4621      	mov	r1, r4
 80016e4:	f022 0204 	bic.w	r2, r2, #4
 80016e8:	61b2      	str	r2, [r6, #24]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80016ea:	6872      	ldr	r2, [r6, #4]
 80016ec:	a804      	add	r0, sp, #16
 80016ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016f2:	ea42 020b 	orr.w	r2, r2, fp
 80016f6:	6072      	str	r2, [r6, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80016f8:	68b2      	ldr	r2, [r6, #8]
 80016fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016fe:	60b2      	str	r2, [r6, #8]
 8001700:	462a      	mov	r2, r5
 8001702:	f009 f8fd 	bl	800a900 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001706:	465a      	mov	r2, fp
 8001708:	4621      	mov	r1, r4
 800170a:	a80e      	add	r0, sp, #56	; 0x38
 800170c:	f009 f8f8 	bl	800a900 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	462a      	mov	r2, r5
 8001712:	4621      	mov	r1, r4
 8001714:	a809      	add	r0, sp, #36	; 0x24
 8001716:	f009 f8f3 	bl	800a900 <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800171a:	4640      	mov	r0, r8
 800171c:	f7ff fd28 	bl	8001170 <LL_APB1_GRP1_EnableClock>
  TIM_InitStruct.Prescaler = 1000;
 8001720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001724:	f506 6680 	add.w	r6, r6, #1024	; 0x400
  TIM_InitStruct.Prescaler = 1000;
 8001728:	f8ad 3010 	strh.w	r3, [sp, #16]
  TIM_InitStruct.Autoreload = 72;
 800172c:	9b01      	ldr	r3, [sp, #4]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800172e:	a904      	add	r1, sp, #16
 8001730:	4630      	mov	r0, r6
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001732:	e9cd 3406 	strd	r3, r4, [sp, #24]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001736:	9405      	str	r4, [sp, #20]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001738:	f001 f99a 	bl	8002a70 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800173c:	6833      	ldr	r3, [r6, #0]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800173e:	aa0e      	add	r2, sp, #56	; 0x38
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001746:	68b3      	ldr	r3, [r6, #8]
 8001748:	4649      	mov	r1, r9
 800174a:	ea03 030a 	and.w	r3, r3, sl
 800174e:	60b3      	str	r3, [r6, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001750:	69b3      	ldr	r3, [r6, #24]
 8001752:	4630      	mov	r0, r6
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	61b3      	str	r3, [r6, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800175a:	2360      	movs	r3, #96	; 0x60
  TIM_OC_InitStruct.CompareValue = 0;
 800175c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001760:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001764:	9412      	str	r4, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001766:	f001 f9bb 	bl	8002ae0 <LL_TIM_OC_Init>
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800176a:	69b3      	ldr	r3, [r6, #24]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800176c:	2008      	movs	r0, #8
 800176e:	ea43 0308 	orr.w	r3, r3, r8
 8001772:	61b3      	str	r3, [r6, #24]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001774:	68b3      	ldr	r3, [r6, #8]
 8001776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800177a:	f043 0310 	orr.w	r3, r3, #16
 800177e:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8001780:	68b3      	ldr	r3, [r6, #8]
 8001782:	f023 0307 	bic.w	r3, r3, #7
 8001786:	f043 0306 	orr.w	r3, r3, #6
 800178a:	60b3      	str	r3, [r6, #8]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 800178c:	68f3      	ldr	r3, [r6, #12]
 800178e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001792:	60f3      	str	r3, [r6, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8001794:	68f3      	ldr	r3, [r6, #12]
 8001796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800179a:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800179c:	6873      	ldr	r3, [r6, #4]
 800179e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a2:	ea43 030b 	orr.w	r3, r3, fp
 80017a6:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80017a8:	68b3      	ldr	r3, [r6, #8]
 80017aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017ae:	60b3      	str	r3, [r6, #8]
 80017b0:	f7ff fcec 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017b4:	f244 0c40 	movw	ip, #16448	; 0x4040
 80017b8:	2309      	movs	r3, #9
 80017ba:	e9cd c309 	strd	ip, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80017be:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	a909      	add	r1, sp, #36	; 0x24
 80017c2:	4861      	ldr	r0, [pc, #388]	; (8001948 <main+0x670>)
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017c4:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f001 f878 	bl	80028bc <LL_GPIO_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80017cc:	462a      	mov	r2, r5
 80017ce:	4621      	mov	r1, r4
 80017d0:	a809      	add	r0, sp, #36	; 0x24
 80017d2:	f009 f895 	bl	800a900 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	462a      	mov	r2, r5
 80017d8:	4621      	mov	r1, r4
 80017da:	a80e      	add	r0, sp, #56	; 0x38
 80017dc:	f009 f890 	bl	800a900 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80017e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017e4:	f7ff fcd2 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80017e8:	4640      	mov	r0, r8
 80017ea:	f7ff fccf 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80017ee:	4b57      	ldr	r3, [pc, #348]	; (800194c <main+0x674>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	a90e      	add	r1, sp, #56	; 0x38
 80017f2:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80017f4:	e9cd 380e 	strd	r3, r8, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f001 f860 	bl	80028bc <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80017fc:	4b54      	ldr	r3, [pc, #336]	; (8001950 <main+0x678>)
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80017fe:	f506 3692 	add.w	r6, r6, #74752	; 0x12400
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	a909      	add	r1, sp, #36	; 0x24
 8001806:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800180a:	f022 0210 	bic.w	r2, r2, #16
 800180e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4630      	mov	r0, r6
 8001814:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800181c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	f022 0220 	bic.w	r2, r2, #32
 8001824:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800182c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001834:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800183c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001840:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800184c:	601a      	str	r2, [r3, #0]
  TIM_InitStruct.Autoreload = 65535;
 800184e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_InitStruct.Prescaler = 0;
 8001852:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001856:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800185a:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_InitStruct.RepetitionCounter = 0;
 800185c:	940d      	str	r4, [sp, #52]	; 0x34
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800185e:	f001 f907 	bl	8002a70 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001862:	6833      	ldr	r3, [r6, #0]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001864:	462a      	mov	r2, r5
 8001866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800186a:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800186c:	68b3      	ldr	r3, [r6, #8]
 800186e:	4621      	mov	r1, r4
 8001870:	ea03 030a 	and.w	r3, r3, sl
 8001874:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001876:	6873      	ldr	r3, [r6, #4]
 8001878:	a809      	add	r0, sp, #36	; 0x24
 800187a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800187e:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001880:	68b3      	ldr	r3, [r6, #8]
 8001882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001886:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001888:	69b3      	ldr	r3, [r6, #24]
 800188a:	f023 0303 	bic.w	r3, r3, #3
 800188e:	ea43 0309 	orr.w	r3, r3, r9
 8001892:	61b3      	str	r3, [r6, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001894:	69b3      	ldr	r3, [r6, #24]
 8001896:	f023 030c 	bic.w	r3, r3, #12
 800189a:	61b3      	str	r3, [r6, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800189c:	69b3      	ldr	r3, [r6, #24]
 800189e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018a2:	61b3      	str	r3, [r6, #24]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80018a4:	6a33      	ldr	r3, [r6, #32]
 80018a6:	f023 030a 	bic.w	r3, r3, #10
 80018aa:	6233      	str	r3, [r6, #32]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80018ac:	e9cd 4404 	strd	r4, r4, [sp, #16]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80018b0:	f009 f826 	bl	800a900 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	462a      	mov	r2, r5
 80018b6:	4621      	mov	r1, r4
 80018b8:	a80e      	add	r0, sp, #56	; 0x38
 80018ba:	f009 f821 	bl	800a900 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 80018be:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018c2:	f7ff fc63 	bl	800118c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80018c6:	4640      	mov	r0, r8
 80018c8:	f7ff fc60 	bl	800118c <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80018cc:	f240 1301 	movw	r3, #257	; 0x101
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	a90e      	add	r1, sp, #56	; 0x38
 80018d2:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80018d4:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f000 fff0 	bl	80028bc <LL_GPIO_Init>
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80018dc:	f44f 7380 	mov.w	r3, #256	; 0x100
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 80018e0:	4d1c      	ldr	r5, [pc, #112]	; (8001954 <main+0x67c>)
 80018e2:	a904      	add	r1, sp, #16
 80018e4:	4628      	mov	r0, r5
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80018e6:	9305      	str	r3, [sp, #20]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80018e8:	9404      	str	r4, [sp, #16]
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 80018ea:	f000 ff5b 	bl	80027a4 <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80018ee:	f44f 2e60 	mov.w	lr, #917504	; 0xe0000
 80018f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 80018f6:	a909      	add	r1, sp, #36	; 0x24
 80018f8:	4628      	mov	r0, r5
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80018fa:	e9cd e309 	strd	lr, r3, [sp, #36]	; 0x24
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80018fe:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001902:	940d      	str	r4, [sp, #52]	; 0x34
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8001904:	f000 ff63 	bl	80027ce <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001908:	4628      	mov	r0, r5
 800190a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800190e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001912:	f7ff fc49 	bl	80011a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001916:	4622      	mov	r2, r4
 8001918:	4628      	mov	r0, r5
 800191a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800191e:	f7ff fc5d 	bl	80011dc <LL_ADC_SetChannelSamplingTime>
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_0);
 8001922:	4628      	mov	r0, r5
 8001924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001928:	f240 2105 	movw	r1, #517	; 0x205
 800192c:	f7ff fc3c 	bl	80011a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001930:	4628      	mov	r0, r5
 8001932:	4622      	mov	r2, r4
 8001934:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001938:	f7ff fc50 	bl	80011dc <LL_ADC_SetChannelSamplingTime>
  app_main();
 800193c:	f002 ffd4 	bl	80048e8 <app_main>
}
 8001940:	4620      	mov	r0, r4
 8001942:	b017      	add	sp, #92	; 0x5c
 8001944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001948:	40010c00 	.word	0x40010c00
 800194c:	04010001 	.word	0x04010001
 8001950:	4002001c 	.word	0x4002001c
 8001954:	40012800 	.word	0x40012800

08001958 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001958:	4770      	bx	lr
	...

0800195c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_MspInit+0x48>)
{
 800195e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001960:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001962:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001964:	f042 0201 	orr.w	r2, r2, #1
 8001968:	619a      	str	r2, [r3, #24]
 800196a:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800196c:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001970:	f002 0201 	and.w	r2, r2, #1
 8001974:	9200      	str	r2, [sp, #0]
 8001976:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800197e:	61da      	str	r2, [r3, #28]
 8001980:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001982:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800198c:	f000 f8b6 	bl	8001afc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001990:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_MspInit+0x4c>)
 8001992:	6853      	ldr	r3, [r2, #4]
 8001994:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001998:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800199c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199e:	b003      	add	sp, #12
 80019a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000

080019ac <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019ac:	4770      	bx	lr

080019ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	e7fe      	b.n	80019b2 <BusFault_Handler>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	e7fe      	b.n	80019b4 <UsageFault_Handler>

080019b6 <DebugMon_Handler>:
 80019b6:	4770      	bx	lr

080019b8 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019b8:	4801      	ldr	r0, [pc, #4]	; (80019c0 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80019ba:	f000 b99d 	b.w	8001cf8 <HAL_PCD_IRQHandler>
 80019be:	bf00      	nop
 80019c0:	20003490 	.word	0x20003490

080019c4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <_sbrk+0x30>)
{
 80019c6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80019c8:	6819      	ldr	r1, [r3, #0]
{
 80019ca:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80019cc:	b909      	cbnz	r1, 80019d2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80019ce:	490a      	ldr	r1, [pc, #40]	; (80019f8 <_sbrk+0x34>)
 80019d0:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	4909      	ldr	r1, [pc, #36]	; (80019fc <_sbrk+0x38>)
 80019d6:	4c0a      	ldr	r4, [pc, #40]	; (8001a00 <_sbrk+0x3c>)
 80019d8:	4402      	add	r2, r0
 80019da:	1b09      	subs	r1, r1, r4
 80019dc:	428a      	cmp	r2, r1
 80019de:	d906      	bls.n	80019ee <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80019e0:	f008 ff1c 	bl	800a81c <__errno>
 80019e4:	230c      	movs	r3, #12
 80019e6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80019ec:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80019ee:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80019f0:	e7fc      	b.n	80019ec <_sbrk+0x28>
 80019f2:	bf00      	nop
 80019f4:	20000384 	.word	0x20000384
 80019f8:	20004678 	.word	0x20004678
 80019fc:	20005000 	.word	0x20005000
 8001a00:	00000400 	.word	0x00000400

08001a04 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a04:	4770      	bx	lr
	...

08001a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a0a:	e003      	b.n	8001a14 <LoopCopyDataInit>

08001a0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a12:	3104      	adds	r1, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a14:	480a      	ldr	r0, [pc, #40]	; (8001a40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a1c:	d3f6      	bcc.n	8001a0c <CopyDataInit>
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a20:	e002      	b.n	8001a28 <LoopFillZerobss>

08001a22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a24:	f842 3b04 	str.w	r3, [r2], #4

08001a28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a2c:	d3f9      	bcc.n	8001a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a2e:	f7ff ffe9 	bl	8001a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a32:	f008 fef9 	bl	800a828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a36:	f7ff fc4f 	bl	80012d8 <main>
  bx lr
 8001a3a:	4770      	bx	lr
  ldr r3, =_sidata
 8001a3c:	0800cea0 	.word	0x0800cea0
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a44:	20000368 	.word	0x20000368
  ldr r2, =_sbss
 8001a48:	20000368 	.word	0x20000368
  ldr r3, = _ebss
 8001a4c:	20004674 	.word	0x20004674

08001a50 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <CAN1_RX1_IRQHandler>
	...

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_InitTick+0x3c>)
{
 8001a58:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5a:	7818      	ldrb	r0, [r3, #0]
 8001a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a60:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a64:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <HAL_InitTick+0x40>)
 8001a66:	6810      	ldr	r0, [r2, #0]
 8001a68:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a6c:	f000 f888 	bl	8001b80 <HAL_SYSTICK_Config>
 8001a70:	4604      	mov	r4, r0
 8001a72:	b958      	cbnz	r0, 8001a8c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a74:	2d0f      	cmp	r5, #15
 8001a76:	d809      	bhi.n	8001a8c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f000 f83c 	bl	8001afc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a84:	4620      	mov	r0, r4
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_InitTick+0x44>)
 8001a88:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001a8a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	e7fc      	b.n	8001a8a <HAL_InitTick+0x36>
 8001a90:	20000004 	.word	0x20000004
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000008 	.word	0x20000008

08001a9c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_Init+0x20>)
{
 8001a9e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa4:	f043 0310 	orr.w	r3, r3, #16
 8001aa8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aaa:	f000 f815 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f7ff ffd0 	bl	8001a54 <HAL_InitTick>
  HAL_MspInit();
 8001ab4:	f7ff ff52 	bl	800195c <HAL_MspInit>
}
 8001ab8:	2000      	movs	r0, #0
 8001aba:	bd08      	pop	{r3, pc}
 8001abc:	40022000 	.word	0x40022000

08001ac0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ac0:	4a03      	ldr	r2, [pc, #12]	; (8001ad0 <HAL_IncTick+0x10>)
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <HAL_IncTick+0x14>)
 8001ac4:	6811      	ldr	r1, [r2, #0]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	440b      	add	r3, r1
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000804 	.word	0x20000804
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ada:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ade:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ae6:	041b      	lsls	r3, r3, #16
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001af2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001af4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afe:	b570      	push	{r4, r5, r6, lr}
 8001b00:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b02:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b06:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0a:	f1c4 0507 	rsb	r5, r4, #7
 8001b0e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b10:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b14:	bf28      	it	cs
 8001b16:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b18:	2b06      	cmp	r3, #6
 8001b1a:	bf98      	it	ls
 8001b1c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b22:	bf88      	it	hi
 8001b24:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b26:	ea21 0303 	bic.w	r3, r1, r3
 8001b2a:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	fa06 f404 	lsl.w	r4, r6, r4
 8001b30:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001b34:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b36:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	bfa8      	it	ge
 8001b3c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001b40:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	bfb8      	it	lt
 8001b46:	4a06      	ldrlt	r2, [pc, #24]	; (8001b60 <HAL_NVIC_SetPriority+0x64>)
 8001b48:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	bfab      	itete	ge
 8001b4c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}
 8001b5c:	e000ed00 	.word	0xe000ed00
 8001b60:	e000ed14 	.word	0xe000ed14

08001b64 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b64:	2800      	cmp	r0, #0
 8001b66:	db08      	blt.n	8001b7a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b68:	2301      	movs	r3, #1
 8001b6a:	0942      	lsrs	r2, r0, #5
 8001b6c:	f000 001f 	and.w	r0, r0, #31
 8001b70:	fa03 f000 	lsl.w	r0, r3, r0
 8001b74:	4b01      	ldr	r3, [pc, #4]	; (8001b7c <HAL_NVIC_EnableIRQ+0x18>)
 8001b76:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	3801      	subs	r0, #1
 8001b82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b86:	d20a      	bcs.n	8001b9e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bae:	4604      	mov	r4, r0
{
 8001bb0:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001bb2:	b310      	cbz	r0, 8001bfa <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bb4:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8001bb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bbc:	b91b      	cbnz	r3, 8001bc6 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bbe:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bc2:	f002 fc67 	bl	8004494 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bc6:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bc8:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bca:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8001bcc:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bd0:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8001bd4:	f001 f8ae 	bl	8002d34 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001bdc:	682b      	ldr	r3, [r5, #0]
 8001bde:	4625      	mov	r5, r4
 8001be0:	6033      	str	r3, [r6, #0]
 8001be2:	1d27      	adds	r7, r4, #4
 8001be4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001be8:	f855 0b10 	ldr.w	r0, [r5], #16
 8001bec:	f001 f892 	bl	8002d14 <USB_CoreInit>
 8001bf0:	4606      	mov	r6, r0
 8001bf2:	b120      	cbz	r0, 8001bfe <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8001bfa:	2501      	movs	r5, #1
 8001bfc:	e04b      	b.n	8001c96 <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bfe:	4601      	mov	r1, r0
 8001c00:	6820      	ldr	r0, [r4, #0]
 8001c02:	f001 f8a1 	bl	8002d48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c06:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c08:	f04f 0e01 	mov.w	lr, #1
 8001c0c:	2628      	movs	r6, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c0e:	4601      	mov	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c10:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8001c14:	b2c2      	uxtb	r2, r0
 8001c16:	4594      	cmp	ip, r2
 8001c18:	f100 0001 	add.w	r0, r0, #1
 8001c1c:	d818      	bhi.n	8001c50 <HAL_PCD_Init+0xa4>
 8001c1e:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c20:	2628      	movs	r6, #40	; 0x28
 8001c22:	4619      	mov	r1, r3
 8001c24:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c26:	4584      	cmp	ip, r0
 8001c28:	f103 0301 	add.w	r3, r3, #1
 8001c2c:	d81d      	bhi.n	8001c6a <HAL_PCD_Init+0xbe>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c30:	466e      	mov	r6, sp
 8001c32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c34:	682b      	ldr	r3, [r5, #0]
 8001c36:	6033      	str	r3, [r6, #0]
 8001c38:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001c3c:	6820      	ldr	r0, [r4, #0]
 8001c3e:	f001 f885 	bl	8002d4c <USB_DevInit>
 8001c42:	2301      	movs	r3, #1
 8001c44:	4605      	mov	r5, r0
 8001c46:	b1f8      	cbz	r0, 8001c88 <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
 8001c4e:	e7d4      	b.n	8001bfa <HAL_PCD_Init+0x4e>
 8001c50:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001c54:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001c58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c5c:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c5e:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c62:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c66:	6419      	str	r1, [r3, #64]	; 0x40
 8001c68:	e7d4      	b.n	8001c14 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8001c6a:	fb06 4200 	mla	r2, r6, r0, r4
 8001c6e:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001c72:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c76:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c7a:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c7e:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c82:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 8001c86:	e7cd      	b.n	8001c24 <HAL_PCD_Init+0x78>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001c88:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c8c:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c90:	6820      	ldr	r0, [r4, #0]
 8001c92:	f001 fada 	bl	800324a <USB_DevDisconnect>

  return HAL_OK;
}
 8001c96:	4628      	mov	r0, r5
 8001c98:	b007      	add	sp, #28
 8001c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c9c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8001c9e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8001ca2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d010      	beq.n	8001cca <HAL_PCD_Start+0x2e>
 8001ca8:	2501      	movs	r5, #1
 8001caa:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cae:	6800      	ldr	r0, [r0, #0]
 8001cb0:	f001 f837 	bl	8002d22 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f002 fd1d 	bl	80046f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001cbc:	6820      	ldr	r0, [r4, #0]
 8001cbe:	f001 fac2 	bl	8003246 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001cc8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001cca:	2002      	movs	r0, #2
 8001ccc:	e7fc      	b.n	8001cc8 <HAL_PCD_Start+0x2c>

08001cce <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001cce:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8001cd2:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001cd4:	2a01      	cmp	r2, #1
{
 8001cd6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_PCD_SetAddress+0x24>
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ce0:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ce4:	6800      	ldr	r0, [r0, #0]
 8001ce6:	f001 faa8 	bl	800323a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001cf0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	e7fc      	b.n	8001cf0 <HAL_PCD_SetAddress+0x22>
	...

08001cf8 <HAL_PCD_IRQHandler>:
{
 8001cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d00:	6800      	ldr	r0, [r0, #0]
 8001d02:	f001 faa4 	bl	800324e <USB_ReadInterrupts>
 8001d06:	0402      	lsls	r2, r0, #16
 8001d08:	d509      	bpl.n	8001d1e <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d0a:	f8df 9828 	ldr.w	r9, [pc, #2088]	; 8002534 <HAL_PCD_IRQHandler+0x83c>
 8001d0e:	f8df 8828 	ldr.w	r8, [pc, #2088]	; 8002538 <HAL_PCD_IRQHandler+0x840>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d12:	6820      	ldr	r0, [r4, #0]
 8001d14:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001d18:	041b      	lsls	r3, r3, #16
 8001d1a:	f100 80bc 	bmi.w	8001e96 <HAL_PCD_IRQHandler+0x19e>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d1e:	6820      	ldr	r0, [r4, #0]
 8001d20:	f001 fa95 	bl	800324e <USB_ReadInterrupts>
 8001d24:	0543      	lsls	r3, r0, #21
 8001d26:	d50f      	bpl.n	8001d48 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d28:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001d2a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d2c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d34:	041b      	lsls	r3, r3, #16
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001d3c:	f002 fbe5 	bl	800450a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d40:	2100      	movs	r1, #0
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff ffc3 	bl	8001cce <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d48:	6820      	ldr	r0, [r4, #0]
 8001d4a:	f001 fa80 	bl	800324e <USB_ReadInterrupts>
 8001d4e:	0447      	lsls	r7, r0, #17
 8001d50:	d508      	bpl.n	8001d64 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d52:	6822      	ldr	r2, [r4, #0]
 8001d54:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d5c:	041b      	lsls	r3, r3, #16
 8001d5e:	0c1b      	lsrs	r3, r3, #16
 8001d60:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d64:	6820      	ldr	r0, [r4, #0]
 8001d66:	f001 fa72 	bl	800324e <USB_ReadInterrupts>
 8001d6a:	0486      	lsls	r6, r0, #18
 8001d6c:	d508      	bpl.n	8001d80 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	0c1b      	lsrs	r3, r3, #16
 8001d7c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d80:	6820      	ldr	r0, [r4, #0]
 8001d82:	f001 fa64 	bl	800324e <USB_ReadInterrupts>
 8001d86:	04c5      	lsls	r5, r0, #19
 8001d88:	d51c      	bpl.n	8001dc4 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d8a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001d8c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d8e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001d92:	f023 0304 	bic.w	r3, r3, #4
 8001d96:	041b      	lsls	r3, r3, #16
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d9e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001da2:	f023 0308 	bic.w	r3, r3, #8
 8001da6:	041b      	lsls	r3, r3, #16
 8001da8:	0c1b      	lsrs	r3, r3, #16
 8001daa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001dae:	f002 fbcf 	bl	8004550 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001db2:	6822      	ldr	r2, [r4, #0]
 8001db4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	0c1b      	lsrs	r3, r3, #16
 8001dc0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001dc4:	6820      	ldr	r0, [r4, #0]
 8001dc6:	f001 fa42 	bl	800324e <USB_ReadInterrupts>
 8001dca:	0500      	lsls	r0, r0, #20
 8001dcc:	d541      	bpl.n	8001e52 <HAL_PCD_IRQHandler+0x15a>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001dd6:	f82d 1012 	strh.w	r1, [sp, r2, lsl #1]
 8001dda:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8001ddc:	2a08      	cmp	r2, #8
 8001dde:	d1f8      	bne.n	8001dd2 <HAL_PCD_IRQHandler+0xda>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001de0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001de4:	f042 0201 	orr.w	r2, r2, #1
 8001de8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001dec:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	0412      	lsls	r2, r2, #16
 8001df6:	0c12      	lsrs	r2, r2, #16
 8001df8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001dfc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001e00:	0551      	lsls	r1, r2, #21
 8001e02:	d5fb      	bpl.n	8001dfc <HAL_PCD_IRQHandler+0x104>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e04:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0c:	0412      	lsls	r2, r2, #16
 8001e0e:	0c12      	lsrs	r2, r2, #16
 8001e10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001e14:	2200      	movs	r2, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001e16:	f83d 1012 	ldrh.w	r1, [sp, r2, lsl #1]
 8001e1a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8001e1e:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8001e20:	2a08      	cmp	r2, #8
 8001e22:	d1f8      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x11e>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e24:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001e28:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e2a:	f042 0208 	orr.w	r2, r2, #8
 8001e2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e32:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3a:	0412      	lsls	r2, r2, #16
 8001e3c:	0c12      	lsrs	r2, r2, #16
 8001e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e42:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001e46:	f042 0204 	orr.w	r2, r2, #4
 8001e4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001e4e:	f002 fb6f 	bl	8004530 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e52:	6820      	ldr	r0, [r4, #0]
 8001e54:	f001 f9fb 	bl	800324e <USB_ReadInterrupts>
 8001e58:	0582      	lsls	r2, r0, #22
 8001e5a:	d50b      	bpl.n	8001e74 <HAL_PCD_IRQHandler+0x17c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e5c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001e5e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e60:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	0c1b      	lsrs	r3, r3, #16
 8001e6c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001e70:	f002 fb47 	bl	8004502 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e74:	6820      	ldr	r0, [r4, #0]
 8001e76:	f001 f9ea 	bl	800324e <USB_ReadInterrupts>
 8001e7a:	05c3      	lsls	r3, r0, #23
 8001e7c:	d508      	bpl.n	8001e90 <HAL_PCD_IRQHandler+0x198>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e7e:	6822      	ldr	r2, [r4, #0]
 8001e80:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	0c1b      	lsrs	r3, r3, #16
 8001e8c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001e90:	b005      	add	sp, #20
 8001e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8001e96:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8001e9a:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8001e9c:	f011 060f 	ands.w	r6, r1, #15
 8001ea0:	f040 80b1 	bne.w	8002006 <HAL_PCD_IRQHandler+0x30e>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ea4:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ea8:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001eaa:	d12a      	bne.n	8001f02 <HAL_PCD_IRQHandler+0x20a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eac:	ea09 0303 	and.w	r3, r9, r3
 8001eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eb4:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001eb6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001eba:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001ec2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001ec6:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001eca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed0:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001ed2:	4413      	add	r3, r2
 8001ed4:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f002 fb0b 	bl	80044f2 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001edc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f43f af16 	beq.w	8001d12 <HAL_PCD_IRQHandler+0x1a>
 8001ee6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ee8:	2a00      	cmp	r2, #0
 8001eea:	f47f af12 	bne.w	8001d12 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001eee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001ef2:	6821      	ldr	r1, [r4, #0]
 8001ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef8:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001efc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001f00:	e707      	b.n	8001d12 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f02:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f04:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8001f08:	d020      	beq.n	8001f4c <HAL_PCD_IRQHandler+0x254>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f0a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f0e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f12:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f1a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001f1e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f22:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f2a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f2e:	f001 fc4f 	bl	80037d0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f32:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001f34:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f36:	8813      	ldrh	r3, [r2, #0]
 8001f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3c:	051b      	lsls	r3, r3, #20
 8001f3e:	0d1b      	lsrs	r3, r3, #20
 8001f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f44:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001f46:	f002 fac5 	bl	80044d4 <HAL_PCD_SetupStageCallback>
 8001f4a:	e6e2      	b.n	8001d12 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f4c:	041f      	lsls	r7, r3, #16
 8001f4e:	f57f aee0 	bpl.w	8001d12 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f52:	8803      	ldrh	r3, [r0, #0]
 8001f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f58:	051b      	lsls	r3, r3, #20
 8001f5a:	0d1b      	lsrs	r3, r3, #20
 8001f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f60:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f62:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f66:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f6e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001f72:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f7a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f7e:	b18b      	cbz	r3, 8001fa4 <HAL_PCD_IRQHandler+0x2ac>
 8001f80:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8001f84:	b171      	cbz	r1, 8001fa4 <HAL_PCD_IRQHandler+0x2ac>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f86:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001f8a:	f001 fc21 	bl	80037d0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001f8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001f92:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f96:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8001f98:	4413      	add	r3, r2
 8001f9a:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f002 fa9e 	bl	80044e0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fa4:	6821      	ldr	r1, [r4, #0]
 8001fa6:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8001faa:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001fae:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	b9bd      	cbnz	r5, 8001fe6 <HAL_PCD_IRQHandler+0x2ee>
 8001fb6:	5ac2      	ldrh	r2, [r0, r3]
 8001fb8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001fbc:	0412      	lsls	r2, r2, #16
 8001fbe:	0c12      	lsrs	r2, r2, #16
 8001fc0:	52c2      	strh	r2, [r0, r3]
 8001fc2:	5ac2      	ldrh	r2, [r0, r3]
 8001fc4:	ea48 0202 	orr.w	r2, r8, r2
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fcc:	880b      	ldrh	r3, [r1, #0]
 8001fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe2:	800b      	strh	r3, [r1, #0]
 8001fe4:	e695      	b.n	8001d12 <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fe6:	2d3e      	cmp	r5, #62	; 0x3e
 8001fe8:	d805      	bhi.n	8001ff6 <HAL_PCD_IRQHandler+0x2fe>
 8001fea:	086a      	lsrs	r2, r5, #1
 8001fec:	07ee      	lsls	r6, r5, #31
 8001fee:	bf48      	it	mi
 8001ff0:	3201      	addmi	r2, #1
 8001ff2:	0292      	lsls	r2, r2, #10
 8001ff4:	e7e8      	b.n	8001fc8 <HAL_PCD_IRQHandler+0x2d0>
 8001ff6:	096a      	lsrs	r2, r5, #5
 8001ff8:	06ed      	lsls	r5, r5, #27
 8001ffa:	bf08      	it	eq
 8001ffc:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002000:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8002004:	e7e0      	b.n	8001fc8 <HAL_PCD_IRQHandler+0x2d0>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002006:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
 800200a:	b2bf      	uxth	r7, r7
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800200c:	0439      	lsls	r1, r7, #16
 800200e:	f140 80f2 	bpl.w	80021f6 <HAL_PCD_IRQHandler+0x4fe>
        if (ep->doublebuffer == 0U)
 8002012:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002014:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002018:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800201c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002020:	051b      	lsls	r3, r3, #20
 8002022:	0d1b      	lsrs	r3, r3, #20
 8002024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002028:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800202c:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8002030:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8002034:	b9ab      	cbnz	r3, 8002062 <HAL_PCD_IRQHandler+0x36a>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002036:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800203a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800203e:	3306      	adds	r3, #6
 8002040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002044:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002048:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800204c:	2d00      	cmp	r5, #0
 800204e:	f000 80b6 	beq.w	80021be <HAL_PCD_IRQHandler+0x4c6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002052:	462b      	mov	r3, r5
 8002054:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002058:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800205c:	f001 fbb8 	bl	80037d0 <USB_ReadPMA>
 8002060:	e0ad      	b.n	80021be <HAL_PCD_IRQHandler+0x4c6>
          if (ep->type == EP_TYPE_BULK)
 8002062:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8002066:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800206a:	2b02      	cmp	r3, #2
 800206c:	f040 8089 	bne.w	8002182 <HAL_PCD_IRQHandler+0x48a>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002070:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 8002074:	ea4f 05c2 	mov.w	r5, r2, lsl #3
 8002078:	f8d1 3180 	ldr.w	r3, [r1, #384]	; 0x180
 800207c:	f007 0e40 	and.w	lr, r7, #64	; 0x40
 8002080:	d03e      	beq.n	8002100 <HAL_PCD_IRQHandler+0x408>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002082:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 8002086:	4455      	add	r5, sl
 8002088:	3502      	adds	r5, #2
 800208a:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 800208e:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002092:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
    }
    else
    {
      ep->xfer_len = 0U;
 8002094:	bf8c      	ite	hi
 8002096:	2300      	movhi	r3, #0
      ep->xfer_len -= count;
 8002098:	1b5b      	subls	r3, r3, r5
      ep->xfer_len = 0U;
 800209a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
 800209e:	2328      	movs	r3, #40	; 0x28
 80020a0:	fb03 4306 	mla	r3, r3, r6, r4
 80020a4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80020a8:	b96b      	cbnz	r3, 80020c6 <HAL_PCD_IRQHandler+0x3ce>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020c6:	f1be 0f00 	cmp.w	lr, #0
 80020ca:	d010      	beq.n	80020ee <HAL_PCD_IRQHandler+0x3f6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020cc:	2328      	movs	r3, #40	; 0x28
 80020ce:	fb03 4306 	mla	r3, r3, r6, r4
 80020d2:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 80020d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020de:	051b      	lsls	r3, r3, #20
 80020e0:	0d1b      	lsrs	r3, r3, #20
 80020e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020ea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80020ee:	2d00      	cmp	r5, #0
 80020f0:	d065      	beq.n	80021be <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020f2:	2128      	movs	r1, #40	; 0x28
 80020f4:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020f8:	462b      	mov	r3, r5
 80020fa:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80020fe:	e7ab      	b.n	8002058 <HAL_PCD_IRQHandler+0x360>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002100:	f8b0 b050 	ldrh.w	fp, [r0, #80]	; 0x50
 8002104:	445d      	add	r5, fp
 8002106:	3506      	adds	r5, #6
 8002108:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 800210c:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002110:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
 8002112:	bf9c      	itt	ls
 8002114:	1b5b      	subls	r3, r3, r5
 8002116:	f8c1 3180 	strls.w	r3, [r1, #384]	; 0x180
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 800211a:	f04f 0328 	mov.w	r3, #40	; 0x28
 800211e:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 8002122:	bf88      	it	hi
 8002124:	f8c1 a180 	strhi.w	sl, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8002128:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800212c:	b96b      	cbnz	r3, 800214a <HAL_PCD_IRQHandler+0x452>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800212e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800213e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002146:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800214a:	f1be 0f00 	cmp.w	lr, #0
 800214e:	d110      	bne.n	8002172 <HAL_PCD_IRQHandler+0x47a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002150:	2328      	movs	r3, #40	; 0x28
 8002152:	fb03 4306 	mla	r3, r3, r6, r4
 8002156:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 800215a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800215e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002162:	051b      	lsls	r3, r3, #20
 8002164:	0d1b      	lsrs	r3, r3, #20
 8002166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800216e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8002172:	b325      	cbz	r5, 80021be <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002174:	2128      	movs	r1, #40	; 0x28
 8002176:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800217a:	462b      	mov	r3, r5
 800217c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002180:	e76a      	b.n	8002058 <HAL_PCD_IRQHandler+0x360>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002182:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800218a:	051b      	lsls	r3, r3, #20
 800218c:	0d1b      	lsrs	r3, r3, #20
 800218e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002192:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002196:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800219a:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 800219e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021a8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021ac:	d05e      	beq.n	800226c <HAL_PCD_IRQHandler+0x574>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021ae:	3202      	adds	r2, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80021b6:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80021ba:	2d00      	cmp	r5, #0
 80021bc:	d19c      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x400>
        ep->xfer_count += count;
 80021be:	2128      	movs	r1, #40	; 0x28
 80021c0:	4371      	muls	r1, r6
 80021c2:	1863      	adds	r3, r4, r1
 80021c4:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80021c8:	442a      	add	r2, r5
 80021ca:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80021ce:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80021d2:	442a      	add	r2, r5
 80021d4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021d8:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80021dc:	b11a      	cbz	r2, 80021e6 <HAL_PCD_IRQHandler+0x4ee>
 80021de:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80021e2:	429d      	cmp	r5, r3
 80021e4:	d24b      	bcs.n	800227e <HAL_PCD_IRQHandler+0x586>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021e6:	2328      	movs	r3, #40	; 0x28
 80021e8:	fb03 4306 	mla	r3, r3, r6, r4
 80021ec:	4620      	mov	r0, r4
 80021ee:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80021f2:	f002 f975 	bl	80044e0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021f6:	063a      	lsls	r2, r7, #24
 80021f8:	f57f ad8b 	bpl.w	8001d12 <HAL_PCD_IRQHandler+0x1a>
 80021fc:	2528      	movs	r5, #40	; 0x28
 80021fe:	6820      	ldr	r0, [r4, #0]
 8002200:	fb05 4506 	mla	r5, r5, r6, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002204:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002208:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800220c:	ea09 0303 	and.w	r3, r9, r3
 8002210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002214:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8002218:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800221c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002220:	2b02      	cmp	r3, #2
 8002222:	d101      	bne.n	8002228 <HAL_PCD_IRQHandler+0x530>
 8002224:	05fb      	lsls	r3, r7, #23
 8002226:	d43d      	bmi.n	80022a4 <HAL_PCD_IRQHandler+0x5ac>
          if (ep->xfer_len > TxByteNbre)
 8002228:	2328      	movs	r3, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800222a:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 800222e:	fb03 4c06 	mla	ip, r3, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002232:	f10e 0e02 	add.w	lr, lr, #2
 8002236:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
 800223a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 800223e:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 8002242:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002246:	4297      	cmp	r7, r2
            ep->xfer_len = 0U;
 8002248:	bf92      	itee	ls
 800224a:	2100      	movls	r1, #0
            ep->xfer_len -= TxByteNbre;
 800224c:	1abf      	subhi	r7, r7, r2
 800224e:	f8cc 7040 	strhi.w	r7, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8002252:	fb03 4706 	mla	r7, r3, r6, r4
            ep->xfer_len = 0U;
 8002256:	bf98      	it	ls
 8002258:	f8cc 1040 	strls.w	r1, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800225c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800225e:	b9a9      	cbnz	r1, 800228c <HAL_PCD_IRQHandler+0x594>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002260:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002264:	4620      	mov	r0, r4
 8002266:	f002 f944 	bl	80044f2 <HAL_PCD_DataInStageCallback>
 800226a:	e552      	b.n	8001d12 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800226c:	3206      	adds	r2, #6
 800226e:	4413      	add	r3, r2
 8002270:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002274:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8002278:	2d00      	cmp	r5, #0
 800227a:	d0a0      	beq.n	80021be <HAL_PCD_IRQHandler+0x4c6>
 800227c:	e77d      	b.n	800217a <HAL_PCD_IRQHandler+0x482>
        ep = &hpcd->OUT_ep[epindex];
 800227e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002282:	4421      	add	r1, r4
 8002284:	6820      	ldr	r0, [r4, #0]
 8002286:	f000 fff7 	bl	8003278 <USB_EPStartXfer>
 800228a:	e7b4      	b.n	80021f6 <HAL_PCD_IRQHandler+0x4fe>
            ep->xfer_buff += TxByteNbre;
 800228c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 800228e:	fb06 3303 	mla	r3, r6, r3, r3
            ep->xfer_buff += TxByteNbre;
 8002292:	4411      	add	r1, r2
 8002294:	63f9      	str	r1, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002298:	440a      	add	r2, r1
 800229a:	647a      	str	r2, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800229c:	18e1      	adds	r1, r4, r3
 800229e:	f000 ffeb 	bl	8003278 <USB_EPStartXfer>
 80022a2:	e536      	b.n	8001d12 <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022a4:	f017 0e40 	ands.w	lr, r7, #64	; 0x40
 80022a8:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 80022ac:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80022ae:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80022b2:	f000 809e 	beq.w	80023f2 <HAL_PCD_IRQHandler+0x6fa>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022b6:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 80022ba:	b2bf      	uxth	r7, r7
 80022bc:	44f4      	add	ip, lr
 80022be:	f10c 0c02 	add.w	ip, ip, #2
 80022c2:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]

    if (ep->xfer_len > TxByteNbre)
 80022c6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80022ca:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 80022cc:	bf2c      	ite	cs
 80022ce:	2300      	movcs	r3, #0
      ep->xfer_len -= TxByteNbre;
 80022d0:	eba3 030c 	subcc.w	r3, r3, ip
      ep->xfer_len = 0U;
 80022d4:	642b      	str	r3, [r5, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022d6:	2328      	movs	r3, #40	; 0x28
 80022d8:	fb03 4306 	mla	r3, r3, r6, r4
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	b9ab      	cbnz	r3, 800230c <HAL_PCD_IRQHandler+0x614>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022e0:	4620      	mov	r0, r4
 80022e2:	f002 f906 	bl	80044f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022e6:	2f00      	cmp	r7, #0
 80022e8:	f000 80a1 	beq.w	800242e <HAL_PCD_IRQHandler+0x736>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022ec:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80022f0:	6822      	ldr	r2, [r4, #0]
 80022f2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80022f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022fa:	051b      	lsls	r3, r3, #20
 80022fc:	0d1b      	lsrs	r3, r3, #20
 80022fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002306:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800230a:	e090      	b.n	800242e <HAL_PCD_IRQHandler+0x736>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800230c:	b15f      	cbz	r7, 8002326 <HAL_PCD_IRQHandler+0x62e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800230e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002316:	051b      	lsls	r3, r3, #20
 8002318:	0d1b      	lsrs	r3, r3, #20
 800231a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800231e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002322:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002326:	2328      	movs	r3, #40	; 0x28
 8002328:	fb03 4306 	mla	r3, r3, r6, r4
 800232c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8002330:	2a01      	cmp	r2, #1
 8002332:	d17c      	bne.n	800242e <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 8002334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8002336:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8002338:	4462      	add	r2, ip
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800233c:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 800233e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8002340:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8002342:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8002344:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002346:	d325      	bcc.n	8002394 <HAL_PCD_IRQHandler+0x69c>
          ep->xfer_len_db -= len;
 8002348:	1abf      	subs	r7, r7, r2
 800234a:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800234c:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8002350:	b293      	uxth	r3, r2
 8002352:	2f00      	cmp	r7, #0
 8002354:	d141      	bne.n	80023da <HAL_PCD_IRQHandler+0x6e2>
 8002356:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 800235a:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 800235e:	44bc      	add	ip, r7
 8002360:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 8002364:	013f      	lsls	r7, r7, #4
 8002366:	bb02      	cbnz	r2, 80023aa <HAL_PCD_IRQHandler+0x6b2>
 8002368:	f83c 2007 	ldrh.w	r2, [ip, r7]
 800236c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002370:	0412      	lsls	r2, r2, #16
 8002372:	0c12      	lsrs	r2, r2, #16
 8002374:	f82c 2007 	strh.w	r2, [ip, r7]
 8002378:	f83c 2007 	ldrh.w	r2, [ip, r7]
 800237c:	ea48 0202 	orr.w	r2, r8, r2
 8002380:	b292      	uxth	r2, r2
 8002382:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002386:	2228      	movs	r2, #40	; 0x28
 8002388:	fb02 4606 	mla	r6, r2, r6, r4
 800238c:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800238e:	f000 ff63 	bl	8003258 <USB_WritePMA>
 8002392:	e04c      	b.n	800242e <HAL_PCD_IRQHandler+0x736>
        else if (ep->xfer_len_db == 0U)
 8002394:	b91f      	cbnz	r7, 800239e <HAL_PCD_IRQHandler+0x6a6>
          ep->xfer_fill_db = 0U;
 8002396:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 800239a:	4662      	mov	r2, ip
 800239c:	e7d6      	b.n	800234c <HAL_PCD_IRQHandler+0x654>
          ep->xfer_fill_db = 0U;
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80023a4:	649a      	str	r2, [r3, #72]	; 0x48
 80023a6:	463a      	mov	r2, r7
 80023a8:	e7d0      	b.n	800234c <HAL_PCD_IRQHandler+0x654>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023aa:	2a3e      	cmp	r2, #62	; 0x3e
 80023ac:	d80c      	bhi.n	80023c8 <HAL_PCD_IRQHandler+0x6d0>
 80023ae:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80023b2:	07d2      	lsls	r2, r2, #31
 80023b4:	bf48      	it	mi
 80023b6:	f10e 0e01 	addmi.w	lr, lr, #1
 80023ba:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80023be:	fa1f fe8e 	uxth.w	lr, lr
 80023c2:	f82c e007 	strh.w	lr, [ip, r7]
 80023c6:	e7de      	b.n	8002386 <HAL_PCD_IRQHandler+0x68e>
 80023c8:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 80023cc:	06d2      	lsls	r2, r2, #27
 80023ce:	bf08      	it	eq
 80023d0:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 80023d4:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 80023d8:	e7f1      	b.n	80023be <HAL_PCD_IRQHandler+0x6c6>
 80023da:	2f01      	cmp	r7, #1
 80023dc:	d1d3      	bne.n	8002386 <HAL_PCD_IRQHandler+0x68e>
 80023de:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80023e2:	f200 4704 	addw	r7, r0, #1028	; 0x404
 80023e6:	4417      	add	r7, r2
 80023e8:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	52bb      	strh	r3, [r7, r2]
 80023f0:	e7c9      	b.n	8002386 <HAL_PCD_IRQHandler+0x68e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023f2:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 80023f6:	b2bf      	uxth	r7, r7
 80023f8:	44d4      	add	ip, sl
 80023fa:	f10c 0c06 	add.w	ip, ip, #6
 80023fe:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 8002402:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002406:	459c      	cmp	ip, r3
      ep->xfer_len -= TxByteNbre;
 8002408:	bf9c      	itt	ls
 800240a:	eba3 030c 	subls.w	r3, r3, ip
 800240e:	642b      	strls	r3, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002410:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002414:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 8002418:	bf88      	it	hi
 800241a:	f8c5 e040 	strhi.w	lr, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	b9bb      	cbnz	r3, 8002452 <HAL_PCD_IRQHandler+0x75a>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002422:	4620      	mov	r0, r4
 8002424:	f002 f865 	bl	80044f2 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002428:	2f00      	cmp	r7, #0
 800242a:	f43f af5f 	beq.w	80022ec <HAL_PCD_IRQHandler+0x5f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800242e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002432:	6822      	ldr	r2, [r4, #0]
 8002434:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800243c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002440:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800244c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002450:	e45f      	b.n	8001d12 <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002452:	b95f      	cbnz	r7, 800246c <HAL_PCD_IRQHandler+0x774>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002454:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800245c:	051b      	lsls	r3, r3, #20
 800245e:	0d1b      	lsrs	r3, r3, #20
 8002460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002468:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800246c:	2328      	movs	r3, #40	; 0x28
 800246e:	fb03 4306 	mla	r3, r3, r6, r4
 8002472:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8002476:	2a01      	cmp	r2, #1
 8002478:	d1d9      	bne.n	800242e <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 800247a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800247c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800247e:	4462      	add	r2, ip
 8002480:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002482:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8002484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8002486:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8002488:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 800248a:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800248c:	d323      	bcc.n	80024d6 <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db -= len;
 800248e:	1abf      	subs	r7, r7, r2
 8002490:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002492:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8002496:	b293      	uxth	r3, r2
 8002498:	2f00      	cmp	r7, #0
 800249a:	d13f      	bne.n	800251c <HAL_PCD_IRQHandler+0x824>
 800249c:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80024a0:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 80024a4:	44bc      	add	ip, r7
 80024a6:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 80024aa:	013f      	lsls	r7, r7, #4
 80024ac:	b9f2      	cbnz	r2, 80024ec <HAL_PCD_IRQHandler+0x7f4>
 80024ae:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80024b2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80024b6:	0412      	lsls	r2, r2, #16
 80024b8:	0c12      	lsrs	r2, r2, #16
 80024ba:	f82c 2007 	strh.w	r2, [ip, r7]
 80024be:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80024c2:	ea48 0202 	orr.w	r2, r8, r2
 80024c6:	b292      	uxth	r2, r2
 80024c8:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024cc:	2228      	movs	r2, #40	; 0x28
 80024ce:	fb02 4606 	mla	r6, r2, r6, r4
 80024d2:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80024d4:	e75b      	b.n	800238e <HAL_PCD_IRQHandler+0x696>
        else if (ep->xfer_len_db == 0U)
 80024d6:	b91f      	cbnz	r7, 80024e0 <HAL_PCD_IRQHandler+0x7e8>
          ep->xfer_fill_db = 0U;
 80024d8:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 80024dc:	4662      	mov	r2, ip
 80024de:	e7d8      	b.n	8002492 <HAL_PCD_IRQHandler+0x79a>
          ep->xfer_len_db = 0U;
 80024e0:	2200      	movs	r2, #0
 80024e2:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80024e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80024e8:	463a      	mov	r2, r7
 80024ea:	e7d2      	b.n	8002492 <HAL_PCD_IRQHandler+0x79a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024ec:	2a3e      	cmp	r2, #62	; 0x3e
 80024ee:	d80c      	bhi.n	800250a <HAL_PCD_IRQHandler+0x812>
 80024f0:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80024f4:	07d2      	lsls	r2, r2, #31
 80024f6:	bf48      	it	mi
 80024f8:	f10e 0e01 	addmi.w	lr, lr, #1
 80024fc:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8002500:	fa1f fe8e 	uxth.w	lr, lr
 8002504:	f82c e007 	strh.w	lr, [ip, r7]
 8002508:	e7e0      	b.n	80024cc <HAL_PCD_IRQHandler+0x7d4>
 800250a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800250e:	06d2      	lsls	r2, r2, #27
 8002510:	bf08      	it	eq
 8002512:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8002516:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800251a:	e7f1      	b.n	8002500 <HAL_PCD_IRQHandler+0x808>
 800251c:	2f01      	cmp	r7, #1
 800251e:	d1d5      	bne.n	80024cc <HAL_PCD_IRQHandler+0x7d4>
 8002520:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002524:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 8002528:	4417      	add	r7, r2
 800252a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800252e:	0112      	lsls	r2, r2, #4
 8002530:	52bb      	strh	r3, [r7, r2]
 8002532:	e7cb      	b.n	80024cc <HAL_PCD_IRQHandler+0x7d4>
 8002534:	ffff8f0f 	.word	0xffff8f0f
 8002538:	ffff8000 	.word	0xffff8000

0800253c <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 800253c:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8002540:	b570      	push	{r4, r5, r6, lr}
 8002542:	f001 0507 	and.w	r5, r1, #7
 8002546:	4604      	mov	r4, r0
 8002548:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 800254c:	d01c      	beq.n	8002588 <HAL_PCD_EP_Open+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800254e:	fb05 1101 	mla	r1, r5, r1, r1
 8002552:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002554:	2001      	movs	r0, #1
 8002556:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 8002558:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800255a:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800255c:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 800255e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8002560:	b102      	cbz	r2, 8002564 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8002562:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8002564:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002566:	bf04      	itt	eq
 8002568:	2300      	moveq	r3, #0
 800256a:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800256c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002570:	2b01      	cmp	r3, #1
 8002572:	d013      	beq.n	800259c <HAL_PCD_EP_Open+0x60>
 8002574:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002576:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002578:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800257c:	f000 fbfa 	bl	8002d74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002580:	2000      	movs	r0, #0
 8002582:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002586:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8002588:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800258a:	fb01 f005 	mul.w	r0, r1, r5
 800258e:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 8002592:	4420      	add	r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002594:	4421      	add	r1, r4
    ep->is_in = 0U;
 8002596:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 800259a:	e7dd      	b.n	8002558 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 800259c:	2002      	movs	r0, #2
 800259e:	e7f2      	b.n	8002586 <HAL_PCD_EP_Open+0x4a>

080025a0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80025a0:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80025a4:	b510      	push	{r4, lr}
 80025a6:	f001 0207 	and.w	r2, r1, #7
 80025aa:	4604      	mov	r4, r0
 80025ac:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 80025b0:	d013      	beq.n	80025da <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 80025b2:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b4:	fb02 1101 	mla	r1, r2, r1, r1
 80025b8:	4401      	add	r1, r0
    ep->is_in = 1U;
 80025ba:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025bc:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80025be:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d013      	beq.n	80025ee <HAL_PCD_EP_Close+0x4e>
 80025c6:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025c8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80025ca:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025ce:	f000 fd0f 	bl	8002ff0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025d2:	2000      	movs	r0, #0
 80025d4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80025d8:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025da:	fb01 f302 	mul.w	r3, r1, r2
 80025de:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80025e2:	4401      	add	r1, r0
    ep->is_in = 0U;
 80025e4:	4403      	add	r3, r0
 80025e6:	2000      	movs	r0, #0
 80025e8:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80025ec:	e7e6      	b.n	80025bc <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 80025ee:	2002      	movs	r0, #2
 80025f0:	e7f2      	b.n	80025d8 <HAL_PCD_EP_Close+0x38>

080025f2 <HAL_PCD_EP_Receive>:
{
 80025f2:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80025f4:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 80025f6:	2600      	movs	r6, #0
 80025f8:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80025fc:	434c      	muls	r4, r1
 80025fe:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8002600:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002604:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002608:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800260a:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 800260e:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8002612:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8002616:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800261a:	6800      	ldr	r0, [r0, #0]
 800261c:	f000 fe2c 	bl	8003278 <USB_EPStartXfer>
}
 8002620:	4630      	mov	r0, r6
 8002622:	bd70      	pop	{r4, r5, r6, pc}

08002624 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002624:	2328      	movs	r3, #40	; 0x28
 8002626:	f001 0107 	and.w	r1, r1, #7
 800262a:	fb03 0101 	mla	r1, r3, r1, r0
}
 800262e:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8002632:	4770      	bx	lr

08002634 <HAL_PCD_EP_Transmit>:
{
 8002634:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8002636:	2528      	movs	r5, #40	; 0x28
 8002638:	f001 0107 	and.w	r1, r1, #7
 800263c:	fb05 0401 	mla	r4, r5, r1, r0
  ep->xfer_count = 0U;
 8002640:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8002642:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8002646:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002648:	fb01 5505 	mla	r5, r1, r5, r5
  ep->num = ep_addr & EP_ADDR_MSK;
 800264c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_fill_db = 1U;
 8002650:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002654:	1941      	adds	r1, r0, r5
  ep->xfer_len_db = len;
 8002656:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8002658:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800265a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800265e:	6800      	ldr	r0, [r0, #0]
 8002660:	f000 fe0a 	bl	8003278 <USB_EPStartXfer>
}
 8002664:	4630      	mov	r0, r6
 8002666:	bd70      	pop	{r4, r5, r6, pc}

08002668 <HAL_PCD_EP_SetStall>:
{
 8002668:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800266a:	6843      	ldr	r3, [r0, #4]
 800266c:	f001 0507 	and.w	r5, r1, #7
 8002670:	429d      	cmp	r5, r3
{
 8002672:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002674:	d828      	bhi.n	80026c8 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8002676:	f011 0f80 	tst.w	r1, #128	; 0x80
 800267a:	f04f 0328 	mov.w	r3, #40	; 0x28
 800267e:	d01a      	beq.n	80026b6 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002680:	fb05 3303 	mla	r3, r5, r3, r3
 8002684:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8002686:	2301      	movs	r3, #1
 8002688:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 800268a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800268c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800268e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002690:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8002694:	429a      	cmp	r2, r3
 8002696:	d019      	beq.n	80026cc <HAL_PCD_EP_SetStall+0x64>
 8002698:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800269c:	6820      	ldr	r0, [r4, #0]
 800269e:	f000 fd6d 	bl	800317c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026a2:	b925      	cbnz	r5, 80026ae <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80026a4:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80026a8:	6820      	ldr	r0, [r4, #0]
 80026aa:	f000 fdd3 	bl	8003254 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80026b4:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80026b6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80026b8:	434b      	muls	r3, r1
 80026ba:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80026be:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80026c0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80026c2:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 80026c6:	e7e0      	b.n	800268a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80026c8:	2001      	movs	r0, #1
 80026ca:	e7f3      	b.n	80026b4 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80026cc:	2002      	movs	r0, #2
 80026ce:	e7f1      	b.n	80026b4 <HAL_PCD_EP_SetStall+0x4c>

080026d0 <HAL_PCD_EP_ClrStall>:
{
 80026d0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026d2:	6843      	ldr	r3, [r0, #4]
 80026d4:	f001 020f 	and.w	r2, r1, #15
 80026d8:	429a      	cmp	r2, r3
{
 80026da:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026dc:	d826      	bhi.n	800272c <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80026de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80026e2:	f001 0207 	and.w	r2, r1, #7
 80026e6:	f04f 0128 	mov.w	r1, #40	; 0x28
 80026ea:	d015      	beq.n	8002718 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 80026ec:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ee:	fb02 1101 	mla	r1, r2, r1, r1
 80026f2:	4401      	add	r1, r0
    ep->is_in = 1U;
 80026f4:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 80026f6:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80026f8:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80026fa:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80026fc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002700:	2b01      	cmp	r3, #1
 8002702:	d015      	beq.n	8002730 <HAL_PCD_EP_ClrStall+0x60>
 8002704:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002706:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002708:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800270c:	f000 fd52 	bl	80031b4 <USB_EPClearStall>
  return HAL_OK;
 8002710:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8002712:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8002716:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002718:	fb01 f302 	mul.w	r3, r1, r2
 800271c:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8002720:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002722:	4403      	add	r3, r0
 8002724:	2000      	movs	r0, #0
 8002726:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800272a:	e7e4      	b.n	80026f6 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 800272c:	2001      	movs	r0, #1
 800272e:	e7f2      	b.n	8002716 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8002730:	2002      	movs	r0, #2
 8002732:	e7f0      	b.n	8002716 <HAL_PCD_EP_ClrStall+0x46>

08002734 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002734:	b510      	push	{r4, lr}
 8002736:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002738:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800273c:	bf1b      	ittet	ne
 800273e:	f001 0107 	andne.w	r1, r1, #7
 8002742:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002746:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800274a:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800274c:	bf08      	it	eq
 800274e:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
 8002752:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002754:	b91a      	cbnz	r2, 800275e <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002756:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002758:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800275a:	2000      	movs	r0, #0
 800275c:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 800275e:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002760:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8002762:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002764:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002766:	8143      	strh	r3, [r0, #10]
 8002768:	e7f7      	b.n	800275a <HAL_PCDEx_PMAConfig+0x26>
	...

0800276c <LL_ADC_CommonInit>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <LL_ADC_CommonInit+0x34>)
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002774:	689b      	ldr	r3, [r3, #8]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002776:	4313      	orrs	r3, r2
 8002778:	f013 0201 	ands.w	r2, r3, #1
 800277c:	d10e      	bne.n	800279c <LL_ADC_CommonInit+0x30>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800277e:	680b      	ldr	r3, [r1, #0]
 8002780:	b133      	cbz	r3, 8002790 <LL_ADC_CommonInit+0x24>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002782:	6841      	ldr	r1, [r0, #4]
 8002784:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8002788:	430b      	orrs	r3, r1
 800278a:	6043      	str	r3, [r0, #4]
  ErrorStatus status = SUCCESS;
 800278c:	4610      	mov	r0, r2
 800278e:	4770      	bx	lr
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002790:	6842      	ldr	r2, [r0, #4]
 8002792:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002796:	6042      	str	r2, [r0, #4]
  ErrorStatus status = SUCCESS;
 8002798:	4618      	mov	r0, r3
 800279a:	4770      	bx	lr
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800279c:	2001      	movs	r0, #1
  }
  
  return status;
}
 800279e:	4770      	bx	lr
 80027a0:	40012400 	.word	0x40012400

080027a4 <LL_ADC_Init>:
 80027a4:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80027a6:	b510      	push	{r4, lr}
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80027a8:	f013 0301 	ands.w	r3, r3, #1
 80027ac:	d10d      	bne.n	80027ca <LL_ADC_Init+0x26>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80027ae:	6842      	ldr	r2, [r0, #4]
 80027b0:	684c      	ldr	r4, [r1, #4]
 80027b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b6:	4322      	orrs	r2, r4
 80027b8:	6042      	str	r2, [r0, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80027ba:	6882      	ldr	r2, [r0, #8]
 80027bc:	6809      	ldr	r1, [r1, #0]
 80027be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c2:	430a      	orrs	r2, r1
 80027c4:	6082      	str	r2, [r0, #8]
  ErrorStatus status = SUCCESS;
 80027c6:	4618      	mov	r0, r3
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80027c8:	bd10      	pop	{r4, pc}
    status = ERROR;
 80027ca:	2001      	movs	r0, #1
 80027cc:	e7fc      	b.n	80027c8 <LL_ADC_Init+0x24>

080027ce <LL_ADC_REG_Init>:
 80027ce:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80027d0:	b510      	push	{r4, lr}
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80027d2:	07db      	lsls	r3, r3, #31
 80027d4:	d41b      	bmi.n	800280e <LL_ADC_REG_Init+0x40>
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CR1,
 80027d6:	6843      	ldr	r3, [r0, #4]
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80027d8:	684a      	ldr	r2, [r1, #4]
      MODIFY_REG(ADCx->CR1,
 80027da:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80027de:	b112      	cbz	r2, 80027e6 <LL_ADC_REG_Init+0x18>
      MODIFY_REG(ADCx->CR1,
 80027e0:	688c      	ldr	r4, [r1, #8]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	4323      	orrs	r3, r4
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80027e6:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80027e8:	6883      	ldr	r3, [r0, #8]
 80027ea:	680c      	ldr	r4, [r1, #0]
 80027ec:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80027f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027f4:	4323      	orrs	r3, r4
 80027f6:	68cc      	ldr	r4, [r1, #12]
 80027f8:	6909      	ldr	r1, [r1, #16]
 80027fa:	4323      	orrs	r3, r4
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002800:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002802:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002806:	4313      	orrs	r3, r2
 8002808:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 800280a:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 800280c:	bd10      	pop	{r4, pc}
    status = ERROR;
 800280e:	2001      	movs	r0, #1
 8002810:	e7fc      	b.n	800280c <LL_ADC_REG_Init+0x3e>
	...

08002814 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002814:	4602      	mov	r2, r0
 8002816:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002818:	7900      	ldrb	r0, [r0, #4]
{
 800281a:	b510      	push	{r4, lr}
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800281c:	2800      	cmp	r0, #0
 800281e:	d03d      	beq.n	800289c <LL_EXTI_Init+0x88>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002820:	2b00      	cmp	r3, #0
 8002822:	d044      	beq.n	80028ae <LL_EXTI_Init+0x9a>
    {
      switch (EXTI_InitStruct->Mode)
 8002824:	7951      	ldrb	r1, [r2, #5]
 8002826:	2901      	cmp	r1, #1
 8002828:	d01e      	beq.n	8002868 <LL_EXTI_Init+0x54>
 800282a:	d303      	bcc.n	8002834 <LL_EXTI_Init+0x20>
 800282c:	2902      	cmp	r1, #2
 800282e:	d024      	beq.n	800287a <LL_EXTI_Init+0x66>
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
          break;
        default:
          status = ERROR;
 8002830:	2001      	movs	r0, #1
 8002832:	e008      	b.n	8002846 <LL_EXTI_Init+0x32>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002834:	4920      	ldr	r1, [pc, #128]	; (80028b8 <LL_EXTI_Init+0xa4>)
 8002836:	6848      	ldr	r0, [r1, #4]
 8002838:	ea20 0003 	bic.w	r0, r0, r3
 800283c:	6048      	str	r0, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800283e:	6808      	ldr	r0, [r1, #0]
 8002840:	4318      	orrs	r0, r3
 8002842:	6008      	str	r0, [r1, #0]
  ErrorStatus status = SUCCESS;
 8002844:	2000      	movs	r0, #0
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002846:	7992      	ldrb	r2, [r2, #6]
 8002848:	b16a      	cbz	r2, 8002866 <LL_EXTI_Init+0x52>
      {
        switch (EXTI_InitStruct->Trigger)
 800284a:	2a02      	cmp	r2, #2
 800284c:	d019      	beq.n	8002882 <LL_EXTI_Init+0x6e>
 800284e:	2a03      	cmp	r2, #3
 8002850:	d020      	beq.n	8002894 <LL_EXTI_Init+0x80>
 8002852:	2a01      	cmp	r2, #1
 8002854:	d12d      	bne.n	80028b2 <LL_EXTI_Init+0x9e>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002856:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <LL_EXTI_Init+0xa4>)
 8002858:	68d1      	ldr	r1, [r2, #12]
 800285a:	ea21 0103 	bic.w	r1, r1, r3
 800285e:	60d1      	str	r1, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002860:	6891      	ldr	r1, [r2, #8]
 8002862:	430b      	orrs	r3, r1
 8002864:	6093      	str	r3, [r2, #8]
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 8002866:	bd10      	pop	{r4, pc}
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002868:	4913      	ldr	r1, [pc, #76]	; (80028b8 <LL_EXTI_Init+0xa4>)
 800286a:	6808      	ldr	r0, [r1, #0]
 800286c:	ea20 0003 	bic.w	r0, r0, r3
  SET_BIT(EXTI->IMR, ExtiLine);
 8002870:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002872:	6848      	ldr	r0, [r1, #4]
 8002874:	4318      	orrs	r0, r3
 8002876:	6048      	str	r0, [r1, #4]
 8002878:	e7e4      	b.n	8002844 <LL_EXTI_Init+0x30>
  SET_BIT(EXTI->IMR, ExtiLine);
 800287a:	490f      	ldr	r1, [pc, #60]	; (80028b8 <LL_EXTI_Init+0xa4>)
 800287c:	6808      	ldr	r0, [r1, #0]
 800287e:	4318      	orrs	r0, r3
 8002880:	e7f6      	b.n	8002870 <LL_EXTI_Init+0x5c>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002882:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <LL_EXTI_Init+0xa4>)
 8002884:	6891      	ldr	r1, [r2, #8]
 8002886:	ea21 0103 	bic.w	r1, r1, r3
  SET_BIT(EXTI->RTSR, ExtiLine);
 800288a:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800288c:	68d1      	ldr	r1, [r2, #12]
 800288e:	430b      	orrs	r3, r1
 8002890:	60d3      	str	r3, [r2, #12]
 8002892:	e7e8      	b.n	8002866 <LL_EXTI_Init+0x52>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002894:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <LL_EXTI_Init+0xa4>)
 8002896:	6891      	ldr	r1, [r2, #8]
 8002898:	4319      	orrs	r1, r3
 800289a:	e7f6      	b.n	800288a <LL_EXTI_Init+0x76>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800289c:	43dc      	mvns	r4, r3
 800289e:	4a06      	ldr	r2, [pc, #24]	; (80028b8 <LL_EXTI_Init+0xa4>)
 80028a0:	6811      	ldr	r1, [r2, #0]
 80028a2:	4021      	ands	r1, r4
 80028a4:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80028a6:	6853      	ldr	r3, [r2, #4]
 80028a8:	4023      	ands	r3, r4
 80028aa:	6053      	str	r3, [r2, #4]
 80028ac:	e7db      	b.n	8002866 <LL_EXTI_Init+0x52>
  ErrorStatus status = SUCCESS;
 80028ae:	4618      	mov	r0, r3
 80028b0:	e7d9      	b.n	8002866 <LL_EXTI_Init+0x52>
            status = ERROR;
 80028b2:	2001      	movs	r0, #1
 80028b4:	e7d7      	b.n	8002866 <LL_EXTI_Init+0x52>
 80028b6:	bf00      	nop
 80028b8:	40010400 	.word	0x40010400

080028bc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80028bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80028c0:	680c      	ldr	r4, [r1, #0]
 80028c2:	f3c4 240f 	ubfx	r4, r4, #8, #16
 80028c6:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80028ca:	f04f 0a0f 	mov.w	sl, #15
  pinpos = POSITION_VAL(pinmask);
 80028ce:	fab2 f282 	clz	r2, r2
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80028d2:	f04f 0903 	mov.w	r9, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80028d6:	2704      	movs	r7, #4
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80028d8:	f04f 1c01 	mov.w	ip, #65537	; 0x10001
        currentpin = (0x00000101uL << pinpos);
 80028dc:	f240 1e01 	movw	lr, #257	; 0x101
  while ((pinmask  >> pinpos) != 0u)
 80028e0:	fa34 f302 	lsrs.w	r3, r4, r2
 80028e4:	d102      	bne.n	80028ec <LL_GPIO_Init+0x30>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1u << pinpos)) != 0u)
 80028ec:	2301      	movs	r3, #1
 80028ee:	4093      	lsls	r3, r2
 80028f0:	4223      	tst	r3, r4
 80028f2:	d05e      	beq.n	80029b2 <LL_GPIO_Init+0xf6>
      if (pinpos < GPIO_PIN_MASK_POS)
 80028f4:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80028f6:	bf85      	ittet	hi
 80028f8:	f1a2 0308 	subhi.w	r3, r2, #8
 80028fc:	fa0c f303 	lslhi.w	r3, ip, r3
        currentpin = (0x00000101uL << pinpos);
 8002900:	fa0e f302 	lslls.w	r3, lr, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002904:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002908:	68c5      	ldr	r5, [r0, #12]
 800290a:	0a1e      	lsrs	r6, r3, #8
 800290c:	fa96 f8a6 	rbit	r8, r6
 8002910:	fab8 f888 	clz	r8, r8
 8002914:	ea25 0606 	bic.w	r6, r5, r6
 8002918:	690d      	ldr	r5, [r1, #16]
 800291a:	fa05 f508 	lsl.w	r5, r5, r8
 800291e:	4335      	orrs	r5, r6
 8002920:	60c5      	str	r5, [r0, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002922:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8002926:	fa93 f6a3 	rbit	r6, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800292a:	fab6 f686 	clz	r6, r6
 800292e:	fa93 fba3 	rbit	fp, r3
 8002932:	fabb fb8b 	clz	fp, fp
 8002936:	00b6      	lsls	r6, r6, #2
 8002938:	fa0a f506 	lsl.w	r5, sl, r6
 800293c:	f850 6008 	ldr.w	r6, [r0, r8]
 8002940:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002944:	ea26 0605 	bic.w	r6, r6, r5
 8002948:	684d      	ldr	r5, [r1, #4]
 800294a:	fa05 fb0b 	lsl.w	fp, r5, fp
 800294e:	ea46 060b 	orr.w	r6, r6, fp
 8002952:	f840 6008 	str.w	r6, [r0, r8]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002956:	684d      	ldr	r5, [r1, #4]
 8002958:	f025 0508 	bic.w	r5, r5, #8
 800295c:	2d01      	cmp	r5, #1
 800295e:	d128      	bne.n	80029b2 <LL_GPIO_Init+0xf6>
 8002960:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002964:	fab5 f585 	clz	r5, r5
 8002968:	fa93 fba3 	rbit	fp, r3
 800296c:	fabb fb8b 	clz	fp, fp
 8002970:	00ad      	lsls	r5, r5, #2
 8002972:	fa09 f505 	lsl.w	r5, r9, r5
 8002976:	ea26 0605 	bic.w	r6, r6, r5
 800297a:	688d      	ldr	r5, [r1, #8]
 800297c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002980:	fa05 fb0b 	lsl.w	fp, r5, fp
 8002984:	ea46 060b 	orr.w	r6, r6, fp
 8002988:	f840 6008 	str.w	r6, [r0, r8]
 800298c:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002990:	fab5 f585 	clz	r5, r5
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	00ad      	lsls	r5, r5, #2
 800299e:	fa07 f505 	lsl.w	r5, r7, r5
 80029a2:	ea26 0505 	bic.w	r5, r6, r5
 80029a6:	68ce      	ldr	r6, [r1, #12]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	409e      	lsls	r6, r3
 80029ac:	432e      	orrs	r6, r5
 80029ae:	f840 6008 	str.w	r6, [r0, r8]
    pinpos++;
 80029b2:	3201      	adds	r2, #1
 80029b4:	e794      	b.n	80028e0 <LL_GPIO_Init+0x24>
	...

080029b8 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80029ba:	4a04      	ldr	r2, [pc, #16]	; (80029cc <RCC_GetHCLKClockFreq+0x14>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029c2:	5cd3      	ldrb	r3, [r2, r3]
}
 80029c4:	40d8      	lsrs	r0, r3
 80029c6:	4770      	bx	lr
 80029c8:	40021000 	.word	0x40021000
 80029cc:	0800c418 	.word	0x0800c418

080029d0 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <RCC_GetPCLK1ClockFreq+0x14>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80029da:	5cd3      	ldrb	r3, [r2, r3]
}
 80029dc:	40d8      	lsrs	r0, r3
 80029de:	4770      	bx	lr
 80029e0:	40021000 	.word	0x40021000
 80029e4:	0800c428 	.word	0x0800c428

080029e8 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80029ea:	4a04      	ldr	r2, [pc, #16]	; (80029fc <RCC_GetPCLK2ClockFreq+0x14>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
}
 80029f4:	40d8      	lsrs	r0, r3
 80029f6:	4770      	bx	lr
 80029f8:	40021000 	.word	0x40021000
 80029fc:	0800c428 	.word	0x0800c428

08002a00 <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002a08:	b162      	cbz	r2, 8002a24 <RCC_PLL_GetFreqDomain_SYS+0x24>
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002a0a:	6858      	ldr	r0, [r3, #4]
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002a0c:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 8002a0e:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002a12:	3001      	adds	r0, #1
 8002a14:	fbb2 f0f0 	udiv	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002a18:	685b      	ldr	r3, [r3, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002a1a:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8002a1e:	3302      	adds	r3, #2
}
 8002a20:	4358      	muls	r0, r3
 8002a22:	4770      	bx	lr
      pllinputfreq = HSI_VALUE / 2U;
 8002a24:	4802      	ldr	r0, [pc, #8]	; (8002a30 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8002a26:	e7f7      	b.n	8002a18 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	007a1200 	.word	0x007a1200
 8002a30:	003d0900 	.word	0x003d0900

08002a34 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <RCC_GetSystemClockFreq+0x14>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d101      	bne.n	8002a44 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002a40:	f7ff bfde 	b.w	8002a00 <RCC_PLL_GetFreqDomain_SYS>
}
 8002a44:	4801      	ldr	r0, [pc, #4]	; (8002a4c <RCC_GetSystemClockFreq+0x18>)
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	007a1200 	.word	0x007a1200

08002a50 <LL_RCC_GetSystemClocksFreq>:
{
 8002a50:	b508      	push	{r3, lr}
 8002a52:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002a54:	f7ff ffee 	bl	8002a34 <RCC_GetSystemClockFreq>
 8002a58:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002a5a:	f7ff ffad 	bl	80029b8 <RCC_GetHCLKClockFreq>
 8002a5e:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a60:	f7ff ffb6 	bl	80029d0 <RCC_GetPCLK1ClockFreq>
 8002a64:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002a66:	6848      	ldr	r0, [r1, #4]
 8002a68:	f7ff ffbe 	bl	80029e8 <RCC_GetPCLK2ClockFreq>
 8002a6c:	60c8      	str	r0, [r1, #12]
}
 8002a6e:	bd08      	pop	{r3, pc}

08002a70 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a70:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <LL_TIM_Init+0x6c>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002a72:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a74:	4290      	cmp	r0, r2
 8002a76:	d00a      	beq.n	8002a8e <LL_TIM_Init+0x1e>
 8002a78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a7c:	d007      	beq.n	8002a8e <LL_TIM_Init+0x1e>
 8002a7e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002a82:	4290      	cmp	r0, r2
 8002a84:	d003      	beq.n	8002a8e <LL_TIM_Init+0x1e>
 8002a86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a8a:	4290      	cmp	r0, r2
 8002a8c:	d115      	bne.n	8002aba <LL_TIM_Init+0x4a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002a8e:	684a      	ldr	r2, [r1, #4]
 8002a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a94:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a96:	4a11      	ldr	r2, [pc, #68]	; (8002adc <LL_TIM_Init+0x6c>)
 8002a98:	4290      	cmp	r0, r2
 8002a9a:	d00a      	beq.n	8002ab2 <LL_TIM_Init+0x42>
 8002a9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002aa0:	d007      	beq.n	8002ab2 <LL_TIM_Init+0x42>
 8002aa2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002aa6:	4290      	cmp	r0, r2
 8002aa8:	d003      	beq.n	8002ab2 <LL_TIM_Init+0x42>
 8002aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aae:	4290      	cmp	r0, r2
 8002ab0:	d103      	bne.n	8002aba <LL_TIM_Init+0x4a>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002ab2:	68ca      	ldr	r2, [r1, #12]
 8002ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab8:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002aba:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002abc:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002abe:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002ac0:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002ac2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <LL_TIM_Init+0x6c>)
 8002ac6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002ac8:	bf04      	itt	eq
 8002aca:	690b      	ldreq	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002acc:	6303      	streq	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002ace:	6943      	ldr	r3, [r0, #20]
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40012c00 	.word	0x40012c00

08002ae0 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8002ae0:	2910      	cmp	r1, #16
{
 8002ae2:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8002ae4:	d05f      	beq.n	8002ba6 <LL_TIM_OC_Init+0xc6>
 8002ae6:	d803      	bhi.n	8002af0 <LL_TIM_OC_Init+0x10>
 8002ae8:	2901      	cmp	r1, #1
 8002aea:	d02c      	beq.n	8002b46 <LL_TIM_OC_Init+0x66>
  ErrorStatus result = ERROR;
 8002aec:	2001      	movs	r0, #1
 8002aee:	e059      	b.n	8002ba4 <LL_TIM_OC_Init+0xc4>
  switch (Channel)
 8002af0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002af4:	f000 8089 	beq.w	8002c0a <LL_TIM_OC_Init+0x12a>
 8002af8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002afc:	d1f6      	bne.n	8002aec <LL_TIM_OC_Init+0xc>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002afe:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002b00:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b06:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b08:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002b0a:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002b0c:	69c1      	ldr	r1, [r0, #28]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002b12:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8002b16:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002b1a:	6915      	ldr	r5, [r2, #16]
 8002b1c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002b20:	6855      	ldr	r5, [r2, #4]
 8002b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b26:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b2a:	4d50      	ldr	r5, [pc, #320]	; (8002c6c <LL_TIM_OC_Init+0x18c>)
 8002b2c:	42a8      	cmp	r0, r5
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002b2e:	bf04      	itt	eq
 8002b30:	6995      	ldreq	r5, [r2, #24]
 8002b32:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002b36:	68d2      	ldr	r2, [r2, #12]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002b38:	bf08      	it	eq
 8002b3a:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b3e:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002b40:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002b42:	6402      	str	r2, [r0, #64]	; 0x40
 8002b44:	e02c      	b.n	8002ba0 <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002b46:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002b48:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b50:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b52:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002b54:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002b56:	f023 0302 	bic.w	r3, r3, #2
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002b5a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002b5e:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002b60:	6915      	ldr	r5, [r2, #16]
 8002b62:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002b64:	6855      	ldr	r5, [r2, #4]
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6c:	4d3f      	ldr	r5, [pc, #252]	; (8002c6c <LL_TIM_OC_Init+0x18c>)
 8002b6e:	42a8      	cmp	r0, r5
 8002b70:	d112      	bne.n	8002b98 <LL_TIM_OC_Init+0xb8>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002b72:	6955      	ldr	r5, [r2, #20]
 8002b74:	f023 0308 	bic.w	r3, r3, #8
 8002b78:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002b7c:	6895      	ldr	r5, [r2, #8]
 8002b7e:	f023 0304 	bic.w	r3, r3, #4
 8002b82:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002b86:	6995      	ldr	r5, [r2, #24]
 8002b88:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002b8c:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002b8e:	69d5      	ldr	r5, [r2, #28]
 8002b90:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002b94:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002b98:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b9a:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002b9c:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002b9e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ba0:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002ba2:	2000      	movs	r0, #0
}
 8002ba4:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002ba6:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002ba8:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002baa:	f023 0310 	bic.w	r3, r3, #16
 8002bae:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002bb0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002bb2:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002bb4:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002bb6:	f023 0320 	bic.w	r3, r3, #32
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002bba:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8002bbe:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002bc2:	6915      	ldr	r5, [r2, #16]
 8002bc4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002bc8:	6855      	ldr	r5, [r2, #4]
 8002bca:	f023 0310 	bic.w	r3, r3, #16
 8002bce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd2:	4d26      	ldr	r5, [pc, #152]	; (8002c6c <LL_TIM_OC_Init+0x18c>)
 8002bd4:	42a8      	cmp	r0, r5
 8002bd6:	d113      	bne.n	8002c00 <LL_TIM_OC_Init+0x120>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002bd8:	6955      	ldr	r5, [r2, #20]
 8002bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bde:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002be2:	6895      	ldr	r5, [r2, #8]
 8002be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002be8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002bec:	6995      	ldr	r5, [r2, #24]
 8002bee:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002bf2:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002bf6:	69d5      	ldr	r5, [r2, #28]
 8002bf8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002bfc:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002c00:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c02:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c04:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c06:	6382      	str	r2, [r0, #56]	; 0x38
 8002c08:	e7ca      	b.n	8002ba0 <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c0a:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c0c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c12:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c14:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c16:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c18:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002c1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c1e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002c22:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002c24:	6915      	ldr	r5, [r2, #16]
 8002c26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002c2a:	6855      	ldr	r5, [r2, #4]
 8002c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c30:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c34:	4d0d      	ldr	r5, [pc, #52]	; (8002c6c <LL_TIM_OC_Init+0x18c>)
 8002c36:	42a8      	cmp	r0, r5
 8002c38:	d113      	bne.n	8002c62 <LL_TIM_OC_Init+0x182>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002c3a:	6955      	ldr	r5, [r2, #20]
 8002c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c40:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002c44:	6895      	ldr	r5, [r2, #8]
 8002c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c4a:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002c4e:	6995      	ldr	r5, [r2, #24]
 8002c50:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002c54:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002c58:	69d5      	ldr	r5, [r2, #28]
 8002c5a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002c5e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002c62:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c64:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002c66:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002c68:	63c2      	str	r2, [r0, #60]	; 0x3c
 8002c6a:	e799      	b.n	8002ba0 <LL_TIM_OC_Init+0xc0>
 8002c6c:	40012c00 	.word	0x40012c00

08002c70 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002c70:	b530      	push	{r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002c72:	68c3      	ldr	r3, [r0, #12]
 8002c74:	b085      	sub	sp, #20
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002c76:	049b      	lsls	r3, r3, #18
{
 8002c78:	4604      	mov	r4, r0
 8002c7a:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002c7c:	d502      	bpl.n	8002c84 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 8002c7e:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8002c80:	b005      	add	sp, #20
 8002c82:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8002c84:	684b      	ldr	r3, [r1, #4]
 8002c86:	68c9      	ldr	r1, [r1, #12]
 8002c88:	68c2      	ldr	r2, [r0, #12]
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	6929      	ldr	r1, [r5, #16]
 8002c8e:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002c92:	430b      	orrs	r3, r1
 8002c94:	f022 020c 	bic.w	r2, r2, #12
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002c9c:	6903      	ldr	r3, [r0, #16]
 8002c9e:	68aa      	ldr	r2, [r5, #8]
 8002ca0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	6103      	str	r3, [r0, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002ca8:	6943      	ldr	r3, [r0, #20]
 8002caa:	696a      	ldr	r2, [r5, #20]
 8002cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002cb4:	4668      	mov	r0, sp
 8002cb6:	f7ff fecb 	bl	8002a50 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <LL_USART_Init+0x98>)
 8002cbc:	429c      	cmp	r4, r3
 8002cbe:	d119      	bne.n	8002cf4 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002cc0:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002cc2:	2900      	cmp	r1, #0
 8002cc4:	d0db      	beq.n	8002c7e <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8002cc6:	682a      	ldr	r2, [r5, #0]
 8002cc8:	2a00      	cmp	r2, #0
 8002cca:	d0d8      	beq.n	8002c7e <LL_USART_Init+0xe>
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002ccc:	2319      	movs	r3, #25
 8002cce:	434b      	muls	r3, r1
 8002cd0:	0092      	lsls	r2, r2, #2
 8002cd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cd6:	2264      	movs	r2, #100	; 0x64
 8002cd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cdc:	fb02 3311 	mls	r3, r2, r1, r3
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	3332      	adds	r3, #50	; 0x32
 8002ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ce8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e7c5      	b.n	8002c80 <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <LL_USART_Init+0x9c>)
 8002cf6:	429c      	cmp	r4, r3
 8002cf8:	d101      	bne.n	8002cfe <LL_USART_Init+0x8e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002cfa:	9902      	ldr	r1, [sp, #8]
 8002cfc:	e7e1      	b.n	8002cc2 <LL_USART_Init+0x52>
    else if (USARTx == USART3)
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <LL_USART_Init+0xa0>)
 8002d00:	429c      	cmp	r4, r3
 8002d02:	d1bc      	bne.n	8002c7e <LL_USART_Init+0xe>
 8002d04:	e7f9      	b.n	8002cfa <LL_USART_Init+0x8a>
 8002d06:	bf00      	nop
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40004400 	.word	0x40004400
 8002d10:	40004800 	.word	0x40004800

08002d14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d14:	b084      	sub	sp, #16
 8002d16:	a801      	add	r0, sp, #4
 8002d18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002d1c:	b004      	add	sp, #16
 8002d1e:	2000      	movs	r0, #0
 8002d20:	4770      	bx	lr

08002d22 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d22:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002d24:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8002d28:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8002d2c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	4770      	bx	lr

08002d34 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002d34:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002d38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d3c:	045b      	lsls	r3, r3, #17
 8002d3e:	0c5b      	lsrs	r3, r3, #17
 8002d40:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002d44:	2000      	movs	r0, #0
 8002d46:	4770      	bx	lr

08002d48 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002d48:	2000      	movs	r0, #0
 8002d4a:	4770      	bx	lr

08002d4c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	b510      	push	{r4, lr}
 8002d50:	ac03      	add	r4, sp, #12
 8002d52:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8002d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8002d64:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0U;
 8002d68:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d6c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	4770      	bx	lr

08002d74 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d74:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d76:	780c      	ldrb	r4, [r1, #0]
{
 8002d78:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d7a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8002d7e:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d80:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002d84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8002d88:	2803      	cmp	r0, #3
 8002d8a:	d803      	bhi.n	8002d94 <USB_ActivateEndpoint+0x20>
 8002d8c:	e8df f000 	tbb	[pc, r0]
 8002d90:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8002d94:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002d96:	f248 0580 	movw	r5, #32896	; 0x8080
 8002d9a:	432a      	orrs	r2, r5
 8002d9c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002da0:	780e      	ldrb	r6, [r1, #0]
 8002da2:	4a90      	ldr	r2, [pc, #576]	; (8002fe4 <USB_ActivateEndpoint+0x270>)
 8002da4:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8002da8:	4335      	orrs	r5, r6
 8002daa:	4014      	ands	r4, r2
 8002dac:	432c      	orrs	r4, r5
 8002dae:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8002db2:	7b0d      	ldrb	r5, [r1, #12]
 8002db4:	780c      	ldrb	r4, [r1, #0]
 8002db6:	2d00      	cmp	r5, #0
 8002db8:	f040 8082 	bne.w	8002ec0 <USB_ActivateEndpoint+0x14c>
 8002dbc:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 8002dbe:	784e      	ldrb	r6, [r1, #1]
 8002dc0:	086d      	lsrs	r5, r5, #1
 8002dc2:	006d      	lsls	r5, r5, #1
 8002dc4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002dc8:	b376      	cbz	r6, 8002e28 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002dca:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002dce:	4434      	add	r4, r6
 8002dd0:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002dd4:	780d      	ldrb	r5, [r1, #0]
 8002dd6:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002dda:	0667      	lsls	r7, r4, #25
 8002ddc:	d508      	bpl.n	8002df0 <USB_ActivateEndpoint+0x7c>
 8002dde:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002de2:	4022      	ands	r2, r4
 8002de4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002dec:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002df0:	78ca      	ldrb	r2, [r1, #3]
 8002df2:	780c      	ldrb	r4, [r1, #0]
 8002df4:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002df6:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8002dfa:	4a7b      	ldr	r2, [pc, #492]	; (8002fe8 <USB_ActivateEndpoint+0x274>)
 8002dfc:	ea02 0201 	and.w	r2, r2, r1
 8002e00:	bf18      	it	ne
 8002e02:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e0e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8002e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8002e18:	2000      	movs	r0, #0
 8002e1a:	e7bc      	b.n	8002d96 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002e1c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8002e20:	e7fa      	b.n	8002e18 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002e22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e26:	e7f7      	b.n	8002e18 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e28:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e2c:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e2e:	4414      	add	r4, r2
 8002e30:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e34:	780a      	ldrb	r2, [r1, #0]
 8002e36:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002e3a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002e3e:	b2a4      	uxth	r4, r4
 8002e40:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8002e44:	bb56      	cbnz	r6, 8002e9c <USB_ActivateEndpoint+0x128>
 8002e46:	5b15      	ldrh	r5, [r2, r4]
 8002e48:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8002e4c:	042d      	lsls	r5, r5, #16
 8002e4e:	0c2d      	lsrs	r5, r5, #16
 8002e50:	5315      	strh	r5, [r2, r4]
 8002e52:	5b15      	ldrh	r5, [r2, r4]
 8002e54:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8002e58:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e5a:	780c      	ldrb	r4, [r1, #0]
 8002e5c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002e60:	0457      	lsls	r7, r2, #17
 8002e62:	d50b      	bpl.n	8002e7c <USB_ActivateEndpoint+0x108>
 8002e64:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002e68:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e6c:	0512      	lsls	r2, r2, #20
 8002e6e:	0d12      	lsrs	r2, r2, #20
 8002e70:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002e74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e78:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e7c:	7809      	ldrb	r1, [r1, #0]
 8002e7e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002e82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e8a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e96:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002e9a:	e7ba      	b.n	8002e12 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e9c:	2e3e      	cmp	r6, #62	; 0x3e
 8002e9e:	d806      	bhi.n	8002eae <USB_ActivateEndpoint+0x13a>
 8002ea0:	0875      	lsrs	r5, r6, #1
 8002ea2:	07f6      	lsls	r6, r6, #31
 8002ea4:	bf48      	it	mi
 8002ea6:	3501      	addmi	r5, #1
 8002ea8:	02ad      	lsls	r5, r5, #10
 8002eaa:	b2ad      	uxth	r5, r5
 8002eac:	e7d4      	b.n	8002e58 <USB_ActivateEndpoint+0xe4>
 8002eae:	0977      	lsrs	r7, r6, #5
 8002eb0:	06f5      	lsls	r5, r6, #27
 8002eb2:	4d4e      	ldr	r5, [pc, #312]	; (8002fec <USB_ActivateEndpoint+0x278>)
 8002eb4:	bf08      	it	eq
 8002eb6:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002eba:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8002ebe:	e7f4      	b.n	8002eaa <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002ec0:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8002ec4:	4015      	ands	r5, r2
 8002ec6:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8002eca:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002ece:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002ed2:	780c      	ldrb	r4, [r1, #0]
 8002ed4:	890d      	ldrh	r5, [r1, #8]
 8002ed6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002eda:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002ede:	086d      	lsrs	r5, r5, #1
 8002ee0:	b2b6      	uxth	r6, r6
 8002ee2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ee6:	006d      	lsls	r5, r5, #1
 8002ee8:	53a5      	strh	r5, [r4, r6]
 8002eea:	780c      	ldrb	r4, [r1, #0]
 8002eec:	894d      	ldrh	r5, [r1, #10]
 8002eee:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002ef2:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002ef6:	086d      	lsrs	r5, r5, #1
 8002ef8:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 8002efc:	006d      	lsls	r5, r5, #1
 8002efe:	b2b6      	uxth	r6, r6
 8002f00:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 8002f02:	784c      	ldrb	r4, [r1, #1]
 8002f04:	780d      	ldrb	r5, [r1, #0]
 8002f06:	bbb4      	cbnz	r4, 8002f76 <USB_ActivateEndpoint+0x202>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f08:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002f0c:	0466      	lsls	r6, r4, #17
 8002f0e:	d508      	bpl.n	8002f22 <USB_ActivateEndpoint+0x1ae>
 8002f10:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002f14:	4022      	ands	r2, r4
 8002f16:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f1e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f22:	780c      	ldrb	r4, [r1, #0]
 8002f24:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f28:	0655      	lsls	r5, r2, #25
 8002f2a:	d50b      	bpl.n	8002f44 <USB_ActivateEndpoint+0x1d0>
 8002f2c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f30:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f34:	0512      	lsls	r2, r2, #20
 8002f36:	0d12      	lsrs	r2, r2, #20
 8002f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002f40:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f44:	f248 0480 	movw	r4, #32896	; 0x8080
 8002f48:	780d      	ldrb	r5, [r1, #0]
 8002f4a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002f4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f56:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002f5a:	4322      	orrs	r2, r4
 8002f5c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f60:	7809      	ldrb	r1, [r1, #0]
 8002f62:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002f66:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f6e:	4314      	orrs	r4, r2
 8002f70:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8002f74:	e74d      	b.n	8002e12 <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f76:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002f7a:	0464      	lsls	r4, r4, #17
 8002f7c:	d508      	bpl.n	8002f90 <USB_ActivateEndpoint+0x21c>
 8002f7e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002f82:	4022      	ands	r2, r4
 8002f84:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f8c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f90:	780c      	ldrb	r4, [r1, #0]
 8002f92:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f96:	0652      	lsls	r2, r2, #25
 8002f98:	d50b      	bpl.n	8002fb2 <USB_ActivateEndpoint+0x23e>
 8002f9a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fa2:	0512      	lsls	r2, r2, #20
 8002fa4:	0d12      	lsrs	r2, r2, #20
 8002fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002faa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002fae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8002fb2:	78ca      	ldrb	r2, [r1, #3]
 8002fb4:	780c      	ldrb	r4, [r1, #0]
 8002fb6:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002fb8:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <USB_ActivateEndpoint+0x274>)
 8002fbe:	ea02 0205 	and.w	r2, r2, r5
 8002fc2:	bf18      	it	ne
 8002fc4:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fd0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fd4:	7809      	ldrb	r1, [r1, #0]
 8002fd6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002fda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fde:	0492      	lsls	r2, r2, #18
 8002fe0:	0c92      	lsrs	r2, r2, #18
 8002fe2:	e754      	b.n	8002e8e <USB_ActivateEndpoint+0x11a>
 8002fe4:	ffff8f8f 	.word	0xffff8f8f
 8002fe8:	ffff8fbf 	.word	0xffff8fbf
 8002fec:	ffff8000 	.word	0xffff8000

08002ff0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ff0:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8002ff2:	7b0c      	ldrb	r4, [r1, #12]
 8002ff4:	784a      	ldrb	r2, [r1, #1]
 8002ff6:	780b      	ldrb	r3, [r1, #0]
 8002ff8:	bbbc      	cbnz	r4, 800306a <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 8002ffa:	b1f2      	cbz	r2, 800303a <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ffc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003000:	0652      	lsls	r2, r2, #25
 8003002:	d50b      	bpl.n	800301c <USB_DeactivateEndpoint+0x2c>
 8003004:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003008:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800300c:	0512      	lsls	r2, r2, #20
 800300e:	0d12      	lsrs	r2, r2, #20
 8003010:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003014:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003018:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800301c:	780a      	ldrb	r2, [r1, #0]
 800301e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003022:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003026:	051b      	lsls	r3, r3, #20
 8003028:	0d1b      	lsrs	r3, r3, #20
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800302a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003032:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8003036:	2000      	movs	r0, #0
 8003038:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800303a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800303e:	0454      	lsls	r4, r2, #17
 8003040:	d50b      	bpl.n	800305a <USB_DeactivateEndpoint+0x6a>
 8003042:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003046:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800304a:	0512      	lsls	r2, r2, #20
 800304c:	0d12      	lsrs	r2, r2, #20
 800304e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003052:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003056:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800305a:	780a      	ldrb	r2, [r1, #0]
 800305c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003064:	049b      	lsls	r3, r3, #18
 8003066:	0c9b      	lsrs	r3, r3, #18
 8003068:	e7df      	b.n	800302a <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800306a:	2a00      	cmp	r2, #0
 800306c:	d144      	bne.n	80030f8 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800306e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003072:	0452      	lsls	r2, r2, #17
 8003074:	d50b      	bpl.n	800308e <USB_DeactivateEndpoint+0x9e>
 8003076:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800307a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800307e:	0512      	lsls	r2, r2, #20
 8003080:	0d12      	lsrs	r2, r2, #20
 8003082:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003086:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800308a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800308e:	780a      	ldrb	r2, [r1, #0]
 8003090:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003094:	065c      	lsls	r4, r3, #25
 8003096:	d50b      	bpl.n	80030b0 <USB_DeactivateEndpoint+0xc0>
 8003098:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800309c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a0:	051b      	lsls	r3, r3, #20
 80030a2:	0d1b      	lsrs	r3, r3, #20
 80030a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80030b0:	780a      	ldrb	r2, [r1, #0]
 80030b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ba:	051b      	lsls	r3, r3, #20
 80030bc:	0d1b      	lsrs	r3, r3, #20
 80030be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030ca:	f248 0280 	movw	r2, #32896	; 0x8080
 80030ce:	780c      	ldrb	r4, [r1, #0]
 80030d0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80030d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030dc:	4313      	orrs	r3, r2
 80030de:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030e2:	7809      	ldrb	r1, [r1, #0]
 80030e4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80030e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030f0:	431a      	orrs	r2, r3
 80030f2:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 80030f6:	e79e      	b.n	8003036 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030f8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80030fc:	0452      	lsls	r2, r2, #17
 80030fe:	d50b      	bpl.n	8003118 <USB_DeactivateEndpoint+0x128>
 8003100:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003104:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003108:	0512      	lsls	r2, r2, #20
 800310a:	0d12      	lsrs	r2, r2, #20
 800310c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003110:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003114:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003118:	780a      	ldrb	r2, [r1, #0]
 800311a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800311e:	065b      	lsls	r3, r3, #25
 8003120:	d50b      	bpl.n	800313a <USB_DeactivateEndpoint+0x14a>
 8003122:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800312a:	051b      	lsls	r3, r3, #20
 800312c:	0d1b      	lsrs	r3, r3, #20
 800312e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003132:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003136:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800313a:	780a      	ldrb	r2, [r1, #0]
 800313c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003144:	051b      	lsls	r3, r3, #20
 8003146:	0d1b      	lsrs	r3, r3, #20
 8003148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800314c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003150:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003154:	f248 0280 	movw	r2, #32896	; 0x8080
 8003158:	780c      	ldrb	r4, [r1, #0]
 800315a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800315e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003166:	4313      	orrs	r3, r2
 8003168:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800316c:	7809      	ldrb	r1, [r1, #0]
 800316e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317a:	e7b9      	b.n	80030f0 <USB_DeactivateEndpoint+0x100>

0800317c <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800317c:	784b      	ldrb	r3, [r1, #1]
 800317e:	780a      	ldrb	r2, [r1, #0]
 8003180:	b17b      	cbz	r3, 80031a2 <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003182:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800318e:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800319e:	2000      	movs	r0, #0
 80031a0:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80031a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031b2:	e7ee      	b.n	8003192 <USB_EPSetStall+0x16>

080031b4 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80031b4:	7b0b      	ldrb	r3, [r1, #12]
 80031b6:	bb23      	cbnz	r3, 8003202 <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 80031b8:	784b      	ldrb	r3, [r1, #1]
 80031ba:	780a      	ldrb	r2, [r1, #0]
 80031bc:	b31b      	cbz	r3, 8003206 <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031c2:	065b      	lsls	r3, r3, #25
 80031c4:	d50b      	bpl.n	80031de <USB_EPClearStall+0x2a>
 80031c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ce:	051b      	lsls	r3, r3, #20
 80031d0:	0d1b      	lsrs	r3, r3, #20
 80031d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80031de:	78cb      	ldrb	r3, [r1, #3]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d00e      	beq.n	8003202 <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80031e4:	780a      	ldrb	r2, [r1, #0]
 80031e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f2:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003202:	2000      	movs	r0, #0
 8003204:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003206:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800320a:	045b      	lsls	r3, r3, #17
 800320c:	d50b      	bpl.n	8003226 <USB_EPClearStall+0x72>
 800320e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003216:	051b      	lsls	r3, r3, #20
 8003218:	0d1b      	lsrs	r3, r3, #20
 800321a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800321e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003222:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003226:	780a      	ldrb	r2, [r1, #0]
 8003228:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800322c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003234:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003238:	e7dd      	b.n	80031f6 <USB_EPClearStall+0x42>

0800323a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800323a:	b911      	cbnz	r1, 8003242 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003242:	2000      	movs	r0, #0
 8003244:	4770      	bx	lr

08003246 <USB_DevConnect>:
 8003246:	2000      	movs	r0, #0
 8003248:	4770      	bx	lr

0800324a <USB_DevDisconnect>:
 800324a:	2000      	movs	r0, #0
 800324c:	4770      	bx	lr

0800324e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800324e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003252:	4770      	bx	lr

08003254 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003254:	2000      	movs	r0, #0
 8003256:	4770      	bx	lr

08003258 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003258:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800325c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800325e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8003268:	429a      	cmp	r2, r3
 800326a:	d100      	bne.n	800326e <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800326c:	4770      	bx	lr
 800326e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8003272:	f822 0b04 	strh.w	r0, [r2], #4
 8003276:	e7f7      	b.n	8003268 <USB_WritePMA+0x10>

08003278 <USB_EPStartXfer>:
{
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800327c:	7849      	ldrb	r1, [r1, #1]
{
 800327e:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8003280:	2901      	cmp	r1, #1
 8003282:	7b27      	ldrb	r7, [r4, #12]
 8003284:	f040 8183 	bne.w	800358e <USB_EPStartXfer+0x316>
    if (ep->xfer_len > ep->maxpacket)
 8003288:	6922      	ldr	r2, [r4, #16]
 800328a:	69a6      	ldr	r6, [r4, #24]
 800328c:	6961      	ldr	r1, [r4, #20]
 800328e:	4296      	cmp	r6, r2
 8003290:	bf28      	it	cs
 8003292:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 8003294:	b9ef      	cbnz	r7, 80032d2 <USB_EPStartXfer+0x5a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003296:	b2b6      	uxth	r6, r6
 8003298:	4633      	mov	r3, r6
 800329a:	88e2      	ldrh	r2, [r4, #6]
 800329c:	f7ff ffdc 	bl	8003258 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80032a0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80032a4:	7822      	ldrb	r2, [r4, #0]
 80032a6:	f205 4304 	addw	r3, r5, #1028	; 0x404
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	440b      	add	r3, r1
 80032ae:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80032b0:	7822      	ldrb	r2, [r4, #0]
 80032b2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80032b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032be:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 80032c2:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032cc:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80032d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 80032d2:	78e3      	ldrb	r3, [r4, #3]
 80032d4:	7827      	ldrb	r7, [r4, #0]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	f040 8124 	bne.w	8003524 <USB_EPStartXfer+0x2ac>
        if (ep->xfer_len_db > ep->maxpacket)
 80032dc:	6a23      	ldr	r3, [r4, #32]
 80032de:	429a      	cmp	r2, r3
          PCD_SET_EP_DBUF(USBx, ep->num);
 80032e0:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 80032e4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80032e8:	ea4f 5202 	mov.w	r2, r2, lsl #20
 80032ec:	ea4f 5212 	mov.w	r2, r2, lsr #20
        if (ep->xfer_len_db > ep->maxpacket)
 80032f0:	f080 8107 	bcs.w	8003502 <USB_EPStartXfer+0x28a>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80032f4:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80032f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032fc:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003300:	7822      	ldrb	r2, [r4, #0]
          ep->xfer_len_db -= len;
 8003302:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003304:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8003308:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800330a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800330e:	b2b3      	uxth	r3, r6
 8003310:	7860      	ldrb	r0, [r4, #1]
 8003312:	d07c      	beq.n	800340e <USB_EPStartXfer+0x196>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003314:	2800      	cmp	r0, #0
 8003316:	d14d      	bne.n	80033b4 <USB_EPStartXfer+0x13c>
 8003318:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800331c:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8003320:	4407      	add	r7, r0
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	2e00      	cmp	r6, #0
 8003326:	d131      	bne.n	800338c <USB_EPStartXfer+0x114>
 8003328:	5ab8      	ldrh	r0, [r7, r2]
 800332a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800332e:	0400      	lsls	r0, r0, #16
 8003330:	0c00      	lsrs	r0, r0, #16
 8003332:	52b8      	strh	r0, [r7, r2]
 8003334:	5ab8      	ldrh	r0, [r7, r2]
 8003336:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800333a:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800333c:	8962      	ldrh	r2, [r4, #10]
 800333e:	4628      	mov	r0, r5
 8003340:	f7ff ff8a 	bl	8003258 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003344:	6a22      	ldr	r2, [r4, #32]
 8003346:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003348:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800334a:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800334c:	bf89      	itett	hi
 800334e:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 8003350:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 8003352:	6222      	strhi	r2, [r4, #32]
 8003354:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003356:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8003358:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 800335a:	bf98      	it	ls
 800335c:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 800335e:	6161      	str	r1, [r4, #20]
 8003360:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003362:	2800      	cmp	r0, #0
 8003364:	d148      	bne.n	80033f8 <USB_EPStartXfer+0x180>
 8003366:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800336a:	7827      	ldrb	r7, [r4, #0]
 800336c:	f205 4604 	addw	r6, r5, #1028	; 0x404
 8003370:	013f      	lsls	r7, r7, #4
 8003372:	4406      	add	r6, r0
 8003374:	bb42      	cbnz	r2, 80033c8 <USB_EPStartXfer+0x150>
 8003376:	5bba      	ldrh	r2, [r7, r6]
 8003378:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800337c:	0412      	lsls	r2, r2, #16
 800337e:	0c12      	lsrs	r2, r2, #16
 8003380:	53ba      	strh	r2, [r7, r6]
 8003382:	5bba      	ldrh	r2, [r7, r6]
 8003384:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003388:	53ba      	strh	r2, [r7, r6]
 800338a:	e026      	b.n	80033da <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800338c:	2e3e      	cmp	r6, #62	; 0x3e
 800338e:	d807      	bhi.n	80033a0 <USB_EPStartXfer+0x128>
 8003390:	0870      	lsrs	r0, r6, #1
 8003392:	f016 0f01 	tst.w	r6, #1
 8003396:	bf18      	it	ne
 8003398:	3001      	addne	r0, #1
 800339a:	0280      	lsls	r0, r0, #10
 800339c:	b280      	uxth	r0, r0
 800339e:	e7cc      	b.n	800333a <USB_EPStartXfer+0xc2>
 80033a0:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 80033a4:	06f0      	lsls	r0, r6, #27
 80033a6:	4897      	ldr	r0, [pc, #604]	; (8003604 <USB_EPStartXfer+0x38c>)
 80033a8:	bf08      	it	eq
 80033aa:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80033ae:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80033b2:	e7f3      	b.n	800339c <USB_EPStartXfer+0x124>
 80033b4:	2801      	cmp	r0, #1
 80033b6:	d1c1      	bne.n	800333c <USB_EPStartXfer+0xc4>
 80033b8:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 80033bc:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 80033c0:	4438      	add	r0, r7
 80033c2:	0112      	lsls	r2, r2, #4
 80033c4:	5283      	strh	r3, [r0, r2]
 80033c6:	e7b9      	b.n	800333c <USB_EPStartXfer+0xc4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80033c8:	2a3e      	cmp	r2, #62	; 0x3e
 80033ca:	d80b      	bhi.n	80033e4 <USB_EPStartXfer+0x16c>
 80033cc:	0850      	lsrs	r0, r2, #1
 80033ce:	07d2      	lsls	r2, r2, #31
 80033d0:	bf48      	it	mi
 80033d2:	3001      	addmi	r0, #1
 80033d4:	0280      	lsls	r0, r0, #10
 80033d6:	b280      	uxth	r0, r0
 80033d8:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80033da:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80033dc:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80033de:	f7ff ff3b 	bl	8003258 <USB_WritePMA>
 80033e2:	e765      	b.n	80032b0 <USB_EPStartXfer+0x38>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80033e4:	0950      	lsrs	r0, r2, #5
 80033e6:	06d2      	lsls	r2, r2, #27
 80033e8:	4a86      	ldr	r2, [pc, #536]	; (8003604 <USB_EPStartXfer+0x38c>)
 80033ea:	bf08      	it	eq
 80033ec:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80033f0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80033f4:	b292      	uxth	r2, r2
 80033f6:	e7c7      	b.n	8003388 <USB_EPStartXfer+0x110>
 80033f8:	2801      	cmp	r0, #1
 80033fa:	d1ee      	bne.n	80033da <USB_EPStartXfer+0x162>
 80033fc:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8003400:	7820      	ldrb	r0, [r4, #0]
 8003402:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003406:	0100      	lsls	r0, r0, #4
 8003408:	4432      	add	r2, r6
 800340a:	5283      	strh	r3, [r0, r2]
 800340c:	e7e5      	b.n	80033da <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800340e:	2800      	cmp	r0, #0
 8003410:	d14d      	bne.n	80034ae <USB_EPStartXfer+0x236>
 8003412:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003416:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800341a:	4407      	add	r7, r0
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	2e00      	cmp	r6, #0
 8003420:	d131      	bne.n	8003486 <USB_EPStartXfer+0x20e>
 8003422:	5ab8      	ldrh	r0, [r7, r2]
 8003424:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8003428:	0400      	lsls	r0, r0, #16
 800342a:	0c00      	lsrs	r0, r0, #16
 800342c:	52b8      	strh	r0, [r7, r2]
 800342e:	5ab8      	ldrh	r0, [r7, r2]
 8003430:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003434:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003436:	8922      	ldrh	r2, [r4, #8]
 8003438:	4628      	mov	r0, r5
 800343a:	f7ff ff0d 	bl	8003258 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800343e:	6a22      	ldr	r2, [r4, #32]
 8003440:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003442:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003444:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8003446:	bf89      	itett	hi
 8003448:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 800344a:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 800344c:	6222      	strhi	r2, [r4, #32]
 800344e:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003450:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8003452:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 8003454:	bf98      	it	ls
 8003456:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 8003458:	6161      	str	r1, [r4, #20]
 800345a:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800345c:	2800      	cmp	r0, #0
 800345e:	d145      	bne.n	80034ec <USB_EPStartXfer+0x274>
 8003460:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003464:	7827      	ldrb	r7, [r4, #0]
 8003466:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 800346a:	013f      	lsls	r7, r7, #4
 800346c:	4406      	add	r6, r0
 800346e:	bb42      	cbnz	r2, 80034c2 <USB_EPStartXfer+0x24a>
 8003470:	5bba      	ldrh	r2, [r7, r6]
 8003472:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003476:	0412      	lsls	r2, r2, #16
 8003478:	0c12      	lsrs	r2, r2, #16
 800347a:	53ba      	strh	r2, [r7, r6]
 800347c:	5bba      	ldrh	r2, [r7, r6]
 800347e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003482:	53ba      	strh	r2, [r7, r6]
 8003484:	e026      	b.n	80034d4 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003486:	2e3e      	cmp	r6, #62	; 0x3e
 8003488:	d807      	bhi.n	800349a <USB_EPStartXfer+0x222>
 800348a:	0870      	lsrs	r0, r6, #1
 800348c:	f016 0f01 	tst.w	r6, #1
 8003490:	bf18      	it	ne
 8003492:	3001      	addne	r0, #1
 8003494:	0280      	lsls	r0, r0, #10
 8003496:	b280      	uxth	r0, r0
 8003498:	e7cc      	b.n	8003434 <USB_EPStartXfer+0x1bc>
 800349a:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 800349e:	06f0      	lsls	r0, r6, #27
 80034a0:	4858      	ldr	r0, [pc, #352]	; (8003604 <USB_EPStartXfer+0x38c>)
 80034a2:	bf08      	it	eq
 80034a4:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80034a8:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80034ac:	e7f3      	b.n	8003496 <USB_EPStartXfer+0x21e>
 80034ae:	2801      	cmp	r0, #1
 80034b0:	d1c1      	bne.n	8003436 <USB_EPStartXfer+0x1be>
 80034b2:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 80034b6:	f205 4004 	addw	r0, r5, #1028	; 0x404
 80034ba:	4438      	add	r0, r7
 80034bc:	0112      	lsls	r2, r2, #4
 80034be:	5283      	strh	r3, [r0, r2]
 80034c0:	e7b9      	b.n	8003436 <USB_EPStartXfer+0x1be>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034c2:	2a3e      	cmp	r2, #62	; 0x3e
 80034c4:	d808      	bhi.n	80034d8 <USB_EPStartXfer+0x260>
 80034c6:	0850      	lsrs	r0, r2, #1
 80034c8:	07d2      	lsls	r2, r2, #31
 80034ca:	bf48      	it	mi
 80034cc:	3001      	addmi	r0, #1
 80034ce:	0280      	lsls	r0, r0, #10
 80034d0:	b280      	uxth	r0, r0
 80034d2:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80034d4:	8962      	ldrh	r2, [r4, #10]
 80034d6:	e781      	b.n	80033dc <USB_EPStartXfer+0x164>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034d8:	0950      	lsrs	r0, r2, #5
 80034da:	06d2      	lsls	r2, r2, #27
 80034dc:	4a49      	ldr	r2, [pc, #292]	; (8003604 <USB_EPStartXfer+0x38c>)
 80034de:	bf08      	it	eq
 80034e0:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80034e4:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80034e8:	b292      	uxth	r2, r2
 80034ea:	e7ca      	b.n	8003482 <USB_EPStartXfer+0x20a>
 80034ec:	2801      	cmp	r0, #1
 80034ee:	d1f1      	bne.n	80034d4 <USB_EPStartXfer+0x25c>
 80034f0:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 80034f4:	7820      	ldrb	r0, [r4, #0]
 80034f6:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80034fa:	0100      	lsls	r0, r0, #4
 80034fc:	4432      	add	r2, r6
 80034fe:	5283      	strh	r3, [r0, r2]
 8003500:	e7e8      	b.n	80034d4 <USB_EPStartXfer+0x25c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003506:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800350a:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800350e:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003512:	7826      	ldrb	r6, [r4, #0]
 8003514:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003518:	443a      	add	r2, r7
 800351a:	0136      	lsls	r6, r6, #4
 800351c:	b29b      	uxth	r3, r3
 800351e:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003520:	8922      	ldrh	r2, [r4, #8]
 8003522:	e75c      	b.n	80033de <USB_EPStartXfer+0x166>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003524:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003528:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800352c:	0652      	lsls	r2, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800352e:	bf4b      	itete	mi
 8003530:	f205 420c 	addwmi	r2, r5, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003534:	f205 4204 	addwpl	r2, r5, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003538:	1812      	addmi	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800353a:	1812      	addpl	r2, r2, r0
 800353c:	b2b3      	uxth	r3, r6
 800353e:	ea4f 1707 	mov.w	r7, r7, lsl #4
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003542:	bf4b      	itete	mi
 8003544:	53d3      	strhmi	r3, [r2, r7]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003546:	53d3      	strhpl	r3, [r2, r7]
          pmabuffer = ep->pmaaddr1;
 8003548:	8962      	ldrhmi	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 800354a:	8922      	ldrhpl	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800354c:	4628      	mov	r0, r5
 800354e:	f7ff fe83 	bl	8003258 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003552:	7863      	ldrb	r3, [r4, #1]
 8003554:	7822      	ldrb	r2, [r4, #0]
 8003556:	b963      	cbnz	r3, 8003572 <USB_EPStartXfer+0x2fa>
 8003558:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800355c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003560:	051b      	lsls	r3, r3, #20
 8003562:	0d1b      	lsrs	r3, r3, #20
 8003564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003568:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800356c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003570:	e69e      	b.n	80032b0 <USB_EPStartXfer+0x38>
 8003572:	2b01      	cmp	r3, #1
 8003574:	f47f ae9c 	bne.w	80032b0 <USB_EPStartXfer+0x38>
 8003578:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800357c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003580:	051b      	lsls	r3, r3, #20
 8003582:	0d1b      	lsrs	r3, r3, #20
 8003584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358c:	e7ee      	b.n	800356c <USB_EPStartXfer+0x2f4>
    if (ep->doublebuffer == 0U)
 800358e:	2f00      	cmp	r7, #0
 8003590:	d13a      	bne.n	8003608 <USB_EPStartXfer+0x390>
      if (ep->xfer_len > ep->maxpacket)
 8003592:	69a2      	ldr	r2, [r4, #24]
 8003594:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003596:	f205 410c 	addw	r1, r5, #1036	; 0x40c
      if (ep->xfer_len > ep->maxpacket)
 800359a:	429a      	cmp	r2, r3
        ep->xfer_len = 0U;
 800359c:	bf92      	itee	ls
 800359e:	4613      	movls	r3, r2
        ep->xfer_len -= len;
 80035a0:	1ad2      	subhi	r2, r2, r3
 80035a2:	61a2      	strhi	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035a4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80035a8:	7820      	ldrb	r0, [r4, #0]
        ep->xfer_len = 0U;
 80035aa:	bf98      	it	ls
 80035ac:	61a7      	strls	r7, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035ae:	0100      	lsls	r0, r0, #4
 80035b0:	4411      	add	r1, r2
 80035b2:	b953      	cbnz	r3, 80035ca <USB_EPStartXfer+0x352>
 80035b4:	5a43      	ldrh	r3, [r0, r1]
 80035b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035ba:	041b      	lsls	r3, r3, #16
 80035bc:	0c1b      	lsrs	r3, r3, #16
 80035be:	5243      	strh	r3, [r0, r1]
 80035c0:	5a43      	ldrh	r3, [r0, r1]
 80035c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c6:	5243      	strh	r3, [r0, r1]
 80035c8:	e008      	b.n	80035dc <USB_EPStartXfer+0x364>
 80035ca:	2b3e      	cmp	r3, #62	; 0x3e
 80035cc:	d810      	bhi.n	80035f0 <USB_EPStartXfer+0x378>
 80035ce:	085a      	lsrs	r2, r3, #1
 80035d0:	07df      	lsls	r7, r3, #31
 80035d2:	bf48      	it	mi
 80035d4:	3201      	addmi	r2, #1
 80035d6:	0292      	lsls	r2, r2, #10
 80035d8:	b292      	uxth	r2, r2
 80035da:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035dc:	7822      	ldrb	r2, [r4, #0]
 80035de:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80035e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ea:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80035ee:	e668      	b.n	80032c2 <USB_EPStartXfer+0x4a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80035f0:	095a      	lsrs	r2, r3, #5
 80035f2:	06de      	lsls	r6, r3, #27
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <USB_EPStartXfer+0x38c>)
 80035f6:	bf08      	it	eq
 80035f8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80035fc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8003600:	b29b      	uxth	r3, r3
 8003602:	e7e0      	b.n	80035c6 <USB_EPStartXfer+0x34e>
 8003604:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8003608:	78e3      	ldrb	r3, [r4, #3]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d174      	bne.n	80036f8 <USB_EPStartXfer+0x480>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800360e:	b999      	cbnz	r1, 8003638 <USB_EPStartXfer+0x3c0>
 8003610:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003614:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003618:	7821      	ldrb	r1, [r4, #0]
 800361a:	6920      	ldr	r0, [r4, #16]
 800361c:	0109      	lsls	r1, r1, #4
 800361e:	441a      	add	r2, r3
 8003620:	2800      	cmp	r0, #0
 8003622:	d13a      	bne.n	800369a <USB_EPStartXfer+0x422>
 8003624:	5a8b      	ldrh	r3, [r1, r2]
 8003626:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800362a:	041b      	lsls	r3, r3, #16
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	528b      	strh	r3, [r1, r2]
 8003630:	5a8b      	ldrh	r3, [r1, r2]
 8003632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003636:	528b      	strh	r3, [r1, r2]
 8003638:	7862      	ldrb	r2, [r4, #1]
 800363a:	7823      	ldrb	r3, [r4, #0]
 800363c:	2a00      	cmp	r2, #0
 800363e:	d150      	bne.n	80036e2 <USB_EPStartXfer+0x46a>
 8003640:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003644:	6920      	ldr	r0, [r4, #16]
 8003646:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800364a:	4411      	add	r1, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	2800      	cmp	r0, #0
 8003650:	d135      	bne.n	80036be <USB_EPStartXfer+0x446>
 8003652:	5aca      	ldrh	r2, [r1, r3]
 8003654:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003658:	0412      	lsls	r2, r2, #16
 800365a:	0c12      	lsrs	r2, r2, #16
 800365c:	52ca      	strh	r2, [r1, r3]
 800365e:	5aca      	ldrh	r2, [r1, r3]
 8003660:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003664:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8003666:	69e3      	ldr	r3, [r4, #28]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0b7      	beq.n	80035dc <USB_EPStartXfer+0x364>
 800366c:	f244 0140 	movw	r1, #16448	; 0x4040
 8003670:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003672:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003676:	400b      	ands	r3, r1
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003678:	428b      	cmp	r3, r1
 800367a:	d001      	beq.n	8003680 <USB_EPStartXfer+0x408>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ad      	bne.n	80035dc <USB_EPStartXfer+0x364>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8003680:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003688:	051b      	lsls	r3, r3, #20
 800368a:	0d1b      	lsrs	r3, r3, #20
 800368c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003690:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003694:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003698:	e7a0      	b.n	80035dc <USB_EPStartXfer+0x364>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800369a:	283e      	cmp	r0, #62	; 0x3e
 800369c:	d806      	bhi.n	80036ac <USB_EPStartXfer+0x434>
 800369e:	0843      	lsrs	r3, r0, #1
 80036a0:	07c0      	lsls	r0, r0, #31
 80036a2:	bf48      	it	mi
 80036a4:	3301      	addmi	r3, #1
 80036a6:	029b      	lsls	r3, r3, #10
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	e7c4      	b.n	8003636 <USB_EPStartXfer+0x3be>
 80036ac:	0946      	lsrs	r6, r0, #5
 80036ae:	06c7      	lsls	r7, r0, #27
 80036b0:	4b46      	ldr	r3, [pc, #280]	; (80037cc <USB_EPStartXfer+0x554>)
 80036b2:	bf08      	it	eq
 80036b4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80036b8:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80036bc:	e7f4      	b.n	80036a8 <USB_EPStartXfer+0x430>
 80036be:	283e      	cmp	r0, #62	; 0x3e
 80036c0:	d806      	bhi.n	80036d0 <USB_EPStartXfer+0x458>
 80036c2:	0842      	lsrs	r2, r0, #1
 80036c4:	07c0      	lsls	r0, r0, #31
 80036c6:	bf48      	it	mi
 80036c8:	3201      	addmi	r2, #1
 80036ca:	0292      	lsls	r2, r2, #10
 80036cc:	b292      	uxth	r2, r2
 80036ce:	e7c9      	b.n	8003664 <USB_EPStartXfer+0x3ec>
 80036d0:	0946      	lsrs	r6, r0, #5
 80036d2:	06c7      	lsls	r7, r0, #27
 80036d4:	4a3d      	ldr	r2, [pc, #244]	; (80037cc <USB_EPStartXfer+0x554>)
 80036d6:	bf08      	it	eq
 80036d8:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80036dc:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80036e0:	e7f4      	b.n	80036cc <USB_EPStartXfer+0x454>
 80036e2:	2a01      	cmp	r2, #1
 80036e4:	d1bf      	bne.n	8003666 <USB_EPStartXfer+0x3ee>
 80036e6:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80036ea:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80036ee:	440a      	add	r2, r1
 80036f0:	8a21      	ldrh	r1, [r4, #16]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	52d1      	strh	r1, [r2, r3]
 80036f6:	e7b6      	b.n	8003666 <USB_EPStartXfer+0x3ee>
      else if (ep->type == EP_TYPE_ISOC)
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d164      	bne.n	80037c6 <USB_EPStartXfer+0x54e>
        if (ep->xfer_len > ep->maxpacket)
 80036fc:	69a2      	ldr	r2, [r4, #24]
 80036fe:	6923      	ldr	r3, [r4, #16]
 8003700:	429a      	cmp	r2, r3
          ep->xfer_len = 0U;
 8003702:	bf95      	itete	ls
 8003704:	2300      	movls	r3, #0
          ep->xfer_len -= len;
 8003706:	1ad2      	subhi	r2, r2, r3
          ep->xfer_len = 0U;
 8003708:	61a3      	strls	r3, [r4, #24]
          ep->xfer_len -= len;
 800370a:	61a2      	strhi	r2, [r4, #24]
          ep->xfer_len = 0U;
 800370c:	bf98      	it	ls
 800370e:	4613      	movls	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003710:	b989      	cbnz	r1, 8003736 <USB_EPStartXfer+0x4be>
 8003712:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003716:	7820      	ldrb	r0, [r4, #0]
 8003718:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800371c:	0100      	lsls	r0, r0, #4
 800371e:	4411      	add	r1, r2
 8003720:	b9fb      	cbnz	r3, 8003762 <USB_EPStartXfer+0x4ea>
 8003722:	5a42      	ldrh	r2, [r0, r1]
 8003724:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003728:	0412      	lsls	r2, r2, #16
 800372a:	0c12      	lsrs	r2, r2, #16
 800372c:	5242      	strh	r2, [r0, r1]
 800372e:	5a42      	ldrh	r2, [r0, r1]
 8003730:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003734:	5242      	strh	r2, [r0, r1]
 8003736:	7861      	ldrb	r1, [r4, #1]
 8003738:	7822      	ldrb	r2, [r4, #0]
 800373a:	2900      	cmp	r1, #0
 800373c:	d137      	bne.n	80037ae <USB_EPStartXfer+0x536>
 800373e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003742:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8003746:	4408      	add	r0, r1
 8003748:	0112      	lsls	r2, r2, #4
 800374a:	b9e3      	cbnz	r3, 8003786 <USB_EPStartXfer+0x50e>
 800374c:	5a83      	ldrh	r3, [r0, r2]
 800374e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003752:	041b      	lsls	r3, r3, #16
 8003754:	0c1b      	lsrs	r3, r3, #16
 8003756:	5283      	strh	r3, [r0, r2]
 8003758:	5a83      	ldrh	r3, [r0, r2]
 800375a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375e:	5283      	strh	r3, [r0, r2]
 8003760:	e73c      	b.n	80035dc <USB_EPStartXfer+0x364>
 8003762:	2b3e      	cmp	r3, #62	; 0x3e
 8003764:	d806      	bhi.n	8003774 <USB_EPStartXfer+0x4fc>
 8003766:	085a      	lsrs	r2, r3, #1
 8003768:	07de      	lsls	r6, r3, #31
 800376a:	bf48      	it	mi
 800376c:	3201      	addmi	r2, #1
 800376e:	0292      	lsls	r2, r2, #10
 8003770:	b292      	uxth	r2, r2
 8003772:	e7df      	b.n	8003734 <USB_EPStartXfer+0x4bc>
 8003774:	095e      	lsrs	r6, r3, #5
 8003776:	06df      	lsls	r7, r3, #27
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <USB_EPStartXfer+0x554>)
 800377a:	bf08      	it	eq
 800377c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003780:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003784:	e7f4      	b.n	8003770 <USB_EPStartXfer+0x4f8>
 8003786:	2b3e      	cmp	r3, #62	; 0x3e
 8003788:	d807      	bhi.n	800379a <USB_EPStartXfer+0x522>
 800378a:	0859      	lsrs	r1, r3, #1
 800378c:	07de      	lsls	r6, r3, #31
 800378e:	bf48      	it	mi
 8003790:	3101      	addmi	r1, #1
 8003792:	0289      	lsls	r1, r1, #10
 8003794:	b289      	uxth	r1, r1
 8003796:	5281      	strh	r1, [r0, r2]
 8003798:	e720      	b.n	80035dc <USB_EPStartXfer+0x364>
 800379a:	0959      	lsrs	r1, r3, #5
 800379c:	06db      	lsls	r3, r3, #27
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <USB_EPStartXfer+0x554>)
 80037a0:	bf08      	it	eq
 80037a2:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80037a6:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	e7d7      	b.n	800375e <USB_EPStartXfer+0x4e6>
 80037ae:	2901      	cmp	r1, #1
 80037b0:	f47f af14 	bne.w	80035dc <USB_EPStartXfer+0x364>
 80037b4:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80037b8:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80037bc:	4401      	add	r1, r0
 80037be:	0112      	lsls	r2, r2, #4
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	528b      	strh	r3, [r1, r2]
 80037c4:	e70a      	b.n	80035dc <USB_EPStartXfer+0x364>
        return HAL_ERROR;
 80037c6:	2001      	movs	r0, #1
 80037c8:	e582      	b.n	80032d0 <USB_EPStartXfer+0x58>
 80037ca:	bf00      	nop
 80037cc:	ffff8000 	.word	0xffff8000

080037d0 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80037d0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 80037d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80037d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 80037da:	085d      	lsrs	r5, r3, #1
 80037dc:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80037de:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 80037e0:	462e      	mov	r6, r5
 80037e2:	3002      	adds	r0, #2
 80037e4:	b936      	cbnz	r6, 80037f4 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80037e6:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 80037e8:	bf44      	itt	mi
 80037ea:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80037ee:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 80037f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 80037f4:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 80037f8:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 80037fa:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80037fc:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003800:	0a24      	lsrs	r4, r4, #8
 8003802:	f800 4c01 	strb.w	r4, [r0, #-1]
 8003806:	e7ec      	b.n	80037e2 <USB_ReadPMA+0x12>

08003808 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003808:	4b01      	ldr	r3, [pc, #4]	; (8003810 <LL_SetSystemCoreClock+0x8>)
 800380a:	6018      	str	r0, [r3, #0]
}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000000 	.word	0x20000000

08003814 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003814:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003818:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800381a:	b16b      	cbz	r3, 8003838 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800381c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003820:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003824:	28ff      	cmp	r0, #255	; 0xff
 8003826:	d007      	beq.n	8003838 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800382e:	4621      	mov	r1, r4
 8003830:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003832:	23ff      	movs	r3, #255	; 0xff
 8003834:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003838:	2000      	movs	r0, #0
 800383a:	bd10      	pop	{r4, pc}

0800383c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800383c:	2343      	movs	r3, #67	; 0x43
 800383e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003840:	4800      	ldr	r0, [pc, #0]	; (8003844 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003842:	4770      	bx	lr
 8003844:	20000044 	.word	0x20000044

08003848 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003848:	2343      	movs	r3, #67	; 0x43
 800384a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800384c:	4800      	ldr	r0, [pc, #0]	; (8003850 <USBD_CDC_GetHSCfgDesc+0x8>)
 800384e:	4770      	bx	lr
 8003850:	20000088 	.word	0x20000088

08003854 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003854:	2343      	movs	r3, #67	; 0x43
 8003856:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003858:	4800      	ldr	r0, [pc, #0]	; (800385c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800385a:	4770      	bx	lr
 800385c:	200000d8 	.word	0x200000d8

08003860 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003860:	230a      	movs	r3, #10
 8003862:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003864:	4800      	ldr	r0, [pc, #0]	; (8003868 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003866:	4770      	bx	lr
 8003868:	200000cc 	.word	0x200000cc

0800386c <USBD_CDC_DataOut>:
{
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003870:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003874:	f000 ff36 	bl	80046e4 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8003878:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800387c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003880:	b14b      	cbz	r3, 8003896 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003882:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8003886:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003890:	4798      	blx	r3
    return USBD_OK;
 8003892:	2000      	movs	r0, #0
}
 8003894:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003896:	2002      	movs	r0, #2
 8003898:	e7fc      	b.n	8003894 <USBD_CDC_DataOut+0x28>

0800389a <USBD_CDC_DataIn>:
{
 800389a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800389c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80038a0:	b1d6      	cbz	r6, 80038d8 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80038a2:	2314      	movs	r3, #20
 80038a4:	fb03 0301 	mla	r3, r3, r1, r0
 80038a8:	69dd      	ldr	r5, [r3, #28]
 80038aa:	b18d      	cbz	r5, 80038d0 <USBD_CDC_DataIn+0x36>
 80038ac:	2728      	movs	r7, #40	; 0x28
 80038ae:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 80038b2:	fb07 4201 	mla	r2, r7, r1, r4
 80038b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038b8:	fbb5 f4f2 	udiv	r4, r5, r2
 80038bc:	fb02 5414 	mls	r4, r2, r4, r5
 80038c0:	b934      	cbnz	r4, 80038d0 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 80038c2:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80038c4:	4622      	mov	r2, r4
 80038c6:	4623      	mov	r3, r4
 80038c8:	f000 fef0 	bl	80046ac <USBD_LL_Transmit>
    return USBD_OK;
 80038cc:	4620      	mov	r0, r4
}
 80038ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80038d0:	2000      	movs	r0, #0
 80038d2:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 80038d6:	e7fa      	b.n	80038ce <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 80038d8:	2002      	movs	r0, #2
 80038da:	e7f8      	b.n	80038ce <USBD_CDC_DataIn+0x34>

080038dc <USBD_CDC_Setup>:
{
 80038dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 80038e0:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80038e4:	780a      	ldrb	r2, [r1, #0]
{
 80038e6:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80038e8:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 80038ec:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80038ee:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80038f2:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 80038f6:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80038fa:	d028      	beq.n	800394e <USBD_CDC_Setup+0x72>
 80038fc:	2c20      	cmp	r4, #32
 80038fe:	d145      	bne.n	800398c <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8003900:	88cc      	ldrh	r4, [r1, #6]
 8003902:	784b      	ldrb	r3, [r1, #1]
 8003904:	b1e4      	cbz	r4, 8003940 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003906:	0612      	lsls	r2, r2, #24
 8003908:	d511      	bpl.n	800392e <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800390a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800390e:	4639      	mov	r1, r7
 8003910:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003914:	4618      	mov	r0, r3
 8003916:	4622      	mov	r2, r4
 8003918:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800391a:	88f2      	ldrh	r2, [r6, #6]
 800391c:	4639      	mov	r1, r7
 800391e:	4628      	mov	r0, r5
 8003920:	f000 fc45 	bl	80041ae <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003924:	4644      	mov	r4, r8
}
 8003926:	4620      	mov	r0, r4
 8003928:	b003      	add	sp, #12
 800392a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 800392e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003932:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003936:	4622      	mov	r2, r4
 8003938:	4639      	mov	r1, r7
 800393a:	f000 fc4d 	bl	80041d8 <USBD_CtlPrepareRx>
 800393e:	e7f1      	b.n	8003924 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003940:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003944:	4618      	mov	r0, r3
 8003946:	6895      	ldr	r5, [r2, #8]
 8003948:	4622      	mov	r2, r4
 800394a:	47a8      	blx	r5
 800394c:	e7eb      	b.n	8003926 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800394e:	784f      	ldrb	r7, [r1, #1]
 8003950:	2f0a      	cmp	r7, #10
 8003952:	d00d      	beq.n	8003970 <USBD_CDC_Setup+0x94>
 8003954:	2f0b      	cmp	r7, #11
 8003956:	d015      	beq.n	8003984 <USBD_CDC_Setup+0xa8>
 8003958:	b9c7      	cbnz	r7, 800398c <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800395a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800395e:	2b03      	cmp	r3, #3
 8003960:	d114      	bne.n	800398c <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003962:	2202      	movs	r2, #2
 8003964:	f10d 0106 	add.w	r1, sp, #6
 8003968:	f000 fc21 	bl	80041ae <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800396c:	463c      	mov	r4, r7
 800396e:	e7da      	b.n	8003926 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003970:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003974:	2b03      	cmp	r3, #3
 8003976:	d109      	bne.n	800398c <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003978:	2201      	movs	r2, #1
 800397a:	f10d 0105 	add.w	r1, sp, #5
 800397e:	f000 fc16 	bl	80041ae <USBD_CtlSendData>
 8003982:	e7d0      	b.n	8003926 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003984:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003988:	2b03      	cmp	r3, #3
 800398a:	d0cc      	beq.n	8003926 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 800398c:	4631      	mov	r1, r6
 800398e:	4628      	mov	r0, r5
 8003990:	f000 fbe6 	bl	8004160 <USBD_CtlError>
          ret = USBD_FAIL;
 8003994:	2402      	movs	r4, #2
          break;
 8003996:	e7c6      	b.n	8003926 <USBD_CDC_Setup+0x4a>

08003998 <USBD_CDC_DeInit>:
{
 8003998:	b538      	push	{r3, r4, r5, lr}
 800399a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800399c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800399e:	2181      	movs	r1, #129	; 0x81
 80039a0:	f000 fe3a 	bl	8004618 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80039a4:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80039a6:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80039a8:	4620      	mov	r0, r4
 80039aa:	f000 fe35 	bl	8004618 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80039ae:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80039b2:	2182      	movs	r1, #130	; 0x82
 80039b4:	4620      	mov	r0, r4
 80039b6:	f000 fe2f 	bl	8004618 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80039ba:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80039be:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80039c0:	b14b      	cbz	r3, 80039d6 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80039c2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80039ca:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80039ce:	f000 fe91 	bl	80046f4 <USBD_static_free>
    pdev->pClassData = NULL;
 80039d2:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80039d6:	2000      	movs	r0, #0
 80039d8:	bd38      	pop	{r3, r4, r5, pc}

080039da <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80039da:	7c03      	ldrb	r3, [r0, #16]
{
 80039dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e0:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80039e2:	bbcb      	cbnz	r3, 8003a58 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80039e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039e8:	2202      	movs	r2, #2
 80039ea:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80039ec:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80039ee:	f000 fe03 	bl	80045f8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80039f2:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80039f6:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80039f8:	4629      	mov	r1, r5
 80039fa:	2202      	movs	r2, #2
 80039fc:	4620      	mov	r0, r4
 80039fe:	f000 fdfb 	bl	80045f8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003a02:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003a06:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003a08:	2308      	movs	r3, #8
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	2182      	movs	r1, #130	; 0x82
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f000 fdf2 	bl	80045f8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003a14:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003a16:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003a1a:	f000 fe67 	bl	80046ec <USBD_static_malloc>
 8003a1e:	4606      	mov	r6, r0
 8003a20:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003a24:	b350      	cbz	r0, 8003a7c <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8003a26:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003a28:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a30:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8003a34:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8003a38:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a3c:	f1b8 0f00 	cmp.w	r8, #0
 8003a40:	d113      	bne.n	8003a6a <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a46:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f000 fe3b 	bl	80046c8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003a52:	4640      	mov	r0, r8
}
 8003a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003a58:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003a5a:	2340      	movs	r3, #64	; 0x40
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	2181      	movs	r1, #129	; 0x81
 8003a60:	f000 fdca 	bl	80045f8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003a64:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003a66:	2340      	movs	r3, #64	; 0x40
 8003a68:	e7c6      	b.n	80039f8 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003a6a:	2340      	movs	r3, #64	; 0x40
 8003a6c:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003a70:	4629      	mov	r1, r5
 8003a72:	4620      	mov	r0, r4
 8003a74:	f000 fe28 	bl	80046c8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003a78:	4638      	mov	r0, r7
 8003a7a:	e7eb      	b.n	8003a54 <USBD_CDC_Init+0x7a>
    ret = 1U;
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	e7e9      	b.n	8003a54 <USBD_CDC_Init+0x7a>

08003a80 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003a80:	b119      	cbz	r1, 8003a8a <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003a82:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003a86:	2000      	movs	r0, #0
 8003a88:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003a8a:	2002      	movs	r0, #2
  }

  return ret;
}
 8003a8c:	4770      	bx	lr

08003a8e <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003a8e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8003a92:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003a94:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003a98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003a9c:	4770      	bx	lr

08003a9e <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8003a9e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8003aa2:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003aa4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003aa8:	4770      	bx	lr

08003aaa <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003aaa:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003aae:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8003ab0:	b182      	cbz	r2, 8003ad4 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8003ab2:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	b974      	cbnz	r4, 8003ad8 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8003aba:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003abe:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003ac2:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003ac4:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003ac6:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f000 fdee 	bl	80046ac <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8003ad0:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003ad2:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003ad4:	2002      	movs	r0, #2
 8003ad6:	e7fc      	b.n	8003ad2 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8003ad8:	4618      	mov	r0, r3
 8003ada:	e7fa      	b.n	8003ad2 <USBD_CDC_TransmitPacket+0x28>

08003adc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003adc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003ae0:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003ae2:	b162      	cbz	r2, 8003afe <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ae4:	7c04      	ldrb	r4, [r0, #16]
 8003ae6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003aea:	b934      	cbnz	r4, 8003afa <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003aec:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003af0:	2101      	movs	r1, #1
 8003af2:	f000 fde9 	bl	80046c8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003af6:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003af8:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003afa:	2340      	movs	r3, #64	; 0x40
 8003afc:	e7f8      	b.n	8003af0 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8003afe:	2002      	movs	r0, #2
 8003b00:	e7fa      	b.n	8003af8 <USBD_CDC_ReceivePacket+0x1c>

08003b02 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003b02:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003b04:	b180      	cbz	r0, 8003b28 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003b06:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b0a:	b113      	cbz	r3, 8003b12 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003b12:	b109      	cbz	r1, 8003b18 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003b14:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b18:	2301      	movs	r3, #1
  pdev->id = id;
 8003b1a:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b1c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003b20:	f000 fd1a 	bl	8004558 <USBD_LL_Init>

  return USBD_OK;
 8003b24:	2000      	movs	r0, #0
}
 8003b26:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003b28:	2002      	movs	r0, #2
 8003b2a:	e7fc      	b.n	8003b26 <USBD_Init+0x24>

08003b2c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003b2c:	b119      	cbz	r1, 8003b36 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003b2e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003b32:	2000      	movs	r0, #0
 8003b34:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003b36:	2002      	movs	r0, #2
  }

  return status;
}
 8003b38:	4770      	bx	lr

08003b3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003b3a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003b3c:	f000 fd4e 	bl	80045dc <USBD_LL_Start>

  return USBD_OK;
}
 8003b40:	2000      	movs	r0, #0
 8003b42:	bd08      	pop	{r3, pc}

08003b44 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003b44:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003b46:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b4a:	b90b      	cbnz	r3, 8003b50 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003b4c:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003b4e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4798      	blx	r3
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d0fa      	beq.n	8003b4e <USBD_SetClassConfig+0xa>
 8003b58:	e7f8      	b.n	8003b4c <USBD_SetClassConfig+0x8>

08003b5a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003b5a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003b5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4798      	blx	r3

  return USBD_OK;
}
 8003b64:	2000      	movs	r0, #0
 8003b66:	bd08      	pop	{r3, pc}

08003b68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003b68:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003b6a:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8003b6e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003b70:	4628      	mov	r0, r5
 8003b72:	f000 fae1 	bl	8004138 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003b76:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003b78:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8003b7c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003b80:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003b84:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003b88:	f001 031f 	and.w	r3, r1, #31
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d00e      	beq.n	8003bae <USBD_LL_SetupStage+0x46>
 8003b90:	d307      	bcc.n	8003ba2 <USBD_LL_SetupStage+0x3a>
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d010      	beq.n	8003bb8 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003b96:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f000 fd4a 	bl	8004634 <USBD_LL_StallEP>
      break;
 8003ba0:	e003      	b.n	8003baa <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f000 f8f5 	bl	8003d94 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003baa:	2000      	movs	r0, #0
 8003bac:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003bae:	4629      	mov	r1, r5
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f000 fa13 	bl	8003fdc <USBD_StdItfReq>
      break;
 8003bb6:	e7f8      	b.n	8003baa <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8003bb8:	4629      	mov	r1, r5
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f000 fa33 	bl	8004026 <USBD_StdEPReq>
      break;
 8003bc0:	e7f3      	b.n	8003baa <USBD_LL_SetupStage+0x42>

08003bc2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003bc2:	b570      	push	{r4, r5, r6, lr}
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003bc8:	bb49      	cbnz	r1, 8003c1e <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003bca:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d11e      	bne.n	8003c10 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003bd2:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8003bd6:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d90b      	bls.n	8003bf6 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8003bde:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003be0:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8003be2:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003be6:	bf8c      	ite	hi
 8003be8:	b29a      	uxthhi	r2, r3
 8003bea:	b292      	uxthls	r2, r2
 8003bec:	4631      	mov	r1, r6
 8003bee:	f000 fb02 	bl	80041f6 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003bf2:	2000      	movs	r0, #0
}
 8003bf4:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003bf6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	b123      	cbz	r3, 8003c08 <USBD_LL_DataOutStage+0x46>
 8003bfe:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003c02:	2a03      	cmp	r2, #3
 8003c04:	d100      	bne.n	8003c08 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8003c06:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003c08:	4628      	mov	r0, r5
 8003c0a:	f000 fafc 	bl	8004206 <USBD_CtlSendStatus>
 8003c0e:	e7f0      	b.n	8003bf2 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d1ee      	bne.n	8003bf2 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003c14:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003c18:	f000 fd0c 	bl	8004634 <USBD_LL_StallEP>
 8003c1c:	e7e9      	b.n	8003bf2 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003c1e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	b12b      	cbz	r3, 8003c32 <USBD_LL_DataOutStage+0x70>
 8003c26:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003c2a:	2a03      	cmp	r2, #3
 8003c2c:	d101      	bne.n	8003c32 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8003c2e:	4798      	blx	r3
 8003c30:	e7df      	b.n	8003bf2 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8003c32:	2002      	movs	r0, #2
 8003c34:	e7de      	b.n	8003bf4 <USBD_LL_DataOutStage+0x32>

08003c36 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003c36:	b570      	push	{r4, r5, r6, lr}
 8003c38:	4613      	mov	r3, r2
 8003c3a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003c3c:	460e      	mov	r6, r1
 8003c3e:	2900      	cmp	r1, #0
 8003c40:	d147      	bne.n	8003cd2 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003c42:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003c46:	2a02      	cmp	r2, #2
 8003c48:	d13c      	bne.n	8003cc4 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003c4a:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8003c4e:	4295      	cmp	r5, r2
 8003c50:	d913      	bls.n	8003c7a <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8003c52:	1aaa      	subs	r2, r5, r2
 8003c54:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003c56:	4619      	mov	r1, r3
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	f000 fab5 	bl	80041c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003c5e:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003c60:	461a      	mov	r2, r3
 8003c62:	4619      	mov	r1, r3
 8003c64:	4620      	mov	r0, r4
 8003c66:	f000 fd2f 	bl	80046c8 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003c6a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003c6e:	2000      	movs	r0, #0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8003c74:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003c7a:	69c3      	ldr	r3, [r0, #28]
 8003c7c:	fbb3 f5f2 	udiv	r5, r3, r2
 8003c80:	fb02 3515 	mls	r5, r2, r5, r3
 8003c84:	b965      	cbnz	r5, 8003ca0 <USBD_LL_DataInStage+0x6a>
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d80a      	bhi.n	8003ca0 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8003c8a:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d206      	bcs.n	8003ca0 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003c92:	462a      	mov	r2, r5
 8003c94:	f000 fa98 	bl	80041c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003c98:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003c9c:	462b      	mov	r3, r5
 8003c9e:	e7df      	b.n	8003c60 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003ca0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	b12b      	cbz	r3, 8003cb4 <USBD_LL_DataInStage+0x7e>
 8003ca8:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003cac:	2a03      	cmp	r2, #3
 8003cae:	d101      	bne.n	8003cb4 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003cb4:	2180      	movs	r1, #128	; 0x80
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f000 fcbc 	bl	8004634 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f000 faad 	bl	800421c <USBD_CtlReceiveStatus>
 8003cc2:	e7d2      	b.n	8003c6a <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003cc4:	f032 0304 	bics.w	r3, r2, #4
 8003cc8:	d1cf      	bne.n	8003c6a <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	f000 fcb2 	bl	8004634 <USBD_LL_StallEP>
 8003cd0:	e7cb      	b.n	8003c6a <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003cd2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	b133      	cbz	r3, 8003ce8 <USBD_LL_DataInStage+0xb2>
 8003cda:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003cde:	2a03      	cmp	r2, #3
 8003ce0:	d102      	bne.n	8003ce8 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8003ce2:	4798      	blx	r3
  return USBD_OK;
 8003ce4:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003ce6:	e7c7      	b.n	8003c78 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8003ce8:	2002      	movs	r0, #2
 8003cea:	e7c5      	b.n	8003c78 <USBD_LL_DataInStage+0x42>

08003cec <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003cec:	2200      	movs	r2, #0
{
 8003cee:	b570      	push	{r4, r5, r6, lr}
 8003cf0:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003cf2:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003cf4:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	2340      	movs	r3, #64	; 0x40
 8003cfa:	f000 fc7d 	bl	80045f8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003cfe:	4633      	mov	r3, r6
 8003d00:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003d02:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d06:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f000 fc73 	bl	80045f8 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8003d12:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8003d14:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003d18:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d1a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003d1c:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003d20:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003d24:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003d26:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8003d2a:	b123      	cbz	r3, 8003d36 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003d2c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003d30:	4620      	mov	r0, r4
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003d36:	2000      	movs	r0, #0
 8003d38:	bd70      	pop	{r4, r5, r6, pc}

08003d3a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003d3a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	4770      	bx	lr

08003d40 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003d40:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d44:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003d48:	2304      	movs	r3, #4
 8003d4a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003d4e:	2000      	movs	r0, #0
 8003d50:	4770      	bx	lr

08003d52 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003d52:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d56:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8003d58:	bf04      	itt	eq
 8003d5a:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8003d5e:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8003d62:	2000      	movs	r0, #0
 8003d64:	4770      	bx	lr

08003d66 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003d66:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d68:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003d6c:	2a03      	cmp	r2, #3
 8003d6e:	d104      	bne.n	8003d7a <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8003d70:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	b103      	cbz	r3, 8003d7a <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003d78:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	bd08      	pop	{r3, pc}

08003d7e <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8003d7e:	b510      	push	{r4, lr}
 8003d80:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8003d82:	2180      	movs	r1, #128	; 0x80
 8003d84:	f000 fc56 	bl	8004634 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003d88:	4620      	mov	r0, r4
}
 8003d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003d8e:	2100      	movs	r1, #0
 8003d90:	f000 bc50 	b.w	8004634 <USBD_LL_StallEP>

08003d94 <USBD_StdDevReq>:
{
 8003d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d96:	780b      	ldrb	r3, [r1, #0]
{
 8003d98:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003d9e:	2b20      	cmp	r3, #32
{
 8003da0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003da2:	d012      	beq.n	8003dca <USBD_StdDevReq+0x36>
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d010      	beq.n	8003dca <USBD_StdDevReq+0x36>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d15b      	bne.n	8003e64 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 8003dac:	784b      	ldrb	r3, [r1, #1]
 8003dae:	2b09      	cmp	r3, #9
 8003db0:	d858      	bhi.n	8003e64 <USBD_StdDevReq+0xd0>
 8003db2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003db6:	00e9      	.short	0x00e9
 8003db8:	00570105 	.word	0x00570105
 8003dbc:	005700fe 	.word	0x005700fe
 8003dc0:	00130084 	.word	0x00130084
 8003dc4:	00d20057 	.word	0x00d20057
 8003dc8:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8003dca:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003dce:	4629      	mov	r1, r5
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	4798      	blx	r3
}
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	b003      	add	sp, #12
 8003dda:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003de2:	884b      	ldrh	r3, [r1, #2]
 8003de4:	0a1a      	lsrs	r2, r3, #8
 8003de6:	3a01      	subs	r2, #1
 8003de8:	2a06      	cmp	r2, #6
 8003dea:	d83b      	bhi.n	8003e64 <USBD_StdDevReq+0xd0>
 8003dec:	e8df f002 	tbb	[pc, r2]
 8003df0:	3a2d2004 	.word	0x3a2d2004
 8003df4:	523a      	.short	0x523a
 8003df6:	5c          	.byte	0x5c
 8003df7:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003df8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003dfc:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003dfe:	f10d 0106 	add.w	r1, sp, #6
 8003e02:	7c20      	ldrb	r0, [r4, #16]
 8003e04:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003e06:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003e0a:	b152      	cbz	r2, 8003e22 <USBD_StdDevReq+0x8e>
 8003e0c:	88eb      	ldrh	r3, [r5, #6]
 8003e0e:	b143      	cbz	r3, 8003e22 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8003e10:	429a      	cmp	r2, r3
 8003e12:	bf28      	it	cs
 8003e14:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003e16:	4601      	mov	r1, r0
 8003e18:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8003e1a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003e1e:	f000 f9c6 	bl	80041ae <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003e22:	88eb      	ldrh	r3, [r5, #6]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1d6      	bne.n	8003dd6 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f000 f9ec 	bl	8004206 <USBD_CtlSendStatus>
 8003e2e:	e7d2      	b.n	8003dd6 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e30:	7c02      	ldrb	r2, [r0, #16]
 8003e32:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e36:	b932      	cbnz	r2, 8003e46 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003e3a:	f10d 0006 	add.w	r0, sp, #6
 8003e3e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003e40:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003e42:	7043      	strb	r3, [r0, #1]
 8003e44:	e7df      	b.n	8003e06 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	e7f7      	b.n	8003e3a <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b05      	cmp	r3, #5
 8003e4e:	d809      	bhi.n	8003e64 <USBD_StdDevReq+0xd0>
 8003e50:	e8df f003 	tbb	[pc, r3]
 8003e54:	14100c03 	.word	0x14100c03
 8003e58:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003e5a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e5e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1cc      	bne.n	8003dfe <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8003e64:	4620      	mov	r0, r4
 8003e66:	f7ff ff8a 	bl	8003d7e <USBD_CtlError.constprop.1>
 8003e6a:	e7b4      	b.n	8003dd6 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003e6c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	e7f5      	b.n	8003e60 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003e74:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	e7f1      	b.n	8003e60 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003e7c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	e7ed      	b.n	8003e60 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003e84:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	e7e9      	b.n	8003e60 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003e8c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	e7e5      	b.n	8003e60 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e94:	7c03      	ldrb	r3, [r0, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e4      	bne.n	8003e64 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003e9a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e9e:	f10d 0006 	add.w	r0, sp, #6
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea4:	4798      	blx	r3
 8003ea6:	e7ae      	b.n	8003e06 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ea8:	7c03      	ldrb	r3, [r0, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1da      	bne.n	8003e64 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003eae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003eb2:	f10d 0006 	add.w	r0, sp, #6
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003eba:	2307      	movs	r3, #7
 8003ebc:	e7c1      	b.n	8003e42 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003ebe:	888b      	ldrh	r3, [r1, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1cf      	bne.n	8003e64 <USBD_StdDevReq+0xd0>
 8003ec4:	88cb      	ldrh	r3, [r1, #6]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1cc      	bne.n	8003e64 <USBD_StdDevReq+0xd0>
 8003eca:	884d      	ldrh	r5, [r1, #2]
 8003ecc:	2d7f      	cmp	r5, #127	; 0x7f
 8003ece:	d8c9      	bhi.n	8003e64 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ed0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d0c5      	beq.n	8003e64 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003ed8:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8003eda:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003ede:	f000 fbd7 	bl	8004690 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f000 f98f 	bl	8004206 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003ee8:	b11d      	cbz	r5, 8003ef2 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003eea:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003eec:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003ef0:	e771      	b.n	8003dd6 <USBD_StdDevReq+0x42>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e7fa      	b.n	8003eec <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8003ef6:	7889      	ldrb	r1, [r1, #2]
 8003ef8:	4d37      	ldr	r5, [pc, #220]	; (8003fd8 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003efa:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003efc:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003efe:	d8b1      	bhi.n	8003e64 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003f00:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d008      	beq.n	8003f1a <USBD_StdDevReq+0x186>
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d014      	beq.n	8003f36 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8003f0c:	f7ff ff37 	bl	8003d7e <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003f10:	7829      	ldrb	r1, [r5, #0]
 8003f12:	4620      	mov	r0, r4
 8003f14:	f7ff fe21 	bl	8003b5a <USBD_ClrClassConfig>
 8003f18:	e75d      	b.n	8003dd6 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8003f1a:	2900      	cmp	r1, #0
 8003f1c:	d084      	beq.n	8003e28 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8003f1e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003f20:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8003f22:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003f24:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7ff fe0b 	bl	8003b44 <USBD_SetClassConfig>
 8003f2e:	2802      	cmp	r0, #2
 8003f30:	f47f af7a 	bne.w	8003e28 <USBD_StdDevReq+0x94>
 8003f34:	e796      	b.n	8003e64 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8003f36:	b931      	cbnz	r1, 8003f46 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003f38:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8003f3a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003f3c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8003f40:	f7ff fe0b 	bl	8003b5a <USBD_ClrClassConfig>
 8003f44:	e770      	b.n	8003e28 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8003f46:	6841      	ldr	r1, [r0, #4]
 8003f48:	2901      	cmp	r1, #1
 8003f4a:	f43f af6d 	beq.w	8003e28 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003f4e:	b2c9      	uxtb	r1, r1
 8003f50:	f7ff fe03 	bl	8003b5a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003f54:	7829      	ldrb	r1, [r5, #0]
 8003f56:	6061      	str	r1, [r4, #4]
 8003f58:	e7e6      	b.n	8003f28 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 8003f5a:	88ca      	ldrh	r2, [r1, #6]
 8003f5c:	2a01      	cmp	r2, #1
 8003f5e:	d181      	bne.n	8003e64 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003f60:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f43f af7d 	beq.w	8003e64 <USBD_StdDevReq+0xd0>
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d904      	bls.n	8003f78 <USBD_StdDevReq+0x1e4>
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	f47f af78 	bne.w	8003e64 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003f74:	1d01      	adds	r1, r0, #4
 8003f76:	e003      	b.n	8003f80 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8003f78:	4601      	mov	r1, r0
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003f80:	4620      	mov	r0, r4
 8003f82:	f000 f914 	bl	80041ae <USBD_CtlSendData>
 8003f86:	e726      	b.n	8003dd6 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8003f88:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	f63f af68 	bhi.w	8003e64 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8003f94:	88cb      	ldrh	r3, [r1, #6]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	f47f af64 	bne.w	8003e64 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003fa0:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003fa4:	b10b      	cbz	r3, 8003faa <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003faa:	2202      	movs	r2, #2
 8003fac:	f104 010c 	add.w	r1, r4, #12
 8003fb0:	e7e6      	b.n	8003f80 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003fb2:	884b      	ldrh	r3, [r1, #2]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	f47f af0e 	bne.w	8003dd6 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003fba:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8003fbe:	e733      	b.n	8003e28 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8003fc0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	f63f af4c 	bhi.w	8003e64 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003fcc:	884b      	ldrh	r3, [r1, #2]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	f47f af01 	bne.w	8003dd6 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e7f0      	b.n	8003fba <USBD_StdDevReq+0x226>
 8003fd8:	20000388 	.word	0x20000388

08003fdc <USBD_StdItfReq>:
{
 8003fdc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fde:	780b      	ldrb	r3, [r1, #0]
{
 8003fe0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003fe6:	2b20      	cmp	r3, #32
{
 8003fe8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fea:	d002      	beq.n	8003ff2 <USBD_StdItfReq+0x16>
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d000      	beq.n	8003ff2 <USBD_StdItfReq+0x16>
 8003ff0:	b9ab      	cbnz	r3, 800401e <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8003ff2:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d810      	bhi.n	800401e <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003ffc:	792b      	ldrb	r3, [r5, #4]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d80d      	bhi.n	800401e <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004002:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004006:	4629      	mov	r1, r5
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	4620      	mov	r0, r4
 800400c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800400e:	88eb      	ldrh	r3, [r5, #6]
 8004010:	b91b      	cbnz	r3, 800401a <USBD_StdItfReq+0x3e>
 8004012:	b910      	cbnz	r0, 800401a <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8004014:	4620      	mov	r0, r4
 8004016:	f000 f8f6 	bl	8004206 <USBD_CtlSendStatus>
}
 800401a:	2000      	movs	r0, #0
 800401c:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800401e:	4620      	mov	r0, r4
 8004020:	f7ff fead 	bl	8003d7e <USBD_CtlError.constprop.1>
          break;
 8004024:	e7f9      	b.n	800401a <USBD_StdItfReq+0x3e>

08004026 <USBD_StdEPReq>:
{
 8004026:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004028:	780a      	ldrb	r2, [r1, #0]
{
 800402a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800402c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004030:	2a20      	cmp	r2, #32
{
 8004032:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004034:	d014      	beq.n	8004060 <USBD_StdEPReq+0x3a>
 8004036:	2a40      	cmp	r2, #64	; 0x40
 8004038:	d012      	beq.n	8004060 <USBD_StdEPReq+0x3a>
 800403a:	b96a      	cbnz	r2, 8004058 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 800403c:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800403e:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8004040:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8004042:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8004044:	d020      	beq.n	8004088 <USBD_StdEPReq+0x62>
 8004046:	d336      	bcc.n	80040b6 <USBD_StdEPReq+0x90>
 8004048:	2a03      	cmp	r2, #3
 800404a:	d105      	bne.n	8004058 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800404c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004050:	2a02      	cmp	r2, #2
 8004052:	d027      	beq.n	80040a4 <USBD_StdEPReq+0x7e>
 8004054:	2a03      	cmp	r2, #3
 8004056:	d00b      	beq.n	8004070 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 8004058:	4620      	mov	r0, r4
 800405a:	f7ff fe90 	bl	8003d7e <USBD_CtlError.constprop.1>
              break;
 800405e:	e005      	b.n	800406c <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8004060:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8004064:	4619      	mov	r1, r3
 8004066:	6892      	ldr	r2, [r2, #8]
 8004068:	4620      	mov	r0, r4
 800406a:	4790      	blx	r2
}
 800406c:	2000      	movs	r0, #0
 800406e:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004070:	885a      	ldrh	r2, [r3, #2]
 8004072:	b92a      	cbnz	r2, 8004080 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8004074:	064a      	lsls	r2, r1, #25
 8004076:	d003      	beq.n	8004080 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004078:	88db      	ldrh	r3, [r3, #6]
 800407a:	b90b      	cbnz	r3, 8004080 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 800407c:	f000 fada 	bl	8004634 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8004080:	4620      	mov	r0, r4
 8004082:	f000 f8c0 	bl	8004206 <USBD_CtlSendStatus>
              break;
 8004086:	e7f1      	b.n	800406c <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8004088:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800408c:	2a02      	cmp	r2, #2
 800408e:	d009      	beq.n	80040a4 <USBD_StdEPReq+0x7e>
 8004090:	2a03      	cmp	r2, #3
 8004092:	d1e1      	bne.n	8004058 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004094:	885b      	ldrh	r3, [r3, #2]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e8      	bne.n	800406c <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 800409a:	064d      	lsls	r5, r1, #25
 800409c:	d0f0      	beq.n	8004080 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800409e:	f000 fad7 	bl	8004650 <USBD_LL_ClearStallEP>
 80040a2:	e7ed      	b.n	8004080 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80040a4:	064b      	lsls	r3, r1, #25
 80040a6:	d0d7      	beq.n	8004058 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80040a8:	f000 fac4 	bl	8004634 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80040ac:	2180      	movs	r1, #128	; 0x80
 80040ae:	4620      	mov	r0, r4
 80040b0:	f000 fac0 	bl	8004634 <USBD_LL_StallEP>
 80040b4:	e7da      	b.n	800406c <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80040b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d018      	beq.n	80040f0 <USBD_StdEPReq+0xca>
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d1ca      	bne.n	8004058 <USBD_StdEPReq+0x32>
 80040c2:	2314      	movs	r3, #20
 80040c4:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80040c8:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80040cc:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80040d0:	d01f      	beq.n	8004112 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80040d2:	6992      	ldr	r2, [r2, #24]
 80040d4:	2a00      	cmp	r2, #0
 80040d6:	d0bf      	beq.n	8004058 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80040d8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80040dc:	fb05 3503 	mla	r5, r5, r3, r3
 80040e0:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80040e2:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80040e6:	d11f      	bne.n	8004128 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80040e8:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80040ea:	2202      	movs	r2, #2
 80040ec:	4629      	mov	r1, r5
 80040ee:	e00c      	b.n	800410a <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80040f0:	064a      	lsls	r2, r1, #25
 80040f2:	d1b1      	bne.n	8004058 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80040f4:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 80040f6:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80040fa:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80040fe:	bf4c      	ite	mi
 8004100:	f100 0114 	addmi.w	r1, r0, #20
 8004104:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8004108:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800410a:	4620      	mov	r0, r4
 800410c:	f000 f84f 	bl	80041ae <USBD_CtlSendData>
              break;
 8004110:	e7ac      	b.n	800406c <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004112:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8004116:	2a00      	cmp	r2, #0
 8004118:	d09e      	beq.n	8004058 <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800411a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800411e:	fb03 0505 	mla	r5, r3, r5, r0
 8004122:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004126:	e7dc      	b.n	80040e2 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004128:	4620      	mov	r0, r4
 800412a:	f000 fa9f 	bl	800466c <USBD_LL_IsStallEP>
 800412e:	b108      	cbz	r0, 8004134 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8004130:	2301      	movs	r3, #1
 8004132:	e7d9      	b.n	80040e8 <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8004134:	6028      	str	r0, [r5, #0]
 8004136:	e7d8      	b.n	80040ea <USBD_StdEPReq+0xc4>

08004138 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8004138:	780b      	ldrb	r3, [r1, #0]
 800413a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800413c:	784b      	ldrb	r3, [r1, #1]
 800413e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004140:	78ca      	ldrb	r2, [r1, #3]
 8004142:	788b      	ldrb	r3, [r1, #2]
 8004144:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004148:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800414a:	794a      	ldrb	r2, [r1, #5]
 800414c:	790b      	ldrb	r3, [r1, #4]
 800414e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004152:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004154:	79ca      	ldrb	r2, [r1, #7]
 8004156:	798b      	ldrb	r3, [r1, #6]
 8004158:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800415c:	80c3      	strh	r3, [r0, #6]
}
 800415e:	4770      	bx	lr

08004160 <USBD_CtlError>:
{
 8004160:	b510      	push	{r4, lr}
 8004162:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004164:	2180      	movs	r1, #128	; 0x80
 8004166:	f000 fa65 	bl	8004634 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800416a:	4620      	mov	r0, r4
}
 800416c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004170:	2100      	movs	r1, #0
 8004172:	f000 ba5f 	b.w	8004634 <USBD_LL_StallEP>

08004176 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004176:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8004178:	b188      	cbz	r0, 800419e <USBD_GetString+0x28>
 800417a:	4605      	mov	r5, r0
 800417c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800417e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2c00      	cmp	r4, #0
 8004186:	d1f9      	bne.n	800417c <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004188:	3301      	adds	r3, #1
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800418e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004190:	2303      	movs	r3, #3
 8004192:	704b      	strb	r3, [r1, #1]
 8004194:	2302      	movs	r3, #2
 8004196:	3801      	subs	r0, #1
    while (*desc != '\0')
 8004198:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800419c:	b905      	cbnz	r5, 80041a0 <USBD_GetString+0x2a>
}
 800419e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	54cd      	strb	r5, [r1, r3]
 80041a4:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80041a6:	3302      	adds	r3, #2
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	548c      	strb	r4, [r1, r2]
 80041ac:	e7f4      	b.n	8004198 <USBD_GetString+0x22>

080041ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80041ae:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80041b0:	2202      	movs	r2, #2
{
 80041b2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80041b4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80041b8:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80041bc:	460a      	mov	r2, r1
 80041be:	2100      	movs	r1, #0
 80041c0:	f000 fa74 	bl	80046ac <USBD_LL_Transmit>

  return USBD_OK;
}
 80041c4:	2000      	movs	r0, #0
 80041c6:	bd10      	pop	{r4, pc}

080041c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80041c8:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80041ca:	4613      	mov	r3, r2
 80041cc:	460a      	mov	r2, r1
 80041ce:	2100      	movs	r1, #0
 80041d0:	f000 fa6c 	bl	80046ac <USBD_LL_Transmit>

  return USBD_OK;
}
 80041d4:	2000      	movs	r0, #0
 80041d6:	bd08      	pop	{r3, pc}

080041d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80041d8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80041da:	2203      	movs	r2, #3
{
 80041dc:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80041de:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80041e2:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80041e6:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80041e8:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80041ec:	2100      	movs	r1, #0
 80041ee:	f000 fa6b 	bl	80046c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80041f2:	2000      	movs	r0, #0
 80041f4:	bd10      	pop	{r4, pc}

080041f6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80041f6:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80041f8:	4613      	mov	r3, r2
 80041fa:	460a      	mov	r2, r1
 80041fc:	2100      	movs	r1, #0
 80041fe:	f000 fa63 	bl	80046c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004202:	2000      	movs	r0, #0
 8004204:	bd08      	pop	{r3, pc}

08004206 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004206:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004208:	2304      	movs	r3, #4
 800420a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800420e:	2300      	movs	r3, #0
 8004210:	461a      	mov	r2, r3
 8004212:	4619      	mov	r1, r3
 8004214:	f000 fa4a 	bl	80046ac <USBD_LL_Transmit>

  return USBD_OK;
}
 8004218:	2000      	movs	r0, #0
 800421a:	bd08      	pop	{r3, pc}

0800421c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800421c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800421e:	2305      	movs	r3, #5
 8004220:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004224:	2300      	movs	r3, #0
 8004226:	461a      	mov	r2, r3
 8004228:	4619      	mov	r1, r3
 800422a:	f000 fa4d 	bl	80046c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800422e:	2000      	movs	r0, #0
 8004230:	bd08      	pop	{r3, pc}
	...

08004234 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004234:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004236:	2200      	movs	r2, #0
 8004238:	490e      	ldr	r1, [pc, #56]	; (8004274 <MX_USB_DEVICE_Init+0x40>)
 800423a:	480f      	ldr	r0, [pc, #60]	; (8004278 <MX_USB_DEVICE_Init+0x44>)
 800423c:	f7ff fc61 	bl	8003b02 <USBD_Init>
 8004240:	b108      	cbz	r0, 8004246 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8004242:	f7fd fb89 	bl	8001958 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004246:	490d      	ldr	r1, [pc, #52]	; (800427c <MX_USB_DEVICE_Init+0x48>)
 8004248:	480b      	ldr	r0, [pc, #44]	; (8004278 <MX_USB_DEVICE_Init+0x44>)
 800424a:	f7ff fc6f 	bl	8003b2c <USBD_RegisterClass>
 800424e:	b108      	cbz	r0, 8004254 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8004250:	f7fd fb82 	bl	8001958 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004254:	490a      	ldr	r1, [pc, #40]	; (8004280 <MX_USB_DEVICE_Init+0x4c>)
 8004256:	4808      	ldr	r0, [pc, #32]	; (8004278 <MX_USB_DEVICE_Init+0x44>)
 8004258:	f7ff fc12 	bl	8003a80 <USBD_CDC_RegisterInterface>
 800425c:	b108      	cbz	r0, 8004262 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800425e:	f7fd fb7b 	bl	8001958 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004262:	4805      	ldr	r0, [pc, #20]	; (8004278 <MX_USB_DEVICE_Init+0x44>)
 8004264:	f7ff fc69 	bl	8003b3a <USBD_Start>
 8004268:	b118      	cbz	r0, 8004272 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800426a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800426e:	f7fd bb73 	b.w	8001958 <Error_Handler>
}
 8004272:	bd08      	pop	{r3, pc}
 8004274:	2000012c 	.word	0x2000012c
 8004278:	20000808 	.word	0x20000808
 800427c:	2000000c 	.word	0x2000000c
 8004280:	2000011c 	.word	0x2000011c

08004284 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004284:	2000      	movs	r0, #0
 8004286:	4770      	bx	lr

08004288 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004288:	2000      	movs	r0, #0
 800428a:	4770      	bx	lr

0800428c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800428c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN 6 */
  uint32_t len=*Len;
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8004290:	4d2a      	ldr	r5, [pc, #168]	; (800433c <CDC_Receive_FS+0xb0>)
{
 8004292:	4604      	mov	r4, r0
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8004294:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8004298:	2b03      	cmp	r3, #3
 800429a:	d14c      	bne.n	8004336 <CDC_Receive_FS+0xaa>
  {
     return USBD_FAIL;
  }

  if (((Buf == NULL) || (Len == NULL)) || (*Len <= 0))
 800429c:	2800      	cmp	r0, #0
 800429e:	d04a      	beq.n	8004336 <CDC_Receive_FS+0xaa>
  uint32_t len=*Len;
 80042a0:	680f      	ldr	r7, [r1, #0]
  if (((Buf == NULL) || (Len == NULL)) || (*Len <= 0))
 80042a2:	2f00      	cmp	r7, #0
 80042a4:	d047      	beq.n	8004336 <CDC_Receive_FS+0xaa>

  /* Get data */
  uint8_t result = USBD_OK;
  do
  {
      result = USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	f7ff fbf8 	bl	8003a9e <USBD_CDC_SetRxBuffer>
  }
  while(result != USBD_OK);
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d1f9      	bne.n	80042a6 <CDC_Receive_FS+0x1a>

  do
  {
     result = USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80042b2:	4d22      	ldr	r5, [pc, #136]	; (800433c <CDC_Receive_FS+0xb0>)
 80042b4:	4628      	mov	r0, r5
 80042b6:	f7ff fc11 	bl	8003adc <USBD_CDC_ReceivePacket>
  }
  while(result != USBD_OK);
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d1fa      	bne.n	80042b4 <CDC_Receive_FS+0x28>

  while (len--)
  {
     comm.usb.rx_buffer[comm.usb.rx_index++] = *Buf;
 80042be:	4d20      	ldr	r5, [pc, #128]	; (8004340 <CDC_Receive_FS+0xb4>)
         }
         else
         {
             comm.usb.available = 1;
             if (xHigherPriorityTaskWoken != pdFALSE)
                 portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80042c0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8004348 <CDC_Receive_FS+0xbc>
 80042c4:	4427      	add	r7, r4
  while (len--)
 80042c6:	42bc      	cmp	r4, r7
 80042c8:	d103      	bne.n	80042d2 <CDC_Receive_FS+0x46>
         }
     }
     Buf++;
  }

  return USBD_OK;
 80042ca:	2000      	movs	r0, #0
  /* USER CODE END 6 */
}
 80042cc:	b002      	add	sp, #8
 80042ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     comm.usb.rx_buffer[comm.usb.rx_index++] = *Buf;
 80042d2:	f895 2066 	ldrb.w	r2, [r5, #102]	; 0x66
 80042d6:	2600      	movs	r6, #0
 80042d8:	1c53      	adds	r3, r2, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
     if (comm.usb.rx_index >= RX_BUFF_LAST)
 80042e0:	2b62      	cmp	r3, #98	; 0x62
     comm.usb.last = 1;
 80042e2:	f04f 0301 	mov.w	r3, #1
 80042e6:	4621      	mov	r1, r4
     comm.usb.rx_buffer[comm.usb.rx_index++] = *Buf;
 80042e8:	7820      	ldrb	r0, [r4, #0]
         comm.usb.rx_index = 0;
 80042ea:	bf88      	it	hi
 80042ec:	f885 6066 	strbhi.w	r6, [r5, #102]	; 0x66
     comm.usb.rx_buffer[comm.usb.rx_index++] = *Buf;
 80042f0:	54a8      	strb	r0, [r5, r2]
     comm.uart.last = 0;
 80042f2:	f885 60cb 	strb.w	r6, [r5, #203]	; 0xcb
     comm.usb.last = 1;
 80042f6:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
 80042fa:	441c      	add	r4, r3
     if (*Buf == '\n')
 80042fc:	780b      	ldrb	r3, [r1, #0]
 80042fe:	2b0a      	cmp	r3, #10
 8004300:	d1e1      	bne.n	80042c6 <CDC_Receive_FS+0x3a>
         if(xSemaphoreGiveFromISR(sem1_comm, &xHigherPriorityTaskWoken) != pdPASS)
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <CDC_Receive_FS+0xb8>)
         portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004304:	a902      	add	r1, sp, #8
 8004306:	f841 6d04 	str.w	r6, [r1, #-4]!
         if(xSemaphoreGiveFromISR(sem1_comm, &xHigherPriorityTaskWoken) != pdPASS)
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	f005 fccf 	bl	8009cae <xQueueGiveFromISR>
 8004310:	2801      	cmp	r0, #1
 8004312:	d002      	beq.n	800431a <CDC_Receive_FS+0x8e>
             comm.usb.rx_index = 0;
 8004314:	f885 6066 	strb.w	r6, [r5, #102]	; 0x66
 8004318:	e7d5      	b.n	80042c6 <CDC_Receive_FS+0x3a>
             if (xHigherPriorityTaskWoken != pdFALSE)
 800431a:	9b01      	ldr	r3, [sp, #4]
             comm.usb.available = 1;
 800431c:	f885 0065 	strb.w	r0, [r5, #101]	; 0x65
             if (xHigherPriorityTaskWoken != pdFALSE)
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0d0      	beq.n	80042c6 <CDC_Receive_FS+0x3a>
                 portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8004324:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004328:	f8c8 3000 	str.w	r3, [r8]
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	e7c7      	b.n	80042c6 <CDC_Receive_FS+0x3a>
     return USBD_FAIL;
 8004336:	2002      	movs	r0, #2
 8004338:	e7c8      	b.n	80042cc <CDC_Receive_FS+0x40>
 800433a:	bf00      	nop
 800433c:	20000808 	.word	0x20000808
 8004340:	2000315c 	.word	0x2000315c
 8004344:	20003124 	.word	0x20003124
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <CDC_Init_FS>:
{
 800434c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800434e:	4c06      	ldr	r4, [pc, #24]	; (8004368 <CDC_Init_FS+0x1c>)
 8004350:	2200      	movs	r2, #0
 8004352:	4906      	ldr	r1, [pc, #24]	; (800436c <CDC_Init_FS+0x20>)
 8004354:	4620      	mov	r0, r4
 8004356:	f7ff fb9a 	bl	8003a8e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800435a:	4905      	ldr	r1, [pc, #20]	; (8004370 <CDC_Init_FS+0x24>)
 800435c:	4620      	mov	r0, r4
 800435e:	f7ff fb9e 	bl	8003a9e <USBD_CDC_SetRxBuffer>
}
 8004362:	2000      	movs	r0, #0
 8004364:	bd10      	pop	{r4, pc}
 8004366:	bf00      	nop
 8004368:	20000808 	.word	0x20000808
 800436c:	2000328e 	.word	0x2000328e
 8004370:	2000322a 	.word	0x2000322a

08004374 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004374:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004376:	4c09      	ldr	r4, [pc, #36]	; (800439c <CDC_Transmit_FS+0x28>)
{
 8004378:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800437a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800437e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004382:	b943      	cbnz	r3, 8004396 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004384:	4601      	mov	r1, r0
 8004386:	4620      	mov	r0, r4
 8004388:	f7ff fb81 	bl	8003a8e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800438c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800438e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004392:	f7ff bb8a 	b.w	8003aaa <USBD_CDC_TransmitPacket>
}
 8004396:	2001      	movs	r0, #1
 8004398:	bd10      	pop	{r4, pc}
 800439a:	bf00      	nop
 800439c:	20000808 	.word	0x20000808

080043a0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80043a0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80043a2:	4801      	ldr	r0, [pc, #4]	; (80043a8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80043a4:	800b      	strh	r3, [r1, #0]
}
 80043a6:	4770      	bx	lr
 80043a8:	20000148 	.word	0x20000148

080043ac <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80043ac:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80043ae:	4801      	ldr	r0, [pc, #4]	; (80043b4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80043b0:	800b      	strh	r3, [r1, #0]
}
 80043b2:	4770      	bx	lr
 80043b4:	2000015c 	.word	0x2000015c

080043b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80043b8:	2300      	movs	r3, #0
 80043ba:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80043bc:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 80043be:	0f05      	lsrs	r5, r0, #28
 80043c0:	b2ec      	uxtb	r4, r5
 80043c2:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80043c4:	bf94      	ite	ls
 80043c6:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80043c8:	3437      	addhi	r4, #55	; 0x37
 80043ca:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80043ce:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80043d2:	3301      	adds	r3, #1
 80043d4:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 80043d6:	b2dc      	uxtb	r4, r3
 80043d8:	42a2      	cmp	r2, r4
    value = value << 4;
 80043da:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80043de:	d8ee      	bhi.n	80043be <IntToUnicode+0x6>
  }
}
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080043e4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80043e4:	231a      	movs	r3, #26
{
 80043e6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80043e8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <USBD_FS_SerialStrDescriptor+0x2c>)
 80043ec:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80043ee:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80043f0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80043f2:	18c0      	adds	r0, r0, r3
 80043f4:	d00a      	beq.n	800440c <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80043f8:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80043fa:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80043fc:	4906      	ldr	r1, [pc, #24]	; (8004418 <USBD_FS_SerialStrDescriptor+0x34>)
 80043fe:	f7ff ffdb 	bl	80043b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004402:	2204      	movs	r2, #4
 8004404:	4905      	ldr	r1, [pc, #20]	; (800441c <USBD_FS_SerialStrDescriptor+0x38>)
 8004406:	4620      	mov	r0, r4
 8004408:	f7ff ffd6 	bl	80043b8 <IntToUnicode>
}
 800440c:	4804      	ldr	r0, [pc, #16]	; (8004420 <USBD_FS_SerialStrDescriptor+0x3c>)
 800440e:	bd10      	pop	{r4, pc}
 8004410:	1ffff7e8 	.word	0x1ffff7e8
 8004414:	1ffff7ec 	.word	0x1ffff7ec
 8004418:	20000162 	.word	0x20000162
 800441c:	20000172 	.word	0x20000172
 8004420:	20000160 	.word	0x20000160

08004424 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004424:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004426:	4c04      	ldr	r4, [pc, #16]	; (8004438 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004428:	460a      	mov	r2, r1
 800442a:	4804      	ldr	r0, [pc, #16]	; (800443c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800442c:	4621      	mov	r1, r4
 800442e:	f7ff fea2 	bl	8004176 <USBD_GetString>
}
 8004432:	4620      	mov	r0, r4
 8004434:	bd10      	pop	{r4, pc}
 8004436:	bf00      	nop
 8004438:	20003290 	.word	0x20003290
 800443c:	0800c449 	.word	0x0800c449

08004440 <USBD_FS_ProductStrDescriptor>:
{
 8004440:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004442:	4c04      	ldr	r4, [pc, #16]	; (8004454 <USBD_FS_ProductStrDescriptor+0x14>)
 8004444:	460a      	mov	r2, r1
 8004446:	4804      	ldr	r0, [pc, #16]	; (8004458 <USBD_FS_ProductStrDescriptor+0x18>)
 8004448:	4621      	mov	r1, r4
 800444a:	f7ff fe94 	bl	8004176 <USBD_GetString>
}
 800444e:	4620      	mov	r0, r4
 8004450:	bd10      	pop	{r4, pc}
 8004452:	bf00      	nop
 8004454:	20003290 	.word	0x20003290
 8004458:	0800c459 	.word	0x0800c459

0800445c <USBD_FS_ConfigStrDescriptor>:
{
 800445c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800445e:	4c04      	ldr	r4, [pc, #16]	; (8004470 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004460:	460a      	mov	r2, r1
 8004462:	4804      	ldr	r0, [pc, #16]	; (8004474 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004464:	4621      	mov	r1, r4
 8004466:	f7ff fe86 	bl	8004176 <USBD_GetString>
}
 800446a:	4620      	mov	r0, r4
 800446c:	bd10      	pop	{r4, pc}
 800446e:	bf00      	nop
 8004470:	20003290 	.word	0x20003290
 8004474:	0800c430 	.word	0x0800c430

08004478 <USBD_FS_InterfaceStrDescriptor>:
{
 8004478:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800447a:	4c04      	ldr	r4, [pc, #16]	; (800448c <USBD_FS_InterfaceStrDescriptor+0x14>)
 800447c:	460a      	mov	r2, r1
 800447e:	4804      	ldr	r0, [pc, #16]	; (8004490 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004480:	4621      	mov	r1, r4
 8004482:	f7ff fe78 	bl	8004176 <USBD_GetString>
}
 8004486:	4620      	mov	r0, r4
 8004488:	bd10      	pop	{r4, pc}
 800448a:	bf00      	nop
 800448c:	20003290 	.word	0x20003290
 8004490:	0800c43b 	.word	0x0800c43b

08004494 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004494:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8004496:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <HAL_PCD_MspInit+0x3c>)
 8004498:	6802      	ldr	r2, [r0, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d115      	bne.n	80044ca <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800449e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80044a2:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 80044a4:	2107      	movs	r1, #7
    __HAL_RCC_USB_CLK_ENABLE();
 80044a6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80044aa:	61da      	str	r2, [r3, #28]
 80044ac:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 80044ae:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80044b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 80044b6:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80044b8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 7, 0);
 80044ba:	f7fd fb1f 	bl	8001afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80044be:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80044c0:	b003      	add	sp, #12
 80044c2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80044c6:	f7fd bb4d 	b.w	8001b64 <HAL_NVIC_EnableIRQ>
}
 80044ca:	b003      	add	sp, #12
 80044cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80044d0:	40005c00 	.word	0x40005c00

080044d4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80044d4:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80044d8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80044dc:	f7ff bb44 	b.w	8003b68 <USBD_LL_SetupStage>

080044e0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80044e0:	2328      	movs	r3, #40	; 0x28
 80044e2:	fb03 0301 	mla	r3, r3, r1, r0
 80044e6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80044ea:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80044ee:	f7ff bb68 	b.w	8003bc2 <USBD_LL_DataOutStage>

080044f2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80044f2:	2328      	movs	r3, #40	; 0x28
 80044f4:	fb03 0301 	mla	r3, r3, r1, r0
 80044f8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80044fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044fe:	f7ff bb9a 	b.w	8003c36 <USBD_LL_DataInStage>

08004502 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004502:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004506:	f7ff bc2e 	b.w	8003d66 <USBD_LL_SOF>

0800450a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800450a:	6883      	ldr	r3, [r0, #8]
{
 800450c:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800450e:	2b02      	cmp	r3, #2
{
 8004510:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004512:	d001      	beq.n	8004518 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004514:	f7fd fa20 	bl	8001958 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004518:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800451c:	2101      	movs	r1, #1
 800451e:	f7ff fc0c 	bl	8003d3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004522:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8004526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800452a:	f7ff bbdf 	b.w	8003cec <USBD_LL_Reset>
	...

08004530 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004530:	b510      	push	{r4, lr}
 8004532:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004534:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004538:	f7ff fc02 	bl	8003d40 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800453c:	69a3      	ldr	r3, [r4, #24]
 800453e:	b123      	cbz	r3, 800454a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004540:	4a02      	ldr	r2, [pc, #8]	; (800454c <HAL_PCD_SuspendCallback+0x1c>)
 8004542:	6913      	ldr	r3, [r2, #16]
 8004544:	f043 0306 	orr.w	r3, r3, #6
 8004548:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800454a:	bd10      	pop	{r4, pc}
 800454c:	e000ed00 	.word	0xe000ed00

08004550 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004550:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004554:	f7ff bbfd 	b.w	8003d52 <USBD_LL_Resume>

08004558 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004558:	2308      	movs	r3, #8
{
 800455a:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800455c:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <USBD_LL_Init+0x7c>)
{
 800455e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004560:	481d      	ldr	r0, [pc, #116]	; (80045d8 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004562:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004566:	2302      	movs	r3, #2
 8004568:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800456a:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800456c:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8004570:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004574:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004578:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800457a:	f7fd fb17 	bl	8001bac <HAL_PCD_Init>
 800457e:	b108      	cbz	r0, 8004584 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8004580:	f7fd f9ea 	bl	8001958 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004584:	2200      	movs	r2, #0
 8004586:	2318      	movs	r3, #24
 8004588:	4611      	mov	r1, r2
 800458a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800458e:	f7fe f8d1 	bl	8002734 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004592:	2358      	movs	r3, #88	; 0x58
 8004594:	2200      	movs	r2, #0
 8004596:	2180      	movs	r1, #128	; 0x80
 8004598:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800459c:	f7fe f8ca 	bl	8002734 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80045a0:	23c0      	movs	r3, #192	; 0xc0
 80045a2:	2200      	movs	r2, #0
 80045a4:	2181      	movs	r1, #129	; 0x81
 80045a6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80045aa:	f7fe f8c3 	bl	8002734 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80045ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80045b2:	2200      	movs	r2, #0
 80045b4:	2101      	movs	r1, #1
 80045b6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80045ba:	f7fe f8bb 	bl	8002734 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80045be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045c2:	2200      	movs	r2, #0
 80045c4:	2182      	movs	r1, #130	; 0x82
 80045c6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80045ca:	f7fe f8b3 	bl	8002734 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 80045ce:	2000      	movs	r0, #0
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	bf00      	nop
 80045d4:	40005c00 	.word	0x40005c00
 80045d8:	20003490 	.word	0x20003490

080045dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80045dc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80045de:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80045e2:	f7fd fb5b 	bl	8001c9c <HAL_PCD_Start>
 80045e6:	2803      	cmp	r0, #3
 80045e8:	bf96      	itet	ls
 80045ea:	4b02      	ldrls	r3, [pc, #8]	; (80045f4 <USBD_LL_Start+0x18>)
 80045ec:	2002      	movhi	r0, #2
 80045ee:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80045f0:	bd08      	pop	{r3, pc}
 80045f2:	bf00      	nop
 80045f4:	0800c46b 	.word	0x0800c46b

080045f8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80045f8:	b510      	push	{r4, lr}
 80045fa:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80045fc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004600:	4613      	mov	r3, r2
 8004602:	4622      	mov	r2, r4
 8004604:	f7fd ff9a 	bl	800253c <HAL_PCD_EP_Open>
 8004608:	2803      	cmp	r0, #3
 800460a:	bf96      	itet	ls
 800460c:	4b01      	ldrls	r3, [pc, #4]	; (8004614 <USBD_LL_OpenEP+0x1c>)
 800460e:	2002      	movhi	r0, #2
 8004610:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004612:	bd10      	pop	{r4, pc}
 8004614:	0800c46b 	.word	0x0800c46b

08004618 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004618:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800461a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800461e:	f7fd ffbf 	bl	80025a0 <HAL_PCD_EP_Close>
 8004622:	2803      	cmp	r0, #3
 8004624:	bf96      	itet	ls
 8004626:	4b02      	ldrls	r3, [pc, #8]	; (8004630 <USBD_LL_CloseEP+0x18>)
 8004628:	2002      	movhi	r0, #2
 800462a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800462c:	bd08      	pop	{r3, pc}
 800462e:	bf00      	nop
 8004630:	0800c46b 	.word	0x0800c46b

08004634 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004634:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004636:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800463a:	f7fe f815 	bl	8002668 <HAL_PCD_EP_SetStall>
 800463e:	2803      	cmp	r0, #3
 8004640:	bf96      	itet	ls
 8004642:	4b02      	ldrls	r3, [pc, #8]	; (800464c <USBD_LL_StallEP+0x18>)
 8004644:	2002      	movhi	r0, #2
 8004646:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004648:	bd08      	pop	{r3, pc}
 800464a:	bf00      	nop
 800464c:	0800c46b 	.word	0x0800c46b

08004650 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004650:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004652:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004656:	f7fe f83b 	bl	80026d0 <HAL_PCD_EP_ClrStall>
 800465a:	2803      	cmp	r0, #3
 800465c:	bf96      	itet	ls
 800465e:	4b02      	ldrls	r3, [pc, #8]	; (8004668 <USBD_LL_ClearStallEP+0x18>)
 8004660:	2002      	movhi	r0, #2
 8004662:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004664:	bd08      	pop	{r3, pc}
 8004666:	bf00      	nop
 8004668:	0800c46b 	.word	0x0800c46b

0800466c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800466c:	2228      	movs	r2, #40	; 0x28
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 800466e:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004672:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004676:	bf1b      	ittet	ne
 8004678:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 800467c:	fb03 2102 	mlane	r1, r3, r2, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004680:	fb02 0101 	mlaeq	r1, r2, r1, r0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004684:	1809      	addne	r1, r1, r0
 8004686:	bf14      	ite	ne
 8004688:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800468a:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
  }
}
 800468e:	4770      	bx	lr

08004690 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004690:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004692:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004696:	f7fd fb1a 	bl	8001cce <HAL_PCD_SetAddress>
 800469a:	2803      	cmp	r0, #3
 800469c:	bf96      	itet	ls
 800469e:	4b02      	ldrls	r3, [pc, #8]	; (80046a8 <USBD_LL_SetUSBAddress+0x18>)
 80046a0:	2002      	movhi	r0, #2
 80046a2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80046a4:	bd08      	pop	{r3, pc}
 80046a6:	bf00      	nop
 80046a8:	0800c46b 	.word	0x0800c46b

080046ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80046ac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80046ae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046b2:	f7fd ffbf 	bl	8002634 <HAL_PCD_EP_Transmit>
 80046b6:	2803      	cmp	r0, #3
 80046b8:	bf96      	itet	ls
 80046ba:	4b02      	ldrls	r3, [pc, #8]	; (80046c4 <USBD_LL_Transmit+0x18>)
 80046bc:	2002      	movhi	r0, #2
 80046be:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80046c0:	bd08      	pop	{r3, pc}
 80046c2:	bf00      	nop
 80046c4:	0800c46b 	.word	0x0800c46b

080046c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80046c8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80046ca:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046ce:	f7fd ff90 	bl	80025f2 <HAL_PCD_EP_Receive>
 80046d2:	2803      	cmp	r0, #3
 80046d4:	bf96      	itet	ls
 80046d6:	4b02      	ldrls	r3, [pc, #8]	; (80046e0 <USBD_LL_PrepareReceive+0x18>)
 80046d8:	2002      	movhi	r0, #2
 80046da:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80046dc:	bd08      	pop	{r3, pc}
 80046de:	bf00      	nop
 80046e0:	0800c46b 	.word	0x0800c46b

080046e4 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80046e4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046e8:	f7fd bf9c 	b.w	8002624 <HAL_PCD_EP_GetRxCount>

080046ec <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80046ec:	4800      	ldr	r0, [pc, #0]	; (80046f0 <USBD_static_malloc+0x4>)
 80046ee:	4770      	bx	lr
 80046f0:	2000038c 	.word	0x2000038c

080046f4 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 80046f4:	4770      	bx	lr

080046f6 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80046f6:	4770      	bx	lr

080046f8 <t1_wd>:

    ASSERT(0);
}

void t1_wd(void* p)
{
 80046f8:	b508      	push	{r3, lr}
    while (!init_done)
 80046fa:	4c09      	ldr	r4, [pc, #36]	; (8004720 <t1_wd+0x28>)
 80046fc:	7823      	ldrb	r3, [r4, #0]
 80046fe:	b15b      	cbz	r3, 8004718 <t1_wd+0x20>
#ifndef INC_PERIPH_H_
#define INC_PERIPH_H_

static inline void iwdg_feed()
{
    PS_IWDG_RST;
 8004700:	f64a 26aa 	movw	r6, #43690	; 0xaaaa
 8004704:	4d07      	ldr	r5, [pc, #28]	; (8004724 <t1_wd+0x2c>)
        vTaskDelay(2);

    while(1)
    {
        iwdg_feed();
        led_blink_do(&led);
 8004706:	4c08      	ldr	r4, [pc, #32]	; (8004728 <t1_wd+0x30>)
 8004708:	4620      	mov	r0, r4
 800470a:	602e      	str	r6, [r5, #0]
 800470c:	f001 ffb4 	bl	8006678 <led_blink_do>

        vTaskDelay(10);
 8004710:	200a      	movs	r0, #10
 8004712:	f005 fe51 	bl	800a3b8 <vTaskDelay>
 8004716:	e7f7      	b.n	8004708 <t1_wd+0x10>
        vTaskDelay(2);
 8004718:	2002      	movs	r0, #2
 800471a:	f005 fe4d 	bl	800a3b8 <vTaskDelay>
 800471e:	e7ed      	b.n	80046fc <t1_wd+0x4>
 8004720:	200005ac 	.word	0x200005ac
 8004724:	40003000 	.word	0x40003000
 8004728:	20003110 	.word	0x20003110

0800472c <t2_trig_check>:
    }
}

void t2_trig_check(void* p)
{
 800472c:	b508      	push	{r3, lr}
    while (!init_done)
 800472e:	4c14      	ldr	r4, [pc, #80]	; (8004780 <t2_trig_check+0x54>)
 8004730:	7823      	ldrb	r3, [r4, #0]
 8004732:	b303      	cbz	r3, 8004776 <t2_trig_check+0x4a>
        vTaskDelay(2);

    while(1)
    {
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 8004734:	4c13      	ldr	r4, [pc, #76]	; (8004784 <t2_trig_check+0x58>)
 8004736:	4d14      	ldr	r5, [pc, #80]	; (8004788 <t2_trig_check+0x5c>)
 8004738:	4626      	mov	r6, r4
 800473a:	f04f 31ff 	mov.w	r1, #4294967295
 800473e:	6820      	ldr	r0, [r4, #0]
 8004740:	f005 fb0a 	bl	8009d58 <xQueueSemaphoreTake>
 8004744:	2801      	cmp	r0, #1
 8004746:	d003      	beq.n	8004750 <t2_trig_check+0x24>
 8004748:	2160      	movs	r1, #96	; 0x60
 800474a:	4628      	mov	r0, r5
 800474c:	f003 f896 	bl	800787c <assert2>

        daq_trig_check(&daq);
 8004750:	480e      	ldr	r0, [pc, #56]	; (800478c <t2_trig_check+0x60>)
 8004752:	f001 f981 	bl	8005a58 <daq_trig_check>

        ASSERT(xSemaphoreGive(mtx1) == pdPASS);
 8004756:	2300      	movs	r3, #0
 8004758:	6830      	ldr	r0, [r6, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	4619      	mov	r1, r3
 800475e:	f005 f9df 	bl	8009b20 <xQueueGenericSend>
 8004762:	2801      	cmp	r0, #1
 8004764:	d003      	beq.n	800476e <t2_trig_check+0x42>
 8004766:	2164      	movs	r1, #100	; 0x64
 8004768:	4628      	mov	r0, r5
 800476a:	f003 f887 	bl	800787c <assert2>

        vTaskDelay(5);
 800476e:	2005      	movs	r0, #5
 8004770:	f005 fe22 	bl	800a3b8 <vTaskDelay>
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 8004774:	e7e1      	b.n	800473a <t2_trig_check+0xe>
        vTaskDelay(2);
 8004776:	2002      	movs	r0, #2
 8004778:	f005 fe1e 	bl	800a3b8 <vTaskDelay>
 800477c:	e7d8      	b.n	8004730 <t2_trig_check+0x4>
 800477e:	bf00      	nop
 8004780:	200005ac 	.word	0x200005ac
 8004784:	20003120 	.word	0x20003120
 8004788:	0800c47b 	.word	0x0800c47b
 800478c:	20000c6c 	.word	0x20000c6c

08004790 <t3_trig_post_count>:
    }
}

void t3_trig_post_count(void* p)
{
 8004790:	b580      	push	{r7, lr}
    while (!init_done)
 8004792:	4c18      	ldr	r4, [pc, #96]	; (80047f4 <t3_trig_post_count+0x64>)
 8004794:	7823      	ldrb	r3, [r4, #0]
 8004796:	b34b      	cbz	r3, 80047ec <t3_trig_post_count+0x5c>
        vTaskDelay(2);

    while(1)
    {
        ASSERT(xSemaphoreTake(sem2_trig, portMAX_DELAY) == pdPASS);
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 8004798:	4d17      	ldr	r5, [pc, #92]	; (80047f8 <t3_trig_post_count+0x68>)
        ASSERT(xSemaphoreTake(sem2_trig, portMAX_DELAY) == pdPASS);
 800479a:	4c18      	ldr	r4, [pc, #96]	; (80047fc <t3_trig_post_count+0x6c>)
 800479c:	462e      	mov	r6, r5
 800479e:	4f18      	ldr	r7, [pc, #96]	; (8004800 <t3_trig_post_count+0x70>)
 80047a0:	f04f 31ff 	mov.w	r1, #4294967295
 80047a4:	6838      	ldr	r0, [r7, #0]
 80047a6:	f005 fad7 	bl	8009d58 <xQueueSemaphoreTake>
 80047aa:	2801      	cmp	r0, #1
 80047ac:	d003      	beq.n	80047b6 <t3_trig_post_count+0x26>
 80047ae:	2171      	movs	r1, #113	; 0x71
 80047b0:	4620      	mov	r0, r4
 80047b2:	f003 f863 	bl	800787c <assert2>
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 80047b6:	f04f 31ff 	mov.w	r1, #4294967295
 80047ba:	6828      	ldr	r0, [r5, #0]
 80047bc:	f005 facc 	bl	8009d58 <xQueueSemaphoreTake>
 80047c0:	2801      	cmp	r0, #1
 80047c2:	d003      	beq.n	80047cc <t3_trig_post_count+0x3c>
 80047c4:	2172      	movs	r1, #114	; 0x72
 80047c6:	4620      	mov	r0, r4
 80047c8:	f003 f858 	bl	800787c <assert2>

        daq_trig_postcount(&daq);
 80047cc:	480d      	ldr	r0, [pc, #52]	; (8004804 <t3_trig_post_count+0x74>)
 80047ce:	f001 faf3 	bl	8005db8 <daq_trig_postcount>

        ASSERT(xSemaphoreGive(mtx1) == pdPASS);
 80047d2:	2300      	movs	r3, #0
 80047d4:	6830      	ldr	r0, [r6, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	4619      	mov	r1, r3
 80047da:	f005 f9a1 	bl	8009b20 <xQueueGenericSend>
 80047de:	2801      	cmp	r0, #1
 80047e0:	d0de      	beq.n	80047a0 <t3_trig_post_count+0x10>
 80047e2:	2176      	movs	r1, #118	; 0x76
 80047e4:	4620      	mov	r0, r4
 80047e6:	f003 f849 	bl	800787c <assert2>
 80047ea:	e7d8      	b.n	800479e <t3_trig_post_count+0xe>
        vTaskDelay(2);
 80047ec:	2002      	movs	r0, #2
 80047ee:	f005 fde3 	bl	800a3b8 <vTaskDelay>
 80047f2:	e7cf      	b.n	8004794 <t3_trig_post_count+0x4>
 80047f4:	200005ac 	.word	0x200005ac
 80047f8:	20003120 	.word	0x20003120
 80047fc:	0800c47b 	.word	0x0800c47b
 8004800:	20003128 	.word	0x20003128
 8004804:	20000c6c 	.word	0x20000c6c

08004808 <t4_comm_and_init>:
    }
}

void t4_comm_and_init(void* p)
{
 8004808:	b58f      	push	{r0, r1, r2, r3, r7, lr}
    pwm_init(&pwm);
 800480a:	482e      	ldr	r0, [pc, #184]	; (80048c4 <t4_comm_and_init+0xbc>)
 800480c:	f002 ff76 	bl	80076fc <pwm_init>
    led_init(&led);
 8004810:	482d      	ldr	r0, [pc, #180]	; (80048c8 <t4_comm_and_init+0xc0>)
 8004812:	f001 fefb 	bl	800660c <led_init>
    cntr_init(&cntr);
 8004816:	482d      	ldr	r0, [pc, #180]	; (80048cc <t4_comm_and_init+0xc4>)
 8004818:	f000 f92c 	bl	8004a74 <cntr_init>
    comm_init(&comm);
 800481c:	482c      	ldr	r0, [pc, #176]	; (80048d0 <t4_comm_and_init+0xc8>)
 800481e:	f000 fa4b 	bl	8004cb8 <comm_init>
    daq_init(&daq);
 8004822:	482c      	ldr	r0, [pc, #176]	; (80048d4 <t4_comm_and_init+0xcc>)
 8004824:	f000 fc44 	bl	80050b0 <daq_init>
    daq_mode_set(&daq, VM);
 8004828:	2101      	movs	r1, #1
 800482a:	482a      	ldr	r0, [pc, #168]	; (80048d4 <t4_comm_and_init+0xcc>)
 800482c:	f000 ffc4 	bl	80057b8 <daq_mode_set>
    led_blink_set(&led, 3, PS_BLINK_LONG_MS);
 8004830:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004834:	2103      	movs	r1, #3
 8004836:	4824      	ldr	r0, [pc, #144]	; (80048c8 <t4_comm_and_init+0xc0>)
 8004838:	f001 ff12 	bl	8006660 <led_blink_set>

#ifdef PS_DEBUG
    pwm_set(&pwm, 1000, 25, 25, 50, 1, 1);
 800483c:	2301      	movs	r3, #1
 800483e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8004842:	2332      	movs	r3, #50	; 0x32
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	2319      	movs	r3, #25
 8004848:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800484c:	461a      	mov	r2, r3
 800484e:	481d      	ldr	r0, [pc, #116]	; (80048c4 <t4_comm_and_init+0xbc>)
 8004850:	f002 ff62 	bl	8007718 <pwm_set>
    //LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_256);
    //LL_IWDG_SetReloadCounter(IWDG, 0x0FFF);
#endif

    while (PS_VM_ReadQ(NULL) == SCPI_RES_ERR); // read vcc
 8004854:	2000      	movs	r0, #0
 8004856:	f002 f905 	bl	8006a64 <PS_VM_ReadQ>
 800485a:	3001      	adds	r0, #1
 800485c:	d0fa      	beq.n	8004854 <t4_comm_and_init+0x4c>
    init_done = 1;

    while(1)
    {
        ASSERT(xSemaphoreTake(sem1_comm, portMAX_DELAY) == pdPASS);
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 800485e:	4d1e      	ldr	r5, [pc, #120]	; (80048d8 <t4_comm_and_init+0xd0>)
    init_done = 1;
 8004860:	2201      	movs	r2, #1
 8004862:	462e      	mov	r6, r5
 8004864:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <t4_comm_and_init+0xd4>)
        ASSERT(xSemaphoreTake(sem1_comm, portMAX_DELAY) == pdPASS);
 8004866:	4c1e      	ldr	r4, [pc, #120]	; (80048e0 <t4_comm_and_init+0xd8>)
    init_done = 1;
 8004868:	701a      	strb	r2, [r3, #0]
        ASSERT(xSemaphoreTake(sem1_comm, portMAX_DELAY) == pdPASS);
 800486a:	4f1e      	ldr	r7, [pc, #120]	; (80048e4 <t4_comm_and_init+0xdc>)
 800486c:	f04f 31ff 	mov.w	r1, #4294967295
 8004870:	6838      	ldr	r0, [r7, #0]
 8004872:	f005 fa71 	bl	8009d58 <xQueueSemaphoreTake>
 8004876:	2801      	cmp	r0, #1
 8004878:	d003      	beq.n	8004882 <t4_comm_and_init+0x7a>
 800487a:	218f      	movs	r1, #143	; 0x8f
 800487c:	4620      	mov	r0, r4
 800487e:	f002 fffd 	bl	800787c <assert2>
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 8004882:	f04f 31ff 	mov.w	r1, #4294967295
 8004886:	6828      	ldr	r0, [r5, #0]
 8004888:	f005 fa66 	bl	8009d58 <xQueueSemaphoreTake>
 800488c:	2801      	cmp	r0, #1
 800488e:	d003      	beq.n	8004898 <t4_comm_and_init+0x90>
 8004890:	2190      	movs	r1, #144	; 0x90
 8004892:	4620      	mov	r0, r4
 8004894:	f002 fff2 	bl	800787c <assert2>

        //iwdg_feed();
        if (comm_main(&comm))
 8004898:	480d      	ldr	r0, [pc, #52]	; (80048d0 <t4_comm_and_init+0xc8>)
 800489a:	f000 fa7b 	bl	8004d94 <comm_main>
 800489e:	b120      	cbz	r0, 80048aa <t4_comm_and_init+0xa2>
            led_blink_set(&led, 1, PS_BLINK_SHORT_MS);
 80048a0:	2232      	movs	r2, #50	; 0x32
 80048a2:	2101      	movs	r1, #1
 80048a4:	4808      	ldr	r0, [pc, #32]	; (80048c8 <t4_comm_and_init+0xc0>)
 80048a6:	f001 fedb 	bl	8006660 <led_blink_set>

        ASSERT(xSemaphoreGive(mtx1) == pdPASS);
 80048aa:	2300      	movs	r3, #0
 80048ac:	6830      	ldr	r0, [r6, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	4619      	mov	r1, r3
 80048b2:	f005 f935 	bl	8009b20 <xQueueGenericSend>
 80048b6:	2801      	cmp	r0, #1
 80048b8:	d0d8      	beq.n	800486c <t4_comm_and_init+0x64>
 80048ba:	2196      	movs	r1, #150	; 0x96
 80048bc:	4620      	mov	r0, r4
 80048be:	f002 ffdd 	bl	800787c <assert2>
 80048c2:	e7d2      	b.n	800486a <t4_comm_and_init+0x62>
 80048c4:	2000312c 	.word	0x2000312c
 80048c8:	20003110 	.word	0x20003110
 80048cc:	20000acc 	.word	0x20000acc
 80048d0:	2000315c 	.word	0x2000315c
 80048d4:	20000c6c 	.word	0x20000c6c
 80048d8:	20003120 	.word	0x20003120
 80048dc:	200005ac 	.word	0x200005ac
 80048e0:	0800c47b 	.word	0x0800c47b
 80048e4:	20003124 	.word	0x20003124

080048e8 <app_main>:
{
 80048e8:	b530      	push	{r4, r5, lr}
 80048ea:	b085      	sub	sp, #20
  __ASM volatile ("cpsid i" : : : "memory");
 80048ec:	b672      	cpsid	i
    sem1_comm = xSemaphoreCreateBinaryStatic(&buff_sem1_comm);
 80048ee:	2403      	movs	r4, #3
 80048f0:	2200      	movs	r2, #0
 80048f2:	9400      	str	r4, [sp, #0]
 80048f4:	4611      	mov	r1, r2
 80048f6:	4b3c      	ldr	r3, [pc, #240]	; (80049e8 <app_main+0x100>)
 80048f8:	2001      	movs	r0, #1
 80048fa:	f005 f8cb 	bl	8009a94 <xQueueGenericCreateStatic>
    sem2_trig = xSemaphoreCreateBinaryStatic(&buff_sem2_trig);
 80048fe:	2200      	movs	r2, #0
    sem1_comm = xSemaphoreCreateBinaryStatic(&buff_sem1_comm);
 8004900:	4d3a      	ldr	r5, [pc, #232]	; (80049ec <app_main+0x104>)
    sem2_trig = xSemaphoreCreateBinaryStatic(&buff_sem2_trig);
 8004902:	4611      	mov	r1, r2
    sem1_comm = xSemaphoreCreateBinaryStatic(&buff_sem1_comm);
 8004904:	6028      	str	r0, [r5, #0]
    sem2_trig = xSemaphoreCreateBinaryStatic(&buff_sem2_trig);
 8004906:	4b3a      	ldr	r3, [pc, #232]	; (80049f0 <app_main+0x108>)
 8004908:	9400      	str	r4, [sp, #0]
 800490a:	2001      	movs	r0, #1
 800490c:	f005 f8c2 	bl	8009a94 <xQueueGenericCreateStatic>
 8004910:	4c38      	ldr	r4, [pc, #224]	; (80049f4 <app_main+0x10c>)
    mtx1 = xSemaphoreCreateMutexStatic(&buff_mtx1);
 8004912:	4939      	ldr	r1, [pc, #228]	; (80049f8 <app_main+0x110>)
    sem2_trig = xSemaphoreCreateBinaryStatic(&buff_sem2_trig);
 8004914:	6020      	str	r0, [r4, #0]
    mtx1 = xSemaphoreCreateMutexStatic(&buff_mtx1);
 8004916:	2001      	movs	r0, #1
 8004918:	f005 f9b4 	bl	8009c84 <xQueueCreateMutexStatic>
 800491c:	4b37      	ldr	r3, [pc, #220]	; (80049fc <app_main+0x114>)
    ASSERT(sem1_comm != NULL);
 800491e:	682a      	ldr	r2, [r5, #0]
    mtx1 = xSemaphoreCreateMutexStatic(&buff_mtx1);
 8004920:	6018      	str	r0, [r3, #0]
 8004922:	4625      	mov	r5, r4
 8004924:	461c      	mov	r4, r3
    ASSERT(sem1_comm != NULL);
 8004926:	b91a      	cbnz	r2, 8004930 <app_main+0x48>
 8004928:	213b      	movs	r1, #59	; 0x3b
 800492a:	4835      	ldr	r0, [pc, #212]	; (8004a00 <app_main+0x118>)
 800492c:	f002 ffa6 	bl	800787c <assert2>
    ASSERT(sem2_trig != NULL);
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	b91b      	cbnz	r3, 800493c <app_main+0x54>
 8004934:	213c      	movs	r1, #60	; 0x3c
 8004936:	4832      	ldr	r0, [pc, #200]	; (8004a00 <app_main+0x118>)
 8004938:	f002 ffa0 	bl	800787c <assert2>
    ASSERT(mtx1 != NULL);
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	b91b      	cbnz	r3, 8004948 <app_main+0x60>
 8004940:	213d      	movs	r1, #61	; 0x3d
 8004942:	482f      	ldr	r0, [pc, #188]	; (8004a00 <app_main+0x118>)
 8004944:	f002 ff9a 	bl	800787c <assert2>
    ASSERT(xTaskCreateStatic(t1_wd, "T1", PS_STACK_T1, NULL, PS_PRI_T1, stack_t1, &buff_t1) != NULL);
 8004948:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <app_main+0x11c>)
 800494a:	2240      	movs	r2, #64	; 0x40
 800494c:	9302      	str	r3, [sp, #8]
 800494e:	4b2e      	ldr	r3, [pc, #184]	; (8004a08 <app_main+0x120>)
 8004950:	492e      	ldr	r1, [pc, #184]	; (8004a0c <app_main+0x124>)
 8004952:	9301      	str	r3, [sp, #4]
 8004954:	2303      	movs	r3, #3
 8004956:	482e      	ldr	r0, [pc, #184]	; (8004a10 <app_main+0x128>)
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	2300      	movs	r3, #0
 800495c:	f005 fb1a 	bl	8009f94 <xTaskCreateStatic>
 8004960:	b918      	cbnz	r0, 800496a <app_main+0x82>
 8004962:	213f      	movs	r1, #63	; 0x3f
 8004964:	4826      	ldr	r0, [pc, #152]	; (8004a00 <app_main+0x118>)
 8004966:	f002 ff89 	bl	800787c <assert2>
    ASSERT(xTaskCreateStatic(t2_trig_check, "T2", PS_STACK_T2, NULL, PS_PRI_T2, stack_t2, &buff_t2) != NULL);
 800496a:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <app_main+0x12c>)
 800496c:	2240      	movs	r2, #64	; 0x40
 800496e:	9302      	str	r3, [sp, #8]
 8004970:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <app_main+0x130>)
 8004972:	492a      	ldr	r1, [pc, #168]	; (8004a1c <app_main+0x134>)
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	2301      	movs	r3, #1
 8004978:	4829      	ldr	r0, [pc, #164]	; (8004a20 <app_main+0x138>)
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	2300      	movs	r3, #0
 800497e:	f005 fb09 	bl	8009f94 <xTaskCreateStatic>
 8004982:	b918      	cbnz	r0, 800498c <app_main+0xa4>
 8004984:	2140      	movs	r1, #64	; 0x40
 8004986:	481e      	ldr	r0, [pc, #120]	; (8004a00 <app_main+0x118>)
 8004988:	f002 ff78 	bl	800787c <assert2>
    ASSERT(xTaskCreateStatic(t3_trig_post_count, "T3", PS_STACK_T3, NULL, PS_PRI_T3, stack_t3, &buff_t3) != NULL);
 800498c:	4b25      	ldr	r3, [pc, #148]	; (8004a24 <app_main+0x13c>)
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	9302      	str	r3, [sp, #8]
 8004992:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <app_main+0x140>)
 8004994:	4925      	ldr	r1, [pc, #148]	; (8004a2c <app_main+0x144>)
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	2304      	movs	r3, #4
 800499a:	4825      	ldr	r0, [pc, #148]	; (8004a30 <app_main+0x148>)
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	2300      	movs	r3, #0
 80049a0:	f005 faf8 	bl	8009f94 <xTaskCreateStatic>
 80049a4:	b918      	cbnz	r0, 80049ae <app_main+0xc6>
 80049a6:	2141      	movs	r1, #65	; 0x41
 80049a8:	4815      	ldr	r0, [pc, #84]	; (8004a00 <app_main+0x118>)
 80049aa:	f002 ff67 	bl	800787c <assert2>
    ASSERT(xTaskCreateStatic(t4_comm_and_init, "T4", PS_STACK_T4, NULL, PS_PRI_T4, stack_t4, &buff_t4) != NULL);
 80049ae:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <app_main+0x14c>)
 80049b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b4:	9302      	str	r3, [sp, #8]
 80049b6:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <app_main+0x150>)
 80049b8:	4920      	ldr	r1, [pc, #128]	; (8004a3c <app_main+0x154>)
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	2302      	movs	r3, #2
 80049be:	4820      	ldr	r0, [pc, #128]	; (8004a40 <app_main+0x158>)
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	2300      	movs	r3, #0
 80049c4:	f005 fae6 	bl	8009f94 <xTaskCreateStatic>
 80049c8:	b918      	cbnz	r0, 80049d2 <app_main+0xea>
 80049ca:	2142      	movs	r1, #66	; 0x42
 80049cc:	480c      	ldr	r0, [pc, #48]	; (8004a00 <app_main+0x118>)
 80049ce:	f002 ff55 	bl	800787c <assert2>
  __ASM volatile ("cpsie i" : : : "memory");
 80049d2:	b662      	cpsie	i
    vTaskStartScheduler();
 80049d4:	f005 fbac 	bl	800a130 <vTaskStartScheduler>
    ASSERT(0);
 80049d8:	2148      	movs	r1, #72	; 0x48
 80049da:	4809      	ldr	r0, [pc, #36]	; (8004a00 <app_main+0x118>)
}
 80049dc:	b005      	add	sp, #20
 80049de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ASSERT(0);
 80049e2:	f002 bf4b 	b.w	800787c <assert2>
 80049e6:	bf00      	nop
 80049e8:	2000377c 	.word	0x2000377c
 80049ec:	20003124 	.word	0x20003124
 80049f0:	20003a9c 	.word	0x20003a9c
 80049f4:	20003128 	.word	0x20003128
 80049f8:	2000442c 	.word	0x2000442c
 80049fc:	20003120 	.word	0x20003120
 8004a00:	0800c47b 	.word	0x0800c47b
 8004a04:	200038c4 	.word	0x200038c4
 8004a08:	2000432c 	.word	0x2000432c
 8004a0c:	0800c46f 	.word	0x0800c46f
 8004a10:	080046f9 	.word	0x080046f9
 8004a14:	200042e4 	.word	0x200042e4
 8004a18:	200037c4 	.word	0x200037c4
 8004a1c:	0800c472 	.word	0x0800c472
 8004a20:	0800472d 	.word	0x0800472d
 8004a24:	20003a0c 	.word	0x20003a0c
 8004a28:	2000390c 	.word	0x2000390c
 8004a2c:	0800c475 	.word	0x0800c475
 8004a30:	08004791 	.word	0x08004791
 8004a34:	20003a54 	.word	0x20003a54
 8004a38:	20003ae4 	.word	0x20003ae4
 8004a3c:	0800c478 	.word	0x0800c478
 8004a40:	08004809 	.word	0x08004809

08004a44 <NVIC_EncodePriority.constprop.2>:
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a44:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a48:	f1c0 0207 	rsb	r2, r0, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a4c:	1d03      	adds	r3, r0, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a4e:	2a04      	cmp	r2, #4
 8004a50:	bf28      	it	cs
 8004a52:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a54:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a56:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5a:	fa03 f302 	lsl.w	r3, r3, r2
 8004a5e:	ea6f 0303 	mvn.w	r3, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a62:	bf94      	ite	ls
 8004a64:	2000      	movls	r0, #0
 8004a66:	3803      	subhi	r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a68:	f003 0301 	and.w	r3, r3, #1
}
 8004a6c:	fa03 f000 	lsl.w	r0, r3, r0
 8004a70:	4770      	bx	lr
	...

08004a74 <cntr_init>:
#include "main.h"
#include "periph.h"


void cntr_init(cntr_data_t* self)
{
 8004a74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    self->freq = 0;
    self->ovf = 0;
 8004a76:	2500      	movs	r5, #0
    self->freq = 0;
 8004a78:	2300      	movs	r3, #0
    self->enabled = 0;
    self->data_ovf_it = 0;
    memset(self->data_ccr, 0, PS_CNTR_BUFF_SZ * sizeof(uint16_t));
 8004a7a:	26c8      	movs	r6, #200	; 0xc8
{
 8004a7c:	4604      	mov	r4, r0
    self->freq = 0;
 8004a7e:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
    memset(self->data_ccr, 0, PS_CNTR_BUFF_SZ * sizeof(uint16_t));
 8004a82:	4632      	mov	r2, r6
 8004a84:	4629      	mov	r1, r5
    self->ovf = 0;
 8004a86:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    self->enabled = 0;
 8004a8a:	f880 5194 	strb.w	r5, [r0, #404]	; 0x194
    self->data_ovf_it = 0;
 8004a8e:	f8c0 5190 	str.w	r5, [r0, #400]	; 0x190
    memset(self->data_ccr, 0, PS_CNTR_BUFF_SZ * sizeof(uint16_t));
 8004a92:	f005 ff35 	bl	800a900 <memset>
    memset(self->data_ovf, 0, PS_CNTR_BUFF_SZ * sizeof(uint16_t));
 8004a96:	4632      	mov	r2, r6
 8004a98:	4629      	mov	r1, r5
 8004a9a:	19a0      	adds	r0, r4, r6
 8004a9c:	f005 ff30 	bl	800a900 <memset>
    dma_set((uint32_t)&PS_TIM_CNTR->PS_TIM_CNTR_CCR, PS_DMA_CNTR, PS_DMA_CH_CNTR,
 8004aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aa8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004aac:	2364      	movs	r3, #100	; 0x64
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	4623      	mov	r3, r4
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ab2:	4c12      	ldr	r4, [pc, #72]	; (8004afc <cntr_init+0x88>)
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	4912      	ldr	r1, [pc, #72]	; (8004b00 <cntr_init+0x8c>)
 8004ab8:	4812      	ldr	r0, [pc, #72]	; (8004b04 <cntr_init+0x90>)
 8004aba:	f001 fe3b 	bl	8006734 <dma_set>
 8004abe:	68e0      	ldr	r0, [r4, #12]
            (uint32_t)&self->data_ccr, PS_CNTR_BUFF_SZ, LL_DMA_PDATAALIGN_HALFWORD, LL_DMA_MDATAALIGN_HALFWORD);
    NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8004ac0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004ac4:	f7ff ffbe 	bl	8004a44 <NVIC_EncodePriority.constprop.2>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac8:	490f      	ldr	r1, [pc, #60]	; (8004b08 <cntr_init+0x94>)
 8004aca:	0100      	lsls	r0, r0, #4
 8004acc:	b2c0      	uxtb	r0, r0
 8004ace:	f881 0319 	strb.w	r0, [r1, #793]	; 0x319
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ad2:	68e0      	ldr	r0, [r4, #12]
    NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8004ad4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004ad8:	f7ff ffb4 	bl	8004a44 <NVIC_EncodePriority.constprop.2>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004adc:	0100      	lsls	r0, r0, #4
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <cntr_init+0x98>)
 8004ae0:	b2c0      	uxtb	r0, r0
 8004ae2:	f881 031b 	strb.w	r0, [r1, #795]	; 0x31b
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	f042 0202 	orr.w	r2, r2, #2
 8004aec:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	60da      	str	r2, [r3, #12]
    LL_TIM_EnableIT_CC1(PS_TIM_CNTR);
    LL_TIM_EnableIT_UPDATE(PS_TIM_CNTR);
}
 8004af6:	b004      	add	sp, #16
 8004af8:	bd70      	pop	{r4, r5, r6, pc}
 8004afa:	bf00      	nop
 8004afc:	e000ed00 	.word	0xe000ed00
 8004b00:	40020000 	.word	0x40020000
 8004b04:	40012c34 	.word	0x40012c34
 8004b08:	e000e100 	.word	0xe000e100
 8004b0c:	40012c00 	.word	0x40012c00

08004b10 <cntr_enable>:

void cntr_enable(cntr_data_t* self, uint8_t enable)
{
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	4606      	mov	r6, r0
    if (enable)
 8004b14:	460f      	mov	r7, r1
 8004b16:	4c1b      	ldr	r4, [pc, #108]	; (8004b84 <cntr_enable+0x74>)
 8004b18:	4d1b      	ldr	r5, [pc, #108]	; (8004b88 <cntr_enable+0x78>)
 8004b1a:	b1b1      	cbz	r1, 8004b4a <cntr_enable+0x3a>
    {
        cntr_init(self);
 8004b1c:	f7ff ffaa 	bl	8004a74 <cntr_init>
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8004b20:	68e3      	ldr	r3, [r4, #12]
 8004b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b26:	60e3      	str	r3, [r4, #12]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b2c:	602b      	str	r3, [r5, #0]
 8004b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b32:	602b      	str	r3, [r5, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6023      	str	r3, [r4, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004b3c:	6a23      	ldr	r3, [r4, #32]
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	6223      	str	r3, [r4, #32]
        LL_TIM_CC_DisableChannel(PS_TIM_CNTR, PS_TIM_CNTR_CH);
        NVIC_DisableIRQ(TIM1_CC_IRQn);
        NVIC_DisableIRQ(TIM1_UP_IRQn);
        LL_TIM_DisableDMAReq_CC1(PS_TIM_CNTR);
    }
    self->enabled = enable;
 8004b44:	f886 7194 	strb.w	r7, [r6, #404]	; 0x194
}
 8004b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004b52:	6a23      	ldr	r3, [r4, #32]
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	6223      	str	r3, [r4, #32]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b5e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8004b62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b6e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8004b72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b76:	f3bf 8f6f 	isb	sy
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b80:	60e3      	str	r3, [r4, #12]
 8004b82:	e7df      	b.n	8004b44 <cntr_enable+0x34>
 8004b84:	40012c00 	.word	0x40012c00
 8004b88:	e000e100 	.word	0xe000e100

08004b8c <cntr_read>:

float cntr_read(cntr_data_t* self) // TODO BUG - 10x fast call wipes daq.buff1 (zeroes)
{
 8004b8c:	b570      	push	{r4, r5, r6, lr}
    int uwTick_start = uwTick;
 8004b8e:	4c24      	ldr	r4, [pc, #144]	; (8004c20 <cntr_read+0x94>)
    int sz = 0;

    cntr_enable(self, 1);
 8004b90:	2101      	movs	r1, #1
{
 8004b92:	4605      	mov	r5, r0
    int uwTick_start = uwTick;
 8004b94:	6826      	ldr	r6, [r4, #0]
    cntr_enable(self, 1);
 8004b96:	f7ff ffbb 	bl	8004b10 <cntr_enable>
 8004b9a:	4623      	mov	r3, r4
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004b9c:	4921      	ldr	r1, [pc, #132]	; (8004c24 <cntr_read+0x98>)
 8004b9e:	684c      	ldr	r4, [r1, #4]

    while (1)
    {
        sz = LL_DMA_GetDataLength(PS_DMA_CNTR, PS_DMA_CH_CNTR);

        uint32_t timeout = uwTick - uwTick_start;
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	b2a4      	uxth	r4, r4
 8004ba4:	1b92      	subs	r2, r2, r6
        if (timeout < 0)
            timeout += PS_UWTICK_MAX;

        if (timeout > PS_CNTR_MEAS_MS || sz == 0)
 8004ba6:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8004baa:	d801      	bhi.n	8004bb0 <cntr_read+0x24>
 8004bac:	2c00      	cmp	r4, #0
 8004bae:	d1f6      	bne.n	8004b9e <cntr_read+0x12>
            break;
    }

    cntr_enable(self, 0);
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f7ff ffac 	bl	8004b10 <cntr_enable>

    sz = PS_CNTR_BUFF_SZ - sz;
 8004bb8:	f1c4 0364 	rsb	r3, r4, #100	; 0x64

    if (sz >= 2)
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	dd2d      	ble.n	8004c1c <cntr_read+0x90>
    {
        uint32_t ovf = 0;
        uint32_t ccr_sum = 0;

        if (self->data_ovf_it > 1)
 8004bc0:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
 8004bc4:	f1c4 0463 	rsb	r4, r4, #99	; 0x63
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
 8004bce:	8828      	ldrh	r0, [r5, #0]
 8004bd0:	dd1e      	ble.n	8004c10 <cntr_read+0x84>
            ovf = self->data_ovf[self->data_ovf_it - 1] - self->data_ovf[0] - 1;
 8004bd2:	3363      	adds	r3, #99	; 0x63
 8004bd4:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8004bd8:	f8b5 10c8 	ldrh.w	r1, [r5, #200]	; 0xc8
 8004bdc:	1a5b      	subs	r3, r3, r1
 8004bde:	3b01      	subs	r3, #1

        if (self->data_ovf_it > 0)
            ccr_sum += (PS_TIM_CNTR_MAX - self->data_ccr[0]) + self->data_ccr[sz - 1];
 8004be0:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 8004be4:	30ff      	adds	r0, #255	; 0xff
 8004be6:	4410      	add	r0, r2
        else
            ccr_sum += self->data_ccr[sz - 1] - self->data_ccr[0];

        float total = (ovf * PS_TIM_CNTR_MAX) + ccr_sum;
 8004be8:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8004bec:	4418      	add	r0, r3
 8004bee:	f7fc f85b 	bl	8000ca8 <__aeabi_ui2f>
 8004bf2:	4606      	mov	r6, r0
        total /= (float)(sz - 1);
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f7fc f85b 	bl	8000cb0 <__aeabi_i2f>
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f7fc f95f 	bl	8000ec0 <__aeabi_fdiv>
        float f = (float)PS_TIM_CNTR_FREQ / total;
 8004c02:	4601      	mov	r1, r0
 8004c04:	4808      	ldr	r0, [pc, #32]	; (8004c28 <cntr_read+0x9c>)
 8004c06:	f7fc f95b 	bl	8000ec0 <__aeabi_fdiv>
        self->freq = f;
 8004c0a:	f8c5 0198 	str.w	r0, [r5, #408]	; 0x198
    }
    else
    {
        return -1; // timeout
    }
}
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
        if (self->data_ovf_it > 0)
 8004c10:	d101      	bne.n	8004c16 <cntr_read+0x8a>
        uint32_t ovf = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e7e4      	b.n	8004be0 <cntr_read+0x54>
            ccr_sum += self->data_ccr[sz - 1] - self->data_ccr[0];
 8004c16:	1a10      	subs	r0, r2, r0
        uint32_t ovf = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e7e5      	b.n	8004be8 <cntr_read+0x5c>
        return -1; // timeout
 8004c1c:	4803      	ldr	r0, [pc, #12]	; (8004c2c <cntr_read+0xa0>)
 8004c1e:	e7f6      	b.n	8004c0e <cntr_read+0x82>
 8004c20:	20000804 	.word	0x20000804
 8004c24:	4002001c 	.word	0x4002001c
 8004c28:	4c895440 	.word	0x4c895440
 8004c2c:	bf800000 	.word	0xbf800000

08004c30 <SCPI_Flush>:
scpi_result_t SCPI_Flush(scpi_t * context)
{
    (void) context;

    return SCPI_RES_OK;
}
 8004c30:	2001      	movs	r0, #1
 8004c32:	4770      	bx	lr

08004c34 <SCPI_CoreIdnQ>:
    comm_respond((comm_data_t*)context->comm, "**Reset\r\n", 9);
    return SCPI_RES_OK;
}

scpi_result_t SCPI_CoreIdnQ(scpi_t * context)
{
 8004c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c38:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < 4; i++) {
 8004c3a:	2400      	movs	r4, #0
            else if (i == 1) // comm_data_usb.available
                j = 5;

            SCPI_ResultMnemonic(context, context->idn[j]);
        } else {
            SCPI_ResultMnemonic(context, "0");
 8004c3c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8004c8c <SCPI_CoreIdnQ+0x58>
 8004c40:	f100 0684 	add.w	r6, r0, #132	; 0x84
        if (context->idn[i])
 8004c44:	f856 3b04 	ldr.w	r3, [r6], #4
 8004c48:	b1eb      	cbz	r3, 8004c86 <SCPI_CoreIdnQ+0x52>
            if (i == 1 && ((comm_data_t*)(context->comm))->uart.available)
 8004c4a:	2c01      	cmp	r4, #1
 8004c4c:	d119      	bne.n	8004c82 <SCPI_CoreIdnQ+0x4e>
 8004c4e:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
 8004c52:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
                j = 5;
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bf14      	ite	ne
 8004c5a:	2304      	movne	r3, #4
 8004c5c:	2305      	moveq	r3, #5
            SCPI_ResultMnemonic(context, context->idn[j]);
 8004c5e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004c62:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8004c66:	4638      	mov	r0, r7
 8004c68:	f7fb fa7c 	bl	8000164 <strlen>
 8004c6c:	4639      	mov	r1, r7
 8004c6e:	4602      	mov	r2, r0
            SCPI_ResultMnemonic(context, "0");
 8004c70:	4628      	mov	r0, r5
    for (i = 0; i < 4; i++) {
 8004c72:	3401      	adds	r4, #1
            SCPI_ResultMnemonic(context, "0");
 8004c74:	f003 feb4 	bl	80089e0 <SCPI_ResultCharacters>
    for (i = 0; i < 4; i++) {
 8004c78:	2c04      	cmp	r4, #4
 8004c7a:	d1e3      	bne.n	8004c44 <SCPI_CoreIdnQ+0x10>
        }
    }
    return SCPI_RES_OK;
}
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c82:	4623      	mov	r3, r4
 8004c84:	e7eb      	b.n	8004c5e <SCPI_CoreIdnQ+0x2a>
            SCPI_ResultMnemonic(context, "0");
 8004c86:	2201      	movs	r2, #1
 8004c88:	4641      	mov	r1, r8
 8004c8a:	e7f1      	b.n	8004c70 <SCPI_CoreIdnQ+0x3c>
 8004c8c:	0800cc01 	.word	0x0800cc01

08004c90 <uart_put_text>:

/************************* Write Respond *************************/

void uart_put_text(const char* data)
{
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	4604      	mov	r4, r0
    for (int i = 0; i < strlen(data); i++)
 8004c94:	4605      	mov	r5, r0
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004c96:	4e07      	ldr	r6, [pc, #28]	; (8004cb4 <uart_put_text+0x24>)
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f7fb fa63 	bl	8000164 <strlen>
 8004c9e:	1b2b      	subs	r3, r5, r4
 8004ca0:	4298      	cmp	r0, r3
 8004ca2:	d800      	bhi.n	8004ca6 <uart_put_text+0x16>
        uart_put_char(data[i]);
}
 8004ca4:	bd70      	pop	{r4, r5, r6, pc}
        uart_put_char(data[i]);
 8004ca6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004caa:	6832      	ldr	r2, [r6, #0]

static void uart_put_char(const char data)
{
    while(!LL_USART_IsActiveFlag_TXE(PS_UART));
 8004cac:	0612      	lsls	r2, r2, #24
 8004cae:	d5fc      	bpl.n	8004caa <uart_put_text+0x1a>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8004cb0:	6073      	str	r3, [r6, #4]
 8004cb2:	e7f1      	b.n	8004c98 <uart_put_text+0x8>
 8004cb4:	40013800 	.word	0x40013800

08004cb8 <comm_init>:
    self->uart.available = 0;
    self->uart.rx_index = 0;
    self->usb.last = 0;
    self->usb.available = 0;
    self->usb.rx_index = 0;
    comm_ptr = self;
 8004cb8:	4b27      	ldr	r3, [pc, #156]	; (8004d58 <comm_init+0xa0>)
{
 8004cba:	b510      	push	{r4, lr}
    comm_ptr = self;
 8004cbc:	6018      	str	r0, [r3, #0]
    self->uart.last = 0;
 8004cbe:	2400      	movs	r4, #0

    SCPI_Init(&scpi_context,
 8004cc0:	2311      	movs	r3, #17
{
 8004cc2:	b08a      	sub	sp, #40	; 0x28
    self->uart.last = 0;
 8004cc4:	f880 40cb 	strb.w	r4, [r0, #203]	; 0xcb
    self->uart.available = 0;
 8004cc8:	f880 40cc 	strb.w	r4, [r0, #204]	; 0xcc
    self->uart.rx_index = 0;
 8004ccc:	f880 40cd 	strb.w	r4, [r0, #205]	; 0xcd
    self->usb.last = 0;
 8004cd0:	f880 4064 	strb.w	r4, [r0, #100]	; 0x64
    self->usb.available = 0;
 8004cd4:	f880 4065 	strb.w	r4, [r0, #101]	; 0x65
    self->usb.rx_index = 0;
 8004cd8:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    SCPI_Init(&scpi_context,
 8004cdc:	9307      	str	r3, [sp, #28]
 8004cde:	4b1f      	ldr	r3, [pc, #124]	; (8004d5c <comm_init+0xa4>)
 8004ce0:	9008      	str	r0, [sp, #32]
 8004ce2:	9306      	str	r3, [sp, #24]
 8004ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ce8:	9305      	str	r3, [sp, #20]
 8004cea:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <comm_init+0xa8>)
 8004cec:	491d      	ldr	r1, [pc, #116]	; (8004d64 <comm_init+0xac>)
 8004cee:	9304      	str	r3, [sp, #16]
 8004cf0:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <comm_init+0xb0>)
 8004cf2:	4a1e      	ldr	r2, [pc, #120]	; (8004d6c <comm_init+0xb4>)
 8004cf4:	9303      	str	r3, [sp, #12]
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <comm_init+0xb8>)
 8004cf8:	481e      	ldr	r0, [pc, #120]	; (8004d74 <comm_init+0xbc>)
 8004cfa:	9302      	str	r3, [sp, #8]
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <comm_init+0xc0>)
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <comm_init+0xc4>)
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	4b1e      	ldr	r3, [pc, #120]	; (8004d80 <comm_init+0xc8>)
 8004d06:	f003 fe19 	bl	800893c <SCPI_Init>
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <comm_init+0xcc>)
              scpi_input_buffer, SCPI_INPUT_BUFFER_LENGTH,
              scpi_error_queue_data, SCPI_ERROR_QUEUE_SIZE,
              self);

    LL_USART_EnableIT_RXNE(PS_UART);
    uart_put_text(WELCOME_STR);
 8004d0c:	481e      	ldr	r0, [pc, #120]	; (8004d88 <comm_init+0xd0>)
 8004d0e:	68d3      	ldr	r3, [r2, #12]
 8004d10:	f043 0320 	orr.w	r3, r3, #32
 8004d14:	60d3      	str	r3, [r2, #12]
 8004d16:	f7ff ffbb 	bl	8004c90 <uart_put_text>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <comm_init+0xd4>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d22:	f1c3 0207 	rsb	r2, r3, #7
 8004d26:	2a04      	cmp	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d28:	f103 0104 	add.w	r1, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d2c:	bf28      	it	cs
 8004d2e:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d30:	2906      	cmp	r1, #6
 8004d32:	bf88      	it	hi
 8004d34:	1edc      	subhi	r4, r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d36:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3a:	4093      	lsls	r3, r2
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	f003 0306 	and.w	r3, r3, #6
 8004d42:	40a3      	lsls	r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d44:	4a12      	ldr	r2, [pc, #72]	; (8004d90 <comm_init+0xd8>)
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f882 3325 	strb.w	r3, [r2, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d4e:	2320      	movs	r3, #32
 8004d50:	6053      	str	r3, [r2, #4]

    NVIC_SetPriority(PS_IRQN_UART, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_UART, 0));
    NVIC_EnableIRQ(PS_IRQN_UART);
}
 8004d52:	b00a      	add	sp, #40	; 0x28
 8004d54:	bd10      	pop	{r4, pc}
 8004d56:	bf00      	nop
 8004d58:	20000800 	.word	0x20000800
 8004d5c:	2000464c 	.word	0x2000464c
 8004d60:	2000454c 	.word	0x2000454c
 8004d64:	0800c68c 	.word	0x0800c68c
 8004d68:	0800cc01 	.word	0x0800cc01
 8004d6c:	2000017c 	.word	0x2000017c
 8004d70:	0800c532 	.word	0x0800c532
 8004d74:	20004474 	.word	0x20004474
 8004d78:	0800c538 	.word	0x0800c538
 8004d7c:	0800c449 	.word	0x0800c449
 8004d80:	0800cc68 	.word	0x0800cc68
 8004d84:	40013800 	.word	0x40013800
 8004d88:	0800c549 	.word	0x0800c549
 8004d8c:	e000ed00 	.word	0xe000ed00
 8004d90:	e000e100 	.word	0xe000e100

08004d94 <comm_main>:

uint8_t comm_main(comm_data_t* self)
{
 8004d94:	b538      	push	{r3, r4, r5, lr}
    if (self->uart.available)
 8004d96:	f890 50cc 	ldrb.w	r5, [r0, #204]	; 0xcc
{
 8004d9a:	4604      	mov	r4, r0
    if (self->uart.available)
 8004d9c:	b19d      	cbz	r5, 8004dc6 <comm_main+0x32>
    {
        SCPI_Input(&scpi_context, self->uart.rx_buffer, self->uart.rx_index);
 8004d9e:	f100 0567 	add.w	r5, r0, #103	; 0x67
 8004da2:	f890 20cd 	ldrb.w	r2, [r0, #205]	; 0xcd
 8004da6:	4629      	mov	r1, r5
 8004da8:	4811      	ldr	r0, [pc, #68]	; (8004df0 <comm_main+0x5c>)
 8004daa:	f004 f96b 	bl	8009084 <SCPI_Input>

        memset(self->uart.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
 8004dae:	2264      	movs	r2, #100	; 0x64
 8004db0:	2100      	movs	r1, #0
 8004db2:	4628      	mov	r0, r5
 8004db4:	f005 fda4 	bl	800a900 <memset>
        self->uart.rx_index = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
        self->uart.available = 0;
 8004dbe:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
        SCPI_Input(&scpi_context, self->usb.rx_buffer, self->usb.rx_index);

        memset(self->usb.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
        self->usb.rx_index = 0;
        self->usb.available = 0;
        return 1;
 8004dc2:	2001      	movs	r0, #1
    }
    return 0;
}
 8004dc4:	bd38      	pop	{r3, r4, r5, pc}
    else if (self->usb.available)
 8004dc6:	f890 0065 	ldrb.w	r0, [r0, #101]	; 0x65
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d0fa      	beq.n	8004dc4 <comm_main+0x30>
        SCPI_Input(&scpi_context, self->usb.rx_buffer, self->usb.rx_index);
 8004dce:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4806      	ldr	r0, [pc, #24]	; (8004df0 <comm_main+0x5c>)
 8004dd6:	f004 f955 	bl	8009084 <SCPI_Input>
        memset(self->usb.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
 8004dda:	2264      	movs	r2, #100	; 0x64
 8004ddc:	4629      	mov	r1, r5
 8004dde:	4620      	mov	r0, r4
 8004de0:	f005 fd8e 	bl	800a900 <memset>
        self->usb.rx_index = 0;
 8004de4:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
        self->usb.available = 0;
 8004de8:	f884 5065 	strb.w	r5, [r4, #101]	; 0x65
 8004dec:	e7e9      	b.n	8004dc2 <comm_main+0x2e>
 8004dee:	bf00      	nop
 8004df0:	20004474 	.word	0x20004474

08004df4 <comm_respond>:

int comm_respond(comm_data_t* self, const char* data, int len)
{
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (self->uart.last)
 8004df6:	f890 30cb 	ldrb.w	r3, [r0, #203]	; 0xcb
{
 8004dfa:	460e      	mov	r6, r1
 8004dfc:	4614      	mov	r4, r2
    if (self->uart.last)
 8004dfe:	b16b      	cbz	r3, 8004e1c <comm_respond+0x28>
 8004e00:	460b      	mov	r3, r1
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004e02:	4a0e      	ldr	r2, [pc, #56]	; (8004e3c <comm_respond+0x48>)
    for (int i = 0; i < len; i++)
 8004e04:	1b99      	subs	r1, r3, r6
 8004e06:	42a1      	cmp	r1, r4
 8004e08:	db01      	blt.n	8004e0e <comm_respond+0x1a>
        }

        return len;
    }
    return 0;
}
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uart_put_char(data[i]);
 8004e0e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004e12:	6810      	ldr	r0, [r2, #0]
    while(!LL_USART_IsActiveFlag_TXE(PS_UART));
 8004e14:	0600      	lsls	r0, r0, #24
 8004e16:	d5fc      	bpl.n	8004e12 <comm_respond+0x1e>
  USARTx->DR = Value;
 8004e18:	6051      	str	r1, [r2, #4]
 8004e1a:	e7f3      	b.n	8004e04 <comm_respond+0x10>
    else if (self->usb.last)
 8004e1c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8004e20:	b153      	cbz	r3, 8004e38 <comm_respond+0x44>
 8004e22:	4d07      	ldr	r5, [pc, #28]	; (8004e40 <comm_respond+0x4c>)
            ret = CDC_Transmit_FS((uint8_t *)data, len);
 8004e24:	b297      	uxth	r7, r2
 8004e26:	4639      	mov	r1, r7
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f7ff faa3 	bl	8004374 <CDC_Transmit_FS>
        while (ret == USBD_BUSY && cntr > 0)
 8004e2e:	2801      	cmp	r0, #1
 8004e30:	d1eb      	bne.n	8004e0a <comm_respond+0x16>
 8004e32:	3d01      	subs	r5, #1
 8004e34:	d1f7      	bne.n	8004e26 <comm_respond+0x32>
 8004e36:	e7e8      	b.n	8004e0a <comm_respond+0x16>
    return 0;
 8004e38:	461c      	mov	r4, r3
 8004e3a:	e7e6      	b.n	8004e0a <comm_respond+0x16>
 8004e3c:	40013800 	.word	0x40013800
 8004e40:	000f4240 	.word	0x000f4240

08004e44 <SCPI_Write>:
    return comm_respond((comm_data_t*)context->comm, data, len);
 8004e44:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 8004e48:	f7ff bfd4 	b.w	8004df4 <comm_respond>

08004e4c <SCPI_Error>:
{
 8004e4c:	b530      	push	{r4, r5, lr}
    int len = sprintf(buff, "**ERROR: %d, \"%s\"\r\n", (int16_t) err, SCPI_ErrorTranslate(err));
 8004e4e:	b20c      	sxth	r4, r1
{
 8004e50:	b09b      	sub	sp, #108	; 0x6c
 8004e52:	4605      	mov	r5, r0
    int len = sprintf(buff, "**ERROR: %d, \"%s\"\r\n", (int16_t) err, SCPI_ErrorTranslate(err));
 8004e54:	4620      	mov	r0, r4
 8004e56:	f002 ff8b 	bl	8007d70 <SCPI_ErrorTranslate>
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4906      	ldr	r1, [pc, #24]	; (8004e78 <SCPI_Error+0x2c>)
 8004e60:	a801      	add	r0, sp, #4
 8004e62:	f005 fd55 	bl	800a910 <siprintf>
    comm_respond((comm_data_t*)context->comm, buff, len);
 8004e66:	a901      	add	r1, sp, #4
 8004e68:	4602      	mov	r2, r0
 8004e6a:	f8d5 00d4 	ldr.w	r0, [r5, #212]	; 0xd4
 8004e6e:	f7ff ffc1 	bl	8004df4 <comm_respond>
}
 8004e72:	2000      	movs	r0, #0
 8004e74:	b01b      	add	sp, #108	; 0x6c
 8004e76:	bd30      	pop	{r4, r5, pc}
 8004e78:	0800c514 	.word	0x0800c514

08004e7c <SCPI_Control>:
{
 8004e7c:	b510      	push	{r4, lr}
    if (SCPI_CTRL_SRQ == ctrl)
 8004e7e:	2901      	cmp	r1, #1
{
 8004e80:	b09c      	sub	sp, #112	; 0x70
 8004e82:	4604      	mov	r4, r0
 8004e84:	4613      	mov	r3, r2
    if (SCPI_CTRL_SRQ == ctrl)
 8004e86:	d10c      	bne.n	8004ea2 <SCPI_Control+0x26>
        len = sprintf(buff, "**SRQ: 0x%X (%d)\r\n", val, val);
 8004e88:	4909      	ldr	r1, [pc, #36]	; (8004eb0 <SCPI_Control+0x34>)
 8004e8a:	a803      	add	r0, sp, #12
 8004e8c:	f005 fd40 	bl	800a910 <siprintf>
    comm_respond((comm_data_t*)context->comm, buff, len);
 8004e90:	4602      	mov	r2, r0
 8004e92:	a903      	add	r1, sp, #12
 8004e94:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 8004e98:	f7ff ffac 	bl	8004df4 <comm_respond>
}
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	b01c      	add	sp, #112	; 0x70
 8004ea0:	bd10      	pop	{r4, pc}
        len = sprintf(buff, "**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
 8004ea2:	9200      	str	r2, [sp, #0]
 8004ea4:	a803      	add	r0, sp, #12
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	4902      	ldr	r1, [pc, #8]	; (8004eb4 <SCPI_Control+0x38>)
 8004eaa:	f005 fd31 	bl	800a910 <siprintf>
 8004eae:	e7ef      	b.n	8004e90 <SCPI_Control+0x14>
 8004eb0:	0800c4e8 	.word	0x0800c4e8
 8004eb4:	0800c4fb 	.word	0x0800c4fb

08004eb8 <SCPI_Reset>:
{
 8004eb8:	b508      	push	{r3, lr}
    comm_respond((comm_data_t*)context->comm, "**Reset\r\n", 9);
 8004eba:	2209      	movs	r2, #9
 8004ebc:	4903      	ldr	r1, [pc, #12]	; (8004ecc <SCPI_Reset+0x14>)
 8004ebe:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 8004ec2:	f7ff ff97 	bl	8004df4 <comm_respond>
}
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	bd08      	pop	{r3, pc}
 8004eca:	bf00      	nop
 8004ecc:	0800c528 	.word	0x0800c528

08004ed0 <daq_malloc.constprop.4>:
    daq_trig_update(self);
    daq_enable(self, 1);
    return 0;
}

static void daq_malloc(daq_data_t* self, daq_buff_t* buff, int mem, int reserve, int chans, uint32_t src,
 8004ed0:	4684      	mov	ip, r0
 8004ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed6:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8004eda:	460c      	mov	r4, r1
 8004edc:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
                       uint32_t dma_ch, DMA_TypeDef* dma, enum daq_bits bits)
{
    if (bits == B12)
 8004ee0:	280c      	cmp	r0, #12
 8004ee2:	f10c 013c 	add.w	r1, ip, #60	; 0x3c
 8004ee6:	fa1f fe83 	uxth.w	lr, r3
 8004eea:	f04f 050a 	mov.w	r5, #10
 8004eee:	d126      	bne.n	8004f3e <daq_malloc.constprop.4+0x6e>
    {
        mem += reserve * chans;
        buff->reserve = reserve * chans;

        size_t ln = mem * sizeof(uint16_t);
        buff->data = (uint16_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004ef0:	f242 38d2 	movw	r8, #9170	; 0x23d2
        mem += reserve * chans;
 8004ef4:	fb05 2503 	mla	r5, r5, r3, r2
        buff->reserve = reserve * chans;
 8004ef8:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	8123      	strh	r3, [r4, #8]
        buff->data = (uint16_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004f00:	f83c 3008 	ldrh.w	r3, [ip, r8]
        self->buff_raw_ptr += mem * 2;
 8004f04:	b2aa      	uxth	r2, r5
        buff->data = (uint16_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004f06:	18c8      	adds	r0, r1, r3
        self->buff_raw_ptr += mem * 2;
 8004f08:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        buff->data = (uint16_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004f0c:	6020      	str	r0, [r4, #0]
        buff->chans = chans;
        buff->len = mem;
        memset(buff->data, 0, ln);
 8004f0e:	2100      	movs	r1, #0
        self->buff_raw_ptr += mem * 2;
 8004f10:	f82c 3008 	strh.w	r3, [ip, r8]
        buff->len = mem;
 8004f14:	80e2      	strh	r2, [r4, #6]
        buff->chans = chans;
 8004f16:	f8a4 e004 	strh.w	lr, [r4, #4]
        memset(buff->data, 0, ln);
 8004f1a:	006a      	lsls	r2, r5, #1
 8004f1c:	f005 fcf0 	bl	800a900 <memset>
        {
            dma_p_sz = LL_DMA_PDATAALIGN_WORD;
            dma_m_sz = LL_DMA_MDATAALIGN_WORD;
        }
#endif
        dma_set(src, dma, dma_ch, (uint32_t)((uint16_t*)((uint8_t*)buff->data)), mem, dma_p_sz, dma_m_sz);
 8004f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f24:	9308      	str	r3, [sp, #32]
 8004f26:	f44f 7380 	mov.w	r3, #256	; 0x100
        {
            dma_p_sz = LL_DMA_PDATAALIGN_HALFWORD;
            dma_m_sz = LL_DMA_PDATAALIGN_HALFWORD;
        }
#endif
        dma_set(src, dma, dma_ch, (uint32_t)((uint8_t*)buff->data), mem,  dma_p_sz, dma_m_sz);
 8004f2a:	463a      	mov	r2, r7
 8004f2c:	e9cd 5306 	strd	r5, r3, [sp, #24]
 8004f30:	6823      	ldr	r3, [r4, #0]
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
        self->buff_raw_ptr += mem;
        buff->chans = chans;
        buff->len = mem;
        memset(buff->data, 0, ln);
        dma_set(src, dma, PS_DMA_CH_LA, (uint32_t)((uint8_t*)buff->data), mem, LL_DMA_PDATAALIGN_BYTE, LL_DMA_MDATAALIGN_BYTE);
 8004f32:	4630      	mov	r0, r6
    }
}
 8004f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        dma_set(src, dma, PS_DMA_CH_LA, (uint32_t)((uint8_t*)buff->data), mem, LL_DMA_PDATAALIGN_BYTE, LL_DMA_MDATAALIGN_BYTE);
 8004f38:	491c      	ldr	r1, [pc, #112]	; (8004fac <daq_malloc.constprop.4+0xdc>)
 8004f3a:	f001 bbfb 	b.w	8006734 <dma_set>
    else if (bits == B8)
 8004f3e:	2808      	cmp	r0, #8
 8004f40:	d119      	bne.n	8004f76 <daq_malloc.constprop.4+0xa6>
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004f42:	f242 38d2 	movw	r8, #9170	; 0x23d2
        mem += reserve * chans;
 8004f46:	fb05 2503 	mla	r5, r5, r3, r2
        buff->reserve = reserve * chans;
 8004f4a:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	8123      	strh	r3, [r4, #8]
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004f52:	f83c 3008 	ldrh.w	r3, [ip, r8]
        self->buff_raw_ptr += mem;
 8004f56:	b2aa      	uxth	r2, r5
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004f58:	18c8      	adds	r0, r1, r3
        self->buff_raw_ptr += mem;
 8004f5a:	4413      	add	r3, r2
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004f5c:	6020      	str	r0, [r4, #0]
        memset(buff->data, 0, ln);
 8004f5e:	2100      	movs	r1, #0
        self->buff_raw_ptr += mem;
 8004f60:	f82c 3008 	strh.w	r3, [ip, r8]
        buff->len = mem;
 8004f64:	80e2      	strh	r2, [r4, #6]
        buff->chans = chans;
 8004f66:	f8a4 e004 	strh.w	lr, [r4, #4]
        memset(buff->data, 0, ln);
 8004f6a:	462a      	mov	r2, r5
 8004f6c:	f005 fcc8 	bl	800a900 <memset>
        dma_set(src, dma, dma_ch, (uint32_t)((uint8_t*)buff->data), mem,  dma_p_sz, dma_m_sz);
 8004f70:	2300      	movs	r3, #0
 8004f72:	9308      	str	r3, [sp, #32]
 8004f74:	e7d9      	b.n	8004f2a <daq_malloc.constprop.4+0x5a>
        buff->reserve = reserve * 1;
 8004f76:	8125      	strh	r5, [r4, #8]
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004f78:	f242 35d2 	movw	r5, #9170	; 0x23d2
        mem += reserve * 1;
 8004f7c:	f102 070a 	add.w	r7, r2, #10
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004f80:	f83c 3005 	ldrh.w	r3, [ip, r5]
        self->buff_raw_ptr += mem;
 8004f84:	b2ba      	uxth	r2, r7
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004f86:	18c8      	adds	r0, r1, r3
        self->buff_raw_ptr += mem;
 8004f88:	4413      	add	r3, r2
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8004f8a:	6020      	str	r0, [r4, #0]
        memset(buff->data, 0, ln);
 8004f8c:	2100      	movs	r1, #0
        self->buff_raw_ptr += mem;
 8004f8e:	f82c 3005 	strh.w	r3, [ip, r5]
        buff->len = mem;
 8004f92:	80e2      	strh	r2, [r4, #6]
        buff->chans = chans;
 8004f94:	f8a4 e004 	strh.w	lr, [r4, #4]
        memset(buff->data, 0, ln);
 8004f98:	463a      	mov	r2, r7
 8004f9a:	f005 fcb1 	bl	800a900 <memset>
        dma_set(src, dma, PS_DMA_CH_LA, (uint32_t)((uint8_t*)buff->data), mem, LL_DMA_PDATAALIGN_BYTE, LL_DMA_MDATAALIGN_BYTE);
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	9706      	str	r7, [sp, #24]
 8004fa2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004fa6:	2206      	movs	r2, #6
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	e7c2      	b.n	8004f32 <daq_malloc.constprop.4+0x62>
 8004fac:	40020000 	.word	0x40020000

08004fb0 <NVIC_EncodePriority.constprop.6>:
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fb0:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fb4:	f1c0 0207 	rsb	r2, r0, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fb8:	1d03      	adds	r3, r0, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fba:	2a04      	cmp	r2, #4
 8004fbc:	bf28      	it	cs
 8004fbe:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fc0:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc2:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fc6:	bf98      	it	ls
 8004fc8:	2000      	movls	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fca:	fa03 f302 	lsl.w	r3, r3, r2
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fce:	bf88      	it	hi
 8004fd0:	3803      	subhi	r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fd2:	ea21 0103 	bic.w	r1, r1, r3
}
 8004fd6:	fa01 f000 	lsl.w	r0, r1, r0
 8004fda:	4770      	bx	lr

08004fdc <daq_settings_save>:
{
 8004fdc:	b510      	push	{r4, lr}
    dst1->fs = src1->fs;
 8004fde:	6844      	ldr	r4, [r0, #4]
 8004fe0:	6054      	str	r4, [r2, #4]
    dst1->mem = src1->mem;
 8004fe2:	8904      	ldrh	r4, [r0, #8]
 8004fe4:	8114      	strh	r4, [r2, #8]
    dst1->bits = src1->bits;
 8004fe6:	7a84      	ldrb	r4, [r0, #10]
 8004fe8:	7294      	strb	r4, [r2, #10]
    dst1->ch1_en = src1->ch1_en;
 8004fea:	7804      	ldrb	r4, [r0, #0]
 8004fec:	7014      	strb	r4, [r2, #0]
    dst1->ch2_en = src1->ch2_en;
 8004fee:	7844      	ldrb	r4, [r0, #1]
 8004ff0:	7054      	strb	r4, [r2, #1]
    dst1->ch3_en = src1->ch3_en;
 8004ff2:	7884      	ldrb	r4, [r0, #2]
 8004ff4:	7094      	strb	r4, [r2, #2]
    dst1->ch4_en = src1->ch4_en;
 8004ff6:	78c0      	ldrb	r0, [r0, #3]
 8004ff8:	70d0      	strb	r0, [r2, #3]
    dst2->val_percent = src2->val_percent;
 8004ffa:	690a      	ldr	r2, [r1, #16]
 8004ffc:	611a      	str	r2, [r3, #16]
    dst2->val = src2->val;
 8004ffe:	68ca      	ldr	r2, [r1, #12]
 8005000:	60da      	str	r2, [r3, #12]
    dst2->ch = src2->ch;
 8005002:	688a      	ldr	r2, [r1, #8]
 8005004:	609a      	str	r2, [r3, #8]
    dst2->edge = src2->edge;
 8005006:	794a      	ldrb	r2, [r1, #5]
 8005008:	715a      	strb	r2, [r3, #5]
    dst2->mode = src2->mode;
 800500a:	790a      	ldrb	r2, [r1, #4]
 800500c:	711a      	strb	r2, [r3, #4]
    dst2->pretrigger = src2->pretrigger;
 800500e:	680a      	ldr	r2, [r1, #0]
 8005010:	601a      	str	r2, [r3, #0]
}
 8005012:	bd10      	pop	{r4, pc}

08005014 <daq_settings_init>:
    self->save_s.bits = B12;
 8005014:	f242 33ea 	movw	r3, #9194	; 0x23ea
 8005018:	220c      	movs	r2, #12
 800501a:	54c2      	strb	r2, [r0, r3]
    self->save_s.ch1_en = 1;
 800501c:	f242 33e0 	movw	r3, #9184	; 0x23e0
 8005020:	f240 1201 	movw	r2, #257	; 0x101
 8005024:	50c2      	str	r2, [r0, r3]
    self->save_s.ch4_en = 0;
 8005026:	f242 33e4 	movw	r3, #9188	; 0x23e4
{
 800502a:	b5f0      	push	{r4, r5, r6, r7, lr}
    self->save_s.ch4_en = 0;
 800502c:	4d1f      	ldr	r5, [pc, #124]	; (80050ac <daq_settings_init+0x98>)
    self->save_s.fs = 100000; //TODO defaults from CFG macros
 800502e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    self->save_s.ch4_en = 0;
 8005032:	50c5      	str	r5, [r0, r3]
    self->save_s.fs = 100000; //TODO defaults from CFG macros
 8005034:	f242 33e8 	movw	r3, #9192	; 0x23e8
 8005038:	52c2      	strh	r2, [r0, r3]
    self->trig.save_s.val = 2047;
 800503a:	f242 4330 	movw	r3, #9264	; 0x2430
 800503e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005042:	50c2      	str	r2, [r0, r3]
    self->trig.save_s.ch = 1;
 8005044:	2201      	movs	r2, #1
 8005046:	f242 432c 	movw	r3, #9260	; 0x242c
    self->trig.save_s.edge = RISING;
 800504a:	f242 4129 	movw	r1, #9257	; 0x2429
    self->trig.save_s.ch = 1;
 800504e:	50c2      	str	r2, [r0, r3]
    self->trig.save_s.edge = RISING;
 8005050:	2300      	movs	r3, #0
    self->trig.save_s.mode = DISABLED;
 8005052:	2403      	movs	r4, #3
    self->trig.save_s.edge = RISING;
 8005054:	5443      	strb	r3, [r0, r1]
    self->trig.save_s.mode = DISABLED;
 8005056:	f242 4128 	movw	r1, #9256	; 0x2428
    self->trig.save_s.pretrigger = 50;
 800505a:	f242 4624 	movw	r6, #9252	; 0x2424
    self->trig.save_s.mode = DISABLED;
 800505e:	5444      	strb	r4, [r0, r1]
    self->trig.save_s.pretrigger = 50;
 8005060:	2132      	movs	r1, #50	; 0x32
 8005062:	5181      	str	r1, [r0, r6]
    self->save_l.bits = B1;
 8005064:	f242 36f6 	movw	r6, #9206	; 0x23f6
    self->save_l.ch1_en = 1;
 8005068:	f04f 3701 	mov.w	r7, #16843009	; 0x1010101
    self->save_l.bits = B1;
 800506c:	5582      	strb	r2, [r0, r6]
    self->save_l.ch1_en = 1;
 800506e:	f242 36ec 	movw	r6, #9196	; 0x23ec
 8005072:	5187      	str	r7, [r0, r6]
    self->save_l.ch4_en = 1;
 8005074:	f242 36f0 	movw	r6, #9200	; 0x23f0
 8005078:	5185      	str	r5, [r0, r6]
    self->save_l.fs = 100000;
 800507a:	f242 35f4 	movw	r5, #9204	; 0x23f4
 800507e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005082:	5346      	strh	r6, [r0, r5]
    self->trig.save_s.val_percent = 0;
 8005084:	f242 4534 	movw	r5, #9268	; 0x2434
 8005088:	5143      	str	r3, [r0, r5]
    self->trig.save_l.val = 0;
 800508a:	f242 4544 	movw	r5, #9284	; 0x2444
 800508e:	5143      	str	r3, [r0, r5]
    self->trig.save_l.ch = 1;
 8005090:	f500 5511 	add.w	r5, r0, #9280	; 0x2440
 8005094:	602a      	str	r2, [r5, #0]
    self->trig.save_l.edge = RISING;
 8005096:	f242 423d 	movw	r2, #9277	; 0x243d
 800509a:	5483      	strb	r3, [r0, r2]
    self->trig.save_l.mode = DISABLED;
 800509c:	f242 433c 	movw	r3, #9276	; 0x243c
 80050a0:	54c4      	strb	r4, [r0, r3]
    self->trig.save_l.pretrigger = 50;
 80050a2:	f242 4338 	movw	r3, #9272	; 0x2438
 80050a6:	50c1      	str	r1, [r0, r3]
}
 80050a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050aa:	bf00      	nop
 80050ac:	47c35000 	.word	0x47c35000

080050b0 <daq_init>:
{
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4604      	mov	r4, r0
    daq_trig_init(self);
 80050b4:	f000 fc84 	bl	80059c0 <daq_trig_init>
    daq_settings_init(self);
 80050b8:	4620      	mov	r0, r4
 80050ba:	f7ff ffab 	bl	8005014 <daq_settings_init>
    daq_settings_save(&self->save_s, &self->trig.save_s, &self->set, &self->trig.set);
 80050be:	f504 5310 	add.w	r3, r4, #9216	; 0x2400
 80050c2:	f504 520f 	add.w	r2, r4, #9152	; 0x23c0
 80050c6:	f504 5110 	add.w	r1, r4, #9216	; 0x2400
 80050ca:	f504 500f 	add.w	r0, r4, #9152	; 0x23c0
 80050ce:	3310      	adds	r3, #16
 80050d0:	3214      	adds	r2, #20
 80050d2:	3124      	adds	r1, #36	; 0x24
 80050d4:	3020      	adds	r0, #32
 80050d6:	f7ff ff81 	bl	8004fdc <daq_settings_save>
    self->mode = SCOPE;
 80050da:	2500      	movs	r5, #0
 80050dc:	f242 4308 	movw	r3, #9224	; 0x2408
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 80050e0:	4629      	mov	r1, r5
    self->mode = SCOPE;
 80050e2:	54e5      	strb	r5, [r4, r3]
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 80050e4:	f242 3228 	movw	r2, #9000	; 0x2328

static void daq_clear_buff(daq_buff_t* buff)
{
    buff->data = NULL;
 80050e8:	e9c4 5500 	strd	r5, r5, [r4]
    buff->chans = 0;
    buff->len = 0;
 80050ec:	8125      	strh	r5, [r4, #8]
    buff->data = NULL;
 80050ee:	e9c4 5503 	strd	r5, r5, [r4, #12]
    buff->len = 0;
 80050f2:	82a5      	strh	r5, [r4, #20]
    buff->data = NULL;
 80050f4:	e9c4 5506 	strd	r5, r5, [r4, #24]
    buff->len = 0;
 80050f8:	8425      	strh	r5, [r4, #32]
    buff->data = NULL;
 80050fa:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
    buff->len = 0;
 80050fe:	85a5      	strh	r5, [r4, #44]	; 0x2c
    buff->data = NULL;
 8005100:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    buff->len = 0;
 8005104:	8725      	strh	r5, [r4, #56]	; 0x38
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 8005106:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800510a:	f005 fbf9 	bl	800a900 <memset>
    self->buff_raw_ptr = 0;
 800510e:	f242 33d2 	movw	r3, #9170	; 0x23d2
 8005112:	52e5      	strh	r5, [r4, r3]
    self->trig.buff_trig = NULL;
 8005114:	f242 4384 	movw	r3, #9348	; 0x2484
 8005118:	50e5      	str	r5, [r4, r3]
    self->enabled = 0;
 800511a:	f242 430a 	movw	r3, #9226	; 0x240a
 800511e:	54e5      	strb	r5, [r4, r3]
    self->dis_hold = 0;
 8005120:	f242 4309 	movw	r3, #9225	; 0x2409
    self->vcc = 0;
 8005124:	f242 32f8 	movw	r2, #9208	; 0x23f8
    self->dis_hold = 0;
 8005128:	54e5      	strb	r5, [r4, r3]
    self->vcc = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	50a3      	str	r3, [r4, r2]
    self->vcc_mv = 0;
 800512e:	f242 32fc 	movw	r2, #9212	; 0x23fc
 8005132:	50a3      	str	r3, [r4, r2]
    self->adc_max_val = 0;
 8005134:	f242 4204 	movw	r2, #9220	; 0x2404
 8005138:	50a3      	str	r3, [r4, r2]
    self->smpl_time = 0;
 800513a:	f504 5210 	add.w	r2, r4, #9216	; 0x2400
 800513e:	6013      	str	r3, [r2, #0]
    self->interleaved = 0;
 8005140:	f242 430b 	movw	r3, #9227	; 0x240b
 8005144:	54e5      	strb	r5, [r4, r3]
    self->dualmode = 0;
 8005146:	f242 430c 	movw	r3, #9228	; 0x240c
 800514a:	54e5      	strb	r5, [r4, r3]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800514c:	4d1f      	ldr	r5, [pc, #124]	; (80051cc <daq_init+0x11c>)
    NVIC_SetPriority(PS_IRQN_DAQ_TIM, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_TIM3, 0));
 800514e:	2101      	movs	r1, #1
 8005150:	68e8      	ldr	r0, [r5, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005152:	4c1f      	ldr	r4, [pc, #124]	; (80051d0 <daq_init+0x120>)
 8005154:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8005158:	f7ff ff2a 	bl	8004fb0 <NVIC_EncodePriority.constprop.6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800515c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005160:	0100      	lsls	r0, r0, #4
 8005162:	b2c0      	uxtb	r0, r0
 8005164:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005168:	6023      	str	r3, [r4, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800516a:	68e8      	ldr	r0, [r5, #12]
    NVIC_SetPriority(PS_IRQN_ADC12, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_ADC, 0));
 800516c:	2105      	movs	r1, #5
 800516e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8005172:	f7ff ff1d 	bl	8004fb0 <NVIC_EncodePriority.constprop.6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005176:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800517a:	0100      	lsls	r0, r0, #4
 800517c:	b2c0      	uxtb	r0, r0
 800517e:	f884 0312 	strb.w	r0, [r4, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005182:	6023      	str	r3, [r4, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005184:	2380      	movs	r3, #128	; 0x80
 8005186:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 800518a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005196:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 800519a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 80051aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 80051ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80051be:	f3bf 8f6f 	isb	sy
}
 80051c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    adc_init();
 80051c6:	f001 bafd 	b.w	80067c4 <adc_init>
 80051ca:	bf00      	nop
 80051cc:	e000ed00 	.word	0xe000ed00
 80051d0:	e000e100 	.word	0xe000e100

080051d4 <daq_reset>:
    return ret;
}

void daq_reset(daq_data_t* self)
{
    self->trig.uwtick_first = 0;
 80051d4:	2100      	movs	r1, #0
 80051d6:	f242 4368 	movw	r3, #9320	; 0x2468
{
 80051da:	b510      	push	{r4, lr}
    self->trig.uwtick_first = 0;
 80051dc:	50c1      	str	r1, [r0, r3]
    self->trig.pretrig_cntr = 0;
 80051de:	f242 436c 	movw	r3, #9324	; 0x246c
 80051e2:	50c1      	str	r1, [r0, r3]
    self->trig.posttrig_size = 0;
 80051e4:	f242 4378 	movw	r3, #9336	; 0x2478
 80051e8:	50c1      	str	r1, [r0, r3]
    self->trig.ready_last = 0;
 80051ea:	f242 434f 	movw	r3, #9295	; 0x244f
 80051ee:	54c1      	strb	r1, [r0, r3]
    self->trig.ready = 0;
 80051f0:	f242 434e 	movw	r3, #9294	; 0x244e
 80051f4:	54c1      	strb	r1, [r0, r3]
    self->trig.cntr = 0;
 80051f6:	f242 4350 	movw	r3, #9296	; 0x2450
 80051fa:	50c1      	str	r1, [r0, r3]
    self->trig.all_cntr = 0;
 80051fc:	f242 4354 	movw	r3, #9300	; 0x2454
 8005200:	50c1      	str	r1, [r0, r3]
    //self->trig.pos_frst = 0;
    //self->trig.pos_trig = 0;
    //self->trig.pos_last = 0;
    //self->trig.pos_diff = 0;
    self->trig.pretrig_cntr = 0;
    self->trig.is_post = 0;
 8005202:	f242 434c 	movw	r3, #9292	; 0x244c
 8005206:	54c1      	strb	r1, [r0, r3]

    if (self->buff1.len > 0)
 8005208:	88c2      	ldrh	r2, [r0, #6]
{
 800520a:	4604      	mov	r4, r0
    if (self->buff1.len > 0)
 800520c:	b112      	cbz	r2, 8005214 <daq_reset+0x40>
        memset(self->buff1.data, 0, self->buff1.len);
 800520e:	6800      	ldr	r0, [r0, #0]
 8005210:	f005 fb76 	bl	800a900 <memset>
    if (self->buff2.len > 0)
 8005214:	8a62      	ldrh	r2, [r4, #18]
 8005216:	b11a      	cbz	r2, 8005220 <daq_reset+0x4c>
        memset(self->buff2.data, 0, self->buff2.len);
 8005218:	2100      	movs	r1, #0
 800521a:	68e0      	ldr	r0, [r4, #12]
 800521c:	f005 fb70 	bl	800a900 <memset>
    if (self->buff3.len > 0)
 8005220:	8be2      	ldrh	r2, [r4, #30]
 8005222:	b11a      	cbz	r2, 800522c <daq_reset+0x58>
        memset(self->buff3.data, 0, self->buff3.len);
 8005224:	2100      	movs	r1, #0
 8005226:	69a0      	ldr	r0, [r4, #24]
 8005228:	f005 fb6a 	bl	800a900 <memset>
    if (self->buff4.len > 0)
 800522c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800522e:	b12a      	cbz	r2, 800523c <daq_reset+0x68>
        memset(self->buff4.data, 0, self->buff4.len);
 8005230:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005232:	2100      	movs	r1, #0
}
 8005234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset(self->buff4.data, 0, self->buff4.len);
 8005238:	f005 bb62 	b.w	800a900 <memset>
}
 800523c:	bd10      	pop	{r4, pc}
	...

08005240 <daq_enable>:

void daq_enable(daq_data_t* self, uint8_t enable)
{
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	4604      	mov	r4, r0
    if (!enable)
 8005244:	460d      	mov	r5, r1
 8005246:	b921      	cbnz	r1, 8005252 <daq_enable+0x12>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005248:	4a40      	ldr	r2, [pc, #256]	; (800534c <daq_enable+0x10c>)
 800524a:	6813      	ldr	r3, [r2, #0]
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	6013      	str	r3, [r2, #0]
    {
        LL_TIM_DisableCounter(PS_TIM_DAQ);
        //for (int i = 0; i < 1000; i++) __asm("nop");
    }

    if (self->enabled && self->dis_hold)
 8005252:	f242 430a 	movw	r3, #9226	; 0x240a
 8005256:	5ce3      	ldrb	r3, [r4, r3]
 8005258:	b123      	cbz	r3, 8005264 <daq_enable+0x24>
 800525a:	f242 4309 	movw	r3, #9225	; 0x2409
 800525e:	5ce3      	ldrb	r3, [r4, r3]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d131      	bne.n	80052c8 <daq_enable+0x88>
        return;

    self->trig.pretrig_cntr = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	f242 426c 	movw	r2, #9324	; 0x246c
 800526a:	50a3      	str	r3, [r4, r2]
    self->trig.all_cntr = 0;
 800526c:	f242 4254 	movw	r2, #9300	; 0x2454
 8005270:	50a3      	str	r3, [r4, r2]
    self->trig.cntr = 0;
 8005272:	f242 4250 	movw	r2, #9296	; 0x2450
 8005276:	50a3      	str	r3, [r4, r2]
    self->trig.ignore = 0;
 8005278:	f242 424d 	movw	r2, #9293	; 0x244d
 800527c:	54a3      	strb	r3, [r4, r2]

    if (self->mode == SCOPE || self->mode == VM)
 800527e:	f242 4308 	movw	r3, #9224	; 0x2408
 8005282:	5ce3      	ldrb	r3, [r4, r3]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d820      	bhi.n	80052ca <daq_enable+0x8a>
 8005288:	4b31      	ldr	r3, [pc, #196]	; (8005350 <daq_enable+0x110>)
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800528a:	689a      	ldr	r2, [r3, #8]
    self->trig.uwtick_first = uwTick;
}

static void daq_enable_adc(daq_data_t* self, ADC_TypeDef* adc, uint8_t enable, uint32_t dma_ch)
{
    if (enable)
 800528c:	b145      	cbz	r5, 80052a0 <daq_enable+0x60>
 800528e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005292:	609a      	str	r2, [r3, #8]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005294:	4a2d      	ldr	r2, [pc, #180]	; (800534c <daq_enable+0x10c>)
 8005296:	6813      	ldr	r3, [r2, #0]
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e00b      	b.n	80052b8 <daq_enable+0x78>
  CLEAR_BIT(ADCx->CR2, ADC_CR2_EXTTRIG);
 80052a0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80052a4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR1,
 80052a6:	6859      	ldr	r1, [r3, #4]
 80052a8:	4a2a      	ldr	r2, [pc, #168]	; (8005354 <daq_enable+0x114>)
 80052aa:	400a      	ands	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
{
 80052ae:	f242 7310 	movw	r3, #10000	; 0x2710
        for (int i = 0; i < 10000; i++) __asm("nop"); // let DMA and ADC finish their jobs
 80052b2:	bf00      	nop
 80052b4:	3b01      	subs	r3, #1
 80052b6:	d1fc      	bne.n	80052b2 <daq_enable+0x72>
    self->enabled = enable;
 80052b8:	f242 430a 	movw	r3, #9226	; 0x240a
 80052bc:	54e5      	strb	r5, [r4, r3]
    self->trig.uwtick_first = uwTick;
 80052be:	4b26      	ldr	r3, [pc, #152]	; (8005358 <daq_enable+0x118>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	f242 4368 	movw	r3, #9320	; 0x2468
 80052c6:	50e2      	str	r2, [r4, r3]
}
 80052c8:	bd70      	pop	{r4, r5, r6, pc}
        ASSERT(self->trig.exti_trig != 0);
 80052ca:	f242 4390 	movw	r3, #9360	; 0x2490
 80052ce:	58e2      	ldr	r2, [r4, r3]
 80052d0:	461e      	mov	r6, r3
 80052d2:	b922      	cbnz	r2, 80052de <daq_enable+0x9e>
 80052d4:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 80052d8:	4820      	ldr	r0, [pc, #128]	; (800535c <daq_enable+0x11c>)
 80052da:	f002 facf 	bl	800787c <assert2>
 80052de:	59a2      	ldr	r2, [r4, r6]
 80052e0:	491a      	ldr	r1, [pc, #104]	; (800534c <daq_enable+0x10c>)
 80052e2:	b253      	sxtb	r3, r2
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 80052e4:	68c8      	ldr	r0, [r1, #12]
        if (enable)
 80052e6:	b1ed      	cbz	r5, 8005324 <daq_enable+0xe4>
 80052e8:	f440 7000 	orr.w	r0, r0, #512	; 0x200
  if ((int32_t)(IRQn) >= 0)
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	60c8      	str	r0, [r1, #12]
 80052f0:	db08      	blt.n	8005304 <daq_enable+0xc4>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052f2:	2001      	movs	r0, #1
 80052f4:	f002 061f 	and.w	r6, r2, #31
 80052f8:	40b0      	lsls	r0, r6
 80052fa:	0959      	lsrs	r1, r3, #5
 80052fc:	4e18      	ldr	r6, [pc, #96]	; (8005360 <daq_enable+0x120>)
 80052fe:	3160      	adds	r1, #96	; 0x60
 8005300:	f846 0021 	str.w	r0, [r6, r1, lsl #2]
            if (self->trig.set.mode != DISABLED)
 8005304:	f242 4114 	movw	r1, #9236	; 0x2414
 8005308:	5c61      	ldrb	r1, [r4, r1]
 800530a:	2903      	cmp	r1, #3
 800530c:	d0c2      	beq.n	8005294 <daq_enable+0x54>
  if ((int32_t)(IRQn) >= 0)
 800530e:	2b00      	cmp	r3, #0
 8005310:	dbc0      	blt.n	8005294 <daq_enable+0x54>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005312:	f002 011f 	and.w	r1, r2, #31
 8005316:	2201      	movs	r2, #1
 8005318:	408a      	lsls	r2, r1
 800531a:	4911      	ldr	r1, [pc, #68]	; (8005360 <daq_enable+0x120>)
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005322:	e7b7      	b.n	8005294 <daq_enable+0x54>
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8005324:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  if ((int32_t)(IRQn) >= 0)
 8005328:	2b00      	cmp	r3, #0
 800532a:	60c8      	str	r0, [r1, #12]
 800532c:	dbbf      	blt.n	80052ae <daq_enable+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800532e:	2101      	movs	r1, #1
 8005330:	f002 021f 	and.w	r2, r2, #31
 8005334:	fa01 f202 	lsl.w	r2, r1, r2
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	4909      	ldr	r1, [pc, #36]	; (8005360 <daq_enable+0x120>)
 800533c:	3320      	adds	r3, #32
 800533e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005342:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	e7b0      	b.n	80052ae <daq_enable+0x6e>
 800534c:	40000400 	.word	0x40000400
 8005350:	40012400 	.word	0x40012400
 8005354:	ff3ffde0 	.word	0xff3ffde0
 8005358:	20000804 	.word	0x20000804
 800535c:	0800c8fe 	.word	0x0800c8fe
 8005360:	e000e100 	.word	0xe000e100

08005364 <daq_mem_set>:
{
 8005364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	4604      	mov	r4, r0
 800536a:	460e      	mov	r6, r1
    daq_enable(self, 0);
 800536c:	2100      	movs	r1, #0
 800536e:	f7ff ff67 	bl	8005240 <daq_enable>
    daq_reset(self);
 8005372:	4620      	mov	r0, r4
 8005374:	f7ff ff2e 	bl	80051d4 <daq_reset>
    buff->data = NULL;
 8005378:	2100      	movs	r1, #0
    self->buff_raw_ptr = 0;
 800537a:	f242 33d2 	movw	r3, #9170	; 0x23d2
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 800537e:	f104 073c 	add.w	r7, r4, #60	; 0x3c
    buff->data = NULL;
 8005382:	e9c4 1100 	strd	r1, r1, [r4]
    buff->len = 0;
 8005386:	8121      	strh	r1, [r4, #8]
    buff->data = NULL;
 8005388:	e9c4 1103 	strd	r1, r1, [r4, #12]
    buff->len = 0;
 800538c:	82a1      	strh	r1, [r4, #20]
    buff->data = NULL;
 800538e:	e9c4 1106 	strd	r1, r1, [r4, #24]
    buff->len = 0;
 8005392:	8421      	strh	r1, [r4, #32]
    buff->data = NULL;
 8005394:	e9c4 1109 	strd	r1, r1, [r4, #36]	; 0x24
    buff->len = 0;
 8005398:	85a1      	strh	r1, [r4, #44]	; 0x2c
    buff->data = NULL;
 800539a:	e9c4 110c 	strd	r1, r1, [r4, #48]	; 0x30
    buff->len = 0;
 800539e:	8721      	strh	r1, [r4, #56]	; 0x38
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 80053a0:	f242 3228 	movw	r2, #9000	; 0x2328
    self->buff_raw_ptr = 0;
 80053a4:	52e1      	strh	r1, [r4, r3]
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 80053a6:	4638      	mov	r0, r7
 80053a8:	f005 faaa 	bl	800a900 <memset>
    if (self->set.bits == B12)
 80053ac:	f242 33de 	movw	r3, #9182	; 0x23de
 80053b0:	5ce2      	ldrb	r2, [r4, r3]
    if (self->mode != LA)
 80053b2:	f242 4308 	movw	r3, #9224	; 0x2408
 80053b6:	f814 8003 	ldrb.w	r8, [r4, r3]
    if (self->set.bits == B12)
 80053ba:	2a0c      	cmp	r2, #12
        out_per_ch *= 2;
 80053bc:	bf07      	ittee	eq
 80053be:	ea4f 0946 	moveq.w	r9, r6, lsl #1
        max_len /= 2;
 80053c2:	f241 1194 	movweq	r1, #4500	; 0x1194
    int out_per_ch = mem_per_ch;
 80053c6:	46b1      	movne	r9, r6
    int max_len = PS_DAQ_MAX_MEM;
 80053c8:	f242 3128 	movwne	r1, #9000	; 0x2328
    if (self->mode != LA)
 80053cc:	f1b8 0f02 	cmp.w	r8, #2
 80053d0:	d044      	beq.n	800545c <daq_mem_set+0xf8>
        int len1 = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + is_vcc;
 80053d2:	f242 33d4 	movw	r3, #9172	; 0x23d4
 80053d6:	5ce5      	ldrb	r5, [r4, r3]
 80053d8:	f242 33d5 	movw	r3, #9173	; 0x23d5
 80053dc:	5ce3      	ldrb	r3, [r4, r3]
        uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 80053de:	f108 30ff 	add.w	r0, r8, #4294967295
        int len1 = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + is_vcc;
 80053e2:	441d      	add	r5, r3
 80053e4:	f242 33d6 	movw	r3, #9174	; 0x23d6
        uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 80053e8:	f1d0 0a00 	rsbs	sl, r0, #0
 80053ec:	eb4a 0a00 	adc.w	sl, sl, r0
        int len1 = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + is_vcc;
 80053f0:	f242 30d7 	movw	r0, #9175	; 0x23d7
 80053f4:	5ce3      	ldrb	r3, [r4, r3]
 80053f6:	442b      	add	r3, r5
 80053f8:	5c25      	ldrb	r5, [r4, r0]
 80053fa:	441d      	add	r5, r3
 80053fc:	eb0a 0805 	add.w	r8, sl, r5
        if (mem_per_ch < 0 || (mem_per_ch * len1) + (mem_per_ch * (len1 - is_vcc)) > max_len)
 8005400:	eb05 0308 	add.w	r3, r5, r8
 8005404:	4373      	muls	r3, r6
 8005406:	428b      	cmp	r3, r1
 8005408:	dc43      	bgt.n	8005492 <daq_mem_set+0x12e>
        daq_malloc(self, &self->buff1, mem_per_ch * len1, PS_MEM_RESERVE, len1, PS_ADC_ADDR(ADC1), PS_DMA_CH_ADC1, PS_DMA_ADC1, self->set.bits);
 800540a:	2101      	movs	r1, #1
 800540c:	4b22      	ldr	r3, [pc, #136]	; (8005498 <daq_mem_set+0x134>)
 800540e:	9202      	str	r2, [sp, #8]
 8005410:	e9cd 3100 	strd	r3, r1, [sp]
 8005414:	fb08 f206 	mul.w	r2, r8, r6
 8005418:	4643      	mov	r3, r8
 800541a:	4621      	mov	r1, r4
 800541c:	4620      	mov	r0, r4
 800541e:	f7ff fd57 	bl	8004ed0 <daq_malloc.constprop.4>
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8005422:	f242 33d2 	movw	r3, #9170	; 0x23d2
        self->buff_out.len = out_per_ch * (len1 - is_vcc);
 8005426:	fb05 f509 	mul.w	r5, r5, r9
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 800542a:	5ae2      	ldrh	r2, [r4, r3]
        self->buff_out.len = out_per_ch * (len1 - is_vcc);
 800542c:	b2ad      	uxth	r5, r5
 800542e:	86e5      	strh	r5, [r4, #54]	; 0x36
        self->buff_out.chans = len1 - is_vcc;
 8005430:	eba8 080a 	sub.w	r8, r8, sl
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8005434:	4417      	add	r7, r2
        self->buff_raw_ptr += self->buff_out.len;
 8005436:	4415      	add	r5, r2
        self->buff_out.chans = len1 - is_vcc;
 8005438:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 800543c:	6327      	str	r7, [r4, #48]	; 0x30
        self->buff_raw_ptr += self->buff_out.len;
 800543e:	52e5      	strh	r5, [r4, r3]
    self->set.mem = mem_per_ch;
 8005440:	f242 33dc 	movw	r3, #9180	; 0x23dc
    daq_trig_update(self);
 8005444:	4620      	mov	r0, r4
    self->set.mem = mem_per_ch;
 8005446:	52e6      	strh	r6, [r4, r3]
    daq_trig_update(self);
 8005448:	f000 ffee 	bl	8006428 <daq_trig_update>
    daq_enable(self, 1);
 800544c:	4620      	mov	r0, r4
 800544e:	2101      	movs	r1, #1
 8005450:	f7ff fef6 	bl	8005240 <daq_enable>
    return 0;
 8005454:	2000      	movs	r0, #0
}
 8005456:	b004      	add	sp, #16
 8005458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (mem_per_ch < 0 || (mem_per_ch * 2) > PS_DAQ_MAX_MEM)
 800545c:	f242 3328 	movw	r3, #9000	; 0x2328
 8005460:	ebb3 0f46 	cmp.w	r3, r6, lsl #1
 8005464:	db15      	blt.n	8005492 <daq_mem_set+0x12e>
        daq_malloc(self, &self->buff1, mem_per_ch, PS_MEM_RESERVE, 4, (uint32_t)&PS_DAQ_PORT->IDR, PS_DMA_CH_LA, PS_DMA_LA, self->set.bits);
 8005466:	9202      	str	r2, [sp, #8]
 8005468:	2206      	movs	r2, #6
 800546a:	4b0c      	ldr	r3, [pc, #48]	; (800549c <daq_mem_set+0x138>)
 800546c:	4621      	mov	r1, r4
 800546e:	e9cd 3200 	strd	r3, r2, [sp]
 8005472:	4620      	mov	r0, r4
 8005474:	2304      	movs	r3, #4
 8005476:	4632      	mov	r2, r6
 8005478:	f7ff fd2a 	bl	8004ed0 <daq_malloc.constprop.4>
        self->buff_out.chans = 4;
 800547c:	2304      	movs	r3, #4
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 800547e:	f242 32d2 	movw	r2, #9170	; 0x23d2
        self->buff_out.chans = 4;
 8005482:	86a3      	strh	r3, [r4, #52]	; 0x34
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8005484:	5aa3      	ldrh	r3, [r4, r2]
        self->buff_out.len = mem_per_ch;
 8005486:	86e6      	strh	r6, [r4, #54]	; 0x36
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8005488:	441f      	add	r7, r3
        self->buff_raw_ptr += self->buff_out.len;
 800548a:	4433      	add	r3, r6
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 800548c:	6327      	str	r7, [r4, #48]	; 0x30
        self->buff_raw_ptr += self->buff_out.len;
 800548e:	52a3      	strh	r3, [r4, r2]
 8005490:	e7d6      	b.n	8005440 <daq_mem_set+0xdc>
            return -2;
 8005492:	f06f 0001 	mvn.w	r0, #1
 8005496:	e7de      	b.n	8005456 <daq_mem_set+0xf2>
 8005498:	4001244c 	.word	0x4001244c
 800549c:	40010808 	.word	0x40010808

080054a0 <daq_bit_set>:
{
 80054a0:	b538      	push	{r3, r4, r5, lr}
    if (bits != B12 && bits != B8 && bits != B1)
 80054a2:	f001 03fb 	and.w	r3, r1, #251	; 0xfb
 80054a6:	2b08      	cmp	r3, #8
{
 80054a8:	4604      	mov	r4, r0
 80054aa:	460d      	mov	r5, r1
    if (bits != B12 && bits != B8 && bits != B1)
 80054ac:	d001      	beq.n	80054b2 <daq_bit_set+0x12>
 80054ae:	2901      	cmp	r1, #1
 80054b0:	d12d      	bne.n	800550e <daq_bit_set+0x6e>
    self->set.bits = bits;
 80054b2:	f242 33de 	movw	r3, #9182	; 0x23de
    if (bits == B12)
 80054b6:	2d0c      	cmp	r5, #12
    self->set.bits = bits;
 80054b8:	54e5      	strb	r5, [r4, r3]
 80054ba:	f242 4304 	movw	r3, #9220	; 0x2404
    if (bits == B12)
 80054be:	d120      	bne.n	8005502 <daq_bit_set+0x62>
        self->adc_max_val = 4095;
 80054c0:	4a17      	ldr	r2, [pc, #92]	; (8005520 <daq_bit_set+0x80>)
        self->adc_max_val = 1;
 80054c2:	50e2      	str	r2, [r4, r3]
    if (self->mode == SCOPE || self->mode == VM)
 80054c4:	f242 4308 	movw	r3, #9224	; 0x2408
 80054c8:	5ce3      	ldrb	r3, [r4, r3]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d822      	bhi.n	8005514 <daq_bit_set+0x74>
        daq_enable(self, 0);
 80054ce:	2100      	movs	r1, #0
 80054d0:	4620      	mov	r0, r4
 80054d2:	f7ff feb5 	bl	8005240 <daq_enable>
        daq_reset(self);
 80054d6:	4620      	mov	r0, r4
 80054d8:	f7ff fe7c 	bl	80051d4 <daq_reset>
        if (bits == B8)
 80054dc:	2d08      	cmp	r5, #8
 80054de:	d01b      	beq.n	8005518 <daq_bit_set+0x78>
        adc_set_res(ADC1, bits_raw);
 80054e0:	2100      	movs	r1, #0
 80054e2:	4810      	ldr	r0, [pc, #64]	; (8005524 <daq_bit_set+0x84>)
 80054e4:	f001 fa22 	bl	800692c <adc_set_res>
        int ret = daq_mem_set(self, self->set.mem);
 80054e8:	f242 33dc 	movw	r3, #9180	; 0x23dc
 80054ec:	4620      	mov	r0, r4
 80054ee:	5ae1      	ldrh	r1, [r4, r3]
 80054f0:	f7ff ff38 	bl	8005364 <daq_mem_set>
        daq_enable(self, 1);
 80054f4:	2101      	movs	r1, #1
        int ret = daq_mem_set(self, self->set.mem);
 80054f6:	4605      	mov	r5, r0
        daq_enable(self, 1);
 80054f8:	4620      	mov	r0, r4
 80054fa:	f7ff fea1 	bl	8005240 <daq_enable>
}
 80054fe:	4628      	mov	r0, r5
 8005500:	bd38      	pop	{r3, r4, r5, pc}
    else if (bits == B8)
 8005502:	2d08      	cmp	r5, #8
        self->adc_max_val = 255;
 8005504:	bf0c      	ite	eq
 8005506:	4a08      	ldreq	r2, [pc, #32]	; (8005528 <daq_bit_set+0x88>)
        self->adc_max_val = 1;
 8005508:	f04f 527e 	movne.w	r2, #1065353216	; 0x3f800000
 800550c:	e7d9      	b.n	80054c2 <daq_bit_set+0x22>
        return -1;
 800550e:	f04f 35ff 	mov.w	r5, #4294967295
 8005512:	e7f4      	b.n	80054fe <daq_bit_set+0x5e>
    return 0;
 8005514:	2500      	movs	r5, #0
 8005516:	e7f2      	b.n	80054fe <daq_bit_set+0x5e>
            return -2;
 8005518:	f06f 0501 	mvn.w	r5, #1
 800551c:	e7ef      	b.n	80054fe <daq_bit_set+0x5e>
 800551e:	bf00      	nop
 8005520:	457ff000 	.word	0x457ff000
 8005524:	40012400 	.word	0x40012400
 8005528:	437f0000 	.word	0x437f0000

0800552c <daq_fs_set>:
    uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 800552c:	f242 4308 	movw	r3, #9224	; 0x2408
{
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 8005534:	f810 8003 	ldrb.w	r8, [r0, r3]
    int channs = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + is_vcc;
 8005538:	f242 33d4 	movw	r3, #9172	; 0x23d4
 800553c:	5cc5      	ldrb	r5, [r0, r3]
 800553e:	f242 33d5 	movw	r3, #9173	; 0x23d5
 8005542:	f810 b003 	ldrb.w	fp, [r0, r3]
 8005546:	f242 33d6 	movw	r3, #9174	; 0x23d6
 800554a:	f810 a003 	ldrb.w	sl, [r0, r3]
 800554e:	f242 33d7 	movw	r3, #9175	; 0x23d7
 8005552:	f810 9003 	ldrb.w	r9, [r0, r3]
    float scope_max_fs = (self->set.bits == B12 ? PS_DAQ_MAX_B12_FS : PS_DAQ_MAX_B8_FS) / (float)(channs);
 8005556:	f242 33de 	movw	r3, #9182	; 0x23de
{
 800555a:	460e      	mov	r6, r1
    float scope_max_fs = (self->set.bits == B12 ? PS_DAQ_MAX_B12_FS : PS_DAQ_MAX_B8_FS) / (float)(channs);
 800555c:	5cc3      	ldrb	r3, [r0, r3]
{
 800555e:	b085      	sub	sp, #20
    float scope_max_fs = (self->set.bits == B12 ? PS_DAQ_MAX_B12_FS : PS_DAQ_MAX_B8_FS) / (float)(channs);
 8005560:	2b0c      	cmp	r3, #12
{
 8005562:	4604      	mov	r4, r0
    if (fs2 <= 0 || fs2 > (self->mode == LA ? PS_LA_MAX_FS : scope_max_fs))
 8005564:	f04f 0100 	mov.w	r1, #0
 8005568:	4630      	mov	r0, r6
    float scope_max_fs = (self->set.bits == B12 ? PS_DAQ_MAX_B12_FS : PS_DAQ_MAX_B8_FS) / (float)(channs);
 800556a:	bf14      	ite	ne
 800556c:	2700      	movne	r7, #0
 800556e:	4f27      	ldreq	r7, [pc, #156]	; (800560c <daq_fs_set+0xe0>)
    if (fs2 <= 0 || fs2 > (self->mode == LA ? PS_LA_MAX_FS : scope_max_fs))
 8005570:	f7fb fd9a 	bl	80010a8 <__aeabi_fcmple>
 8005574:	2800      	cmp	r0, #0
 8005576:	d145      	bne.n	8005604 <daq_fs_set+0xd8>
 8005578:	f1b8 0f02 	cmp.w	r8, #2
 800557c:	d040      	beq.n	8005600 <daq_fs_set+0xd4>
    int channs = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + is_vcc;
 800557e:	eb05 000b 	add.w	r0, r5, fp
 8005582:	4450      	add	r0, sl
 8005584:	4448      	add	r0, r9
    float scope_max_fs = (self->set.bits == B12 ? PS_DAQ_MAX_B12_FS : PS_DAQ_MAX_B8_FS) / (float)(channs);
 8005586:	f1b8 0f01 	cmp.w	r8, #1
 800558a:	bf08      	it	eq
 800558c:	3001      	addeq	r0, #1
 800558e:	f7fb fb8f 	bl	8000cb0 <__aeabi_i2f>
 8005592:	4601      	mov	r1, r0
 8005594:	4638      	mov	r0, r7
 8005596:	f7fb fc93 	bl	8000ec0 <__aeabi_fdiv>
    if (fs2 <= 0 || fs2 > (self->mode == LA ? PS_LA_MAX_FS : scope_max_fs))
 800559a:	4631      	mov	r1, r6
 800559c:	f7fb fd7a 	bl	8001094 <__aeabi_fcmplt>
 80055a0:	4605      	mov	r5, r0
 80055a2:	bb78      	cbnz	r0, 8005604 <daq_fs_set+0xd8>
    self->set.fs = fs;
 80055a4:	f242 39d8 	movw	r9, #9176	; 0x23d8
    int prescaler = 1;
 80055a8:	2701      	movs	r7, #1
    daq_enable(self, 0);
 80055aa:	4601      	mov	r1, r0
    self->set.fs = fs;
 80055ac:	f844 6009 	str.w	r6, [r4, r9]
    daq_enable(self, 0);
 80055b0:	4620      	mov	r0, r4
 80055b2:	f7ff fe45 	bl	8005240 <daq_enable>
    int reload = 1;
 80055b6:	f10d 0810 	add.w	r8, sp, #16
    daq_reset(self);
 80055ba:	4620      	mov	r0, r4
 80055bc:	f7ff fe0a 	bl	80051d4 <daq_reset>
    int reload = 1;
 80055c0:	f848 7d04 	str.w	r7, [r8, #-4]!
    self->set.fs = get_freq(&prescaler, &reload, PS_TIM_DAQ_MAX, PS_TIM_DAQ_FREQ, fs2);
 80055c4:	4630      	mov	r0, r6
    int prescaler = 1;
 80055c6:	9702      	str	r7, [sp, #8]
    self->set.fs = get_freq(&prescaler, &reload, PS_TIM_DAQ_MAX, PS_TIM_DAQ_FREQ, fs2);
 80055c8:	f7fb fd8c 	bl	80010e4 <__aeabi_f2iz>
 80055cc:	4641      	mov	r1, r8
 80055ce:	9000      	str	r0, [sp, #0]
 80055d0:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <daq_fs_set+0xe4>)
 80055d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055d6:	a802      	add	r0, sp, #8
 80055d8:	f002 fa3b 	bl	8007a52 <get_freq>
  WRITE_REG(TIMx->PSC, Prescaler);
 80055dc:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <daq_fs_set+0xe8>)
 80055de:	9a02      	ldr	r2, [sp, #8]
 80055e0:	f844 0009 	str.w	r0, [r4, r9]
 80055e4:	629a      	str	r2, [r3, #40]	; 0x28
    LL_TIM_SetAutoReload(PS_TIM_DAQ, reload);
 80055e6:	9a03      	ldr	r2, [sp, #12]
    daq_trig_update(self);
 80055e8:	4620      	mov	r0, r4
  WRITE_REG(TIMx->ARR, AutoReload);
 80055ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80055ec:	f000 ff1c 	bl	8006428 <daq_trig_update>
    daq_enable(self, 1);
 80055f0:	4620      	mov	r0, r4
 80055f2:	4639      	mov	r1, r7
 80055f4:	f7ff fe24 	bl	8005240 <daq_enable>
    return 0;
 80055f8:	4628      	mov	r0, r5
}
 80055fa:	b005      	add	sp, #20
 80055fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (fs2 <= 0 || fs2 > (self->mode == LA ? PS_LA_MAX_FS : scope_max_fs))
 8005600:	4805      	ldr	r0, [pc, #20]	; (8005618 <daq_fs_set+0xec>)
 8005602:	e7ca      	b.n	800559a <daq_fs_set+0x6e>
        return -1;
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	e7f7      	b.n	80055fa <daq_fs_set+0xce>
 800560a:	bf00      	nop
 800560c:	49435000 	.word	0x49435000
 8005610:	044aa200 	.word	0x044aa200
 8005614:	40000400 	.word	0x40000400
 8005618:	4a989680 	.word	0x4a989680
 800561c:	00000000 	.word	0x00000000

08005620 <daq_ch_set>:
{
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	469a      	mov	sl, r3
 8005626:	4604      	mov	r4, r0
    self->set.ch1_en = ch1;
 8005628:	f242 33d4 	movw	r3, #9172	; 0x23d4
 800562c:	54e1      	strb	r1, [r4, r3]
    self->set.ch2_en = ch2;
 800562e:	f242 33d5 	movw	r3, #9173	; 0x23d5
 8005632:	54e2      	strb	r2, [r4, r3]
    self->set.ch3_en = ch3;
 8005634:	f242 33d6 	movw	r3, #9174	; 0x23d6
 8005638:	f800 a003 	strb.w	sl, [r0, r3]
    self->set.ch4_en = ch4;
 800563c:	f242 33d7 	movw	r3, #9175	; 0x23d7
{
 8005640:	b08f      	sub	sp, #60	; 0x3c
 8005642:	f89d b060 	ldrb.w	fp, [sp, #96]	; 0x60
 8005646:	460e      	mov	r6, r1
    self->set.ch4_en = ch4;
 8005648:	f800 b003 	strb.w	fp, [r0, r3]
    if (self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en == 0)
 800564c:	188b      	adds	r3, r1, r2
 800564e:	4453      	add	r3, sl
 8005650:	eb13 0f0b 	cmn.w	r3, fp
{
 8005654:	4617      	mov	r7, r2
    if (self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en == 0)
 8005656:	d105      	bne.n	8005664 <daq_ch_set+0x44>
        return -1;
 8005658:	f04f 35ff 	mov.w	r5, #4294967295
}
 800565c:	4628      	mov	r0, r5
 800565e:	b00f      	add	sp, #60	; 0x3c
 8005660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (self->enabled)
 8005664:	f242 430a 	movw	r3, #9226	; 0x240a
 8005668:	5cc3      	ldrb	r3, [r0, r3]
 800566a:	b133      	cbz	r3, 800567a <daq_ch_set+0x5a>
        daq_enable(self, 0);
 800566c:	2100      	movs	r1, #0
 800566e:	f7ff fde7 	bl	8005240 <daq_enable>
        daq_reset(self);
 8005672:	4620      	mov	r0, r4
 8005674:	f7ff fdae 	bl	80051d4 <daq_reset>
        reen = 1;
 8005678:	2301      	movs	r3, #1
    int reen = 0;
 800567a:	9306      	str	r3, [sp, #24]
    if (self->mode != LA)
 800567c:	f242 4308 	movw	r3, #9224	; 0x2408
 8005680:	5ce5      	ldrb	r5, [r4, r3]
 8005682:	2d02      	cmp	r5, #2
 8005684:	d077      	beq.n	8005776 <daq_ch_set+0x156>
        if (fs <= 0)
 8005686:	2100      	movs	r1, #0
 8005688:	9819      	ldr	r0, [sp, #100]	; 0x64
 800568a:	f7fb fd0d 	bl	80010a8 <__aeabi_fcmple>
 800568e:	2800      	cmp	r0, #0
 8005690:	d1e2      	bne.n	8005658 <daq_ch_set+0x38>
        uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 8005692:	1e6a      	subs	r2, r5, #1
 8005694:	4253      	negs	r3, r2
 8005696:	4153      	adcs	r3, r2
 8005698:	9308      	str	r3, [sp, #32]
        uint32_t smpl_time = PS_ADC_SMPLT[0];
 800569a:	4b41      	ldr	r3, [pc, #260]	; (80057a0 <daq_ch_set+0x180>)
        channs = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + is_vcc;
 800569c:	f242 32d5 	movw	r2, #9173	; 0x23d5
        uint32_t smpl_time = PS_ADC_SMPLT[0];
 80056a0:	681b      	ldr	r3, [r3, #0]
        channs = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + is_vcc;
 80056a2:	5ca2      	ldrb	r2, [r4, r2]
        uint32_t smpl_time = PS_ADC_SMPLT[0];
 80056a4:	9309      	str	r3, [sp, #36]	; 0x24
        float smpl_time_n = PS_ADC_SMPLT_N[0];
 80056a6:	4b3f      	ldr	r3, [pc, #252]	; (80057a4 <daq_ch_set+0x184>)
        float T = 1.0 / fs;
 80056a8:	9919      	ldr	r1, [sp, #100]	; 0x64
        float smpl_time_n = PS_ADC_SMPLT_N[0];
 80056aa:	681b      	ldr	r3, [r3, #0]
        float T = 1.0 / fs;
 80056ac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
        float smpl_time_n = PS_ADC_SMPLT_N[0];
 80056b0:	9307      	str	r3, [sp, #28]
        channs = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + is_vcc;
 80056b2:	f242 33d4 	movw	r3, #9172	; 0x23d4
 80056b6:	5ce3      	ldrb	r3, [r4, r3]
        for (int i = 0; i < PS_ADC_SMPLT_CNT; i++) // find best sample time
 80056b8:	2500      	movs	r5, #0
        channs = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + is_vcc;
 80056ba:	4413      	add	r3, r2
 80056bc:	f242 32d6 	movw	r2, #9174	; 0x23d6
 80056c0:	5ca2      	ldrb	r2, [r4, r2]
 80056c2:	4413      	add	r3, r2
 80056c4:	f242 32d7 	movw	r2, #9175	; 0x23d7
 80056c8:	5ca2      	ldrb	r2, [r4, r2]
 80056ca:	4413      	add	r3, r2
 80056cc:	9a08      	ldr	r2, [sp, #32]
 80056ce:	4413      	add	r3, r2
 80056d0:	930c      	str	r3, [sp, #48]	; 0x30
        float T = 1.0 / fs;
 80056d2:	f7fb fbf5 	bl	8000ec0 <__aeabi_fdiv>
            if (((float)channs * PS_ADC_1CH_SMPL_TM(PS_ADC_SMPLT_N[i] + 0.5, (self->set.bits == B12 ? PS_ADC_TCONV12 : PS_ADC_TCONV8))) < T)
 80056d6:	f242 33de 	movw	r3, #9182	; 0x23de
 80056da:	2200      	movs	r2, #0
 80056dc:	5ce3      	ldrb	r3, [r4, r3]
        float T = 1.0 / fs;
 80056de:	900d      	str	r0, [sp, #52]	; 0x34
 80056e0:	2b0c      	cmp	r3, #12
 80056e2:	bf0c      	ite	eq
 80056e4:	4b30      	ldreq	r3, [pc, #192]	; (80057a8 <daq_ch_set+0x188>)
 80056e6:	4b31      	ldrne	r3, [pc, #196]	; (80057ac <daq_ch_set+0x18c>)
 80056e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
            if (((float)channs * PS_ADC_1CH_SMPL_TM(PS_ADC_SMPLT_N[i] + 0.5, (self->set.bits == B12 ? PS_ADC_TCONV12 : PS_ADC_TCONV8))) < T)
 80056ec:	4b2d      	ldr	r3, [pc, #180]	; (80057a4 <daq_ch_set+0x184>)
 80056ee:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80056f2:	4618      	mov	r0, r3
 80056f4:	9305      	str	r3, [sp, #20]
 80056f6:	f7fa fea1 	bl	800043c <__aeabi_f2d>
 80056fa:	2200      	movs	r2, #0
 80056fc:	4b2c      	ldr	r3, [pc, #176]	; (80057b0 <daq_ch_set+0x190>)
 80056fe:	f7fa fd3f 	bl	8000180 <__adddf3>
 8005702:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005706:	f7fa fd3b 	bl	8000180 <__adddf3>
 800570a:	a323      	add	r3, pc, #140	; (adr r3, 8005798 <daq_ch_set+0x178>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f7fa feec 	bl	80004ec <__aeabi_dmul>
 8005714:	4680      	mov	r8, r0
 8005716:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005718:	4689      	mov	r9, r1
 800571a:	f7fb fac9 	bl	8000cb0 <__aeabi_i2f>
 800571e:	f7fa fe8d 	bl	800043c <__aeabi_f2d>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4640      	mov	r0, r8
 8005728:	4649      	mov	r1, r9
 800572a:	f7fa fedf 	bl	80004ec <__aeabi_dmul>
 800572e:	4680      	mov	r8, r0
 8005730:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005732:	4689      	mov	r9, r1
 8005734:	f7fa fe82 	bl	800043c <__aeabi_f2d>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4640      	mov	r0, r8
 800573e:	4649      	mov	r1, r9
 8005740:	f7fb f946 	bl	80009d0 <__aeabi_dcmplt>
 8005744:	b140      	cbz	r0, 8005758 <daq_ch_set+0x138>
                smpl_time = PS_ADC_SMPLT[i];
 8005746:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <daq_ch_set+0x180>)
 8005748:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
        for (int i = 0; i < PS_ADC_SMPLT_CNT; i++) // find best sample time
 800574c:	3501      	adds	r5, #1
                smpl_time = PS_ADC_SMPLT[i];
 800574e:	9309      	str	r3, [sp, #36]	; 0x24
            if (((float)channs * PS_ADC_1CH_SMPL_TM(PS_ADC_SMPLT_N[i] + 0.5, (self->set.bits == B12 ? PS_ADC_TCONV12 : PS_ADC_TCONV8))) < T)
 8005750:	9b05      	ldr	r3, [sp, #20]
        for (int i = 0; i < PS_ADC_SMPLT_CNT; i++) // find best sample time
 8005752:	2d08      	cmp	r5, #8
            if (((float)channs * PS_ADC_1CH_SMPL_TM(PS_ADC_SMPLT_N[i] + 0.5, (self->set.bits == B12 ? PS_ADC_TCONV12 : PS_ADC_TCONV8))) < T)
 8005754:	9307      	str	r3, [sp, #28]
        for (int i = 0; i < PS_ADC_SMPLT_CNT; i++) // find best sample time
 8005756:	d1c9      	bne.n	80056ec <daq_ch_set+0xcc>
        self->smpl_time = smpl_time_n;
 8005758:	9a07      	ldr	r2, [sp, #28]
 800575a:	f504 5310 	add.w	r3, r4, #9216	; 0x2400
 800575e:	601a      	str	r2, [r3, #0]
        adc_set_ch(ADC1, ch1, ch2, ch3, ch4, smpl_time, is_vcc);
 8005760:	9b08      	ldr	r3, [sp, #32]
 8005762:	463a      	mov	r2, r7
 8005764:	9302      	str	r3, [sp, #8]
 8005766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005768:	4631      	mov	r1, r6
 800576a:	e9cd b300 	strd	fp, r3, [sp]
 800576e:	4811      	ldr	r0, [pc, #68]	; (80057b4 <daq_ch_set+0x194>)
 8005770:	4653      	mov	r3, sl
 8005772:	f001 f843 	bl	80067fc <adc_set_ch>
    int ret = daq_mem_set(self, self->set.mem);
 8005776:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800577a:	4620      	mov	r0, r4
 800577c:	5ae1      	ldrh	r1, [r4, r3]
 800577e:	f7ff fdf1 	bl	8005364 <daq_mem_set>
    if (reen)
 8005782:	9b06      	ldr	r3, [sp, #24]
    int ret = daq_mem_set(self, self->set.mem);
 8005784:	4605      	mov	r5, r0
    if (reen)
 8005786:	2b00      	cmp	r3, #0
 8005788:	f43f af68 	beq.w	800565c <daq_ch_set+0x3c>
        daq_enable(self, 1);
 800578c:	2101      	movs	r1, #1
 800578e:	4620      	mov	r0, r4
 8005790:	f7ff fd56 	bl	8005240 <daq_enable>
 8005794:	e762      	b.n	800565c <daq_ch_set+0x3c>
 8005796:	bf00      	nop
 8005798:	80f29212 	.word	0x80f29212
 800579c:	3e765e9f 	.word	0x3e765e9f
 80057a0:	0800c4a8 	.word	0x0800c4a8
 80057a4:	0800c4c8 	.word	0x0800c4c8
 80057a8:	40290000 	.word	0x40290000
 80057ac:	40210000 	.word	0x40210000
 80057b0:	3fe00000 	.word	0x3fe00000
 80057b4:	40012400 	.word	0x40012400

080057b8 <daq_mode_set>:
    }
}

void daq_mode_set(daq_data_t* self, enum daq_mode mode)
{
    if (self->mode == SCOPE)
 80057b8:	f242 4308 	movw	r3, #9224	; 0x2408
{
 80057bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (self->mode == SCOPE)
 80057be:	5cc3      	ldrb	r3, [r0, r3]
{
 80057c0:	b089      	sub	sp, #36	; 0x24
 80057c2:	4604      	mov	r4, r0
 80057c4:	460e      	mov	r6, r1
    if (self->mode == SCOPE)
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d172      	bne.n	80058b0 <daq_mode_set+0xf8>
        daq_settings_save(&self->set, &self->trig.set, &self->save_s, &self->trig.save_s);
 80057ca:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
 80057ce:	f500 520f 	add.w	r2, r0, #9152	; 0x23c0
 80057d2:	3324      	adds	r3, #36	; 0x24
 80057d4:	3220      	adds	r2, #32
    else if (self->mode == LA)
        daq_settings_save(&self->set, &self->trig.set, &self->save_l, &self->trig.save_l);
 80057d6:	f504 5110 	add.w	r1, r4, #9216	; 0x2400
 80057da:	f504 500f 	add.w	r0, r4, #9152	; 0x23c0
 80057de:	3110      	adds	r1, #16
 80057e0:	3014      	adds	r0, #20
 80057e2:	f7ff fbfb 	bl	8004fdc <daq_settings_save>

    daq_enable(self, 0);
 80057e6:	2100      	movs	r1, #0
 80057e8:	4620      	mov	r0, r4
 80057ea:	f7ff fd29 	bl	8005240 <daq_enable>
    daq_reset(self);
 80057ee:	4620      	mov	r0, r4
 80057f0:	f7ff fcf0 	bl	80051d4 <daq_reset>
    self->dis_hold = 1;
 80057f4:	f242 4309 	movw	r3, #9225	; 0x2409
 80057f8:	2201      	movs	r2, #1
 80057fa:	54e2      	strb	r2, [r4, r3]
    self->mode = mode;
 80057fc:	f242 4308 	movw	r3, #9224	; 0x2408

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005800:	2210      	movs	r2, #16
    self->mode = mode;
 8005802:	54e6      	strb	r6, [r4, r3]
    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005804:	2100      	movs	r1, #0
 8005806:	eb0d 0002 	add.w	r0, sp, r2
 800580a:	f005 f879 	bl	800a900 <memset>
    GPIO_InitStruct.Pin = PS_DAQ_CH1 | PS_DAQ_CH2 | PS_DAQ_CH3 | PS_DAQ_CH4;
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800580e:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = PS_DAQ_CH1 | PS_DAQ_CH2 | PS_DAQ_CH3 | PS_DAQ_CH4;
 8005810:	f641 631e 	movw	r3, #7710	; 0x1e1e
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005814:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pin = PS_DAQ_CH1 | PS_DAQ_CH2 | PS_DAQ_CH3 | PS_DAQ_CH4;
 8005816:	9303      	str	r3, [sp, #12]
    if (mode == SCOPE) // save settings
 8005818:	2e00      	cmp	r6, #0
 800581a:	d152      	bne.n	80058c2 <daq_mode_set+0x10a>
    {
        GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
        LL_GPIO_Init(PS_DAQ_PORT, &GPIO_InitStruct);
 800581c:	a903      	add	r1, sp, #12
 800581e:	485c      	ldr	r0, [pc, #368]	; (8005990 <daq_mode_set+0x1d8>)
 8005820:	f7fd f84c 	bl	80028bc <LL_GPIO_Init>

        daq_mem_set(self, 3); // safety guard
 8005824:	4629      	mov	r1, r5
 8005826:	4620      	mov	r0, r4
 8005828:	f7ff fd9c 	bl	8005364 <daq_mem_set>
        daq_bit_set(self, self->save_s.bits);
 800582c:	f242 33ea 	movw	r3, #9194	; 0x23ea
        daq_ch_set(self, self->save_s.ch1_en, self->save_s.ch2_en, self->save_s.ch3_en, self->save_s.ch4_en, self->save_s.fs);
 8005830:	f242 35e4 	movw	r5, #9188	; 0x23e4
        daq_bit_set(self, self->save_s.bits);
 8005834:	5ce1      	ldrb	r1, [r4, r3]
 8005836:	4620      	mov	r0, r4
 8005838:	f7ff fe32 	bl	80054a0 <daq_bit_set>
        daq_ch_set(self, self->save_s.ch1_en, self->save_s.ch2_en, self->save_s.ch3_en, self->save_s.ch4_en, self->save_s.fs);
 800583c:	5960      	ldr	r0, [r4, r5]
 800583e:	f242 33e2 	movw	r3, #9186	; 0x23e2
 8005842:	9001      	str	r0, [sp, #4]
 8005844:	f242 30e3 	movw	r0, #9187	; 0x23e3
 8005848:	f242 32e1 	movw	r2, #9185	; 0x23e1
 800584c:	f242 31e0 	movw	r1, #9184	; 0x23e0
 8005850:	5c20      	ldrb	r0, [r4, r0]
 8005852:	5ca2      	ldrb	r2, [r4, r2]
 8005854:	5ce3      	ldrb	r3, [r4, r3]
 8005856:	5c61      	ldrb	r1, [r4, r1]
 8005858:	9000      	str	r0, [sp, #0]
 800585a:	4620      	mov	r0, r4
 800585c:	f7ff fee0 	bl	8005620 <daq_ch_set>
        daq_fs_set(self, self->save_s.fs);
 8005860:	5961      	ldr	r1, [r4, r5]
 8005862:	4620      	mov	r0, r4
 8005864:	f7ff fe62 	bl	800552c <daq_fs_set>
        daq_mem_set(self, self->save_s.mem);
 8005868:	f242 33e8 	movw	r3, #9192	; 0x23e8
 800586c:	4620      	mov	r0, r4
 800586e:	5ae1      	ldrh	r1, [r4, r3]
 8005870:	f7ff fd78 	bl	8005364 <daq_mem_set>
        daq_trig_set(self, self->trig.save_s.ch, self->trig.save_s.val, self->trig.save_s.edge,
 8005874:	f242 4124 	movw	r1, #9252	; 0x2424
 8005878:	5861      	ldr	r1, [r4, r1]
 800587a:	f242 4329 	movw	r3, #9257	; 0x2429
 800587e:	9101      	str	r1, [sp, #4]
 8005880:	f242 4128 	movw	r1, #9256	; 0x2428
 8005884:	5c61      	ldrb	r1, [r4, r1]
 8005886:	f242 4230 	movw	r2, #9264	; 0x2430
 800588a:	9100      	str	r1, [sp, #0]
 800588c:	f242 412c 	movw	r1, #9260	; 0x242c
 8005890:	5ce3      	ldrb	r3, [r4, r3]
 8005892:	5ca2      	ldrb	r2, [r4, r2]
 8005894:	5861      	ldr	r1, [r4, r1]
        daq_mem_set(self, 3); // safety guard
        daq_bit_set(self, self->save_l.bits);
        daq_ch_set(self, self->save_l.ch1_en, self->save_l.ch2_en, self->save_l.ch3_en, self->save_l.ch4_en, self->save_l.fs);
        daq_fs_set(self, self->save_l.fs);
        daq_mem_set(self, self->save_l.mem);
        daq_trig_set(self, self->trig.save_l.ch, self->trig.save_l.val, self->trig.save_l.edge,
 8005896:	4620      	mov	r0, r4
 8005898:	f000 fb64 	bl	8005f64 <daq_trig_set>
                     self->trig.save_l.mode, self->trig.save_l.pretrigger);
    }

    self->dis_hold = 0;
 800589c:	f242 4309 	movw	r3, #9225	; 0x2409
 80058a0:	2200      	movs	r2, #0
    daq_enable(self, 1);
 80058a2:	2101      	movs	r1, #1
    self->dis_hold = 0;
 80058a4:	54e2      	strb	r2, [r4, r3]
    daq_enable(self, 1);
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff fcca 	bl	8005240 <daq_enable>
}
 80058ac:	b009      	add	sp, #36	; 0x24
 80058ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (self->mode == LA)
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d198      	bne.n	80057e6 <daq_mode_set+0x2e>
        daq_settings_save(&self->set, &self->trig.set, &self->save_l, &self->trig.save_l);
 80058b4:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
 80058b8:	f500 520f 	add.w	r2, r0, #9152	; 0x23c0
 80058bc:	3338      	adds	r3, #56	; 0x38
 80058be:	322c      	adds	r2, #44	; 0x2c
 80058c0:	e789      	b.n	80057d6 <daq_mode_set+0x1e>
    else if (mode == VM)
 80058c2:	2e01      	cmp	r6, #1
 80058c4:	d123      	bne.n	800590e <daq_mode_set+0x156>
        LL_GPIO_Init(PS_DAQ_PORT, &GPIO_InitStruct);
 80058c6:	a903      	add	r1, sp, #12
 80058c8:	4831      	ldr	r0, [pc, #196]	; (8005990 <daq_mode_set+0x1d8>)
 80058ca:	f7fc fff7 	bl	80028bc <LL_GPIO_Init>
        daq_ch_set(self, 1, 1, 1, 1, PS_VM_FS);
 80058ce:	4f31      	ldr	r7, [pc, #196]	; (8005994 <daq_mode_set+0x1dc>)
        daq_mem_set(self, 3); // safety guard
 80058d0:	4629      	mov	r1, r5
 80058d2:	4620      	mov	r0, r4
 80058d4:	f7ff fd46 	bl	8005364 <daq_mem_set>
        daq_bit_set(self, B12);
 80058d8:	210c      	movs	r1, #12
 80058da:	4620      	mov	r0, r4
 80058dc:	f7ff fde0 	bl	80054a0 <daq_bit_set>
        daq_ch_set(self, 1, 1, 1, 1, PS_VM_FS);
 80058e0:	4633      	mov	r3, r6
 80058e2:	4632      	mov	r2, r6
 80058e4:	4631      	mov	r1, r6
 80058e6:	9701      	str	r7, [sp, #4]
 80058e8:	9600      	str	r6, [sp, #0]
 80058ea:	4620      	mov	r0, r4
 80058ec:	f7ff fe98 	bl	8005620 <daq_ch_set>
        daq_mem_set(self, PS_VM_MEM);
 80058f0:	21c8      	movs	r1, #200	; 0xc8
 80058f2:	4620      	mov	r0, r4
 80058f4:	f7ff fd36 	bl	8005364 <daq_mem_set>
        daq_fs_set(self, PS_VM_FS);
 80058f8:	4639      	mov	r1, r7
 80058fa:	4620      	mov	r0, r4
 80058fc:	f7ff fe16 	bl	800552c <daq_fs_set>
        daq_trig_set(self, 0, 0, RISING, DISABLED, 50);
 8005900:	2332      	movs	r3, #50	; 0x32
 8005902:	e9cd 5300 	strd	r5, r3, [sp]
 8005906:	2300      	movs	r3, #0
 8005908:	461a      	mov	r2, r3
 800590a:	4619      	mov	r1, r3
 800590c:	e7c3      	b.n	8005896 <daq_mode_set+0xde>
        GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING; //LL_GPIO_MODE_INPUT;
 800590e:	2304      	movs	r3, #4
        LL_GPIO_Init(PS_DAQ_PORT, &GPIO_InitStruct);
 8005910:	a903      	add	r1, sp, #12
 8005912:	481f      	ldr	r0, [pc, #124]	; (8005990 <daq_mode_set+0x1d8>)
        GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING; //LL_GPIO_MODE_INPUT;
 8005914:	9304      	str	r3, [sp, #16]
        LL_GPIO_Init(PS_DAQ_PORT, &GPIO_InitStruct);
 8005916:	f7fc ffd1 	bl	80028bc <LL_GPIO_Init>
        daq_mem_set(self, 3); // safety guard
 800591a:	4629      	mov	r1, r5
 800591c:	4620      	mov	r0, r4
 800591e:	f7ff fd21 	bl	8005364 <daq_mem_set>
        daq_bit_set(self, self->save_l.bits);
 8005922:	f242 33f6 	movw	r3, #9206	; 0x23f6
        daq_ch_set(self, self->save_l.ch1_en, self->save_l.ch2_en, self->save_l.ch3_en, self->save_l.ch4_en, self->save_l.fs);
 8005926:	f242 35f0 	movw	r5, #9200	; 0x23f0
        daq_bit_set(self, self->save_l.bits);
 800592a:	5ce1      	ldrb	r1, [r4, r3]
 800592c:	4620      	mov	r0, r4
 800592e:	f7ff fdb7 	bl	80054a0 <daq_bit_set>
        daq_ch_set(self, self->save_l.ch1_en, self->save_l.ch2_en, self->save_l.ch3_en, self->save_l.ch4_en, self->save_l.fs);
 8005932:	5960      	ldr	r0, [r4, r5]
 8005934:	f242 33ee 	movw	r3, #9198	; 0x23ee
 8005938:	9001      	str	r0, [sp, #4]
 800593a:	f242 30ef 	movw	r0, #9199	; 0x23ef
 800593e:	f242 32ed 	movw	r2, #9197	; 0x23ed
 8005942:	f242 31ec 	movw	r1, #9196	; 0x23ec
 8005946:	5c20      	ldrb	r0, [r4, r0]
 8005948:	5ca2      	ldrb	r2, [r4, r2]
 800594a:	5ce3      	ldrb	r3, [r4, r3]
 800594c:	5c61      	ldrb	r1, [r4, r1]
 800594e:	9000      	str	r0, [sp, #0]
 8005950:	4620      	mov	r0, r4
 8005952:	f7ff fe65 	bl	8005620 <daq_ch_set>
        daq_fs_set(self, self->save_l.fs);
 8005956:	5961      	ldr	r1, [r4, r5]
 8005958:	4620      	mov	r0, r4
 800595a:	f7ff fde7 	bl	800552c <daq_fs_set>
        daq_mem_set(self, self->save_l.mem);
 800595e:	f242 33f4 	movw	r3, #9204	; 0x23f4
 8005962:	4620      	mov	r0, r4
 8005964:	5ae1      	ldrh	r1, [r4, r3]
 8005966:	f7ff fcfd 	bl	8005364 <daq_mem_set>
        daq_trig_set(self, self->trig.save_l.ch, self->trig.save_l.val, self->trig.save_l.edge,
 800596a:	f242 4038 	movw	r0, #9272	; 0x2438
 800596e:	5820      	ldr	r0, [r4, r0]
 8005970:	f242 433d 	movw	r3, #9277	; 0x243d
 8005974:	9001      	str	r0, [sp, #4]
 8005976:	f242 403c 	movw	r0, #9276	; 0x243c
 800597a:	f242 4244 	movw	r2, #9284	; 0x2444
 800597e:	5c20      	ldrb	r0, [r4, r0]
 8005980:	f504 5111 	add.w	r1, r4, #9280	; 0x2440
 8005984:	9000      	str	r0, [sp, #0]
 8005986:	5ce3      	ldrb	r3, [r4, r3]
 8005988:	5ca2      	ldrb	r2, [r4, r2]
 800598a:	6809      	ldr	r1, [r1, #0]
 800598c:	e783      	b.n	8005896 <daq_mode_set+0xde>
 800598e:	bf00      	nop
 8005990:	40010800 	.word	0x40010800
 8005994:	42c80000 	.word	0x42c80000

08005998 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005998:	2800      	cmp	r0, #0
 800599a:	db0d      	blt.n	80059b8 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800599c:	2201      	movs	r2, #1
 800599e:	0943      	lsrs	r3, r0, #5
 80059a0:	f000 001f 	and.w	r0, r0, #31
 80059a4:	fa02 f000 	lsl.w	r0, r2, r0
 80059a8:	4a04      	ldr	r2, [pc, #16]	; (80059bc <__NVIC_DisableIRQ+0x24>)
 80059aa:	3320      	adds	r3, #32
 80059ac:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80059b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80059b4:	f3bf 8f6f 	isb	sy
}
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	e000e100 	.word	0xe000e100

080059c0 <daq_trig_init>:
    self->trig.pos_trig = 0;
    self->trig.pos_last = 0;
    self->trig.pos_diff = 0;
    self->trig.uwtick_first = 0;
    self->trig.pretrig_cntr = 0;
    self->trig.is_post = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f242 424c 	movw	r2, #9292	; 0x244c
 80059c6:	5083      	str	r3, [r0, r2]
    self->trig.dma_ch_trig = PS_DMA_CH_ADC1;
    self->trig.exti_trig = PS_LA_IRQ_EXTI1;
    self->trig.adc_trig = ADC1;
    self->trig.dma_trig = PS_DMA_ADC1;
    self->trig.order = 0;
    self->trig.ready_last = 0;
 80059c8:	f242 4250 	movw	r2, #9296	; 0x2450
 80059cc:	5083      	str	r3, [r0, r2]
    self->trig.cntr = 0;
 80059ce:	f242 4254 	movw	r2, #9300	; 0x2454
 80059d2:	5083      	str	r3, [r0, r2]
    self->trig.all_cntr = 0;
 80059d4:	f242 4258 	movw	r2, #9304	; 0x2458
 80059d8:	5083      	str	r3, [r0, r2]
    self->trig.pos_frst = 0;
 80059da:	f242 425c 	movw	r2, #9308	; 0x245c
 80059de:	5083      	str	r3, [r0, r2]
    self->trig.pos_trig = 0;
 80059e0:	f242 4260 	movw	r2, #9312	; 0x2460
 80059e4:	5083      	str	r3, [r0, r2]
    self->trig.pos_last = 0;
 80059e6:	f242 4264 	movw	r2, #9316	; 0x2464
 80059ea:	5083      	str	r3, [r0, r2]
    self->trig.pos_diff = 0;
 80059ec:	f242 4268 	movw	r2, #9320	; 0x2468
 80059f0:	5083      	str	r3, [r0, r2]
    self->trig.uwtick_first = 0;
 80059f2:	f242 426c 	movw	r2, #9324	; 0x246c
 80059f6:	5083      	str	r3, [r0, r2]
    self->trig.pretrig_cntr = 0;
 80059f8:	f242 4270 	movw	r2, #9328	; 0x2470
 80059fc:	5083      	str	r3, [r0, r2]
    self->trig.pretrig_val = 0;
 80059fe:	f242 4274 	movw	r2, #9332	; 0x2474
 8005a02:	5083      	str	r3, [r0, r2]
    self->trig.auttrig_val = 0;
 8005a04:	f242 4278 	movw	r2, #9336	; 0x2478
 8005a08:	5083      	str	r3, [r0, r2]
    self->trig.posttrig_size = 0;
 8005a0a:	f242 427c 	movw	r2, #9340	; 0x247c
 8005a0e:	5083      	str	r3, [r0, r2]
    self->trig.fullmem_val = 0;
 8005a10:	f500 5212 	add.w	r2, r0, #9344	; 0x2480
 8005a14:	6013      	str	r3, [r2, #0]
    self->trig.awd_trig = 0;
 8005a16:	f242 4284 	movw	r2, #9348	; 0x2484
    self->trig.buff_trig = NULL;
 8005a1a:	2101      	movs	r1, #1
    self->trig.awd_trig = 0;
 8005a1c:	5083      	str	r3, [r0, r2]
    self->trig.buff_trig = NULL;
 8005a1e:	f242 4288 	movw	r2, #9352	; 0x2488
 8005a22:	5081      	str	r1, [r0, r2]
    self->trig.dma_ch_trig = PS_DMA_CH_ADC1;
 8005a24:	f242 428c 	movw	r2, #9356	; 0x248c
 8005a28:	4909      	ldr	r1, [pc, #36]	; (8005a50 <daq_trig_init+0x90>)
 8005a2a:	5081      	str	r1, [r0, r2]
    self->trig.dma_trig = PS_DMA_ADC1;
 8005a2c:	f242 4290 	movw	r2, #9360	; 0x2490
 8005a30:	2107      	movs	r1, #7
 8005a32:	5081      	str	r1, [r0, r2]
    self->trig.exti_trig = PS_LA_IRQ_EXTI1;
 8005a34:	f242 4294 	movw	r2, #9364	; 0x2494
 8005a38:	4906      	ldr	r1, [pc, #24]	; (8005a54 <daq_trig_init+0x94>)
 8005a3a:	5081      	str	r1, [r0, r2]
    self->trig.adc_trig = ADC1;
 8005a3c:	f242 4298 	movw	r2, #9368	; 0x2498
 8005a40:	5083      	str	r3, [r0, r2]
    self->trig.order = 0;
 8005a42:	f242 429c 	movw	r2, #9372	; 0x249c
 8005a46:	5083      	str	r3, [r0, r2]
    self->trig.post_start = 0;
 8005a48:	f242 42a0 	movw	r2, #9376	; 0x24a0
 8005a4c:	5083      	str	r3, [r0, r2]
    self->trig.post_from = 0;
}
 8005a4e:	4770      	bx	lr
 8005a50:	40020000 	.word	0x40020000
 8005a54:	40012400 	.word	0x40012400

08005a58 <daq_trig_check>:

void daq_trig_check(daq_data_t* self)
{
 8005a58:	b538      	push	{r3, r4, r5, lr}
    if (self->enabled) // check pre trigger
 8005a5a:	f242 430a 	movw	r3, #9226	; 0x240a
 8005a5e:	5cc3      	ldrb	r3, [r0, r3]
{
 8005a60:	4604      	mov	r4, r0
    if (self->enabled) // check pre trigger
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d077      	beq.n	8005b56 <daq_trig_check+0xfe>
    {
        self->trig.pretrig_cntr = uwTick - self->trig.uwtick_first;
 8005a66:	f242 4268 	movw	r2, #9320	; 0x2468
 8005a6a:	4b48      	ldr	r3, [pc, #288]	; (8005b8c <daq_trig_check+0x134>)
 8005a6c:	5882      	ldr	r2, [r0, r2]
 8005a6e:	681b      	ldr	r3, [r3, #0]
        if (self->trig.pretrig_cntr < 0)
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	f242 426c 	movw	r2, #9324	; 0x246c
            self->trig.pretrig_cntr += PS_UWTICK_MAX;
 8005a76:	bf48      	it	mi
 8005a78:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005a7c:	5083      	str	r3, [r0, r2]

        if (self->trig.pretrig_cntr > self->trig.pretrig_val && self->trig.set.mode != DISABLED)
 8005a7e:	f242 4370 	movw	r3, #9328	; 0x2470
 8005a82:	5882      	ldr	r2, [r0, r2]
 8005a84:	58c3      	ldr	r3, [r0, r3]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	dd19      	ble.n	8005abe <daq_trig_check+0x66>
 8005a8a:	f242 4314 	movw	r3, #9236	; 0x2414
 8005a8e:	5cc3      	ldrb	r3, [r0, r3]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d014      	beq.n	8005abe <daq_trig_check+0x66>
        {
            if (self->mode == SCOPE)
 8005a94:	f242 4308 	movw	r3, #9224	; 0x2408
 8005a98:	5cc3      	ldrb	r3, [r0, r3]
 8005a9a:	b983      	cbnz	r3, 8005abe <daq_trig_check+0x66>
            {
                ASSERT(self->trig.awd_trig != 0);
 8005a9c:	f500 5512 	add.w	r5, r0, #9344	; 0x2480
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b91b      	cbnz	r3, 8005aac <daq_trig_check+0x54>
 8005aa4:	2141      	movs	r1, #65	; 0x41
 8005aa6:	483a      	ldr	r0, [pc, #232]	; (8005b90 <daq_trig_check+0x138>)
 8005aa8:	f001 fee8 	bl	800787c <assert2>
                LL_ADC_SetAnalogWDMonitChannels(self->trig.adc_trig, self->trig.awd_trig);
 8005aac:	f242 4394 	movw	r3, #9364	; 0x2494
 8005ab0:	58e2      	ldr	r2, [r4, r3]
 8005ab2:	4b38      	ldr	r3, [pc, #224]	; (8005b94 <daq_trig_check+0x13c>)
 8005ab4:	6851      	ldr	r1, [r2, #4]
 8005ab6:	400b      	ands	r3, r1
 8005ab8:	6829      	ldr	r1, [r5, #0]
 8005aba:	430b      	orrs	r3, r1
 8005abc:	6053      	str	r3, [r2, #4]
    else
    {
        self->trig.pretrig_cntr = 0;
    }

    if (self->mode != VM) // auto trigger
 8005abe:	f242 4308 	movw	r3, #9224	; 0x2408
 8005ac2:	5ce3      	ldrb	r3, [r4, r3]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d03f      	beq.n	8005b48 <daq_trig_check+0xf0>
    {
        if (self->enabled &&
 8005ac8:	f242 420a 	movw	r2, #9226	; 0x240a
 8005acc:	f242 4314 	movw	r3, #9236	; 0x2414
 8005ad0:	5ca2      	ldrb	r2, [r4, r2]
 8005ad2:	5ce3      	ldrb	r3, [r4, r3]
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	d042      	beq.n	8005b5e <daq_trig_check+0x106>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d140      	bne.n	8005b5e <daq_trig_check+0x106>
            self->trig.set.mode == AUTO &&
            self->trig.is_post == 0 &&
 8005adc:	f504 5310 	add.w	r3, r4, #9216	; 0x2400
 8005ae0:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8005ae2:	f015 15ff 	ands.w	r5, r5, #16711935	; 0xff00ff
 8005ae6:	d12f      	bne.n	8005b48 <daq_trig_check+0xf0>
            self->trig.ready == 0 &&
 8005ae8:	f242 436c 	movw	r3, #9324	; 0x246c
 8005aec:	58e2      	ldr	r2, [r4, r3]
 8005aee:	f242 4374 	movw	r3, #9332	; 0x2474
 8005af2:	58e3      	ldr	r3, [r4, r3]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	dd27      	ble.n	8005b48 <daq_trig_check+0xf0>
            self->trig.pretrig_cntr > self->trig.auttrig_val)
        {
            daq_enable(self, 0);
 8005af8:	4629      	mov	r1, r5
 8005afa:	4620      	mov	r0, r4
 8005afc:	f7ff fba0 	bl	8005240 <daq_enable>
            self->trig.pos_frst = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_ch_trig, self->trig.dma_trig);
 8005b00:	f242 4384 	movw	r3, #9348	; 0x2484
 8005b04:	58e3      	ldr	r3, [r4, r3]
 8005b06:	88d9      	ldrh	r1, [r3, #6]
 8005b08:	f242 4388 	movw	r3, #9352	; 0x2488
 8005b0c:	58e2      	ldr	r2, [r4, r3]
 8005b0e:	4b22      	ldr	r3, [pc, #136]	; (8005b98 <daq_trig_check+0x140>)
 8005b10:	4413      	add	r3, r2
 8005b12:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8005b16:	f242 438c 	movw	r3, #9356	; 0x248c
 8005b1a:	58e3      	ldr	r3, [r4, r3]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	6858      	ldr	r0, [r3, #4]
 8005b20:	b280      	uxth	r0, r0
 8005b22:	1a08      	subs	r0, r1, r0
 8005b24:	f001 ff90 	bl	8007a48 <get_last_circ_idx>
 8005b28:	f242 4358 	movw	r3, #9304	; 0x2458

            self->trig.ready = 1;
 8005b2c:	2201      	movs	r2, #1
            self->trig.pos_frst = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_ch_trig, self->trig.dma_trig);
 8005b2e:	50e0      	str	r0, [r4, r3]
            self->trig.ready = 1;
 8005b30:	f242 434e 	movw	r3, #9294	; 0x244e
 8005b34:	54e2      	strb	r2, [r4, r3]
            self->trig.is_post = 0;
 8005b36:	f242 434c 	movw	r3, #9292	; 0x244c

            comm_respond(comm_ptr, PS_RESP_RDY_A, 10);
 8005b3a:	220a      	movs	r2, #10
 8005b3c:	4917      	ldr	r1, [pc, #92]	; (8005b9c <daq_trig_check+0x144>)
            self->trig.is_post = 0;
 8005b3e:	54e5      	strb	r5, [r4, r3]
        else if (self->trig.set.mode == DISABLED &&  // trigger is disabled
                 self->trig.pretrig_cntr > self->trig.fullmem_val)
        {
            self->trig.ready = 1;
            if (self->trig.ready_last == 0)
                comm_respond(comm_ptr, PS_RESP_RDY_D, 10);
 8005b40:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <daq_trig_check+0x148>)
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	f7ff f956 	bl	8004df4 <comm_respond>
        }
    }
    self->trig.ready_last = self->trig.ready;
 8005b48:	f242 434e 	movw	r3, #9294	; 0x244e
 8005b4c:	5ce2      	ldrb	r2, [r4, r3]
 8005b4e:	f242 434f 	movw	r3, #9295	; 0x244f
 8005b52:	54e2      	strb	r2, [r4, r3]
}
 8005b54:	bd38      	pop	{r3, r4, r5, pc}
        self->trig.pretrig_cntr = 0;
 8005b56:	f242 426c 	movw	r2, #9324	; 0x246c
 8005b5a:	5083      	str	r3, [r0, r2]
 8005b5c:	e7af      	b.n	8005abe <daq_trig_check+0x66>
        else if (self->trig.set.mode == DISABLED &&  // trigger is disabled
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d1f2      	bne.n	8005b48 <daq_trig_check+0xf0>
 8005b62:	f242 436c 	movw	r3, #9324	; 0x246c
 8005b66:	58e2      	ldr	r2, [r4, r3]
 8005b68:	f242 437c 	movw	r3, #9340	; 0x247c
 8005b6c:	58e3      	ldr	r3, [r4, r3]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	ddea      	ble.n	8005b48 <daq_trig_check+0xf0>
            self->trig.ready = 1;
 8005b72:	f242 434e 	movw	r3, #9294	; 0x244e
 8005b76:	2201      	movs	r2, #1
 8005b78:	54e2      	strb	r2, [r4, r3]
            if (self->trig.ready_last == 0)
 8005b7a:	f242 434f 	movw	r3, #9295	; 0x244f
 8005b7e:	5ce3      	ldrb	r3, [r4, r3]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e1      	bne.n	8005b48 <daq_trig_check+0xf0>
                comm_respond(comm_ptr, PS_RESP_RDY_D, 10);
 8005b84:	220a      	movs	r2, #10
 8005b86:	4907      	ldr	r1, [pc, #28]	; (8005ba4 <daq_trig_check+0x14c>)
 8005b88:	e7da      	b.n	8005b40 <daq_trig_check+0xe8>
 8005b8a:	bf00      	nop
 8005b8c:	20000804 	.word	0x20000804
 8005b90:	0800c930 	.word	0x0800c930
 8005b94:	ff3ffde0 	.word	0xff3ffde0
 8005b98:	0800c929 	.word	0x0800c929
 8005b9c:	0800c960 	.word	0x0800c960
 8005ba0:	20000800 	.word	0x20000800
 8005ba4:	0800c96b 	.word	0x0800c96b

08005ba8 <daq_trig_poststart>:
}


void daq_trig_poststart(daq_data_t* self, int pos)
{
    self->trig.post_start = 1;
 8005ba8:	f242 439c 	movw	r3, #9372	; 0x249c
 8005bac:	2201      	movs	r2, #1
{
 8005bae:	b513      	push	{r0, r1, r4, lr}
    self->trig.post_start = 1;
 8005bb0:	50c2      	str	r2, [r0, r3]
    self->trig.post_from = pos;
 8005bb2:	f242 43a0 	movw	r3, #9376	; 0x24a0
 8005bb6:	50c1      	str	r1, [r0, r3]

    if (self->mode != LA)
 8005bb8:	f242 4308 	movw	r3, #9224	; 0x2408
 8005bbc:	5cc3      	ldrb	r3, [r0, r3]
{
 8005bbe:	4604      	mov	r4, r0
    if (self->mode != LA)
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d021      	beq.n	8005c08 <daq_trig_poststart+0x60>
 8005bc4:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <daq_trig_poststart+0x6c>)
 8005bc6:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <daq_trig_poststart+0x70>)
 8005bc8:	6851      	ldr	r1, [r2, #4]
 8005bca:	400b      	ands	r3, r1
 8005bcc:	6053      	str	r3, [r2, #4]
    else
    {
        NVIC_DisableIRQ(self->trig.exti_trig);
    }

    self->trig.pretrig_cntr = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f242 426c 	movw	r2, #9324	; 0x246c

    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8005bd4:	a902      	add	r1, sp, #8
    self->trig.pretrig_cntr = 0;
 8005bd6:	50a3      	str	r3, [r4, r2]
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8005bd8:	f841 3d04 	str.w	r3, [r1, #-4]!
    ASSERT(xSemaphoreGiveFromISR(sem2_trig, &xHigherPriorityTaskWoken) == pdPASS);
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <daq_trig_poststart+0x74>)
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	f004 f865 	bl	8009cae <xQueueGiveFromISR>
 8005be4:	2801      	cmp	r0, #1
 8005be6:	d003      	beq.n	8005bf0 <daq_trig_poststart+0x48>
 8005be8:	21da      	movs	r1, #218	; 0xda
 8005bea:	480d      	ldr	r0, [pc, #52]	; (8005c20 <daq_trig_poststart+0x78>)
 8005bec:	f001 fe46 	bl	800787c <assert2>
    if (xHigherPriorityTaskWoken != pdFALSE)
 8005bf0:	9b01      	ldr	r3, [sp, #4]
 8005bf2:	b13b      	cbz	r3, 8005c04 <daq_trig_poststart+0x5c>
        portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8005bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <daq_trig_poststart+0x7c>)
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	f3bf 8f6f 	isb	sy
}
 8005c04:	b002      	add	sp, #8
 8005c06:	bd10      	pop	{r4, pc}
        NVIC_DisableIRQ(self->trig.exti_trig);
 8005c08:	f242 4390 	movw	r3, #9360	; 0x2490
 8005c0c:	56c0      	ldrsb	r0, [r0, r3]
 8005c0e:	f7ff fec3 	bl	8005998 <__NVIC_DisableIRQ>
 8005c12:	e7dc      	b.n	8005bce <daq_trig_poststart+0x26>
 8005c14:	40012400 	.word	0x40012400
 8005c18:	ff3ffde0 	.word	0xff3ffde0
 8005c1c:	20003128 	.word	0x20003128
 8005c20:	0800c930 	.word	0x0800c930
 8005c24:	e000ed04 	.word	0xe000ed04

08005c28 <daq_trig_trigger_scope>:
{
 8005c28:	b538      	push	{r3, r4, r5, lr}
    ASSERT(self->trig.buff_trig != NULL);
 8005c2a:	f242 4384 	movw	r3, #9348	; 0x2484
 8005c2e:	58c3      	ldr	r3, [r0, r3]
{
 8005c30:	4604      	mov	r4, r0
    ASSERT(self->trig.buff_trig != NULL);
 8005c32:	b91b      	cbnz	r3, 8005c3c <daq_trig_trigger_scope+0x14>
 8005c34:	2171      	movs	r1, #113	; 0x71
 8005c36:	483c      	ldr	r0, [pc, #240]	; (8005d28 <daq_trig_trigger_scope+0x100>)
 8005c38:	f001 fe20 	bl	800787c <assert2>
    ASSERT(self->trig.dma_ch_trig != 0);
 8005c3c:	f242 4388 	movw	r3, #9352	; 0x2488
 8005c40:	58e3      	ldr	r3, [r4, r3]
 8005c42:	b91b      	cbnz	r3, 8005c4c <daq_trig_trigger_scope+0x24>
 8005c44:	2172      	movs	r1, #114	; 0x72
 8005c46:	4838      	ldr	r0, [pc, #224]	; (8005d28 <daq_trig_trigger_scope+0x100>)
 8005c48:	f001 fe18 	bl	800787c <assert2>
    int last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_ch_trig, self->trig.dma_trig);
 8005c4c:	f242 4584 	movw	r5, #9348	; 0x2484
 8005c50:	5963      	ldr	r3, [r4, r5]
 8005c52:	88d9      	ldrh	r1, [r3, #6]
 8005c54:	f242 4388 	movw	r3, #9352	; 0x2488
 8005c58:	58e2      	ldr	r2, [r4, r3]
 8005c5a:	4b34      	ldr	r3, [pc, #208]	; (8005d2c <daq_trig_trigger_scope+0x104>)
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8005c62:	f242 438c 	movw	r3, #9356	; 0x248c
 8005c66:	58e3      	ldr	r3, [r4, r3]
 8005c68:	4413      	add	r3, r2
 8005c6a:	6858      	ldr	r0, [r3, #4]
 8005c6c:	b280      	uxth	r0, r0
 8005c6e:	1a08      	subs	r0, r1, r0
 8005c70:	f001 feea 	bl	8007a48 <get_last_circ_idx>
    if (self->trig.ready || self->trig.post_start)
 8005c74:	f242 434e 	movw	r3, #9294	; 0x244e
 8005c78:	5ce3      	ldrb	r3, [r4, r3]
    int last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_ch_trig, self->trig.dma_trig);
 8005c7a:	4601      	mov	r1, r0
    if (self->trig.ready || self->trig.post_start)
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d134      	bne.n	8005cea <daq_trig_trigger_scope+0xc2>
 8005c80:	f242 439c 	movw	r3, #9372	; 0x249c
 8005c84:	58e3      	ldr	r3, [r4, r3]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d12f      	bne.n	8005cea <daq_trig_trigger_scope+0xc2>
    int prev_last_idx = last_idx - self->trig.buff_trig->chans;
 8005c8a:	5962      	ldr	r2, [r4, r5]
    self->trig.all_cntr++;
 8005c8c:	f242 4554 	movw	r5, #9300	; 0x2454
    int prev_last_idx = last_idx - self->trig.buff_trig->chans;
 8005c90:	8893      	ldrh	r3, [r2, #4]
    if (prev_last_idx < 0)
 8005c92:	1ac3      	subs	r3, r0, r3
        prev_last_idx += self->trig.buff_trig->len;
 8005c94:	bf48      	it	mi
 8005c96:	88d0      	ldrhmi	r0, [r2, #6]
 8005c98:	6812      	ldr	r2, [r2, #0]
 8005c9a:	bf48      	it	mi
 8005c9c:	181b      	addmi	r3, r3, r0
    if (self->set.bits == B8)
 8005c9e:	f242 30de 	movw	r0, #9182	; 0x23de
 8005ca2:	5c20      	ldrb	r0, [r4, r0]
 8005ca4:	2808      	cmp	r0, #8
        last_val = (uint16_t)(((uint8_t*)(self->trig.buff_trig->data))[last_idx]);
 8005ca6:	bf07      	ittee	eq
 8005ca8:	5c50      	ldrbeq	r0, [r2, r1]
        prev_last_val = (uint16_t)(((uint8_t*)(self->trig.buff_trig->data))[prev_last_idx]);
 8005caa:	5cd3      	ldrbeq	r3, [r2, r3]
        last_val = (*((uint16_t*)(((uint8_t*)self->trig.buff_trig->data)+(last_idx*2))));
 8005cac:	f832 0011 	ldrhne.w	r0, [r2, r1, lsl #1]
        prev_last_val = (*((uint16_t*)(((uint8_t*)self->trig.buff_trig->data)+(prev_last_idx*2))));
 8005cb0:	f832 3013 	ldrhne.w	r3, [r2, r3, lsl #1]
    self->trig.all_cntr++;
 8005cb4:	5962      	ldr	r2, [r4, r5]
 8005cb6:	3201      	adds	r2, #1
 8005cb8:	5162      	str	r2, [r4, r5]
    if (self->trig.ignore)
 8005cba:	f242 424d 	movw	r2, #9293	; 0x244d
 8005cbe:	5ca5      	ldrb	r5, [r4, r2]
 8005cc0:	b1a5      	cbz	r5, 8005cec <daq_trig_trigger_scope+0xc4>
        self->trig.ignore = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	54a3      	strb	r3, [r4, r2]
            uint32_t h = LL_ADC_GetAnalogWDThresholds(self->trig.adc_trig, LL_ADC_AWD_THRESHOLD_HIGH);
 8005cc6:	f242 4394 	movw	r3, #9364	; 0x2494
 8005cca:	58e3      	ldr	r3, [r4, r3]
  MODIFY_REG(*preg,
 8005ccc:	4c18      	ldr	r4, [pc, #96]	; (8005d30 <daq_trig_trigger_scope+0x108>)
  return (uint32_t)(READ_BIT(*preg, ADC_HTR_HT));
 8005cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cd0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  MODIFY_REG(*preg,
 8005cd2:	6a58      	ldr	r0, [r3, #36]	; 0x24
  return (uint32_t)(READ_BIT(*preg, ADC_HTR_HT));
 8005cd4:	f3c1 010b 	ubfx	r1, r1, #0, #12
  MODIFY_REG(*preg,
 8005cd8:	4020      	ands	r0, r4
 8005cda:	4301      	orrs	r1, r0
 8005cdc:	6259      	str	r1, [r3, #36]	; 0x24
 8005cde:	6a99      	ldr	r1, [r3, #40]	; 0x28
  return (uint32_t)(READ_BIT(*preg, ADC_HTR_HT));
 8005ce0:	f3c2 020b 	ubfx	r2, r2, #0, #12
  MODIFY_REG(*preg,
 8005ce4:	4021      	ands	r1, r4
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005cea:	bd38      	pop	{r3, r4, r5, pc}
        if ((self->trig.set.edge == RISING && last_val > self->trig.set.val && prev_last_val <= self->trig.set.val) ||
 8005cec:	f242 4215 	movw	r2, #9237	; 0x2415
 8005cf0:	5ca2      	ldrb	r2, [r4, r2]
 8005cf2:	b95a      	cbnz	r2, 8005d0c <daq_trig_trigger_scope+0xe4>
 8005cf4:	f242 421c 	movw	r2, #9244	; 0x241c
 8005cf8:	58a2      	ldr	r2, [r4, r2]
 8005cfa:	4290      	cmp	r0, r2
 8005cfc:	dd0f      	ble.n	8005d1e <daq_trig_trigger_scope+0xf6>
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	db0d      	blt.n	8005d1e <daq_trig_trigger_scope+0xf6>
            daq_trig_poststart(self, last_idx);
 8005d02:	4620      	mov	r0, r4
}
 8005d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            daq_trig_poststart(self, last_idx);
 8005d08:	f7ff bf4e 	b.w	8005ba8 <daq_trig_poststart>
        if ((self->trig.set.edge == RISING && last_val > self->trig.set.val && prev_last_val <= self->trig.set.val) ||
 8005d0c:	2a01      	cmp	r2, #1
 8005d0e:	d106      	bne.n	8005d1e <daq_trig_trigger_scope+0xf6>
            (self->trig.set.edge == FALLING && last_val < self->trig.set.val && prev_last_val >= self->trig.set.val))
 8005d10:	f242 421c 	movw	r2, #9244	; 0x241c
 8005d14:	58a2      	ldr	r2, [r4, r2]
 8005d16:	4290      	cmp	r0, r2
 8005d18:	da01      	bge.n	8005d1e <daq_trig_trigger_scope+0xf6>
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	ddf1      	ble.n	8005d02 <daq_trig_trigger_scope+0xda>
            self->trig.ignore = 1;
 8005d1e:	f242 434d 	movw	r3, #9293	; 0x244d
 8005d22:	2201      	movs	r2, #1
 8005d24:	54e2      	strb	r2, [r4, r3]
 8005d26:	e7ce      	b.n	8005cc6 <daq_trig_trigger_scope+0x9e>
 8005d28:	0800c930 	.word	0x0800c930
 8005d2c:	0800c929 	.word	0x0800c929
 8005d30:	fffff000 	.word	0xfffff000

08005d34 <daq_trig_trigger_la>:
    ASSERT(self->trig.buff_trig != NULL);
 8005d34:	f242 4384 	movw	r3, #9348	; 0x2484
 8005d38:	58c3      	ldr	r3, [r0, r3]
{
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	4604      	mov	r4, r0
    ASSERT(self->trig.buff_trig != NULL);
 8005d3e:	b91b      	cbnz	r3, 8005d48 <daq_trig_trigger_la+0x14>
 8005d40:	21ae      	movs	r1, #174	; 0xae
 8005d42:	481b      	ldr	r0, [pc, #108]	; (8005db0 <daq_trig_trigger_la+0x7c>)
 8005d44:	f001 fd9a 	bl	800787c <assert2>
    ASSERT(self->trig.dma_ch_trig != 0);
 8005d48:	f242 4388 	movw	r3, #9352	; 0x2488
 8005d4c:	58e3      	ldr	r3, [r4, r3]
 8005d4e:	b91b      	cbnz	r3, 8005d58 <daq_trig_trigger_la+0x24>
 8005d50:	21af      	movs	r1, #175	; 0xaf
 8005d52:	4817      	ldr	r0, [pc, #92]	; (8005db0 <daq_trig_trigger_la+0x7c>)
 8005d54:	f001 fd92 	bl	800787c <assert2>
    int last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_ch_trig, PS_DMA_LA);
 8005d58:	f242 4384 	movw	r3, #9348	; 0x2484
 8005d5c:	58e3      	ldr	r3, [r4, r3]
 8005d5e:	88d9      	ldrh	r1, [r3, #6]
 8005d60:	f242 4388 	movw	r3, #9352	; 0x2488
 8005d64:	58e2      	ldr	r2, [r4, r3]
 8005d66:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <daq_trig_trigger_la+0x80>)
 8005d68:	4413      	add	r3, r2
 8005d6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005d6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d72:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005d76:	6858      	ldr	r0, [r3, #4]
 8005d78:	b280      	uxth	r0, r0
 8005d7a:	1a08      	subs	r0, r1, r0
 8005d7c:	f001 fe64 	bl	8007a48 <get_last_circ_idx>
    if (self->trig.ready || self->trig.post_start)
 8005d80:	f242 434e 	movw	r3, #9294	; 0x244e
 8005d84:	5ce3      	ldrb	r3, [r4, r3]
    int last_idx = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_ch_trig, PS_DMA_LA);
 8005d86:	4601      	mov	r1, r0
    if (self->trig.ready || self->trig.post_start)
 8005d88:	b983      	cbnz	r3, 8005dac <daq_trig_trigger_la+0x78>
 8005d8a:	f242 439c 	movw	r3, #9372	; 0x249c
 8005d8e:	58e3      	ldr	r3, [r4, r3]
 8005d90:	b963      	cbnz	r3, 8005dac <daq_trig_trigger_la+0x78>
    if (self->trig.pretrig_cntr > self->trig.pretrig_val)
 8005d92:	f242 436c 	movw	r3, #9324	; 0x246c
 8005d96:	58e2      	ldr	r2, [r4, r3]
 8005d98:	f242 4370 	movw	r3, #9328	; 0x2470
 8005d9c:	58e3      	ldr	r3, [r4, r3]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	dd04      	ble.n	8005dac <daq_trig_trigger_la+0x78>
        daq_trig_poststart(self, last_idx);
 8005da2:	4620      	mov	r0, r4
}
 8005da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        daq_trig_poststart(self, last_idx);
 8005da8:	f7ff befe 	b.w	8005ba8 <daq_trig_poststart>
}
 8005dac:	bd10      	pop	{r4, pc}
 8005dae:	bf00      	nop
 8005db0:	0800c930 	.word	0x0800c930
 8005db4:	0800c929 	.word	0x0800c929

08005db8 <daq_trig_postcount>:

volatile int timeout;

void daq_trig_postcount(daq_data_t* self)
{
 8005db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int last_idx = self->trig.post_from;
 8005dbc:	f242 43a0 	movw	r3, #9376	; 0x24a0
 8005dc0:	58c5      	ldr	r5, [r0, r3]

    ASSERT(self->trig.buff_trig != NULL);
 8005dc2:	f242 4384 	movw	r3, #9348	; 0x2484
 8005dc6:	58c3      	ldr	r3, [r0, r3]
{
 8005dc8:	4604      	mov	r4, r0
    ASSERT(self->trig.buff_trig != NULL);
 8005dca:	b91b      	cbnz	r3, 8005dd4 <daq_trig_postcount+0x1c>
 8005dcc:	21e5      	movs	r1, #229	; 0xe5
 8005dce:	485e      	ldr	r0, [pc, #376]	; (8005f48 <daq_trig_postcount+0x190>)
 8005dd0:	f001 fd54 	bl	800787c <assert2>

    self->trig.is_post = 1;
 8005dd4:	f242 434c 	movw	r3, #9292	; 0x244c
 8005dd8:	2201      	movs	r2, #1
 8005dda:	54e2      	strb	r2, [r4, r3]
    self->trig.cntr++;
 8005ddc:	f242 4250 	movw	r2, #9296	; 0x2450
 8005de0:	58a3      	ldr	r3, [r4, r2]
 8005de2:	3301      	adds	r3, #1
 8005de4:	50a3      	str	r3, [r4, r2]
 8005de6:	f242 33dc 	movw	r3, #9180	; 0x23dc
 8005dea:	5ae6      	ldrh	r6, [r4, r3]
 8005dec:	f242 4310 	movw	r3, #9232	; 0x2410
 8005df0:	58e0      	ldr	r0, [r4, r3]
 8005df2:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
 8005df6:	f7fa ff5b 	bl	8000cb0 <__aeabi_i2f>
 8005dfa:	f7fa fb1f 	bl	800043c <__aeabi_f2d>
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4b52      	ldr	r3, [pc, #328]	; (8005f4c <daq_trig_postcount+0x194>)
 8005e02:	f7fa fc9d 	bl	8000740 <__aeabi_ddiv>
 8005e06:	4680      	mov	r8, r0
 8005e08:	4630      	mov	r0, r6
 8005e0a:	4689      	mov	r9, r1
 8005e0c:	f7fa ff4c 	bl	8000ca8 <__aeabi_ui2f>
 8005e10:	f7fa fb14 	bl	800043c <__aeabi_f2d>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4640      	mov	r0, r8
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	f7fa fb66 	bl	80004ec <__aeabi_dmul>
 8005e20:	f7fa fe14 	bl	8000a4c <__aeabi_d2iz>
 8005e24:	f242 4384 	movw	r3, #9348	; 0x2484
 8005e28:	58e7      	ldr	r7, [r4, r3]

    if (self->mode == SCOPE)
 8005e2a:	f242 4308 	movw	r3, #9224	; 0x2408
 8005e2e:	5ce3      	ldrb	r3, [r4, r3]
 8005e30:	f242 425c 	movw	r2, #9308	; 0x245c
 8005e34:	88f9      	ldrh	r1, [r7, #6]
 8005e36:	1a36      	subs	r6, r6, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d174      	bne.n	8005f26 <daq_trig_postcount+0x16e>
    {
        self->trig.pos_trig = last_idx + self->trig.order;
 8005e3c:	f242 4398 	movw	r3, #9368	; 0x2498
 8005e40:	58e3      	ldr	r3, [r4, r3]
 8005e42:	441d      	add	r5, r3
        if (self->trig.pos_trig >= self->trig.buff_trig->len)
            self->trig.pos_trig -= self->trig.buff_trig->len;

        int post = (int)((float)self->set.mem * ((float)(100 - self->trig.set.pretrigger) / 100.0));
        self->trig.posttrig_size = post * self->trig.buff_trig->chans;
 8005e44:	f242 4378 	movw	r3, #9336	; 0x2478
        if (self->trig.pos_trig >= self->trig.buff_trig->len)
 8005e48:	428d      	cmp	r5, r1
        self->trig.pos_trig = last_idx + self->trig.order;
 8005e4a:	50a5      	str	r5, [r4, r2]
            self->trig.pos_trig -= self->trig.buff_trig->len;
 8005e4c:	bfa4      	itt	ge
 8005e4e:	1a6d      	subge	r5, r5, r1
 8005e50:	50a5      	strge	r5, [r4, r2]
        self->trig.posttrig_size = post * self->trig.buff_trig->chans;
 8005e52:	88bd      	ldrh	r5, [r7, #4]
 8005e54:	fb00 f205 	mul.w	r2, r0, r5
 8005e58:	50e2      	str	r2, [r4, r3]

        self->trig.pos_last = self->trig.pos_trig + self->trig.posttrig_size;
 8005e5a:	f242 435c 	movw	r3, #9308	; 0x245c
 8005e5e:	f242 4060 	movw	r0, #9312	; 0x2460
 8005e62:	58e3      	ldr	r3, [r4, r3]
 8005e64:	441a      	add	r2, r3
        if (self->trig.pos_last >= self->trig.buff_trig->len)
 8005e66:	4291      	cmp	r1, r2
            self->trig.pos_last -= self->trig.buff_trig->len;
 8005e68:	bfd8      	it	le
 8005e6a:	1a52      	suble	r2, r2, r1
 8005e6c:	5022      	str	r2, [r4, r0]

        self->trig.pos_frst = self->trig.pos_trig - ((self->set.mem - post + 1) * self->trig.buff_trig->chans) + 1;
 8005e6e:	fb06 5005 	mla	r0, r6, r5, r5
 8005e72:	1a18      	subs	r0, r3, r0
        //if (self->trig.pos_frst >= self->trig.buff_trig->len)
        //    self->trig.pos_frst -= self->trig.buff_trig->len;
        if (self->trig.pos_frst < 0)
 8005e74:	3001      	adds	r0, #1
 8005e76:	f242 4358 	movw	r3, #9304	; 0x2458
 8005e7a:	d462      	bmi.n	8005f42 <daq_trig_postcount+0x18a>
        if (self->trig.pos_last >= self->trig.buff_trig->len)
            self->trig.pos_last -= self->trig.buff_trig->len;

        self->trig.pos_frst = self->trig.pos_trig - (self->set.mem - self->trig.posttrig_size) + 1; // +1 ??
        if (self->trig.pos_frst < 0)
            self->trig.pos_frst += self->trig.buff_trig->len;
 8005e7c:	50e0      	str	r0, [r4, r3]
    }

    int pos_last_len = self->trig.buff_trig->len - self->trig.pos_last;  // DMA len of last valid point to compare
 8005e7e:	f242 4360 	movw	r3, #9312	; 0x2460
 8005e82:	58e3      	ldr	r3, [r4, r3]
    //int uwTick_frist = uwTick;
    //timeout = (int)(((float)self->trig.posttrig_size + PS_MEM_RESERVE) * (1.0 / self->set.fs) * 1000.0);
    //if (timeout < 1)
    //    timeout = 1;

    int target_prev = -1;
 8005e84:	f04f 36ff 	mov.w	r6, #4294967295
    int pos_last_len = self->trig.buff_trig->len - self->trig.pos_last;  // DMA len of last valid point to compare
 8005e88:	1ac9      	subs	r1, r1, r3
 8005e8a:	f242 4388 	movw	r3, #9352	; 0x2488
 8005e8e:	58e2      	ldr	r2, [r4, r3]
 8005e90:	4b2f      	ldr	r3, [pc, #188]	; (8005f50 <daq_trig_postcount+0x198>)
 8005e92:	f64a 2caa 	movw	ip, #43690	; 0xaaaa
 8005e96:	4413      	add	r3, r2
        //if (uwTick_diff < 0)
        //    uwTick_diff += PS_UWTICK_MAX;

        // 15 instructions worst case
        // Cortex M3 - 1.25 IPC per core -> 72/(15/1.25) = 6 MHz max
        int target = LL_DMA_GetDataLength(self->trig.dma_trig, self->trig.dma_ch_trig); // 6
 8005e98:	f242 428c 	movw	r2, #9356	; 0x248c
 8005e9c:	58a5      	ldr	r5, [r4, r2]
    int dma_changes = 0;
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
        if (target != target_prev)
            dma_changes++;
        target_prev = target;

        if (target == pos_last_len || dma_changes == self->trig.posttrig_size)// || uwTick_diff > timeout) // 5
 8005ea4:	f504 5011 	add.w	r0, r4, #9280	; 0x2440
 8005ea8:	4f2a      	ldr	r7, [pc, #168]	; (8005f54 <daq_trig_postcount+0x19c>)
 8005eaa:	441d      	add	r5, r3
 8005eac:	3038      	adds	r0, #56	; 0x38
 8005eae:	f8c7 c000 	str.w	ip, [r7]
 8005eb2:	686b      	ldr	r3, [r5, #4]
 8005eb4:	b29b      	uxth	r3, r3
        if (target != target_prev)
 8005eb6:	429e      	cmp	r6, r3
            dma_changes++;
 8005eb8:	bf18      	it	ne
 8005eba:	3201      	addne	r2, #1
        if (target == pos_last_len || dma_changes == self->trig.posttrig_size)// || uwTick_diff > timeout) // 5
 8005ebc:	4299      	cmp	r1, r3
 8005ebe:	d003      	beq.n	8005ec8 <daq_trig_postcount+0x110>
 8005ec0:	461e      	mov	r6, r3
 8005ec2:	6803      	ldr	r3, [r0, #0]
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d1f2      	bne.n	8005eae <daq_trig_postcount+0xf6>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005ec8:	4a23      	ldr	r2, [pc, #140]	; (8005f58 <daq_trig_postcount+0x1a0>)
        //    ((pos_reserve1 <  0) && ((target <= pos_last_len && target >= 0) ||
        //                             (target <= self->trig.buff_trig->len && target >= pos_reserve2))))
        {
            LL_TIM_DisableCounter(PS_TIM_DAQ);

            daq_enable(self, 0);
 8005eca:	2100      	movs	r1, #0
 8005ecc:	6813      	ldr	r3, [r2, #0]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f023 0301 	bic.w	r3, r3, #1
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	f7ff f9b3 	bl	8005240 <daq_enable>
            self->trig.ready = 1;
 8005eda:	f242 434e 	movw	r3, #9294	; 0x244e
 8005ede:	2201      	movs	r2, #1
 8005ee0:	54e2      	strb	r2, [r4, r3]
            self->trig.is_post = 0;
 8005ee2:	f242 434c 	movw	r3, #9292	; 0x244c
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	54e2      	strb	r2, [r4, r3]

            self->trig.pos_diff = self->trig.pos_last - self->trig.pos_trig;
 8005eea:	f242 4360 	movw	r3, #9312	; 0x2460
 8005eee:	f242 425c 	movw	r2, #9308	; 0x245c
 8005ef2:	f242 4164 	movw	r1, #9316	; 0x2464
 8005ef6:	58e3      	ldr	r3, [r4, r3]
 8005ef8:	58a2      	ldr	r2, [r4, r2]
 8005efa:	1a9b      	subs	r3, r3, r2
            if (self->trig.pos_diff < 0)
 8005efc:	2b00      	cmp	r3, #0
            self->trig.pos_diff = self->trig.pos_last - self->trig.pos_trig;
 8005efe:	5063      	str	r3, [r4, r1]
            if (self->trig.pos_diff < 0)
 8005f00:	da05      	bge.n	8005f0e <daq_trig_postcount+0x156>
                self->trig.pos_diff += self->trig.buff_trig->len;
 8005f02:	f242 4284 	movw	r2, #9348	; 0x2484
 8005f06:	58a2      	ldr	r2, [r4, r2]
 8005f08:	88d2      	ldrh	r2, [r2, #6]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	5063      	str	r3, [r4, r1]

            comm_respond(comm_ptr, PS_RESP_RDY_N, 10); // data ready
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <daq_trig_postcount+0x1a4>)
 8005f10:	220a      	movs	r2, #10
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	4912      	ldr	r1, [pc, #72]	; (8005f60 <daq_trig_postcount+0x1a8>)
 8005f16:	f7fe ff6d 	bl	8004df4 <comm_respond>

            break;
        }
    }
    self->trig.post_start = 0;
 8005f1a:	f242 439c 	movw	r3, #9372	; 0x249c
 8005f1e:	2200      	movs	r2, #0
 8005f20:	50e2      	str	r2, [r4, r3]
}
 8005f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        self->trig.posttrig_size = (int)((float)self->set.mem * ((float)(100 - self->trig.set.pretrigger) / 100.0));
 8005f26:	f242 4378 	movw	r3, #9336	; 0x2478
        self->trig.pos_trig = last_idx;
 8005f2a:	50a5      	str	r5, [r4, r2]
        self->trig.posttrig_size = (int)((float)self->set.mem * ((float)(100 - self->trig.set.pretrigger) / 100.0));
 8005f2c:	50e0      	str	r0, [r4, r3]
        self->trig.pos_last = self->trig.pos_trig + self->trig.posttrig_size;
 8005f2e:	f242 4360 	movw	r3, #9312	; 0x2460
 8005f32:	4428      	add	r0, r5
        if (self->trig.pos_last >= self->trig.buff_trig->len)
 8005f34:	4288      	cmp	r0, r1
        self->trig.pos_last = self->trig.pos_trig + self->trig.posttrig_size;
 8005f36:	50e0      	str	r0, [r4, r3]
            self->trig.pos_last -= self->trig.buff_trig->len;
 8005f38:	bfa4      	itt	ge
 8005f3a:	1a40      	subge	r0, r0, r1
 8005f3c:	50e0      	strge	r0, [r4, r3]
        self->trig.pos_frst = self->trig.pos_trig - (self->set.mem - self->trig.posttrig_size) + 1; // +1 ??
 8005f3e:	1ba8      	subs	r0, r5, r6
 8005f40:	e798      	b.n	8005e74 <daq_trig_postcount+0xbc>
            self->trig.pos_frst += self->trig.buff_trig->len;
 8005f42:	4408      	add	r0, r1
 8005f44:	e79a      	b.n	8005e7c <daq_trig_postcount+0xc4>
 8005f46:	bf00      	nop
 8005f48:	0800c930 	.word	0x0800c930
 8005f4c:	40590000 	.word	0x40590000
 8005f50:	0800c929 	.word	0x0800c929
 8005f54:	40003000 	.word	0x40003000
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	20000800 	.word	0x20000800
 8005f60:	0800c976 	.word	0x0800c976

08005f64 <daq_trig_set>:
{
    daq_trig_set(self, 0, self->trig.set.val_percent, self->trig.set.edge, DISABLED, self->trig.set.pretrigger);
}

int daq_trig_set(daq_data_t* self, uint32_t ch, uint8_t level, enum trig_edge edge, enum trig_mode mode, int pretrigger)
{
 8005f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((level < 0 || level > 100) ||
 8005f68:	2a64      	cmp	r2, #100	; 0x64
{
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	460d      	mov	r5, r1
 8005f70:	4616      	mov	r6, r2
 8005f72:	461f      	mov	r7, r3
 8005f74:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    if((level < 0 || level > 100) ||
 8005f78:	d904      	bls.n	8005f84 <daq_trig_set+0x20>
       (ch < 0 || ch > 4) ||
       (pretrigger > 99 || pretrigger < 1))
    {
        return -1;
 8005f7a:	f04f 30ff 	mov.w	r0, #4294967295
    if (self->trig.pretrig_val < PS_PRETRIG_MIN_MS)
        self->trig.pretrig_val = PS_PRETRIG_MIN_MS;

    daq_enable(self, 1);
    return 0;
}
 8005f7e:	b007      	add	sp, #28
 8005f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((level < 0 || level > 100) ||
 8005f84:	2904      	cmp	r1, #4
 8005f86:	d8f8      	bhi.n	8005f7a <daq_trig_set+0x16>
       (pretrigger > 99 || pretrigger < 1))
 8005f88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f8a:	3b01      	subs	r3, #1
       (ch < 0 || ch > 4) ||
 8005f8c:	2b62      	cmp	r3, #98	; 0x62
 8005f8e:	d8f4      	bhi.n	8005f7a <daq_trig_set+0x16>
    daq_enable(self, 0);
 8005f90:	2100      	movs	r1, #0
 8005f92:	f7ff f955 	bl	8005240 <daq_enable>
    daq_reset(self);
 8005f96:	4620      	mov	r0, r4
 8005f98:	f7ff f91c 	bl	80051d4 <daq_reset>
    if (self->mode == LA)
 8005f9c:	f242 4308 	movw	r3, #9224	; 0x2408
 8005fa0:	5ce3      	ldrb	r3, [r4, r3]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d160      	bne.n	8006068 <daq_trig_set+0x104>
        self->trig.buff_trig = &self->buff1;
 8005fa6:	f242 4384 	movw	r3, #9348	; 0x2484
        self->trig.dma_ch_trig = PS_DMA_CH_LA;
 8005faa:	2206      	movs	r2, #6
        self->trig.buff_trig = &self->buff1;
 8005fac:	50e4      	str	r4, [r4, r3]
        self->trig.dma_ch_trig = PS_DMA_CH_LA;
 8005fae:	f242 4388 	movw	r3, #9352	; 0x2488
 8005fb2:	50e2      	str	r2, [r4, r3]
        self->trig.dma_trig = PS_DMA_LA;
 8005fb4:	f242 438c 	movw	r3, #9356	; 0x248c
 8005fb8:	4abe      	ldr	r2, [pc, #760]	; (80062b4 <daq_trig_set+0x350>)
 8005fba:	50e2      	str	r2, [r4, r3]
    self->trig.fullmem_val = (int)(((1.0 / (float)self->set.fs) * (float)self->set.mem) * (float)PS_SYSTICK_FREQ) + 1;
 8005fbc:	f242 33d8 	movw	r3, #9176	; 0x23d8
 8005fc0:	58e0      	ldr	r0, [r4, r3]
 8005fc2:	f7fa fa3b 	bl	800043c <__aeabi_f2d>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	2000      	movs	r0, #0
 8005fcc:	49ba      	ldr	r1, [pc, #744]	; (80062b8 <daq_trig_set+0x354>)
 8005fce:	f7fa fbb7 	bl	8000740 <__aeabi_ddiv>
 8005fd2:	f242 33dc 	movw	r3, #9180	; 0x23dc
 8005fd6:	4680      	mov	r8, r0
 8005fd8:	5ae0      	ldrh	r0, [r4, r3]
 8005fda:	4689      	mov	r9, r1
 8005fdc:	f7fa fe64 	bl	8000ca8 <__aeabi_ui2f>
 8005fe0:	f7fa fa2c 	bl	800043c <__aeabi_f2d>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4640      	mov	r0, r8
 8005fea:	4649      	mov	r1, r9
 8005fec:	f7fa fa7e 	bl	80004ec <__aeabi_dmul>
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	4bb2      	ldr	r3, [pc, #712]	; (80062bc <daq_trig_set+0x358>)
 8005ff4:	f7fa fa7a 	bl	80004ec <__aeabi_dmul>
 8005ff8:	f7fa fd28 	bl	8000a4c <__aeabi_d2iz>
 8005ffc:	f242 437c 	movw	r3, #9340	; 0x247c
 8006000:	3001      	adds	r0, #1
 8006002:	50e0      	str	r0, [r4, r3]
    self->trig.auttrig_val = PS_AUTRIG_MIN_MS + (int)((float)self->trig.fullmem_val * 1.0);
 8006004:	f7fa fe54 	bl	8000cb0 <__aeabi_i2f>
 8006008:	f7fb f86c 	bl	80010e4 <__aeabi_f2iz>
 800600c:	f242 4374 	movw	r3, #9332	; 0x2474
    self->trig.adc_trig = adc;
 8006010:	f242 4294 	movw	r2, #9364	; 0x2494
    self->trig.auttrig_val = PS_AUTRIG_MIN_MS + (int)((float)self->trig.fullmem_val * 1.0);
 8006014:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8006018:	50e0      	str	r0, [r4, r3]
    self->trig.adc_trig = adc;
 800601a:	4ba9      	ldr	r3, [pc, #676]	; (80062c0 <daq_trig_set+0x35c>)
 800601c:	50a3      	str	r3, [r4, r2]
    if (ch == 0 || mode == DISABLED)
 800601e:	b11d      	cbz	r5, 8006028 <daq_trig_set+0xc4>
 8006020:	f1ba 0f03 	cmp.w	sl, #3
 8006024:	f040 808e 	bne.w	8006144 <daq_trig_set+0x1e0>
        ASSERT(self->trig.exti_trig != 0);
 8006028:	f242 4390 	movw	r3, #9360	; 0x2490
 800602c:	58e2      	ldr	r2, [r4, r3]
 800602e:	461d      	mov	r5, r3
 8006030:	b922      	cbnz	r2, 800603c <daq_trig_set+0xd8>
 8006032:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8006036:	48a3      	ldr	r0, [pc, #652]	; (80062c4 <daq_trig_set+0x360>)
 8006038:	f001 fc20 	bl	800787c <assert2>
        NVIC_DisableIRQ(self->trig.exti_trig);
 800603c:	5760      	ldrsb	r0, [r4, r5]
 800603e:	f7ff fcab 	bl	8005998 <__NVIC_DisableIRQ>
  MODIFY_REG(ADCx->CR1,
 8006042:	4a9f      	ldr	r2, [pc, #636]	; (80062c0 <daq_trig_set+0x35c>)
 8006044:	4ba0      	ldr	r3, [pc, #640]	; (80062c8 <daq_trig_set+0x364>)
 8006046:	6851      	ldr	r1, [r2, #4]
        self->trig.set.ch = 0;
 8006048:	2500      	movs	r5, #0
 800604a:	400b      	ands	r3, r1
 800604c:	6053      	str	r3, [r2, #4]
 800604e:	f242 4318 	movw	r3, #9240	; 0x2418
        self->trig.set.mode = DISABLED;
 8006052:	2203      	movs	r2, #3
        self->trig.set.ch = 0;
 8006054:	50e5      	str	r5, [r4, r3]
        self->trig.set.mode = DISABLED;
 8006056:	f242 4314 	movw	r3, #9236	; 0x2414
 800605a:	54e2      	strb	r2, [r4, r3]
    daq_enable(self, 1);
 800605c:	4620      	mov	r0, r4
 800605e:	2101      	movs	r1, #1
 8006060:	f7ff f8ee 	bl	8005240 <daq_enable>
    return 0;
 8006064:	2000      	movs	r0, #0
 8006066:	e78a      	b.n	8005f7e <daq_trig_set+0x1a>
        int ch2 = ch;
 8006068:	4629      	mov	r1, r5
        if (ch == 0 || mode == DISABLED)
 800606a:	b115      	cbz	r5, 8006072 <daq_trig_set+0x10e>
 800606c:	f1ba 0f03 	cmp.w	sl, #3
 8006070:	d115      	bne.n	800609e <daq_trig_set+0x13a>
 8006072:	f242 33d5 	movw	r3, #9173	; 0x23d5
 8006076:	5ce1      	ldrb	r1, [r4, r3]
 8006078:	f242 33d6 	movw	r3, #9174	; 0x23d6
            if (self->set.ch1_en) ch2 = 1;
 800607c:	f242 30d4 	movw	r0, #9172	; 0x23d4
 8006080:	5ce2      	ldrb	r2, [r4, r3]
 8006082:	f242 33d7 	movw	r3, #9175	; 0x23d7
 8006086:	5c20      	ldrb	r0, [r4, r0]
 8006088:	5ce3      	ldrb	r3, [r4, r3]
 800608a:	2800      	cmp	r0, #0
 800608c:	d146      	bne.n	800611c <daq_trig_set+0x1b8>
            else if (self->set.ch2_en) ch2 = 2;
 800608e:	2900      	cmp	r1, #0
 8006090:	d146      	bne.n	8006120 <daq_trig_set+0x1bc>
            else if (self->set.ch3_en) ch2 = 3;
 8006092:	2a00      	cmp	r2, #0
 8006094:	d146      	bne.n	8006124 <daq_trig_set+0x1c0>
            else if (self->set.ch4_en) ch2 = 4;
 8006096:	2b00      	cmp	r3, #0
 8006098:	bf0c      	ite	eq
 800609a:	4629      	moveq	r1, r5
 800609c:	2104      	movne	r1, #4
        self->trig.buff_trig = &self->buff1;
 800609e:	f242 4384 	movw	r3, #9348	; 0x2484
        self->trig.dma_ch_trig = PS_DMA_CH_ADC1;
 80060a2:	f242 4288 	movw	r2, #9352	; 0x2488
        self->trig.buff_trig = &self->buff1;
 80060a6:	50e4      	str	r4, [r4, r3]
        self->trig.dma_ch_trig = PS_DMA_CH_ADC1;
 80060a8:	2301      	movs	r3, #1
 80060aa:	50a3      	str	r3, [r4, r2]
        self->trig.dma_trig = PS_DMA_ADC1;
 80060ac:	f242 428c 	movw	r2, #9356	; 0x248c
 80060b0:	4880      	ldr	r0, [pc, #512]	; (80062b4 <daq_trig_set+0x350>)
 80060b2:	50a0      	str	r0, [r4, r2]
        int ch_cnt = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en + 0;
 80060b4:	f242 32d4 	movw	r2, #9172	; 0x23d4
 80060b8:	5ca0      	ldrb	r0, [r4, r2]
 80060ba:	f242 32d5 	movw	r2, #9173	; 0x23d5
 80060be:	f814 8002 	ldrb.w	r8, [r4, r2]
 80060c2:	f242 32d6 	movw	r2, #9174	; 0x23d6
 80060c6:	f814 e002 	ldrb.w	lr, [r4, r2]
 80060ca:	f242 32d7 	movw	r2, #9175	; 0x23d7
 80060ce:	f814 c002 	ldrb.w	ip, [r4, r2]
 80060d2:	eb00 0208 	add.w	r2, r0, r8
 80060d6:	4472      	add	r2, lr
 80060d8:	4462      	add	r2, ip
        if (self->set.ch1_en){
 80060da:	b328      	cbz	r0, 8006128 <daq_trig_set+0x1c4>
            if (ch2 == 1) self->trig.order = ch_cnt - it;
 80060dc:	4299      	cmp	r1, r3
 80060de:	d104      	bne.n	80060ea <daq_trig_set+0x186>
 80060e0:	f242 4098 	movw	r0, #9368	; 0x2498
 80060e4:	1e53      	subs	r3, r2, #1
 80060e6:	5023      	str	r3, [r4, r0]
            it++;
 80060e8:	460b      	mov	r3, r1
        if (self->set.ch2_en){
 80060ea:	f1b8 0f00 	cmp.w	r8, #0
 80060ee:	d009      	beq.n	8006104 <daq_trig_set+0x1a0>
            if (ch2 == 2) self->trig.order = ch_cnt - it;
 80060f0:	2902      	cmp	r1, #2
 80060f2:	bf08      	it	eq
 80060f4:	f242 4898 	movweq	r8, #9368	; 0x2498
            it++;
 80060f8:	f103 0301 	add.w	r3, r3, #1
            if (ch2 == 2) self->trig.order = ch_cnt - it;
 80060fc:	bf04      	itt	eq
 80060fe:	1ad0      	subeq	r0, r2, r3
 8006100:	f844 0008 	streq.w	r0, [r4, r8]
        if (self->set.ch3_en){
 8006104:	f1be 0f00 	cmp.w	lr, #0
 8006108:	d010      	beq.n	800612c <daq_trig_set+0x1c8>
            if (ch2 == 3) self->trig.order = ch_cnt - it;
 800610a:	2903      	cmp	r1, #3
            it++;
 800610c:	f103 0301 	add.w	r3, r3, #1
            if (ch2 == 3) self->trig.order = ch_cnt - it;
 8006110:	d10c      	bne.n	800612c <daq_trig_set+0x1c8>
 8006112:	f242 4198 	movw	r1, #9368	; 0x2498
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	5063      	str	r3, [r4, r1]
 800611a:	e74f      	b.n	8005fbc <daq_trig_set+0x58>
            if (self->set.ch1_en) ch2 = 1;
 800611c:	2101      	movs	r1, #1
 800611e:	e7be      	b.n	800609e <daq_trig_set+0x13a>
            else if (self->set.ch2_en) ch2 = 2;
 8006120:	2102      	movs	r1, #2
 8006122:	e7bc      	b.n	800609e <daq_trig_set+0x13a>
            else if (self->set.ch3_en) ch2 = 3;
 8006124:	2103      	movs	r1, #3
 8006126:	e7ba      	b.n	800609e <daq_trig_set+0x13a>
        int it = 0;
 8006128:	4603      	mov	r3, r0
 800612a:	e7de      	b.n	80060ea <daq_trig_set+0x186>
        if (self->set.ch4_en){
 800612c:	f1bc 0f00 	cmp.w	ip, #0
 8006130:	f43f af44 	beq.w	8005fbc <daq_trig_set+0x58>
            if (ch2 == 4) self->trig.order = ch_cnt - it;
 8006134:	2904      	cmp	r1, #4
            it++;
 8006136:	bf01      	itttt	eq
 8006138:	3301      	addeq	r3, #1
            if (ch2 == 4) self->trig.order = ch_cnt - it;
 800613a:	1ad3      	subeq	r3, r2, r3
 800613c:	f242 4298 	movweq	r2, #9368	; 0x2498
 8006140:	50a3      	streq	r3, [r4, r2]
 8006142:	e73b      	b.n	8005fbc <daq_trig_set+0x58>
    if (self->mode == LA)
 8006144:	f242 4208 	movw	r2, #9224	; 0x2408
 8006148:	f814 8002 	ldrb.w	r8, [r4, r2]
 800614c:	f1b8 0f02 	cmp.w	r8, #2
 8006150:	f040 80d3 	bne.w	80062fa <daq_trig_set+0x396>
 8006154:	6859      	ldr	r1, [r3, #4]
 8006156:	4a5c      	ldr	r2, [pc, #368]	; (80062c8 <daq_trig_set+0x364>)
        if (ch == 1)
 8006158:	2d01      	cmp	r5, #1
 800615a:	ea02 0201 	and.w	r2, r2, r1
 800615e:	605a      	str	r2, [r3, #4]
        LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006168:	f242 4390 	movw	r3, #9360	; 0x2490
        if (ch == 1)
 800616c:	f040 8099 	bne.w	80062a2 <daq_trig_set+0x33e>
            self->trig.exti_trig = PS_LA_IRQ_EXTI1;
 8006170:	2207      	movs	r2, #7
 8006172:	50e2      	str	r2, [r4, r3]
            extiline = PS_LA_EXTILINE1;
 8006174:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8006178:	4e54      	ldr	r6, [pc, #336]	; (80062cc <daq_trig_set+0x368>)
 800617a:	6832      	ldr	r2, [r6, #0]
 800617c:	f022 0202 	bic.w	r2, r2, #2
 8006180:	6032      	str	r2, [r6, #0]
 8006182:	6832      	ldr	r2, [r6, #0]
 8006184:	f022 0204 	bic.w	r2, r2, #4
 8006188:	6032      	str	r2, [r6, #0]
 800618a:	6832      	ldr	r2, [r6, #0]
 800618c:	f022 0208 	bic.w	r2, r2, #8
 8006190:	6032      	str	r2, [r6, #0]
 8006192:	6832      	ldr	r2, [r6, #0]
 8006194:	f022 0210 	bic.w	r2, r2, #16
 8006198:	6032      	str	r2, [r6, #0]
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800619a:	b2da      	uxtb	r2, r3
 800619c:	0092      	lsls	r2, r2, #2
 800619e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80061a2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80061a6:	6891      	ldr	r1, [r2, #8]
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	ea21 0103 	bic.w	r1, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ae:	fa93 f3a3 	rbit	r3, r3
        EXTI_InitStruct.LineCommand = ENABLE;
 80061b2:	2301      	movs	r3, #1
        EXTI_InitStruct.Trigger = (edge == RISING ? LL_EXTI_TRIGGER_RISING : LL_EXTI_TRIGGER_FALLING);
 80061b4:	2f00      	cmp	r7, #0
        EXTI_InitStruct.LineCommand = ENABLE;
 80061b6:	f88d 3014 	strb.w	r3, [sp, #20]
        EXTI_InitStruct.Trigger = (edge == RISING ? LL_EXTI_TRIGGER_RISING : LL_EXTI_TRIGGER_FALLING);
 80061ba:	bf18      	it	ne
 80061bc:	2302      	movne	r3, #2
 80061be:	6091      	str	r1, [r2, #8]
        LL_EXTI_Init(&EXTI_InitStruct);
 80061c0:	a804      	add	r0, sp, #16
        EXTI_InitStruct.Trigger = (edge == RISING ? LL_EXTI_TRIGGER_RISING : LL_EXTI_TRIGGER_FALLING);
 80061c2:	f88d 3016 	strb.w	r3, [sp, #22]
        EXTI_InitStruct.Line_0_31 = exti;
 80061c6:	f8cd 8010 	str.w	r8, [sp, #16]
        LL_EXTI_Init(&EXTI_InitStruct);
 80061ca:	f7fc fb23 	bl	8002814 <LL_EXTI_Init>
  SET_BIT(EXTI->IMR, ExtiLine);
 80061ce:	6833      	ldr	r3, [r6, #0]
 80061d0:	ea48 0303 	orr.w	r3, r8, r3
 80061d4:	6033      	str	r3, [r6, #0]
        NVIC_SetPriority(self->trig.exti_trig, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_EXTI, 0));
 80061d6:	f242 4390 	movw	r3, #9360	; 0x2490
 80061da:	58e2      	ldr	r2, [r4, r3]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061dc:	4b3c      	ldr	r3, [pc, #240]	; (80062d0 <daq_trig_set+0x36c>)
 80061de:	b250      	sxtb	r0, r2
 80061e0:	68d9      	ldr	r1, [r3, #12]
 80061e2:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061e6:	f1c1 0607 	rsb	r6, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061ea:	1d0b      	adds	r3, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061ec:	2e04      	cmp	r6, #4
 80061ee:	bf28      	it	cs
 80061f0:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061f2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061f4:	f04f 33ff 	mov.w	r3, #4294967295
 80061f8:	fa03 f306 	lsl.w	r3, r3, r6
 80061fc:	ea6f 0303 	mvn.w	r3, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006200:	bf94      	ite	ls
 8006202:	2100      	movls	r1, #0
 8006204:	3903      	subhi	r1, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006206:	f003 0305 	and.w	r3, r3, #5
  if ((int32_t)(IRQn) >= 0)
 800620a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800620c:	fa03 f301 	lsl.w	r3, r3, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006210:	bfac      	ite	ge
 8006212:	f100 4260 	addge.w	r2, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006216:	492f      	ldrlt	r1, [pc, #188]	; (80062d4 <daq_trig_set+0x370>)
 8006218:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800621c:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800621e:	bfab      	itete	ge
 8006220:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006224:	f002 020f 	andlt.w	r2, r2, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006228:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800622c:	548b      	strblt	r3, [r1, r2]
        NVIC_DisableIRQ(self->trig.exti_trig);
 800622e:	f7ff fbb3 	bl	8005998 <__NVIC_DisableIRQ>
        self->trig.set.val = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	f242 421c 	movw	r2, #9244	; 0x241c
 8006238:	50a3      	str	r3, [r4, r2]
        self->trig.set.val_percent = 0;
 800623a:	f242 4220 	movw	r2, #9248	; 0x2420
 800623e:	50a3      	str	r3, [r4, r2]
    self->trig.pretrig_val = (int)((float)self->trig.fullmem_val * ((float)pretrigger / 100.0)) + 1;
 8006240:	f242 437c 	movw	r3, #9340	; 0x247c
 8006244:	58e0      	ldr	r0, [r4, r3]
 8006246:	f7fa fd33 	bl	8000cb0 <__aeabi_i2f>
 800624a:	f7fa f8f7 	bl	800043c <__aeabi_f2d>
 800624e:	4680      	mov	r8, r0
 8006250:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006252:	4689      	mov	r9, r1
 8006254:	f7fa fd2c 	bl	8000cb0 <__aeabi_i2f>
 8006258:	f7fa f8f0 	bl	800043c <__aeabi_f2d>
 800625c:	2200      	movs	r2, #0
 800625e:	4b1e      	ldr	r3, [pc, #120]	; (80062d8 <daq_trig_set+0x374>)
 8006260:	f7fa fa6e 	bl	8000740 <__aeabi_ddiv>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4640      	mov	r0, r8
 800626a:	4649      	mov	r1, r9
 800626c:	f7fa f93e 	bl	80004ec <__aeabi_dmul>
 8006270:	f7fa fbec 	bl	8000a4c <__aeabi_d2iz>
 8006274:	f242 4370 	movw	r3, #9328	; 0x2470
    self->trig.set.pretrigger = pretrigger;
 8006278:	f242 4210 	movw	r2, #9232	; 0x2410
 800627c:	9911      	ldr	r1, [sp, #68]	; 0x44
    self->trig.pretrig_val = (int)((float)self->trig.fullmem_val * ((float)pretrigger / 100.0)) + 1;
 800627e:	3001      	adds	r0, #1
 8006280:	50e0      	str	r0, [r4, r3]
    self->trig.set.pretrigger = pretrigger;
 8006282:	50a1      	str	r1, [r4, r2]
    self->trig.set.mode = mode;
 8006284:	f242 4214 	movw	r2, #9236	; 0x2414
 8006288:	f804 a002 	strb.w	sl, [r4, r2]
    self->trig.set.edge = edge;
 800628c:	f242 4215 	movw	r2, #9237	; 0x2415
 8006290:	54a7      	strb	r7, [r4, r2]
    self->trig.set.ch = ch;
 8006292:	f242 4218 	movw	r2, #9240	; 0x2418
    if (self->trig.pretrig_val < PS_PRETRIG_MIN_MS)
 8006296:	2809      	cmp	r0, #9
    self->trig.set.ch = ch;
 8006298:	50a5      	str	r5, [r4, r2]
        self->trig.pretrig_val = PS_PRETRIG_MIN_MS;
 800629a:	bfdc      	itt	le
 800629c:	220a      	movle	r2, #10
 800629e:	50e2      	strle	r2, [r4, r3]
 80062a0:	e6dc      	b.n	800605c <daq_trig_set+0xf8>
        else if (ch == 2)
 80062a2:	2d02      	cmp	r5, #2
 80062a4:	d11a      	bne.n	80062dc <daq_trig_set+0x378>
            self->trig.exti_trig = PS_LA_IRQ_EXTI2;
 80062a6:	2208      	movs	r2, #8
            exti = PS_LA_EXTI2;
 80062a8:	f04f 0804 	mov.w	r8, #4
            self->trig.exti_trig = PS_LA_IRQ_EXTI2;
 80062ac:	50e2      	str	r2, [r4, r3]
            extiline = PS_LA_EXTILINE2;
 80062ae:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80062b2:	e761      	b.n	8006178 <daq_trig_set+0x214>
 80062b4:	40020000 	.word	0x40020000
 80062b8:	3ff00000 	.word	0x3ff00000
 80062bc:	408f4000 	.word	0x408f4000
 80062c0:	40012400 	.word	0x40012400
 80062c4:	0800c930 	.word	0x0800c930
 80062c8:	ff3ffde0 	.word	0xff3ffde0
 80062cc:	40010400 	.word	0x40010400
 80062d0:	e000ed00 	.word	0xe000ed00
 80062d4:	e000ed14 	.word	0xe000ed14
 80062d8:	40590000 	.word	0x40590000
        else if (ch == 3)
 80062dc:	2d03      	cmp	r5, #3
            self->trig.exti_trig = PS_LA_IRQ_EXTI3;
 80062de:	bf0b      	itete	eq
 80062e0:	2209      	moveq	r2, #9
            self->trig.exti_trig = PS_LA_IRQ_EXTI4;
 80062e2:	220a      	movne	r2, #10
            self->trig.exti_trig = PS_LA_IRQ_EXTI3;
 80062e4:	50e2      	streq	r2, [r4, r3]
            self->trig.exti_trig = PS_LA_IRQ_EXTI4;
 80062e6:	50e2      	strne	r2, [r4, r3]
            exti = PS_LA_EXTI3;
 80062e8:	bf07      	ittee	eq
 80062ea:	f04f 0808 	moveq.w	r8, #8
            extiline = PS_LA_EXTILINE3;
 80062ee:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
            exti = PS_LA_EXTI4;
 80062f2:	f04f 0810 	movne.w	r8, #16
            extiline = PS_LA_EXTILINE4;
 80062f6:	4b42      	ldrne	r3, [pc, #264]	; (8006400 <daq_trig_set+0x49c>)
 80062f8:	e73e      	b.n	8006178 <daq_trig_set+0x214>
        ASSERT(self->trig.exti_trig != 0);
 80062fa:	f242 4390 	movw	r3, #9360	; 0x2490
 80062fe:	58e2      	ldr	r2, [r4, r3]
 8006300:	4698      	mov	r8, r3
 8006302:	b922      	cbnz	r2, 800630e <daq_trig_set+0x3aa>
 8006304:	f240 2112 	movw	r1, #530	; 0x212
 8006308:	483e      	ldr	r0, [pc, #248]	; (8006404 <daq_trig_set+0x4a0>)
 800630a:	f001 fab7 	bl	800787c <assert2>
        NVIC_DisableIRQ(self->trig.exti_trig);
 800630e:	f914 0008 	ldrsb.w	r0, [r4, r8]
 8006312:	f7ff fb41 	bl	8005998 <__NVIC_DisableIRQ>
        if ((ch == 1 && self->set.ch1_en) ||
 8006316:	2d01      	cmp	r5, #1
 8006318:	d139      	bne.n	800638e <daq_trig_set+0x42a>
 800631a:	f242 33d4 	movw	r3, #9172	; 0x23d4
 800631e:	5ce3      	ldrb	r3, [r4, r3]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f43f ae2a 	beq.w	8005f7a <daq_trig_set+0x16>
                self->trig.awd_trig = PS_ADC_AWD1;
 8006326:	4a38      	ldr	r2, [pc, #224]	; (8006408 <daq_trig_set+0x4a4>)
 8006328:	f504 5312 	add.w	r3, r4, #9344	; 0x2480
                self->trig.awd_trig = PS_ADC_AWD4;
 800632c:	601a      	str	r2, [r3, #0]
            uint32_t level_raw = (int)(self->adc_max_val / 100.0 * (float)level);
 800632e:	f242 4304 	movw	r3, #9220	; 0x2404
 8006332:	f854 b003 	ldr.w	fp, [r4, r3]
 8006336:	4658      	mov	r0, fp
 8006338:	f7fa f880 	bl	800043c <__aeabi_f2d>
 800633c:	2200      	movs	r2, #0
 800633e:	4b33      	ldr	r3, [pc, #204]	; (800640c <daq_trig_set+0x4a8>)
 8006340:	f7fa f9fe 	bl	8000740 <__aeabi_ddiv>
 8006344:	4680      	mov	r8, r0
 8006346:	4630      	mov	r0, r6
 8006348:	4689      	mov	r9, r1
 800634a:	f7fa fcad 	bl	8000ca8 <__aeabi_ui2f>
 800634e:	f7fa f875 	bl	800043c <__aeabi_f2d>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4640      	mov	r0, r8
 8006358:	4649      	mov	r1, r9
 800635a:	f7fa f8c7 	bl	80004ec <__aeabi_dmul>
 800635e:	f7fa fb75 	bl	8000a4c <__aeabi_d2iz>
 8006362:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006424 <daq_trig_set+0x4c0>
 8006366:	4601      	mov	r1, r0
 8006368:	4a29      	ldr	r2, [pc, #164]	; (8006410 <daq_trig_set+0x4ac>)
 800636a:	4b2a      	ldr	r3, [pc, #168]	; (8006414 <daq_trig_set+0x4b0>)
            if (edge == RISING)
 800636c:	bb8f      	cbnz	r7, 80063d2 <daq_trig_set+0x46e>
  MODIFY_REG(*preg,
 800636e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8006370:	4018      	ands	r0, r3
 8006372:	4330      	orrs	r0, r6
 8006374:	6250      	str	r0, [r2, #36]	; 0x24
 8006376:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800637a:	4013      	ands	r3, r2
 800637c:	f8c9 3004 	str.w	r3, [r9, #4]
            self->trig.set.val = level_raw;
 8006380:	f242 431c 	movw	r3, #9244	; 0x241c
 8006384:	50e1      	str	r1, [r4, r3]
            self->trig.set.val_percent = level;
 8006386:	f242 4320 	movw	r3, #9248	; 0x2420
 800638a:	50e6      	str	r6, [r4, r3]
        {
 800638c:	e758      	b.n	8006240 <daq_trig_set+0x2dc>
        if ((ch == 1 && self->set.ch1_en) ||
 800638e:	2d02      	cmp	r5, #2
 8006390:	d109      	bne.n	80063a6 <daq_trig_set+0x442>
            (ch == 2 && self->set.ch2_en) ||
 8006392:	f242 33d5 	movw	r3, #9173	; 0x23d5
 8006396:	5ce3      	ldrb	r3, [r4, r3]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f43f adee 	beq.w	8005f7a <daq_trig_set+0x16>
                self->trig.awd_trig = PS_ADC_AWD2;
 800639e:	f504 5312 	add.w	r3, r4, #9344	; 0x2480
 80063a2:	4a1d      	ldr	r2, [pc, #116]	; (8006418 <daq_trig_set+0x4b4>)
 80063a4:	e7c2      	b.n	800632c <daq_trig_set+0x3c8>
            (ch == 2 && self->set.ch2_en) ||
 80063a6:	2d03      	cmp	r5, #3
 80063a8:	d109      	bne.n	80063be <daq_trig_set+0x45a>
            (ch == 3 && self->set.ch3_en) ||
 80063aa:	f242 33d6 	movw	r3, #9174	; 0x23d6
 80063ae:	5ce3      	ldrb	r3, [r4, r3]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f43f ade2 	beq.w	8005f7a <daq_trig_set+0x16>
                self->trig.awd_trig = PS_ADC_AWD3;
 80063b6:	f504 5312 	add.w	r3, r4, #9344	; 0x2480
 80063ba:	4a18      	ldr	r2, [pc, #96]	; (800641c <daq_trig_set+0x4b8>)
 80063bc:	e7b6      	b.n	800632c <daq_trig_set+0x3c8>
            (ch == 4 && self->set.ch4_en))
 80063be:	f242 33d7 	movw	r3, #9175	; 0x23d7
 80063c2:	5ce3      	ldrb	r3, [r4, r3]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f43f add8 	beq.w	8005f7a <daq_trig_set+0x16>
                self->trig.awd_trig = PS_ADC_AWD4;
 80063ca:	f504 5312 	add.w	r3, r4, #9344	; 0x2480
 80063ce:	4a14      	ldr	r2, [pc, #80]	; (8006420 <daq_trig_set+0x4bc>)
 80063d0:	e7ac      	b.n	800632c <daq_trig_set+0x3c8>
 80063d2:	e9cd 0302 	strd	r0, r3, [sp, #8]
                LL_ADC_SetAnalogWDThresholds(adc, LL_ADC_AWD_THRESHOLD_HIGH, (int)self->adc_max_val);
 80063d6:	4658      	mov	r0, fp
 80063d8:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 80063dc:	9201      	str	r2, [sp, #4]
 80063de:	f7fa fe81 	bl	80010e4 <__aeabi_f2iz>
 80063e2:	9b03      	ldr	r3, [sp, #12]
 80063e4:	9a01      	ldr	r2, [sp, #4]
 80063e6:	ea08 0803 	and.w	r8, r8, r3
 80063ea:	ea40 0008 	orr.w	r0, r0, r8
 80063ee:	6250      	str	r0, [r2, #36]	; 0x24
 80063f0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80063f4:	9902      	ldr	r1, [sp, #8]
 80063f6:	4013      	ands	r3, r2
 80063f8:	4333      	orrs	r3, r6
 80063fa:	f8c9 3004 	str.w	r3, [r9, #4]
 80063fe:	e7bf      	b.n	8006380 <daq_trig_set+0x41c>
 8006400:	000f0001 	.word	0x000f0001
 8006404:	0800c930 	.word	0x0800c930
 8006408:	00800201 	.word	0x00800201
 800640c:	40590000 	.word	0x40590000
 8006410:	40012400 	.word	0x40012400
 8006414:	fffff000 	.word	0xfffff000
 8006418:	00800202 	.word	0x00800202
 800641c:	00800203 	.word	0x00800203
 8006420:	00800204 	.word	0x00800204
 8006424:	40012424 	.word	0x40012424

08006428 <daq_trig_update>:
{
 8006428:	b513      	push	{r0, r1, r4, lr}
    daq_trig_set(self, self->trig.set.ch, self->trig.set.val_percent,
 800642a:	f242 4410 	movw	r4, #9232	; 0x2410
 800642e:	f242 4315 	movw	r3, #9237	; 0x2415
 8006432:	f242 4220 	movw	r2, #9248	; 0x2420
 8006436:	5904      	ldr	r4, [r0, r4]
 8006438:	5cc3      	ldrb	r3, [r0, r3]
 800643a:	5c82      	ldrb	r2, [r0, r2]
 800643c:	9401      	str	r4, [sp, #4]
 800643e:	f242 4414 	movw	r4, #9236	; 0x2414
 8006442:	5d04      	ldrb	r4, [r0, r4]
 8006444:	9400      	str	r4, [sp, #0]
 8006446:	f242 4418 	movw	r4, #9240	; 0x2418
 800644a:	5901      	ldr	r1, [r0, r4]
 800644c:	f7ff fd8a 	bl	8005f64 <daq_trig_set>
}
 8006450:	b002      	add	sp, #8
 8006452:	bd10      	pop	{r4, pc}

08006454 <SysTick_Handler>:
    return USBD_OK;
}
*/

void SysTick_Handler(void)
{
 8006454:	b508      	push	{r3, lr}
    if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006456:	f004 f8c9 	bl	800a5ec <xTaskGetSchedulerState>
 800645a:	2801      	cmp	r0, #1
 800645c:	d001      	beq.n	8006462 <SysTick_Handler+0xe>
        xPortSysTickHandler();
 800645e:	f003 f9b1 	bl	80097c4 <xPortSysTickHandler>

    HAL_IncTick();
}
 8006462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_IncTick();
 8006466:	f7fb bb2b 	b.w	8001ac0 <HAL_IncTick>

0800646a <SVC_Handler>:

void SVC_Handler(void)
{
    vPortSVCHandler();
 800646a:	f003 b941 	b.w	80096f0 <vPortSVCHandler>

0800646e <PendSV_Handler>:
}

void PendSV_Handler(void)
{
    xPortPendSVHandler();
 800646e:	f003 b987 	b.w	8009780 <xPortPendSVHandler>
	...

08006474 <USART1_IRQHandler>:
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8006474:	4b1e      	ldr	r3, [pc, #120]	; (80064f0 <USART1_IRQHandler+0x7c>)
}

void USART1_IRQHandler(void)
{
 8006476:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006478:	681a      	ldr	r2, [r3, #0]
    if (LL_USART_IsActiveFlag_RXNE(PS_UART) == 1)
 800647a:	0692      	lsls	r2, r2, #26
 800647c:	d527      	bpl.n	80064ce <USART1_IRQHandler+0x5a>
    {
        char rx = LL_USART_ReceiveData8(PS_UART);

        comm.uart.rx_buffer[comm.uart.rx_index++] = rx;
 800647e:	4c1d      	ldr	r4, [pc, #116]	; (80064f4 <USART1_IRQHandler+0x80>)
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f894 10cd 	ldrb.w	r1, [r4, #205]	; 0xcd

        if (comm.uart.rx_index >= RX_BUFF_LAST)
            comm.uart.rx_index = 0;

        comm.uart.last = 1;
        comm.usb.last = 0;
 8006486:	2500      	movs	r5, #0
        comm.uart.rx_buffer[comm.uart.rx_index++] = rx;
 8006488:	1c4a      	adds	r2, r1, #1
 800648a:	b2d2      	uxtb	r2, r2
        if (comm.uart.rx_index >= RX_BUFF_LAST)
 800648c:	2a62      	cmp	r2, #98	; 0x62
        comm.uart.rx_buffer[comm.uart.rx_index++] = rx;
 800648e:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
            comm.uart.rx_index = 0;
 8006492:	bf84      	itt	hi
 8006494:	2200      	movhi	r2, #0
 8006496:	f884 20cd 	strbhi.w	r2, [r4, #205]	; 0xcd
        comm.uart.last = 1;
 800649a:	2201      	movs	r2, #1
 800649c:	b2db      	uxtb	r3, r3
        comm.uart.rx_buffer[comm.uart.rx_index++] = rx;
 800649e:	4421      	add	r1, r4

        if (rx == '\n')
 80064a0:	2b0a      	cmp	r3, #10
        comm.uart.rx_buffer[comm.uart.rx_index++] = rx;
 80064a2:	f881 3067 	strb.w	r3, [r1, #103]	; 0x67
        comm.uart.last = 1;
 80064a6:	f884 20cb 	strb.w	r2, [r4, #203]	; 0xcb
        comm.usb.last = 0;
 80064aa:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
        if (rx == '\n')
 80064ae:	d10a      	bne.n	80064c6 <USART1_IRQHandler+0x52>
        {
            portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
            if(xSemaphoreGiveFromISR(sem1_comm, &xHigherPriorityTaskWoken) != pdPASS)
 80064b0:	4b11      	ldr	r3, [pc, #68]	; (80064f8 <USART1_IRQHandler+0x84>)
            portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80064b2:	a902      	add	r1, sp, #8
 80064b4:	f841 5d04 	str.w	r5, [r1, #-4]!
            if(xSemaphoreGiveFromISR(sem1_comm, &xHigherPriorityTaskWoken) != pdPASS)
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	f003 fbf8 	bl	8009cae <xQueueGiveFromISR>
 80064be:	2801      	cmp	r0, #1
 80064c0:	d007      	beq.n	80064d2 <USART1_IRQHandler+0x5e>
            {
                comm.uart.rx_index = 0;
 80064c2:	f884 50cd 	strb.w	r5, [r4, #205]	; 0xcd
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80064c6:	f06f 0220 	mvn.w	r2, #32
 80064ca:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <USART1_IRQHandler+0x7c>)
 80064cc:	601a      	str	r2, [r3, #0]
        }
#ifdef PS_UART_RXNE
        LL_USART_ClearFlag_RXNE(PS_UART);
#endif
    }
}
 80064ce:	b003      	add	sp, #12
 80064d0:	bd30      	pop	{r4, r5, pc}
                if (xHigherPriorityTaskWoken != pdFALSE)
 80064d2:	9b01      	ldr	r3, [sp, #4]
                comm.uart.available = 1;
 80064d4:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
                if (xHigherPriorityTaskWoken != pdFALSE)
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0f4      	beq.n	80064c6 <USART1_IRQHandler+0x52>
                    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80064dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e0:	4b06      	ldr	r3, [pc, #24]	; (80064fc <USART1_IRQHandler+0x88>)
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	e7eb      	b.n	80064c6 <USART1_IRQHandler+0x52>
 80064ee:	bf00      	nop
 80064f0:	40013800 	.word	0x40013800
 80064f4:	2000315c 	.word	0x2000315c
 80064f8:	20003124 	.word	0x20003124
 80064fc:	e000ed04 	.word	0xe000ed04

08006500 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 8006500:	b510      	push	{r4, lr}
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1));
 8006502:	4c05      	ldr	r4, [pc, #20]	; (8006518 <ADC1_2_IRQHandler+0x18>)
 8006504:	6823      	ldr	r3, [r4, #0]
#if defined(PS_ADC_MODE_ADC1)
    if (LL_ADC_IsActiveFlag_AWD1(ADC1) == 1)
 8006506:	07db      	lsls	r3, r3, #31
 8006508:	d505      	bpl.n	8006516 <ADC1_2_IRQHandler+0x16>
    {
        daq_trig_trigger_scope(&daq);
 800650a:	4804      	ldr	r0, [pc, #16]	; (800651c <ADC1_2_IRQHandler+0x1c>)
 800650c:	f7ff fb8c 	bl	8005c28 <daq_trig_trigger_scope>
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_AWD1);
 8006510:	f06f 0301 	mvn.w	r3, #1
 8006514:	6023      	str	r3, [r4, #0]
    {
        daq_trig_trigger_scope(&daq);
        LL_ADC_ClearFlag_AWD1(ADC2);
    }
#endif
}
 8006516:	bd10      	pop	{r4, pc}
 8006518:	40012400 	.word	0x40012400
 800651c:	20000c6c 	.word	0x20000c6c

08006520 <TIM1_UP_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006520:	4b06      	ldr	r3, [pc, #24]	; (800653c <TIM1_UP_IRQHandler+0x1c>)
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	07d2      	lsls	r2, r2, #31
 8006526:	d508      	bpl.n	800653a <TIM1_UP_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006528:	f06f 0201 	mvn.w	r2, #1
 800652c:	611a      	str	r2, [r3, #16]
void PS_TIM_CNTR_UP_IRQh(void)
{
    if(LL_TIM_IsActiveFlag_UPDATE(PS_TIM_CNTR) == 1)
    {
        LL_TIM_ClearFlag_UPDATE(PS_TIM_CNTR);
        cntr.ovf++;
 800652e:	4a04      	ldr	r2, [pc, #16]	; (8006540 <TIM1_UP_IRQHandler+0x20>)
 8006530:	f8d2 319c 	ldr.w	r3, [r2, #412]	; 0x19c
 8006534:	3301      	adds	r3, #1
 8006536:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
    }
}
 800653a:	4770      	bx	lr
 800653c:	40012c00 	.word	0x40012c00
 8006540:	20000acc 	.word	0x20000acc

08006544 <TIM1_CC_IRQHandler>:

void PS_TIM_CNTR_CCR_IRQh(void)
{
    if (cntr.data_ovf_it < PS_CNTR_BUFF_SZ)
 8006544:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <TIM1_CC_IRQHandler+0x2c>)
 8006546:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
 800654a:	2b63      	cmp	r3, #99	; 0x63
 800654c:	dc07      	bgt.n	800655e <TIM1_CC_IRQHandler+0x1a>
        cntr.data_ovf[cntr.data_ovf_it++] = cntr.ovf; // BUG
 800654e:	f8d2 119c 	ldr.w	r1, [r2, #412]	; 0x19c
 8006552:	1c58      	adds	r0, r3, #1
 8006554:	3364      	adds	r3, #100	; 0x64
 8006556:	f8c2 0190 	str.w	r0, [r2, #400]	; 0x190
 800655a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800655e:	4b05      	ldr	r3, [pc, #20]	; (8006574 <TIM1_CC_IRQHandler+0x30>)
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	0792      	lsls	r2, r2, #30
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006564:	bf44      	itt	mi
 8006566:	f06f 0202 	mvnmi.w	r2, #2
 800656a:	611a      	strmi	r2, [r3, #16]

    if(LL_TIM_IsActiveFlag_CC1(PS_TIM_CNTR) == 1)
    {
        LL_TIM_ClearFlag_CC1(PS_TIM_CNTR);
    }
}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20000acc 	.word	0x20000acc
 8006574:	40012c00 	.word	0x40012c00

08006578 <EXTI1_IRQHandler>:


void PS_LA_CH1_IRQh(void)
{
 8006578:	b510      	push	{r4, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800657a:	4c05      	ldr	r4, [pc, #20]	; (8006590 <EXTI1_IRQHandler+0x18>)
 800657c:	6963      	ldr	r3, [r4, #20]
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI1) == 1)
 800657e:	079b      	lsls	r3, r3, #30
 8006580:	d504      	bpl.n	800658c <EXTI1_IRQHandler+0x14>
    {
        daq_trig_trigger_la(&daq);
 8006582:	4804      	ldr	r0, [pc, #16]	; (8006594 <EXTI1_IRQHandler+0x1c>)
 8006584:	f7ff fbd6 	bl	8005d34 <daq_trig_trigger_la>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8006588:	2302      	movs	r3, #2
 800658a:	6163      	str	r3, [r4, #20]
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI1);
    }
}
 800658c:	bd10      	pop	{r4, pc}
 800658e:	bf00      	nop
 8006590:	40010400 	.word	0x40010400
 8006594:	20000c6c 	.word	0x20000c6c

08006598 <EXTI2_IRQHandler>:

void PS_LA_CH2_IRQh(void)
{
 8006598:	b510      	push	{r4, lr}
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800659a:	4c05      	ldr	r4, [pc, #20]	; (80065b0 <EXTI2_IRQHandler+0x18>)
 800659c:	6963      	ldr	r3, [r4, #20]
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI2) == 1)
 800659e:	075b      	lsls	r3, r3, #29
 80065a0:	d504      	bpl.n	80065ac <EXTI2_IRQHandler+0x14>
    {
        daq_trig_trigger_la(&daq);
 80065a2:	4804      	ldr	r0, [pc, #16]	; (80065b4 <EXTI2_IRQHandler+0x1c>)
 80065a4:	f7ff fbc6 	bl	8005d34 <daq_trig_trigger_la>
  WRITE_REG(EXTI->PR, ExtiLine);
 80065a8:	2304      	movs	r3, #4
 80065aa:	6163      	str	r3, [r4, #20]
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI2);
    }
}
 80065ac:	bd10      	pop	{r4, pc}
 80065ae:	bf00      	nop
 80065b0:	40010400 	.word	0x40010400
 80065b4:	20000c6c 	.word	0x20000c6c

080065b8 <EXTI3_IRQHandler>:

void PS_LA_CH3_IRQh(void)
{
 80065b8:	b510      	push	{r4, lr}
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80065ba:	4c05      	ldr	r4, [pc, #20]	; (80065d0 <EXTI3_IRQHandler+0x18>)
 80065bc:	6963      	ldr	r3, [r4, #20]
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI3) == 1)
 80065be:	071b      	lsls	r3, r3, #28
 80065c0:	d504      	bpl.n	80065cc <EXTI3_IRQHandler+0x14>
    {
        daq_trig_trigger_la(&daq);
 80065c2:	4804      	ldr	r0, [pc, #16]	; (80065d4 <EXTI3_IRQHandler+0x1c>)
 80065c4:	f7ff fbb6 	bl	8005d34 <daq_trig_trigger_la>
  WRITE_REG(EXTI->PR, ExtiLine);
 80065c8:	2308      	movs	r3, #8
 80065ca:	6163      	str	r3, [r4, #20]
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI3);
    }
}
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	bf00      	nop
 80065d0:	40010400 	.word	0x40010400
 80065d4:	20000c6c 	.word	0x20000c6c

080065d8 <EXTI4_IRQHandler>:

void PS_LA_CH4_IRQh(void)
{
 80065d8:	b510      	push	{r4, lr}
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80065da:	4c05      	ldr	r4, [pc, #20]	; (80065f0 <EXTI4_IRQHandler+0x18>)
 80065dc:	6963      	ldr	r3, [r4, #20]
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI4) == 1)
 80065de:	06db      	lsls	r3, r3, #27
 80065e0:	d504      	bpl.n	80065ec <EXTI4_IRQHandler+0x14>
    {
        daq_trig_trigger_la(&daq);
 80065e2:	4804      	ldr	r0, [pc, #16]	; (80065f4 <EXTI4_IRQHandler+0x1c>)
 80065e4:	f7ff fba6 	bl	8005d34 <daq_trig_trigger_la>
  WRITE_REG(EXTI->PR, ExtiLine);
 80065e8:	2310      	movs	r3, #16
 80065ea:	6163      	str	r3, [r4, #20]
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI4);
    }
}
 80065ec:	bd10      	pop	{r4, pc}
 80065ee:	bf00      	nop
 80065f0:	40010400 	.word	0x40010400
 80065f4:	20000c6c 	.word	0x20000c6c

080065f8 <EXTI0_IRQHandler>:
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80065f8:	4b03      	ldr	r3, [pc, #12]	; (8006608 <EXTI0_IRQHandler+0x10>)
 80065fa:	695a      	ldr	r2, [r3, #20]

void EXTI0_IRQHandler(void)
{
    if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) == 1)
 80065fc:	07d2      	lsls	r2, r2, #31
  WRITE_REG(EXTI->PR, ExtiLine);
 80065fe:	bf44      	itt	mi
 8006600:	2201      	movmi	r2, #1
 8006602:	615a      	strmi	r2, [r3, #20]
    {
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
    }
}
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40010400 	.word	0x40010400

0800660c <led_init>:
#include "main.h"


void led_init(led_data_t* self)
{
    self->ms = 0;
 800660c:	2300      	movs	r3, #0
    self->num = 0;
 800660e:	e9c0 3300 	strd	r3, r3, [r0]
    self->enabled = 0;
    self->uwtick_first = 0;
 8006612:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 8006616:	4770      	bx	lr

08006618 <led_set>:

void led_set(led_data_t* self, uint8_t enable)
{
    self->enabled = enable;
 8006618:	60c1      	str	r1, [r0, #12]
 800661a:	4b06      	ldr	r3, [pc, #24]	; (8006634 <led_set+0x1c>)
    if (!self->enabled)
 800661c:	b921      	cbnz	r1, 8006628 <led_set+0x10>
        PS_LED_PORT->BSRR |= (1 << PS_LED_PIN);  // 1
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006624:	611a      	str	r2, [r3, #16]
 8006626:	4770      	bx	lr
    else
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800662e:	615a      	str	r2, [r3, #20]
}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40011000 	.word	0x40011000

08006638 <led_toggle>:

void led_toggle(led_data_t* self)
{
    if (self->enabled)
 8006638:	68c3      	ldr	r3, [r0, #12]
 800663a:	4a08      	ldr	r2, [pc, #32]	; (800665c <led_toggle+0x24>)
 800663c:	b143      	cbz	r3, 8006650 <led_toggle+0x18>
        PS_LED_PORT->BSRR |= (1 << PS_LED_PIN);  // 1
 800663e:	6911      	ldr	r1, [r2, #16]
 8006640:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8006644:	6111      	str	r1, [r2, #16]
    else
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
    self->enabled = !self->enabled;
 8006646:	fab3 f383 	clz	r3, r3
 800664a:	095b      	lsrs	r3, r3, #5
 800664c:	60c3      	str	r3, [r0, #12]
}
 800664e:	4770      	bx	lr
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
 8006650:	6951      	ldr	r1, [r2, #20]
 8006652:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8006656:	6151      	str	r1, [r2, #20]
 8006658:	e7f5      	b.n	8006646 <led_toggle+0xe>
 800665a:	bf00      	nop
 800665c:	40011000 	.word	0x40011000

08006660 <led_blink_set>:

void led_blink_set(led_data_t* self, int num, int ms)
{
    self->num = (num * 2) - 1;
 8006660:	0049      	lsls	r1, r1, #1
 8006662:	3901      	subs	r1, #1
    self->ms = ms;
 8006664:	e9c0 1200 	strd	r1, r2, [r0]
    self->uwtick_first = uwTick;
 8006668:	4a02      	ldr	r2, [pc, #8]	; (8006674 <led_blink_set+0x14>)
    led_set(self, 1);
 800666a:	2101      	movs	r1, #1
    self->uwtick_first = uwTick;
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	6082      	str	r2, [r0, #8]
    led_set(self, 1);
 8006670:	f7ff bfd2 	b.w	8006618 <led_set>
 8006674:	20000804 	.word	0x20000804

08006678 <led_blink_do>:
}

void led_blink_do(led_data_t* self)
{
    if (self->num > 0)
 8006678:	6801      	ldr	r1, [r0, #0]
{
 800667a:	b410      	push	{r4}
    if (self->num > 0)
 800667c:	2900      	cmp	r1, #0
 800667e:	dd12      	ble.n	80066a6 <led_blink_do+0x2e>
    {
        int diff;
        if (uwTick >= self->uwtick_first)
 8006680:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <led_blink_do+0x34>)
 8006682:	6882      	ldr	r2, [r0, #8]
 8006684:	681c      	ldr	r4, [r3, #0]
 8006686:	42a2      	cmp	r2, r4
            diff = uwTick - self->uwtick_first;
 8006688:	681c      	ldr	r4, [r3, #0]
        else
            diff = (uwTick - self->uwtick_first) + 4294967295;
 800668a:	bf88      	it	hi
 800668c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8006690:	1aa2      	subs	r2, r4, r2

        if (diff >= self->ms)
 8006692:	6844      	ldr	r4, [r0, #4]
 8006694:	4294      	cmp	r4, r2
 8006696:	dc06      	bgt.n	80066a6 <led_blink_do+0x2e>
        {
            self->uwtick_first = uwTick;
 8006698:	681b      	ldr	r3, [r3, #0]
            self->num--;
 800669a:	3901      	subs	r1, #1
            self->uwtick_first = uwTick;
 800669c:	6083      	str	r3, [r0, #8]
            self->num--;
 800669e:	6001      	str	r1, [r0, #0]
            led_toggle(self);
        }
    }
}
 80066a0:	bc10      	pop	{r4}
            led_toggle(self);
 80066a2:	f7ff bfc9 	b.w	8006638 <led_toggle>
}
 80066a6:	bc10      	pop	{r4}
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	20000804 	.word	0x20000804

080066b0 <LL_ADC_REG_SetSequencerRanks>:
{
 80066b0:	b530      	push	{r4, r5, lr}
 80066b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80066b6:	fa93 f3a3 	rbit	r3, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80066ba:	fab3 f383 	clz	r3, r3
  MODIFY_REG(*preg,
 80066be:	251f      	movs	r5, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80066c0:	f401 7440 	and.w	r4, r1, #768	; 0x300
 80066c4:	40dc      	lsrs	r4, r3
 80066c6:	302c      	adds	r0, #44	; 0x2c
  MODIFY_REG(*preg,
 80066c8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80066cc:	f001 011f 	and.w	r1, r1, #31
 80066d0:	408d      	lsls	r5, r1
 80066d2:	f002 021f 	and.w	r2, r2, #31
 80066d6:	ea23 0305 	bic.w	r3, r3, r5
 80066da:	408a      	lsls	r2, r1
 80066dc:	431a      	orrs	r2, r3
 80066de:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
}
 80066e2:	bd30      	pop	{r4, r5, pc}

080066e4 <LL_ADC_SetChannelSamplingTime>:
{
 80066e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80066ea:	fa96 f6a6 	rbit	r6, r6
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80066ee:	fab6 f386 	clz	r3, r6
 80066f2:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 80066f6:	40de      	lsrs	r6, r3
 80066f8:	300c      	adds	r0, #12
  MODIFY_REG(*preg,
 80066fa:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80066fe:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8006702:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8006706:	fa93 f5a3 	rbit	r5, r3
 800670a:	fab5 f585 	clz	r5, r5
 800670e:	fa93 f3a3 	rbit	r3, r3
 8006712:	2707      	movs	r7, #7
 8006714:	fab3 f383 	clz	r3, r3
 8006718:	fa21 f505 	lsr.w	r5, r1, r5
 800671c:	fa07 f505 	lsl.w	r5, r7, r5
 8006720:	40d9      	lsrs	r1, r3
 8006722:	ea24 0405 	bic.w	r4, r4, r5
 8006726:	fa02 f101 	lsl.w	r1, r2, r1
 800672a:	4321      	orrs	r1, r4
 800672c:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
}
 8006730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006734 <dma_set>:
#include "comm.h"
#include "main.h"


void dma_set(uint32_t src, DMA_TypeDef* dma, uint32_t dma_ch, uint32_t dst, uint32_t buff_size, uint32_t p_sz, uint32_t m_sz)
{
 8006734:	b530      	push	{r4, r5, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8006736:	4c11      	ldr	r4, [pc, #68]	; (800677c <dma_set+0x48>)
 8006738:	4422      	add	r2, r4
 800673a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800673e:	588d      	ldr	r5, [r1, r2]
 8006740:	188c      	adds	r4, r1, r2
 8006742:	f025 0501 	bic.w	r5, r5, #1
 8006746:	508d      	str	r5, [r1, r2]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8006748:	60a0      	str	r0, [r4, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800674a:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800674c:	588b      	ldr	r3, [r1, r2]
 800674e:	9804      	ldr	r0, [sp, #16]
 8006750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006754:	4303      	orrs	r3, r0
 8006756:	508b      	str	r3, [r1, r2]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8006758:	588b      	ldr	r3, [r1, r2]
 800675a:	9805      	ldr	r0, [sp, #20]
 800675c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006760:	4303      	orrs	r3, r0
 8006762:	508b      	str	r3, [r1, r2]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8006764:	6863      	ldr	r3, [r4, #4]
 8006766:	9803      	ldr	r0, [sp, #12]
 8006768:	0c1b      	lsrs	r3, r3, #16
 800676a:	041b      	lsls	r3, r3, #16
 800676c:	4303      	orrs	r3, r0
 800676e:	6063      	str	r3, [r4, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8006770:	588b      	ldr	r3, [r1, r2]
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	508b      	str	r3, [r1, r2]
    //LL_DMA_EnableIT_HT(dma, dma_ch); // Enable half transfer interrupt.
    //LL_DMA_EnableIT_TE(dma, dma_ch); // Enable transfer error interrupt.

    // Enable
    LL_DMA_EnableChannel(dma, dma_ch);
}
 8006778:	bd30      	pop	{r4, r5, pc}
 800677a:	bf00      	nop
 800677c:	0800c981 	.word	0x0800c981

08006780 <adc_init_calib>:
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006780:	6883      	ldr	r3, [r0, #8]
 8006782:	f043 0301 	orr.w	r3, r3, #1
 8006786:	6083      	str	r3, [r0, #8]
}

void adc_init_calib(ADC_TypeDef* adc)
{
    LL_ADC_Enable(adc);
    adc->CR2 |= ADC_CR2_TSVREFE;
 8006788:	6883      	ldr	r3, [r0, #8]
 800678a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800678e:	6083      	str	r3, [r0, #8]
  return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_DMA));
 8006790:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8006792:	6883      	ldr	r3, [r0, #8]
  return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_DMA));
 8006794:	f402 7280 	and.w	r2, r2, #256	; 0x100
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8006798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800679c:	6083      	str	r3, [r0, #8]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 800679e:	6883      	ldr	r3, [r0, #8]
 80067a0:	f043 0304 	orr.w	r3, r3, #4
 80067a4:	6083      	str	r3, [r0, #8]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80067a6:	6883      	ldr	r3, [r0, #8]
    //LL_ADC_Disable(adc);
    const uint32_t dma_tx_mode = LL_ADC_REG_GetDMATransfer(adc);
    LL_ADC_REG_SetDMATransfer(adc, LL_ADC_REG_DMA_TRANSFER_NONE);

    LL_ADC_StartCalibration(adc);
    while (LL_ADC_IsCalibrationOnGoing(adc) != 0);
 80067a8:	075b      	lsls	r3, r3, #29
 80067aa:	d4fc      	bmi.n	80067a6 <adc_init_calib+0x26>
 80067ac:	f242 7310 	movw	r3, #10000	; 0x2710

    for (int i = 0; i <  10000; ++i) asm("nop");
 80067b0:	bf00      	nop
 80067b2:	3b01      	subs	r3, #1
 80067b4:	d1fc      	bne.n	80067b0 <adc_init_calib+0x30>
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 80067b6:	6883      	ldr	r3, [r0, #8]
 80067b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067bc:	4313      	orrs	r3, r2
 80067be:	6083      	str	r3, [r0, #8]

    LL_ADC_REG_SetDMATransfer(adc, dma_tx_mode);
    //LL_ADC_Enable(adc);
}
 80067c0:	4770      	bx	lr
	...

080067c4 <adc_init>:
    adc_init_calib(ADC1);
 80067c4:	4801      	ldr	r0, [pc, #4]	; (80067cc <adc_init+0x8>)
 80067c6:	f7ff bfdb 	b.w	8006780 <adc_init_calib>
 80067ca:	bf00      	nop
 80067cc:	40012400 	.word	0x40012400

080067d0 <adc_get_next_rank>:
    //LL_ADC_Enable(adc);
}

uint32_t adc_get_next_rank(uint32_t rank)
{
    if (rank == LL_ADC_REG_RANK_1)
 80067d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80067d4:	f240 2305 	movw	r3, #517	; 0x205
 80067d8:	d00e      	beq.n	80067f8 <adc_get_next_rank+0x28>
        return LL_ADC_REG_RANK_2;
    if (rank == LL_ADC_REG_RANK_2)
 80067da:	4298      	cmp	r0, r3
 80067dc:	f240 230a 	movw	r3, #522	; 0x20a
 80067e0:	d00a      	beq.n	80067f8 <adc_get_next_rank+0x28>
        return LL_ADC_REG_RANK_3;
    else if (rank == LL_ADC_REG_RANK_3)
 80067e2:	4298      	cmp	r0, r3
 80067e4:	f240 230f 	movw	r3, #527	; 0x20f
 80067e8:	d006      	beq.n	80067f8 <adc_get_next_rank+0x28>
        return LL_ADC_REG_RANK_4;
    else if (rank == LL_ADC_REG_RANK_4)
        return LL_ADC_REG_RANK_5;
    else
        return LL_ADC_REG_RANK_6;
 80067ea:	f240 2219 	movw	r2, #537	; 0x219
 80067ee:	4298      	cmp	r0, r3
 80067f0:	bf14      	ite	ne
 80067f2:	4613      	movne	r3, r2
 80067f4:	f44f 7305 	moveq.w	r3, #532	; 0x214
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	4770      	bx	lr

080067fc <adc_set_ch>:
{
 80067fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006800:	468a      	mov	sl, r1
 8006802:	4691      	mov	r9, r2
 8006804:	4698      	mov	r8, r3
  MODIFY_REG(ADCx->CR2, ADC_CR2_EXTSEL, (TriggerSource & ADC_CR2_EXTSEL));
 8006806:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(ADCxy_COMMON->CR1, ADC_CR1_DUALMOD, Multimode);
 8006808:	4942      	ldr	r1, [pc, #264]	; (8006914 <adc_set_ch+0x118>)
  MODIFY_REG(ADCx->CR2, ADC_CR2_EXTSEL, (TriggerSource & ADC_CR2_EXTSEL));
 800680a:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800680e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006812:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCxy_COMMON->CR1, ADC_CR1_DUALMOD, Multimode);
 8006814:	684b      	ldr	r3, [r1, #4]
 8006816:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800681a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800681e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8006822:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006824:	604b      	str	r3, [r1, #4]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8006826:	6883      	ldr	r3, [r0, #8]
 8006828:	4604      	mov	r4, r0
 800682a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800682e:	6083      	str	r3, [r0, #8]
    int len = ch1 + ch2 + ch3 + ch4 + vrefint;
 8006830:	eb0a 0309 	add.w	r3, sl, r9
 8006834:	4443      	add	r3, r8
 8006836:	443b      	add	r3, r7
 8006838:	4413      	add	r3, r2
    if (len == 2)
 800683a:	2b02      	cmp	r3, #2
 800683c:	d05c      	beq.n	80068f8 <adc_set_ch+0xfc>
    if (len == 3)
 800683e:	2b03      	cmp	r3, #3
 8006840:	d05d      	beq.n	80068fe <adc_set_ch+0x102>
    else if (len == 4)
 8006842:	2b04      	cmp	r3, #4
 8006844:	d05e      	beq.n	8006904 <adc_set_ch+0x108>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS;
 8006846:	2b05      	cmp	r3, #5
 8006848:	bf14      	ite	ne
 800684a:	2100      	movne	r1, #0
 800684c:	f44f 0180 	moveq.w	r1, #4194304	; 0x400000
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006850:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006852:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006856:	430b      	orrs	r3, r1
 8006858:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (vrefint)
 800685a:	2a00      	cmp	r2, #0
 800685c:	d055      	beq.n	800690a <adc_set_ch+0x10e>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, LL_ADC_CHANNEL_VREFINT);
 800685e:	4a2e      	ldr	r2, [pc, #184]	; (8006918 <adc_set_ch+0x11c>)
 8006860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006864:	4620      	mov	r0, r4
 8006866:	f7ff ff23 	bl	80066b0 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, LL_ADC_CHANNEL_VREFINT, smpl_time);
 800686a:	4632      	mov	r2, r6
 800686c:	492a      	ldr	r1, [pc, #168]	; (8006918 <adc_set_ch+0x11c>)
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff ff38 	bl	80066e4 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 8006874:	f240 2505 	movw	r5, #517	; 0x205
    if (ch1) {
 8006878:	f1ba 0f00 	cmp.w	sl, #0
 800687c:	d00d      	beq.n	800689a <adc_set_ch+0x9e>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH1);
 800687e:	4629      	mov	r1, r5
 8006880:	4a26      	ldr	r2, [pc, #152]	; (800691c <adc_set_ch+0x120>)
 8006882:	4620      	mov	r0, r4
 8006884:	f7ff ff14 	bl	80066b0 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH1, smpl_time);
 8006888:	4632      	mov	r2, r6
 800688a:	4924      	ldr	r1, [pc, #144]	; (800691c <adc_set_ch+0x120>)
 800688c:	4620      	mov	r0, r4
 800688e:	f7ff ff29 	bl	80066e4 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 8006892:	4628      	mov	r0, r5
 8006894:	f7ff ff9c 	bl	80067d0 <adc_get_next_rank>
 8006898:	4605      	mov	r5, r0
    if (ch2) {
 800689a:	f1b9 0f00 	cmp.w	r9, #0
 800689e:	d00d      	beq.n	80068bc <adc_set_ch+0xc0>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH2);
 80068a0:	4629      	mov	r1, r5
 80068a2:	4a1f      	ldr	r2, [pc, #124]	; (8006920 <adc_set_ch+0x124>)
 80068a4:	4620      	mov	r0, r4
 80068a6:	f7ff ff03 	bl	80066b0 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH2, smpl_time);
 80068aa:	4632      	mov	r2, r6
 80068ac:	491c      	ldr	r1, [pc, #112]	; (8006920 <adc_set_ch+0x124>)
 80068ae:	4620      	mov	r0, r4
 80068b0:	f7ff ff18 	bl	80066e4 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 80068b4:	4628      	mov	r0, r5
 80068b6:	f7ff ff8b 	bl	80067d0 <adc_get_next_rank>
 80068ba:	4605      	mov	r5, r0
    if (ch3) {
 80068bc:	f1b8 0f00 	cmp.w	r8, #0
 80068c0:	d00d      	beq.n	80068de <adc_set_ch+0xe2>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH3);
 80068c2:	4629      	mov	r1, r5
 80068c4:	4a17      	ldr	r2, [pc, #92]	; (8006924 <adc_set_ch+0x128>)
 80068c6:	4620      	mov	r0, r4
 80068c8:	f7ff fef2 	bl	80066b0 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH3, smpl_time);
 80068cc:	4632      	mov	r2, r6
 80068ce:	4915      	ldr	r1, [pc, #84]	; (8006924 <adc_set_ch+0x128>)
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7ff ff07 	bl	80066e4 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 80068d6:	4628      	mov	r0, r5
 80068d8:	f7ff ff7a 	bl	80067d0 <adc_get_next_rank>
 80068dc:	4605      	mov	r5, r0
    if (ch4) {
 80068de:	b1bf      	cbz	r7, 8006910 <adc_set_ch+0x114>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH4);
 80068e0:	4629      	mov	r1, r5
 80068e2:	4620      	mov	r0, r4
 80068e4:	4a10      	ldr	r2, [pc, #64]	; (8006928 <adc_set_ch+0x12c>)
 80068e6:	f7ff fee3 	bl	80066b0 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH4, smpl_time);
 80068ea:	4632      	mov	r2, r6
 80068ec:	4620      	mov	r0, r4
}
 80068ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH4, smpl_time);
 80068f2:	490d      	ldr	r1, [pc, #52]	; (8006928 <adc_set_ch+0x12c>)
 80068f4:	f7ff bef6 	b.w	80066e4 <LL_ADC_SetChannelSamplingTime>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80068f8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80068fc:	e7a8      	b.n	8006850 <adc_set_ch+0x54>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 80068fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006902:	e7a5      	b.n	8006850 <adc_set_ch+0x54>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
 8006904:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
 8006908:	e7a2      	b.n	8006850 <adc_set_ch+0x54>
    uint32_t next_rank = LL_ADC_REG_RANK_1;
 800690a:	f44f 7500 	mov.w	r5, #512	; 0x200
 800690e:	e7b3      	b.n	8006878 <adc_set_ch+0x7c>
}
 8006910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006914:	40012400 	.word	0x40012400
 8006918:	81500011 	.word	0x81500011
 800691c:	02300001 	.word	0x02300001
 8006920:	02600002 	.word	0x02600002
 8006924:	02900003 	.word	0x02900003
 8006928:	02c00004 	.word	0x02c00004

0800692c <adc_set_res>:
    //LL_ADC_Disable(adc);
#ifdef PS_ADC_BIT8
    LL_ADC_SetResolution(adc, resolution);
#endif
    //LL_ADC_Enable(adc);
}
 800692c:	4770      	bx	lr
	...

08006930 <PS_Reset>:


/************************* [IEEE 488] *************************/

scpi_result_t PS_Reset(scpi_t * context)
{
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4605      	mov	r5, r0
    daq_enable(&daq, 0);
 8006934:	4c0a      	ldr	r4, [pc, #40]	; (8006960 <PS_Reset+0x30>)
 8006936:	2100      	movs	r1, #0
 8006938:	4620      	mov	r0, r4
 800693a:	f7fe fc81 	bl	8005240 <daq_enable>
    daq_settings_init(&daq);
 800693e:	4620      	mov	r0, r4
 8006940:	f7fe fb68 	bl	8005014 <daq_settings_init>
    daq_mode_set(&daq, VM);
 8006944:	4620      	mov	r0, r4
 8006946:	2101      	movs	r1, #1
 8006948:	f7fe ff36 	bl	80057b8 <daq_mode_set>
    daq_enable(&daq, 1);
 800694c:	4620      	mov	r0, r4
 800694e:	2101      	movs	r1, #1
 8006950:	f7fe fc76 	bl	8005240 <daq_enable>
    // TODO reset pwm?

    SCPI_ResultText(context, SCPI_OK);
 8006954:	4903      	ldr	r1, [pc, #12]	; (8006964 <PS_Reset+0x34>)
 8006956:	4628      	mov	r0, r5
 8006958:	f002 f858 	bl	8008a0c <SCPI_ResultText>
    return SCPI_RES_OK;
}
 800695c:	2001      	movs	r0, #1
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	20000c6c 	.word	0x20000c6c
 8006964:	0800c9da 	.word	0x0800c9da

08006968 <PS_System_Mode>:

/************************* [System Actions] *************************/

scpi_result_t PS_System_Mode(scpi_t * context)
{
 8006968:	b537      	push	{r0, r1, r2, r4, r5, lr}
    const char* p1;
    size_t p1l;

    if (!SCPI_ParamCharacters(context, &p1, &p1l, TRUE))
 800696a:	2301      	movs	r3, #1
 800696c:	aa01      	add	r2, sp, #4
 800696e:	4669      	mov	r1, sp
{
 8006970:	4605      	mov	r5, r0
    if (!SCPI_ParamCharacters(context, &p1, &p1l, TRUE))
 8006972:	f002 fa11 	bl	8008d98 <SCPI_ParamCharacters>
 8006976:	b318      	cbz	r0, 80069c0 <PS_System_Mode+0x58>
        return SCPI_RES_ERR;

    if (strcmp(p1, "SCOPE\r\n") == 0)
 8006978:	9c00      	ldr	r4, [sp, #0]
 800697a:	4913      	ldr	r1, [pc, #76]	; (80069c8 <PS_System_Mode+0x60>)
 800697c:	4620      	mov	r0, r4
 800697e:	f7f9 fbe7 	bl	8000150 <strcmp>
 8006982:	4601      	mov	r1, r0
 8006984:	b948      	cbnz	r0, 800699a <PS_System_Mode+0x32>
        daq_mode_set(&daq, SCOPE);
    else if (strcmp(p1, "VM\r\n") == 0)
        daq_mode_set(&daq, VM);
    else if (strcmp(p1, "LA\r\n") == 0)
        daq_mode_set(&daq, LA);
 8006986:	4811      	ldr	r0, [pc, #68]	; (80069cc <PS_System_Mode+0x64>)
 8006988:	f7fe ff16 	bl	80057b8 <daq_mode_set>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
        return SCPI_RES_ERR;
    }

    SCPI_ResultText(context, SCPI_OK);
 800698c:	4910      	ldr	r1, [pc, #64]	; (80069d0 <PS_System_Mode+0x68>)
 800698e:	4628      	mov	r0, r5
 8006990:	f002 f83c 	bl	8008a0c <SCPI_ResultText>
    return SCPI_RES_OK;
 8006994:	2001      	movs	r0, #1
}
 8006996:	b003      	add	sp, #12
 8006998:	bd30      	pop	{r4, r5, pc}
    else if (strcmp(p1, "VM\r\n") == 0)
 800699a:	490e      	ldr	r1, [pc, #56]	; (80069d4 <PS_System_Mode+0x6c>)
 800699c:	4620      	mov	r0, r4
 800699e:	f7f9 fbd7 	bl	8000150 <strcmp>
 80069a2:	b908      	cbnz	r0, 80069a8 <PS_System_Mode+0x40>
        daq_mode_set(&daq, VM);
 80069a4:	2101      	movs	r1, #1
 80069a6:	e7ee      	b.n	8006986 <PS_System_Mode+0x1e>
    else if (strcmp(p1, "LA\r\n") == 0)
 80069a8:	490b      	ldr	r1, [pc, #44]	; (80069d8 <PS_System_Mode+0x70>)
 80069aa:	4620      	mov	r0, r4
 80069ac:	f7f9 fbd0 	bl	8000150 <strcmp>
 80069b0:	b908      	cbnz	r0, 80069b6 <PS_System_Mode+0x4e>
        daq_mode_set(&daq, LA);
 80069b2:	2102      	movs	r1, #2
 80069b4:	e7e7      	b.n	8006986 <PS_System_Mode+0x1e>
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 80069b6:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 80069ba:	4628      	mov	r0, r5
 80069bc:	f001 f9d4 	bl	8007d68 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	e7e7      	b.n	8006996 <PS_System_Mode+0x2e>
 80069c6:	bf00      	nop
 80069c8:	0800ca46 	.word	0x0800ca46
 80069cc:	20000c6c 	.word	0x20000c6c
 80069d0:	0800c9da 	.word	0x0800c9da
 80069d4:	0800ca4e 	.word	0x0800ca4e
 80069d8:	0800ca53 	.word	0x0800ca53

080069dc <PS_System_ModeQ>:

scpi_result_t PS_System_ModeQ(scpi_t * context)
{
 80069dc:	b508      	push	{r3, lr}
    if (daq.mode == SCOPE)
 80069de:	f242 4308 	movw	r3, #9224	; 0x2408
 80069e2:	4a06      	ldr	r2, [pc, #24]	; (80069fc <PS_System_ModeQ+0x20>)
 80069e4:	5cd3      	ldrb	r3, [r2, r3]
 80069e6:	b923      	cbnz	r3, 80069f2 <PS_System_ModeQ+0x16>
        SCPI_ResultText(context, "SCOPE");
 80069e8:	4905      	ldr	r1, [pc, #20]	; (8006a00 <PS_System_ModeQ+0x24>)
    else if (daq.mode == VM)
        SCPI_ResultText(context, "VM");
    else
        SCPI_ResultText(context, "LA");
 80069ea:	f002 f80f 	bl	8008a0c <SCPI_ResultText>

    return SCPI_RES_OK;
}
 80069ee:	2001      	movs	r0, #1
 80069f0:	bd08      	pop	{r3, pc}
    else if (daq.mode == VM)
 80069f2:	2b01      	cmp	r3, #1
        SCPI_ResultText(context, "VM");
 80069f4:	bf0c      	ite	eq
 80069f6:	4903      	ldreq	r1, [pc, #12]	; (8006a04 <PS_System_ModeQ+0x28>)
        SCPI_ResultText(context, "LA");
 80069f8:	4903      	ldrne	r1, [pc, #12]	; (8006a08 <PS_System_ModeQ+0x2c>)
 80069fa:	e7f6      	b.n	80069ea <PS_System_ModeQ+0xe>
 80069fc:	20000c6c 	.word	0x20000c6c
 8006a00:	0800ca58 	.word	0x0800ca58
 8006a04:	0800ca5e 	.word	0x0800ca5e
 8006a08:	0800ca61 	.word	0x0800ca61

08006a0c <PS_System_LimitsQ>:

scpi_result_t PS_System_LimitsQ(scpi_t * context)
{
 8006a0c:	b530      	push	{r4, r5, lr}
    //sprint_fast(smplt12_s, "%s", PS_ADC_1CH_SMPL_TM(PS_ADC_SMPLT_MAX_N, PS_ADC_TCONV12), 8);
    //sprint_fast(smplt8_s, "%s", PS_ADC_1CH_SMPL_TM(PS_ADC_SMPLT_MAX_N, PS_ADC_TCONV8), 8);

    int pwm_max_f = PS_TIM_PWM1_FREQ / 2;

    int len = sprintf(buff, "%d,%d,%d,%d,%d,%d%s%s,%d,%d", PS_DAQ_MAX_B12_FS, PS_DAQ_MAX_B8_FS, PS_DAQ_MAX_MEM,
 8006a0e:	2401      	movs	r4, #1
{
 8006a10:	b09f      	sub	sp, #124	; 0x7c
    int len = sprintf(buff, "%d,%d,%d,%d,%d,%d%s%s,%d,%d", PS_DAQ_MAX_B12_FS, PS_DAQ_MAX_B8_FS, PS_DAQ_MAX_MEM,
 8006a12:	aa09      	add	r2, sp, #36	; 0x24
 8006a14:	9205      	str	r2, [sp, #20]
 8006a16:	aa08      	add	r2, sp, #32
 8006a18:	9204      	str	r2, [sp, #16]
 8006a1a:	4a0e      	ldr	r2, [pc, #56]	; (8006a54 <PS_System_LimitsQ+0x48>)
    char dual[2] = {'\0'};
 8006a1c:	2300      	movs	r3, #0
    int len = sprintf(buff, "%d,%d,%d,%d,%d,%d%s%s,%d,%d", PS_DAQ_MAX_B12_FS, PS_DAQ_MAX_B8_FS, PS_DAQ_MAX_MEM,
 8006a1e:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8006a22:	f242 3228 	movw	r2, #9000	; 0x2328
 8006a26:	490c      	ldr	r1, [pc, #48]	; (8006a58 <PS_System_LimitsQ+0x4c>)
{
 8006a28:	4605      	mov	r5, r0
    int len = sprintf(buff, "%d,%d,%d,%d,%d,%d%s%s,%d,%d", PS_DAQ_MAX_B12_FS, PS_DAQ_MAX_B8_FS, PS_DAQ_MAX_MEM,
 8006a2a:	e9cd 2100 	strd	r2, r1, [sp]
 8006a2e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8006a32:	4a0a      	ldr	r2, [pc, #40]	; (8006a5c <PS_System_LimitsQ+0x50>)
 8006a34:	490a      	ldr	r1, [pc, #40]	; (8006a60 <PS_System_LimitsQ+0x54>)
 8006a36:	a80a      	add	r0, sp, #40	; 0x28
    char dual[2] = {'\0'};
 8006a38:	f8ad 3020 	strh.w	r3, [sp, #32]
    char inter[2] = {'\0'};
 8006a3c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    int len = sprintf(buff, "%d,%d,%d,%d,%d,%d%s%s,%d,%d", PS_DAQ_MAX_B12_FS, PS_DAQ_MAX_B8_FS, PS_DAQ_MAX_MEM,
 8006a40:	f003 ff66 	bl	800a910 <siprintf>
                      PS_LA_MAX_FS, pwm_max_f, adcs, dual, inter, bit8, dac);

    SCPI_ResultCharacters(context, buff, len);
 8006a44:	a90a      	add	r1, sp, #40	; 0x28
 8006a46:	4602      	mov	r2, r0
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f001 ffc9 	bl	80089e0 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
}
 8006a4e:	4620      	mov	r0, r4
 8006a50:	b01f      	add	sp, #124	; 0x7c
 8006a52:	bd30      	pop	{r4, r5, pc}
 8006a54:	02255100 	.word	0x02255100
 8006a58:	004c4b40 	.word	0x004c4b40
 8006a5c:	000c3500 	.word	0x000c3500
 8006a60:	0800ca2a 	.word	0x0800ca2a

08006a64 <PS_VM_ReadQ>:

/************************* [VM Actions] *************************/

scpi_result_t PS_VM_ReadQ(scpi_t * context)
{
    if (daq.mode == VM)
 8006a64:	f242 4308 	movw	r3, #9224	; 0x2408
{
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (daq.mode == VM)
 8006a6c:	4c63      	ldr	r4, [pc, #396]	; (8006bfc <PS_VM_ReadQ+0x198>)
{
 8006a6e:	b0b7      	sub	sp, #220	; 0xdc
    if (daq.mode == VM)
 8006a70:	5ce5      	ldrb	r5, [r4, r3]
{
 8006a72:	4606      	mov	r6, r0
    if (daq.mode == VM)
 8006a74:	2d01      	cmp	r5, #1
 8006a76:	f040 80be 	bne.w	8006bf6 <PS_VM_ReadQ+0x192>
    {
        daq_enable(&daq, 0);
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f7fe fbdf 	bl	8005240 <daq_enable>

        uint32_t p1 = 0;
 8006a82:	2200      	movs	r2, #0
 8006a84:	9208      	str	r2, [sp, #32]
        if (context != NULL)
 8006a86:	b1d6      	cbz	r6, 8006abe <PS_VM_ReadQ+0x5a>
            SCPI_ParamUInt32(context, &p1, FALSE);
 8006a88:	a908      	add	r1, sp, #32
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f002 f981 	bl	8008d92 <SCPI_ParamUInt32>
        float ch2_raw = 0;
        float ch3_raw = 0;
        float ch4_raw = 0;

        int avg_num = 1;
        if (p1 > 0)
 8006a90:	9f08      	ldr	r7, [sp, #32]
            avg_num = (int)p1;

        if (avg_num > daq.set.mem)
 8006a92:	f242 33dc 	movw	r3, #9180	; 0x23dc
        if (p1 > 0)
 8006a96:	2f00      	cmp	r7, #0
 8006a98:	bf08      	it	eq
 8006a9a:	2701      	moveq	r7, #1
        float vcc_raw = 0;
 8006a9c:	2500      	movs	r5, #0
        if (avg_num > daq.set.mem)
 8006a9e:	5ae3      	ldrh	r3, [r4, r3]
        float vcc_raw = 0;
 8006aa0:	9509      	str	r5, [sp, #36]	; 0x24
        if (avg_num > daq.set.mem)
 8006aa2:	42bb      	cmp	r3, r7
        float ch1_raw = 0;
 8006aa4:	950a      	str	r5, [sp, #40]	; 0x28
        float ch2_raw = 0;
 8006aa6:	950b      	str	r5, [sp, #44]	; 0x2c
        float ch3_raw = 0;
 8006aa8:	950c      	str	r5, [sp, #48]	; 0x30
        float ch4_raw = 0;
 8006aaa:	950d      	str	r5, [sp, #52]	; 0x34
        if (avg_num > daq.set.mem)
 8006aac:	da09      	bge.n	8006ac2 <PS_VM_ReadQ+0x5e>
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006aae:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8006ab2:	4630      	mov	r0, r6
        SCPI_ResultCharacters(context, buff, len);
        return SCPI_RES_OK;
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006ab4:	f001 f958 	bl	8007d68 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8006abc:	e046      	b.n	8006b4c <PS_VM_ReadQ+0xe8>
            p1 = 1;
 8006abe:	9508      	str	r5, [sp, #32]
 8006ac0:	e7e6      	b.n	8006a90 <PS_VM_ReadQ+0x2c>
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8006ac2:	4b4f      	ldr	r3, [pc, #316]	; (8006c00 <PS_VM_ReadQ+0x19c>)
        int last1 = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_CH_ADC1, PS_DMA_ADC1);
 8006ac4:	88e1      	ldrh	r1, [r4, #6]
 8006ac6:	6858      	ldr	r0, [r3, #4]
 8006ac8:	b280      	uxth	r0, r0
 8006aca:	1a08      	subs	r0, r1, r0
 8006acc:	f000 ffbc 	bl	8007a48 <get_last_circ_idx>
        get_avg_from_circ(last1, 5, avg_num, daq.buff1.data, daq.set.bits, &vcc_raw, &ch1_raw, &ch2_raw, &ch3_raw, &ch4_raw);
 8006ad0:	ab0d      	add	r3, sp, #52	; 0x34
 8006ad2:	9305      	str	r3, [sp, #20]
 8006ad4:	ab0c      	add	r3, sp, #48	; 0x30
 8006ad6:	9304      	str	r3, [sp, #16]
 8006ad8:	ab0b      	add	r3, sp, #44	; 0x2c
 8006ada:	9303      	str	r3, [sp, #12]
 8006adc:	ab0a      	add	r3, sp, #40	; 0x28
 8006ade:	9302      	str	r3, [sp, #8]
 8006ae0:	ab09      	add	r3, sp, #36	; 0x24
 8006ae2:	9301      	str	r3, [sp, #4]
 8006ae4:	f242 33de 	movw	r3, #9182	; 0x23de
 8006ae8:	5ce3      	ldrb	r3, [r4, r3]
 8006aea:	463a      	mov	r2, r7
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	2105      	movs	r1, #5
 8006af2:	f000 fec4 	bl	800787e <get_avg_from_circ>
        float vcc = daq.adc_max_val * PS_ADC_VREF_CAL / vcc_raw / 1000;
 8006af6:	f242 4304 	movw	r3, #9220	; 0x2404
 8006afa:	58e7      	ldr	r7, [r4, r3]
 8006afc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006b00:	4940      	ldr	r1, [pc, #256]	; (8006c04 <PS_VM_ReadQ+0x1a0>)
 8006b02:	4638      	mov	r0, r7
 8006b04:	f7fa f928 	bl	8000d58 <__aeabi_fmul>
 8006b08:	4649      	mov	r1, r9
 8006b0a:	f7fa f9d9 	bl	8000ec0 <__aeabi_fdiv>
 8006b0e:	493e      	ldr	r1, [pc, #248]	; (8006c08 <PS_VM_ReadQ+0x1a4>)
 8006b10:	f7fa f9d6 	bl	8000ec0 <__aeabi_fdiv>
        float ch3 = vcc * ch3_raw / daq.adc_max_val;
 8006b14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        daq.vcc_mv = vcc * 1000;
 8006b16:	493c      	ldr	r1, [pc, #240]	; (8006c08 <PS_VM_ReadQ+0x1a4>)
        float ch3 = vcc * ch3_raw / daq.adc_max_val;
 8006b18:	9306      	str	r3, [sp, #24]
        float ch4 = vcc * ch4_raw / daq.adc_max_val;
 8006b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        float vcc = daq.adc_max_val * PS_ADC_VREF_CAL / vcc_raw / 1000;
 8006b1c:	4680      	mov	r8, r0
        float ch4 = vcc * ch4_raw / daq.adc_max_val;
 8006b1e:	9307      	str	r3, [sp, #28]
        daq.vcc = vcc_raw;
 8006b20:	f242 33f8 	movw	r3, #9208	; 0x23f8
 8006b24:	f844 9003 	str.w	r9, [r4, r3]
        daq.vcc_mv = vcc * 1000;
 8006b28:	f7fa f916 	bl	8000d58 <__aeabi_fmul>
 8006b2c:	f242 33fc 	movw	r3, #9212	; 0x23fc
        float ch1 = vcc * ch1_raw / daq.adc_max_val;
 8006b30:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
        float ch2 = vcc * ch2_raw / daq.adc_max_val;
 8006b34:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
        daq.vcc_mv = vcc * 1000;
 8006b38:	50e0      	str	r0, [r4, r3]
        if (context == NULL)
 8006b3a:	b956      	cbnz	r6, 8006b52 <PS_VM_ReadQ+0xee>
            if (daq.vcc_mv > 0)
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7fa fac7 	bl	80010d0 <__aeabi_fcmpgt>
                return SCPI_RES_ERR;
 8006b42:	2800      	cmp	r0, #0
 8006b44:	bf14      	ite	ne
 8006b46:	2001      	movne	r0, #1
 8006b48:	f04f 30ff 	moveq.w	r0, #4294967295
    }
}
 8006b4c:	b037      	add	sp, #220	; 0xdc
 8006b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sprint_fast(vcc_s, "%s", vcc, 4);
 8006b52:	ac0e      	add	r4, sp, #56	; 0x38
 8006b54:	2304      	movs	r3, #4
 8006b56:	4642      	mov	r2, r8
 8006b58:	4620      	mov	r0, r4
 8006b5a:	492c      	ldr	r1, [pc, #176]	; (8006c0c <PS_VM_ReadQ+0x1a8>)
 8006b5c:	f000 ffc0 	bl	8007ae0 <sprint_fast>
        float ch1 = vcc * ch1_raw / daq.adc_max_val;
 8006b60:	4641      	mov	r1, r8
 8006b62:	4658      	mov	r0, fp
 8006b64:	f7fa f8f8 	bl	8000d58 <__aeabi_fmul>
 8006b68:	4639      	mov	r1, r7
 8006b6a:	f7fa f9a9 	bl	8000ec0 <__aeabi_fdiv>
        sprint_fast(ch1_s, "%s", ch1, 4);
 8006b6e:	2304      	movs	r3, #4
 8006b70:	4602      	mov	r2, r0
 8006b72:	4926      	ldr	r1, [pc, #152]	; (8006c0c <PS_VM_ReadQ+0x1a8>)
 8006b74:	a811      	add	r0, sp, #68	; 0x44
 8006b76:	f000 ffb3 	bl	8007ae0 <sprint_fast>
        float ch2 = vcc * ch2_raw / daq.adc_max_val;
 8006b7a:	4641      	mov	r1, r8
 8006b7c:	4650      	mov	r0, sl
 8006b7e:	f7fa f8eb 	bl	8000d58 <__aeabi_fmul>
 8006b82:	4639      	mov	r1, r7
 8006b84:	f7fa f99c 	bl	8000ec0 <__aeabi_fdiv>
        sprint_fast(ch2_s, "%s", ch2, 4);
 8006b88:	2304      	movs	r3, #4
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	491f      	ldr	r1, [pc, #124]	; (8006c0c <PS_VM_ReadQ+0x1a8>)
 8006b8e:	a814      	add	r0, sp, #80	; 0x50
 8006b90:	f000 ffa6 	bl	8007ae0 <sprint_fast>
        float ch3 = vcc * ch3_raw / daq.adc_max_val;
 8006b94:	4641      	mov	r1, r8
 8006b96:	9806      	ldr	r0, [sp, #24]
 8006b98:	f7fa f8de 	bl	8000d58 <__aeabi_fmul>
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	f7fa f98f 	bl	8000ec0 <__aeabi_fdiv>
        sprint_fast(ch3_s, "%s", ch3, 4);
 8006ba2:	ad17      	add	r5, sp, #92	; 0x5c
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	2304      	movs	r3, #4
 8006ba8:	4918      	ldr	r1, [pc, #96]	; (8006c0c <PS_VM_ReadQ+0x1a8>)
 8006baa:	4628      	mov	r0, r5
 8006bac:	f000 ff98 	bl	8007ae0 <sprint_fast>
        float ch4 = vcc * ch4_raw / daq.adc_max_val;
 8006bb0:	4641      	mov	r1, r8
 8006bb2:	9807      	ldr	r0, [sp, #28]
 8006bb4:	f7fa f8d0 	bl	8000d58 <__aeabi_fmul>
 8006bb8:	4639      	mov	r1, r7
 8006bba:	f7fa f981 	bl	8000ec0 <__aeabi_fdiv>
        sprint_fast(ch4_s, "%s", ch4, 4);
 8006bbe:	af1a      	add	r7, sp, #104	; 0x68
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	2304      	movs	r3, #4
 8006bc4:	4911      	ldr	r1, [pc, #68]	; (8006c0c <PS_VM_ReadQ+0x1a8>)
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	f000 ff8a 	bl	8007ae0 <sprint_fast>
        int len = sprintf(buff, "%s,%s,%s,%s,%s", ch1_s, ch2_s, ch3_s, ch4_s, vcc_s);
 8006bcc:	ab14      	add	r3, sp, #80	; 0x50
 8006bce:	aa11      	add	r2, sp, #68	; 0x44
 8006bd0:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8006bd4:	490e      	ldr	r1, [pc, #56]	; (8006c10 <PS_VM_ReadQ+0x1ac>)
 8006bd6:	9500      	str	r5, [sp, #0]
 8006bd8:	a81d      	add	r0, sp, #116	; 0x74
 8006bda:	f003 fe99 	bl	800a910 <siprintf>
 8006bde:	4604      	mov	r4, r0
        daq_enable(&daq, 1);
 8006be0:	2101      	movs	r1, #1
 8006be2:	4806      	ldr	r0, [pc, #24]	; (8006bfc <PS_VM_ReadQ+0x198>)
 8006be4:	f7fe fb2c 	bl	8005240 <daq_enable>
        SCPI_ResultCharacters(context, buff, len);
 8006be8:	4622      	mov	r2, r4
 8006bea:	a91d      	add	r1, sp, #116	; 0x74
 8006bec:	4630      	mov	r0, r6
 8006bee:	f001 fef7 	bl	80089e0 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 8006bf2:	2001      	movs	r0, #1
 8006bf4:	e7aa      	b.n	8006b4c <PS_VM_ReadQ+0xe8>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	e75c      	b.n	8006ab4 <PS_VM_ReadQ+0x50>
 8006bfa:	bf00      	nop
 8006bfc:	20000c6c 	.word	0x20000c6c
 8006c00:	40020008 	.word	0x40020008
 8006c04:	44960000 	.word	0x44960000
 8006c08:	447a0000 	.word	0x447a0000
 8006c0c:	0800ca70 	.word	0x0800ca70
 8006c10:	0800ca64 	.word	0x0800ca64

08006c14 <PS_SCOPE_ReadQ>:

/************************* [SCOPE Actions] *************************/

scpi_result_t PS_SCOPE_ReadQ(scpi_t * context)
{
    if (daq.mode == SCOPE)
 8006c14:	f242 4208 	movw	r2, #9224	; 0x2408
{
 8006c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (daq.mode == SCOPE)
 8006c1c:	4b6f      	ldr	r3, [pc, #444]	; (8006ddc <PS_SCOPE_ReadQ+0x1c8>)
{
 8006c1e:	b08b      	sub	sp, #44	; 0x2c
    if (daq.mode == SCOPE)
 8006c20:	5c99      	ldrb	r1, [r3, r2]
{
 8006c22:	4606      	mov	r6, r0
 8006c24:	461c      	mov	r4, r3
    if (daq.mode == SCOPE)
 8006c26:	2900      	cmp	r1, #0
 8006c28:	f040 80d1 	bne.w	8006dce <PS_SCOPE_ReadQ+0x1ba>
    {
        if (daq.trig.ready == 0)
 8006c2c:	f242 424e 	movw	r2, #9294	; 0x244e
 8006c30:	5c9b      	ldrb	r3, [r3, r2]
 8006c32:	b933      	cbnz	r3, 8006c42 <PS_SCOPE_ReadQ+0x2e>
        {
            SCPI_ResultText(context, PS_RESP_NRDY);
 8006c34:	496a      	ldr	r1, [pc, #424]	; (8006de0 <PS_SCOPE_ReadQ+0x1cc>)
        }

        //ASSERT(added == daq.buff_out.len);
        if (added != daq.buff_out.len)
        {
            SCPI_ResultText(context, "ERROR: invalid buffer size"); // TODO DEBUG
 8006c36:	f001 fee9 	bl	8008a0c <SCPI_ResultText>
 8006c3a:	2001      	movs	r0, #1
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }
}
 8006c3c:	b00b      	add	sp, #44	; 0x2c
 8006c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (daq.trig.set.mode == DISABLED)
 8006c42:	f242 4314 	movw	r3, #9236	; 0x2414
 8006c46:	5ce3      	ldrb	r3, [r4, r3]
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d116      	bne.n	8006c7a <PS_SCOPE_ReadQ+0x66>
            daq_enable(&daq, 0);
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f7fe faf7 	bl	8005240 <daq_enable>
 8006c52:	f242 4388 	movw	r3, #9352	; 0x2488
 8006c56:	58e2      	ldr	r2, [r4, r3]
 8006c58:	4b62      	ldr	r3, [pc, #392]	; (8006de4 <PS_SCOPE_ReadQ+0x1d0>)
            daq.trig.pos_frst = PS_DMA_LAST_IDX(daq.buff1.len, daq.trig.dma_ch_trig, daq.trig.dma_trig);
 8006c5a:	88e1      	ldrh	r1, [r4, #6]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006c62:	f242 438c 	movw	r3, #9356	; 0x248c
 8006c66:	58e3      	ldr	r3, [r4, r3]
 8006c68:	4413      	add	r3, r2
 8006c6a:	6858      	ldr	r0, [r3, #4]
 8006c6c:	b280      	uxth	r0, r0
 8006c6e:	1a08      	subs	r0, r1, r0
 8006c70:	f000 feea 	bl	8007a48 <get_last_circ_idx>
 8006c74:	f242 4358 	movw	r3, #9304	; 0x2458
 8006c78:	50e0      	str	r0, [r4, r3]
        int idx = 0;
 8006c7a:	2100      	movs	r1, #0
        if (daq.set.bits == B8)
 8006c7c:	f242 33de 	movw	r3, #9182	; 0x23de
        int idx = 0;
 8006c80:	9109      	str	r1, [sp, #36]	; 0x24
        if (daq.set.ch1_en)
 8006c82:	f242 31d4 	movw	r1, #9172	; 0x23d4
        if (daq.set.bits == B8)
 8006c86:	5ce3      	ldrb	r3, [r4, r3]
        int buff1_mem = daq.buff1.len - daq.buff1.reserve;
 8006c88:	88e2      	ldrh	r2, [r4, #6]
 8006c8a:	8927      	ldrh	r7, [r4, #8]
        if (daq.set.ch1_en)
 8006c8c:	5c65      	ldrb	r5, [r4, r1]
        if (daq.set.bits == B8)
 8006c8e:	2b08      	cmp	r3, #8
            cal = PS_ADC_VREF_CAL / 10.0;
 8006c90:	bf0c      	ite	eq
 8006c92:	f8df 8158 	ldreq.w	r8, [pc, #344]	; 8006dec <PS_SCOPE_ReadQ+0x1d8>
        float cal = PS_ADC_VREF_CAL * 10.0;
 8006c96:	f8df 8158 	ldrne.w	r8, [pc, #344]	; 8006df0 <PS_SCOPE_ReadQ+0x1dc>
        int buff1_mem = daq.buff1.len - daq.buff1.reserve;
 8006c9a:	1bd7      	subs	r7, r2, r7
        if (daq.set.ch1_en)
 8006c9c:	2d00      	cmp	r5, #0
 8006c9e:	f000 808e 	beq.w	8006dbe <PS_SCOPE_ReadQ+0x1aa>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006ca2:	a909      	add	r1, sp, #36	; 0x24
 8006ca4:	9106      	str	r1, [sp, #24]
 8006ca6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ca8:	f242 4058 	movw	r0, #9304	; 0x2458
 8006cac:	9105      	str	r1, [sp, #20]
 8006cae:	6821      	ldr	r1, [r4, #0]
 8006cb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cb4:	9104      	str	r1, [sp, #16]
 8006cb6:	f242 31f8 	movw	r1, #9208	; 0x23f8
 8006cba:	5861      	ldr	r1, [r4, r1]
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	9102      	str	r1, [sp, #8]
 8006cc0:	88a3      	ldrh	r3, [r4, #4]
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	5820      	ldr	r0, [r4, r0]
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f000 fe5d 	bl	8007988 <get_1ch_from_circ>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	4605      	mov	r5, r0
        if (daq.set.ch2_en)
 8006cd2:	f242 32d5 	movw	r2, #9173	; 0x23d5
 8006cd6:	5ca2      	ldrb	r2, [r4, r2]
 8006cd8:	b1e2      	cbz	r2, 8006d14 <PS_SCOPE_ReadQ+0x100>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006cda:	a909      	add	r1, sp, #36	; 0x24
 8006cdc:	88e2      	ldrh	r2, [r4, #6]
 8006cde:	9106      	str	r1, [sp, #24]
 8006ce0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ce2:	f242 4058 	movw	r0, #9304	; 0x2458
 8006ce6:	9105      	str	r1, [sp, #20]
 8006ce8:	6821      	ldr	r1, [r4, #0]
 8006cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cee:	9104      	str	r1, [sp, #16]
 8006cf0:	f242 31f8 	movw	r1, #9208	; 0x23f8
 8006cf4:	5861      	ldr	r1, [r4, r1]
 8006cf6:	f103 0901 	add.w	r9, r3, #1
 8006cfa:	9102      	str	r1, [sp, #8]
                                       daq.set.bits, daq.vcc, cal, daq.buff1.data, daq.buff_out.data, &idx);
 8006cfc:	f242 31de 	movw	r1, #9182	; 0x23de
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006d00:	5c61      	ldrb	r1, [r4, r1]
 8006d02:	9101      	str	r1, [sp, #4]
 8006d04:	88a1      	ldrh	r1, [r4, #4]
 8006d06:	9100      	str	r1, [sp, #0]
 8006d08:	5820      	ldr	r0, [r4, r0]
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	f000 fe3c 	bl	8007988 <get_1ch_from_circ>
 8006d10:	464b      	mov	r3, r9
 8006d12:	4405      	add	r5, r0
        if (daq.set.ch3_en)
 8006d14:	f242 32d6 	movw	r2, #9174	; 0x23d6
 8006d18:	5ca2      	ldrb	r2, [r4, r2]
 8006d1a:	b1e2      	cbz	r2, 8006d56 <PS_SCOPE_ReadQ+0x142>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006d1c:	a909      	add	r1, sp, #36	; 0x24
 8006d1e:	88e2      	ldrh	r2, [r4, #6]
 8006d20:	9106      	str	r1, [sp, #24]
 8006d22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d24:	f242 4058 	movw	r0, #9304	; 0x2458
 8006d28:	9105      	str	r1, [sp, #20]
 8006d2a:	6821      	ldr	r1, [r4, #0]
 8006d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d30:	9104      	str	r1, [sp, #16]
 8006d32:	f242 31f8 	movw	r1, #9208	; 0x23f8
 8006d36:	5861      	ldr	r1, [r4, r1]
 8006d38:	f103 0901 	add.w	r9, r3, #1
 8006d3c:	9102      	str	r1, [sp, #8]
                                       daq.set.bits, daq.vcc, cal, daq.buff1.data, daq.buff_out.data, &idx);
 8006d3e:	f242 31de 	movw	r1, #9182	; 0x23de
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006d42:	5c61      	ldrb	r1, [r4, r1]
 8006d44:	9101      	str	r1, [sp, #4]
 8006d46:	88a1      	ldrh	r1, [r4, #4]
 8006d48:	9100      	str	r1, [sp, #0]
 8006d4a:	5820      	ldr	r0, [r4, r0]
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	f000 fe1b 	bl	8007988 <get_1ch_from_circ>
 8006d52:	464b      	mov	r3, r9
 8006d54:	4405      	add	r5, r0
        if (daq.set.ch4_en)
 8006d56:	f242 32d7 	movw	r2, #9175	; 0x23d7
 8006d5a:	5ca2      	ldrb	r2, [r4, r2]
 8006d5c:	b1ca      	cbz	r2, 8006d92 <PS_SCOPE_ReadQ+0x17e>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006d5e:	a909      	add	r1, sp, #36	; 0x24
 8006d60:	88e2      	ldrh	r2, [r4, #6]
 8006d62:	9106      	str	r1, [sp, #24]
 8006d64:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d66:	f242 4058 	movw	r0, #9304	; 0x2458
 8006d6a:	9105      	str	r1, [sp, #20]
 8006d6c:	6821      	ldr	r1, [r4, #0]
 8006d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d72:	9104      	str	r1, [sp, #16]
 8006d74:	f242 31f8 	movw	r1, #9208	; 0x23f8
 8006d78:	5861      	ldr	r1, [r4, r1]
 8006d7a:	9102      	str	r1, [sp, #8]
                                       daq.set.bits, daq.vcc, cal, daq.buff1.data, daq.buff_out.data, &idx);
 8006d7c:	f242 31de 	movw	r1, #9182	; 0x23de
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, ch_it++, daq.buff1.chans,
 8006d80:	5c61      	ldrb	r1, [r4, r1]
 8006d82:	9101      	str	r1, [sp, #4]
 8006d84:	88a1      	ldrh	r1, [r4, #4]
 8006d86:	9100      	str	r1, [sp, #0]
 8006d88:	5820      	ldr	r0, [r4, r0]
 8006d8a:	4639      	mov	r1, r7
 8006d8c:	f000 fdfc 	bl	8007988 <get_1ch_from_circ>
 8006d90:	4405      	add	r5, r0
        daq.trig.pretrig_cntr = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	f242 426c 	movw	r2, #9324	; 0x246c
 8006d98:	50a3      	str	r3, [r4, r2]
        daq.trig.ready = 0;
 8006d9a:	f242 424e 	movw	r2, #9294	; 0x244e
 8006d9e:	52a3      	strh	r3, [r4, r2]
        if (daq.trig.set.mode != SINGLE)
 8006da0:	f242 4314 	movw	r3, #9236	; 0x2414
 8006da4:	5ce3      	ldrb	r3, [r4, r3]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d003      	beq.n	8006db2 <PS_SCOPE_ReadQ+0x19e>
            daq_enable(&daq, 1);
 8006daa:	2101      	movs	r1, #1
 8006dac:	480b      	ldr	r0, [pc, #44]	; (8006ddc <PS_SCOPE_ReadQ+0x1c8>)
 8006dae:	f7fe fa47 	bl	8005240 <daq_enable>
        if (added != daq.buff_out.len)
 8006db2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006db4:	42ab      	cmp	r3, r5
 8006db6:	d004      	beq.n	8006dc2 <PS_SCOPE_ReadQ+0x1ae>
            SCPI_ResultText(context, "ERROR: invalid buffer size"); // TODO DEBUG
 8006db8:	490b      	ldr	r1, [pc, #44]	; (8006de8 <PS_SCOPE_ReadQ+0x1d4>)
 8006dba:	4630      	mov	r0, r6
 8006dbc:	e73b      	b.n	8006c36 <PS_SCOPE_ReadQ+0x22>
        int ch_it = 1; // 2 /w Vcc
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e787      	b.n	8006cd2 <PS_SCOPE_ReadQ+0xbe>
        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
 8006dc2:	462a      	mov	r2, r5
 8006dc4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f001 fef8 	bl	8008bbc <SCPI_ResultArbitraryBlock>
        return SCPI_RES_OK;
 8006dcc:	e735      	b.n	8006c3a <PS_SCOPE_ReadQ+0x26>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006dce:	2101      	movs	r1, #1
 8006dd0:	f000 ffca 	bl	8007d68 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e730      	b.n	8006c3c <PS_SCOPE_ReadQ+0x28>
 8006dda:	bf00      	nop
 8006ddc:	20000c6c 	.word	0x20000c6c
 8006de0:	0800c9dd 	.word	0x0800c9dd
 8006de4:	0800c988 	.word	0x0800c988
 8006de8:	0800c9e8 	.word	0x0800c9e8
 8006dec:	42f00000 	.word	0x42f00000
 8006df0:	463b8000 	.word	0x463b8000

08006df4 <PS_SCOPE_Set>:

scpi_result_t PS_SCOPE_Set(scpi_t * context)
{
    if (daq.mode == SCOPE)
 8006df4:	f242 4308 	movw	r3, #9224	; 0x2408
{
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (daq.mode == SCOPE)
 8006dfc:	4f8e      	ldr	r7, [pc, #568]	; (8007038 <PS_SCOPE_Set+0x244>)
{
 8006dfe:	b091      	sub	sp, #68	; 0x44
    if (daq.mode == SCOPE)
 8006e00:	5cfb      	ldrb	r3, [r7, r3]
{
 8006e02:	4604      	mov	r4, r0
    if (daq.mode == SCOPE)
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f040 8114 	bne.w	8007032 <PS_SCOPE_Set+0x23e>
        const char* p4;
        const char* p7;
        const char* p8;
        size_t p4l, p7l, p8l;

        if (!SCPI_ParamUInt32(context, &p1, TRUE) ||
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	a904      	add	r1, sp, #16
 8006e0e:	f001 ffc0 	bl	8008d92 <SCPI_ParamUInt32>
 8006e12:	b910      	cbnz	r0, 8006e1a <PS_SCOPE_Set+0x26>
        }
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	e0f5      	b.n	8007006 <PS_SCOPE_Set+0x212>
            !SCPI_ParamUInt32(context, &p2, TRUE) ||
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	a905      	add	r1, sp, #20
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f001 ffb7 	bl	8008d92 <SCPI_ParamUInt32>
        if (!SCPI_ParamUInt32(context, &p1, TRUE) ||
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d0f5      	beq.n	8006e14 <PS_SCOPE_Set+0x20>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 8006e28:	2201      	movs	r2, #1
 8006e2a:	a906      	add	r1, sp, #24
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f001 ffb0 	bl	8008d92 <SCPI_ParamUInt32>
            !SCPI_ParamUInt32(context, &p2, TRUE) ||
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d0ee      	beq.n	8006e14 <PS_SCOPE_Set+0x20>
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 8006e36:	2301      	movs	r3, #1
 8006e38:	aa0d      	add	r2, sp, #52	; 0x34
 8006e3a:	a90a      	add	r1, sp, #40	; 0x28
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f001 ffab 	bl	8008d98 <SCPI_ParamCharacters>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d0e6      	beq.n	8006e14 <PS_SCOPE_Set+0x20>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 8006e46:	2201      	movs	r2, #1
 8006e48:	a907      	add	r1, sp, #28
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f001 ffa1 	bl	8008d92 <SCPI_ParamUInt32>
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d0df      	beq.n	8006e14 <PS_SCOPE_Set+0x20>
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
 8006e54:	2201      	movs	r2, #1
 8006e56:	a908      	add	r1, sp, #32
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f001 ff9a 	bl	8008d92 <SCPI_ParamUInt32>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d0d8      	beq.n	8006e14 <PS_SCOPE_Set+0x20>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 8006e62:	2301      	movs	r3, #1
 8006e64:	aa0e      	add	r2, sp, #56	; 0x38
 8006e66:	a90b      	add	r1, sp, #44	; 0x2c
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f001 ff95 	bl	8008d98 <SCPI_ParamCharacters>
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d0d0      	beq.n	8006e14 <PS_SCOPE_Set+0x20>
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
 8006e72:	2301      	movs	r3, #1
 8006e74:	aa0f      	add	r2, sp, #60	; 0x3c
 8006e76:	a90c      	add	r1, sp, #48	; 0x30
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f001 ff8d 	bl	8008d98 <SCPI_ParamCharacters>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d0c8      	beq.n	8006e14 <PS_SCOPE_Set+0x20>
            !SCPI_ParamUInt32(context, &p9, TRUE))
 8006e82:	2201      	movs	r2, #1
 8006e84:	a909      	add	r1, sp, #36	; 0x24
 8006e86:	4620      	mov	r0, r4
 8006e88:	f001 ff83 	bl	8008d92 <SCPI_ParamUInt32>
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d0c1      	beq.n	8006e14 <PS_SCOPE_Set+0x20>
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 8006e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d12c      	bne.n	8006ef0 <PS_SCOPE_Set+0xfc>
 8006e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d129      	bne.n	8006ef0 <PS_SCOPE_Set+0xfc>
 8006e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d126      	bne.n	8006ef0 <PS_SCOPE_Set+0xfc>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 8006ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea4:	781a      	ldrb	r2, [r3, #0]
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 8006ea6:	2a54      	cmp	r2, #84	; 0x54
 8006ea8:	d001      	beq.n	8006eae <PS_SCOPE_Set+0xba>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 8006eaa:	2a46      	cmp	r2, #70	; 0x46
 8006eac:	d120      	bne.n	8006ef0 <PS_SCOPE_Set+0xfc>
 8006eae:	785a      	ldrb	r2, [r3, #1]
 8006eb0:	2a54      	cmp	r2, #84	; 0x54
 8006eb2:	d001      	beq.n	8006eb8 <PS_SCOPE_Set+0xc4>
 8006eb4:	2a46      	cmp	r2, #70	; 0x46
 8006eb6:	d11b      	bne.n	8006ef0 <PS_SCOPE_Set+0xfc>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 8006eb8:	789a      	ldrb	r2, [r3, #2]
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 8006eba:	2a54      	cmp	r2, #84	; 0x54
 8006ebc:	d001      	beq.n	8006ec2 <PS_SCOPE_Set+0xce>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 8006ebe:	2a46      	cmp	r2, #70	; 0x46
 8006ec0:	d116      	bne.n	8006ef0 <PS_SCOPE_Set+0xfc>
 8006ec2:	78db      	ldrb	r3, [r3, #3]
 8006ec4:	2b54      	cmp	r3, #84	; 0x54
 8006ec6:	d001      	beq.n	8006ecc <PS_SCOPE_Set+0xd8>
 8006ec8:	2b46      	cmp	r3, #70	; 0x46
 8006eca:	d111      	bne.n	8006ef0 <PS_SCOPE_Set+0xfc>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 8006ecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ece:	781b      	ldrb	r3, [r3, #0]
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 8006ed0:	2b52      	cmp	r3, #82	; 0x52
 8006ed2:	d001      	beq.n	8006ed8 <PS_SCOPE_Set+0xe4>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 8006ed4:	2b46      	cmp	r3, #70	; 0x46
 8006ed6:	d10b      	bne.n	8006ef0 <PS_SCOPE_Set+0xfc>
 8006ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eda:	781e      	ldrb	r6, [r3, #0]
 8006edc:	3e41      	subs	r6, #65	; 0x41
 8006ede:	b2f3      	uxtb	r3, r6
 8006ee0:	2b12      	cmp	r3, #18
 8006ee2:	d805      	bhi.n	8006ef0 <PS_SCOPE_Set+0xfc>
 8006ee4:	4e55      	ldr	r6, [pc, #340]	; (800703c <PS_SCOPE_Set+0x248>)
 8006ee6:	40de      	lsrs	r6, r3
 8006ee8:	43f6      	mvns	r6, r6
 8006eea:	f016 0601 	ands.w	r6, r6, #1
 8006eee:	d005      	beq.n	8006efc <PS_SCOPE_Set+0x108>
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8006ef0:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8006ef4:	4620      	mov	r0, r4
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8006ef6:	f000 ff37 	bl	8007d68 <SCPI_ErrorPush>
 8006efa:	e78b      	b.n	8006e14 <PS_SCOPE_Set+0x20>
        daq_settings_save(&daq.set, &daq.trig.set, &daq.save_s, &daq.trig.save_s);
 8006efc:	4b50      	ldr	r3, [pc, #320]	; (8007040 <PS_SCOPE_Set+0x24c>)
        daq.dis_hold = 1;
 8006efe:	f04f 0b01 	mov.w	fp, #1
        daq_settings_save(&daq.set, &daq.trig.set, &daq.save_s, &daq.trig.save_s);
 8006f02:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 8006f06:	f1a3 0114 	sub.w	r1, r3, #20
 8006f0a:	f1a3 0050 	sub.w	r0, r3, #80	; 0x50
 8006f0e:	f7fe f865 	bl	8004fdc <daq_settings_save>
        daq_enable(&daq, 0);
 8006f12:	4631      	mov	r1, r6
 8006f14:	4848      	ldr	r0, [pc, #288]	; (8007038 <PS_SCOPE_Set+0x244>)
 8006f16:	f7fe f993 	bl	8005240 <daq_enable>
        daq_reset(&daq);
 8006f1a:	4847      	ldr	r0, [pc, #284]	; (8007038 <PS_SCOPE_Set+0x244>)
 8006f1c:	f7fe f95a 	bl	80051d4 <daq_reset>
        daq.dis_hold = 1;
 8006f20:	f242 4309 	movw	r3, #9225	; 0x2409
        daq_mem_set(&daq, 3); // safety guard
 8006f24:	2103      	movs	r1, #3
 8006f26:	4844      	ldr	r0, [pc, #272]	; (8007038 <PS_SCOPE_Set+0x244>)
        daq.dis_hold = 1;
 8006f28:	f807 b003 	strb.w	fp, [r7, r3]
        daq_mem_set(&daq, 3); // safety guard
 8006f2c:	f7fe fa1a 	bl	8005364 <daq_mem_set>
        int ret2 = daq_bit_set(&daq, (int)p1);
 8006f30:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8006f34:	4840      	ldr	r0, [pc, #256]	; (8007038 <PS_SCOPE_Set+0x244>)
 8006f36:	f7fe fab3 	bl	80054a0 <daq_bit_set>
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 8006f3a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
        int ret2 = daq_bit_set(&daq, (int)p1);
 8006f3e:	4605      	mov	r5, r0
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 8006f40:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006f44:	f898 a001 	ldrb.w	sl, [r8, #1]
 8006f48:	f898 9000 	ldrb.w	r9, [r8]
 8006f4c:	f1a3 0254 	sub.w	r2, r3, #84	; 0x54
 8006f50:	4253      	negs	r3, r2
 8006f52:	f1aa 0154 	sub.w	r1, sl, #84	; 0x54
 8006f56:	4153      	adcs	r3, r2
 8006f58:	f1a9 0054 	sub.w	r0, r9, #84	; 0x54
 8006f5c:	f1d1 0a00 	rsbs	sl, r1, #0
 8006f60:	eb4a 0a01 	adc.w	sl, sl, r1
 8006f64:	f1d0 0900 	rsbs	r9, r0, #0
 8006f68:	eb49 0900 	adc.w	r9, r9, r0
 8006f6c:	9806      	ldr	r0, [sp, #24]
 8006f6e:	9303      	str	r3, [sp, #12]
 8006f70:	f7f9 fe9e 	bl	8000cb0 <__aeabi_i2f>
 8006f74:	9001      	str	r0, [sp, #4]
 8006f76:	f898 2003 	ldrb.w	r2, [r8, #3]
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	f1a2 0c54 	sub.w	ip, r2, #84	; 0x54
 8006f80:	f1dc 0200 	rsbs	r2, ip, #0
 8006f84:	eb42 020c 	adc.w	r2, r2, ip
 8006f88:	4649      	mov	r1, r9
 8006f8a:	9200      	str	r2, [sp, #0]
 8006f8c:	482a      	ldr	r0, [pc, #168]	; (8007038 <PS_SCOPE_Set+0x244>)
 8006f8e:	4652      	mov	r2, sl
 8006f90:	f7fe fb46 	bl	8005620 <daq_ch_set>
 8006f94:	4680      	mov	r8, r0
        int ret3 = daq_fs_set(&daq, (int)p3);
 8006f96:	9806      	ldr	r0, [sp, #24]
 8006f98:	f7f9 fe8a 	bl	8000cb0 <__aeabi_i2f>
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	4826      	ldr	r0, [pc, #152]	; (8007038 <PS_SCOPE_Set+0x244>)
 8006fa0:	f7fe fac4 	bl	800552c <daq_fs_set>
        int ret1 = daq_mem_set(&daq, (int)p2);
 8006fa4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
        int ret3 = daq_fs_set(&daq, (int)p3);
 8006fa8:	4681      	mov	r9, r0
        int ret1 = daq_mem_set(&daq, (int)p2);
 8006faa:	4823      	ldr	r0, [pc, #140]	; (8007038 <PS_SCOPE_Set+0x244>)
 8006fac:	f7fe f9da 	bl	8005364 <daq_mem_set>
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 8006fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        int ret1 = daq_mem_set(&daq, (int)p2);
 8006fb2:	4682      	mov	sl, r0
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 8006fb4:	980c      	ldr	r0, [sp, #48]	; 0x30
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 8006fb6:	781b      	ldrb	r3, [r3, #0]
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 8006fb8:	7800      	ldrb	r0, [r0, #0]
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 8006fba:	3b52      	subs	r3, #82	; 0x52
 8006fbc:	bf18      	it	ne
 8006fbe:	2301      	movne	r3, #1
 8006fc0:	2841      	cmp	r0, #65	; 0x41
 8006fc2:	9907      	ldr	r1, [sp, #28]
 8006fc4:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8006fc8:	d005      	beq.n	8006fd6 <PS_SCOPE_Set+0x1e2>
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 8006fca:	284e      	cmp	r0, #78	; 0x4e
 8006fcc:	d01e      	beq.n	800700c <PS_SCOPE_Set+0x218>
 8006fce:	2853      	cmp	r0, #83	; 0x53
 8006fd0:	bf14      	ite	ne
 8006fd2:	2603      	movne	r6, #3
 8006fd4:	2602      	moveq	r6, #2
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 8006fd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fd8:	e9cd 6000 	strd	r6, r0, [sp]
 8006fdc:	4816      	ldr	r0, [pc, #88]	; (8007038 <PS_SCOPE_Set+0x244>)
 8006fde:	f7fe ffc1 	bl	8005f64 <daq_trig_set>
        if (ret1 + ret2 + ret3 + ret4 + ret5 == 0)
 8006fe2:	eb05 030a 	add.w	r3, r5, sl
 8006fe6:	444b      	add	r3, r9
 8006fe8:	4443      	add	r3, r8
 8006fea:	1818      	adds	r0, r3, r0
 8006fec:	d110      	bne.n	8007010 <PS_SCOPE_Set+0x21c>
            daq.dis_hold = 0;
 8006fee:	f242 4309 	movw	r3, #9225	; 0x2409
            daq_enable(&daq, 1);
 8006ff2:	2101      	movs	r1, #1
            daq.dis_hold = 0;
 8006ff4:	54f8      	strb	r0, [r7, r3]
            daq_enable(&daq, 1);
 8006ff6:	4810      	ldr	r0, [pc, #64]	; (8007038 <PS_SCOPE_Set+0x244>)
 8006ff8:	f7fe f922 	bl	8005240 <daq_enable>
            SCPI_ResultText(context, SCPI_OK);
 8006ffc:	4911      	ldr	r1, [pc, #68]	; (8007044 <PS_SCOPE_Set+0x250>)
 8006ffe:	4620      	mov	r0, r4
 8007000:	f001 fd04 	bl	8008a0c <SCPI_ResultText>
            return SCPI_RES_OK;
 8007004:	2001      	movs	r0, #1
    }
}
 8007006:	b011      	add	sp, #68	; 0x44
 8007008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800700c:	465e      	mov	r6, fp
 800700e:	e7e2      	b.n	8006fd6 <PS_SCOPE_Set+0x1e2>
            daq.mode = VM;
 8007010:	2501      	movs	r5, #1
 8007012:	f242 4308 	movw	r3, #9224	; 0x2408
            daq_mode_set(&daq, SCOPE);  // reload saved settings
 8007016:	2100      	movs	r1, #0
 8007018:	4807      	ldr	r0, [pc, #28]	; (8007038 <PS_SCOPE_Set+0x244>)
            daq.mode = VM;
 800701a:	54fd      	strb	r5, [r7, r3]
            daq_mode_set(&daq, SCOPE);  // reload saved settings
 800701c:	f7fe fbcc 	bl	80057b8 <daq_mode_set>
            daq.dis_hold = 0;
 8007020:	f242 4309 	movw	r3, #9225	; 0x2409
 8007024:	2200      	movs	r2, #0
            daq_enable(&daq, 1);
 8007026:	4629      	mov	r1, r5
 8007028:	4803      	ldr	r0, [pc, #12]	; (8007038 <PS_SCOPE_Set+0x244>)
            daq.dis_hold = 0;
 800702a:	54fa      	strb	r2, [r7, r3]
            daq_enable(&daq, 1);
 800702c:	f7fe f908 	bl	8005240 <daq_enable>
 8007030:	e75e      	b.n	8006ef0 <PS_SCOPE_Set+0xfc>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8007032:	2101      	movs	r1, #1
 8007034:	e75f      	b.n	8006ef6 <PS_SCOPE_Set+0x102>
 8007036:	bf00      	nop
 8007038:	20000c6c 	.word	0x20000c6c
 800703c:	00042009 	.word	0x00042009
 8007040:	20003090 	.word	0x20003090
 8007044:	0800c9da 	.word	0x0800c9da

08007048 <PS_SCOPE_SetQ>:

scpi_result_t PS_SCOPE_SetQ(scpi_t * context)
{
    if (daq.mode == SCOPE)
 8007048:	f242 4308 	movw	r3, #9224	; 0x2408
{
 800704c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (daq.mode == SCOPE)
 800704e:	4c54      	ldr	r4, [pc, #336]	; (80071a0 <PS_SCOPE_SetQ+0x158>)
{
 8007050:	b0ad      	sub	sp, #180	; 0xb4
    if (daq.mode == SCOPE)
 8007052:	5ce3      	ldrb	r3, [r4, r3]
{
 8007054:	4607      	mov	r7, r0
    if (daq.mode == SCOPE)
 8007056:	2b00      	cmp	r3, #0
 8007058:	f040 8093 	bne.w	8007182 <PS_SCOPE_SetQ+0x13a>
        char freq_s[30];
        char chans_en[5];
        char edge_s[2];
        char mode_s[2];

        sprint_fast(freq_s, "%s", daq.set.fs, 3);
 800705c:	f242 32d8 	movw	r2, #9176	; 0x23d8
 8007060:	ad10      	add	r5, sp, #64	; 0x40
 8007062:	2303      	movs	r3, #3
 8007064:	58a2      	ldr	r2, [r4, r2]
 8007066:	494f      	ldr	r1, [pc, #316]	; (80071a4 <PS_SCOPE_SetQ+0x15c>)
 8007068:	4628      	mov	r0, r5
 800706a:	f000 fd39 	bl	8007ae0 <sprint_fast>
        chans_en[0] = daq.set.ch1_en ? 'T' : 'F';
 800706e:	f242 33d4 	movw	r3, #9172	; 0x23d4
 8007072:	5ce3      	ldrb	r3, [r4, r3]
 8007074:	2b00      	cmp	r3, #0
 8007076:	bf14      	ite	ne
 8007078:	2354      	movne	r3, #84	; 0x54
 800707a:	2346      	moveq	r3, #70	; 0x46
 800707c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        chans_en[1] = daq.set.ch2_en ? 'T' : 'F';
 8007080:	f242 33d5 	movw	r3, #9173	; 0x23d5
 8007084:	5ce3      	ldrb	r3, [r4, r3]
 8007086:	2b00      	cmp	r3, #0
 8007088:	bf14      	ite	ne
 800708a:	2354      	movne	r3, #84	; 0x54
 800708c:	2346      	moveq	r3, #70	; 0x46
 800708e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        chans_en[2] = daq.set.ch3_en ? 'T' : 'F';
 8007092:	f242 33d6 	movw	r3, #9174	; 0x23d6
 8007096:	5ce3      	ldrb	r3, [r4, r3]
 8007098:	2b00      	cmp	r3, #0
 800709a:	bf14      	ite	ne
 800709c:	2354      	movne	r3, #84	; 0x54
 800709e:	2346      	moveq	r3, #70	; 0x46
 80070a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        chans_en[3] = daq.set.ch4_en ? 'T' : 'F';
 80070a4:	f242 33d7 	movw	r3, #9175	; 0x23d7
 80070a8:	5ce3      	ldrb	r3, [r4, r3]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	bf14      	ite	ne
 80070ae:	2354      	movne	r3, #84	; 0x54
 80070b0:	2346      	moveq	r3, #70	; 0x46
 80070b2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        edge_s[0] = daq.trig.set.edge == RISING ? 'R' : 'F';
 80070b6:	f242 4315 	movw	r3, #9237	; 0x2415
 80070ba:	5ce3      	ldrb	r3, [r4, r3]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bf0c      	ite	eq
 80070c0:	2352      	moveq	r3, #82	; 0x52
 80070c2:	2346      	movne	r3, #70	; 0x46
 80070c4:	f88d 3020 	strb.w	r3, [sp, #32]
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 80070c8:	f242 4314 	movw	r3, #9236	; 0x2414
 80070cc:	5ce3      	ldrb	r3, [r4, r3]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d04f      	beq.n	8007172 <PS_SCOPE_SetQ+0x12a>
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d04f      	beq.n	8007176 <PS_SCOPE_SetQ+0x12e>
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	bf0c      	ite	eq
 80070da:	2353      	moveq	r3, #83	; 0x53
 80070dc:	2344      	movne	r3, #68	; 0x44
 80070de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            (daq.trig.set.mode == SINGLE ? 'S' : 'D'));
        chans_en[4] = '\0';
 80070e2:	2300      	movs	r3, #0
 80070e4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        edge_s[1] = '\0';
 80070e8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        mode_s[1] = '\0';
 80070ec:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

        char maxZ_s[15];
        float max_Z = PS_ADC_MAXZ(daq.smpl_time, daq.set.bits == B12 ? PS_LN2POW14 : PS_LN2POW10);
 80070f0:	4b2d      	ldr	r3, [pc, #180]	; (80071a8 <PS_SCOPE_SetQ+0x160>)
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	f7f9 f9a2 	bl	800043c <__aeabi_f2d>
 80070f8:	f242 33de 	movw	r3, #9182	; 0x23de
 80070fc:	5ce3      	ldrb	r3, [r4, r3]
 80070fe:	2b0c      	cmp	r3, #12
 8007100:	d03b      	beq.n	800717a <PS_SCOPE_SetQ+0x132>
 8007102:	a323      	add	r3, pc, #140	; (adr r3, 8007190 <PS_SCOPE_SetQ+0x148>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 fb1a 	bl	8000740 <__aeabi_ddiv>
 800710c:	2200      	movs	r2, #0
 800710e:	4b27      	ldr	r3, [pc, #156]	; (80071ac <PS_SCOPE_SetQ+0x164>)
 8007110:	f7f9 f834 	bl	800017c <__aeabi_dsub>
 8007114:	f7f9 fcc2 	bl	8000a9c <__aeabi_d2f>
        sprint_fast(maxZ_s, "%skOhm", max_Z, 1);
 8007118:	ae0c      	add	r6, sp, #48	; 0x30
 800711a:	4602      	mov	r2, r0
 800711c:	2301      	movs	r3, #1
 800711e:	4924      	ldr	r1, [pc, #144]	; (80071b0 <PS_SCOPE_SetQ+0x168>)
 8007120:	4630      	mov	r0, r6
 8007122:	f000 fcdd 	bl	8007ae0 <sprint_fast>

        int len = sprintf(buff, "\"%d,%d,%s,%s,%d,%d,%s,%s,%d,%s\"", daq.set.bits, daq.set.mem, freq_s, chans_en,
 8007126:	f242 4110 	movw	r1, #9232	; 0x2410
 800712a:	5861      	ldr	r1, [r4, r1]
 800712c:	f242 33dc 	movw	r3, #9180	; 0x23dc
 8007130:	9106      	str	r1, [sp, #24]
 8007132:	a909      	add	r1, sp, #36	; 0x24
 8007134:	9105      	str	r1, [sp, #20]
 8007136:	a908      	add	r1, sp, #32
 8007138:	9104      	str	r1, [sp, #16]
 800713a:	f242 4120 	movw	r1, #9248	; 0x2420
 800713e:	5861      	ldr	r1, [r4, r1]
 8007140:	f242 32de 	movw	r2, #9182	; 0x23de
 8007144:	9103      	str	r1, [sp, #12]
 8007146:	f242 4118 	movw	r1, #9240	; 0x2418
 800714a:	5861      	ldr	r1, [r4, r1]
 800714c:	5ae3      	ldrh	r3, [r4, r3]
 800714e:	9102      	str	r1, [sp, #8]
 8007150:	a90a      	add	r1, sp, #40	; 0x28
 8007152:	5ca2      	ldrb	r2, [r4, r2]
 8007154:	e9cd 5100 	strd	r5, r1, [sp]
 8007158:	9607      	str	r6, [sp, #28]
 800715a:	4916      	ldr	r1, [pc, #88]	; (80071b4 <PS_SCOPE_SetQ+0x16c>)
 800715c:	a818      	add	r0, sp, #96	; 0x60
 800715e:	f003 fbd7 	bl	800a910 <siprintf>
                          daq.trig.set.ch, daq.trig.set.val_percent, edge_s, mode_s, daq.trig.set.pretrigger, maxZ_s);

        SCPI_ResultCharacters(context, buff, len);
 8007162:	a918      	add	r1, sp, #96	; 0x60
 8007164:	4602      	mov	r2, r0
 8007166:	4638      	mov	r0, r7
 8007168:	f001 fc3a 	bl	80089e0 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 800716c:	2001      	movs	r0, #1
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }
}
 800716e:	b02d      	add	sp, #180	; 0xb4
 8007170:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 8007172:	2341      	movs	r3, #65	; 0x41
 8007174:	e7b3      	b.n	80070de <PS_SCOPE_SetQ+0x96>
 8007176:	234e      	movs	r3, #78	; 0x4e
 8007178:	e7b1      	b.n	80070de <PS_SCOPE_SetQ+0x96>
        float max_Z = PS_ADC_MAXZ(daq.smpl_time, daq.set.bits == B12 ? PS_LN2POW14 : PS_LN2POW10);
 800717a:	a307      	add	r3, pc, #28	; (adr r3, 8007198 <PS_SCOPE_SetQ+0x150>)
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	e7c2      	b.n	8007108 <PS_SCOPE_SetQ+0xc0>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8007182:	2101      	movs	r1, #1
 8007184:	f000 fdf0 	bl	8007d68 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	e7ef      	b.n	800716e <PS_SCOPE_SetQ+0x126>
 800718e:	bf00      	nop
 8007190:	3b8ef754 	.word	0x3b8ef754
 8007194:	3fe54b21 	.word	0x3fe54b21
 8007198:	540fa1b4 	.word	0x540fa1b4
 800719c:	3fedcf95 	.word	0x3fedcf95
 80071a0:	20000c6c 	.word	0x20000c6c
 80071a4:	0800ca70 	.word	0x0800ca70
 80071a8:	2000306c 	.word	0x2000306c
 80071ac:	3ff00000 	.word	0x3ff00000
 80071b0:	0800ca03 	.word	0x0800ca03
 80071b4:	0800ca0a 	.word	0x0800ca0a

080071b8 <PS_LA_ReadQ>:

/************************* [LA Actions] *************************/

scpi_result_t PS_LA_ReadQ(scpi_t * context)
{
    if (daq.mode == LA)
 80071b8:	f242 4208 	movw	r2, #9224	; 0x2408
{
 80071bc:	b538      	push	{r3, r4, r5, lr}
    if (daq.mode == LA)
 80071be:	4b27      	ldr	r3, [pc, #156]	; (800725c <PS_LA_ReadQ+0xa4>)
{
 80071c0:	4605      	mov	r5, r0
    if (daq.mode == LA)
 80071c2:	5c9a      	ldrb	r2, [r3, r2]
 80071c4:	461c      	mov	r4, r3
 80071c6:	2a02      	cmp	r2, #2
 80071c8:	d142      	bne.n	8007250 <PS_LA_ReadQ+0x98>
    {
        if (daq.trig.ready == 0)
 80071ca:	f242 424e 	movw	r2, #9294	; 0x244e
 80071ce:	5c9b      	ldrb	r3, [r3, r2]
 80071d0:	b923      	cbnz	r3, 80071dc <PS_LA_ReadQ+0x24>
        {
            SCPI_ResultText(context, PS_RESP_NRDY);
 80071d2:	4923      	ldr	r1, [pc, #140]	; (8007260 <PS_LA_ReadQ+0xa8>)
 80071d4:	f001 fc1a 	bl	8008a0c <SCPI_ResultText>
        {
            daq_enable(&daq, 1);
        }

        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
        return SCPI_RES_OK;
 80071d8:	2001      	movs	r0, #1
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }
}
 80071da:	bd38      	pop	{r3, r4, r5, pc}
        if (daq.trig.set.mode == DISABLED)
 80071dc:	f242 4314 	movw	r3, #9236	; 0x2414
 80071e0:	5ce3      	ldrb	r3, [r4, r3]
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d10d      	bne.n	8007202 <PS_LA_ReadQ+0x4a>
            daq_enable(&daq, 0);
 80071e6:	2100      	movs	r1, #0
 80071e8:	4620      	mov	r0, r4
 80071ea:	f7fe f829 	bl	8005240 <daq_enable>
 80071ee:	4b1d      	ldr	r3, [pc, #116]	; (8007264 <PS_LA_ReadQ+0xac>)
            daq.trig.pos_frst = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_CH_LA, PS_DMA_LA);
 80071f0:	88e1      	ldrh	r1, [r4, #6]
 80071f2:	6858      	ldr	r0, [r3, #4]
 80071f4:	b280      	uxth	r0, r0
 80071f6:	1a08      	subs	r0, r1, r0
 80071f8:	f000 fc26 	bl	8007a48 <get_last_circ_idx>
 80071fc:	f242 4358 	movw	r3, #9304	; 0x2458
 8007200:	50e0      	str	r0, [r4, r3]
        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 8007202:	f242 4358 	movw	r3, #9304	; 0x2458
 8007206:	2200      	movs	r2, #0
 8007208:	58e3      	ldr	r3, [r4, r3]
 800720a:	88e1      	ldrh	r1, [r4, #6]
 800720c:	4291      	cmp	r1, r2
 800720e:	dc15      	bgt.n	800723c <PS_LA_ReadQ+0x84>
        daq.trig.pretrig_cntr = 0;
 8007210:	2300      	movs	r3, #0
 8007212:	f242 426c 	movw	r2, #9324	; 0x246c
 8007216:	50a3      	str	r3, [r4, r2]
        daq.trig.ready = 0;
 8007218:	f242 424e 	movw	r2, #9294	; 0x244e
 800721c:	52a3      	strh	r3, [r4, r2]
        if (daq.trig.set.mode != SINGLE)
 800721e:	f242 4314 	movw	r3, #9236	; 0x2414
 8007222:	5ce3      	ldrb	r3, [r4, r3]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d003      	beq.n	8007230 <PS_LA_ReadQ+0x78>
            daq_enable(&daq, 1);
 8007228:	2101      	movs	r1, #1
 800722a:	480c      	ldr	r0, [pc, #48]	; (800725c <PS_LA_ReadQ+0xa4>)
 800722c:	f7fe f808 	bl	8005240 <daq_enable>
        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
 8007230:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8007232:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007234:	4628      	mov	r0, r5
 8007236:	f001 fcc1 	bl	8008bbc <SCPI_ResultArbitraryBlock>
 800723a:	e7cd      	b.n	80071d8 <PS_LA_ReadQ+0x20>
                i = 0;
 800723c:	4299      	cmp	r1, r3
 800723e:	bfd8      	it	le
 8007240:	2300      	movle	r3, #0
            ((uint8_t*)daq.buff_out.data)[k] = (uint8_t)(((uint8_t*)daq.buff1.data)[i]);
 8007242:	6821      	ldr	r1, [r4, #0]
 8007244:	5cc8      	ldrb	r0, [r1, r3]
 8007246:	6b21      	ldr	r1, [r4, #48]	; 0x30
        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 8007248:	3301      	adds	r3, #1
            ((uint8_t*)daq.buff_out.data)[k] = (uint8_t)(((uint8_t*)daq.buff1.data)[i]);
 800724a:	5488      	strb	r0, [r1, r2]
        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 800724c:	3201      	adds	r2, #1
 800724e:	e7dc      	b.n	800720a <PS_LA_ReadQ+0x52>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8007250:	2101      	movs	r1, #1
 8007252:	f000 fd89 	bl	8007d68 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8007256:	f04f 30ff 	mov.w	r0, #4294967295
 800725a:	e7be      	b.n	80071da <PS_LA_ReadQ+0x22>
 800725c:	20000c6c 	.word	0x20000c6c
 8007260:	0800c9dd 	.word	0x0800c9dd
 8007264:	4002006c 	.word	0x4002006c

08007268 <PS_LA_Set>:

scpi_result_t PS_LA_Set(scpi_t * context)
{
    if (daq.mode == LA)
 8007268:	f242 4308 	movw	r3, #9224	; 0x2408
{
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (daq.mode == LA)
 8007270:	4f66      	ldr	r7, [pc, #408]	; (800740c <PS_LA_Set+0x1a4>)
{
 8007272:	b08b      	sub	sp, #44	; 0x2c
    if (daq.mode == LA)
 8007274:	5cfb      	ldrb	r3, [r7, r3]
{
 8007276:	4606      	mov	r6, r0
    if (daq.mode == LA)
 8007278:	2b02      	cmp	r3, #2
 800727a:	f040 80c4 	bne.w	8007406 <PS_LA_Set+0x19e>
        uint32_t p2, p3, p5, p9;
        const char* p7;
        const char* p8;
        size_t p7l, p8l;

        if (!SCPI_ParamUInt32(context, &p2, TRUE) ||
 800727e:	2201      	movs	r2, #1
 8007280:	a902      	add	r1, sp, #8
 8007282:	f001 fd86 	bl	8008d92 <SCPI_ParamUInt32>
 8007286:	b910      	cbnz	r0, 800728e <PS_LA_Set+0x26>
        }
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
 8007288:	f04f 30ff 	mov.w	r0, #4294967295
 800728c:	e0a5      	b.n	80073da <PS_LA_Set+0x172>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800728e:	2201      	movs	r2, #1
 8007290:	a903      	add	r1, sp, #12
 8007292:	4630      	mov	r0, r6
 8007294:	f001 fd7d 	bl	8008d92 <SCPI_ParamUInt32>
        if (!SCPI_ParamUInt32(context, &p2, TRUE) ||
 8007298:	2800      	cmp	r0, #0
 800729a:	d0f5      	beq.n	8007288 <PS_LA_Set+0x20>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800729c:	2201      	movs	r2, #1
 800729e:	a904      	add	r1, sp, #16
 80072a0:	4630      	mov	r0, r6
 80072a2:	f001 fd76 	bl	8008d92 <SCPI_ParamUInt32>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d0ee      	beq.n	8007288 <PS_LA_Set+0x20>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 80072aa:	2301      	movs	r3, #1
 80072ac:	aa08      	add	r2, sp, #32
 80072ae:	a906      	add	r1, sp, #24
 80072b0:	4630      	mov	r0, r6
 80072b2:	f001 fd71 	bl	8008d98 <SCPI_ParamCharacters>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d0e6      	beq.n	8007288 <PS_LA_Set+0x20>
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
 80072ba:	2301      	movs	r3, #1
 80072bc:	aa09      	add	r2, sp, #36	; 0x24
 80072be:	a907      	add	r1, sp, #28
 80072c0:	4630      	mov	r0, r6
 80072c2:	f001 fd69 	bl	8008d98 <SCPI_ParamCharacters>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d0de      	beq.n	8007288 <PS_LA_Set+0x20>
            !SCPI_ParamUInt32(context, &p9, TRUE))
 80072ca:	2201      	movs	r2, #1
 80072cc:	a905      	add	r1, sp, #20
 80072ce:	4630      	mov	r0, r6
 80072d0:	f001 fd5f 	bl	8008d92 <SCPI_ParamUInt32>
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d0d7      	beq.n	8007288 <PS_LA_Set+0x20>
        if (p7l != 1 || p8l != 1 ||
 80072d8:	9b08      	ldr	r3, [sp, #32]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d117      	bne.n	800730e <PS_LA_Set+0xa6>
 80072de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d114      	bne.n	800730e <PS_LA_Set+0xa6>
            (p7[0] != 'R' && p7[0] != 'F') ||
 80072e4:	9b06      	ldr	r3, [sp, #24]
 80072e6:	781b      	ldrb	r3, [r3, #0]
        if (p7l != 1 || p8l != 1 ||
 80072e8:	2b52      	cmp	r3, #82	; 0x52
 80072ea:	d001      	beq.n	80072f0 <PS_LA_Set+0x88>
            (p7[0] != 'R' && p7[0] != 'F') ||
 80072ec:	2b46      	cmp	r3, #70	; 0x46
 80072ee:	d10e      	bne.n	800730e <PS_LA_Set+0xa6>
            (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 80072f0:	9b07      	ldr	r3, [sp, #28]
            (p7[0] != 'R' && p7[0] != 'F') ||
 80072f2:	781c      	ldrb	r4, [r3, #0]
 80072f4:	3c41      	subs	r4, #65	; 0x41
 80072f6:	fa5f fb84 	uxtb.w	fp, r4
 80072fa:	f1bb 0f12 	cmp.w	fp, #18
 80072fe:	d806      	bhi.n	800730e <PS_LA_Set+0xa6>
 8007300:	4c43      	ldr	r4, [pc, #268]	; (8007410 <PS_LA_Set+0x1a8>)
 8007302:	fa24 f40b 	lsr.w	r4, r4, fp
 8007306:	43e4      	mvns	r4, r4
 8007308:	f014 0b01 	ands.w	fp, r4, #1
 800730c:	d005      	beq.n	800731a <PS_LA_Set+0xb2>
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800730e:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8007312:	4630      	mov	r0, r6
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8007314:	f000 fd28 	bl	8007d68 <SCPI_ErrorPush>
 8007318:	e7b6      	b.n	8007288 <PS_LA_Set+0x20>
        daq_settings_save(&daq.set, &daq.trig.set, &daq.save_l, &daq.trig.save_l);
 800731a:	4b3e      	ldr	r3, [pc, #248]	; (8007414 <PS_LA_Set+0x1ac>)
        daq.dis_hold = 1;
 800731c:	2401      	movs	r4, #1
        daq_settings_save(&daq.set, &daq.trig.set, &daq.save_l, &daq.trig.save_l);
 800731e:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
 8007322:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8007326:	f1a3 0064 	sub.w	r0, r3, #100	; 0x64
 800732a:	f7fd fe57 	bl	8004fdc <daq_settings_save>
        daq_enable(&daq, 0);
 800732e:	4659      	mov	r1, fp
 8007330:	4836      	ldr	r0, [pc, #216]	; (800740c <PS_LA_Set+0x1a4>)
 8007332:	f7fd ff85 	bl	8005240 <daq_enable>
        daq_reset(&daq);
 8007336:	4835      	ldr	r0, [pc, #212]	; (800740c <PS_LA_Set+0x1a4>)
 8007338:	f7fd ff4c 	bl	80051d4 <daq_reset>
        daq.dis_hold = 1;
 800733c:	f242 4309 	movw	r3, #9225	; 0x2409
        daq_mem_set(&daq, 3); // safety guard
 8007340:	2103      	movs	r1, #3
 8007342:	4832      	ldr	r0, [pc, #200]	; (800740c <PS_LA_Set+0x1a4>)
        daq.dis_hold = 1;
 8007344:	54fc      	strb	r4, [r7, r3]
        daq_mem_set(&daq, 3); // safety guard
 8007346:	f7fe f80d 	bl	8005364 <daq_mem_set>
        int ret2 = daq_bit_set(&daq, B1);
 800734a:	4621      	mov	r1, r4
 800734c:	482f      	ldr	r0, [pc, #188]	; (800740c <PS_LA_Set+0x1a4>)
 800734e:	f7fe f8a7 	bl	80054a0 <daq_bit_set>
 8007352:	4605      	mov	r5, r0
        int ret4 = daq_ch_set(&daq, 1, 1, 1, 1, (int)p3);
 8007354:	9803      	ldr	r0, [sp, #12]
 8007356:	f7f9 fcab 	bl	8000cb0 <__aeabi_i2f>
 800735a:	4623      	mov	r3, r4
 800735c:	4622      	mov	r2, r4
 800735e:	4621      	mov	r1, r4
 8007360:	9001      	str	r0, [sp, #4]
 8007362:	9400      	str	r4, [sp, #0]
 8007364:	4829      	ldr	r0, [pc, #164]	; (800740c <PS_LA_Set+0x1a4>)
 8007366:	f7fe f95b 	bl	8005620 <daq_ch_set>
 800736a:	4680      	mov	r8, r0
        int ret3 = daq_fs_set(&daq, (int)p3);
 800736c:	9803      	ldr	r0, [sp, #12]
 800736e:	f7f9 fc9f 	bl	8000cb0 <__aeabi_i2f>
 8007372:	4601      	mov	r1, r0
 8007374:	4825      	ldr	r0, [pc, #148]	; (800740c <PS_LA_Set+0x1a4>)
 8007376:	f7fe f8d9 	bl	800552c <daq_fs_set>
        int ret1 = daq_mem_set(&daq, (int)p2);
 800737a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
        int ret3 = daq_fs_set(&daq, (int)p3);
 800737e:	4681      	mov	r9, r0
        int ret1 = daq_mem_set(&daq, (int)p2);
 8007380:	4822      	ldr	r0, [pc, #136]	; (800740c <PS_LA_Set+0x1a4>)
 8007382:	f7fd ffef 	bl	8005364 <daq_mem_set>
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 8007386:	9b06      	ldr	r3, [sp, #24]
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 8007388:	9a07      	ldr	r2, [sp, #28]
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800738a:	781b      	ldrb	r3, [r3, #0]
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800738c:	7812      	ldrb	r2, [r2, #0]
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800738e:	3b52      	subs	r3, #82	; 0x52
 8007390:	bf18      	it	ne
 8007392:	2301      	movne	r3, #1
 8007394:	2a41      	cmp	r2, #65	; 0x41
        int ret1 = daq_mem_set(&daq, (int)p2);
 8007396:	4682      	mov	sl, r0
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 8007398:	9904      	ldr	r1, [sp, #16]
 800739a:	d021      	beq.n	80073e0 <PS_LA_Set+0x178>
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800739c:	2a4e      	cmp	r2, #78	; 0x4e
 800739e:	d003      	beq.n	80073a8 <PS_LA_Set+0x140>
 80073a0:	2a53      	cmp	r2, #83	; 0x53
 80073a2:	bf14      	ite	ne
 80073a4:	2403      	movne	r4, #3
 80073a6:	2402      	moveq	r4, #2
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 80073a8:	9a05      	ldr	r2, [sp, #20]
 80073aa:	4818      	ldr	r0, [pc, #96]	; (800740c <PS_LA_Set+0x1a4>)
 80073ac:	e9cd 4200 	strd	r4, r2, [sp]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f7fe fdd7 	bl	8005f64 <daq_trig_set>
        if (ret1 + ret2 + ret3 + ret4 + ret5 == 0)
 80073b6:	eb05 030a 	add.w	r3, r5, sl
 80073ba:	444b      	add	r3, r9
 80073bc:	4443      	add	r3, r8
 80073be:	1818      	adds	r0, r3, r0
 80073c0:	d110      	bne.n	80073e4 <PS_LA_Set+0x17c>
            daq.dis_hold = 0;
 80073c2:	f242 4309 	movw	r3, #9225	; 0x2409
            daq_enable(&daq, 1);
 80073c6:	2101      	movs	r1, #1
            daq.dis_hold = 0;
 80073c8:	54f8      	strb	r0, [r7, r3]
            daq_enable(&daq, 1);
 80073ca:	4810      	ldr	r0, [pc, #64]	; (800740c <PS_LA_Set+0x1a4>)
 80073cc:	f7fd ff38 	bl	8005240 <daq_enable>
            SCPI_ResultText(context, SCPI_OK);
 80073d0:	4911      	ldr	r1, [pc, #68]	; (8007418 <PS_LA_Set+0x1b0>)
 80073d2:	4630      	mov	r0, r6
 80073d4:	f001 fb1a 	bl	8008a0c <SCPI_ResultText>
            return SCPI_RES_OK;
 80073d8:	2001      	movs	r0, #1
    }
}
 80073da:	b00b      	add	sp, #44	; 0x2c
 80073dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 80073e0:	465c      	mov	r4, fp
 80073e2:	e7e1      	b.n	80073a8 <PS_LA_Set+0x140>
            daq.mode = VM;
 80073e4:	2401      	movs	r4, #1
 80073e6:	f242 4308 	movw	r3, #9224	; 0x2408
            daq_mode_set(&daq, LA); // reload saved settings
 80073ea:	2102      	movs	r1, #2
 80073ec:	4807      	ldr	r0, [pc, #28]	; (800740c <PS_LA_Set+0x1a4>)
            daq.mode = VM;
 80073ee:	54fc      	strb	r4, [r7, r3]
            daq_mode_set(&daq, LA); // reload saved settings
 80073f0:	f7fe f9e2 	bl	80057b8 <daq_mode_set>
            daq.dis_hold = 0;
 80073f4:	f242 4309 	movw	r3, #9225	; 0x2409
 80073f8:	2200      	movs	r2, #0
            daq_enable(&daq, 1);
 80073fa:	4621      	mov	r1, r4
 80073fc:	4803      	ldr	r0, [pc, #12]	; (800740c <PS_LA_Set+0x1a4>)
            daq.dis_hold = 0;
 80073fe:	54fa      	strb	r2, [r7, r3]
            daq_enable(&daq, 1);
 8007400:	f7fd ff1e 	bl	8005240 <daq_enable>
 8007404:	e783      	b.n	800730e <PS_LA_Set+0xa6>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8007406:	2101      	movs	r1, #1
 8007408:	e784      	b.n	8007314 <PS_LA_Set+0xac>
 800740a:	bf00      	nop
 800740c:	20000c6c 	.word	0x20000c6c
 8007410:	00042009 	.word	0x00042009
 8007414:	200030a4 	.word	0x200030a4
 8007418:	0800c9da 	.word	0x0800c9da

0800741c <PS_LA_SetQ>:

scpi_result_t PS_LA_SetQ(scpi_t * context)
{
    if (daq.mode == LA)
 800741c:	f242 4308 	movw	r3, #9224	; 0x2408
{
 8007420:	b530      	push	{r4, r5, lr}
    if (daq.mode == LA)
 8007422:	4c27      	ldr	r4, [pc, #156]	; (80074c0 <PS_LA_SetQ+0xa4>)
{
 8007424:	b0a3      	sub	sp, #140	; 0x8c
    if (daq.mode == LA)
 8007426:	5ce3      	ldrb	r3, [r4, r3]
{
 8007428:	4605      	mov	r5, r0
    if (daq.mode == LA)
 800742a:	2b02      	cmp	r3, #2
 800742c:	d141      	bne.n	80074b2 <PS_LA_SetQ+0x96>
        char buff[80];
        char freq_s[30];
        char edge_s[2];
        char mode_s[2];

        sprint_fast(freq_s, "%s", daq.set.fs, 3);
 800742e:	f242 32d8 	movw	r2, #9176	; 0x23d8
 8007432:	2303      	movs	r3, #3
 8007434:	58a2      	ldr	r2, [r4, r2]
 8007436:	4923      	ldr	r1, [pc, #140]	; (80074c4 <PS_LA_SetQ+0xa8>)
 8007438:	a806      	add	r0, sp, #24
 800743a:	f000 fb51 	bl	8007ae0 <sprint_fast>
        edge_s[0] = daq.trig.set.edge == RISING ? 'R' : 'F';
 800743e:	f242 4315 	movw	r3, #9237	; 0x2415
 8007442:	5ce3      	ldrb	r3, [r4, r3]
 8007444:	2b00      	cmp	r3, #0
 8007446:	bf0c      	ite	eq
 8007448:	2352      	moveq	r3, #82	; 0x52
 800744a:	2346      	movne	r3, #70	; 0x46
 800744c:	f88d 3010 	strb.w	r3, [sp, #16]
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 8007450:	f242 4314 	movw	r3, #9236	; 0x2414
 8007454:	5ce3      	ldrb	r3, [r4, r3]
 8007456:	b343      	cbz	r3, 80074aa <PS_LA_SetQ+0x8e>
 8007458:	2b01      	cmp	r3, #1
 800745a:	d028      	beq.n	80074ae <PS_LA_SetQ+0x92>
 800745c:	2b02      	cmp	r3, #2
 800745e:	bf0c      	ite	eq
 8007460:	2353      	moveq	r3, #83	; 0x53
 8007462:	2344      	movne	r3, #68	; 0x44
 8007464:	f88d 3014 	strb.w	r3, [sp, #20]
            (daq.trig.set.mode == SINGLE ? 'S' : 'D'));
        edge_s[1] = '\0';
 8007468:	2300      	movs	r3, #0
 800746a:	f88d 3011 	strb.w	r3, [sp, #17]
        mode_s[1] = '\0';
 800746e:	f88d 3015 	strb.w	r3, [sp, #21]

        int len = sprintf(buff, "\"%d,%s,%d,%s,%s,%d\"", daq.set.mem, freq_s,
 8007472:	f242 33dc 	movw	r3, #9180	; 0x23dc
 8007476:	5ae2      	ldrh	r2, [r4, r3]
 8007478:	f242 4310 	movw	r3, #9232	; 0x2410
 800747c:	58e3      	ldr	r3, [r4, r3]
 800747e:	4912      	ldr	r1, [pc, #72]	; (80074c8 <PS_LA_SetQ+0xac>)
 8007480:	9303      	str	r3, [sp, #12]
 8007482:	ab05      	add	r3, sp, #20
 8007484:	9302      	str	r3, [sp, #8]
 8007486:	ab04      	add	r3, sp, #16
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	f242 4318 	movw	r3, #9240	; 0x2418
 800748e:	58e3      	ldr	r3, [r4, r3]
 8007490:	a80e      	add	r0, sp, #56	; 0x38
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	ab06      	add	r3, sp, #24
 8007496:	f003 fa3b 	bl	800a910 <siprintf>
                          daq.trig.set.ch, edge_s, mode_s, daq.trig.set.pretrigger);

        SCPI_ResultCharacters(context, buff, len);
 800749a:	a90e      	add	r1, sp, #56	; 0x38
 800749c:	4602      	mov	r2, r0
 800749e:	4628      	mov	r0, r5
 80074a0:	f001 fa9e 	bl	80089e0 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 80074a4:	2001      	movs	r0, #1
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }
}
 80074a6:	b023      	add	sp, #140	; 0x8c
 80074a8:	bd30      	pop	{r4, r5, pc}
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 80074aa:	2341      	movs	r3, #65	; 0x41
 80074ac:	e7da      	b.n	8007464 <PS_LA_SetQ+0x48>
 80074ae:	234e      	movs	r3, #78	; 0x4e
 80074b0:	e7d8      	b.n	8007464 <PS_LA_SetQ+0x48>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 80074b2:	2101      	movs	r1, #1
 80074b4:	f000 fc58 	bl	8007d68 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 80074b8:	f04f 30ff 	mov.w	r0, #4294967295
 80074bc:	e7f3      	b.n	80074a6 <PS_LA_SetQ+0x8a>
 80074be:	bf00      	nop
 80074c0:	20000c6c 	.word	0x20000c6c
 80074c4:	0800ca70 	.word	0x0800ca70
 80074c8:	0800c9b4 	.word	0x0800c9b4
 80074cc:	00000000 	.word	0x00000000

080074d0 <PS_CNTR_ReadQ>:

/************************* [CNTR Actions] *************************/

scpi_result_t PS_CNTR_ReadQ(scpi_t * context)
{
 80074d0:	b570      	push	{r4, r5, r6, lr}
 80074d2:	4606      	mov	r6, r0
 80074d4:	b0a4      	sub	sp, #144	; 0x90
    float f = cntr_read(&cntr);
 80074d6:	4838      	ldr	r0, [pc, #224]	; (80075b8 <PS_CNTR_ReadQ+0xe8>)
 80074d8:	f7fd fb58 	bl	8004b8c <cntr_read>

    if (f > -1)
 80074dc:	4937      	ldr	r1, [pc, #220]	; (80075bc <PS_CNTR_ReadQ+0xec>)
    float f = cntr_read(&cntr);
 80074de:	4604      	mov	r4, r0
    if (f > -1)
 80074e0:	f7f9 fdf6 	bl	80010d0 <__aeabi_fcmpgt>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d058      	beq.n	800759a <PS_CNTR_ReadQ+0xca>
    {
        char f_s[20];
        char T_s[20];

        float T = 1.0 / f;
 80074e8:	4621      	mov	r1, r4
 80074ea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80074ee:	f7f9 fce7 	bl	8000ec0 <__aeabi_fdiv>

        if (f < 1000)
 80074f2:	4933      	ldr	r1, [pc, #204]	; (80075c0 <PS_CNTR_ReadQ+0xf0>)
        float T = 1.0 / f;
 80074f4:	4605      	mov	r5, r0
        if (f < 1000)
 80074f6:	4620      	mov	r0, r4
 80074f8:	f7f9 fdcc 	bl	8001094 <__aeabi_fcmplt>
 80074fc:	b1f8      	cbz	r0, 800753e <PS_CNTR_ReadQ+0x6e>
            sprint_fast(f_s, "%s Hz", f, 3);
 80074fe:	2303      	movs	r3, #3
 8007500:	4622      	mov	r2, r4
 8007502:	4930      	ldr	r1, [pc, #192]	; (80075c4 <PS_CNTR_ReadQ+0xf4>)
        else if (f < 1000000)
            sprint_fast(f_s, "%s kHz", f / 1000.0, 3);
        else //if (f < 1000000000)
            sprint_fast(f_s, "%s MHz", f / 1000000.0, 3);
 8007504:	a801      	add	r0, sp, #4
 8007506:	f000 faeb 	bl	8007ae0 <sprint_fast>

        if (T >= 1)
 800750a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800750e:	4628      	mov	r0, r5
 8007510:	f7f9 fdd4 	bl	80010bc <__aeabi_fcmpge>
 8007514:	b340      	cbz	r0, 8007568 <PS_CNTR_ReadQ+0x98>
            sprint_fast(T_s, "%s s", T, 3);
 8007516:	2303      	movs	r3, #3
 8007518:	462a      	mov	r2, r5
 800751a:	492b      	ldr	r1, [pc, #172]	; (80075c8 <PS_CNTR_ReadQ+0xf8>)
        else if (T >= 0.001)
            sprint_fast(T_s, "%s ms", T * 1000.0, 3);
        else //if (T >= 0.000001)
            sprint_fast(T_s, "%s us", T * 1000000.0, 3);
 800751c:	a806      	add	r0, sp, #24
 800751e:	f000 fadf 	bl	8007ae0 <sprint_fast>

        char buff[100];
        int len = sprintf(buff, "%s,%s", f_s, T_s);
 8007522:	ab06      	add	r3, sp, #24
 8007524:	aa01      	add	r2, sp, #4
 8007526:	4929      	ldr	r1, [pc, #164]	; (80075cc <PS_CNTR_ReadQ+0xfc>)
 8007528:	a80b      	add	r0, sp, #44	; 0x2c
 800752a:	f003 f9f1 	bl	800a910 <siprintf>

        SCPI_ResultCharacters(context, buff, len);
 800752e:	a90b      	add	r1, sp, #44	; 0x2c
 8007530:	4602      	mov	r2, r0
 8007532:	4630      	mov	r0, r6
 8007534:	f001 fa54 	bl	80089e0 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 8007538:	2001      	movs	r0, #1
    else // if (f == -1)
    {
        SCPI_ErrorPush(context, SCPI_ERROR_TIME_OUT);
        return SCPI_RES_ERR;
    }
}
 800753a:	b024      	add	sp, #144	; 0x90
 800753c:	bd70      	pop	{r4, r5, r6, pc}
        else if (f < 1000000)
 800753e:	4924      	ldr	r1, [pc, #144]	; (80075d0 <PS_CNTR_ReadQ+0x100>)
 8007540:	4620      	mov	r0, r4
 8007542:	f7f9 fda7 	bl	8001094 <__aeabi_fcmplt>
 8007546:	b138      	cbz	r0, 8007558 <PS_CNTR_ReadQ+0x88>
            sprint_fast(f_s, "%s kHz", f / 1000.0, 3);
 8007548:	491d      	ldr	r1, [pc, #116]	; (80075c0 <PS_CNTR_ReadQ+0xf0>)
 800754a:	4620      	mov	r0, r4
 800754c:	f7f9 fcb8 	bl	8000ec0 <__aeabi_fdiv>
 8007550:	2303      	movs	r3, #3
 8007552:	4602      	mov	r2, r0
 8007554:	491f      	ldr	r1, [pc, #124]	; (80075d4 <PS_CNTR_ReadQ+0x104>)
 8007556:	e7d5      	b.n	8007504 <PS_CNTR_ReadQ+0x34>
            sprint_fast(f_s, "%s MHz", f / 1000000.0, 3);
 8007558:	491d      	ldr	r1, [pc, #116]	; (80075d0 <PS_CNTR_ReadQ+0x100>)
 800755a:	4620      	mov	r0, r4
 800755c:	f7f9 fcb0 	bl	8000ec0 <__aeabi_fdiv>
 8007560:	2303      	movs	r3, #3
 8007562:	4602      	mov	r2, r0
 8007564:	491c      	ldr	r1, [pc, #112]	; (80075d8 <PS_CNTR_ReadQ+0x108>)
 8007566:	e7cd      	b.n	8007504 <PS_CNTR_ReadQ+0x34>
        else if (T >= 0.001)
 8007568:	4628      	mov	r0, r5
 800756a:	f7f8 ff67 	bl	800043c <__aeabi_f2d>
 800756e:	a310      	add	r3, pc, #64	; (adr r3, 80075b0 <PS_CNTR_ReadQ+0xe0>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	f7f9 fa40 	bl	80009f8 <__aeabi_dcmpge>
 8007578:	b138      	cbz	r0, 800758a <PS_CNTR_ReadQ+0xba>
            sprint_fast(T_s, "%s ms", T * 1000.0, 3);
 800757a:	4911      	ldr	r1, [pc, #68]	; (80075c0 <PS_CNTR_ReadQ+0xf0>)
 800757c:	4628      	mov	r0, r5
 800757e:	f7f9 fbeb 	bl	8000d58 <__aeabi_fmul>
 8007582:	2303      	movs	r3, #3
 8007584:	4602      	mov	r2, r0
 8007586:	4915      	ldr	r1, [pc, #84]	; (80075dc <PS_CNTR_ReadQ+0x10c>)
 8007588:	e7c8      	b.n	800751c <PS_CNTR_ReadQ+0x4c>
            sprint_fast(T_s, "%s us", T * 1000000.0, 3);
 800758a:	4911      	ldr	r1, [pc, #68]	; (80075d0 <PS_CNTR_ReadQ+0x100>)
 800758c:	4628      	mov	r0, r5
 800758e:	f7f9 fbe3 	bl	8000d58 <__aeabi_fmul>
 8007592:	2303      	movs	r3, #3
 8007594:	4602      	mov	r2, r0
 8007596:	4912      	ldr	r1, [pc, #72]	; (80075e0 <PS_CNTR_ReadQ+0x110>)
 8007598:	e7c0      	b.n	800751c <PS_CNTR_ReadQ+0x4c>
        SCPI_ErrorPush(context, SCPI_ERROR_TIME_OUT);
 800759a:	4630      	mov	r0, r6
 800759c:	f46f 71b6 	mvn.w	r1, #364	; 0x16c
 80075a0:	f000 fbe2 	bl	8007d68 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 80075a4:	f04f 30ff 	mov.w	r0, #4294967295
 80075a8:	e7c7      	b.n	800753a <PS_CNTR_ReadQ+0x6a>
 80075aa:	bf00      	nop
 80075ac:	f3af 8000 	nop.w
 80075b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80075b4:	3f50624d 	.word	0x3f50624d
 80075b8:	20000acc 	.word	0x20000acc
 80075bc:	bf800000 	.word	0xbf800000
 80075c0:	447a0000 	.word	0x447a0000
 80075c4:	0800c98f 	.word	0x0800c98f
 80075c8:	0800c9a3 	.word	0x0800c9a3
 80075cc:	0800ca6d 	.word	0x0800ca6d
 80075d0:	49742400 	.word	0x49742400
 80075d4:	0800c995 	.word	0x0800c995
 80075d8:	0800c99c 	.word	0x0800c99c
 80075dc:	0800c9a8 	.word	0x0800c9a8
 80075e0:	0800c9ae 	.word	0x0800c9ae

080075e4 <PS_SGEN_Set>:

/************************* [SGEN Actions] *************************/
scpi_result_t PS_SGEN_Set(scpi_t * context)
{
 80075e4:	b508      	push	{r3, lr}
    LL_DAC_SetOutputBuffer(PS_DAC, PS_DAC_CH, p1);

    SCPI_ResultText(context, SCPI_OK);
    return SCPI_RES_OK;
#else
    SCPI_ErrorPush(context, SCPI_ERROR_DAC_NA);
 80075e6:	4903      	ldr	r1, [pc, #12]	; (80075f4 <PS_SGEN_Set+0x10>)
 80075e8:	f000 fbbe 	bl	8007d68 <SCPI_ErrorPush>
    return SCPI_RES_ERR;
#endif
}
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	bd08      	pop	{r3, pc}
 80075f2:	bf00      	nop
 80075f4:	fffffe8e 	.word	0xfffffe8e

080075f8 <PS_PWM_SetQ>:

/************************* [PWM Actions] *************************/

scpi_result_t PS_PWM_SetQ(scpi_t * context)
{
 80075f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    char buff_freq[10];
    char buff_duty1[10];
    char buff_duty2[10];

    float freq = pwm.ch1.freq;
    float duty1 = pwm.ch1.duty;
 80075fc:	4a18      	ldr	r2, [pc, #96]	; (8007660 <PS_PWM_SetQ+0x68>)
    float duty2 = pwm.ch2.duty;
    int offset2 = pwm.ch2.offset;
    uint8_t en1 = pwm.ch1.enabled;
    uint8_t en2 = pwm.ch2.enabled;

    sprint_fast(buff_freq, "%s", freq, 4);
 80075fe:	4c19      	ldr	r4, [pc, #100]	; (8007664 <PS_PWM_SetQ+0x6c>)
{
 8007600:	b09c      	sub	sp, #112	; 0x70
    float duty1 = pwm.ch1.duty;
 8007602:	6895      	ldr	r5, [r2, #8]
    float duty2 = pwm.ch2.duty;
 8007604:	f8d2 a020 	ldr.w	sl, [r2, #32]
    int offset2 = pwm.ch2.offset;
 8007608:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
    uint8_t en1 = pwm.ch1.enabled;
 800760a:	f892 8000 	ldrb.w	r8, [r2]
    uint8_t en2 = pwm.ch2.enabled;
 800760e:	f892 9018 	ldrb.w	r9, [r2, #24]
{
 8007612:	4606      	mov	r6, r0
    sprint_fast(buff_freq, "%s", freq, 4);
 8007614:	4621      	mov	r1, r4
 8007616:	a804      	add	r0, sp, #16
 8007618:	2304      	movs	r3, #4
 800761a:	6852      	ldr	r2, [r2, #4]
 800761c:	f000 fa60 	bl	8007ae0 <sprint_fast>
    sprint_fast(buff_duty1, "%s", duty1, 4);
 8007620:	462a      	mov	r2, r5
 8007622:	4621      	mov	r1, r4
 8007624:	a807      	add	r0, sp, #28
    sprint_fast(buff_duty2, "%s", duty2, 4);
 8007626:	ad0a      	add	r5, sp, #40	; 0x28
    sprint_fast(buff_duty1, "%s", duty1, 4);
 8007628:	2304      	movs	r3, #4
 800762a:	f000 fa59 	bl	8007ae0 <sprint_fast>
    sprint_fast(buff_duty2, "%s", duty2, 4);
 800762e:	4652      	mov	r2, sl
 8007630:	4621      	mov	r1, r4
 8007632:	4628      	mov	r0, r5
 8007634:	2304      	movs	r3, #4
 8007636:	f000 fa53 	bl	8007ae0 <sprint_fast>
    int len = sprintf(buff, "%s,%s,%s,%d,%d,%d", buff_freq, buff_duty1, buff_duty2, offset2, en1, en2);
 800763a:	ab07      	add	r3, sp, #28
 800763c:	aa04      	add	r2, sp, #16
 800763e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007642:	e9cd 5700 	strd	r5, r7, [sp]
 8007646:	4908      	ldr	r1, [pc, #32]	; (8007668 <PS_PWM_SetQ+0x70>)
 8007648:	a80d      	add	r0, sp, #52	; 0x34
 800764a:	f003 f961 	bl	800a910 <siprintf>

    SCPI_ResultCharacters(context, buff, len);
 800764e:	a90d      	add	r1, sp, #52	; 0x34
 8007650:	4602      	mov	r2, r0
 8007652:	4630      	mov	r0, r6
 8007654:	f001 f9c4 	bl	80089e0 <SCPI_ResultCharacters>

    return SCPI_RES_OK;
}
 8007658:	2001      	movs	r0, #1
 800765a:	b01c      	add	sp, #112	; 0x70
 800765c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007660:	2000312c 	.word	0x2000312c
 8007664:	0800ca70 	.word	0x0800ca70
 8007668:	0800c9c8 	.word	0x0800c9c8

0800766c <PS_PWM_Set>:

scpi_result_t PS_PWM_Set(scpi_t * context)
{
 800766c:	b510      	push	{r4, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
    uint32_t param1, param2, param3, param4, param5, param6;

    if (!SCPI_ParamUInt32(context, &param1, TRUE) ||
 8007670:	2201      	movs	r2, #1
 8007672:	a904      	add	r1, sp, #16
{
 8007674:	4604      	mov	r4, r0
    if (!SCPI_ParamUInt32(context, &param1, TRUE) ||
 8007676:	f001 fb8c 	bl	8008d92 <SCPI_ParamUInt32>
 800767a:	b1e8      	cbz	r0, 80076b8 <PS_PWM_Set+0x4c>
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
 800767c:	2201      	movs	r2, #1
 800767e:	a905      	add	r1, sp, #20
 8007680:	4620      	mov	r0, r4
 8007682:	f001 fb86 	bl	8008d92 <SCPI_ParamUInt32>
    if (!SCPI_ParamUInt32(context, &param1, TRUE) ||
 8007686:	b1b8      	cbz	r0, 80076b8 <PS_PWM_Set+0x4c>
        !SCPI_ParamUInt32(context, &param3, TRUE) ||
 8007688:	2201      	movs	r2, #1
 800768a:	a906      	add	r1, sp, #24
 800768c:	4620      	mov	r0, r4
 800768e:	f001 fb80 	bl	8008d92 <SCPI_ParamUInt32>
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
 8007692:	b188      	cbz	r0, 80076b8 <PS_PWM_Set+0x4c>
        !SCPI_ParamUInt32(context, &param4, TRUE) ||
 8007694:	2201      	movs	r2, #1
 8007696:	a907      	add	r1, sp, #28
 8007698:	4620      	mov	r0, r4
 800769a:	f001 fb7a 	bl	8008d92 <SCPI_ParamUInt32>
        !SCPI_ParamUInt32(context, &param3, TRUE) ||
 800769e:	b158      	cbz	r0, 80076b8 <PS_PWM_Set+0x4c>
        !SCPI_ParamUInt32(context, &param5, TRUE) ||
 80076a0:	2201      	movs	r2, #1
 80076a2:	a908      	add	r1, sp, #32
 80076a4:	4620      	mov	r0, r4
 80076a6:	f001 fb74 	bl	8008d92 <SCPI_ParamUInt32>
        !SCPI_ParamUInt32(context, &param4, TRUE) ||
 80076aa:	b128      	cbz	r0, 80076b8 <PS_PWM_Set+0x4c>
        !SCPI_ParamUInt32(context, &param6, TRUE))
 80076ac:	2201      	movs	r2, #1
 80076ae:	a909      	add	r1, sp, #36	; 0x24
 80076b0:	4620      	mov	r0, r4
 80076b2:	f001 fb6e 	bl	8008d92 <SCPI_ParamUInt32>
        !SCPI_ParamUInt32(context, &param5, TRUE) ||
 80076b6:	b940      	cbnz	r0, 80076ca <PS_PWM_Set+0x5e>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 80076b8:	4620      	mov	r0, r4
 80076ba:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 80076be:	f000 fb53 	bl	8007d68 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295
        return SCPI_RES_ERR;
    }

    SCPI_ResultText(context, SCPI_OK);
    return SCPI_RES_OK;
}
 80076c6:	b00a      	add	sp, #40	; 0x28
 80076c8:	bd10      	pop	{r4, pc}
    int ret = pwm_set(&pwm, param1, param2, param3, param4, param5, param6);
 80076ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076cc:	9904      	ldr	r1, [sp, #16]
 80076ce:	9302      	str	r3, [sp, #8]
 80076d0:	9b08      	ldr	r3, [sp, #32]
 80076d2:	4808      	ldr	r0, [pc, #32]	; (80076f4 <PS_PWM_Set+0x88>)
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	9b07      	ldr	r3, [sp, #28]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80076de:	f000 f81b 	bl	8007718 <pwm_set>
    if (ret != 0)
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d1e8      	bne.n	80076b8 <PS_PWM_Set+0x4c>
    SCPI_ResultText(context, SCPI_OK);
 80076e6:	4904      	ldr	r1, [pc, #16]	; (80076f8 <PS_PWM_Set+0x8c>)
 80076e8:	4620      	mov	r0, r4
 80076ea:	f001 f98f 	bl	8008a0c <SCPI_ResultText>
    return SCPI_RES_OK;
 80076ee:	2001      	movs	r0, #1
 80076f0:	e7e9      	b.n	80076c6 <PS_PWM_Set+0x5a>
 80076f2:	bf00      	nop
 80076f4:	2000312c 	.word	0x2000312c
 80076f8:	0800c9da 	.word	0x0800c9da

080076fc <pwm_init>:
#include "main.h"


void pwm_init(pwm_data_t* self)
{
    self->ch1.enabled = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	7003      	strb	r3, [r0, #0]
    self->ch2.enabled = 0;
 8007700:	7603      	strb	r3, [r0, #24]
    self->ch1.freq = 1000;
 8007702:	4b03      	ldr	r3, [pc, #12]	; (8007710 <pwm_init+0x14>)
 8007704:	6043      	str	r3, [r0, #4]
    self->ch2.freq = 1000;
 8007706:	61c3      	str	r3, [r0, #28]
    self->ch1.duty = 50;
 8007708:	4b02      	ldr	r3, [pc, #8]	; (8007714 <pwm_init+0x18>)
 800770a:	6083      	str	r3, [r0, #8]
    self->ch2.duty = 50;
 800770c:	6203      	str	r3, [r0, #32]
}
 800770e:	4770      	bx	lr
 8007710:	447a0000 	.word	0x447a0000
 8007714:	42480000 	.word	0x42480000

08007718 <pwm_set>:

int pwm_set(pwm_data_t* self, int freq, int duty1, int duty2, int offset2, int enable1, int enable2)
{
 8007718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	4699      	mov	r9, r3
    if (freq <= 0 || freq > PS_PWM_MAX_F || duty1 < 0 || duty1 > 100 ||
 800771e:	4b52      	ldr	r3, [pc, #328]	; (8007868 <pwm_set+0x150>)
{
 8007720:	4692      	mov	sl, r2
    if (freq <= 0 || freq > PS_PWM_MAX_F || duty1 < 0 || duty1 > 100 ||
 8007722:	1e4a      	subs	r2, r1, #1
{
 8007724:	b085      	sub	sp, #20
    if (freq <= 0 || freq > PS_PWM_MAX_F || duty1 < 0 || duty1 > 100 ||
 8007726:	429a      	cmp	r2, r3
{
 8007728:	4604      	mov	r4, r0
 800772a:	e9dd 700e 	ldrd	r7, r0, [sp, #56]	; 0x38
 800772e:	468c      	mov	ip, r1
    if (freq <= 0 || freq > PS_PWM_MAX_F || duty1 < 0 || duty1 > 100 ||
 8007730:	f200 8096 	bhi.w	8007860 <pwm_set+0x148>
 8007734:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8007738:	f200 8092 	bhi.w	8007860 <pwm_set+0x148>
        duty2 < 0 || duty2 > 100 || offset2 < 0 || offset2 > 100)
 800773c:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8007740:	f200 808e 	bhi.w	8007860 <pwm_set+0x148>
 8007744:	2f64      	cmp	r7, #100	; 0x64
 8007746:	f200 808b 	bhi.w	8007860 <pwm_set+0x148>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800774a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 800774e:	6833      	ldr	r3, [r6, #0]
 8007750:	4d46      	ldr	r5, [pc, #280]	; (800786c <pwm_set+0x154>)
 8007752:	f023 0301 	bic.w	r3, r3, #1
 8007756:	6033      	str	r3, [r6, #0]
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	f023 0301 	bic.w	r3, r3, #1
 800775e:	602b      	str	r3, [r5, #0]
    }

    LL_TIM_DisableCounter(PS_TIM_PWM1);
    LL_TIM_DisableCounter(PS_TIM_PWM2);

    if (!enable1)
 8007760:	2800      	cmp	r0, #0
 8007762:	d07a      	beq.n	800785a <pwm_set+0x142>
        return 0;

    int prescaler = 1;
    int reload = 0;
 8007764:	f04f 0800 	mov.w	r8, #0
    int prescaler = 1;
 8007768:	2301      	movs	r3, #1
    int reload = 0;
 800776a:	a904      	add	r1, sp, #16
 800776c:	f841 8d04 	str.w	r8, [r1, #-4]!
    int prescaler = 1;
 8007770:	9302      	str	r3, [sp, #8]

    self->ch1.enabled = enable1;
    self->ch1.freq = get_freq(&prescaler, &reload, PS_TIM_PWM1_MAX, PS_TIM_PWM1_FREQ, freq);
 8007772:	f8cd c000 	str.w	ip, [sp]
    self->ch1.enabled = enable1;
 8007776:	7020      	strb	r0, [r4, #0]
    self->ch1.freq = get_freq(&prescaler, &reload, PS_TIM_PWM1_MAX, PS_TIM_PWM1_FREQ, freq);
 8007778:	4b3d      	ldr	r3, [pc, #244]	; (8007870 <pwm_set+0x158>)
 800777a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800777e:	a802      	add	r0, sp, #8
 8007780:	f000 f967 	bl	8007a52 <get_freq>
    self->ch1.prescaler = prescaler;
    self->ch1.reload = reload;
 8007784:	9b03      	ldr	r3, [sp, #12]
    self->ch1.prescaler = prescaler;
 8007786:	9a02      	ldr	r2, [sp, #8]
    self->ch1.offset = 0;

    self->ch2.enabled = enable2;
 8007788:	9910      	ldr	r1, [sp, #64]	; 0x40
    self->ch1.prescaler = prescaler;
 800778a:	60e2      	str	r2, [r4, #12]
    self->ch1.offset = 0;
 800778c:	e9c4 3804 	strd	r3, r8, [r4, #16]
    self->ch2.freq = self->ch1.freq;
    self->ch2.prescaler = prescaler;
    self->ch2.reload = reload;
 8007790:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    self->ch2.enabled = enable2;
 8007794:	7621      	strb	r1, [r4, #24]
    self->ch1.freq = get_freq(&prescaler, &reload, PS_TIM_PWM1_MAX, PS_TIM_PWM1_FREQ, freq);
 8007796:	6060      	str	r0, [r4, #4]
    self->ch2.freq = self->ch1.freq;
 8007798:	61e0      	str	r0, [r4, #28]
    self->ch2.offset = offset2;
 800779a:	62e7      	str	r7, [r4, #44]	; 0x2c
    LL_TIM_SetAutoReload(PS_TIM_PWM1, reload);
    LL_TIM_SetAutoReload(PS_TIM_PWM2, reload);
    LL_TIM_SetPrescaler(PS_TIM_PWM1, prescaler);
    LL_TIM_SetPrescaler(PS_TIM_PWM2, prescaler);

    int compare1 = (duty1 / (float)100) * reload;
 800779c:	4618      	mov	r0, r3
  WRITE_REG(TIMx->ARR, AutoReload);
 800779e:	62f3      	str	r3, [r6, #44]	; 0x2c
 80077a0:	62eb      	str	r3, [r5, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80077a2:	62b2      	str	r2, [r6, #40]	; 0x28
 80077a4:	62aa      	str	r2, [r5, #40]	; 0x28
 80077a6:	f7f9 fa83 	bl	8000cb0 <__aeabi_i2f>
 80077aa:	4683      	mov	fp, r0
 80077ac:	4650      	mov	r0, sl
 80077ae:	f7f9 fa7f 	bl	8000cb0 <__aeabi_i2f>
 80077b2:	4930      	ldr	r1, [pc, #192]	; (8007874 <pwm_set+0x15c>)
 80077b4:	f7f9 fb84 	bl	8000ec0 <__aeabi_fdiv>
 80077b8:	4659      	mov	r1, fp
 80077ba:	f7f9 facd 	bl	8000d58 <__aeabi_fmul>
 80077be:	f7f9 fc91 	bl	80010e4 <__aeabi_f2iz>
 80077c2:	4682      	mov	sl, r0
    float real_duty1 = ((float)compare1 / (float)reload) * (float)100;

    int compare2 = (duty2 / (float)100) * reload;
 80077c4:	4648      	mov	r0, r9
 80077c6:	f7f9 fa73 	bl	8000cb0 <__aeabi_i2f>
 80077ca:	492a      	ldr	r1, [pc, #168]	; (8007874 <pwm_set+0x15c>)
 80077cc:	f7f9 fb78 	bl	8000ec0 <__aeabi_fdiv>
 80077d0:	4659      	mov	r1, fp
 80077d2:	f7f9 fac1 	bl	8000d58 <__aeabi_fmul>
 80077d6:	f7f9 fc85 	bl	80010e4 <__aeabi_f2iz>
 80077da:	4681      	mov	r9, r0
    float real_duty1 = ((float)compare1 / (float)reload) * (float)100;
 80077dc:	4650      	mov	r0, sl
 80077de:	f7f9 fa67 	bl	8000cb0 <__aeabi_i2f>
 80077e2:	4659      	mov	r1, fp
 80077e4:	f7f9 fb6c 	bl	8000ec0 <__aeabi_fdiv>
 80077e8:	4922      	ldr	r1, [pc, #136]	; (8007874 <pwm_set+0x15c>)
 80077ea:	f7f9 fab5 	bl	8000d58 <__aeabi_fmul>
    float real_duty2 = ((float)compare2 / (float)reload) * (float)100;

    self->ch1.duty = real_duty1;
 80077ee:	60a0      	str	r0, [r4, #8]
    float real_duty2 = ((float)compare2 / (float)reload) * (float)100;
 80077f0:	4648      	mov	r0, r9
 80077f2:	f7f9 fa5d 	bl	8000cb0 <__aeabi_i2f>
 80077f6:	4659      	mov	r1, fp
 80077f8:	f7f9 fb62 	bl	8000ec0 <__aeabi_fdiv>
 80077fc:	491d      	ldr	r1, [pc, #116]	; (8007874 <pwm_set+0x15c>)
 80077fe:	f7f9 faab 	bl	8000d58 <__aeabi_fmul>
    self->ch2.duty = real_duty2;
 8007802:	6220      	str	r0, [r4, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007804:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
 8007808:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CNT, Counter);
 800780c:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
 8007810:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
    
    LL_TIM_SetCounter(PS_TIM_PWM1, 0);
    LL_TIM_SetCounter(PS_TIM_PWM2, 0);

    // http://www.micromouseonline.com/2016/02/05/clock-pulses-with-variable-phase-stm32/
    if (offset2 > 0)
 8007814:	b1b7      	cbz	r7, 8007844 <pwm_set+0x12c>
        LL_TIM_SetCounter(PS_TIM_PWM2, (int)((float)offset2 / 100.0 * (float)reload));
 8007816:	4638      	mov	r0, r7
 8007818:	f7f9 fa4a 	bl	8000cb0 <__aeabi_i2f>
 800781c:	f7f8 fe0e 	bl	800043c <__aeabi_f2d>
 8007820:	2200      	movs	r2, #0
 8007822:	4b15      	ldr	r3, [pc, #84]	; (8007878 <pwm_set+0x160>)
 8007824:	f7f8 ff8c 	bl	8000740 <__aeabi_ddiv>
 8007828:	4606      	mov	r6, r0
 800782a:	4658      	mov	r0, fp
 800782c:	460f      	mov	r7, r1
 800782e:	f7f8 fe05 	bl	800043c <__aeabi_f2d>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4630      	mov	r0, r6
 8007838:	4639      	mov	r1, r7
 800783a:	f7f8 fe57 	bl	80004ec <__aeabi_dmul>
 800783e:	f7f9 f905 	bl	8000a4c <__aeabi_d2iz>
 8007842:	6268      	str	r0, [r5, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8007844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    //if (enable2)
    //    LL_TIM_CC_EnableChannel(PS_TIM_PWM2, PS_TIM_PWM2_CH);

    LL_TIM_EnableCounter(PS_TIM_PWM1);

    return 0;
 8007848:	2000      	movs	r0, #0
 800784a:	6a1a      	ldr	r2, [r3, #32]
 800784c:	f042 0201 	orr.w	r2, r2, #1
 8007850:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	f042 0201 	orr.w	r2, r2, #1
 8007858:	601a      	str	r2, [r3, #0]
}
 800785a:	b005      	add	sp, #20
 800785c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e7f9      	b.n	800785a <pwm_set+0x142>
 8007866:	bf00      	nop
 8007868:	000f423f 	.word	0x000f423f
 800786c:	40000800 	.word	0x40000800
 8007870:	044aa200 	.word	0x044aa200
 8007874:	42c80000 	.word	0x42c80000
 8007878:	40590000 	.word	0x40590000

0800787c <assert2>:

#include "utility.h"
#include "cfg.h"

void assert2(const char *file, uint32_t line)
{
 800787c:	e7fe      	b.n	800787c <assert2>

0800787e <get_avg_from_circ>:
    while(1);
    //__asm("bkpt 3");
}

void get_avg_from_circ(int last_idx, int ch_num, int avg_num, void* buff, int daq_bits, float* v1, float* v2, float* v3, float* v4, float* v5)
{
 800787e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007882:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007884:	4604      	mov	r4, r0
 8007886:	e9dd 860d 	ldrd	r8, r6, [sp, #52]	; 0x34
 800788a:	460d      	mov	r5, r1
 800788c:	9201      	str	r2, [sp, #4]
 800788e:	469b      	mov	fp, r3
    int total = ch_num * avg_num;
 8007890:	fb02 fa01 	mul.w	sl, r2, r1
    ASSERT(v1 != NULL && total > 0 && buff != NULL);
 8007894:	f1b8 0f00 	cmp.w	r8, #0
 8007898:	d005      	beq.n	80078a6 <get_avg_from_circ+0x28>
 800789a:	f1ba 0f00 	cmp.w	sl, #0
 800789e:	dd02      	ble.n	80078a6 <get_avg_from_circ+0x28>
 80078a0:	f1bb 0f00 	cmp.w	fp, #0
 80078a4:	d100      	bne.n	80078a8 <get_avg_from_circ+0x2a>
 80078a6:	e7fe      	b.n	80078a6 <get_avg_from_circ+0x28>

    for (int i = last_idx, j = 0; j < total; j++, i++)
 80078a8:	f04f 0900 	mov.w	r9, #0
    {
        if (i >= total)
            i = 0;
 80078ac:	45a2      	cmp	sl, r4
 80078ae:	bfd8      	it	le
 80078b0:	2400      	movle	r4, #0

        float val;
        if (daq_bits == 12)
 80078b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078b4:	2b0c      	cmp	r3, #12
            val = (float)(*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 80078b6:	bf0c      	ite	eq
 80078b8:	f83b 0014 	ldrheq.w	r0, [fp, r4, lsl #1]
        else
            val = (float)(((uint8_t*)buff)[i]);
 80078bc:	f81b 0004 	ldrbne.w	r0, [fp, r4]
 80078c0:	f7f9 f9f2 	bl	8000ca8 <__aeabi_ui2f>

        if (i % ch_num == 0)
 80078c4:	fb94 f3f5 	sdiv	r3, r4, r5
 80078c8:	fb05 4313 	mls	r3, r5, r3, r4
            val = (float)(((uint8_t*)buff)[i]);
 80078cc:	4601      	mov	r1, r0
        if (i % ch_num == 0)
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d135      	bne.n	800793e <get_avg_from_circ+0xc0>
            *v1 += val;
 80078d2:	f8d8 0000 	ldr.w	r0, [r8]
 80078d6:	f7f9 f937 	bl	8000b48 <__addsf3>
 80078da:	f8c8 0000 	str.w	r0, [r8]
    for (int i = last_idx, j = 0; j < total; j++, i++)
 80078de:	f109 0901 	add.w	r9, r9, #1
 80078e2:	45ca      	cmp	sl, r9
 80078e4:	f104 0401 	add.w	r4, r4, #1
 80078e8:	d1e0      	bne.n	80078ac <get_avg_from_circ+0x2e>
        else if (ch_num > 3 && i % ch_num == 3)
            *v4 += val;
        else if (ch_num > 4)  // && i % ch_num == 4)
            *v5 += val;
    }
    *v1 /= avg_num;
 80078ea:	9801      	ldr	r0, [sp, #4]
 80078ec:	f7f9 f9e0 	bl	8000cb0 <__aeabi_i2f>
 80078f0:	4601      	mov	r1, r0
 80078f2:	4604      	mov	r4, r0
 80078f4:	f8d8 0000 	ldr.w	r0, [r8]
 80078f8:	f7f9 fae2 	bl	8000ec0 <__aeabi_fdiv>
 80078fc:	f8c8 0000 	str.w	r0, [r8]
    if (v2 != NULL) *v2 /= avg_num;
 8007900:	b126      	cbz	r6, 800790c <get_avg_from_circ+0x8e>
 8007902:	6830      	ldr	r0, [r6, #0]
 8007904:	4621      	mov	r1, r4
 8007906:	f7f9 fadb 	bl	8000ec0 <__aeabi_fdiv>
 800790a:	6030      	str	r0, [r6, #0]
    if (v3 != NULL) *v3 /= avg_num;
 800790c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800790e:	b12b      	cbz	r3, 800791c <get_avg_from_circ+0x9e>
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	4621      	mov	r1, r4
 8007914:	f7f9 fad4 	bl	8000ec0 <__aeabi_fdiv>
 8007918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800791a:	6018      	str	r0, [r3, #0]
    if (v4 != NULL) *v4 /= avg_num;
 800791c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800791e:	b12b      	cbz	r3, 800792c <get_avg_from_circ+0xae>
 8007920:	6818      	ldr	r0, [r3, #0]
 8007922:	4621      	mov	r1, r4
 8007924:	f7f9 facc 	bl	8000ec0 <__aeabi_fdiv>
 8007928:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800792a:	6018      	str	r0, [r3, #0]
    if (v5 != NULL) *v5 /= avg_num;
 800792c:	b127      	cbz	r7, 8007938 <get_avg_from_circ+0xba>
 800792e:	6838      	ldr	r0, [r7, #0]
 8007930:	4621      	mov	r1, r4
 8007932:	f7f9 fac5 	bl	8000ec0 <__aeabi_fdiv>
 8007936:	6038      	str	r0, [r7, #0]
}
 8007938:	b003      	add	sp, #12
 800793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (ch_num > 1 && i % ch_num == 1)
 800793e:	2d01      	cmp	r5, #1
 8007940:	ddcd      	ble.n	80078de <get_avg_from_circ+0x60>
 8007942:	2b01      	cmp	r3, #1
 8007944:	d104      	bne.n	8007950 <get_avg_from_circ+0xd2>
            *v2 += val;
 8007946:	6830      	ldr	r0, [r6, #0]
 8007948:	f7f9 f8fe 	bl	8000b48 <__addsf3>
 800794c:	6030      	str	r0, [r6, #0]
 800794e:	e7c6      	b.n	80078de <get_avg_from_circ+0x60>
        else if (ch_num > 2 && i % ch_num == 2)
 8007950:	2d02      	cmp	r5, #2
 8007952:	d0c4      	beq.n	80078de <get_avg_from_circ+0x60>
 8007954:	2b02      	cmp	r3, #2
 8007956:	d106      	bne.n	8007966 <get_avg_from_circ+0xe8>
            *v3 += val;
 8007958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800795a:	6818      	ldr	r0, [r3, #0]
 800795c:	f7f9 f8f4 	bl	8000b48 <__addsf3>
 8007960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            *v4 += val;
 8007962:	6018      	str	r0, [r3, #0]
 8007964:	e7bb      	b.n	80078de <get_avg_from_circ+0x60>
        else if (ch_num > 3 && i % ch_num == 3)
 8007966:	2d03      	cmp	r5, #3
 8007968:	d0b9      	beq.n	80078de <get_avg_from_circ+0x60>
 800796a:	2b03      	cmp	r3, #3
 800796c:	d105      	bne.n	800797a <get_avg_from_circ+0xfc>
            *v4 += val;
 800796e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007970:	6818      	ldr	r0, [r3, #0]
 8007972:	f7f9 f8e9 	bl	8000b48 <__addsf3>
 8007976:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007978:	e7f3      	b.n	8007962 <get_avg_from_circ+0xe4>
        else if (ch_num > 4)  // && i % ch_num == 4)
 800797a:	2d04      	cmp	r5, #4
 800797c:	d0af      	beq.n	80078de <get_avg_from_circ+0x60>
            *v5 += val;
 800797e:	6838      	ldr	r0, [r7, #0]
 8007980:	f7f9 f8e2 	bl	8000b48 <__addsf3>
 8007984:	6038      	str	r0, [r7, #0]
 8007986:	e7aa      	b.n	80078de <get_avg_from_circ+0x60>

08007988 <get_1ch_from_circ>:
    }
    return ret /= avg_num;
}

int get_1ch_from_circ(int from, int total, int bufflen, int ch, int ch_num, int daq_bits, float vcc, float vref_cal, void* buff, uint8_t* out, int* idx)
{
 8007988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ASSERT(ch > 0 && ch_num > 0 && total > 0 && buff != NULL);
 800798c:	2b00      	cmp	r3, #0
{
 800798e:	4604      	mov	r4, r0
 8007990:	468a      	mov	sl, r1
 8007992:	9200      	str	r2, [sp, #0]
 8007994:	9e12      	ldr	r6, [sp, #72]	; 0x48
    ASSERT(ch > 0 && ch_num > 0 && total > 0 && buff != NULL);
 8007996:	dd06      	ble.n	80079a6 <get_1ch_from_circ+0x1e>
 8007998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800799a:	2a00      	cmp	r2, #0
 800799c:	dd03      	ble.n	80079a6 <get_1ch_from_circ+0x1e>
 800799e:	2900      	cmp	r1, #0
 80079a0:	dd01      	ble.n	80079a6 <get_1ch_from_circ+0x1e>
 80079a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079a4:	b902      	cbnz	r2, 80079a8 <get_1ch_from_circ+0x20>
 80079a6:	e7fe      	b.n	80079a6 <get_1ch_from_circ+0x1e>

    int found = 0;

    for (int k = 0, i = from; k < total; k++, i++)
 80079a8:	f04f 0800 	mov.w	r8, #0
    int found = 0;
 80079ac:	4645      	mov	r5, r8
    {
        if (i >= bufflen)
            i = 0;

        if (i % ch_num == ch - 1)
 80079ae:	f103 39ff 	add.w	r9, r3, #4294967295
            i = 0;
 80079b2:	9b00      	ldr	r3, [sp, #0]
        if (i % ch_num == ch - 1)
 80079b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            i = 0;
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	bfd8      	it	le
 80079ba:	2400      	movle	r4, #0
        if (i % ch_num == ch - 1)
 80079bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079be:	fb94 f3f3 	sdiv	r3, r4, r3
 80079c2:	fb02 4313 	mls	r3, r2, r3, r4
 80079c6:	454b      	cmp	r3, r9
 80079c8:	d120      	bne.n	8007a0c <get_1ch_from_circ+0x84>
        {
            found++;
            float val = 0;
            if (daq_bits == 12)
 80079ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079cc:	6837      	ldr	r7, [r6, #0]
 80079ce:	2b0c      	cmp	r3, #12
            found++;
 80079d0:	f105 0201 	add.w	r2, r5, #1
 80079d4:	f107 0b01 	add.w	fp, r7, #1
            if (daq_bits == 12)
 80079d8:	d122      	bne.n	8007a20 <get_1ch_from_circ+0x98>
            {
                val = (float) (*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 80079da:	9b10      	ldr	r3, [sp, #64]	; 0x40
                uint16_t ret = (uint16_t)(vref_cal * (val / vcc)); // 0.8 mV precision rounded (output in mV*10)
                out[(*idx)++] = LO_BYTE16(ret);
                out[(*idx)++] = HI_BYTE16(ret);
                found++;
 80079dc:	3502      	adds	r5, #2
                val = (float) (*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 80079de:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80079e2:	f7f9 f961 	bl	8000ca8 <__aeabi_ui2f>
                uint16_t ret = (uint16_t)(vref_cal * (val / vcc)); // 0.8 mV precision rounded (output in mV*10)
 80079e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80079e8:	f7f9 fa6a 	bl	8000ec0 <__aeabi_fdiv>
 80079ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079ee:	f7f9 f9b3 	bl	8000d58 <__aeabi_fmul>
 80079f2:	f7f9 fb9d 	bl	8001130 <__aeabi_f2uiz>
                out[(*idx)++] = LO_BYTE16(ret);
 80079f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
                uint16_t ret = (uint16_t)(vref_cal * (val / vcc)); // 0.8 mV precision rounded (output in mV*10)
 80079f8:	b280      	uxth	r0, r0
                out[(*idx)++] = LO_BYTE16(ret);
 80079fa:	f8c6 b000 	str.w	fp, [r6]
 80079fe:	55d8      	strb	r0, [r3, r7]
                out[(*idx)++] = HI_BYTE16(ret);
 8007a00:	6833      	ldr	r3, [r6, #0]
 8007a02:	0a00      	lsrs	r0, r0, #8
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	6032      	str	r2, [r6, #0]
 8007a08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007a0a:	54d0      	strb	r0, [r2, r3]
    for (int k = 0, i = from; k < total; k++, i++)
 8007a0c:	f108 0801 	add.w	r8, r8, #1
 8007a10:	45c2      	cmp	sl, r8
 8007a12:	f104 0401 	add.w	r4, r4, #1
 8007a16:	d1cc      	bne.n	80079b2 <get_1ch_from_circ+0x2a>
                out[(*idx)++] = ret;
            }
        }
    }
    return found;
}
 8007a18:	4628      	mov	r0, r5
 8007a1a:	b003      	add	sp, #12
 8007a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                val = (float)(((uint8_t*)buff)[i]);
 8007a20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a22:	9201      	str	r2, [sp, #4]
 8007a24:	5d18      	ldrb	r0, [r3, r4]
 8007a26:	f7f9 f93f 	bl	8000ca8 <__aeabi_ui2f>
                uint8_t ret = (uint8_t)(vref_cal * (val / vcc));   // 13 mV precision rounded (output in mV/10)
 8007a2a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007a2c:	f7f9 fa48 	bl	8000ec0 <__aeabi_fdiv>
 8007a30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a32:	f7f9 f991 	bl	8000d58 <__aeabi_fmul>
 8007a36:	f7f9 fb7b 	bl	8001130 <__aeabi_f2uiz>
                out[(*idx)++] = ret;
 8007a3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
            found++;
 8007a3c:	9a01      	ldr	r2, [sp, #4]
                out[(*idx)++] = ret;
 8007a3e:	f8c6 b000 	str.w	fp, [r6]
            found++;
 8007a42:	4615      	mov	r5, r2
                out[(*idx)++] = ret;
 8007a44:	55d8      	strb	r0, [r3, r7]
 8007a46:	e7e1      	b.n	8007a0c <get_1ch_from_circ+0x84>

08007a48 <get_last_circ_idx>:

int get_last_circ_idx(int pos, int len)
{
    int last_idx = pos - 1;
    if (last_idx < 0)
 8007a48:	3801      	subs	r0, #1
        last_idx = len - 1;
 8007a4a:	bf48      	it	mi
 8007a4c:	f101 30ff 	addmi.w	r0, r1, #4294967295
    return last_idx;
}
 8007a50:	4770      	bx	lr

08007a52 <get_freq>:

// freq_want = freq_osc/((prescaler+1)*(reload+1))
// (prescaler+1)*(reload+1) = freq_osc/freq_want
float get_freq(int* prescaler, int* reload, int max_reload, int freq_osc, int freq_want)
{
 8007a52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a56:	9f08      	ldr	r7, [sp, #32]
 8007a58:	4604      	mov	r4, r0
    ASSERT(freq_osc >= freq_want && freq_want > 0 && freq_osc > 0 && max_reload > 0);
 8007a5a:	42bb      	cmp	r3, r7
{
 8007a5c:	4689      	mov	r9, r1
 8007a5e:	4615      	mov	r5, r2
 8007a60:	461e      	mov	r6, r3
    ASSERT(freq_osc >= freq_want && freq_want > 0 && freq_osc > 0 && max_reload > 0);
 8007a62:	db05      	blt.n	8007a70 <get_freq+0x1e>
 8007a64:	2f00      	cmp	r7, #0
 8007a66:	dd03      	ble.n	8007a70 <get_freq+0x1e>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	dd01      	ble.n	8007a70 <get_freq+0x1e>
 8007a6c:	2a00      	cmp	r2, #0
 8007a6e:	dc00      	bgt.n	8007a72 <get_freq+0x20>
 8007a70:	e7fe      	b.n	8007a70 <get_freq+0x1e>
    *prescaler = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	6003      	str	r3, [r0, #0]

    do
    {
        *reload = (int)((float)freq_osc / (float)(*prescaler + 1) / (float)freq_want) - 1; // TODO check negative reload?
 8007a76:	4630      	mov	r0, r6
 8007a78:	f7f9 f91a 	bl	8000cb0 <__aeabi_i2f>
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	6820      	ldr	r0, [r4, #0]
 8007a80:	3001      	adds	r0, #1
 8007a82:	f7f9 f915 	bl	8000cb0 <__aeabi_i2f>
 8007a86:	4601      	mov	r1, r0
 8007a88:	4640      	mov	r0, r8
 8007a8a:	f7f9 fa19 	bl	8000ec0 <__aeabi_fdiv>
 8007a8e:	4682      	mov	sl, r0
 8007a90:	4638      	mov	r0, r7
 8007a92:	f7f9 f90d 	bl	8000cb0 <__aeabi_i2f>
 8007a96:	4601      	mov	r1, r0
 8007a98:	4650      	mov	r0, sl
 8007a9a:	f7f9 fa11 	bl	8000ec0 <__aeabi_fdiv>
 8007a9e:	f7f9 fb21 	bl	80010e4 <__aeabi_f2iz>
 8007aa2:	3801      	subs	r0, #1
        if (*reload > max_reload)
 8007aa4:	42a8      	cmp	r0, r5
        *reload = (int)((float)freq_osc / (float)(*prescaler + 1) / (float)freq_want) - 1; // TODO check negative reload?
 8007aa6:	f8c9 0000 	str.w	r0, [r9]
            (*prescaler)++;
 8007aaa:	bfc2      	ittt	gt
 8007aac:	6823      	ldrgt	r3, [r4, #0]
 8007aae:	3301      	addgt	r3, #1
 8007ab0:	6023      	strgt	r3, [r4, #0]
    }
    while (*reload > max_reload);
 8007ab2:	f8d9 a000 	ldr.w	sl, [r9]
 8007ab6:	45aa      	cmp	sl, r5
 8007ab8:	dcdd      	bgt.n	8007a76 <get_freq+0x24>

    float ret  = (float)freq_osc / ((float)(*prescaler + 1) * (float)(*reload + 1));
 8007aba:	6820      	ldr	r0, [r4, #0]
 8007abc:	3001      	adds	r0, #1
 8007abe:	f7f9 f8f7 	bl	8000cb0 <__aeabi_i2f>
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	f10a 0001 	add.w	r0, sl, #1
 8007ac8:	f7f9 f8f2 	bl	8000cb0 <__aeabi_i2f>
 8007acc:	4601      	mov	r1, r0
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f7f9 f942 	bl	8000d58 <__aeabi_fmul>
 8007ad4:	4601      	mov	r1, r0
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	f7f9 f9f2 	bl	8000ec0 <__aeabi_fdiv>
    return ret;
}
 8007adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007ae0 <sprint_fast>:

/* Author: Jakub Parez
 * Descr:  ultra fast float sprintf
 */
void sprint_fast(char* s, const char* format, float fVal, int prec)
{
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	b0b3      	sub	sp, #204	; 0xcc
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	468a      	mov	sl, r1
 8007aea:	4693      	mov	fp, r2
    char result[100] = { '\0' };
 8007aec:	2100      	movs	r1, #0
 8007aee:	2264      	movs	r2, #100	; 0x64
 8007af0:	4668      	mov	r0, sp
{
 8007af2:	461c      	mov	r4, r3
    char result[100] = { '\0' };
 8007af4:	f002 ff04 	bl	800a900 <memset>
    char result_rev[100] = { '\0' };
 8007af8:	2264      	movs	r2, #100	; 0x64
 8007afa:	2100      	movs	r1, #0
 8007afc:	eb0d 0002 	add.w	r0, sp, r2
 8007b00:	f002 fefe 	bl	800a900 <memset>
    int dVal, dec, i, j, k;

    if (prec <= 0)
 8007b04:	2c00      	cmp	r4, #0
 8007b06:	dc0f      	bgt.n	8007b28 <sprint_fast+0x48>
    {
        sprintf(result, "%d", (int)fVal);
 8007b08:	4658      	mov	r0, fp
 8007b0a:	f7f9 faeb 	bl	80010e4 <__aeabi_f2iz>
 8007b0e:	493e      	ldr	r1, [pc, #248]	; (8007c08 <sprint_fast+0x128>)
 8007b10:	4602      	mov	r2, r0
 8007b12:	4668      	mov	r0, sp
 8007b14:	f002 fefc 	bl	800a910 <siprintf>
        sprintf(s, format, result);
 8007b18:	466a      	mov	r2, sp
        result[i] = '0';

    for (j = 0; i >= 0; i--, j++)
        result_rev[j] = result[i];

    sprintf(s, format, result_rev);
 8007b1a:	4651      	mov	r1, sl
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f002 fef7 	bl	800a910 <siprintf>
}
 8007b22:	b033      	add	sp, #204	; 0xcc
 8007b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fVal += 0.5 * pow(0.1, prec);
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7f8 fc75 	bl	8000418 <__aeabi_i2d>
 8007b2e:	4606      	mov	r6, r0
 8007b30:	460f      	mov	r7, r1
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	a132      	add	r1, pc, #200	; (adr r1, 8007c00 <sprint_fast+0x120>)
 8007b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b3c:	f003 fc36 	bl	800b3ac <pow>
 8007b40:	2200      	movs	r2, #0
 8007b42:	4b32      	ldr	r3, [pc, #200]	; (8007c0c <sprint_fast+0x12c>)
 8007b44:	f7f8 fcd2 	bl	80004ec <__aeabi_dmul>
 8007b48:	4680      	mov	r8, r0
 8007b4a:	4658      	mov	r0, fp
 8007b4c:	4689      	mov	r9, r1
 8007b4e:	f7f8 fc75 	bl	800043c <__aeabi_f2d>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	4640      	mov	r0, r8
 8007b58:	4649      	mov	r1, r9
 8007b5a:	f7f8 fb11 	bl	8000180 <__adddf3>
 8007b5e:	f7f8 ff9d 	bl	8000a9c <__aeabi_d2f>
    k = pow(10, prec);
 8007b62:	463b      	mov	r3, r7
 8007b64:	4632      	mov	r2, r6
    fVal += 0.5 * pow(0.1, prec);
 8007b66:	4680      	mov	r8, r0
    k = pow(10, prec);
 8007b68:	4929      	ldr	r1, [pc, #164]	; (8007c10 <sprint_fast+0x130>)
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	f003 fc1e 	bl	800b3ac <pow>
 8007b70:	f7f8 ff6c 	bl	8000a4c <__aeabi_d2iz>
 8007b74:	4606      	mov	r6, r0
    dVal = fVal;
 8007b76:	4640      	mov	r0, r8
 8007b78:	f7f9 fab4 	bl	80010e4 <__aeabi_f2iz>
 8007b7c:	4607      	mov	r7, r0
    dec = ((int)(fVal * k)) % k;
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f7f9 f896 	bl	8000cb0 <__aeabi_i2f>
 8007b84:	4641      	mov	r1, r8
 8007b86:	f7f9 f8e7 	bl	8000d58 <__aeabi_fmul>
 8007b8a:	f7f9 faab 	bl	80010e4 <__aeabi_f2iz>
 8007b8e:	fb90 f3f6 	sdiv	r3, r0, r6
        result[i] = (dec % 10) + '0';
 8007b92:	210a      	movs	r1, #10
    dec = ((int)(fVal * k)) % k;
 8007b94:	fb03 0016 	mls	r0, r3, r6, r0
    for (i = 0; i < prec; i++)
 8007b98:	2300      	movs	r3, #0
        result[i] = (dec % 10) + '0';
 8007b9a:	fb90 f2f1 	sdiv	r2, r0, r1
 8007b9e:	fb01 0012 	mls	r0, r1, r2, r0
 8007ba2:	3030      	adds	r0, #48	; 0x30
 8007ba4:	f80d 0003 	strb.w	r0, [sp, r3]
    for (i = 0; i < prec; i++)
 8007ba8:	3301      	adds	r3, #1
 8007baa:	429c      	cmp	r4, r3
        dec /= 10;
 8007bac:	4610      	mov	r0, r2
    for (i = 0; i < prec; i++)
 8007bae:	d1f4      	bne.n	8007b9a <sprint_fast+0xba>
    result[i] = '.';
 8007bb0:	222e      	movs	r2, #46	; 0x2e
 8007bb2:	ab32      	add	r3, sp, #200	; 0xc8
 8007bb4:	4423      	add	r3, r4
    if (dVal > 0)
 8007bb6:	2f00      	cmp	r7, #0
    result[i] = '.';
 8007bb8:	f803 2cc8 	strb.w	r2, [r3, #-200]
    i++;
 8007bbc:	f104 0301 	add.w	r3, r4, #1
    if (dVal > 0)
 8007bc0:	dd17      	ble.n	8007bf2 <sprint_fast+0x112>
            result[i] = (dVal % 10) + '0';
 8007bc2:	210a      	movs	r1, #10
 8007bc4:	fb97 f2f1 	sdiv	r2, r7, r1
 8007bc8:	fb01 7712 	mls	r7, r1, r2, r7
 8007bcc:	3730      	adds	r7, #48	; 0x30
 8007bce:	f80d 7003 	strb.w	r7, [sp, r3]
            i++;
 8007bd2:	1c58      	adds	r0, r3, #1
        while (dVal > 0)
 8007bd4:	4617      	mov	r7, r2
 8007bd6:	b952      	cbnz	r2, 8007bee <sprint_fast+0x10e>
 8007bd8:	f10d 0263 	add.w	r2, sp, #99	; 0x63
        result_rev[j] = result[i];
 8007bdc:	f81d 1003 	ldrb.w	r1, [sp, r3]
    for (j = 0; i >= 0; i--, j++)
 8007be0:	f113 33ff 	adds.w	r3, r3, #4294967295
        result_rev[j] = result[i];
 8007be4:	f802 1f01 	strb.w	r1, [r2, #1]!
    for (j = 0; i >= 0; i--, j++)
 8007be8:	d2f8      	bcs.n	8007bdc <sprint_fast+0xfc>
    sprintf(s, format, result_rev);
 8007bea:	aa19      	add	r2, sp, #100	; 0x64
 8007bec:	e795      	b.n	8007b1a <sprint_fast+0x3a>
            i++;
 8007bee:	4603      	mov	r3, r0
 8007bf0:	e7e8      	b.n	8007bc4 <sprint_fast+0xe4>
        result[i] = '0';
 8007bf2:	2130      	movs	r1, #48	; 0x30
 8007bf4:	aa32      	add	r2, sp, #200	; 0xc8
 8007bf6:	441a      	add	r2, r3
 8007bf8:	f802 1cc8 	strb.w	r1, [r2, #-200]
 8007bfc:	e7ec      	b.n	8007bd8 <sprint_fast+0xf8>
 8007bfe:	bf00      	nop
 8007c00:	9999999a 	.word	0x9999999a
 8007c04:	3fb99999 	.word	0x3fb99999
 8007c08:	0800c9d7 	.word	0x0800c9d7
 8007c0c:	3fe00000 	.word	0x3fe00000
 8007c10:	40240000 	.word	0x40240000

08007c14 <SCPI_ErrorEmit>:
/**
 * Emit error
 * @param context scpi context
 * @param err Error to emit
 */
static void SCPI_ErrorEmit(scpi_t * context, int16_t err) {
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	4604      	mov	r4, r0
 8007c18:	460d      	mov	r5, r1
    SCPI_RegSetBits(context, SCPI_REG_STB, STB_QMA);
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	f000 fa28 	bl	8008072 <SCPI_RegSetBits>

    if (context->interface && context->interface->error) {
 8007c22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c24:	b133      	cbz	r3, 8007c34 <SCPI_ErrorEmit+0x20>
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	b123      	cbz	r3, 8007c34 <SCPI_ErrorEmit+0x20>
        context->interface->error(context, err);
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	4620      	mov	r0, r4
    }
}
 8007c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        context->interface->error(context, err);
 8007c32:	4718      	bx	r3
}
 8007c34:	bd70      	pop	{r4, r5, r6, pc}

08007c36 <SCPI_ErrorInit>:
    fifo_init(&context->error_queue, data, size);
 8007c36:	303c      	adds	r0, #60	; 0x3c
 8007c38:	f000 b926 	b.w	8007e88 <fifo_init>

08007c3c <SCPI_ErrorCount>:
 * Return number of errors/events in the queue
 * @param context
 * @return
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
    int16_t result = 0;
 8007c3c:	2300      	movs	r3, #0
int32_t SCPI_ErrorCount(scpi_t * context) {
 8007c3e:	b507      	push	{r0, r1, r2, lr}
    int16_t result = 0;
 8007c40:	a902      	add	r1, sp, #8
 8007c42:	f821 3d02 	strh.w	r3, [r1, #-2]!

    fifo_count(&context->error_queue, &result);
 8007c46:	303c      	adds	r0, #60	; 0x3c
 8007c48:	f000 f977 	bl	8007f3a <fifo_count>

    return result;
}
 8007c4c:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8007c50:	b003      	add	sp, #12
 8007c52:	f85d fb04 	ldr.w	pc, [sp], #4

08007c56 <SCPI_ErrorEmitEmpty>:
static void SCPI_ErrorEmitEmpty(scpi_t * context) {
 8007c56:	b570      	push	{r4, r5, r6, lr}
 8007c58:	4604      	mov	r4, r0
    if ((SCPI_ErrorCount(context) == 0) && (SCPI_RegGet(context, SCPI_REG_STB) & STB_QMA)) {
 8007c5a:	f7ff ffef 	bl	8007c3c <SCPI_ErrorCount>
 8007c5e:	4605      	mov	r5, r0
 8007c60:	b998      	cbnz	r0, 8007c8a <SCPI_ErrorEmitEmpty+0x34>
 8007c62:	4601      	mov	r1, r0
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 f96d 	bl	8007f44 <SCPI_RegGet>
 8007c6a:	0743      	lsls	r3, r0, #29
 8007c6c:	d50d      	bpl.n	8007c8a <SCPI_ErrorEmitEmpty+0x34>
        SCPI_RegClearBits(context, SCPI_REG_STB, STB_QMA);
 8007c6e:	2204      	movs	r2, #4
 8007c70:	4629      	mov	r1, r5
 8007c72:	4620      	mov	r0, r4
 8007c74:	f000 f96f 	bl	8007f56 <SCPI_RegClearBits>
        if (context->interface && context->interface->error) {
 8007c78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c7a:	b133      	cbz	r3, 8007c8a <SCPI_ErrorEmitEmpty+0x34>
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	b123      	cbz	r3, 8007c8a <SCPI_ErrorEmitEmpty+0x34>
            context->interface->error(context, 0);
 8007c80:	4629      	mov	r1, r5
 8007c82:	4620      	mov	r0, r4
}
 8007c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            context->interface->error(context, 0);
 8007c88:	4718      	bx	r3
}
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}

08007c8c <SCPI_ErrorClear>:
void SCPI_ErrorClear(scpi_t * context) {
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	4604      	mov	r4, r0
    fifo_clear(&context->error_queue);
 8007c90:	303c      	adds	r0, #60	; 0x3c
 8007c92:	f000 f8ff 	bl	8007e94 <fifo_clear>
    SCPI_ErrorEmitEmpty(context);
 8007c96:	4620      	mov	r0, r4
}
 8007c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_ErrorEmitEmpty(context);
 8007c9c:	f7ff bfdb 	b.w	8007c56 <SCPI_ErrorEmitEmpty>

08007ca0 <SCPI_ErrorPop>:
scpi_bool_t SCPI_ErrorPop(scpi_t * context, scpi_error_t * error) {
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	4604      	mov	r4, r0
    if (!error || !context) return FALSE;
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	b151      	cbz	r1, 8007cbe <SCPI_ErrorPop+0x1e>
 8007ca8:	b154      	cbz	r4, 8007cc0 <SCPI_ErrorPop+0x20>
    SCPI_ERROR_SETVAL(error, 0, NULL);
 8007caa:	2300      	movs	r3, #0
    fifo_remove(&context->error_queue, error);
 8007cac:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    SCPI_ERROR_SETVAL(error, 0, NULL);
 8007cb0:	800b      	strh	r3, [r1, #0]
    fifo_remove(&context->error_queue, error);
 8007cb2:	f000 f90f 	bl	8007ed4 <fifo_remove>
    SCPI_ErrorEmitEmpty(context);
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7ff ffcd 	bl	8007c56 <SCPI_ErrorEmitEmpty>
    return TRUE;
 8007cbc:	2001      	movs	r0, #1
}
 8007cbe:	bd10      	pop	{r4, pc}
    if (!error || !context) return FALSE;
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	e7fc      	b.n	8007cbe <SCPI_ErrorPop+0x1e>

08007cc4 <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
 8007cc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc8:	4604      	mov	r4, r0
 8007cca:	4688      	mov	r8, r1
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
 8007ccc:	b122      	cbz	r2, 8007cd8 <SCPI_ErrorPushEx+0x14>
 8007cce:	b91b      	cbnz	r3, 8007cd8 <SCPI_ErrorPushEx+0x14>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
 8007cd0:	21ff      	movs	r1, #255	; 0xff
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	f002 fe61 	bl	800a99a <strnlen>
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
 8007cd8:	ae02      	add	r6, sp, #8
 8007cda:	f826 8d04 	strh.w	r8, [r6, #-4]!
    if (!fifo_add(&context->error_queue, &error_value)) {
 8007cde:	f104 073c 	add.w	r7, r4, #60	; 0x3c
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	f000 f8d9 	bl	8007e9c <fifo_add>
 8007cea:	4605      	mov	r5, r0
 8007cec:	bbb0      	cbnz	r0, 8007d5c <SCPI_ErrorPushEx+0x98>
        fifo_remove_last(&context->error_queue, &error_value);
 8007cee:	4631      	mov	r1, r6
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f000 f908 	bl	8007f06 <fifo_remove_last>
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 8007cf6:	f64f 63a2 	movw	r3, #65186	; 0xfea2
        fifo_add(&context->error_queue, &error_value);
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4638      	mov	r0, r7
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 8007cfe:	f8ad 3004 	strh.w	r3, [sp, #4]
        fifo_add(&context->error_queue, &error_value);
 8007d02:	f000 f8cb 	bl	8007e9c <fifo_add>
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);

    for (i = 0; i < ERROR_DEFS_N; i++) {
 8007d06:	2600      	movs	r6, #0
 8007d08:	f04f 0a06 	mov.w	sl, #6
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 8007d0c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8007d64 <SCPI_ErrorPushEx+0xa0>
 8007d10:	fb0a f306 	mul.w	r3, sl, r6
 8007d14:	f933 2009 	ldrsh.w	r2, [r3, r9]
 8007d18:	4542      	cmp	r2, r8
 8007d1a:	db09      	blt.n	8007d30 <SCPI_ErrorPushEx+0x6c>
 8007d1c:	444b      	add	r3, r9
 8007d1e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007d22:	4542      	cmp	r2, r8
 8007d24:	dc04      	bgt.n	8007d30 <SCPI_ErrorPushEx+0x6c>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
 8007d26:	889a      	ldrh	r2, [r3, #4]
 8007d28:	2102      	movs	r1, #2
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 f9a1 	bl	8008072 <SCPI_RegSetBits>
    for (i = 0; i < ERROR_DEFS_N; i++) {
 8007d30:	3601      	adds	r6, #1
 8007d32:	2e09      	cmp	r6, #9
 8007d34:	d1ec      	bne.n	8007d10 <SCPI_ErrorPushEx+0x4c>
        }
    }

    SCPI_ErrorEmit(context, err);
 8007d36:	4641      	mov	r1, r8
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f7ff ff6b 	bl	8007c14 <SCPI_ErrorEmit>
    if (queue_overflow) {
 8007d3e:	b91d      	cbnz	r5, 8007d48 <SCPI_ErrorPushEx+0x84>
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
 8007d40:	4907      	ldr	r1, [pc, #28]	; (8007d60 <SCPI_ErrorPushEx+0x9c>)
 8007d42:	4620      	mov	r0, r4
 8007d44:	f7ff ff66 	bl	8007c14 <SCPI_ErrorEmit>
    }

    if (context) {
 8007d48:	b114      	cbz	r4, 8007d50 <SCPI_ErrorPushEx+0x8c>
        context->cmd_error = TRUE;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    }
    fifo_clear(&context->error_queue); // EDIT
 8007d50:	4638      	mov	r0, r7
 8007d52:	f000 f89f 	bl	8007e94 <fifo_clear>
}
 8007d56:	b002      	add	sp, #8
 8007d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return TRUE;
 8007d5c:	2501      	movs	r5, #1
 8007d5e:	e7d2      	b.n	8007d06 <SCPI_ErrorPushEx+0x42>
 8007d60:	fffffea2 	.word	0xfffffea2
 8007d64:	0800cbc6 	.word	0x0800cbc6

08007d68 <SCPI_ErrorPush>:
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
    SCPI_ErrorPushEx(context, err, NULL, 0);
 8007d68:	2300      	movs	r3, #0
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7ff bfaa 	b.w	8007cc4 <SCPI_ErrorPushEx>

08007d70 <SCPI_ErrorTranslate>:
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
 8007d70:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
 8007d74:	d050      	beq.n	8007e18 <SCPI_ErrorTranslate+0xa8>
 8007d76:	dc27      	bgt.n	8007dc8 <SCPI_ErrorTranslate+0x58>
 8007d78:	f510 7f9b 	cmn.w	r0, #310	; 0x136
 8007d7c:	d052      	beq.n	8007e24 <SCPI_ErrorTranslate+0xb4>
 8007d7e:	dc14      	bgt.n	8007daa <SCPI_ErrorTranslate+0x3a>
 8007d80:	f46f 73b6 	mvn.w	r3, #364	; 0x16c
 8007d84:	4298      	cmp	r0, r3
 8007d86:	d051      	beq.n	8007e2c <SCPI_ErrorTranslate+0xbc>
 8007d88:	f510 7fb6 	cmn.w	r0, #364	; 0x16c
 8007d8c:	da04      	bge.n	8007d98 <SCPI_ErrorTranslate+0x28>
 8007d8e:	f510 7fb9 	cmn.w	r0, #370	; 0x172
 8007d92:	d04d      	beq.n	8007e30 <SCPI_ErrorTranslate+0xc0>
#if USE_USER_ERROR_LIST
        LIST_OF_USER_ERRORS
#endif
#undef X
#undef XE
        default: return "Unknown error";
 8007d94:	4828      	ldr	r0, [pc, #160]	; (8007e38 <SCPI_ErrorTranslate+0xc8>)
 8007d96:	4770      	bx	lr
    switch (err) {
 8007d98:	f46f 73b5 	mvn.w	r3, #362	; 0x16a
 8007d9c:	4298      	cmp	r0, r3
 8007d9e:	d043      	beq.n	8007e28 <SCPI_ErrorTranslate+0xb8>
 8007da0:	f510 7faf 	cmn.w	r0, #350	; 0x15e
 8007da4:	d1f6      	bne.n	8007d94 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 8007da6:	4825      	ldr	r0, [pc, #148]	; (8007e3c <SCPI_ErrorTranslate+0xcc>)
 8007da8:	4770      	bx	lr
    switch (err) {
 8007daa:	f110 0fc8 	cmn.w	r0, #200	; 0xc8
 8007dae:	d037      	beq.n	8007e20 <SCPI_ErrorTranslate+0xb0>
 8007db0:	dc03      	bgt.n	8007dba <SCPI_ErrorTranslate+0x4a>
 8007db2:	30e0      	adds	r0, #224	; 0xe0
 8007db4:	d1ee      	bne.n	8007d94 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 8007db6:	4822      	ldr	r0, [pc, #136]	; (8007e40 <SCPI_ErrorTranslate+0xd0>)
 8007db8:	4770      	bx	lr
    switch (err) {
 8007dba:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 8007dbe:	d02d      	beq.n	8007e1c <SCPI_ErrorTranslate+0xac>
 8007dc0:	3097      	adds	r0, #151	; 0x97
 8007dc2:	d1e7      	bne.n	8007d94 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 8007dc4:	481f      	ldr	r0, [pc, #124]	; (8007e44 <SCPI_ErrorTranslate+0xd4>)
 8007dc6:	4770      	bx	lr
    switch (err) {
 8007dc8:	f110 0f68 	cmn.w	r0, #104	; 0x68
 8007dcc:	d01e      	beq.n	8007e0c <SCPI_ErrorTranslate+0x9c>
 8007dce:	dc0e      	bgt.n	8007dee <SCPI_ErrorTranslate+0x7e>
 8007dd0:	f110 0f71 	cmn.w	r0, #113	; 0x71
 8007dd4:	d01e      	beq.n	8007e14 <SCPI_ErrorTranslate+0xa4>
 8007dd6:	dc03      	bgt.n	8007de0 <SCPI_ErrorTranslate+0x70>
 8007dd8:	3083      	adds	r0, #131	; 0x83
 8007dda:	d1db      	bne.n	8007d94 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 8007ddc:	481a      	ldr	r0, [pc, #104]	; (8007e48 <SCPI_ErrorTranslate+0xd8>)
 8007dde:	4770      	bx	lr
    switch (err) {
 8007de0:	f110 0f6d 	cmn.w	r0, #109	; 0x6d
 8007de4:	d014      	beq.n	8007e10 <SCPI_ErrorTranslate+0xa0>
 8007de6:	306c      	adds	r0, #108	; 0x6c
 8007de8:	d1d4      	bne.n	8007d94 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 8007dea:	4818      	ldr	r0, [pc, #96]	; (8007e4c <SCPI_ErrorTranslate+0xdc>)
 8007dec:	4770      	bx	lr
    switch (err) {
 8007dee:	f110 0f65 	cmn.w	r0, #101	; 0x65
 8007df2:	d009      	beq.n	8007e08 <SCPI_ErrorTranslate+0x98>
 8007df4:	dc03      	bgt.n	8007dfe <SCPI_ErrorTranslate+0x8e>
 8007df6:	3067      	adds	r0, #103	; 0x67
 8007df8:	d1cc      	bne.n	8007d94 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 8007dfa:	4815      	ldr	r0, [pc, #84]	; (8007e50 <SCPI_ErrorTranslate+0xe0>)
 8007dfc:	4770      	bx	lr
    switch (err) {
 8007dfe:	b1c8      	cbz	r0, 8007e34 <SCPI_ErrorTranslate+0xc4>
 8007e00:	2801      	cmp	r0, #1
 8007e02:	d1c7      	bne.n	8007d94 <SCPI_ErrorTranslate+0x24>
        LIST_OF_ERRORS
 8007e04:	4813      	ldr	r0, [pc, #76]	; (8007e54 <SCPI_ErrorTranslate+0xe4>)
 8007e06:	4770      	bx	lr
 8007e08:	4813      	ldr	r0, [pc, #76]	; (8007e58 <SCPI_ErrorTranslate+0xe8>)
 8007e0a:	4770      	bx	lr
 8007e0c:	4813      	ldr	r0, [pc, #76]	; (8007e5c <SCPI_ErrorTranslate+0xec>)
 8007e0e:	4770      	bx	lr
 8007e10:	4813      	ldr	r0, [pc, #76]	; (8007e60 <SCPI_ErrorTranslate+0xf0>)
 8007e12:	4770      	bx	lr
 8007e14:	4813      	ldr	r0, [pc, #76]	; (8007e64 <SCPI_ErrorTranslate+0xf4>)
 8007e16:	4770      	bx	lr
 8007e18:	4813      	ldr	r0, [pc, #76]	; (8007e68 <SCPI_ErrorTranslate+0xf8>)
 8007e1a:	4770      	bx	lr
 8007e1c:	4813      	ldr	r0, [pc, #76]	; (8007e6c <SCPI_ErrorTranslate+0xfc>)
 8007e1e:	4770      	bx	lr
 8007e20:	4813      	ldr	r0, [pc, #76]	; (8007e70 <SCPI_ErrorTranslate+0x100>)
 8007e22:	4770      	bx	lr
 8007e24:	4813      	ldr	r0, [pc, #76]	; (8007e74 <SCPI_ErrorTranslate+0x104>)
 8007e26:	4770      	bx	lr
 8007e28:	4813      	ldr	r0, [pc, #76]	; (8007e78 <SCPI_ErrorTranslate+0x108>)
 8007e2a:	4770      	bx	lr
 8007e2c:	4813      	ldr	r0, [pc, #76]	; (8007e7c <SCPI_ErrorTranslate+0x10c>)
 8007e2e:	4770      	bx	lr
 8007e30:	4813      	ldr	r0, [pc, #76]	; (8007e80 <SCPI_ErrorTranslate+0x110>)
 8007e32:	4770      	bx	lr
 8007e34:	4813      	ldr	r0, [pc, #76]	; (8007e84 <SCPI_ErrorTranslate+0x114>)
    }
}
 8007e36:	4770      	bx	lr
 8007e38:	0800cbb7 	.word	0x0800cbb7
 8007e3c:	0800cb65 	.word	0x0800cb65
 8007e40:	0800cb40 	.word	0x0800cb40
 8007e44:	0800cb0b 	.word	0x0800cb0b
 8007e48:	0800cae9 	.word	0x0800cae9
 8007e4c:	0800cab0 	.word	0x0800cab0
 8007e50:	0800ca8e 	.word	0x0800ca8e
 8007e54:	0800cbaa 	.word	0x0800cbaa
 8007e58:	0800ca7c 	.word	0x0800ca7c
 8007e5c:	0800caa0 	.word	0x0800caa0
 8007e60:	0800cac6 	.word	0x0800cac6
 8007e64:	0800cad8 	.word	0x0800cad8
 8007e68:	0800caf8 	.word	0x0800caf8
 8007e6c:	0800cb1f 	.word	0x0800cb1f
 8007e70:	0800cb30 	.word	0x0800cb30
 8007e74:	0800cb58 	.word	0x0800cb58
 8007e78:	0800cb74 	.word	0x0800cb74
 8007e7c:	0800cb89 	.word	0x0800cb89
 8007e80:	0800cb98 	.word	0x0800cb98
 8007e84:	0800ca73 	.word	0x0800ca73

08007e88 <fifo_init>:
/**
 * Initialize fifo
 * @param fifo
 */
void fifo_init(scpi_fifo_t * fifo, scpi_error_t * data, int16_t size) {
    fifo->wr = 0;
 8007e88:	2300      	movs	r3, #0
    fifo->rd = 0;
    fifo->count = 0;
    fifo->data = data;
 8007e8a:	6081      	str	r1, [r0, #8]
    fifo->wr = 0;
 8007e8c:	6003      	str	r3, [r0, #0]
    fifo->rd = 0;
 8007e8e:	8083      	strh	r3, [r0, #4]
    fifo->size = size;
 8007e90:	80c2      	strh	r2, [r0, #6]
}
 8007e92:	4770      	bx	lr

08007e94 <fifo_clear>:
/**
 * Empty fifo
 * @param fifo
 */
void fifo_clear(scpi_fifo_t * fifo) {
    fifo->wr = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	6003      	str	r3, [r0, #0]
    fifo->rd = 0;
 8007e98:	8083      	strh	r3, [r0, #4]
    fifo->count = 0;
}
 8007e9a:	4770      	bx	lr

08007e9c <fifo_add>:
 * @param fifo
 * @param err
 * @param info
 * @return
 */
scpi_bool_t fifo_add(scpi_fifo_t * fifo, const scpi_error_t * value) {
 8007e9c:	b530      	push	{r4, r5, lr}
    return fifo->count == fifo->size;
 8007e9e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007ea2:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    /* FIFO full? */
    if (fifo_is_full(fifo)) {
 8007ea6:	42a2      	cmp	r2, r4
 8007ea8:	d010      	beq.n	8007ecc <fifo_add+0x30>
        return FALSE;
    }
    if (!value) {
 8007eaa:	b189      	cbz	r1, 8007ed0 <fifo_add+0x34>
        return FALSE;
    }

    fifo->data[fifo->wr] = *value;
 8007eac:	f9b0 3000 	ldrsh.w	r3, [r0]
 8007eb0:	8809      	ldrh	r1, [r1, #0]
 8007eb2:	6885      	ldr	r5, [r0, #8]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
    fifo->count += 1;
 8007eb4:	3201      	adds	r2, #1
    fifo->data[fifo->wr] = *value;
 8007eb6:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 8007eba:	3301      	adds	r3, #1
 8007ebc:	fb93 f1f4 	sdiv	r1, r3, r4
 8007ec0:	fb04 3311 	mls	r3, r4, r1, r3
    fifo->count += 1;
 8007ec4:	8082      	strh	r2, [r0, #4]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 8007ec6:	8003      	strh	r3, [r0, #0]
    return TRUE;
 8007ec8:	2001      	movs	r0, #1
}
 8007eca:	bd30      	pop	{r4, r5, pc}
        return FALSE;
 8007ecc:	2000      	movs	r0, #0
 8007ece:	e7fc      	b.n	8007eca <fifo_add+0x2e>
 8007ed0:	4608      	mov	r0, r1
 8007ed2:	e7fa      	b.n	8007eca <fifo_add+0x2e>

08007ed4 <fifo_remove>:
    return fifo->count == 0;
 8007ed4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 * Remove element form fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove(scpi_fifo_t * fifo, scpi_error_t * value) {
 8007ed8:	b510      	push	{r4, lr}
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 8007eda:	b193      	cbz	r3, 8007f02 <fifo_remove+0x2e>
 8007edc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
        return FALSE;
    }

    if (value) {
 8007ee0:	b119      	cbz	r1, 8007eea <fifo_remove+0x16>
        *value = fifo->data[fifo->rd];
 8007ee2:	6884      	ldr	r4, [r0, #8]
 8007ee4:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
 8007ee8:	800c      	strh	r4, [r1, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size);
 8007eea:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8007eee:	3201      	adds	r2, #1
 8007ef0:	fb92 f1f4 	sdiv	r1, r2, r4
 8007ef4:	fb04 2211 	mls	r2, r4, r1, r2
    fifo->count -= 1;
 8007ef8:	3b01      	subs	r3, #1
    fifo->rd = (fifo->rd + 1) % (fifo->size);
 8007efa:	8042      	strh	r2, [r0, #2]
    fifo->count -= 1;
 8007efc:	8083      	strh	r3, [r0, #4]

    return TRUE;
 8007efe:	2001      	movs	r0, #1
}
 8007f00:	bd10      	pop	{r4, pc}
        return FALSE;
 8007f02:	4618      	mov	r0, r3
 8007f04:	e7fc      	b.n	8007f00 <fifo_remove+0x2c>

08007f06 <fifo_remove_last>:
    return fifo->count == 0;
 8007f06:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
 8007f0a:	b530      	push	{r4, r5, lr}
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 8007f0c:	b19b      	cbz	r3, 8007f36 <fifo_remove_last+0x30>
        return FALSE;
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
 8007f0e:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 8007f12:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007f16:	442a      	add	r2, r5
 8007f18:	3a01      	subs	r2, #1
 8007f1a:	fb92 f4f5 	sdiv	r4, r2, r5
 8007f1e:	fb05 2214 	mls	r2, r5, r4, r2
 8007f22:	8002      	strh	r2, [r0, #0]

    if (value) {
 8007f24:	b119      	cbz	r1, 8007f2e <fifo_remove_last+0x28>
        *value = fifo->data[fifo->wr];
 8007f26:	6884      	ldr	r4, [r0, #8]
 8007f28:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8007f2c:	800a      	strh	r2, [r1, #0]
    }
    fifo->count -= 1;
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	8083      	strh	r3, [r0, #4]

    return TRUE;
 8007f32:	2001      	movs	r0, #1
}
 8007f34:	bd30      	pop	{r4, r5, pc}
        return FALSE;
 8007f36:	4618      	mov	r0, r3
 8007f38:	e7fc      	b.n	8007f34 <fifo_remove_last+0x2e>

08007f3a <fifo_count>:
 * @param fifo
 * @param value
 * @return
 */
scpi_bool_t fifo_count(scpi_fifo_t * fifo, int16_t * value) {
    *value = fifo->count;
 8007f3a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    return TRUE;
}
 8007f3e:	2001      	movs	r0, #1
    *value = fifo->count;
 8007f40:	800b      	strh	r3, [r1, #0]
}
 8007f42:	4770      	bx	lr

08007f44 <SCPI_RegGet>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && context) {
 8007f44:	2909      	cmp	r1, #9
 8007f46:	d804      	bhi.n	8007f52 <SCPI_RegGet+0xe>
 8007f48:	b120      	cbz	r0, 8007f54 <SCPI_RegGet+0x10>
        return context->registers[name];
 8007f4a:	3124      	adds	r1, #36	; 0x24
 8007f4c:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8007f50:	4770      	bx	lr
    } else {
        return 0;
 8007f52:	2000      	movs	r0, #0
    }
}
 8007f54:	4770      	bx	lr

08007f56 <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 8007f56:	b510      	push	{r4, lr}
 8007f58:	4603      	mov	r3, r0
 8007f5a:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 8007f5c:	f7ff fff2 	bl	8007f44 <SCPI_RegGet>
 8007f60:	ea20 0202 	bic.w	r2, r0, r2
 8007f64:	4621      	mov	r1, r4
}
 8007f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 8007f6a:	b292      	uxth	r2, r2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 b815 	b.w	8007f9c <SCPI_RegSet>

08007f72 <regUpdateSTB>:
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 8007f72:	b538      	push	{r3, r4, r5, lr}
 8007f74:	460c      	mov	r4, r1
    if (val & SCPI_RegGet(context, mask)) {
 8007f76:	4611      	mov	r1, r2
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 8007f78:	4605      	mov	r5, r0
    if (val & SCPI_RegGet(context, mask)) {
 8007f7a:	f7ff ffe3 	bl	8007f44 <SCPI_RegGet>
 8007f7e:	ea10 0104 	ands.w	r1, r0, r4
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 8007f82:	461a      	mov	r2, r3
    if (val & SCPI_RegGet(context, mask)) {
 8007f84:	d005      	beq.n	8007f92 <regUpdateSTB+0x20>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 8007f86:	4628      	mov	r0, r5
}
 8007f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	f000 b870 	b.w	8008072 <SCPI_RegSetBits>
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 8007f92:	4628      	mov	r0, r5
}
 8007f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 8007f98:	f7ff bfdd 	b.w	8007f56 <SCPI_RegClearBits>

08007f9c <SCPI_RegSet>:
    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 8007f9c:	2909      	cmp	r1, #9
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 8007f9e:	b570      	push	{r4, r5, r6, lr}
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	4615      	mov	r5, r2
    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 8007fa4:	d858      	bhi.n	8008058 <SCPI_RegSet+0xbc>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d056      	beq.n	8008058 <SCPI_RegSet+0xbc>
 8007faa:	eb00 0641 	add.w	r6, r0, r1, lsl #1
    switch (name) {
 8007fae:	3901      	subs	r1, #1
    old_val = context->registers[name];
 8007fb0:	f8b6 0048 	ldrh.w	r0, [r6, #72]	; 0x48
    context->registers[name] = val;
 8007fb4:	f8a6 2048 	strh.w	r2, [r6, #72]	; 0x48
    switch (name) {
 8007fb8:	2908      	cmp	r1, #8
 8007fba:	d806      	bhi.n	8007fca <SCPI_RegSet+0x2e>
 8007fbc:	e8df f001 	tbb	[pc, r1]
 8007fc0:	3e2d2520 	.word	0x3e2d2520
 8007fc4:	322f4341 	.word	0x322f4341
 8007fc8:	34          	.byte	0x34
 8007fc9:	00          	.byte	0x00
 8007fca:	f022 0140 	bic.w	r1, r2, #64	; 0x40
            if (val & mask) {
 8007fce:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8007fd2:	b289      	uxth	r1, r1
 8007fd4:	ea11 0203 	ands.w	r2, r1, r3
 8007fd8:	d03c      	beq.n	8008054 <SCPI_RegSet+0xb8>
                val |= STB_SRQ;
 8007fda:	f045 0540 	orr.w	r5, r5, #64	; 0x40
                if (old_val != val) {
 8007fde:	1b42      	subs	r2, r0, r5
 8007fe0:	bf18      	it	ne
 8007fe2:	2201      	movne	r2, #1
    context->registers[name] = val;
 8007fe4:	f8a6 5048 	strh.w	r5, [r6, #72]	; 0x48
    if (srq) {
 8007fe8:	b3b2      	cbz	r2, 8008058 <SCPI_RegSet+0xbc>
    if (context && context->interface && context->interface->control) {
 8007fea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007fec:	b3a3      	cbz	r3, 8008058 <SCPI_RegSet+0xbc>
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	b393      	cbz	r3, 8008058 <SCPI_RegSet+0xbc>
        return context->interface->control(context, ctrl, val);
 8007ff2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8007ff6:	4620      	mov	r0, r4
}
 8007ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return context->interface->control(context, ctrl, val);
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	4718      	bx	r3
            regUpdate(context, SCPI_REG_STB);
 8008000:	2100      	movs	r1, #0
            regUpdate(context, SCPI_REG_OPER);
 8008002:	4620      	mov	r0, r4
 8008004:	f000 f829 	bl	800805a <regUpdate>
 8008008:	e005      	b.n	8008016 <SCPI_RegSet+0x7a>
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
 800800a:	2320      	movs	r3, #32
 800800c:	2203      	movs	r2, #3
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 800800e:	4629      	mov	r1, r5
 8008010:	4620      	mov	r0, r4
 8008012:	f7ff ffae 	bl	8007f72 <regUpdateSTB>
    scpi_bool_t srq = FALSE;
 8008016:	2200      	movs	r2, #0
 8008018:	e7e4      	b.n	8007fe4 <SCPI_RegSet+0x48>
            regUpdate(context, SCPI_REG_ESR);
 800801a:	2102      	movs	r1, #2
 800801c:	e7f1      	b.n	8008002 <SCPI_RegSet+0x66>
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
 800801e:	2308      	movs	r3, #8
 8008020:	461a      	mov	r2, r3
 8008022:	e7f4      	b.n	800800e <SCPI_RegSet+0x72>
            regUpdate(context, SCPI_REG_QUES);
 8008024:	2107      	movs	r1, #7
 8008026:	e7ec      	b.n	8008002 <SCPI_RegSet+0x66>
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 8008028:	2107      	movs	r1, #7
 800802a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800802e:	ea22 0200 	bic.w	r2, r2, r0
 8008032:	431a      	orrs	r2, r3
 8008034:	4620      	mov	r0, r4
 8008036:	f7ff ffb1 	bl	8007f9c <SCPI_RegSet>
 800803a:	e7ec      	b.n	8008016 <SCPI_RegSet+0x7a>
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 800803c:	2380      	movs	r3, #128	; 0x80
 800803e:	2205      	movs	r2, #5
 8008040:	e7e5      	b.n	800800e <SCPI_RegSet+0x72>
            regUpdate(context, SCPI_REG_OPER);
 8008042:	2104      	movs	r1, #4
 8008044:	e7dd      	b.n	8008002 <SCPI_RegSet+0x66>
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 8008046:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800804a:	ea22 0200 	bic.w	r2, r2, r0
 800804e:	431a      	orrs	r2, r3
 8008050:	2104      	movs	r1, #4
 8008052:	e7ef      	b.n	8008034 <SCPI_RegSet+0x98>
            if (val & mask) {
 8008054:	460d      	mov	r5, r1
 8008056:	e7c5      	b.n	8007fe4 <SCPI_RegSet+0x48>
}
 8008058:	bd70      	pop	{r4, r5, r6, pc}

0800805a <regUpdate>:
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
 800805a:	b510      	push	{r4, lr}
 800805c:	4603      	mov	r3, r0
 800805e:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 8008060:	f7ff ff70 	bl	8007f44 <SCPI_RegGet>
 8008064:	4621      	mov	r1, r4
}
 8008066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 800806a:	4602      	mov	r2, r0
 800806c:	4618      	mov	r0, r3
 800806e:	f7ff bf95 	b.w	8007f9c <SCPI_RegSet>

08008072 <SCPI_RegSetBits>:
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 8008072:	b510      	push	{r4, lr}
 8008074:	4603      	mov	r3, r0
 8008076:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 8008078:	f7ff ff64 	bl	8007f44 <SCPI_RegGet>
 800807c:	4302      	orrs	r2, r0
 800807e:	4621      	mov	r1, r4
}
 8008080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 8008084:	b292      	uxth	r2, r2
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff bf88 	b.w	8007f9c <SCPI_RegSet>

0800808c <SCPI_EventClear>:
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 800808c:	2200      	movs	r2, #0
 800808e:	2102      	movs	r1, #2
 8008090:	f7ff bf84 	b.w	8007f9c <SCPI_RegSet>

08008094 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
 8008094:	b510      	push	{r4, lr}
 8008096:	4604      	mov	r4, r0
    SCPI_EventClear(context);
 8008098:	f7ff fff8 	bl	800808c <SCPI_EventClear>
    SCPI_ErrorClear(context);
 800809c:	4620      	mov	r0, r4
 800809e:	f7ff fdf5 	bl	8007c8c <SCPI_ErrorClear>
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
 80080a2:	4620      	mov	r0, r4
 80080a4:	2200      	movs	r2, #0
 80080a6:	2104      	movs	r1, #4
 80080a8:	f7ff ff78 	bl	8007f9c <SCPI_RegSet>
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 80080ac:	4620      	mov	r0, r4
 80080ae:	2200      	movs	r2, #0
 80080b0:	2107      	movs	r1, #7
 80080b2:	f7ff ff73 	bl	8007f9c <SCPI_RegSet>
    return SCPI_RES_OK;
}
 80080b6:	2001      	movs	r0, #1
 80080b8:	bd10      	pop	{r4, pc}

080080ba <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 80080ba:	b513      	push	{r0, r1, r4, lr}
    int32_t new_ESE;
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 80080bc:	2201      	movs	r2, #1
 80080be:	a901      	add	r1, sp, #4
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 80080c0:	4604      	mov	r4, r0
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 80080c2:	f000 fe63 	bl	8008d8c <SCPI_ParamInt32>
 80080c6:	b140      	cbz	r0, 80080da <SCPI_CoreEse+0x20>
        SCPI_RegSet(context, SCPI_REG_ESE, (scpi_reg_val_t) new_ESE);
 80080c8:	4620      	mov	r0, r4
 80080ca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80080ce:	2103      	movs	r1, #3
 80080d0:	f7ff ff64 	bl	8007f9c <SCPI_RegSet>
        return SCPI_RES_OK;
 80080d4:	2001      	movs	r0, #1
    }
    return SCPI_RES_ERR;
}
 80080d6:	b002      	add	sp, #8
 80080d8:	bd10      	pop	{r4, pc}
    return SCPI_RES_ERR;
 80080da:	f04f 30ff 	mov.w	r0, #4294967295
 80080de:	e7fa      	b.n	80080d6 <SCPI_CoreEse+0x1c>

080080e0 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
 80080e0:	b508      	push	{r3, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 80080e2:	b128      	cbz	r0, 80080f0 <SCPI_CoreEseQ+0x10>
        return context->registers[name];
 80080e4:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESE));
 80080e8:	f000 fc8b 	bl	8008a02 <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 80080ec:	2001      	movs	r0, #1
 80080ee:	bd08      	pop	{r3, pc}
        return 0;
 80080f0:	4601      	mov	r1, r0
 80080f2:	e7f9      	b.n	80080e8 <SCPI_CoreEseQ+0x8>

080080f4 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
 80080f4:	b510      	push	{r4, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 80080f6:	4604      	mov	r4, r0
 80080f8:	b158      	cbz	r0, 8008112 <SCPI_CoreEsrQ+0x1e>
        return context->registers[name];
 80080fa:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESR));
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 fc7f 	bl	8008a02 <SCPI_ResultInt32>
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 8008104:	4620      	mov	r0, r4
 8008106:	2200      	movs	r2, #0
 8008108:	2102      	movs	r1, #2
 800810a:	f7ff ff47 	bl	8007f9c <SCPI_RegSet>
    return SCPI_RES_OK;
}
 800810e:	2001      	movs	r0, #1
 8008110:	bd10      	pop	{r4, pc}
        return 0;
 8008112:	4601      	mov	r1, r0
 8008114:	e7f3      	b.n	80080fe <SCPI_CoreEsrQ+0xa>

08008116 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
 8008116:	b508      	push	{r3, lr}
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
 8008118:	2201      	movs	r2, #1
 800811a:	2102      	movs	r1, #2
 800811c:	f7ff ffa9 	bl	8008072 <SCPI_RegSetBits>
    return SCPI_RES_OK;
}
 8008120:	2001      	movs	r0, #1
 8008122:	bd08      	pop	{r3, pc}

08008124 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
 8008124:	b508      	push	{r3, lr}
    /* Operation is always completed */
    SCPI_ResultInt32(context, 1);
 8008126:	2101      	movs	r1, #1
 8008128:	f000 fc6b 	bl	8008a02 <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 800812c:	2001      	movs	r0, #1
 800812e:	bd08      	pop	{r3, pc}

08008130 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 8008130:	b513      	push	{r0, r1, r4, lr}
    int32_t new_SRE;
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 8008132:	2201      	movs	r2, #1
 8008134:	a901      	add	r1, sp, #4
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 8008136:	4604      	mov	r4, r0
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 8008138:	f000 fe28 	bl	8008d8c <SCPI_ParamInt32>
 800813c:	b140      	cbz	r0, 8008150 <SCPI_CoreSre+0x20>
        SCPI_RegSet(context, SCPI_REG_SRE, (scpi_reg_val_t) new_SRE);
 800813e:	4620      	mov	r0, r4
 8008140:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8008144:	2101      	movs	r1, #1
 8008146:	f7ff ff29 	bl	8007f9c <SCPI_RegSet>
        return SCPI_RES_OK;
 800814a:	2001      	movs	r0, #1
    }
    return SCPI_RES_ERR;
}
 800814c:	b002      	add	sp, #8
 800814e:	bd10      	pop	{r4, pc}
    return SCPI_RES_ERR;
 8008150:	f04f 30ff 	mov.w	r0, #4294967295
 8008154:	e7fa      	b.n	800814c <SCPI_CoreSre+0x1c>

08008156 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
 8008156:	b508      	push	{r3, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 8008158:	b128      	cbz	r0, 8008166 <SCPI_CoreSreQ+0x10>
        return context->registers[name];
 800815a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_SRE));
 800815e:	f000 fc50 	bl	8008a02 <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 8008162:	2001      	movs	r0, #1
 8008164:	bd08      	pop	{r3, pc}
        return 0;
 8008166:	4601      	mov	r1, r0
 8008168:	e7f9      	b.n	800815e <SCPI_CoreSreQ+0x8>

0800816a <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
 800816a:	b508      	push	{r3, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 800816c:	b128      	cbz	r0, 800817a <SCPI_CoreStbQ+0x10>
        return context->registers[name];
 800816e:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_STB));
 8008172:	f000 fc46 	bl	8008a02 <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 8008176:	2001      	movs	r0, #1
 8008178:	bd08      	pop	{r3, pc}
        return 0;
 800817a:	4601      	mov	r1, r0
 800817c:	e7f9      	b.n	8008172 <SCPI_CoreStbQ+0x8>

0800817e <SCPI_CoreWai>:
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
}
 800817e:	2001      	movs	r0, #1
 8008180:	4770      	bx	lr

08008182 <iseos>:
 * Is end of string
 * @param state
 * @return 
 */
static int iseos(lex_state_t * state) {
    if ((state->buffer + state->len) <= (state->pos)) {
 8008182:	6803      	ldr	r3, [r0, #0]
 8008184:	6882      	ldr	r2, [r0, #8]
 8008186:	6840      	ldr	r0, [r0, #4]
 8008188:	4413      	add	r3, r2
        return 1;
    } else {
        return 0;
    }
}
 800818a:	4298      	cmp	r0, r3
 800818c:	bf34      	ite	cc
 800818e:	2000      	movcc	r0, #0
 8008190:	2001      	movcs	r0, #1
 8008192:	4770      	bx	lr

08008194 <skipWs>:
/**
 * Skip all whitespaces
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
 8008194:	b510      	push	{r4, lr}
    int someSpace = 0;
 8008196:	2100      	movs	r1, #0
static int skipWs(lex_state_t * state) {
 8008198:	4604      	mov	r4, r0
    while (!iseos(state) && isws(state->pos[0])) {
 800819a:	4620      	mov	r0, r4
 800819c:	f7ff fff1 	bl	8008182 <iseos>
 80081a0:	b928      	cbnz	r0, 80081ae <skipWs+0x1a>
 80081a2:	6863      	ldr	r3, [r4, #4]
 80081a4:	781a      	ldrb	r2, [r3, #0]
    if ((c == ' ') || (c == '\t')) {
 80081a6:	2a20      	cmp	r2, #32
 80081a8:	d003      	beq.n	80081b2 <skipWs+0x1e>
 80081aa:	2a09      	cmp	r2, #9
 80081ac:	d001      	beq.n	80081b2 <skipWs+0x1e>
        state->pos++;
        someSpace++;
    }

    return someSpace;
}
 80081ae:	4608      	mov	r0, r1
 80081b0:	bd10      	pop	{r4, pc}
        state->pos++;
 80081b2:	3301      	adds	r3, #1
 80081b4:	6063      	str	r3, [r4, #4]
        someSpace++;
 80081b6:	3101      	adds	r1, #1
 80081b8:	e7ef      	b.n	800819a <skipWs+0x6>

080081ba <skipQuoteProgramData>:
/* 7.7.5 <STRING PROGRAM DATA> */
static int isascii7bit(int c) {
    return (c >= 0) && (c <= 0x7f);
}

static void skipQuoteProgramData(lex_state_t * state, char quote) {
 80081ba:	b538      	push	{r3, r4, r5, lr}
 80081bc:	4604      	mov	r4, r0
    while (!iseos(state)) {
 80081be:	4620      	mov	r0, r4
 80081c0:	f7ff ffdf 	bl	8008182 <iseos>
 80081c4:	b990      	cbnz	r0, 80081ec <skipQuoteProgramData+0x32>
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 80081c6:	6865      	ldr	r5, [r4, #4]
 80081c8:	782a      	ldrb	r2, [r5, #0]
 80081ca:	0613      	lsls	r3, r2, #24
 80081cc:	d40e      	bmi.n	80081ec <skipQuoteProgramData+0x32>
 80081ce:	1c6b      	adds	r3, r5, #1
 80081d0:	428a      	cmp	r2, r1
            state->pos++;
 80081d2:	6063      	str	r3, [r4, #4]
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 80081d4:	d1f3      	bne.n	80081be <skipQuoteProgramData+0x4>
        } else if (ischr(state, quote)) {
            state->pos++;
            if (!iseos(state) && ischr(state, quote)) {
 80081d6:	4620      	mov	r0, r4
 80081d8:	f7ff ffd3 	bl	8008182 <iseos>
 80081dc:	b928      	cbnz	r0, 80081ea <skipQuoteProgramData+0x30>
 80081de:	786b      	ldrb	r3, [r5, #1]
 80081e0:	428b      	cmp	r3, r1
 80081e2:	d102      	bne.n	80081ea <skipQuoteProgramData+0x30>
                state->pos++;
 80081e4:	3502      	adds	r5, #2
 80081e6:	6065      	str	r5, [r4, #4]
 80081e8:	e7e9      	b.n	80081be <skipQuoteProgramData+0x4>
            } else {
                state->pos--;
 80081ea:	6065      	str	r5, [r4, #4]
            }
        } else {
            break;
        }
    }
}
 80081ec:	bd38      	pop	{r3, r4, r5, pc}

080081ee <skipProgramMnemonic>:
static int skipProgramMnemonic(lex_state_t * state) {
 80081ee:	b538      	push	{r3, r4, r5, lr}
 80081f0:	4604      	mov	r4, r0
    const char * startPos = state->pos;
 80081f2:	6845      	ldr	r5, [r0, #4]
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 80081f4:	f7ff ffc5 	bl	8008182 <iseos>
 80081f8:	b130      	cbz	r0, 8008208 <skipProgramMnemonic+0x1a>
    if (iseos(state)) {
 80081fa:	4620      	mov	r0, r4
 80081fc:	f7ff ffc1 	bl	8008182 <iseos>
 8008200:	6863      	ldr	r3, [r4, #4]
 8008202:	b1d8      	cbz	r0, 800823c <skipProgramMnemonic+0x4e>
        return (state->pos - startPos) * SKIP_INCOMPLETE;
 8008204:	1ae8      	subs	r0, r5, r3
}
 8008206:	bd38      	pop	{r3, r4, r5, pc}
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8008208:	f002 fb36 	bl	800a878 <__locale_ctype_ptr>
 800820c:	6863      	ldr	r3, [r4, #4]
 800820e:	781a      	ldrb	r2, [r3, #0]
 8008210:	4410      	add	r0, r2
 8008212:	7842      	ldrb	r2, [r0, #1]
 8008214:	0790      	lsls	r0, r2, #30
 8008216:	d0f0      	beq.n	80081fa <skipProgramMnemonic+0xc>
            state->pos++;
 8008218:	3301      	adds	r3, #1
 800821a:	6063      	str	r3, [r4, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800821c:	4620      	mov	r0, r4
 800821e:	f7ff ffb0 	bl	8008182 <iseos>
 8008222:	2800      	cmp	r0, #0
 8008224:	d1e9      	bne.n	80081fa <skipProgramMnemonic+0xc>
 8008226:	f002 fb27 	bl	800a878 <__locale_ctype_ptr>
 800822a:	6863      	ldr	r3, [r4, #4]
 800822c:	781a      	ldrb	r2, [r3, #0]
 800822e:	4410      	add	r0, r2
 8008230:	7841      	ldrb	r1, [r0, #1]
 8008232:	0749      	lsls	r1, r1, #29
 8008234:	d1f0      	bne.n	8008218 <skipProgramMnemonic+0x2a>
 8008236:	2a5f      	cmp	r2, #95	; 0x5f
 8008238:	d0ee      	beq.n	8008218 <skipProgramMnemonic+0x2a>
 800823a:	e7de      	b.n	80081fa <skipProgramMnemonic+0xc>
        return (state->pos - startPos) * SKIP_OK;
 800823c:	1b58      	subs	r0, r3, r5
 800823e:	e7e2      	b.n	8008206 <skipProgramMnemonic+0x18>

08008240 <skipNumbers>:
static int skipNumbers(lex_state_t * state) {
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4605      	mov	r5, r0
    int someNumbers = 0;
 8008244:	2400      	movs	r4, #0
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8008246:	4628      	mov	r0, r5
 8008248:	f7ff ff9b 	bl	8008182 <iseos>
 800824c:	b938      	cbnz	r0, 800825e <skipNumbers+0x1e>
 800824e:	f002 fb13 	bl	800a878 <__locale_ctype_ptr>
 8008252:	686b      	ldr	r3, [r5, #4]
 8008254:	781a      	ldrb	r2, [r3, #0]
 8008256:	4410      	add	r0, r2
 8008258:	7842      	ldrb	r2, [r0, #1]
 800825a:	0752      	lsls	r2, r2, #29
 800825c:	d401      	bmi.n	8008262 <skipNumbers+0x22>
}
 800825e:	4620      	mov	r0, r4
 8008260:	bd38      	pop	{r3, r4, r5, pc}
        state->pos++;
 8008262:	3301      	adds	r3, #1
 8008264:	606b      	str	r3, [r5, #4]
        someNumbers++;
 8008266:	3401      	adds	r4, #1
 8008268:	e7ed      	b.n	8008246 <skipNumbers+0x6>

0800826a <skipAlpha>:
static int skipAlpha(lex_state_t * state) {
 800826a:	b538      	push	{r3, r4, r5, lr}
 800826c:	4605      	mov	r5, r0
    int someLetters = 0;
 800826e:	2400      	movs	r4, #0
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8008270:	4628      	mov	r0, r5
 8008272:	f7ff ff86 	bl	8008182 <iseos>
 8008276:	b938      	cbnz	r0, 8008288 <skipAlpha+0x1e>
 8008278:	f002 fafe 	bl	800a878 <__locale_ctype_ptr>
 800827c:	686b      	ldr	r3, [r5, #4]
 800827e:	781a      	ldrb	r2, [r3, #0]
 8008280:	4410      	add	r0, r2
 8008282:	7842      	ldrb	r2, [r0, #1]
 8008284:	0792      	lsls	r2, r2, #30
 8008286:	d101      	bne.n	800828c <skipAlpha+0x22>
}
 8008288:	4620      	mov	r0, r4
 800828a:	bd38      	pop	{r3, r4, r5, pc}
        state->pos++;
 800828c:	3301      	adds	r3, #1
 800828e:	606b      	str	r3, [r5, #4]
        someLetters++;
 8008290:	3401      	adds	r4, #1
 8008292:	e7ed      	b.n	8008270 <skipAlpha+0x6>

08008294 <skipPlusmn>:
static int skipPlusmn(lex_state_t * state) {
 8008294:	b508      	push	{r3, lr}
 8008296:	4601      	mov	r1, r0
    if (!iseos(state) && isplusmn(state->pos[0])) {
 8008298:	f7ff ff73 	bl	8008182 <iseos>
 800829c:	b948      	cbnz	r0, 80082b2 <skipPlusmn+0x1e>
 800829e:	684b      	ldr	r3, [r1, #4]
 80082a0:	781a      	ldrb	r2, [r3, #0]
    return c == '+' || c == '-';
 80082a2:	2a2b      	cmp	r2, #43	; 0x2b
 80082a4:	d001      	beq.n	80082aa <skipPlusmn+0x16>
 80082a6:	2a2d      	cmp	r2, #45	; 0x2d
 80082a8:	d102      	bne.n	80082b0 <skipPlusmn+0x1c>
        return SKIP_OK;
 80082aa:	2001      	movs	r0, #1
        state->pos++;
 80082ac:	3301      	adds	r3, #1
 80082ae:	604b      	str	r3, [r1, #4]
}
 80082b0:	bd08      	pop	{r3, pc}
        return SKIP_NONE;
 80082b2:	2000      	movs	r0, #0
 80082b4:	e7fc      	b.n	80082b0 <skipPlusmn+0x1c>

080082b6 <skipChr>:
static int skipChr(lex_state_t * state, char chr) {
 80082b6:	b510      	push	{r4, lr}
 80082b8:	4604      	mov	r4, r0
    if (!iseos(state) && ischr(state, chr)) {
 80082ba:	f7ff ff62 	bl	8008182 <iseos>
 80082be:	b938      	cbnz	r0, 80082d0 <skipChr+0x1a>
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	781a      	ldrb	r2, [r3, #0]
 80082c4:	428a      	cmp	r2, r1
 80082c6:	d102      	bne.n	80082ce <skipChr+0x18>
        return SKIP_OK;
 80082c8:	2001      	movs	r0, #1
        state->pos++;
 80082ca:	3301      	adds	r3, #1
 80082cc:	6063      	str	r3, [r4, #4]
}
 80082ce:	bd10      	pop	{r4, pc}
        return SKIP_NONE;
 80082d0:	2000      	movs	r0, #0
 80082d2:	e7fc      	b.n	80082ce <skipChr+0x18>

080082d4 <skipDigit>:
static int skipDigit(lex_state_t * state) {
 80082d4:	b510      	push	{r4, lr}
 80082d6:	4604      	mov	r4, r0
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 80082d8:	f7ff ff53 	bl	8008182 <iseos>
 80082dc:	b108      	cbz	r0, 80082e2 <skipDigit+0xe>
        return SKIP_NONE;
 80082de:	2000      	movs	r0, #0
}
 80082e0:	bd10      	pop	{r4, pc}
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 80082e2:	f002 fac9 	bl	800a878 <__locale_ctype_ptr>
 80082e6:	6863      	ldr	r3, [r4, #4]
 80082e8:	781a      	ldrb	r2, [r3, #0]
 80082ea:	4410      	add	r0, r2
 80082ec:	7842      	ldrb	r2, [r0, #1]
 80082ee:	0752      	lsls	r2, r2, #29
 80082f0:	d5f5      	bpl.n	80082de <skipDigit+0xa>
        state->pos++;
 80082f2:	3301      	adds	r3, #1
 80082f4:	6063      	str	r3, [r4, #4]
        return SKIP_OK;
 80082f6:	2001      	movs	r0, #1
 80082f8:	e7f2      	b.n	80082e0 <skipDigit+0xc>

080082fa <scpiLex_IsEos>:
    return iseos(state);
 80082fa:	f7ff bf42 	b.w	8008182 <iseos>

080082fe <scpiLex_WhiteSpace>:
int scpiLex_WhiteSpace(lex_state_t * state, scpi_token_t * token) {
 80082fe:	b538      	push	{r3, r4, r5, lr}
 8008300:	460c      	mov	r4, r1
 8008302:	4605      	mov	r5, r0
    token->ptr = state->pos;
 8008304:	6843      	ldr	r3, [r0, #4]
 8008306:	604b      	str	r3, [r1, #4]
    skipWs(state);
 8008308:	f7ff ff44 	bl	8008194 <skipWs>
    token->len = state->pos - token->ptr;
 800830c:	6863      	ldr	r3, [r4, #4]
 800830e:	6868      	ldr	r0, [r5, #4]
 8008310:	1ac0      	subs	r0, r0, r3
    if (token->len > 0) {
 8008312:	2800      	cmp	r0, #0
        token->type = SCPI_TOKEN_WS;
 8008314:	bfcc      	ite	gt
 8008316:	2317      	movgt	r3, #23
        token->type = SCPI_TOKEN_UNKNOWN;
 8008318:	231a      	movle	r3, #26
    token->len = state->pos - token->ptr;
 800831a:	60a0      	str	r0, [r4, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 800831c:	7023      	strb	r3, [r4, #0]
}
 800831e:	bd38      	pop	{r3, r4, r5, pc}

08008320 <scpiLex_ProgramHeader>:
    token->ptr = state->pos;
 8008320:	6843      	ldr	r3, [r0, #4]
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 8008322:	b570      	push	{r4, r5, r6, lr}
    token->ptr = state->pos;
 8008324:	604b      	str	r3, [r1, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8008326:	231a      	movs	r3, #26
 8008328:	700b      	strb	r3, [r1, #0]
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 800832a:	4604      	mov	r4, r0
 800832c:	460d      	mov	r5, r1
    if (!iseos(state) && ischr(state, '*')) {
 800832e:	f7ff ff28 	bl	8008182 <iseos>
 8008332:	4606      	mov	r6, r0
 8008334:	2800      	cmp	r0, #0
 8008336:	d130      	bne.n	800839a <scpiLex_ProgramHeader+0x7a>
 8008338:	6863      	ldr	r3, [r4, #4]
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	2a2a      	cmp	r2, #42	; 0x2a
 800833e:	d11d      	bne.n	800837c <scpiLex_ProgramHeader+0x5c>
        state->pos++;
 8008340:	3301      	adds	r3, #1
 8008342:	6063      	str	r3, [r4, #4]
        res = skipProgramMnemonic(state);
 8008344:	4620      	mov	r0, r4
 8008346:	f7ff ff52 	bl	80081ee <skipProgramMnemonic>
        if (res == SKIP_NONE && iseos(state)) {
 800834a:	b970      	cbnz	r0, 800836a <scpiLex_ProgramHeader+0x4a>
        token->type = SCPI_TOKEN_INCOMPLETE_COMMON_PROGRAM_HEADER;
 800834c:	2314      	movs	r3, #20
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 800834e:	702b      	strb	r3, [r5, #0]
    if (token->type != SCPI_TOKEN_UNKNOWN) {
 8008350:	782b      	ldrb	r3, [r5, #0]
 8008352:	686a      	ldr	r2, [r5, #4]
 8008354:	2b1a      	cmp	r3, #26
        token->len = 0;
 8008356:	bf0b      	itete	eq
 8008358:	2300      	moveq	r3, #0
        token->len = state->pos - token->ptr;
 800835a:	6863      	ldrne	r3, [r4, #4]
        token->len = 0;
 800835c:	60ab      	streq	r3, [r5, #8]
        token->len = state->pos - token->ptr;
 800835e:	1a9b      	subne	r3, r3, r2
 8008360:	bf14      	ite	ne
 8008362:	60ab      	strne	r3, [r5, #8]
        state->pos = token->ptr;
 8008364:	6062      	streq	r2, [r4, #4]
}
 8008366:	68a8      	ldr	r0, [r5, #8]
 8008368:	bd70      	pop	{r4, r5, r6, pc}
        if (skipChr(state, '?') >= SKIP_OK) {
 800836a:	213f      	movs	r1, #63	; 0x3f
 800836c:	4620      	mov	r0, r4
 800836e:	f7ff ffa2 	bl	80082b6 <skipChr>
 8008372:	2800      	cmp	r0, #0
            token->type = SCPI_TOKEN_COMMON_QUERY_PROGRAM_HEADER;
 8008374:	bfcc      	ite	gt
 8008376:	2316      	movgt	r3, #22
            token->type = SCPI_TOKEN_COMMON_PROGRAM_HEADER;
 8008378:	2313      	movle	r3, #19
 800837a:	e7e8      	b.n	800834e <scpiLex_ProgramHeader+0x2e>
    if (!iseos(state) && ischr(state, ':')) {
 800837c:	2a3a      	cmp	r2, #58	; 0x3a
 800837e:	d102      	bne.n	8008386 <scpiLex_ProgramHeader+0x66>
        return SKIP_OK;
 8008380:	2601      	movs	r6, #1
        state->pos++;
 8008382:	3301      	adds	r3, #1
 8008384:	6063      	str	r3, [r4, #4]
    res = skipProgramMnemonic(state);
 8008386:	4620      	mov	r0, r4
 8008388:	f7ff ff31 	bl	80081ee <skipProgramMnemonic>
    if (res >= SKIP_OK) {
 800838c:	2800      	cmp	r0, #0
 800838e:	dc07      	bgt.n	80083a0 <scpiLex_ProgramHeader+0x80>
    } else if (res <= SKIP_INCOMPLETE) {
 8008390:	d115      	bne.n	80083be <scpiLex_ProgramHeader+0x9e>
    } else if (firstColon) {
 8008392:	2e00      	cmp	r6, #0
 8008394:	d0dc      	beq.n	8008350 <scpiLex_ProgramHeader+0x30>
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 8008396:	2312      	movs	r3, #18
 8008398:	e7d9      	b.n	800834e <scpiLex_ProgramHeader+0x2e>
        return SKIP_NONE;
 800839a:	2600      	movs	r6, #0
 800839c:	e7f3      	b.n	8008386 <scpiLex_ProgramHeader+0x66>
            } else if (res == SKIP_NONE) {
 800839e:	d0fa      	beq.n	8008396 <scpiLex_ProgramHeader+0x76>
    if (!iseos(state) && ischr(state, ':')) {
 80083a0:	4620      	mov	r0, r4
 80083a2:	f7ff feee 	bl	8008182 <iseos>
 80083a6:	b950      	cbnz	r0, 80083be <scpiLex_ProgramHeader+0x9e>
 80083a8:	6863      	ldr	r3, [r4, #4]
 80083aa:	781a      	ldrb	r2, [r3, #0]
 80083ac:	2a3a      	cmp	r2, #58	; 0x3a
 80083ae:	d106      	bne.n	80083be <scpiLex_ProgramHeader+0x9e>
        state->pos++;
 80083b0:	3301      	adds	r3, #1
 80083b2:	6063      	str	r3, [r4, #4]
            res = skipProgramMnemonic(state);
 80083b4:	4620      	mov	r0, r4
 80083b6:	f7ff ff1a 	bl	80081ee <skipProgramMnemonic>
            if (res <= SKIP_INCOMPLETE) {
 80083ba:	2800      	cmp	r0, #0
 80083bc:	daef      	bge.n	800839e <scpiLex_ProgramHeader+0x7e>
            if (skipChr(state, '?') >= SKIP_OK) {
 80083be:	213f      	movs	r1, #63	; 0x3f
 80083c0:	4620      	mov	r0, r4
 80083c2:	f7ff ff78 	bl	80082b6 <skipChr>
 80083c6:	2800      	cmp	r0, #0
                token->type = SCPI_TOKEN_COMPOUND_QUERY_PROGRAM_HEADER;
 80083c8:	bfcc      	ite	gt
 80083ca:	2315      	movgt	r3, #21
                token->type = SCPI_TOKEN_COMPOUND_PROGRAM_HEADER;
 80083cc:	2311      	movle	r3, #17
 80083ce:	e7be      	b.n	800834e <scpiLex_ProgramHeader+0x2e>

080083d0 <scpiLex_CharacterProgramData>:
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 80083d0:	b538      	push	{r3, r4, r5, lr}
    token->ptr = state->pos;
 80083d2:	6843      	ldr	r3, [r0, #4]
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 80083d4:	4604      	mov	r4, r0
    token->ptr = state->pos;
 80083d6:	604b      	str	r3, [r1, #4]
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 80083d8:	460d      	mov	r5, r1
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 80083da:	f7ff fed2 	bl	8008182 <iseos>
 80083de:	b138      	cbz	r0, 80083f0 <scpiLex_CharacterProgramData+0x20>
    token->len = state->pos - token->ptr;
 80083e0:	6860      	ldr	r0, [r4, #4]
 80083e2:	686b      	ldr	r3, [r5, #4]
 80083e4:	1ac0      	subs	r0, r0, r3
    if (token->len > 0) {
 80083e6:	2800      	cmp	r0, #0
    token->len = state->pos - token->ptr;
 80083e8:	60a8      	str	r0, [r5, #8]
    if (token->len > 0) {
 80083ea:	dc1b      	bgt.n	8008424 <scpiLex_CharacterProgramData+0x54>
        token->type = SCPI_TOKEN_UNKNOWN;
 80083ec:	231a      	movs	r3, #26
 80083ee:	e01a      	b.n	8008426 <scpiLex_CharacterProgramData+0x56>
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 80083f0:	f002 fa42 	bl	800a878 <__locale_ctype_ptr>
 80083f4:	6863      	ldr	r3, [r4, #4]
 80083f6:	781a      	ldrb	r2, [r3, #0]
 80083f8:	4410      	add	r0, r2
 80083fa:	7842      	ldrb	r2, [r0, #1]
 80083fc:	0790      	lsls	r0, r2, #30
 80083fe:	d0ef      	beq.n	80083e0 <scpiLex_CharacterProgramData+0x10>
            state->pos++;
 8008400:	3301      	adds	r3, #1
 8008402:	6063      	str	r3, [r4, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8008404:	4620      	mov	r0, r4
 8008406:	f7ff febc 	bl	8008182 <iseos>
 800840a:	2800      	cmp	r0, #0
 800840c:	d1e8      	bne.n	80083e0 <scpiLex_CharacterProgramData+0x10>
 800840e:	f002 fa33 	bl	800a878 <__locale_ctype_ptr>
 8008412:	6863      	ldr	r3, [r4, #4]
 8008414:	781a      	ldrb	r2, [r3, #0]
 8008416:	4410      	add	r0, r2
 8008418:	7841      	ldrb	r1, [r0, #1]
 800841a:	0749      	lsls	r1, r1, #29
 800841c:	d1f0      	bne.n	8008400 <scpiLex_CharacterProgramData+0x30>
 800841e:	2a5f      	cmp	r2, #95	; 0x5f
 8008420:	d0ee      	beq.n	8008400 <scpiLex_CharacterProgramData+0x30>
 8008422:	e7dd      	b.n	80083e0 <scpiLex_CharacterProgramData+0x10>
        token->type = SCPI_TOKEN_PROGRAM_MNEMONIC;
 8008424:	2309      	movs	r3, #9
        token->type = SCPI_TOKEN_UNKNOWN;
 8008426:	702b      	strb	r3, [r5, #0]
}
 8008428:	bd38      	pop	{r3, r4, r5, pc}

0800842a <scpiLex_DecimalNumericProgramData>:
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 800842a:	b570      	push	{r4, r5, r6, lr}
 800842c:	4604      	mov	r4, r0
    token->ptr = state->pos;
 800842e:	6843      	ldr	r3, [r0, #4]
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 8008430:	460d      	mov	r5, r1
    token->ptr = state->pos;
 8008432:	604b      	str	r3, [r1, #4]
    skipPlusmn(state);
 8008434:	f7ff ff2e 	bl	8008294 <skipPlusmn>
    someNumbers += skipNumbers(state);
 8008438:	4620      	mov	r0, r4
 800843a:	f7ff ff01 	bl	8008240 <skipNumbers>
    if (skipChr(state, '.')) {
 800843e:	212e      	movs	r1, #46	; 0x2e
    someNumbers += skipNumbers(state);
 8008440:	4606      	mov	r6, r0
    if (skipChr(state, '.')) {
 8008442:	4620      	mov	r0, r4
 8008444:	f7ff ff37 	bl	80082b6 <skipChr>
 8008448:	b118      	cbz	r0, 8008452 <scpiLex_DecimalNumericProgramData+0x28>
        someNumbers += skipNumbers(state);
 800844a:	4620      	mov	r0, r4
 800844c:	f7ff fef8 	bl	8008240 <skipNumbers>
 8008450:	4406      	add	r6, r0
    if (skipMantisa(state)) {
 8008452:	b336      	cbz	r6, 80084a2 <scpiLex_DecimalNumericProgramData+0x78>
        skipWs(state);
 8008454:	4620      	mov	r0, r4
        rollback = state->pos;
 8008456:	6866      	ldr	r6, [r4, #4]
        skipWs(state);
 8008458:	f7ff fe9c 	bl	8008194 <skipWs>
    if (!iseos(state) && isE(state->pos[0])) {
 800845c:	4620      	mov	r0, r4
 800845e:	f7ff fe90 	bl	8008182 <iseos>
 8008462:	b150      	cbz	r0, 800847a <scpiLex_DecimalNumericProgramData+0x50>
            state->pos = rollback;
 8008464:	6066      	str	r6, [r4, #4]
    token->len = state->pos - token->ptr;
 8008466:	686b      	ldr	r3, [r5, #4]
 8008468:	6860      	ldr	r0, [r4, #4]
 800846a:	1ac0      	subs	r0, r0, r3
    if (token->len > 0) {
 800846c:	2800      	cmp	r0, #0
        token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA;
 800846e:	bfcc      	ite	gt
 8008470:	230a      	movgt	r3, #10
        token->type = SCPI_TOKEN_UNKNOWN;
 8008472:	231a      	movle	r3, #26
    token->len = state->pos - token->ptr;
 8008474:	60a8      	str	r0, [r5, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8008476:	702b      	strb	r3, [r5, #0]
}
 8008478:	bd70      	pop	{r4, r5, r6, pc}
    if (!iseos(state) && isE(state->pos[0])) {
 800847a:	6863      	ldr	r3, [r4, #4]
    return c == 'e' || c == 'E';
 800847c:	781a      	ldrb	r2, [r3, #0]
 800847e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008482:	2a45      	cmp	r2, #69	; 0x45
 8008484:	d1ee      	bne.n	8008464 <scpiLex_DecimalNumericProgramData+0x3a>
        state->pos++;
 8008486:	3301      	adds	r3, #1
 8008488:	6063      	str	r3, [r4, #4]
        skipWs(state);
 800848a:	4620      	mov	r0, r4
 800848c:	f7ff fe82 	bl	8008194 <skipWs>
        skipPlusmn(state);
 8008490:	4620      	mov	r0, r4
 8008492:	f7ff feff 	bl	8008294 <skipPlusmn>
        someNumbers = skipNumbers(state);
 8008496:	4620      	mov	r0, r4
 8008498:	f7ff fed2 	bl	8008240 <skipNumbers>
        if (!skipExponent(state)) {
 800849c:	2800      	cmp	r0, #0
 800849e:	d1e2      	bne.n	8008466 <scpiLex_DecimalNumericProgramData+0x3c>
 80084a0:	e7e0      	b.n	8008464 <scpiLex_DecimalNumericProgramData+0x3a>
        state->pos = token->ptr;
 80084a2:	686b      	ldr	r3, [r5, #4]
 80084a4:	6063      	str	r3, [r4, #4]
 80084a6:	e7de      	b.n	8008466 <scpiLex_DecimalNumericProgramData+0x3c>

080084a8 <scpiLex_SuffixProgramData>:
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4604      	mov	r4, r0
    token->ptr = state->pos;
 80084ac:	6843      	ldr	r3, [r0, #4]
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 80084ae:	460d      	mov	r5, r1
    token->ptr = state->pos;
 80084b0:	604b      	str	r3, [r1, #4]
    skipChr(state, '/');
 80084b2:	212f      	movs	r1, #47	; 0x2f
 80084b4:	f7ff feff 	bl	80082b6 <skipChr>
    if (skipAlpha(state)) {
 80084b8:	4620      	mov	r0, r4
 80084ba:	f7ff fed6 	bl	800826a <skipAlpha>
 80084be:	b1a8      	cbz	r0, 80084ec <scpiLex_SuffixProgramData+0x44>
        skipChr(state, '-');
 80084c0:	212d      	movs	r1, #45	; 0x2d
 80084c2:	4620      	mov	r0, r4
 80084c4:	f7ff fef7 	bl	80082b6 <skipChr>
        skipDigit(state);
 80084c8:	4620      	mov	r0, r4
 80084ca:	f7ff ff03 	bl	80082d4 <skipDigit>
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 80084ce:	4620      	mov	r0, r4
 80084d0:	f7ff fe57 	bl	8008182 <iseos>
 80084d4:	b950      	cbnz	r0, 80084ec <scpiLex_SuffixProgramData+0x44>
 80084d6:	6863      	ldr	r3, [r4, #4]
    return (state->pos[0] == chr);
 80084d8:	781a      	ldrb	r2, [r3, #0]
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 80084da:	3a2e      	subs	r2, #46	; 0x2e
 80084dc:	2a01      	cmp	r2, #1
 80084de:	d805      	bhi.n	80084ec <scpiLex_SuffixProgramData+0x44>
        state->pos++;
 80084e0:	3301      	adds	r3, #1
 80084e2:	6063      	str	r3, [r4, #4]
            skipAlpha(state);
 80084e4:	4620      	mov	r0, r4
 80084e6:	f7ff fec0 	bl	800826a <skipAlpha>
 80084ea:	e7e9      	b.n	80084c0 <scpiLex_SuffixProgramData+0x18>
    token->len = state->pos - token->ptr;
 80084ec:	6863      	ldr	r3, [r4, #4]
 80084ee:	686a      	ldr	r2, [r5, #4]
 80084f0:	1a9b      	subs	r3, r3, r2
    if ((token->len > 0)) {
 80084f2:	2b00      	cmp	r3, #0
    token->len = state->pos - token->ptr;
 80084f4:	60ab      	str	r3, [r5, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 80084f6:	bfdd      	ittte	le
 80084f8:	231a      	movle	r3, #26
 80084fa:	702b      	strble	r3, [r5, #0]
        token->len = 0;
 80084fc:	2300      	movle	r3, #0
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 80084fe:	230c      	movgt	r3, #12
        state->pos = token->ptr;
 8008500:	bfda      	itte	le
 8008502:	6062      	strle	r2, [r4, #4]
        token->len = 0;
 8008504:	60ab      	strle	r3, [r5, #8]
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 8008506:	702b      	strbgt	r3, [r5, #0]
}
 8008508:	68a8      	ldr	r0, [r5, #8]
 800850a:	bd38      	pop	{r3, r4, r5, pc}

0800850c <scpiLex_NondecimalNumericData>:
    token->ptr = state->pos;
 800850c:	6843      	ldr	r3, [r0, #4]
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 800850e:	b570      	push	{r4, r5, r6, lr}
 8008510:	460d      	mov	r5, r1
    token->ptr = state->pos;
 8008512:	604b      	str	r3, [r1, #4]
    if (skipChr(state, '#')) {
 8008514:	2123      	movs	r1, #35	; 0x23
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 8008516:	4604      	mov	r4, r0
    if (skipChr(state, '#')) {
 8008518:	f7ff fecd 	bl	80082b6 <skipChr>
 800851c:	2800      	cmp	r0, #0
 800851e:	d054      	beq.n	80085ca <scpiLex_NondecimalNumericData+0xbe>
        if (!iseos(state)) {
 8008520:	4620      	mov	r0, r4
 8008522:	f7ff fe2e 	bl	8008182 <iseos>
 8008526:	4606      	mov	r6, r0
 8008528:	2800      	cmp	r0, #0
 800852a:	d14e      	bne.n	80085ca <scpiLex_NondecimalNumericData+0xbe>
            if (isH(state->pos[0])) {
 800852c:	6863      	ldr	r3, [r4, #4]
    return c == 'h' || c == 'H';
 800852e:	781a      	ldrb	r2, [r3, #0]
 8008530:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008534:	2a48      	cmp	r2, #72	; 0x48
 8008536:	d122      	bne.n	800857e <scpiLex_NondecimalNumericData+0x72>
                state->pos++;
 8008538:	3301      	adds	r3, #1
 800853a:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 800853c:	4620      	mov	r0, r4
 800853e:	f7ff fe20 	bl	8008182 <iseos>
 8008542:	b178      	cbz	r0, 8008564 <scpiLex_NondecimalNumericData+0x58>
                token->type = SCPI_TOKEN_HEXNUM;
 8008544:	2306      	movs	r3, #6
                token->type = SCPI_TOKEN_BINNUM;
 8008546:	702b      	strb	r3, [r5, #0]
    if (someNumbers) {
 8008548:	2e00      	cmp	r6, #0
 800854a:	d03e      	beq.n	80085ca <scpiLex_NondecimalNumericData+0xbe>
        token->ptr += 2; /* ignore number prefix */
 800854c:	686b      	ldr	r3, [r5, #4]
        token->len = state->pos - token->ptr;
 800854e:	6862      	ldr	r2, [r4, #4]
        token->ptr += 2; /* ignore number prefix */
 8008550:	3302      	adds	r3, #2
 8008552:	606b      	str	r3, [r5, #4]
        token->len = state->pos - token->ptr;
 8008554:	1ad3      	subs	r3, r2, r3
        token->len = 0;
 8008556:	60ab      	str	r3, [r5, #8]
    return token->len > 0 ? token->len + 2 : 0;
 8008558:	68a8      	ldr	r0, [r5, #8]
 800855a:	2800      	cmp	r0, #0
 800855c:	bfcc      	ite	gt
 800855e:	3002      	addgt	r0, #2
 8008560:	2000      	movle	r0, #0
}
 8008562:	bd70      	pop	{r4, r5, r6, pc}
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8008564:	f002 f988 	bl	800a878 <__locale_ctype_ptr>
 8008568:	6863      	ldr	r3, [r4, #4]
 800856a:	781a      	ldrb	r2, [r3, #0]
 800856c:	4410      	add	r0, r2
 800856e:	7842      	ldrb	r2, [r0, #1]
 8008570:	f012 0f44 	tst.w	r2, #68	; 0x44
 8008574:	d0e6      	beq.n	8008544 <scpiLex_NondecimalNumericData+0x38>
        state->pos++;
 8008576:	3301      	adds	r3, #1
 8008578:	6063      	str	r3, [r4, #4]
        someNumbers++;
 800857a:	3601      	adds	r6, #1
 800857c:	e7de      	b.n	800853c <scpiLex_NondecimalNumericData+0x30>
    return c == 'q' || c == 'Q';
 800857e:	2a51      	cmp	r2, #81	; 0x51
 8008580:	d110      	bne.n	80085a4 <scpiLex_NondecimalNumericData+0x98>
                state->pos++;
 8008582:	3301      	adds	r3, #1
 8008584:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 8008586:	4620      	mov	r0, r4
 8008588:	f7ff fdfb 	bl	8008182 <iseos>
 800858c:	b940      	cbnz	r0, 80085a0 <scpiLex_NondecimalNumericData+0x94>
 800858e:	6863      	ldr	r3, [r4, #4]
    if ((c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7')) {
 8008590:	781a      	ldrb	r2, [r3, #0]
 8008592:	3a30      	subs	r2, #48	; 0x30
 8008594:	2a07      	cmp	r2, #7
 8008596:	d803      	bhi.n	80085a0 <scpiLex_NondecimalNumericData+0x94>
        state->pos++;
 8008598:	3301      	adds	r3, #1
 800859a:	6063      	str	r3, [r4, #4]
        someNumbers++;
 800859c:	3601      	adds	r6, #1
 800859e:	e7f2      	b.n	8008586 <scpiLex_NondecimalNumericData+0x7a>
                token->type = SCPI_TOKEN_OCTNUM;
 80085a0:	2307      	movs	r3, #7
 80085a2:	e7d0      	b.n	8008546 <scpiLex_NondecimalNumericData+0x3a>
    return c == 'b' || c == 'B';
 80085a4:	2a42      	cmp	r2, #66	; 0x42
 80085a6:	d110      	bne.n	80085ca <scpiLex_NondecimalNumericData+0xbe>
                state->pos++;
 80085a8:	3301      	adds	r3, #1
 80085aa:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 80085ac:	4620      	mov	r0, r4
 80085ae:	f7ff fde8 	bl	8008182 <iseos>
 80085b2:	b940      	cbnz	r0, 80085c6 <scpiLex_NondecimalNumericData+0xba>
 80085b4:	6863      	ldr	r3, [r4, #4]
    if ((c == '0') || (c == '1')) {
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	3a30      	subs	r2, #48	; 0x30
 80085ba:	2a01      	cmp	r2, #1
 80085bc:	d803      	bhi.n	80085c6 <scpiLex_NondecimalNumericData+0xba>
        state->pos++;
 80085be:	3301      	adds	r3, #1
 80085c0:	6063      	str	r3, [r4, #4]
        someNumbers++;
 80085c2:	3601      	adds	r6, #1
 80085c4:	e7f2      	b.n	80085ac <scpiLex_NondecimalNumericData+0xa0>
                token->type = SCPI_TOKEN_BINNUM;
 80085c6:	2308      	movs	r3, #8
 80085c8:	e7bd      	b.n	8008546 <scpiLex_NondecimalNumericData+0x3a>
        token->type = SCPI_TOKEN_UNKNOWN;
 80085ca:	231a      	movs	r3, #26
 80085cc:	702b      	strb	r3, [r5, #0]
        state->pos = token->ptr;
 80085ce:	686b      	ldr	r3, [r5, #4]
 80085d0:	6063      	str	r3, [r4, #4]
        token->len = 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	e7bf      	b.n	8008556 <scpiLex_NondecimalNumericData+0x4a>

080085d6 <scpiLex_StringProgramData>:
 * Detect token String data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 80085d6:	b538      	push	{r3, r4, r5, lr}
    token->ptr = state->pos;
 80085d8:	6843      	ldr	r3, [r0, #4]
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 80085da:	4604      	mov	r4, r0
    token->ptr = state->pos;
 80085dc:	604b      	str	r3, [r1, #4]
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 80085de:	460d      	mov	r5, r1

    if (!iseos(state)) {
 80085e0:	f7ff fdcf 	bl	8008182 <iseos>
 80085e4:	b9a0      	cbnz	r0, 8008610 <scpiLex_StringProgramData+0x3a>
        if (ischr(state, '"')) {
 80085e6:	6863      	ldr	r3, [r4, #4]
    return (state->pos[0] == chr);
 80085e8:	7819      	ldrb	r1, [r3, #0]
        if (ischr(state, '"')) {
 80085ea:	2922      	cmp	r1, #34	; 0x22
 80085ec:	d11f      	bne.n	800862e <scpiLex_StringProgramData+0x58>
            state->pos++;
 80085ee:	3301      	adds	r3, #1
 80085f0:	6063      	str	r3, [r4, #4]
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 80085f2:	230f      	movs	r3, #15
    skipQuoteProgramData(state, '"');
 80085f4:	4620      	mov	r0, r4
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 80085f6:	702b      	strb	r3, [r5, #0]
    skipQuoteProgramData(state, '"');
 80085f8:	f7ff fddf 	bl	80081ba <skipQuoteProgramData>
            skipDoubleQuoteProgramData(state);
            if (!iseos(state) && ischr(state, '"')) {
 80085fc:	4620      	mov	r0, r4
 80085fe:	f7ff fdc0 	bl	8008182 <iseos>
 8008602:	bb28      	cbnz	r0, 8008650 <scpiLex_StringProgramData+0x7a>
 8008604:	6863      	ldr	r3, [r4, #4]
 8008606:	781a      	ldrb	r2, [r3, #0]
 8008608:	2a22      	cmp	r2, #34	; 0x22
            }
        } else if (ischr(state, '\'')) {
            state->pos++;
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
            skipSingleQuoteProgramData(state);
            if (!iseos(state) && ischr(state, '\'')) {
 800860a:	d121      	bne.n	8008650 <scpiLex_StringProgramData+0x7a>
                state->pos++;
 800860c:	3301      	adds	r3, #1
                token->len = state->pos - token->ptr;
            } else {
                state->pos = token->ptr;
 800860e:	6063      	str	r3, [r4, #4]
            }
        }
    }

    token->len = state->pos - token->ptr;
 8008610:	6863      	ldr	r3, [r4, #4]
 8008612:	686a      	ldr	r2, [r5, #4]
 8008614:	1a9b      	subs	r3, r3, r2

    if ((token->len > 0)) {
 8008616:	2b00      	cmp	r3, #0
    token->len = state->pos - token->ptr;
 8008618:	60ab      	str	r3, [r5, #8]
    if ((token->len > 0)) {
 800861a:	dc04      	bgt.n	8008626 <scpiLex_StringProgramData+0x50>
        /* token->ptr++;
         * token->len -= 2; */
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800861c:	231a      	movs	r3, #26
 800861e:	702b      	strb	r3, [r5, #0]
        state->pos = token->ptr;
        token->len = 0;
 8008620:	2300      	movs	r3, #0
        state->pos = token->ptr;
 8008622:	6062      	str	r2, [r4, #4]
        token->len = 0;
 8008624:	60ab      	str	r3, [r5, #8]
    }

    return token->len > 0 ? token->len : 0;
 8008626:	68a8      	ldr	r0, [r5, #8]
}
 8008628:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800862c:	bd38      	pop	{r3, r4, r5, pc}
        } else if (ischr(state, '\'')) {
 800862e:	2927      	cmp	r1, #39	; 0x27
 8008630:	d1ee      	bne.n	8008610 <scpiLex_StringProgramData+0x3a>
            state->pos++;
 8008632:	3301      	adds	r3, #1
 8008634:	6063      	str	r3, [r4, #4]
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 8008636:	230e      	movs	r3, #14
    skipQuoteProgramData(state, '\'');
 8008638:	4620      	mov	r0, r4
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 800863a:	702b      	strb	r3, [r5, #0]
    skipQuoteProgramData(state, '\'');
 800863c:	f7ff fdbd 	bl	80081ba <skipQuoteProgramData>
            if (!iseos(state) && ischr(state, '\'')) {
 8008640:	4620      	mov	r0, r4
 8008642:	f7ff fd9e 	bl	8008182 <iseos>
 8008646:	b918      	cbnz	r0, 8008650 <scpiLex_StringProgramData+0x7a>
 8008648:	6863      	ldr	r3, [r4, #4]
 800864a:	781a      	ldrb	r2, [r3, #0]
 800864c:	2a27      	cmp	r2, #39	; 0x27
 800864e:	e7dc      	b.n	800860a <scpiLex_StringProgramData+0x34>
                state->pos = token->ptr;
 8008650:	686b      	ldr	r3, [r5, #4]
 8008652:	e7dc      	b.n	800860e <scpiLex_StringProgramData+0x38>

08008654 <scpiLex_ArbitraryBlockProgramData>:
 * Detect token Block Data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8008654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int i;
    int arbitraryBlockLength = 0;
    const char * ptr = state->pos;
 8008658:	f8d0 8004 	ldr.w	r8, [r0, #4]
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 800865c:	460d      	mov	r5, r1
    int validData = -1;
    token->ptr = state->pos;
 800865e:	f8c1 8004 	str.w	r8, [r1, #4]

    if (skipChr(state, '#')) {
 8008662:	2123      	movs	r1, #35	; 0x23
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8008664:	4604      	mov	r4, r0
    if (skipChr(state, '#')) {
 8008666:	f7ff fe26 	bl	80082b6 <skipChr>
 800866a:	2800      	cmp	r0, #0
 800866c:	d04d      	beq.n	800870a <scpiLex_ArbitraryBlockProgramData+0xb6>
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
 800866e:	4620      	mov	r0, r4
 8008670:	f7ff fd87 	bl	8008182 <iseos>
 8008674:	4606      	mov	r6, r0
 8008676:	2800      	cmp	r0, #0
 8008678:	d142      	bne.n	8008700 <scpiLex_ArbitraryBlockProgramData+0xac>
 800867a:	6863      	ldr	r3, [r4, #4]
 800867c:	781f      	ldrb	r7, [r3, #0]
    return isdigit(c) && (c != '0');
 800867e:	f002 f8fb 	bl	800a878 <__locale_ctype_ptr>
 8008682:	4438      	add	r0, r7
 8008684:	7843      	ldrb	r3, [r0, #1]
 8008686:	0758      	lsls	r0, r3, #29
 8008688:	d53a      	bpl.n	8008700 <scpiLex_ArbitraryBlockProgramData+0xac>
 800868a:	2f30      	cmp	r7, #48	; 0x30
 800868c:	d038      	beq.n	8008700 <scpiLex_ArbitraryBlockProgramData+0xac>
            i = state->pos[0] - '0';
            state->pos++;

            for (; i > 0; i--) {
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
                    arbitraryBlockLength *= 10;
 800868e:	f04f 090a 	mov.w	r9, #10
            i = state->pos[0] - '0';
 8008692:	6863      	ldr	r3, [r4, #4]
 8008694:	f813 7b01 	ldrb.w	r7, [r3], #1
 8008698:	3f30      	subs	r7, #48	; 0x30
            state->pos++;
 800869a:	6063      	str	r3, [r4, #4]
            for (; i > 0; i--) {
 800869c:	2f00      	cmp	r7, #0
 800869e:	dc17      	bgt.n	80086d0 <scpiLex_ArbitraryBlockProgramData+0x7c>
                } else {
                    break;
                }
            }

            if (i == 0) {
 80086a0:	d12e      	bne.n	8008700 <scpiLex_ArbitraryBlockProgramData+0xac>
                state->pos += arbitraryBlockLength;
 80086a2:	6862      	ldr	r2, [r4, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	68a0      	ldr	r0, [r4, #8]
                state->pos += arbitraryBlockLength;
 80086a8:	1991      	adds	r1, r2, r6
                if ((state->buffer + state->len) >= (state->pos)) {
 80086aa:	4403      	add	r3, r0
 80086ac:	4299      	cmp	r1, r3
                state->pos += arbitraryBlockLength;
 80086ae:	6061      	str	r1, [r4, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 80086b0:	d921      	bls.n	80086f6 <scpiLex_ArbitraryBlockProgramData+0xa2>
    if (validData == 1) {
        /* valid */
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
    } else if (validData == 0) {
        /* incomplete */
        token->type = SCPI_TOKEN_UNKNOWN;
 80086b2:	231a      	movs	r3, #26
 80086b4:	702b      	strb	r3, [r5, #0]
        token->len = 0;
 80086b6:	2300      	movs	r3, #0
        state->pos = state->buffer + state->len;
 80086b8:	68a2      	ldr	r2, [r4, #8]
        token->len = 0;
 80086ba:	60ab      	str	r3, [r5, #8]
        state->pos = state->buffer + state->len;
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	4413      	add	r3, r2
 80086c0:	6063      	str	r3, [r4, #4]
        token->type = SCPI_TOKEN_UNKNOWN;
        state->pos = token->ptr;
        token->len = 0;
    }

    return token->len + (token->ptr - ptr);
 80086c2:	6868      	ldr	r0, [r5, #4]
 80086c4:	68ab      	ldr	r3, [r5, #8]
 80086c6:	eba0 0008 	sub.w	r0, r0, r8
}
 80086ca:	4418      	add	r0, r3
 80086cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7ff fd56 	bl	8008182 <iseos>
 80086d6:	b998      	cbnz	r0, 8008700 <scpiLex_ArbitraryBlockProgramData+0xac>
 80086d8:	f002 f8ce 	bl	800a878 <__locale_ctype_ptr>
 80086dc:	6863      	ldr	r3, [r4, #4]
 80086de:	781a      	ldrb	r2, [r3, #0]
 80086e0:	4410      	add	r0, r2
 80086e2:	7841      	ldrb	r1, [r0, #1]
 80086e4:	0749      	lsls	r1, r1, #29
 80086e6:	d50b      	bpl.n	8008700 <scpiLex_ArbitraryBlockProgramData+0xac>
                    arbitraryBlockLength += (state->pos[0] - '0');
 80086e8:	3a30      	subs	r2, #48	; 0x30
                    state->pos++;
 80086ea:	3301      	adds	r3, #1
                    arbitraryBlockLength += (state->pos[0] - '0');
 80086ec:	fb09 2606 	mla	r6, r9, r6, r2
                    state->pos++;
 80086f0:	6063      	str	r3, [r4, #4]
            for (; i > 0; i--) {
 80086f2:	3f01      	subs	r7, #1
 80086f4:	e7d2      	b.n	800869c <scpiLex_ArbitraryBlockProgramData+0x48>
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 80086f6:	230d      	movs	r3, #13
                    token->len = arbitraryBlockLength;
 80086f8:	e9c5 2601 	strd	r2, r6, [r5, #4]
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 80086fc:	702b      	strb	r3, [r5, #0]
 80086fe:	e7e0      	b.n	80086c2 <scpiLex_ArbitraryBlockProgramData+0x6e>
        } else if (iseos(state)) {
 8008700:	4620      	mov	r0, r4
 8008702:	f7ff fd3e 	bl	8008182 <iseos>
 8008706:	2800      	cmp	r0, #0
 8008708:	d1d3      	bne.n	80086b2 <scpiLex_ArbitraryBlockProgramData+0x5e>
        token->type = SCPI_TOKEN_UNKNOWN;
 800870a:	231a      	movs	r3, #26
 800870c:	702b      	strb	r3, [r5, #0]
        state->pos = token->ptr;
 800870e:	686b      	ldr	r3, [r5, #4]
 8008710:	6063      	str	r3, [r4, #4]
        token->len = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	60ab      	str	r3, [r5, #8]
 8008716:	e7d4      	b.n	80086c2 <scpiLex_ArbitraryBlockProgramData+0x6e>

08008718 <scpiLex_ProgramExpression>:
 * Detect token Expression
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 8008718:	b570      	push	{r4, r5, r6, lr}
    token->ptr = state->pos;
 800871a:	6845      	ldr	r5, [r0, #4]
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 800871c:	4604      	mov	r4, r0
    token->ptr = state->pos;
 800871e:	604d      	str	r5, [r1, #4]

    if (!iseos(state) && ischr(state, '(')) {
 8008720:	f7ff fd2f 	bl	8008182 <iseos>
 8008724:	bb20      	cbnz	r0, 8008770 <scpiLex_ProgramExpression+0x58>
 8008726:	6863      	ldr	r3, [r4, #4]
 8008728:	781a      	ldrb	r2, [r3, #0]
 800872a:	2a28      	cmp	r2, #40	; 0x28
 800872c:	d120      	bne.n	8008770 <scpiLex_ProgramExpression+0x58>
        state->pos++;
 800872e:	3301      	adds	r3, #1
        if ((c != '"')
 8008730:	4e16      	ldr	r6, [pc, #88]	; (800878c <scpiLex_ProgramExpression+0x74>)
        state->pos++;
 8008732:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 8008734:	4620      	mov	r0, r4
 8008736:	f7ff fd24 	bl	8008182 <iseos>
 800873a:	b988      	cbnz	r0, 8008760 <scpiLex_ProgramExpression+0x48>
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	7818      	ldrb	r0, [r3, #0]
    if ((c >= 0x20) && (c <= 0x7e)) {
 8008740:	f1a0 0220 	sub.w	r2, r0, #32
 8008744:	2a5e      	cmp	r2, #94	; 0x5e
 8008746:	d80d      	bhi.n	8008764 <scpiLex_ProgramExpression+0x4c>
        if ((c != '"')
 8008748:	f1a0 0222 	sub.w	r2, r0, #34	; 0x22
 800874c:	b2d2      	uxtb	r2, r2
 800874e:	2a19      	cmp	r2, #25
 8008750:	d803      	bhi.n	800875a <scpiLex_ProgramExpression+0x42>
 8008752:	fa26 f202 	lsr.w	r2, r6, r2
 8008756:	07d2      	lsls	r2, r2, #31
 8008758:	d404      	bmi.n	8008764 <scpiLex_ProgramExpression+0x4c>
        state->pos++;
 800875a:	3301      	adds	r3, #1
 800875c:	6063      	str	r3, [r4, #4]
 800875e:	e7e9      	b.n	8008734 <scpiLex_ProgramExpression+0x1c>

        if (!iseos(state) && ischr(state, ')')) {
            state->pos++;
            token->len = state->pos - token->ptr;
        } else {
            token->len = 0;
 8008760:	2300      	movs	r3, #0
 8008762:	e004      	b.n	800876e <scpiLex_ProgramExpression+0x56>
        if (!iseos(state) && ischr(state, ')')) {
 8008764:	2829      	cmp	r0, #41	; 0x29
 8008766:	d1fb      	bne.n	8008760 <scpiLex_ProgramExpression+0x48>
            state->pos++;
 8008768:	3301      	adds	r3, #1
 800876a:	6063      	str	r3, [r4, #4]
            token->len = state->pos - token->ptr;
 800876c:	1b5b      	subs	r3, r3, r5
            token->len = 0;
 800876e:	608b      	str	r3, [r1, #8]
        }
    }

    if ((token->len > 0)) {
 8008770:	688b      	ldr	r3, [r1, #8]
 8008772:	2b00      	cmp	r3, #0
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8008774:	bfdd      	ittte	le
 8008776:	231a      	movle	r3, #26
 8008778:	700b      	strble	r3, [r1, #0]
        state->pos = token->ptr;
        token->len = 0;
 800877a:	2300      	movle	r3, #0
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 800877c:	2310      	movgt	r3, #16
        state->pos = token->ptr;
 800877e:	bfda      	itte	le
 8008780:	6065      	strle	r5, [r4, #4]
        token->len = 0;
 8008782:	608b      	strle	r3, [r1, #8]
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 8008784:	700b      	strbgt	r3, [r1, #0]
    }

    return token->len;
 8008786:	6888      	ldr	r0, [r1, #8]
}
 8008788:	bd70      	pop	{r4, r5, r6, pc}
 800878a:	bf00      	nop
 800878c:	020000e3 	.word	0x020000e3

08008790 <scpiLex_Comma>:
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
    token->ptr = state->pos;
 8008790:	6843      	ldr	r3, [r0, #4]
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
 8008792:	b510      	push	{r4, lr}
 8008794:	460c      	mov	r4, r1
    token->ptr = state->pos;
 8008796:	604b      	str	r3, [r1, #4]

    if (skipChr(state, ',')) {
 8008798:	212c      	movs	r1, #44	; 0x2c
 800879a:	f7ff fd8c 	bl	80082b6 <skipChr>
 800879e:	b128      	cbz	r0, 80087ac <scpiLex_Comma+0x1c>
        token->len = 1;
 80087a0:	2301      	movs	r3, #1
 80087a2:	60a3      	str	r3, [r4, #8]
        token->type = SCPI_TOKEN_COMMA;
 80087a4:	2300      	movs	r3, #0
    } else {
        token->len = 0;
        token->type = SCPI_TOKEN_UNKNOWN;
 80087a6:	7023      	strb	r3, [r4, #0]
    }

    return token->len;
}
 80087a8:	68a0      	ldr	r0, [r4, #8]
 80087aa:	bd10      	pop	{r4, pc}
        token->len = 0;
 80087ac:	60a0      	str	r0, [r4, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 80087ae:	231a      	movs	r3, #26
 80087b0:	e7f9      	b.n	80087a6 <scpiLex_Comma+0x16>

080087b2 <scpiLex_Semicolon>:
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
    token->ptr = state->pos;
 80087b2:	6843      	ldr	r3, [r0, #4]
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
 80087b4:	b510      	push	{r4, lr}
 80087b6:	460c      	mov	r4, r1
    token->ptr = state->pos;
 80087b8:	604b      	str	r3, [r1, #4]

    if (skipChr(state, ';')) {
 80087ba:	213b      	movs	r1, #59	; 0x3b
 80087bc:	f7ff fd7b 	bl	80082b6 <skipChr>
 80087c0:	b120      	cbz	r0, 80087cc <scpiLex_Semicolon+0x1a>
        token->len = 1;
 80087c2:	2301      	movs	r3, #1
 80087c4:	60a3      	str	r3, [r4, #8]
        token->type = SCPI_TOKEN_SEMICOLON;
    } else {
        token->len = 0;
        token->type = SCPI_TOKEN_UNKNOWN;
 80087c6:	7023      	strb	r3, [r4, #0]
    }

    return token->len;
}
 80087c8:	68a0      	ldr	r0, [r4, #8]
 80087ca:	bd10      	pop	{r4, pc}
        token->len = 0;
 80087cc:	60a0      	str	r0, [r4, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 80087ce:	231a      	movs	r3, #26
 80087d0:	e7f9      	b.n	80087c6 <scpiLex_Semicolon+0x14>

080087d2 <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
 80087d2:	b538      	push	{r3, r4, r5, lr}
 80087d4:	4605      	mov	r5, r0
 80087d6:	460c      	mov	r4, r1
    token->ptr = state->pos;
 80087d8:	6843      	ldr	r3, [r0, #4]
 80087da:	604b      	str	r3, [r1, #4]

    skipChr(state, '\r');
 80087dc:	210d      	movs	r1, #13
 80087de:	f7ff fd6a 	bl	80082b6 <skipChr>
    skipChr(state, '\n');
 80087e2:	210a      	movs	r1, #10
 80087e4:	4628      	mov	r0, r5
 80087e6:	f7ff fd66 	bl	80082b6 <skipChr>

    token->len = state->pos - token->ptr;
 80087ea:	686b      	ldr	r3, [r5, #4]
 80087ec:	6862      	ldr	r2, [r4, #4]
 80087ee:	1a9b      	subs	r3, r3, r2

    if ((token->len > 0)) {
 80087f0:	2b00      	cmp	r3, #0
    token->len = state->pos - token->ptr;
 80087f2:	60a3      	str	r3, [r4, #8]
        token->type = SCPI_TOKEN_NL;
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 80087f4:	bfdd      	ittte	le
 80087f6:	231a      	movle	r3, #26
 80087f8:	7023      	strble	r3, [r4, #0]
        state->pos = token->ptr;
        token->len = 0;
 80087fa:	2300      	movle	r3, #0
        token->type = SCPI_TOKEN_NL;
 80087fc:	2305      	movgt	r3, #5
        state->pos = token->ptr;
 80087fe:	bfda      	itte	le
 8008800:	606a      	strle	r2, [r5, #4]
        token->len = 0;
 8008802:	60a3      	strle	r3, [r4, #8]
        token->type = SCPI_TOKEN_NL;
 8008804:	7023      	strbgt	r3, [r4, #0]
    }

    return token->len;
}
 8008806:	68a0      	ldr	r0, [r4, #8]
 8008808:	bd38      	pop	{r3, r4, r5, pc}
	...

0800880c <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 800880c:	b508      	push	{r3, lr}
    SCPI_ResultMnemonic(context, SCPI_STD_VERSION_REVISION);
 800880e:	2206      	movs	r2, #6
 8008810:	4902      	ldr	r1, [pc, #8]	; (800881c <SCPI_SystemVersionQ+0x10>)
 8008812:	f000 f8e5 	bl	80089e0 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
}
 8008816:	2001      	movs	r0, #1
 8008818:	bd08      	pop	{r3, pc}
 800881a:	bf00      	nop
 800881c:	0800cbfc 	.word	0x0800cbfc

08008820 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 8008820:	b513      	push	{r0, r1, r4, lr}
 8008822:	4604      	mov	r4, r0
    scpi_error_t error;
    SCPI_ErrorPop(context, &error);
 8008824:	a901      	add	r1, sp, #4
 8008826:	f7ff fa3b 	bl	8007ca0 <SCPI_ErrorPop>
    SCPI_ResultError(context, &error);
 800882a:	a901      	add	r1, sp, #4
 800882c:	4620      	mov	r0, r4
 800882e:	f000 f933 	bl	8008a98 <SCPI_ResultError>
#if USE_DEVICE_DEPENDENT_ERROR_INFORMATION
    SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
#endif
    return SCPI_RES_OK;
}
 8008832:	2001      	movs	r0, #1
 8008834:	b002      	add	sp, #8
 8008836:	bd10      	pop	{r4, pc}

08008838 <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 8008838:	b510      	push	{r4, lr}
 800883a:	4604      	mov	r4, r0
    SCPI_ResultInt32(context, SCPI_ErrorCount(context));
 800883c:	f7ff f9fe 	bl	8007c3c <SCPI_ErrorCount>
 8008840:	4601      	mov	r1, r0
 8008842:	4620      	mov	r0, r4
 8008844:	f000 f8dd 	bl	8008a02 <SCPI_ResultInt32>

    return SCPI_RES_OK;
}
 8008848:	2001      	movs	r0, #1
 800884a:	bd10      	pop	{r4, pc}

0800884c <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 800884c:	b410      	push	{r4}
    if (len > 0) {
 800884e:	b11a      	cbz	r2, 8008858 <writeData+0xc>
        return context->interface->write(context, data, len);
 8008850:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    } else {
        return 0;
    }
}
 8008852:	bc10      	pop	{r4}
        return context->interface->write(context, data, len);
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	4718      	bx	r3
}
 8008858:	4610      	mov	r0, r2
 800885a:	bc10      	pop	{r4}
 800885c:	4770      	bx	lr
	...

08008860 <ParamSignToUInt32>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt32(scpi_t * context, scpi_parameter_t * parameter, uint32_t * value, scpi_bool_t sign) {
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	460d      	mov	r5, r1

    if (!value) {
 8008864:	4614      	mov	r4, r2
 8008866:	b922      	cbnz	r2, 8008872 <ParamSignToUInt32+0x12>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8008868:	4916      	ldr	r1, [pc, #88]	; (80088c4 <ParamSignToUInt32+0x64>)
 800886a:	f7ff fa7d 	bl	8007d68 <SCPI_ErrorPush>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
            } else {
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
            }
        default:
            return FALSE;
 800886e:	2000      	movs	r0, #0
 8008870:	e026      	b.n	80088c0 <ParamSignToUInt32+0x60>
    switch (parameter->type) {
 8008872:	780a      	ldrb	r2, [r1, #0]
 8008874:	3a06      	subs	r2, #6
 8008876:	2a05      	cmp	r2, #5
 8008878:	d8f9      	bhi.n	800886e <ParamSignToUInt32+0xe>
 800887a:	a101      	add	r1, pc, #4	; (adr r1, 8008880 <ParamSignToUInt32+0x20>)
 800887c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008880:	08008899 	.word	0x08008899
 8008884:	080088a5 	.word	0x080088a5
 8008888:	080088a9 	.word	0x080088a9
 800888c:	0800886f 	.word	0x0800886f
 8008890:	080088ad 	.word	0x080088ad
 8008894:	080088ad 	.word	0x080088ad
            return strBaseToUInt32(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 8008898:	2210      	movs	r2, #16
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 800889a:	4621      	mov	r1, r4
 800889c:	6868      	ldr	r0, [r5, #4]
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 800889e:	f000 fce5 	bl	800926c <strBaseToUInt32>
 80088a2:	e00a      	b.n	80088ba <ParamSignToUInt32+0x5a>
            return strBaseToUInt32(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 80088a4:	2208      	movs	r2, #8
 80088a6:	e7f8      	b.n	800889a <ParamSignToUInt32+0x3a>
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 80088a8:	2202      	movs	r2, #2
 80088aa:	e7f6      	b.n	800889a <ParamSignToUInt32+0x3a>
 80088ac:	6868      	ldr	r0, [r5, #4]
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 80088ae:	220a      	movs	r2, #10
 80088b0:	4621      	mov	r1, r4
            if (sign) {
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0f3      	beq.n	800889e <ParamSignToUInt32+0x3e>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 80088b6:	f000 fcce 	bl	8009256 <strBaseToInt32>
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 80088ba:	3000      	adds	r0, #0
 80088bc:	bf18      	it	ne
 80088be:	2001      	movne	r0, #1
    }
}
 80088c0:	bd38      	pop	{r3, r4, r5, pc}
 80088c2:	bf00      	nop
 80088c4:	fffffeca 	.word	0xfffffeca

080088c8 <writeDelimiter>:
    if (context->output_count > 0) {
 80088c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dd03      	ble.n	80088d6 <writeDelimiter+0xe>
        return writeData(context, ",", 1);
 80088ce:	2201      	movs	r2, #1
 80088d0:	4902      	ldr	r1, [pc, #8]	; (80088dc <writeDelimiter+0x14>)
 80088d2:	f7ff bfbb 	b.w	800884c <writeData>
}
 80088d6:	2000      	movs	r0, #0
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	0800cc61 	.word	0x0800cc61

080088e0 <resultUInt32BaseSign>:
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 80088e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e2:	4614      	mov	r4, r2
 80088e4:	b08d      	sub	sp, #52	; 0x34
 80088e6:	4605      	mov	r5, r0
    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 80088e8:	9300      	str	r3, [sp, #0]
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 80088ea:	4608      	mov	r0, r1
    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 80088ec:	4613      	mov	r3, r2
 80088ee:	a903      	add	r1, sp, #12
 80088f0:	2221      	movs	r2, #33	; 0x21
 80088f2:	f000 fc45 	bl	8009180 <UInt32ToStrBaseSign>
 80088f6:	3c02      	subs	r4, #2
 80088f8:	b2e4      	uxtb	r4, r4
 80088fa:	2c0e      	cmp	r4, #14
 80088fc:	bf98      	it	ls
 80088fe:	4b0e      	ldrls	r3, [pc, #56]	; (8008938 <resultUInt32BaseSign+0x58>)
 8008900:	4607      	mov	r7, r0
    result += writeDelimiter(context);
 8008902:	4628      	mov	r0, r5
 8008904:	bf94      	ite	ls
 8008906:	f853 6024 	ldrls.w	r6, [r3, r4, lsl #2]
    switch (base) {
 800890a:	2600      	movhi	r6, #0
    result += writeDelimiter(context);
 800890c:	f7ff ffdc 	bl	80088c8 <writeDelimiter>
 8008910:	4604      	mov	r4, r0
    if (basePrefix != NULL) {
 8008912:	b12e      	cbz	r6, 8008920 <resultUInt32BaseSign+0x40>
        result += writeData(context, basePrefix, 2);
 8008914:	2202      	movs	r2, #2
 8008916:	4631      	mov	r1, r6
 8008918:	4628      	mov	r0, r5
 800891a:	f7ff ff97 	bl	800884c <writeData>
 800891e:	4404      	add	r4, r0
    result += writeData(context, buffer, len);
 8008920:	463a      	mov	r2, r7
 8008922:	a903      	add	r1, sp, #12
 8008924:	4628      	mov	r0, r5
 8008926:	f7ff ff91 	bl	800884c <writeData>
    context->output_count++;
 800892a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
}
 800892c:	4420      	add	r0, r4
    context->output_count++;
 800892e:	3301      	adds	r3, #1
 8008930:	632b      	str	r3, [r5, #48]	; 0x30
}
 8008932:	b00d      	add	sp, #52	; 0x34
 8008934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008936:	bf00      	nop
 8008938:	0800cc04 	.word	0x0800cc04

0800893c <SCPI_Init>:
        scpi_error_t * error_queue_data, int16_t error_queue_size, void* comm) {
 800893c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008940:	4604      	mov	r4, r0
 8008942:	4692      	mov	sl, r2
 8008944:	468b      	mov	fp, r1
 8008946:	b087      	sub	sp, #28
 8008948:	9305      	str	r3, [sp, #20]
 800894a:	e9dd 8312 	ldrd	r8, r3, [sp, #72]	; 0x48
 800894e:	9301      	str	r3, [sp, #4]
 8008950:	9b14      	ldr	r3, [sp, #80]	; 0x50
    memset(context, 0, sizeof (*context));
 8008952:	22d4      	movs	r2, #212	; 0xd4
        scpi_error_t * error_queue_data, int16_t error_queue_size, void* comm) {
 8008954:	e9dd 9510 	ldrd	r9, r5, [sp, #64]	; 0x40
 8008958:	9302      	str	r3, [sp, #8]
 800895a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    memset(context, 0, sizeof (*context));
 800895c:	2100      	movs	r1, #0
        scpi_error_t * error_queue_data, int16_t error_queue_size, void* comm) {
 800895e:	9303      	str	r3, [sp, #12]
 8008960:	9b18      	ldr	r3, [sp, #96]	; 0x60
    memset(context, 0, sizeof (*context));
 8008962:	3004      	adds	r0, #4
        scpi_error_t * error_queue_data, int16_t error_queue_size, void* comm) {
 8008964:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8008966:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 800896a:	9304      	str	r3, [sp, #16]
    memset(context, 0, sizeof (*context));
 800896c:	f001 ffc8 	bl	800a900 <memset>
    context->units = units;
 8008970:	9b05      	ldr	r3, [sp, #20]
    context->interface = interface;
 8008972:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
    context->units = units;
 8008976:	65e3      	str	r3, [r4, #92]	; 0x5c
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 8008978:	f8df a060 	ldr.w	sl, [pc, #96]	; 80089dc <SCPI_Init+0xa0>
    context->idn[3] = idn4;
 800897c:	9b01      	ldr	r3, [sp, #4]
    context->idn[1] = idn2;
 800897e:	e9c4 9521 	strd	r9, r5, [r4, #132]	; 0x84
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 8008982:	f104 099c 	add.w	r9, r4, #156	; 0x9c
    context->idn[2] = idn3;
 8008986:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    context->idn[3] = idn4;
 800898a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 800898e:	462a      	mov	r2, r5
 8008990:	4651      	mov	r1, sl
    sprintf(context->idn5, "%s-%s", idn2, "USB");
 8008992:	f104 08b5 	add.w	r8, r4, #181	; 0xb5
    context->cmdlist = commands;
 8008996:	f8c4 b000 	str.w	fp, [r4]
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 800899a:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <SCPI_Init+0x98>)
 800899c:	4648      	mov	r0, r9
 800899e:	f001 ffb7 	bl	800a910 <siprintf>
    sprintf(context->idn5, "%s-%s", idn2, "USB");
 80089a2:	462a      	mov	r2, r5
 80089a4:	4651      	mov	r1, sl
 80089a6:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <SCPI_Init+0x9c>)
 80089a8:	4640      	mov	r0, r8
 80089aa:	f001 ffb1 	bl	800a910 <siprintf>
    context->buffer.data = input_buffer;
 80089ae:	9b02      	ldr	r3, [sp, #8]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 80089b0:	463a      	mov	r2, r7
    context->buffer.data = input_buffer;
 80089b2:	60e3      	str	r3, [r4, #12]
    context->buffer.length = input_buffer_length;
 80089b4:	9b03      	ldr	r3, [sp, #12]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 80089b6:	4631      	mov	r1, r6
    context->buffer.length = input_buffer_length;
 80089b8:	6063      	str	r3, [r4, #4]
    context->buffer.position = 0;
 80089ba:	2300      	movs	r3, #0
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 80089bc:	4620      	mov	r0, r4
    context->buffer.position = 0;
 80089be:	60a3      	str	r3, [r4, #8]
    context->comm = comm;
 80089c0:	9b04      	ldr	r3, [sp, #16]
    context->idn[5] = context->idn5;
 80089c2:	e9c4 9825 	strd	r9, r8, [r4, #148]	; 0x94
    context->comm = comm;
 80089c6:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
}
 80089ca:	b007      	add	sp, #28
 80089cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 80089d0:	f7ff b931 	b.w	8007c36 <SCPI_ErrorInit>
 80089d4:	0800cc40 	.word	0x0800cc40
 80089d8:	0800cc4b 	.word	0x0800cc4b
 80089dc:	0800cc45 	.word	0x0800cc45

080089e0 <SCPI_ResultCharacters>:
size_t SCPI_ResultCharacters(scpi_t * context, const char * data, size_t len) {
 80089e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e2:	4604      	mov	r4, r0
 80089e4:	460e      	mov	r6, r1
 80089e6:	4617      	mov	r7, r2
    result += writeDelimiter(context);
 80089e8:	f7ff ff6e 	bl	80088c8 <writeDelimiter>
    result += writeData(context, data, len);
 80089ec:	463a      	mov	r2, r7
    result += writeDelimiter(context);
 80089ee:	4605      	mov	r5, r0
    result += writeData(context, data, len);
 80089f0:	4631      	mov	r1, r6
 80089f2:	4620      	mov	r0, r4
 80089f4:	f7ff ff2a 	bl	800884c <writeData>
    context->output_count++;
 80089f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
}
 80089fa:	4428      	add	r0, r5
    context->output_count++;
 80089fc:	3301      	adds	r3, #1
 80089fe:	6323      	str	r3, [r4, #48]	; 0x30
}
 8008a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a02 <SCPI_ResultInt32>:
    return resultUInt32BaseSign(context, val, 10, TRUE);
 8008a02:	2301      	movs	r3, #1
 8008a04:	220a      	movs	r2, #10
 8008a06:	f7ff bf6b 	b.w	80088e0 <resultUInt32BaseSign>
	...

08008a0c <SCPI_ResultText>:
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 8008a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	4604      	mov	r4, r0
    size_t len = strlen(data);
 8008a12:	4608      	mov	r0, r1
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 8008a14:	460e      	mov	r6, r1
    size_t len = strlen(data);
 8008a16:	f7f7 fba5 	bl	8000164 <strlen>
 8008a1a:	4607      	mov	r7, r0
    result += writeDelimiter(context);
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f7ff ff53 	bl	80088c8 <writeDelimiter>
    result += writeData(context, "\"", 1);
 8008a22:	2201      	movs	r2, #1
    result += writeDelimiter(context);
 8008a24:	4605      	mov	r5, r0
    result += writeData(context, "\"", 1);
 8008a26:	491b      	ldr	r1, [pc, #108]	; (8008a94 <SCPI_ResultText+0x88>)
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f7ff ff0f 	bl	800884c <writeData>
    while ((quote = strnpbrk(data, len, "\""))) {
 8008a2e:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008a94 <SCPI_ResultText+0x88>
    result += writeData(context, "\"", 1);
 8008a32:	4405      	add	r5, r0
    while ((quote = strnpbrk(data, len, "\""))) {
 8008a34:	4a17      	ldr	r2, [pc, #92]	; (8008a94 <SCPI_ResultText+0x88>)
 8008a36:	4639      	mov	r1, r7
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f000 fb8c 	bl	8009156 <strnpbrk>
 8008a3e:	4681      	mov	r9, r0
 8008a40:	b988      	cbnz	r0, 8008a66 <SCPI_ResultText+0x5a>
    result += writeData(context, data, len);
 8008a42:	463a      	mov	r2, r7
 8008a44:	4631      	mov	r1, r6
 8008a46:	4620      	mov	r0, r4
 8008a48:	f7ff ff00 	bl	800884c <writeData>
    result += writeData(context, "\"", 1);
 8008a4c:	2201      	movs	r2, #1
    result += writeData(context, data, len);
 8008a4e:	4606      	mov	r6, r0
    result += writeData(context, "\"", 1);
 8008a50:	4910      	ldr	r1, [pc, #64]	; (8008a94 <SCPI_ResultText+0x88>)
 8008a52:	4620      	mov	r0, r4
 8008a54:	f7ff fefa 	bl	800884c <writeData>
    context->output_count++;
 8008a58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008a5a:	4435      	add	r5, r6
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	6323      	str	r3, [r4, #48]	; 0x30
}
 8008a60:	4428      	add	r0, r5
 8008a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        result += writeData(context, data, quote - data + 1);
 8008a66:	eba9 0806 	sub.w	r8, r9, r6
 8008a6a:	f108 0201 	add.w	r2, r8, #1
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4620      	mov	r0, r4
 8008a72:	f7ff feeb 	bl	800884c <writeData>
        result += writeData(context, "\"", 1);
 8008a76:	2201      	movs	r2, #1
        result += writeData(context, data, quote - data + 1);
 8008a78:	4606      	mov	r6, r0
        result += writeData(context, "\"", 1);
 8008a7a:	4651      	mov	r1, sl
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f7ff fee5 	bl	800884c <writeData>
        len -= quote - data + 1;
 8008a82:	ea6f 0808 	mvn.w	r8, r8
        result += writeData(context, "\"", 1);
 8008a86:	4430      	add	r0, r6
 8008a88:	4405      	add	r5, r0
        len -= quote - data + 1;
 8008a8a:	4447      	add	r7, r8
        data = quote + 1;
 8008a8c:	f109 0601 	add.w	r6, r9, #1
 8008a90:	e7d0      	b.n	8008a34 <SCPI_ResultText+0x28>
 8008a92:	bf00      	nop
 8008a94:	0800c9c6 	.word	0x0800c9c6

08008a98 <SCPI_ResultError>:
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 8008a98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9c:	4607      	mov	r7, r0
    data[0] = SCPI_ErrorTranslate(error->error_code);
 8008a9e:	f9b1 0000 	ldrsh.w	r0, [r1]
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 8008aa2:	460c      	mov	r4, r1
    data[0] = SCPI_ErrorTranslate(error->error_code);
 8008aa4:	f7ff f964 	bl	8007d70 <SCPI_ErrorTranslate>
 8008aa8:	4680      	mov	r8, r0
    len[0] = strlen(data[0]);
 8008aaa:	f7f7 fb5b 	bl	8000164 <strlen>
    result += SCPI_ResultInt32(context, error->error_code);
 8008aae:	f9b4 1000 	ldrsh.w	r1, [r4]
    len[0] = strlen(data[0]);
 8008ab2:	4605      	mov	r5, r0
    result += SCPI_ResultInt32(context, error->error_code);
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	f7ff ffa4 	bl	8008a02 <SCPI_ResultInt32>
 8008aba:	4604      	mov	r4, r0
    result += writeDelimiter(context);
 8008abc:	4638      	mov	r0, r7
 8008abe:	f7ff ff03 	bl	80088c8 <writeDelimiter>
    result += writeData(context, "\"", 1);
 8008ac2:	2201      	movs	r2, #1
    result += writeDelimiter(context);
 8008ac4:	4404      	add	r4, r0
    result += writeData(context, "\"", 1);
 8008ac6:	491f      	ldr	r1, [pc, #124]	; (8008b44 <SCPI_ResultError+0xac>)
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f7ff febf 	bl	800884c <writeData>
 8008ace:	2dff      	cmp	r5, #255	; 0xff
 8008ad0:	bf28      	it	cs
 8008ad2:	25ff      	movcs	r5, #255	; 0xff
 8008ad4:	f04f 09ff 	mov.w	r9, #255	; 0xff
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8008ad8:	f8df a068 	ldr.w	sl, [pc, #104]	; 8008b44 <SCPI_ResultError+0xac>
    result += writeData(context, "\"", 1);
 8008adc:	4404      	add	r4, r0
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8008ade:	4652      	mov	r2, sl
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	f000 fb37 	bl	8009156 <strnpbrk>
 8008ae8:	4683      	mov	fp, r0
 8008aea:	b128      	cbz	r0, 8008af8 <SCPI_ResultError+0x60>
            if ((step = quote - data[i] + 1) >= outputlimit) {
 8008aec:	ebab 0608 	sub.w	r6, fp, r8
 8008af0:	3601      	adds	r6, #1
 8008af2:	45b1      	cmp	r9, r6
 8008af4:	d80f      	bhi.n	8008b16 <SCPI_ResultError+0x7e>
                len[i] -= 1;
 8008af6:	3d01      	subs	r5, #1
        result += writeData(context, data[i], len[i]);
 8008af8:	462a      	mov	r2, r5
 8008afa:	4641      	mov	r1, r8
 8008afc:	4638      	mov	r0, r7
 8008afe:	f7ff fea5 	bl	800884c <writeData>
    result += writeData(context, "\"", 1);
 8008b02:	2201      	movs	r2, #1
        result += writeData(context, data[i], len[i]);
 8008b04:	4605      	mov	r5, r0
    result += writeData(context, "\"", 1);
 8008b06:	490f      	ldr	r1, [pc, #60]	; (8008b44 <SCPI_ResultError+0xac>)
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f7ff fe9f 	bl	800884c <writeData>
 8008b0e:	442c      	add	r4, r5
}
 8008b10:	4420      	add	r0, r4
 8008b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            result += writeData(context, data[i], step);
 8008b16:	4641      	mov	r1, r8
 8008b18:	4632      	mov	r2, r6
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	f7ff fe96 	bl	800884c <writeData>
            result += writeData(context, "\"", 1);
 8008b20:	2201      	movs	r2, #1
            result += writeData(context, data[i], step);
 8008b22:	4680      	mov	r8, r0
            result += writeData(context, "\"", 1);
 8008b24:	4651      	mov	r1, sl
 8008b26:	4638      	mov	r0, r7
 8008b28:	f7ff fe90 	bl	800884c <writeData>
            outputlimit -= step + 1;
 8008b2c:	43f3      	mvns	r3, r6
            len[i] -= step;
 8008b2e:	1bad      	subs	r5, r5, r6
            outputlimit -= step + 1;
 8008b30:	4499      	add	r9, r3
            result += writeData(context, "\"", 1);
 8008b32:	4440      	add	r0, r8
 8008b34:	454d      	cmp	r5, r9
 8008b36:	4404      	add	r4, r0
 8008b38:	bf28      	it	cs
 8008b3a:	464d      	movcs	r5, r9
            data[i] = quote + 1;
 8008b3c:	f10b 0801 	add.w	r8, fp, #1
 8008b40:	e7cd      	b.n	8008ade <SCPI_ResultError+0x46>
 8008b42:	bf00      	nop
 8008b44:	0800c9c6 	.word	0x0800c9c6

08008b48 <SCPI_ResultArbitraryBlockHeader>:
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 8008b48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    block_header[0] = '#';
 8008b4a:	2323      	movs	r3, #35	; 0x23
 8008b4c:	ac04      	add	r4, sp, #16
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 8008b4e:	460e      	mov	r6, r1
    block_header[0] = '#';
 8008b50:	f804 3d0c 	strb.w	r3, [r4, #-12]!
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 8008b54:	230a      	movs	r3, #10
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 8008b56:	4605      	mov	r5, r0
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 8008b58:	461a      	mov	r2, r3
 8008b5a:	f10d 0106 	add.w	r1, sp, #6
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f000 fb72 	bl	8009248 <SCPI_UInt32ToStrBase>
    header_len = strlen(block_header + 2);
 8008b64:	f10d 0006 	add.w	r0, sp, #6
 8008b68:	f7f7 fafc 	bl	8000164 <strlen>
    context->arbitrary_reminding = len;
 8008b6c:	f8c5 60d0 	str.w	r6, [r5, #208]	; 0xd0
    block_header[1] = (char) (header_len + '0');
 8008b70:	f100 0330 	add.w	r3, r0, #48	; 0x30
    return writeData(context, block_header, header_len + 2);
 8008b74:	1c82      	adds	r2, r0, #2
 8008b76:	4621      	mov	r1, r4
 8008b78:	4628      	mov	r0, r5
    block_header[1] = (char) (header_len + '0');
 8008b7a:	f88d 3005 	strb.w	r3, [sp, #5]
    return writeData(context, block_header, header_len + 2);
 8008b7e:	f7ff fe65 	bl	800884c <writeData>
}
 8008b82:	b004      	add	sp, #16
 8008b84:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b88 <SCPI_ResultArbitraryBlockData>:
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 8008b88:	b510      	push	{r4, lr}
    if (context->arbitrary_reminding < len) {
 8008b8a:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 8008b8e:	4603      	mov	r3, r0
    if (context->arbitrary_reminding < len) {
 8008b90:	4294      	cmp	r4, r2
 8008b92:	d30b      	bcc.n	8008bac <SCPI_ResultArbitraryBlockData+0x24>
    context->arbitrary_reminding -= len;
 8008b94:	1aa4      	subs	r4, r4, r2
 8008b96:	f8c0 40d0 	str.w	r4, [r0, #208]	; 0xd0
    if (context->arbitrary_reminding == 0) {
 8008b9a:	b914      	cbnz	r4, 8008ba2 <SCPI_ResultArbitraryBlockData+0x1a>
        context->output_count++;
 8008b9c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	6318      	str	r0, [r3, #48]	; 0x30
    return writeData(context, (const char *) data, len);
 8008ba2:	4618      	mov	r0, r3
}
 8008ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return writeData(context, (const char *) data, len);
 8008ba8:	f7ff be50 	b.w	800884c <writeData>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8008bac:	4902      	ldr	r1, [pc, #8]	; (8008bb8 <SCPI_ResultArbitraryBlockData+0x30>)
 8008bae:	f7ff f8db 	bl	8007d68 <SCPI_ErrorPush>
}
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	bd10      	pop	{r4, pc}
 8008bb6:	bf00      	nop
 8008bb8:	fffffeca 	.word	0xfffffeca

08008bbc <SCPI_ResultArbitraryBlock>:
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 8008bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbe:	460f      	mov	r7, r1
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 8008bc0:	4611      	mov	r1, r2
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	4614      	mov	r4, r2
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 8008bc6:	f7ff ffbf 	bl	8008b48 <SCPI_ResultArbitraryBlockHeader>
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 8008bca:	4622      	mov	r2, r4
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 8008bcc:	4605      	mov	r5, r0
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 8008bce:	4639      	mov	r1, r7
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f7ff ffd9 	bl	8008b88 <SCPI_ResultArbitraryBlockData>
}
 8008bd6:	4428      	add	r0, r5
 8008bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bda <SCPI_ParamIsNumber>:
    switch (parameter->type) {
 8008bda:	7803      	ldrb	r3, [r0, #0]
 8008bdc:	3b06      	subs	r3, #6
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d806      	bhi.n	8008bf0 <SCPI_ParamIsNumber+0x16>
 8008be2:	e8df f003 	tbb	[pc, r3]
 8008be6:	0707      	.short	0x0707
 8008be8:	03070507 	.word	0x03070507
            return suffixAllowed;
 8008bec:	4608      	mov	r0, r1
 8008bee:	4770      	bx	lr
            return FALSE;
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	4770      	bx	lr
            return TRUE;
 8008bf4:	2001      	movs	r0, #1
}
 8008bf6:	4770      	bx	lr

08008bf8 <scpiParser_parseProgramData>:
 * Parse one parameter and detect type
 * @param state
 * @param token
 * @return
 */
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 8008bf8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008bfc:	460e      	mov	r6, r1
    scpi_token_t tmp;
    int result = 0;
    int wsLen;
    int suffixLen;
    int realLen = 0;
    realLen += scpiLex_WhiteSpace(state, &tmp);
 8008bfe:	a901      	add	r1, sp, #4
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 8008c00:	4605      	mov	r5, r0
    realLen += scpiLex_WhiteSpace(state, &tmp);
 8008c02:	f7ff fb7c 	bl	80082fe <scpiLex_WhiteSpace>

    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 8008c06:	4631      	mov	r1, r6
    realLen += scpiLex_WhiteSpace(state, &tmp);
 8008c08:	4607      	mov	r7, r0
    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f7ff fc7e 	bl	800850c <scpiLex_NondecimalNumericData>
    if (result == 0) result = scpiLex_CharacterProgramData(state, token);
 8008c10:	4604      	mov	r4, r0
 8008c12:	b988      	cbnz	r0, 8008c38 <scpiParser_parseProgramData+0x40>
 8008c14:	4631      	mov	r1, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	f7ff fbda 	bl	80083d0 <scpiLex_CharacterProgramData>
    if (result == 0) {
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	b958      	cbnz	r0, 8008c38 <scpiParser_parseProgramData+0x40>
        result = scpiLex_DecimalNumericProgramData(state, token);
 8008c20:	4631      	mov	r1, r6
 8008c22:	4628      	mov	r0, r5
 8008c24:	f7ff fc01 	bl	800842a <scpiLex_DecimalNumericProgramData>
        if (result != 0) {
 8008c28:	4604      	mov	r4, r0
 8008c2a:	b970      	cbnz	r0, 8008c4a <scpiParser_parseProgramData+0x52>
                result = token->len;
            }
        }
    }

    if (result == 0) result = scpiLex_StringProgramData(state, token);
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f7ff fcd1 	bl	80085d6 <scpiLex_StringProgramData>
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 8008c34:	4604      	mov	r4, r0
 8008c36:	b1e0      	cbz	r0, 8008c72 <scpiParser_parseProgramData+0x7a>
    if (result == 0) result = scpiLex_ProgramExpression(state, token);

    realLen += scpiLex_WhiteSpace(state, &tmp);
 8008c38:	a901      	add	r1, sp, #4
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f7ff fb5f 	bl	80082fe <scpiLex_WhiteSpace>
 8008c40:	4438      	add	r0, r7

    return result + realLen;
}
 8008c42:	4420      	add	r0, r4
 8008c44:	b004      	add	sp, #16
 8008c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 8008c4a:	a901      	add	r1, sp, #4
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f7ff fb56 	bl	80082fe <scpiLex_WhiteSpace>
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 8008c52:	a901      	add	r1, sp, #4
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 8008c54:	4680      	mov	r8, r0
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 8008c56:	4628      	mov	r0, r5
 8008c58:	f7ff fc26 	bl	80084a8 <scpiLex_SuffixProgramData>
            if (suffixLen > 0) {
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	ddeb      	ble.n	8008c38 <scpiParser_parseProgramData+0x40>
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 8008c60:	230b      	movs	r3, #11
                token->len += wsLen + suffixLen;
 8008c62:	68b4      	ldr	r4, [r6, #8]
 8008c64:	4480      	add	r8, r0
 8008c66:	4444      	add	r4, r8
 8008c68:	60b4      	str	r4, [r6, #8]
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 8008c6a:	7033      	strb	r3, [r6, #0]
    if (result == 0) result = scpiLex_StringProgramData(state, token);
 8008c6c:	2c00      	cmp	r4, #0
 8008c6e:	d0dd      	beq.n	8008c2c <scpiParser_parseProgramData+0x34>
 8008c70:	e7e2      	b.n	8008c38 <scpiParser_parseProgramData+0x40>
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 8008c72:	4631      	mov	r1, r6
 8008c74:	4628      	mov	r0, r5
 8008c76:	f7ff fced 	bl	8008654 <scpiLex_ArbitraryBlockProgramData>
    if (result == 0) result = scpiLex_ProgramExpression(state, token);
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	d1db      	bne.n	8008c38 <scpiParser_parseProgramData+0x40>
 8008c80:	4631      	mov	r1, r6
 8008c82:	4628      	mov	r0, r5
 8008c84:	f7ff fd48 	bl	8008718 <scpiLex_ProgramExpression>
 8008c88:	4604      	mov	r4, r0
 8008c8a:	e7d5      	b.n	8008c38 <scpiParser_parseProgramData+0x40>

08008c8c <SCPI_Parameter>:
scpi_bool_t SCPI_Parameter(scpi_t * context, scpi_parameter_t * parameter, scpi_bool_t mandatory) {
 8008c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c90:	4606      	mov	r6, r0
    if (!parameter) {
 8008c92:	460d      	mov	r5, r1
 8008c94:	2400      	movs	r4, #0
 8008c96:	b939      	cbnz	r1, 8008ca8 <SCPI_Parameter+0x1c>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8008c98:	f5a1 719b 	sub.w	r1, r1, #310	; 0x136
 8008c9c:	f7ff f864 	bl	8007d68 <SCPI_ErrorPush>
        return FALSE;
 8008ca0:	462a      	mov	r2, r5
}
 8008ca2:	4610      	mov	r0, r2
 8008ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    token->type = SCPI_TOKEN_UNKNOWN;
 8008ca8:	f04f 081a 	mov.w	r8, #26
    if (state->pos >= (state->buffer + state->len)) {
 8008cac:	69c7      	ldr	r7, [r0, #28]
 8008cae:	6943      	ldr	r3, [r0, #20]
    token->ptr = ptr;
 8008cb0:	e9c1 4401 	strd	r4, r4, [r1, #4]
    if (state->pos >= (state->buffer + state->len)) {
 8008cb4:	443b      	add	r3, r7
 8008cb6:	6987      	ldr	r7, [r0, #24]
    token->type = SCPI_TOKEN_UNKNOWN;
 8008cb8:	f881 8000 	strb.w	r8, [r1]
    if (state->pos >= (state->buffer + state->len)) {
 8008cbc:	429f      	cmp	r7, r3
 8008cbe:	d309      	bcc.n	8008cd4 <SCPI_Parameter+0x48>
        if (mandatory) {
 8008cc0:	b12a      	cbz	r2, 8008cce <SCPI_Parameter+0x42>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8008cc2:	f06f 016c 	mvn.w	r1, #108	; 0x6c
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 8008cc6:	f7ff f84f 	bl	8007d68 <SCPI_ErrorPush>
            return FALSE;
 8008cca:	4622      	mov	r2, r4
 8008ccc:	e7e9      	b.n	8008ca2 <SCPI_Parameter+0x16>
            parameter->type = SCPI_TOKEN_PROGRAM_MNEMONIC; /* TODO: select something different */
 8008cce:	2309      	movs	r3, #9
 8008cd0:	700b      	strb	r3, [r1, #0]
 8008cd2:	e7e6      	b.n	8008ca2 <SCPI_Parameter+0x16>
    if (context->input_count != 0) {
 8008cd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    state = &context->param_list.lex_state;
 8008cd6:	f100 0714 	add.w	r7, r0, #20
    if (context->input_count != 0) {
 8008cda:	b163      	cbz	r3, 8008cf6 <SCPI_Parameter+0x6a>
        scpiLex_Comma(state, parameter);
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f7ff fd57 	bl	8008790 <scpiLex_Comma>
        if (parameter->type != SCPI_TOKEN_COMMA) {
 8008ce2:	782b      	ldrb	r3, [r5, #0]
 8008ce4:	b13b      	cbz	r3, 8008cf6 <SCPI_Parameter+0x6a>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 8008ce6:	f06f 0166 	mvn.w	r1, #102	; 0x66
    token->ptr = ptr;
 8008cea:	e9c5 4401 	strd	r4, r4, [r5, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8008cee:	f885 8000 	strb.w	r8, [r5]
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	e7e7      	b.n	8008cc6 <SCPI_Parameter+0x3a>
    context->input_count++;
 8008cf6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 8008cf8:	4629      	mov	r1, r5
    context->input_count++;
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	6373      	str	r3, [r6, #52]	; 0x34
    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f7ff ff7a 	bl	8008bf8 <scpiParser_parseProgramData>
 8008d04:	782b      	ldrb	r3, [r5, #0]
 8008d06:	3b06      	subs	r3, #6
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b0a      	cmp	r3, #10
 8008d0c:	d806      	bhi.n	8008d1c <SCPI_Parameter+0x90>
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f240 71bf 	movw	r1, #1983	; 0x7bf
 8008d14:	fa02 f303 	lsl.w	r3, r2, r3
 8008d18:	420b      	tst	r3, r1
 8008d1a:	d1c2      	bne.n	8008ca2 <SCPI_Parameter+0x16>
    token->len = 0;
 8008d1c:	2400      	movs	r4, #0
    token->type = SCPI_TOKEN_UNKNOWN;
 8008d1e:	231a      	movs	r3, #26
    token->ptr = ptr;
 8008d20:	e9c5 4401 	strd	r4, r4, [r5, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8008d24:	702b      	strb	r3, [r5, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 8008d26:	f06f 0196 	mvn.w	r1, #150	; 0x96
 8008d2a:	e7e2      	b.n	8008cf2 <SCPI_Parameter+0x66>

08008d2c <ParamSignUInt32>:
static scpi_bool_t ParamSignUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory, scpi_bool_t sign) {
 8008d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d2e:	4605      	mov	r5, r0
 8008d30:	b085      	sub	sp, #20
 8008d32:	461f      	mov	r7, r3
    if (!value) {
 8008d34:	460c      	mov	r4, r1
 8008d36:	b921      	cbnz	r1, 8008d42 <ParamSignUInt32+0x16>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8008d38:	4913      	ldr	r1, [pc, #76]	; (8008d88 <ParamSignUInt32+0x5c>)
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8008d3a:	f7ff f815 	bl	8007d68 <SCPI_ErrorPush>
            result = FALSE;
 8008d3e:	4620      	mov	r0, r4
 8008d40:	e00f      	b.n	8008d62 <ParamSignUInt32+0x36>
    result = SCPI_Parameter(context, &param, mandatory);
 8008d42:	a901      	add	r1, sp, #4
 8008d44:	f7ff ffa2 	bl	8008c8c <SCPI_Parameter>
    if (result) {
 8008d48:	b158      	cbz	r0, 8008d62 <ParamSignUInt32+0x36>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	a801      	add	r0, sp, #4
 8008d4e:	f7ff ff44 	bl	8008bda <SCPI_ParamIsNumber>
 8008d52:	4606      	mov	r6, r0
 8008d54:	b138      	cbz	r0, 8008d66 <ParamSignUInt32+0x3a>
            result = ParamSignToUInt32(context, &param, value, sign);
 8008d56:	463b      	mov	r3, r7
 8008d58:	4622      	mov	r2, r4
 8008d5a:	a901      	add	r1, sp, #4
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	f7ff fd7f 	bl	8008860 <ParamSignToUInt32>
}
 8008d62:	b005      	add	sp, #20
 8008d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 8008d66:	2101      	movs	r1, #1
 8008d68:	a801      	add	r0, sp, #4
 8008d6a:	f7ff ff36 	bl	8008bda <SCPI_ParamIsNumber>
 8008d6e:	4604      	mov	r4, r0
 8008d70:	b130      	cbz	r0, 8008d80 <ParamSignUInt32+0x54>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 8008d72:	4628      	mov	r0, r5
 8008d74:	f06f 0189 	mvn.w	r1, #137	; 0x89
 8008d78:	f7fe fff6 	bl	8007d68 <SCPI_ErrorPush>
            result = FALSE;
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	e7f0      	b.n	8008d62 <ParamSignUInt32+0x36>
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8008d80:	f06f 0167 	mvn.w	r1, #103	; 0x67
 8008d84:	4628      	mov	r0, r5
 8008d86:	e7d8      	b.n	8008d3a <ParamSignUInt32+0xe>
 8008d88:	fffffeca 	.word	0xfffffeca

08008d8c <SCPI_ParamInt32>:
    return ParamSignUInt32(context, (uint32_t *) value, mandatory, TRUE);
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	f7ff bfcd 	b.w	8008d2c <ParamSignUInt32>

08008d92 <SCPI_ParamUInt32>:
    return ParamSignUInt32(context, value, mandatory, FALSE);
 8008d92:	2300      	movs	r3, #0
 8008d94:	f7ff bfca 	b.w	8008d2c <ParamSignUInt32>

08008d98 <SCPI_ParamCharacters>:
scpi_bool_t SCPI_ParamCharacters(scpi_t * context, const char ** value, size_t * len, scpi_bool_t mandatory) {
 8008d98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	4614      	mov	r4, r2
    if (!value || !len) {
 8008d9e:	460d      	mov	r5, r1
 8008da0:	b101      	cbz	r1, 8008da4 <SCPI_ParamCharacters+0xc>
 8008da2:	b932      	cbnz	r2, 8008db2 <SCPI_ParamCharacters+0x1a>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8008da4:	4630      	mov	r0, r6
 8008da6:	490d      	ldr	r1, [pc, #52]	; (8008ddc <SCPI_ParamCharacters+0x44>)
 8008da8:	f7fe ffde 	bl	8007d68 <SCPI_ErrorPush>
        return FALSE;
 8008dac:	2000      	movs	r0, #0
}
 8008dae:	b004      	add	sp, #16
 8008db0:	bd70      	pop	{r4, r5, r6, pc}
    result = SCPI_Parameter(context, &param, mandatory);
 8008db2:	461a      	mov	r2, r3
 8008db4:	a901      	add	r1, sp, #4
 8008db6:	f7ff ff69 	bl	8008c8c <SCPI_Parameter>
    if (result) {
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d0f7      	beq.n	8008dae <SCPI_ParamCharacters+0x16>
 8008dbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        switch (param.type) {
 8008dc2:	f89d 1004 	ldrb.w	r1, [sp, #4]
                break;
 8008dc6:	2001      	movs	r0, #1
        switch (param.type) {
 8008dc8:	390e      	subs	r1, #14
 8008dca:	2901      	cmp	r1, #1
                *value = param.ptr + 1;
 8008dcc:	bf9d      	ittte	ls
 8008dce:	3201      	addls	r2, #1
                *len = param.len - 2;
 8008dd0:	3b02      	subls	r3, #2
                *value = param.ptr + 1;
 8008dd2:	602a      	strls	r2, [r5, #0]
                *value = param.ptr;
 8008dd4:	602a      	strhi	r2, [r5, #0]
                *len = param.len;
 8008dd6:	6023      	str	r3, [r4, #0]
                break;
 8008dd8:	e7e9      	b.n	8008dae <SCPI_ParamCharacters+0x16>
 8008dda:	bf00      	nop
 8008ddc:	fffffeca 	.word	0xfffffeca

08008de0 <scpiParser_parseAllProgramData>:

    int result;
    scpi_token_t tmp;
    int paramCount = 0;

    token->len = -1;
 8008de0:	f04f 33ff 	mov.w	r3, #4294967295
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8008de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    token->len = -1;
 8008de6:	608b      	str	r3, [r1, #8]
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 8008de8:	2318      	movs	r3, #24
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8008dea:	4606      	mov	r6, r0
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 8008dec:	700b      	strb	r3, [r1, #0]
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8008dee:	460c      	mov	r4, r1
    token->ptr = state->pos;
 8008df0:	6843      	ldr	r3, [r0, #4]
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8008df2:	4617      	mov	r7, r2
    int paramCount = 0;
 8008df4:	2500      	movs	r5, #0


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8008df6:	2001      	movs	r0, #1
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8008df8:	b085      	sub	sp, #20
    token->ptr = state->pos;
 8008dfa:	604b      	str	r3, [r1, #4]
        token->len += result;
 8008dfc:	68a3      	ldr	r3, [r4, #8]
            token->len = 0;
            paramCount = -1;
            break;
        }

        result = scpiParser_parseProgramData(state, &tmp);
 8008dfe:	a901      	add	r1, sp, #4
        token->len += result;
 8008e00:	4418      	add	r0, r3
 8008e02:	60a0      	str	r0, [r4, #8]
        result = scpiParser_parseProgramData(state, &tmp);
 8008e04:	4630      	mov	r0, r6
 8008e06:	f7ff fef7 	bl	8008bf8 <scpiParser_parseProgramData>
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
 8008e0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008e0e:	2a1a      	cmp	r2, #26
 8008e10:	d013      	beq.n	8008e3a <scpiParser_parseAllProgramData+0x5a>
            token->len += result;
 8008e12:	68a3      	ldr	r3, [r4, #8]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8008e14:	a901      	add	r1, sp, #4
            token->len += result;
 8008e16:	4403      	add	r3, r0
 8008e18:	60a3      	str	r3, [r4, #8]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8008e1a:	4630      	mov	r0, r6
            token->type = SCPI_TOKEN_UNKNOWN;
            token->len = 0;
            paramCount = -1;
            break;
        }
        paramCount++;
 8008e1c:	3501      	adds	r5, #1
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8008e1e:	f7ff fcb7 	bl	8008790 <scpiLex_Comma>
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d1ea      	bne.n	8008dfc <scpiParser_parseAllProgramData+0x1c>
    }

    if (token->len == -1) {
 8008e26:	68a3      	ldr	r3, [r4, #8]
 8008e28:	3301      	adds	r3, #1
        token->len = 0;
 8008e2a:	bf04      	itt	eq
 8008e2c:	2300      	moveq	r3, #0
 8008e2e:	60a3      	streq	r3, [r4, #8]
    }

    if (numberOfParameters != NULL) {
 8008e30:	b107      	cbz	r7, 8008e34 <scpiParser_parseAllProgramData+0x54>
        *numberOfParameters = paramCount;
 8008e32:	603d      	str	r5, [r7, #0]
    }
    return token->len;
}
 8008e34:	68a0      	ldr	r0, [r4, #8]
 8008e36:	b005      	add	sp, #20
 8008e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
            token->len = 0;
 8008e3a:	2300      	movs	r3, #0
            token->type = SCPI_TOKEN_UNKNOWN;
 8008e3c:	7022      	strb	r2, [r4, #0]
            token->len = 0;
 8008e3e:	60a3      	str	r3, [r4, #8]
            paramCount = -1;
 8008e40:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 8008e44:	e7ef      	b.n	8008e26 <scpiParser_parseAllProgramData+0x46>

08008e46 <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 8008e46:	b530      	push	{r4, r5, lr}
    scpi_token_t tmp;
    int result = 0;

    lex_state.buffer = lex_state.pos = buffer;
    lex_state.len = len;
    state->numberOfParameters = 0;
 8008e48:	2500      	movs	r5, #0
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	b087      	sub	sp, #28
    lex_state.buffer = lex_state.pos = buffer;
 8008e4e:	e9cd 1100 	strd	r1, r1, [sp]
    state->numberOfParameters = 0;
 8008e52:	6185      	str	r5, [r0, #24]

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
 8008e54:	a903      	add	r1, sp, #12
 8008e56:	4668      	mov	r0, sp
    lex_state.len = len;
 8008e58:	9202      	str	r2, [sp, #8]
    scpiLex_WhiteSpace(&lex_state, &tmp);
 8008e5a:	f7ff fa50 	bl	80082fe <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
 8008e5e:	4621      	mov	r1, r4
 8008e60:	4668      	mov	r0, sp
 8008e62:	f7ff fa5d 	bl	8008320 <scpiLex_ProgramHeader>
 8008e66:	42a8      	cmp	r0, r5
 8008e68:	db38      	blt.n	8008edc <scpiParser_detectProgramMessageUnit+0x96>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
 8008e6a:	a903      	add	r1, sp, #12
 8008e6c:	4668      	mov	r0, sp
 8008e6e:	f7ff fa46 	bl	80082fe <scpiLex_WhiteSpace>
 8008e72:	42a8      	cmp	r0, r5
 8008e74:	dd2c      	ble.n	8008ed0 <scpiParser_detectProgramMessageUnit+0x8a>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
 8008e76:	f104 0218 	add.w	r2, r4, #24
 8008e7a:	f104 010c 	add.w	r1, r4, #12
 8008e7e:	4668      	mov	r0, sp
 8008e80:	f7ff ffae 	bl	8008de0 <scpiParser_parseAllProgramData>
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
        invalidateToken(&state->programData, lex_state.buffer);
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
 8008e84:	a903      	add	r1, sp, #12
 8008e86:	4668      	mov	r0, sp
 8008e88:	f7ff fca3 	bl	80087d2 <scpiLex_NewLine>
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	b920      	cbnz	r0, 8008e9a <scpiParser_detectProgramMessageUnit+0x54>
 8008e90:	a903      	add	r1, sp, #12
 8008e92:	4668      	mov	r0, sp
 8008e94:	f7ff fc8d 	bl	80087b2 <scpiLex_Semicolon>
 8008e98:	4605      	mov	r5, r0

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
 8008e9a:	4668      	mov	r0, sp
 8008e9c:	f7ff fa2d 	bl	80082fa <scpiLex_IsEos>
 8008ea0:	9a00      	ldr	r2, [sp, #0]
 8008ea2:	b958      	cbnz	r0, 8008ebc <scpiParser_detectProgramMessageUnit+0x76>
 8008ea4:	b955      	cbnz	r5, 8008ebc <scpiParser_detectProgramMessageUnit+0x76>
        lex_state.pos++;
 8008ea6:	9b01      	ldr	r3, [sp, #4]
    token->ptr = ptr;
 8008ea8:	e9c4 2504 	strd	r2, r5, [r4, #16]
        lex_state.pos++;
 8008eac:	3301      	adds	r3, #1
 8008eae:	9301      	str	r3, [sp, #4]

        state->programHeader.len = 1;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	60a3      	str	r3, [r4, #8]
        state->programHeader.type = SCPI_TOKEN_INVALID;
 8008eb4:	2319      	movs	r3, #25
 8008eb6:	7023      	strb	r3, [r4, #0]
    token->type = SCPI_TOKEN_UNKNOWN;
 8008eb8:	231a      	movs	r3, #26
 8008eba:	7323      	strb	r3, [r4, #12]

        invalidateToken(&state->programData, lex_state.buffer);
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
 8008ebc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d113      	bne.n	8008eec <scpiParser_detectProgramMessageUnit+0xa6>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
 8008ec4:	2302      	movs	r3, #2
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
    }

    return lex_state.pos - lex_state.buffer;
}
 8008ec6:	9801      	ldr	r0, [sp, #4]
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 8008ec8:	7723      	strb	r3, [r4, #28]
}
 8008eca:	1a80      	subs	r0, r0, r2
 8008ecc:	b007      	add	sp, #28
 8008ece:	bd30      	pop	{r4, r5, pc}
    token->ptr = ptr;
 8008ed0:	9b01      	ldr	r3, [sp, #4]
    token->len = 0;
 8008ed2:	6165      	str	r5, [r4, #20]
    token->ptr = ptr;
 8008ed4:	6123      	str	r3, [r4, #16]
    token->type = SCPI_TOKEN_UNKNOWN;
 8008ed6:	231a      	movs	r3, #26
 8008ed8:	7323      	strb	r3, [r4, #12]
 8008eda:	e7d3      	b.n	8008e84 <scpiParser_detectProgramMessageUnit+0x3e>
 8008edc:	231a      	movs	r3, #26
        invalidateToken(&state->programHeader, lex_state.buffer);
 8008ede:	9a00      	ldr	r2, [sp, #0]
    token->type = SCPI_TOKEN_UNKNOWN;
 8008ee0:	7023      	strb	r3, [r4, #0]
    token->ptr = ptr;
 8008ee2:	e9c4 2501 	strd	r2, r5, [r4, #4]
 8008ee6:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8008eea:	e7f5      	b.n	8008ed8 <scpiParser_detectProgramMessageUnit+0x92>
    } else if (SCPI_TOKEN_NL == tmp.type) {
 8008eec:	2b05      	cmp	r3, #5
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
 8008eee:	bf0c      	ite	eq
 8008ef0:	2301      	moveq	r3, #1
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 8008ef2:	2300      	movne	r3, #0
 8008ef4:	e7e7      	b.n	8008ec6 <scpiParser_detectProgramMessageUnit+0x80>
	...

08008ef8 <SCPI_Parse>:
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 8008efc:	231a      	movs	r3, #26
 8008efe:	2500      	movs	r5, #0
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 8008f00:	b08b      	sub	sp, #44	; 0x2c
 8008f02:	460f      	mov	r7, r1
 8008f04:	4690      	mov	r8, r2
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 8008f06:	f88d 301c 	strb.w	r3, [sp, #28]
 8008f0a:	e9cd 5508 	strd	r5, r5, [sp, #32]
    if (context == NULL) {
 8008f0e:	4604      	mov	r4, r0
 8008f10:	2800      	cmp	r0, #0
 8008f12:	f000 80b1 	beq.w	8009078 <SCPI_Parse+0x180>
    scpi_bool_t result = TRUE;
 8008f16:	2601      	movs	r6, #1
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 8008f18:	46ab      	mov	fp, r5
    state = &context->parser_state;
 8008f1a:	f100 0364 	add.w	r3, r0, #100	; 0x64
 8008f1e:	9302      	str	r3, [sp, #8]
    context->output_count = 0;
 8008f20:	6305      	str	r5, [r0, #48]	; 0x30
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 8008f22:	4642      	mov	r2, r8
 8008f24:	4639      	mov	r1, r7
 8008f26:	9802      	ldr	r0, [sp, #8]
 8008f28:	f7ff ff8d 	bl	8008e46 <scpiParser_detectProgramMessageUnit>
        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 8008f2c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 8008f30:	4681      	mov	r9, r0
        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 8008f32:	2b19      	cmp	r3, #25
 8008f34:	d109      	bne.n	8008f4a <SCPI_Parse+0x52>
            if (result != FALSE)
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	f000 8082 	beq.w	8009040 <SCPI_Parse+0x148>
                SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER); // EDIT
 8008f3c:	f06f 0164 	mvn.w	r1, #100	; 0x64
 8008f40:	4620      	mov	r0, r4
 8008f42:	f7fe ff11 	bl	8007d68 <SCPI_ErrorPush>
                result = FALSE;
 8008f46:	2600      	movs	r6, #0
 8008f48:	e07a      	b.n	8009040 <SCPI_Parse+0x148>
        } else if (state->programHeader.len > 0) {
 8008f4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dd77      	ble.n	8009040 <SCPI_Parse+0x148>
            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 8008f50:	f04f 0a00 	mov.w	sl, #0
            composeCompoundCommand(&cmd_prev, &state->programHeader);
 8008f54:	9902      	ldr	r1, [sp, #8]
 8008f56:	a807      	add	r0, sp, #28
 8008f58:	f000 fb1a 	bl	8009590 <composeCompoundCommand>
            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 8008f5c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008f5e:	9304      	str	r3, [sp, #16]
 8008f60:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008f62:	9305      	str	r3, [sp, #20]
    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	f853 000a 	ldr.w	r0, [r3, sl]
 8008f6a:	eb03 020a 	add.w	r2, r3, sl
 8008f6e:	9203      	str	r2, [sp, #12]
 8008f70:	b990      	cbnz	r0, 8008f98 <SCPI_Parse+0xa0>
 8008f72:	eb07 0209 	add.w	r2, r7, r9
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
 8008f76:	4297      	cmp	r7, r2
 8008f78:	eba2 0307 	sub.w	r3, r2, r7
 8008f7c:	d068      	beq.n	8009050 <SCPI_Parse+0x158>
 8008f7e:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8008f82:	290d      	cmp	r1, #13
 8008f84:	d0f7      	beq.n	8008f76 <SCPI_Parse+0x7e>
 8008f86:	290a      	cmp	r1, #10
 8008f88:	d0f5      	beq.n	8008f76 <SCPI_Parse+0x7e>
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
 8008f8a:	463a      	mov	r2, r7
 8008f8c:	f06f 0170 	mvn.w	r1, #112	; 0x70
 8008f90:	4620      	mov	r0, r4
 8008f92:	f7fe fe97 	bl	8007cc4 <SCPI_ErrorPushEx>
 8008f96:	e7d6      	b.n	8008f46 <SCPI_Parse+0x4e>
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 8008f98:	e9cd bb00 	strd	fp, fp, [sp]
 8008f9c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f000 f9f1 	bl	8009388 <matchCommand>
 8008fa6:	f10a 0a0c 	add.w	sl, sl, #12
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d0da      	beq.n	8008f64 <SCPI_Parse+0x6c>
            context->param_list.cmd = cmd;
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	6123      	str	r3, [r4, #16]
                context->param_list.lex_state.buffer = state->programData.ptr;
 8008fb2:	6f63      	ldr	r3, [r4, #116]	; 0x74
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
 8008fb4:	e9c4 3305 	strd	r3, r3, [r4, #20]
                context->param_list.lex_state.len = state->programData.len;
 8008fb8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008fba:	61e3      	str	r3, [r4, #28]
                context->param_list.cmd_raw.data = state->programHeader.ptr;
 8008fbc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
                context->param_list.cmd_raw.position = 0;
 8008fbe:	e9c4 b309 	strd	fp, r3, [r4, #36]	; 0x24
                context->param_list.cmd_raw.length = state->programHeader.len;
 8008fc2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008fc4:	6223      	str	r3, [r4, #32]
    if (context->output_count > 0) {
 8008fc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	dc18      	bgt.n	8008ffe <SCPI_Parse+0x106>
    if (cmd->callback != NULL) {
 8008fcc:	9b03      	ldr	r3, [sp, #12]
    context->cmd_error = FALSE;
 8008fce:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    if (cmd->callback != NULL) {
 8008fd2:	685b      	ldr	r3, [r3, #4]
    context->input_count = 0;
 8008fd4:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    context->arbitrary_reminding = 0;
 8008fd8:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
    if (cmd->callback != NULL) {
 8008fdc:	b3b3      	cbz	r3, 800904c <SCPI_Parse+0x154>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
 8008fde:	4620      	mov	r0, r4
 8008fe0:	4798      	blx	r3
 8008fe2:	2801      	cmp	r0, #1
 8008fe4:	f894 a038 	ldrb.w	sl, [r4, #56]	; 0x38
 8008fe8:	d00f      	beq.n	800900a <SCPI_Parse+0x112>
            if (!context->cmd_error) {
 8008fea:	f1ba 0f00 	cmp.w	sl, #0
 8008fee:	d104      	bne.n	8008ffa <SCPI_Parse+0x102>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 8008ff0:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f7fe feb7 	bl	8007d68 <SCPI_ErrorPush>
            result = FALSE;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	e007      	b.n	800900e <SCPI_Parse+0x116>
        return writeData(context, ";", 1);
 8008ffe:	2201      	movs	r2, #1
 8009000:	491e      	ldr	r1, [pc, #120]	; (800907c <SCPI_Parse+0x184>)
 8009002:	4620      	mov	r0, r4
 8009004:	f7ff fc22 	bl	800884c <writeData>
 8009008:	e7e0      	b.n	8008fcc <SCPI_Parse+0xd4>
            if (context->cmd_error) {
 800900a:	f08a 0301 	eor.w	r3, sl, #1
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
 800900e:	69e1      	ldr	r1, [r4, #28]
 8009010:	6962      	ldr	r2, [r4, #20]
 8009012:	440a      	add	r2, r1
 8009014:	69a1      	ldr	r1, [r4, #24]
 8009016:	4291      	cmp	r1, r2
 8009018:	d20a      	bcs.n	8009030 <SCPI_Parse+0x138>
 800901a:	f894 a038 	ldrb.w	sl, [r4, #56]	; 0x38
 800901e:	f1ba 0f00 	cmp.w	sl, #0
 8009022:	d105      	bne.n	8009030 <SCPI_Parse+0x138>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 8009024:	f06f 016b 	mvn.w	r1, #107	; 0x6b
 8009028:	4620      	mov	r0, r4
 800902a:	f7fe fe9d 	bl	8007d68 <SCPI_ErrorPush>
        result = FALSE;
 800902e:	4653      	mov	r3, sl
 8009030:	401e      	ands	r6, r3
                cmd_prev = state->programHeader;
 8009032:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8009036:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800903a:	ab0a      	add	r3, sp, #40	; 0x28
 800903c:	e903 0007 	stmdb	r3, {r0, r1, r2}
        if (r < len) {
 8009040:	45c8      	cmp	r8, r9
 8009042:	dd07      	ble.n	8009054 <SCPI_Parse+0x15c>
            data += r;
 8009044:	444f      	add	r7, r9
            len -= r;
 8009046:	eba8 0809 	sub.w	r8, r8, r9
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 800904a:	e76a      	b.n	8008f22 <SCPI_Parse+0x2a>
    scpi_bool_t result = TRUE;
 800904c:	2301      	movs	r3, #1
 800904e:	e7de      	b.n	800900e <SCPI_Parse+0x116>
 8009050:	2300      	movs	r3, #0
 8009052:	e79a      	b.n	8008f8a <SCPI_Parse+0x92>
    if (context->output_count > 0) {
 8009054:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009056:	2b00      	cmp	r3, #0
 8009058:	dd0a      	ble.n	8009070 <SCPI_Parse+0x178>
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
 800905a:	2202      	movs	r2, #2
 800905c:	4908      	ldr	r1, [pc, #32]	; (8009080 <SCPI_Parse+0x188>)
 800905e:	4620      	mov	r0, r4
 8009060:	f7ff fbf4 	bl	800884c <writeData>
    if (context && context->interface && context->interface->flush) {
 8009064:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009066:	b11b      	cbz	r3, 8009070 <SCPI_Parse+0x178>
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	b10b      	cbz	r3, 8009070 <SCPI_Parse+0x178>
        return context->interface->flush(context);
 800906c:	4620      	mov	r0, r4
 800906e:	4798      	blx	r3
}
 8009070:	4630      	mov	r0, r6
 8009072:	b00b      	add	sp, #44	; 0x2c
 8009074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return FALSE;
 8009078:	4606      	mov	r6, r0
 800907a:	e7f9      	b.n	8009070 <SCPI_Parse+0x178>
 800907c:	0800cc4f 	.word	0x0800cc4f
 8009080:	0800c968 	.word	0x0800c968

08009084 <SCPI_Input>:
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
 8009084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009086:	e9d0 3602 	ldrd	r3, r6, [r0, #8]
 800908a:	4604      	mov	r4, r0
    if (len == 0) {
 800908c:	4615      	mov	r5, r2
 800908e:	b942      	cbnz	r2, 80090a2 <SCPI_Input+0x1e>
        context->buffer.data[context->buffer.position] = 0;
 8009090:	54f2      	strb	r2, [r6, r3]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 8009092:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 8009096:	f7ff ff2f 	bl	8008ef8 <SCPI_Parse>
 800909a:	4606      	mov	r6, r0
        context->buffer.position = 0;
 800909c:	60a5      	str	r5, [r4, #8]
}
 800909e:	4630      	mov	r0, r6
 80090a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buffer_free = context->buffer.length - context->buffer.position;
 80090a2:	6847      	ldr	r7, [r0, #4]
 80090a4:	1aff      	subs	r7, r7, r3
        if (len > (buffer_free - 1)) {
 80090a6:	42ba      	cmp	r2, r7
 80090a8:	db08      	blt.n	80090bc <SCPI_Input+0x38>
            context->buffer.position = 0;
 80090aa:	2500      	movs	r5, #0
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 80090ac:	f46f 71b5 	mvn.w	r1, #362	; 0x16a
            context->buffer.position = 0;
 80090b0:	6085      	str	r5, [r0, #8]
            context->buffer.data[context->buffer.position] = 0;
 80090b2:	7035      	strb	r5, [r6, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 80090b4:	f7fe fe58 	bl	8007d68 <SCPI_ErrorPush>
            return FALSE;
 80090b8:	462e      	mov	r6, r5
 80090ba:	e7f0      	b.n	800909e <SCPI_Input+0x1a>
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 80090bc:	18f0      	adds	r0, r6, r3
 80090be:	f001 fbfb 	bl	800a8b8 <memcpy>
        context->buffer.position += len;
 80090c2:	68a3      	ldr	r3, [r4, #8]
    scpi_bool_t result = TRUE;
 80090c4:	2601      	movs	r6, #1
        context->buffer.position += len;
 80090c6:	442b      	add	r3, r5
        context->buffer.data[context->buffer.position] = 0;
 80090c8:	2500      	movs	r5, #0
 80090ca:	68e2      	ldr	r2, [r4, #12]
        context->buffer.position += len;
 80090cc:	60a3      	str	r3, [r4, #8]
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 80090ce:	f104 0764 	add.w	r7, r4, #100	; 0x64
        context->buffer.data[context->buffer.position] = 0;
 80090d2:	54d5      	strb	r5, [r2, r3]
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 80090d4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80090d8:	4638      	mov	r0, r7
 80090da:	1b52      	subs	r2, r2, r5
 80090dc:	4429      	add	r1, r5
 80090de:	f7ff feb2 	bl	8008e46 <scpiParser_detectProgramMessageUnit>
            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 80090e2:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
            totcmdlen += cmdlen;
 80090e6:	4405      	add	r5, r0
            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d110      	bne.n	800910e <SCPI_Input+0x8a>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
 80090ec:	462a      	mov	r2, r5
 80090ee:	68e1      	ldr	r1, [r4, #12]
 80090f0:	4620      	mov	r0, r4
 80090f2:	f7ff ff01 	bl	8008ef8 <SCPI_Parse>
 80090f6:	4606      	mov	r6, r0
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 80090f8:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 80090fc:	1b52      	subs	r2, r2, r5
 80090fe:	1941      	adds	r1, r0, r5
 8009100:	f001 fbe5 	bl	800a8ce <memmove>
                context->buffer.position -= totcmdlen;
 8009104:	68a3      	ldr	r3, [r4, #8]
 8009106:	1b5d      	subs	r5, r3, r5
 8009108:	60a5      	str	r5, [r4, #8]
                totcmdlen = 0;
 800910a:	2500      	movs	r5, #0
 800910c:	e7e2      	b.n	80090d4 <SCPI_Input+0x50>
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN
 800910e:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
 8009112:	2a1a      	cmp	r2, #26
 8009114:	d101      	bne.n	800911a <SCPI_Input+0x96>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 8009116:	2b00      	cmp	r3, #0
 8009118:	d0c1      	beq.n	800909e <SCPI_Input+0x1a>
                if (totcmdlen >= context->buffer.position) break;
 800911a:	68a3      	ldr	r3, [r4, #8]
 800911c:	42ab      	cmp	r3, r5
 800911e:	d8d9      	bhi.n	80090d4 <SCPI_Input+0x50>
 8009120:	e7bd      	b.n	800909e <SCPI_Input+0x1a>

08009122 <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 8009122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009126:	4605      	mov	r5, r0
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 8009128:	4604      	mov	r4, r0
 800912a:	eb00 0801 	add.w	r8, r0, r1
 800912e:	4544      	cmp	r4, r8
 8009130:	eba4 0605 	sub.w	r6, r4, r5
 8009134:	d00c      	beq.n	8009150 <patternSeparatorShortPos+0x2e>
 8009136:	7823      	ldrb	r3, [r4, #0]
 8009138:	4627      	mov	r7, r4
 800913a:	b14b      	cbz	r3, 8009150 <patternSeparatorShortPos+0x2e>
        if (islower((unsigned char) pattern[i])) {
 800913c:	f001 fb9c 	bl	800a878 <__locale_ctype_ptr>
 8009140:	783b      	ldrb	r3, [r7, #0]
 8009142:	3401      	adds	r4, #1
 8009144:	4418      	add	r0, r3
 8009146:	7843      	ldrb	r3, [r0, #1]
 8009148:	f003 0303 	and.w	r3, r3, #3
 800914c:	2b02      	cmp	r3, #2
 800914e:	d1ee      	bne.n	800912e <patternSeparatorShortPos+0xc>
            return i;
        }
    }
    return i;
}
 8009150:	4630      	mov	r0, r6
 8009152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009156 <strnpbrk>:
char * strnpbrk(const char *str, size_t size, const char *set) {
 8009156:	b570      	push	{r4, r5, r6, lr}
    const char * strend = str + size;
 8009158:	4401      	add	r1, r0
    while ((strend != str) && ((c = *str++) != 0)) {
 800915a:	4288      	cmp	r0, r1
 800915c:	d003      	beq.n	8009166 <strnpbrk+0x10>
 800915e:	4604      	mov	r4, r0
 8009160:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009164:	b923      	cbnz	r3, 8009170 <strnpbrk+0x1a>
    return (NULL);
 8009166:	2000      	movs	r0, #0
 8009168:	e001      	b.n	800916e <strnpbrk+0x18>
            if (sc == c)
 800916a:	42ab      	cmp	r3, r5
 800916c:	d101      	bne.n	8009172 <strnpbrk+0x1c>
}
 800916e:	bd70      	pop	{r4, r5, r6, pc}
        for (scanp = set; (sc = *scanp++) != '\0';)
 8009170:	4616      	mov	r6, r2
 8009172:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009176:	2d00      	cmp	r5, #0
 8009178:	d1f7      	bne.n	800916a <strnpbrk+0x14>
 800917a:	4620      	mov	r0, r4
 800917c:	e7ed      	b.n	800915a <strnpbrk+0x4>
	...

08009180 <UInt32ToStrBaseSign>:
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 8009180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009184:	4605      	mov	r5, r0
 8009186:	460f      	mov	r7, r1
 8009188:	b086      	sub	sp, #24
    const char digits[] = "0123456789ABCDEF";
 800918a:	4e2d      	ldr	r6, [pc, #180]	; (8009240 <UInt32ToStrBaseSign+0xc0>)
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 800918c:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
    const char digits[] = "0123456789ABCDEF";
 8009190:	f10d 0c04 	add.w	ip, sp, #4
 8009194:	f106 0810 	add.w	r8, r6, #16
 8009198:	46e6      	mov	lr, ip
 800919a:	6830      	ldr	r0, [r6, #0]
 800919c:	6871      	ldr	r1, [r6, #4]
 800919e:	3608      	adds	r6, #8
 80091a0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80091a4:	4546      	cmp	r6, r8
 80091a6:	46f4      	mov	ip, lr
 80091a8:	d1f6      	bne.n	8009198 <UInt32ToStrBaseSign+0x18>
 80091aa:	7831      	ldrb	r1, [r6, #0]
 80091ac:	f88e 1000 	strb.w	r1, [lr]
    if (uval == 0) {
 80091b0:	b94d      	cbnz	r5, 80091c6 <UInt32ToStrBaseSign+0x46>
        ADD_CHAR('0');
 80091b2:	2a00      	cmp	r2, #0
 80091b4:	d041      	beq.n	800923a <UInt32ToStrBaseSign+0xba>
 80091b6:	2330      	movs	r3, #48	; 0x30
 80091b8:	2001      	movs	r0, #1
 80091ba:	703b      	strb	r3, [r7, #0]
    if (pos < len) str[pos] = 0;
 80091bc:	4290      	cmp	r0, r2
 80091be:	d22f      	bcs.n	8009220 <UInt32ToStrBaseSign+0xa0>
 80091c0:	2300      	movs	r3, #0
 80091c2:	543b      	strb	r3, [r7, r0]
 80091c4:	e02c      	b.n	8009220 <UInt32ToStrBaseSign+0xa0>
        switch (base) {
 80091c6:	2b08      	cmp	r3, #8
 80091c8:	d006      	beq.n	80091d8 <UInt32ToStrBaseSign+0x58>
 80091ca:	2b10      	cmp	r3, #16
 80091cc:	d02e      	beq.n	800922c <UInt32ToStrBaseSign+0xac>
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d129      	bne.n	8009226 <UInt32ToStrBaseSign+0xa6>
                x = 0x80000000L;
 80091d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80091d6:	e001      	b.n	80091dc <UInt32ToStrBaseSign+0x5c>
                x = 0x40000000L;
 80091d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        if (sign && ((int32_t) val < 0) && (base == 10)) {
 80091dc:	b34c      	cbz	r4, 8009232 <UInt32ToStrBaseSign+0xb2>
 80091de:	2d00      	cmp	r5, #0
 80091e0:	da27      	bge.n	8009232 <UInt32ToStrBaseSign+0xb2>
 80091e2:	2b0a      	cmp	r3, #10
 80091e4:	d125      	bne.n	8009232 <UInt32ToStrBaseSign+0xb2>
            uval = -val;
 80091e6:	426d      	negs	r5, r5
            ADD_CHAR('-');
 80091e8:	b31a      	cbz	r2, 8009232 <UInt32ToStrBaseSign+0xb2>
 80091ea:	202d      	movs	r0, #45	; 0x2d
 80091ec:	7038      	strb	r0, [r7, #0]
 80091ee:	2001      	movs	r0, #1
        while ((uval / x) == 0) {
 80091f0:	fbb5 f4f1 	udiv	r4, r5, r1
 80091f4:	fbb1 f6f3 	udiv	r6, r1, r3
 80091f8:	b1ec      	cbz	r4, 8009236 <UInt32ToStrBaseSign+0xb6>
            digit = (uint8_t) (uval / x);
 80091fa:	fbb5 f4f1 	udiv	r4, r5, r1
            ADD_CHAR(digits[digit]);
 80091fe:	4290      	cmp	r0, r2
 8009200:	b2e4      	uxtb	r4, r4
 8009202:	d205      	bcs.n	8009210 <UInt32ToStrBaseSign+0x90>
 8009204:	ae06      	add	r6, sp, #24
 8009206:	4426      	add	r6, r4
 8009208:	f816 6c14 	ldrb.w	r6, [r6, #-20]
 800920c:	543e      	strb	r6, [r7, r0]
 800920e:	3001      	adds	r0, #1
            uval -= digit * x;
 8009210:	fb04 5511 	mls	r5, r4, r1, r5
            x /= base;
 8009214:	fbb1 f1f3 	udiv	r1, r1, r3
        } while (x && (pos < len));
 8009218:	2900      	cmp	r1, #0
 800921a:	d0cf      	beq.n	80091bc <UInt32ToStrBaseSign+0x3c>
 800921c:	4290      	cmp	r0, r2
 800921e:	d3ec      	bcc.n	80091fa <UInt32ToStrBaseSign+0x7a>
}
 8009220:	b006      	add	sp, #24
 8009222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                x = 1000000000L;
 8009226:	4907      	ldr	r1, [pc, #28]	; (8009244 <UInt32ToStrBaseSign+0xc4>)
                base = 10;
 8009228:	230a      	movs	r3, #10
                break;
 800922a:	e7d7      	b.n	80091dc <UInt32ToStrBaseSign+0x5c>
                x = 0x10000000L;
 800922c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
                break;
 8009230:	e7d4      	b.n	80091dc <UInt32ToStrBaseSign+0x5c>
    size_t pos = 0;
 8009232:	2000      	movs	r0, #0
 8009234:	e7dc      	b.n	80091f0 <UInt32ToStrBaseSign+0x70>
            x /= base;
 8009236:	4631      	mov	r1, r6
 8009238:	e7da      	b.n	80091f0 <UInt32ToStrBaseSign+0x70>
    size_t pos = 0;
 800923a:	4610      	mov	r0, r2
    return pos;
 800923c:	e7f0      	b.n	8009220 <UInt32ToStrBaseSign+0xa0>
 800923e:	bf00      	nop
 8009240:	0800cd0a 	.word	0x0800cd0a
 8009244:	3b9aca00 	.word	0x3b9aca00

08009248 <SCPI_UInt32ToStrBase>:
size_t SCPI_UInt32ToStrBase(uint32_t val, char * str, size_t len, int8_t base) {
 8009248:	b513      	push	{r0, r1, r4, lr}
    return UInt32ToStrBaseSign(val, str, len, base, FALSE);
 800924a:	2400      	movs	r4, #0
 800924c:	9400      	str	r4, [sp, #0]
 800924e:	f7ff ff97 	bl	8009180 <UInt32ToStrBaseSign>
}
 8009252:	b002      	add	sp, #8
 8009254:	bd10      	pop	{r4, pc}

08009256 <strBaseToInt32>:
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 8009256:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009258:	460d      	mov	r5, r1
    *val = strtol(str, &endptr, base);
 800925a:	a901      	add	r1, sp, #4
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 800925c:	4604      	mov	r4, r0
    *val = strtol(str, &endptr, base);
 800925e:	f001 fc23 	bl	800aaa8 <strtol>
 8009262:	6028      	str	r0, [r5, #0]
}
 8009264:	9801      	ldr	r0, [sp, #4]
 8009266:	1b00      	subs	r0, r0, r4
 8009268:	b003      	add	sp, #12
 800926a:	bd30      	pop	{r4, r5, pc}

0800926c <strBaseToUInt32>:
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 800926c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800926e:	460d      	mov	r5, r1
    *val = strtoul(str, &endptr, base);
 8009270:	a901      	add	r1, sp, #4
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 8009272:	4604      	mov	r4, r0
    *val = strtoul(str, &endptr, base);
 8009274:	f001 fca8 	bl	800abc8 <strtoul>
 8009278:	6028      	str	r0, [r5, #0]
}
 800927a:	9801      	ldr	r0, [sp, #4]
 800927c:	1b00      	subs	r0, r0, r4
 800927e:	b003      	add	sp, #12
 8009280:	bd30      	pop	{r4, r5, pc}

08009282 <compareStr>:
    if (len1 != len2) {
 8009282:	4299      	cmp	r1, r3
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 8009284:	b510      	push	{r4, lr}
 8009286:	4614      	mov	r4, r2
    if (len1 != len2) {
 8009288:	d107      	bne.n	800929a <compareStr+0x18>
    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
 800928a:	460a      	mov	r2, r1
 800928c:	4621      	mov	r1, r4
 800928e:	f001 fb5f 	bl	800a950 <strncasecmp>
 8009292:	fab0 f080 	clz	r0, r0
 8009296:	0940      	lsrs	r0, r0, #5
}
 8009298:	bd10      	pop	{r4, pc}
        return FALSE;
 800929a:	2000      	movs	r0, #0
 800929c:	e7fc      	b.n	8009298 <compareStr+0x16>

0800929e <compareStrAndNum>:
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 800929e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (len2 < len1) {
 80092a2:	428b      	cmp	r3, r1
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 80092a4:	460c      	mov	r4, r1
 80092a6:	4616      	mov	r6, r2
 80092a8:	461f      	mov	r7, r3
 80092aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
    if (len2 < len1) {
 80092ae:	d203      	bcs.n	80092b8 <compareStrAndNum+0x1a>
        return FALSE;
 80092b0:	2000      	movs	r0, #0
}
 80092b2:	b002      	add	sp, #8
 80092b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
 80092b8:	460a      	mov	r2, r1
 80092ba:	4631      	mov	r1, r6
 80092bc:	f001 fb48 	bl	800a950 <strncasecmp>
 80092c0:	4605      	mov	r5, r0
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d1f4      	bne.n	80092b0 <compareStrAndNum+0x12>
        if (num) {
 80092c6:	f1b8 0f00 	cmp.w	r8, #0
 80092ca:	d10e      	bne.n	80092ea <compareStrAndNum+0x4c>
 80092cc:	4434      	add	r4, r6
 80092ce:	443e      	add	r6, r7
            for (i = len1; i < len2; i++) {
 80092d0:	42b4      	cmp	r4, r6
 80092d2:	d101      	bne.n	80092d8 <compareStrAndNum+0x3a>
        result = TRUE;
 80092d4:	2001      	movs	r0, #1
 80092d6:	e7ec      	b.n	80092b2 <compareStrAndNum+0x14>
                if (!isdigit((int) str2[i])) {
 80092d8:	f001 face 	bl	800a878 <__locale_ctype_ptr>
 80092dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092e0:	4418      	add	r0, r3
 80092e2:	7843      	ldrb	r3, [r0, #1]
 80092e4:	075b      	lsls	r3, r3, #29
 80092e6:	d5e3      	bpl.n	80092b0 <compareStrAndNum+0x12>
 80092e8:	e7f2      	b.n	80092d0 <compareStrAndNum+0x32>
            if (len1 == len2) {
 80092ea:	42a7      	cmp	r7, r4
 80092ec:	d0f2      	beq.n	80092d4 <compareStrAndNum+0x36>
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
 80092ee:	1930      	adds	r0, r6, r4
 80092f0:	220a      	movs	r2, #10
 80092f2:	a901      	add	r1, sp, #4
 80092f4:	f7ff ffaf 	bl	8009256 <strBaseToInt32>
 80092f8:	4404      	add	r4, r0
                if (i != len2) {
 80092fa:	42a7      	cmp	r7, r4
 80092fc:	d103      	bne.n	8009306 <compareStrAndNum+0x68>
                    *num = tmpNum;
 80092fe:	9b01      	ldr	r3, [sp, #4]
 8009300:	f8c8 3000 	str.w	r3, [r8]
 8009304:	e7e6      	b.n	80092d4 <compareStrAndNum+0x36>
                    result = FALSE;
 8009306:	4628      	mov	r0, r5
 8009308:	e7d3      	b.n	80092b2 <compareStrAndNum+0x14>

0800930a <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
 800930a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800930e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8009312:	4604      	mov	r4, r0
 8009314:	4615      	mov	r5, r2
 8009316:	461e      	mov	r6, r3
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
 8009318:	460f      	mov	r7, r1
 800931a:	b1f9      	cbz	r1, 800935c <matchPattern+0x52>
 800931c:	f101 38ff 	add.w	r8, r1, #4294967295
 8009320:	f810 3008 	ldrb.w	r3, [r0, r8]
 8009324:	2b23      	cmp	r3, #35	; 0x23
 8009326:	d119      	bne.n	800935c <matchPattern+0x52>
        size_t new_pattern_len = pattern_len - 1;

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 8009328:	4641      	mov	r1, r8
 800932a:	f7ff fefa 	bl	8009122 <patternSeparatorShortPos>

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 800932e:	f8cd 9000 	str.w	r9, [sp]
        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 8009332:	4607      	mov	r7, r0
        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 8009334:	4633      	mov	r3, r6
 8009336:	462a      	mov	r2, r5
 8009338:	4641      	mov	r1, r8
 800933a:	4620      	mov	r0, r4
 800933c:	f7ff ffaf 	bl	800929e <compareStrAndNum>
 8009340:	b9f8      	cbnz	r0, 8009382 <matchPattern+0x78>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
 8009342:	f8cd 9000 	str.w	r9, [sp]
 8009346:	4633      	mov	r3, r6
 8009348:	462a      	mov	r2, r5
 800934a:	4639      	mov	r1, r7
 800934c:	4620      	mov	r0, r4
 800934e:	f7ff ffa6 	bl	800929e <compareStrAndNum>
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);

        return compareStr(pattern, pattern_len, str, str_len) ||
 8009352:	f000 0001 	and.w	r0, r0, #1
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
    }
}
 8009356:	b003      	add	sp, #12
 8009358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 800935c:	4639      	mov	r1, r7
 800935e:	4620      	mov	r0, r4
 8009360:	f7ff fedf 	bl	8009122 <patternSeparatorShortPos>
        return compareStr(pattern, pattern_len, str, str_len) ||
 8009364:	4633      	mov	r3, r6
        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 8009366:	4680      	mov	r8, r0
        return compareStr(pattern, pattern_len, str, str_len) ||
 8009368:	462a      	mov	r2, r5
 800936a:	4639      	mov	r1, r7
 800936c:	4620      	mov	r0, r4
 800936e:	f7ff ff88 	bl	8009282 <compareStr>
 8009372:	b930      	cbnz	r0, 8009382 <matchPattern+0x78>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
 8009374:	4633      	mov	r3, r6
 8009376:	462a      	mov	r2, r5
 8009378:	4641      	mov	r1, r8
 800937a:	4620      	mov	r0, r4
 800937c:	f7ff ff81 	bl	8009282 <compareStr>
 8009380:	e7e7      	b.n	8009352 <matchPattern+0x48>
        return compareStr(pattern, pattern_len, str, str_len) ||
 8009382:	2001      	movs	r0, #1
 8009384:	e7e5      	b.n	8009352 <matchPattern+0x48>
	...

08009388 <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	b085      	sub	sp, #20
 800938e:	4615      	mov	r5, r2
 8009390:	4688      	mov	r8, r1
 8009392:	9303      	str	r3, [sp, #12]
 8009394:	4606      	mov	r6, r0

    size_t numbers_idx = 0;
    int32_t *number_ptr = NULL;

    const char * pattern_ptr = pattern;
    int pattern_len = strlen(pattern);
 8009396:	f7f6 fee5 	bl	8000164 <strlen>
 800939a:	4604      	mov	r4, r0

    const char * cmd_ptr = cmd;
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 800939c:	4629      	mov	r1, r5
 800939e:	4640      	mov	r0, r8
 80093a0:	f001 fafb 	bl	800a99a <strnlen>

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
 80093a4:	1933      	adds	r3, r6, r4
 80093a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 80093aa:	4605      	mov	r5, r0
    if (pattern_ptr[pattern_len - 1] == '?') {
 80093ac:	2b3f      	cmp	r3, #63	; 0x3f
 80093ae:	d106      	bne.n	80093be <matchCommand+0x36>
        if (cmd_ptr[cmd_len - 1] == '?') {
 80093b0:	1e45      	subs	r5, r0, #1
 80093b2:	f818 3005 	ldrb.w	r3, [r8, r5]
 80093b6:	2b3f      	cmp	r3, #63	; 0x3f
 80093b8:	f040 80e4 	bne.w	8009584 <matchCommand+0x1fc>
            cmd_len -= 1;
            pattern_len -= 1;
 80093bc:	3c01      	subs	r4, #1
            return FALSE;
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
 80093be:	7833      	ldrb	r3, [r6, #0]
 80093c0:	2b5b      	cmp	r3, #91	; 0x5b
        SKIP_PATTERN(1);
 80093c2:	bf08      	it	eq
 80093c4:	3601      	addeq	r6, #1
        brackets++;
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 80093c6:	7833      	ldrb	r3, [r6, #0]
        SKIP_PATTERN(1);
 80093c8:	bf06      	itte	eq
 80093ca:	f104 34ff 	addeq.w	r4, r4, #4294967295
        brackets++;
 80093ce:	f04f 0901 	moveq.w	r9, #1
    int brackets = 0;
 80093d2:	f04f 0900 	movne.w	r9, #0
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 80093d6:	2b3a      	cmp	r3, #58	; 0x3a
        SKIP_PATTERN(1);
    }

    if (cmd_ptr[0] == ':') {
 80093d8:	f898 3000 	ldrb.w	r3, [r8]
        SKIP_PATTERN(1);
 80093dc:	bf04      	itt	eq
 80093de:	3601      	addeq	r6, #1
 80093e0:	f104 34ff 	addeq.w	r4, r4, #4294967295
    if (cmd_ptr[0] == ':') {
 80093e4:	2b3a      	cmp	r3, #58	; 0x3a
 80093e6:	d109      	bne.n	80093fc <matchCommand+0x74>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
 80093e8:	2d01      	cmp	r5, #1
 80093ea:	d907      	bls.n	80093fc <matchCommand+0x74>
            if (cmd_ptr[1] != '*') {
 80093ec:	f898 3001 	ldrb.w	r3, [r8, #1]
 80093f0:	2b2a      	cmp	r3, #42	; 0x2a
 80093f2:	f000 80c7 	beq.w	8009584 <matchCommand+0x1fc>
                SKIP_CMD(1);
 80093f6:	f108 0801 	add.w	r8, r8, #1
 80093fa:	3d01      	subs	r5, #1
        brackets++;
 80093fc:	2300      	movs	r3, #0
 80093fe:	9302      	str	r3, [sp, #8]
    char * separator = strnpbrk(pattern, len, "?:[]");
 8009400:	4a61      	ldr	r2, [pc, #388]	; (8009588 <matchCommand+0x200>)
 8009402:	4621      	mov	r1, r4
 8009404:	4630      	mov	r0, r6
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8009406:	46a3      	mov	fp, r4
    char * separator = strnpbrk(pattern, len, "?:[]");
 8009408:	f7ff fea5 	bl	8009156 <strnpbrk>
    if (separator == NULL) {
 800940c:	b108      	cbz	r0, 8009412 <matchCommand+0x8a>
        return separator - pattern;
 800940e:	eba0 0b06 	sub.w	fp, r0, r6
    char * separator = strnpbrk(cmd, len, ":?");
 8009412:	4a5e      	ldr	r2, [pc, #376]	; (800958c <matchCommand+0x204>)
 8009414:	4629      	mov	r1, r5
 8009416:	4640      	mov	r0, r8
 8009418:	f7ff fe9d 	bl	8009156 <strnpbrk>
    if (separator == NULL) {
 800941c:	b398      	cbz	r0, 8009486 <matchCommand+0xfe>
        result = separator - cmd;
 800941e:	eba0 0a08 	sub.w	sl, r0, r8

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
 8009422:	f1bb 0f00 	cmp.w	fp, #0
 8009426:	dd32      	ble.n	800948e <matchCommand+0x106>
 8009428:	eb06 030b 	add.w	r3, r6, fp
 800942c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009430:	2b23      	cmp	r3, #35	; 0x23
 8009432:	d12c      	bne.n	800948e <matchCommand+0x106>
            if (numbers && (numbers_idx < numbers_len)) {
 8009434:	9b03      	ldr	r3, [sp, #12]
 8009436:	b343      	cbz	r3, 800948a <matchCommand+0x102>
 8009438:	9b02      	ldr	r3, [sp, #8]
 800943a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800943c:	4293      	cmp	r3, r2
 800943e:	d224      	bcs.n	800948a <matchCommand+0x102>
                number_ptr = numbers + numbers_idx;
 8009440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009444:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                *number_ptr = default_value; /* default value */
 8009448:	9a03      	ldr	r2, [sp, #12]
 800944a:	9902      	ldr	r1, [sp, #8]
 800944c:	4610      	mov	r0, r2
 800944e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009450:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
            } else {
                number_ptr = NULL;
            }
            numbers_idx++;
 8009454:	9a02      	ldr	r2, [sp, #8]
 8009456:	3201      	adds	r2, #1
 8009458:	9202      	str	r2, [sp, #8]
        } else {
            number_ptr = NULL;
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	4642      	mov	r2, r8
 800945e:	4653      	mov	r3, sl
 8009460:	4659      	mov	r1, fp
 8009462:	4630      	mov	r0, r6
 8009464:	f7ff ff51 	bl	800930a <matchPattern>
 8009468:	eb06 070b 	add.w	r7, r6, fp
 800946c:	eba4 040b 	sub.w	r4, r4, fp
 8009470:	2800      	cmp	r0, #0
 8009472:	d073      	beq.n	800955c <matchCommand+0x1d4>
            SKIP_PATTERN(pattern_sep_pos);
            SKIP_CMD(cmd_sep_pos);
 8009474:	eba5 050a 	sub.w	r5, r5, sl
            result = TRUE;

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
 8009478:	b95c      	cbnz	r4, 8009492 <matchCommand+0x10a>
 800947a:	fab5 f085 	clz	r0, r5
 800947e:	0940      	lsrs	r0, r0, #5
    }

    return result;
#undef SKIP_PATTERN
#undef SKIP_CMD
}
 8009480:	b005      	add	sp, #20
 8009482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        result = len;
 8009486:	46aa      	mov	sl, r5
 8009488:	e7cb      	b.n	8009422 <matchCommand+0x9a>
                number_ptr = NULL;
 800948a:	2300      	movs	r3, #0
 800948c:	e7e2      	b.n	8009454 <matchCommand+0xcc>
            number_ptr = NULL;
 800948e:	2300      	movs	r3, #0
 8009490:	e7e3      	b.n	800945a <matchCommand+0xd2>
            if (cmd_len == 0) {
 8009492:	bb35      	cbnz	r5, 80094e2 <matchCommand+0x15a>
    char * separator = strnpbrk(pattern, len, "?:[]");
 8009494:	4e3c      	ldr	r6, [pc, #240]	; (8009588 <matchCommand+0x200>)
 8009496:	4632      	mov	r2, r6
 8009498:	4621      	mov	r1, r4
 800949a:	4638      	mov	r0, r7
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 800949c:	4625      	mov	r5, r4
    char * separator = strnpbrk(pattern, len, "?:[]");
 800949e:	f7ff fe5a 	bl	8009156 <strnpbrk>
    if (separator == NULL) {
 80094a2:	b100      	cbz	r0, 80094a6 <matchCommand+0x11e>
        return separator - pattern;
 80094a4:	1bc5      	subs	r5, r0, r7
                    switch (pattern_ptr[pattern_sep_pos]) {
 80094a6:	5d7a      	ldrb	r2, [r7, r5]
 80094a8:	2a5b      	cmp	r2, #91	; 0x5b
 80094aa:	d010      	beq.n	80094ce <matchCommand+0x146>
 80094ac:	2a5d      	cmp	r2, #93	; 0x5d
 80094ae:	d011      	beq.n	80094d4 <matchCommand+0x14c>
                    SKIP_PATTERN(pattern_sep_pos + 1);
 80094b0:	3501      	adds	r5, #1
 80094b2:	442f      	add	r7, r5
 80094b4:	1b64      	subs	r4, r4, r5
                    if (brackets == 0) {
 80094b6:	f1b9 0f00 	cmp.w	r9, #0
 80094ba:	d104      	bne.n	80094c6 <matchCommand+0x13e>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
 80094bc:	2c00      	cmp	r4, #0
 80094be:	dd0c      	ble.n	80094da <matchCommand+0x152>
 80094c0:	783a      	ldrb	r2, [r7, #0]
 80094c2:	2a5b      	cmp	r2, #91	; 0x5b
 80094c4:	d15e      	bne.n	8009584 <matchCommand+0x1fc>
                while (pattern_len) {
 80094c6:	2c00      	cmp	r4, #0
 80094c8:	d1e5      	bne.n	8009496 <matchCommand+0x10e>
            result = TRUE;
 80094ca:	2001      	movs	r0, #1
 80094cc:	e7d8      	b.n	8009480 <matchCommand+0xf8>
                            brackets++;
 80094ce:	f109 0901 	add.w	r9, r9, #1
                            break;
 80094d2:	e7ed      	b.n	80094b0 <matchCommand+0x128>
                            brackets--;
 80094d4:	f109 39ff 	add.w	r9, r9, #4294967295
                            break;
 80094d8:	e7ea      	b.n	80094b0 <matchCommand+0x128>
                if (pattern_len != 0) {
 80094da:	bf0c      	ite	eq
 80094dc:	2001      	moveq	r0, #1
 80094de:	2000      	movne	r0, #0
 80094e0:	e7ce      	b.n	8009480 <matchCommand+0xf8>
            if ((pattern_len > 0)
 80094e2:	2c00      	cmp	r4, #0
 80094e4:	dd4e      	ble.n	8009584 <matchCommand+0x1fc>
                    && ((pattern_ptr[0] == cmd_ptr[0])
 80094e6:	7839      	ldrb	r1, [r7, #0]
 80094e8:	f818 200a 	ldrb.w	r2, [r8, sl]
            SKIP_CMD(cmd_sep_pos);
 80094ec:	eb08 000a 	add.w	r0, r8, sl
                    && ((pattern_ptr[0] == cmd_ptr[0])
 80094f0:	4291      	cmp	r1, r2
 80094f2:	d107      	bne.n	8009504 <matchCommand+0x17c>
                    && (pattern_ptr[0] == ':'))) {
 80094f4:	293a      	cmp	r1, #58	; 0x3a
 80094f6:	d105      	bne.n	8009504 <matchCommand+0x17c>
                SKIP_PATTERN(1);
 80094f8:	1c7e      	adds	r6, r7, #1
 80094fa:	3c01      	subs	r4, #1
                SKIP_CMD(1);
 80094fc:	f100 0801 	add.w	r8, r0, #1
 8009500:	3d01      	subs	r5, #1
 8009502:	e77d      	b.n	8009400 <matchCommand+0x78>
            } else if ((pattern_len > 1)
 8009504:	2c01      	cmp	r4, #1
 8009506:	d03d      	beq.n	8009584 <matchCommand+0x1fc>
                    && (pattern_ptr[1] == cmd_ptr[0])
 8009508:	787e      	ldrb	r6, [r7, #1]
 800950a:	42b2      	cmp	r2, r6
 800950c:	d117      	bne.n	800953e <matchCommand+0x1b6>
                    && (pattern_ptr[0] == '[')
 800950e:	295b      	cmp	r1, #91	; 0x5b
 8009510:	d109      	bne.n	8009526 <matchCommand+0x19e>
                    && (pattern_ptr[1] == ':')) {
 8009512:	2a3a      	cmp	r2, #58	; 0x3a
 8009514:	d113      	bne.n	800953e <matchCommand+0x1b6>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
 8009516:	1cbe      	adds	r6, r7, #2
 8009518:	3c02      	subs	r4, #2
                SKIP_CMD(1);
 800951a:	f100 0801 	add.w	r8, r0, #1
 800951e:	3d01      	subs	r5, #1
                brackets++;
 8009520:	f109 0901 	add.w	r9, r9, #1
 8009524:	e76c      	b.n	8009400 <matchCommand+0x78>
                    && (pattern_ptr[0] == ']')
 8009526:	295d      	cmp	r1, #93	; 0x5d
 8009528:	d109      	bne.n	800953e <matchCommand+0x1b6>
                    && (pattern_ptr[1] == ':')) {
 800952a:	2a3a      	cmp	r2, #58	; 0x3a
 800952c:	d107      	bne.n	800953e <matchCommand+0x1b6>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
 800952e:	1cbe      	adds	r6, r7, #2
 8009530:	3c02      	subs	r4, #2
                SKIP_CMD(1);
 8009532:	f100 0801 	add.w	r8, r0, #1
 8009536:	3d01      	subs	r5, #1
                brackets--;
 8009538:	f109 39ff 	add.w	r9, r9, #4294967295
 800953c:	e760      	b.n	8009400 <matchCommand+0x78>
            } else if ((pattern_len > 2)
 800953e:	2c02      	cmp	r4, #2
 8009540:	d020      	beq.n	8009584 <matchCommand+0x1fc>
                    && (pattern_ptr[2] == cmd_ptr[0])
 8009542:	f897 c002 	ldrb.w	ip, [r7, #2]
 8009546:	4594      	cmp	ip, r2
 8009548:	d11c      	bne.n	8009584 <matchCommand+0x1fc>
                    && (pattern_ptr[0] == ']')
 800954a:	295d      	cmp	r1, #93	; 0x5d
 800954c:	d11a      	bne.n	8009584 <matchCommand+0x1fc>
                    && (pattern_ptr[1] == '[')
 800954e:	2e5b      	cmp	r6, #91	; 0x5b
 8009550:	d118      	bne.n	8009584 <matchCommand+0x1fc>
                    && (pattern_ptr[2] == ':')) {
 8009552:	2a3a      	cmp	r2, #58	; 0x3a
 8009554:	d116      	bne.n	8009584 <matchCommand+0x1fc>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
 8009556:	1cfe      	adds	r6, r7, #3
 8009558:	3c03      	subs	r4, #3
 800955a:	e7cf      	b.n	80094fc <matchCommand+0x174>
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 800955c:	f816 200b 	ldrb.w	r2, [r6, fp]
 8009560:	2a5d      	cmp	r2, #93	; 0x5d
 8009562:	d10f      	bne.n	8009584 <matchCommand+0x1fc>
 8009564:	787a      	ldrb	r2, [r7, #1]
 8009566:	2a3a      	cmp	r2, #58	; 0x3a
 8009568:	d102      	bne.n	8009570 <matchCommand+0x1e8>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 800956a:	1cbe      	adds	r6, r7, #2
 800956c:	3c02      	subs	r4, #2
 800956e:	e7e3      	b.n	8009538 <matchCommand+0x1b0>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
 8009570:	2c02      	cmp	r4, #2
 8009572:	dd07      	ble.n	8009584 <matchCommand+0x1fc>
                    && (pattern_ptr[1] == '[')
 8009574:	2a5b      	cmp	r2, #91	; 0x5b
 8009576:	d105      	bne.n	8009584 <matchCommand+0x1fc>
                    && (pattern_ptr[2] == ':')) {
 8009578:	78ba      	ldrb	r2, [r7, #2]
 800957a:	2a3a      	cmp	r2, #58	; 0x3a
 800957c:	d102      	bne.n	8009584 <matchCommand+0x1fc>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 800957e:	1cfe      	adds	r6, r7, #3
 8009580:	3c03      	subs	r4, #3
 8009582:	e73d      	b.n	8009400 <matchCommand+0x78>
            return FALSE;
 8009584:	2000      	movs	r0, #0
 8009586:	e77b      	b.n	8009480 <matchCommand+0xf8>
 8009588:	0800cd1b 	.word	0x0800cd1b
 800958c:	0800cd20 	.word	0x0800cd20

08009590 <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
 8009592:	b1c1      	cbz	r1, 80095c6 <composeCompoundCommand+0x36>
 8009594:	684c      	ldr	r4, [r1, #4]
 8009596:	b1c4      	cbz	r4, 80095ca <composeCompoundCommand+0x3a>
 8009598:	688b      	ldr	r3, [r1, #8]
 800959a:	b1c3      	cbz	r3, 80095ce <composeCompoundCommand+0x3e>
        return FALSE;

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
 800959c:	6845      	ldr	r5, [r0, #4]
 800959e:	b185      	cbz	r5, 80095c2 <composeCompoundCommand+0x32>
 80095a0:	6882      	ldr	r2, [r0, #8]
 80095a2:	b172      	cbz	r2, 80095c2 <composeCompoundCommand+0x32>
        return TRUE;

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
 80095a4:	7826      	ldrb	r6, [r4, #0]
 80095a6:	f006 06ef 	and.w	r6, r6, #239	; 0xef
 80095aa:	2e2a      	cmp	r6, #42	; 0x2a
 80095ac:	d009      	beq.n	80095c2 <composeCompoundCommand+0x32>
        return TRUE;

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
 80095ae:	782e      	ldrb	r6, [r5, #0]
 80095b0:	2e2a      	cmp	r6, #42	; 0x2a
 80095b2:	d006      	beq.n	80095c2 <composeCompoundCommand+0x32>
        return TRUE;

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
        if (prev->ptr[i - 1] == ':') {
 80095b4:	1e56      	subs	r6, r2, #1
 80095b6:	5daf      	ldrb	r7, [r5, r6]
 80095b8:	2f3a      	cmp	r7, #58	; 0x3a
 80095ba:	d00a      	beq.n	80095d2 <composeCompoundCommand+0x42>
    for (i = prev->len; i > 0; i--) {
 80095bc:	4632      	mov	r2, r6
 80095be:	2e00      	cmp	r6, #0
 80095c0:	d1f8      	bne.n	80095b4 <composeCompoundCommand+0x24>
        return TRUE;

    current->ptr -= i;
    current->len += i;
    memmove(current->ptr, prev->ptr, i);
    return TRUE;
 80095c2:	2001      	movs	r0, #1
 80095c4:	e000      	b.n	80095c8 <composeCompoundCommand+0x38>
        return FALSE;
 80095c6:	4608      	mov	r0, r1
}
 80095c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FALSE;
 80095ca:	4620      	mov	r0, r4
 80095cc:	e7fc      	b.n	80095c8 <composeCompoundCommand+0x38>
 80095ce:	4618      	mov	r0, r3
 80095d0:	e7fa      	b.n	80095c8 <composeCompoundCommand+0x38>
    current->ptr -= i;
 80095d2:	1aa4      	subs	r4, r4, r2
 80095d4:	604c      	str	r4, [r1, #4]
    current->len += i;
 80095d6:	4413      	add	r3, r2
 80095d8:	608b      	str	r3, [r1, #8]
    memmove(current->ptr, prev->ptr, i);
 80095da:	6841      	ldr	r1, [r0, #4]
 80095dc:	4620      	mov	r0, r4
 80095de:	f001 f976 	bl	800a8ce <memmove>
 80095e2:	e7ee      	b.n	80095c2 <composeCompoundCommand+0x32>

080095e4 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80095e4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095e8:	f100 0308 	add.w	r3, r0, #8
 80095ec:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095ee:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095f2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095f4:	2300      	movs	r3, #0
 80095f6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095f8:	4770      	bx	lr

080095fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095fe:	4770      	bx	lr

08009600 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009600:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009602:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8009604:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009606:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009608:	689a      	ldr	r2, [r3, #8]
 800960a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800960c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800960e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009610:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009612:	3301      	adds	r3, #1
 8009614:	6003      	str	r3, [r0, #0]
}
 8009616:	4770      	bx	lr

08009618 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009618:	680a      	ldr	r2, [r1, #0]
{
 800961a:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800961c:	1c53      	adds	r3, r2, #1
 800961e:	d10a      	bne.n	8009636 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009620:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009626:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009628:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800962a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800962c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800962e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009630:	3301      	adds	r3, #1
 8009632:	6003      	str	r3, [r0, #0]
}
 8009634:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009636:	f100 0308 	add.w	r3, r0, #8
 800963a:	685c      	ldr	r4, [r3, #4]
 800963c:	6825      	ldr	r5, [r4, #0]
 800963e:	4295      	cmp	r5, r2
 8009640:	d8ef      	bhi.n	8009622 <vListInsert+0xa>
 8009642:	4623      	mov	r3, r4
 8009644:	e7f9      	b.n	800963a <vListInsert+0x22>

08009646 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009646:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009648:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800964c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800964e:	6882      	ldr	r2, [r0, #8]
 8009650:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009652:	6859      	ldr	r1, [r3, #4]
 8009654:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009656:	bf08      	it	eq
 8009658:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800965a:	2200      	movs	r2, #0
 800965c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	3a01      	subs	r2, #1
 8009662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009664:	6818      	ldr	r0, [r3, #0]
}
 8009666:	4770      	bx	lr

08009668 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8009668:	2300      	movs	r3, #0
{
 800966a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800966c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800966e:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <prvTaskExitError+0x3c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3301      	adds	r3, #1
 8009674:	d008      	beq.n	8009688 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	e7fe      	b.n	8009686 <prvTaskExitError+0x1e>
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009698:	9b01      	ldr	r3, [sp, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d0fc      	beq.n	8009698 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800969e:	b002      	add	sp, #8
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	20000190 	.word	0x20000190

080096a8 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80096a8:	4806      	ldr	r0, [pc, #24]	; (80096c4 <prvPortStartFirstTask+0x1c>)
 80096aa:	6800      	ldr	r0, [r0, #0]
 80096ac:	6800      	ldr	r0, [r0, #0]
 80096ae:	f380 8808 	msr	MSP, r0
 80096b2:	b662      	cpsie	i
 80096b4:	b661      	cpsie	f
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	df00      	svc	0
 80096c0:	bf00      	nop
 80096c2:	0000      	.short	0x0000
 80096c4:	e000ed08 	.word	0xe000ed08

080096c8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096cc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096d0:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096d2:	f021 0101 	bic.w	r1, r1, #1
 80096d6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096da:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096de:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80096e2:	3840      	subs	r0, #64	; 0x40
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	08009669 	.word	0x08009669
 80096ec:	00000000 	.word	0x00000000

080096f0 <vPortSVCHandler>:
	__asm volatile (
 80096f0:	4b07      	ldr	r3, [pc, #28]	; (8009710 <pxCurrentTCBConst2>)
 80096f2:	6819      	ldr	r1, [r3, #0]
 80096f4:	6808      	ldr	r0, [r1, #0]
 80096f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80096fa:	f380 8809 	msr	PSP, r0
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f04f 0000 	mov.w	r0, #0
 8009706:	f380 8811 	msr	BASEPRI, r0
 800970a:	f04e 0e0d 	orr.w	lr, lr, #13
 800970e:	4770      	bx	lr

08009710 <pxCurrentTCBConst2>:
 8009710:	200005b4 	.word	0x200005b4

08009714 <vPortEnterCritical>:
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009724:	4a0a      	ldr	r2, [pc, #40]	; (8009750 <vPortEnterCritical+0x3c>)
 8009726:	6813      	ldr	r3, [r2, #0]
 8009728:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800972a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800972c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800972e:	d10d      	bne.n	800974c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009730:	4b08      	ldr	r3, [pc, #32]	; (8009754 <vPortEnterCritical+0x40>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009738:	d008      	beq.n	800974c <vPortEnterCritical+0x38>
 800973a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	e7fe      	b.n	800974a <vPortEnterCritical+0x36>
	}
}
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20000190 	.word	0x20000190
 8009754:	e000ed04 	.word	0xe000ed04

08009758 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009758:	4a08      	ldr	r2, [pc, #32]	; (800977c <vPortExitCritical+0x24>)
 800975a:	6813      	ldr	r3, [r2, #0]
 800975c:	b943      	cbnz	r3, 8009770 <vPortExitCritical+0x18>
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	e7fe      	b.n	800976e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009770:	3b01      	subs	r3, #1
 8009772:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009774:	b90b      	cbnz	r3, 800977a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009776:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800977a:	4770      	bx	lr
 800977c:	20000190 	.word	0x20000190

08009780 <xPortPendSVHandler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler( void )
{
	__asm volatile
 8009780:	f3ef 8009 	mrs	r0, PSP
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <pxCurrentTCBConst>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009790:	6010      	str	r0, [r2, #0]
 8009792:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009796:	f04f 0050 	mov.w	r0, #80	; 0x50
 800979a:	f380 8811 	msr	BASEPRI, r0
 800979e:	f000 fe2f 	bl	800a400 <vTaskSwitchContext>
 80097a2:	f04f 0000 	mov.w	r0, #0
 80097a6:	f380 8811 	msr	BASEPRI, r0
 80097aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80097ae:	6819      	ldr	r1, [r3, #0]
 80097b0:	6808      	ldr	r0, [r1, #0]
 80097b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80097b6:	f380 8809 	msr	PSP, r0
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	4770      	bx	lr

080097c0 <pxCurrentTCBConst>:
 80097c0:	200005b4 	.word	0x200005b4

080097c4 <xPortSysTickHandler>:
}

/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097c4:	b508      	push	{r3, lr}
	__asm volatile
 80097c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ca:	f383 8811 	msr	BASEPRI, r3
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097d6:	f000 fce7 	bl	800a1a8 <xTaskIncrementTick>
 80097da:	b118      	cbz	r0, 80097e4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e0:	4b02      	ldr	r3, [pc, #8]	; (80097ec <xPortSysTickHandler+0x28>)
 80097e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80097e4:	2300      	movs	r3, #0
 80097e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80097ea:	bd08      	pop	{r3, pc}
 80097ec:	e000ed04 	.word	0xe000ed04

080097f0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097f0:	2200      	movs	r2, #0
 80097f2:	4b05      	ldr	r3, [pc, #20]	; (8009808 <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097f4:	4905      	ldr	r1, [pc, #20]	; (800980c <vPortSetupTimerInterrupt+0x1c>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097f6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097f8:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097fa:	4a05      	ldr	r2, [pc, #20]	; (8009810 <vPortSetupTimerInterrupt+0x20>)
 80097fc:	4905      	ldr	r1, [pc, #20]	; (8009814 <vPortSetupTimerInterrupt+0x24>)
 80097fe:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009800:	2207      	movs	r2, #7
 8009802:	601a      	str	r2, [r3, #0]
}
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	e000e010 	.word	0xe000e010
 800980c:	e000e018 	.word	0xe000e018
 8009810:	e000e014 	.word	0xe000e014
 8009814:	0001193f 	.word	0x0001193f

08009818 <xPortStartScheduler>:
{
 8009818:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800981a:	4b27      	ldr	r3, [pc, #156]	; (80098b8 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800981c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800981e:	781a      	ldrb	r2, [r3, #0]
 8009820:	b2d2      	uxtb	r2, r2
 8009822:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009824:	22ff      	movs	r2, #255	; 0xff
 8009826:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009828:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800982a:	4a24      	ldr	r2, [pc, #144]	; (80098bc <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800982c:	b2db      	uxtb	r3, r3
 800982e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009832:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009836:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800983a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800983c:	2207      	movs	r2, #7
 800983e:	4b20      	ldr	r3, [pc, #128]	; (80098c0 <xPortStartScheduler+0xa8>)
 8009840:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009842:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009846:	1e54      	subs	r4, r2, #1
 8009848:	0600      	lsls	r0, r0, #24
 800984a:	d40d      	bmi.n	8009868 <xPortStartScheduler+0x50>
 800984c:	b101      	cbz	r1, 8009850 <xPortStartScheduler+0x38>
 800984e:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	2a03      	cmp	r2, #3
 8009854:	d011      	beq.n	800987a <xPortStartScheduler+0x62>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	e7fe      	b.n	8009866 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009868:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800986c:	2101      	movs	r1, #1
 800986e:	0052      	lsls	r2, r2, #1
 8009870:	b2d2      	uxtb	r2, r2
 8009872:	f88d 2003 	strb.w	r2, [sp, #3]
 8009876:	4622      	mov	r2, r4
 8009878:	e7e3      	b.n	8009842 <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 800987a:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800987c:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800987e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009882:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009884:	9b01      	ldr	r3, [sp, #4]
 8009886:	4a0c      	ldr	r2, [pc, #48]	; (80098b8 <xPortStartScheduler+0xa0>)
 8009888:	b2db      	uxtb	r3, r3
 800988a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800988c:	4b0d      	ldr	r3, [pc, #52]	; (80098c4 <xPortStartScheduler+0xac>)
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800989c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800989e:	f7ff ffa7 	bl	80097f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80098a2:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <xPortStartScheduler+0xb0>)
 80098a4:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80098a6:	f7ff feff 	bl	80096a8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80098aa:	f000 fda9 	bl	800a400 <vTaskSwitchContext>
	prvTaskExitError();
 80098ae:	f7ff fedb 	bl	8009668 <prvTaskExitError>
}
 80098b2:	4620      	mov	r0, r4
 80098b4:	b002      	add	sp, #8
 80098b6:	bd10      	pop	{r4, pc}
 80098b8:	e000e400 	.word	0xe000e400
 80098bc:	200005ad 	.word	0x200005ad
 80098c0:	200005b0 	.word	0x200005b0
 80098c4:	e000ed20 	.word	0xe000ed20
 80098c8:	20000190 	.word	0x20000190

080098cc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098cc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098d0:	2b0f      	cmp	r3, #15
 80098d2:	d90e      	bls.n	80098f2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098d4:	4a10      	ldr	r2, [pc, #64]	; (8009918 <vPortValidateInterruptPriority+0x4c>)
 80098d6:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098d8:	4a10      	ldr	r2, [pc, #64]	; (800991c <vPortValidateInterruptPriority+0x50>)
 80098da:	7812      	ldrb	r2, [r2, #0]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d908      	bls.n	80098f2 <vPortValidateInterruptPriority+0x26>
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	e7fe      	b.n	80098f0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098f2:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <vPortValidateInterruptPriority+0x54>)
 80098f4:	4a0b      	ldr	r2, [pc, #44]	; (8009924 <vPortValidateInterruptPriority+0x58>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6812      	ldr	r2, [r2, #0]
 80098fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098fe:	4293      	cmp	r3, r2
 8009900:	d908      	bls.n	8009914 <vPortValidateInterruptPriority+0x48>
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	e7fe      	b.n	8009912 <vPortValidateInterruptPriority+0x46>
	}
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	e000e3f0 	.word	0xe000e3f0
 800991c:	200005ad 	.word	0x200005ad
 8009920:	e000ed0c 	.word	0xe000ed0c
 8009924:	200005b0 	.word	0x200005b0

08009928 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009928:	b510      	push	{r4, lr}
 800992a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800992c:	f7ff fef2 	bl	8009714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009930:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009932:	f7ff ff11 	bl	8009758 <vPortExitCritical>

	return xReturn;
}
 8009936:	fab4 f084 	clz	r0, r4
 800993a:	0940      	lsrs	r0, r0, #5
 800993c:	bd10      	pop	{r4, pc}

0800993e <prvCopyDataToQueue>:
{
 800993e:	b570      	push	{r4, r5, r6, lr}
 8009940:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009942:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8009944:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009946:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009948:	b942      	cbnz	r2, 800995c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800994a:	6805      	ldr	r5, [r0, #0]
 800994c:	b99d      	cbnz	r5, 8009976 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800994e:	6840      	ldr	r0, [r0, #4]
 8009950:	f000 feb0 	bl	800a6b4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8009954:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009956:	3601      	adds	r6, #1
 8009958:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800995a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800995c:	b96d      	cbnz	r5, 800997a <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800995e:	6880      	ldr	r0, [r0, #8]
 8009960:	f000 ffaa 	bl	800a8b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009964:	68a3      	ldr	r3, [r4, #8]
 8009966:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009968:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800996a:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800996c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800996e:	4293      	cmp	r3, r2
 8009970:	d301      	bcc.n	8009976 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8009976:	2000      	movs	r0, #0
 8009978:	e7ed      	b.n	8009956 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800997a:	68c0      	ldr	r0, [r0, #12]
 800997c:	f000 ff9c 	bl	800a8b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009980:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009982:	68e2      	ldr	r2, [r4, #12]
 8009984:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009986:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009988:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800998a:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800998c:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800998e:	bf3e      	ittt	cc
 8009990:	6862      	ldrcc	r2, [r4, #4]
 8009992:	189b      	addcc	r3, r3, r2
 8009994:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009996:	2d02      	cmp	r5, #2
 8009998:	d1ed      	bne.n	8009976 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800999a:	b10e      	cbz	r6, 80099a0 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800999c:	3e01      	subs	r6, #1
 800999e:	e7ea      	b.n	8009976 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80099a0:	4630      	mov	r0, r6
 80099a2:	e7d8      	b.n	8009956 <prvCopyDataToQueue+0x18>

080099a4 <prvUnlockQueue>:
{
 80099a4:	b570      	push	{r4, r5, r6, lr}
 80099a6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80099a8:	f7ff feb4 	bl	8009714 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80099ac:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099b0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80099b4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099b6:	2d00      	cmp	r5, #0
 80099b8:	dc14      	bgt.n	80099e4 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80099ba:	23ff      	movs	r3, #255	; 0xff
 80099bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80099c0:	f7ff feca 	bl	8009758 <vPortExitCritical>
	taskENTER_CRITICAL();
 80099c4:	f7ff fea6 	bl	8009714 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80099c8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099cc:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80099d0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099d2:	2d00      	cmp	r5, #0
 80099d4:	dc12      	bgt.n	80099fc <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80099d6:	23ff      	movs	r3, #255	; 0xff
 80099d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80099dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80099e0:	f7ff beba 	b.w	8009758 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0e7      	beq.n	80099ba <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099ea:	4630      	mov	r0, r6
 80099ec:	f000 fd72 	bl	800a4d4 <xTaskRemoveFromEventList>
 80099f0:	b108      	cbz	r0, 80099f6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80099f2:	f000 fdf5 	bl	800a5e0 <vTaskMissedYield>
 80099f6:	3d01      	subs	r5, #1
 80099f8:	b26d      	sxtb	r5, r5
 80099fa:	e7dc      	b.n	80099b6 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099fc:	6923      	ldr	r3, [r4, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0e9      	beq.n	80099d6 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a02:	4630      	mov	r0, r6
 8009a04:	f000 fd66 	bl	800a4d4 <xTaskRemoveFromEventList>
 8009a08:	b108      	cbz	r0, 8009a0e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8009a0a:	f000 fde9 	bl	800a5e0 <vTaskMissedYield>
 8009a0e:	3d01      	subs	r5, #1
 8009a10:	b26d      	sxtb	r5, r5
 8009a12:	e7de      	b.n	80099d2 <prvUnlockQueue+0x2e>

08009a14 <xQueueGenericReset>:
{
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009a18:	4604      	mov	r4, r0
 8009a1a:	b940      	cbnz	r0, 8009a2e <xQueueGenericReset+0x1a>
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	e7fe      	b.n	8009a2c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8009a2e:	f7ff fe71 	bl	8009714 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009a32:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8009a36:	4343      	muls	r3, r0
 8009a38:	6822      	ldr	r2, [r4, #0]
 8009a3a:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009a3c:	1a1b      	subs	r3, r3, r0
 8009a3e:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009a40:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009a42:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a44:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8009a46:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a48:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a4a:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009a54:	b995      	cbnz	r5, 8009a7c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a56:	6923      	ldr	r3, [r4, #16]
 8009a58:	b163      	cbz	r3, 8009a74 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a5a:	f104 0010 	add.w	r0, r4, #16
 8009a5e:	f000 fd39 	bl	800a4d4 <xTaskRemoveFromEventList>
 8009a62:	b138      	cbz	r0, 8009a74 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8009a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a68:	4b09      	ldr	r3, [pc, #36]	; (8009a90 <xQueueGenericReset+0x7c>)
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8009a74:	f7ff fe70 	bl	8009758 <vPortExitCritical>
}
 8009a78:	2001      	movs	r0, #1
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a7c:	f104 0010 	add.w	r0, r4, #16
 8009a80:	f7ff fdb0 	bl	80095e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009a88:	f7ff fdac 	bl	80095e4 <vListInitialise>
 8009a8c:	e7f2      	b.n	8009a74 <xQueueGenericReset+0x60>
 8009a8e:	bf00      	nop
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <xQueueGenericCreateStatic>:
	{
 8009a94:	b513      	push	{r0, r1, r4, lr}
 8009a96:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a98:	b940      	cbnz	r0, 8009aac <xQueueGenericCreateStatic+0x18>
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	e7fe      	b.n	8009aaa <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8009aac:	b943      	cbnz	r3, 8009ac0 <xQueueGenericCreateStatic+0x2c>
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	e7fe      	b.n	8009abe <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ac0:	b14a      	cbz	r2, 8009ad6 <xQueueGenericCreateStatic+0x42>
 8009ac2:	b991      	cbnz	r1, 8009aea <xQueueGenericCreateStatic+0x56>
 8009ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	e7fe      	b.n	8009ad4 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ad6:	b141      	cbz	r1, 8009aea <xQueueGenericCreateStatic+0x56>
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	e7fe      	b.n	8009ae8 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009aea:	2348      	movs	r3, #72	; 0x48
 8009aec:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009aee:	9b01      	ldr	r3, [sp, #4]
 8009af0:	2b48      	cmp	r3, #72	; 0x48
 8009af2:	d008      	beq.n	8009b06 <xQueueGenericCreateStatic+0x72>
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	e7fe      	b.n	8009b04 <xQueueGenericCreateStatic+0x70>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b06:	2900      	cmp	r1, #0
 8009b08:	bf08      	it	eq
 8009b0a:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8009b0c:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b10:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b12:	2101      	movs	r1, #1
 8009b14:	4620      	mov	r0, r4
 8009b16:	f7ff ff7d 	bl	8009a14 <xQueueGenericReset>
	}
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	b002      	add	sp, #8
 8009b1e:	bd10      	pop	{r4, pc}

08009b20 <xQueueGenericSend>:
{
 8009b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b24:	4688      	mov	r8, r1
 8009b26:	9201      	str	r2, [sp, #4]
 8009b28:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	b940      	cbnz	r0, 8009b40 <xQueueGenericSend+0x20>
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	e7fe      	b.n	8009b3e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b40:	b951      	cbnz	r1, 8009b58 <xQueueGenericSend+0x38>
 8009b42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009b44:	b143      	cbz	r3, 8009b58 <xQueueGenericSend+0x38>
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	e7fe      	b.n	8009b56 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b58:	2f02      	cmp	r7, #2
 8009b5a:	d10b      	bne.n	8009b74 <xQueueGenericSend+0x54>
 8009b5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d008      	beq.n	8009b74 <xQueueGenericSend+0x54>
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	e7fe      	b.n	8009b72 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b74:	f000 fd3a 	bl	800a5ec <xTaskGetSchedulerState>
 8009b78:	b950      	cbnz	r0, 8009b90 <xQueueGenericSend+0x70>
 8009b7a:	9e01      	ldr	r6, [sp, #4]
 8009b7c:	b14e      	cbz	r6, 8009b92 <xQueueGenericSend+0x72>
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	e7fe      	b.n	8009b8e <xQueueGenericSend+0x6e>
 8009b90:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8009b92:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8009b96:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8009c80 <xQueueGenericSend+0x160>
 8009b9a:	e037      	b.n	8009c0c <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b9c:	9d01      	ldr	r5, [sp, #4]
 8009b9e:	b91d      	cbnz	r5, 8009ba8 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8009ba0:	f7ff fdda 	bl	8009758 <vPortExitCritical>
			return errQUEUE_FULL;
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	e050      	b.n	8009c4a <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 8009ba8:	b916      	cbnz	r6, 8009bb0 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009baa:	a802      	add	r0, sp, #8
 8009bac:	f000 fcd4 	bl	800a558 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009bb0:	f7ff fdd2 	bl	8009758 <vPortExitCritical>
		vTaskSuspendAll();
 8009bb4:	f000 faf0 	bl	800a198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bb8:	f7ff fdac 	bl	8009714 <vPortEnterCritical>
 8009bbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009bc0:	2bff      	cmp	r3, #255	; 0xff
 8009bc2:	bf08      	it	eq
 8009bc4:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8009bc8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009bcc:	2bff      	cmp	r3, #255	; 0xff
 8009bce:	bf08      	it	eq
 8009bd0:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8009bd4:	f7ff fdc0 	bl	8009758 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bd8:	a901      	add	r1, sp, #4
 8009bda:	a802      	add	r0, sp, #8
 8009bdc:	f000 fcc8 	bl	800a570 <xTaskCheckForTimeOut>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d146      	bne.n	8009c72 <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009be4:	f7ff fd96 	bl	8009714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009be8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009bea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d12f      	bne.n	8009c50 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009bf0:	f7ff fdb2 	bl	8009758 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009bf4:	9901      	ldr	r1, [sp, #4]
 8009bf6:	f104 0010 	add.w	r0, r4, #16
 8009bfa:	f000 fc53 	bl	800a4a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f7ff fed0 	bl	80099a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c04:	f000 fb62 	bl	800a2cc <xTaskResumeAll>
 8009c08:	b350      	cbz	r0, 8009c60 <xQueueGenericSend+0x140>
 8009c0a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8009c0c:	f7ff fd82 	bl	8009714 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009c12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d301      	bcc.n	8009c1c <xQueueGenericSend+0xfc>
 8009c18:	2f02      	cmp	r7, #2
 8009c1a:	d1bf      	bne.n	8009b9c <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c1c:	463a      	mov	r2, r7
 8009c1e:	4641      	mov	r1, r8
 8009c20:	4620      	mov	r0, r4
 8009c22:	f7ff fe8c 	bl	800993e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c28:	b11b      	cbz	r3, 8009c32 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c2e:	f000 fc51 	bl	800a4d4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8009c32:	b138      	cbz	r0, 8009c44 <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 8009c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c38:	4b11      	ldr	r3, [pc, #68]	; (8009c80 <xQueueGenericSend+0x160>)
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009c44:	f7ff fd88 	bl	8009758 <vPortExitCritical>
				return pdPASS;
 8009c48:	2001      	movs	r0, #1
}
 8009c4a:	b004      	add	sp, #16
 8009c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8009c50:	f7ff fd82 	bl	8009758 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8009c54:	4620      	mov	r0, r4
 8009c56:	f7ff fea5 	bl	80099a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c5a:	f000 fb37 	bl	800a2cc <xTaskResumeAll>
 8009c5e:	e7d4      	b.n	8009c0a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8009c60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c64:	f8ca 3000 	str.w	r3, [sl]
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	e7cb      	b.n	8009c0a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8009c72:	4620      	mov	r0, r4
 8009c74:	f7ff fe96 	bl	80099a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c78:	f000 fb28 	bl	800a2cc <xTaskResumeAll>
 8009c7c:	e792      	b.n	8009ba4 <xQueueGenericSend+0x84>
 8009c7e:	bf00      	nop
 8009c80:	e000ed04 	.word	0xe000ed04

08009c84 <xQueueCreateMutexStatic>:
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009c84:	2200      	movs	r2, #0
	{
 8009c86:	b513      	push	{r0, r1, r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009c88:	460b      	mov	r3, r1
 8009c8a:	9000      	str	r0, [sp, #0]
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	2001      	movs	r0, #1
 8009c90:	f7ff ff00 	bl	8009a94 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8009c94:	4604      	mov	r4, r0
 8009c96:	b138      	cbz	r0, 8009ca8 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->pxMutexHolder = NULL;
 8009c98:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009c9a:	e9c0 3300 	strd	r3, r3, [r0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009c9e:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	f7ff ff3c 	bl	8009b20 <xQueueGenericSend>
	}
 8009ca8:	4620      	mov	r0, r4
 8009caa:	b002      	add	sp, #8
 8009cac:	bd10      	pop	{r4, pc}

08009cae <xQueueGiveFromISR>:
{
 8009cae:	b570      	push	{r4, r5, r6, lr}
 8009cb0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	b940      	cbnz	r0, 8009cc8 <xQueueGiveFromISR+0x1a>
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	e7fe      	b.n	8009cc6 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8009cc8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009cca:	b143      	cbz	r3, 8009cde <xQueueGiveFromISR+0x30>
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	e7fe      	b.n	8009cdc <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009cde:	6803      	ldr	r3, [r0, #0]
 8009ce0:	b953      	cbnz	r3, 8009cf8 <xQueueGiveFromISR+0x4a>
 8009ce2:	6843      	ldr	r3, [r0, #4]
 8009ce4:	b143      	cbz	r3, 8009cf8 <xQueueGiveFromISR+0x4a>
 8009ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	e7fe      	b.n	8009cf6 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cf8:	f7ff fde8 	bl	80098cc <vPortValidateInterruptPriority>
	__asm volatile
 8009cfc:	f3ef 8611 	mrs	r6, BASEPRI
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009d12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d91c      	bls.n	8009d52 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d18:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d1c:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d1e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d20:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	d110      	bne.n	8009d48 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d28:	b90b      	cbnz	r3, 8009d2e <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8009d2a:	2001      	movs	r0, #1
 8009d2c:	e009      	b.n	8009d42 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d32:	f000 fbcf 	bl	800a4d4 <xTaskRemoveFromEventList>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d0f7      	beq.n	8009d2a <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8009d3a:	2d00      	cmp	r5, #0
 8009d3c:	d0f5      	beq.n	8009d2a <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d3e:	2001      	movs	r0, #1
 8009d40:	6028      	str	r0, [r5, #0]
	__asm volatile
 8009d42:	f386 8811 	msr	BASEPRI, r6
}
 8009d46:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d48:	3301      	adds	r3, #1
 8009d4a:	b25b      	sxtb	r3, r3
 8009d4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d50:	e7eb      	b.n	8009d2a <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8009d52:	2000      	movs	r0, #0
 8009d54:	e7f5      	b.n	8009d42 <xQueueGiveFromISR+0x94>
	...

08009d58 <xQueueSemaphoreTake>:
{
 8009d58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8009d5c:	4604      	mov	r4, r0
{
 8009d5e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009d60:	b940      	cbnz	r0, 8009d74 <xQueueSemaphoreTake+0x1c>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	e7fe      	b.n	8009d72 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d74:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8009d76:	b145      	cbz	r5, 8009d8a <xQueueSemaphoreTake+0x32>
 8009d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	e7fe      	b.n	8009d88 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d8a:	f000 fc2f 	bl	800a5ec <xTaskGetSchedulerState>
 8009d8e:	b950      	cbnz	r0, 8009da6 <xQueueSemaphoreTake+0x4e>
 8009d90:	9d01      	ldr	r5, [sp, #4]
 8009d92:	b145      	cbz	r5, 8009da6 <xQueueSemaphoreTake+0x4e>
 8009d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	e7fe      	b.n	8009da4 <xQueueSemaphoreTake+0x4c>
 8009da6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8009da8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8009daa:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8009ed8 <xQueueSemaphoreTake+0x180>
 8009dae:	e04f      	b.n	8009e50 <xQueueSemaphoreTake+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009db0:	9b01      	ldr	r3, [sp, #4]
 8009db2:	b963      	cbnz	r3, 8009dce <xQueueSemaphoreTake+0x76>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009db4:	b145      	cbz	r5, 8009dc8 <xQueueSemaphoreTake+0x70>
 8009db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	e7fe      	b.n	8009dc6 <xQueueSemaphoreTake+0x6e>
					taskEXIT_CRITICAL();
 8009dc8:	f7ff fcc6 	bl	8009758 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009dcc:	e05e      	b.n	8009e8c <xQueueSemaphoreTake+0x134>
				else if( xEntryTimeSet == pdFALSE )
 8009dce:	b916      	cbnz	r6, 8009dd6 <xQueueSemaphoreTake+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dd0:	a802      	add	r0, sp, #8
 8009dd2:	f000 fbc1 	bl	800a558 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009dd6:	f7ff fcbf 	bl	8009758 <vPortExitCritical>
		vTaskSuspendAll();
 8009dda:	f000 f9dd 	bl	800a198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dde:	f7ff fc99 	bl	8009714 <vPortEnterCritical>
 8009de2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009de6:	2bff      	cmp	r3, #255	; 0xff
 8009de8:	bf08      	it	eq
 8009dea:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8009dee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009df2:	2bff      	cmp	r3, #255	; 0xff
 8009df4:	bf08      	it	eq
 8009df6:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8009dfa:	f7ff fcad 	bl	8009758 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dfe:	a901      	add	r1, sp, #4
 8009e00:	a802      	add	r0, sp, #8
 8009e02:	f000 fbb5 	bl	800a570 <xTaskCheckForTimeOut>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d14a      	bne.n	8009ea0 <xQueueSemaphoreTake+0x148>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f7ff fd8c 	bl	8009928 <prvIsQueueEmpty>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d03f      	beq.n	8009e94 <xQueueSemaphoreTake+0x13c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	b93b      	cbnz	r3, 8009e28 <xQueueSemaphoreTake+0xd0>
						taskENTER_CRITICAL();
 8009e18:	f7ff fc7c 	bl	8009714 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009e1c:	6860      	ldr	r0, [r4, #4]
 8009e1e:	f000 fbf5 	bl	800a60c <xTaskPriorityInherit>
 8009e22:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8009e24:	f7ff fc98 	bl	8009758 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e28:	9901      	ldr	r1, [sp, #4]
 8009e2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e2e:	f000 fb39 	bl	800a4a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e32:	4620      	mov	r0, r4
 8009e34:	f7ff fdb6 	bl	80099a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e38:	f000 fa48 	bl	800a2cc <xTaskResumeAll>
 8009e3c:	b938      	cbnz	r0, 8009e4e <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 8009e3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e42:	f8c8 3000 	str.w	r3, [r8]
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8009e50:	f7ff fc60 	bl	8009714 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009e54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d0aa      	beq.n	8009db0 <xQueueSemaphoreTake+0x58>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	b913      	cbnz	r3, 8009e68 <xQueueSemaphoreTake+0x110>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009e62:	f000 fccf 	bl	800a804 <pvTaskIncrementMutexHeldCount>
 8009e66:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e68:	6923      	ldr	r3, [r4, #16]
 8009e6a:	b163      	cbz	r3, 8009e86 <xQueueSemaphoreTake+0x12e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e6c:	f104 0010 	add.w	r0, r4, #16
 8009e70:	f000 fb30 	bl	800a4d4 <xTaskRemoveFromEventList>
 8009e74:	b138      	cbz	r0, 8009e86 <xQueueSemaphoreTake+0x12e>
						queueYIELD_IF_USING_PREEMPTION();
 8009e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e7a:	4b17      	ldr	r3, [pc, #92]	; (8009ed8 <xQueueSemaphoreTake+0x180>)
 8009e7c:	601a      	str	r2, [r3, #0]
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009e86:	f7ff fc67 	bl	8009758 <vPortExitCritical>
				return pdPASS;
 8009e8a:	2501      	movs	r5, #1
}
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	b004      	add	sp, #16
 8009e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8009e94:	4620      	mov	r0, r4
 8009e96:	f7ff fd85 	bl	80099a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e9a:	f000 fa17 	bl	800a2cc <xTaskResumeAll>
 8009e9e:	e7d6      	b.n	8009e4e <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f7ff fd7f 	bl	80099a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ea6:	f000 fa11 	bl	800a2cc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f7ff fd3c 	bl	8009928 <prvIsQueueEmpty>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d0cc      	beq.n	8009e4e <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 8009eb4:	2d00      	cmp	r5, #0
 8009eb6:	d0e9      	beq.n	8009e8c <xQueueSemaphoreTake+0x134>
						taskENTER_CRITICAL();
 8009eb8:	f7ff fc2c 	bl	8009714 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009ebc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009ebe:	b119      	cbz	r1, 8009ec8 <xQueueSemaphoreTake+0x170>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009ec0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009ec2:	6819      	ldr	r1, [r3, #0]
 8009ec4:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009ec8:	6860      	ldr	r0, [r4, #4]
 8009eca:	f000 fc43 	bl	800a754 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8009ece:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8009ed0:	f7ff fc42 	bl	8009758 <vPortExitCritical>
 8009ed4:	e7da      	b.n	8009e8c <xQueueSemaphoreTake+0x134>
 8009ed6:	bf00      	nop
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <prvIdleTask>:
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8009edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ee0:	4905      	ldr	r1, [pc, #20]	; (8009ef8 <prvIdleTask+0x1c>)
				taskYIELD();
 8009ee2:	4b06      	ldr	r3, [pc, #24]	; (8009efc <prvIdleTask+0x20>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ee4:	6808      	ldr	r0, [r1, #0]
 8009ee6:	2801      	cmp	r0, #1
 8009ee8:	d9fc      	bls.n	8009ee4 <prvIdleTask+0x8>
				taskYIELD();
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	e7f6      	b.n	8009ee4 <prvIdleTask+0x8>
 8009ef6:	bf00      	nop
 8009ef8:	200005c0 	.word	0x200005c0
 8009efc:	e000ed04 	.word	0xe000ed04

08009f00 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f00:	4a06      	ldr	r2, [pc, #24]	; (8009f1c <prvResetNextTaskUnblockTime+0x1c>)
 8009f02:	6813      	ldr	r3, [r2, #0]
 8009f04:	6819      	ldr	r1, [r3, #0]
 8009f06:	4b06      	ldr	r3, [pc, #24]	; (8009f20 <prvResetNextTaskUnblockTime+0x20>)
 8009f08:	b919      	cbnz	r1, 8009f12 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f0a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f0e:	601a      	str	r2, [r3, #0]
	}
}
 8009f10:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009f12:	6812      	ldr	r2, [r2, #0]
 8009f14:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f16:	68d2      	ldr	r2, [r2, #12]
 8009f18:	6852      	ldr	r2, [r2, #4]
 8009f1a:	e7f8      	b.n	8009f0e <prvResetNextTaskUnblockTime+0xe>
 8009f1c:	200005b8 	.word	0x200005b8
 8009f20:	200007d0 	.word	0x200007d0

08009f24 <prvAddCurrentTaskToDelayedList.isra.2>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8009f24:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f26:	4b15      	ldr	r3, [pc, #84]	; (8009f7c <prvAddCurrentTaskToDelayedList.isra.2+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f28:	4e15      	ldr	r6, [pc, #84]	; (8009f80 <prvAddCurrentTaskToDelayedList.isra.2+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8009f2a:	681c      	ldr	r4, [r3, #0]
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8009f2c:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f2e:	6830      	ldr	r0, [r6, #0]
 8009f30:	3004      	adds	r0, #4
 8009f32:	f7ff fb88 	bl	8009646 <uxListRemove>
 8009f36:	4633      	mov	r3, r6
 8009f38:	b940      	cbnz	r0, 8009f4c <prvAddCurrentTaskToDelayedList.isra.2+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009f3a:	6831      	ldr	r1, [r6, #0]
 8009f3c:	4811      	ldr	r0, [pc, #68]	; (8009f84 <prvAddCurrentTaskToDelayedList.isra.2+0x60>)
 8009f3e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8009f40:	2101      	movs	r1, #1
 8009f42:	6802      	ldr	r2, [r0, #0]
 8009f44:	40b1      	lsls	r1, r6
 8009f46:	ea22 0201 	bic.w	r2, r2, r1
 8009f4a:	6002      	str	r2, [r0, #0]
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	1964      	adds	r4, r4, r5
 8009f50:	6054      	str	r4, [r2, #4]

		if( xTimeToWake < xConstTickCount )
 8009f52:	d307      	bcc.n	8009f64 <prvAddCurrentTaskToDelayedList.isra.2+0x40>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f58:	4a0b      	ldr	r2, [pc, #44]	; (8009f88 <prvAddCurrentTaskToDelayedList.isra.2+0x64>)
 8009f5a:	6810      	ldr	r0, [r2, #0]
 8009f5c:	6819      	ldr	r1, [r3, #0]
 8009f5e:	3104      	adds	r1, #4
 8009f60:	f7ff bb5a 	b.w	8009618 <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f64:	4a09      	ldr	r2, [pc, #36]	; (8009f8c <prvAddCurrentTaskToDelayedList.isra.2+0x68>)
 8009f66:	6810      	ldr	r0, [r2, #0]
 8009f68:	6819      	ldr	r1, [r3, #0]
 8009f6a:	3104      	adds	r1, #4
 8009f6c:	f7ff fb54 	bl	8009618 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <prvAddCurrentTaskToDelayedList.isra.2+0x6c>)
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	4294      	cmp	r4, r2
				xNextTaskUnblockTime = xTimeToWake;
 8009f76:	bf38      	it	cc
 8009f78:	601c      	strcc	r4, [r3, #0]
}
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	200007f0 	.word	0x200007f0
 8009f80:	200005b4 	.word	0x200005b4
 8009f84:	2000075c 	.word	0x2000075c
 8009f88:	200005bc 	.word	0x200005bc
 8009f8c:	200005b8 	.word	0x200005b8
 8009f90:	200007d0 	.word	0x200007d0

08009f94 <xTaskCreateStatic>:
	{
 8009f94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f98:	4606      	mov	r6, r0
 8009f9a:	e9dd 040b 	ldrd	r0, r4, [sp, #44]	; 0x2c
 8009f9e:	460f      	mov	r7, r1
 8009fa0:	4698      	mov	r8, r3
		configASSERT( puxStackBuffer != NULL );
 8009fa2:	b940      	cbnz	r0, 8009fb6 <xTaskCreateStatic+0x22>
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	e7fe      	b.n	8009fb4 <xTaskCreateStatic+0x20>
		configASSERT( pxTaskBuffer != NULL );
 8009fb6:	b944      	cbnz	r4, 8009fca <xTaskCreateStatic+0x36>
 8009fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	e7fe      	b.n	8009fc8 <xTaskCreateStatic+0x34>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009fca:	2348      	movs	r3, #72	; 0x48
 8009fcc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009fce:	9b01      	ldr	r3, [sp, #4]
 8009fd0:	2b48      	cmp	r3, #72	; 0x48
 8009fd2:	d008      	beq.n	8009fe6 <xTaskCreateStatic+0x52>
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	e7fe      	b.n	8009fe4 <xTaskCreateStatic+0x50>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009fe6:	0095      	lsls	r5, r2, #2
 8009fe8:	21a5      	movs	r1, #165	; 0xa5
 8009fea:	462a      	mov	r2, r5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009fec:	6320      	str	r0, [r4, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009fee:	f000 fc87 	bl	800a900 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009ff2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009ff4:	3d04      	subs	r5, #4
 8009ff6:	4415      	add	r5, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009ff8:	f025 0907 	bic.w	r9, r5, #7
 8009ffc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ffe:	f04f 0a00 	mov.w	sl, #0
 800a002:	2d06      	cmp	r5, #6
 800a004:	bf28      	it	cs
 800a006:	2506      	movcs	r5, #6
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a008:	783b      	ldrb	r3, [r7, #0]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a00a:	1d27      	adds	r7, r4, #4
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a00c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pxNewTCB->uxPriority = uxPriority;
 800a010:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800a012:	e9c4 5a0e 	strd	r5, sl, [r4, #56]	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a016:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a018:	f884 a035 	strb.w	sl, [r4, #53]	; 0x35
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a01c:	f7ff faed 	bl	80095fa <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a020:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a024:	f104 0018 	add.w	r0, r4, #24
 800a028:	f7ff fae7 	bl	80095fa <vListInitialiseItem>
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a02c:	4642      	mov	r2, r8
 800a02e:	4631      	mov	r1, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a030:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800a032:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a036:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a038:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a03a:	f884 a044 	strb.w	sl, [r4, #68]	; 0x44
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a03e:	4648      	mov	r0, r9
 800a040:	f7ff fb42 	bl	80096c8 <pxPortInitialiseStack>
 800a044:	6020      	str	r0, [r4, #0]
	taskENTER_CRITICAL();
 800a046:	f7ff fb65 	bl	8009714 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800a04a:	4b2d      	ldr	r3, [pc, #180]	; (800a100 <xTaskCreateStatic+0x16c>)
		if( pxCurrentTCB == NULL )
 800a04c:	4d2d      	ldr	r5, [pc, #180]	; (800a104 <xTaskCreateStatic+0x170>)
		uxCurrentNumberOfTasks++;
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800a128 <xTaskCreateStatic+0x194>
 800a054:	3201      	adds	r2, #1
 800a056:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800a058:	682e      	ldr	r6, [r5, #0]
 800a05a:	2e00      	cmp	r6, #0
 800a05c:	d144      	bne.n	800a0e8 <xTaskCreateStatic+0x154>
			pxCurrentTCB = pxNewTCB;
 800a05e:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d119      	bne.n	800a09a <xTaskCreateStatic+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a066:	f04f 0914 	mov.w	r9, #20
 800a06a:	fb09 8006 	mla	r0, r9, r6, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a06e:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a070:	f7ff fab8 	bl	80095e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a074:	2e07      	cmp	r6, #7
 800a076:	d1f8      	bne.n	800a06a <xTaskCreateStatic+0xd6>
	vListInitialise( &xDelayedTaskList1 );
 800a078:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800a12c <xTaskCreateStatic+0x198>
	vListInitialise( &xDelayedTaskList2 );
 800a07c:	4e22      	ldr	r6, [pc, #136]	; (800a108 <xTaskCreateStatic+0x174>)
	vListInitialise( &xDelayedTaskList1 );
 800a07e:	4648      	mov	r0, r9
 800a080:	f7ff fab0 	bl	80095e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a084:	4630      	mov	r0, r6
 800a086:	f7ff faad 	bl	80095e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a08a:	4820      	ldr	r0, [pc, #128]	; (800a10c <xTaskCreateStatic+0x178>)
 800a08c:	f7ff faaa 	bl	80095e4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800a090:	4b1f      	ldr	r3, [pc, #124]	; (800a110 <xTaskCreateStatic+0x17c>)
 800a092:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a096:	4b1f      	ldr	r3, [pc, #124]	; (800a114 <xTaskCreateStatic+0x180>)
 800a098:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 800a09a:	4a1f      	ldr	r2, [pc, #124]	; (800a118 <xTaskCreateStatic+0x184>)
		prvAddTaskToReadyList( pxNewTCB );
 800a09c:	491f      	ldr	r1, [pc, #124]	; (800a11c <xTaskCreateStatic+0x188>)
		uxTaskNumber++;
 800a09e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a0a0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a0aa:	4093      	lsls	r3, r2
 800a0ac:	4303      	orrs	r3, r0
 800a0ae:	2014      	movs	r0, #20
 800a0b0:	600b      	str	r3, [r1, #0]
 800a0b2:	fb00 8002 	mla	r0, r0, r2, r8
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	f7ff faa2 	bl	8009600 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a0bc:	f7ff fb4c 	bl	8009758 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a0c0:	4b17      	ldr	r3, [pc, #92]	; (800a120 <xTaskCreateStatic+0x18c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	b163      	cbz	r3, 800a0e0 <xTaskCreateStatic+0x14c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a0c6:	682b      	ldr	r3, [r5, #0]
 800a0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d207      	bcs.n	800a0e0 <xTaskCreateStatic+0x14c>
			taskYIELD_IF_USING_PREEMPTION();
 800a0d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d4:	4b13      	ldr	r3, [pc, #76]	; (800a124 <xTaskCreateStatic+0x190>)
 800a0d6:	601a      	str	r2, [r3, #0]
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	f3bf 8f6f 	isb	sy
	}
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	b002      	add	sp, #8
 800a0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if( xSchedulerRunning == pdFALSE )
 800a0e8:	4b0d      	ldr	r3, [pc, #52]	; (800a120 <xTaskCreateStatic+0x18c>)
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a0ee:	2a00      	cmp	r2, #0
 800a0f0:	d1d3      	bne.n	800a09a <xTaskCreateStatic+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a0f2:	682a      	ldr	r2, [r5, #0]
 800a0f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a0f6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800a0f8:	bf98      	it	ls
 800a0fa:	602c      	strls	r4, [r5, #0]
 800a0fc:	e7cd      	b.n	800a09a <xTaskCreateStatic+0x106>
 800a0fe:	bf00      	nop
 800a100:	2000064c 	.word	0x2000064c
 800a104:	200005b4 	.word	0x200005b4
 800a108:	20000774 	.word	0x20000774
 800a10c:	200007d8 	.word	0x200007d8
 800a110:	200005b8 	.word	0x200005b8
 800a114:	200005bc 	.word	0x200005bc
 800a118:	20000758 	.word	0x20000758
 800a11c:	2000075c 	.word	0x2000075c
 800a120:	200007ec 	.word	0x200007ec
 800a124:	e000ed04 	.word	0xe000ed04
 800a128:	200005c0 	.word	0x200005c0
 800a12c:	20000760 	.word	0x20000760

0800a130 <vTaskStartScheduler>:
{
 800a130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a132:	2400      	movs	r4, #0
 800a134:	4b11      	ldr	r3, [pc, #68]	; (800a17c <vTaskStartScheduler+0x4c>)
 800a136:	9400      	str	r4, [sp, #0]
 800a138:	9302      	str	r3, [sp, #8]
 800a13a:	4b11      	ldr	r3, [pc, #68]	; (800a180 <vTaskStartScheduler+0x50>)
 800a13c:	2240      	movs	r2, #64	; 0x40
 800a13e:	9301      	str	r3, [sp, #4]
 800a140:	4910      	ldr	r1, [pc, #64]	; (800a184 <vTaskStartScheduler+0x54>)
 800a142:	4623      	mov	r3, r4
 800a144:	4810      	ldr	r0, [pc, #64]	; (800a188 <vTaskStartScheduler+0x58>)
 800a146:	f7ff ff25 	bl	8009f94 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800a14a:	b1a8      	cbz	r0, 800a178 <vTaskStartScheduler+0x48>
 800a14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800a15c:	f04f 32ff 	mov.w	r2, #4294967295
 800a160:	4b0a      	ldr	r3, [pc, #40]	; (800a18c <vTaskStartScheduler+0x5c>)
 800a162:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a164:	2201      	movs	r2, #1
 800a166:	4b0a      	ldr	r3, [pc, #40]	; (800a190 <vTaskStartScheduler+0x60>)
 800a168:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a16a:	4b0a      	ldr	r3, [pc, #40]	; (800a194 <vTaskStartScheduler+0x64>)
 800a16c:	601c      	str	r4, [r3, #0]
}
 800a16e:	b004      	add	sp, #16
 800a170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800a174:	f7ff bb50 	b.w	8009818 <xPortStartScheduler>
}
 800a178:	b004      	add	sp, #16
 800a17a:	bd10      	pop	{r4, pc}
 800a17c:	20000788 	.word	0x20000788
 800a180:	20000650 	.word	0x20000650
 800a184:	0800cd23 	.word	0x0800cd23
 800a188:	08009edd 	.word	0x08009edd
 800a18c:	200007d0 	.word	0x200007d0
 800a190:	200007ec 	.word	0x200007ec
 800a194:	200007f0 	.word	0x200007f0

0800a198 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a198:	4a02      	ldr	r2, [pc, #8]	; (800a1a4 <vTaskSuspendAll+0xc>)
 800a19a:	6813      	ldr	r3, [r2, #0]
 800a19c:	3301      	adds	r3, #1
 800a19e:	6013      	str	r3, [r2, #0]
}
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20000754 	.word	0x20000754

0800a1a8 <xTaskIncrementTick>:
{
 800a1a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ac:	4b3c      	ldr	r3, [pc, #240]	; (800a2a0 <xTaskIncrementTick+0xf8>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d16e      	bne.n	800a292 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1b4:	4b3b      	ldr	r3, [pc, #236]	; (800a2a4 <xTaskIncrementTick+0xfc>)
 800a1b6:	681c      	ldr	r4, [r3, #0]
 800a1b8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800a1ba:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1bc:	b9bc      	cbnz	r4, 800a1ee <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a1be:	4b3a      	ldr	r3, [pc, #232]	; (800a2a8 <xTaskIncrementTick+0x100>)
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	6812      	ldr	r2, [r2, #0]
 800a1c4:	b142      	cbz	r2, 800a1d8 <xTaskIncrementTick+0x30>
 800a1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	e7fe      	b.n	800a1d6 <xTaskIncrementTick+0x2e>
 800a1d8:	4a34      	ldr	r2, [pc, #208]	; (800a2ac <xTaskIncrementTick+0x104>)
 800a1da:	6819      	ldr	r1, [r3, #0]
 800a1dc:	6810      	ldr	r0, [r2, #0]
 800a1de:	6018      	str	r0, [r3, #0]
 800a1e0:	6011      	str	r1, [r2, #0]
 800a1e2:	4a33      	ldr	r2, [pc, #204]	; (800a2b0 <xTaskIncrementTick+0x108>)
 800a1e4:	6813      	ldr	r3, [r2, #0]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	6013      	str	r3, [r2, #0]
 800a1ea:	f7ff fe89 	bl	8009f00 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1ee:	4d31      	ldr	r5, [pc, #196]	; (800a2b4 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800a1f0:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1f4:	682b      	ldr	r3, [r5, #0]
 800a1f6:	4f30      	ldr	r7, [pc, #192]	; (800a2b8 <xTaskIncrementTick+0x110>)
 800a1f8:	42a3      	cmp	r3, r4
 800a1fa:	d911      	bls.n	800a220 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	4b2f      	ldr	r3, [pc, #188]	; (800a2bc <xTaskIncrementTick+0x114>)
 800a200:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a202:	2214      	movs	r2, #20
 800a204:	434a      	muls	r2, r1
 800a206:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800a208:	2a02      	cmp	r2, #2
 800a20a:	bf28      	it	cs
 800a20c:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800a210:	4a2b      	ldr	r2, [pc, #172]	; (800a2c0 <xTaskIncrementTick+0x118>)
 800a212:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800a214:	2a00      	cmp	r2, #0
}
 800a216:	bf0c      	ite	eq
 800a218:	4658      	moveq	r0, fp
 800a21a:	2001      	movne	r0, #1
 800a21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a220:	f8df a084 	ldr.w	sl, [pc, #132]	; 800a2a8 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800a224:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800a2c8 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a228:	f8da 2000 	ldr.w	r2, [sl]
 800a22c:	6812      	ldr	r2, [r2, #0]
 800a22e:	b91a      	cbnz	r2, 800a238 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a230:	f04f 32ff 	mov.w	r2, #4294967295
 800a234:	602a      	str	r2, [r5, #0]
					break;
 800a236:	e7e1      	b.n	800a1fc <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a238:	f8da 2000 	ldr.w	r2, [sl]
 800a23c:	68d2      	ldr	r2, [r2, #12]
 800a23e:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a240:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800a242:	428c      	cmp	r4, r1
 800a244:	d201      	bcs.n	800a24a <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 800a246:	6029      	str	r1, [r5, #0]
						break;
 800a248:	e7d8      	b.n	800a1fc <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a24a:	f106 0804 	add.w	r8, r6, #4
 800a24e:	4640      	mov	r0, r8
 800a250:	f7ff f9f9 	bl	8009646 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a254:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800a256:	b119      	cbz	r1, 800a260 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a258:	f106 0018 	add.w	r0, r6, #24
 800a25c:	f7ff f9f3 	bl	8009646 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a260:	2201      	movs	r2, #1
 800a262:	f04f 0c14 	mov.w	ip, #20
 800a266:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800a268:	f8d9 3000 	ldr.w	r3, [r9]
 800a26c:	fa02 f100 	lsl.w	r1, r2, r0
 800a270:	4319      	orrs	r1, r3
 800a272:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <xTaskIncrementTick+0x114>)
 800a274:	f8c9 1000 	str.w	r1, [r9]
 800a278:	fb0c 3000 	mla	r0, ip, r0, r3
 800a27c:	4641      	mov	r1, r8
 800a27e:	f7ff f9bf 	bl	8009600 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a282:	6838      	ldr	r0, [r7, #0]
 800a284:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800a286:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800a288:	4291      	cmp	r1, r2
 800a28a:	bf28      	it	cs
 800a28c:	f04f 0b01 	movcs.w	fp, #1
 800a290:	e7ca      	b.n	800a228 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 800a292:	4a0c      	ldr	r2, [pc, #48]	; (800a2c4 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800a294:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800a298:	6813      	ldr	r3, [r2, #0]
 800a29a:	3301      	adds	r3, #1
 800a29c:	6013      	str	r3, [r2, #0]
 800a29e:	e7b7      	b.n	800a210 <xTaskIncrementTick+0x68>
 800a2a0:	20000754 	.word	0x20000754
 800a2a4:	200007f0 	.word	0x200007f0
 800a2a8:	200005b8 	.word	0x200005b8
 800a2ac:	200005bc 	.word	0x200005bc
 800a2b0:	200007d4 	.word	0x200007d4
 800a2b4:	200007d0 	.word	0x200007d0
 800a2b8:	200005b4 	.word	0x200005b4
 800a2bc:	200005c0 	.word	0x200005c0
 800a2c0:	200007f4 	.word	0x200007f4
 800a2c4:	20000750 	.word	0x20000750
 800a2c8:	2000075c 	.word	0x2000075c

0800a2cc <xTaskResumeAll>:
{
 800a2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800a2d0:	4c30      	ldr	r4, [pc, #192]	; (800a394 <xTaskResumeAll+0xc8>)
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	b943      	cbnz	r3, 800a2e8 <xTaskResumeAll+0x1c>
 800a2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	e7fe      	b.n	800a2e6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800a2e8:	f7ff fa14 	bl	8009714 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a2ec:	6823      	ldr	r3, [r4, #0]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2f2:	6824      	ldr	r4, [r4, #0]
 800a2f4:	b12c      	cbz	r4, 800a302 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800a2f6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a2f8:	f7ff fa2e 	bl	8009758 <vPortExitCritical>
}
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a302:	4b25      	ldr	r3, [pc, #148]	; (800a398 <xTaskResumeAll+0xcc>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0f5      	beq.n	800a2f6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a30a:	4d24      	ldr	r5, [pc, #144]	; (800a39c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800a30c:	4e24      	ldr	r6, [pc, #144]	; (800a3a0 <xTaskResumeAll+0xd4>)
 800a30e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800a3b4 <xTaskResumeAll+0xe8>
 800a312:	e01f      	b.n	800a354 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a314:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 800a316:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a318:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a31a:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a31e:	f104 0018 	add.w	r0, r4, #24
 800a322:	f7ff f990 	bl	8009646 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a326:	4648      	mov	r0, r9
 800a328:	f7ff f98d 	bl	8009646 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a32c:	2014      	movs	r0, #20
 800a32e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a330:	6831      	ldr	r1, [r6, #0]
 800a332:	fa07 f302 	lsl.w	r3, r7, r2
 800a336:	430b      	orrs	r3, r1
 800a338:	fb00 8002 	mla	r0, r0, r2, r8
 800a33c:	4649      	mov	r1, r9
 800a33e:	6033      	str	r3, [r6, #0]
 800a340:	f7ff f95e 	bl	8009600 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a344:	4b17      	ldr	r3, [pc, #92]	; (800a3a4 <xTaskResumeAll+0xd8>)
 800a346:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d301      	bcc.n	800a354 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 800a350:	4b15      	ldr	r3, [pc, #84]	; (800a3a8 <xTaskResumeAll+0xdc>)
 800a352:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1dc      	bne.n	800a314 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800a35a:	b10c      	cbz	r4, 800a360 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 800a35c:	f7ff fdd0 	bl	8009f00 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a360:	4d12      	ldr	r5, [pc, #72]	; (800a3ac <xTaskResumeAll+0xe0>)
 800a362:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a364:	b144      	cbz	r4, 800a378 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800a366:	2701      	movs	r7, #1
 800a368:	4e0f      	ldr	r6, [pc, #60]	; (800a3a8 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 800a36a:	f7ff ff1d 	bl	800a1a8 <xTaskIncrementTick>
 800a36e:	b100      	cbz	r0, 800a372 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800a370:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a372:	3c01      	subs	r4, #1
 800a374:	d1f9      	bne.n	800a36a <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800a376:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800a378:	4b0b      	ldr	r3, [pc, #44]	; (800a3a8 <xTaskResumeAll+0xdc>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d0ba      	beq.n	800a2f6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800a380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a384:	4b0a      	ldr	r3, [pc, #40]	; (800a3b0 <xTaskResumeAll+0xe4>)
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a390:	2401      	movs	r4, #1
 800a392:	e7b1      	b.n	800a2f8 <xTaskResumeAll+0x2c>
 800a394:	20000754 	.word	0x20000754
 800a398:	2000064c 	.word	0x2000064c
 800a39c:	200007d8 	.word	0x200007d8
 800a3a0:	2000075c 	.word	0x2000075c
 800a3a4:	200005b4 	.word	0x200005b4
 800a3a8:	200007f4 	.word	0x200007f4
 800a3ac:	20000750 	.word	0x20000750
 800a3b0:	e000ed04 	.word	0xe000ed04
 800a3b4:	200005c0 	.word	0x200005c0

0800a3b8 <vTaskDelay>:
	{
 800a3b8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a3ba:	b940      	cbnz	r0, 800a3ce <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800a3bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c0:	4b0d      	ldr	r3, [pc, #52]	; (800a3f8 <vTaskDelay+0x40>)
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	f3bf 8f6f 	isb	sy
	}
 800a3cc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800a3ce:	4b0b      	ldr	r3, [pc, #44]	; (800a3fc <vTaskDelay+0x44>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	b143      	cbz	r3, 800a3e6 <vTaskDelay+0x2e>
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	e7fe      	b.n	800a3e4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a3e6:	f7ff fed7 	bl	800a198 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a3ea:	f7ff fd9b 	bl	8009f24 <prvAddCurrentTaskToDelayedList.isra.2>
			xAlreadyYielded = xTaskResumeAll();
 800a3ee:	f7ff ff6d 	bl	800a2cc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d0e2      	beq.n	800a3bc <vTaskDelay+0x4>
 800a3f6:	e7e9      	b.n	800a3cc <vTaskDelay+0x14>
 800a3f8:	e000ed04 	.word	0xe000ed04
 800a3fc:	20000754 	.word	0x20000754

0800a400 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a400:	4b23      	ldr	r3, [pc, #140]	; (800a490 <vTaskSwitchContext+0x90>)
{
 800a402:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	4b23      	ldr	r3, [pc, #140]	; (800a494 <vTaskSwitchContext+0x94>)
 800a408:	b112      	cbz	r2, 800a410 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800a40a:	2201      	movs	r2, #1
 800a40c:	601a      	str	r2, [r3, #0]
}
 800a40e:	bd30      	pop	{r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 800a410:	4921      	ldr	r1, [pc, #132]	; (800a498 <vTaskSwitchContext+0x98>)
		xYieldPending = pdFALSE;
 800a412:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a414:	680b      	ldr	r3, [r1, #0]
 800a416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800a41e:	d10b      	bne.n	800a438 <vTaskSwitchContext+0x38>
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800a426:	d107      	bne.n	800a438 <vTaskSwitchContext+0x38>
 800a428:	689a      	ldr	r2, [r3, #8]
 800a42a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800a42e:	d103      	bne.n	800a438 <vTaskSwitchContext+0x38>
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800a436:	d003      	beq.n	800a440 <vTaskSwitchContext+0x40>
 800a438:	680b      	ldr	r3, [r1, #0]
 800a43a:	680b      	ldr	r3, [r1, #0]
	        __asm("nop");
 800a43c:	bf00      	nop
 800a43e:	e7fd      	b.n	800a43c <vTaskSwitchContext+0x3c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a440:	4b16      	ldr	r3, [pc, #88]	; (800a49c <vTaskSwitchContext+0x9c>)
 800a442:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a444:	fab3 f383 	clz	r3, r3
 800a448:	2214      	movs	r2, #20
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	f1c3 031f 	rsb	r3, r3, #31
 800a450:	435a      	muls	r2, r3
 800a452:	4813      	ldr	r0, [pc, #76]	; (800a4a0 <vTaskSwitchContext+0xa0>)
 800a454:	5885      	ldr	r5, [r0, r2]
 800a456:	1884      	adds	r4, r0, r2
 800a458:	b945      	cbnz	r5, 800a46c <vTaskSwitchContext+0x6c>
	__asm volatile
 800a45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	e7fe      	b.n	800a46a <vTaskSwitchContext+0x6a>
 800a46c:	6865      	ldr	r5, [r4, #4]
 800a46e:	3208      	adds	r2, #8
 800a470:	686d      	ldr	r5, [r5, #4]
 800a472:	4402      	add	r2, r0
 800a474:	4295      	cmp	r5, r2
 800a476:	bf08      	it	eq
 800a478:	686a      	ldreq	r2, [r5, #4]
 800a47a:	6065      	str	r5, [r4, #4]
 800a47c:	bf08      	it	eq
 800a47e:	6062      	streq	r2, [r4, #4]
 800a480:	2214      	movs	r2, #20
 800a482:	fb02 0303 	mla	r3, r2, r3, r0
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	600b      	str	r3, [r1, #0]
}
 800a48c:	e7bf      	b.n	800a40e <vTaskSwitchContext+0xe>
 800a48e:	bf00      	nop
 800a490:	20000754 	.word	0x20000754
 800a494:	200007f4 	.word	0x200007f4
 800a498:	200005b4 	.word	0x200005b4
 800a49c:	2000075c 	.word	0x2000075c
 800a4a0:	200005c0 	.word	0x200005c0

0800a4a4 <vTaskPlaceOnEventList>:
{
 800a4a4:	b510      	push	{r4, lr}
 800a4a6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800a4a8:	b940      	cbnz	r0, 800a4bc <vTaskPlaceOnEventList+0x18>
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	e7fe      	b.n	800a4ba <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4bc:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <vTaskPlaceOnEventList+0x2c>)
 800a4be:	6819      	ldr	r1, [r3, #0]
 800a4c0:	3118      	adds	r1, #24
 800a4c2:	f7ff f8a9 	bl	8009618 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4c6:	4620      	mov	r0, r4
}
 800a4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4cc:	f7ff bd2a 	b.w	8009f24 <prvAddCurrentTaskToDelayedList.isra.2>
 800a4d0:	200005b4 	.word	0x200005b4

0800a4d4 <xTaskRemoveFromEventList>:
{
 800a4d4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a4d6:	68c3      	ldr	r3, [r0, #12]
 800a4d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a4da:	b944      	cbnz	r4, 800a4ee <xTaskRemoveFromEventList+0x1a>
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	e7fe      	b.n	800a4ec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4ee:	f104 0518 	add.w	r5, r4, #24
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f7ff f8a7 	bl	8009646 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4f8:	4b11      	ldr	r3, [pc, #68]	; (800a540 <xTaskRemoveFromEventList+0x6c>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	b9e3      	cbnz	r3, 800a538 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4fe:	1d25      	adds	r5, r4, #4
 800a500:	4628      	mov	r0, r5
 800a502:	f7ff f8a0 	bl	8009646 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a506:	2301      	movs	r3, #1
 800a508:	490e      	ldr	r1, [pc, #56]	; (800a544 <xTaskRemoveFromEventList+0x70>)
 800a50a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a50c:	6808      	ldr	r0, [r1, #0]
 800a50e:	4093      	lsls	r3, r2
 800a510:	4303      	orrs	r3, r0
 800a512:	2014      	movs	r0, #20
 800a514:	600b      	str	r3, [r1, #0]
 800a516:	4629      	mov	r1, r5
 800a518:	4b0b      	ldr	r3, [pc, #44]	; (800a548 <xTaskRemoveFromEventList+0x74>)
 800a51a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a51e:	f7ff f86f 	bl	8009600 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a522:	4b0a      	ldr	r3, [pc, #40]	; (800a54c <xTaskRemoveFromEventList+0x78>)
 800a524:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800a52c:	bf85      	ittet	hi
 800a52e:	2001      	movhi	r0, #1
 800a530:	4b07      	ldrhi	r3, [pc, #28]	; (800a550 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 800a532:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 800a534:	6018      	strhi	r0, [r3, #0]
}
 800a536:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a538:	4629      	mov	r1, r5
 800a53a:	4806      	ldr	r0, [pc, #24]	; (800a554 <xTaskRemoveFromEventList+0x80>)
 800a53c:	e7ef      	b.n	800a51e <xTaskRemoveFromEventList+0x4a>
 800a53e:	bf00      	nop
 800a540:	20000754 	.word	0x20000754
 800a544:	2000075c 	.word	0x2000075c
 800a548:	200005c0 	.word	0x200005c0
 800a54c:	200005b4 	.word	0x200005b4
 800a550:	200007f4 	.word	0x200007f4
 800a554:	200007d8 	.word	0x200007d8

0800a558 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a558:	4b03      	ldr	r3, [pc, #12]	; (800a568 <vTaskInternalSetTimeOutState+0x10>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a55e:	4b03      	ldr	r3, [pc, #12]	; (800a56c <vTaskInternalSetTimeOutState+0x14>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6043      	str	r3, [r0, #4]
}
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	200007d4 	.word	0x200007d4
 800a56c:	200007f0 	.word	0x200007f0

0800a570 <xTaskCheckForTimeOut>:
{
 800a570:	b570      	push	{r4, r5, r6, lr}
 800a572:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 800a574:	4604      	mov	r4, r0
 800a576:	b940      	cbnz	r0, 800a58a <xTaskCheckForTimeOut+0x1a>
 800a578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	e7fe      	b.n	800a588 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800a58a:	b941      	cbnz	r1, 800a59e <xTaskCheckForTimeOut+0x2e>
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	e7fe      	b.n	800a59c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800a59e:	f7ff f8b9 	bl	8009714 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a5a2:	4b0d      	ldr	r3, [pc, #52]	; (800a5d8 <xTaskCheckForTimeOut+0x68>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5a4:	480d      	ldr	r0, [pc, #52]	; (800a5dc <xTaskCheckForTimeOut+0x6c>)
		const TickType_t xConstTickCount = xTickCount;
 800a5a6:	681b      	ldr	r3, [r3, #0]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5a8:	6826      	ldr	r6, [r4, #0]
 800a5aa:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5ac:	6861      	ldr	r1, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5ae:	4286      	cmp	r6, r0
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5b0:	eba3 0201 	sub.w	r2, r3, r1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5b4:	d001      	beq.n	800a5ba <xTaskCheckForTimeOut+0x4a>
 800a5b6:	4299      	cmp	r1, r3
 800a5b8:	d90c      	bls.n	800a5d4 <xTaskCheckForTimeOut+0x64>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d909      	bls.n	800a5d4 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
 800a5c0:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a5c2:	4620      	mov	r0, r4
			*pxTicksToWait -= xElapsedTime;
 800a5c4:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a5c6:	f7ff ffc7 	bl	800a558 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a5ca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a5cc:	f7ff f8c4 	bl	8009758 <vPortExitCritical>
}
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800a5d4:	2401      	movs	r4, #1
 800a5d6:	e7f9      	b.n	800a5cc <xTaskCheckForTimeOut+0x5c>
 800a5d8:	200007f0 	.word	0x200007f0
 800a5dc:	200007d4 	.word	0x200007d4

0800a5e0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	4b01      	ldr	r3, [pc, #4]	; (800a5e8 <vTaskMissedYield+0x8>)
 800a5e4:	601a      	str	r2, [r3, #0]
}
 800a5e6:	4770      	bx	lr
 800a5e8:	200007f4 	.word	0x200007f4

0800a5ec <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a5ec:	4b05      	ldr	r3, [pc, #20]	; (800a604 <xTaskGetSchedulerState+0x18>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	b133      	cbz	r3, 800a600 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5f2:	4b05      	ldr	r3, [pc, #20]	; (800a608 <xTaskGetSchedulerState+0x1c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5f8:	bf0c      	ite	eq
 800a5fa:	2002      	moveq	r0, #2
 800a5fc:	2000      	movne	r0, #0
 800a5fe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a600:	2001      	movs	r0, #1
	}
 800a602:	4770      	bx	lr
 800a604:	200007ec 	.word	0x200007ec
 800a608:	20000754 	.word	0x20000754

0800a60c <xTaskPriorityInherit>:
	{
 800a60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800a610:	4604      	mov	r4, r0
 800a612:	b360      	cbz	r0, 800a66e <xTaskPriorityInherit+0x62>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a614:	4a24      	ldr	r2, [pc, #144]	; (800a6a8 <xTaskPriorityInherit+0x9c>)
 800a616:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a618:	6811      	ldr	r1, [r2, #0]
 800a61a:	4617      	mov	r7, r2
 800a61c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a61e:	428b      	cmp	r3, r1
 800a620:	d239      	bcs.n	800a696 <xTaskPriorityInherit+0x8a>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a622:	2614      	movs	r6, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a624:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a626:	4d21      	ldr	r5, [pc, #132]	; (800a6ac <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a628:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a62a:	bfa8      	it	ge
 800a62c:	683a      	ldrge	r2, [r7, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a62e:	fb06 5303 	mla	r3, r6, r3, r5
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a632:	bfa2      	ittt	ge
 800a634:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800a636:	f1c2 0207 	rsbge	r2, r2, #7
 800a63a:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a63c:	6942      	ldr	r2, [r0, #20]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d117      	bne.n	800a672 <xTaskPriorityInherit+0x66>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a642:	f100 0804 	add.w	r8, r0, #4
 800a646:	4640      	mov	r0, r8
 800a648:	f7fe fffd 	bl	8009646 <uxListRemove>
 800a64c:	4b18      	ldr	r3, [pc, #96]	; (800a6b0 <xTaskPriorityInherit+0xa4>)
 800a64e:	b1b0      	cbz	r0, 800a67e <xTaskPriorityInherit+0x72>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a650:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a652:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a654:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a656:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a658:	2401      	movs	r4, #1
 800a65a:	fa04 f002 	lsl.w	r0, r4, r2
 800a65e:	4308      	orrs	r0, r1
 800a660:	6018      	str	r0, [r3, #0]
 800a662:	2014      	movs	r0, #20
 800a664:	4641      	mov	r1, r8
 800a666:	fb00 5002 	mla	r0, r0, r2, r5
 800a66a:	f7fe ffc9 	bl	8009600 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 800a66e:	4620      	mov	r0, r4
		return xReturn;
 800a670:	e003      	b.n	800a67a <xTaskPriorityInherit+0x6e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a676:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 800a678:	2001      	movs	r0, #1
	}
 800a67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a67e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a680:	4346      	muls	r6, r0
 800a682:	59aa      	ldr	r2, [r5, r6]
 800a684:	2a00      	cmp	r2, #0
 800a686:	d1e3      	bne.n	800a650 <xTaskPriorityInherit+0x44>
 800a688:	2101      	movs	r1, #1
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	4081      	lsls	r1, r0
 800a68e:	ea22 0201 	bic.w	r2, r2, r1
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	e7dc      	b.n	800a650 <xTaskPriorityInherit+0x44>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a696:	6813      	ldr	r3, [r2, #0]
 800a698:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a69a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a69c:	42a0      	cmp	r0, r4
 800a69e:	bf2c      	ite	cs
 800a6a0:	2000      	movcs	r0, #0
 800a6a2:	2001      	movcc	r0, #1
 800a6a4:	e7e9      	b.n	800a67a <xTaskPriorityInherit+0x6e>
 800a6a6:	bf00      	nop
 800a6a8:	200005b4 	.word	0x200005b4
 800a6ac:	200005c0 	.word	0x200005c0
 800a6b0:	2000075c 	.word	0x2000075c

0800a6b4 <xTaskPriorityDisinherit>:
	{
 800a6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	b908      	cbnz	r0, 800a6be <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800a6ba:	2000      	movs	r0, #0
	}
 800a6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800a6be:	4b22      	ldr	r3, [pc, #136]	; (800a748 <xTaskPriorityDisinherit+0x94>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4283      	cmp	r3, r0
 800a6c4:	d008      	beq.n	800a6d8 <xTaskPriorityDisinherit+0x24>
 800a6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	e7fe      	b.n	800a6d6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800a6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6da:	b943      	cbnz	r3, 800a6ee <xTaskPriorityDisinherit+0x3a>
 800a6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e0:	f383 8811 	msr	BASEPRI, r3
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	e7fe      	b.n	800a6ec <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6ee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a6f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
			( pxTCB->uxMutexesHeld )--;
 800a6f2:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6f4:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800a6f6:	63c3      	str	r3, [r0, #60]	; 0x3c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6f8:	d0df      	beq.n	800a6ba <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1dd      	bne.n	800a6ba <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6fe:	1d05      	adds	r5, r0, #4
 800a700:	4628      	mov	r0, r5
 800a702:	f7fe ffa0 	bl	8009646 <uxListRemove>
 800a706:	4e11      	ldr	r6, [pc, #68]	; (800a74c <xTaskPriorityDisinherit+0x98>)
 800a708:	4a11      	ldr	r2, [pc, #68]	; (800a750 <xTaskPriorityDisinherit+0x9c>)
 800a70a:	b950      	cbnz	r0, 800a722 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a70c:	2114      	movs	r1, #20
 800a70e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a710:	4379      	muls	r1, r7
 800a712:	5873      	ldr	r3, [r6, r1]
 800a714:	b92b      	cbnz	r3, 800a722 <xTaskPriorityDisinherit+0x6e>
 800a716:	2001      	movs	r0, #1
 800a718:	6813      	ldr	r3, [r2, #0]
 800a71a:	40b8      	lsls	r0, r7
 800a71c:	ea23 0300 	bic.w	r3, r3, r0
 800a720:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a722:	6ba3      	ldr	r3, [r4, #56]	; 0x38
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a724:	f1c3 0107 	rsb	r1, r3, #7
 800a728:	61a1      	str	r1, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a72a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800a72c:	2401      	movs	r4, #1
 800a72e:	6811      	ldr	r1, [r2, #0]
 800a730:	fa04 f003 	lsl.w	r0, r4, r3
 800a734:	4308      	orrs	r0, r1
 800a736:	6010      	str	r0, [r2, #0]
 800a738:	2014      	movs	r0, #20
 800a73a:	4629      	mov	r1, r5
 800a73c:	fb00 6003 	mla	r0, r0, r3, r6
 800a740:	f7fe ff5e 	bl	8009600 <vListInsertEnd>
					xReturn = pdTRUE;
 800a744:	4620      	mov	r0, r4
		return xReturn;
 800a746:	e7b9      	b.n	800a6bc <xTaskPriorityDisinherit+0x8>
 800a748:	200005b4 	.word	0x200005b4
 800a74c:	200005c0 	.word	0x200005c0
 800a750:	2000075c 	.word	0x2000075c

0800a754 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800a754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800a756:	4604      	mov	r4, r0
 800a758:	2800      	cmp	r0, #0
 800a75a:	d04c      	beq.n	800a7f6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
			configASSERT( pxTCB->uxMutexesHeld );
 800a75c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a75e:	b942      	cbnz	r2, 800a772 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	e7fe      	b.n	800a770 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 800a772:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a774:	4299      	cmp	r1, r3
 800a776:	bf38      	it	cc
 800a778:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a77a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a77c:	428b      	cmp	r3, r1
 800a77e:	d03a      	beq.n	800a7f6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a780:	2a01      	cmp	r2, #1
 800a782:	d138      	bne.n	800a7f6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					configASSERT( pxTCB != pxCurrentTCB );
 800a784:	4a1c      	ldr	r2, [pc, #112]	; (800a7f8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 800a786:	6812      	ldr	r2, [r2, #0]
 800a788:	4282      	cmp	r2, r0
 800a78a:	d108      	bne.n	800a79e <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	e7fe      	b.n	800a79c <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a79e:	2614      	movs	r6, #20
 800a7a0:	4d16      	ldr	r5, [pc, #88]	; (800a7fc <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a7a2:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a7a4:	fb06 5303 	mla	r3, r6, r3, r5
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a7a8:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a7aa:	6942      	ldr	r2, [r0, #20]
					pxTCB->uxPriority = uxPriorityToUse;
 800a7ac:	62c1      	str	r1, [r0, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7ae:	bfa4      	itt	ge
 800a7b0:	f1c1 0107 	rsbge	r1, r1, #7
 800a7b4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d11d      	bne.n	800a7f6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7ba:	1d07      	adds	r7, r0, #4
 800a7bc:	4638      	mov	r0, r7
 800a7be:	f7fe ff42 	bl	8009646 <uxListRemove>
 800a7c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a7c4:	4c0e      	ldr	r4, [pc, #56]	; (800a800 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 800a7c6:	b948      	cbnz	r0, 800a7dc <vTaskPriorityDisinheritAfterTimeout+0x88>
 800a7c8:	2301      	movs	r3, #1
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a7ca:	4356      	muls	r6, r2
 800a7cc:	59a8      	ldr	r0, [r5, r6]
 800a7ce:	fa03 f102 	lsl.w	r1, r3, r2
 800a7d2:	b918      	cbnz	r0, 800a7dc <vTaskPriorityDisinheritAfterTimeout+0x88>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	ea23 0301 	bic.w	r3, r3, r1
 800a7da:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 800a7dc:	2301      	movs	r3, #1
 800a7de:	2014      	movs	r0, #20
 800a7e0:	6821      	ldr	r1, [r4, #0]
 800a7e2:	4093      	lsls	r3, r2
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	6023      	str	r3, [r4, #0]
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	fb00 5002 	mla	r0, r0, r2, r5
	}
 800a7ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800a7f2:	f7fe bf05 	b.w	8009600 <vListInsertEnd>
	}
 800a7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f8:	200005b4 	.word	0x200005b4
 800a7fc:	200005c0 	.word	0x200005c0
 800a800:	2000075c 	.word	0x2000075c

0800a804 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a804:	4b04      	ldr	r3, [pc, #16]	; (800a818 <pvTaskIncrementMutexHeldCount+0x14>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	b11a      	cbz	r2, 800a812 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a80a:	6819      	ldr	r1, [r3, #0]
 800a80c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800a80e:	3201      	adds	r2, #1
 800a810:	63ca      	str	r2, [r1, #60]	; 0x3c
		return pxCurrentTCB;
 800a812:	6818      	ldr	r0, [r3, #0]
	}
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	200005b4 	.word	0x200005b4

0800a81c <__errno>:
 800a81c:	4b01      	ldr	r3, [pc, #4]	; (800a824 <__errno+0x8>)
 800a81e:	6818      	ldr	r0, [r3, #0]
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	20000194 	.word	0x20000194

0800a828 <__libc_init_array>:
 800a828:	b570      	push	{r4, r5, r6, lr}
 800a82a:	2500      	movs	r5, #0
 800a82c:	4e0c      	ldr	r6, [pc, #48]	; (800a860 <__libc_init_array+0x38>)
 800a82e:	4c0d      	ldr	r4, [pc, #52]	; (800a864 <__libc_init_array+0x3c>)
 800a830:	1ba4      	subs	r4, r4, r6
 800a832:	10a4      	asrs	r4, r4, #2
 800a834:	42a5      	cmp	r5, r4
 800a836:	d109      	bne.n	800a84c <__libc_init_array+0x24>
 800a838:	f001 fde2 	bl	800c400 <_init>
 800a83c:	2500      	movs	r5, #0
 800a83e:	4e0a      	ldr	r6, [pc, #40]	; (800a868 <__libc_init_array+0x40>)
 800a840:	4c0a      	ldr	r4, [pc, #40]	; (800a86c <__libc_init_array+0x44>)
 800a842:	1ba4      	subs	r4, r4, r6
 800a844:	10a4      	asrs	r4, r4, #2
 800a846:	42a5      	cmp	r5, r4
 800a848:	d105      	bne.n	800a856 <__libc_init_array+0x2e>
 800a84a:	bd70      	pop	{r4, r5, r6, pc}
 800a84c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a850:	4798      	blx	r3
 800a852:	3501      	adds	r5, #1
 800a854:	e7ee      	b.n	800a834 <__libc_init_array+0xc>
 800a856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a85a:	4798      	blx	r3
 800a85c:	3501      	adds	r5, #1
 800a85e:	e7f2      	b.n	800a846 <__libc_init_array+0x1e>
 800a860:	0800ce98 	.word	0x0800ce98
 800a864:	0800ce98 	.word	0x0800ce98
 800a868:	0800ce98 	.word	0x0800ce98
 800a86c:	0800ce9c 	.word	0x0800ce9c

0800a870 <__locale_ctype_ptr_l>:
 800a870:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a874:	4770      	bx	lr
	...

0800a878 <__locale_ctype_ptr>:
 800a878:	4b04      	ldr	r3, [pc, #16]	; (800a88c <__locale_ctype_ptr+0x14>)
 800a87a:	4a05      	ldr	r2, [pc, #20]	; (800a890 <__locale_ctype_ptr+0x18>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	6a1b      	ldr	r3, [r3, #32]
 800a880:	2b00      	cmp	r3, #0
 800a882:	bf08      	it	eq
 800a884:	4613      	moveq	r3, r2
 800a886:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800a88a:	4770      	bx	lr
 800a88c:	20000194 	.word	0x20000194
 800a890:	200001f8 	.word	0x200001f8

0800a894 <__ascii_mbtowc>:
 800a894:	b082      	sub	sp, #8
 800a896:	b901      	cbnz	r1, 800a89a <__ascii_mbtowc+0x6>
 800a898:	a901      	add	r1, sp, #4
 800a89a:	b142      	cbz	r2, 800a8ae <__ascii_mbtowc+0x1a>
 800a89c:	b14b      	cbz	r3, 800a8b2 <__ascii_mbtowc+0x1e>
 800a89e:	7813      	ldrb	r3, [r2, #0]
 800a8a0:	600b      	str	r3, [r1, #0]
 800a8a2:	7812      	ldrb	r2, [r2, #0]
 800a8a4:	1c10      	adds	r0, r2, #0
 800a8a6:	bf18      	it	ne
 800a8a8:	2001      	movne	r0, #1
 800a8aa:	b002      	add	sp, #8
 800a8ac:	4770      	bx	lr
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	e7fb      	b.n	800a8aa <__ascii_mbtowc+0x16>
 800a8b2:	f06f 0001 	mvn.w	r0, #1
 800a8b6:	e7f8      	b.n	800a8aa <__ascii_mbtowc+0x16>

0800a8b8 <memcpy>:
 800a8b8:	b510      	push	{r4, lr}
 800a8ba:	1e43      	subs	r3, r0, #1
 800a8bc:	440a      	add	r2, r1
 800a8be:	4291      	cmp	r1, r2
 800a8c0:	d100      	bne.n	800a8c4 <memcpy+0xc>
 800a8c2:	bd10      	pop	{r4, pc}
 800a8c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8cc:	e7f7      	b.n	800a8be <memcpy+0x6>

0800a8ce <memmove>:
 800a8ce:	4288      	cmp	r0, r1
 800a8d0:	b510      	push	{r4, lr}
 800a8d2:	eb01 0302 	add.w	r3, r1, r2
 800a8d6:	d807      	bhi.n	800a8e8 <memmove+0x1a>
 800a8d8:	1e42      	subs	r2, r0, #1
 800a8da:	4299      	cmp	r1, r3
 800a8dc:	d00a      	beq.n	800a8f4 <memmove+0x26>
 800a8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a8e6:	e7f8      	b.n	800a8da <memmove+0xc>
 800a8e8:	4283      	cmp	r3, r0
 800a8ea:	d9f5      	bls.n	800a8d8 <memmove+0xa>
 800a8ec:	1881      	adds	r1, r0, r2
 800a8ee:	1ad2      	subs	r2, r2, r3
 800a8f0:	42d3      	cmn	r3, r2
 800a8f2:	d100      	bne.n	800a8f6 <memmove+0x28>
 800a8f4:	bd10      	pop	{r4, pc}
 800a8f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a8fe:	e7f7      	b.n	800a8f0 <memmove+0x22>

0800a900 <memset>:
 800a900:	4603      	mov	r3, r0
 800a902:	4402      	add	r2, r0
 800a904:	4293      	cmp	r3, r2
 800a906:	d100      	bne.n	800a90a <memset+0xa>
 800a908:	4770      	bx	lr
 800a90a:	f803 1b01 	strb.w	r1, [r3], #1
 800a90e:	e7f9      	b.n	800a904 <memset+0x4>

0800a910 <siprintf>:
 800a910:	b40e      	push	{r1, r2, r3}
 800a912:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a916:	b500      	push	{lr}
 800a918:	b09c      	sub	sp, #112	; 0x70
 800a91a:	ab1d      	add	r3, sp, #116	; 0x74
 800a91c:	9002      	str	r0, [sp, #8]
 800a91e:	9006      	str	r0, [sp, #24]
 800a920:	9107      	str	r1, [sp, #28]
 800a922:	9104      	str	r1, [sp, #16]
 800a924:	4808      	ldr	r0, [pc, #32]	; (800a948 <siprintf+0x38>)
 800a926:	4909      	ldr	r1, [pc, #36]	; (800a94c <siprintf+0x3c>)
 800a928:	f853 2b04 	ldr.w	r2, [r3], #4
 800a92c:	9105      	str	r1, [sp, #20]
 800a92e:	6800      	ldr	r0, [r0, #0]
 800a930:	a902      	add	r1, sp, #8
 800a932:	9301      	str	r3, [sp, #4]
 800a934:	f000 fa20 	bl	800ad78 <_svfiprintf_r>
 800a938:	2200      	movs	r2, #0
 800a93a:	9b02      	ldr	r3, [sp, #8]
 800a93c:	701a      	strb	r2, [r3, #0]
 800a93e:	b01c      	add	sp, #112	; 0x70
 800a940:	f85d eb04 	ldr.w	lr, [sp], #4
 800a944:	b003      	add	sp, #12
 800a946:	4770      	bx	lr
 800a948:	20000194 	.word	0x20000194
 800a94c:	ffff0208 	.word	0xffff0208

0800a950 <strncasecmp>:
 800a950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a954:	4606      	mov	r6, r0
 800a956:	460f      	mov	r7, r1
 800a958:	eb00 0802 	add.w	r8, r0, r2
 800a95c:	45b0      	cmp	r8, r6
 800a95e:	d019      	beq.n	800a994 <strncasecmp+0x44>
 800a960:	f816 4b01 	ldrb.w	r4, [r6], #1
 800a964:	f7ff ff88 	bl	800a878 <__locale_ctype_ptr>
 800a968:	4420      	add	r0, r4
 800a96a:	7843      	ldrb	r3, [r0, #1]
 800a96c:	f817 5b01 	ldrb.w	r5, [r7], #1
 800a970:	f003 0303 	and.w	r3, r3, #3
 800a974:	2b01      	cmp	r3, #1
 800a976:	bf08      	it	eq
 800a978:	3420      	addeq	r4, #32
 800a97a:	f7ff ff7d 	bl	800a878 <__locale_ctype_ptr>
 800a97e:	4428      	add	r0, r5
 800a980:	7842      	ldrb	r2, [r0, #1]
 800a982:	f002 0203 	and.w	r2, r2, #3
 800a986:	2a01      	cmp	r2, #1
 800a988:	bf08      	it	eq
 800a98a:	3520      	addeq	r5, #32
 800a98c:	1b60      	subs	r0, r4, r5
 800a98e:	d102      	bne.n	800a996 <strncasecmp+0x46>
 800a990:	2d00      	cmp	r5, #0
 800a992:	d1e3      	bne.n	800a95c <strncasecmp+0xc>
 800a994:	2000      	movs	r0, #0
 800a996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a99a <strnlen>:
 800a99a:	4603      	mov	r3, r0
 800a99c:	b510      	push	{r4, lr}
 800a99e:	4401      	add	r1, r0
 800a9a0:	428b      	cmp	r3, r1
 800a9a2:	d002      	beq.n	800a9aa <strnlen+0x10>
 800a9a4:	781a      	ldrb	r2, [r3, #0]
 800a9a6:	1c5c      	adds	r4, r3, #1
 800a9a8:	b90a      	cbnz	r2, 800a9ae <strnlen+0x14>
 800a9aa:	1a18      	subs	r0, r3, r0
 800a9ac:	bd10      	pop	{r4, pc}
 800a9ae:	4623      	mov	r3, r4
 800a9b0:	e7f6      	b.n	800a9a0 <strnlen+0x6>

0800a9b2 <_strtol_l.isra.0>:
 800a9b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b6:	4680      	mov	r8, r0
 800a9b8:	4689      	mov	r9, r1
 800a9ba:	4692      	mov	sl, r2
 800a9bc:	461e      	mov	r6, r3
 800a9be:	460f      	mov	r7, r1
 800a9c0:	463d      	mov	r5, r7
 800a9c2:	9808      	ldr	r0, [sp, #32]
 800a9c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9c8:	f7ff ff52 	bl	800a870 <__locale_ctype_ptr_l>
 800a9cc:	4420      	add	r0, r4
 800a9ce:	7843      	ldrb	r3, [r0, #1]
 800a9d0:	f013 0308 	ands.w	r3, r3, #8
 800a9d4:	d132      	bne.n	800aa3c <_strtol_l.isra.0+0x8a>
 800a9d6:	2c2d      	cmp	r4, #45	; 0x2d
 800a9d8:	d132      	bne.n	800aa40 <_strtol_l.isra.0+0x8e>
 800a9da:	2201      	movs	r2, #1
 800a9dc:	787c      	ldrb	r4, [r7, #1]
 800a9de:	1cbd      	adds	r5, r7, #2
 800a9e0:	2e00      	cmp	r6, #0
 800a9e2:	d05d      	beq.n	800aaa0 <_strtol_l.isra.0+0xee>
 800a9e4:	2e10      	cmp	r6, #16
 800a9e6:	d109      	bne.n	800a9fc <_strtol_l.isra.0+0x4a>
 800a9e8:	2c30      	cmp	r4, #48	; 0x30
 800a9ea:	d107      	bne.n	800a9fc <_strtol_l.isra.0+0x4a>
 800a9ec:	782b      	ldrb	r3, [r5, #0]
 800a9ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a9f2:	2b58      	cmp	r3, #88	; 0x58
 800a9f4:	d14f      	bne.n	800aa96 <_strtol_l.isra.0+0xe4>
 800a9f6:	2610      	movs	r6, #16
 800a9f8:	786c      	ldrb	r4, [r5, #1]
 800a9fa:	3502      	adds	r5, #2
 800a9fc:	2a00      	cmp	r2, #0
 800a9fe:	bf14      	ite	ne
 800aa00:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800aa04:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800aa08:	2700      	movs	r7, #0
 800aa0a:	fbb1 fcf6 	udiv	ip, r1, r6
 800aa0e:	4638      	mov	r0, r7
 800aa10:	fb06 1e1c 	mls	lr, r6, ip, r1
 800aa14:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800aa18:	2b09      	cmp	r3, #9
 800aa1a:	d817      	bhi.n	800aa4c <_strtol_l.isra.0+0x9a>
 800aa1c:	461c      	mov	r4, r3
 800aa1e:	42a6      	cmp	r6, r4
 800aa20:	dd23      	ble.n	800aa6a <_strtol_l.isra.0+0xb8>
 800aa22:	1c7b      	adds	r3, r7, #1
 800aa24:	d007      	beq.n	800aa36 <_strtol_l.isra.0+0x84>
 800aa26:	4584      	cmp	ip, r0
 800aa28:	d31c      	bcc.n	800aa64 <_strtol_l.isra.0+0xb2>
 800aa2a:	d101      	bne.n	800aa30 <_strtol_l.isra.0+0x7e>
 800aa2c:	45a6      	cmp	lr, r4
 800aa2e:	db19      	blt.n	800aa64 <_strtol_l.isra.0+0xb2>
 800aa30:	2701      	movs	r7, #1
 800aa32:	fb00 4006 	mla	r0, r0, r6, r4
 800aa36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa3a:	e7eb      	b.n	800aa14 <_strtol_l.isra.0+0x62>
 800aa3c:	462f      	mov	r7, r5
 800aa3e:	e7bf      	b.n	800a9c0 <_strtol_l.isra.0+0xe>
 800aa40:	2c2b      	cmp	r4, #43	; 0x2b
 800aa42:	bf04      	itt	eq
 800aa44:	1cbd      	addeq	r5, r7, #2
 800aa46:	787c      	ldrbeq	r4, [r7, #1]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	e7c9      	b.n	800a9e0 <_strtol_l.isra.0+0x2e>
 800aa4c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800aa50:	2b19      	cmp	r3, #25
 800aa52:	d801      	bhi.n	800aa58 <_strtol_l.isra.0+0xa6>
 800aa54:	3c37      	subs	r4, #55	; 0x37
 800aa56:	e7e2      	b.n	800aa1e <_strtol_l.isra.0+0x6c>
 800aa58:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800aa5c:	2b19      	cmp	r3, #25
 800aa5e:	d804      	bhi.n	800aa6a <_strtol_l.isra.0+0xb8>
 800aa60:	3c57      	subs	r4, #87	; 0x57
 800aa62:	e7dc      	b.n	800aa1e <_strtol_l.isra.0+0x6c>
 800aa64:	f04f 37ff 	mov.w	r7, #4294967295
 800aa68:	e7e5      	b.n	800aa36 <_strtol_l.isra.0+0x84>
 800aa6a:	1c7b      	adds	r3, r7, #1
 800aa6c:	d108      	bne.n	800aa80 <_strtol_l.isra.0+0xce>
 800aa6e:	2322      	movs	r3, #34	; 0x22
 800aa70:	4608      	mov	r0, r1
 800aa72:	f8c8 3000 	str.w	r3, [r8]
 800aa76:	f1ba 0f00 	cmp.w	sl, #0
 800aa7a:	d107      	bne.n	800aa8c <_strtol_l.isra.0+0xda>
 800aa7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa80:	b102      	cbz	r2, 800aa84 <_strtol_l.isra.0+0xd2>
 800aa82:	4240      	negs	r0, r0
 800aa84:	f1ba 0f00 	cmp.w	sl, #0
 800aa88:	d0f8      	beq.n	800aa7c <_strtol_l.isra.0+0xca>
 800aa8a:	b10f      	cbz	r7, 800aa90 <_strtol_l.isra.0+0xde>
 800aa8c:	f105 39ff 	add.w	r9, r5, #4294967295
 800aa90:	f8ca 9000 	str.w	r9, [sl]
 800aa94:	e7f2      	b.n	800aa7c <_strtol_l.isra.0+0xca>
 800aa96:	2430      	movs	r4, #48	; 0x30
 800aa98:	2e00      	cmp	r6, #0
 800aa9a:	d1af      	bne.n	800a9fc <_strtol_l.isra.0+0x4a>
 800aa9c:	2608      	movs	r6, #8
 800aa9e:	e7ad      	b.n	800a9fc <_strtol_l.isra.0+0x4a>
 800aaa0:	2c30      	cmp	r4, #48	; 0x30
 800aaa2:	d0a3      	beq.n	800a9ec <_strtol_l.isra.0+0x3a>
 800aaa4:	260a      	movs	r6, #10
 800aaa6:	e7a9      	b.n	800a9fc <_strtol_l.isra.0+0x4a>

0800aaa8 <strtol>:
 800aaa8:	4b08      	ldr	r3, [pc, #32]	; (800aacc <strtol+0x24>)
 800aaaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaac:	681c      	ldr	r4, [r3, #0]
 800aaae:	4d08      	ldr	r5, [pc, #32]	; (800aad0 <strtol+0x28>)
 800aab0:	6a23      	ldr	r3, [r4, #32]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	bf08      	it	eq
 800aab6:	462b      	moveq	r3, r5
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	4613      	mov	r3, r2
 800aabc:	460a      	mov	r2, r1
 800aabe:	4601      	mov	r1, r0
 800aac0:	4620      	mov	r0, r4
 800aac2:	f7ff ff76 	bl	800a9b2 <_strtol_l.isra.0>
 800aac6:	b003      	add	sp, #12
 800aac8:	bd30      	pop	{r4, r5, pc}
 800aaca:	bf00      	nop
 800aacc:	20000194 	.word	0x20000194
 800aad0:	200001f8 	.word	0x200001f8

0800aad4 <_strtoul_l.isra.0>:
 800aad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aad8:	4680      	mov	r8, r0
 800aada:	4689      	mov	r9, r1
 800aadc:	4692      	mov	sl, r2
 800aade:	461e      	mov	r6, r3
 800aae0:	460f      	mov	r7, r1
 800aae2:	463d      	mov	r5, r7
 800aae4:	9808      	ldr	r0, [sp, #32]
 800aae6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaea:	f7ff fec1 	bl	800a870 <__locale_ctype_ptr_l>
 800aaee:	4420      	add	r0, r4
 800aaf0:	7843      	ldrb	r3, [r0, #1]
 800aaf2:	f013 0308 	ands.w	r3, r3, #8
 800aaf6:	d130      	bne.n	800ab5a <_strtoul_l.isra.0+0x86>
 800aaf8:	2c2d      	cmp	r4, #45	; 0x2d
 800aafa:	d130      	bne.n	800ab5e <_strtoul_l.isra.0+0x8a>
 800aafc:	2101      	movs	r1, #1
 800aafe:	787c      	ldrb	r4, [r7, #1]
 800ab00:	1cbd      	adds	r5, r7, #2
 800ab02:	2e00      	cmp	r6, #0
 800ab04:	d05c      	beq.n	800abc0 <_strtoul_l.isra.0+0xec>
 800ab06:	2e10      	cmp	r6, #16
 800ab08:	d109      	bne.n	800ab1e <_strtoul_l.isra.0+0x4a>
 800ab0a:	2c30      	cmp	r4, #48	; 0x30
 800ab0c:	d107      	bne.n	800ab1e <_strtoul_l.isra.0+0x4a>
 800ab0e:	782b      	ldrb	r3, [r5, #0]
 800ab10:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab14:	2b58      	cmp	r3, #88	; 0x58
 800ab16:	d14e      	bne.n	800abb6 <_strtoul_l.isra.0+0xe2>
 800ab18:	2610      	movs	r6, #16
 800ab1a:	786c      	ldrb	r4, [r5, #1]
 800ab1c:	3502      	adds	r5, #2
 800ab1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab22:	fbb2 f2f6 	udiv	r2, r2, r6
 800ab26:	2300      	movs	r3, #0
 800ab28:	fb06 fc02 	mul.w	ip, r6, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	ea6f 0c0c 	mvn.w	ip, ip
 800ab32:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ab36:	2f09      	cmp	r7, #9
 800ab38:	d817      	bhi.n	800ab6a <_strtoul_l.isra.0+0x96>
 800ab3a:	463c      	mov	r4, r7
 800ab3c:	42a6      	cmp	r6, r4
 800ab3e:	dd23      	ble.n	800ab88 <_strtoul_l.isra.0+0xb4>
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	db1e      	blt.n	800ab82 <_strtoul_l.isra.0+0xae>
 800ab44:	4282      	cmp	r2, r0
 800ab46:	d31c      	bcc.n	800ab82 <_strtoul_l.isra.0+0xae>
 800ab48:	d101      	bne.n	800ab4e <_strtoul_l.isra.0+0x7a>
 800ab4a:	45a4      	cmp	ip, r4
 800ab4c:	db19      	blt.n	800ab82 <_strtoul_l.isra.0+0xae>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	fb00 4006 	mla	r0, r0, r6, r4
 800ab54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab58:	e7eb      	b.n	800ab32 <_strtoul_l.isra.0+0x5e>
 800ab5a:	462f      	mov	r7, r5
 800ab5c:	e7c1      	b.n	800aae2 <_strtoul_l.isra.0+0xe>
 800ab5e:	2c2b      	cmp	r4, #43	; 0x2b
 800ab60:	bf04      	itt	eq
 800ab62:	1cbd      	addeq	r5, r7, #2
 800ab64:	787c      	ldrbeq	r4, [r7, #1]
 800ab66:	4619      	mov	r1, r3
 800ab68:	e7cb      	b.n	800ab02 <_strtoul_l.isra.0+0x2e>
 800ab6a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ab6e:	2f19      	cmp	r7, #25
 800ab70:	d801      	bhi.n	800ab76 <_strtoul_l.isra.0+0xa2>
 800ab72:	3c37      	subs	r4, #55	; 0x37
 800ab74:	e7e2      	b.n	800ab3c <_strtoul_l.isra.0+0x68>
 800ab76:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ab7a:	2f19      	cmp	r7, #25
 800ab7c:	d804      	bhi.n	800ab88 <_strtoul_l.isra.0+0xb4>
 800ab7e:	3c57      	subs	r4, #87	; 0x57
 800ab80:	e7dc      	b.n	800ab3c <_strtoul_l.isra.0+0x68>
 800ab82:	f04f 33ff 	mov.w	r3, #4294967295
 800ab86:	e7e5      	b.n	800ab54 <_strtoul_l.isra.0+0x80>
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	da09      	bge.n	800aba0 <_strtoul_l.isra.0+0xcc>
 800ab8c:	2322      	movs	r3, #34	; 0x22
 800ab8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab92:	f8c8 3000 	str.w	r3, [r8]
 800ab96:	f1ba 0f00 	cmp.w	sl, #0
 800ab9a:	d107      	bne.n	800abac <_strtoul_l.isra.0+0xd8>
 800ab9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aba0:	b101      	cbz	r1, 800aba4 <_strtoul_l.isra.0+0xd0>
 800aba2:	4240      	negs	r0, r0
 800aba4:	f1ba 0f00 	cmp.w	sl, #0
 800aba8:	d0f8      	beq.n	800ab9c <_strtoul_l.isra.0+0xc8>
 800abaa:	b10b      	cbz	r3, 800abb0 <_strtoul_l.isra.0+0xdc>
 800abac:	f105 39ff 	add.w	r9, r5, #4294967295
 800abb0:	f8ca 9000 	str.w	r9, [sl]
 800abb4:	e7f2      	b.n	800ab9c <_strtoul_l.isra.0+0xc8>
 800abb6:	2430      	movs	r4, #48	; 0x30
 800abb8:	2e00      	cmp	r6, #0
 800abba:	d1b0      	bne.n	800ab1e <_strtoul_l.isra.0+0x4a>
 800abbc:	2608      	movs	r6, #8
 800abbe:	e7ae      	b.n	800ab1e <_strtoul_l.isra.0+0x4a>
 800abc0:	2c30      	cmp	r4, #48	; 0x30
 800abc2:	d0a4      	beq.n	800ab0e <_strtoul_l.isra.0+0x3a>
 800abc4:	260a      	movs	r6, #10
 800abc6:	e7aa      	b.n	800ab1e <_strtoul_l.isra.0+0x4a>

0800abc8 <strtoul>:
 800abc8:	4b08      	ldr	r3, [pc, #32]	; (800abec <strtoul+0x24>)
 800abca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abcc:	681c      	ldr	r4, [r3, #0]
 800abce:	4d08      	ldr	r5, [pc, #32]	; (800abf0 <strtoul+0x28>)
 800abd0:	6a23      	ldr	r3, [r4, #32]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	bf08      	it	eq
 800abd6:	462b      	moveq	r3, r5
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	4613      	mov	r3, r2
 800abdc:	460a      	mov	r2, r1
 800abde:	4601      	mov	r1, r0
 800abe0:	4620      	mov	r0, r4
 800abe2:	f7ff ff77 	bl	800aad4 <_strtoul_l.isra.0>
 800abe6:	b003      	add	sp, #12
 800abe8:	bd30      	pop	{r4, r5, pc}
 800abea:	bf00      	nop
 800abec:	20000194 	.word	0x20000194
 800abf0:	200001f8 	.word	0x200001f8

0800abf4 <__ascii_wctomb>:
 800abf4:	b149      	cbz	r1, 800ac0a <__ascii_wctomb+0x16>
 800abf6:	2aff      	cmp	r2, #255	; 0xff
 800abf8:	bf8b      	itete	hi
 800abfa:	238a      	movhi	r3, #138	; 0x8a
 800abfc:	700a      	strbls	r2, [r1, #0]
 800abfe:	6003      	strhi	r3, [r0, #0]
 800ac00:	2001      	movls	r0, #1
 800ac02:	bf88      	it	hi
 800ac04:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac08:	4770      	bx	lr
 800ac0a:	4608      	mov	r0, r1
 800ac0c:	4770      	bx	lr
	...

0800ac10 <_malloc_r>:
 800ac10:	b570      	push	{r4, r5, r6, lr}
 800ac12:	1ccd      	adds	r5, r1, #3
 800ac14:	f025 0503 	bic.w	r5, r5, #3
 800ac18:	3508      	adds	r5, #8
 800ac1a:	2d0c      	cmp	r5, #12
 800ac1c:	bf38      	it	cc
 800ac1e:	250c      	movcc	r5, #12
 800ac20:	2d00      	cmp	r5, #0
 800ac22:	4606      	mov	r6, r0
 800ac24:	db01      	blt.n	800ac2a <_malloc_r+0x1a>
 800ac26:	42a9      	cmp	r1, r5
 800ac28:	d903      	bls.n	800ac32 <_malloc_r+0x22>
 800ac2a:	230c      	movs	r3, #12
 800ac2c:	6033      	str	r3, [r6, #0]
 800ac2e:	2000      	movs	r0, #0
 800ac30:	bd70      	pop	{r4, r5, r6, pc}
 800ac32:	f000 fb3f 	bl	800b2b4 <__malloc_lock>
 800ac36:	4a21      	ldr	r2, [pc, #132]	; (800acbc <_malloc_r+0xac>)
 800ac38:	6814      	ldr	r4, [r2, #0]
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	b991      	cbnz	r1, 800ac64 <_malloc_r+0x54>
 800ac3e:	4c20      	ldr	r4, [pc, #128]	; (800acc0 <_malloc_r+0xb0>)
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	b91b      	cbnz	r3, 800ac4c <_malloc_r+0x3c>
 800ac44:	4630      	mov	r0, r6
 800ac46:	f000 fb17 	bl	800b278 <_sbrk_r>
 800ac4a:	6020      	str	r0, [r4, #0]
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4630      	mov	r0, r6
 800ac50:	f000 fb12 	bl	800b278 <_sbrk_r>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d124      	bne.n	800aca2 <_malloc_r+0x92>
 800ac58:	230c      	movs	r3, #12
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	6033      	str	r3, [r6, #0]
 800ac5e:	f000 fb2a 	bl	800b2b6 <__malloc_unlock>
 800ac62:	e7e4      	b.n	800ac2e <_malloc_r+0x1e>
 800ac64:	680b      	ldr	r3, [r1, #0]
 800ac66:	1b5b      	subs	r3, r3, r5
 800ac68:	d418      	bmi.n	800ac9c <_malloc_r+0x8c>
 800ac6a:	2b0b      	cmp	r3, #11
 800ac6c:	d90f      	bls.n	800ac8e <_malloc_r+0x7e>
 800ac6e:	600b      	str	r3, [r1, #0]
 800ac70:	18cc      	adds	r4, r1, r3
 800ac72:	50cd      	str	r5, [r1, r3]
 800ac74:	4630      	mov	r0, r6
 800ac76:	f000 fb1e 	bl	800b2b6 <__malloc_unlock>
 800ac7a:	f104 000b 	add.w	r0, r4, #11
 800ac7e:	1d23      	adds	r3, r4, #4
 800ac80:	f020 0007 	bic.w	r0, r0, #7
 800ac84:	1ac3      	subs	r3, r0, r3
 800ac86:	d0d3      	beq.n	800ac30 <_malloc_r+0x20>
 800ac88:	425a      	negs	r2, r3
 800ac8a:	50e2      	str	r2, [r4, r3]
 800ac8c:	e7d0      	b.n	800ac30 <_malloc_r+0x20>
 800ac8e:	684b      	ldr	r3, [r1, #4]
 800ac90:	428c      	cmp	r4, r1
 800ac92:	bf16      	itet	ne
 800ac94:	6063      	strne	r3, [r4, #4]
 800ac96:	6013      	streq	r3, [r2, #0]
 800ac98:	460c      	movne	r4, r1
 800ac9a:	e7eb      	b.n	800ac74 <_malloc_r+0x64>
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	6849      	ldr	r1, [r1, #4]
 800aca0:	e7cc      	b.n	800ac3c <_malloc_r+0x2c>
 800aca2:	1cc4      	adds	r4, r0, #3
 800aca4:	f024 0403 	bic.w	r4, r4, #3
 800aca8:	42a0      	cmp	r0, r4
 800acaa:	d005      	beq.n	800acb8 <_malloc_r+0xa8>
 800acac:	1a21      	subs	r1, r4, r0
 800acae:	4630      	mov	r0, r6
 800acb0:	f000 fae2 	bl	800b278 <_sbrk_r>
 800acb4:	3001      	adds	r0, #1
 800acb6:	d0cf      	beq.n	800ac58 <_malloc_r+0x48>
 800acb8:	6025      	str	r5, [r4, #0]
 800acba:	e7db      	b.n	800ac74 <_malloc_r+0x64>
 800acbc:	200007f8 	.word	0x200007f8
 800acc0:	200007fc 	.word	0x200007fc

0800acc4 <__ssputs_r>:
 800acc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc8:	688e      	ldr	r6, [r1, #8]
 800acca:	4682      	mov	sl, r0
 800accc:	429e      	cmp	r6, r3
 800acce:	460c      	mov	r4, r1
 800acd0:	4690      	mov	r8, r2
 800acd2:	4699      	mov	r9, r3
 800acd4:	d837      	bhi.n	800ad46 <__ssputs_r+0x82>
 800acd6:	898a      	ldrh	r2, [r1, #12]
 800acd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acdc:	d031      	beq.n	800ad42 <__ssputs_r+0x7e>
 800acde:	2302      	movs	r3, #2
 800ace0:	6825      	ldr	r5, [r4, #0]
 800ace2:	6909      	ldr	r1, [r1, #16]
 800ace4:	1a6f      	subs	r7, r5, r1
 800ace6:	6965      	ldr	r5, [r4, #20]
 800ace8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acec:	fb95 f5f3 	sdiv	r5, r5, r3
 800acf0:	f109 0301 	add.w	r3, r9, #1
 800acf4:	443b      	add	r3, r7
 800acf6:	429d      	cmp	r5, r3
 800acf8:	bf38      	it	cc
 800acfa:	461d      	movcc	r5, r3
 800acfc:	0553      	lsls	r3, r2, #21
 800acfe:	d530      	bpl.n	800ad62 <__ssputs_r+0x9e>
 800ad00:	4629      	mov	r1, r5
 800ad02:	f7ff ff85 	bl	800ac10 <_malloc_r>
 800ad06:	4606      	mov	r6, r0
 800ad08:	b950      	cbnz	r0, 800ad20 <__ssputs_r+0x5c>
 800ad0a:	230c      	movs	r3, #12
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	f8ca 3000 	str.w	r3, [sl]
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad20:	463a      	mov	r2, r7
 800ad22:	6921      	ldr	r1, [r4, #16]
 800ad24:	f7ff fdc8 	bl	800a8b8 <memcpy>
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad32:	81a3      	strh	r3, [r4, #12]
 800ad34:	6126      	str	r6, [r4, #16]
 800ad36:	443e      	add	r6, r7
 800ad38:	6026      	str	r6, [r4, #0]
 800ad3a:	464e      	mov	r6, r9
 800ad3c:	6165      	str	r5, [r4, #20]
 800ad3e:	1bed      	subs	r5, r5, r7
 800ad40:	60a5      	str	r5, [r4, #8]
 800ad42:	454e      	cmp	r6, r9
 800ad44:	d900      	bls.n	800ad48 <__ssputs_r+0x84>
 800ad46:	464e      	mov	r6, r9
 800ad48:	4632      	mov	r2, r6
 800ad4a:	4641      	mov	r1, r8
 800ad4c:	6820      	ldr	r0, [r4, #0]
 800ad4e:	f7ff fdbe 	bl	800a8ce <memmove>
 800ad52:	68a3      	ldr	r3, [r4, #8]
 800ad54:	2000      	movs	r0, #0
 800ad56:	1b9b      	subs	r3, r3, r6
 800ad58:	60a3      	str	r3, [r4, #8]
 800ad5a:	6823      	ldr	r3, [r4, #0]
 800ad5c:	441e      	add	r6, r3
 800ad5e:	6026      	str	r6, [r4, #0]
 800ad60:	e7dc      	b.n	800ad1c <__ssputs_r+0x58>
 800ad62:	462a      	mov	r2, r5
 800ad64:	f000 faf4 	bl	800b350 <_realloc_r>
 800ad68:	4606      	mov	r6, r0
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d1e2      	bne.n	800ad34 <__ssputs_r+0x70>
 800ad6e:	6921      	ldr	r1, [r4, #16]
 800ad70:	4650      	mov	r0, sl
 800ad72:	f000 faa1 	bl	800b2b8 <_free_r>
 800ad76:	e7c8      	b.n	800ad0a <__ssputs_r+0x46>

0800ad78 <_svfiprintf_r>:
 800ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7c:	461d      	mov	r5, r3
 800ad7e:	898b      	ldrh	r3, [r1, #12]
 800ad80:	b09d      	sub	sp, #116	; 0x74
 800ad82:	061f      	lsls	r7, r3, #24
 800ad84:	4680      	mov	r8, r0
 800ad86:	460c      	mov	r4, r1
 800ad88:	4616      	mov	r6, r2
 800ad8a:	d50f      	bpl.n	800adac <_svfiprintf_r+0x34>
 800ad8c:	690b      	ldr	r3, [r1, #16]
 800ad8e:	b96b      	cbnz	r3, 800adac <_svfiprintf_r+0x34>
 800ad90:	2140      	movs	r1, #64	; 0x40
 800ad92:	f7ff ff3d 	bl	800ac10 <_malloc_r>
 800ad96:	6020      	str	r0, [r4, #0]
 800ad98:	6120      	str	r0, [r4, #16]
 800ad9a:	b928      	cbnz	r0, 800ada8 <_svfiprintf_r+0x30>
 800ad9c:	230c      	movs	r3, #12
 800ad9e:	f8c8 3000 	str.w	r3, [r8]
 800ada2:	f04f 30ff 	mov.w	r0, #4294967295
 800ada6:	e0c8      	b.n	800af3a <_svfiprintf_r+0x1c2>
 800ada8:	2340      	movs	r3, #64	; 0x40
 800adaa:	6163      	str	r3, [r4, #20]
 800adac:	2300      	movs	r3, #0
 800adae:	9309      	str	r3, [sp, #36]	; 0x24
 800adb0:	2320      	movs	r3, #32
 800adb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adb6:	2330      	movs	r3, #48	; 0x30
 800adb8:	f04f 0b01 	mov.w	fp, #1
 800adbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adc0:	9503      	str	r5, [sp, #12]
 800adc2:	4637      	mov	r7, r6
 800adc4:	463d      	mov	r5, r7
 800adc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800adca:	b10b      	cbz	r3, 800add0 <_svfiprintf_r+0x58>
 800adcc:	2b25      	cmp	r3, #37	; 0x25
 800adce:	d13e      	bne.n	800ae4e <_svfiprintf_r+0xd6>
 800add0:	ebb7 0a06 	subs.w	sl, r7, r6
 800add4:	d00b      	beq.n	800adee <_svfiprintf_r+0x76>
 800add6:	4653      	mov	r3, sl
 800add8:	4632      	mov	r2, r6
 800adda:	4621      	mov	r1, r4
 800addc:	4640      	mov	r0, r8
 800adde:	f7ff ff71 	bl	800acc4 <__ssputs_r>
 800ade2:	3001      	adds	r0, #1
 800ade4:	f000 80a4 	beq.w	800af30 <_svfiprintf_r+0x1b8>
 800ade8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adea:	4453      	add	r3, sl
 800adec:	9309      	str	r3, [sp, #36]	; 0x24
 800adee:	783b      	ldrb	r3, [r7, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 809d 	beq.w	800af30 <_svfiprintf_r+0x1b8>
 800adf6:	2300      	movs	r3, #0
 800adf8:	f04f 32ff 	mov.w	r2, #4294967295
 800adfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae00:	9304      	str	r3, [sp, #16]
 800ae02:	9307      	str	r3, [sp, #28]
 800ae04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae08:	931a      	str	r3, [sp, #104]	; 0x68
 800ae0a:	462f      	mov	r7, r5
 800ae0c:	2205      	movs	r2, #5
 800ae0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ae12:	4850      	ldr	r0, [pc, #320]	; (800af54 <_svfiprintf_r+0x1dc>)
 800ae14:	f000 fa40 	bl	800b298 <memchr>
 800ae18:	9b04      	ldr	r3, [sp, #16]
 800ae1a:	b9d0      	cbnz	r0, 800ae52 <_svfiprintf_r+0xda>
 800ae1c:	06d9      	lsls	r1, r3, #27
 800ae1e:	bf44      	itt	mi
 800ae20:	2220      	movmi	r2, #32
 800ae22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae26:	071a      	lsls	r2, r3, #28
 800ae28:	bf44      	itt	mi
 800ae2a:	222b      	movmi	r2, #43	; 0x2b
 800ae2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae30:	782a      	ldrb	r2, [r5, #0]
 800ae32:	2a2a      	cmp	r2, #42	; 0x2a
 800ae34:	d015      	beq.n	800ae62 <_svfiprintf_r+0xea>
 800ae36:	462f      	mov	r7, r5
 800ae38:	2000      	movs	r0, #0
 800ae3a:	250a      	movs	r5, #10
 800ae3c:	9a07      	ldr	r2, [sp, #28]
 800ae3e:	4639      	mov	r1, r7
 800ae40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae44:	3b30      	subs	r3, #48	; 0x30
 800ae46:	2b09      	cmp	r3, #9
 800ae48:	d94d      	bls.n	800aee6 <_svfiprintf_r+0x16e>
 800ae4a:	b1b8      	cbz	r0, 800ae7c <_svfiprintf_r+0x104>
 800ae4c:	e00f      	b.n	800ae6e <_svfiprintf_r+0xf6>
 800ae4e:	462f      	mov	r7, r5
 800ae50:	e7b8      	b.n	800adc4 <_svfiprintf_r+0x4c>
 800ae52:	4a40      	ldr	r2, [pc, #256]	; (800af54 <_svfiprintf_r+0x1dc>)
 800ae54:	463d      	mov	r5, r7
 800ae56:	1a80      	subs	r0, r0, r2
 800ae58:	fa0b f000 	lsl.w	r0, fp, r0
 800ae5c:	4318      	orrs	r0, r3
 800ae5e:	9004      	str	r0, [sp, #16]
 800ae60:	e7d3      	b.n	800ae0a <_svfiprintf_r+0x92>
 800ae62:	9a03      	ldr	r2, [sp, #12]
 800ae64:	1d11      	adds	r1, r2, #4
 800ae66:	6812      	ldr	r2, [r2, #0]
 800ae68:	9103      	str	r1, [sp, #12]
 800ae6a:	2a00      	cmp	r2, #0
 800ae6c:	db01      	blt.n	800ae72 <_svfiprintf_r+0xfa>
 800ae6e:	9207      	str	r2, [sp, #28]
 800ae70:	e004      	b.n	800ae7c <_svfiprintf_r+0x104>
 800ae72:	4252      	negs	r2, r2
 800ae74:	f043 0302 	orr.w	r3, r3, #2
 800ae78:	9207      	str	r2, [sp, #28]
 800ae7a:	9304      	str	r3, [sp, #16]
 800ae7c:	783b      	ldrb	r3, [r7, #0]
 800ae7e:	2b2e      	cmp	r3, #46	; 0x2e
 800ae80:	d10c      	bne.n	800ae9c <_svfiprintf_r+0x124>
 800ae82:	787b      	ldrb	r3, [r7, #1]
 800ae84:	2b2a      	cmp	r3, #42	; 0x2a
 800ae86:	d133      	bne.n	800aef0 <_svfiprintf_r+0x178>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	3702      	adds	r7, #2
 800ae8c:	1d1a      	adds	r2, r3, #4
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	9203      	str	r2, [sp, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	bfb8      	it	lt
 800ae96:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae9a:	9305      	str	r3, [sp, #20]
 800ae9c:	4d2e      	ldr	r5, [pc, #184]	; (800af58 <_svfiprintf_r+0x1e0>)
 800ae9e:	2203      	movs	r2, #3
 800aea0:	7839      	ldrb	r1, [r7, #0]
 800aea2:	4628      	mov	r0, r5
 800aea4:	f000 f9f8 	bl	800b298 <memchr>
 800aea8:	b138      	cbz	r0, 800aeba <_svfiprintf_r+0x142>
 800aeaa:	2340      	movs	r3, #64	; 0x40
 800aeac:	1b40      	subs	r0, r0, r5
 800aeae:	fa03 f000 	lsl.w	r0, r3, r0
 800aeb2:	9b04      	ldr	r3, [sp, #16]
 800aeb4:	3701      	adds	r7, #1
 800aeb6:	4303      	orrs	r3, r0
 800aeb8:	9304      	str	r3, [sp, #16]
 800aeba:	7839      	ldrb	r1, [r7, #0]
 800aebc:	2206      	movs	r2, #6
 800aebe:	4827      	ldr	r0, [pc, #156]	; (800af5c <_svfiprintf_r+0x1e4>)
 800aec0:	1c7e      	adds	r6, r7, #1
 800aec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aec6:	f000 f9e7 	bl	800b298 <memchr>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d038      	beq.n	800af40 <_svfiprintf_r+0x1c8>
 800aece:	4b24      	ldr	r3, [pc, #144]	; (800af60 <_svfiprintf_r+0x1e8>)
 800aed0:	bb13      	cbnz	r3, 800af18 <_svfiprintf_r+0x1a0>
 800aed2:	9b03      	ldr	r3, [sp, #12]
 800aed4:	3307      	adds	r3, #7
 800aed6:	f023 0307 	bic.w	r3, r3, #7
 800aeda:	3308      	adds	r3, #8
 800aedc:	9303      	str	r3, [sp, #12]
 800aede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee0:	444b      	add	r3, r9
 800aee2:	9309      	str	r3, [sp, #36]	; 0x24
 800aee4:	e76d      	b.n	800adc2 <_svfiprintf_r+0x4a>
 800aee6:	fb05 3202 	mla	r2, r5, r2, r3
 800aeea:	2001      	movs	r0, #1
 800aeec:	460f      	mov	r7, r1
 800aeee:	e7a6      	b.n	800ae3e <_svfiprintf_r+0xc6>
 800aef0:	2300      	movs	r3, #0
 800aef2:	250a      	movs	r5, #10
 800aef4:	4619      	mov	r1, r3
 800aef6:	3701      	adds	r7, #1
 800aef8:	9305      	str	r3, [sp, #20]
 800aefa:	4638      	mov	r0, r7
 800aefc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af00:	3a30      	subs	r2, #48	; 0x30
 800af02:	2a09      	cmp	r2, #9
 800af04:	d903      	bls.n	800af0e <_svfiprintf_r+0x196>
 800af06:	2b00      	cmp	r3, #0
 800af08:	d0c8      	beq.n	800ae9c <_svfiprintf_r+0x124>
 800af0a:	9105      	str	r1, [sp, #20]
 800af0c:	e7c6      	b.n	800ae9c <_svfiprintf_r+0x124>
 800af0e:	fb05 2101 	mla	r1, r5, r1, r2
 800af12:	2301      	movs	r3, #1
 800af14:	4607      	mov	r7, r0
 800af16:	e7f0      	b.n	800aefa <_svfiprintf_r+0x182>
 800af18:	ab03      	add	r3, sp, #12
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	4622      	mov	r2, r4
 800af1e:	4b11      	ldr	r3, [pc, #68]	; (800af64 <_svfiprintf_r+0x1ec>)
 800af20:	a904      	add	r1, sp, #16
 800af22:	4640      	mov	r0, r8
 800af24:	f3af 8000 	nop.w
 800af28:	f1b0 3fff 	cmp.w	r0, #4294967295
 800af2c:	4681      	mov	r9, r0
 800af2e:	d1d6      	bne.n	800aede <_svfiprintf_r+0x166>
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	065b      	lsls	r3, r3, #25
 800af34:	f53f af35 	bmi.w	800ada2 <_svfiprintf_r+0x2a>
 800af38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af3a:	b01d      	add	sp, #116	; 0x74
 800af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af40:	ab03      	add	r3, sp, #12
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	4622      	mov	r2, r4
 800af46:	4b07      	ldr	r3, [pc, #28]	; (800af64 <_svfiprintf_r+0x1ec>)
 800af48:	a904      	add	r1, sp, #16
 800af4a:	4640      	mov	r0, r8
 800af4c:	f000 f882 	bl	800b054 <_printf_i>
 800af50:	e7ea      	b.n	800af28 <_svfiprintf_r+0x1b0>
 800af52:	bf00      	nop
 800af54:	0800ce31 	.word	0x0800ce31
 800af58:	0800ce37 	.word	0x0800ce37
 800af5c:	0800ce3b 	.word	0x0800ce3b
 800af60:	00000000 	.word	0x00000000
 800af64:	0800acc5 	.word	0x0800acc5

0800af68 <_printf_common>:
 800af68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af6c:	4691      	mov	r9, r2
 800af6e:	461f      	mov	r7, r3
 800af70:	688a      	ldr	r2, [r1, #8]
 800af72:	690b      	ldr	r3, [r1, #16]
 800af74:	4606      	mov	r6, r0
 800af76:	4293      	cmp	r3, r2
 800af78:	bfb8      	it	lt
 800af7a:	4613      	movlt	r3, r2
 800af7c:	f8c9 3000 	str.w	r3, [r9]
 800af80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af84:	460c      	mov	r4, r1
 800af86:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af8a:	b112      	cbz	r2, 800af92 <_printf_common+0x2a>
 800af8c:	3301      	adds	r3, #1
 800af8e:	f8c9 3000 	str.w	r3, [r9]
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	0699      	lsls	r1, r3, #26
 800af96:	bf42      	ittt	mi
 800af98:	f8d9 3000 	ldrmi.w	r3, [r9]
 800af9c:	3302      	addmi	r3, #2
 800af9e:	f8c9 3000 	strmi.w	r3, [r9]
 800afa2:	6825      	ldr	r5, [r4, #0]
 800afa4:	f015 0506 	ands.w	r5, r5, #6
 800afa8:	d107      	bne.n	800afba <_printf_common+0x52>
 800afaa:	f104 0a19 	add.w	sl, r4, #25
 800afae:	68e3      	ldr	r3, [r4, #12]
 800afb0:	f8d9 2000 	ldr.w	r2, [r9]
 800afb4:	1a9b      	subs	r3, r3, r2
 800afb6:	42ab      	cmp	r3, r5
 800afb8:	dc29      	bgt.n	800b00e <_printf_common+0xa6>
 800afba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800afbe:	6822      	ldr	r2, [r4, #0]
 800afc0:	3300      	adds	r3, #0
 800afc2:	bf18      	it	ne
 800afc4:	2301      	movne	r3, #1
 800afc6:	0692      	lsls	r2, r2, #26
 800afc8:	d42e      	bmi.n	800b028 <_printf_common+0xc0>
 800afca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afce:	4639      	mov	r1, r7
 800afd0:	4630      	mov	r0, r6
 800afd2:	47c0      	blx	r8
 800afd4:	3001      	adds	r0, #1
 800afd6:	d021      	beq.n	800b01c <_printf_common+0xb4>
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	68e5      	ldr	r5, [r4, #12]
 800afdc:	f003 0306 	and.w	r3, r3, #6
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	bf18      	it	ne
 800afe4:	2500      	movne	r5, #0
 800afe6:	f8d9 2000 	ldr.w	r2, [r9]
 800afea:	f04f 0900 	mov.w	r9, #0
 800afee:	bf08      	it	eq
 800aff0:	1aad      	subeq	r5, r5, r2
 800aff2:	68a3      	ldr	r3, [r4, #8]
 800aff4:	6922      	ldr	r2, [r4, #16]
 800aff6:	bf08      	it	eq
 800aff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800affc:	4293      	cmp	r3, r2
 800affe:	bfc4      	itt	gt
 800b000:	1a9b      	subgt	r3, r3, r2
 800b002:	18ed      	addgt	r5, r5, r3
 800b004:	341a      	adds	r4, #26
 800b006:	454d      	cmp	r5, r9
 800b008:	d11a      	bne.n	800b040 <_printf_common+0xd8>
 800b00a:	2000      	movs	r0, #0
 800b00c:	e008      	b.n	800b020 <_printf_common+0xb8>
 800b00e:	2301      	movs	r3, #1
 800b010:	4652      	mov	r2, sl
 800b012:	4639      	mov	r1, r7
 800b014:	4630      	mov	r0, r6
 800b016:	47c0      	blx	r8
 800b018:	3001      	adds	r0, #1
 800b01a:	d103      	bne.n	800b024 <_printf_common+0xbc>
 800b01c:	f04f 30ff 	mov.w	r0, #4294967295
 800b020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b024:	3501      	adds	r5, #1
 800b026:	e7c2      	b.n	800afae <_printf_common+0x46>
 800b028:	2030      	movs	r0, #48	; 0x30
 800b02a:	18e1      	adds	r1, r4, r3
 800b02c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b030:	1c5a      	adds	r2, r3, #1
 800b032:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b036:	4422      	add	r2, r4
 800b038:	3302      	adds	r3, #2
 800b03a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b03e:	e7c4      	b.n	800afca <_printf_common+0x62>
 800b040:	2301      	movs	r3, #1
 800b042:	4622      	mov	r2, r4
 800b044:	4639      	mov	r1, r7
 800b046:	4630      	mov	r0, r6
 800b048:	47c0      	blx	r8
 800b04a:	3001      	adds	r0, #1
 800b04c:	d0e6      	beq.n	800b01c <_printf_common+0xb4>
 800b04e:	f109 0901 	add.w	r9, r9, #1
 800b052:	e7d8      	b.n	800b006 <_printf_common+0x9e>

0800b054 <_printf_i>:
 800b054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b058:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b05c:	460c      	mov	r4, r1
 800b05e:	7e09      	ldrb	r1, [r1, #24]
 800b060:	b085      	sub	sp, #20
 800b062:	296e      	cmp	r1, #110	; 0x6e
 800b064:	4617      	mov	r7, r2
 800b066:	4606      	mov	r6, r0
 800b068:	4698      	mov	r8, r3
 800b06a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b06c:	f000 80b3 	beq.w	800b1d6 <_printf_i+0x182>
 800b070:	d822      	bhi.n	800b0b8 <_printf_i+0x64>
 800b072:	2963      	cmp	r1, #99	; 0x63
 800b074:	d036      	beq.n	800b0e4 <_printf_i+0x90>
 800b076:	d80a      	bhi.n	800b08e <_printf_i+0x3a>
 800b078:	2900      	cmp	r1, #0
 800b07a:	f000 80b9 	beq.w	800b1f0 <_printf_i+0x19c>
 800b07e:	2958      	cmp	r1, #88	; 0x58
 800b080:	f000 8083 	beq.w	800b18a <_printf_i+0x136>
 800b084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b088:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b08c:	e032      	b.n	800b0f4 <_printf_i+0xa0>
 800b08e:	2964      	cmp	r1, #100	; 0x64
 800b090:	d001      	beq.n	800b096 <_printf_i+0x42>
 800b092:	2969      	cmp	r1, #105	; 0x69
 800b094:	d1f6      	bne.n	800b084 <_printf_i+0x30>
 800b096:	6820      	ldr	r0, [r4, #0]
 800b098:	6813      	ldr	r3, [r2, #0]
 800b09a:	0605      	lsls	r5, r0, #24
 800b09c:	f103 0104 	add.w	r1, r3, #4
 800b0a0:	d52a      	bpl.n	800b0f8 <_printf_i+0xa4>
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6011      	str	r1, [r2, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	da03      	bge.n	800b0b2 <_printf_i+0x5e>
 800b0aa:	222d      	movs	r2, #45	; 0x2d
 800b0ac:	425b      	negs	r3, r3
 800b0ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b0b2:	486f      	ldr	r0, [pc, #444]	; (800b270 <_printf_i+0x21c>)
 800b0b4:	220a      	movs	r2, #10
 800b0b6:	e039      	b.n	800b12c <_printf_i+0xd8>
 800b0b8:	2973      	cmp	r1, #115	; 0x73
 800b0ba:	f000 809d 	beq.w	800b1f8 <_printf_i+0x1a4>
 800b0be:	d808      	bhi.n	800b0d2 <_printf_i+0x7e>
 800b0c0:	296f      	cmp	r1, #111	; 0x6f
 800b0c2:	d020      	beq.n	800b106 <_printf_i+0xb2>
 800b0c4:	2970      	cmp	r1, #112	; 0x70
 800b0c6:	d1dd      	bne.n	800b084 <_printf_i+0x30>
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	f043 0320 	orr.w	r3, r3, #32
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	e003      	b.n	800b0da <_printf_i+0x86>
 800b0d2:	2975      	cmp	r1, #117	; 0x75
 800b0d4:	d017      	beq.n	800b106 <_printf_i+0xb2>
 800b0d6:	2978      	cmp	r1, #120	; 0x78
 800b0d8:	d1d4      	bne.n	800b084 <_printf_i+0x30>
 800b0da:	2378      	movs	r3, #120	; 0x78
 800b0dc:	4865      	ldr	r0, [pc, #404]	; (800b274 <_printf_i+0x220>)
 800b0de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0e2:	e055      	b.n	800b190 <_printf_i+0x13c>
 800b0e4:	6813      	ldr	r3, [r2, #0]
 800b0e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0ea:	1d19      	adds	r1, r3, #4
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6011      	str	r1, [r2, #0]
 800b0f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e08c      	b.n	800b212 <_printf_i+0x1be>
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0fe:	6011      	str	r1, [r2, #0]
 800b100:	bf18      	it	ne
 800b102:	b21b      	sxthne	r3, r3
 800b104:	e7cf      	b.n	800b0a6 <_printf_i+0x52>
 800b106:	6813      	ldr	r3, [r2, #0]
 800b108:	6825      	ldr	r5, [r4, #0]
 800b10a:	1d18      	adds	r0, r3, #4
 800b10c:	6010      	str	r0, [r2, #0]
 800b10e:	0628      	lsls	r0, r5, #24
 800b110:	d501      	bpl.n	800b116 <_printf_i+0xc2>
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	e002      	b.n	800b11c <_printf_i+0xc8>
 800b116:	0668      	lsls	r0, r5, #25
 800b118:	d5fb      	bpl.n	800b112 <_printf_i+0xbe>
 800b11a:	881b      	ldrh	r3, [r3, #0]
 800b11c:	296f      	cmp	r1, #111	; 0x6f
 800b11e:	bf14      	ite	ne
 800b120:	220a      	movne	r2, #10
 800b122:	2208      	moveq	r2, #8
 800b124:	4852      	ldr	r0, [pc, #328]	; (800b270 <_printf_i+0x21c>)
 800b126:	2100      	movs	r1, #0
 800b128:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b12c:	6865      	ldr	r5, [r4, #4]
 800b12e:	2d00      	cmp	r5, #0
 800b130:	60a5      	str	r5, [r4, #8]
 800b132:	f2c0 8095 	blt.w	800b260 <_printf_i+0x20c>
 800b136:	6821      	ldr	r1, [r4, #0]
 800b138:	f021 0104 	bic.w	r1, r1, #4
 800b13c:	6021      	str	r1, [r4, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d13d      	bne.n	800b1be <_printf_i+0x16a>
 800b142:	2d00      	cmp	r5, #0
 800b144:	f040 808e 	bne.w	800b264 <_printf_i+0x210>
 800b148:	4665      	mov	r5, ip
 800b14a:	2a08      	cmp	r2, #8
 800b14c:	d10b      	bne.n	800b166 <_printf_i+0x112>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	07db      	lsls	r3, r3, #31
 800b152:	d508      	bpl.n	800b166 <_printf_i+0x112>
 800b154:	6923      	ldr	r3, [r4, #16]
 800b156:	6862      	ldr	r2, [r4, #4]
 800b158:	429a      	cmp	r2, r3
 800b15a:	bfde      	ittt	le
 800b15c:	2330      	movle	r3, #48	; 0x30
 800b15e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b162:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b166:	ebac 0305 	sub.w	r3, ip, r5
 800b16a:	6123      	str	r3, [r4, #16]
 800b16c:	f8cd 8000 	str.w	r8, [sp]
 800b170:	463b      	mov	r3, r7
 800b172:	aa03      	add	r2, sp, #12
 800b174:	4621      	mov	r1, r4
 800b176:	4630      	mov	r0, r6
 800b178:	f7ff fef6 	bl	800af68 <_printf_common>
 800b17c:	3001      	adds	r0, #1
 800b17e:	d14d      	bne.n	800b21c <_printf_i+0x1c8>
 800b180:	f04f 30ff 	mov.w	r0, #4294967295
 800b184:	b005      	add	sp, #20
 800b186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b18a:	4839      	ldr	r0, [pc, #228]	; (800b270 <_printf_i+0x21c>)
 800b18c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b190:	6813      	ldr	r3, [r2, #0]
 800b192:	6821      	ldr	r1, [r4, #0]
 800b194:	1d1d      	adds	r5, r3, #4
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	6015      	str	r5, [r2, #0]
 800b19a:	060a      	lsls	r2, r1, #24
 800b19c:	d50b      	bpl.n	800b1b6 <_printf_i+0x162>
 800b19e:	07ca      	lsls	r2, r1, #31
 800b1a0:	bf44      	itt	mi
 800b1a2:	f041 0120 	orrmi.w	r1, r1, #32
 800b1a6:	6021      	strmi	r1, [r4, #0]
 800b1a8:	b91b      	cbnz	r3, 800b1b2 <_printf_i+0x15e>
 800b1aa:	6822      	ldr	r2, [r4, #0]
 800b1ac:	f022 0220 	bic.w	r2, r2, #32
 800b1b0:	6022      	str	r2, [r4, #0]
 800b1b2:	2210      	movs	r2, #16
 800b1b4:	e7b7      	b.n	800b126 <_printf_i+0xd2>
 800b1b6:	064d      	lsls	r5, r1, #25
 800b1b8:	bf48      	it	mi
 800b1ba:	b29b      	uxthmi	r3, r3
 800b1bc:	e7ef      	b.n	800b19e <_printf_i+0x14a>
 800b1be:	4665      	mov	r5, ip
 800b1c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1c4:	fb02 3311 	mls	r3, r2, r1, r3
 800b1c8:	5cc3      	ldrb	r3, [r0, r3]
 800b1ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	2900      	cmp	r1, #0
 800b1d2:	d1f5      	bne.n	800b1c0 <_printf_i+0x16c>
 800b1d4:	e7b9      	b.n	800b14a <_printf_i+0xf6>
 800b1d6:	6813      	ldr	r3, [r2, #0]
 800b1d8:	6825      	ldr	r5, [r4, #0]
 800b1da:	1d18      	adds	r0, r3, #4
 800b1dc:	6961      	ldr	r1, [r4, #20]
 800b1de:	6010      	str	r0, [r2, #0]
 800b1e0:	0628      	lsls	r0, r5, #24
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	d501      	bpl.n	800b1ea <_printf_i+0x196>
 800b1e6:	6019      	str	r1, [r3, #0]
 800b1e8:	e002      	b.n	800b1f0 <_printf_i+0x19c>
 800b1ea:	066a      	lsls	r2, r5, #25
 800b1ec:	d5fb      	bpl.n	800b1e6 <_printf_i+0x192>
 800b1ee:	8019      	strh	r1, [r3, #0]
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4665      	mov	r5, ip
 800b1f4:	6123      	str	r3, [r4, #16]
 800b1f6:	e7b9      	b.n	800b16c <_printf_i+0x118>
 800b1f8:	6813      	ldr	r3, [r2, #0]
 800b1fa:	1d19      	adds	r1, r3, #4
 800b1fc:	6011      	str	r1, [r2, #0]
 800b1fe:	681d      	ldr	r5, [r3, #0]
 800b200:	6862      	ldr	r2, [r4, #4]
 800b202:	2100      	movs	r1, #0
 800b204:	4628      	mov	r0, r5
 800b206:	f000 f847 	bl	800b298 <memchr>
 800b20a:	b108      	cbz	r0, 800b210 <_printf_i+0x1bc>
 800b20c:	1b40      	subs	r0, r0, r5
 800b20e:	6060      	str	r0, [r4, #4]
 800b210:	6863      	ldr	r3, [r4, #4]
 800b212:	6123      	str	r3, [r4, #16]
 800b214:	2300      	movs	r3, #0
 800b216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b21a:	e7a7      	b.n	800b16c <_printf_i+0x118>
 800b21c:	6923      	ldr	r3, [r4, #16]
 800b21e:	462a      	mov	r2, r5
 800b220:	4639      	mov	r1, r7
 800b222:	4630      	mov	r0, r6
 800b224:	47c0      	blx	r8
 800b226:	3001      	adds	r0, #1
 800b228:	d0aa      	beq.n	800b180 <_printf_i+0x12c>
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	079b      	lsls	r3, r3, #30
 800b22e:	d413      	bmi.n	800b258 <_printf_i+0x204>
 800b230:	68e0      	ldr	r0, [r4, #12]
 800b232:	9b03      	ldr	r3, [sp, #12]
 800b234:	4298      	cmp	r0, r3
 800b236:	bfb8      	it	lt
 800b238:	4618      	movlt	r0, r3
 800b23a:	e7a3      	b.n	800b184 <_printf_i+0x130>
 800b23c:	2301      	movs	r3, #1
 800b23e:	464a      	mov	r2, r9
 800b240:	4639      	mov	r1, r7
 800b242:	4630      	mov	r0, r6
 800b244:	47c0      	blx	r8
 800b246:	3001      	adds	r0, #1
 800b248:	d09a      	beq.n	800b180 <_printf_i+0x12c>
 800b24a:	3501      	adds	r5, #1
 800b24c:	68e3      	ldr	r3, [r4, #12]
 800b24e:	9a03      	ldr	r2, [sp, #12]
 800b250:	1a9b      	subs	r3, r3, r2
 800b252:	42ab      	cmp	r3, r5
 800b254:	dcf2      	bgt.n	800b23c <_printf_i+0x1e8>
 800b256:	e7eb      	b.n	800b230 <_printf_i+0x1dc>
 800b258:	2500      	movs	r5, #0
 800b25a:	f104 0919 	add.w	r9, r4, #25
 800b25e:	e7f5      	b.n	800b24c <_printf_i+0x1f8>
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1ac      	bne.n	800b1be <_printf_i+0x16a>
 800b264:	7803      	ldrb	r3, [r0, #0]
 800b266:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b26a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b26e:	e76c      	b.n	800b14a <_printf_i+0xf6>
 800b270:	0800cd0a 	.word	0x0800cd0a
 800b274:	0800ce42 	.word	0x0800ce42

0800b278 <_sbrk_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	2300      	movs	r3, #0
 800b27c:	4c05      	ldr	r4, [pc, #20]	; (800b294 <_sbrk_r+0x1c>)
 800b27e:	4605      	mov	r5, r0
 800b280:	4608      	mov	r0, r1
 800b282:	6023      	str	r3, [r4, #0]
 800b284:	f7f6 fb9e 	bl	80019c4 <_sbrk>
 800b288:	1c43      	adds	r3, r0, #1
 800b28a:	d102      	bne.n	800b292 <_sbrk_r+0x1a>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	b103      	cbz	r3, 800b292 <_sbrk_r+0x1a>
 800b290:	602b      	str	r3, [r5, #0]
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	20004670 	.word	0x20004670

0800b298 <memchr>:
 800b298:	b510      	push	{r4, lr}
 800b29a:	b2c9      	uxtb	r1, r1
 800b29c:	4402      	add	r2, r0
 800b29e:	4290      	cmp	r0, r2
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	d101      	bne.n	800b2a8 <memchr+0x10>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	e003      	b.n	800b2b0 <memchr+0x18>
 800b2a8:	781c      	ldrb	r4, [r3, #0]
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	428c      	cmp	r4, r1
 800b2ae:	d1f6      	bne.n	800b29e <memchr+0x6>
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	bd10      	pop	{r4, pc}

0800b2b4 <__malloc_lock>:
 800b2b4:	4770      	bx	lr

0800b2b6 <__malloc_unlock>:
 800b2b6:	4770      	bx	lr

0800b2b8 <_free_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	2900      	cmp	r1, #0
 800b2be:	d043      	beq.n	800b348 <_free_r+0x90>
 800b2c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2c4:	1f0c      	subs	r4, r1, #4
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	bfb8      	it	lt
 800b2ca:	18e4      	addlt	r4, r4, r3
 800b2cc:	f7ff fff2 	bl	800b2b4 <__malloc_lock>
 800b2d0:	4a1e      	ldr	r2, [pc, #120]	; (800b34c <_free_r+0x94>)
 800b2d2:	6813      	ldr	r3, [r2, #0]
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	b933      	cbnz	r3, 800b2e6 <_free_r+0x2e>
 800b2d8:	6063      	str	r3, [r4, #4]
 800b2da:	6014      	str	r4, [r2, #0]
 800b2dc:	4628      	mov	r0, r5
 800b2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2e2:	f7ff bfe8 	b.w	800b2b6 <__malloc_unlock>
 800b2e6:	42a3      	cmp	r3, r4
 800b2e8:	d90b      	bls.n	800b302 <_free_r+0x4a>
 800b2ea:	6821      	ldr	r1, [r4, #0]
 800b2ec:	1862      	adds	r2, r4, r1
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	bf01      	itttt	eq
 800b2f2:	681a      	ldreq	r2, [r3, #0]
 800b2f4:	685b      	ldreq	r3, [r3, #4]
 800b2f6:	1852      	addeq	r2, r2, r1
 800b2f8:	6022      	streq	r2, [r4, #0]
 800b2fa:	6063      	str	r3, [r4, #4]
 800b2fc:	6004      	str	r4, [r0, #0]
 800b2fe:	e7ed      	b.n	800b2dc <_free_r+0x24>
 800b300:	4613      	mov	r3, r2
 800b302:	685a      	ldr	r2, [r3, #4]
 800b304:	b10a      	cbz	r2, 800b30a <_free_r+0x52>
 800b306:	42a2      	cmp	r2, r4
 800b308:	d9fa      	bls.n	800b300 <_free_r+0x48>
 800b30a:	6819      	ldr	r1, [r3, #0]
 800b30c:	1858      	adds	r0, r3, r1
 800b30e:	42a0      	cmp	r0, r4
 800b310:	d10b      	bne.n	800b32a <_free_r+0x72>
 800b312:	6820      	ldr	r0, [r4, #0]
 800b314:	4401      	add	r1, r0
 800b316:	1858      	adds	r0, r3, r1
 800b318:	4282      	cmp	r2, r0
 800b31a:	6019      	str	r1, [r3, #0]
 800b31c:	d1de      	bne.n	800b2dc <_free_r+0x24>
 800b31e:	6810      	ldr	r0, [r2, #0]
 800b320:	6852      	ldr	r2, [r2, #4]
 800b322:	4401      	add	r1, r0
 800b324:	6019      	str	r1, [r3, #0]
 800b326:	605a      	str	r2, [r3, #4]
 800b328:	e7d8      	b.n	800b2dc <_free_r+0x24>
 800b32a:	d902      	bls.n	800b332 <_free_r+0x7a>
 800b32c:	230c      	movs	r3, #12
 800b32e:	602b      	str	r3, [r5, #0]
 800b330:	e7d4      	b.n	800b2dc <_free_r+0x24>
 800b332:	6820      	ldr	r0, [r4, #0]
 800b334:	1821      	adds	r1, r4, r0
 800b336:	428a      	cmp	r2, r1
 800b338:	bf01      	itttt	eq
 800b33a:	6811      	ldreq	r1, [r2, #0]
 800b33c:	6852      	ldreq	r2, [r2, #4]
 800b33e:	1809      	addeq	r1, r1, r0
 800b340:	6021      	streq	r1, [r4, #0]
 800b342:	6062      	str	r2, [r4, #4]
 800b344:	605c      	str	r4, [r3, #4]
 800b346:	e7c9      	b.n	800b2dc <_free_r+0x24>
 800b348:	bd38      	pop	{r3, r4, r5, pc}
 800b34a:	bf00      	nop
 800b34c:	200007f8 	.word	0x200007f8

0800b350 <_realloc_r>:
 800b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b352:	4607      	mov	r7, r0
 800b354:	4614      	mov	r4, r2
 800b356:	460e      	mov	r6, r1
 800b358:	b921      	cbnz	r1, 800b364 <_realloc_r+0x14>
 800b35a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b35e:	4611      	mov	r1, r2
 800b360:	f7ff bc56 	b.w	800ac10 <_malloc_r>
 800b364:	b922      	cbnz	r2, 800b370 <_realloc_r+0x20>
 800b366:	f7ff ffa7 	bl	800b2b8 <_free_r>
 800b36a:	4625      	mov	r5, r4
 800b36c:	4628      	mov	r0, r5
 800b36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b370:	f000 f814 	bl	800b39c <_malloc_usable_size_r>
 800b374:	42a0      	cmp	r0, r4
 800b376:	d20f      	bcs.n	800b398 <_realloc_r+0x48>
 800b378:	4621      	mov	r1, r4
 800b37a:	4638      	mov	r0, r7
 800b37c:	f7ff fc48 	bl	800ac10 <_malloc_r>
 800b380:	4605      	mov	r5, r0
 800b382:	2800      	cmp	r0, #0
 800b384:	d0f2      	beq.n	800b36c <_realloc_r+0x1c>
 800b386:	4631      	mov	r1, r6
 800b388:	4622      	mov	r2, r4
 800b38a:	f7ff fa95 	bl	800a8b8 <memcpy>
 800b38e:	4631      	mov	r1, r6
 800b390:	4638      	mov	r0, r7
 800b392:	f7ff ff91 	bl	800b2b8 <_free_r>
 800b396:	e7e9      	b.n	800b36c <_realloc_r+0x1c>
 800b398:	4635      	mov	r5, r6
 800b39a:	e7e7      	b.n	800b36c <_realloc_r+0x1c>

0800b39c <_malloc_usable_size_r>:
 800b39c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3a0:	1f18      	subs	r0, r3, #4
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	bfbc      	itt	lt
 800b3a6:	580b      	ldrlt	r3, [r1, r0]
 800b3a8:	18c0      	addlt	r0, r0, r3
 800b3aa:	4770      	bx	lr

0800b3ac <pow>:
 800b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b0:	b08f      	sub	sp, #60	; 0x3c
 800b3b2:	461d      	mov	r5, r3
 800b3b4:	4680      	mov	r8, r0
 800b3b6:	4689      	mov	r9, r1
 800b3b8:	4614      	mov	r4, r2
 800b3ba:	f000 f955 	bl	800b668 <__ieee754_pow>
 800b3be:	4fa1      	ldr	r7, [pc, #644]	; (800b644 <pow+0x298>)
 800b3c0:	e9cd 0100 	strd	r0, r1, [sp]
 800b3c4:	f997 3000 	ldrsb.w	r3, [r7]
 800b3c8:	463e      	mov	r6, r7
 800b3ca:	9302      	str	r3, [sp, #8]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	d05f      	beq.n	800b490 <pow+0xe4>
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	462b      	mov	r3, r5
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	f7f5 fb22 	bl	8000a20 <__aeabi_dcmpun>
 800b3dc:	4682      	mov	sl, r0
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d156      	bne.n	800b490 <pow+0xe4>
 800b3e2:	4642      	mov	r2, r8
 800b3e4:	464b      	mov	r3, r9
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	f7f5 fb19 	bl	8000a20 <__aeabi_dcmpun>
 800b3ee:	9003      	str	r0, [sp, #12]
 800b3f0:	b1e8      	cbz	r0, 800b42e <pow+0x82>
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	f7f5 fadf 	bl	80009bc <__aeabi_dcmpeq>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d046      	beq.n	800b490 <pow+0xe4>
 800b402:	2301      	movs	r3, #1
 800b404:	2200      	movs	r2, #0
 800b406:	9304      	str	r3, [sp, #16]
 800b408:	4b8f      	ldr	r3, [pc, #572]	; (800b648 <pow+0x29c>)
 800b40a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800b40e:	9305      	str	r3, [sp, #20]
 800b410:	4b8e      	ldr	r3, [pc, #568]	; (800b64c <pow+0x2a0>)
 800b412:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b416:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b41a:	9b02      	ldr	r3, [sp, #8]
 800b41c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b420:	2b02      	cmp	r3, #2
 800b422:	d031      	beq.n	800b488 <pow+0xdc>
 800b424:	a804      	add	r0, sp, #16
 800b426:	f000 fedf 	bl	800c1e8 <matherr>
 800b42a:	bb38      	cbnz	r0, 800b47c <pow+0xd0>
 800b42c:	e058      	b.n	800b4e0 <pow+0x134>
 800b42e:	f04f 0a00 	mov.w	sl, #0
 800b432:	f04f 0b00 	mov.w	fp, #0
 800b436:	4652      	mov	r2, sl
 800b438:	465b      	mov	r3, fp
 800b43a:	4640      	mov	r0, r8
 800b43c:	4649      	mov	r1, r9
 800b43e:	f7f5 fabd 	bl	80009bc <__aeabi_dcmpeq>
 800b442:	2800      	cmp	r0, #0
 800b444:	d051      	beq.n	800b4ea <pow+0x13e>
 800b446:	4652      	mov	r2, sl
 800b448:	465b      	mov	r3, fp
 800b44a:	4620      	mov	r0, r4
 800b44c:	4629      	mov	r1, r5
 800b44e:	f7f5 fab5 	bl	80009bc <__aeabi_dcmpeq>
 800b452:	4606      	mov	r6, r0
 800b454:	b308      	cbz	r0, 800b49a <pow+0xee>
 800b456:	2301      	movs	r3, #1
 800b458:	9304      	str	r3, [sp, #16]
 800b45a:	4b7b      	ldr	r3, [pc, #492]	; (800b648 <pow+0x29c>)
 800b45c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b460:	9305      	str	r3, [sp, #20]
 800b462:	9b03      	ldr	r3, [sp, #12]
 800b464:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b468:	930c      	str	r3, [sp, #48]	; 0x30
 800b46a:	9b02      	ldr	r3, [sp, #8]
 800b46c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b470:	2b00      	cmp	r3, #0
 800b472:	d0d7      	beq.n	800b424 <pow+0x78>
 800b474:	2200      	movs	r2, #0
 800b476:	4b75      	ldr	r3, [pc, #468]	; (800b64c <pow+0x2a0>)
 800b478:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b47c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b47e:	b11b      	cbz	r3, 800b488 <pow+0xdc>
 800b480:	f7ff f9cc 	bl	800a81c <__errno>
 800b484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b486:	6003      	str	r3, [r0, #0]
 800b488:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800b48c:	e9cd 3400 	strd	r3, r4, [sp]
 800b490:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b494:	b00f      	add	sp, #60	; 0x3c
 800b496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49a:	4620      	mov	r0, r4
 800b49c:	4629      	mov	r1, r5
 800b49e:	f000 fe9d 	bl	800c1dc <finite>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d0f4      	beq.n	800b490 <pow+0xe4>
 800b4a6:	4652      	mov	r2, sl
 800b4a8:	465b      	mov	r3, fp
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	f7f5 fa8f 	bl	80009d0 <__aeabi_dcmplt>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d0ec      	beq.n	800b490 <pow+0xe4>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	9304      	str	r3, [sp, #16]
 800b4ba:	4b63      	ldr	r3, [pc, #396]	; (800b648 <pow+0x29c>)
 800b4bc:	960c      	str	r6, [sp, #48]	; 0x30
 800b4be:	9305      	str	r3, [sp, #20]
 800b4c0:	f997 3000 	ldrsb.w	r3, [r7]
 800b4c4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b4c8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b4cc:	b913      	cbnz	r3, 800b4d4 <pow+0x128>
 800b4ce:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b4d2:	e7a7      	b.n	800b424 <pow+0x78>
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	495e      	ldr	r1, [pc, #376]	; (800b650 <pow+0x2a4>)
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b4de:	d1a1      	bne.n	800b424 <pow+0x78>
 800b4e0:	f7ff f99c 	bl	800a81c <__errno>
 800b4e4:	2321      	movs	r3, #33	; 0x21
 800b4e6:	6003      	str	r3, [r0, #0]
 800b4e8:	e7c8      	b.n	800b47c <pow+0xd0>
 800b4ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4ee:	f000 fe75 	bl	800c1dc <finite>
 800b4f2:	9002      	str	r0, [sp, #8]
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d177      	bne.n	800b5e8 <pow+0x23c>
 800b4f8:	4640      	mov	r0, r8
 800b4fa:	4649      	mov	r1, r9
 800b4fc:	f000 fe6e 	bl	800c1dc <finite>
 800b500:	2800      	cmp	r0, #0
 800b502:	d071      	beq.n	800b5e8 <pow+0x23c>
 800b504:	4620      	mov	r0, r4
 800b506:	4629      	mov	r1, r5
 800b508:	f000 fe68 	bl	800c1dc <finite>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d06b      	beq.n	800b5e8 <pow+0x23c>
 800b510:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b514:	4619      	mov	r1, r3
 800b516:	4610      	mov	r0, r2
 800b518:	f7f5 fa82 	bl	8000a20 <__aeabi_dcmpun>
 800b51c:	f997 7000 	ldrsb.w	r7, [r7]
 800b520:	4b49      	ldr	r3, [pc, #292]	; (800b648 <pow+0x29c>)
 800b522:	b1a0      	cbz	r0, 800b54e <pow+0x1a2>
 800b524:	2201      	movs	r2, #1
 800b526:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b52a:	9b02      	ldr	r3, [sp, #8]
 800b52c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b530:	930c      	str	r3, [sp, #48]	; 0x30
 800b532:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b536:	2f00      	cmp	r7, #0
 800b538:	d0c9      	beq.n	800b4ce <pow+0x122>
 800b53a:	4652      	mov	r2, sl
 800b53c:	465b      	mov	r3, fp
 800b53e:	4650      	mov	r0, sl
 800b540:	4659      	mov	r1, fp
 800b542:	f7f5 f8fd 	bl	8000740 <__aeabi_ddiv>
 800b546:	2f02      	cmp	r7, #2
 800b548:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b54c:	e7c7      	b.n	800b4de <pow+0x132>
 800b54e:	2203      	movs	r2, #3
 800b550:	900c      	str	r0, [sp, #48]	; 0x30
 800b552:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b556:	4620      	mov	r0, r4
 800b558:	4629      	mov	r1, r5
 800b55a:	2200      	movs	r2, #0
 800b55c:	4b3d      	ldr	r3, [pc, #244]	; (800b654 <pow+0x2a8>)
 800b55e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b562:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b566:	f7f4 ffc1 	bl	80004ec <__aeabi_dmul>
 800b56a:	4604      	mov	r4, r0
 800b56c:	460d      	mov	r5, r1
 800b56e:	bb17      	cbnz	r7, 800b5b6 <pow+0x20a>
 800b570:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b574:	4b38      	ldr	r3, [pc, #224]	; (800b658 <pow+0x2ac>)
 800b576:	4640      	mov	r0, r8
 800b578:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b57c:	4649      	mov	r1, r9
 800b57e:	4652      	mov	r2, sl
 800b580:	465b      	mov	r3, fp
 800b582:	f7f5 fa25 	bl	80009d0 <__aeabi_dcmplt>
 800b586:	2800      	cmp	r0, #0
 800b588:	d054      	beq.n	800b634 <pow+0x288>
 800b58a:	4620      	mov	r0, r4
 800b58c:	4629      	mov	r1, r5
 800b58e:	f000 fe33 	bl	800c1f8 <rint>
 800b592:	4622      	mov	r2, r4
 800b594:	462b      	mov	r3, r5
 800b596:	f7f5 fa11 	bl	80009bc <__aeabi_dcmpeq>
 800b59a:	b920      	cbnz	r0, 800b5a6 <pow+0x1fa>
 800b59c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b5a0:	4b2e      	ldr	r3, [pc, #184]	; (800b65c <pow+0x2b0>)
 800b5a2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b5a6:	f996 3000 	ldrsb.w	r3, [r6]
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d142      	bne.n	800b634 <pow+0x288>
 800b5ae:	f7ff f935 	bl	800a81c <__errno>
 800b5b2:	2322      	movs	r3, #34	; 0x22
 800b5b4:	e797      	b.n	800b4e6 <pow+0x13a>
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	4b29      	ldr	r3, [pc, #164]	; (800b660 <pow+0x2b4>)
 800b5ba:	4640      	mov	r0, r8
 800b5bc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b5c0:	4649      	mov	r1, r9
 800b5c2:	4652      	mov	r2, sl
 800b5c4:	465b      	mov	r3, fp
 800b5c6:	f7f5 fa03 	bl	80009d0 <__aeabi_dcmplt>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d0eb      	beq.n	800b5a6 <pow+0x1fa>
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	f000 fe11 	bl	800c1f8 <rint>
 800b5d6:	4622      	mov	r2, r4
 800b5d8:	462b      	mov	r3, r5
 800b5da:	f7f5 f9ef 	bl	80009bc <__aeabi_dcmpeq>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d1e1      	bne.n	800b5a6 <pow+0x1fa>
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	4b1a      	ldr	r3, [pc, #104]	; (800b650 <pow+0x2a4>)
 800b5e6:	e7dc      	b.n	800b5a2 <pow+0x1f6>
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f7f5 f9e4 	bl	80009bc <__aeabi_dcmpeq>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	f43f af4b 	beq.w	800b490 <pow+0xe4>
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	f000 fded 	bl	800c1dc <finite>
 800b602:	2800      	cmp	r0, #0
 800b604:	f43f af44 	beq.w	800b490 <pow+0xe4>
 800b608:	4620      	mov	r0, r4
 800b60a:	4629      	mov	r1, r5
 800b60c:	f000 fde6 	bl	800c1dc <finite>
 800b610:	2800      	cmp	r0, #0
 800b612:	f43f af3d 	beq.w	800b490 <pow+0xe4>
 800b616:	2304      	movs	r3, #4
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <pow+0x29c>)
 800b61c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b620:	9305      	str	r3, [sp, #20]
 800b622:	2300      	movs	r3, #0
 800b624:	2400      	movs	r4, #0
 800b626:	930c      	str	r3, [sp, #48]	; 0x30
 800b628:	2300      	movs	r3, #0
 800b62a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b62e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800b632:	e7b8      	b.n	800b5a6 <pow+0x1fa>
 800b634:	a804      	add	r0, sp, #16
 800b636:	f000 fdd7 	bl	800c1e8 <matherr>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	f47f af1e 	bne.w	800b47c <pow+0xd0>
 800b640:	e7b5      	b.n	800b5ae <pow+0x202>
 800b642:	bf00      	nop
 800b644:	20000364 	.word	0x20000364
 800b648:	0800ce53 	.word	0x0800ce53
 800b64c:	3ff00000 	.word	0x3ff00000
 800b650:	fff00000 	.word	0xfff00000
 800b654:	3fe00000 	.word	0x3fe00000
 800b658:	47efffff 	.word	0x47efffff
 800b65c:	c7efffff 	.word	0xc7efffff
 800b660:	7ff00000 	.word	0x7ff00000
 800b664:	00000000 	.word	0x00000000

0800b668 <__ieee754_pow>:
 800b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	b091      	sub	sp, #68	; 0x44
 800b66e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b672:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800b676:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b67a:	ea55 0302 	orrs.w	r3, r5, r2
 800b67e:	4607      	mov	r7, r0
 800b680:	4688      	mov	r8, r1
 800b682:	f000 84b7 	beq.w	800bff4 <__ieee754_pow+0x98c>
 800b686:	4b80      	ldr	r3, [pc, #512]	; (800b888 <__ieee754_pow+0x220>)
 800b688:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800b68c:	429c      	cmp	r4, r3
 800b68e:	4689      	mov	r9, r1
 800b690:	4682      	mov	sl, r0
 800b692:	dc09      	bgt.n	800b6a8 <__ieee754_pow+0x40>
 800b694:	d103      	bne.n	800b69e <__ieee754_pow+0x36>
 800b696:	b938      	cbnz	r0, 800b6a8 <__ieee754_pow+0x40>
 800b698:	42a5      	cmp	r5, r4
 800b69a:	dc0d      	bgt.n	800b6b8 <__ieee754_pow+0x50>
 800b69c:	e001      	b.n	800b6a2 <__ieee754_pow+0x3a>
 800b69e:	429d      	cmp	r5, r3
 800b6a0:	dc02      	bgt.n	800b6a8 <__ieee754_pow+0x40>
 800b6a2:	429d      	cmp	r5, r3
 800b6a4:	d10e      	bne.n	800b6c4 <__ieee754_pow+0x5c>
 800b6a6:	b16a      	cbz	r2, 800b6c4 <__ieee754_pow+0x5c>
 800b6a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b6ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b6b0:	ea54 030a 	orrs.w	r3, r4, sl
 800b6b4:	f000 849e 	beq.w	800bff4 <__ieee754_pow+0x98c>
 800b6b8:	4874      	ldr	r0, [pc, #464]	; (800b88c <__ieee754_pow+0x224>)
 800b6ba:	b011      	add	sp, #68	; 0x44
 800b6bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c0:	f000 bd94 	b.w	800c1ec <nan>
 800b6c4:	f1b9 0f00 	cmp.w	r9, #0
 800b6c8:	da53      	bge.n	800b772 <__ieee754_pow+0x10a>
 800b6ca:	4b71      	ldr	r3, [pc, #452]	; (800b890 <__ieee754_pow+0x228>)
 800b6cc:	429d      	cmp	r5, r3
 800b6ce:	dc4e      	bgt.n	800b76e <__ieee754_pow+0x106>
 800b6d0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b6d4:	429d      	cmp	r5, r3
 800b6d6:	dd4c      	ble.n	800b772 <__ieee754_pow+0x10a>
 800b6d8:	152b      	asrs	r3, r5, #20
 800b6da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b6de:	2b14      	cmp	r3, #20
 800b6e0:	dd28      	ble.n	800b734 <__ieee754_pow+0xcc>
 800b6e2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b6e6:	fa22 f103 	lsr.w	r1, r2, r3
 800b6ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d13f      	bne.n	800b772 <__ieee754_pow+0x10a>
 800b6f2:	f001 0101 	and.w	r1, r1, #1
 800b6f6:	f1c1 0302 	rsb	r3, r1, #2
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	2a00      	cmp	r2, #0
 800b6fe:	d15c      	bne.n	800b7ba <__ieee754_pow+0x152>
 800b700:	4b61      	ldr	r3, [pc, #388]	; (800b888 <__ieee754_pow+0x220>)
 800b702:	429d      	cmp	r5, r3
 800b704:	d126      	bne.n	800b754 <__ieee754_pow+0xec>
 800b706:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b70a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b70e:	ea53 030a 	orrs.w	r3, r3, sl
 800b712:	f000 846f 	beq.w	800bff4 <__ieee754_pow+0x98c>
 800b716:	4b5f      	ldr	r3, [pc, #380]	; (800b894 <__ieee754_pow+0x22c>)
 800b718:	429c      	cmp	r4, r3
 800b71a:	dd2c      	ble.n	800b776 <__ieee754_pow+0x10e>
 800b71c:	2e00      	cmp	r6, #0
 800b71e:	f280 846f 	bge.w	800c000 <__ieee754_pow+0x998>
 800b722:	f04f 0b00 	mov.w	fp, #0
 800b726:	f04f 0c00 	mov.w	ip, #0
 800b72a:	4658      	mov	r0, fp
 800b72c:	4661      	mov	r1, ip
 800b72e:	b011      	add	sp, #68	; 0x44
 800b730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b734:	2a00      	cmp	r2, #0
 800b736:	d13e      	bne.n	800b7b6 <__ieee754_pow+0x14e>
 800b738:	f1c3 0314 	rsb	r3, r3, #20
 800b73c:	fa45 f103 	asr.w	r1, r5, r3
 800b740:	fa01 f303 	lsl.w	r3, r1, r3
 800b744:	42ab      	cmp	r3, r5
 800b746:	f040 8463 	bne.w	800c010 <__ieee754_pow+0x9a8>
 800b74a:	f001 0101 	and.w	r1, r1, #1
 800b74e:	f1c1 0302 	rsb	r3, r1, #2
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	4b50      	ldr	r3, [pc, #320]	; (800b898 <__ieee754_pow+0x230>)
 800b756:	429d      	cmp	r5, r3
 800b758:	d114      	bne.n	800b784 <__ieee754_pow+0x11c>
 800b75a:	2e00      	cmp	r6, #0
 800b75c:	f280 8454 	bge.w	800c008 <__ieee754_pow+0x9a0>
 800b760:	463a      	mov	r2, r7
 800b762:	4643      	mov	r3, r8
 800b764:	2000      	movs	r0, #0
 800b766:	494c      	ldr	r1, [pc, #304]	; (800b898 <__ieee754_pow+0x230>)
 800b768:	f7f4 ffea 	bl	8000740 <__aeabi_ddiv>
 800b76c:	e013      	b.n	800b796 <__ieee754_pow+0x12e>
 800b76e:	2302      	movs	r3, #2
 800b770:	e7c3      	b.n	800b6fa <__ieee754_pow+0x92>
 800b772:	2300      	movs	r3, #0
 800b774:	e7c1      	b.n	800b6fa <__ieee754_pow+0x92>
 800b776:	2e00      	cmp	r6, #0
 800b778:	dad3      	bge.n	800b722 <__ieee754_pow+0xba>
 800b77a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b77e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b782:	e7d2      	b.n	800b72a <__ieee754_pow+0xc2>
 800b784:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800b788:	d108      	bne.n	800b79c <__ieee754_pow+0x134>
 800b78a:	463a      	mov	r2, r7
 800b78c:	4643      	mov	r3, r8
 800b78e:	4638      	mov	r0, r7
 800b790:	4641      	mov	r1, r8
 800b792:	f7f4 feab 	bl	80004ec <__aeabi_dmul>
 800b796:	4683      	mov	fp, r0
 800b798:	468c      	mov	ip, r1
 800b79a:	e7c6      	b.n	800b72a <__ieee754_pow+0xc2>
 800b79c:	4b3f      	ldr	r3, [pc, #252]	; (800b89c <__ieee754_pow+0x234>)
 800b79e:	429e      	cmp	r6, r3
 800b7a0:	d10b      	bne.n	800b7ba <__ieee754_pow+0x152>
 800b7a2:	f1b9 0f00 	cmp.w	r9, #0
 800b7a6:	db08      	blt.n	800b7ba <__ieee754_pow+0x152>
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	4641      	mov	r1, r8
 800b7ac:	b011      	add	sp, #68	; 0x44
 800b7ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b2:	f000 bc63 	b.w	800c07c <__ieee754_sqrt>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	9300      	str	r3, [sp, #0]
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	4641      	mov	r1, r8
 800b7be:	f000 fd09 	bl	800c1d4 <fabs>
 800b7c2:	4683      	mov	fp, r0
 800b7c4:	468c      	mov	ip, r1
 800b7c6:	f1ba 0f00 	cmp.w	sl, #0
 800b7ca:	d12b      	bne.n	800b824 <__ieee754_pow+0x1bc>
 800b7cc:	b124      	cbz	r4, 800b7d8 <__ieee754_pow+0x170>
 800b7ce:	4b32      	ldr	r3, [pc, #200]	; (800b898 <__ieee754_pow+0x230>)
 800b7d0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d125      	bne.n	800b824 <__ieee754_pow+0x1bc>
 800b7d8:	2e00      	cmp	r6, #0
 800b7da:	da07      	bge.n	800b7ec <__ieee754_pow+0x184>
 800b7dc:	465a      	mov	r2, fp
 800b7de:	4663      	mov	r3, ip
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	492d      	ldr	r1, [pc, #180]	; (800b898 <__ieee754_pow+0x230>)
 800b7e4:	f7f4 ffac 	bl	8000740 <__aeabi_ddiv>
 800b7e8:	4683      	mov	fp, r0
 800b7ea:	468c      	mov	ip, r1
 800b7ec:	f1b9 0f00 	cmp.w	r9, #0
 800b7f0:	da9b      	bge.n	800b72a <__ieee754_pow+0xc2>
 800b7f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b7f6:	9b00      	ldr	r3, [sp, #0]
 800b7f8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b7fc:	4323      	orrs	r3, r4
 800b7fe:	d108      	bne.n	800b812 <__ieee754_pow+0x1aa>
 800b800:	465a      	mov	r2, fp
 800b802:	4663      	mov	r3, ip
 800b804:	4658      	mov	r0, fp
 800b806:	4661      	mov	r1, ip
 800b808:	f7f4 fcb8 	bl	800017c <__aeabi_dsub>
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	e7aa      	b.n	800b768 <__ieee754_pow+0x100>
 800b812:	9b00      	ldr	r3, [sp, #0]
 800b814:	2b01      	cmp	r3, #1
 800b816:	d188      	bne.n	800b72a <__ieee754_pow+0xc2>
 800b818:	4658      	mov	r0, fp
 800b81a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b81e:	4683      	mov	fp, r0
 800b820:	469c      	mov	ip, r3
 800b822:	e782      	b.n	800b72a <__ieee754_pow+0xc2>
 800b824:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800b828:	f109 33ff 	add.w	r3, r9, #4294967295
 800b82c:	930d      	str	r3, [sp, #52]	; 0x34
 800b82e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b830:	9b00      	ldr	r3, [sp, #0]
 800b832:	4313      	orrs	r3, r2
 800b834:	d104      	bne.n	800b840 <__ieee754_pow+0x1d8>
 800b836:	463a      	mov	r2, r7
 800b838:	4643      	mov	r3, r8
 800b83a:	4638      	mov	r0, r7
 800b83c:	4641      	mov	r1, r8
 800b83e:	e7e3      	b.n	800b808 <__ieee754_pow+0x1a0>
 800b840:	4b17      	ldr	r3, [pc, #92]	; (800b8a0 <__ieee754_pow+0x238>)
 800b842:	429d      	cmp	r5, r3
 800b844:	f340 80fe 	ble.w	800ba44 <__ieee754_pow+0x3dc>
 800b848:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b84c:	429d      	cmp	r5, r3
 800b84e:	dd0b      	ble.n	800b868 <__ieee754_pow+0x200>
 800b850:	4b10      	ldr	r3, [pc, #64]	; (800b894 <__ieee754_pow+0x22c>)
 800b852:	429c      	cmp	r4, r3
 800b854:	dc0e      	bgt.n	800b874 <__ieee754_pow+0x20c>
 800b856:	2e00      	cmp	r6, #0
 800b858:	f6bf af63 	bge.w	800b722 <__ieee754_pow+0xba>
 800b85c:	a308      	add	r3, pc, #32	; (adr r3, 800b880 <__ieee754_pow+0x218>)
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	4610      	mov	r0, r2
 800b864:	4619      	mov	r1, r3
 800b866:	e794      	b.n	800b792 <__ieee754_pow+0x12a>
 800b868:	4b0e      	ldr	r3, [pc, #56]	; (800b8a4 <__ieee754_pow+0x23c>)
 800b86a:	429c      	cmp	r4, r3
 800b86c:	ddf3      	ble.n	800b856 <__ieee754_pow+0x1ee>
 800b86e:	4b0a      	ldr	r3, [pc, #40]	; (800b898 <__ieee754_pow+0x230>)
 800b870:	429c      	cmp	r4, r3
 800b872:	dd19      	ble.n	800b8a8 <__ieee754_pow+0x240>
 800b874:	2e00      	cmp	r6, #0
 800b876:	dcf1      	bgt.n	800b85c <__ieee754_pow+0x1f4>
 800b878:	e753      	b.n	800b722 <__ieee754_pow+0xba>
 800b87a:	bf00      	nop
 800b87c:	f3af 8000 	nop.w
 800b880:	8800759c 	.word	0x8800759c
 800b884:	7e37e43c 	.word	0x7e37e43c
 800b888:	7ff00000 	.word	0x7ff00000
 800b88c:	0800c68b 	.word	0x0800c68b
 800b890:	433fffff 	.word	0x433fffff
 800b894:	3fefffff 	.word	0x3fefffff
 800b898:	3ff00000 	.word	0x3ff00000
 800b89c:	3fe00000 	.word	0x3fe00000
 800b8a0:	41e00000 	.word	0x41e00000
 800b8a4:	3feffffe 	.word	0x3feffffe
 800b8a8:	4661      	mov	r1, ip
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	4b60      	ldr	r3, [pc, #384]	; (800ba30 <__ieee754_pow+0x3c8>)
 800b8ae:	4658      	mov	r0, fp
 800b8b0:	f7f4 fc64 	bl	800017c <__aeabi_dsub>
 800b8b4:	a354      	add	r3, pc, #336	; (adr r3, 800ba08 <__ieee754_pow+0x3a0>)
 800b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	460d      	mov	r5, r1
 800b8be:	f7f4 fe15 	bl	80004ec <__aeabi_dmul>
 800b8c2:	a353      	add	r3, pc, #332	; (adr r3, 800ba10 <__ieee754_pow+0x3a8>)
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	4606      	mov	r6, r0
 800b8ca:	460f      	mov	r7, r1
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	4629      	mov	r1, r5
 800b8d0:	f7f4 fe0c 	bl	80004ec <__aeabi_dmul>
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	4682      	mov	sl, r0
 800b8d8:	468b      	mov	fp, r1
 800b8da:	4b56      	ldr	r3, [pc, #344]	; (800ba34 <__ieee754_pow+0x3cc>)
 800b8dc:	4620      	mov	r0, r4
 800b8de:	4629      	mov	r1, r5
 800b8e0:	f7f4 fe04 	bl	80004ec <__aeabi_dmul>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	a14b      	add	r1, pc, #300	; (adr r1, 800ba18 <__ieee754_pow+0x3b0>)
 800b8ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8ee:	f7f4 fc45 	bl	800017c <__aeabi_dsub>
 800b8f2:	4622      	mov	r2, r4
 800b8f4:	462b      	mov	r3, r5
 800b8f6:	f7f4 fdf9 	bl	80004ec <__aeabi_dmul>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	2000      	movs	r0, #0
 800b900:	494d      	ldr	r1, [pc, #308]	; (800ba38 <__ieee754_pow+0x3d0>)
 800b902:	f7f4 fc3b 	bl	800017c <__aeabi_dsub>
 800b906:	4622      	mov	r2, r4
 800b908:	462b      	mov	r3, r5
 800b90a:	4680      	mov	r8, r0
 800b90c:	4689      	mov	r9, r1
 800b90e:	4620      	mov	r0, r4
 800b910:	4629      	mov	r1, r5
 800b912:	f7f4 fdeb 	bl	80004ec <__aeabi_dmul>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4640      	mov	r0, r8
 800b91c:	4649      	mov	r1, r9
 800b91e:	f7f4 fde5 	bl	80004ec <__aeabi_dmul>
 800b922:	a33f      	add	r3, pc, #252	; (adr r3, 800ba20 <__ieee754_pow+0x3b8>)
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f7f4 fde0 	bl	80004ec <__aeabi_dmul>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4650      	mov	r0, sl
 800b932:	4659      	mov	r1, fp
 800b934:	f7f4 fc22 	bl	800017c <__aeabi_dsub>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4604      	mov	r4, r0
 800b93e:	460d      	mov	r5, r1
 800b940:	4630      	mov	r0, r6
 800b942:	4639      	mov	r1, r7
 800b944:	f7f4 fc1c 	bl	8000180 <__adddf3>
 800b948:	2000      	movs	r0, #0
 800b94a:	468b      	mov	fp, r1
 800b94c:	4682      	mov	sl, r0
 800b94e:	4632      	mov	r2, r6
 800b950:	463b      	mov	r3, r7
 800b952:	f7f4 fc13 	bl	800017c <__aeabi_dsub>
 800b956:	4602      	mov	r2, r0
 800b958:	460b      	mov	r3, r1
 800b95a:	4620      	mov	r0, r4
 800b95c:	4629      	mov	r1, r5
 800b95e:	f7f4 fc0d 	bl	800017c <__aeabi_dsub>
 800b962:	9b00      	ldr	r3, [sp, #0]
 800b964:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b966:	3b01      	subs	r3, #1
 800b968:	4313      	orrs	r3, r2
 800b96a:	f04f 0300 	mov.w	r3, #0
 800b96e:	bf0c      	ite	eq
 800b970:	4c32      	ldreq	r4, [pc, #200]	; (800ba3c <__ieee754_pow+0x3d4>)
 800b972:	4c2f      	ldrne	r4, [pc, #188]	; (800ba30 <__ieee754_pow+0x3c8>)
 800b974:	4606      	mov	r6, r0
 800b976:	e9cd 3400 	strd	r3, r4, [sp]
 800b97a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b97e:	2400      	movs	r4, #0
 800b980:	460f      	mov	r7, r1
 800b982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b986:	4622      	mov	r2, r4
 800b988:	462b      	mov	r3, r5
 800b98a:	f7f4 fbf7 	bl	800017c <__aeabi_dsub>
 800b98e:	4652      	mov	r2, sl
 800b990:	465b      	mov	r3, fp
 800b992:	f7f4 fdab 	bl	80004ec <__aeabi_dmul>
 800b996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b99a:	4680      	mov	r8, r0
 800b99c:	4689      	mov	r9, r1
 800b99e:	4630      	mov	r0, r6
 800b9a0:	4639      	mov	r1, r7
 800b9a2:	f7f4 fda3 	bl	80004ec <__aeabi_dmul>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4640      	mov	r0, r8
 800b9ac:	4649      	mov	r1, r9
 800b9ae:	f7f4 fbe7 	bl	8000180 <__adddf3>
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	462b      	mov	r3, r5
 800b9b6:	4680      	mov	r8, r0
 800b9b8:	4689      	mov	r9, r1
 800b9ba:	4650      	mov	r0, sl
 800b9bc:	4659      	mov	r1, fp
 800b9be:	f7f4 fd95 	bl	80004ec <__aeabi_dmul>
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	460d      	mov	r5, r1
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	4649      	mov	r1, r9
 800b9cc:	4640      	mov	r0, r8
 800b9ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b9d2:	f7f4 fbd5 	bl	8000180 <__adddf3>
 800b9d6:	4b1a      	ldr	r3, [pc, #104]	; (800ba40 <__ieee754_pow+0x3d8>)
 800b9d8:	4682      	mov	sl, r0
 800b9da:	4299      	cmp	r1, r3
 800b9dc:	460f      	mov	r7, r1
 800b9de:	460e      	mov	r6, r1
 800b9e0:	f340 82e1 	ble.w	800bfa6 <__ieee754_pow+0x93e>
 800b9e4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b9e8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b9ec:	4303      	orrs	r3, r0
 800b9ee:	f000 81db 	beq.w	800bda8 <__ieee754_pow+0x740>
 800b9f2:	a30d      	add	r3, pc, #52	; (adr r3, 800ba28 <__ieee754_pow+0x3c0>)
 800b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9fc:	f7f4 fd76 	bl	80004ec <__aeabi_dmul>
 800ba00:	a309      	add	r3, pc, #36	; (adr r3, 800ba28 <__ieee754_pow+0x3c0>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	e6c4      	b.n	800b792 <__ieee754_pow+0x12a>
 800ba08:	60000000 	.word	0x60000000
 800ba0c:	3ff71547 	.word	0x3ff71547
 800ba10:	f85ddf44 	.word	0xf85ddf44
 800ba14:	3e54ae0b 	.word	0x3e54ae0b
 800ba18:	55555555 	.word	0x55555555
 800ba1c:	3fd55555 	.word	0x3fd55555
 800ba20:	652b82fe 	.word	0x652b82fe
 800ba24:	3ff71547 	.word	0x3ff71547
 800ba28:	8800759c 	.word	0x8800759c
 800ba2c:	7e37e43c 	.word	0x7e37e43c
 800ba30:	3ff00000 	.word	0x3ff00000
 800ba34:	3fd00000 	.word	0x3fd00000
 800ba38:	3fe00000 	.word	0x3fe00000
 800ba3c:	bff00000 	.word	0xbff00000
 800ba40:	408fffff 	.word	0x408fffff
 800ba44:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ba48:	f04f 0200 	mov.w	r2, #0
 800ba4c:	da08      	bge.n	800ba60 <__ieee754_pow+0x3f8>
 800ba4e:	4658      	mov	r0, fp
 800ba50:	4bcd      	ldr	r3, [pc, #820]	; (800bd88 <__ieee754_pow+0x720>)
 800ba52:	4661      	mov	r1, ip
 800ba54:	f7f4 fd4a 	bl	80004ec <__aeabi_dmul>
 800ba58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ba5c:	4683      	mov	fp, r0
 800ba5e:	460c      	mov	r4, r1
 800ba60:	1523      	asrs	r3, r4, #20
 800ba62:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ba66:	4413      	add	r3, r2
 800ba68:	930c      	str	r3, [sp, #48]	; 0x30
 800ba6a:	4bc8      	ldr	r3, [pc, #800]	; (800bd8c <__ieee754_pow+0x724>)
 800ba6c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ba70:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ba74:	429c      	cmp	r4, r3
 800ba76:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ba7a:	dd08      	ble.n	800ba8e <__ieee754_pow+0x426>
 800ba7c:	4bc4      	ldr	r3, [pc, #784]	; (800bd90 <__ieee754_pow+0x728>)
 800ba7e:	429c      	cmp	r4, r3
 800ba80:	f340 815b 	ble.w	800bd3a <__ieee754_pow+0x6d2>
 800ba84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	930c      	str	r3, [sp, #48]	; 0x30
 800ba8e:	f04f 0800 	mov.w	r8, #0
 800ba92:	4658      	mov	r0, fp
 800ba94:	4629      	mov	r1, r5
 800ba96:	4bbf      	ldr	r3, [pc, #764]	; (800bd94 <__ieee754_pow+0x72c>)
 800ba98:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800ba9c:	444b      	add	r3, r9
 800ba9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800baa2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800baa6:	461a      	mov	r2, r3
 800baa8:	4623      	mov	r3, r4
 800baaa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800baae:	f7f4 fb65 	bl	800017c <__aeabi_dsub>
 800bab2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bab6:	4606      	mov	r6, r0
 800bab8:	460f      	mov	r7, r1
 800baba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800babe:	f7f4 fb5f 	bl	8000180 <__adddf3>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	2000      	movs	r0, #0
 800bac8:	49b3      	ldr	r1, [pc, #716]	; (800bd98 <__ieee754_pow+0x730>)
 800baca:	f7f4 fe39 	bl	8000740 <__aeabi_ddiv>
 800bace:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4630      	mov	r0, r6
 800bad8:	4639      	mov	r1, r7
 800bada:	f7f4 fd07 	bl	80004ec <__aeabi_dmul>
 800bade:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bae2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800bae6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800baea:	2300      	movs	r3, #0
 800baec:	2200      	movs	r2, #0
 800baee:	106d      	asrs	r5, r5, #1
 800baf0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800baf4:	9304      	str	r3, [sp, #16]
 800baf6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bafa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bafe:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800bb02:	4650      	mov	r0, sl
 800bb04:	4659      	mov	r1, fp
 800bb06:	4614      	mov	r4, r2
 800bb08:	461d      	mov	r5, r3
 800bb0a:	f7f4 fcef 	bl	80004ec <__aeabi_dmul>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4630      	mov	r0, r6
 800bb14:	4639      	mov	r1, r7
 800bb16:	f7f4 fb31 	bl	800017c <__aeabi_dsub>
 800bb1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460f      	mov	r7, r1
 800bb22:	4620      	mov	r0, r4
 800bb24:	4629      	mov	r1, r5
 800bb26:	f7f4 fb29 	bl	800017c <__aeabi_dsub>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb32:	f7f4 fb23 	bl	800017c <__aeabi_dsub>
 800bb36:	4652      	mov	r2, sl
 800bb38:	465b      	mov	r3, fp
 800bb3a:	f7f4 fcd7 	bl	80004ec <__aeabi_dmul>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4630      	mov	r0, r6
 800bb44:	4639      	mov	r1, r7
 800bb46:	f7f4 fb19 	bl	800017c <__aeabi_dsub>
 800bb4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bb4e:	f7f4 fccd 	bl	80004ec <__aeabi_dmul>
 800bb52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	f7f4 fcc5 	bl	80004ec <__aeabi_dmul>
 800bb62:	a377      	add	r3, pc, #476	; (adr r3, 800bd40 <__ieee754_pow+0x6d8>)
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	4604      	mov	r4, r0
 800bb6a:	460d      	mov	r5, r1
 800bb6c:	f7f4 fcbe 	bl	80004ec <__aeabi_dmul>
 800bb70:	a375      	add	r3, pc, #468	; (adr r3, 800bd48 <__ieee754_pow+0x6e0>)
 800bb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb76:	f7f4 fb03 	bl	8000180 <__adddf3>
 800bb7a:	4622      	mov	r2, r4
 800bb7c:	462b      	mov	r3, r5
 800bb7e:	f7f4 fcb5 	bl	80004ec <__aeabi_dmul>
 800bb82:	a373      	add	r3, pc, #460	; (adr r3, 800bd50 <__ieee754_pow+0x6e8>)
 800bb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb88:	f7f4 fafa 	bl	8000180 <__adddf3>
 800bb8c:	4622      	mov	r2, r4
 800bb8e:	462b      	mov	r3, r5
 800bb90:	f7f4 fcac 	bl	80004ec <__aeabi_dmul>
 800bb94:	a370      	add	r3, pc, #448	; (adr r3, 800bd58 <__ieee754_pow+0x6f0>)
 800bb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9a:	f7f4 faf1 	bl	8000180 <__adddf3>
 800bb9e:	4622      	mov	r2, r4
 800bba0:	462b      	mov	r3, r5
 800bba2:	f7f4 fca3 	bl	80004ec <__aeabi_dmul>
 800bba6:	a36e      	add	r3, pc, #440	; (adr r3, 800bd60 <__ieee754_pow+0x6f8>)
 800bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbac:	f7f4 fae8 	bl	8000180 <__adddf3>
 800bbb0:	4622      	mov	r2, r4
 800bbb2:	462b      	mov	r3, r5
 800bbb4:	f7f4 fc9a 	bl	80004ec <__aeabi_dmul>
 800bbb8:	a36b      	add	r3, pc, #428	; (adr r3, 800bd68 <__ieee754_pow+0x700>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f7f4 fadf 	bl	8000180 <__adddf3>
 800bbc2:	4622      	mov	r2, r4
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	460f      	mov	r7, r1
 800bbc8:	462b      	mov	r3, r5
 800bbca:	4620      	mov	r0, r4
 800bbcc:	4629      	mov	r1, r5
 800bbce:	f7f4 fc8d 	bl	80004ec <__aeabi_dmul>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	4639      	mov	r1, r7
 800bbda:	f7f4 fc87 	bl	80004ec <__aeabi_dmul>
 800bbde:	4604      	mov	r4, r0
 800bbe0:	460d      	mov	r5, r1
 800bbe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbe6:	4652      	mov	r2, sl
 800bbe8:	465b      	mov	r3, fp
 800bbea:	f7f4 fac9 	bl	8000180 <__adddf3>
 800bbee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bbf2:	f7f4 fc7b 	bl	80004ec <__aeabi_dmul>
 800bbf6:	4622      	mov	r2, r4
 800bbf8:	462b      	mov	r3, r5
 800bbfa:	f7f4 fac1 	bl	8000180 <__adddf3>
 800bbfe:	4652      	mov	r2, sl
 800bc00:	4606      	mov	r6, r0
 800bc02:	460f      	mov	r7, r1
 800bc04:	465b      	mov	r3, fp
 800bc06:	4650      	mov	r0, sl
 800bc08:	4659      	mov	r1, fp
 800bc0a:	f7f4 fc6f 	bl	80004ec <__aeabi_dmul>
 800bc0e:	2200      	movs	r2, #0
 800bc10:	4b62      	ldr	r3, [pc, #392]	; (800bd9c <__ieee754_pow+0x734>)
 800bc12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bc16:	f7f4 fab3 	bl	8000180 <__adddf3>
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	463b      	mov	r3, r7
 800bc1e:	f7f4 faaf 	bl	8000180 <__adddf3>
 800bc22:	9804      	ldr	r0, [sp, #16]
 800bc24:	460d      	mov	r5, r1
 800bc26:	4604      	mov	r4, r0
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4650      	mov	r0, sl
 800bc2e:	4659      	mov	r1, fp
 800bc30:	f7f4 fc5c 	bl	80004ec <__aeabi_dmul>
 800bc34:	2200      	movs	r2, #0
 800bc36:	4682      	mov	sl, r0
 800bc38:	468b      	mov	fp, r1
 800bc3a:	4b58      	ldr	r3, [pc, #352]	; (800bd9c <__ieee754_pow+0x734>)
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f7f4 fa9c 	bl	800017c <__aeabi_dsub>
 800bc44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc48:	f7f4 fa98 	bl	800017c <__aeabi_dsub>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	f7f4 fa92 	bl	800017c <__aeabi_dsub>
 800bc58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc5c:	f7f4 fc46 	bl	80004ec <__aeabi_dmul>
 800bc60:	4622      	mov	r2, r4
 800bc62:	4606      	mov	r6, r0
 800bc64:	460f      	mov	r7, r1
 800bc66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc6a:	462b      	mov	r3, r5
 800bc6c:	f7f4 fc3e 	bl	80004ec <__aeabi_dmul>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	4630      	mov	r0, r6
 800bc76:	4639      	mov	r1, r7
 800bc78:	f7f4 fa82 	bl	8000180 <__adddf3>
 800bc7c:	4606      	mov	r6, r0
 800bc7e:	460f      	mov	r7, r1
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4650      	mov	r0, sl
 800bc86:	4659      	mov	r1, fp
 800bc88:	f7f4 fa7a 	bl	8000180 <__adddf3>
 800bc8c:	a338      	add	r3, pc, #224	; (adr r3, 800bd70 <__ieee754_pow+0x708>)
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	9804      	ldr	r0, [sp, #16]
 800bc94:	460d      	mov	r5, r1
 800bc96:	4604      	mov	r4, r0
 800bc98:	f7f4 fc28 	bl	80004ec <__aeabi_dmul>
 800bc9c:	4652      	mov	r2, sl
 800bc9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bca2:	465b      	mov	r3, fp
 800bca4:	4620      	mov	r0, r4
 800bca6:	4629      	mov	r1, r5
 800bca8:	f7f4 fa68 	bl	800017c <__aeabi_dsub>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	4639      	mov	r1, r7
 800bcb4:	f7f4 fa62 	bl	800017c <__aeabi_dsub>
 800bcb8:	a32f      	add	r3, pc, #188	; (adr r3, 800bd78 <__ieee754_pow+0x710>)
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	f7f4 fc15 	bl	80004ec <__aeabi_dmul>
 800bcc2:	a32f      	add	r3, pc, #188	; (adr r3, 800bd80 <__ieee754_pow+0x718>)
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	4606      	mov	r6, r0
 800bcca:	460f      	mov	r7, r1
 800bccc:	4620      	mov	r0, r4
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f7f4 fc0c 	bl	80004ec <__aeabi_dmul>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 fa50 	bl	8000180 <__adddf3>
 800bce0:	4b2f      	ldr	r3, [pc, #188]	; (800bda0 <__ieee754_pow+0x738>)
 800bce2:	444b      	add	r3, r9
 800bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce8:	f7f4 fa4a 	bl	8000180 <__adddf3>
 800bcec:	4604      	mov	r4, r0
 800bcee:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bcf0:	460d      	mov	r5, r1
 800bcf2:	f7f4 fb91 	bl	8000418 <__aeabi_i2d>
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	460f      	mov	r7, r1
 800bcfa:	4b2a      	ldr	r3, [pc, #168]	; (800bda4 <__ieee754_pow+0x73c>)
 800bcfc:	4622      	mov	r2, r4
 800bcfe:	444b      	add	r3, r9
 800bd00:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd04:	462b      	mov	r3, r5
 800bd06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd0a:	f7f4 fa39 	bl	8000180 <__adddf3>
 800bd0e:	4642      	mov	r2, r8
 800bd10:	464b      	mov	r3, r9
 800bd12:	f7f4 fa35 	bl	8000180 <__adddf3>
 800bd16:	4632      	mov	r2, r6
 800bd18:	463b      	mov	r3, r7
 800bd1a:	f7f4 fa31 	bl	8000180 <__adddf3>
 800bd1e:	9804      	ldr	r0, [sp, #16]
 800bd20:	4632      	mov	r2, r6
 800bd22:	463b      	mov	r3, r7
 800bd24:	4682      	mov	sl, r0
 800bd26:	468b      	mov	fp, r1
 800bd28:	f7f4 fa28 	bl	800017c <__aeabi_dsub>
 800bd2c:	4642      	mov	r2, r8
 800bd2e:	464b      	mov	r3, r9
 800bd30:	f7f4 fa24 	bl	800017c <__aeabi_dsub>
 800bd34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd38:	e60b      	b.n	800b952 <__ieee754_pow+0x2ea>
 800bd3a:	f04f 0801 	mov.w	r8, #1
 800bd3e:	e6a8      	b.n	800ba92 <__ieee754_pow+0x42a>
 800bd40:	4a454eef 	.word	0x4a454eef
 800bd44:	3fca7e28 	.word	0x3fca7e28
 800bd48:	93c9db65 	.word	0x93c9db65
 800bd4c:	3fcd864a 	.word	0x3fcd864a
 800bd50:	a91d4101 	.word	0xa91d4101
 800bd54:	3fd17460 	.word	0x3fd17460
 800bd58:	518f264d 	.word	0x518f264d
 800bd5c:	3fd55555 	.word	0x3fd55555
 800bd60:	db6fabff 	.word	0xdb6fabff
 800bd64:	3fdb6db6 	.word	0x3fdb6db6
 800bd68:	33333303 	.word	0x33333303
 800bd6c:	3fe33333 	.word	0x3fe33333
 800bd70:	e0000000 	.word	0xe0000000
 800bd74:	3feec709 	.word	0x3feec709
 800bd78:	dc3a03fd 	.word	0xdc3a03fd
 800bd7c:	3feec709 	.word	0x3feec709
 800bd80:	145b01f5 	.word	0x145b01f5
 800bd84:	be3e2fe0 	.word	0xbe3e2fe0
 800bd88:	43400000 	.word	0x43400000
 800bd8c:	0003988e 	.word	0x0003988e
 800bd90:	000bb679 	.word	0x000bb679
 800bd94:	0800ce58 	.word	0x0800ce58
 800bd98:	3ff00000 	.word	0x3ff00000
 800bd9c:	40080000 	.word	0x40080000
 800bda0:	0800ce78 	.word	0x0800ce78
 800bda4:	0800ce68 	.word	0x0800ce68
 800bda8:	a39b      	add	r3, pc, #620	; (adr r3, 800c018 <__ieee754_pow+0x9b0>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	4640      	mov	r0, r8
 800bdb0:	4649      	mov	r1, r9
 800bdb2:	f7f4 f9e5 	bl	8000180 <__adddf3>
 800bdb6:	4622      	mov	r2, r4
 800bdb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	4650      	mov	r0, sl
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	f7f4 f9db 	bl	800017c <__aeabi_dsub>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdce:	f7f4 fe1d 	bl	8000a0c <__aeabi_dcmpgt>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	f47f ae0d 	bne.w	800b9f2 <__ieee754_pow+0x38a>
 800bdd8:	4aa3      	ldr	r2, [pc, #652]	; (800c068 <__ieee754_pow+0xa00>)
 800bdda:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800bdde:	4293      	cmp	r3, r2
 800bde0:	f340 8103 	ble.w	800bfea <__ieee754_pow+0x982>
 800bde4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bde8:	2000      	movs	r0, #0
 800bdea:	151b      	asrs	r3, r3, #20
 800bdec:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bdf0:	fa4a f303 	asr.w	r3, sl, r3
 800bdf4:	4433      	add	r3, r6
 800bdf6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bdfa:	4f9c      	ldr	r7, [pc, #624]	; (800c06c <__ieee754_pow+0xa04>)
 800bdfc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800be00:	4117      	asrs	r7, r2
 800be02:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800be06:	ea23 0107 	bic.w	r1, r3, r7
 800be0a:	f1c2 0214 	rsb	r2, r2, #20
 800be0e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800be12:	fa4a fa02 	asr.w	sl, sl, r2
 800be16:	2e00      	cmp	r6, #0
 800be18:	4602      	mov	r2, r0
 800be1a:	460b      	mov	r3, r1
 800be1c:	4620      	mov	r0, r4
 800be1e:	4629      	mov	r1, r5
 800be20:	bfb8      	it	lt
 800be22:	f1ca 0a00 	rsblt	sl, sl, #0
 800be26:	f7f4 f9a9 	bl	800017c <__aeabi_dsub>
 800be2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be32:	4642      	mov	r2, r8
 800be34:	464b      	mov	r3, r9
 800be36:	f7f4 f9a3 	bl	8000180 <__adddf3>
 800be3a:	a379      	add	r3, pc, #484	; (adr r3, 800c020 <__ieee754_pow+0x9b8>)
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	2000      	movs	r0, #0
 800be42:	460d      	mov	r5, r1
 800be44:	4604      	mov	r4, r0
 800be46:	f7f4 fb51 	bl	80004ec <__aeabi_dmul>
 800be4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be4e:	4606      	mov	r6, r0
 800be50:	460f      	mov	r7, r1
 800be52:	4620      	mov	r0, r4
 800be54:	4629      	mov	r1, r5
 800be56:	f7f4 f991 	bl	800017c <__aeabi_dsub>
 800be5a:	4602      	mov	r2, r0
 800be5c:	460b      	mov	r3, r1
 800be5e:	4640      	mov	r0, r8
 800be60:	4649      	mov	r1, r9
 800be62:	f7f4 f98b 	bl	800017c <__aeabi_dsub>
 800be66:	a370      	add	r3, pc, #448	; (adr r3, 800c028 <__ieee754_pow+0x9c0>)
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	f7f4 fb3e 	bl	80004ec <__aeabi_dmul>
 800be70:	a36f      	add	r3, pc, #444	; (adr r3, 800c030 <__ieee754_pow+0x9c8>)
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	4680      	mov	r8, r0
 800be78:	4689      	mov	r9, r1
 800be7a:	4620      	mov	r0, r4
 800be7c:	4629      	mov	r1, r5
 800be7e:	f7f4 fb35 	bl	80004ec <__aeabi_dmul>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	4640      	mov	r0, r8
 800be88:	4649      	mov	r1, r9
 800be8a:	f7f4 f979 	bl	8000180 <__adddf3>
 800be8e:	4604      	mov	r4, r0
 800be90:	460d      	mov	r5, r1
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4630      	mov	r0, r6
 800be98:	4639      	mov	r1, r7
 800be9a:	f7f4 f971 	bl	8000180 <__adddf3>
 800be9e:	4632      	mov	r2, r6
 800bea0:	463b      	mov	r3, r7
 800bea2:	4680      	mov	r8, r0
 800bea4:	4689      	mov	r9, r1
 800bea6:	f7f4 f969 	bl	800017c <__aeabi_dsub>
 800beaa:	4602      	mov	r2, r0
 800beac:	460b      	mov	r3, r1
 800beae:	4620      	mov	r0, r4
 800beb0:	4629      	mov	r1, r5
 800beb2:	f7f4 f963 	bl	800017c <__aeabi_dsub>
 800beb6:	4642      	mov	r2, r8
 800beb8:	4606      	mov	r6, r0
 800beba:	460f      	mov	r7, r1
 800bebc:	464b      	mov	r3, r9
 800bebe:	4640      	mov	r0, r8
 800bec0:	4649      	mov	r1, r9
 800bec2:	f7f4 fb13 	bl	80004ec <__aeabi_dmul>
 800bec6:	a35c      	add	r3, pc, #368	; (adr r3, 800c038 <__ieee754_pow+0x9d0>)
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	4604      	mov	r4, r0
 800bece:	460d      	mov	r5, r1
 800bed0:	f7f4 fb0c 	bl	80004ec <__aeabi_dmul>
 800bed4:	a35a      	add	r3, pc, #360	; (adr r3, 800c040 <__ieee754_pow+0x9d8>)
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	f7f4 f94f 	bl	800017c <__aeabi_dsub>
 800bede:	4622      	mov	r2, r4
 800bee0:	462b      	mov	r3, r5
 800bee2:	f7f4 fb03 	bl	80004ec <__aeabi_dmul>
 800bee6:	a358      	add	r3, pc, #352	; (adr r3, 800c048 <__ieee754_pow+0x9e0>)
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	f7f4 f948 	bl	8000180 <__adddf3>
 800bef0:	4622      	mov	r2, r4
 800bef2:	462b      	mov	r3, r5
 800bef4:	f7f4 fafa 	bl	80004ec <__aeabi_dmul>
 800bef8:	a355      	add	r3, pc, #340	; (adr r3, 800c050 <__ieee754_pow+0x9e8>)
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	f7f4 f93d 	bl	800017c <__aeabi_dsub>
 800bf02:	4622      	mov	r2, r4
 800bf04:	462b      	mov	r3, r5
 800bf06:	f7f4 faf1 	bl	80004ec <__aeabi_dmul>
 800bf0a:	a353      	add	r3, pc, #332	; (adr r3, 800c058 <__ieee754_pow+0x9f0>)
 800bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf10:	f7f4 f936 	bl	8000180 <__adddf3>
 800bf14:	4622      	mov	r2, r4
 800bf16:	462b      	mov	r3, r5
 800bf18:	f7f4 fae8 	bl	80004ec <__aeabi_dmul>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4640      	mov	r0, r8
 800bf22:	4649      	mov	r1, r9
 800bf24:	f7f4 f92a 	bl	800017c <__aeabi_dsub>
 800bf28:	4604      	mov	r4, r0
 800bf2a:	460d      	mov	r5, r1
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4640      	mov	r0, r8
 800bf32:	4649      	mov	r1, r9
 800bf34:	f7f4 fada 	bl	80004ec <__aeabi_dmul>
 800bf38:	2200      	movs	r2, #0
 800bf3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf42:	4620      	mov	r0, r4
 800bf44:	4629      	mov	r1, r5
 800bf46:	f7f4 f919 	bl	800017c <__aeabi_dsub>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf52:	f7f4 fbf5 	bl	8000740 <__aeabi_ddiv>
 800bf56:	4632      	mov	r2, r6
 800bf58:	4604      	mov	r4, r0
 800bf5a:	460d      	mov	r5, r1
 800bf5c:	463b      	mov	r3, r7
 800bf5e:	4640      	mov	r0, r8
 800bf60:	4649      	mov	r1, r9
 800bf62:	f7f4 fac3 	bl	80004ec <__aeabi_dmul>
 800bf66:	4632      	mov	r2, r6
 800bf68:	463b      	mov	r3, r7
 800bf6a:	f7f4 f909 	bl	8000180 <__adddf3>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	4620      	mov	r0, r4
 800bf74:	4629      	mov	r1, r5
 800bf76:	f7f4 f901 	bl	800017c <__aeabi_dsub>
 800bf7a:	4642      	mov	r2, r8
 800bf7c:	464b      	mov	r3, r9
 800bf7e:	f7f4 f8fd 	bl	800017c <__aeabi_dsub>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	2000      	movs	r0, #0
 800bf88:	4939      	ldr	r1, [pc, #228]	; (800c070 <__ieee754_pow+0xa08>)
 800bf8a:	f7f4 f8f7 	bl	800017c <__aeabi_dsub>
 800bf8e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bf92:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bf96:	da2b      	bge.n	800bff0 <__ieee754_pow+0x988>
 800bf98:	4652      	mov	r2, sl
 800bf9a:	f000 f9b9 	bl	800c310 <scalbn>
 800bf9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfa2:	f7ff bbf6 	b.w	800b792 <__ieee754_pow+0x12a>
 800bfa6:	4b33      	ldr	r3, [pc, #204]	; (800c074 <__ieee754_pow+0xa0c>)
 800bfa8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800bfac:	429f      	cmp	r7, r3
 800bfae:	f77f af13 	ble.w	800bdd8 <__ieee754_pow+0x770>
 800bfb2:	4b31      	ldr	r3, [pc, #196]	; (800c078 <__ieee754_pow+0xa10>)
 800bfb4:	440b      	add	r3, r1
 800bfb6:	4303      	orrs	r3, r0
 800bfb8:	d00b      	beq.n	800bfd2 <__ieee754_pow+0x96a>
 800bfba:	a329      	add	r3, pc, #164	; (adr r3, 800c060 <__ieee754_pow+0x9f8>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfc4:	f7f4 fa92 	bl	80004ec <__aeabi_dmul>
 800bfc8:	a325      	add	r3, pc, #148	; (adr r3, 800c060 <__ieee754_pow+0x9f8>)
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	f7ff bbe0 	b.w	800b792 <__ieee754_pow+0x12a>
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	462b      	mov	r3, r5
 800bfd6:	f7f4 f8d1 	bl	800017c <__aeabi_dsub>
 800bfda:	4642      	mov	r2, r8
 800bfdc:	464b      	mov	r3, r9
 800bfde:	f7f4 fd0b 	bl	80009f8 <__aeabi_dcmpge>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	f43f aef8 	beq.w	800bdd8 <__ieee754_pow+0x770>
 800bfe8:	e7e7      	b.n	800bfba <__ieee754_pow+0x952>
 800bfea:	f04f 0a00 	mov.w	sl, #0
 800bfee:	e71e      	b.n	800be2e <__ieee754_pow+0x7c6>
 800bff0:	4621      	mov	r1, r4
 800bff2:	e7d4      	b.n	800bf9e <__ieee754_pow+0x936>
 800bff4:	f04f 0b00 	mov.w	fp, #0
 800bff8:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c070 <__ieee754_pow+0xa08>
 800bffc:	f7ff bb95 	b.w	800b72a <__ieee754_pow+0xc2>
 800c000:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800c004:	f7ff bb91 	b.w	800b72a <__ieee754_pow+0xc2>
 800c008:	4638      	mov	r0, r7
 800c00a:	4641      	mov	r1, r8
 800c00c:	f7ff bbc3 	b.w	800b796 <__ieee754_pow+0x12e>
 800c010:	9200      	str	r2, [sp, #0]
 800c012:	f7ff bb9f 	b.w	800b754 <__ieee754_pow+0xec>
 800c016:	bf00      	nop
 800c018:	652b82fe 	.word	0x652b82fe
 800c01c:	3c971547 	.word	0x3c971547
 800c020:	00000000 	.word	0x00000000
 800c024:	3fe62e43 	.word	0x3fe62e43
 800c028:	fefa39ef 	.word	0xfefa39ef
 800c02c:	3fe62e42 	.word	0x3fe62e42
 800c030:	0ca86c39 	.word	0x0ca86c39
 800c034:	be205c61 	.word	0xbe205c61
 800c038:	72bea4d0 	.word	0x72bea4d0
 800c03c:	3e663769 	.word	0x3e663769
 800c040:	c5d26bf1 	.word	0xc5d26bf1
 800c044:	3ebbbd41 	.word	0x3ebbbd41
 800c048:	af25de2c 	.word	0xaf25de2c
 800c04c:	3f11566a 	.word	0x3f11566a
 800c050:	16bebd93 	.word	0x16bebd93
 800c054:	3f66c16c 	.word	0x3f66c16c
 800c058:	5555553e 	.word	0x5555553e
 800c05c:	3fc55555 	.word	0x3fc55555
 800c060:	c2f8f359 	.word	0xc2f8f359
 800c064:	01a56e1f 	.word	0x01a56e1f
 800c068:	3fe00000 	.word	0x3fe00000
 800c06c:	000fffff 	.word	0x000fffff
 800c070:	3ff00000 	.word	0x3ff00000
 800c074:	4090cbff 	.word	0x4090cbff
 800c078:	3f6f3400 	.word	0x3f6f3400

0800c07c <__ieee754_sqrt>:
 800c07c:	4b54      	ldr	r3, [pc, #336]	; (800c1d0 <__ieee754_sqrt+0x154>)
 800c07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c082:	438b      	bics	r3, r1
 800c084:	4606      	mov	r6, r0
 800c086:	460d      	mov	r5, r1
 800c088:	460a      	mov	r2, r1
 800c08a:	460c      	mov	r4, r1
 800c08c:	d10f      	bne.n	800c0ae <__ieee754_sqrt+0x32>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	f7f4 fa2b 	bl	80004ec <__aeabi_dmul>
 800c096:	4602      	mov	r2, r0
 800c098:	460b      	mov	r3, r1
 800c09a:	4630      	mov	r0, r6
 800c09c:	4629      	mov	r1, r5
 800c09e:	f7f4 f86f 	bl	8000180 <__adddf3>
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	460d      	mov	r5, r1
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ae:	2900      	cmp	r1, #0
 800c0b0:	4607      	mov	r7, r0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	dc0e      	bgt.n	800c0d4 <__ieee754_sqrt+0x58>
 800c0b6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c0ba:	ea5c 0707 	orrs.w	r7, ip, r7
 800c0be:	d0f2      	beq.n	800c0a6 <__ieee754_sqrt+0x2a>
 800c0c0:	b141      	cbz	r1, 800c0d4 <__ieee754_sqrt+0x58>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	f7f4 f859 	bl	800017c <__aeabi_dsub>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	f7f4 fb37 	bl	8000740 <__aeabi_ddiv>
 800c0d2:	e7e6      	b.n	800c0a2 <__ieee754_sqrt+0x26>
 800c0d4:	1512      	asrs	r2, r2, #20
 800c0d6:	d074      	beq.n	800c1c2 <__ieee754_sqrt+0x146>
 800c0d8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c0dc:	07d5      	lsls	r5, r2, #31
 800c0de:	f04f 0500 	mov.w	r5, #0
 800c0e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c0e6:	bf48      	it	mi
 800c0e8:	0fd9      	lsrmi	r1, r3, #31
 800c0ea:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800c0ee:	bf44      	itt	mi
 800c0f0:	005b      	lslmi	r3, r3, #1
 800c0f2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800c0f6:	1051      	asrs	r1, r2, #1
 800c0f8:	0fda      	lsrs	r2, r3, #31
 800c0fa:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800c0fe:	4628      	mov	r0, r5
 800c100:	2216      	movs	r2, #22
 800c102:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c106:	005b      	lsls	r3, r3, #1
 800c108:	1987      	adds	r7, r0, r6
 800c10a:	42a7      	cmp	r7, r4
 800c10c:	bfde      	ittt	le
 800c10e:	19b8      	addle	r0, r7, r6
 800c110:	1be4      	suble	r4, r4, r7
 800c112:	19ad      	addle	r5, r5, r6
 800c114:	0fdf      	lsrs	r7, r3, #31
 800c116:	3a01      	subs	r2, #1
 800c118:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800c11c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c120:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c124:	d1f0      	bne.n	800c108 <__ieee754_sqrt+0x8c>
 800c126:	f04f 0c20 	mov.w	ip, #32
 800c12a:	4696      	mov	lr, r2
 800c12c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c130:	4284      	cmp	r4, r0
 800c132:	eb06 070e 	add.w	r7, r6, lr
 800c136:	dc02      	bgt.n	800c13e <__ieee754_sqrt+0xc2>
 800c138:	d112      	bne.n	800c160 <__ieee754_sqrt+0xe4>
 800c13a:	429f      	cmp	r7, r3
 800c13c:	d810      	bhi.n	800c160 <__ieee754_sqrt+0xe4>
 800c13e:	2f00      	cmp	r7, #0
 800c140:	eb07 0e06 	add.w	lr, r7, r6
 800c144:	da42      	bge.n	800c1cc <__ieee754_sqrt+0x150>
 800c146:	f1be 0f00 	cmp.w	lr, #0
 800c14a:	db3f      	blt.n	800c1cc <__ieee754_sqrt+0x150>
 800c14c:	f100 0801 	add.w	r8, r0, #1
 800c150:	1a24      	subs	r4, r4, r0
 800c152:	4640      	mov	r0, r8
 800c154:	429f      	cmp	r7, r3
 800c156:	bf88      	it	hi
 800c158:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800c15c:	1bdb      	subs	r3, r3, r7
 800c15e:	4432      	add	r2, r6
 800c160:	0064      	lsls	r4, r4, #1
 800c162:	f1bc 0c01 	subs.w	ip, ip, #1
 800c166:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800c16a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c16e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c172:	d1dd      	bne.n	800c130 <__ieee754_sqrt+0xb4>
 800c174:	4323      	orrs	r3, r4
 800c176:	d006      	beq.n	800c186 <__ieee754_sqrt+0x10a>
 800c178:	1c54      	adds	r4, r2, #1
 800c17a:	bf0b      	itete	eq
 800c17c:	4662      	moveq	r2, ip
 800c17e:	3201      	addne	r2, #1
 800c180:	3501      	addeq	r5, #1
 800c182:	f022 0201 	bicne.w	r2, r2, #1
 800c186:	106b      	asrs	r3, r5, #1
 800c188:	0852      	lsrs	r2, r2, #1
 800c18a:	07e8      	lsls	r0, r5, #31
 800c18c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c190:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c194:	bf48      	it	mi
 800c196:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c19a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800c19e:	4616      	mov	r6, r2
 800c1a0:	e781      	b.n	800c0a6 <__ieee754_sqrt+0x2a>
 800c1a2:	0adc      	lsrs	r4, r3, #11
 800c1a4:	3915      	subs	r1, #21
 800c1a6:	055b      	lsls	r3, r3, #21
 800c1a8:	2c00      	cmp	r4, #0
 800c1aa:	d0fa      	beq.n	800c1a2 <__ieee754_sqrt+0x126>
 800c1ac:	02e6      	lsls	r6, r4, #11
 800c1ae:	d50a      	bpl.n	800c1c6 <__ieee754_sqrt+0x14a>
 800c1b0:	f1c2 0020 	rsb	r0, r2, #32
 800c1b4:	fa23 f000 	lsr.w	r0, r3, r0
 800c1b8:	1e55      	subs	r5, r2, #1
 800c1ba:	4093      	lsls	r3, r2
 800c1bc:	4304      	orrs	r4, r0
 800c1be:	1b4a      	subs	r2, r1, r5
 800c1c0:	e78a      	b.n	800c0d8 <__ieee754_sqrt+0x5c>
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	e7f0      	b.n	800c1a8 <__ieee754_sqrt+0x12c>
 800c1c6:	0064      	lsls	r4, r4, #1
 800c1c8:	3201      	adds	r2, #1
 800c1ca:	e7ef      	b.n	800c1ac <__ieee754_sqrt+0x130>
 800c1cc:	4680      	mov	r8, r0
 800c1ce:	e7bf      	b.n	800c150 <__ieee754_sqrt+0xd4>
 800c1d0:	7ff00000 	.word	0x7ff00000

0800c1d4 <fabs>:
 800c1d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4770      	bx	lr

0800c1dc <finite>:
 800c1dc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800c1e0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800c1e4:	0fc0      	lsrs	r0, r0, #31
 800c1e6:	4770      	bx	lr

0800c1e8 <matherr>:
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	4770      	bx	lr

0800c1ec <nan>:
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	4901      	ldr	r1, [pc, #4]	; (800c1f4 <nan+0x8>)
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	7ff80000 	.word	0x7ff80000

0800c1f8 <rint>:
 800c1f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c1fe:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800c202:	f1bc 0f13 	cmp.w	ip, #19
 800c206:	4604      	mov	r4, r0
 800c208:	460d      	mov	r5, r1
 800c20a:	460b      	mov	r3, r1
 800c20c:	4606      	mov	r6, r0
 800c20e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800c212:	dc5a      	bgt.n	800c2ca <rint+0xd2>
 800c214:	f1bc 0f00 	cmp.w	ip, #0
 800c218:	da2b      	bge.n	800c272 <rint+0x7a>
 800c21a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c21e:	4302      	orrs	r2, r0
 800c220:	d023      	beq.n	800c26a <rint+0x72>
 800c222:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c226:	4302      	orrs	r2, r0
 800c228:	4256      	negs	r6, r2
 800c22a:	4316      	orrs	r6, r2
 800c22c:	0c4b      	lsrs	r3, r1, #17
 800c22e:	0b36      	lsrs	r6, r6, #12
 800c230:	4934      	ldr	r1, [pc, #208]	; (800c304 <rint+0x10c>)
 800c232:	045b      	lsls	r3, r3, #17
 800c234:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800c238:	ea46 0503 	orr.w	r5, r6, r3
 800c23c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800c240:	4602      	mov	r2, r0
 800c242:	462b      	mov	r3, r5
 800c244:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c248:	4620      	mov	r0, r4
 800c24a:	4629      	mov	r1, r5
 800c24c:	f7f3 ff98 	bl	8000180 <__adddf3>
 800c250:	e9cd 0100 	strd	r0, r1, [sp]
 800c254:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c258:	462b      	mov	r3, r5
 800c25a:	4622      	mov	r2, r4
 800c25c:	f7f3 ff8e 	bl	800017c <__aeabi_dsub>
 800c260:	4604      	mov	r4, r0
 800c262:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c266:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800c26a:	4620      	mov	r0, r4
 800c26c:	4629      	mov	r1, r5
 800c26e:	b003      	add	sp, #12
 800c270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c272:	4a25      	ldr	r2, [pc, #148]	; (800c308 <rint+0x110>)
 800c274:	fa42 f20c 	asr.w	r2, r2, ip
 800c278:	4011      	ands	r1, r2
 800c27a:	4301      	orrs	r1, r0
 800c27c:	d0f5      	beq.n	800c26a <rint+0x72>
 800c27e:	0852      	lsrs	r2, r2, #1
 800c280:	ea05 0102 	and.w	r1, r5, r2
 800c284:	ea50 0601 	orrs.w	r6, r0, r1
 800c288:	d00c      	beq.n	800c2a4 <rint+0xac>
 800c28a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c28e:	f1bc 0f13 	cmp.w	ip, #19
 800c292:	bf0c      	ite	eq
 800c294:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800c298:	2600      	movne	r6, #0
 800c29a:	ea25 0202 	bic.w	r2, r5, r2
 800c29e:	fa43 f30c 	asr.w	r3, r3, ip
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	4917      	ldr	r1, [pc, #92]	; (800c304 <rint+0x10c>)
 800c2a6:	4632      	mov	r2, r6
 800c2a8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800c2ac:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	f7f3 ff64 	bl	8000180 <__adddf3>
 800c2b8:	e9cd 0100 	strd	r0, r1, [sp]
 800c2bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2c0:	4622      	mov	r2, r4
 800c2c2:	462b      	mov	r3, r5
 800c2c4:	f7f3 ff5a 	bl	800017c <__aeabi_dsub>
 800c2c8:	e008      	b.n	800c2dc <rint+0xe4>
 800c2ca:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800c2ce:	dd08      	ble.n	800c2e2 <rint+0xea>
 800c2d0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800c2d4:	d1c9      	bne.n	800c26a <rint+0x72>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	f7f3 ff52 	bl	8000180 <__adddf3>
 800c2dc:	4604      	mov	r4, r0
 800c2de:	460d      	mov	r5, r1
 800c2e0:	e7c3      	b.n	800c26a <rint+0x72>
 800c2e2:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800c2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ea:	40ca      	lsrs	r2, r1
 800c2ec:	4210      	tst	r0, r2
 800c2ee:	d0bc      	beq.n	800c26a <rint+0x72>
 800c2f0:	0852      	lsrs	r2, r2, #1
 800c2f2:	4210      	tst	r0, r2
 800c2f4:	bf1f      	itttt	ne
 800c2f6:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800c2fa:	ea20 0202 	bicne.w	r2, r0, r2
 800c2fe:	410e      	asrne	r6, r1
 800c300:	4316      	orrne	r6, r2
 800c302:	e7cf      	b.n	800c2a4 <rint+0xac>
 800c304:	0800ce88 	.word	0x0800ce88
 800c308:	000fffff 	.word	0x000fffff
 800c30c:	00000000 	.word	0x00000000

0800c310 <scalbn>:
 800c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c312:	4616      	mov	r6, r2
 800c314:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c318:	4604      	mov	r4, r0
 800c31a:	460d      	mov	r5, r1
 800c31c:	460b      	mov	r3, r1
 800c31e:	b982      	cbnz	r2, 800c342 <scalbn+0x32>
 800c320:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c324:	4303      	orrs	r3, r0
 800c326:	d034      	beq.n	800c392 <scalbn+0x82>
 800c328:	4b2d      	ldr	r3, [pc, #180]	; (800c3e0 <scalbn+0xd0>)
 800c32a:	2200      	movs	r2, #0
 800c32c:	f7f4 f8de 	bl	80004ec <__aeabi_dmul>
 800c330:	4b2c      	ldr	r3, [pc, #176]	; (800c3e4 <scalbn+0xd4>)
 800c332:	4604      	mov	r4, r0
 800c334:	429e      	cmp	r6, r3
 800c336:	460d      	mov	r5, r1
 800c338:	da0d      	bge.n	800c356 <scalbn+0x46>
 800c33a:	a325      	add	r3, pc, #148	; (adr r3, 800c3d0 <scalbn+0xc0>)
 800c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c340:	e01c      	b.n	800c37c <scalbn+0x6c>
 800c342:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c346:	42ba      	cmp	r2, r7
 800c348:	d109      	bne.n	800c35e <scalbn+0x4e>
 800c34a:	4602      	mov	r2, r0
 800c34c:	f7f3 ff18 	bl	8000180 <__adddf3>
 800c350:	4604      	mov	r4, r0
 800c352:	460d      	mov	r5, r1
 800c354:	e01d      	b.n	800c392 <scalbn+0x82>
 800c356:	460b      	mov	r3, r1
 800c358:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c35c:	3a36      	subs	r2, #54	; 0x36
 800c35e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c362:	4432      	add	r2, r6
 800c364:	428a      	cmp	r2, r1
 800c366:	dd0c      	ble.n	800c382 <scalbn+0x72>
 800c368:	4622      	mov	r2, r4
 800c36a:	462b      	mov	r3, r5
 800c36c:	a11a      	add	r1, pc, #104	; (adr r1, 800c3d8 <scalbn+0xc8>)
 800c36e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c372:	f000 f83b 	bl	800c3ec <copysign>
 800c376:	a318      	add	r3, pc, #96	; (adr r3, 800c3d8 <scalbn+0xc8>)
 800c378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37c:	f7f4 f8b6 	bl	80004ec <__aeabi_dmul>
 800c380:	e7e6      	b.n	800c350 <scalbn+0x40>
 800c382:	2a00      	cmp	r2, #0
 800c384:	dd08      	ble.n	800c398 <scalbn+0x88>
 800c386:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c38a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c38e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c392:	4620      	mov	r0, r4
 800c394:	4629      	mov	r1, r5
 800c396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c398:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c39c:	da0b      	bge.n	800c3b6 <scalbn+0xa6>
 800c39e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c3a2:	429e      	cmp	r6, r3
 800c3a4:	4622      	mov	r2, r4
 800c3a6:	462b      	mov	r3, r5
 800c3a8:	dce0      	bgt.n	800c36c <scalbn+0x5c>
 800c3aa:	a109      	add	r1, pc, #36	; (adr r1, 800c3d0 <scalbn+0xc0>)
 800c3ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3b0:	f000 f81c 	bl	800c3ec <copysign>
 800c3b4:	e7c1      	b.n	800c33a <scalbn+0x2a>
 800c3b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c3ba:	3236      	adds	r2, #54	; 0x36
 800c3bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c3c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	4b07      	ldr	r3, [pc, #28]	; (800c3e8 <scalbn+0xd8>)
 800c3cc:	e7d6      	b.n	800c37c <scalbn+0x6c>
 800c3ce:	bf00      	nop
 800c3d0:	c2f8f359 	.word	0xc2f8f359
 800c3d4:	01a56e1f 	.word	0x01a56e1f
 800c3d8:	8800759c 	.word	0x8800759c
 800c3dc:	7e37e43c 	.word	0x7e37e43c
 800c3e0:	43500000 	.word	0x43500000
 800c3e4:	ffff3cb0 	.word	0xffff3cb0
 800c3e8:	3c900000 	.word	0x3c900000

0800c3ec <copysign>:
 800c3ec:	b530      	push	{r4, r5, lr}
 800c3ee:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c3f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3f6:	ea42 0503 	orr.w	r5, r2, r3
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	bd30      	pop	{r4, r5, pc}
	...

0800c400 <_init>:
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	bf00      	nop
 800c404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c406:	bc08      	pop	{r3}
 800c408:	469e      	mov	lr, r3
 800c40a:	4770      	bx	lr

0800c40c <_fini>:
 800c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40e:	bf00      	nop
 800c410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c412:	bc08      	pop	{r3}
 800c414:	469e      	mov	lr, r3
 800c416:	4770      	bx	lr
