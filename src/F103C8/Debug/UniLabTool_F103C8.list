
UniLabTool_F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009df8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08009f08  08009f08  00019f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a708  0800a708  00020364  2**0
                  CONTENTS
  4 .ARM          00000008  0800a708  0800a708  0001a708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a710  0800a710  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a710  0800a710  0001a710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a714  0800a714  0001a714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800a718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028e8  20000364  0800aa7c  00020364  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c4c  0800aa7c  00022c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038c6e  00000000  00000000  0002038d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000075df  00000000  00000000  00058ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015a86  00000000  00000000  000605da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001680  00000000  00000000  00076060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002978  00000000  00000000  000776e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00022496  00000000  00000000  0007a058  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001b608  00000000  00000000  0009c4ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000a6606  00000000  00000000  000b7af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0015e0fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000529c  00000000  00000000  0015e178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000364 	.word	0x20000364
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ef0 	.word	0x08009ef0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000368 	.word	0x20000368
 800014c:	08009ef0 	.word	0x08009ef0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c38:	f1a2 0201 	sub.w	r2, r2, #1
 8000c3c:	d1ed      	bne.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__aeabi_f2iz>:
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001040:	d30f      	bcc.n	8001062 <__aeabi_f2iz+0x2a>
 8001042:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001046:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800104a:	d90d      	bls.n	8001068 <__aeabi_f2iz+0x30>
 800104c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001054:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001058:	fa23 f002 	lsr.w	r0, r3, r2
 800105c:	bf18      	it	ne
 800105e:	4240      	negne	r0, r0
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr
 8001068:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800106c:	d101      	bne.n	8001072 <__aeabi_f2iz+0x3a>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	d105      	bne.n	800107e <__aeabi_f2iz+0x46>
 8001072:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001076:	bf08      	it	eq
 8001078:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr

08001084 <__aeabi_uldivmod>:
 8001084:	b953      	cbnz	r3, 800109c <__aeabi_uldivmod+0x18>
 8001086:	b94a      	cbnz	r2, 800109c <__aeabi_uldivmod+0x18>
 8001088:	2900      	cmp	r1, #0
 800108a:	bf08      	it	eq
 800108c:	2800      	cmpeq	r0, #0
 800108e:	bf1c      	itt	ne
 8001090:	f04f 31ff 	movne.w	r1, #4294967295
 8001094:	f04f 30ff 	movne.w	r0, #4294967295
 8001098:	f000 b974 	b.w	8001384 <__aeabi_idiv0>
 800109c:	f1ad 0c08 	sub.w	ip, sp, #8
 80010a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010a4:	f000 f806 	bl	80010b4 <__udivmoddi4>
 80010a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010b0:	b004      	add	sp, #16
 80010b2:	4770      	bx	lr

080010b4 <__udivmoddi4>:
 80010b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b8:	468c      	mov	ip, r1
 80010ba:	4604      	mov	r4, r0
 80010bc:	9e08      	ldr	r6, [sp, #32]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d14b      	bne.n	800115a <__udivmoddi4+0xa6>
 80010c2:	428a      	cmp	r2, r1
 80010c4:	4615      	mov	r5, r2
 80010c6:	d967      	bls.n	8001198 <__udivmoddi4+0xe4>
 80010c8:	fab2 f282 	clz	r2, r2
 80010cc:	b14a      	cbz	r2, 80010e2 <__udivmoddi4+0x2e>
 80010ce:	f1c2 0720 	rsb	r7, r2, #32
 80010d2:	fa01 f302 	lsl.w	r3, r1, r2
 80010d6:	fa20 f707 	lsr.w	r7, r0, r7
 80010da:	4095      	lsls	r5, r2
 80010dc:	ea47 0c03 	orr.w	ip, r7, r3
 80010e0:	4094      	lsls	r4, r2
 80010e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010e6:	fbbc f7fe 	udiv	r7, ip, lr
 80010ea:	fa1f f885 	uxth.w	r8, r5
 80010ee:	fb0e c317 	mls	r3, lr, r7, ip
 80010f2:	fb07 f908 	mul.w	r9, r7, r8
 80010f6:	0c21      	lsrs	r1, r4, #16
 80010f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80010fc:	4599      	cmp	r9, r3
 80010fe:	d909      	bls.n	8001114 <__udivmoddi4+0x60>
 8001100:	18eb      	adds	r3, r5, r3
 8001102:	f107 31ff 	add.w	r1, r7, #4294967295
 8001106:	f080 811c 	bcs.w	8001342 <__udivmoddi4+0x28e>
 800110a:	4599      	cmp	r9, r3
 800110c:	f240 8119 	bls.w	8001342 <__udivmoddi4+0x28e>
 8001110:	3f02      	subs	r7, #2
 8001112:	442b      	add	r3, r5
 8001114:	eba3 0309 	sub.w	r3, r3, r9
 8001118:	fbb3 f0fe 	udiv	r0, r3, lr
 800111c:	fb0e 3310 	mls	r3, lr, r0, r3
 8001120:	fb00 f108 	mul.w	r1, r0, r8
 8001124:	b2a4      	uxth	r4, r4
 8001126:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800112a:	42a1      	cmp	r1, r4
 800112c:	d909      	bls.n	8001142 <__udivmoddi4+0x8e>
 800112e:	192c      	adds	r4, r5, r4
 8001130:	f100 33ff 	add.w	r3, r0, #4294967295
 8001134:	f080 8107 	bcs.w	8001346 <__udivmoddi4+0x292>
 8001138:	42a1      	cmp	r1, r4
 800113a:	f240 8104 	bls.w	8001346 <__udivmoddi4+0x292>
 800113e:	3802      	subs	r0, #2
 8001140:	442c      	add	r4, r5
 8001142:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001146:	2700      	movs	r7, #0
 8001148:	1a64      	subs	r4, r4, r1
 800114a:	b11e      	cbz	r6, 8001154 <__udivmoddi4+0xa0>
 800114c:	2300      	movs	r3, #0
 800114e:	40d4      	lsrs	r4, r2
 8001150:	e9c6 4300 	strd	r4, r3, [r6]
 8001154:	4639      	mov	r1, r7
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	428b      	cmp	r3, r1
 800115c:	d909      	bls.n	8001172 <__udivmoddi4+0xbe>
 800115e:	2e00      	cmp	r6, #0
 8001160:	f000 80ec 	beq.w	800133c <__udivmoddi4+0x288>
 8001164:	2700      	movs	r7, #0
 8001166:	e9c6 0100 	strd	r0, r1, [r6]
 800116a:	4638      	mov	r0, r7
 800116c:	4639      	mov	r1, r7
 800116e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001172:	fab3 f783 	clz	r7, r3
 8001176:	2f00      	cmp	r7, #0
 8001178:	d148      	bne.n	800120c <__udivmoddi4+0x158>
 800117a:	428b      	cmp	r3, r1
 800117c:	d302      	bcc.n	8001184 <__udivmoddi4+0xd0>
 800117e:	4282      	cmp	r2, r0
 8001180:	f200 80fb 	bhi.w	800137a <__udivmoddi4+0x2c6>
 8001184:	1a84      	subs	r4, r0, r2
 8001186:	eb61 0303 	sbc.w	r3, r1, r3
 800118a:	2001      	movs	r0, #1
 800118c:	469c      	mov	ip, r3
 800118e:	2e00      	cmp	r6, #0
 8001190:	d0e0      	beq.n	8001154 <__udivmoddi4+0xa0>
 8001192:	e9c6 4c00 	strd	r4, ip, [r6]
 8001196:	e7dd      	b.n	8001154 <__udivmoddi4+0xa0>
 8001198:	b902      	cbnz	r2, 800119c <__udivmoddi4+0xe8>
 800119a:	deff      	udf	#255	; 0xff
 800119c:	fab2 f282 	clz	r2, r2
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	f040 808f 	bne.w	80012c4 <__udivmoddi4+0x210>
 80011a6:	2701      	movs	r7, #1
 80011a8:	1b49      	subs	r1, r1, r5
 80011aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80011ae:	fa1f f985 	uxth.w	r9, r5
 80011b2:	fbb1 fef8 	udiv	lr, r1, r8
 80011b6:	fb08 111e 	mls	r1, r8, lr, r1
 80011ba:	fb09 f00e 	mul.w	r0, r9, lr
 80011be:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80011c2:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80011c6:	4298      	cmp	r0, r3
 80011c8:	d907      	bls.n	80011da <__udivmoddi4+0x126>
 80011ca:	18eb      	adds	r3, r5, r3
 80011cc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80011d0:	d202      	bcs.n	80011d8 <__udivmoddi4+0x124>
 80011d2:	4298      	cmp	r0, r3
 80011d4:	f200 80cd 	bhi.w	8001372 <__udivmoddi4+0x2be>
 80011d8:	468e      	mov	lr, r1
 80011da:	1a1b      	subs	r3, r3, r0
 80011dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80011e0:	fb08 3310 	mls	r3, r8, r0, r3
 80011e4:	fb09 f900 	mul.w	r9, r9, r0
 80011e8:	b2a4      	uxth	r4, r4
 80011ea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ee:	45a1      	cmp	r9, r4
 80011f0:	d907      	bls.n	8001202 <__udivmoddi4+0x14e>
 80011f2:	192c      	adds	r4, r5, r4
 80011f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80011f8:	d202      	bcs.n	8001200 <__udivmoddi4+0x14c>
 80011fa:	45a1      	cmp	r9, r4
 80011fc:	f200 80b6 	bhi.w	800136c <__udivmoddi4+0x2b8>
 8001200:	4618      	mov	r0, r3
 8001202:	eba4 0409 	sub.w	r4, r4, r9
 8001206:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800120a:	e79e      	b.n	800114a <__udivmoddi4+0x96>
 800120c:	f1c7 0520 	rsb	r5, r7, #32
 8001210:	40bb      	lsls	r3, r7
 8001212:	fa22 fc05 	lsr.w	ip, r2, r5
 8001216:	ea4c 0c03 	orr.w	ip, ip, r3
 800121a:	fa21 f405 	lsr.w	r4, r1, r5
 800121e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001222:	fbb4 f9fe 	udiv	r9, r4, lr
 8001226:	fa1f f88c 	uxth.w	r8, ip
 800122a:	fb0e 4419 	mls	r4, lr, r9, r4
 800122e:	fa20 f305 	lsr.w	r3, r0, r5
 8001232:	40b9      	lsls	r1, r7
 8001234:	fb09 fa08 	mul.w	sl, r9, r8
 8001238:	4319      	orrs	r1, r3
 800123a:	0c0b      	lsrs	r3, r1, #16
 800123c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001240:	45a2      	cmp	sl, r4
 8001242:	fa02 f207 	lsl.w	r2, r2, r7
 8001246:	fa00 f307 	lsl.w	r3, r0, r7
 800124a:	d90b      	bls.n	8001264 <__udivmoddi4+0x1b0>
 800124c:	eb1c 0404 	adds.w	r4, ip, r4
 8001250:	f109 30ff 	add.w	r0, r9, #4294967295
 8001254:	f080 8088 	bcs.w	8001368 <__udivmoddi4+0x2b4>
 8001258:	45a2      	cmp	sl, r4
 800125a:	f240 8085 	bls.w	8001368 <__udivmoddi4+0x2b4>
 800125e:	f1a9 0902 	sub.w	r9, r9, #2
 8001262:	4464      	add	r4, ip
 8001264:	eba4 040a 	sub.w	r4, r4, sl
 8001268:	fbb4 f0fe 	udiv	r0, r4, lr
 800126c:	fb0e 4410 	mls	r4, lr, r0, r4
 8001270:	fb00 fa08 	mul.w	sl, r0, r8
 8001274:	b289      	uxth	r1, r1
 8001276:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800127a:	45a2      	cmp	sl, r4
 800127c:	d908      	bls.n	8001290 <__udivmoddi4+0x1dc>
 800127e:	eb1c 0404 	adds.w	r4, ip, r4
 8001282:	f100 31ff 	add.w	r1, r0, #4294967295
 8001286:	d26b      	bcs.n	8001360 <__udivmoddi4+0x2ac>
 8001288:	45a2      	cmp	sl, r4
 800128a:	d969      	bls.n	8001360 <__udivmoddi4+0x2ac>
 800128c:	3802      	subs	r0, #2
 800128e:	4464      	add	r4, ip
 8001290:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001294:	fba0 8902 	umull	r8, r9, r0, r2
 8001298:	eba4 040a 	sub.w	r4, r4, sl
 800129c:	454c      	cmp	r4, r9
 800129e:	4641      	mov	r1, r8
 80012a0:	46ce      	mov	lr, r9
 80012a2:	d354      	bcc.n	800134e <__udivmoddi4+0x29a>
 80012a4:	d051      	beq.n	800134a <__udivmoddi4+0x296>
 80012a6:	2e00      	cmp	r6, #0
 80012a8:	d069      	beq.n	800137e <__udivmoddi4+0x2ca>
 80012aa:	1a5a      	subs	r2, r3, r1
 80012ac:	eb64 040e 	sbc.w	r4, r4, lr
 80012b0:	fa04 f505 	lsl.w	r5, r4, r5
 80012b4:	fa22 f307 	lsr.w	r3, r2, r7
 80012b8:	40fc      	lsrs	r4, r7
 80012ba:	431d      	orrs	r5, r3
 80012bc:	e9c6 5400 	strd	r5, r4, [r6]
 80012c0:	2700      	movs	r7, #0
 80012c2:	e747      	b.n	8001154 <__udivmoddi4+0xa0>
 80012c4:	4095      	lsls	r5, r2
 80012c6:	f1c2 0320 	rsb	r3, r2, #32
 80012ca:	fa21 f003 	lsr.w	r0, r1, r3
 80012ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012d2:	fbb0 f7f8 	udiv	r7, r0, r8
 80012d6:	fa1f f985 	uxth.w	r9, r5
 80012da:	fb08 0017 	mls	r0, r8, r7, r0
 80012de:	fa24 f303 	lsr.w	r3, r4, r3
 80012e2:	4091      	lsls	r1, r2
 80012e4:	fb07 fc09 	mul.w	ip, r7, r9
 80012e8:	430b      	orrs	r3, r1
 80012ea:	0c19      	lsrs	r1, r3, #16
 80012ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012f0:	458c      	cmp	ip, r1
 80012f2:	fa04 f402 	lsl.w	r4, r4, r2
 80012f6:	d907      	bls.n	8001308 <__udivmoddi4+0x254>
 80012f8:	1869      	adds	r1, r5, r1
 80012fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80012fe:	d231      	bcs.n	8001364 <__udivmoddi4+0x2b0>
 8001300:	458c      	cmp	ip, r1
 8001302:	d92f      	bls.n	8001364 <__udivmoddi4+0x2b0>
 8001304:	3f02      	subs	r7, #2
 8001306:	4429      	add	r1, r5
 8001308:	eba1 010c 	sub.w	r1, r1, ip
 800130c:	fbb1 f0f8 	udiv	r0, r1, r8
 8001310:	fb08 1c10 	mls	ip, r8, r0, r1
 8001314:	fb00 fe09 	mul.w	lr, r0, r9
 8001318:	b299      	uxth	r1, r3
 800131a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800131e:	458e      	cmp	lr, r1
 8001320:	d907      	bls.n	8001332 <__udivmoddi4+0x27e>
 8001322:	1869      	adds	r1, r5, r1
 8001324:	f100 33ff 	add.w	r3, r0, #4294967295
 8001328:	d218      	bcs.n	800135c <__udivmoddi4+0x2a8>
 800132a:	458e      	cmp	lr, r1
 800132c:	d916      	bls.n	800135c <__udivmoddi4+0x2a8>
 800132e:	3802      	subs	r0, #2
 8001330:	4429      	add	r1, r5
 8001332:	eba1 010e 	sub.w	r1, r1, lr
 8001336:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800133a:	e73a      	b.n	80011b2 <__udivmoddi4+0xfe>
 800133c:	4637      	mov	r7, r6
 800133e:	4630      	mov	r0, r6
 8001340:	e708      	b.n	8001154 <__udivmoddi4+0xa0>
 8001342:	460f      	mov	r7, r1
 8001344:	e6e6      	b.n	8001114 <__udivmoddi4+0x60>
 8001346:	4618      	mov	r0, r3
 8001348:	e6fb      	b.n	8001142 <__udivmoddi4+0x8e>
 800134a:	4543      	cmp	r3, r8
 800134c:	d2ab      	bcs.n	80012a6 <__udivmoddi4+0x1f2>
 800134e:	ebb8 0102 	subs.w	r1, r8, r2
 8001352:	eb69 020c 	sbc.w	r2, r9, ip
 8001356:	3801      	subs	r0, #1
 8001358:	4696      	mov	lr, r2
 800135a:	e7a4      	b.n	80012a6 <__udivmoddi4+0x1f2>
 800135c:	4618      	mov	r0, r3
 800135e:	e7e8      	b.n	8001332 <__udivmoddi4+0x27e>
 8001360:	4608      	mov	r0, r1
 8001362:	e795      	b.n	8001290 <__udivmoddi4+0x1dc>
 8001364:	4607      	mov	r7, r0
 8001366:	e7cf      	b.n	8001308 <__udivmoddi4+0x254>
 8001368:	4681      	mov	r9, r0
 800136a:	e77b      	b.n	8001264 <__udivmoddi4+0x1b0>
 800136c:	3802      	subs	r0, #2
 800136e:	442c      	add	r4, r5
 8001370:	e747      	b.n	8001202 <__udivmoddi4+0x14e>
 8001372:	f1ae 0e02 	sub.w	lr, lr, #2
 8001376:	442b      	add	r3, r5
 8001378:	e72f      	b.n	80011da <__udivmoddi4+0x126>
 800137a:	4638      	mov	r0, r7
 800137c:	e707      	b.n	800118e <__udivmoddi4+0xda>
 800137e:	4637      	mov	r7, r6
 8001380:	e6e8      	b.n	8001154 <__udivmoddi4+0xa0>
 8001382:	bf00      	nop

08001384 <__aeabi_idiv0>:
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LL_APB2_GRP1_EnableClock+0x18>)
{
 800138a:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	4302      	orrs	r2, r0
 8001390:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4018      	ands	r0, r3
 8001396:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001398:	9b01      	ldr	r3, [sp, #4]
}
 800139a:	b002      	add	sp, #8
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000

080013a4 <LL_ADC_SetChannelSamplingTime.constprop.21>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 80013a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013aa:	fa93 f3a3 	rbit	r3, r3
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	f000 7400 	and.w	r4, r0, #33554432	; 0x2000000
 80013b6:	4d0f      	ldr	r5, [pc, #60]	; (80013f4 <LL_ADC_SetChannelSamplingTime.constprop.21+0x50>)
 80013b8:	40dc      	lsrs	r4, r3
  
  MODIFY_REG(*preg,
 80013ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80013be:	f000 70f8 	and.w	r0, r0, #32505856	; 0x1f00000
 80013c2:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80013c6:	fa93 f1a3 	rbit	r1, r3
 80013ca:	fab1 f181 	clz	r1, r1
 80013ce:	fa93 f3a3 	rbit	r3, r3
 80013d2:	fab3 f383 	clz	r3, r3
 80013d6:	2607      	movs	r6, #7
 80013d8:	fa20 f101 	lsr.w	r1, r0, r1
 80013dc:	40d8      	lsrs	r0, r3
 80013de:	2306      	movs	r3, #6
 80013e0:	fa06 f101 	lsl.w	r1, r6, r1
 80013e4:	ea22 0201 	bic.w	r2, r2, r1
 80013e8:	fa03 f000 	lsl.w	r0, r3, r0
 80013ec:	4310      	orrs	r0, r2
 80013ee:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80013f2:	bd70      	pop	{r4, r5, r6, pc}
 80013f4:	4001240c 	.word	0x4001240c

080013f8 <NVIC_EncodePriority.constprop.23>:

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80013f8:	2000      	movs	r0, #0
 80013fa:	4770      	bx	lr

080013fc <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <SystemClock_Config+0xa0>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fe:	b510      	push	{r4, lr}
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	f022 0207 	bic.w	r2, r2, #7
 8001406:	f042 0202 	orr.w	r2, r2, #2
 800140a:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	f002 0207 	and.w	r2, r2, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001412:	2a02      	cmp	r2, #2
 8001414:	d1fa      	bne.n	800140c <SystemClock_Config+0x10>
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001416:	4c22      	ldr	r4, [pc, #136]	; (80014a0 <SystemClock_Config+0xa4>)
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141e:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001420:	6823      	ldr	r3, [r4, #0]
  {
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001422:	039a      	lsls	r2, r3, #14
 8001424:	d5fc      	bpl.n	8001420 <SystemClock_Config+0x24>
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800142c:	6023      	str	r3, [r4, #0]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800142e:	6863      	ldr	r3, [r4, #4]
 8001430:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001434:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001438:	6063      	str	r3, [r4, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001440:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001442:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_EnableCSS();
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001444:	019b      	lsls	r3, r3, #6
 8001446:	d5fc      	bpl.n	8001442 <SystemClock_Config+0x46>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001448:	6863      	ldr	r3, [r4, #4]
 800144a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800144e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001450:	6863      	ldr	r3, [r4, #4]
 8001452:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800145a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800145c:	6863      	ldr	r3, [r4, #4]
 800145e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001462:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001464:	6863      	ldr	r3, [r4, #4]
 8001466:	f023 0303 	bic.w	r3, r3, #3
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001470:	6863      	ldr	r3, [r4, #4]
 8001472:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001476:	2b08      	cmp	r3, #8
 8001478:	d1fa      	bne.n	8001470 <SystemClock_Config+0x74>
  {

  }
  LL_SetSystemCoreClock(72000000);
 800147a:	480a      	ldr	r0, [pc, #40]	; (80014a4 <SystemClock_Config+0xa8>)
 800147c:	f002 fc54 	bl	8003d28 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001480:	2000      	movs	r0, #0
 8001482:	f000 fba1 	bl	8001bc8 <HAL_InitTick>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8001486:	6863      	ldr	r3, [r4, #4]
 8001488:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800148c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001490:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 8001492:	6863      	ldr	r3, [r4, #4]
 8001494:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001498:	6063      	str	r3, [r4, #4]
  {
    Error_Handler();
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
}
 800149a:	bd10      	pop	{r4, pc}
 800149c:	40022000 	.word	0x40022000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	044aa200 	.word	0x044aa200

080014a8 <main>:
{
 80014a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f04f 0914 	mov.w	r9, #20
{
 80014b0:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 80014b2:	f000 fbad 	bl	8001c10 <HAL_Init>
  SystemClock_Config();
 80014b6:	f7ff ffa1 	bl	80013fc <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	464a      	mov	r2, r9
 80014bc:	2100      	movs	r1, #0
 80014be:	a80e      	add	r0, sp, #56	; 0x38
 80014c0:	f006 f916 	bl	80076f0 <memset>

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80014c4:	2010      	movs	r0, #16
 80014c6:	f7ff ff5f 	bl	8001388 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80014ca:	2020      	movs	r0, #32
 80014cc:	f7ff ff5c 	bl	8001388 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80014d0:	2004      	movs	r0, #4
 80014d2:	f7ff ff59 	bl	8001388 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80014d6:	2008      	movs	r0, #8
 80014d8:	f7ff ff56 	bl	8001388 <LL_APB2_GRP1_EnableClock>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80014dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e0:	48c8      	ldr	r0, [pc, #800]	; (8001804 <main+0x35c>)
  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014e2:	4ac9      	ldr	r2, [pc, #804]	; (8001808 <main+0x360>)
 80014e4:	6103      	str	r3, [r0, #16]
 80014e6:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014e8:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014ea:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014ee:	2302      	movs	r3, #2
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	a90e      	add	r1, sp, #56	; 0x38

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80014f2:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014f6:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fa:	f001 fc70 	bl	8002dde <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80014fe:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f8df a33c 	ldr.w	sl, [pc, #828]	; 8001840 <main+0x398>
 8001506:	a90e      	add	r1, sp, #56	; 0x38
 8001508:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800150a:	e9cd 380e 	strd	r3, r8, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f001 fc66 	bl	8002dde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001512:	f240 1301 	movw	r3, #257	; 0x101
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	a90e      	add	r1, sp, #56	; 0x38
 8001518:	48bc      	ldr	r0, [pc, #752]	; (800180c <main+0x364>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800151a:	e9cd 380e 	strd	r3, r8, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f001 fc5e 	bl	8002dde <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 8001522:	4bbb      	ldr	r3, [pc, #748]	; (8001810 <main+0x368>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4dbb      	ldr	r5, [pc, #748]	; (8001814 <main+0x36c>)
 8001526:	695a      	ldr	r2, [r3, #20]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	4fbb      	ldr	r7, [pc, #748]	; (8001818 <main+0x370>)
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	f002 0201 	and.w	r2, r2, #1
 8001538:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800153a:	9a02      	ldr	r2, [sp, #8]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	68e8      	ldr	r0, [r5, #12]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800153e:	f44f 7680 	mov.w	r6, #256	; 0x100
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001542:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001546:	f7ff ff57 	bl	80013f8 <NVIC_EncodePriority.constprop.23>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	fa00 f008 	lsl.w	r0, r0, r8
 8001552:	b2c0      	uxtb	r0, r0
 8001554:	f887 030b 	strb.w	r0, [r7, #779]	; 0x30b
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001558:	4621      	mov	r1, r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	603a      	str	r2, [r7, #0]
 800155c:	a809      	add	r0, sp, #36	; 0x24
 800155e:	464a      	mov	r2, r9
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001560:	e9cd 4404 	strd	r4, r4, [sp, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001564:	9403      	str	r4, [sp, #12]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001566:	f006 f8c3 	bl	80076f0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	464a      	mov	r2, r9
 800156c:	4621      	mov	r1, r4
 800156e:	a80e      	add	r0, sp, #56	; 0x38
 8001570:	f006 f8be 	bl	80076f0 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001574:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001578:	f7ff ff06 	bl	8001388 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800157c:	4640      	mov	r0, r8
 800157e:	f7ff ff03 	bl	8001388 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8001582:	f240 6206 	movw	r2, #1542	; 0x606
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	a90e      	add	r1, sp, #56	; 0x38
 8001588:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800158a:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f001 fc26 	bl	8002dde <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001592:	4aa2      	ldr	r2, [pc, #648]	; (800181c <main+0x374>)
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001594:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8001844 <main+0x39c>
 8001598:	6811      	ldr	r1, [r2, #0]
 800159a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800159e:	f021 0110 	bic.w	r1, r1, #16
 80015a2:	6011      	str	r1, [r2, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80015a4:	6811      	ldr	r1, [r2, #0]
 80015a6:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 80015aa:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80015ac:	6811      	ldr	r1, [r2, #0]
 80015ae:	f041 0120 	orr.w	r1, r1, #32
 80015b2:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80015b4:	6811      	ldr	r1, [r2, #0]
 80015b6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80015ba:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80015bc:	6811      	ldr	r1, [r2, #0]
 80015be:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80015c2:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80015c4:	6811      	ldr	r1, [r2, #0]
 80015c6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80015ca:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80015ce:	6011      	str	r1, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80015d0:	6811      	ldr	r1, [r2, #0]
 80015d2:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80015d6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80015da:	6011      	str	r1, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	68e8      	ldr	r0, [r5, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80015de:	4d90      	ldr	r5, [pc, #576]	; (8001820 <main+0x378>)
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80015e0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80015e4:	f7ff ff08 	bl	80013f8 <NVIC_EncodePriority.constprop.23>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	fa00 f008 	lsl.w	r0, r0, r8
 80015f0:	b2c0      	uxtb	r0, r0
 80015f2:	f887 0312 	strb.w	r0, [r7, #786]	; 0x312
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80015f6:	a904      	add	r1, sp, #16
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f8:	603a      	str	r2, [r7, #0]
 80015fa:	4628      	mov	r0, r5
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80015fc:	9605      	str	r6, [sp, #20]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80015fe:	9404      	str	r4, [sp, #16]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001600:	f001 fbb6 	bl	8002d70 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001604:	a916      	add	r1, sp, #88	; 0x58
 8001606:	f841 4d4c 	str.w	r4, [r1, #-76]!
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800160a:	4628      	mov	r0, r5
 800160c:	f001 fb94 	bl	8002d38 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 8001610:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001614:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001618:	4628      	mov	r0, r5
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 800161a:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800161e:	a909      	add	r1, sp, #36	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001620:	960d      	str	r6, [sp, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001622:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001626:	f001 fbb8 	bl	8002d9a <LL_ADC_REG_Init>
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDChannelGroup)
{
  MODIFY_REG(ADCx->CR1,
 800162a:	6869      	ldr	r1, [r5, #4]
 800162c:	4a7d      	ldr	r2, [pc, #500]	; (8001824 <main+0x37c>)
 800162e:	f44f 7640 	mov.w	r6, #768	; 0x300
 8001632:	400a      	ands	r2, r1
 8001634:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001638:	606a      	str	r2, [r5, #4]
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDThresholdsHighLow, uint32_t AWDThresholdValue)
{
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->HTR, AWDThresholdsHighLow);
  
  MODIFY_REG(*preg,
 800163a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->HTR, AWDThresholdsHighLow);
 800163c:	497a      	ldr	r1, [pc, #488]	; (8001828 <main+0x380>)
  MODIFY_REG(*preg,
 800163e:	ea6f 3212 	mvn.w	r2, r2, lsr #12
 8001642:	ea6f 3202 	mvn.w	r2, r2, lsl #12
 8001646:	626a      	str	r2, [r5, #36]	; 0x24
 8001648:	684a      	ldr	r2, [r1, #4]
 800164a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800164e:	f022 020f 	bic.w	r2, r2, #15
 8001652:	f042 020a 	orr.w	r2, r2, #10
 8001656:	604a      	str	r2, [r1, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR1, LL_ADC_IT_AWD1);
 8001658:	686a      	ldr	r2, [r5, #4]
 800165a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800165e:	606a      	str	r2, [r5, #4]
 8001660:	fa96 f0a6 	rbit	r0, r6
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001668:	fab0 f080 	clz	r0, r0
 800166c:	fa21 f000 	lsr.w	r0, r1, r0
  MODIFY_REG(*preg,
 8001670:	f85b 2020 	ldr.w	r2, [fp, r0, lsl #2]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001674:	9100      	str	r1, [sp, #0]
  MODIFY_REG(*preg,
 8001676:	f022 0c1f 	bic.w	ip, r2, #31
 800167a:	f04c 0211 	orr.w	r2, ip, #17
 800167e:	f84b 2020 	str.w	r2, [fp, r0, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 8001682:	486a      	ldr	r0, [pc, #424]	; (800182c <main+0x384>)
 8001684:	f7ff fe8e 	bl	80013a4 <LL_ADC_SetChannelSamplingTime.constprop.21>
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8001688:	68a8      	ldr	r0, [r5, #8]
 800168a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800168e:	60a8      	str	r0, [r5, #8]
 8001690:	fa96 f0a6 	rbit	r0, r6
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001694:	fab0 f080 	clz	r0, r0
 8001698:	9900      	ldr	r1, [sp, #0]
 800169a:	fa21 f000 	lsr.w	r0, r1, r0
  MODIFY_REG(*preg,
 800169e:	f85b 5020 	ldr.w	r5, [fp, r0, lsl #2]
 80016a2:	f425 7578 	bic.w	r5, r5, #992	; 0x3e0
 80016a6:	f045 0520 	orr.w	r5, r5, #32
 80016aa:	f84b 5020 	str.w	r5, [fp, r0, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 80016ae:	4860      	ldr	r0, [pc, #384]	; (8001830 <main+0x388>)
 80016b0:	f7ff fe78 	bl	80013a4 <LL_ADC_SetChannelSamplingTime.constprop.21>
 80016b4:	fa96 f6a6 	rbit	r6, r6
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80016b8:	fab6 f686 	clz	r6, r6
 80016bc:	9900      	ldr	r1, [sp, #0]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 80016be:	485d      	ldr	r0, [pc, #372]	; (8001834 <main+0x38c>)
 80016c0:	fa21 f606 	lsr.w	r6, r1, r6
  MODIFY_REG(*preg,
 80016c4:	f85b 1026 	ldr.w	r1, [fp, r6, lsl #2]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80016c8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80016cc:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80016d0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80016d4:	f84b 1026 	str.w	r1, [fp, r6, lsl #2]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80016d8:	2620      	movs	r6, #32
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 80016da:	f7ff fe63 	bl	80013a4 <LL_ADC_SetChannelSamplingTime.constprop.21>
  MX_USB_DEVICE_Init();
 80016de:	f003 f839 	bl	8004754 <MX_USB_DEVICE_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80016e2:	464a      	mov	r2, r9
 80016e4:	4621      	mov	r1, r4
 80016e6:	a804      	add	r0, sp, #16
 80016e8:	f006 f802 	bl	80076f0 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80016ec:	4632      	mov	r2, r6
 80016ee:	4621      	mov	r1, r4
 80016f0:	a80e      	add	r0, sp, #56	; 0x38
 80016f2:	f005 fffd 	bl	80076f0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	464a      	mov	r2, r9
 80016f8:	4621      	mov	r1, r4
 80016fa:	a809      	add	r0, sp, #36	; 0x24
 80016fc:	f005 fff8 	bl	80076f0 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8001700:	9b01      	ldr	r3, [sp, #4]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001702:	a904      	add	r1, sp, #16
 8001704:	69da      	ldr	r2, [r3, #28]
 8001706:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001710:	69db      	ldr	r3, [r3, #28]
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001712:	f04f 0b1c 	mov.w	fp, #28
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800171c:	9b03      	ldr	r3, [sp, #12]
  TIM_InitStruct.Autoreload = 1000;
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	9306      	str	r3, [sp, #24]
 8001724:	9300      	str	r3, [sp, #0]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001726:	f001 fc33 	bl	8002f90 <LL_TIM_Init>
 800172a:	682a      	ldr	r2, [r5, #0]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800172c:	2101      	movs	r1, #1
 800172e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001732:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001734:	68aa      	ldr	r2, [r5, #8]
 8001736:	4628      	mov	r0, r5
 8001738:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800173c:	f022 0207 	bic.w	r2, r2, #7
 8001740:	60aa      	str	r2, [r5, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001742:	69aa      	ldr	r2, [r5, #24]
 8001744:	f042 0208 	orr.w	r2, r2, #8
 8001748:	61aa      	str	r2, [r5, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800174a:	2260      	movs	r2, #96	; 0x60
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800174c:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001750:	aa0e      	add	r2, sp, #56	; 0x38
  TIM_OC_InitStruct.CompareValue = 0;
 8001752:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001756:	9412      	str	r4, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001758:	f001 fc52 	bl	8003000 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800175c:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800175e:	2110      	movs	r1, #16
 8001760:	f022 0204 	bic.w	r2, r2, #4
 8001764:	61aa      	str	r2, [r5, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001766:	69aa      	ldr	r2, [r5, #24]
 8001768:	4628      	mov	r0, r5
 800176a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800176e:	61aa      	str	r2, [r5, #24]
 8001770:	aa0e      	add	r2, sp, #56	; 0x38
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001772:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001776:	f001 fc43 	bl	8003000 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800177a:	69aa      	ldr	r2, [r5, #24]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800177c:	4640      	mov	r0, r8
 800177e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001782:	61aa      	str	r2, [r5, #24]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001784:	686a      	ldr	r2, [r5, #4]
 8001786:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800178a:	606a      	str	r2, [r5, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800178c:	68aa      	ldr	r2, [r5, #8]
 800178e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001792:	60aa      	str	r2, [r5, #8]
 8001794:	f7ff fdf8 	bl	8001388 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001798:	2008      	movs	r0, #8
 800179a:	f7ff fdf5 	bl	8001388 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800179e:	2509      	movs	r5, #9
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017a0:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017a2:	4a25      	ldr	r2, [pc, #148]	; (8001838 <main+0x390>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	a909      	add	r1, sp, #36	; 0x24
 80017a6:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017a8:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017ac:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f001 fb15 	bl	8002dde <LL_GPIO_Init>
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017b4:	2302      	movs	r3, #2
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80017b6:	f640 0208 	movw	r2, #2056	; 0x808
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	a909      	add	r1, sp, #36	; 0x24
 80017bc:	4813      	ldr	r0, [pc, #76]	; (800180c <main+0x364>)
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017be:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017c2:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f001 fb0a 	bl	8002dde <LL_GPIO_Init>
  * @note  PARTIAL_1: Partial remap (CH1/ETR/PA15, CH2/PB3, CH3/PA2,  CH4/PA3)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial1_TIM2(void)
{
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1 | AFIO_MAPR_SWJ_CFG));
 80017ca:	491c      	ldr	r1, [pc, #112]	; (800183c <main+0x394>)
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80017cc:	a80e      	add	r0, sp, #56	; 0x38
 80017ce:	684a      	ldr	r2, [r1, #4]
 80017d0:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80017d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80017d8:	f042 62e0 	orr.w	r2, r2, #117440512	; 0x7000000
 80017dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017e0:	604a      	str	r2, [r1, #4]
 80017e2:	465a      	mov	r2, fp
 80017e4:	4621      	mov	r1, r4
 80017e6:	f005 ff83 	bl	80076f0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	464a      	mov	r2, r9
 80017ec:	4621      	mov	r1, r4
 80017ee:	a809      	add	r0, sp, #36	; 0x24
 80017f0:	f005 ff7e 	bl	80076f0 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80017f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017f8:	f7ff fdc6 	bl	8001388 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80017fc:	4640      	mov	r0, r8
 80017fe:	f7ff fdc3 	bl	8001388 <LL_APB2_GRP1_EnableClock>
 8001802:	e021      	b.n	8001848 <main+0x3a0>
 8001804:	40011000 	.word	0x40011000
 8001808:	04200020 	.word	0x04200020
 800180c:	40010c00 	.word	0x40010c00
 8001810:	40021000 	.word	0x40021000
 8001814:	e000ed00 	.word	0xe000ed00
 8001818:	e000e100 	.word	0xe000e100
 800181c:	40020008 	.word	0x40020008
 8001820:	40012400 	.word	0x40012400
 8001824:	ff3ffde0 	.word	0xff3ffde0
 8001828:	40012424 	.word	0x40012424
 800182c:	81500011 	.word	0x81500011
 8001830:	02300001 	.word	0x02300001
 8001834:	02600002 	.word	0x02600002
 8001838:	04800080 	.word	0x04800080
 800183c:	40010000 	.word	0x40010000
 8001840:	40010800 	.word	0x40010800
 8001844:	4001242c 	.word	0x4001242c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001848:	4a53      	ldr	r2, [pc, #332]	; (8001998 <main+0x4f0>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800184c:	e9cd 2509 	strd	r2, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001850:	2203      	movs	r2, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	4650      	mov	r0, sl
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001854:	e9cd 240b 	strd	r2, r4, [sp, #44]	; 0x2c
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4d50      	ldr	r5, [pc, #320]	; (800199c <main+0x4f4>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f001 fac0 	bl	8002dde <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800185e:	4a50      	ldr	r2, [pc, #320]	; (80019a0 <main+0x4f8>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	a909      	add	r1, sp, #36	; 0x24
 8001862:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001864:	e9cd 2809 	strd	r2, r8, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f001 fab9 	bl	8002dde <LL_GPIO_Init>
 800186c:	68e8      	ldr	r0, [r5, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f04f 0a10 	mov.w	sl, #16
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001872:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001876:	f7ff fdbf 	bl	80013f8 <NVIC_EncodePriority.constprop.23>
  USART_InitStruct.BaudRate = 115200;
 800187a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	fa00 f008 	lsl.w	r0, r0, r8
 8001882:	b2c0      	uxtb	r0, r0
 8001884:	f887 0325 	strb.w	r0, [r7, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001888:	607e      	str	r6, [r7, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800188a:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800188e:	220c      	movs	r2, #12
  htim3.Init.Period = 72;
 8001890:	f04f 0948 	mov.w	r9, #72	; 0x48
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001894:	f04f 0880 	mov.w	r8, #128	; 0x80
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  LL_USART_Init(USART1, &USART_InitStruct);
 800189c:	4d41      	ldr	r5, [pc, #260]	; (80019a4 <main+0x4fc>)
 800189e:	a90e      	add	r1, sp, #56	; 0x38
 80018a0:	4628      	mov	r0, r5
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80018a2:	e9cd 2412 	strd	r2, r4, [sp, #72]	; 0x48
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80018a6:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80018aa:	9414      	str	r4, [sp, #80]	; 0x50
  LL_USART_Init(USART1, &USART_InitStruct);
 80018ac:	f001 fc70 	bl	8003190 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018b0:	692a      	ldr	r2, [r5, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	4621      	mov	r1, r4
 80018b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018b8:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80018ba:	696a      	ldr	r2, [r5, #20]
 80018bc:	a809      	add	r0, sp, #36	; 0x24
 80018be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018c2:	616a      	str	r2, [r5, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80018c4:	68ea      	ldr	r2, [r5, #12]
 80018c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018ca:	60ea      	str	r2, [r5, #12]
 80018cc:	4652      	mov	r2, sl
  htim3.Instance = TIM3;
 80018ce:	4d36      	ldr	r5, [pc, #216]	; (80019a8 <main+0x500>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d0:	f005 ff0e 	bl	80076f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d4:	4621      	mov	r1, r4
 80018d6:	465a      	mov	r2, fp
 80018d8:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018da:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018de:	f005 ff07 	bl	80076f0 <memset>
  htim3.Init.Prescaler = 1000;
 80018e2:	9b00      	ldr	r3, [sp, #0]
  htim3.Instance = TIM3;
 80018e4:	4a31      	ldr	r2, [pc, #196]	; (80019ac <main+0x504>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018e6:	4628      	mov	r0, r5
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	e9c5 3401 	strd	r3, r4, [r5, #4]
  htim3.Instance = TIM3;
 80018ec:	602a      	str	r2, [r5, #0]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	e9c5 9403 	strd	r9, r4, [r5, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f2:	f8c5 8018 	str.w	r8, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018f6:	f001 f8a1 	bl	8002a3c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018fa:	a909      	add	r1, sp, #36	; 0x24
 80018fc:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fe:	9709      	str	r7, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001900:	f001 f953 	bl	8002baa <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001904:	4628      	mov	r0, r5
 8001906:	f001 f8c5 	bl	8002a94 <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800190a:	eb0d 010a 	add.w	r1, sp, sl
 800190e:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001910:	e9cd 6404 	strd	r6, r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001914:	f001 f9de 	bl	8002cd4 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001918:	4622      	mov	r2, r4
 800191a:	a90e      	add	r1, sp, #56	; 0x38
 800191c:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0;
 800191e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001922:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001924:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001926:	f001 f90d 	bl	8002b44 <HAL_TIM_OC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192a:	4652      	mov	r2, sl
 800192c:	4621      	mov	r1, r4
 800192e:	a809      	add	r0, sp, #36	; 0x24
  htim4.Instance = TIM4;
 8001930:	4d1f      	ldr	r5, [pc, #124]	; (80019b0 <main+0x508>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f005 fedd 	bl	80076f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001936:	4621      	mov	r1, r4
 8001938:	465a      	mov	r2, fp
 800193a:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001940:	f005 fed6 	bl	80076f0 <memset>
  htim4.Init.Prescaler = 1000;
 8001944:	9b00      	ldr	r3, [sp, #0]
  htim4.Instance = TIM4;
 8001946:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <main+0x50c>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001948:	4628      	mov	r0, r5
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194a:	e9c5 3401 	strd	r3, r4, [r5, #4]
  htim4.Instance = TIM4;
 800194e:	602a      	str	r2, [r5, #0]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001950:	e9c5 9403 	strd	r9, r4, [r5, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001954:	f8c5 8018 	str.w	r8, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001958:	f001 f870 	bl	8002a3c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800195c:	a909      	add	r1, sp, #36	; 0x24
 800195e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001960:	9709      	str	r7, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001962:	f001 f922 	bl	8002baa <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001966:	4628      	mov	r0, r5
 8001968:	f001 f894 	bl	8002a94 <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800196c:	eb0d 010a 	add.w	r1, sp, sl
 8001970:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001976:	f001 f9ad 	bl	8002cd4 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197a:	4622      	mov	r2, r4
 800197c:	a90e      	add	r1, sp, #56	; 0x38
 800197e:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0;
 8001980:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001984:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001986:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001988:	f001 f8dc 	bl	8002b44 <HAL_TIM_OC_ConfigChannel>
  app_main();
 800198c:	f003 f91e 	bl	8004bcc <app_main>
}
 8001990:	4620      	mov	r0, r4
 8001992:	b017      	add	sp, #92	; 0x5c
 8001994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001998:	04020002 	.word	0x04020002
 800199c:	e000ed00 	.word	0xe000ed00
 80019a0:	04040004 	.word	0x04040004
 80019a4:	40013800 	.word	0x40013800
 80019a8:	200005f8 	.word	0x200005f8
 80019ac:	40000400 	.word	0x40000400
 80019b0:	200005b0 	.word	0x200005b0
 80019b4:	40000800 	.word	0x40000800

080019b8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019bc:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_MspInit+0x84>)
{
 80019be:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80019c2:	2101      	movs	r1, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c4:	f042 0201 	orr.w	r2, r2, #1
 80019c8:	619a      	str	r2, [r3, #24]
 80019ca:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80019cc:	f06f 000b 	mvn.w	r0, #11
  __HAL_RCC_AFIO_CLK_ENABLE();
 80019d0:	f002 0201 	and.w	r2, r2, #1
 80019d4:	9200      	str	r2, [sp, #0]
 80019d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d8:	69da      	ldr	r2, [r3, #28]
 80019da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019de:	61da      	str	r2, [r3, #28]
 80019e0:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80019e2:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80019ec:	f000 f940 	bl	8001c70 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2101      	movs	r1, #1
 80019f4:	f06f 000a 	mvn.w	r0, #10
 80019f8:	f000 f93a 	bl	8001c70 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2101      	movs	r1, #1
 8001a00:	f06f 0009 	mvn.w	r0, #9
 8001a04:	f000 f934 	bl	8001c70 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	f06f 0004 	mvn.w	r0, #4
 8001a10:	f000 f92e 	bl	8001c70 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2101      	movs	r1, #1
 8001a18:	f06f 0003 	mvn.w	r0, #3
 8001a1c:	f000 f928 	bl	8001c70 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	210f      	movs	r1, #15
 8001a24:	f06f 0001 	mvn.w	r0, #1
 8001a28:	f000 f922 	bl	8001c70 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <HAL_MspInit+0x88>)
 8001a2e:	6853      	ldr	r3, [r2, #4]
 8001a30:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	b003      	add	sp, #12
 8001a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010000 	.word	0x40010000

08001a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a48:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8001a4a:	6803      	ldr	r3, [r0, #0]
 8001a4c:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <HAL_TIM_Base_MspInit+0x54>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10c      	bne.n	8001a6c <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_TIM_Base_MspInit+0x58>)
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	f042 0202 	orr.w	r2, r2, #2
 8001a5a:	61da      	str	r2, [r3, #28]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a66:	b003      	add	sp, #12
 8001a68:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM4)
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_TIM_Base_MspInit+0x5c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d1f9      	bne.n	8001a66 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_TIM_Base_MspInit+0x58>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a74:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a76:	69da      	ldr	r2, [r3, #28]
 8001a78:	f042 0204 	orr.w	r2, r2, #4
 8001a7c:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a80:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a82:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a8c:	f000 f8f0 	bl	8001c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a90:	201e      	movs	r0, #30
}
 8001a92:	b003      	add	sp, #12
 8001a94:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a98:	f000 b91e 	b.w	8001cd8 <HAL_NVIC_EnableIRQ>
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40000800 	.word	0x40000800

08001aa8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001aa8:	4770      	bx	lr

08001aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aaa:	e7fe      	b.n	8001aaa <HardFault_Handler>

08001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aac:	e7fe      	b.n	8001aac <MemManage_Handler>

08001aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aae:	e7fe      	b.n	8001aae <BusFault_Handler>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler>

08001ab2 <SVC_Handler>:
 8001ab2:	4770      	bx	lr

08001ab4 <DebugMon_Handler>:
 8001ab4:	4770      	bx	lr

08001ab6 <PendSV_Handler>:
 8001ab6:	4770      	bx	lr

08001ab8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab8:	f000 b8bc 	b.w	8001c34 <HAL_IncTick>

08001abc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001abc:	4801      	ldr	r0, [pc, #4]	; (8001ac4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8001abe:	f000 b9d5 	b.w	8001e6c <HAL_PCD_IRQHandler>
 8001ac2:	bf00      	nop
 8001ac4:	200013a4 	.word	0x200013a4

08001ac8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001ac8:	2001      	movs	r0, #1
 8001aca:	4770      	bx	lr

08001acc <_kill>:

int _kill(int pid, int sig)
{
 8001acc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ace:	f005 fd83 	bl	80075d8 <__errno>
 8001ad2:	2316      	movs	r3, #22
 8001ad4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8001ada:	bd08      	pop	{r3, pc}

08001adc <_exit>:

void _exit (int status)
{
 8001adc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ade:	f005 fd7b 	bl	80075d8 <__errno>
 8001ae2:	2316      	movs	r3, #22
 8001ae4:	6003      	str	r3, [r0, #0]
 8001ae6:	e7fe      	b.n	8001ae6 <_exit+0xa>

08001ae8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae8:	b570      	push	{r4, r5, r6, lr}
 8001aea:	460e      	mov	r6, r1
 8001aec:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	460c      	mov	r4, r1
 8001af0:	1ba3      	subs	r3, r4, r6
 8001af2:	429d      	cmp	r5, r3
 8001af4:	dc01      	bgt.n	8001afa <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001af6:	4628      	mov	r0, r5
 8001af8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001afa:	f3af 8000 	nop.w
 8001afe:	f804 0b01 	strb.w	r0, [r4], #1
 8001b02:	e7f5      	b.n	8001af0 <_read+0x8>

08001b04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b04:	b570      	push	{r4, r5, r6, lr}
 8001b06:	460e      	mov	r6, r1
 8001b08:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	1ba3      	subs	r3, r4, r6
 8001b0e:	429d      	cmp	r5, r3
 8001b10:	dc01      	bgt.n	8001b16 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001b12:	4628      	mov	r0, r5
 8001b14:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001b16:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001b1a:	f3af 8000 	nop.w
 8001b1e:	e7f5      	b.n	8001b0c <_write+0x8>

08001b20 <_close>:

int _close(int file)
{
	return -1;
}
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	4770      	bx	lr

08001b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001b2a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001b2c:	604b      	str	r3, [r1, #4]
}
 8001b2e:	4770      	bx	lr

08001b30 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001b30:	2001      	movs	r0, #1
 8001b32:	4770      	bx	lr

08001b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001b34:	2000      	movs	r0, #0
 8001b36:	4770      	bx	lr

08001b38 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <_sbrk+0x30>)
{
 8001b3a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001b3c:	6819      	ldr	r1, [r3, #0]
{
 8001b3e:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001b40:	b909      	cbnz	r1, 8001b46 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001b42:	490a      	ldr	r1, [pc, #40]	; (8001b6c <_sbrk+0x34>)
 8001b44:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	4909      	ldr	r1, [pc, #36]	; (8001b70 <_sbrk+0x38>)
 8001b4a:	4c0a      	ldr	r4, [pc, #40]	; (8001b74 <_sbrk+0x3c>)
 8001b4c:	4402      	add	r2, r0
 8001b4e:	1b09      	subs	r1, r1, r4
 8001b50:	428a      	cmp	r2, r1
 8001b52:	d906      	bls.n	8001b62 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001b54:	f005 fd40 	bl	80075d8 <__errno>
 8001b58:	230c      	movs	r3, #12
 8001b5a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001b60:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001b62:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001b64:	e7fc      	b.n	8001b60 <_sbrk+0x28>
 8001b66:	bf00      	nop
 8001b68:	20000380 	.word	0x20000380
 8001b6c:	20002c50 	.word	0x20002c50
 8001b70:	20005000 	.word	0x20005000
 8001b74:	00000400 	.word	0x00000400

08001b78 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b78:	4770      	bx	lr
	...

08001b7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b7e:	e003      	b.n	8001b88 <LoopCopyDataInit>

08001b80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b86:	3104      	adds	r1, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b88:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b90:	d3f6      	bcc.n	8001b80 <CopyDataInit>
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b94:	e002      	b.n	8001b9c <LoopFillZerobss>

08001b96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b98:	f842 3b04 	str.w	r3, [r2], #4

08001b9c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ba0:	d3f9      	bcc.n	8001b96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ba2:	f7ff ffe9 	bl	8001b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f005 fd2f 	bl	8007608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001baa:	f7ff fc7d 	bl	80014a8 <main>
  bx lr
 8001bae:	4770      	bx	lr
  ldr r3, =_sidata
 8001bb0:	0800a718 	.word	0x0800a718
  ldr r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bb8:	20000364 	.word	0x20000364
  ldr r2, =_sbss
 8001bbc:	20000364 	.word	0x20000364
  ldr r3, = _ebss
 8001bc0:	20002c4c 	.word	0x20002c4c

08001bc4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <CAN1_RX1_IRQHandler>
	...

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_InitTick+0x3c>)
{
 8001bcc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bce:	7818      	ldrb	r0, [r3, #0]
 8001bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <HAL_InitTick+0x40>)
 8001bda:	6810      	ldr	r0, [r2, #0]
 8001bdc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001be0:	f000 f888 	bl	8001cf4 <HAL_SYSTICK_Config>
 8001be4:	4604      	mov	r4, r0
 8001be6:	b958      	cbnz	r0, 8001c00 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be8:	2d0f      	cmp	r5, #15
 8001bea:	d809      	bhi.n	8001c00 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bec:	4602      	mov	r2, r0
 8001bee:	4629      	mov	r1, r5
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f000 f83c 	bl	8001c70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <HAL_InitTick+0x44>)
 8001bfc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001bfe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001c00:	2001      	movs	r0, #1
 8001c02:	e7fc      	b.n	8001bfe <HAL_InitTick+0x36>
 8001c04:	20000004 	.word	0x20000004
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000008 	.word	0x20000008

08001c10 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4a07      	ldr	r2, [pc, #28]	; (8001c30 <HAL_Init+0x20>)
{
 8001c12:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c16:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	f043 0310 	orr.w	r3, r3, #16
 8001c1c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1e:	f000 f815 	bl	8001c4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff ffd0 	bl	8001bc8 <HAL_InitTick>
  HAL_MspInit();
 8001c28:	f7ff fec8 	bl	80019bc <HAL_MspInit>
}
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	bd08      	pop	{r3, pc}
 8001c30:	40022000 	.word	0x40022000

08001c34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c34:	4a03      	ldr	r2, [pc, #12]	; (8001c44 <HAL_IncTick+0x10>)
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <HAL_IncTick+0x14>)
 8001c38:	6811      	ldr	r1, [r2, #0]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	440b      	add	r3, r1
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2000070c 	.word	0x2000070c
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c4e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c52:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c5a:	041b      	lsls	r3, r3, #16
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001c66:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001c68:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c72:	b570      	push	{r4, r5, r6, lr}
 8001c74:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c76:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7e:	f1c4 0507 	rsb	r5, r4, #7
 8001c82:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c84:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	bf28      	it	cs
 8001c8a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	bf98      	it	ls
 8001c90:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c92:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	bf88      	it	hi
 8001c98:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9a:	ea21 0303 	bic.w	r3, r1, r3
 8001c9e:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	fa06 f404 	lsl.w	r4, r6, r4
 8001ca4:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001caa:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	bfa8      	it	ge
 8001cb0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001cb4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	bfb8      	it	lt
 8001cba:	4a06      	ldrlt	r2, [pc, #24]	; (8001cd4 <HAL_NVIC_SetPriority+0x64>)
 8001cbc:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	bfab      	itete	ge
 8001cc0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001cce:	bd70      	pop	{r4, r5, r6, pc}
 8001cd0:	e000ed00 	.word	0xe000ed00
 8001cd4:	e000ed14 	.word	0xe000ed14

08001cd8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	db08      	blt.n	8001cee <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cdc:	2301      	movs	r3, #1
 8001cde:	0942      	lsrs	r2, r0, #5
 8001ce0:	f000 001f 	and.w	r0, r0, #31
 8001ce4:	fa03 f000 	lsl.w	r0, r3, r0
 8001ce8:	4b01      	ldr	r3, [pc, #4]	; (8001cf0 <HAL_NVIC_EnableIRQ+0x18>)
 8001cea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	3801      	subs	r0, #1
 8001cf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001cfa:	d20a      	bcs.n	8001d12 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d22:	4604      	mov	r4, r0
{
 8001d24:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001d26:	b310      	cbz	r0, 8001d6e <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d28:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8001d2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d30:	b91b      	cbnz	r3, 8001d3a <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d32:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d36:	f002 fe17 	bl	8004968 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d3a:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d3c:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d3e:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8001d40:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d44:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8001d48:	f001 fa84 	bl	8003254 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001d50:	682b      	ldr	r3, [r5, #0]
 8001d52:	4625      	mov	r5, r4
 8001d54:	6033      	str	r3, [r6, #0]
 8001d56:	1d27      	adds	r7, r4, #4
 8001d58:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001d5c:	f855 0b10 	ldr.w	r0, [r5], #16
 8001d60:	f001 fa68 	bl	8003234 <USB_CoreInit>
 8001d64:	4606      	mov	r6, r0
 8001d66:	b120      	cbz	r0, 8001d72 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8001d6e:	2501      	movs	r5, #1
 8001d70:	e04b      	b.n	8001e0a <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d72:	4601      	mov	r1, r0
 8001d74:	6820      	ldr	r0, [r4, #0]
 8001d76:	f001 fa77 	bl	8003268 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7a:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d7c:	f04f 0e01 	mov.w	lr, #1
 8001d80:	2628      	movs	r6, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d82:	4601      	mov	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d84:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8001d88:	b2c2      	uxtb	r2, r0
 8001d8a:	4594      	cmp	ip, r2
 8001d8c:	f100 0001 	add.w	r0, r0, #1
 8001d90:	d818      	bhi.n	8001dc4 <HAL_PCD_Init+0xa4>
 8001d92:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d94:	2628      	movs	r6, #40	; 0x28
 8001d96:	4619      	mov	r1, r3
 8001d98:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9a:	4584      	cmp	ip, r0
 8001d9c:	f103 0301 	add.w	r3, r3, #1
 8001da0:	d81d      	bhi.n	8001dde <HAL_PCD_Init+0xbe>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da4:	466e      	mov	r6, sp
 8001da6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	6033      	str	r3, [r6, #0]
 8001dac:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001db0:	6820      	ldr	r0, [r4, #0]
 8001db2:	f001 fa5b 	bl	800326c <USB_DevInit>
 8001db6:	2301      	movs	r3, #1
 8001db8:	4605      	mov	r5, r0
 8001dba:	b1f8      	cbz	r0, 8001dfc <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
 8001dc2:	e7d4      	b.n	8001d6e <HAL_PCD_Init+0x4e>
 8001dc4:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001dc8:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001dcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dd0:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dd2:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dd6:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dda:	6419      	str	r1, [r3, #64]	; 0x40
 8001ddc:	e7d4      	b.n	8001d88 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8001dde:	fb06 4200 	mla	r2, r6, r0, r4
 8001de2:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001de6:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dea:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dee:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001df2:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001df6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 8001dfa:	e7cd      	b.n	8001d98 <HAL_PCD_Init+0x78>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001dfc:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e00:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e04:	6820      	ldr	r0, [r4, #0]
 8001e06:	f001 fcb0 	bl	800376a <USB_DevDisconnect>

  return HAL_OK;
}
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	b007      	add	sp, #28
 8001e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e10:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8001e12:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8001e16:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d010      	beq.n	8001e3e <HAL_PCD_Start+0x2e>
 8001e1c:	2501      	movs	r5, #1
 8001e1e:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e22:	6800      	ldr	r0, [r0, #0]
 8001e24:	f001 fa0d 	bl	8003242 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e28:	4629      	mov	r1, r5
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f002 fecd 	bl	8004bca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001e30:	6820      	ldr	r0, [r4, #0]
 8001e32:	f001 fc98 	bl	8003766 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e36:	2000      	movs	r0, #0
 8001e38:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001e3c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001e3e:	2002      	movs	r0, #2
 8001e40:	e7fc      	b.n	8001e3c <HAL_PCD_Start+0x2c>

08001e42 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001e42:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8001e46:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001e48:	2a01      	cmp	r2, #1
{
 8001e4a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001e4c:	d00b      	beq.n	8001e66 <HAL_PCD_SetAddress+0x24>
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e54:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e58:	6800      	ldr	r0, [r0, #0]
 8001e5a:	f001 fc7e 	bl	800375a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001e64:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001e66:	2002      	movs	r0, #2
 8001e68:	e7fc      	b.n	8001e64 <HAL_PCD_SetAddress+0x22>
	...

08001e6c <HAL_PCD_IRQHandler>:
{
 8001e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e70:	4604      	mov	r4, r0
 8001e72:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e74:	6800      	ldr	r0, [r0, #0]
 8001e76:	f001 fc7a 	bl	800376e <USB_ReadInterrupts>
 8001e7a:	0402      	lsls	r2, r0, #16
 8001e7c:	d509      	bpl.n	8001e92 <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e7e:	f8df 9828 	ldr.w	r9, [pc, #2088]	; 80026a8 <HAL_PCD_IRQHandler+0x83c>
 8001e82:	f8df 8828 	ldr.w	r8, [pc, #2088]	; 80026ac <HAL_PCD_IRQHandler+0x840>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e86:	6820      	ldr	r0, [r4, #0]
 8001e88:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	f100 80bc 	bmi.w	800200a <HAL_PCD_IRQHandler+0x19e>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e92:	6820      	ldr	r0, [r4, #0]
 8001e94:	f001 fc6b 	bl	800376e <USB_ReadInterrupts>
 8001e98:	0543      	lsls	r3, r0, #21
 8001e9a:	d50f      	bpl.n	8001ebc <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e9c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001e9e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ea0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ea8:	041b      	lsls	r3, r3, #16
 8001eaa:	0c1b      	lsrs	r3, r3, #16
 8001eac:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001eb0:	f002 fd95 	bl	80049de <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f7ff ffc3 	bl	8001e42 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ebc:	6820      	ldr	r0, [r4, #0]
 8001ebe:	f001 fc56 	bl	800376e <USB_ReadInterrupts>
 8001ec2:	0447      	lsls	r7, r0, #17
 8001ec4:	d508      	bpl.n	8001ed8 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ec6:	6822      	ldr	r2, [r4, #0]
 8001ec8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ed0:	041b      	lsls	r3, r3, #16
 8001ed2:	0c1b      	lsrs	r3, r3, #16
 8001ed4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ed8:	6820      	ldr	r0, [r4, #0]
 8001eda:	f001 fc48 	bl	800376e <USB_ReadInterrupts>
 8001ede:	0486      	lsls	r6, r0, #18
 8001ee0:	d508      	bpl.n	8001ef4 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ee2:	6822      	ldr	r2, [r4, #0]
 8001ee4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ee8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001eec:	041b      	lsls	r3, r3, #16
 8001eee:	0c1b      	lsrs	r3, r3, #16
 8001ef0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ef4:	6820      	ldr	r0, [r4, #0]
 8001ef6:	f001 fc3a 	bl	800376e <USB_ReadInterrupts>
 8001efa:	04c5      	lsls	r5, r0, #19
 8001efc:	d51c      	bpl.n	8001f38 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001efe:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001f00:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f02:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001f06:	f023 0304 	bic.w	r3, r3, #4
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f12:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001f16:	f023 0308 	bic.w	r3, r3, #8
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	0c1b      	lsrs	r3, r3, #16
 8001f1e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001f22:	f002 fd7f 	bl	8004a24 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f26:	6822      	ldr	r2, [r4, #0]
 8001f28:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f30:	041b      	lsls	r3, r3, #16
 8001f32:	0c1b      	lsrs	r3, r3, #16
 8001f34:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f38:	6820      	ldr	r0, [r4, #0]
 8001f3a:	f001 fc18 	bl	800376e <USB_ReadInterrupts>
 8001f3e:	0500      	lsls	r0, r0, #20
 8001f40:	d541      	bpl.n	8001fc6 <HAL_PCD_IRQHandler+0x15a>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f42:	2200      	movs	r2, #0
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001f4a:	f82d 1012 	strh.w	r1, [sp, r2, lsl #1]
 8001f4e:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8001f50:	2a08      	cmp	r2, #8
 8001f52:	d1f8      	bne.n	8001f46 <HAL_PCD_IRQHandler+0xda>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001f54:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001f60:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	0412      	lsls	r2, r2, #16
 8001f6a:	0c12      	lsrs	r2, r2, #16
 8001f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001f70:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001f74:	0551      	lsls	r1, r2, #21
 8001f76:	d5fb      	bpl.n	8001f70 <HAL_PCD_IRQHandler+0x104>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f78:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f80:	0412      	lsls	r2, r2, #16
 8001f82:	0c12      	lsrs	r2, r2, #16
 8001f84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001f88:	2200      	movs	r2, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f8a:	f83d 1012 	ldrh.w	r1, [sp, r2, lsl #1]
 8001f8e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8001f92:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 8001f94:	2a08      	cmp	r2, #8
 8001f96:	d1f8      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x11e>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f98:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001f9c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f9e:	f042 0208 	orr.w	r2, r2, #8
 8001fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001fa6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fae:	0412      	lsls	r2, r2, #16
 8001fb0:	0c12      	lsrs	r2, r2, #16
 8001fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001fb6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001fba:	f042 0204 	orr.w	r2, r2, #4
 8001fbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001fc2:	f002 fd1f 	bl	8004a04 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001fc6:	6820      	ldr	r0, [r4, #0]
 8001fc8:	f001 fbd1 	bl	800376e <USB_ReadInterrupts>
 8001fcc:	0582      	lsls	r2, r0, #22
 8001fce:	d50b      	bpl.n	8001fe8 <HAL_PCD_IRQHandler+0x17c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fd0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001fd2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fd4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	0c1b      	lsrs	r3, r3, #16
 8001fe0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001fe4:	f002 fcf7 	bl	80049d6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fe8:	6820      	ldr	r0, [r4, #0]
 8001fea:	f001 fbc0 	bl	800376e <USB_ReadInterrupts>
 8001fee:	05c3      	lsls	r3, r0, #23
 8001ff0:	d508      	bpl.n	8002004 <HAL_PCD_IRQHandler+0x198>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ff2:	6822      	ldr	r2, [r4, #0]
 8001ff4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	0c1b      	lsrs	r3, r3, #16
 8002000:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8002004:	b005      	add	sp, #20
 8002006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 800200a:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 800200e:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8002010:	f011 060f 	ands.w	r6, r1, #15
 8002014:	f040 80b1 	bne.w	800217a <HAL_PCD_IRQHandler+0x30e>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002018:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800201c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800201e:	d12a      	bne.n	8002076 <HAL_PCD_IRQHandler+0x20a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002020:	ea09 0303 	and.w	r3, r9, r3
 8002024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002028:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800202a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800202e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8002032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002036:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800203a:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800203e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002044:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002046:	4413      	add	r3, r2
 8002048:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800204a:	4620      	mov	r0, r4
 800204c:	f002 fcbb 	bl	80049c6 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002050:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002054:	2b00      	cmp	r3, #0
 8002056:	f43f af16 	beq.w	8001e86 <HAL_PCD_IRQHandler+0x1a>
 800205a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800205c:	2a00      	cmp	r2, #0
 800205e:	f47f af12 	bne.w	8001e86 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002062:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002066:	6821      	ldr	r1, [r4, #0]
 8002068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800206c:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002070:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8002074:	e707      	b.n	8001e86 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002076:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002078:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 800207c:	d020      	beq.n	80020c0 <HAL_PCD_IRQHandler+0x254>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800207e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002082:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002086:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800208a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800208e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002092:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002096:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800209a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800209e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020a2:	f001 fe25 	bl	8003cf0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020a6:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80020a8:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020aa:	8813      	ldrh	r3, [r2, #0]
 80020ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b0:	051b      	lsls	r3, r3, #20
 80020b2:	0d1b      	lsrs	r3, r3, #20
 80020b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b8:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80020ba:	f002 fc75 	bl	80049a8 <HAL_PCD_SetupStageCallback>
 80020be:	e6e2      	b.n	8001e86 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020c0:	041f      	lsls	r7, r3, #16
 80020c2:	f57f aee0 	bpl.w	8001e86 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020c6:	8803      	ldrh	r3, [r0, #0]
 80020c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020cc:	051b      	lsls	r3, r3, #20
 80020ce:	0d1b      	lsrs	r3, r3, #20
 80020d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d4:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020d6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80020da:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80020de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80020e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80020e6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80020ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ee:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020f2:	b18b      	cbz	r3, 8002118 <HAL_PCD_IRQHandler+0x2ac>
 80020f4:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 80020f8:	b171      	cbz	r1, 8002118 <HAL_PCD_IRQHandler+0x2ac>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020fa:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80020fe:	f001 fdf7 	bl	8003cf0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002102:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002106:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800210a:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800210c:	4413      	add	r3, r2
 800210e:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002112:	4620      	mov	r0, r4
 8002114:	f002 fc4e 	bl	80049b4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002118:	6821      	ldr	r1, [r4, #0]
 800211a:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 800211e:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002122:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8002126:	b29b      	uxth	r3, r3
 8002128:	b9bd      	cbnz	r5, 800215a <HAL_PCD_IRQHandler+0x2ee>
 800212a:	5ac2      	ldrh	r2, [r0, r3]
 800212c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002130:	0412      	lsls	r2, r2, #16
 8002132:	0c12      	lsrs	r2, r2, #16
 8002134:	52c2      	strh	r2, [r0, r3]
 8002136:	5ac2      	ldrh	r2, [r0, r3]
 8002138:	ea48 0202 	orr.w	r2, r8, r2
 800213c:	b292      	uxth	r2, r2
 800213e:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002140:	880b      	ldrh	r3, [r1, #0]
 8002142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800214e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002156:	800b      	strh	r3, [r1, #0]
 8002158:	e695      	b.n	8001e86 <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800215a:	2d3e      	cmp	r5, #62	; 0x3e
 800215c:	d805      	bhi.n	800216a <HAL_PCD_IRQHandler+0x2fe>
 800215e:	086a      	lsrs	r2, r5, #1
 8002160:	07ee      	lsls	r6, r5, #31
 8002162:	bf48      	it	mi
 8002164:	3201      	addmi	r2, #1
 8002166:	0292      	lsls	r2, r2, #10
 8002168:	e7e8      	b.n	800213c <HAL_PCD_IRQHandler+0x2d0>
 800216a:	096a      	lsrs	r2, r5, #5
 800216c:	06ed      	lsls	r5, r5, #27
 800216e:	bf08      	it	eq
 8002170:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002174:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8002178:	e7e0      	b.n	800213c <HAL_PCD_IRQHandler+0x2d0>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800217a:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
 800217e:	b2bf      	uxth	r7, r7
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002180:	0439      	lsls	r1, r7, #16
 8002182:	f140 80f2 	bpl.w	800236a <HAL_PCD_IRQHandler+0x4fe>
        if (ep->doublebuffer == 0U)
 8002186:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002188:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800218c:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002194:	051b      	lsls	r3, r3, #20
 8002196:	0d1b      	lsrs	r3, r3, #20
 8002198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800219c:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80021a0:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 80021a4:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80021a8:	b9ab      	cbnz	r3, 80021d6 <HAL_PCD_IRQHandler+0x36a>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021aa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80021ae:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80021b2:	3306      	adds	r3, #6
 80021b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80021b8:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80021bc:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80021c0:	2d00      	cmp	r5, #0
 80021c2:	f000 80b6 	beq.w	8002332 <HAL_PCD_IRQHandler+0x4c6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80021c6:	462b      	mov	r3, r5
 80021c8:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021cc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80021d0:	f001 fd8e 	bl	8003cf0 <USB_ReadPMA>
 80021d4:	e0ad      	b.n	8002332 <HAL_PCD_IRQHandler+0x4c6>
          if (ep->type == EP_TYPE_BULK)
 80021d6:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 80021da:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80021de:	2b02      	cmp	r3, #2
 80021e0:	f040 8089 	bne.w	80022f6 <HAL_PCD_IRQHandler+0x48a>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021e4:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 80021e8:	ea4f 05c2 	mov.w	r5, r2, lsl #3
 80021ec:	f8d1 3180 	ldr.w	r3, [r1, #384]	; 0x180
 80021f0:	f007 0e40 	and.w	lr, r7, #64	; 0x40
 80021f4:	d03e      	beq.n	8002274 <HAL_PCD_IRQHandler+0x408>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021f6:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 80021fa:	4455      	add	r5, sl
 80021fc:	3502      	adds	r5, #2
 80021fe:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8002202:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002206:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
    }
    else
    {
      ep->xfer_len = 0U;
 8002208:	bf8c      	ite	hi
 800220a:	2300      	movhi	r3, #0
      ep->xfer_len -= count;
 800220c:	1b5b      	subls	r3, r3, r5
      ep->xfer_len = 0U;
 800220e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
 8002212:	2328      	movs	r3, #40	; 0x28
 8002214:	fb03 4306 	mla	r3, r3, r6, r4
 8002218:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800221c:	b96b      	cbnz	r3, 800223a <HAL_PCD_IRQHandler+0x3ce>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800221e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800222e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002236:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800223a:	f1be 0f00 	cmp.w	lr, #0
 800223e:	d010      	beq.n	8002262 <HAL_PCD_IRQHandler+0x3f6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002240:	2328      	movs	r3, #40	; 0x28
 8002242:	fb03 4306 	mla	r3, r3, r6, r4
 8002246:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 800224a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800224e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002252:	051b      	lsls	r3, r3, #20
 8002254:	0d1b      	lsrs	r3, r3, #20
 8002256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800225e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8002262:	2d00      	cmp	r5, #0
 8002264:	d065      	beq.n	8002332 <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002266:	2128      	movs	r1, #40	; 0x28
 8002268:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800226c:	462b      	mov	r3, r5
 800226e:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002272:	e7ab      	b.n	80021cc <HAL_PCD_IRQHandler+0x360>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002274:	f8b0 b050 	ldrh.w	fp, [r0, #80]	; 0x50
 8002278:	445d      	add	r5, fp
 800227a:	3506      	adds	r5, #6
 800227c:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8002280:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002284:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
 8002286:	bf9c      	itt	ls
 8002288:	1b5b      	subls	r3, r3, r5
 800228a:	f8c1 3180 	strls.w	r3, [r1, #384]	; 0x180
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 800228e:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002292:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 8002296:	bf88      	it	hi
 8002298:	f8c1 a180 	strhi.w	sl, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800229c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80022a0:	b96b      	cbnz	r3, 80022be <HAL_PCD_IRQHandler+0x452>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022be:	f1be 0f00 	cmp.w	lr, #0
 80022c2:	d110      	bne.n	80022e6 <HAL_PCD_IRQHandler+0x47a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022c4:	2328      	movs	r3, #40	; 0x28
 80022c6:	fb03 4306 	mla	r3, r3, r6, r4
 80022ca:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 80022ce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022d6:	051b      	lsls	r3, r3, #20
 80022d8:	0d1b      	lsrs	r3, r3, #20
 80022da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80022e6:	b325      	cbz	r5, 8002332 <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022e8:	2128      	movs	r1, #40	; 0x28
 80022ea:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022ee:	462b      	mov	r3, r5
 80022f0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80022f4:	e76a      	b.n	80021cc <HAL_PCD_IRQHandler+0x360>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022fe:	051b      	lsls	r3, r3, #20
 8002300:	0d1b      	lsrs	r3, r3, #20
 8002302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002306:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800230a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800230e:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8002312:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800231c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002320:	d05e      	beq.n	80023e0 <HAL_PCD_IRQHandler+0x574>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002322:	3202      	adds	r2, #2
 8002324:	4413      	add	r3, r2
 8002326:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 800232a:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 800232e:	2d00      	cmp	r5, #0
 8002330:	d19c      	bne.n	800226c <HAL_PCD_IRQHandler+0x400>
        ep->xfer_count += count;
 8002332:	2128      	movs	r1, #40	; 0x28
 8002334:	4371      	muls	r1, r6
 8002336:	1863      	adds	r3, r4, r1
 8002338:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800233c:	442a      	add	r2, r5
 800233e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002342:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002346:	442a      	add	r2, r5
 8002348:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800234c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002350:	b11a      	cbz	r2, 800235a <HAL_PCD_IRQHandler+0x4ee>
 8002352:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002356:	429d      	cmp	r5, r3
 8002358:	d24b      	bcs.n	80023f2 <HAL_PCD_IRQHandler+0x586>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800235a:	2328      	movs	r3, #40	; 0x28
 800235c:	fb03 4306 	mla	r3, r3, r6, r4
 8002360:	4620      	mov	r0, r4
 8002362:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002366:	f002 fb25 	bl	80049b4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800236a:	063a      	lsls	r2, r7, #24
 800236c:	f57f ad8b 	bpl.w	8001e86 <HAL_PCD_IRQHandler+0x1a>
 8002370:	2528      	movs	r5, #40	; 0x28
 8002372:	6820      	ldr	r0, [r4, #0]
 8002374:	fb05 4506 	mla	r5, r5, r6, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002378:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 800237c:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8002380:	ea09 0303 	and.w	r3, r9, r3
 8002384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002388:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 800238c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8002390:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002394:	2b02      	cmp	r3, #2
 8002396:	d101      	bne.n	800239c <HAL_PCD_IRQHandler+0x530>
 8002398:	05fb      	lsls	r3, r7, #23
 800239a:	d43d      	bmi.n	8002418 <HAL_PCD_IRQHandler+0x5ac>
          if (ep->xfer_len > TxByteNbre)
 800239c:	2328      	movs	r3, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800239e:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 80023a2:	fb03 4c06 	mla	ip, r3, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023a6:	f10e 0e02 	add.w	lr, lr, #2
 80023aa:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
 80023ae:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 80023b2:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 80023b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80023ba:	4297      	cmp	r7, r2
            ep->xfer_len = 0U;
 80023bc:	bf92      	itee	ls
 80023be:	2100      	movls	r1, #0
            ep->xfer_len -= TxByteNbre;
 80023c0:	1abf      	subhi	r7, r7, r2
 80023c2:	f8cc 7040 	strhi.w	r7, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80023c6:	fb03 4706 	mla	r7, r3, r6, r4
            ep->xfer_len = 0U;
 80023ca:	bf98      	it	ls
 80023cc:	f8cc 1040 	strls.w	r1, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80023d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80023d2:	b9a9      	cbnz	r1, 8002400 <HAL_PCD_IRQHandler+0x594>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023d4:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80023d8:	4620      	mov	r0, r4
 80023da:	f002 faf4 	bl	80049c6 <HAL_PCD_DataInStageCallback>
 80023de:	e552      	b.n	8001e86 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023e0:	3206      	adds	r2, #6
 80023e2:	4413      	add	r3, r2
 80023e4:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80023e8:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80023ec:	2d00      	cmp	r5, #0
 80023ee:	d0a0      	beq.n	8002332 <HAL_PCD_IRQHandler+0x4c6>
 80023f0:	e77d      	b.n	80022ee <HAL_PCD_IRQHandler+0x482>
        ep = &hpcd->OUT_ep[epindex];
 80023f2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80023f6:	4421      	add	r1, r4
 80023f8:	6820      	ldr	r0, [r4, #0]
 80023fa:	f001 f9cd 	bl	8003798 <USB_EPStartXfer>
 80023fe:	e7b4      	b.n	800236a <HAL_PCD_IRQHandler+0x4fe>
            ep->xfer_buff += TxByteNbre;
 8002400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8002402:	fb06 3303 	mla	r3, r6, r3, r3
            ep->xfer_buff += TxByteNbre;
 8002406:	4411      	add	r1, r2
 8002408:	63f9      	str	r1, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 800240a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800240c:	440a      	add	r2, r1
 800240e:	647a      	str	r2, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002410:	18e1      	adds	r1, r4, r3
 8002412:	f001 f9c1 	bl	8003798 <USB_EPStartXfer>
 8002416:	e536      	b.n	8001e86 <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002418:	f017 0e40 	ands.w	lr, r7, #64	; 0x40
 800241c:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8002420:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002422:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8002426:	f000 809e 	beq.w	8002566 <HAL_PCD_IRQHandler+0x6fa>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800242a:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 800242e:	b2bf      	uxth	r7, r7
 8002430:	44f4      	add	ip, lr
 8002432:	f10c 0c02 	add.w	ip, ip, #2
 8002436:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]

    if (ep->xfer_len > TxByteNbre)
 800243a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800243e:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 8002440:	bf2c      	ite	cs
 8002442:	2300      	movcs	r3, #0
      ep->xfer_len -= TxByteNbre;
 8002444:	eba3 030c 	subcc.w	r3, r3, ip
      ep->xfer_len = 0U;
 8002448:	642b      	str	r3, [r5, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800244a:	2328      	movs	r3, #40	; 0x28
 800244c:	fb03 4306 	mla	r3, r3, r6, r4
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	b9ab      	cbnz	r3, 8002480 <HAL_PCD_IRQHandler+0x614>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002454:	4620      	mov	r0, r4
 8002456:	f002 fab6 	bl	80049c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800245a:	2f00      	cmp	r7, #0
 800245c:	f000 80a1 	beq.w	80025a2 <HAL_PCD_IRQHandler+0x736>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002460:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002464:	6822      	ldr	r2, [r4, #0]
 8002466:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800246a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800246e:	051b      	lsls	r3, r3, #20
 8002470:	0d1b      	lsrs	r3, r3, #20
 8002472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800247e:	e090      	b.n	80025a2 <HAL_PCD_IRQHandler+0x736>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002480:	b15f      	cbz	r7, 800249a <HAL_PCD_IRQHandler+0x62e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002482:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800248a:	051b      	lsls	r3, r3, #20
 800248c:	0d1b      	lsrs	r3, r3, #20
 800248e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002496:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800249a:	2328      	movs	r3, #40	; 0x28
 800249c:	fb03 4306 	mla	r3, r3, r6, r4
 80024a0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80024a4:	2a01      	cmp	r2, #1
 80024a6:	d17c      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 80024a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80024aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80024ac:	4462      	add	r2, ip
 80024ae:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80024b0:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 80024b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80024b4:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 80024b6:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 80024b8:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80024ba:	d325      	bcc.n	8002508 <HAL_PCD_IRQHandler+0x69c>
          ep->xfer_len_db -= len;
 80024bc:	1abf      	subs	r7, r7, r2
 80024be:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024c0:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 80024c4:	b293      	uxth	r3, r2
 80024c6:	2f00      	cmp	r7, #0
 80024c8:	d141      	bne.n	800254e <HAL_PCD_IRQHandler+0x6e2>
 80024ca:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80024ce:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 80024d2:	44bc      	add	ip, r7
 80024d4:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 80024d8:	013f      	lsls	r7, r7, #4
 80024da:	bb02      	cbnz	r2, 800251e <HAL_PCD_IRQHandler+0x6b2>
 80024dc:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80024e0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80024e4:	0412      	lsls	r2, r2, #16
 80024e6:	0c12      	lsrs	r2, r2, #16
 80024e8:	f82c 2007 	strh.w	r2, [ip, r7]
 80024ec:	f83c 2007 	ldrh.w	r2, [ip, r7]
 80024f0:	ea48 0202 	orr.w	r2, r8, r2
 80024f4:	b292      	uxth	r2, r2
 80024f6:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024fa:	2228      	movs	r2, #40	; 0x28
 80024fc:	fb02 4606 	mla	r6, r2, r6, r4
 8002500:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002502:	f001 f939 	bl	8003778 <USB_WritePMA>
 8002506:	e04c      	b.n	80025a2 <HAL_PCD_IRQHandler+0x736>
        else if (ep->xfer_len_db == 0U)
 8002508:	b91f      	cbnz	r7, 8002512 <HAL_PCD_IRQHandler+0x6a6>
          ep->xfer_fill_db = 0U;
 800250a:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 800250e:	4662      	mov	r2, ip
 8002510:	e7d6      	b.n	80024c0 <HAL_PCD_IRQHandler+0x654>
          ep->xfer_fill_db = 0U;
 8002512:	2200      	movs	r2, #0
 8002514:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8002518:	649a      	str	r2, [r3, #72]	; 0x48
 800251a:	463a      	mov	r2, r7
 800251c:	e7d0      	b.n	80024c0 <HAL_PCD_IRQHandler+0x654>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800251e:	2a3e      	cmp	r2, #62	; 0x3e
 8002520:	d80c      	bhi.n	800253c <HAL_PCD_IRQHandler+0x6d0>
 8002522:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8002526:	07d2      	lsls	r2, r2, #31
 8002528:	bf48      	it	mi
 800252a:	f10e 0e01 	addmi.w	lr, lr, #1
 800252e:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8002532:	fa1f fe8e 	uxth.w	lr, lr
 8002536:	f82c e007 	strh.w	lr, [ip, r7]
 800253a:	e7de      	b.n	80024fa <HAL_PCD_IRQHandler+0x68e>
 800253c:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8002540:	06d2      	lsls	r2, r2, #27
 8002542:	bf08      	it	eq
 8002544:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8002548:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800254c:	e7f1      	b.n	8002532 <HAL_PCD_IRQHandler+0x6c6>
 800254e:	2f01      	cmp	r7, #1
 8002550:	d1d3      	bne.n	80024fa <HAL_PCD_IRQHandler+0x68e>
 8002552:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002556:	f200 4704 	addw	r7, r0, #1028	; 0x404
 800255a:	4417      	add	r7, r2
 800255c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	52bb      	strh	r3, [r7, r2]
 8002564:	e7c9      	b.n	80024fa <HAL_PCD_IRQHandler+0x68e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002566:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 800256a:	b2bf      	uxth	r7, r7
 800256c:	44d4      	add	ip, sl
 800256e:	f10c 0c06 	add.w	ip, ip, #6
 8002572:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 8002576:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800257a:	459c      	cmp	ip, r3
      ep->xfer_len -= TxByteNbre;
 800257c:	bf9c      	itt	ls
 800257e:	eba3 030c 	subls.w	r3, r3, ip
 8002582:	642b      	strls	r3, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002584:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002588:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 800258c:	bf88      	it	hi
 800258e:	f8c5 e040 	strhi.w	lr, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	b9bb      	cbnz	r3, 80025c6 <HAL_PCD_IRQHandler+0x75a>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002596:	4620      	mov	r0, r4
 8002598:	f002 fa15 	bl	80049c6 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800259c:	2f00      	cmp	r7, #0
 800259e:	f43f af5f 	beq.w	8002460 <HAL_PCD_IRQHandler+0x5f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80025a2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80025a6:	6822      	ldr	r2, [r4, #0]
 80025a8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80025ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025b4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80025b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80025c4:	e45f      	b.n	8001e86 <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025c6:	b95f      	cbnz	r7, 80025e0 <HAL_PCD_IRQHandler+0x774>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025c8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80025cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025d0:	051b      	lsls	r3, r3, #20
 80025d2:	0d1b      	lsrs	r3, r3, #20
 80025d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025dc:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80025e0:	2328      	movs	r3, #40	; 0x28
 80025e2:	fb03 4306 	mla	r3, r3, r6, r4
 80025e6:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80025ea:	2a01      	cmp	r2, #1
 80025ec:	d1d9      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 80025ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80025f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80025f2:	4462      	add	r2, ip
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80025f6:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 80025f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80025fa:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 80025fc:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 80025fe:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002600:	d323      	bcc.n	800264a <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db -= len;
 8002602:	1abf      	subs	r7, r7, r2
 8002604:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002606:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 800260a:	b293      	uxth	r3, r2
 800260c:	2f00      	cmp	r7, #0
 800260e:	d13f      	bne.n	8002690 <HAL_PCD_IRQHandler+0x824>
 8002610:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8002614:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 8002618:	44bc      	add	ip, r7
 800261a:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 800261e:	013f      	lsls	r7, r7, #4
 8002620:	b9f2      	cbnz	r2, 8002660 <HAL_PCD_IRQHandler+0x7f4>
 8002622:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8002626:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800262a:	0412      	lsls	r2, r2, #16
 800262c:	0c12      	lsrs	r2, r2, #16
 800262e:	f82c 2007 	strh.w	r2, [ip, r7]
 8002632:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8002636:	ea48 0202 	orr.w	r2, r8, r2
 800263a:	b292      	uxth	r2, r2
 800263c:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002640:	2228      	movs	r2, #40	; 0x28
 8002642:	fb02 4606 	mla	r6, r2, r6, r4
 8002646:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8002648:	e75b      	b.n	8002502 <HAL_PCD_IRQHandler+0x696>
        else if (ep->xfer_len_db == 0U)
 800264a:	b91f      	cbnz	r7, 8002654 <HAL_PCD_IRQHandler+0x7e8>
          ep->xfer_fill_db = 0U;
 800264c:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 8002650:	4662      	mov	r2, ip
 8002652:	e7d8      	b.n	8002606 <HAL_PCD_IRQHandler+0x79a>
          ep->xfer_len_db = 0U;
 8002654:	2200      	movs	r2, #0
 8002656:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8002658:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800265c:	463a      	mov	r2, r7
 800265e:	e7d2      	b.n	8002606 <HAL_PCD_IRQHandler+0x79a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002660:	2a3e      	cmp	r2, #62	; 0x3e
 8002662:	d80c      	bhi.n	800267e <HAL_PCD_IRQHandler+0x812>
 8002664:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8002668:	07d2      	lsls	r2, r2, #31
 800266a:	bf48      	it	mi
 800266c:	f10e 0e01 	addmi.w	lr, lr, #1
 8002670:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8002674:	fa1f fe8e 	uxth.w	lr, lr
 8002678:	f82c e007 	strh.w	lr, [ip, r7]
 800267c:	e7e0      	b.n	8002640 <HAL_PCD_IRQHandler+0x7d4>
 800267e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8002682:	06d2      	lsls	r2, r2, #27
 8002684:	bf08      	it	eq
 8002686:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 800268a:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800268e:	e7f1      	b.n	8002674 <HAL_PCD_IRQHandler+0x808>
 8002690:	2f01      	cmp	r7, #1
 8002692:	d1d5      	bne.n	8002640 <HAL_PCD_IRQHandler+0x7d4>
 8002694:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002698:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 800269c:	4417      	add	r7, r2
 800269e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80026a2:	0112      	lsls	r2, r2, #4
 80026a4:	52bb      	strh	r3, [r7, r2]
 80026a6:	e7cb      	b.n	8002640 <HAL_PCD_IRQHandler+0x7d4>
 80026a8:	ffff8f0f 	.word	0xffff8f0f
 80026ac:	ffff8000 	.word	0xffff8000

080026b0 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 80026b0:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80026b4:	b570      	push	{r4, r5, r6, lr}
 80026b6:	f001 0507 	and.w	r5, r1, #7
 80026ba:	4604      	mov	r4, r0
 80026bc:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 80026c0:	d01c      	beq.n	80026fc <HAL_PCD_EP_Open+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c2:	fb05 1101 	mla	r1, r5, r1, r1
 80026c6:	4401      	add	r1, r0
    ep->is_in = 1U;
 80026c8:	2001      	movs	r0, #1
 80026ca:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 80026cc:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 80026ce:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d0:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 80026d2:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80026d4:	b102      	cbz	r2, 80026d8 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 80026d6:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80026d8:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80026da:	bf04      	itt	eq
 80026dc:	2300      	moveq	r3, #0
 80026de:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80026e0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d013      	beq.n	8002710 <HAL_PCD_EP_Open+0x60>
 80026e8:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026ea:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80026ec:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026f0:	f000 fdd0 	bl	8003294 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80026fc:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026fe:	fb01 f005 	mul.w	r0, r1, r5
 8002702:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 8002706:	4420      	add	r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002708:	4421      	add	r1, r4
    ep->is_in = 0U;
 800270a:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 800270e:	e7dd      	b.n	80026cc <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8002710:	2002      	movs	r0, #2
 8002712:	e7f2      	b.n	80026fa <HAL_PCD_EP_Open+0x4a>

08002714 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002714:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8002718:	b510      	push	{r4, lr}
 800271a:	f001 0207 	and.w	r2, r1, #7
 800271e:	4604      	mov	r4, r0
 8002720:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8002724:	d013      	beq.n	800274e <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 8002726:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002728:	fb02 1101 	mla	r1, r2, r1, r1
 800272c:	4401      	add	r1, r0
    ep->is_in = 1U;
 800272e:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002730:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002732:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002736:	2b01      	cmp	r3, #1
 8002738:	d013      	beq.n	8002762 <HAL_PCD_EP_Close+0x4e>
 800273a:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800273c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800273e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002742:	f000 fee5 	bl	8003510 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002746:	2000      	movs	r0, #0
 8002748:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800274c:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800274e:	fb01 f302 	mul.w	r3, r1, r2
 8002752:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8002756:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002758:	4403      	add	r3, r0
 800275a:	2000      	movs	r0, #0
 800275c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8002760:	e7e6      	b.n	8002730 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8002762:	2002      	movs	r0, #2
 8002764:	e7f2      	b.n	800274c <HAL_PCD_EP_Close+0x38>

08002766 <HAL_PCD_EP_Receive>:
{
 8002766:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8002768:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 800276a:	2600      	movs	r6, #0
 800276c:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8002770:	434c      	muls	r4, r1
 8002772:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8002774:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002778:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800277c:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800277e:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 8002782:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8002786:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 800278a:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800278e:	6800      	ldr	r0, [r0, #0]
 8002790:	f001 f802 	bl	8003798 <USB_EPStartXfer>
}
 8002794:	4630      	mov	r0, r6
 8002796:	bd70      	pop	{r4, r5, r6, pc}

08002798 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002798:	2328      	movs	r3, #40	; 0x28
 800279a:	f001 0107 	and.w	r1, r1, #7
 800279e:	fb03 0101 	mla	r1, r3, r1, r0
}
 80027a2:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80027a6:	4770      	bx	lr

080027a8 <HAL_PCD_EP_Transmit>:
{
 80027a8:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80027aa:	2528      	movs	r5, #40	; 0x28
 80027ac:	f001 0107 	and.w	r1, r1, #7
 80027b0:	fb05 0401 	mla	r4, r5, r1, r0
  ep->xfer_count = 0U;
 80027b4:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80027b6:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 80027ba:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027bc:	fb01 5505 	mla	r5, r1, r5, r5
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_fill_db = 1U;
 80027c4:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027c8:	1941      	adds	r1, r0, r5
  ep->xfer_len_db = len;
 80027ca:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80027cc:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80027ce:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027d2:	6800      	ldr	r0, [r0, #0]
 80027d4:	f000 ffe0 	bl	8003798 <USB_EPStartXfer>
}
 80027d8:	4630      	mov	r0, r6
 80027da:	bd70      	pop	{r4, r5, r6, pc}

080027dc <HAL_PCD_EP_SetStall>:
{
 80027dc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027de:	6843      	ldr	r3, [r0, #4]
 80027e0:	f001 0507 	and.w	r5, r1, #7
 80027e4:	429d      	cmp	r5, r3
{
 80027e6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027e8:	d828      	bhi.n	800283c <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80027ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80027ee:	f04f 0328 	mov.w	r3, #40	; 0x28
 80027f2:	d01a      	beq.n	800282a <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f4:	fb05 3303 	mla	r3, r5, r3, r3
 80027f8:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 80027fa:	2301      	movs	r3, #1
 80027fc:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 80027fe:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002800:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002802:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002804:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8002808:	429a      	cmp	r2, r3
 800280a:	d019      	beq.n	8002840 <HAL_PCD_EP_SetStall+0x64>
 800280c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002810:	6820      	ldr	r0, [r4, #0]
 8002812:	f000 ff43 	bl	800369c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002816:	b925      	cbnz	r5, 8002822 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002818:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800281c:	6820      	ldr	r0, [r4, #0]
 800281e:	f000 ffa9 	bl	8003774 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8002822:	2000      	movs	r0, #0
 8002824:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002828:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 800282a:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800282c:	434b      	muls	r3, r1
 800282e:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8002832:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8002834:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002836:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 800283a:	e7e0      	b.n	80027fe <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 800283c:	2001      	movs	r0, #1
 800283e:	e7f3      	b.n	8002828 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8002840:	2002      	movs	r0, #2
 8002842:	e7f1      	b.n	8002828 <HAL_PCD_EP_SetStall+0x4c>

08002844 <HAL_PCD_EP_ClrStall>:
{
 8002844:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002846:	6843      	ldr	r3, [r0, #4]
 8002848:	f001 020f 	and.w	r2, r1, #15
 800284c:	429a      	cmp	r2, r3
{
 800284e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002850:	d826      	bhi.n	80028a0 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8002852:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002856:	f001 0207 	and.w	r2, r1, #7
 800285a:	f04f 0128 	mov.w	r1, #40	; 0x28
 800285e:	d015      	beq.n	800288c <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 8002860:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002862:	fb02 1101 	mla	r1, r2, r1, r1
 8002866:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002868:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 800286a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800286c:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800286e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002870:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002874:	2b01      	cmp	r3, #1
 8002876:	d015      	beq.n	80028a4 <HAL_PCD_EP_ClrStall+0x60>
 8002878:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800287a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800287c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002880:	f000 ff28 	bl	80036d4 <USB_EPClearStall>
  return HAL_OK;
 8002884:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8002886:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 800288a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800288c:	fb01 f302 	mul.w	r3, r1, r2
 8002890:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8002894:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002896:	4403      	add	r3, r0
 8002898:	2000      	movs	r0, #0
 800289a:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800289e:	e7e4      	b.n	800286a <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 80028a0:	2001      	movs	r0, #1
 80028a2:	e7f2      	b.n	800288a <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 80028a4:	2002      	movs	r0, #2
 80028a6:	e7f0      	b.n	800288a <HAL_PCD_EP_ClrStall+0x46>

080028a8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028a8:	b510      	push	{r4, lr}
 80028aa:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028ac:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b0:	bf1b      	ittet	ne
 80028b2:	f001 0107 	andne.w	r1, r1, #7
 80028b6:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028ba:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028be:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80028c0:	bf08      	it	eq
 80028c2:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
 80028c6:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028c8:	b91a      	cbnz	r2, 80028d2 <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028ca:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028cc:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80028ce:	2000      	movs	r0, #0
 80028d0:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80028d2:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028d4:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 80028d6:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028d8:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028da:	8143      	strh	r3, [r0, #10]
 80028dc:	e7f7      	b.n	80028ce <HAL_PCDEx_PMAConfig+0x26>
	...

080028e0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e0:	6a03      	ldr	r3, [r0, #32]
{
 80028e2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ee:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028f2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80028f6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028f8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80028fa:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80028fe:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002900:	4d0a      	ldr	r5, [pc, #40]	; (800292c <TIM_OC1_SetConfig+0x4c>)
 8002902:	42a8      	cmp	r0, r5
 8002904:	d10b      	bne.n	800291e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002906:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002908:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800290c:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800290e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002912:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002916:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002918:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800291c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800291e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002920:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002922:	684a      	ldr	r2, [r1, #4]
 8002924:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002926:	6203      	str	r3, [r0, #32]
}
 8002928:	bd70      	pop	{r4, r5, r6, pc}
 800292a:	bf00      	nop
 800292c:	40012c00 	.word	0x40012c00

08002930 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002930:	6a03      	ldr	r3, [r0, #32]
{
 8002932:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002938:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800293a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800293c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800293e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002940:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002942:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002946:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002948:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800294a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800294e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002952:	4d0b      	ldr	r5, [pc, #44]	; (8002980 <TIM_OC3_SetConfig+0x50>)
 8002954:	42a8      	cmp	r0, r5
 8002956:	d10d      	bne.n	8002974 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002958:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800295a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800295e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002962:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002966:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800296a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800296c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002970:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002974:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002976:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002978:	684a      	ldr	r2, [r1, #4]
 800297a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800297c:	6203      	str	r3, [r0, #32]
}
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	40012c00 	.word	0x40012c00

08002984 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002984:	6a03      	ldr	r3, [r0, #32]
{
 8002986:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800298c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002990:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002992:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002994:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002996:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800299a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800299e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80029a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029a4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a8:	4d06      	ldr	r5, [pc, #24]	; (80029c4 <TIM_OC4_SetConfig+0x40>)
 80029aa:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029ac:	bf02      	ittt	eq
 80029ae:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029b0:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029b4:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ba:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029bc:	684a      	ldr	r2, [r1, #4]
 80029be:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c0:	6203      	str	r3, [r0, #32]
}
 80029c2:	bd30      	pop	{r4, r5, pc}
 80029c4:	40012c00 	.word	0x40012c00

080029c8 <HAL_TIM_OC_MspInit>:
 80029c8:	4770      	bx	lr
	...

080029cc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029cc:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80029ce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d0:	4290      	cmp	r0, r2
 80029d2:	d00a      	beq.n	80029ea <TIM_Base_SetConfig+0x1e>
 80029d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80029d8:	d007      	beq.n	80029ea <TIM_Base_SetConfig+0x1e>
 80029da:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80029de:	4290      	cmp	r0, r2
 80029e0:	d003      	beq.n	80029ea <TIM_Base_SetConfig+0x1e>
 80029e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029e6:	4290      	cmp	r0, r2
 80029e8:	d115      	bne.n	8002a16 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80029ea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029f0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029f2:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <TIM_Base_SetConfig+0x6c>)
 80029f4:	4290      	cmp	r0, r2
 80029f6:	d00a      	beq.n	8002a0e <TIM_Base_SetConfig+0x42>
 80029f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80029fc:	d007      	beq.n	8002a0e <TIM_Base_SetConfig+0x42>
 80029fe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002a02:	4290      	cmp	r0, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_Base_SetConfig+0x42>
 8002a06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a0a:	4290      	cmp	r0, r2
 8002a0c:	d103      	bne.n	8002a16 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a0e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a16:	694a      	ldr	r2, [r1, #20]
 8002a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a1c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002a1e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a20:	688b      	ldr	r3, [r1, #8]
 8002a22:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a24:	680b      	ldr	r3, [r1, #0]
 8002a26:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <TIM_Base_SetConfig+0x6c>)
 8002a2a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002a2c:	bf04      	itt	eq
 8002a2e:	690b      	ldreq	r3, [r1, #16]
 8002a30:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002a32:	2301      	movs	r3, #1
 8002a34:	6143      	str	r3, [r0, #20]
}
 8002a36:	4770      	bx	lr
 8002a38:	40012c00 	.word	0x40012c00

08002a3c <HAL_TIM_Base_Init>:
{
 8002a3c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002a3e:	4604      	mov	r4, r0
 8002a40:	b330      	cbz	r0, 8002a90 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a4a:	b91b      	cbnz	r3, 8002a54 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002a4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a50:	f7fe fffa 	bl	8001a48 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a56:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5c:	1d21      	adds	r1, r4, #4
 8002a5e:	f7ff ffb5 	bl	80029cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a62:	2301      	movs	r3, #1
  return HAL_OK;
 8002a64:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a66:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002a6e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002a8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002a8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
 8002a92:	e7fc      	b.n	8002a8e <HAL_TIM_Base_Init+0x52>

08002a94 <HAL_TIM_OC_Init>:
{
 8002a94:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002a96:	4604      	mov	r4, r0
 8002a98:	b330      	cbz	r0, 8002ae8 <HAL_TIM_OC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002aa2:	b91b      	cbnz	r3, 8002aac <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002aa4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002aa8:	f7ff ff8e 	bl	80029c8 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002aae:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002ab4:	1d21      	adds	r1, r4, #4
 8002ab6:	f7ff ff89 	bl	80029cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aba:	2301      	movs	r3, #1
  return HAL_OK;
 8002abc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002ac6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002aca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002ace:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ada:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002ae2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002ae6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ae8:	2001      	movs	r0, #1
 8002aea:	e7fc      	b.n	8002ae6 <HAL_TIM_OC_Init+0x52>

08002aec <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aec:	6a03      	ldr	r3, [r0, #32]
{
 8002aee:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af0:	f023 0310 	bic.w	r3, r3, #16
 8002af4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002af6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002af8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002afa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002afc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002afe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b02:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b06:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002b08:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b0c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b10:	4d0b      	ldr	r5, [pc, #44]	; (8002b40 <TIM_OC2_SetConfig+0x54>)
 8002b12:	42a8      	cmp	r0, r5
 8002b14:	d10d      	bne.n	8002b32 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b16:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b20:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b24:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002b28:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b2e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002b32:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002b34:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002b36:	684a      	ldr	r2, [r1, #4]
 8002b38:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002b3a:	6203      	str	r3, [r0, #32]
}
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
 8002b3e:	bf00      	nop
 8002b40:	40012c00 	.word	0x40012c00

08002b44 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8002b44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002b48:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002b4a:	2b01      	cmp	r3, #1
{
 8002b4c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002b4e:	d020      	beq.n	8002b92 <HAL_TIM_OC_ConfigChannel+0x4e>
 8002b50:	2301      	movs	r3, #1
 8002b52:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002b56:	2a0c      	cmp	r2, #12
 8002b58:	d80b      	bhi.n	8002b72 <HAL_TIM_OC_ConfigChannel+0x2e>
 8002b5a:	e8df f002 	tbb	[pc, r2]
 8002b5e:	0a07      	.short	0x0a07
 8002b60:	0a0e0a0a 	.word	0x0a0e0a0a
 8002b64:	0a120a0a 	.word	0x0a120a0a
 8002b68:	0a0a      	.short	0x0a0a
 8002b6a:	16          	.byte	0x16
 8002b6b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b6c:	6800      	ldr	r0, [r0, #0]
 8002b6e:	f7ff feb7 	bl	80028e0 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002b78:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b7a:	6800      	ldr	r0, [r0, #0]
 8002b7c:	f7ff ffb6 	bl	8002aec <TIM_OC2_SetConfig>
      break;
 8002b80:	e7f7      	b.n	8002b72 <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b82:	6800      	ldr	r0, [r0, #0]
 8002b84:	f7ff fed4 	bl	8002930 <TIM_OC3_SetConfig>
      break;
 8002b88:	e7f3      	b.n	8002b72 <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b8a:	6800      	ldr	r0, [r0, #0]
 8002b8c:	f7ff fefa 	bl	8002984 <TIM_OC4_SetConfig>
      break;
 8002b90:	e7ef      	b.n	8002b72 <HAL_TIM_OC_ConfigChannel+0x2e>
  __HAL_LOCK(htim);
 8002b92:	2002      	movs	r0, #2
 8002b94:	e7f0      	b.n	8002b78 <HAL_TIM_OC_ConfigChannel+0x34>

08002b96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b96:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b98:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b9a:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b9c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002ba4:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ba6:	6083      	str	r3, [r0, #8]
}
 8002ba8:	bd10      	pop	{r4, pc}

08002baa <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002baa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002bae:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002bb0:	2b01      	cmp	r3, #1
{
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002bb8:	d019      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x44>
 8002bba:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002bc0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002bc2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002bc6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bcc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002bd0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002bd2:	680b      	ldr	r3, [r1, #0]
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	d065      	beq.n	8002ca4 <HAL_TIM_ConfigClockSource+0xfa>
 8002bd8:	d815      	bhi.n	8002c06 <HAL_TIM_ConfigClockSource+0x5c>
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0x4e>
 8002bde:	d807      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x46>
 8002be0:	b153      	cbz	r3, 8002bf8 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002be2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002be4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002be6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002bea:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002bee:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d001      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0x4e>
 8002bf4:	2b30      	cmp	r3, #48	; 0x30
 8002bf6:	d1f4      	bne.n	8002be2 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002bf8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bfa:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bfe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c02:	4313      	orrs	r3, r2
 8002c04:	e01a      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002c06:	2b60      	cmp	r3, #96	; 0x60
 8002c08:	d034      	beq.n	8002c74 <HAL_TIM_ConfigClockSource+0xca>
 8002c0a:	d819      	bhi.n	8002c40 <HAL_TIM_ConfigClockSource+0x96>
 8002c0c:	2b50      	cmp	r3, #80	; 0x50
 8002c0e:	d1e8      	bne.n	8002be2 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c10:	684a      	ldr	r2, [r1, #4]
 8002c12:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c14:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c16:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c18:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c1c:	f025 0501 	bic.w	r5, r5, #1
 8002c20:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c22:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002c24:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c2a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002c2e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c30:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002c32:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c38:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002c3c:	6083      	str	r3, [r0, #8]
 8002c3e:	e7d0      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002c40:	2b70      	cmp	r3, #112	; 0x70
 8002c42:	d00c      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0xb4>
 8002c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c48:	d1cb      	bne.n	8002be2 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002c4a:	68cb      	ldr	r3, [r1, #12]
 8002c4c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002c50:	f7ff ffa1 	bl	8002b96 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c54:	6822      	ldr	r2, [r4, #0]
 8002c56:	6893      	ldr	r3, [r2, #8]
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5c:	e008      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002c5e:	68cb      	ldr	r3, [r1, #12]
 8002c60:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002c64:	f7ff ff97 	bl	8002b96 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c68:	6822      	ldr	r2, [r4, #0]
 8002c6a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c70:	6093      	str	r3, [r2, #8]
      break;
 8002c72:	e7b6      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c74:	684d      	ldr	r5, [r1, #4]
 8002c76:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c78:	6a01      	ldr	r1, [r0, #32]
 8002c7a:	f021 0110 	bic.w	r1, r1, #16
 8002c7e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c80:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002c82:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c84:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c90:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002c94:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c96:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002c98:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c9e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002ca2:	e7cb      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca4:	684a      	ldr	r2, [r1, #4]
 8002ca6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002ca8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002caa:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cac:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb0:	f025 0501 	bic.w	r5, r5, #1
 8002cb4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cb6:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002cb8:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cbe:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002cc2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002cc4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002cc6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ccc:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002cd0:	e7b4      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x92>
	...

08002cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002cd8:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	f04f 0302 	mov.w	r3, #2
 8002ce0:	d025      	beq.n	8002d2e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8002ce2:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ce8:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cea:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8002cec:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8002cee:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cf2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002cf8:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cfa:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfc:	4c0d      	ldr	r4, [pc, #52]	; (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002cfe:	42a3      	cmp	r3, r4
 8002d00:	d00a      	beq.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d06:	d007      	beq.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002d08:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002d0c:	42a3      	cmp	r3, r4
 8002d0e:	d003      	beq.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002d10:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d14:	42a3      	cmp	r3, r4
 8002d16:	d104      	bne.n	8002d22 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d18:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d1e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002d2e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002d30:	bd30      	pop	{r4, r5, pc}
 8002d32:	bf00      	nop
 8002d34:	40012c00 	.word	0x40012c00

08002d38 <LL_ADC_CommonInit>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <LL_ADC_CommonInit+0x34>)
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d40:	689b      	ldr	r3, [r3, #8]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f013 0201 	ands.w	r2, r3, #1
 8002d48:	d10e      	bne.n	8002d68 <LL_ADC_CommonInit+0x30>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002d4a:	680b      	ldr	r3, [r1, #0]
 8002d4c:	b133      	cbz	r3, 8002d5c <LL_ADC_CommonInit+0x24>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002d4e:	6841      	ldr	r1, [r0, #4]
 8002d50:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8002d54:	430b      	orrs	r3, r1
 8002d56:	6043      	str	r3, [r0, #4]
  ErrorStatus status = SUCCESS;
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4770      	bx	lr
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002d5c:	6842      	ldr	r2, [r0, #4]
 8002d5e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002d62:	6042      	str	r2, [r0, #4]
  ErrorStatus status = SUCCESS;
 8002d64:	4618      	mov	r0, r3
 8002d66:	4770      	bx	lr
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002d68:	2001      	movs	r0, #1
  }
  
  return status;
}
 8002d6a:	4770      	bx	lr
 8002d6c:	40012400 	.word	0x40012400

08002d70 <LL_ADC_Init>:
 8002d70:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002d72:	b510      	push	{r4, lr}
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002d74:	f013 0301 	ands.w	r3, r3, #1
 8002d78:	d10d      	bne.n	8002d96 <LL_ADC_Init+0x26>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002d7a:	6842      	ldr	r2, [r0, #4]
 8002d7c:	684c      	ldr	r4, [r1, #4]
 8002d7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d82:	4322      	orrs	r2, r4
 8002d84:	6042      	str	r2, [r0, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002d86:	6882      	ldr	r2, [r0, #8]
 8002d88:	6809      	ldr	r1, [r1, #0]
 8002d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	6082      	str	r2, [r0, #8]
  ErrorStatus status = SUCCESS;
 8002d92:	4618      	mov	r0, r3
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8002d94:	bd10      	pop	{r4, pc}
    status = ERROR;
 8002d96:	2001      	movs	r0, #1
 8002d98:	e7fc      	b.n	8002d94 <LL_ADC_Init+0x24>

08002d9a <LL_ADC_REG_Init>:
 8002d9a:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002d9c:	b510      	push	{r4, lr}
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002d9e:	07db      	lsls	r3, r3, #31
 8002da0:	d41b      	bmi.n	8002dda <LL_ADC_REG_Init+0x40>
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
    {
      MODIFY_REG(ADCx->CR1,
 8002da2:	6843      	ldr	r3, [r0, #4]
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002da4:	684a      	ldr	r2, [r1, #4]
      MODIFY_REG(ADCx->CR1,
 8002da6:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002daa:	b112      	cbz	r2, 8002db2 <LL_ADC_REG_Init+0x18>
      MODIFY_REG(ADCx->CR1,
 8002dac:	688c      	ldr	r4, [r1, #8]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	4323      	orrs	r3, r4
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002db2:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002db4:	6883      	ldr	r3, [r0, #8]
 8002db6:	680c      	ldr	r4, [r1, #0]
 8002db8:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002dbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002dc0:	4323      	orrs	r3, r4
 8002dc2:	68cc      	ldr	r4, [r1, #12]
 8002dc4:	6909      	ldr	r1, [r1, #16]
 8002dc6:	4323      	orrs	r3, r4
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002dcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002dce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 8002dd6:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8002dd8:	bd10      	pop	{r4, pc}
    status = ERROR;
 8002dda:	2001      	movs	r0, #1
 8002ddc:	e7fc      	b.n	8002dd8 <LL_ADC_REG_Init+0x3e>

08002dde <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002dde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002de2:	680c      	ldr	r4, [r1, #0]
 8002de4:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8002de8:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002dec:	f04f 0a0f 	mov.w	sl, #15
  pinpos = POSITION_VAL(pinmask);
 8002df0:	fab2 f282 	clz	r2, r2
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002df4:	f04f 0903 	mov.w	r9, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002df8:	2704      	movs	r7, #4
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002dfa:	f04f 1c01 	mov.w	ip, #65537	; 0x10001
        currentpin = (0x00000101uL << pinpos);
 8002dfe:	f240 1e01 	movw	lr, #257	; 0x101
  while ((pinmask  >> pinpos) != 0u)
 8002e02:	fa34 f302 	lsrs.w	r3, r4, r2
 8002e06:	d102      	bne.n	8002e0e <LL_GPIO_Init+0x30>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1u << pinpos)) != 0u)
 8002e0e:	2301      	movs	r3, #1
 8002e10:	4093      	lsls	r3, r2
 8002e12:	4223      	tst	r3, r4
 8002e14:	d05e      	beq.n	8002ed4 <LL_GPIO_Init+0xf6>
      if (pinpos < GPIO_PIN_MASK_POS)
 8002e16:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002e18:	bf85      	ittet	hi
 8002e1a:	f1a2 0308 	subhi.w	r3, r2, #8
 8002e1e:	fa0c f303 	lslhi.w	r3, ip, r3
        currentpin = (0x00000101uL << pinpos);
 8002e22:	fa0e f302 	lslls.w	r3, lr, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002e26:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002e2a:	68c5      	ldr	r5, [r0, #12]
 8002e2c:	0a1e      	lsrs	r6, r3, #8
 8002e2e:	fa96 f8a6 	rbit	r8, r6
 8002e32:	fab8 f888 	clz	r8, r8
 8002e36:	ea25 0606 	bic.w	r6, r5, r6
 8002e3a:	690d      	ldr	r5, [r1, #16]
 8002e3c:	fa05 f508 	lsl.w	r5, r5, r8
 8002e40:	4335      	orrs	r5, r6
 8002e42:	60c5      	str	r5, [r0, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002e44:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8002e48:	fa93 f6a3 	rbit	r6, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002e4c:	fab6 f686 	clz	r6, r6
 8002e50:	fa93 fba3 	rbit	fp, r3
 8002e54:	fabb fb8b 	clz	fp, fp
 8002e58:	00b6      	lsls	r6, r6, #2
 8002e5a:	fa0a f506 	lsl.w	r5, sl, r6
 8002e5e:	f850 6008 	ldr.w	r6, [r0, r8]
 8002e62:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002e66:	ea26 0605 	bic.w	r6, r6, r5
 8002e6a:	684d      	ldr	r5, [r1, #4]
 8002e6c:	fa05 fb0b 	lsl.w	fp, r5, fp
 8002e70:	ea46 060b 	orr.w	r6, r6, fp
 8002e74:	f840 6008 	str.w	r6, [r0, r8]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002e78:	684d      	ldr	r5, [r1, #4]
 8002e7a:	f025 0508 	bic.w	r5, r5, #8
 8002e7e:	2d01      	cmp	r5, #1
 8002e80:	d128      	bne.n	8002ed4 <LL_GPIO_Init+0xf6>
 8002e82:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002e86:	fab5 f585 	clz	r5, r5
 8002e8a:	fa93 fba3 	rbit	fp, r3
 8002e8e:	fabb fb8b 	clz	fp, fp
 8002e92:	00ad      	lsls	r5, r5, #2
 8002e94:	fa09 f505 	lsl.w	r5, r9, r5
 8002e98:	ea26 0605 	bic.w	r6, r6, r5
 8002e9c:	688d      	ldr	r5, [r1, #8]
 8002e9e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002ea2:	fa05 fb0b 	lsl.w	fp, r5, fp
 8002ea6:	ea46 060b 	orr.w	r6, r6, fp
 8002eaa:	f840 6008 	str.w	r6, [r0, r8]
 8002eae:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002eb2:	fab5 f585 	clz	r5, r5
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	00ad      	lsls	r5, r5, #2
 8002ec0:	fa07 f505 	lsl.w	r5, r7, r5
 8002ec4:	ea26 0505 	bic.w	r5, r6, r5
 8002ec8:	68ce      	ldr	r6, [r1, #12]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	409e      	lsls	r6, r3
 8002ece:	432e      	orrs	r6, r5
 8002ed0:	f840 6008 	str.w	r6, [r0, r8]
    pinpos++;
 8002ed4:	3201      	adds	r2, #1
 8002ed6:	e794      	b.n	8002e02 <LL_GPIO_Init+0x24>

08002ed8 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002eda:	4a04      	ldr	r2, [pc, #16]	; (8002eec <RCC_GetHCLKClockFreq+0x14>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ee2:	5cd3      	ldrb	r3, [r2, r3]
}
 8002ee4:	40d8      	lsrs	r0, r3
 8002ee6:	4770      	bx	lr
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08009f08 	.word	0x08009f08

08002ef0 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002ef2:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <RCC_GetPCLK1ClockFreq+0x14>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002efa:	5cd3      	ldrb	r3, [r2, r3]
}
 8002efc:	40d8      	lsrs	r0, r3
 8002efe:	4770      	bx	lr
 8002f00:	40021000 	.word	0x40021000
 8002f04:	08009f18 	.word	0x08009f18

08002f08 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002f0a:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <RCC_GetPCLK2ClockFreq+0x14>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
}
 8002f14:	40d8      	lsrs	r0, r3
 8002f16:	4770      	bx	lr
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	08009f18 	.word	0x08009f18

08002f20 <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002f28:	b162      	cbz	r2, 8002f44 <RCC_PLL_GetFreqDomain_SYS+0x24>
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002f2a:	6858      	ldr	r0, [r3, #4]
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002f2c:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 8002f2e:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002f32:	3001      	adds	r0, #1
 8002f34:	fbb2 f0f0 	udiv	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002f38:	685b      	ldr	r3, [r3, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002f3a:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8002f3e:	3302      	adds	r3, #2
}
 8002f40:	4358      	muls	r0, r3
 8002f42:	4770      	bx	lr
      pllinputfreq = HSI_VALUE / 2U;
 8002f44:	4802      	ldr	r0, [pc, #8]	; (8002f50 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8002f46:	e7f7      	b.n	8002f38 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	007a1200 	.word	0x007a1200
 8002f50:	003d0900 	.word	0x003d0900

08002f54 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <RCC_GetSystemClockFreq+0x14>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d101      	bne.n	8002f64 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002f60:	f7ff bfde 	b.w	8002f20 <RCC_PLL_GetFreqDomain_SYS>
}
 8002f64:	4801      	ldr	r0, [pc, #4]	; (8002f6c <RCC_GetSystemClockFreq+0x18>)
 8002f66:	4770      	bx	lr
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	007a1200 	.word	0x007a1200

08002f70 <LL_RCC_GetSystemClocksFreq>:
{
 8002f70:	b508      	push	{r3, lr}
 8002f72:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002f74:	f7ff ffee 	bl	8002f54 <RCC_GetSystemClockFreq>
 8002f78:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002f7a:	f7ff ffad 	bl	8002ed8 <RCC_GetHCLKClockFreq>
 8002f7e:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002f80:	f7ff ffb6 	bl	8002ef0 <RCC_GetPCLK1ClockFreq>
 8002f84:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002f86:	6848      	ldr	r0, [r1, #4]
 8002f88:	f7ff ffbe 	bl	8002f08 <RCC_GetPCLK2ClockFreq>
 8002f8c:	60c8      	str	r0, [r1, #12]
}
 8002f8e:	bd08      	pop	{r3, pc}

08002f90 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f90:	4a1a      	ldr	r2, [pc, #104]	; (8002ffc <LL_TIM_Init+0x6c>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002f92:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f94:	4290      	cmp	r0, r2
 8002f96:	d00a      	beq.n	8002fae <LL_TIM_Init+0x1e>
 8002f98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f9c:	d007      	beq.n	8002fae <LL_TIM_Init+0x1e>
 8002f9e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002fa2:	4290      	cmp	r0, r2
 8002fa4:	d003      	beq.n	8002fae <LL_TIM_Init+0x1e>
 8002fa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002faa:	4290      	cmp	r0, r2
 8002fac:	d115      	bne.n	8002fda <LL_TIM_Init+0x4a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002fae:	684a      	ldr	r2, [r1, #4]
 8002fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb6:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <LL_TIM_Init+0x6c>)
 8002fb8:	4290      	cmp	r0, r2
 8002fba:	d00a      	beq.n	8002fd2 <LL_TIM_Init+0x42>
 8002fbc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fc0:	d007      	beq.n	8002fd2 <LL_TIM_Init+0x42>
 8002fc2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002fc6:	4290      	cmp	r0, r2
 8002fc8:	d003      	beq.n	8002fd2 <LL_TIM_Init+0x42>
 8002fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fce:	4290      	cmp	r0, r2
 8002fd0:	d103      	bne.n	8002fda <LL_TIM_Init+0x4a>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002fd2:	68ca      	ldr	r2, [r1, #12]
 8002fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd8:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002fda:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002fdc:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002fde:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002fe0:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002fe2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <LL_TIM_Init+0x6c>)
 8002fe6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002fe8:	bf04      	itt	eq
 8002fea:	690b      	ldreq	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002fec:	6303      	streq	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002fee:	6943      	ldr	r3, [r0, #20]
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40012c00 	.word	0x40012c00

08003000 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8003000:	2910      	cmp	r1, #16
{
 8003002:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8003004:	d05f      	beq.n	80030c6 <LL_TIM_OC_Init+0xc6>
 8003006:	d803      	bhi.n	8003010 <LL_TIM_OC_Init+0x10>
 8003008:	2901      	cmp	r1, #1
 800300a:	d02c      	beq.n	8003066 <LL_TIM_OC_Init+0x66>
  ErrorStatus result = ERROR;
 800300c:	2001      	movs	r0, #1
 800300e:	e059      	b.n	80030c4 <LL_TIM_OC_Init+0xc4>
  switch (Channel)
 8003010:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003014:	f000 8089 	beq.w	800312a <LL_TIM_OC_Init+0x12a>
 8003018:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800301c:	d1f6      	bne.n	800300c <LL_TIM_OC_Init+0xc>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800301e:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003020:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003026:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003028:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800302a:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800302c:	69c1      	ldr	r1, [r0, #28]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800302e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003032:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8003036:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800303a:	6915      	ldr	r5, [r2, #16]
 800303c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003040:	6855      	ldr	r5, [r2, #4]
 8003042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003046:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800304a:	4d50      	ldr	r5, [pc, #320]	; (800318c <LL_TIM_OC_Init+0x18c>)
 800304c:	42a8      	cmp	r0, r5
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800304e:	bf04      	itt	eq
 8003050:	6995      	ldreq	r5, [r2, #24]
 8003052:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003056:	68d2      	ldr	r2, [r2, #12]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003058:	bf08      	it	eq
 800305a:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800305e:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003060:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003062:	6402      	str	r2, [r0, #64]	; 0x40
 8003064:	e02c      	b.n	80030c0 <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003066:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003068:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003070:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003072:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003074:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003076:	f023 0302 	bic.w	r3, r3, #2
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800307a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800307e:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003080:	6915      	ldr	r5, [r2, #16]
 8003082:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003084:	6855      	ldr	r5, [r2, #4]
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308c:	4d3f      	ldr	r5, [pc, #252]	; (800318c <LL_TIM_OC_Init+0x18c>)
 800308e:	42a8      	cmp	r0, r5
 8003090:	d112      	bne.n	80030b8 <LL_TIM_OC_Init+0xb8>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003092:	6955      	ldr	r5, [r2, #20]
 8003094:	f023 0308 	bic.w	r3, r3, #8
 8003098:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800309c:	6895      	ldr	r5, [r2, #8]
 800309e:	f023 0304 	bic.w	r3, r3, #4
 80030a2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80030a6:	6995      	ldr	r5, [r2, #24]
 80030a8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80030ac:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80030ae:	69d5      	ldr	r5, [r2, #28]
 80030b0:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80030b4:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80030b8:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030ba:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80030bc:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80030be:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030c0:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80030c2:	2000      	movs	r0, #0
}
 80030c4:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80030c6:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80030c8:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80030ca:	f023 0310 	bic.w	r3, r3, #16
 80030ce:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80030d0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80030d2:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80030d4:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80030d6:	f023 0320 	bic.w	r3, r3, #32
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80030da:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80030de:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80030e2:	6915      	ldr	r5, [r2, #16]
 80030e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80030e8:	6855      	ldr	r5, [r2, #4]
 80030ea:	f023 0310 	bic.w	r3, r3, #16
 80030ee:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f2:	4d26      	ldr	r5, [pc, #152]	; (800318c <LL_TIM_OC_Init+0x18c>)
 80030f4:	42a8      	cmp	r0, r5
 80030f6:	d113      	bne.n	8003120 <LL_TIM_OC_Init+0x120>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80030f8:	6955      	ldr	r5, [r2, #20]
 80030fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030fe:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003102:	6895      	ldr	r5, [r2, #8]
 8003104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003108:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800310c:	6995      	ldr	r5, [r2, #24]
 800310e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003112:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003116:	69d5      	ldr	r5, [r2, #28]
 8003118:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800311c:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003120:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003122:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003124:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003126:	6382      	str	r2, [r0, #56]	; 0x38
 8003128:	e7ca      	b.n	80030c0 <LL_TIM_OC_Init+0xc0>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800312a:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800312c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800312e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003132:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003134:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003136:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003138:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800313a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800313e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8003142:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003144:	6915      	ldr	r5, [r2, #16]
 8003146:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800314a:	6855      	ldr	r5, [r2, #4]
 800314c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003150:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003154:	4d0d      	ldr	r5, [pc, #52]	; (800318c <LL_TIM_OC_Init+0x18c>)
 8003156:	42a8      	cmp	r0, r5
 8003158:	d113      	bne.n	8003182 <LL_TIM_OC_Init+0x182>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800315a:	6955      	ldr	r5, [r2, #20]
 800315c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003160:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003164:	6895      	ldr	r5, [r2, #8]
 8003166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800316a:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800316e:	6995      	ldr	r5, [r2, #24]
 8003170:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8003174:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003178:	69d5      	ldr	r5, [r2, #28]
 800317a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800317e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003182:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003184:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003186:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003188:	63c2      	str	r2, [r0, #60]	; 0x3c
 800318a:	e799      	b.n	80030c0 <LL_TIM_OC_Init+0xc0>
 800318c:	40012c00 	.word	0x40012c00

08003190 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003190:	b530      	push	{r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003192:	68c3      	ldr	r3, [r0, #12]
 8003194:	b085      	sub	sp, #20
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003196:	049b      	lsls	r3, r3, #18
{
 8003198:	4604      	mov	r4, r0
 800319a:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800319c:	d502      	bpl.n	80031a4 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 800319e:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80031a0:	b005      	add	sp, #20
 80031a2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 80031a4:	684b      	ldr	r3, [r1, #4]
 80031a6:	68c9      	ldr	r1, [r1, #12]
 80031a8:	68c2      	ldr	r2, [r0, #12]
 80031aa:	430b      	orrs	r3, r1
 80031ac:	6929      	ldr	r1, [r5, #16]
 80031ae:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80031b2:	430b      	orrs	r3, r1
 80031b4:	f022 020c 	bic.w	r2, r2, #12
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80031bc:	6903      	ldr	r3, [r0, #16]
 80031be:	68aa      	ldr	r2, [r5, #8]
 80031c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031c4:	4313      	orrs	r3, r2
 80031c6:	6103      	str	r3, [r0, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80031c8:	6943      	ldr	r3, [r0, #20]
 80031ca:	696a      	ldr	r2, [r5, #20]
 80031cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d0:	4313      	orrs	r3, r2
 80031d2:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80031d4:	4668      	mov	r0, sp
 80031d6:	f7ff fecb 	bl	8002f70 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <LL_USART_Init+0x98>)
 80031dc:	429c      	cmp	r4, r3
 80031de:	d119      	bne.n	8003214 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK2_Frequency;
 80031e0:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80031e2:	2900      	cmp	r1, #0
 80031e4:	d0db      	beq.n	800319e <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 80031e6:	682a      	ldr	r2, [r5, #0]
 80031e8:	2a00      	cmp	r2, #0
 80031ea:	d0d8      	beq.n	800319e <LL_USART_Init+0xe>
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80031ec:	2319      	movs	r3, #25
 80031ee:	434b      	muls	r3, r1
 80031f0:	0092      	lsls	r2, r2, #2
 80031f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80031f6:	2264      	movs	r2, #100	; 0x64
 80031f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80031fc:	fb02 3311 	mls	r3, r2, r1, r3
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	3332      	adds	r3, #50	; 0x32
 8003204:	fbb3 f3f2 	udiv	r3, r3, r2
 8003208:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800320c:	b29b      	uxth	r3, r3
 800320e:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8003210:	2000      	movs	r0, #0
 8003212:	e7c5      	b.n	80031a0 <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <LL_USART_Init+0x9c>)
 8003216:	429c      	cmp	r4, r3
 8003218:	d101      	bne.n	800321e <LL_USART_Init+0x8e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800321a:	9902      	ldr	r1, [sp, #8]
 800321c:	e7e1      	b.n	80031e2 <LL_USART_Init+0x52>
    else if (USARTx == USART3)
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <LL_USART_Init+0xa0>)
 8003220:	429c      	cmp	r4, r3
 8003222:	d1bc      	bne.n	800319e <LL_USART_Init+0xe>
 8003224:	e7f9      	b.n	800321a <LL_USART_Init+0x8a>
 8003226:	bf00      	nop
 8003228:	40013800 	.word	0x40013800
 800322c:	40004400 	.word	0x40004400
 8003230:	40004800 	.word	0x40004800

08003234 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003234:	b084      	sub	sp, #16
 8003236:	a801      	add	r0, sp, #4
 8003238:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800323c:	b004      	add	sp, #16
 800323e:	2000      	movs	r0, #0
 8003240:	4770      	bx	lr

08003242 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003242:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003244:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8003248:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800324c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003250:	4618      	mov	r0, r3
 8003252:	4770      	bx	lr

08003254 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003254:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003258:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800325c:	045b      	lsls	r3, r3, #17
 800325e:	0c5b      	lsrs	r3, r3, #17
 8003260:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003264:	2000      	movs	r0, #0
 8003266:	4770      	bx	lr

08003268 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003268:	2000      	movs	r0, #0
 800326a:	4770      	bx	lr

0800326c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800326c:	b084      	sub	sp, #16
 800326e:	b510      	push	{r4, lr}
 8003270:	ac03      	add	r4, sp, #12
 8003272:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8003276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800327a:	2301      	movs	r3, #1
 800327c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 8003280:	2300      	movs	r3, #0
}
 8003282:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8003284:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0U;
 8003288:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800328c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8003290:	4618      	mov	r0, r3
 8003292:	4770      	bx	lr

08003294 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003294:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003296:	780c      	ldrb	r4, [r1, #0]
{
 8003298:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800329a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 800329e:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80032a0:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80032a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 80032a8:	2803      	cmp	r0, #3
 80032aa:	d803      	bhi.n	80032b4 <USB_ActivateEndpoint+0x20>
 80032ac:	e8df f000 	tbb	[pc, r0]
 80032b0:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 80032b4:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80032b6:	f248 0580 	movw	r5, #32896	; 0x8080
 80032ba:	432a      	orrs	r2, r5
 80032bc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80032c0:	780e      	ldrb	r6, [r1, #0]
 80032c2:	4a90      	ldr	r2, [pc, #576]	; (8003504 <USB_ActivateEndpoint+0x270>)
 80032c4:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 80032c8:	4335      	orrs	r5, r6
 80032ca:	4014      	ands	r4, r2
 80032cc:	432c      	orrs	r4, r5
 80032ce:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 80032d2:	7b0d      	ldrb	r5, [r1, #12]
 80032d4:	780c      	ldrb	r4, [r1, #0]
 80032d6:	2d00      	cmp	r5, #0
 80032d8:	f040 8082 	bne.w	80033e0 <USB_ActivateEndpoint+0x14c>
 80032dc:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 80032de:	784e      	ldrb	r6, [r1, #1]
 80032e0:	086d      	lsrs	r5, r5, #1
 80032e2:	006d      	lsls	r5, r5, #1
 80032e4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80032e8:	b376      	cbz	r6, 8003348 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80032ea:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80032ee:	4434      	add	r4, r6
 80032f0:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032f4:	780d      	ldrb	r5, [r1, #0]
 80032f6:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80032fa:	0667      	lsls	r7, r4, #25
 80032fc:	d508      	bpl.n	8003310 <USB_ActivateEndpoint+0x7c>
 80032fe:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003302:	4022      	ands	r2, r4
 8003304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003308:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800330c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003310:	78ca      	ldrb	r2, [r1, #3]
 8003312:	780c      	ldrb	r4, [r1, #0]
 8003314:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003316:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 800331a:	4a7b      	ldr	r2, [pc, #492]	; (8003508 <USB_ActivateEndpoint+0x274>)
 800331c:	ea02 0201 	and.w	r2, r2, r1
 8003320:	bf18      	it	ne
 8003322:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800332a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800332e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8003332:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8003334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003338:	2000      	movs	r0, #0
 800333a:	e7bc      	b.n	80032b6 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 800333c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8003340:	e7fa      	b.n	8003338 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003342:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003346:	e7f7      	b.n	8003338 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003348:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800334c:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800334e:	4414      	add	r4, r2
 8003350:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003354:	780a      	ldrb	r2, [r1, #0]
 8003356:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800335a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800335e:	b2a4      	uxth	r4, r4
 8003360:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8003364:	bb56      	cbnz	r6, 80033bc <USB_ActivateEndpoint+0x128>
 8003366:	5b15      	ldrh	r5, [r2, r4]
 8003368:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 800336c:	042d      	lsls	r5, r5, #16
 800336e:	0c2d      	lsrs	r5, r5, #16
 8003370:	5315      	strh	r5, [r2, r4]
 8003372:	5b15      	ldrh	r5, [r2, r4]
 8003374:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8003378:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800337a:	780c      	ldrb	r4, [r1, #0]
 800337c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003380:	0457      	lsls	r7, r2, #17
 8003382:	d50b      	bpl.n	800339c <USB_ActivateEndpoint+0x108>
 8003384:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003388:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800338c:	0512      	lsls	r2, r2, #20
 800338e:	0d12      	lsrs	r2, r2, #20
 8003390:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003394:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003398:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800339c:	7809      	ldrb	r1, [r1, #0]
 800339e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80033a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033aa:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033b6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80033ba:	e7ba      	b.n	8003332 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80033bc:	2e3e      	cmp	r6, #62	; 0x3e
 80033be:	d806      	bhi.n	80033ce <USB_ActivateEndpoint+0x13a>
 80033c0:	0875      	lsrs	r5, r6, #1
 80033c2:	07f6      	lsls	r6, r6, #31
 80033c4:	bf48      	it	mi
 80033c6:	3501      	addmi	r5, #1
 80033c8:	02ad      	lsls	r5, r5, #10
 80033ca:	b2ad      	uxth	r5, r5
 80033cc:	e7d4      	b.n	8003378 <USB_ActivateEndpoint+0xe4>
 80033ce:	0977      	lsrs	r7, r6, #5
 80033d0:	06f5      	lsls	r5, r6, #27
 80033d2:	4d4e      	ldr	r5, [pc, #312]	; (800350c <USB_ActivateEndpoint+0x278>)
 80033d4:	bf08      	it	eq
 80033d6:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80033da:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80033de:	e7f4      	b.n	80033ca <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80033e0:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80033e4:	4015      	ands	r5, r2
 80033e6:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 80033ea:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80033ee:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80033f2:	780c      	ldrb	r4, [r1, #0]
 80033f4:	890d      	ldrh	r5, [r1, #8]
 80033f6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80033fa:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80033fe:	086d      	lsrs	r5, r5, #1
 8003400:	b2b6      	uxth	r6, r6
 8003402:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003406:	006d      	lsls	r5, r5, #1
 8003408:	53a5      	strh	r5, [r4, r6]
 800340a:	780c      	ldrb	r4, [r1, #0]
 800340c:	894d      	ldrh	r5, [r1, #10]
 800340e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8003412:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8003416:	086d      	lsrs	r5, r5, #1
 8003418:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 800341c:	006d      	lsls	r5, r5, #1
 800341e:	b2b6      	uxth	r6, r6
 8003420:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 8003422:	784c      	ldrb	r4, [r1, #1]
 8003424:	780d      	ldrb	r5, [r1, #0]
 8003426:	bbb4      	cbnz	r4, 8003496 <USB_ActivateEndpoint+0x202>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003428:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800342c:	0466      	lsls	r6, r4, #17
 800342e:	d508      	bpl.n	8003442 <USB_ActivateEndpoint+0x1ae>
 8003430:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003434:	4022      	ands	r2, r4
 8003436:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800343a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800343e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003442:	780c      	ldrb	r4, [r1, #0]
 8003444:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003448:	0655      	lsls	r5, r2, #25
 800344a:	d50b      	bpl.n	8003464 <USB_ActivateEndpoint+0x1d0>
 800344c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003450:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003454:	0512      	lsls	r2, r2, #20
 8003456:	0d12      	lsrs	r2, r2, #20
 8003458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800345c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003460:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003464:	f248 0480 	movw	r4, #32896	; 0x8080
 8003468:	780d      	ldrb	r5, [r1, #0]
 800346a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800346e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003472:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003476:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800347a:	4322      	orrs	r2, r4
 800347c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003480:	7809      	ldrb	r1, [r1, #0]
 8003482:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003486:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800348a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348e:	4314      	orrs	r4, r2
 8003490:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8003494:	e74d      	b.n	8003332 <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003496:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800349a:	0464      	lsls	r4, r4, #17
 800349c:	d508      	bpl.n	80034b0 <USB_ActivateEndpoint+0x21c>
 800349e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80034a2:	4022      	ands	r2, r4
 80034a4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80034a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034ac:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034b0:	780c      	ldrb	r4, [r1, #0]
 80034b2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034b6:	0652      	lsls	r2, r2, #25
 80034b8:	d50b      	bpl.n	80034d2 <USB_ActivateEndpoint+0x23e>
 80034ba:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80034c2:	0512      	lsls	r2, r2, #20
 80034c4:	0d12      	lsrs	r2, r2, #20
 80034c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ca:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80034ce:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80034d2:	78ca      	ldrb	r2, [r1, #3]
 80034d4:	780c      	ldrb	r4, [r1, #0]
 80034d6:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80034d8:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80034dc:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <USB_ActivateEndpoint+0x274>)
 80034de:	ea02 0205 	and.w	r2, r2, r5
 80034e2:	bf18      	it	ne
 80034e4:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034f0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034f4:	7809      	ldrb	r1, [r1, #0]
 80034f6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80034fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80034fe:	0492      	lsls	r2, r2, #18
 8003500:	0c92      	lsrs	r2, r2, #18
 8003502:	e754      	b.n	80033ae <USB_ActivateEndpoint+0x11a>
 8003504:	ffff8f8f 	.word	0xffff8f8f
 8003508:	ffff8fbf 	.word	0xffff8fbf
 800350c:	ffff8000 	.word	0xffff8000

08003510 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003510:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8003512:	7b0c      	ldrb	r4, [r1, #12]
 8003514:	784a      	ldrb	r2, [r1, #1]
 8003516:	780b      	ldrb	r3, [r1, #0]
 8003518:	bbbc      	cbnz	r4, 800358a <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 800351a:	b1f2      	cbz	r2, 800355a <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800351c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003520:	0652      	lsls	r2, r2, #25
 8003522:	d50b      	bpl.n	800353c <USB_DeactivateEndpoint+0x2c>
 8003524:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003528:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800352c:	0512      	lsls	r2, r2, #20
 800352e:	0d12      	lsrs	r2, r2, #20
 8003530:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003534:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003538:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800353c:	780a      	ldrb	r2, [r1, #0]
 800353e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003542:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003546:	051b      	lsls	r3, r3, #20
 8003548:	0d1b      	lsrs	r3, r3, #20
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800354a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003552:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8003556:	2000      	movs	r0, #0
 8003558:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800355a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800355e:	0454      	lsls	r4, r2, #17
 8003560:	d50b      	bpl.n	800357a <USB_DeactivateEndpoint+0x6a>
 8003562:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003566:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800356a:	0512      	lsls	r2, r2, #20
 800356c:	0d12      	lsrs	r2, r2, #20
 800356e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003572:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003576:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800357a:	780a      	ldrb	r2, [r1, #0]
 800357c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003580:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003584:	049b      	lsls	r3, r3, #18
 8003586:	0c9b      	lsrs	r3, r3, #18
 8003588:	e7df      	b.n	800354a <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800358a:	2a00      	cmp	r2, #0
 800358c:	d144      	bne.n	8003618 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800358e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003592:	0452      	lsls	r2, r2, #17
 8003594:	d50b      	bpl.n	80035ae <USB_DeactivateEndpoint+0x9e>
 8003596:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800359a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800359e:	0512      	lsls	r2, r2, #20
 80035a0:	0d12      	lsrs	r2, r2, #20
 80035a2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80035a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035aa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035ae:	780a      	ldrb	r2, [r1, #0]
 80035b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80035b4:	065c      	lsls	r4, r3, #25
 80035b6:	d50b      	bpl.n	80035d0 <USB_DeactivateEndpoint+0xc0>
 80035b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80035bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035c0:	051b      	lsls	r3, r3, #20
 80035c2:	0d1b      	lsrs	r3, r3, #20
 80035c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80035d0:	780a      	ldrb	r2, [r1, #0]
 80035d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80035d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035da:	051b      	lsls	r3, r3, #20
 80035dc:	0d1b      	lsrs	r3, r3, #20
 80035de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035ea:	f248 0280 	movw	r2, #32896	; 0x8080
 80035ee:	780c      	ldrb	r4, [r1, #0]
 80035f0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80035f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003602:	7809      	ldrb	r1, [r1, #0]
 8003604:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003610:	431a      	orrs	r2, r3
 8003612:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8003616:	e79e      	b.n	8003556 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003618:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800361c:	0452      	lsls	r2, r2, #17
 800361e:	d50b      	bpl.n	8003638 <USB_DeactivateEndpoint+0x128>
 8003620:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003624:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003628:	0512      	lsls	r2, r2, #20
 800362a:	0d12      	lsrs	r2, r2, #20
 800362c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003630:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003634:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003638:	780a      	ldrb	r2, [r1, #0]
 800363a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800363e:	065b      	lsls	r3, r3, #25
 8003640:	d50b      	bpl.n	800365a <USB_DeactivateEndpoint+0x14a>
 8003642:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364a:	051b      	lsls	r3, r3, #20
 800364c:	0d1b      	lsrs	r3, r3, #20
 800364e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003652:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003656:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800365a:	780a      	ldrb	r2, [r1, #0]
 800365c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003664:	051b      	lsls	r3, r3, #20
 8003666:	0d1b      	lsrs	r3, r3, #20
 8003668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800366c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003670:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003674:	f248 0280 	movw	r2, #32896	; 0x8080
 8003678:	780c      	ldrb	r4, [r1, #0]
 800367a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800367e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003686:	4313      	orrs	r3, r2
 8003688:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800368c:	7809      	ldrb	r1, [r1, #0]
 800368e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	e7b9      	b.n	8003610 <USB_DeactivateEndpoint+0x100>

0800369c <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800369c:	784b      	ldrb	r3, [r1, #1]
 800369e:	780a      	ldrb	r2, [r1, #0]
 80036a0:	b17b      	cbz	r3, 80036c2 <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80036a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ae:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80036b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80036be:	2000      	movs	r0, #0
 80036c0:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80036c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036d2:	e7ee      	b.n	80036b2 <USB_EPSetStall+0x16>

080036d4 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80036d4:	7b0b      	ldrb	r3, [r1, #12]
 80036d6:	bb23      	cbnz	r3, 8003722 <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 80036d8:	784b      	ldrb	r3, [r1, #1]
 80036da:	780a      	ldrb	r2, [r1, #0]
 80036dc:	b31b      	cbz	r3, 8003726 <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036e2:	065b      	lsls	r3, r3, #25
 80036e4:	d50b      	bpl.n	80036fe <USB_EPClearStall+0x2a>
 80036e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ee:	051b      	lsls	r3, r3, #20
 80036f0:	0d1b      	lsrs	r3, r3, #20
 80036f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80036fe:	78cb      	ldrb	r3, [r1, #3]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d00e      	beq.n	8003722 <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003704:	780a      	ldrb	r2, [r1, #0]
 8003706:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800370a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800370e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003712:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003722:	2000      	movs	r0, #0
 8003724:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003726:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800372a:	045b      	lsls	r3, r3, #17
 800372c:	d50b      	bpl.n	8003746 <USB_EPClearStall+0x72>
 800372e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003736:	051b      	lsls	r3, r3, #20
 8003738:	0d1b      	lsrs	r3, r3, #20
 800373a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800373e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003742:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003746:	780a      	ldrb	r2, [r1, #0]
 8003748:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800374c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003754:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003758:	e7dd      	b.n	8003716 <USB_EPClearStall+0x42>

0800375a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800375a:	b911      	cbnz	r1, 8003762 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003762:	2000      	movs	r0, #0
 8003764:	4770      	bx	lr

08003766 <USB_DevConnect>:
 8003766:	2000      	movs	r0, #0
 8003768:	4770      	bx	lr

0800376a <USB_DevDisconnect>:
 800376a:	2000      	movs	r0, #0
 800376c:	4770      	bx	lr

0800376e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800376e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003772:	4770      	bx	lr

08003774 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003774:	2000      	movs	r0, #0
 8003776:	4770      	bx	lr

08003778 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003778:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800377c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800377e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8003788:	429a      	cmp	r2, r3
 800378a:	d100      	bne.n	800378e <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800378c:	4770      	bx	lr
 800378e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8003792:	f822 0b04 	strh.w	r0, [r2], #4
 8003796:	e7f7      	b.n	8003788 <USB_WritePMA+0x10>

08003798 <USB_EPStartXfer>:
{
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800379c:	7849      	ldrb	r1, [r1, #1]
{
 800379e:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 80037a0:	2901      	cmp	r1, #1
 80037a2:	7b27      	ldrb	r7, [r4, #12]
 80037a4:	f040 8183 	bne.w	8003aae <USB_EPStartXfer+0x316>
    if (ep->xfer_len > ep->maxpacket)
 80037a8:	6922      	ldr	r2, [r4, #16]
 80037aa:	69a6      	ldr	r6, [r4, #24]
 80037ac:	6961      	ldr	r1, [r4, #20]
 80037ae:	4296      	cmp	r6, r2
 80037b0:	bf28      	it	cs
 80037b2:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 80037b4:	b9ef      	cbnz	r7, 80037f2 <USB_EPStartXfer+0x5a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80037b6:	b2b6      	uxth	r6, r6
 80037b8:	4633      	mov	r3, r6
 80037ba:	88e2      	ldrh	r2, [r4, #6]
 80037bc:	f7ff ffdc 	bl	8003778 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80037c0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80037c4:	7822      	ldrb	r2, [r4, #0]
 80037c6:	f205 4304 	addw	r3, r5, #1028	; 0x404
 80037ca:	0112      	lsls	r2, r2, #4
 80037cc:	440b      	add	r3, r1
 80037ce:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80037d0:	7822      	ldrb	r2, [r4, #0]
 80037d2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80037d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037de:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 80037e2:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ec:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80037f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 80037f2:	78e3      	ldrb	r3, [r4, #3]
 80037f4:	7827      	ldrb	r7, [r4, #0]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	f040 8124 	bne.w	8003a44 <USB_EPStartXfer+0x2ac>
        if (ep->xfer_len_db > ep->maxpacket)
 80037fc:	6a23      	ldr	r3, [r4, #32]
 80037fe:	429a      	cmp	r2, r3
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003800:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8003804:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8003808:	ea4f 5202 	mov.w	r2, r2, lsl #20
 800380c:	ea4f 5212 	mov.w	r2, r2, lsr #20
        if (ep->xfer_len_db > ep->maxpacket)
 8003810:	f080 8107 	bcs.w	8003a22 <USB_EPStartXfer+0x28a>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003814:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003818:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800381c:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003820:	7822      	ldrb	r2, [r4, #0]
          ep->xfer_len_db -= len;
 8003822:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003824:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8003828:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800382a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800382e:	b2b3      	uxth	r3, r6
 8003830:	7860      	ldrb	r0, [r4, #1]
 8003832:	d07c      	beq.n	800392e <USB_EPStartXfer+0x196>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003834:	2800      	cmp	r0, #0
 8003836:	d14d      	bne.n	80038d4 <USB_EPStartXfer+0x13c>
 8003838:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800383c:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8003840:	4407      	add	r7, r0
 8003842:	0112      	lsls	r2, r2, #4
 8003844:	2e00      	cmp	r6, #0
 8003846:	d131      	bne.n	80038ac <USB_EPStartXfer+0x114>
 8003848:	5ab8      	ldrh	r0, [r7, r2]
 800384a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800384e:	0400      	lsls	r0, r0, #16
 8003850:	0c00      	lsrs	r0, r0, #16
 8003852:	52b8      	strh	r0, [r7, r2]
 8003854:	5ab8      	ldrh	r0, [r7, r2]
 8003856:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800385a:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800385c:	8962      	ldrh	r2, [r4, #10]
 800385e:	4628      	mov	r0, r5
 8003860:	f7ff ff8a 	bl	8003778 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003864:	6a22      	ldr	r2, [r4, #32]
 8003866:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003868:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800386a:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800386c:	bf89      	itett	hi
 800386e:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 8003870:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 8003872:	6222      	strhi	r2, [r4, #32]
 8003874:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003876:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8003878:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 800387a:	bf98      	it	ls
 800387c:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 800387e:	6161      	str	r1, [r4, #20]
 8003880:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003882:	2800      	cmp	r0, #0
 8003884:	d148      	bne.n	8003918 <USB_EPStartXfer+0x180>
 8003886:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800388a:	7827      	ldrb	r7, [r4, #0]
 800388c:	f205 4604 	addw	r6, r5, #1028	; 0x404
 8003890:	013f      	lsls	r7, r7, #4
 8003892:	4406      	add	r6, r0
 8003894:	bb42      	cbnz	r2, 80038e8 <USB_EPStartXfer+0x150>
 8003896:	5bba      	ldrh	r2, [r7, r6]
 8003898:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800389c:	0412      	lsls	r2, r2, #16
 800389e:	0c12      	lsrs	r2, r2, #16
 80038a0:	53ba      	strh	r2, [r7, r6]
 80038a2:	5bba      	ldrh	r2, [r7, r6]
 80038a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038a8:	53ba      	strh	r2, [r7, r6]
 80038aa:	e026      	b.n	80038fa <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80038ac:	2e3e      	cmp	r6, #62	; 0x3e
 80038ae:	d807      	bhi.n	80038c0 <USB_EPStartXfer+0x128>
 80038b0:	0870      	lsrs	r0, r6, #1
 80038b2:	f016 0f01 	tst.w	r6, #1
 80038b6:	bf18      	it	ne
 80038b8:	3001      	addne	r0, #1
 80038ba:	0280      	lsls	r0, r0, #10
 80038bc:	b280      	uxth	r0, r0
 80038be:	e7cc      	b.n	800385a <USB_EPStartXfer+0xc2>
 80038c0:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 80038c4:	06f0      	lsls	r0, r6, #27
 80038c6:	4897      	ldr	r0, [pc, #604]	; (8003b24 <USB_EPStartXfer+0x38c>)
 80038c8:	bf08      	it	eq
 80038ca:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80038ce:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80038d2:	e7f3      	b.n	80038bc <USB_EPStartXfer+0x124>
 80038d4:	2801      	cmp	r0, #1
 80038d6:	d1c1      	bne.n	800385c <USB_EPStartXfer+0xc4>
 80038d8:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 80038dc:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 80038e0:	4438      	add	r0, r7
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	5283      	strh	r3, [r0, r2]
 80038e6:	e7b9      	b.n	800385c <USB_EPStartXfer+0xc4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80038e8:	2a3e      	cmp	r2, #62	; 0x3e
 80038ea:	d80b      	bhi.n	8003904 <USB_EPStartXfer+0x16c>
 80038ec:	0850      	lsrs	r0, r2, #1
 80038ee:	07d2      	lsls	r2, r2, #31
 80038f0:	bf48      	it	mi
 80038f2:	3001      	addmi	r0, #1
 80038f4:	0280      	lsls	r0, r0, #10
 80038f6:	b280      	uxth	r0, r0
 80038f8:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80038fa:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80038fc:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80038fe:	f7ff ff3b 	bl	8003778 <USB_WritePMA>
 8003902:	e765      	b.n	80037d0 <USB_EPStartXfer+0x38>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003904:	0950      	lsrs	r0, r2, #5
 8003906:	06d2      	lsls	r2, r2, #27
 8003908:	4a86      	ldr	r2, [pc, #536]	; (8003b24 <USB_EPStartXfer+0x38c>)
 800390a:	bf08      	it	eq
 800390c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003910:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8003914:	b292      	uxth	r2, r2
 8003916:	e7c7      	b.n	80038a8 <USB_EPStartXfer+0x110>
 8003918:	2801      	cmp	r0, #1
 800391a:	d1ee      	bne.n	80038fa <USB_EPStartXfer+0x162>
 800391c:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8003920:	7820      	ldrb	r0, [r4, #0]
 8003922:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003926:	0100      	lsls	r0, r0, #4
 8003928:	4432      	add	r2, r6
 800392a:	5283      	strh	r3, [r0, r2]
 800392c:	e7e5      	b.n	80038fa <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800392e:	2800      	cmp	r0, #0
 8003930:	d14d      	bne.n	80039ce <USB_EPStartXfer+0x236>
 8003932:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003936:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800393a:	4407      	add	r7, r0
 800393c:	0112      	lsls	r2, r2, #4
 800393e:	2e00      	cmp	r6, #0
 8003940:	d131      	bne.n	80039a6 <USB_EPStartXfer+0x20e>
 8003942:	5ab8      	ldrh	r0, [r7, r2]
 8003944:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8003948:	0400      	lsls	r0, r0, #16
 800394a:	0c00      	lsrs	r0, r0, #16
 800394c:	52b8      	strh	r0, [r7, r2]
 800394e:	5ab8      	ldrh	r0, [r7, r2]
 8003950:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003954:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003956:	8922      	ldrh	r2, [r4, #8]
 8003958:	4628      	mov	r0, r5
 800395a:	f7ff ff0d 	bl	8003778 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800395e:	6a22      	ldr	r2, [r4, #32]
 8003960:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003962:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003964:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8003966:	bf89      	itett	hi
 8003968:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 800396a:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 800396c:	6222      	strhi	r2, [r4, #32]
 800396e:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003970:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8003972:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 8003974:	bf98      	it	ls
 8003976:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 8003978:	6161      	str	r1, [r4, #20]
 800397a:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800397c:	2800      	cmp	r0, #0
 800397e:	d145      	bne.n	8003a0c <USB_EPStartXfer+0x274>
 8003980:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003984:	7827      	ldrb	r7, [r4, #0]
 8003986:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 800398a:	013f      	lsls	r7, r7, #4
 800398c:	4406      	add	r6, r0
 800398e:	bb42      	cbnz	r2, 80039e2 <USB_EPStartXfer+0x24a>
 8003990:	5bba      	ldrh	r2, [r7, r6]
 8003992:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003996:	0412      	lsls	r2, r2, #16
 8003998:	0c12      	lsrs	r2, r2, #16
 800399a:	53ba      	strh	r2, [r7, r6]
 800399c:	5bba      	ldrh	r2, [r7, r6]
 800399e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039a2:	53ba      	strh	r2, [r7, r6]
 80039a4:	e026      	b.n	80039f4 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039a6:	2e3e      	cmp	r6, #62	; 0x3e
 80039a8:	d807      	bhi.n	80039ba <USB_EPStartXfer+0x222>
 80039aa:	0870      	lsrs	r0, r6, #1
 80039ac:	f016 0f01 	tst.w	r6, #1
 80039b0:	bf18      	it	ne
 80039b2:	3001      	addne	r0, #1
 80039b4:	0280      	lsls	r0, r0, #10
 80039b6:	b280      	uxth	r0, r0
 80039b8:	e7cc      	b.n	8003954 <USB_EPStartXfer+0x1bc>
 80039ba:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 80039be:	06f0      	lsls	r0, r6, #27
 80039c0:	4858      	ldr	r0, [pc, #352]	; (8003b24 <USB_EPStartXfer+0x38c>)
 80039c2:	bf08      	it	eq
 80039c4:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80039c8:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80039cc:	e7f3      	b.n	80039b6 <USB_EPStartXfer+0x21e>
 80039ce:	2801      	cmp	r0, #1
 80039d0:	d1c1      	bne.n	8003956 <USB_EPStartXfer+0x1be>
 80039d2:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 80039d6:	f205 4004 	addw	r0, r5, #1028	; 0x404
 80039da:	4438      	add	r0, r7
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	5283      	strh	r3, [r0, r2]
 80039e0:	e7b9      	b.n	8003956 <USB_EPStartXfer+0x1be>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039e2:	2a3e      	cmp	r2, #62	; 0x3e
 80039e4:	d808      	bhi.n	80039f8 <USB_EPStartXfer+0x260>
 80039e6:	0850      	lsrs	r0, r2, #1
 80039e8:	07d2      	lsls	r2, r2, #31
 80039ea:	bf48      	it	mi
 80039ec:	3001      	addmi	r0, #1
 80039ee:	0280      	lsls	r0, r0, #10
 80039f0:	b280      	uxth	r0, r0
 80039f2:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039f4:	8962      	ldrh	r2, [r4, #10]
 80039f6:	e781      	b.n	80038fc <USB_EPStartXfer+0x164>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039f8:	0950      	lsrs	r0, r2, #5
 80039fa:	06d2      	lsls	r2, r2, #27
 80039fc:	4a49      	ldr	r2, [pc, #292]	; (8003b24 <USB_EPStartXfer+0x38c>)
 80039fe:	bf08      	it	eq
 8003a00:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003a04:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8003a08:	b292      	uxth	r2, r2
 8003a0a:	e7ca      	b.n	80039a2 <USB_EPStartXfer+0x20a>
 8003a0c:	2801      	cmp	r0, #1
 8003a0e:	d1f1      	bne.n	80039f4 <USB_EPStartXfer+0x25c>
 8003a10:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8003a14:	7820      	ldrb	r0, [r4, #0]
 8003a16:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003a1a:	0100      	lsls	r0, r0, #4
 8003a1c:	4432      	add	r2, r6
 8003a1e:	5283      	strh	r3, [r0, r2]
 8003a20:	e7e8      	b.n	80039f4 <USB_EPStartXfer+0x25c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a2a:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003a2e:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003a32:	7826      	ldrb	r6, [r4, #0]
 8003a34:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003a38:	443a      	add	r2, r7
 8003a3a:	0136      	lsls	r6, r6, #4
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a40:	8922      	ldrh	r2, [r4, #8]
 8003a42:	e75c      	b.n	80038fe <USB_EPStartXfer+0x166>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a44:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a48:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a4c:	0652      	lsls	r2, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a4e:	bf4b      	itete	mi
 8003a50:	f205 420c 	addwmi	r2, r5, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a54:	f205 4204 	addwpl	r2, r5, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a58:	1812      	addmi	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a5a:	1812      	addpl	r2, r2, r0
 8003a5c:	b2b3      	uxth	r3, r6
 8003a5e:	ea4f 1707 	mov.w	r7, r7, lsl #4
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a62:	bf4b      	itete	mi
 8003a64:	53d3      	strhmi	r3, [r2, r7]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a66:	53d3      	strhpl	r3, [r2, r7]
          pmabuffer = ep->pmaaddr1;
 8003a68:	8962      	ldrhmi	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 8003a6a:	8922      	ldrhpl	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f7ff fe83 	bl	8003778 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003a72:	7863      	ldrb	r3, [r4, #1]
 8003a74:	7822      	ldrb	r2, [r4, #0]
 8003a76:	b963      	cbnz	r3, 8003a92 <USB_EPStartXfer+0x2fa>
 8003a78:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003a7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a80:	051b      	lsls	r3, r3, #20
 8003a82:	0d1b      	lsrs	r3, r3, #20
 8003a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a8c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003a90:	e69e      	b.n	80037d0 <USB_EPStartXfer+0x38>
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	f47f ae9c 	bne.w	80037d0 <USB_EPStartXfer+0x38>
 8003a98:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa0:	051b      	lsls	r3, r3, #20
 8003aa2:	0d1b      	lsrs	r3, r3, #20
 8003aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aac:	e7ee      	b.n	8003a8c <USB_EPStartXfer+0x2f4>
    if (ep->doublebuffer == 0U)
 8003aae:	2f00      	cmp	r7, #0
 8003ab0:	d13a      	bne.n	8003b28 <USB_EPStartXfer+0x390>
      if (ep->xfer_len > ep->maxpacket)
 8003ab2:	69a2      	ldr	r2, [r4, #24]
 8003ab4:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003ab6:	f205 410c 	addw	r1, r5, #1036	; 0x40c
      if (ep->xfer_len > ep->maxpacket)
 8003aba:	429a      	cmp	r2, r3
        ep->xfer_len = 0U;
 8003abc:	bf92      	itee	ls
 8003abe:	4613      	movls	r3, r2
        ep->xfer_len -= len;
 8003ac0:	1ad2      	subhi	r2, r2, r3
 8003ac2:	61a2      	strhi	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003ac4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003ac8:	7820      	ldrb	r0, [r4, #0]
        ep->xfer_len = 0U;
 8003aca:	bf98      	it	ls
 8003acc:	61a7      	strls	r7, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003ace:	0100      	lsls	r0, r0, #4
 8003ad0:	4411      	add	r1, r2
 8003ad2:	b953      	cbnz	r3, 8003aea <USB_EPStartXfer+0x352>
 8003ad4:	5a43      	ldrh	r3, [r0, r1]
 8003ad6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ada:	041b      	lsls	r3, r3, #16
 8003adc:	0c1b      	lsrs	r3, r3, #16
 8003ade:	5243      	strh	r3, [r0, r1]
 8003ae0:	5a43      	ldrh	r3, [r0, r1]
 8003ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae6:	5243      	strh	r3, [r0, r1]
 8003ae8:	e008      	b.n	8003afc <USB_EPStartXfer+0x364>
 8003aea:	2b3e      	cmp	r3, #62	; 0x3e
 8003aec:	d810      	bhi.n	8003b10 <USB_EPStartXfer+0x378>
 8003aee:	085a      	lsrs	r2, r3, #1
 8003af0:	07df      	lsls	r7, r3, #31
 8003af2:	bf48      	it	mi
 8003af4:	3201      	addmi	r2, #1
 8003af6:	0292      	lsls	r2, r2, #10
 8003af8:	b292      	uxth	r2, r2
 8003afa:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003afc:	7822      	ldrb	r2, [r4, #0]
 8003afe:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003b0e:	e668      	b.n	80037e2 <USB_EPStartXfer+0x4a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003b10:	095a      	lsrs	r2, r3, #5
 8003b12:	06de      	lsls	r6, r3, #27
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <USB_EPStartXfer+0x38c>)
 8003b16:	bf08      	it	eq
 8003b18:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003b1c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	e7e0      	b.n	8003ae6 <USB_EPStartXfer+0x34e>
 8003b24:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8003b28:	78e3      	ldrb	r3, [r4, #3]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d174      	bne.n	8003c18 <USB_EPStartXfer+0x480>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003b2e:	b999      	cbnz	r1, 8003b58 <USB_EPStartXfer+0x3c0>
 8003b30:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003b34:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003b38:	7821      	ldrb	r1, [r4, #0]
 8003b3a:	6920      	ldr	r0, [r4, #16]
 8003b3c:	0109      	lsls	r1, r1, #4
 8003b3e:	441a      	add	r2, r3
 8003b40:	2800      	cmp	r0, #0
 8003b42:	d13a      	bne.n	8003bba <USB_EPStartXfer+0x422>
 8003b44:	5a8b      	ldrh	r3, [r1, r2]
 8003b46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	0c1b      	lsrs	r3, r3, #16
 8003b4e:	528b      	strh	r3, [r1, r2]
 8003b50:	5a8b      	ldrh	r3, [r1, r2]
 8003b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b56:	528b      	strh	r3, [r1, r2]
 8003b58:	7862      	ldrb	r2, [r4, #1]
 8003b5a:	7823      	ldrb	r3, [r4, #0]
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	d150      	bne.n	8003c02 <USB_EPStartXfer+0x46a>
 8003b60:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003b64:	6920      	ldr	r0, [r4, #16]
 8003b66:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003b6a:	4411      	add	r1, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d135      	bne.n	8003bde <USB_EPStartXfer+0x446>
 8003b72:	5aca      	ldrh	r2, [r1, r3]
 8003b74:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003b78:	0412      	lsls	r2, r2, #16
 8003b7a:	0c12      	lsrs	r2, r2, #16
 8003b7c:	52ca      	strh	r2, [r1, r3]
 8003b7e:	5aca      	ldrh	r2, [r1, r3]
 8003b80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b84:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8003b86:	69e3      	ldr	r3, [r4, #28]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0b7      	beq.n	8003afc <USB_EPStartXfer+0x364>
 8003b8c:	f244 0140 	movw	r1, #16448	; 0x4040
 8003b90:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003b92:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003b96:	400b      	ands	r3, r1
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	d001      	beq.n	8003ba0 <USB_EPStartXfer+0x408>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1ad      	bne.n	8003afc <USB_EPStartXfer+0x364>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8003ba0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba8:	051b      	lsls	r3, r3, #20
 8003baa:	0d1b      	lsrs	r3, r3, #20
 8003bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bb4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003bb8:	e7a0      	b.n	8003afc <USB_EPStartXfer+0x364>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003bba:	283e      	cmp	r0, #62	; 0x3e
 8003bbc:	d806      	bhi.n	8003bcc <USB_EPStartXfer+0x434>
 8003bbe:	0843      	lsrs	r3, r0, #1
 8003bc0:	07c0      	lsls	r0, r0, #31
 8003bc2:	bf48      	it	mi
 8003bc4:	3301      	addmi	r3, #1
 8003bc6:	029b      	lsls	r3, r3, #10
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	e7c4      	b.n	8003b56 <USB_EPStartXfer+0x3be>
 8003bcc:	0946      	lsrs	r6, r0, #5
 8003bce:	06c7      	lsls	r7, r0, #27
 8003bd0:	4b46      	ldr	r3, [pc, #280]	; (8003cec <USB_EPStartXfer+0x554>)
 8003bd2:	bf08      	it	eq
 8003bd4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003bd8:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8003bdc:	e7f4      	b.n	8003bc8 <USB_EPStartXfer+0x430>
 8003bde:	283e      	cmp	r0, #62	; 0x3e
 8003be0:	d806      	bhi.n	8003bf0 <USB_EPStartXfer+0x458>
 8003be2:	0842      	lsrs	r2, r0, #1
 8003be4:	07c0      	lsls	r0, r0, #31
 8003be6:	bf48      	it	mi
 8003be8:	3201      	addmi	r2, #1
 8003bea:	0292      	lsls	r2, r2, #10
 8003bec:	b292      	uxth	r2, r2
 8003bee:	e7c9      	b.n	8003b84 <USB_EPStartXfer+0x3ec>
 8003bf0:	0946      	lsrs	r6, r0, #5
 8003bf2:	06c7      	lsls	r7, r0, #27
 8003bf4:	4a3d      	ldr	r2, [pc, #244]	; (8003cec <USB_EPStartXfer+0x554>)
 8003bf6:	bf08      	it	eq
 8003bf8:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003bfc:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003c00:	e7f4      	b.n	8003bec <USB_EPStartXfer+0x454>
 8003c02:	2a01      	cmp	r2, #1
 8003c04:	d1bf      	bne.n	8003b86 <USB_EPStartXfer+0x3ee>
 8003c06:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003c0a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003c0e:	440a      	add	r2, r1
 8003c10:	8a21      	ldrh	r1, [r4, #16]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	52d1      	strh	r1, [r2, r3]
 8003c16:	e7b6      	b.n	8003b86 <USB_EPStartXfer+0x3ee>
      else if (ep->type == EP_TYPE_ISOC)
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d164      	bne.n	8003ce6 <USB_EPStartXfer+0x54e>
        if (ep->xfer_len > ep->maxpacket)
 8003c1c:	69a2      	ldr	r2, [r4, #24]
 8003c1e:	6923      	ldr	r3, [r4, #16]
 8003c20:	429a      	cmp	r2, r3
          ep->xfer_len = 0U;
 8003c22:	bf95      	itete	ls
 8003c24:	2300      	movls	r3, #0
          ep->xfer_len -= len;
 8003c26:	1ad2      	subhi	r2, r2, r3
          ep->xfer_len = 0U;
 8003c28:	61a3      	strls	r3, [r4, #24]
          ep->xfer_len -= len;
 8003c2a:	61a2      	strhi	r2, [r4, #24]
          ep->xfer_len = 0U;
 8003c2c:	bf98      	it	ls
 8003c2e:	4613      	movls	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003c30:	b989      	cbnz	r1, 8003c56 <USB_EPStartXfer+0x4be>
 8003c32:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003c36:	7820      	ldrb	r0, [r4, #0]
 8003c38:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8003c3c:	0100      	lsls	r0, r0, #4
 8003c3e:	4411      	add	r1, r2
 8003c40:	b9fb      	cbnz	r3, 8003c82 <USB_EPStartXfer+0x4ea>
 8003c42:	5a42      	ldrh	r2, [r0, r1]
 8003c44:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003c48:	0412      	lsls	r2, r2, #16
 8003c4a:	0c12      	lsrs	r2, r2, #16
 8003c4c:	5242      	strh	r2, [r0, r1]
 8003c4e:	5a42      	ldrh	r2, [r0, r1]
 8003c50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c54:	5242      	strh	r2, [r0, r1]
 8003c56:	7861      	ldrb	r1, [r4, #1]
 8003c58:	7822      	ldrb	r2, [r4, #0]
 8003c5a:	2900      	cmp	r1, #0
 8003c5c:	d137      	bne.n	8003cce <USB_EPStartXfer+0x536>
 8003c5e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003c62:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8003c66:	4408      	add	r0, r1
 8003c68:	0112      	lsls	r2, r2, #4
 8003c6a:	b9e3      	cbnz	r3, 8003ca6 <USB_EPStartXfer+0x50e>
 8003c6c:	5a83      	ldrh	r3, [r0, r2]
 8003c6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	5283      	strh	r3, [r0, r2]
 8003c78:	5a83      	ldrh	r3, [r0, r2]
 8003c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c7e:	5283      	strh	r3, [r0, r2]
 8003c80:	e73c      	b.n	8003afc <USB_EPStartXfer+0x364>
 8003c82:	2b3e      	cmp	r3, #62	; 0x3e
 8003c84:	d806      	bhi.n	8003c94 <USB_EPStartXfer+0x4fc>
 8003c86:	085a      	lsrs	r2, r3, #1
 8003c88:	07de      	lsls	r6, r3, #31
 8003c8a:	bf48      	it	mi
 8003c8c:	3201      	addmi	r2, #1
 8003c8e:	0292      	lsls	r2, r2, #10
 8003c90:	b292      	uxth	r2, r2
 8003c92:	e7df      	b.n	8003c54 <USB_EPStartXfer+0x4bc>
 8003c94:	095e      	lsrs	r6, r3, #5
 8003c96:	06df      	lsls	r7, r3, #27
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <USB_EPStartXfer+0x554>)
 8003c9a:	bf08      	it	eq
 8003c9c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003ca0:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003ca4:	e7f4      	b.n	8003c90 <USB_EPStartXfer+0x4f8>
 8003ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ca8:	d807      	bhi.n	8003cba <USB_EPStartXfer+0x522>
 8003caa:	0859      	lsrs	r1, r3, #1
 8003cac:	07de      	lsls	r6, r3, #31
 8003cae:	bf48      	it	mi
 8003cb0:	3101      	addmi	r1, #1
 8003cb2:	0289      	lsls	r1, r1, #10
 8003cb4:	b289      	uxth	r1, r1
 8003cb6:	5281      	strh	r1, [r0, r2]
 8003cb8:	e720      	b.n	8003afc <USB_EPStartXfer+0x364>
 8003cba:	0959      	lsrs	r1, r3, #5
 8003cbc:	06db      	lsls	r3, r3, #27
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <USB_EPStartXfer+0x554>)
 8003cc0:	bf08      	it	eq
 8003cc2:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003cc6:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	e7d7      	b.n	8003c7e <USB_EPStartXfer+0x4e6>
 8003cce:	2901      	cmp	r1, #1
 8003cd0:	f47f af14 	bne.w	8003afc <USB_EPStartXfer+0x364>
 8003cd4:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003cd8:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003cdc:	4401      	add	r1, r0
 8003cde:	0112      	lsls	r2, r2, #4
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	528b      	strh	r3, [r1, r2]
 8003ce4:	e70a      	b.n	8003afc <USB_EPStartXfer+0x364>
        return HAL_ERROR;
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	e582      	b.n	80037f0 <USB_EPStartXfer+0x58>
 8003cea:	bf00      	nop
 8003cec:	ffff8000 	.word	0xffff8000

08003cf0 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003cf0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8003cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003cfa:	085d      	lsrs	r5, r3, #1
 8003cfc:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003cfe:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8003d00:	462e      	mov	r6, r5
 8003d02:	3002      	adds	r0, #2
 8003d04:	b936      	cbnz	r6, 8003d14 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003d06:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8003d08:	bf44      	itt	mi
 8003d0a:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003d0e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8003d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003d14:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8003d18:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8003d1a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003d1c:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003d20:	0a24      	lsrs	r4, r4, #8
 8003d22:	f800 4c01 	strb.w	r4, [r0, #-1]
 8003d26:	e7ec      	b.n	8003d02 <USB_ReadPMA+0x12>

08003d28 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003d28:	4b01      	ldr	r3, [pc, #4]	; (8003d30 <LL_SetSystemCoreClock+0x8>)
 8003d2a:	6018      	str	r0, [r3, #0]
}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000000 	.word	0x20000000

08003d34 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003d34:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003d38:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003d3a:	b16b      	cbz	r3, 8003d58 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003d3c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003d40:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003d44:	28ff      	cmp	r0, #255	; 0xff
 8003d46:	d007      	beq.n	8003d58 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003d4e:	4621      	mov	r1, r4
 8003d50:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003d52:	23ff      	movs	r3, #255	; 0xff
 8003d54:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003d58:	2000      	movs	r0, #0
 8003d5a:	bd10      	pop	{r4, pc}

08003d5c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003d5c:	2343      	movs	r3, #67	; 0x43
 8003d5e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003d60:	4800      	ldr	r0, [pc, #0]	; (8003d64 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003d62:	4770      	bx	lr
 8003d64:	20000044 	.word	0x20000044

08003d68 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003d68:	2343      	movs	r3, #67	; 0x43
 8003d6a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003d6c:	4800      	ldr	r0, [pc, #0]	; (8003d70 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003d6e:	4770      	bx	lr
 8003d70:	20000088 	.word	0x20000088

08003d74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003d74:	2343      	movs	r3, #67	; 0x43
 8003d76:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003d78:	4800      	ldr	r0, [pc, #0]	; (8003d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003d7a:	4770      	bx	lr
 8003d7c:	200000d8 	.word	0x200000d8

08003d80 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003d80:	230a      	movs	r3, #10
 8003d82:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003d84:	4800      	ldr	r0, [pc, #0]	; (8003d88 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003d86:	4770      	bx	lr
 8003d88:	200000cc 	.word	0x200000cc

08003d8c <USBD_CDC_DataOut>:
{
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003d90:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003d94:	f000 ff10 	bl	8004bb8 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8003d98:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003d9c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003da0:	b14b      	cbz	r3, 8003db6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003da2:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8003da6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003db0:	4798      	blx	r3
    return USBD_OK;
 8003db2:	2000      	movs	r0, #0
}
 8003db4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003db6:	2002      	movs	r0, #2
 8003db8:	e7fc      	b.n	8003db4 <USBD_CDC_DataOut+0x28>

08003dba <USBD_CDC_DataIn>:
{
 8003dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003dbc:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003dc0:	b1d6      	cbz	r6, 8003df8 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003dc2:	2314      	movs	r3, #20
 8003dc4:	fb03 0301 	mla	r3, r3, r1, r0
 8003dc8:	69dd      	ldr	r5, [r3, #28]
 8003dca:	b18d      	cbz	r5, 8003df0 <USBD_CDC_DataIn+0x36>
 8003dcc:	2728      	movs	r7, #40	; 0x28
 8003dce:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003dd2:	fb07 4201 	mla	r2, r7, r1, r4
 8003dd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dd8:	fbb5 f4f2 	udiv	r4, r5, r2
 8003ddc:	fb02 5414 	mls	r4, r2, r4, r5
 8003de0:	b934      	cbnz	r4, 8003df0 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8003de2:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003de4:	4622      	mov	r2, r4
 8003de6:	4623      	mov	r3, r4
 8003de8:	f000 feca 	bl	8004b80 <USBD_LL_Transmit>
    return USBD_OK;
 8003dec:	4620      	mov	r0, r4
}
 8003dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003df0:	2000      	movs	r0, #0
 8003df2:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8003df6:	e7fa      	b.n	8003dee <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8003df8:	2002      	movs	r0, #2
 8003dfa:	e7f8      	b.n	8003dee <USBD_CDC_DataIn+0x34>

08003dfc <USBD_CDC_Setup>:
{
 8003dfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8003e00:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e04:	780a      	ldrb	r2, [r1, #0]
{
 8003e06:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e08:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8003e0c:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e0e:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003e12:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003e16:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e1a:	d028      	beq.n	8003e6e <USBD_CDC_Setup+0x72>
 8003e1c:	2c20      	cmp	r4, #32
 8003e1e:	d145      	bne.n	8003eac <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8003e20:	88cc      	ldrh	r4, [r1, #6]
 8003e22:	784b      	ldrb	r3, [r1, #1]
 8003e24:	b1e4      	cbz	r4, 8003e60 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003e26:	0612      	lsls	r2, r2, #24
 8003e28:	d511      	bpl.n	8003e4e <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e2a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003e2e:	4639      	mov	r1, r7
 8003e30:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003e34:	4618      	mov	r0, r3
 8003e36:	4622      	mov	r2, r4
 8003e38:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003e3a:	88f2      	ldrh	r2, [r6, #6]
 8003e3c:	4639      	mov	r1, r7
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f000 fc45 	bl	80046ce <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003e44:	4644      	mov	r4, r8
}
 8003e46:	4620      	mov	r0, r4
 8003e48:	b003      	add	sp, #12
 8003e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8003e4e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003e52:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003e56:	4622      	mov	r2, r4
 8003e58:	4639      	mov	r1, r7
 8003e5a:	f000 fc4d 	bl	80046f8 <USBD_CtlPrepareRx>
 8003e5e:	e7f1      	b.n	8003e44 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e60:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003e64:	4618      	mov	r0, r3
 8003e66:	6895      	ldr	r5, [r2, #8]
 8003e68:	4622      	mov	r2, r4
 8003e6a:	47a8      	blx	r5
 8003e6c:	e7eb      	b.n	8003e46 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8003e6e:	784f      	ldrb	r7, [r1, #1]
 8003e70:	2f0a      	cmp	r7, #10
 8003e72:	d00d      	beq.n	8003e90 <USBD_CDC_Setup+0x94>
 8003e74:	2f0b      	cmp	r7, #11
 8003e76:	d015      	beq.n	8003ea4 <USBD_CDC_Setup+0xa8>
 8003e78:	b9c7      	cbnz	r7, 8003eac <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e7a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d114      	bne.n	8003eac <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003e82:	2202      	movs	r2, #2
 8003e84:	f10d 0106 	add.w	r1, sp, #6
 8003e88:	f000 fc21 	bl	80046ce <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003e8c:	463c      	mov	r4, r7
 8003e8e:	e7da      	b.n	8003e46 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e90:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d109      	bne.n	8003eac <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f10d 0105 	add.w	r1, sp, #5
 8003e9e:	f000 fc16 	bl	80046ce <USBD_CtlSendData>
 8003ea2:	e7d0      	b.n	8003e46 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003ea4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d0cc      	beq.n	8003e46 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8003eac:	4631      	mov	r1, r6
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f000 fbe6 	bl	8004680 <USBD_CtlError>
          ret = USBD_FAIL;
 8003eb4:	2402      	movs	r4, #2
          break;
 8003eb6:	e7c6      	b.n	8003e46 <USBD_CDC_Setup+0x4a>

08003eb8 <USBD_CDC_DeInit>:
{
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003ebc:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003ebe:	2181      	movs	r1, #129	; 0x81
 8003ec0:	f000 fe14 	bl	8004aec <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003ec4:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003ec6:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f000 fe0f 	bl	8004aec <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003ece:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003ed2:	2182      	movs	r1, #130	; 0x82
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	f000 fe09 	bl	8004aec <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8003eda:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003ede:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003ee0:	b14b      	cbz	r3, 8003ef6 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003ee2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003eea:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003eee:	f000 fe6b 	bl	8004bc8 <USBD_static_free>
    pdev->pClassData = NULL;
 8003ef2:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	bd38      	pop	{r3, r4, r5, pc}

08003efa <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003efa:	7c03      	ldrb	r3, [r0, #16]
{
 8003efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f00:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f02:	bbcb      	cbnz	r3, 8003f78 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f08:	2202      	movs	r2, #2
 8003f0a:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003f0c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003f0e:	f000 fddd 	bl	8004acc <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003f12:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003f16:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003f18:	4629      	mov	r1, r5
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f000 fdd5 	bl	8004acc <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003f22:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003f26:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003f28:	2308      	movs	r3, #8
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	2182      	movs	r1, #130	; 0x82
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f000 fdcc 	bl	8004acc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003f34:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003f36:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003f3a:	f000 fe41 	bl	8004bc0 <USBD_static_malloc>
 8003f3e:	4606      	mov	r6, r0
 8003f40:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003f44:	b350      	cbz	r0, 8003f9c <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8003f46:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003f48:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f50:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8003f54:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8003f58:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f5c:	f1b8 0f00 	cmp.w	r8, #0
 8003f60:	d113      	bne.n	8003f8a <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f66:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f000 fe15 	bl	8004b9c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003f72:	4640      	mov	r0, r8
}
 8003f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003f78:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003f7a:	2340      	movs	r3, #64	; 0x40
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	2181      	movs	r1, #129	; 0x81
 8003f80:	f000 fda4 	bl	8004acc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003f84:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003f86:	2340      	movs	r3, #64	; 0x40
 8003f88:	e7c6      	b.n	8003f18 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003f8a:	2340      	movs	r3, #64	; 0x40
 8003f8c:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003f90:	4629      	mov	r1, r5
 8003f92:	4620      	mov	r0, r4
 8003f94:	f000 fe02 	bl	8004b9c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003f98:	4638      	mov	r0, r7
 8003f9a:	e7eb      	b.n	8003f74 <USBD_CDC_Init+0x7a>
    ret = 1U;
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	e7e9      	b.n	8003f74 <USBD_CDC_Init+0x7a>

08003fa0 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003fa0:	b119      	cbz	r1, 8003faa <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003fa2:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003faa:	2002      	movs	r0, #2
  }

  return ret;
}
 8003fac:	4770      	bx	lr

08003fae <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003fae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8003fb2:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003fb4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003fb8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003fbc:	4770      	bx	lr

08003fbe <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8003fbe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8003fc2:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003fc4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003fc8:	4770      	bx	lr

08003fca <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003fca:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003fce:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8003fd0:	b182      	cbz	r2, 8003ff4 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8003fd2:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	b974      	cbnz	r4, 8003ff8 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8003fda:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003fde:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003fe2:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003fe4:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003fe6:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f000 fdc8 	bl	8004b80 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8003ff0:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003ff2:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003ff4:	2002      	movs	r0, #2
 8003ff6:	e7fc      	b.n	8003ff2 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	e7fa      	b.n	8003ff2 <USBD_CDC_TransmitPacket+0x28>

08003ffc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ffc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004000:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004002:	b162      	cbz	r2, 800401e <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004004:	7c04      	ldrb	r4, [r0, #16]
 8004006:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800400a:	b934      	cbnz	r4, 800401a <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800400c:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004010:	2101      	movs	r1, #1
 8004012:	f000 fdc3 	bl	8004b9c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004016:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004018:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800401a:	2340      	movs	r3, #64	; 0x40
 800401c:	e7f8      	b.n	8004010 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 800401e:	2002      	movs	r0, #2
 8004020:	e7fa      	b.n	8004018 <USBD_CDC_ReceivePacket+0x1c>

08004022 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004022:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004024:	b180      	cbz	r0, 8004048 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004026:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800402a:	b113      	cbz	r3, 8004032 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800402c:	2300      	movs	r3, #0
 800402e:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004032:	b109      	cbz	r1, 8004038 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004034:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004038:	2301      	movs	r3, #1
  pdev->id = id;
 800403a:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800403c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004040:	f000 fcf4 	bl	8004a2c <USBD_LL_Init>

  return USBD_OK;
 8004044:	2000      	movs	r0, #0
}
 8004046:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004048:	2002      	movs	r0, #2
 800404a:	e7fc      	b.n	8004046 <USBD_Init+0x24>

0800404c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800404c:	b119      	cbz	r1, 8004056 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800404e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8004052:	2000      	movs	r0, #0
 8004054:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004056:	2002      	movs	r0, #2
  }

  return status;
}
 8004058:	4770      	bx	lr

0800405a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800405a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800405c:	f000 fd28 	bl	8004ab0 <USBD_LL_Start>

  return USBD_OK;
}
 8004060:	2000      	movs	r0, #0
 8004062:	bd08      	pop	{r3, pc}

08004064 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004064:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004066:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800406a:	b90b      	cbnz	r3, 8004070 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800406c:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800406e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4798      	blx	r3
 8004074:	2800      	cmp	r0, #0
 8004076:	d0fa      	beq.n	800406e <USBD_SetClassConfig+0xa>
 8004078:	e7f8      	b.n	800406c <USBD_SetClassConfig+0x8>

0800407a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800407a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800407c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4798      	blx	r3

  return USBD_OK;
}
 8004084:	2000      	movs	r0, #0
 8004086:	bd08      	pop	{r3, pc}

08004088 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004088:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800408a:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 800408e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004090:	4628      	mov	r0, r5
 8004092:	f000 fae1 	bl	8004658 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004096:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004098:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800409c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80040a0:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80040a4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80040a8:	f001 031f 	and.w	r3, r1, #31
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d00e      	beq.n	80040ce <USBD_LL_SetupStage+0x46>
 80040b0:	d307      	bcc.n	80040c2 <USBD_LL_SetupStage+0x3a>
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d010      	beq.n	80040d8 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80040b6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80040ba:	4620      	mov	r0, r4
 80040bc:	f000 fd24 	bl	8004b08 <USBD_LL_StallEP>
      break;
 80040c0:	e003      	b.n	80040ca <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80040c2:	4629      	mov	r1, r5
 80040c4:	4620      	mov	r0, r4
 80040c6:	f000 f8f5 	bl	80042b4 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80040ca:	2000      	movs	r0, #0
 80040cc:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80040ce:	4629      	mov	r1, r5
 80040d0:	4620      	mov	r0, r4
 80040d2:	f000 fa13 	bl	80044fc <USBD_StdItfReq>
      break;
 80040d6:	e7f8      	b.n	80040ca <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80040d8:	4629      	mov	r1, r5
 80040da:	4620      	mov	r0, r4
 80040dc:	f000 fa33 	bl	8004546 <USBD_StdEPReq>
      break;
 80040e0:	e7f3      	b.n	80040ca <USBD_LL_SetupStage+0x42>

080040e2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80040e2:	b570      	push	{r4, r5, r6, lr}
 80040e4:	4605      	mov	r5, r0
 80040e6:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80040e8:	bb49      	cbnz	r1, 800413e <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80040ea:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d11e      	bne.n	8004130 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 80040f2:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 80040f6:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d90b      	bls.n	8004116 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 80040fe:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8004100:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8004102:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004106:	bf8c      	ite	hi
 8004108:	b29a      	uxthhi	r2, r3
 800410a:	b292      	uxthls	r2, r2
 800410c:	4631      	mov	r1, r6
 800410e:	f000 fb02 	bl	8004716 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004112:	2000      	movs	r0, #0
}
 8004114:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004116:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	b123      	cbz	r3, 8004128 <USBD_LL_DataOutStage+0x46>
 800411e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004122:	2a03      	cmp	r2, #3
 8004124:	d100      	bne.n	8004128 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8004126:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004128:	4628      	mov	r0, r5
 800412a:	f000 fafc 	bl	8004726 <USBD_CtlSendStatus>
 800412e:	e7f0      	b.n	8004112 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004130:	2b05      	cmp	r3, #5
 8004132:	d1ee      	bne.n	8004112 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004134:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004138:	f000 fce6 	bl	8004b08 <USBD_LL_StallEP>
 800413c:	e7e9      	b.n	8004112 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 800413e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	b12b      	cbz	r3, 8004152 <USBD_LL_DataOutStage+0x70>
 8004146:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800414a:	2a03      	cmp	r2, #3
 800414c:	d101      	bne.n	8004152 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800414e:	4798      	blx	r3
 8004150:	e7df      	b.n	8004112 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8004152:	2002      	movs	r0, #2
 8004154:	e7de      	b.n	8004114 <USBD_LL_DataOutStage+0x32>

08004156 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004156:	b570      	push	{r4, r5, r6, lr}
 8004158:	4613      	mov	r3, r2
 800415a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800415c:	460e      	mov	r6, r1
 800415e:	2900      	cmp	r1, #0
 8004160:	d147      	bne.n	80041f2 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004162:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004166:	2a02      	cmp	r2, #2
 8004168:	d13c      	bne.n	80041e4 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800416a:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 800416e:	4295      	cmp	r5, r2
 8004170:	d913      	bls.n	800419a <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8004172:	1aaa      	subs	r2, r5, r2
 8004174:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004176:	4619      	mov	r1, r3
 8004178:	b292      	uxth	r2, r2
 800417a:	f000 fab5 	bl	80046e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800417e:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004180:	461a      	mov	r2, r3
 8004182:	4619      	mov	r1, r3
 8004184:	4620      	mov	r0, r4
 8004186:	f000 fd09 	bl	8004b9c <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800418a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800418e:	2000      	movs	r0, #0
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004194:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8004198:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800419a:	69c3      	ldr	r3, [r0, #28]
 800419c:	fbb3 f5f2 	udiv	r5, r3, r2
 80041a0:	fb02 3515 	mls	r5, r2, r5, r3
 80041a4:	b965      	cbnz	r5, 80041c0 <USBD_LL_DataInStage+0x6a>
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d80a      	bhi.n	80041c0 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80041aa:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d206      	bcs.n	80041c0 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80041b2:	462a      	mov	r2, r5
 80041b4:	f000 fa98 	bl	80046e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80041b8:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80041bc:	462b      	mov	r3, r5
 80041be:	e7df      	b.n	8004180 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80041c0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	b12b      	cbz	r3, 80041d4 <USBD_LL_DataInStage+0x7e>
 80041c8:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80041cc:	2a03      	cmp	r2, #3
 80041ce:	d101      	bne.n	80041d4 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80041d0:	4620      	mov	r0, r4
 80041d2:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80041d4:	2180      	movs	r1, #128	; 0x80
 80041d6:	4620      	mov	r0, r4
 80041d8:	f000 fc96 	bl	8004b08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80041dc:	4620      	mov	r0, r4
 80041de:	f000 faad 	bl	800473c <USBD_CtlReceiveStatus>
 80041e2:	e7d2      	b.n	800418a <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80041e4:	f032 0304 	bics.w	r3, r2, #4
 80041e8:	d1cf      	bne.n	800418a <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80041ea:	2180      	movs	r1, #128	; 0x80
 80041ec:	f000 fc8c 	bl	8004b08 <USBD_LL_StallEP>
 80041f0:	e7cb      	b.n	800418a <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80041f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	b133      	cbz	r3, 8004208 <USBD_LL_DataInStage+0xb2>
 80041fa:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80041fe:	2a03      	cmp	r2, #3
 8004200:	d102      	bne.n	8004208 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8004202:	4798      	blx	r3
  return USBD_OK;
 8004204:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004206:	e7c7      	b.n	8004198 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8004208:	2002      	movs	r0, #2
 800420a:	e7c5      	b.n	8004198 <USBD_LL_DataInStage+0x42>

0800420c <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800420c:	2200      	movs	r2, #0
{
 800420e:	b570      	push	{r4, r5, r6, lr}
 8004210:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004212:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004214:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004216:	4611      	mov	r1, r2
 8004218:	2340      	movs	r3, #64	; 0x40
 800421a:	f000 fc57 	bl	8004acc <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800421e:	4633      	mov	r3, r6
 8004220:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004222:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004226:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800422a:	2200      	movs	r2, #0
 800422c:	4620      	mov	r0, r4
 800422e:	f000 fc4d 	bl	8004acc <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8004232:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004234:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004238:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800423a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800423c:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004240:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004244:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004246:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800424a:	b123      	cbz	r3, 8004256 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800424c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004250:	4620      	mov	r0, r4
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004256:	2000      	movs	r0, #0
 8004258:	bd70      	pop	{r4, r5, r6, pc}

0800425a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800425a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800425c:	2000      	movs	r0, #0
 800425e:	4770      	bx	lr

08004260 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004260:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004264:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004268:	2304      	movs	r3, #4
 800426a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800426e:	2000      	movs	r0, #0
 8004270:	4770      	bx	lr

08004272 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004272:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004276:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004278:	bf04      	itt	eq
 800427a:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800427e:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004282:	2000      	movs	r0, #0
 8004284:	4770      	bx	lr

08004286 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004286:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004288:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800428c:	2a03      	cmp	r2, #3
 800428e:	d104      	bne.n	800429a <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8004290:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	b103      	cbz	r3, 800429a <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004298:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800429a:	2000      	movs	r0, #0
 800429c:	bd08      	pop	{r3, pc}

0800429e <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800429e:	b510      	push	{r4, lr}
 80042a0:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80042a2:	2180      	movs	r1, #128	; 0x80
 80042a4:	f000 fc30 	bl	8004b08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80042a8:	4620      	mov	r0, r4
}
 80042aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80042ae:	2100      	movs	r1, #0
 80042b0:	f000 bc2a 	b.w	8004b08 <USBD_LL_StallEP>

080042b4 <USBD_StdDevReq>:
{
 80042b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042b6:	780b      	ldrb	r3, [r1, #0]
{
 80042b8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80042be:	2b20      	cmp	r3, #32
{
 80042c0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042c2:	d012      	beq.n	80042ea <USBD_StdDevReq+0x36>
 80042c4:	2b40      	cmp	r3, #64	; 0x40
 80042c6:	d010      	beq.n	80042ea <USBD_StdDevReq+0x36>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d15b      	bne.n	8004384 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 80042cc:	784b      	ldrb	r3, [r1, #1]
 80042ce:	2b09      	cmp	r3, #9
 80042d0:	d858      	bhi.n	8004384 <USBD_StdDevReq+0xd0>
 80042d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80042d6:	00e9      	.short	0x00e9
 80042d8:	00570105 	.word	0x00570105
 80042dc:	005700fe 	.word	0x005700fe
 80042e0:	00130084 	.word	0x00130084
 80042e4:	00d20057 	.word	0x00d20057
 80042e8:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 80042ea:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80042ee:	4629      	mov	r1, r5
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	4620      	mov	r0, r4
 80042f4:	4798      	blx	r3
}
 80042f6:	2000      	movs	r0, #0
 80042f8:	b003      	add	sp, #12
 80042fa:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004302:	884b      	ldrh	r3, [r1, #2]
 8004304:	0a1a      	lsrs	r2, r3, #8
 8004306:	3a01      	subs	r2, #1
 8004308:	2a06      	cmp	r2, #6
 800430a:	d83b      	bhi.n	8004384 <USBD_StdDevReq+0xd0>
 800430c:	e8df f002 	tbb	[pc, r2]
 8004310:	3a2d2004 	.word	0x3a2d2004
 8004314:	523a      	.short	0x523a
 8004316:	5c          	.byte	0x5c
 8004317:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004318:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800431c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800431e:	f10d 0106 	add.w	r1, sp, #6
 8004322:	7c20      	ldrb	r0, [r4, #16]
 8004324:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004326:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800432a:	b152      	cbz	r2, 8004342 <USBD_StdDevReq+0x8e>
 800432c:	88eb      	ldrh	r3, [r5, #6]
 800432e:	b143      	cbz	r3, 8004342 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8004330:	429a      	cmp	r2, r3
 8004332:	bf28      	it	cs
 8004334:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004336:	4601      	mov	r1, r0
 8004338:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800433a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800433e:	f000 f9c6 	bl	80046ce <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004342:	88eb      	ldrh	r3, [r5, #6]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1d6      	bne.n	80042f6 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8004348:	4620      	mov	r0, r4
 800434a:	f000 f9ec 	bl	8004726 <USBD_CtlSendStatus>
 800434e:	e7d2      	b.n	80042f6 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004350:	7c02      	ldrb	r2, [r0, #16]
 8004352:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004356:	b932      	cbnz	r2, 8004366 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800435a:	f10d 0006 	add.w	r0, sp, #6
 800435e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004360:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004362:	7043      	strb	r3, [r0, #1]
 8004364:	e7df      	b.n	8004326 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	e7f7      	b.n	800435a <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b05      	cmp	r3, #5
 800436e:	d809      	bhi.n	8004384 <USBD_StdDevReq+0xd0>
 8004370:	e8df f003 	tbb	[pc, r3]
 8004374:	14100c03 	.word	0x14100c03
 8004378:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800437a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800437e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1cc      	bne.n	800431e <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8004384:	4620      	mov	r0, r4
 8004386:	f7ff ff8a 	bl	800429e <USBD_CtlError.constprop.1>
 800438a:	e7b4      	b.n	80042f6 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800438c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	e7f5      	b.n	8004380 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004394:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	e7f1      	b.n	8004380 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800439c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	e7ed      	b.n	8004380 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80043a4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	e7e9      	b.n	8004380 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80043ac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	e7e5      	b.n	8004380 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043b4:	7c03      	ldrb	r3, [r0, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e4      	bne.n	8004384 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80043ba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80043be:	f10d 0006 	add.w	r0, sp, #6
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	4798      	blx	r3
 80043c6:	e7ae      	b.n	8004326 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043c8:	7c03      	ldrb	r3, [r0, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1da      	bne.n	8004384 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80043ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80043d2:	f10d 0006 	add.w	r0, sp, #6
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80043da:	2307      	movs	r3, #7
 80043dc:	e7c1      	b.n	8004362 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80043de:	888b      	ldrh	r3, [r1, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1cf      	bne.n	8004384 <USBD_StdDevReq+0xd0>
 80043e4:	88cb      	ldrh	r3, [r1, #6]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1cc      	bne.n	8004384 <USBD_StdDevReq+0xd0>
 80043ea:	884d      	ldrh	r5, [r1, #2]
 80043ec:	2d7f      	cmp	r5, #127	; 0x7f
 80043ee:	d8c9      	bhi.n	8004384 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d0c5      	beq.n	8004384 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80043f8:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80043fa:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80043fe:	f000 fbb1 	bl	8004b64 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004402:	4620      	mov	r0, r4
 8004404:	f000 f98f 	bl	8004726 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004408:	b11d      	cbz	r5, 8004412 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800440a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800440c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004410:	e771      	b.n	80042f6 <USBD_StdDevReq+0x42>
 8004412:	2301      	movs	r3, #1
 8004414:	e7fa      	b.n	800440c <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8004416:	7889      	ldrb	r1, [r1, #2]
 8004418:	4d37      	ldr	r5, [pc, #220]	; (80044f8 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800441a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800441c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800441e:	d8b1      	bhi.n	8004384 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8004420:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004424:	2b02      	cmp	r3, #2
 8004426:	d008      	beq.n	800443a <USBD_StdDevReq+0x186>
 8004428:	2b03      	cmp	r3, #3
 800442a:	d014      	beq.n	8004456 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 800442c:	f7ff ff37 	bl	800429e <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004430:	7829      	ldrb	r1, [r5, #0]
 8004432:	4620      	mov	r0, r4
 8004434:	f7ff fe21 	bl	800407a <USBD_ClrClassConfig>
 8004438:	e75d      	b.n	80042f6 <USBD_StdDevReq+0x42>
        if (cfgidx)
 800443a:	2900      	cmp	r1, #0
 800443c:	d084      	beq.n	8004348 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 800443e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004440:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8004442:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004444:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff fe0b 	bl	8004064 <USBD_SetClassConfig>
 800444e:	2802      	cmp	r0, #2
 8004450:	f47f af7a 	bne.w	8004348 <USBD_StdDevReq+0x94>
 8004454:	e796      	b.n	8004384 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8004456:	b931      	cbnz	r1, 8004466 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004458:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800445a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800445c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8004460:	f7ff fe0b 	bl	800407a <USBD_ClrClassConfig>
 8004464:	e770      	b.n	8004348 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8004466:	6841      	ldr	r1, [r0, #4]
 8004468:	2901      	cmp	r1, #1
 800446a:	f43f af6d 	beq.w	8004348 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800446e:	b2c9      	uxtb	r1, r1
 8004470:	f7ff fe03 	bl	800407a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004474:	7829      	ldrb	r1, [r5, #0]
 8004476:	6061      	str	r1, [r4, #4]
 8004478:	e7e6      	b.n	8004448 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800447a:	88ca      	ldrh	r2, [r1, #6]
 800447c:	2a01      	cmp	r2, #1
 800447e:	d181      	bne.n	8004384 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8004480:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004484:	2b00      	cmp	r3, #0
 8004486:	f43f af7d 	beq.w	8004384 <USBD_StdDevReq+0xd0>
 800448a:	2b02      	cmp	r3, #2
 800448c:	d904      	bls.n	8004498 <USBD_StdDevReq+0x1e4>
 800448e:	2b03      	cmp	r3, #3
 8004490:	f47f af78 	bne.w	8004384 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004494:	1d01      	adds	r1, r0, #4
 8004496:	e003      	b.n	80044a0 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8004498:	4601      	mov	r1, r0
 800449a:	2300      	movs	r3, #0
 800449c:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80044a0:	4620      	mov	r0, r4
 80044a2:	f000 f914 	bl	80046ce <USBD_CtlSendData>
 80044a6:	e726      	b.n	80042f6 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 80044a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044ac:	3b01      	subs	r3, #1
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	f63f af68 	bhi.w	8004384 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 80044b4:	88cb      	ldrh	r3, [r1, #6]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	f47f af64 	bne.w	8004384 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80044bc:	2301      	movs	r3, #1
 80044be:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80044c0:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80044c4:	b10b      	cbz	r3, 80044ca <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80044c6:	2303      	movs	r3, #3
 80044c8:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80044ca:	2202      	movs	r2, #2
 80044cc:	f104 010c 	add.w	r1, r4, #12
 80044d0:	e7e6      	b.n	80044a0 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80044d2:	884b      	ldrh	r3, [r1, #2]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	f47f af0e 	bne.w	80042f6 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80044da:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80044de:	e733      	b.n	8004348 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 80044e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044e4:	3b01      	subs	r3, #1
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	f63f af4c 	bhi.w	8004384 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80044ec:	884b      	ldrh	r3, [r1, #2]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	f47f af01 	bne.w	80042f6 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e7f0      	b.n	80044da <USBD_StdDevReq+0x226>
 80044f8:	20000384 	.word	0x20000384

080044fc <USBD_StdItfReq>:
{
 80044fc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044fe:	780b      	ldrb	r3, [r1, #0]
{
 8004500:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004506:	2b20      	cmp	r3, #32
{
 8004508:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800450a:	d002      	beq.n	8004512 <USBD_StdItfReq+0x16>
 800450c:	2b40      	cmp	r3, #64	; 0x40
 800450e:	d000      	beq.n	8004512 <USBD_StdItfReq+0x16>
 8004510:	b9ab      	cbnz	r3, 800453e <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8004512:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004516:	3b01      	subs	r3, #1
 8004518:	2b02      	cmp	r3, #2
 800451a:	d810      	bhi.n	800453e <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800451c:	792b      	ldrb	r3, [r5, #4]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d80d      	bhi.n	800453e <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004522:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004526:	4629      	mov	r1, r5
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	4620      	mov	r0, r4
 800452c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800452e:	88eb      	ldrh	r3, [r5, #6]
 8004530:	b91b      	cbnz	r3, 800453a <USBD_StdItfReq+0x3e>
 8004532:	b910      	cbnz	r0, 800453a <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8004534:	4620      	mov	r0, r4
 8004536:	f000 f8f6 	bl	8004726 <USBD_CtlSendStatus>
}
 800453a:	2000      	movs	r0, #0
 800453c:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800453e:	4620      	mov	r0, r4
 8004540:	f7ff fead 	bl	800429e <USBD_CtlError.constprop.1>
          break;
 8004544:	e7f9      	b.n	800453a <USBD_StdItfReq+0x3e>

08004546 <USBD_StdEPReq>:
{
 8004546:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004548:	780a      	ldrb	r2, [r1, #0]
{
 800454a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800454c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004550:	2a20      	cmp	r2, #32
{
 8004552:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004554:	d014      	beq.n	8004580 <USBD_StdEPReq+0x3a>
 8004556:	2a40      	cmp	r2, #64	; 0x40
 8004558:	d012      	beq.n	8004580 <USBD_StdEPReq+0x3a>
 800455a:	b96a      	cbnz	r2, 8004578 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 800455c:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800455e:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8004560:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8004562:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8004564:	d020      	beq.n	80045a8 <USBD_StdEPReq+0x62>
 8004566:	d336      	bcc.n	80045d6 <USBD_StdEPReq+0x90>
 8004568:	2a03      	cmp	r2, #3
 800456a:	d105      	bne.n	8004578 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800456c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004570:	2a02      	cmp	r2, #2
 8004572:	d027      	beq.n	80045c4 <USBD_StdEPReq+0x7e>
 8004574:	2a03      	cmp	r2, #3
 8004576:	d00b      	beq.n	8004590 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 8004578:	4620      	mov	r0, r4
 800457a:	f7ff fe90 	bl	800429e <USBD_CtlError.constprop.1>
              break;
 800457e:	e005      	b.n	800458c <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8004580:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8004584:	4619      	mov	r1, r3
 8004586:	6892      	ldr	r2, [r2, #8]
 8004588:	4620      	mov	r0, r4
 800458a:	4790      	blx	r2
}
 800458c:	2000      	movs	r0, #0
 800458e:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004590:	885a      	ldrh	r2, [r3, #2]
 8004592:	b92a      	cbnz	r2, 80045a0 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8004594:	064a      	lsls	r2, r1, #25
 8004596:	d003      	beq.n	80045a0 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004598:	88db      	ldrh	r3, [r3, #6]
 800459a:	b90b      	cbnz	r3, 80045a0 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 800459c:	f000 fab4 	bl	8004b08 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80045a0:	4620      	mov	r0, r4
 80045a2:	f000 f8c0 	bl	8004726 <USBD_CtlSendStatus>
              break;
 80045a6:	e7f1      	b.n	800458c <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80045a8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80045ac:	2a02      	cmp	r2, #2
 80045ae:	d009      	beq.n	80045c4 <USBD_StdEPReq+0x7e>
 80045b0:	2a03      	cmp	r2, #3
 80045b2:	d1e1      	bne.n	8004578 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80045b4:	885b      	ldrh	r3, [r3, #2]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e8      	bne.n	800458c <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 80045ba:	064d      	lsls	r5, r1, #25
 80045bc:	d0f0      	beq.n	80045a0 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80045be:	f000 fab1 	bl	8004b24 <USBD_LL_ClearStallEP>
 80045c2:	e7ed      	b.n	80045a0 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80045c4:	064b      	lsls	r3, r1, #25
 80045c6:	d0d7      	beq.n	8004578 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80045c8:	f000 fa9e 	bl	8004b08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80045cc:	2180      	movs	r1, #128	; 0x80
 80045ce:	4620      	mov	r0, r4
 80045d0:	f000 fa9a 	bl	8004b08 <USBD_LL_StallEP>
 80045d4:	e7da      	b.n	800458c <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80045d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d018      	beq.n	8004610 <USBD_StdEPReq+0xca>
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d1ca      	bne.n	8004578 <USBD_StdEPReq+0x32>
 80045e2:	2314      	movs	r3, #20
 80045e4:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80045e8:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80045ec:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80045f0:	d01f      	beq.n	8004632 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80045f2:	6992      	ldr	r2, [r2, #24]
 80045f4:	2a00      	cmp	r2, #0
 80045f6:	d0bf      	beq.n	8004578 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80045f8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80045fc:	fb05 3503 	mla	r5, r5, r3, r3
 8004600:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004602:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8004606:	d11f      	bne.n	8004648 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8004608:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800460a:	2202      	movs	r2, #2
 800460c:	4629      	mov	r1, r5
 800460e:	e00c      	b.n	800462a <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004610:	064a      	lsls	r2, r1, #25
 8004612:	d1b1      	bne.n	8004578 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004614:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8004616:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800461a:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800461e:	bf4c      	ite	mi
 8004620:	f100 0114 	addmi.w	r1, r0, #20
 8004624:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8004628:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800462a:	4620      	mov	r0, r4
 800462c:	f000 f84f 	bl	80046ce <USBD_CtlSendData>
              break;
 8004630:	e7ac      	b.n	800458c <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004632:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8004636:	2a00      	cmp	r2, #0
 8004638:	d09e      	beq.n	8004578 <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800463a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800463e:	fb03 0505 	mla	r5, r3, r5, r0
 8004642:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004646:	e7dc      	b.n	8004602 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004648:	4620      	mov	r0, r4
 800464a:	f000 fa79 	bl	8004b40 <USBD_LL_IsStallEP>
 800464e:	b108      	cbz	r0, 8004654 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8004650:	2301      	movs	r3, #1
 8004652:	e7d9      	b.n	8004608 <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8004654:	6028      	str	r0, [r5, #0]
 8004656:	e7d8      	b.n	800460a <USBD_StdEPReq+0xc4>

08004658 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8004658:	780b      	ldrb	r3, [r1, #0]
 800465a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800465c:	784b      	ldrb	r3, [r1, #1]
 800465e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004660:	78ca      	ldrb	r2, [r1, #3]
 8004662:	788b      	ldrb	r3, [r1, #2]
 8004664:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004668:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800466a:	794a      	ldrb	r2, [r1, #5]
 800466c:	790b      	ldrb	r3, [r1, #4]
 800466e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004672:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004674:	79ca      	ldrb	r2, [r1, #7]
 8004676:	798b      	ldrb	r3, [r1, #6]
 8004678:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800467c:	80c3      	strh	r3, [r0, #6]
}
 800467e:	4770      	bx	lr

08004680 <USBD_CtlError>:
{
 8004680:	b510      	push	{r4, lr}
 8004682:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004684:	2180      	movs	r1, #128	; 0x80
 8004686:	f000 fa3f 	bl	8004b08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800468a:	4620      	mov	r0, r4
}
 800468c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004690:	2100      	movs	r1, #0
 8004692:	f000 ba39 	b.w	8004b08 <USBD_LL_StallEP>

08004696 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004696:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8004698:	b188      	cbz	r0, 80046be <USBD_GetString+0x28>
 800469a:	4605      	mov	r5, r0
 800469c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800469e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2c00      	cmp	r4, #0
 80046a6:	d1f9      	bne.n	800469c <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80046a8:	3301      	adds	r3, #1
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80046ae:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80046b0:	2303      	movs	r3, #3
 80046b2:	704b      	strb	r3, [r1, #1]
 80046b4:	2302      	movs	r3, #2
 80046b6:	3801      	subs	r0, #1
    while (*desc != '\0')
 80046b8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80046bc:	b905      	cbnz	r5, 80046c0 <USBD_GetString+0x2a>
}
 80046be:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	54cd      	strb	r5, [r1, r3]
 80046c4:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80046c6:	3302      	adds	r3, #2
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	548c      	strb	r4, [r1, r2]
 80046cc:	e7f4      	b.n	80046b8 <USBD_GetString+0x22>

080046ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80046ce:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80046d0:	2202      	movs	r2, #2
{
 80046d2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80046d4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80046d8:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80046dc:	460a      	mov	r2, r1
 80046de:	2100      	movs	r1, #0
 80046e0:	f000 fa4e 	bl	8004b80 <USBD_LL_Transmit>

  return USBD_OK;
}
 80046e4:	2000      	movs	r0, #0
 80046e6:	bd10      	pop	{r4, pc}

080046e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80046e8:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80046ea:	4613      	mov	r3, r2
 80046ec:	460a      	mov	r2, r1
 80046ee:	2100      	movs	r1, #0
 80046f0:	f000 fa46 	bl	8004b80 <USBD_LL_Transmit>

  return USBD_OK;
}
 80046f4:	2000      	movs	r0, #0
 80046f6:	bd08      	pop	{r3, pc}

080046f8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80046f8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80046fa:	2203      	movs	r2, #3
{
 80046fc:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80046fe:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004702:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004706:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8004708:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800470c:	2100      	movs	r1, #0
 800470e:	f000 fa45 	bl	8004b9c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004712:	2000      	movs	r0, #0
 8004714:	bd10      	pop	{r4, pc}

08004716 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004716:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004718:	4613      	mov	r3, r2
 800471a:	460a      	mov	r2, r1
 800471c:	2100      	movs	r1, #0
 800471e:	f000 fa3d 	bl	8004b9c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004722:	2000      	movs	r0, #0
 8004724:	bd08      	pop	{r3, pc}

08004726 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004726:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004728:	2304      	movs	r3, #4
 800472a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800472e:	2300      	movs	r3, #0
 8004730:	461a      	mov	r2, r3
 8004732:	4619      	mov	r1, r3
 8004734:	f000 fa24 	bl	8004b80 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004738:	2000      	movs	r0, #0
 800473a:	bd08      	pop	{r3, pc}

0800473c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800473c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800473e:	2305      	movs	r3, #5
 8004740:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004744:	2300      	movs	r3, #0
 8004746:	461a      	mov	r2, r3
 8004748:	4619      	mov	r1, r3
 800474a:	f000 fa27 	bl	8004b9c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800474e:	2000      	movs	r0, #0
 8004750:	bd08      	pop	{r3, pc}
	...

08004754 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004754:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004756:	2200      	movs	r2, #0
 8004758:	490e      	ldr	r1, [pc, #56]	; (8004794 <MX_USB_DEVICE_Init+0x40>)
 800475a:	480f      	ldr	r0, [pc, #60]	; (8004798 <MX_USB_DEVICE_Init+0x44>)
 800475c:	f7ff fc61 	bl	8004022 <USBD_Init>
 8004760:	b108      	cbz	r0, 8004766 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8004762:	f7fd f929 	bl	80019b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004766:	490d      	ldr	r1, [pc, #52]	; (800479c <MX_USB_DEVICE_Init+0x48>)
 8004768:	480b      	ldr	r0, [pc, #44]	; (8004798 <MX_USB_DEVICE_Init+0x44>)
 800476a:	f7ff fc6f 	bl	800404c <USBD_RegisterClass>
 800476e:	b108      	cbz	r0, 8004774 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8004770:	f7fd f922 	bl	80019b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004774:	490a      	ldr	r1, [pc, #40]	; (80047a0 <MX_USB_DEVICE_Init+0x4c>)
 8004776:	4808      	ldr	r0, [pc, #32]	; (8004798 <MX_USB_DEVICE_Init+0x44>)
 8004778:	f7ff fc12 	bl	8003fa0 <USBD_CDC_RegisterInterface>
 800477c:	b108      	cbz	r0, 8004782 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800477e:	f7fd f91b 	bl	80019b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004782:	4805      	ldr	r0, [pc, #20]	; (8004798 <MX_USB_DEVICE_Init+0x44>)
 8004784:	f7ff fc69 	bl	800405a <USBD_Start>
 8004788:	b118      	cbz	r0, 8004792 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800478a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800478e:	f7fd b913 	b.w	80019b8 <Error_Handler>
}
 8004792:	bd08      	pop	{r3, pc}
 8004794:	2000012c 	.word	0x2000012c
 8004798:	20000710 	.word	0x20000710
 800479c:	2000000c 	.word	0x2000000c
 80047a0:	2000011c 	.word	0x2000011c

080047a4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80047a4:	2000      	movs	r0, #0
 80047a6:	4770      	bx	lr

080047a8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80047a8:	2000      	movs	r0, #0
 80047aa:	4770      	bx	lr

080047ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN 6 */
  uint32_t len=*Len;
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 80047ae:	4e1a      	ldr	r6, [pc, #104]	; (8004818 <CDC_Receive_FS+0x6c>)
{
 80047b0:	4604      	mov	r4, r0
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 80047b2:	f896 329c 	ldrb.w	r3, [r6, #668]	; 0x29c
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d12c      	bne.n	8004814 <CDC_Receive_FS+0x68>
  {
     return USBD_FAIL;
  }

  if (((Buf == NULL) || (Len == NULL)) || (*Len <= 0))
 80047ba:	b358      	cbz	r0, 8004814 <CDC_Receive_FS+0x68>
  uint32_t len=*Len;
 80047bc:	680d      	ldr	r5, [r1, #0]
  if (((Buf == NULL) || (Len == NULL)) || (*Len <= 0))
 80047be:	b34d      	cbz	r5, 8004814 <CDC_Receive_FS+0x68>

  /* Get data */
  uint8_t result = USBD_OK;
  do
  {
      result = USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80047c0:	4621      	mov	r1, r4
 80047c2:	4630      	mov	r0, r6
 80047c4:	f7ff fbfb 	bl	8003fbe <USBD_CDC_SetRxBuffer>
  }
  while(result != USBD_OK);
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d1f9      	bne.n	80047c0 <CDC_Receive_FS+0x14>

  do
  {
     result = USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80047cc:	4e12      	ldr	r6, [pc, #72]	; (8004818 <CDC_Receive_FS+0x6c>)
 80047ce:	4630      	mov	r0, r6
 80047d0:	f7ff fc14 	bl	8003ffc <USBD_CDC_ReceivePacket>
  }
  while(result != USBD_OK);
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d1fa      	bne.n	80047ce <CDC_Receive_FS+0x22>
 80047d8:	4621      	mov	r1, r4

     if (comm_d_usb.rx_index >= RX_BUFF_LAST)
         comm_d_usb.rx_index = 0;

     if (*Buf == '\n')
         comm_d_usb.available = 1;
 80047da:	2601      	movs	r6, #1
     comm_d_usb.rx_buffer[comm_d_usb.rx_index++] = *Buf;
 80047dc:	4b0f      	ldr	r3, [pc, #60]	; (800481c <CDC_Receive_FS+0x70>)
 80047de:	4425      	add	r5, r4
  while (len--)
 80047e0:	42a9      	cmp	r1, r5
 80047e2:	d101      	bne.n	80047e8 <CDC_Receive_FS+0x3c>
     Buf++;
  }

  return USBD_OK;
 80047e4:	2000      	movs	r0, #0
  /* USER CODE END 6 */
}
 80047e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e8:	460f      	mov	r7, r1
     comm_d_usb.rx_buffer[comm_d_usb.rx_index++] = *Buf;
 80047ea:	f893 4065 	ldrb.w	r4, [r3, #101]	; 0x65
 80047ee:	3101      	adds	r1, #1
 80047f0:	1c62      	adds	r2, r4, #1
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80047f8:	f811 cc01 	ldrb.w	ip, [r1, #-1]
     if (comm_d_usb.rx_index >= RX_BUFF_LAST)
 80047fc:	2a62      	cmp	r2, #98	; 0x62
         comm_d_usb.rx_index = 0;
 80047fe:	bf88      	it	hi
 8004800:	f883 0065 	strbhi.w	r0, [r3, #101]	; 0x65
     comm_d_usb.rx_buffer[comm_d_usb.rx_index++] = *Buf;
 8004804:	f803 c004 	strb.w	ip, [r3, r4]
     if (*Buf == '\n')
 8004808:	783a      	ldrb	r2, [r7, #0]
 800480a:	2a0a      	cmp	r2, #10
         comm_d_usb.available = 1;
 800480c:	bf08      	it	eq
 800480e:	f883 6064 	strbeq.w	r6, [r3, #100]	; 0x64
 8004812:	e7e5      	b.n	80047e0 <CDC_Receive_FS+0x34>
     return USBD_FAIL;
 8004814:	2002      	movs	r0, #2
 8004816:	e7e6      	b.n	80047e6 <CDC_Receive_FS+0x3a>
 8004818:	20000710 	.word	0x20000710
 800481c:	200006a6 	.word	0x200006a6

08004820 <CDC_Init_FS>:
{
 8004820:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004822:	4c06      	ldr	r4, [pc, #24]	; (800483c <CDC_Init_FS+0x1c>)
 8004824:	2200      	movs	r2, #0
 8004826:	4906      	ldr	r1, [pc, #24]	; (8004840 <CDC_Init_FS+0x20>)
 8004828:	4620      	mov	r0, r4
 800482a:	f7ff fbc0 	bl	8003fae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800482e:	4905      	ldr	r1, [pc, #20]	; (8004844 <CDC_Init_FS+0x24>)
 8004830:	4620      	mov	r0, r4
 8004832:	f7ff fbc4 	bl	8003fbe <USBD_CDC_SetRxBuffer>
}
 8004836:	2000      	movs	r0, #0
 8004838:	bd10      	pop	{r4, pc}
 800483a:	bf00      	nop
 800483c:	20000710 	.word	0x20000710
 8004840:	20000dbc 	.word	0x20000dbc
 8004844:	200009d4 	.word	0x200009d4

08004848 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004848:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800484a:	4c09      	ldr	r4, [pc, #36]	; (8004870 <CDC_Transmit_FS+0x28>)
{
 800484c:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800484e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8004852:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004856:	b943      	cbnz	r3, 800486a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004858:	4601      	mov	r1, r0
 800485a:	4620      	mov	r0, r4
 800485c:	f7ff fba7 	bl	8003fae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004860:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8004862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004866:	f7ff bbb0 	b.w	8003fca <USBD_CDC_TransmitPacket>
}
 800486a:	2001      	movs	r0, #1
 800486c:	bd10      	pop	{r4, pc}
 800486e:	bf00      	nop
 8004870:	20000710 	.word	0x20000710

08004874 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004874:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004876:	4801      	ldr	r0, [pc, #4]	; (800487c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004878:	800b      	strh	r3, [r1, #0]
}
 800487a:	4770      	bx	lr
 800487c:	20000148 	.word	0x20000148

08004880 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004880:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004882:	4801      	ldr	r0, [pc, #4]	; (8004888 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004884:	800b      	strh	r3, [r1, #0]
}
 8004886:	4770      	bx	lr
 8004888:	2000015c 	.word	0x2000015c

0800488c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800488c:	2300      	movs	r3, #0
 800488e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004890:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8004892:	0f05      	lsrs	r5, r0, #28
 8004894:	b2ec      	uxtb	r4, r5
 8004896:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8004898:	bf94      	ite	ls
 800489a:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800489c:	3437      	addhi	r4, #55	; 0x37
 800489e:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80048a2:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80048a6:	3301      	adds	r3, #1
 80048a8:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 80048aa:	b2dc      	uxtb	r4, r3
 80048ac:	42a2      	cmp	r2, r4
    value = value << 4;
 80048ae:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80048b2:	d8ee      	bhi.n	8004892 <IntToUnicode+0x6>
  }
}
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080048b8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80048b8:	231a      	movs	r3, #26
{
 80048ba:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80048bc:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80048be:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <USBD_FS_SerialStrDescriptor+0x2c>)
 80048c0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80048c2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80048c4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80048c6:	18c0      	adds	r0, r0, r3
 80048c8:	d00a      	beq.n	80048e0 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80048cc:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80048ce:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80048d0:	4906      	ldr	r1, [pc, #24]	; (80048ec <USBD_FS_SerialStrDescriptor+0x34>)
 80048d2:	f7ff ffdb 	bl	800488c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80048d6:	2204      	movs	r2, #4
 80048d8:	4905      	ldr	r1, [pc, #20]	; (80048f0 <USBD_FS_SerialStrDescriptor+0x38>)
 80048da:	4620      	mov	r0, r4
 80048dc:	f7ff ffd6 	bl	800488c <IntToUnicode>
}
 80048e0:	4804      	ldr	r0, [pc, #16]	; (80048f4 <USBD_FS_SerialStrDescriptor+0x3c>)
 80048e2:	bd10      	pop	{r4, pc}
 80048e4:	1ffff7e8 	.word	0x1ffff7e8
 80048e8:	1ffff7ec 	.word	0x1ffff7ec
 80048ec:	20000162 	.word	0x20000162
 80048f0:	20000172 	.word	0x20000172
 80048f4:	20000160 	.word	0x20000160

080048f8 <USBD_FS_ManufacturerStrDescriptor>:
{
 80048f8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80048fa:	4c04      	ldr	r4, [pc, #16]	; (800490c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80048fc:	460a      	mov	r2, r1
 80048fe:	4804      	ldr	r0, [pc, #16]	; (8004910 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004900:	4621      	mov	r1, r4
 8004902:	f7ff fec8 	bl	8004696 <USBD_GetString>
}
 8004906:	4620      	mov	r0, r4
 8004908:	bd10      	pop	{r4, pc}
 800490a:	bf00      	nop
 800490c:	200011a4 	.word	0x200011a4
 8004910:	08009f39 	.word	0x08009f39

08004914 <USBD_FS_ProductStrDescriptor>:
{
 8004914:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004916:	4c04      	ldr	r4, [pc, #16]	; (8004928 <USBD_FS_ProductStrDescriptor+0x14>)
 8004918:	460a      	mov	r2, r1
 800491a:	4804      	ldr	r0, [pc, #16]	; (800492c <USBD_FS_ProductStrDescriptor+0x18>)
 800491c:	4621      	mov	r1, r4
 800491e:	f7ff feba 	bl	8004696 <USBD_GetString>
}
 8004922:	4620      	mov	r0, r4
 8004924:	bd10      	pop	{r4, pc}
 8004926:	bf00      	nop
 8004928:	200011a4 	.word	0x200011a4
 800492c:	08009f49 	.word	0x08009f49

08004930 <USBD_FS_ConfigStrDescriptor>:
{
 8004930:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004932:	4c04      	ldr	r4, [pc, #16]	; (8004944 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004934:	460a      	mov	r2, r1
 8004936:	4804      	ldr	r0, [pc, #16]	; (8004948 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004938:	4621      	mov	r1, r4
 800493a:	f7ff feac 	bl	8004696 <USBD_GetString>
}
 800493e:	4620      	mov	r0, r4
 8004940:	bd10      	pop	{r4, pc}
 8004942:	bf00      	nop
 8004944:	200011a4 	.word	0x200011a4
 8004948:	08009f20 	.word	0x08009f20

0800494c <USBD_FS_InterfaceStrDescriptor>:
{
 800494c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800494e:	4c04      	ldr	r4, [pc, #16]	; (8004960 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004950:	460a      	mov	r2, r1
 8004952:	4804      	ldr	r0, [pc, #16]	; (8004964 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004954:	4621      	mov	r1, r4
 8004956:	f7ff fe9e 	bl	8004696 <USBD_GetString>
}
 800495a:	4620      	mov	r0, r4
 800495c:	bd10      	pop	{r4, pc}
 800495e:	bf00      	nop
 8004960:	200011a4 	.word	0x200011a4
 8004964:	08009f2b 	.word	0x08009f2b

08004968 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004968:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800496a:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <HAL_PCD_MspInit+0x3c>)
 800496c:	6802      	ldr	r2, [r0, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d115      	bne.n	800499e <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004972:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004976:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004978:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800497a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800497e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004980:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8004982:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004984:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8004986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800498e:	f7fd f96f 	bl	8001c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004992:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004994:	b003      	add	sp, #12
 8004996:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800499a:	f7fd b99d 	b.w	8001cd8 <HAL_NVIC_EnableIRQ>
}
 800499e:	b003      	add	sp, #12
 80049a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80049a4:	40005c00 	.word	0x40005c00

080049a8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80049a8:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80049ac:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80049b0:	f7ff bb6a 	b.w	8004088 <USBD_LL_SetupStage>

080049b4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80049b4:	2328      	movs	r3, #40	; 0x28
 80049b6:	fb03 0301 	mla	r3, r3, r1, r0
 80049ba:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80049be:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80049c2:	f7ff bb8e 	b.w	80040e2 <USBD_LL_DataOutStage>

080049c6 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80049c6:	2328      	movs	r3, #40	; 0x28
 80049c8:	fb03 0301 	mla	r3, r3, r1, r0
 80049cc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80049d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d2:	f7ff bbc0 	b.w	8004156 <USBD_LL_DataInStage>

080049d6 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80049d6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80049da:	f7ff bc54 	b.w	8004286 <USBD_LL_SOF>

080049de <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80049de:	6883      	ldr	r3, [r0, #8]
{
 80049e0:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80049e2:	2b02      	cmp	r3, #2
{
 80049e4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80049e6:	d001      	beq.n	80049ec <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80049e8:	f7fc ffe6 	bl	80019b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80049ec:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80049f0:	2101      	movs	r1, #1
 80049f2:	f7ff fc32 	bl	800425a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80049f6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 80049fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80049fe:	f7ff bc05 	b.w	800420c <USBD_LL_Reset>
	...

08004a04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004a04:	b510      	push	{r4, lr}
 8004a06:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004a08:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004a0c:	f7ff fc28 	bl	8004260 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004a10:	69a3      	ldr	r3, [r4, #24]
 8004a12:	b123      	cbz	r3, 8004a1e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004a14:	4a02      	ldr	r2, [pc, #8]	; (8004a20 <HAL_PCD_SuspendCallback+0x1c>)
 8004a16:	6913      	ldr	r3, [r2, #16]
 8004a18:	f043 0306 	orr.w	r3, r3, #6
 8004a1c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004a1e:	bd10      	pop	{r4, pc}
 8004a20:	e000ed00 	.word	0xe000ed00

08004a24 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004a24:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004a28:	f7ff bc23 	b.w	8004272 <USBD_LL_Resume>

08004a2c <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004a2c:	2308      	movs	r3, #8
{
 8004a2e:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004a30:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <USBD_LL_Init+0x7c>)
{
 8004a32:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004a34:	481d      	ldr	r0, [pc, #116]	; (8004aac <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004a36:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004a3e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8004a40:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8004a44:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004a48:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004a4c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004a4e:	f7fd f967 	bl	8001d20 <HAL_PCD_Init>
 8004a52:	b108      	cbz	r0, 8004a58 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8004a54:	f7fc ffb0 	bl	80019b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2318      	movs	r3, #24
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004a62:	f7fd ff21 	bl	80028a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004a66:	2358      	movs	r3, #88	; 0x58
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2180      	movs	r1, #128	; 0x80
 8004a6c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004a70:	f7fd ff1a 	bl	80028a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004a74:	23c0      	movs	r3, #192	; 0xc0
 8004a76:	2200      	movs	r2, #0
 8004a78:	2181      	movs	r1, #129	; 0x81
 8004a7a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004a7e:	f7fd ff13 	bl	80028a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004a82:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004a86:	2200      	movs	r2, #0
 8004a88:	2101      	movs	r1, #1
 8004a8a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004a8e:	f7fd ff0b 	bl	80028a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a96:	2200      	movs	r2, #0
 8004a98:	2182      	movs	r1, #130	; 0x82
 8004a9a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004a9e:	f7fd ff03 	bl	80028a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	bd10      	pop	{r4, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40005c00 	.word	0x40005c00
 8004aac:	200013a4 	.word	0x200013a4

08004ab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004ab0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8004ab2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ab6:	f7fd f9ab 	bl	8001e10 <HAL_PCD_Start>
 8004aba:	2803      	cmp	r0, #3
 8004abc:	bf96      	itet	ls
 8004abe:	4b02      	ldrls	r3, [pc, #8]	; (8004ac8 <USBD_LL_Start+0x18>)
 8004ac0:	2002      	movhi	r0, #2
 8004ac2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004ac4:	bd08      	pop	{r3, pc}
 8004ac6:	bf00      	nop
 8004ac8:	08009f5b 	.word	0x08009f5b

08004acc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004acc:	b510      	push	{r4, lr}
 8004ace:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004ad0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	f7fd fdea 	bl	80026b0 <HAL_PCD_EP_Open>
 8004adc:	2803      	cmp	r0, #3
 8004ade:	bf96      	itet	ls
 8004ae0:	4b01      	ldrls	r3, [pc, #4]	; (8004ae8 <USBD_LL_OpenEP+0x1c>)
 8004ae2:	2002      	movhi	r0, #2
 8004ae4:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004ae6:	bd10      	pop	{r4, pc}
 8004ae8:	08009f5b 	.word	0x08009f5b

08004aec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004aec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004aee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004af2:	f7fd fe0f 	bl	8002714 <HAL_PCD_EP_Close>
 8004af6:	2803      	cmp	r0, #3
 8004af8:	bf96      	itet	ls
 8004afa:	4b02      	ldrls	r3, [pc, #8]	; (8004b04 <USBD_LL_CloseEP+0x18>)
 8004afc:	2002      	movhi	r0, #2
 8004afe:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004b00:	bd08      	pop	{r3, pc}
 8004b02:	bf00      	nop
 8004b04:	08009f5b 	.word	0x08009f5b

08004b08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b08:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004b0a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b0e:	f7fd fe65 	bl	80027dc <HAL_PCD_EP_SetStall>
 8004b12:	2803      	cmp	r0, #3
 8004b14:	bf96      	itet	ls
 8004b16:	4b02      	ldrls	r3, [pc, #8]	; (8004b20 <USBD_LL_StallEP+0x18>)
 8004b18:	2002      	movhi	r0, #2
 8004b1a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004b1c:	bd08      	pop	{r3, pc}
 8004b1e:	bf00      	nop
 8004b20:	08009f5b 	.word	0x08009f5b

08004b24 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b24:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004b26:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b2a:	f7fd fe8b 	bl	8002844 <HAL_PCD_EP_ClrStall>
 8004b2e:	2803      	cmp	r0, #3
 8004b30:	bf96      	itet	ls
 8004b32:	4b02      	ldrls	r3, [pc, #8]	; (8004b3c <USBD_LL_ClearStallEP+0x18>)
 8004b34:	2002      	movhi	r0, #2
 8004b36:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004b38:	bd08      	pop	{r3, pc}
 8004b3a:	bf00      	nop
 8004b3c:	08009f5b 	.word	0x08009f5b

08004b40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b40:	2228      	movs	r2, #40	; 0x28
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8004b42:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004b46:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004b4a:	bf1b      	ittet	ne
 8004b4c:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8004b50:	fb03 2102 	mlane	r1, r3, r2, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004b54:	fb02 0101 	mlaeq	r1, r2, r1, r0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004b58:	1809      	addne	r1, r1, r0
 8004b5a:	bf14      	ite	ne
 8004b5c:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004b5e:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
  }
}
 8004b62:	4770      	bx	lr

08004b64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004b64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004b66:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b6a:	f7fd f96a 	bl	8001e42 <HAL_PCD_SetAddress>
 8004b6e:	2803      	cmp	r0, #3
 8004b70:	bf96      	itet	ls
 8004b72:	4b02      	ldrls	r3, [pc, #8]	; (8004b7c <USBD_LL_SetUSBAddress+0x18>)
 8004b74:	2002      	movhi	r0, #2
 8004b76:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004b78:	bd08      	pop	{r3, pc}
 8004b7a:	bf00      	nop
 8004b7c:	08009f5b 	.word	0x08009f5b

08004b80 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004b80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004b82:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b86:	f7fd fe0f 	bl	80027a8 <HAL_PCD_EP_Transmit>
 8004b8a:	2803      	cmp	r0, #3
 8004b8c:	bf96      	itet	ls
 8004b8e:	4b02      	ldrls	r3, [pc, #8]	; (8004b98 <USBD_LL_Transmit+0x18>)
 8004b90:	2002      	movhi	r0, #2
 8004b92:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004b94:	bd08      	pop	{r3, pc}
 8004b96:	bf00      	nop
 8004b98:	08009f5b 	.word	0x08009f5b

08004b9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004b9c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004b9e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ba2:	f7fd fde0 	bl	8002766 <HAL_PCD_EP_Receive>
 8004ba6:	2803      	cmp	r0, #3
 8004ba8:	bf96      	itet	ls
 8004baa:	4b02      	ldrls	r3, [pc, #8]	; (8004bb4 <USBD_LL_PrepareReceive+0x18>)
 8004bac:	2002      	movhi	r0, #2
 8004bae:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004bb0:	bd08      	pop	{r3, pc}
 8004bb2:	bf00      	nop
 8004bb4:	08009f5b 	.word	0x08009f5b

08004bb8 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004bb8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004bbc:	f7fd bdec 	b.w	8002798 <HAL_PCD_EP_GetRxCount>

08004bc0 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004bc0:	4800      	ldr	r0, [pc, #0]	; (8004bc4 <USBD_static_malloc+0x4>)
 8004bc2:	4770      	bx	lr
 8004bc4:	20000388 	.word	0x20000388

08004bc8 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8004bc8:	4770      	bx	lr

08004bca <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8004bca:	4770      	bx	lr

08004bcc <app_main>:
#include "main.h"


void app_main(void)
{
    syst.mode = SCOPE;
 8004bcc:	2400      	movs	r4, #0
 8004bce:	4d39      	ldr	r5, [pc, #228]	; (8004cb4 <app_main+0xe8>)
{
 8004bd0:	b507      	push	{r0, r1, r2, lr}
    pwm_init(&pwm);
 8004bd2:	4839      	ldr	r0, [pc, #228]	; (8004cb8 <app_main+0xec>)
    syst.mode = SCOPE;
 8004bd4:	702c      	strb	r4, [r5, #0]
    pwm_init(&pwm);
 8004bd6:	f000 facd 	bl	8005174 <pwm_init>
    daq_init(&daq);
 8004bda:	4838      	ldr	r0, [pc, #224]	; (8004cbc <app_main+0xf0>)
 8004bdc:	f000 fbb4 	bl	8005348 <daq_init>
    led_init(&led);
 8004be0:	4837      	ldr	r0, [pc, #220]	; (8004cc0 <app_main+0xf4>)
 8004be2:	f000 fa86 	bl	80050f2 <led_init>
    trig_init(&trig);
 8004be6:	4837      	ldr	r0, [pc, #220]	; (8004cc4 <app_main+0xf8>)
 8004be8:	f000 fb3e 	bl	8005268 <trig_init>

    // init PWM (debug enable)
    pwm_set(&pwm, 1, 10, 50);
 8004bec:	4b36      	ldr	r3, [pc, #216]	; (8004cc8 <app_main+0xfc>)
 8004bee:	4a37      	ldr	r2, [pc, #220]	; (8004ccc <app_main+0x100>)
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4831      	ldr	r0, [pc, #196]	; (8004cb8 <app_main+0xec>)
 8004bf4:	f000 fac2 	bl	800517c <pwm_set>
    pwm_set(&pwm, 2, 10, 50);
 8004bf8:	2102      	movs	r1, #2
 8004bfa:	482f      	ldr	r0, [pc, #188]	; (8004cb8 <app_main+0xec>)
 8004bfc:	4b32      	ldr	r3, [pc, #200]	; (8004cc8 <app_main+0xfc>)
 8004bfe:	4a33      	ldr	r2, [pc, #204]	; (8004ccc <app_main+0x100>)
 8004c00:	f000 fabc 	bl	800517c <pwm_set>
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c08:	681a      	ldr	r2, [r3, #0]

    led_blink_set(&led, 3, BLINK_LONG);

    while (1)
    {
        IWDG->KR = 0xAAAA;
 8004c0a:	f64a 26aa 	movw	r6, #43690	; 0xaaaa
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004c14:	6a1a      	ldr	r2, [r3, #32]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	621a      	str	r2, [r3, #32]
 8004c1c:	6a1a      	ldr	r2, [r3, #32]
 8004c1e:	f042 0210 	orr.w	r2, r2, #16
 8004c22:	621a      	str	r2, [r3, #32]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8004c24:	4a2a      	ldr	r2, [pc, #168]	; (8004cd0 <app_main+0x104>)
 8004c26:	68d3      	ldr	r3, [r2, #12]
 8004c28:	f043 0320 	orr.w	r3, r3, #32
 8004c2c:	60d3      	str	r3, [r2, #12]
    comm_init();
 8004c2e:	f000 f8d1 	bl	8004dd4 <comm_init>
    adc_init(ADC1);
 8004c32:	4828      	ldr	r0, [pc, #160]	; (8004cd4 <app_main+0x108>)
 8004c34:	f000 fa3c 	bl	80050b0 <adc_init>
    dma_init(ADC1, DMA1, LL_DMA_CHANNEL_1, buff_adc1, ADC_BUFF_SIZE);
 8004c38:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	4925      	ldr	r1, [pc, #148]	; (8004cd8 <app_main+0x10c>)
 8004c42:	4b26      	ldr	r3, [pc, #152]	; (8004cdc <app_main+0x110>)
 8004c44:	4823      	ldr	r0, [pc, #140]	; (8004cd4 <app_main+0x108>)
 8004c46:	f000 fa1d 	bl	8005084 <dma_init>
    memset(buff_adc1, 0, ADC_BUFF_SIZE * sizeof(uint16_t));
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004c50:	4822      	ldr	r0, [pc, #136]	; (8004cdc <app_main+0x110>)
 8004c52:	f002 fd4d 	bl	80076f0 <memset>
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004c56:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <app_main+0x114>)
    daq_enable(&daq, syst.mode, 1);
 8004c58:	7829      	ldrb	r1, [r5, #0]
 8004c5a:	6813      	ldr	r3, [r2, #0]
 8004c5c:	4817      	ldr	r0, [pc, #92]	; (8004cbc <app_main+0xf0>)
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f000 fb87 	bl	8005378 <daq_enable>
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8004c6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ce4 <app_main+0x118>)
    trig_set(&trig, ADC1, LL_ADC_AWD_CHANNEL_2_REG, 2047, RISING, AUTO);
 8004c6c:	4919      	ldr	r1, [pc, #100]	; (8004cd4 <app_main+0x108>)
 8004c6e:	68d3      	ldr	r3, [r2, #12]
 8004c70:	4814      	ldr	r0, [pc, #80]	; (8004cc4 <app_main+0xf8>)
 8004c72:	f043 0302 	orr.w	r3, r3, #2
 8004c76:	60d3      	str	r3, [r2, #12]
 8004c78:	e9cd 4400 	strd	r4, r4, [sp]
 8004c7c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004c80:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <app_main+0x11c>)
 8004c82:	f000 fb23 	bl	80052cc <trig_set>
    led_blink_set(&led, 3, BLINK_LONG);
 8004c86:	4a19      	ldr	r2, [pc, #100]	; (8004cec <app_main+0x120>)
 8004c88:	2103      	movs	r1, #3
 8004c8a:	480d      	ldr	r0, [pc, #52]	; (8004cc0 <app_main+0xf4>)
 8004c8c:	f000 fa5a 	bl	8005144 <led_blink_set>
        IWDG->KR = 0xAAAA;
 8004c90:	4d17      	ldr	r5, [pc, #92]	; (8004cf0 <app_main+0x124>)
        led_blink_do(&led);
 8004c92:	4c0b      	ldr	r4, [pc, #44]	; (8004cc0 <app_main+0xf4>)
 8004c94:	480a      	ldr	r0, [pc, #40]	; (8004cc0 <app_main+0xf4>)
        IWDG->KR = 0xAAAA;
 8004c96:	602e      	str	r6, [r5, #0]
        led_blink_do(&led);
 8004c98:	f000 fa5c 	bl	8005154 <led_blink_do>

        if (comm_main())
 8004c9c:	f000 f8da 	bl	8004e54 <comm_main>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d0f7      	beq.n	8004c94 <app_main+0xc8>
            led_blink_set(&led, 1, BLINK_SHORT);
 8004ca4:	f247 5230 	movw	r2, #30000	; 0x7530
 8004ca8:	2101      	movs	r1, #1
 8004caa:	4620      	mov	r0, r4
 8004cac:	f000 fa4a 	bl	8005144 <led_blink_set>
 8004cb0:	e7f0      	b.n	8004c94 <app_main+0xc8>
 8004cb2:	bf00      	nop
 8004cb4:	200022a0 	.word	0x200022a0
 8004cb8:	200022a4 	.word	0x200022a4
 8004cbc:	20002276 	.word	0x20002276
 8004cc0:	20002290 	.word	0x20002290
 8004cc4:	20001690 	.word	0x20001690
 8004cc8:	42480000 	.word	0x42480000
 8004ccc:	41200000 	.word	0x41200000
 8004cd0:	40013800 	.word	0x40013800
 8004cd4:	40012400 	.word	0x40012400
 8004cd8:	40020000 	.word	0x40020000
 8004cdc:	200016be 	.word	0x200016be
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	00800202 	.word	0x00800202
 8004cec:	000493e0 	.word	0x000493e0
 8004cf0:	40003000 	.word	0x40003000

08004cf4 <SCPI_Flush>:
scpi_result_t SCPI_Flush(scpi_t * context)
{
    (void) context;

    return SCPI_RES_OK;
}
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	4770      	bx	lr

08004cf8 <respond>:
    for (int i = 0; i < len; i++)
        uart_put_char(data[i]);
}

static int respond(const char* data, int len)
{
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (comm_d_uart.available)
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <respond+0x4c>)
{
 8004cfc:	4606      	mov	r6, r0
    if (comm_d_uart.available)
 8004cfe:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
{
 8004d02:	460c      	mov	r4, r1
    if (comm_d_uart.available)
 8004d04:	b16b      	cbz	r3, 8004d22 <respond+0x2a>
 8004d06:	4603      	mov	r3, r0
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004d08:	4a0f      	ldr	r2, [pc, #60]	; (8004d48 <respond+0x50>)
    for (int i = 0; i < len; i++)
 8004d0a:	1b99      	subs	r1, r3, r6
 8004d0c:	42a1      	cmp	r1, r4
 8004d0e:	db01      	blt.n	8004d14 <respond+0x1c>
        }

        return len;
    }
    return 0;
}
 8004d10:	4620      	mov	r0, r4
 8004d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uart_put_char(data[i]);
 8004d14:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004d18:	6810      	ldr	r0, [r2, #0]
    while(!LL_USART_IsActiveFlag_TXE(ULT_UART));
 8004d1a:	0600      	lsls	r0, r0, #24
 8004d1c:	d5fc      	bpl.n	8004d18 <respond+0x20>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8004d1e:	6051      	str	r1, [r2, #4]
 8004d20:	e7f3      	b.n	8004d0a <respond+0x12>
    else if (comm_d_usb.available)
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <respond+0x54>)
 8004d24:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004d28:	b153      	cbz	r3, 8004d40 <respond+0x48>
 8004d2a:	4d09      	ldr	r5, [pc, #36]	; (8004d50 <respond+0x58>)
            ret = CDC_Transmit_FS((uint8_t *)data, len);
 8004d2c:	b28f      	uxth	r7, r1
 8004d2e:	4639      	mov	r1, r7
 8004d30:	4630      	mov	r0, r6
 8004d32:	f7ff fd89 	bl	8004848 <CDC_Transmit_FS>
        while (ret == USBD_BUSY && cntr > 0)
 8004d36:	2801      	cmp	r0, #1
 8004d38:	d1ea      	bne.n	8004d10 <respond+0x18>
 8004d3a:	3d01      	subs	r5, #1
 8004d3c:	d1f7      	bne.n	8004d2e <respond+0x36>
 8004d3e:	e7e7      	b.n	8004d10 <respond+0x18>
    return 0;
 8004d40:	461c      	mov	r4, r3
 8004d42:	e7e5      	b.n	8004d10 <respond+0x18>
 8004d44:	20000640 	.word	0x20000640
 8004d48:	40013800 	.word	0x40013800
 8004d4c:	200006a6 	.word	0x200006a6
 8004d50:	000f4240 	.word	0x000f4240

08004d54 <SCPI_Write>:
{
 8004d54:	4608      	mov	r0, r1
    return respond(data, len);
 8004d56:	4611      	mov	r1, r2
 8004d58:	f7ff bfce 	b.w	8004cf8 <respond>

08004d5c <SCPI_Reset>:
{
 8004d5c:	b508      	push	{r3, lr}
    respond("**Reset\r\n", 9);
 8004d5e:	2109      	movs	r1, #9
 8004d60:	4802      	ldr	r0, [pc, #8]	; (8004d6c <SCPI_Reset+0x10>)
 8004d62:	f7ff ffc9 	bl	8004cf8 <respond>
}
 8004d66:	2001      	movs	r0, #1
 8004d68:	bd08      	pop	{r3, pc}
 8004d6a:	bf00      	nop
 8004d6c:	08009f9f 	.word	0x08009f9f

08004d70 <SCPI_Error>:
{
 8004d70:	b510      	push	{r4, lr}
    int len = sprintf(buff, "**ERROR: %d, \"%s\"\r\n", (int16_t) err, SCPI_ErrorTranslate(err));
 8004d72:	b20c      	sxth	r4, r1
{
 8004d74:	b09a      	sub	sp, #104	; 0x68
    int len = sprintf(buff, "**ERROR: %d, \"%s\"\r\n", (int16_t) err, SCPI_ErrorTranslate(err));
 8004d76:	4620      	mov	r0, r4
 8004d78:	f000 fe5c 	bl	8005a34 <SCPI_ErrorTranslate>
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4905      	ldr	r1, [pc, #20]	; (8004d98 <SCPI_Error+0x28>)
 8004d82:	a801      	add	r0, sp, #4
 8004d84:	f003 f838 	bl	8007df8 <siprintf>
    respond(buff, len);
 8004d88:	4601      	mov	r1, r0
 8004d8a:	a801      	add	r0, sp, #4
 8004d8c:	f7ff ffb4 	bl	8004cf8 <respond>
}
 8004d90:	2000      	movs	r0, #0
 8004d92:	b01a      	add	sp, #104	; 0x68
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	bf00      	nop
 8004d98:	08009f8b 	.word	0x08009f8b

08004d9c <SCPI_Control>:
{
 8004d9c:	b500      	push	{lr}
    if (SCPI_CTRL_SRQ == ctrl)
 8004d9e:	2901      	cmp	r1, #1
{
 8004da0:	b09d      	sub	sp, #116	; 0x74
 8004da2:	4613      	mov	r3, r2
    if (SCPI_CTRL_SRQ == ctrl)
 8004da4:	d10b      	bne.n	8004dbe <SCPI_Control+0x22>
        len = sprintf(buff, "**SRQ: 0x%X (%d)\r\n", val, val);
 8004da6:	4909      	ldr	r1, [pc, #36]	; (8004dcc <SCPI_Control+0x30>)
 8004da8:	a803      	add	r0, sp, #12
 8004daa:	f003 f825 	bl	8007df8 <siprintf>
    respond(buff, len);
 8004dae:	4601      	mov	r1, r0
 8004db0:	a803      	add	r0, sp, #12
 8004db2:	f7ff ffa1 	bl	8004cf8 <respond>
}
 8004db6:	2001      	movs	r0, #1
 8004db8:	b01d      	add	sp, #116	; 0x74
 8004dba:	f85d fb04 	ldr.w	pc, [sp], #4
        len = sprintf(buff, "**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
 8004dbe:	9200      	str	r2, [sp, #0]
 8004dc0:	a803      	add	r0, sp, #12
 8004dc2:	460a      	mov	r2, r1
 8004dc4:	4902      	ldr	r1, [pc, #8]	; (8004dd0 <SCPI_Control+0x34>)
 8004dc6:	f003 f817 	bl	8007df8 <siprintf>
 8004dca:	e7f0      	b.n	8004dae <SCPI_Control+0x12>
 8004dcc:	08009f5f 	.word	0x08009f5f
 8004dd0:	08009f72 	.word	0x08009f72

08004dd4 <comm_init>:

/************************* Main Comm *************************/

void comm_init(void)
{
    comm_d_uart.available = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <comm_init+0x50>)
{
 8004dd8:	b500      	push	{lr}
    comm_d_uart.available = 0;
 8004dda:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    comm_d_uart.rx_index = 0;
 8004dde:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
    comm_d_usb.available = 0;
 8004de2:	4a11      	ldr	r2, [pc, #68]	; (8004e28 <comm_init+0x54>)
{
 8004de4:	b089      	sub	sp, #36	; 0x24
    comm_d_usb.available = 0;
 8004de6:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    comm_d_usb.rx_index = 0;
 8004dea:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65

    SCPI_Init(&scpi_context,
 8004dee:	2311      	movs	r3, #17
 8004df0:	9307      	str	r3, [sp, #28]
 8004df2:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <comm_init+0x58>)
 8004df4:	4a0e      	ldr	r2, [pc, #56]	; (8004e30 <comm_init+0x5c>)
 8004df6:	9306      	str	r3, [sp, #24]
 8004df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dfc:	9305      	str	r3, [sp, #20]
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <comm_init+0x60>)
 8004e00:	490d      	ldr	r1, [pc, #52]	; (8004e38 <comm_init+0x64>)
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <comm_init+0x68>)
 8004e06:	480e      	ldr	r0, [pc, #56]	; (8004e40 <comm_init+0x6c>)
 8004e08:	9303      	str	r3, [sp, #12]
 8004e0a:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <comm_init+0x70>)
 8004e0c:	9302      	str	r3, [sp, #8]
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <comm_init+0x74>)
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <comm_init+0x78>)
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <comm_init+0x7c>)
 8004e18:	f001 fc54 	bl	80066c4 <SCPI_Init>
             &scpi_interface,
             scpi_units_def,
             SCPI_IDN1, SCPI_IDN2, SCPI_IDN3, SCPI_IDN4,
             scpi_input_buffer, SCPI_INPUT_BUFFER_LENGTH,
             scpi_error_queue_data, SCPI_ERROR_QUEUE_SIZE);
}
 8004e1c:	b009      	add	sp, #36	; 0x24
 8004e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e22:	bf00      	nop
 8004e24:	20000640 	.word	0x20000640
 8004e28:	200006a6 	.word	0x200006a6
 8004e2c:	20002c24 	.word	0x20002c24
 8004e30:	2000017c 	.word	0x2000017c
 8004e34:	20002b24 	.word	0x20002b24
 8004e38:	08009fb0 	.word	0x08009fb0
 8004e3c:	0800a3d3 	.word	0x0800a3d3
 8004e40:	20002a84 	.word	0x20002a84
 8004e44:	08009fa9 	.word	0x08009fa9
 8004e48:	08009f49 	.word	0x08009f49
 8004e4c:	08009f39 	.word	0x08009f39
 8004e50:	0800a438 	.word	0x0800a438

08004e54 <comm_main>:

uint8_t comm_main(void)
{
 8004e54:	b538      	push	{r3, r4, r5, lr}
    if (comm_d_uart.available)
 8004e56:	4c15      	ldr	r4, [pc, #84]	; (8004eac <comm_main+0x58>)
 8004e58:	f894 5064 	ldrb.w	r5, [r4, #100]	; 0x64
 8004e5c:	b18d      	cbz	r5, 8004e82 <comm_main+0x2e>
    {
        SCPI_Input(&scpi_context, comm_d_uart.rx_buffer, comm_d_uart.rx_index);
 8004e5e:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8004e62:	4621      	mov	r1, r4
 8004e64:	4812      	ldr	r0, [pc, #72]	; (8004eb0 <comm_main+0x5c>)
 8004e66:	f002 f84f 	bl	8006f08 <SCPI_Input>

        memset(comm_d_uart.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
 8004e6a:	2264      	movs	r2, #100	; 0x64
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f002 fc3e 	bl	80076f0 <memset>
        comm_d_uart.rx_index = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
        comm_d_uart.available = 0;
 8004e7a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        SCPI_Input(&scpi_context, comm_d_usb.rx_buffer, comm_d_usb.rx_index);

        memset(comm_d_usb.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
        comm_d_usb.rx_index = 0;
        comm_d_usb.available = 0;
        return 1;
 8004e7e:	2001      	movs	r0, #1
    }
    return 0;
}
 8004e80:	bd38      	pop	{r3, r4, r5, pc}
    else if (comm_d_usb.available)
 8004e82:	4c0c      	ldr	r4, [pc, #48]	; (8004eb4 <comm_main+0x60>)
 8004e84:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d0f9      	beq.n	8004e80 <comm_main+0x2c>
        SCPI_Input(&scpi_context, comm_d_usb.rx_buffer, comm_d_usb.rx_index);
 8004e8c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8004e90:	4621      	mov	r1, r4
 8004e92:	4807      	ldr	r0, [pc, #28]	; (8004eb0 <comm_main+0x5c>)
 8004e94:	f002 f838 	bl	8006f08 <SCPI_Input>
        memset(comm_d_usb.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
 8004e98:	2264      	movs	r2, #100	; 0x64
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f002 fc27 	bl	80076f0 <memset>
        comm_d_usb.rx_index = 0;
 8004ea2:	f884 5065 	strb.w	r5, [r4, #101]	; 0x65
        comm_d_usb.available = 0;
 8004ea6:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8004eaa:	e7e8      	b.n	8004e7e <comm_main+0x2a>
 8004eac:	20000640 	.word	0x20000640
 8004eb0:	20002a84 	.word	0x20002a84
 8004eb4:	200006a6 	.word	0x200006a6

08004eb8 <USART1_IRQHandler>:
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004eb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <USART1_IRQHandler+0x38>)
 8004eba:	681a      	ldr	r2, [r3, #0]
}
*/

void USART1_IRQHandler(void)
{
    if (LL_USART_IsActiveFlag_RXNE(ULT_UART))
 8004ebc:	0692      	lsls	r2, r2, #26
 8004ebe:	d516      	bpl.n	8004eee <USART1_IRQHandler+0x36>
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8004ec0:	f06f 0220 	mvn.w	r2, #32
 8004ec4:	601a      	str	r2, [r3, #0]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004ec6:	685a      	ldr	r2, [r3, #4]
    {
        LL_USART_ClearFlag_RXNE(ULT_UART);
        char rx = LL_USART_ReceiveData8(ULT_UART);

        comm_d_uart.rx_buffer[comm_d_uart.rx_index++] = rx;
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <USART1_IRQHandler+0x3c>)
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	f893 0065 	ldrb.w	r0, [r3, #101]	; 0x65
 8004ed0:	1c41      	adds	r1, r0, #1
 8004ed2:	b2c9      	uxtb	r1, r1

        if (comm_d_uart.rx_index >= RX_BUFF_LAST)
 8004ed4:	2962      	cmp	r1, #98	; 0x62
        comm_d_uart.rx_buffer[comm_d_uart.rx_index++] = rx;
 8004ed6:	f883 1065 	strb.w	r1, [r3, #101]	; 0x65
            comm_d_uart.rx_index = 0;
 8004eda:	bf84      	itt	hi
 8004edc:	2100      	movhi	r1, #0
 8004ede:	f883 1065 	strbhi.w	r1, [r3, #101]	; 0x65

        if (rx == '\n')
 8004ee2:	2a0a      	cmp	r2, #10
        comm_d_uart.rx_buffer[comm_d_uart.rx_index++] = rx;
 8004ee4:	541a      	strb	r2, [r3, r0]
            comm_d_uart.available = 1;
 8004ee6:	bf04      	itt	eq
 8004ee8:	2201      	moveq	r2, #1
 8004eea:	f883 2064 	strbeq.w	r2, [r3, #100]	; 0x64
    }
}
 8004eee:	4770      	bx	lr
 8004ef0:	40013800 	.word	0x40013800
 8004ef4:	20000640 	.word	0x20000640

08004ef8 <ADC1_2_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1));
 8004ef8:	4b3e      	ldr	r3, [pc, #248]	; (8004ff4 <ADC1_2_IRQHandler+0xfc>)

void ADC1_2_IRQHandler(void)
{
 8004efa:	b530      	push	{r4, r5, lr}
 8004efc:	681a      	ldr	r2, [r3, #0]
    if (LL_ADC_IsActiveFlag_AWD1(ADC1))
 8004efe:	07d2      	lsls	r2, r2, #31
 8004f00:	d527      	bpl.n	8004f52 <ADC1_2_IRQHandler+0x5a>
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_AWD1);
 8004f02:	f06f 0101 	mvn.w	r1, #1
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004f06:	4a3c      	ldr	r2, [pc, #240]	; (8004ff8 <ADC1_2_IRQHandler+0x100>)
 8004f08:	6852      	ldr	r2, [r2, #4]
 8004f0a:	6019      	str	r1, [r3, #0]
    {
        int pos = ADC_BUFF_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);

        LL_ADC_ClearFlag_AWD1(ADC1);

        if (trig.ready)
 8004f0c:	4b3b      	ldr	r3, [pc, #236]	; (8004ffc <ADC1_2_IRQHandler+0x104>)
 8004f0e:	7b19      	ldrb	r1, [r3, #12]
 8004f10:	b9f9      	cbnz	r1, 8004f52 <ADC1_2_IRQHandler+0x5a>
        else
        {
        */
            int last_idx = pos - 1;
            if (last_idx < 0)
                last_idx = ADC_BUFF_SIZE - 1;
 8004f12:	f240 51db 	movw	r1, #1499	; 0x5db
 8004f16:	b292      	uxth	r2, r2
            int last_idx = pos - 1;
 8004f18:	f5c2 62bb 	rsb	r2, r2, #1496	; 0x5d8
 8004f1c:	3203      	adds	r2, #3
                last_idx = ADC_BUFF_SIZE - 1;
 8004f1e:	ea32 0222 	bics.w	r2, r2, r2, asr #32
 8004f22:	bf28      	it	cs
 8004f24:	460a      	movcs	r2, r1
            int prev_last_idx = last_idx - CHANNELS;
            if (prev_last_idx < 0)
                prev_last_idx += ADC_BUFF_SIZE;

            if ((trig.edge == RISING && buff_adc1[last_idx] > trig.val && buff_adc1[prev_last_idx] <= trig.val) ||
 8004f26:	7898      	ldrb	r0, [r3, #2]
            if (prev_last_idx < 0)
 8004f28:	1ed1      	subs	r1, r2, #3
                prev_last_idx += ADC_BUFF_SIZE;
 8004f2a:	bf48      	it	mi
 8004f2c:	f202 51d9 	addwmi	r1, r2, #1497	; 0x5d9
            if ((trig.edge == RISING && buff_adc1[last_idx] > trig.val && buff_adc1[prev_last_idx] <= trig.val) ||
 8004f30:	b980      	cbnz	r0, 8004f54 <ADC1_2_IRQHandler+0x5c>
 8004f32:	4c33      	ldr	r4, [pc, #204]	; (8005000 <ADC1_2_IRQHandler+0x108>)
 8004f34:	f8d3 0007 	ldr.w	r0, [r3, #7]
 8004f38:	f834 5012 	ldrh.w	r5, [r4, r2, lsl #1]
 8004f3c:	4285      	cmp	r5, r0
 8004f3e:	dd03      	ble.n	8004f48 <ADC1_2_IRQHandler+0x50>
 8004f40:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8004f44:	4288      	cmp	r0, r1
 8004f46:	da12      	bge.n	8004f6e <ADC1_2_IRQHandler+0x76>
                    trig.pretrig_cntr += uwTick - trig.uwtick_last;
                else
                    trig.pretrig_cntr += (uwTick - trig.uwtick_last) + 4294967295;
                trig.uwtick_last = uwTick;
            }
            trig.all_cntr++;
 8004f48:	f8d3 2011 	ldr.w	r2, [r3, #17]
 8004f4c:	3201      	adds	r2, #1
 8004f4e:	f8c3 2011 	str.w	r2, [r3, #17]
                trig_false_cntr++;
            //}
             */
        //}
    }
}
 8004f52:	bd30      	pop	{r4, r5, pc}
            if ((trig.edge == RISING && buff_adc1[last_idx] > trig.val && buff_adc1[prev_last_idx] <= trig.val) ||
 8004f54:	2801      	cmp	r0, #1
 8004f56:	d1f7      	bne.n	8004f48 <ADC1_2_IRQHandler+0x50>
                (trig.edge == FALLING && buff_adc1[last_idx] < trig.val && buff_adc1[prev_last_idx] >= trig.val)) // trig cond success
 8004f58:	4c29      	ldr	r4, [pc, #164]	; (8005000 <ADC1_2_IRQHandler+0x108>)
 8004f5a:	f8d3 0007 	ldr.w	r0, [r3, #7]
 8004f5e:	f834 5012 	ldrh.w	r5, [r4, r2, lsl #1]
 8004f62:	4285      	cmp	r5, r0
 8004f64:	daf0      	bge.n	8004f48 <ADC1_2_IRQHandler+0x50>
 8004f66:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8004f6a:	4288      	cmp	r0, r1
 8004f6c:	dcec      	bgt.n	8004f48 <ADC1_2_IRQHandler+0x50>
                trig.cntr++;
 8004f6e:	f8d3 100d 	ldr.w	r1, [r3, #13]
                trig.pos_trig = last_idx;
 8004f72:	f8c3 2019 	str.w	r2, [r3, #25]
                trig.cntr++;
 8004f76:	3101      	adds	r1, #1
 8004f78:	f8c3 100d 	str.w	r1, [r3, #13]
                trig.pos_frst = last_idx - (ADC_BUFF_SIZE / 2);
 8004f7c:	f2a2 21ee 	subw	r1, r2, #750	; 0x2ee
                if (trig.pos_frst < 0)
 8004f80:	2900      	cmp	r1, #0
                    trig.pos_frst += ADC_BUFF_SIZE;
 8004f82:	bfbc      	itt	lt
 8004f84:	f202 22ee 	addwlt	r2, r2, #750	; 0x2ee
 8004f88:	f8c3 2015 	strlt.w	r2, [r3, #21]
                if (trig.pretrig_cntr > 2000) // pretrigger counter
 8004f8c:	f8d3 2029 	ldr.w	r2, [r3, #41]	; 0x29
                trig.pos_frst = last_idx - (ADC_BUFF_SIZE / 2);
 8004f90:	bfa8      	it	ge
 8004f92:	f8c3 1015 	strge.w	r1, [r3, #21]
                if (trig.pretrig_cntr > 2000) // pretrigger counter
 8004f96:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8004f9a:	dd18      	ble.n	8004fce <ADC1_2_IRQHandler+0xd6>
  MODIFY_REG(ADCx->CR1,
 8004f9c:	4915      	ldr	r1, [pc, #84]	; (8004ff4 <ADC1_2_IRQHandler+0xfc>)
 8004f9e:	4a19      	ldr	r2, [pc, #100]	; (8005004 <ADC1_2_IRQHandler+0x10c>)
 8004fa0:	6848      	ldr	r0, [r1, #4]
 8004fa2:	4002      	ands	r2, r0
 8004fa4:	604a      	str	r2, [r1, #4]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004fa6:	2146      	movs	r1, #70	; 0x46
 8004fa8:	4a17      	ldr	r2, [pc, #92]	; (8005008 <ADC1_2_IRQHandler+0x110>)
 8004faa:	62d1      	str	r1, [r2, #44]	; 0x2c
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004fac:	6811      	ldr	r1, [r2, #0]
 8004fae:	f041 0101 	orr.w	r1, r1, #1
 8004fb2:	6011      	str	r1, [r2, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004fb4:	6a11      	ldr	r1, [r2, #32]
 8004fb6:	f041 0101 	orr.w	r1, r1, #1
 8004fba:	6211      	str	r1, [r2, #32]
                    trig.pretrig_cntr = 0;
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004fc2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8004fc6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8004fca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                if (uwTick > trig.uwtick_last)
 8004fce:	490f      	ldr	r1, [pc, #60]	; (800500c <ADC1_2_IRQHandler+0x114>)
 8004fd0:	f8d3 0025 	ldr.w	r0, [r3, #37]	; 0x25
 8004fd4:	680a      	ldr	r2, [r1, #0]
 8004fd6:	f8d3 4029 	ldr.w	r4, [r3, #41]	; 0x29
 8004fda:	4290      	cmp	r0, r2
                    trig.pretrig_cntr += uwTick - trig.uwtick_last;
 8004fdc:	680a      	ldr	r2, [r1, #0]
                    trig.pretrig_cntr += (uwTick - trig.uwtick_last) + 4294967295;
 8004fde:	bf28      	it	cs
 8004fe0:	f102 32ff 	addcs.w	r2, r2, #4294967295
 8004fe4:	4422      	add	r2, r4
 8004fe6:	1a12      	subs	r2, r2, r0
 8004fe8:	f8c3 2029 	str.w	r2, [r3, #41]	; 0x29
                trig.uwtick_last = uwTick;
 8004fec:	680a      	ldr	r2, [r1, #0]
 8004fee:	f8c3 2025 	str.w	r2, [r3, #37]	; 0x25
 8004ff2:	e7a9      	b.n	8004f48 <ADC1_2_IRQHandler+0x50>
 8004ff4:	40012400 	.word	0x40012400
 8004ff8:	40020008 	.word	0x40020008
 8004ffc:	20001690 	.word	0x20001690
 8005000:	200016be 	.word	0x200016be
 8005004:	ff3ffde0 	.word	0xff3ffde0
 8005008:	40000800 	.word	0x40000800
 800500c:	2000070c 	.word	0x2000070c

08005010 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
    asm("nop");
 8005010:	bf00      	nop
}
 8005012:	4770      	bx	lr

08005014 <TIM4_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005014:	4a16      	ldr	r2, [pc, #88]	; (8005070 <TIM4_IRQHandler+0x5c>)

void TIM4_IRQHandler(void)
{
 8005016:	b510      	push	{r4, lr}
 8005018:	6913      	ldr	r3, [r2, #16]
 800501a:	079b      	lsls	r3, r3, #30
 800501c:	d526      	bpl.n	800506c <TIM4_IRQHandler+0x58>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800501e:	f06f 0102 	mvn.w	r1, #2
 8005022:	4b14      	ldr	r3, [pc, #80]	; (8005074 <TIM4_IRQHandler+0x60>)
    if(LL_TIM_IsActiveFlag_CC1(ULT_TIM_TRIG) == 1)
    {
        int buffsz = ADC_BUFF_SIZE;
        trig.pos_last = buffsz - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1) - 1;
 8005024:	4c14      	ldr	r4, [pc, #80]	; (8005078 <TIM4_IRQHandler+0x64>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	b29b      	uxth	r3, r3
 800502a:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800502e:	3303      	adds	r3, #3
 8005030:	f8c4 301d 	str.w	r3, [r4, #29]
 8005034:	6111      	str	r1, [r2, #16]

        LL_TIM_ClearFlag_CC1(ULT_TIM_TRIG);

        trig.pos_diff = trig.pos_last - trig.pos_trig;
 8005036:	f8d4 2019 	ldr.w	r2, [r4, #25]
        if (trig.pos_diff < 0)
 800503a:	1a9b      	subs	r3, r3, r2
            trig.pos_diff += buffsz;
 800503c:	bf48      	it	mi
 800503e:	f203 53dc 	addwmi	r3, r3, #1500	; 0x5dc
 8005042:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21

        if (trig.pos_diff >= buffsz / 2)
 8005046:	f240 23ed 	movw	r3, #749	; 0x2ed
 800504a:	f8d4 2021 	ldr.w	r2, [r4, #33]	; 0x21
 800504e:	429a      	cmp	r2, r3
 8005050:	dd0c      	ble.n	800506c <TIM4_IRQHandler+0x58>
        {
            daq_enable(&daq, syst.mode, 0);
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <TIM4_IRQHandler+0x68>)
 8005054:	2200      	movs	r2, #0
 8005056:	7819      	ldrb	r1, [r3, #0]
 8005058:	4809      	ldr	r0, [pc, #36]	; (8005080 <TIM4_IRQHandler+0x6c>)
 800505a:	f000 f98d 	bl	8005378 <daq_enable>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800505e:	4a04      	ldr	r2, [pc, #16]	; (8005070 <TIM4_IRQHandler+0x5c>)
 8005060:	6813      	ldr	r3, [r2, #0]
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	6013      	str	r3, [r2, #0]
            LL_TIM_DisableCounter(ULT_TIM_TRIG);
            trig.ready = 1;
 8005068:	2301      	movs	r3, #1
 800506a:	7323      	strb	r3, [r4, #12]
        }
    }
}
 800506c:	bd10      	pop	{r4, pc}
 800506e:	bf00      	nop
 8005070:	40000800 	.word	0x40000800
 8005074:	40020008 	.word	0x40020008
 8005078:	20001690 	.word	0x20001690
 800507c:	200022a0 	.word	0x200022a0
 8005080:	20002276 	.word	0x20002276

08005084 <dma_init>:

/************************* DMA  *************************/


void dma_init(ADC_TypeDef* adc, DMA_TypeDef* dma, uint32_t dma_ch, uint16_t* buff, uint32_t buff_size)
{
 8005084:	b510      	push	{r4, lr}
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8005086:	4c09      	ldr	r4, [pc, #36]	; (80050ac <dma_init+0x28>)
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8005088:	304c      	adds	r0, #76	; 0x4c
 800508a:	4422      	add	r2, r4
 800508c:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 8005090:	190a      	adds	r2, r1, r4
 8005092:	6090      	str	r0, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8005094:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8005096:	6853      	ldr	r3, [r2, #4]
 8005098:	9802      	ldr	r0, [sp, #8]
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	041b      	lsls	r3, r3, #16
 800509e:	4303      	orrs	r3, r0
 80050a0:	6053      	str	r3, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80050a2:	590b      	ldr	r3, [r1, r4]
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	510b      	str	r3, [r1, r4]
    //LL_DMA_EnableIT_HT(dma, dma_ch); // Enable half transfer interrupt.
    //LL_DMA_EnableIT_TE(dma, dma_ch); // Enable transfer error interrupt.

    // Enable
    LL_DMA_EnableChannel(dma, dma_ch);
}
 80050aa:	bd10      	pop	{r4, pc}
 80050ac:	0800a1b1 	.word	0x0800a1b1

080050b0 <adc_init>:
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80050b0:	6883      	ldr	r3, [r0, #8]
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	6083      	str	r3, [r0, #8]
void adc_init(ADC_TypeDef* adc)
{
    //LL_ADC_Disable(adc);
    LL_ADC_Enable(adc);

    adc->CR2 |= ADC_CR2_TSVREFE;
 80050b8:	6883      	ldr	r3, [r0, #8]
 80050ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050be:	6083      	str	r3, [r0, #8]
  return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_DMA));
 80050c0:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 80050c2:	6883      	ldr	r3, [r0, #8]
  return (uint32_t)(READ_BIT(ADCx->CR2, ADC_CR2_DMA));
 80050c4:	f402 7280 	and.w	r2, r2, #256	; 0x100
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 80050c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050cc:	6083      	str	r3, [r0, #8]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80050ce:	6883      	ldr	r3, [r0, #8]
 80050d0:	f043 0304 	orr.w	r3, r3, #4
 80050d4:	6083      	str	r3, [r0, #8]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80050d6:	6883      	ldr	r3, [r0, #8]

    const uint32_t dma_tx_mode = LL_ADC_REG_GetDMATransfer(adc);
    LL_ADC_REG_SetDMATransfer(adc, LL_ADC_REG_DMA_TRANSFER_NONE);

    LL_ADC_StartCalibration(adc);
    while (LL_ADC_IsCalibrationOnGoing(adc) != 0);
 80050d8:	075b      	lsls	r3, r3, #29
 80050da:	d4fc      	bmi.n	80050d6 <adc_init+0x26>
 80050dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8

    for (int i = 0; i <  1000; ++i) asm("nop");
 80050e0:	bf00      	nop
 80050e2:	3b01      	subs	r3, #1
 80050e4:	d1fc      	bne.n	80050e0 <adc_init+0x30>
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 80050e6:	6883      	ldr	r3, [r0, #8]
 80050e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ec:	4313      	orrs	r3, r2
 80050ee:	6083      	str	r3, [r0, #8]

    LL_ADC_REG_SetDMATransfer(adc, dma_tx_mode);
    //LL_ADC_Enable(adc);
}
 80050f0:	4770      	bx	lr

080050f2 <led_init>:

// ************************** LED *********************************

void led_init(led_data_t* self)
{
    self->blink_cntr = 0;
 80050f2:	2300      	movs	r3, #0
    self->blink_len = 0;
 80050f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
    self->blink_cntr = 0;
    self->enabled = 0;
 80050f8:	60c3      	str	r3, [r0, #12]
}
 80050fa:	4770      	bx	lr

080050fc <led_set>:

void led_set(led_data_t* self, uint8_t enable)
{
    self->enabled = enable;
 80050fc:	60c1      	str	r1, [r0, #12]
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <led_set+0x1c>)
    if (!self->enabled)
 8005100:	b921      	cbnz	r1, 800510c <led_set+0x10>
        ULT_LED_PORT->BSRR |= (1 << ULT_LED_PIN);  // 1
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005108:	611a      	str	r2, [r3, #16]
 800510a:	4770      	bx	lr
    else
        ULT_LED_PORT->BRR |= (1 << ULT_LED_PIN);   // 0
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005112:	615a      	str	r2, [r3, #20]
}
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40011000 	.word	0x40011000

0800511c <led_toggle>:

void led_toggle(led_data_t* self)
{
    if (self->enabled)
 800511c:	68c3      	ldr	r3, [r0, #12]
 800511e:	4a08      	ldr	r2, [pc, #32]	; (8005140 <led_toggle+0x24>)
 8005120:	b143      	cbz	r3, 8005134 <led_toggle+0x18>
        ULT_LED_PORT->BSRR |= (1 << ULT_LED_PIN);  // 1
 8005122:	6911      	ldr	r1, [r2, #16]
 8005124:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8005128:	6111      	str	r1, [r2, #16]
    else
        ULT_LED_PORT->BRR |= (1 << ULT_LED_PIN);   // 0
    self->enabled = !self->enabled;
 800512a:	fab3 f383 	clz	r3, r3
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	60c3      	str	r3, [r0, #12]
}
 8005132:	4770      	bx	lr
        ULT_LED_PORT->BRR |= (1 << ULT_LED_PIN);   // 0
 8005134:	6951      	ldr	r1, [r2, #20]
 8005136:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800513a:	6151      	str	r1, [r2, #20]
 800513c:	e7f5      	b.n	800512a <led_toggle+0xe>
 800513e:	bf00      	nop
 8005140:	40011000 	.word	0x40011000

08005144 <led_blink_set>:

void led_blink_set(led_data_t* self, int num, int len)
{
    self->blink_num = (num * 2) - 1;
 8005144:	0049      	lsls	r1, r1, #1
 8005146:	3901      	subs	r1, #1
    self->blink_len = len;
 8005148:	e9c0 1200 	strd	r1, r2, [r0]
    self->blink_cntr = len;
 800514c:	6082      	str	r2, [r0, #8]
    led_set(self, 1);
 800514e:	2101      	movs	r1, #1
 8005150:	f7ff bfd4 	b.w	80050fc <led_set>

08005154 <led_blink_do>:
}

void led_blink_do(led_data_t* self)
{
    if (self->blink_num > 0)
 8005154:	6802      	ldr	r2, [r0, #0]
 8005156:	2a00      	cmp	r2, #0
 8005158:	dd0b      	ble.n	8005172 <led_blink_do+0x1e>
    {
        if (self->blink_cntr > 0)
 800515a:	6881      	ldr	r1, [r0, #8]
 800515c:	2900      	cmp	r1, #0
 800515e:	dd02      	ble.n	8005166 <led_blink_do+0x12>
            self->blink_cntr--;
 8005160:	3901      	subs	r1, #1
 8005162:	6081      	str	r1, [r0, #8]
 8005164:	4770      	bx	lr
        else
        {
            self->blink_cntr = self->blink_len;
 8005166:	6841      	ldr	r1, [r0, #4]
            self->blink_num--;
 8005168:	3a01      	subs	r2, #1
            self->blink_cntr = self->blink_len;
 800516a:	6081      	str	r1, [r0, #8]
            self->blink_num--;
 800516c:	6002      	str	r2, [r0, #0]
            led_toggle(self);
 800516e:	f7ff bfd5 	b.w	800511c <led_toggle>
        }
    }
}
 8005172:	4770      	bx	lr

08005174 <pwm_init>:

/************************** PWM *********************************/

void pwm_init(pwm_data_t* self)
{
    self->enabled_ch1 = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	8003      	strh	r3, [r0, #0]
    self->enabled_ch2 = 0;
}
 8005178:	4770      	bx	lr
	...

0800517c <pwm_set>:

void pwm_set(pwm_data_t* self, int ch, float freq, float duty)
{
 800517c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005180:	4698      	mov	r8, r3
    assert(ch >= 1 && ch <= 2);
 8005182:	1e4b      	subs	r3, r1, #1
 8005184:	2b01      	cmp	r3, #1
{
 8005186:	4605      	mov	r5, r0
 8005188:	460f      	mov	r7, r1
 800518a:	4616      	mov	r6, r2
    assert(ch >= 1 && ch <= 2);
 800518c:	d905      	bls.n	800519a <pwm_set+0x1e>
 800518e:	4b30      	ldr	r3, [pc, #192]	; (8005250 <pwm_set+0xd4>)
 8005190:	4a30      	ldr	r2, [pc, #192]	; (8005254 <pwm_set+0xd8>)
 8005192:	2192      	movs	r1, #146	; 0x92
 8005194:	4830      	ldr	r0, [pc, #192]	; (8005258 <pwm_set+0xdc>)
 8005196:	f002 fa01 	bl	800759c <__assert_func>
  CLEAR_BIT(TIMx->CCER, Channels);
 800519a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000

    // TODO Disable Counter ??
    LL_TIM_CC_DisableChannel(ULT_TIM_PWM, (ch == 1 ? LL_TIM_CHANNEL_CH1 : LL_TIM_CHANNEL_CH2));
 800519e:	2901      	cmp	r1, #1
 80051a0:	bf14      	ite	ne
 80051a2:	f06f 0310 	mvnne.w	r3, #16
 80051a6:	f06f 0301 	mvneq.w	r3, #1

    int prescaler = 1;
    int max_reload = pow(2, ULT_PWM_BITS);
    int pwm_osc = ULT_TIM_PWM_FREQ;
 80051aa:	482c      	ldr	r0, [pc, #176]	; (800525c <pwm_set+0xe0>)
    int prescaler = 1;
 80051ac:	2401      	movs	r4, #1
 80051ae:	4682      	mov	sl, r0
 80051b0:	6a11      	ldr	r1, [r2, #32]
 80051b2:	400b      	ands	r3, r1
 80051b4:	6213      	str	r3, [r2, #32]
    int reload;

    do
    {
        reload = (float)pwm_osc / freq;
 80051b6:	f7fb fd9b 	bl	8000cf0 <__aeabi_i2f>
 80051ba:	4631      	mov	r1, r6
 80051bc:	f7fb fea0 	bl	8000f00 <__aeabi_fdiv>
 80051c0:	f7fb ff3a 	bl	8001038 <__aeabi_f2iz>
        if (reload > max_reload)
 80051c4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
        reload = (float)pwm_osc / freq;
 80051c8:	4681      	mov	r9, r0
        if (reload > max_reload)
 80051ca:	dd0c      	ble.n	80051e6 <pwm_set+0x6a>
        {
            prescaler++;
 80051cc:	3401      	adds	r4, #1
            pwm_osc = ULT_TIM_PWM_FREQ / prescaler;
 80051ce:	fb9a f0f4 	sdiv	r0, sl, r4
 80051d2:	e7f0      	b.n	80051b6 <pwm_set+0x3a>
        if (self->enabled_ch1)
            LL_TIM_CC_EnableChannel(ULT_TIM_PWM, LL_TIM_CHANNEL_CH1);
    }
    else // if (param1 == 2)
    {
        self->duty_ch2 = real_duty;
 80051d4:	60e8      	str	r0, [r5, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80051d6:	639c      	str	r4, [r3, #56]	; 0x38
        LL_TIM_OC_SetCompareCH2(ULT_TIM_PWM, compare);
        if (self->enabled_ch2)
 80051d8:	786a      	ldrb	r2, [r5, #1]
 80051da:	2a00      	cmp	r2, #0
 80051dc:	d036      	beq.n	800524c <pwm_set+0xd0>
  SET_BIT(TIMx->CCER, Channels);
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	f042 0210 	orr.w	r2, r2, #16
 80051e4:	e031      	b.n	800524a <pwm_set+0xce>
    self->freq = (float)ULT_TIM_PWM_FREQ / (float)prescaler / (float)reload;
 80051e6:	f7fb fd83 	bl	8000cf0 <__aeabi_i2f>
 80051ea:	4606      	mov	r6, r0
 80051ec:	4620      	mov	r0, r4
 80051ee:	f7fb fd7f 	bl	8000cf0 <__aeabi_i2f>
 80051f2:	4601      	mov	r1, r0
 80051f4:	481a      	ldr	r0, [pc, #104]	; (8005260 <pwm_set+0xe4>)
 80051f6:	f7fb fe83 	bl	8000f00 <__aeabi_fdiv>
 80051fa:	4631      	mov	r1, r6
 80051fc:	f7fb fe80 	bl	8000f00 <__aeabi_fdiv>
  WRITE_REG(TIMx->ARR, AutoReload);
 8005200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    if (prescaler > 1)
 8005204:	2c01      	cmp	r4, #1
    self->freq = (float)ULT_TIM_PWM_FREQ / (float)prescaler / (float)reload;
 8005206:	6068      	str	r0, [r5, #4]
 8005208:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
    if (prescaler > 1)
 800520c:	d000      	beq.n	8005210 <pwm_set+0x94>
  WRITE_REG(TIMx->PSC, Prescaler);
 800520e:	629c      	str	r4, [r3, #40]	; 0x28
    int compare = (duty / (float)100) * reload;
 8005210:	4914      	ldr	r1, [pc, #80]	; (8005264 <pwm_set+0xe8>)
 8005212:	4640      	mov	r0, r8
 8005214:	f7fb fe74 	bl	8000f00 <__aeabi_fdiv>
 8005218:	4631      	mov	r1, r6
 800521a:	f7fb fdbd 	bl	8000d98 <__aeabi_fmul>
 800521e:	f7fb ff0b 	bl	8001038 <__aeabi_f2iz>
 8005222:	4604      	mov	r4, r0
    float real_duty = ((float)compare / (float)reload) * (float)100;
 8005224:	f7fb fd64 	bl	8000cf0 <__aeabi_i2f>
 8005228:	4631      	mov	r1, r6
 800522a:	f7fb fe69 	bl	8000f00 <__aeabi_fdiv>
 800522e:	490d      	ldr	r1, [pc, #52]	; (8005264 <pwm_set+0xe8>)
 8005230:	f7fb fdb2 	bl	8000d98 <__aeabi_fmul>
    if (ch == 1)
 8005234:	2f01      	cmp	r7, #1
 8005236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800523a:	d1cb      	bne.n	80051d4 <pwm_set+0x58>
        self->duty_ch1 = real_duty;
 800523c:	60a8      	str	r0, [r5, #8]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800523e:	635c      	str	r4, [r3, #52]	; 0x34
        if (self->enabled_ch1)
 8005240:	782a      	ldrb	r2, [r5, #0]
 8005242:	b11a      	cbz	r2, 800524c <pwm_set+0xd0>
  SET_BIT(TIMx->CCER, Channels);
 8005244:	6a1a      	ldr	r2, [r3, #32]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	621a      	str	r2, [r3, #32]
            LL_TIM_CC_EnableChannel(ULT_TIM_PWM, LL_TIM_CHANNEL_CH2);
    }

    // TODO EnableCounter ??
}
 800524c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005250:	0800a1c9 	.word	0x0800a1c9
 8005254:	0800a1b8 	.word	0x0800a1b8
 8005258:	0800a1dc 	.word	0x0800a1dc
 800525c:	02255100 	.word	0x02255100
 8005260:	4c095440 	.word	0x4c095440
 8005264:	42c80000 	.word	0x42c80000

08005268 <trig_init>:

/************************** trigger *********************************/

void trig_init(trig_data_t* self)
{
    self->ignore = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	72c3      	strb	r3, [r0, #11]
    self->ready = 0;
 800526c:	7303      	strb	r3, [r0, #12]
    self->cntr = 0;
 800526e:	7343      	strb	r3, [r0, #13]
 8005270:	7383      	strb	r3, [r0, #14]
 8005272:	73c3      	strb	r3, [r0, #15]
 8005274:	7403      	strb	r3, [r0, #16]
    self->all_cntr = 0;
 8005276:	7443      	strb	r3, [r0, #17]
 8005278:	7483      	strb	r3, [r0, #18]
 800527a:	74c3      	strb	r3, [r0, #19]
 800527c:	7503      	strb	r3, [r0, #20]
    self->pos_frst = 0;
 800527e:	7543      	strb	r3, [r0, #21]
 8005280:	7583      	strb	r3, [r0, #22]
 8005282:	75c3      	strb	r3, [r0, #23]
 8005284:	7603      	strb	r3, [r0, #24]
    self->pos_trig = 0;
 8005286:	7643      	strb	r3, [r0, #25]
 8005288:	7683      	strb	r3, [r0, #26]
 800528a:	76c3      	strb	r3, [r0, #27]
 800528c:	7703      	strb	r3, [r0, #28]
    self->pos_last = 0;
 800528e:	7743      	strb	r3, [r0, #29]
 8005290:	7783      	strb	r3, [r0, #30]
 8005292:	77c3      	strb	r3, [r0, #31]
 8005294:	f880 3020 	strb.w	r3, [r0, #32]
    self->pos_diff = 0;
 8005298:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800529c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80052a0:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 80052a4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    self->uwtick_last = 0;
 80052a8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 80052ac:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
 80052b0:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
 80052b4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    self->pretrig_cntr = 0;
 80052b8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80052bc:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 80052c0:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
 80052c4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
}
 80052c8:	4770      	bx	lr
	...

080052cc <trig_set>:

void trig_set(trig_data_t* self, ADC_TypeDef* adc, uint32_t ch, uint16_t level, enum trig_edge edge, enum trig_mode mode)
{
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(level > 0 && level < 4095);
 80052ce:	f640 75fd 	movw	r5, #4093	; 0xffd
 80052d2:	1e5c      	subs	r4, r3, #1
 80052d4:	b2a4      	uxth	r4, r4
 80052d6:	42ac      	cmp	r4, r5
{
 80052d8:	f89d 6018 	ldrb.w	r6, [sp, #24]
    assert(level > 0 && level < 4095);
 80052dc:	d905      	bls.n	80052ea <trig_set+0x1e>
 80052de:	4b15      	ldr	r3, [pc, #84]	; (8005334 <trig_set+0x68>)
 80052e0:	4a15      	ldr	r2, [pc, #84]	; (8005338 <trig_set+0x6c>)
 80052e2:	21d3      	movs	r1, #211	; 0xd3
 80052e4:	4815      	ldr	r0, [pc, #84]	; (800533c <trig_set+0x70>)
 80052e6:	f002 f959 	bl	800759c <__assert_func>
 80052ea:	4d15      	ldr	r5, [pc, #84]	; (8005340 <trig_set+0x74>)
  MODIFY_REG(ADCx->CR1,
 80052ec:	684c      	ldr	r4, [r1, #4]
    self->val = level;
 80052ee:	f8c0 3007 	str.w	r3, [r0, #7]
 80052f2:	402c      	ands	r4, r5

    if (ch == LL_ADC_AWD_DISABLE)
 80052f4:	b90a      	cbnz	r2, 80052fa <trig_set+0x2e>
 80052f6:	604c      	str	r4, [r1, #4]
    }

    self->mode = mode;
    self->edge = edge;
    self->ch = ch;
}
 80052f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052fa:	4314      	orrs	r4, r2
 80052fc:	604c      	str	r4, [r1, #4]
 80052fe:	4f11      	ldr	r7, [pc, #68]	; (8005344 <trig_set+0x78>)
  MODIFY_REG(*preg,
 8005300:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    if (edge == RISING)
 8005302:	b966      	cbnz	r6, 800531e <trig_set+0x52>
 8005304:	403d      	ands	r5, r7
 8005306:	432b      	orrs	r3, r5
 8005308:	624b      	str	r3, [r1, #36]	; 0x24
 800530a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800530c:	403c      	ands	r4, r7
 800530e:	628c      	str	r4, [r1, #40]	; 0x28
    self->mode = mode;
 8005310:	f89d 301c 	ldrb.w	r3, [sp, #28]
    self->edge = edge;
 8005314:	7086      	strb	r6, [r0, #2]
    self->mode = mode;
 8005316:	7043      	strb	r3, [r0, #1]
    self->ch = ch;
 8005318:	f8c0 2003 	str.w	r2, [r0, #3]
 800531c:	e7ec      	b.n	80052f8 <trig_set+0x2c>
 800531e:	ea6f 3515 	mvn.w	r5, r5, lsr #12
 8005322:	ea6f 3505 	mvn.w	r5, r5, lsl #12
 8005326:	624d      	str	r5, [r1, #36]	; 0x24
 8005328:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800532a:	403c      	ands	r4, r7
 800532c:	4323      	orrs	r3, r4
 800532e:	628b      	str	r3, [r1, #40]	; 0x28
 8005330:	e7ee      	b.n	8005310 <trig_set+0x44>
 8005332:	bf00      	nop
 8005334:	0800a20b 	.word	0x0800a20b
 8005338:	0800a1c0 	.word	0x0800a1c0
 800533c:	0800a1dc 	.word	0x0800a1dc
 8005340:	ff3ffde0 	.word	0xff3ffde0
 8005344:	fffff000 	.word	0xfffff000

08005348 <daq_init>:

/************************** DAQ *********************************/

void daq_init(daq_data_t* self)
{
    self->fs = 1000;
 8005348:	f06f 0217 	mvn.w	r2, #23
 800534c:	7402      	strb	r2, [r0, #16]
 800534e:	2203      	movs	r2, #3
 8005350:	7442      	strb	r2, [r0, #17]
    self->mem = 500;
 8005352:	f06f 020b 	mvn.w	r2, #11
    self->fs = 1000;
 8005356:	2300      	movs	r3, #0
    self->mem = 500;
 8005358:	7502      	strb	r2, [r0, #20]
 800535a:	2201      	movs	r2, #1
    self->fs = 1000;
 800535c:	7483      	strb	r3, [r0, #18]
 800535e:	74c3      	strb	r3, [r0, #19]
    self->mem = 500;
 8005360:	7542      	strb	r2, [r0, #21]
    self->bits = B12;
 8005362:	7583      	strb	r3, [r0, #22]

    self->buff1 = NULL;
 8005364:	7003      	strb	r3, [r0, #0]
 8005366:	7043      	strb	r3, [r0, #1]
 8005368:	7083      	strb	r3, [r0, #2]
 800536a:	70c3      	strb	r3, [r0, #3]
    self->buff2 = NULL;
 800536c:	7103      	strb	r3, [r0, #4]
 800536e:	7143      	strb	r3, [r0, #5]
 8005370:	7183      	strb	r3, [r0, #6]
 8005372:	71c3      	strb	r3, [r0, #7]

    self->enabled = 0;
 8005374:	75c3      	strb	r3, [r0, #23]
}
 8005376:	4770      	bx	lr

08005378 <daq_enable>:
{

}

void daq_enable(daq_data_t* self, uint8_t mode, uint8_t enable)
{
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <daq_enable+0x18>)
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800537a:	6899      	ldr	r1, [r3, #8]
    //if (mode == 0 || mode == 2)
    //{
#ifdef ULT_ADC1
    if (enable)
 800537c:	b122      	cbz	r2, 8005388 <daq_enable+0x10>
 800537e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  CLEAR_BIT(ADCx->CR2, ADC_CR2_EXTTRIG);
 8005382:	6099      	str	r1, [r3, #8]
        LL_ADC_REG_StartConversionExtTrig(ADC2, LL_ADC_REG_TRIG_EXT_RISING);
    else
        LL_ADC_REG_StopConversionExtTrig(ADC2);
#endif
    //}
    self->enabled = enable;
 8005384:	75c2      	strb	r2, [r0, #23]
}
 8005386:	4770      	bx	lr
 8005388:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 800538c:	e7f9      	b.n	8005382 <daq_enable+0xa>
 800538e:	bf00      	nop
 8005390:	40012400 	.word	0x40012400

08005394 <ULT_System_Mode>:
scpi_result_t ULT_System_Mode(scpi_t * context)
{
    char buffer[100];
    size_t copy_len;

    if (!SCPI_ParamCopyText(context, buffer, sizeof (buffer), &copy_len, FALSE))
 8005394:	2300      	movs	r3, #0
{
 8005396:	b510      	push	{r4, lr}
 8005398:	b09c      	sub	sp, #112	; 0x70
    if (!SCPI_ParamCopyText(context, buffer, sizeof (buffer), &copy_len, FALSE))
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	2264      	movs	r2, #100	; 0x64
 800539e:	ab02      	add	r3, sp, #8
 80053a0:	a903      	add	r1, sp, #12
{
 80053a2:	4604      	mov	r4, r0
    if (!SCPI_ParamCopyText(context, buffer, sizeof (buffer), &copy_len, FALSE))
 80053a4:	f001 fc1c 	bl	8006be0 <SCPI_ParamCopyText>
 80053a8:	b938      	cbnz	r0, 80053ba <ULT_System_Mode+0x26>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 80053aa:	f06f 016c 	mvn.w	r1, #108	; 0x6c
        syst.mode = VM;
    else if (strcmp(buffer, "LA") == 0)
        syst.mode = LA;
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 80053ae:	4620      	mov	r0, r4
 80053b0:	f000 fb3c 	bl	8005a2c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 80053b4:	f04f 30ff 	mov.w	r0, #4294967295
 80053b8:	e010      	b.n	80053dc <ULT_System_Mode+0x48>
    if (strcmp(buffer, "SCOPE") == 0)
 80053ba:	490f      	ldr	r1, [pc, #60]	; (80053f8 <ULT_System_Mode+0x64>)
 80053bc:	a803      	add	r0, sp, #12
 80053be:	f7fa fec7 	bl	8000150 <strcmp>
 80053c2:	b918      	cbnz	r0, 80053cc <ULT_System_Mode+0x38>
        syst.mode = SCOPE;
 80053c4:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <ULT_System_Mode+0x68>)
 80053c6:	7018      	strb	r0, [r3, #0]
    }


    return SCPI_RES_OK;
 80053c8:	2001      	movs	r0, #1
 80053ca:	e007      	b.n	80053dc <ULT_System_Mode+0x48>
    else if (strcmp(buffer, "VM") == 0)
 80053cc:	490c      	ldr	r1, [pc, #48]	; (8005400 <ULT_System_Mode+0x6c>)
 80053ce:	a803      	add	r0, sp, #12
 80053d0:	f7fa febe 	bl	8000150 <strcmp>
 80053d4:	b920      	cbnz	r0, 80053e0 <ULT_System_Mode+0x4c>
        syst.mode = VM;
 80053d6:	2001      	movs	r0, #1
 80053d8:	4b08      	ldr	r3, [pc, #32]	; (80053fc <ULT_System_Mode+0x68>)
 80053da:	7018      	strb	r0, [r3, #0]
}
 80053dc:	b01c      	add	sp, #112	; 0x70
 80053de:	bd10      	pop	{r4, pc}
    else if (strcmp(buffer, "LA") == 0)
 80053e0:	4908      	ldr	r1, [pc, #32]	; (8005404 <ULT_System_Mode+0x70>)
 80053e2:	a803      	add	r0, sp, #12
 80053e4:	f7fa feb4 	bl	8000150 <strcmp>
 80053e8:	b918      	cbnz	r0, 80053f2 <ULT_System_Mode+0x5e>
        syst.mode = LA;
 80053ea:	2202      	movs	r2, #2
 80053ec:	4b03      	ldr	r3, [pc, #12]	; (80053fc <ULT_System_Mode+0x68>)
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	e7ea      	b.n	80053c8 <ULT_System_Mode+0x34>
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 80053f2:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 80053f6:	e7da      	b.n	80053ae <ULT_System_Mode+0x1a>
 80053f8:	0800a230 	.word	0x0800a230
 80053fc:	200022a0 	.word	0x200022a0
 8005400:	0800a236 	.word	0x0800a236
 8005404:	0800a239 	.word	0x0800a239

08005408 <ULT_System_ModeQ>:

scpi_result_t ULT_System_ModeQ(scpi_t * context)
{
 8005408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    char buff[10];
    int len;

    if (syst.mode == SCOPE)
 800540a:	4b0c      	ldr	r3, [pc, #48]	; (800543c <ULT_System_ModeQ+0x34>)
{
 800540c:	4604      	mov	r4, r0
    if (syst.mode == SCOPE)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	b95b      	cbnz	r3, 800542a <ULT_System_ModeQ+0x22>
        len = sprintf(buff, "\"SCOPE\"");
 8005412:	490b      	ldr	r1, [pc, #44]	; (8005440 <ULT_System_ModeQ+0x38>)
 8005414:	a801      	add	r0, sp, #4
 8005416:	f002 fd1c 	bl	8007e52 <strcpy>
 800541a:	2207      	movs	r2, #7
    else if (syst.mode == VM)
        len = sprintf(buff, "\"VM\"");
    else
        len = sprintf(buff, "\"LA\"");

    SCPI_ResultCharacters(context, buff, len);
 800541c:	a901      	add	r1, sp, #4
 800541e:	4620      	mov	r0, r4
 8005420:	f001 f99e 	bl	8006760 <SCPI_ResultCharacters>

    return SCPI_RES_OK;
}
 8005424:	2001      	movs	r0, #1
 8005426:	b004      	add	sp, #16
 8005428:	bd10      	pop	{r4, pc}
    else if (syst.mode == VM)
 800542a:	2b01      	cmp	r3, #1
        len = sprintf(buff, "\"VM\"");
 800542c:	bf0c      	ite	eq
 800542e:	4905      	ldreq	r1, [pc, #20]	; (8005444 <ULT_System_ModeQ+0x3c>)
        len = sprintf(buff, "\"LA\"");
 8005430:	4905      	ldrne	r1, [pc, #20]	; (8005448 <ULT_System_ModeQ+0x40>)
 8005432:	a801      	add	r0, sp, #4
 8005434:	f002 fd0d 	bl	8007e52 <strcpy>
 8005438:	2204      	movs	r2, #4
 800543a:	e7ef      	b.n	800541c <ULT_System_ModeQ+0x14>
 800543c:	200022a0 	.word	0x200022a0
 8005440:	0800a23c 	.word	0x0800a23c
 8005444:	0800a244 	.word	0x0800a244
 8005448:	0800a249 	.word	0x0800a249

0800544c <ULT_VM_ReadAll>:

/************************* [VM Actions] *************************/

scpi_result_t ULT_VM_ReadAll(scpi_t * context)
{
 800544c:	b570      	push	{r4, r5, r6, lr}
    //char f1[10];
    //sprintFast(f1, " %s M", , 0);
    if (syst.mode == VM)
 800544e:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <ULT_VM_ReadAll+0x5c>)
{
 8005450:	b09e      	sub	sp, #120	; 0x78
    if (syst.mode == VM)
 8005452:	781c      	ldrb	r4, [r3, #0]
{
 8005454:	4605      	mov	r5, r0
    if (syst.mode == VM)
 8005456:	2c01      	cmp	r4, #1
 8005458:	d11e      	bne.n	8005498 <ULT_VM_ReadAll+0x4c>
        //int ch3 = (3300 * raw_cal * raw_ch3) / (raw_vref * 4095);
        //int ch4 = (3300 * raw_cal * raw_ch4) / (raw_vref * 4095);

        //int pos = ADC1_BUFF_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_1);

        int vcc = 4095 * 1200 / buff_adc1[0];
 800545a:	4814      	ldr	r0, [pc, #80]	; (80054ac <ULT_VM_ReadAll+0x60>)
 800545c:	4914      	ldr	r1, [pc, #80]	; (80054b0 <ULT_VM_ReadAll+0x64>)
 800545e:	8803      	ldrh	r3, [r0, #0]
        int ch1 = vcc * buff_adc1[1] / 4095;
 8005460:	8842      	ldrh	r2, [r0, #2]
        int vcc = 4095 * 1200 / buff_adc1[0];
 8005462:	fb91 f1f3 	sdiv	r1, r1, r3
        int ch2 = vcc * buff_adc1[2] / 4095;
 8005466:	8883      	ldrh	r3, [r0, #4]
 8005468:	f640 76ff 	movw	r6, #4095	; 0xfff
 800546c:	434b      	muls	r3, r1
        int ch1 = vcc * buff_adc1[1] / 4095;
 800546e:	434a      	muls	r2, r1
        //int ch3 = vref * raw_ch3 / 4095;
        //int ch4 = vref * raw_ch4 / 4095;

        char buff[100];
        int len = sprintf(buff, "\"%hu,%hu,%hu,%hu,%u\"", ch1, ch2, 0, 0, vcc);
 8005470:	9102      	str	r1, [sp, #8]
 8005472:	2100      	movs	r1, #0
 8005474:	fb93 f3f6 	sdiv	r3, r3, r6
 8005478:	e9cd 1100 	strd	r1, r1, [sp]
 800547c:	fb92 f2f6 	sdiv	r2, r2, r6
 8005480:	490c      	ldr	r1, [pc, #48]	; (80054b4 <ULT_VM_ReadAll+0x68>)
 8005482:	a805      	add	r0, sp, #20
 8005484:	f002 fcb8 	bl	8007df8 <siprintf>

        SCPI_ResultCharacters(context, buff, len);
 8005488:	a905      	add	r1, sp, #20
 800548a:	4602      	mov	r2, r0
 800548c:	4628      	mov	r0, r5
 800548e:	f001 f967 	bl	8006760 <SCPI_ResultCharacters>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }


    return SCPI_RES_OK;
 8005492:	4620      	mov	r0, r4
}
 8005494:	b01e      	add	sp, #120	; 0x78
 8005496:	bd70      	pop	{r4, r5, r6, pc}
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8005498:	f46f 7195 	mvn.w	r1, #298	; 0x12a
 800549c:	f000 fac6 	bl	8005a2c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295
 80054a4:	e7f6      	b.n	8005494 <ULT_VM_ReadAll+0x48>
 80054a6:	bf00      	nop
 80054a8:	200022a0 	.word	0x200022a0
 80054ac:	200016be 	.word	0x200016be
 80054b0:	004afb50 	.word	0x004afb50
 80054b4:	0800a24e 	.word	0x0800a24e

080054b8 <ULT_SCOPE_ReadAll>:

/************************* [SCOPE Actions] *************************/

scpi_result_t ULT_SCOPE_ReadAll(scpi_t * context)
{
 80054b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (syst.mode == SCOPE)
 80054bc:	4b34      	ldr	r3, [pc, #208]	; (8005590 <ULT_SCOPE_ReadAll+0xd8>)
{
 80054be:	4683      	mov	fp, r0
    if (syst.mode == SCOPE)
 80054c0:	781d      	ldrb	r5, [r3, #0]
 80054c2:	2d00      	cmp	r5, #0
 80054c4:	d157      	bne.n	8005576 <ULT_SCOPE_ReadAll+0xbe>
    {
        if (trig.ready == 0)
 80054c6:	4e33      	ldr	r6, [pc, #204]	; (8005594 <ULT_SCOPE_ReadAll+0xdc>)
 80054c8:	7b33      	ldrb	r3, [r6, #12]
 80054ca:	b92b      	cbnz	r3, 80054d8 <ULT_SCOPE_ReadAll+0x20>
        {
            SCPI_ResultText(context, "0");
 80054cc:	4932      	ldr	r1, [pc, #200]	; (8005598 <ULT_SCOPE_ReadAll+0xe0>)
 80054ce:	f001 f95d 	bl	800678c <SCPI_ResultText>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
        return SCPI_RES_ERR;
    }


    return SCPI_RES_OK;
 80054d2:	2001      	movs	r0, #1
}
 80054d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (k = 0, j = 0, i = trig.pos_frst; k < ADC_BUFF_SIZE; k++, i++)
 80054d8:	f240 57dc 	movw	r7, #1500	; 0x5dc
 80054dc:	f8d6 4015 	ldr.w	r4, [r6, #21]
        float vcc = 1494;
 80054e0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80055ac <ULT_SCOPE_ReadAll+0xf4>
 80054e4:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80055b0 <ULT_SCOPE_ReadAll+0xf8>
            buff_adc_out[j++] = (char)LO_BYTE16(val);
 80054e8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80055a8 <ULT_SCOPE_ReadAll+0xf0>
            if (i >= ADC_BUFF_SIZE)
 80054ec:	f240 53db 	movw	r3, #1499	; 0x5db
 80054f0:	429c      	cmp	r4, r3
 80054f2:	dc25      	bgt.n	8005540 <ULT_SCOPE_ReadAll+0x88>
            if (i == 0 || i % 3 == 0)
 80054f4:	b134      	cbz	r4, 8005504 <ULT_SCOPE_ReadAll+0x4c>
 80054f6:	2303      	movs	r3, #3
 80054f8:	fb94 f3f3 	sdiv	r3, r4, r3
 80054fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005500:	429c      	cmp	r4, r3
 8005502:	d11f      	bne.n	8005544 <ULT_SCOPE_ReadAll+0x8c>
                vcc = buff_adc1[i];
 8005504:	f839 0014 	ldrh.w	r0, [r9, r4, lsl #1]
 8005508:	f7fb fbee 	bl	8000ce8 <__aeabi_ui2f>
 800550c:	4680      	mov	r8, r0
        for (k = 0, j = 0, i = trig.pos_frst; k < ADC_BUFF_SIZE; k++, i++)
 800550e:	3f01      	subs	r7, #1
 8005510:	f104 0401 	add.w	r4, r4, #1
 8005514:	d1ea      	bne.n	80054ec <ULT_SCOPE_ReadAll+0x34>
  MODIFY_REG(ADCx->CR1,
 8005516:	4921      	ldr	r1, [pc, #132]	; (800559c <ULT_SCOPE_ReadAll+0xe4>)
        trig.ready = 0;
 8005518:	7337      	strb	r7, [r6, #12]
 800551a:	6848      	ldr	r0, [r1, #4]
 800551c:	4a20      	ldr	r2, [pc, #128]	; (80055a0 <ULT_SCOPE_ReadAll+0xe8>)
        LL_ADC_SetAnalogWDMonitChannels(ADC1, trig.ch);
 800551e:	f8d6 3003 	ldr.w	r3, [r6, #3]
 8005522:	4002      	ands	r2, r0
 8005524:	4313      	orrs	r3, r2
 8005526:	604b      	str	r3, [r1, #4]
        daq_enable(&daq, syst.mode, 1);
 8005528:	2201      	movs	r2, #1
 800552a:	4639      	mov	r1, r7
 800552c:	481d      	ldr	r0, [pc, #116]	; (80055a4 <ULT_SCOPE_ReadAll+0xec>)
 800552e:	f7ff ff23 	bl	8005378 <daq_enable>
        SCPI_ResultArbitraryBlock(context, buff_adc_out, len);
 8005532:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005536:	491c      	ldr	r1, [pc, #112]	; (80055a8 <ULT_SCOPE_ReadAll+0xf0>)
 8005538:	4658      	mov	r0, fp
 800553a:	f001 f9ff 	bl	800693c <SCPI_ResultArbitraryBlock>
 800553e:	e7c8      	b.n	80054d2 <ULT_SCOPE_ReadAll+0x1a>
                i = 0;
 8005540:	2400      	movs	r4, #0
 8005542:	e7df      	b.n	8005504 <ULT_SCOPE_ReadAll+0x4c>
            uint16_t val = ULT_ADC_VREF_CAL2 * ((float)buff_adc1[i] / vcc); // 0.8 mV precision rounded (output in mV*10)
 8005544:	f839 0014 	ldrh.w	r0, [r9, r4, lsl #1]
 8005548:	f7fb fbce 	bl	8000ce8 <__aeabi_ui2f>
 800554c:	4641      	mov	r1, r8
 800554e:	f7fb fcd7 	bl	8000f00 <__aeabi_fdiv>
 8005552:	f7fa ff73 	bl	800043c <__aeabi_f2d>
 8005556:	a30c      	add	r3, pc, #48	; (adr r3, 8005588 <ULT_SCOPE_ReadAll+0xd0>)
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f7fa ffc6 	bl	80004ec <__aeabi_dmul>
 8005560:	f7fb fa9c 	bl	8000a9c <__aeabi_d2uiz>
 8005564:	b280      	uxth	r0, r0
            buff_adc_out[j++] = (char)LO_BYTE16(val);
 8005566:	f80a 0005 	strb.w	r0, [sl, r5]
 800556a:	1c6b      	adds	r3, r5, #1
            buff_adc_out[j++] = (char)HI_BYTE16(val);
 800556c:	0a00      	lsrs	r0, r0, #8
 800556e:	f80a 0003 	strb.w	r0, [sl, r3]
 8005572:	3502      	adds	r5, #2
 8005574:	e7cb      	b.n	800550e <ULT_SCOPE_ReadAll+0x56>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8005576:	f46f 7195 	mvn.w	r1, #298	; 0x12a
 800557a:	f000 fa57 	bl	8005a2c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800557e:	f04f 30ff 	mov.w	r0, #4294967295
 8005582:	e7a7      	b.n	80054d4 <ULT_SCOPE_ReadAll+0x1c>
 8005584:	f3af 8000 	nop.w
 8005588:	00000000 	.word	0x00000000
 800558c:	40c77000 	.word	0x40c77000
 8005590:	200022a0 	.word	0x200022a0
 8005594:	20001690 	.word	0x20001690
 8005598:	0800a3d3 	.word	0x0800a3d3
 800559c:	40012400 	.word	0x40012400
 80055a0:	ff3ffde0 	.word	0xff3ffde0
 80055a4:	20002276 	.word	0x20002276
 80055a8:	200022b4 	.word	0x200022b4
 80055ac:	44bac000 	.word	0x44bac000
 80055b0:	200016be 	.word	0x200016be

080055b4 <ULT_PWM_SetChQ>:

/************************* [PWM Actions] *************************/

scpi_result_t ULT_PWM_SetChQ(scpi_t * context)
{
 80055b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b6:	b093      	sub	sp, #76	; 0x4c

    char buff[30];
    char buff_freq[10];
    char buff_duty[10];

    if (!SCPI_ParamDouble(context, &param1d, TRUE))
 80055b8:	2201      	movs	r2, #1
 80055ba:	a902      	add	r1, sp, #8
{
 80055bc:	4604      	mov	r4, r0
    if (!SCPI_ParamDouble(context, &param1d, TRUE))
 80055be:	f001 faad 	bl	8006b1c <SCPI_ParamDouble>
 80055c2:	b940      	cbnz	r0, 80055d6 <ULT_PWM_SetChQ+0x22>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 80055c4:	f06f 016c 	mvn.w	r1, #108	; 0x6c
        real_duty = pwm.duty_ch2;
        enabled = pwm.enabled_ch2;
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 fa2f 	bl	8005a2c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 80055ce:	f04f 30ff 	mov.w	r0, #4294967295
    int len = sprintf(buff, "\"%d,%s,%s\"", enabled, buff_freq, buff_duty);

    SCPI_ResultCharacters(context, buff, len);

    return SCPI_RES_OK;
}
 80055d2:	b013      	add	sp, #76	; 0x4c
 80055d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    param1 = param1d;
 80055d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055da:	f7fb fa37 	bl	8000a4c <__aeabi_d2iz>
    float real_freq = pwm.freq;
 80055de:	4b14      	ldr	r3, [pc, #80]	; (8005630 <ULT_PWM_SetChQ+0x7c>)
    if (param1 == 1)
 80055e0:	2801      	cmp	r0, #1
    float real_freq = pwm.freq;
 80055e2:	685a      	ldr	r2, [r3, #4]
    if (param1 == 1)
 80055e4:	d11b      	bne.n	800561e <ULT_PWM_SetChQ+0x6a>
        real_duty = pwm.duty_ch1;
 80055e6:	689f      	ldr	r7, [r3, #8]
        enabled = pwm.enabled_ch1;
 80055e8:	781d      	ldrb	r5, [r3, #0]
    sprint_fast(buff_freq, "%s", real_freq, 5);
 80055ea:	2305      	movs	r3, #5
 80055ec:	4911      	ldr	r1, [pc, #68]	; (8005634 <ULT_PWM_SetChQ+0x80>)
 80055ee:	a804      	add	r0, sp, #16
    sprint_fast(buff_duty, "%s", real_duty, 5);
 80055f0:	ae07      	add	r6, sp, #28
    sprint_fast(buff_freq, "%s", real_freq, 5);
 80055f2:	f000 f8d9 	bl	80057a8 <sprint_fast>
    sprint_fast(buff_duty, "%s", real_duty, 5);
 80055f6:	2305      	movs	r3, #5
 80055f8:	463a      	mov	r2, r7
 80055fa:	490e      	ldr	r1, [pc, #56]	; (8005634 <ULT_PWM_SetChQ+0x80>)
 80055fc:	4630      	mov	r0, r6
 80055fe:	f000 f8d3 	bl	80057a8 <sprint_fast>
    int len = sprintf(buff, "\"%d,%s,%s\"", enabled, buff_freq, buff_duty);
 8005602:	ab04      	add	r3, sp, #16
 8005604:	462a      	mov	r2, r5
 8005606:	490c      	ldr	r1, [pc, #48]	; (8005638 <ULT_PWM_SetChQ+0x84>)
 8005608:	9600      	str	r6, [sp, #0]
 800560a:	a80a      	add	r0, sp, #40	; 0x28
 800560c:	f002 fbf4 	bl	8007df8 <siprintf>
    SCPI_ResultCharacters(context, buff, len);
 8005610:	a90a      	add	r1, sp, #40	; 0x28
 8005612:	4602      	mov	r2, r0
 8005614:	4620      	mov	r0, r4
 8005616:	f001 f8a3 	bl	8006760 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 800561a:	2001      	movs	r0, #1
 800561c:	e7d9      	b.n	80055d2 <ULT_PWM_SetChQ+0x1e>
    else if (param1 == 2)
 800561e:	2802      	cmp	r0, #2
 8005620:	d102      	bne.n	8005628 <ULT_PWM_SetChQ+0x74>
        real_duty = pwm.duty_ch2;
 8005622:	68df      	ldr	r7, [r3, #12]
        enabled = pwm.enabled_ch2;
 8005624:	785d      	ldrb	r5, [r3, #1]
 8005626:	e7e0      	b.n	80055ea <ULT_PWM_SetChQ+0x36>
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8005628:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800562c:	e7cc      	b.n	80055c8 <ULT_PWM_SetChQ+0x14>
 800562e:	bf00      	nop
 8005630:	200022a4 	.word	0x200022a4
 8005634:	0800a41c 	.word	0x0800a41c
 8005638:	0800a225 	.word	0x0800a225
 800563c:	00000000 	.word	0x00000000

08005640 <ULT_PWM_SetCh>:

scpi_result_t ULT_PWM_SetCh(scpi_t * context)
{
 8005640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005644:	b087      	sub	sp, #28
    int param1;
    double param1d, param2, param3;

    if (!SCPI_ParamDouble(context, &param1d, TRUE) ||
 8005646:	2201      	movs	r2, #1
 8005648:	4669      	mov	r1, sp
{
 800564a:	4604      	mov	r4, r0
    if (!SCPI_ParamDouble(context, &param1d, TRUE) ||
 800564c:	f001 fa66 	bl	8006b1c <SCPI_ParamDouble>
 8005650:	b948      	cbnz	r0, 8005666 <ULT_PWM_SetCh+0x26>
        !SCPI_ParamDouble(context, &param2, TRUE) ||
        !SCPI_ParamDouble(context, &param3, TRUE))
    {
        SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8005652:	f06f 016c 	mvn.w	r1, #108	; 0x6c
    param1 = param1d;
    if (param1 < 1 || param1 > 2 ||
        (param2 <= 0 || param2 > 12000000) ||
        (param3 < 0 || param3 > 100))
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8005656:	4620      	mov	r0, r4
 8005658:	f000 f9e8 	bl	8005a2c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800565c:	f04f 30ff 	mov.w	r0, #4294967295
    }

    pwm_set(&pwm, param1, param2, param3);

    return SCPI_RES_OK;
}
 8005660:	b007      	add	sp, #28
 8005662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        !SCPI_ParamDouble(context, &param2, TRUE) ||
 8005666:	2201      	movs	r2, #1
 8005668:	a902      	add	r1, sp, #8
 800566a:	4620      	mov	r0, r4
 800566c:	f001 fa56 	bl	8006b1c <SCPI_ParamDouble>
    if (!SCPI_ParamDouble(context, &param1d, TRUE) ||
 8005670:	2800      	cmp	r0, #0
 8005672:	d0ee      	beq.n	8005652 <ULT_PWM_SetCh+0x12>
        !SCPI_ParamDouble(context, &param3, TRUE))
 8005674:	2201      	movs	r2, #1
 8005676:	a904      	add	r1, sp, #16
 8005678:	4620      	mov	r0, r4
 800567a:	f001 fa4f 	bl	8006b1c <SCPI_ParamDouble>
        !SCPI_ParamDouble(context, &param2, TRUE) ||
 800567e:	2800      	cmp	r0, #0
 8005680:	d0e7      	beq.n	8005652 <ULT_PWM_SetCh+0x12>
    param1 = param1d;
 8005682:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005686:	f7fb f9e1 	bl	8000a4c <__aeabi_d2iz>
    if (param1 < 1 || param1 > 2 ||
 800568a:	1e43      	subs	r3, r0, #1
 800568c:	2b01      	cmp	r3, #1
    param1 = param1d;
 800568e:	4605      	mov	r5, r0
    if (param1 < 1 || param1 > 2 ||
 8005690:	d820      	bhi.n	80056d4 <ULT_PWM_SetCh+0x94>
        (param2 <= 0 || param2 > 12000000) ||
 8005692:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    if (param1 < 1 || param1 > 2 ||
 8005696:	2200      	movs	r2, #0
 8005698:	2300      	movs	r3, #0
 800569a:	4630      	mov	r0, r6
 800569c:	4639      	mov	r1, r7
 800569e:	f7fb f9a1 	bl	80009e4 <__aeabi_dcmple>
 80056a2:	b9b8      	cbnz	r0, 80056d4 <ULT_PWM_SetCh+0x94>
        (param2 <= 0 || param2 > 12000000) ||
 80056a4:	a316      	add	r3, pc, #88	; (adr r3, 8005700 <ULT_PWM_SetCh+0xc0>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	4630      	mov	r0, r6
 80056ac:	4639      	mov	r1, r7
 80056ae:	f7fb f9ad 	bl	8000a0c <__aeabi_dcmpgt>
 80056b2:	b978      	cbnz	r0, 80056d4 <ULT_PWM_SetCh+0x94>
        (param3 < 0 || param3 > 100))
 80056b4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
        (param2 <= 0 || param2 > 12000000) ||
 80056b8:	2200      	movs	r2, #0
 80056ba:	2300      	movs	r3, #0
 80056bc:	4640      	mov	r0, r8
 80056be:	4649      	mov	r1, r9
 80056c0:	f7fb f986 	bl	80009d0 <__aeabi_dcmplt>
 80056c4:	b930      	cbnz	r0, 80056d4 <ULT_PWM_SetCh+0x94>
        (param3 < 0 || param3 > 100))
 80056c6:	2200      	movs	r2, #0
 80056c8:	4b0f      	ldr	r3, [pc, #60]	; (8005708 <ULT_PWM_SetCh+0xc8>)
 80056ca:	4640      	mov	r0, r8
 80056cc:	4649      	mov	r1, r9
 80056ce:	f7fb f99d 	bl	8000a0c <__aeabi_dcmpgt>
 80056d2:	b110      	cbz	r0, 80056da <ULT_PWM_SetCh+0x9a>
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 80056d4:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 80056d8:	e7bd      	b.n	8005656 <ULT_PWM_SetCh+0x16>
    pwm_set(&pwm, param1, param2, param3);
 80056da:	4649      	mov	r1, r9
 80056dc:	4640      	mov	r0, r8
 80056de:	f7fb f9fd 	bl	8000adc <__aeabi_d2f>
 80056e2:	4639      	mov	r1, r7
 80056e4:	4604      	mov	r4, r0
 80056e6:	4630      	mov	r0, r6
 80056e8:	f7fb f9f8 	bl	8000adc <__aeabi_d2f>
 80056ec:	4623      	mov	r3, r4
 80056ee:	4602      	mov	r2, r0
 80056f0:	4629      	mov	r1, r5
 80056f2:	4806      	ldr	r0, [pc, #24]	; (800570c <ULT_PWM_SetCh+0xcc>)
 80056f4:	f7ff fd42 	bl	800517c <pwm_set>
    return SCPI_RES_OK;
 80056f8:	2001      	movs	r0, #1
 80056fa:	e7b1      	b.n	8005660 <ULT_PWM_SetCh+0x20>
 80056fc:	f3af 8000 	nop.w
 8005700:	00000000 	.word	0x00000000
 8005704:	4166e360 	.word	0x4166e360
 8005708:	40590000 	.word	0x40590000
 800570c:	200022a4 	.word	0x200022a4

08005710 <ULT_PWM_StartCh>:

scpi_result_t ULT_PWM_StartCh(scpi_t * context)
{
 8005710:	b513      	push	{r0, r1, r4, lr}
    int param1;
    double param1d;

    if (!SCPI_ParamDouble(context, &param1d, TRUE))
 8005712:	2201      	movs	r2, #1
 8005714:	4669      	mov	r1, sp
{
 8005716:	4604      	mov	r4, r0
    if (!SCPI_ParamDouble(context, &param1d, TRUE))
 8005718:	f001 fa00 	bl	8006b1c <SCPI_ParamDouble>
 800571c:	b940      	cbnz	r0, 8005730 <ULT_PWM_StartCh+0x20>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 800571e:	f06f 016c 	mvn.w	r1, #108	; 0x6c
    }

    param1 = param1d;
    if (param1 < 1 || param1 > 2)
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8005722:	4620      	mov	r0, r4
 8005724:	f000 f982 	bl	8005a2c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8005728:	f04f 30ff 	mov.w	r0, #4294967295
    }

    LL_TIM_CC_EnableChannel(ULT_TIM_PWM, (param1 == 1 ? LL_TIM_CHANNEL_CH1 : LL_TIM_CHANNEL_CH2));
    return SCPI_RES_OK;
}
 800572c:	b002      	add	sp, #8
 800572e:	bd10      	pop	{r4, pc}
    param1 = param1d;
 8005730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005734:	f7fb f98a 	bl	8000a4c <__aeabi_d2iz>
    if (param1 < 1 || param1 > 2)
 8005738:	1e43      	subs	r3, r0, #1
 800573a:	2b01      	cmp	r3, #1
 800573c:	d902      	bls.n	8005744 <ULT_PWM_StartCh+0x34>
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800573e:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8005742:	e7ee      	b.n	8005722 <ULT_PWM_StartCh+0x12>
 8005744:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    LL_TIM_CC_EnableChannel(ULT_TIM_PWM, (param1 == 1 ? LL_TIM_CHANNEL_CH1 : LL_TIM_CHANNEL_CH2));
 8005748:	2801      	cmp	r0, #1
 800574a:	bf0c      	ite	eq
 800574c:	2301      	moveq	r3, #1
 800574e:	2310      	movne	r3, #16
 8005750:	6a11      	ldr	r1, [r2, #32]
    return SCPI_RES_OK;
 8005752:	2001      	movs	r0, #1
 8005754:	430b      	orrs	r3, r1
 8005756:	6213      	str	r3, [r2, #32]
 8005758:	e7e8      	b.n	800572c <ULT_PWM_StartCh+0x1c>

0800575a <ULT_PWM_StopCh>:

scpi_result_t ULT_PWM_StopCh(scpi_t * context)
{
 800575a:	b513      	push	{r0, r1, r4, lr}
    int param1;
    double param1d;

    if (!SCPI_ParamDouble(context, &param1d, TRUE))
 800575c:	2201      	movs	r2, #1
 800575e:	4669      	mov	r1, sp
{
 8005760:	4604      	mov	r4, r0
    if (!SCPI_ParamDouble(context, &param1d, TRUE))
 8005762:	f001 f9db 	bl	8006b1c <SCPI_ParamDouble>
 8005766:	b940      	cbnz	r0, 800577a <ULT_PWM_StopCh+0x20>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8005768:	f06f 016c 	mvn.w	r1, #108	; 0x6c
    }

    param1 = param1d;
    if (param1 < 1 || param1 > 2)
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800576c:	4620      	mov	r0, r4
 800576e:	f000 f95d 	bl	8005a2c <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8005772:	f04f 30ff 	mov.w	r0, #4294967295
    }

    LL_TIM_CC_DisableChannel(ULT_TIM_PWM, (param1 == 1 ? LL_TIM_CHANNEL_CH1 : LL_TIM_CHANNEL_CH2));
    return SCPI_RES_OK;
}
 8005776:	b002      	add	sp, #8
 8005778:	bd10      	pop	{r4, pc}
    param1 = param1d;
 800577a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800577e:	f7fb f965 	bl	8000a4c <__aeabi_d2iz>
    if (param1 < 1 || param1 > 2)
 8005782:	1e43      	subs	r3, r0, #1
 8005784:	2b01      	cmp	r3, #1
 8005786:	d902      	bls.n	800578e <ULT_PWM_StopCh+0x34>
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8005788:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800578c:	e7ee      	b.n	800576c <ULT_PWM_StopCh+0x12>
  CLEAR_BIT(TIMx->CCER, Channels);
 800578e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    LL_TIM_CC_DisableChannel(ULT_TIM_PWM, (param1 == 1 ? LL_TIM_CHANNEL_CH1 : LL_TIM_CHANNEL_CH2));
 8005792:	2801      	cmp	r0, #1
 8005794:	bf14      	ite	ne
 8005796:	f06f 0310 	mvnne.w	r3, #16
 800579a:	f06f 0301 	mvneq.w	r3, #1
 800579e:	6a11      	ldr	r1, [r2, #32]
    return SCPI_RES_OK;
 80057a0:	2001      	movs	r0, #1
 80057a2:	400b      	ands	r3, r1
 80057a4:	6213      	str	r3, [r2, #32]
 80057a6:	e7e6      	b.n	8005776 <ULT_PWM_StopCh+0x1c>

080057a8 <sprint_fast>:
    }
    s[str_loc] = 0; // add null termination.
}

void sprint_fast(char* s, const char* format, float fVal, int prec)
{
 80057a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ac:	b0b3      	sub	sp, #204	; 0xcc
 80057ae:	4605      	mov	r5, r0
 80057b0:	468a      	mov	sl, r1
 80057b2:	4693      	mov	fp, r2
    char result[100] = { '\0' };
 80057b4:	2100      	movs	r1, #0
 80057b6:	2264      	movs	r2, #100	; 0x64
 80057b8:	4668      	mov	r0, sp
{
 80057ba:	461c      	mov	r4, r3
    char result[100] = { '\0' };
 80057bc:	f001 ff98 	bl	80076f0 <memset>
    char result_rev[100] = { '\0' };
 80057c0:	2264      	movs	r2, #100	; 0x64
 80057c2:	2100      	movs	r1, #0
 80057c4:	eb0d 0002 	add.w	r0, sp, r2
 80057c8:	f001 ff92 	bl	80076f0 <memset>
    int dVal, dec, i, j, k;

    if (prec <= 0)
 80057cc:	2c00      	cmp	r4, #0
 80057ce:	dc0f      	bgt.n	80057f0 <sprint_fast+0x48>
    {
        sprintf(result, "%d", (int)fVal);
 80057d0:	4658      	mov	r0, fp
 80057d2:	f7fb fc31 	bl	8001038 <__aeabi_f2iz>
 80057d6:	493e      	ldr	r1, [pc, #248]	; (80058d0 <sprint_fast+0x128>)
 80057d8:	4602      	mov	r2, r0
 80057da:	4668      	mov	r0, sp
 80057dc:	f002 fb0c 	bl	8007df8 <siprintf>
        sprintf(s, format, result);
 80057e0:	466a      	mov	r2, sp
        result[i] = '0';

    for (j = 0; i >= 0; i--, j++)
        result_rev[j] = result[i];

    sprintf(s, format, result_rev);
 80057e2:	4651      	mov	r1, sl
 80057e4:	4628      	mov	r0, r5
 80057e6:	f002 fb07 	bl	8007df8 <siprintf>
}
 80057ea:	b033      	add	sp, #204	; 0xcc
 80057ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fVal += 0.5 * pow(0.1, prec);
 80057f0:	4620      	mov	r0, r4
 80057f2:	f7fa fe11 	bl	8000418 <__aeabi_i2d>
 80057f6:	4606      	mov	r6, r0
 80057f8:	460f      	mov	r7, r1
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	a132      	add	r1, pc, #200	; (adr r1, 80058c8 <sprint_fast+0x120>)
 8005800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005804:	f003 fb4a 	bl	8008e9c <pow>
 8005808:	2200      	movs	r2, #0
 800580a:	4b32      	ldr	r3, [pc, #200]	; (80058d4 <sprint_fast+0x12c>)
 800580c:	f7fa fe6e 	bl	80004ec <__aeabi_dmul>
 8005810:	4680      	mov	r8, r0
 8005812:	4658      	mov	r0, fp
 8005814:	4689      	mov	r9, r1
 8005816:	f7fa fe11 	bl	800043c <__aeabi_f2d>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4640      	mov	r0, r8
 8005820:	4649      	mov	r1, r9
 8005822:	f7fa fcad 	bl	8000180 <__adddf3>
 8005826:	f7fb f959 	bl	8000adc <__aeabi_d2f>
    k = pow(10, prec);
 800582a:	463b      	mov	r3, r7
 800582c:	4632      	mov	r2, r6
    fVal += 0.5 * pow(0.1, prec);
 800582e:	4680      	mov	r8, r0
    k = pow(10, prec);
 8005830:	4929      	ldr	r1, [pc, #164]	; (80058d8 <sprint_fast+0x130>)
 8005832:	2000      	movs	r0, #0
 8005834:	f003 fb32 	bl	8008e9c <pow>
 8005838:	f7fb f908 	bl	8000a4c <__aeabi_d2iz>
 800583c:	4606      	mov	r6, r0
    dVal = fVal;
 800583e:	4640      	mov	r0, r8
 8005840:	f7fb fbfa 	bl	8001038 <__aeabi_f2iz>
 8005844:	4607      	mov	r7, r0
    dec = ((int)(fVal * k)) % k;
 8005846:	4630      	mov	r0, r6
 8005848:	f7fb fa52 	bl	8000cf0 <__aeabi_i2f>
 800584c:	4641      	mov	r1, r8
 800584e:	f7fb faa3 	bl	8000d98 <__aeabi_fmul>
 8005852:	f7fb fbf1 	bl	8001038 <__aeabi_f2iz>
 8005856:	fb90 f3f6 	sdiv	r3, r0, r6
        result[i] = (dec % 10) + '0';
 800585a:	210a      	movs	r1, #10
    dec = ((int)(fVal * k)) % k;
 800585c:	fb03 0016 	mls	r0, r3, r6, r0
    for (i = 0; i < prec; i++)
 8005860:	2300      	movs	r3, #0
        result[i] = (dec % 10) + '0';
 8005862:	fb90 f2f1 	sdiv	r2, r0, r1
 8005866:	fb01 0012 	mls	r0, r1, r2, r0
 800586a:	3030      	adds	r0, #48	; 0x30
 800586c:	f80d 0003 	strb.w	r0, [sp, r3]
    for (i = 0; i < prec; i++)
 8005870:	3301      	adds	r3, #1
 8005872:	429c      	cmp	r4, r3
        dec /= 10;
 8005874:	4610      	mov	r0, r2
    for (i = 0; i < prec; i++)
 8005876:	d1f4      	bne.n	8005862 <sprint_fast+0xba>
    result[i] = '.';
 8005878:	222e      	movs	r2, #46	; 0x2e
 800587a:	ab32      	add	r3, sp, #200	; 0xc8
 800587c:	4423      	add	r3, r4
    if (dVal > 0)
 800587e:	2f00      	cmp	r7, #0
    result[i] = '.';
 8005880:	f803 2cc8 	strb.w	r2, [r3, #-200]
    i++;
 8005884:	f104 0301 	add.w	r3, r4, #1
    if (dVal > 0)
 8005888:	dd17      	ble.n	80058ba <sprint_fast+0x112>
            result[i] = (dVal % 10) + '0';
 800588a:	210a      	movs	r1, #10
 800588c:	fb97 f2f1 	sdiv	r2, r7, r1
 8005890:	fb01 7712 	mls	r7, r1, r2, r7
 8005894:	3730      	adds	r7, #48	; 0x30
 8005896:	f80d 7003 	strb.w	r7, [sp, r3]
            i++;
 800589a:	1c58      	adds	r0, r3, #1
        while (dVal > 0)
 800589c:	4617      	mov	r7, r2
 800589e:	b952      	cbnz	r2, 80058b6 <sprint_fast+0x10e>
 80058a0:	f10d 0263 	add.w	r2, sp, #99	; 0x63
        result_rev[j] = result[i];
 80058a4:	f81d 1003 	ldrb.w	r1, [sp, r3]
    for (j = 0; i >= 0; i--, j++)
 80058a8:	f113 33ff 	adds.w	r3, r3, #4294967295
        result_rev[j] = result[i];
 80058ac:	f802 1f01 	strb.w	r1, [r2, #1]!
    for (j = 0; i >= 0; i--, j++)
 80058b0:	d2f8      	bcs.n	80058a4 <sprint_fast+0xfc>
    sprintf(s, format, result_rev);
 80058b2:	aa19      	add	r2, sp, #100	; 0x64
 80058b4:	e795      	b.n	80057e2 <sprint_fast+0x3a>
            i++;
 80058b6:	4603      	mov	r3, r0
 80058b8:	e7e8      	b.n	800588c <sprint_fast+0xe4>
        result[i] = '0';
 80058ba:	2130      	movs	r1, #48	; 0x30
 80058bc:	aa32      	add	r2, sp, #200	; 0xc8
 80058be:	441a      	add	r2, r3
 80058c0:	f802 1cc8 	strb.w	r1, [r2, #-200]
 80058c4:	e7ec      	b.n	80058a0 <sprint_fast+0xf8>
 80058c6:	bf00      	nop
 80058c8:	9999999a 	.word	0x9999999a
 80058cc:	3fb99999 	.word	0x3fb99999
 80058d0:	0800a263 	.word	0x0800a263
 80058d4:	3fe00000 	.word	0x3fe00000
 80058d8:	40240000 	.word	0x40240000

080058dc <SCPI_ErrorEmit>:
/**
 * Emit error
 * @param context scpi context
 * @param err Error to emit
 */
static void SCPI_ErrorEmit(scpi_t * context, int16_t err) {
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	4604      	mov	r4, r0
 80058e0:	460d      	mov	r5, r1
    SCPI_RegSetBits(context, SCPI_REG_STB, STB_QMA);
 80058e2:	2204      	movs	r2, #4
 80058e4:	2100      	movs	r1, #0
 80058e6:	f000 fa1a 	bl	8005d1e <SCPI_RegSetBits>

    if (context->interface && context->interface->error) {
 80058ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80058ec:	b133      	cbz	r3, 80058fc <SCPI_ErrorEmit+0x20>
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	b123      	cbz	r3, 80058fc <SCPI_ErrorEmit+0x20>
        context->interface->error(context, err);
 80058f2:	4629      	mov	r1, r5
 80058f4:	4620      	mov	r0, r4
    }
}
 80058f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        context->interface->error(context, err);
 80058fa:	4718      	bx	r3
}
 80058fc:	bd70      	pop	{r4, r5, r6, pc}

080058fe <SCPI_ErrorInit>:
    fifo_init(&context->error_queue, data, size);
 80058fe:	303c      	adds	r0, #60	; 0x3c
 8005900:	f000 b918 	b.w	8005b34 <fifo_init>

08005904 <SCPI_ErrorCount>:
 * Return number of errors/events in the queue
 * @param context
 * @return
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
    int16_t result = 0;
 8005904:	2300      	movs	r3, #0
int32_t SCPI_ErrorCount(scpi_t * context) {
 8005906:	b507      	push	{r0, r1, r2, lr}
    int16_t result = 0;
 8005908:	a902      	add	r1, sp, #8
 800590a:	f821 3d02 	strh.w	r3, [r1, #-2]!

    fifo_count(&context->error_queue, &result);
 800590e:	303c      	adds	r0, #60	; 0x3c
 8005910:	f000 f969 	bl	8005be6 <fifo_count>

    return result;
}
 8005914:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8005918:	b003      	add	sp, #12
 800591a:	f85d fb04 	ldr.w	pc, [sp], #4

0800591e <SCPI_ErrorEmitEmpty>:
static void SCPI_ErrorEmitEmpty(scpi_t * context) {
 800591e:	b570      	push	{r4, r5, r6, lr}
 8005920:	4604      	mov	r4, r0
    if ((SCPI_ErrorCount(context) == 0) && (SCPI_RegGet(context, SCPI_REG_STB) & STB_QMA)) {
 8005922:	f7ff ffef 	bl	8005904 <SCPI_ErrorCount>
 8005926:	4605      	mov	r5, r0
 8005928:	b998      	cbnz	r0, 8005952 <SCPI_ErrorEmitEmpty+0x34>
 800592a:	4601      	mov	r1, r0
 800592c:	4620      	mov	r0, r4
 800592e:	f000 f95f 	bl	8005bf0 <SCPI_RegGet>
 8005932:	0743      	lsls	r3, r0, #29
 8005934:	d50d      	bpl.n	8005952 <SCPI_ErrorEmitEmpty+0x34>
        SCPI_RegClearBits(context, SCPI_REG_STB, STB_QMA);
 8005936:	2204      	movs	r2, #4
 8005938:	4629      	mov	r1, r5
 800593a:	4620      	mov	r0, r4
 800593c:	f000 f961 	bl	8005c02 <SCPI_RegClearBits>
        if (context->interface && context->interface->error) {
 8005940:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005942:	b133      	cbz	r3, 8005952 <SCPI_ErrorEmitEmpty+0x34>
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	b123      	cbz	r3, 8005952 <SCPI_ErrorEmitEmpty+0x34>
            context->interface->error(context, 0);
 8005948:	4629      	mov	r1, r5
 800594a:	4620      	mov	r0, r4
}
 800594c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            context->interface->error(context, 0);
 8005950:	4718      	bx	r3
}
 8005952:	bd70      	pop	{r4, r5, r6, pc}

08005954 <SCPI_ErrorClear>:
void SCPI_ErrorClear(scpi_t * context) {
 8005954:	b510      	push	{r4, lr}
 8005956:	4604      	mov	r4, r0
    fifo_clear(&context->error_queue);
 8005958:	303c      	adds	r0, #60	; 0x3c
 800595a:	f000 f8f1 	bl	8005b40 <fifo_clear>
    SCPI_ErrorEmitEmpty(context);
 800595e:	4620      	mov	r0, r4
}
 8005960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_ErrorEmitEmpty(context);
 8005964:	f7ff bfdb 	b.w	800591e <SCPI_ErrorEmitEmpty>

08005968 <SCPI_ErrorPop>:
scpi_bool_t SCPI_ErrorPop(scpi_t * context, scpi_error_t * error) {
 8005968:	b510      	push	{r4, lr}
 800596a:	4604      	mov	r4, r0
    if (!error || !context) return FALSE;
 800596c:	4608      	mov	r0, r1
 800596e:	b151      	cbz	r1, 8005986 <SCPI_ErrorPop+0x1e>
 8005970:	b154      	cbz	r4, 8005988 <SCPI_ErrorPop+0x20>
    SCPI_ERROR_SETVAL(error, 0, NULL);
 8005972:	2300      	movs	r3, #0
    fifo_remove(&context->error_queue, error);
 8005974:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    SCPI_ERROR_SETVAL(error, 0, NULL);
 8005978:	800b      	strh	r3, [r1, #0]
    fifo_remove(&context->error_queue, error);
 800597a:	f000 f901 	bl	8005b80 <fifo_remove>
    SCPI_ErrorEmitEmpty(context);
 800597e:	4620      	mov	r0, r4
 8005980:	f7ff ffcd 	bl	800591e <SCPI_ErrorEmitEmpty>
    return TRUE;
 8005984:	2001      	movs	r0, #1
}
 8005986:	bd10      	pop	{r4, pc}
    if (!error || !context) return FALSE;
 8005988:	4620      	mov	r0, r4
 800598a:	e7fc      	b.n	8005986 <SCPI_ErrorPop+0x1e>

0800598c <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800598c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005990:	4604      	mov	r4, r0
 8005992:	460f      	mov	r7, r1
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
 8005994:	b122      	cbz	r2, 80059a0 <SCPI_ErrorPushEx+0x14>
 8005996:	b91b      	cbnz	r3, 80059a0 <SCPI_ErrorPushEx+0x14>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
 8005998:	21ff      	movs	r1, #255	; 0xff
 800599a:	4610      	mov	r0, r2
 800599c:	f002 fa86 	bl	8007eac <strnlen>
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
 80059a0:	ae02      	add	r6, sp, #8
 80059a2:	f826 7d04 	strh.w	r7, [r6, #-4]!
    if (!fifo_add(&context->error_queue, &error_value)) {
 80059a6:	f104 083c 	add.w	r8, r4, #60	; 0x3c
 80059aa:	4631      	mov	r1, r6
 80059ac:	4640      	mov	r0, r8
 80059ae:	f000 f8cb 	bl	8005b48 <fifo_add>
 80059b2:	4605      	mov	r5, r0
 80059b4:	bb98      	cbnz	r0, 8005a1e <SCPI_ErrorPushEx+0x92>
        fifo_remove_last(&context->error_queue, &error_value);
 80059b6:	4631      	mov	r1, r6
 80059b8:	4640      	mov	r0, r8
 80059ba:	f000 f8fa 	bl	8005bb2 <fifo_remove_last>
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 80059be:	f64f 63a2 	movw	r3, #65186	; 0xfea2
        fifo_add(&context->error_queue, &error_value);
 80059c2:	4631      	mov	r1, r6
 80059c4:	4640      	mov	r0, r8
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 80059c6:	f8ad 3004 	strh.w	r3, [sp, #4]
        fifo_add(&context->error_queue, &error_value);
 80059ca:	f000 f8bd 	bl	8005b48 <fifo_add>
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);

    for (i = 0; i < ERROR_DEFS_N; i++) {
 80059ce:	2600      	movs	r6, #0
 80059d0:	f04f 0906 	mov.w	r9, #6
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 80059d4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8005a28 <SCPI_ErrorPushEx+0x9c>
 80059d8:	fb09 f306 	mul.w	r3, r9, r6
 80059dc:	f933 2008 	ldrsh.w	r2, [r3, r8]
 80059e0:	42ba      	cmp	r2, r7
 80059e2:	db09      	blt.n	80059f8 <SCPI_ErrorPushEx+0x6c>
 80059e4:	4443      	add	r3, r8
 80059e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80059ea:	42ba      	cmp	r2, r7
 80059ec:	dc04      	bgt.n	80059f8 <SCPI_ErrorPushEx+0x6c>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
 80059ee:	889a      	ldrh	r2, [r3, #4]
 80059f0:	2102      	movs	r1, #2
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 f993 	bl	8005d1e <SCPI_RegSetBits>
    for (i = 0; i < ERROR_DEFS_N; i++) {
 80059f8:	3601      	adds	r6, #1
 80059fa:	2e09      	cmp	r6, #9
 80059fc:	d1ec      	bne.n	80059d8 <SCPI_ErrorPushEx+0x4c>
        }
    }

    SCPI_ErrorEmit(context, err);
 80059fe:	4639      	mov	r1, r7
 8005a00:	4620      	mov	r0, r4
 8005a02:	f7ff ff6b 	bl	80058dc <SCPI_ErrorEmit>
    if (queue_overflow) {
 8005a06:	b91d      	cbnz	r5, 8005a10 <SCPI_ErrorPushEx+0x84>
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
 8005a08:	4906      	ldr	r1, [pc, #24]	; (8005a24 <SCPI_ErrorPushEx+0x98>)
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f7ff ff66 	bl	80058dc <SCPI_ErrorEmit>
    }

    if (context) {
 8005a10:	b114      	cbz	r4, 8005a18 <SCPI_ErrorPushEx+0x8c>
        context->cmd_error = TRUE;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    }
}
 8005a18:	b003      	add	sp, #12
 8005a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return TRUE;
 8005a1e:	2501      	movs	r5, #1
 8005a20:	e7d5      	b.n	80059ce <SCPI_ErrorPushEx+0x42>
 8005a22:	bf00      	nop
 8005a24:	fffffea2 	.word	0xfffffea2
 8005a28:	0800a398 	.word	0x0800a398

08005a2c <SCPI_ErrorPush>:
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
    SCPI_ErrorPushEx(context, err, NULL, 0);
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f7ff bfac 	b.w	800598c <SCPI_ErrorPushEx>

08005a34 <SCPI_ErrorTranslate>:
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
 8005a34:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
 8005a38:	d049      	beq.n	8005ace <SCPI_ErrorTranslate+0x9a>
 8005a3a:	dc21      	bgt.n	8005a80 <SCPI_ErrorTranslate+0x4c>
 8005a3c:	f46f 7395 	mvn.w	r3, #298	; 0x12a
 8005a40:	4298      	cmp	r0, r3
 8005a42:	d050      	beq.n	8005ae6 <SCPI_ErrorTranslate+0xb2>
 8005a44:	f510 7f95 	cmn.w	r0, #298	; 0x12a
 8005a48:	da0b      	bge.n	8005a62 <SCPI_ErrorTranslate+0x2e>
 8005a4a:	f510 7faf 	cmn.w	r0, #350	; 0x15e
 8005a4e:	d048      	beq.n	8005ae2 <SCPI_ErrorTranslate+0xae>
 8005a50:	f510 7f9b 	cmn.w	r0, #310	; 0x136
 8005a54:	d043      	beq.n	8005ade <SCPI_ErrorTranslate+0xaa>
 8005a56:	f46f 73b5 	mvn.w	r3, #362	; 0x16a
 8005a5a:	4298      	cmp	r0, r3
 8005a5c:	d107      	bne.n	8005a6e <SCPI_ErrorTranslate+0x3a>
#if USE_FULL_ERROR_LIST
#define XE X
#else
#define XE(def, val, str)
#endif
        LIST_OF_ERRORS
 8005a5e:	4823      	ldr	r0, [pc, #140]	; (8005aec <SCPI_ErrorTranslate+0xb8>)
 8005a60:	4770      	bx	lr
    switch (err) {
 8005a62:	f110 0fc8 	cmn.w	r0, #200	; 0xc8
 8005a66:	d036      	beq.n	8005ad6 <SCPI_ErrorTranslate+0xa2>
 8005a68:	dc03      	bgt.n	8005a72 <SCPI_ErrorTranslate+0x3e>
 8005a6a:	30e0      	adds	r0, #224	; 0xe0
 8005a6c:	d035      	beq.n	8005ada <SCPI_ErrorTranslate+0xa6>
#if USE_USER_ERROR_LIST
        LIST_OF_USER_ERRORS
#endif
#undef X
#undef XE
        default: return "Unknown error";
 8005a6e:	4820      	ldr	r0, [pc, #128]	; (8005af0 <SCPI_ErrorTranslate+0xbc>)
 8005a70:	4770      	bx	lr
    switch (err) {
 8005a72:	f110 0faa 	cmn.w	r0, #170	; 0xaa
 8005a76:	d02c      	beq.n	8005ad2 <SCPI_ErrorTranslate+0x9e>
 8005a78:	3097      	adds	r0, #151	; 0x97
 8005a7a:	d1f8      	bne.n	8005a6e <SCPI_ErrorTranslate+0x3a>
        LIST_OF_ERRORS
 8005a7c:	481d      	ldr	r0, [pc, #116]	; (8005af4 <SCPI_ErrorTranslate+0xc0>)
 8005a7e:	4770      	bx	lr
    switch (err) {
 8005a80:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 8005a84:	d01d      	beq.n	8005ac2 <SCPI_ErrorTranslate+0x8e>
 8005a86:	dc09      	bgt.n	8005a9c <SCPI_ErrorTranslate+0x68>
 8005a88:	f110 0f71 	cmn.w	r0, #113	; 0x71
 8005a8c:	d01d      	beq.n	8005aca <SCPI_ErrorTranslate+0x96>
 8005a8e:	f110 0f6d 	cmn.w	r0, #109	; 0x6d
 8005a92:	d018      	beq.n	8005ac6 <SCPI_ErrorTranslate+0x92>
 8005a94:	3083      	adds	r0, #131	; 0x83
 8005a96:	d1ea      	bne.n	8005a6e <SCPI_ErrorTranslate+0x3a>
        LIST_OF_ERRORS
 8005a98:	4817      	ldr	r0, [pc, #92]	; (8005af8 <SCPI_ErrorTranslate+0xc4>)
 8005a9a:	4770      	bx	lr
    switch (err) {
 8005a9c:	f110 0f67 	cmn.w	r0, #103	; 0x67
 8005aa0:	d00d      	beq.n	8005abe <SCPI_ErrorTranslate+0x8a>
 8005aa2:	dc03      	bgt.n	8005aac <SCPI_ErrorTranslate+0x78>
 8005aa4:	3068      	adds	r0, #104	; 0x68
 8005aa6:	d1e2      	bne.n	8005a6e <SCPI_ErrorTranslate+0x3a>
        LIST_OF_ERRORS
 8005aa8:	4814      	ldr	r0, [pc, #80]	; (8005afc <SCPI_ErrorTranslate+0xc8>)
 8005aaa:	4770      	bx	lr
    switch (err) {
 8005aac:	f110 0f65 	cmn.w	r0, #101	; 0x65
 8005ab0:	d003      	beq.n	8005aba <SCPI_ErrorTranslate+0x86>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d1db      	bne.n	8005a6e <SCPI_ErrorTranslate+0x3a>
        LIST_OF_ERRORS
 8005ab6:	4812      	ldr	r0, [pc, #72]	; (8005b00 <SCPI_ErrorTranslate+0xcc>)
    }
}
 8005ab8:	4770      	bx	lr
        LIST_OF_ERRORS
 8005aba:	4812      	ldr	r0, [pc, #72]	; (8005b04 <SCPI_ErrorTranslate+0xd0>)
 8005abc:	4770      	bx	lr
 8005abe:	4812      	ldr	r0, [pc, #72]	; (8005b08 <SCPI_ErrorTranslate+0xd4>)
 8005ac0:	4770      	bx	lr
 8005ac2:	4812      	ldr	r0, [pc, #72]	; (8005b0c <SCPI_ErrorTranslate+0xd8>)
 8005ac4:	4770      	bx	lr
 8005ac6:	4812      	ldr	r0, [pc, #72]	; (8005b10 <SCPI_ErrorTranslate+0xdc>)
 8005ac8:	4770      	bx	lr
 8005aca:	4812      	ldr	r0, [pc, #72]	; (8005b14 <SCPI_ErrorTranslate+0xe0>)
 8005acc:	4770      	bx	lr
 8005ace:	4812      	ldr	r0, [pc, #72]	; (8005b18 <SCPI_ErrorTranslate+0xe4>)
 8005ad0:	4770      	bx	lr
 8005ad2:	4812      	ldr	r0, [pc, #72]	; (8005b1c <SCPI_ErrorTranslate+0xe8>)
 8005ad4:	4770      	bx	lr
 8005ad6:	4812      	ldr	r0, [pc, #72]	; (8005b20 <SCPI_ErrorTranslate+0xec>)
 8005ad8:	4770      	bx	lr
 8005ada:	4812      	ldr	r0, [pc, #72]	; (8005b24 <SCPI_ErrorTranslate+0xf0>)
 8005adc:	4770      	bx	lr
 8005ade:	4812      	ldr	r0, [pc, #72]	; (8005b28 <SCPI_ErrorTranslate+0xf4>)
 8005ae0:	4770      	bx	lr
 8005ae2:	4812      	ldr	r0, [pc, #72]	; (8005b2c <SCPI_ErrorTranslate+0xf8>)
 8005ae4:	4770      	bx	lr
 8005ae6:	4812      	ldr	r0, [pc, #72]	; (8005b30 <SCPI_ErrorTranslate+0xfc>)
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	0800a367 	.word	0x0800a367
 8005af0:	0800a389 	.word	0x0800a389
 8005af4:	0800a2fe 	.word	0x0800a2fe
 8005af8:	0800a2dc 	.word	0x0800a2dc
 8005afc:	0800a293 	.word	0x0800a293
 8005b00:	0800a266 	.word	0x0800a266
 8005b04:	0800a26f 	.word	0x0800a26f
 8005b08:	0800a281 	.word	0x0800a281
 8005b0c:	0800a2a3 	.word	0x0800a2a3
 8005b10:	0800a2b9 	.word	0x0800a2b9
 8005b14:	0800a2cb 	.word	0x0800a2cb
 8005b18:	0800a2eb 	.word	0x0800a2eb
 8005b1c:	0800a312 	.word	0x0800a312
 8005b20:	0800a323 	.word	0x0800a323
 8005b24:	0800a333 	.word	0x0800a333
 8005b28:	0800a34b 	.word	0x0800a34b
 8005b2c:	0800a358 	.word	0x0800a358
 8005b30:	0800a37c 	.word	0x0800a37c

08005b34 <fifo_init>:
/**
 * Initialize fifo
 * @param fifo
 */
void fifo_init(scpi_fifo_t * fifo, scpi_error_t * data, int16_t size) {
    fifo->wr = 0;
 8005b34:	2300      	movs	r3, #0
    fifo->rd = 0;
    fifo->count = 0;
    fifo->data = data;
 8005b36:	6081      	str	r1, [r0, #8]
    fifo->wr = 0;
 8005b38:	6003      	str	r3, [r0, #0]
    fifo->rd = 0;
 8005b3a:	8083      	strh	r3, [r0, #4]
    fifo->size = size;
 8005b3c:	80c2      	strh	r2, [r0, #6]
}
 8005b3e:	4770      	bx	lr

08005b40 <fifo_clear>:
/**
 * Empty fifo
 * @param fifo
 */
void fifo_clear(scpi_fifo_t * fifo) {
    fifo->wr = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	6003      	str	r3, [r0, #0]
    fifo->rd = 0;
 8005b44:	8083      	strh	r3, [r0, #4]
    fifo->count = 0;
}
 8005b46:	4770      	bx	lr

08005b48 <fifo_add>:
 * @param fifo
 * @param err
 * @param info
 * @return
 */
scpi_bool_t fifo_add(scpi_fifo_t * fifo, const scpi_error_t * value) {
 8005b48:	b530      	push	{r4, r5, lr}
    return fifo->count == fifo->size;
 8005b4a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8005b4e:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    /* FIFO full? */
    if (fifo_is_full(fifo)) {
 8005b52:	42a2      	cmp	r2, r4
 8005b54:	d010      	beq.n	8005b78 <fifo_add+0x30>
        return FALSE;
    }
    if (!value) {
 8005b56:	b189      	cbz	r1, 8005b7c <fifo_add+0x34>
        return FALSE;
    }

    fifo->data[fifo->wr] = *value;
 8005b58:	f9b0 3000 	ldrsh.w	r3, [r0]
 8005b5c:	8809      	ldrh	r1, [r1, #0]
 8005b5e:	6885      	ldr	r5, [r0, #8]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
    fifo->count += 1;
 8005b60:	3201      	adds	r2, #1
    fifo->data[fifo->wr] = *value;
 8005b62:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 8005b66:	3301      	adds	r3, #1
 8005b68:	fb93 f1f4 	sdiv	r1, r3, r4
 8005b6c:	fb04 3311 	mls	r3, r4, r1, r3
    fifo->count += 1;
 8005b70:	8082      	strh	r2, [r0, #4]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 8005b72:	8003      	strh	r3, [r0, #0]
    return TRUE;
 8005b74:	2001      	movs	r0, #1
}
 8005b76:	bd30      	pop	{r4, r5, pc}
        return FALSE;
 8005b78:	2000      	movs	r0, #0
 8005b7a:	e7fc      	b.n	8005b76 <fifo_add+0x2e>
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	e7fa      	b.n	8005b76 <fifo_add+0x2e>

08005b80 <fifo_remove>:
    return fifo->count == 0;
 8005b80:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 * Remove element form fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove(scpi_fifo_t * fifo, scpi_error_t * value) {
 8005b84:	b510      	push	{r4, lr}
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 8005b86:	b193      	cbz	r3, 8005bae <fifo_remove+0x2e>
 8005b88:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
        return FALSE;
    }

    if (value) {
 8005b8c:	b119      	cbz	r1, 8005b96 <fifo_remove+0x16>
        *value = fifo->data[fifo->rd];
 8005b8e:	6884      	ldr	r4, [r0, #8]
 8005b90:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
 8005b94:	800c      	strh	r4, [r1, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size);
 8005b96:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8005b9a:	3201      	adds	r2, #1
 8005b9c:	fb92 f1f4 	sdiv	r1, r2, r4
 8005ba0:	fb04 2211 	mls	r2, r4, r1, r2
    fifo->count -= 1;
 8005ba4:	3b01      	subs	r3, #1
    fifo->rd = (fifo->rd + 1) % (fifo->size);
 8005ba6:	8042      	strh	r2, [r0, #2]
    fifo->count -= 1;
 8005ba8:	8083      	strh	r3, [r0, #4]

    return TRUE;
 8005baa:	2001      	movs	r0, #1
}
 8005bac:	bd10      	pop	{r4, pc}
        return FALSE;
 8005bae:	4618      	mov	r0, r3
 8005bb0:	e7fc      	b.n	8005bac <fifo_remove+0x2c>

08005bb2 <fifo_remove_last>:
    return fifo->count == 0;
 8005bb2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
 8005bb6:	b530      	push	{r4, r5, lr}
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 8005bb8:	b19b      	cbz	r3, 8005be2 <fifo_remove_last+0x30>
        return FALSE;
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
 8005bba:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 8005bbe:	f9b0 2000 	ldrsh.w	r2, [r0]
 8005bc2:	442a      	add	r2, r5
 8005bc4:	3a01      	subs	r2, #1
 8005bc6:	fb92 f4f5 	sdiv	r4, r2, r5
 8005bca:	fb05 2214 	mls	r2, r5, r4, r2
 8005bce:	8002      	strh	r2, [r0, #0]

    if (value) {
 8005bd0:	b119      	cbz	r1, 8005bda <fifo_remove_last+0x28>
        *value = fifo->data[fifo->wr];
 8005bd2:	6884      	ldr	r4, [r0, #8]
 8005bd4:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8005bd8:	800a      	strh	r2, [r1, #0]
    }
    fifo->count -= 1;
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	8083      	strh	r3, [r0, #4]

    return TRUE;
 8005bde:	2001      	movs	r0, #1
}
 8005be0:	bd30      	pop	{r4, r5, pc}
        return FALSE;
 8005be2:	4618      	mov	r0, r3
 8005be4:	e7fc      	b.n	8005be0 <fifo_remove_last+0x2e>

08005be6 <fifo_count>:
 * @param fifo
 * @param value
 * @return
 */
scpi_bool_t fifo_count(scpi_fifo_t * fifo, int16_t * value) {
    *value = fifo->count;
 8005be6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    return TRUE;
}
 8005bea:	2001      	movs	r0, #1
    *value = fifo->count;
 8005bec:	800b      	strh	r3, [r1, #0]
}
 8005bee:	4770      	bx	lr

08005bf0 <SCPI_RegGet>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && context) {
 8005bf0:	2909      	cmp	r1, #9
 8005bf2:	d804      	bhi.n	8005bfe <SCPI_RegGet+0xe>
 8005bf4:	b120      	cbz	r0, 8005c00 <SCPI_RegGet+0x10>
        return context->registers[name];
 8005bf6:	3124      	adds	r1, #36	; 0x24
 8005bf8:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8005bfc:	4770      	bx	lr
    } else {
        return 0;
 8005bfe:	2000      	movs	r0, #0
    }
}
 8005c00:	4770      	bx	lr

08005c02 <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 8005c02:	b510      	push	{r4, lr}
 8005c04:	4603      	mov	r3, r0
 8005c06:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 8005c08:	f7ff fff2 	bl	8005bf0 <SCPI_RegGet>
 8005c0c:	ea20 0202 	bic.w	r2, r0, r2
 8005c10:	4621      	mov	r1, r4
}
 8005c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 8005c16:	b292      	uxth	r2, r2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 b815 	b.w	8005c48 <SCPI_RegSet>

08005c1e <regUpdateSTB>:
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 8005c1e:	b538      	push	{r3, r4, r5, lr}
 8005c20:	460c      	mov	r4, r1
    if (val & SCPI_RegGet(context, mask)) {
 8005c22:	4611      	mov	r1, r2
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 8005c24:	4605      	mov	r5, r0
    if (val & SCPI_RegGet(context, mask)) {
 8005c26:	f7ff ffe3 	bl	8005bf0 <SCPI_RegGet>
 8005c2a:	ea10 0104 	ands.w	r1, r0, r4
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 8005c2e:	461a      	mov	r2, r3
    if (val & SCPI_RegGet(context, mask)) {
 8005c30:	d005      	beq.n	8005c3e <regUpdateSTB+0x20>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 8005c32:	4628      	mov	r0, r5
}
 8005c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 8005c38:	2100      	movs	r1, #0
 8005c3a:	f000 b870 	b.w	8005d1e <SCPI_RegSetBits>
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 8005c3e:	4628      	mov	r0, r5
}
 8005c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 8005c44:	f7ff bfdd 	b.w	8005c02 <SCPI_RegClearBits>

08005c48 <SCPI_RegSet>:
    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 8005c48:	2909      	cmp	r1, #9
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 8005c4a:	b570      	push	{r4, r5, r6, lr}
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	4615      	mov	r5, r2
    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 8005c50:	d858      	bhi.n	8005d04 <SCPI_RegSet+0xbc>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d056      	beq.n	8005d04 <SCPI_RegSet+0xbc>
 8005c56:	eb00 0641 	add.w	r6, r0, r1, lsl #1
    switch (name) {
 8005c5a:	3901      	subs	r1, #1
    old_val = context->registers[name];
 8005c5c:	f8b6 0048 	ldrh.w	r0, [r6, #72]	; 0x48
    context->registers[name] = val;
 8005c60:	f8a6 2048 	strh.w	r2, [r6, #72]	; 0x48
    switch (name) {
 8005c64:	2908      	cmp	r1, #8
 8005c66:	d806      	bhi.n	8005c76 <SCPI_RegSet+0x2e>
 8005c68:	e8df f001 	tbb	[pc, r1]
 8005c6c:	3e2d2520 	.word	0x3e2d2520
 8005c70:	322f4341 	.word	0x322f4341
 8005c74:	34          	.byte	0x34
 8005c75:	00          	.byte	0x00
 8005c76:	f022 0140 	bic.w	r1, r2, #64	; 0x40
            if (val & mask) {
 8005c7a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8005c7e:	b289      	uxth	r1, r1
 8005c80:	ea11 0203 	ands.w	r2, r1, r3
 8005c84:	d03c      	beq.n	8005d00 <SCPI_RegSet+0xb8>
                val |= STB_SRQ;
 8005c86:	f045 0540 	orr.w	r5, r5, #64	; 0x40
                if (old_val != val) {
 8005c8a:	1b42      	subs	r2, r0, r5
 8005c8c:	bf18      	it	ne
 8005c8e:	2201      	movne	r2, #1
    context->registers[name] = val;
 8005c90:	f8a6 5048 	strh.w	r5, [r6, #72]	; 0x48
    if (srq) {
 8005c94:	b3b2      	cbz	r2, 8005d04 <SCPI_RegSet+0xbc>
    if (context && context->interface && context->interface->control) {
 8005c96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005c98:	b3a3      	cbz	r3, 8005d04 <SCPI_RegSet+0xbc>
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	b393      	cbz	r3, 8005d04 <SCPI_RegSet+0xbc>
        return context->interface->control(context, ctrl, val);
 8005c9e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8005ca2:	4620      	mov	r0, r4
}
 8005ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return context->interface->control(context, ctrl, val);
 8005ca8:	2101      	movs	r1, #1
 8005caa:	4718      	bx	r3
            regUpdate(context, SCPI_REG_STB);
 8005cac:	2100      	movs	r1, #0
            regUpdate(context, SCPI_REG_OPER);
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 f829 	bl	8005d06 <regUpdate>
 8005cb4:	e005      	b.n	8005cc2 <SCPI_RegSet+0x7a>
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
 8005cb6:	2320      	movs	r3, #32
 8005cb8:	2203      	movs	r2, #3
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 8005cba:	4629      	mov	r1, r5
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f7ff ffae 	bl	8005c1e <regUpdateSTB>
    scpi_bool_t srq = FALSE;
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	e7e4      	b.n	8005c90 <SCPI_RegSet+0x48>
            regUpdate(context, SCPI_REG_ESR);
 8005cc6:	2102      	movs	r1, #2
 8005cc8:	e7f1      	b.n	8005cae <SCPI_RegSet+0x66>
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
 8005cca:	2308      	movs	r3, #8
 8005ccc:	461a      	mov	r2, r3
 8005cce:	e7f4      	b.n	8005cba <SCPI_RegSet+0x72>
            regUpdate(context, SCPI_REG_QUES);
 8005cd0:	2107      	movs	r1, #7
 8005cd2:	e7ec      	b.n	8005cae <SCPI_RegSet+0x66>
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 8005cd4:	2107      	movs	r1, #7
 8005cd6:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8005cda:	ea22 0200 	bic.w	r2, r2, r0
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f7ff ffb1 	bl	8005c48 <SCPI_RegSet>
 8005ce6:	e7ec      	b.n	8005cc2 <SCPI_RegSet+0x7a>
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 8005ce8:	2380      	movs	r3, #128	; 0x80
 8005cea:	2205      	movs	r2, #5
 8005cec:	e7e5      	b.n	8005cba <SCPI_RegSet+0x72>
            regUpdate(context, SCPI_REG_OPER);
 8005cee:	2104      	movs	r1, #4
 8005cf0:	e7dd      	b.n	8005cae <SCPI_RegSet+0x66>
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 8005cf2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8005cf6:	ea22 0200 	bic.w	r2, r2, r0
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	2104      	movs	r1, #4
 8005cfe:	e7ef      	b.n	8005ce0 <SCPI_RegSet+0x98>
            if (val & mask) {
 8005d00:	460d      	mov	r5, r1
 8005d02:	e7c5      	b.n	8005c90 <SCPI_RegSet+0x48>
}
 8005d04:	bd70      	pop	{r4, r5, r6, pc}

08005d06 <regUpdate>:
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
 8005d06:	b510      	push	{r4, lr}
 8005d08:	4603      	mov	r3, r0
 8005d0a:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 8005d0c:	f7ff ff70 	bl	8005bf0 <SCPI_RegGet>
 8005d10:	4621      	mov	r1, r4
}
 8005d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 8005d16:	4602      	mov	r2, r0
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff bf95 	b.w	8005c48 <SCPI_RegSet>

08005d1e <SCPI_RegSetBits>:
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 8005d1e:	b510      	push	{r4, lr}
 8005d20:	4603      	mov	r3, r0
 8005d22:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 8005d24:	f7ff ff64 	bl	8005bf0 <SCPI_RegGet>
 8005d28:	4302      	orrs	r2, r0
 8005d2a:	4621      	mov	r1, r4
}
 8005d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 8005d30:	b292      	uxth	r2, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff bf88 	b.w	8005c48 <SCPI_RegSet>

08005d38 <SCPI_EventClear>:
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2102      	movs	r1, #2
 8005d3c:	f7ff bf84 	b.w	8005c48 <SCPI_RegSet>

08005d40 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
 8005d40:	b510      	push	{r4, lr}
 8005d42:	4604      	mov	r4, r0
    SCPI_EventClear(context);
 8005d44:	f7ff fff8 	bl	8005d38 <SCPI_EventClear>
    SCPI_ErrorClear(context);
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f7ff fe03 	bl	8005954 <SCPI_ErrorClear>
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
 8005d4e:	4620      	mov	r0, r4
 8005d50:	2200      	movs	r2, #0
 8005d52:	2104      	movs	r1, #4
 8005d54:	f7ff ff78 	bl	8005c48 <SCPI_RegSet>
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 8005d58:	4620      	mov	r0, r4
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2107      	movs	r1, #7
 8005d5e:	f7ff ff73 	bl	8005c48 <SCPI_RegSet>
    return SCPI_RES_OK;
}
 8005d62:	2001      	movs	r0, #1
 8005d64:	bd10      	pop	{r4, pc}

08005d66 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 8005d66:	b513      	push	{r0, r1, r4, lr}
    int32_t new_ESE;
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 8005d68:	2201      	movs	r2, #1
 8005d6a:	a901      	add	r1, sp, #4
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 8005d6c:	4604      	mov	r4, r0
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 8005d6e:	f000 ff33 	bl	8006bd8 <SCPI_ParamInt32>
 8005d72:	b140      	cbz	r0, 8005d86 <SCPI_CoreEse+0x20>
        SCPI_RegSet(context, SCPI_REG_ESE, (scpi_reg_val_t) new_ESE);
 8005d74:	4620      	mov	r0, r4
 8005d76:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005d7a:	2103      	movs	r1, #3
 8005d7c:	f7ff ff64 	bl	8005c48 <SCPI_RegSet>
        return SCPI_RES_OK;
 8005d80:	2001      	movs	r0, #1
    }
    return SCPI_RES_ERR;
}
 8005d82:	b002      	add	sp, #8
 8005d84:	bd10      	pop	{r4, pc}
    return SCPI_RES_ERR;
 8005d86:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8a:	e7fa      	b.n	8005d82 <SCPI_CoreEse+0x1c>

08005d8c <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
 8005d8c:	b508      	push	{r3, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 8005d8e:	b128      	cbz	r0, 8005d9c <SCPI_CoreEseQ+0x10>
        return context->registers[name];
 8005d90:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESE));
 8005d94:	f000 fcf5 	bl	8006782 <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 8005d98:	2001      	movs	r0, #1
 8005d9a:	bd08      	pop	{r3, pc}
        return 0;
 8005d9c:	4601      	mov	r1, r0
 8005d9e:	e7f9      	b.n	8005d94 <SCPI_CoreEseQ+0x8>

08005da0 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
 8005da0:	b510      	push	{r4, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 8005da2:	4604      	mov	r4, r0
 8005da4:	b158      	cbz	r0, 8005dbe <SCPI_CoreEsrQ+0x1e>
        return context->registers[name];
 8005da6:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESR));
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 fce9 	bl	8006782 <SCPI_ResultInt32>
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 8005db0:	4620      	mov	r0, r4
 8005db2:	2200      	movs	r2, #0
 8005db4:	2102      	movs	r1, #2
 8005db6:	f7ff ff47 	bl	8005c48 <SCPI_RegSet>
    return SCPI_RES_OK;
}
 8005dba:	2001      	movs	r0, #1
 8005dbc:	bd10      	pop	{r4, pc}
        return 0;
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	e7f3      	b.n	8005daa <SCPI_CoreEsrQ+0xa>
	...

08005dc4 <SCPI_CoreIdnQ>:
 * 
 * example: MANUFACTURE,MODEL,0,01-02-01
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
 8005dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc8:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < 4; i++) {
 8005dca:	2400      	movs	r4, #0
            else if (i == 1) // comm_data_usb.available
                j = 5;

            SCPI_ResultMnemonic(context, context->idn[j]);
        } else {
            SCPI_ResultMnemonic(context, "0");
 8005dcc:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8005e1c <SCPI_CoreIdnQ+0x58>
            if (i == 1 && comm_d_uart.available)
 8005dd0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8005e20 <SCPI_CoreIdnQ+0x5c>
 8005dd4:	f100 0684 	add.w	r6, r0, #132	; 0x84
        if (context->idn[i])
 8005dd8:	f856 3b04 	ldr.w	r3, [r6], #4
 8005ddc:	b1db      	cbz	r3, 8005e16 <SCPI_CoreIdnQ+0x52>
            if (i == 1 && comm_d_uart.available)
 8005dde:	2c01      	cmp	r4, #1
 8005de0:	d117      	bne.n	8005e12 <SCPI_CoreIdnQ+0x4e>
 8005de2:	f899 3064 	ldrb.w	r3, [r9, #100]	; 0x64
                j = 5;
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bf14      	ite	ne
 8005dea:	2304      	movne	r3, #4
 8005dec:	2305      	moveq	r3, #5
            SCPI_ResultMnemonic(context, context->idn[j]);
 8005dee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005df2:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8005df6:	4638      	mov	r0, r7
 8005df8:	f7fa f9b4 	bl	8000164 <strlen>
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	4602      	mov	r2, r0
            SCPI_ResultMnemonic(context, "0");
 8005e00:	4628      	mov	r0, r5
    for (i = 0; i < 4; i++) {
 8005e02:	3401      	adds	r4, #1
            SCPI_ResultMnemonic(context, "0");
 8005e04:	f000 fcac 	bl	8006760 <SCPI_ResultCharacters>
    for (i = 0; i < 4; i++) {
 8005e08:	2c04      	cmp	r4, #4
 8005e0a:	d1e5      	bne.n	8005dd8 <SCPI_CoreIdnQ+0x14>
        }
    }
    return SCPI_RES_OK;
}
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e12:	4623      	mov	r3, r4
 8005e14:	e7eb      	b.n	8005dee <SCPI_CoreIdnQ+0x2a>
            SCPI_ResultMnemonic(context, "0");
 8005e16:	2201      	movs	r2, #1
 8005e18:	4641      	mov	r1, r8
 8005e1a:	e7f1      	b.n	8005e00 <SCPI_CoreIdnQ+0x3c>
 8005e1c:	0800a3d3 	.word	0x0800a3d3
 8005e20:	20000640 	.word	0x20000640

08005e24 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
 8005e24:	b508      	push	{r3, lr}
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
 8005e26:	2201      	movs	r2, #1
 8005e28:	2102      	movs	r1, #2
 8005e2a:	f7ff ff78 	bl	8005d1e <SCPI_RegSetBits>
    return SCPI_RES_OK;
}
 8005e2e:	2001      	movs	r0, #1
 8005e30:	bd08      	pop	{r3, pc}

08005e32 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
 8005e32:	b508      	push	{r3, lr}
    /* Operation is always completed */
    SCPI_ResultInt32(context, 1);
 8005e34:	2101      	movs	r1, #1
 8005e36:	f000 fca4 	bl	8006782 <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	bd08      	pop	{r3, pc}

08005e3e <SCPI_CoreRst>:
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
    if (context && context->interface && context->interface->reset) {
 8005e3e:	b120      	cbz	r0, 8005e4a <SCPI_CoreRst+0xc>
 8005e40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005e42:	b113      	cbz	r3, 8005e4a <SCPI_CoreRst+0xc>
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	b103      	cbz	r3, 8005e4a <SCPI_CoreRst+0xc>
        return context->interface->reset(context);
 8005e48:	4718      	bx	r3
    }
    return SCPI_RES_OK;
}
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	4770      	bx	lr

08005e4e <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 8005e4e:	b513      	push	{r0, r1, r4, lr}
    int32_t new_SRE;
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 8005e50:	2201      	movs	r2, #1
 8005e52:	a901      	add	r1, sp, #4
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 8005e54:	4604      	mov	r4, r0
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 8005e56:	f000 febf 	bl	8006bd8 <SCPI_ParamInt32>
 8005e5a:	b140      	cbz	r0, 8005e6e <SCPI_CoreSre+0x20>
        SCPI_RegSet(context, SCPI_REG_SRE, (scpi_reg_val_t) new_SRE);
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005e62:	2101      	movs	r1, #1
 8005e64:	f7ff fef0 	bl	8005c48 <SCPI_RegSet>
        return SCPI_RES_OK;
 8005e68:	2001      	movs	r0, #1
    }
    return SCPI_RES_ERR;
}
 8005e6a:	b002      	add	sp, #8
 8005e6c:	bd10      	pop	{r4, pc}
    return SCPI_RES_ERR;
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e72:	e7fa      	b.n	8005e6a <SCPI_CoreSre+0x1c>

08005e74 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
 8005e74:	b508      	push	{r3, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 8005e76:	b128      	cbz	r0, 8005e84 <SCPI_CoreSreQ+0x10>
        return context->registers[name];
 8005e78:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_SRE));
 8005e7c:	f000 fc81 	bl	8006782 <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 8005e80:	2001      	movs	r0, #1
 8005e82:	bd08      	pop	{r3, pc}
        return 0;
 8005e84:	4601      	mov	r1, r0
 8005e86:	e7f9      	b.n	8005e7c <SCPI_CoreSreQ+0x8>

08005e88 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
 8005e88:	b508      	push	{r3, lr}
    if ((name < SCPI_REG_COUNT) && context) {
 8005e8a:	b128      	cbz	r0, 8005e98 <SCPI_CoreStbQ+0x10>
        return context->registers[name];
 8005e8c:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_STB));
 8005e90:	f000 fc77 	bl	8006782 <SCPI_ResultInt32>
    return SCPI_RES_OK;
}
 8005e94:	2001      	movs	r0, #1
 8005e96:	bd08      	pop	{r3, pc}
        return 0;
 8005e98:	4601      	mov	r1, r0
 8005e9a:	e7f9      	b.n	8005e90 <SCPI_CoreStbQ+0x8>

08005e9c <SCPI_CoreWai>:
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
}
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	4770      	bx	lr

08005ea0 <iseos>:
 * Is end of string
 * @param state
 * @return 
 */
static int iseos(lex_state_t * state) {
    if ((state->buffer + state->len) <= (state->pos)) {
 8005ea0:	6803      	ldr	r3, [r0, #0]
 8005ea2:	6882      	ldr	r2, [r0, #8]
 8005ea4:	6840      	ldr	r0, [r0, #4]
 8005ea6:	4413      	add	r3, r2
        return 1;
    } else {
        return 0;
    }
}
 8005ea8:	4298      	cmp	r0, r3
 8005eaa:	bf34      	ite	cc
 8005eac:	2000      	movcc	r0, #0
 8005eae:	2001      	movcs	r0, #1
 8005eb0:	4770      	bx	lr

08005eb2 <skipWs>:
/**
 * Skip all whitespaces
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
 8005eb2:	b510      	push	{r4, lr}
    int someSpace = 0;
 8005eb4:	2100      	movs	r1, #0
static int skipWs(lex_state_t * state) {
 8005eb6:	4604      	mov	r4, r0
    while (!iseos(state) && isws(state->pos[0])) {
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f7ff fff1 	bl	8005ea0 <iseos>
 8005ebe:	b928      	cbnz	r0, 8005ecc <skipWs+0x1a>
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	781a      	ldrb	r2, [r3, #0]
    if ((c == ' ') || (c == '\t')) {
 8005ec4:	2a20      	cmp	r2, #32
 8005ec6:	d003      	beq.n	8005ed0 <skipWs+0x1e>
 8005ec8:	2a09      	cmp	r2, #9
 8005eca:	d001      	beq.n	8005ed0 <skipWs+0x1e>
        state->pos++;
        someSpace++;
    }

    return someSpace;
}
 8005ecc:	4608      	mov	r0, r1
 8005ece:	bd10      	pop	{r4, pc}
        state->pos++;
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	6063      	str	r3, [r4, #4]
        someSpace++;
 8005ed4:	3101      	adds	r1, #1
 8005ed6:	e7ef      	b.n	8005eb8 <skipWs+0x6>

08005ed8 <skipQuoteProgramData>:
/* 7.7.5 <STRING PROGRAM DATA> */
static int isascii7bit(int c) {
    return (c >= 0) && (c <= 0x7f);
}

static void skipQuoteProgramData(lex_state_t * state, char quote) {
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4604      	mov	r4, r0
    while (!iseos(state)) {
 8005edc:	4620      	mov	r0, r4
 8005ede:	f7ff ffdf 	bl	8005ea0 <iseos>
 8005ee2:	b990      	cbnz	r0, 8005f0a <skipQuoteProgramData+0x32>
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 8005ee4:	6865      	ldr	r5, [r4, #4]
 8005ee6:	782a      	ldrb	r2, [r5, #0]
 8005ee8:	0613      	lsls	r3, r2, #24
 8005eea:	d40e      	bmi.n	8005f0a <skipQuoteProgramData+0x32>
 8005eec:	1c6b      	adds	r3, r5, #1
 8005eee:	428a      	cmp	r2, r1
            state->pos++;
 8005ef0:	6063      	str	r3, [r4, #4]
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 8005ef2:	d1f3      	bne.n	8005edc <skipQuoteProgramData+0x4>
        } else if (ischr(state, quote)) {
            state->pos++;
            if (!iseos(state) && ischr(state, quote)) {
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f7ff ffd3 	bl	8005ea0 <iseos>
 8005efa:	b928      	cbnz	r0, 8005f08 <skipQuoteProgramData+0x30>
 8005efc:	786b      	ldrb	r3, [r5, #1]
 8005efe:	428b      	cmp	r3, r1
 8005f00:	d102      	bne.n	8005f08 <skipQuoteProgramData+0x30>
                state->pos++;
 8005f02:	3502      	adds	r5, #2
 8005f04:	6065      	str	r5, [r4, #4]
 8005f06:	e7e9      	b.n	8005edc <skipQuoteProgramData+0x4>
            } else {
                state->pos--;
 8005f08:	6065      	str	r5, [r4, #4]
            }
        } else {
            break;
        }
    }
}
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}

08005f0c <skipProgramMnemonic>:
static int skipProgramMnemonic(lex_state_t * state) {
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4604      	mov	r4, r0
    const char * startPos = state->pos;
 8005f10:	6845      	ldr	r5, [r0, #4]
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8005f12:	f7ff ffc5 	bl	8005ea0 <iseos>
 8005f16:	b130      	cbz	r0, 8005f26 <skipProgramMnemonic+0x1a>
    if (iseos(state)) {
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f7ff ffc1 	bl	8005ea0 <iseos>
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	b1d8      	cbz	r0, 8005f5a <skipProgramMnemonic+0x4e>
        return (state->pos - startPos) * SKIP_INCOMPLETE;
 8005f22:	1ae8      	subs	r0, r5, r3
}
 8005f24:	bd38      	pop	{r3, r4, r5, pc}
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8005f26:	f001 fb97 	bl	8007658 <__locale_ctype_ptr>
 8005f2a:	6863      	ldr	r3, [r4, #4]
 8005f2c:	781a      	ldrb	r2, [r3, #0]
 8005f2e:	4410      	add	r0, r2
 8005f30:	7842      	ldrb	r2, [r0, #1]
 8005f32:	0790      	lsls	r0, r2, #30
 8005f34:	d0f0      	beq.n	8005f18 <skipProgramMnemonic+0xc>
            state->pos++;
 8005f36:	3301      	adds	r3, #1
 8005f38:	6063      	str	r3, [r4, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f7ff ffb0 	bl	8005ea0 <iseos>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d1e9      	bne.n	8005f18 <skipProgramMnemonic+0xc>
 8005f44:	f001 fb88 	bl	8007658 <__locale_ctype_ptr>
 8005f48:	6863      	ldr	r3, [r4, #4]
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	4410      	add	r0, r2
 8005f4e:	7841      	ldrb	r1, [r0, #1]
 8005f50:	0749      	lsls	r1, r1, #29
 8005f52:	d1f0      	bne.n	8005f36 <skipProgramMnemonic+0x2a>
 8005f54:	2a5f      	cmp	r2, #95	; 0x5f
 8005f56:	d0ee      	beq.n	8005f36 <skipProgramMnemonic+0x2a>
 8005f58:	e7de      	b.n	8005f18 <skipProgramMnemonic+0xc>
        return (state->pos - startPos) * SKIP_OK;
 8005f5a:	1b58      	subs	r0, r3, r5
 8005f5c:	e7e2      	b.n	8005f24 <skipProgramMnemonic+0x18>

08005f5e <skipNumbers>:
static int skipNumbers(lex_state_t * state) {
 8005f5e:	b538      	push	{r3, r4, r5, lr}
 8005f60:	4605      	mov	r5, r0
    int someNumbers = 0;
 8005f62:	2400      	movs	r4, #0
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8005f64:	4628      	mov	r0, r5
 8005f66:	f7ff ff9b 	bl	8005ea0 <iseos>
 8005f6a:	b938      	cbnz	r0, 8005f7c <skipNumbers+0x1e>
 8005f6c:	f001 fb74 	bl	8007658 <__locale_ctype_ptr>
 8005f70:	686b      	ldr	r3, [r5, #4]
 8005f72:	781a      	ldrb	r2, [r3, #0]
 8005f74:	4410      	add	r0, r2
 8005f76:	7842      	ldrb	r2, [r0, #1]
 8005f78:	0752      	lsls	r2, r2, #29
 8005f7a:	d401      	bmi.n	8005f80 <skipNumbers+0x22>
}
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
        state->pos++;
 8005f80:	3301      	adds	r3, #1
 8005f82:	606b      	str	r3, [r5, #4]
        someNumbers++;
 8005f84:	3401      	adds	r4, #1
 8005f86:	e7ed      	b.n	8005f64 <skipNumbers+0x6>

08005f88 <skipAlpha>:
static int skipAlpha(lex_state_t * state) {
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4605      	mov	r5, r0
    int someLetters = 0;
 8005f8c:	2400      	movs	r4, #0
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f7ff ff86 	bl	8005ea0 <iseos>
 8005f94:	b938      	cbnz	r0, 8005fa6 <skipAlpha+0x1e>
 8005f96:	f001 fb5f 	bl	8007658 <__locale_ctype_ptr>
 8005f9a:	686b      	ldr	r3, [r5, #4]
 8005f9c:	781a      	ldrb	r2, [r3, #0]
 8005f9e:	4410      	add	r0, r2
 8005fa0:	7842      	ldrb	r2, [r0, #1]
 8005fa2:	0792      	lsls	r2, r2, #30
 8005fa4:	d101      	bne.n	8005faa <skipAlpha+0x22>
}
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	bd38      	pop	{r3, r4, r5, pc}
        state->pos++;
 8005faa:	3301      	adds	r3, #1
 8005fac:	606b      	str	r3, [r5, #4]
        someLetters++;
 8005fae:	3401      	adds	r4, #1
 8005fb0:	e7ed      	b.n	8005f8e <skipAlpha+0x6>

08005fb2 <skipPlusmn>:
static int skipPlusmn(lex_state_t * state) {
 8005fb2:	b508      	push	{r3, lr}
 8005fb4:	4601      	mov	r1, r0
    if (!iseos(state) && isplusmn(state->pos[0])) {
 8005fb6:	f7ff ff73 	bl	8005ea0 <iseos>
 8005fba:	b948      	cbnz	r0, 8005fd0 <skipPlusmn+0x1e>
 8005fbc:	684b      	ldr	r3, [r1, #4]
 8005fbe:	781a      	ldrb	r2, [r3, #0]
    return c == '+' || c == '-';
 8005fc0:	2a2b      	cmp	r2, #43	; 0x2b
 8005fc2:	d001      	beq.n	8005fc8 <skipPlusmn+0x16>
 8005fc4:	2a2d      	cmp	r2, #45	; 0x2d
 8005fc6:	d102      	bne.n	8005fce <skipPlusmn+0x1c>
        return SKIP_OK;
 8005fc8:	2001      	movs	r0, #1
        state->pos++;
 8005fca:	3301      	adds	r3, #1
 8005fcc:	604b      	str	r3, [r1, #4]
}
 8005fce:	bd08      	pop	{r3, pc}
        return SKIP_NONE;
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e7fc      	b.n	8005fce <skipPlusmn+0x1c>

08005fd4 <skipChr>:
static int skipChr(lex_state_t * state, char chr) {
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	4604      	mov	r4, r0
    if (!iseos(state) && ischr(state, chr)) {
 8005fd8:	f7ff ff62 	bl	8005ea0 <iseos>
 8005fdc:	b938      	cbnz	r0, 8005fee <skipChr+0x1a>
 8005fde:	6863      	ldr	r3, [r4, #4]
 8005fe0:	781a      	ldrb	r2, [r3, #0]
 8005fe2:	428a      	cmp	r2, r1
 8005fe4:	d102      	bne.n	8005fec <skipChr+0x18>
        return SKIP_OK;
 8005fe6:	2001      	movs	r0, #1
        state->pos++;
 8005fe8:	3301      	adds	r3, #1
 8005fea:	6063      	str	r3, [r4, #4]
}
 8005fec:	bd10      	pop	{r4, pc}
        return SKIP_NONE;
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e7fc      	b.n	8005fec <skipChr+0x18>

08005ff2 <skipDigit>:
static int skipDigit(lex_state_t * state) {
 8005ff2:	b510      	push	{r4, lr}
 8005ff4:	4604      	mov	r4, r0
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8005ff6:	f7ff ff53 	bl	8005ea0 <iseos>
 8005ffa:	b108      	cbz	r0, 8006000 <skipDigit+0xe>
        return SKIP_NONE;
 8005ffc:	2000      	movs	r0, #0
}
 8005ffe:	bd10      	pop	{r4, pc}
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8006000:	f001 fb2a 	bl	8007658 <__locale_ctype_ptr>
 8006004:	6863      	ldr	r3, [r4, #4]
 8006006:	781a      	ldrb	r2, [r3, #0]
 8006008:	4410      	add	r0, r2
 800600a:	7842      	ldrb	r2, [r0, #1]
 800600c:	0752      	lsls	r2, r2, #29
 800600e:	d5f5      	bpl.n	8005ffc <skipDigit+0xa>
        state->pos++;
 8006010:	3301      	adds	r3, #1
 8006012:	6063      	str	r3, [r4, #4]
        return SKIP_OK;
 8006014:	2001      	movs	r0, #1
 8006016:	e7f2      	b.n	8005ffe <skipDigit+0xc>

08006018 <scpiLex_IsEos>:
    return iseos(state);
 8006018:	f7ff bf42 	b.w	8005ea0 <iseos>

0800601c <scpiLex_WhiteSpace>:
int scpiLex_WhiteSpace(lex_state_t * state, scpi_token_t * token) {
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	460c      	mov	r4, r1
 8006020:	4605      	mov	r5, r0
    token->ptr = state->pos;
 8006022:	6843      	ldr	r3, [r0, #4]
 8006024:	604b      	str	r3, [r1, #4]
    skipWs(state);
 8006026:	f7ff ff44 	bl	8005eb2 <skipWs>
    token->len = state->pos - token->ptr;
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	6868      	ldr	r0, [r5, #4]
 800602e:	1ac0      	subs	r0, r0, r3
    if (token->len > 0) {
 8006030:	2800      	cmp	r0, #0
        token->type = SCPI_TOKEN_WS;
 8006032:	bfcc      	ite	gt
 8006034:	2317      	movgt	r3, #23
        token->type = SCPI_TOKEN_UNKNOWN;
 8006036:	231a      	movle	r3, #26
    token->len = state->pos - token->ptr;
 8006038:	60a0      	str	r0, [r4, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 800603a:	7023      	strb	r3, [r4, #0]
}
 800603c:	bd38      	pop	{r3, r4, r5, pc}

0800603e <scpiLex_ProgramHeader>:
    token->ptr = state->pos;
 800603e:	6843      	ldr	r3, [r0, #4]
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 8006040:	b570      	push	{r4, r5, r6, lr}
    token->ptr = state->pos;
 8006042:	604b      	str	r3, [r1, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8006044:	231a      	movs	r3, #26
 8006046:	700b      	strb	r3, [r1, #0]
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 8006048:	4604      	mov	r4, r0
 800604a:	460d      	mov	r5, r1
    if (!iseos(state) && ischr(state, '*')) {
 800604c:	f7ff ff28 	bl	8005ea0 <iseos>
 8006050:	4606      	mov	r6, r0
 8006052:	2800      	cmp	r0, #0
 8006054:	d130      	bne.n	80060b8 <scpiLex_ProgramHeader+0x7a>
 8006056:	6863      	ldr	r3, [r4, #4]
 8006058:	781a      	ldrb	r2, [r3, #0]
 800605a:	2a2a      	cmp	r2, #42	; 0x2a
 800605c:	d11d      	bne.n	800609a <scpiLex_ProgramHeader+0x5c>
        state->pos++;
 800605e:	3301      	adds	r3, #1
 8006060:	6063      	str	r3, [r4, #4]
        res = skipProgramMnemonic(state);
 8006062:	4620      	mov	r0, r4
 8006064:	f7ff ff52 	bl	8005f0c <skipProgramMnemonic>
        if (res == SKIP_NONE && iseos(state)) {
 8006068:	b970      	cbnz	r0, 8006088 <scpiLex_ProgramHeader+0x4a>
        token->type = SCPI_TOKEN_INCOMPLETE_COMMON_PROGRAM_HEADER;
 800606a:	2314      	movs	r3, #20
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 800606c:	702b      	strb	r3, [r5, #0]
    if (token->type != SCPI_TOKEN_UNKNOWN) {
 800606e:	782b      	ldrb	r3, [r5, #0]
 8006070:	686a      	ldr	r2, [r5, #4]
 8006072:	2b1a      	cmp	r3, #26
        token->len = 0;
 8006074:	bf0b      	itete	eq
 8006076:	2300      	moveq	r3, #0
        token->len = state->pos - token->ptr;
 8006078:	6863      	ldrne	r3, [r4, #4]
        token->len = 0;
 800607a:	60ab      	streq	r3, [r5, #8]
        token->len = state->pos - token->ptr;
 800607c:	1a9b      	subne	r3, r3, r2
 800607e:	bf14      	ite	ne
 8006080:	60ab      	strne	r3, [r5, #8]
        state->pos = token->ptr;
 8006082:	6062      	streq	r2, [r4, #4]
}
 8006084:	68a8      	ldr	r0, [r5, #8]
 8006086:	bd70      	pop	{r4, r5, r6, pc}
        if (skipChr(state, '?') >= SKIP_OK) {
 8006088:	213f      	movs	r1, #63	; 0x3f
 800608a:	4620      	mov	r0, r4
 800608c:	f7ff ffa2 	bl	8005fd4 <skipChr>
 8006090:	2800      	cmp	r0, #0
            token->type = SCPI_TOKEN_COMMON_QUERY_PROGRAM_HEADER;
 8006092:	bfcc      	ite	gt
 8006094:	2316      	movgt	r3, #22
            token->type = SCPI_TOKEN_COMMON_PROGRAM_HEADER;
 8006096:	2313      	movle	r3, #19
 8006098:	e7e8      	b.n	800606c <scpiLex_ProgramHeader+0x2e>
    if (!iseos(state) && ischr(state, ':')) {
 800609a:	2a3a      	cmp	r2, #58	; 0x3a
 800609c:	d102      	bne.n	80060a4 <scpiLex_ProgramHeader+0x66>
        return SKIP_OK;
 800609e:	2601      	movs	r6, #1
        state->pos++;
 80060a0:	3301      	adds	r3, #1
 80060a2:	6063      	str	r3, [r4, #4]
    res = skipProgramMnemonic(state);
 80060a4:	4620      	mov	r0, r4
 80060a6:	f7ff ff31 	bl	8005f0c <skipProgramMnemonic>
    if (res >= SKIP_OK) {
 80060aa:	2800      	cmp	r0, #0
 80060ac:	dc07      	bgt.n	80060be <scpiLex_ProgramHeader+0x80>
    } else if (res <= SKIP_INCOMPLETE) {
 80060ae:	d115      	bne.n	80060dc <scpiLex_ProgramHeader+0x9e>
    } else if (firstColon) {
 80060b0:	2e00      	cmp	r6, #0
 80060b2:	d0dc      	beq.n	800606e <scpiLex_ProgramHeader+0x30>
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 80060b4:	2312      	movs	r3, #18
 80060b6:	e7d9      	b.n	800606c <scpiLex_ProgramHeader+0x2e>
        return SKIP_NONE;
 80060b8:	2600      	movs	r6, #0
 80060ba:	e7f3      	b.n	80060a4 <scpiLex_ProgramHeader+0x66>
            } else if (res == SKIP_NONE) {
 80060bc:	d0fa      	beq.n	80060b4 <scpiLex_ProgramHeader+0x76>
    if (!iseos(state) && ischr(state, ':')) {
 80060be:	4620      	mov	r0, r4
 80060c0:	f7ff feee 	bl	8005ea0 <iseos>
 80060c4:	b950      	cbnz	r0, 80060dc <scpiLex_ProgramHeader+0x9e>
 80060c6:	6863      	ldr	r3, [r4, #4]
 80060c8:	781a      	ldrb	r2, [r3, #0]
 80060ca:	2a3a      	cmp	r2, #58	; 0x3a
 80060cc:	d106      	bne.n	80060dc <scpiLex_ProgramHeader+0x9e>
        state->pos++;
 80060ce:	3301      	adds	r3, #1
 80060d0:	6063      	str	r3, [r4, #4]
            res = skipProgramMnemonic(state);
 80060d2:	4620      	mov	r0, r4
 80060d4:	f7ff ff1a 	bl	8005f0c <skipProgramMnemonic>
            if (res <= SKIP_INCOMPLETE) {
 80060d8:	2800      	cmp	r0, #0
 80060da:	daef      	bge.n	80060bc <scpiLex_ProgramHeader+0x7e>
            if (skipChr(state, '?') >= SKIP_OK) {
 80060dc:	213f      	movs	r1, #63	; 0x3f
 80060de:	4620      	mov	r0, r4
 80060e0:	f7ff ff78 	bl	8005fd4 <skipChr>
 80060e4:	2800      	cmp	r0, #0
                token->type = SCPI_TOKEN_COMPOUND_QUERY_PROGRAM_HEADER;
 80060e6:	bfcc      	ite	gt
 80060e8:	2315      	movgt	r3, #21
                token->type = SCPI_TOKEN_COMPOUND_PROGRAM_HEADER;
 80060ea:	2311      	movle	r3, #17
 80060ec:	e7be      	b.n	800606c <scpiLex_ProgramHeader+0x2e>

080060ee <scpiLex_CharacterProgramData>:
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 80060ee:	b538      	push	{r3, r4, r5, lr}
    token->ptr = state->pos;
 80060f0:	6843      	ldr	r3, [r0, #4]
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 80060f2:	4604      	mov	r4, r0
    token->ptr = state->pos;
 80060f4:	604b      	str	r3, [r1, #4]
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 80060f6:	460d      	mov	r5, r1
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 80060f8:	f7ff fed2 	bl	8005ea0 <iseos>
 80060fc:	b138      	cbz	r0, 800610e <scpiLex_CharacterProgramData+0x20>
    token->len = state->pos - token->ptr;
 80060fe:	6860      	ldr	r0, [r4, #4]
 8006100:	686b      	ldr	r3, [r5, #4]
 8006102:	1ac0      	subs	r0, r0, r3
    if (token->len > 0) {
 8006104:	2800      	cmp	r0, #0
    token->len = state->pos - token->ptr;
 8006106:	60a8      	str	r0, [r5, #8]
    if (token->len > 0) {
 8006108:	dc1b      	bgt.n	8006142 <scpiLex_CharacterProgramData+0x54>
        token->type = SCPI_TOKEN_UNKNOWN;
 800610a:	231a      	movs	r3, #26
 800610c:	e01a      	b.n	8006144 <scpiLex_CharacterProgramData+0x56>
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800610e:	f001 faa3 	bl	8007658 <__locale_ctype_ptr>
 8006112:	6863      	ldr	r3, [r4, #4]
 8006114:	781a      	ldrb	r2, [r3, #0]
 8006116:	4410      	add	r0, r2
 8006118:	7842      	ldrb	r2, [r0, #1]
 800611a:	0790      	lsls	r0, r2, #30
 800611c:	d0ef      	beq.n	80060fe <scpiLex_CharacterProgramData+0x10>
            state->pos++;
 800611e:	3301      	adds	r3, #1
 8006120:	6063      	str	r3, [r4, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8006122:	4620      	mov	r0, r4
 8006124:	f7ff febc 	bl	8005ea0 <iseos>
 8006128:	2800      	cmp	r0, #0
 800612a:	d1e8      	bne.n	80060fe <scpiLex_CharacterProgramData+0x10>
 800612c:	f001 fa94 	bl	8007658 <__locale_ctype_ptr>
 8006130:	6863      	ldr	r3, [r4, #4]
 8006132:	781a      	ldrb	r2, [r3, #0]
 8006134:	4410      	add	r0, r2
 8006136:	7841      	ldrb	r1, [r0, #1]
 8006138:	0749      	lsls	r1, r1, #29
 800613a:	d1f0      	bne.n	800611e <scpiLex_CharacterProgramData+0x30>
 800613c:	2a5f      	cmp	r2, #95	; 0x5f
 800613e:	d0ee      	beq.n	800611e <scpiLex_CharacterProgramData+0x30>
 8006140:	e7dd      	b.n	80060fe <scpiLex_CharacterProgramData+0x10>
        token->type = SCPI_TOKEN_PROGRAM_MNEMONIC;
 8006142:	2309      	movs	r3, #9
        token->type = SCPI_TOKEN_UNKNOWN;
 8006144:	702b      	strb	r3, [r5, #0]
}
 8006146:	bd38      	pop	{r3, r4, r5, pc}

08006148 <scpiLex_DecimalNumericProgramData>:
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	4604      	mov	r4, r0
    token->ptr = state->pos;
 800614c:	6843      	ldr	r3, [r0, #4]
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 800614e:	460d      	mov	r5, r1
    token->ptr = state->pos;
 8006150:	604b      	str	r3, [r1, #4]
    skipPlusmn(state);
 8006152:	f7ff ff2e 	bl	8005fb2 <skipPlusmn>
    someNumbers += skipNumbers(state);
 8006156:	4620      	mov	r0, r4
 8006158:	f7ff ff01 	bl	8005f5e <skipNumbers>
    if (skipChr(state, '.')) {
 800615c:	212e      	movs	r1, #46	; 0x2e
    someNumbers += skipNumbers(state);
 800615e:	4606      	mov	r6, r0
    if (skipChr(state, '.')) {
 8006160:	4620      	mov	r0, r4
 8006162:	f7ff ff37 	bl	8005fd4 <skipChr>
 8006166:	b118      	cbz	r0, 8006170 <scpiLex_DecimalNumericProgramData+0x28>
        someNumbers += skipNumbers(state);
 8006168:	4620      	mov	r0, r4
 800616a:	f7ff fef8 	bl	8005f5e <skipNumbers>
 800616e:	4406      	add	r6, r0
    if (skipMantisa(state)) {
 8006170:	b336      	cbz	r6, 80061c0 <scpiLex_DecimalNumericProgramData+0x78>
        skipWs(state);
 8006172:	4620      	mov	r0, r4
        rollback = state->pos;
 8006174:	6866      	ldr	r6, [r4, #4]
        skipWs(state);
 8006176:	f7ff fe9c 	bl	8005eb2 <skipWs>
    if (!iseos(state) && isE(state->pos[0])) {
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff fe90 	bl	8005ea0 <iseos>
 8006180:	b150      	cbz	r0, 8006198 <scpiLex_DecimalNumericProgramData+0x50>
            state->pos = rollback;
 8006182:	6066      	str	r6, [r4, #4]
    token->len = state->pos - token->ptr;
 8006184:	686b      	ldr	r3, [r5, #4]
 8006186:	6860      	ldr	r0, [r4, #4]
 8006188:	1ac0      	subs	r0, r0, r3
    if (token->len > 0) {
 800618a:	2800      	cmp	r0, #0
        token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA;
 800618c:	bfcc      	ite	gt
 800618e:	230a      	movgt	r3, #10
        token->type = SCPI_TOKEN_UNKNOWN;
 8006190:	231a      	movle	r3, #26
    token->len = state->pos - token->ptr;
 8006192:	60a8      	str	r0, [r5, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8006194:	702b      	strb	r3, [r5, #0]
}
 8006196:	bd70      	pop	{r4, r5, r6, pc}
    if (!iseos(state) && isE(state->pos[0])) {
 8006198:	6863      	ldr	r3, [r4, #4]
    return c == 'e' || c == 'E';
 800619a:	781a      	ldrb	r2, [r3, #0]
 800619c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80061a0:	2a45      	cmp	r2, #69	; 0x45
 80061a2:	d1ee      	bne.n	8006182 <scpiLex_DecimalNumericProgramData+0x3a>
        state->pos++;
 80061a4:	3301      	adds	r3, #1
 80061a6:	6063      	str	r3, [r4, #4]
        skipWs(state);
 80061a8:	4620      	mov	r0, r4
 80061aa:	f7ff fe82 	bl	8005eb2 <skipWs>
        skipPlusmn(state);
 80061ae:	4620      	mov	r0, r4
 80061b0:	f7ff feff 	bl	8005fb2 <skipPlusmn>
        someNumbers = skipNumbers(state);
 80061b4:	4620      	mov	r0, r4
 80061b6:	f7ff fed2 	bl	8005f5e <skipNumbers>
        if (!skipExponent(state)) {
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d1e2      	bne.n	8006184 <scpiLex_DecimalNumericProgramData+0x3c>
 80061be:	e7e0      	b.n	8006182 <scpiLex_DecimalNumericProgramData+0x3a>
        state->pos = token->ptr;
 80061c0:	686b      	ldr	r3, [r5, #4]
 80061c2:	6063      	str	r3, [r4, #4]
 80061c4:	e7de      	b.n	8006184 <scpiLex_DecimalNumericProgramData+0x3c>

080061c6 <scpiLex_SuffixProgramData>:
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 80061c6:	b538      	push	{r3, r4, r5, lr}
 80061c8:	4604      	mov	r4, r0
    token->ptr = state->pos;
 80061ca:	6843      	ldr	r3, [r0, #4]
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 80061cc:	460d      	mov	r5, r1
    token->ptr = state->pos;
 80061ce:	604b      	str	r3, [r1, #4]
    skipChr(state, '/');
 80061d0:	212f      	movs	r1, #47	; 0x2f
 80061d2:	f7ff feff 	bl	8005fd4 <skipChr>
    if (skipAlpha(state)) {
 80061d6:	4620      	mov	r0, r4
 80061d8:	f7ff fed6 	bl	8005f88 <skipAlpha>
 80061dc:	b1a8      	cbz	r0, 800620a <scpiLex_SuffixProgramData+0x44>
        skipChr(state, '-');
 80061de:	212d      	movs	r1, #45	; 0x2d
 80061e0:	4620      	mov	r0, r4
 80061e2:	f7ff fef7 	bl	8005fd4 <skipChr>
        skipDigit(state);
 80061e6:	4620      	mov	r0, r4
 80061e8:	f7ff ff03 	bl	8005ff2 <skipDigit>
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 80061ec:	4620      	mov	r0, r4
 80061ee:	f7ff fe57 	bl	8005ea0 <iseos>
 80061f2:	b950      	cbnz	r0, 800620a <scpiLex_SuffixProgramData+0x44>
 80061f4:	6863      	ldr	r3, [r4, #4]
    return (state->pos[0] == chr);
 80061f6:	781a      	ldrb	r2, [r3, #0]
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 80061f8:	3a2e      	subs	r2, #46	; 0x2e
 80061fa:	2a01      	cmp	r2, #1
 80061fc:	d805      	bhi.n	800620a <scpiLex_SuffixProgramData+0x44>
        state->pos++;
 80061fe:	3301      	adds	r3, #1
 8006200:	6063      	str	r3, [r4, #4]
            skipAlpha(state);
 8006202:	4620      	mov	r0, r4
 8006204:	f7ff fec0 	bl	8005f88 <skipAlpha>
 8006208:	e7e9      	b.n	80061de <scpiLex_SuffixProgramData+0x18>
    token->len = state->pos - token->ptr;
 800620a:	6863      	ldr	r3, [r4, #4]
 800620c:	686a      	ldr	r2, [r5, #4]
 800620e:	1a9b      	subs	r3, r3, r2
    if ((token->len > 0)) {
 8006210:	2b00      	cmp	r3, #0
    token->len = state->pos - token->ptr;
 8006212:	60ab      	str	r3, [r5, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8006214:	bfdd      	ittte	le
 8006216:	231a      	movle	r3, #26
 8006218:	702b      	strble	r3, [r5, #0]
        token->len = 0;
 800621a:	2300      	movle	r3, #0
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 800621c:	230c      	movgt	r3, #12
        state->pos = token->ptr;
 800621e:	bfda      	itte	le
 8006220:	6062      	strle	r2, [r4, #4]
        token->len = 0;
 8006222:	60ab      	strle	r3, [r5, #8]
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 8006224:	702b      	strbgt	r3, [r5, #0]
}
 8006226:	68a8      	ldr	r0, [r5, #8]
 8006228:	bd38      	pop	{r3, r4, r5, pc}

0800622a <scpiLex_NondecimalNumericData>:
    token->ptr = state->pos;
 800622a:	6843      	ldr	r3, [r0, #4]
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	460d      	mov	r5, r1
    token->ptr = state->pos;
 8006230:	604b      	str	r3, [r1, #4]
    if (skipChr(state, '#')) {
 8006232:	2123      	movs	r1, #35	; 0x23
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 8006234:	4604      	mov	r4, r0
    if (skipChr(state, '#')) {
 8006236:	f7ff fecd 	bl	8005fd4 <skipChr>
 800623a:	2800      	cmp	r0, #0
 800623c:	d054      	beq.n	80062e8 <scpiLex_NondecimalNumericData+0xbe>
        if (!iseos(state)) {
 800623e:	4620      	mov	r0, r4
 8006240:	f7ff fe2e 	bl	8005ea0 <iseos>
 8006244:	4606      	mov	r6, r0
 8006246:	2800      	cmp	r0, #0
 8006248:	d14e      	bne.n	80062e8 <scpiLex_NondecimalNumericData+0xbe>
            if (isH(state->pos[0])) {
 800624a:	6863      	ldr	r3, [r4, #4]
    return c == 'h' || c == 'H';
 800624c:	781a      	ldrb	r2, [r3, #0]
 800624e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006252:	2a48      	cmp	r2, #72	; 0x48
 8006254:	d122      	bne.n	800629c <scpiLex_NondecimalNumericData+0x72>
                state->pos++;
 8006256:	3301      	adds	r3, #1
 8006258:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 800625a:	4620      	mov	r0, r4
 800625c:	f7ff fe20 	bl	8005ea0 <iseos>
 8006260:	b178      	cbz	r0, 8006282 <scpiLex_NondecimalNumericData+0x58>
                token->type = SCPI_TOKEN_HEXNUM;
 8006262:	2306      	movs	r3, #6
                token->type = SCPI_TOKEN_BINNUM;
 8006264:	702b      	strb	r3, [r5, #0]
    if (someNumbers) {
 8006266:	2e00      	cmp	r6, #0
 8006268:	d03e      	beq.n	80062e8 <scpiLex_NondecimalNumericData+0xbe>
        token->ptr += 2; /* ignore number prefix */
 800626a:	686b      	ldr	r3, [r5, #4]
        token->len = state->pos - token->ptr;
 800626c:	6862      	ldr	r2, [r4, #4]
        token->ptr += 2; /* ignore number prefix */
 800626e:	3302      	adds	r3, #2
 8006270:	606b      	str	r3, [r5, #4]
        token->len = state->pos - token->ptr;
 8006272:	1ad3      	subs	r3, r2, r3
        token->len = 0;
 8006274:	60ab      	str	r3, [r5, #8]
    return token->len > 0 ? token->len + 2 : 0;
 8006276:	68a8      	ldr	r0, [r5, #8]
 8006278:	2800      	cmp	r0, #0
 800627a:	bfcc      	ite	gt
 800627c:	3002      	addgt	r0, #2
 800627e:	2000      	movle	r0, #0
}
 8006280:	bd70      	pop	{r4, r5, r6, pc}
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8006282:	f001 f9e9 	bl	8007658 <__locale_ctype_ptr>
 8006286:	6863      	ldr	r3, [r4, #4]
 8006288:	781a      	ldrb	r2, [r3, #0]
 800628a:	4410      	add	r0, r2
 800628c:	7842      	ldrb	r2, [r0, #1]
 800628e:	f012 0f44 	tst.w	r2, #68	; 0x44
 8006292:	d0e6      	beq.n	8006262 <scpiLex_NondecimalNumericData+0x38>
        state->pos++;
 8006294:	3301      	adds	r3, #1
 8006296:	6063      	str	r3, [r4, #4]
        someNumbers++;
 8006298:	3601      	adds	r6, #1
 800629a:	e7de      	b.n	800625a <scpiLex_NondecimalNumericData+0x30>
    return c == 'q' || c == 'Q';
 800629c:	2a51      	cmp	r2, #81	; 0x51
 800629e:	d110      	bne.n	80062c2 <scpiLex_NondecimalNumericData+0x98>
                state->pos++;
 80062a0:	3301      	adds	r3, #1
 80062a2:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 80062a4:	4620      	mov	r0, r4
 80062a6:	f7ff fdfb 	bl	8005ea0 <iseos>
 80062aa:	b940      	cbnz	r0, 80062be <scpiLex_NondecimalNumericData+0x94>
 80062ac:	6863      	ldr	r3, [r4, #4]
    if ((c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7')) {
 80062ae:	781a      	ldrb	r2, [r3, #0]
 80062b0:	3a30      	subs	r2, #48	; 0x30
 80062b2:	2a07      	cmp	r2, #7
 80062b4:	d803      	bhi.n	80062be <scpiLex_NondecimalNumericData+0x94>
        state->pos++;
 80062b6:	3301      	adds	r3, #1
 80062b8:	6063      	str	r3, [r4, #4]
        someNumbers++;
 80062ba:	3601      	adds	r6, #1
 80062bc:	e7f2      	b.n	80062a4 <scpiLex_NondecimalNumericData+0x7a>
                token->type = SCPI_TOKEN_OCTNUM;
 80062be:	2307      	movs	r3, #7
 80062c0:	e7d0      	b.n	8006264 <scpiLex_NondecimalNumericData+0x3a>
    return c == 'b' || c == 'B';
 80062c2:	2a42      	cmp	r2, #66	; 0x42
 80062c4:	d110      	bne.n	80062e8 <scpiLex_NondecimalNumericData+0xbe>
                state->pos++;
 80062c6:	3301      	adds	r3, #1
 80062c8:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 80062ca:	4620      	mov	r0, r4
 80062cc:	f7ff fde8 	bl	8005ea0 <iseos>
 80062d0:	b940      	cbnz	r0, 80062e4 <scpiLex_NondecimalNumericData+0xba>
 80062d2:	6863      	ldr	r3, [r4, #4]
    if ((c == '0') || (c == '1')) {
 80062d4:	781a      	ldrb	r2, [r3, #0]
 80062d6:	3a30      	subs	r2, #48	; 0x30
 80062d8:	2a01      	cmp	r2, #1
 80062da:	d803      	bhi.n	80062e4 <scpiLex_NondecimalNumericData+0xba>
        state->pos++;
 80062dc:	3301      	adds	r3, #1
 80062de:	6063      	str	r3, [r4, #4]
        someNumbers++;
 80062e0:	3601      	adds	r6, #1
 80062e2:	e7f2      	b.n	80062ca <scpiLex_NondecimalNumericData+0xa0>
                token->type = SCPI_TOKEN_BINNUM;
 80062e4:	2308      	movs	r3, #8
 80062e6:	e7bd      	b.n	8006264 <scpiLex_NondecimalNumericData+0x3a>
        token->type = SCPI_TOKEN_UNKNOWN;
 80062e8:	231a      	movs	r3, #26
 80062ea:	702b      	strb	r3, [r5, #0]
        state->pos = token->ptr;
 80062ec:	686b      	ldr	r3, [r5, #4]
 80062ee:	6063      	str	r3, [r4, #4]
        token->len = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e7bf      	b.n	8006274 <scpiLex_NondecimalNumericData+0x4a>

080062f4 <scpiLex_StringProgramData>:
 * Detect token String data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 80062f4:	b538      	push	{r3, r4, r5, lr}
    token->ptr = state->pos;
 80062f6:	6843      	ldr	r3, [r0, #4]
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 80062f8:	4604      	mov	r4, r0
    token->ptr = state->pos;
 80062fa:	604b      	str	r3, [r1, #4]
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 80062fc:	460d      	mov	r5, r1

    if (!iseos(state)) {
 80062fe:	f7ff fdcf 	bl	8005ea0 <iseos>
 8006302:	b9a0      	cbnz	r0, 800632e <scpiLex_StringProgramData+0x3a>
        if (ischr(state, '"')) {
 8006304:	6863      	ldr	r3, [r4, #4]
    return (state->pos[0] == chr);
 8006306:	7819      	ldrb	r1, [r3, #0]
        if (ischr(state, '"')) {
 8006308:	2922      	cmp	r1, #34	; 0x22
 800630a:	d11f      	bne.n	800634c <scpiLex_StringProgramData+0x58>
            state->pos++;
 800630c:	3301      	adds	r3, #1
 800630e:	6063      	str	r3, [r4, #4]
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 8006310:	230f      	movs	r3, #15
    skipQuoteProgramData(state, '"');
 8006312:	4620      	mov	r0, r4
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 8006314:	702b      	strb	r3, [r5, #0]
    skipQuoteProgramData(state, '"');
 8006316:	f7ff fddf 	bl	8005ed8 <skipQuoteProgramData>
            skipDoubleQuoteProgramData(state);
            if (!iseos(state) && ischr(state, '"')) {
 800631a:	4620      	mov	r0, r4
 800631c:	f7ff fdc0 	bl	8005ea0 <iseos>
 8006320:	bb28      	cbnz	r0, 800636e <scpiLex_StringProgramData+0x7a>
 8006322:	6863      	ldr	r3, [r4, #4]
 8006324:	781a      	ldrb	r2, [r3, #0]
 8006326:	2a22      	cmp	r2, #34	; 0x22
            }
        } else if (ischr(state, '\'')) {
            state->pos++;
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
            skipSingleQuoteProgramData(state);
            if (!iseos(state) && ischr(state, '\'')) {
 8006328:	d121      	bne.n	800636e <scpiLex_StringProgramData+0x7a>
                state->pos++;
 800632a:	3301      	adds	r3, #1
                token->len = state->pos - token->ptr;
            } else {
                state->pos = token->ptr;
 800632c:	6063      	str	r3, [r4, #4]
            }
        }
    }

    token->len = state->pos - token->ptr;
 800632e:	6863      	ldr	r3, [r4, #4]
 8006330:	686a      	ldr	r2, [r5, #4]
 8006332:	1a9b      	subs	r3, r3, r2

    if ((token->len > 0)) {
 8006334:	2b00      	cmp	r3, #0
    token->len = state->pos - token->ptr;
 8006336:	60ab      	str	r3, [r5, #8]
    if ((token->len > 0)) {
 8006338:	dc04      	bgt.n	8006344 <scpiLex_StringProgramData+0x50>
        /* token->ptr++;
         * token->len -= 2; */
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800633a:	231a      	movs	r3, #26
 800633c:	702b      	strb	r3, [r5, #0]
        state->pos = token->ptr;
        token->len = 0;
 800633e:	2300      	movs	r3, #0
        state->pos = token->ptr;
 8006340:	6062      	str	r2, [r4, #4]
        token->len = 0;
 8006342:	60ab      	str	r3, [r5, #8]
    }

    return token->len > 0 ? token->len : 0;
 8006344:	68a8      	ldr	r0, [r5, #8]
}
 8006346:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800634a:	bd38      	pop	{r3, r4, r5, pc}
        } else if (ischr(state, '\'')) {
 800634c:	2927      	cmp	r1, #39	; 0x27
 800634e:	d1ee      	bne.n	800632e <scpiLex_StringProgramData+0x3a>
            state->pos++;
 8006350:	3301      	adds	r3, #1
 8006352:	6063      	str	r3, [r4, #4]
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 8006354:	230e      	movs	r3, #14
    skipQuoteProgramData(state, '\'');
 8006356:	4620      	mov	r0, r4
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 8006358:	702b      	strb	r3, [r5, #0]
    skipQuoteProgramData(state, '\'');
 800635a:	f7ff fdbd 	bl	8005ed8 <skipQuoteProgramData>
            if (!iseos(state) && ischr(state, '\'')) {
 800635e:	4620      	mov	r0, r4
 8006360:	f7ff fd9e 	bl	8005ea0 <iseos>
 8006364:	b918      	cbnz	r0, 800636e <scpiLex_StringProgramData+0x7a>
 8006366:	6863      	ldr	r3, [r4, #4]
 8006368:	781a      	ldrb	r2, [r3, #0]
 800636a:	2a27      	cmp	r2, #39	; 0x27
 800636c:	e7dc      	b.n	8006328 <scpiLex_StringProgramData+0x34>
                state->pos = token->ptr;
 800636e:	686b      	ldr	r3, [r5, #4]
 8006370:	e7dc      	b.n	800632c <scpiLex_StringProgramData+0x38>

08006372 <scpiLex_ArbitraryBlockProgramData>:
 * Detect token Block Data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8006372:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int i;
    int arbitraryBlockLength = 0;
    const char * ptr = state->pos;
 8006376:	f8d0 8004 	ldr.w	r8, [r0, #4]
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 800637a:	460d      	mov	r5, r1
    int validData = -1;
    token->ptr = state->pos;
 800637c:	f8c1 8004 	str.w	r8, [r1, #4]

    if (skipChr(state, '#')) {
 8006380:	2123      	movs	r1, #35	; 0x23
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8006382:	4604      	mov	r4, r0
    if (skipChr(state, '#')) {
 8006384:	f7ff fe26 	bl	8005fd4 <skipChr>
 8006388:	2800      	cmp	r0, #0
 800638a:	d04d      	beq.n	8006428 <scpiLex_ArbitraryBlockProgramData+0xb6>
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
 800638c:	4620      	mov	r0, r4
 800638e:	f7ff fd87 	bl	8005ea0 <iseos>
 8006392:	4606      	mov	r6, r0
 8006394:	2800      	cmp	r0, #0
 8006396:	d142      	bne.n	800641e <scpiLex_ArbitraryBlockProgramData+0xac>
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	781f      	ldrb	r7, [r3, #0]
    return isdigit(c) && (c != '0');
 800639c:	f001 f95c 	bl	8007658 <__locale_ctype_ptr>
 80063a0:	4438      	add	r0, r7
 80063a2:	7843      	ldrb	r3, [r0, #1]
 80063a4:	0758      	lsls	r0, r3, #29
 80063a6:	d53a      	bpl.n	800641e <scpiLex_ArbitraryBlockProgramData+0xac>
 80063a8:	2f30      	cmp	r7, #48	; 0x30
 80063aa:	d038      	beq.n	800641e <scpiLex_ArbitraryBlockProgramData+0xac>
            i = state->pos[0] - '0';
            state->pos++;

            for (; i > 0; i--) {
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
                    arbitraryBlockLength *= 10;
 80063ac:	f04f 090a 	mov.w	r9, #10
            i = state->pos[0] - '0';
 80063b0:	6863      	ldr	r3, [r4, #4]
 80063b2:	f813 7b01 	ldrb.w	r7, [r3], #1
 80063b6:	3f30      	subs	r7, #48	; 0x30
            state->pos++;
 80063b8:	6063      	str	r3, [r4, #4]
            for (; i > 0; i--) {
 80063ba:	2f00      	cmp	r7, #0
 80063bc:	dc17      	bgt.n	80063ee <scpiLex_ArbitraryBlockProgramData+0x7c>
                } else {
                    break;
                }
            }

            if (i == 0) {
 80063be:	d12e      	bne.n	800641e <scpiLex_ArbitraryBlockProgramData+0xac>
                state->pos += arbitraryBlockLength;
 80063c0:	6862      	ldr	r2, [r4, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	68a0      	ldr	r0, [r4, #8]
                state->pos += arbitraryBlockLength;
 80063c6:	1991      	adds	r1, r2, r6
                if ((state->buffer + state->len) >= (state->pos)) {
 80063c8:	4403      	add	r3, r0
 80063ca:	4299      	cmp	r1, r3
                state->pos += arbitraryBlockLength;
 80063cc:	6061      	str	r1, [r4, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 80063ce:	d921      	bls.n	8006414 <scpiLex_ArbitraryBlockProgramData+0xa2>
    if (validData == 1) {
        /* valid */
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
    } else if (validData == 0) {
        /* incomplete */
        token->type = SCPI_TOKEN_UNKNOWN;
 80063d0:	231a      	movs	r3, #26
 80063d2:	702b      	strb	r3, [r5, #0]
        token->len = 0;
 80063d4:	2300      	movs	r3, #0
        state->pos = state->buffer + state->len;
 80063d6:	68a2      	ldr	r2, [r4, #8]
        token->len = 0;
 80063d8:	60ab      	str	r3, [r5, #8]
        state->pos = state->buffer + state->len;
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	4413      	add	r3, r2
 80063de:	6063      	str	r3, [r4, #4]
        token->type = SCPI_TOKEN_UNKNOWN;
        state->pos = token->ptr;
        token->len = 0;
    }

    return token->len + (token->ptr - ptr);
 80063e0:	6868      	ldr	r0, [r5, #4]
 80063e2:	68ab      	ldr	r3, [r5, #8]
 80063e4:	eba0 0008 	sub.w	r0, r0, r8
}
 80063e8:	4418      	add	r0, r3
 80063ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7ff fd56 	bl	8005ea0 <iseos>
 80063f4:	b998      	cbnz	r0, 800641e <scpiLex_ArbitraryBlockProgramData+0xac>
 80063f6:	f001 f92f 	bl	8007658 <__locale_ctype_ptr>
 80063fa:	6863      	ldr	r3, [r4, #4]
 80063fc:	781a      	ldrb	r2, [r3, #0]
 80063fe:	4410      	add	r0, r2
 8006400:	7841      	ldrb	r1, [r0, #1]
 8006402:	0749      	lsls	r1, r1, #29
 8006404:	d50b      	bpl.n	800641e <scpiLex_ArbitraryBlockProgramData+0xac>
                    arbitraryBlockLength += (state->pos[0] - '0');
 8006406:	3a30      	subs	r2, #48	; 0x30
                    state->pos++;
 8006408:	3301      	adds	r3, #1
                    arbitraryBlockLength += (state->pos[0] - '0');
 800640a:	fb09 2606 	mla	r6, r9, r6, r2
                    state->pos++;
 800640e:	6063      	str	r3, [r4, #4]
            for (; i > 0; i--) {
 8006410:	3f01      	subs	r7, #1
 8006412:	e7d2      	b.n	80063ba <scpiLex_ArbitraryBlockProgramData+0x48>
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 8006414:	230d      	movs	r3, #13
                    token->len = arbitraryBlockLength;
 8006416:	e9c5 2601 	strd	r2, r6, [r5, #4]
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 800641a:	702b      	strb	r3, [r5, #0]
 800641c:	e7e0      	b.n	80063e0 <scpiLex_ArbitraryBlockProgramData+0x6e>
        } else if (iseos(state)) {
 800641e:	4620      	mov	r0, r4
 8006420:	f7ff fd3e 	bl	8005ea0 <iseos>
 8006424:	2800      	cmp	r0, #0
 8006426:	d1d3      	bne.n	80063d0 <scpiLex_ArbitraryBlockProgramData+0x5e>
        token->type = SCPI_TOKEN_UNKNOWN;
 8006428:	231a      	movs	r3, #26
 800642a:	702b      	strb	r3, [r5, #0]
        state->pos = token->ptr;
 800642c:	686b      	ldr	r3, [r5, #4]
 800642e:	6063      	str	r3, [r4, #4]
        token->len = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	60ab      	str	r3, [r5, #8]
 8006434:	e7d4      	b.n	80063e0 <scpiLex_ArbitraryBlockProgramData+0x6e>
	...

08006438 <scpiLex_ProgramExpression>:
 * Detect token Expression
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 8006438:	b570      	push	{r4, r5, r6, lr}
    token->ptr = state->pos;
 800643a:	6845      	ldr	r5, [r0, #4]
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 800643c:	4604      	mov	r4, r0
    token->ptr = state->pos;
 800643e:	604d      	str	r5, [r1, #4]

    if (!iseos(state) && ischr(state, '(')) {
 8006440:	f7ff fd2e 	bl	8005ea0 <iseos>
 8006444:	bb20      	cbnz	r0, 8006490 <scpiLex_ProgramExpression+0x58>
 8006446:	6863      	ldr	r3, [r4, #4]
 8006448:	781a      	ldrb	r2, [r3, #0]
 800644a:	2a28      	cmp	r2, #40	; 0x28
 800644c:	d120      	bne.n	8006490 <scpiLex_ProgramExpression+0x58>
        state->pos++;
 800644e:	3301      	adds	r3, #1
        if ((c != '"')
 8006450:	4e16      	ldr	r6, [pc, #88]	; (80064ac <scpiLex_ProgramExpression+0x74>)
        state->pos++;
 8006452:	6063      	str	r3, [r4, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 8006454:	4620      	mov	r0, r4
 8006456:	f7ff fd23 	bl	8005ea0 <iseos>
 800645a:	b988      	cbnz	r0, 8006480 <scpiLex_ProgramExpression+0x48>
 800645c:	6863      	ldr	r3, [r4, #4]
 800645e:	7818      	ldrb	r0, [r3, #0]
    if ((c >= 0x20) && (c <= 0x7e)) {
 8006460:	f1a0 0220 	sub.w	r2, r0, #32
 8006464:	2a5e      	cmp	r2, #94	; 0x5e
 8006466:	d80d      	bhi.n	8006484 <scpiLex_ProgramExpression+0x4c>
        if ((c != '"')
 8006468:	f1a0 0222 	sub.w	r2, r0, #34	; 0x22
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	2a19      	cmp	r2, #25
 8006470:	d803      	bhi.n	800647a <scpiLex_ProgramExpression+0x42>
 8006472:	fa26 f202 	lsr.w	r2, r6, r2
 8006476:	07d2      	lsls	r2, r2, #31
 8006478:	d404      	bmi.n	8006484 <scpiLex_ProgramExpression+0x4c>
        state->pos++;
 800647a:	3301      	adds	r3, #1
 800647c:	6063      	str	r3, [r4, #4]
 800647e:	e7e9      	b.n	8006454 <scpiLex_ProgramExpression+0x1c>

        if (!iseos(state) && ischr(state, ')')) {
            state->pos++;
            token->len = state->pos - token->ptr;
        } else {
            token->len = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	e004      	b.n	800648e <scpiLex_ProgramExpression+0x56>
        if (!iseos(state) && ischr(state, ')')) {
 8006484:	2829      	cmp	r0, #41	; 0x29
 8006486:	d1fb      	bne.n	8006480 <scpiLex_ProgramExpression+0x48>
            state->pos++;
 8006488:	3301      	adds	r3, #1
 800648a:	6063      	str	r3, [r4, #4]
            token->len = state->pos - token->ptr;
 800648c:	1b5b      	subs	r3, r3, r5
            token->len = 0;
 800648e:	608b      	str	r3, [r1, #8]
        }
    }

    if ((token->len > 0)) {
 8006490:	688b      	ldr	r3, [r1, #8]
 8006492:	2b00      	cmp	r3, #0
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8006494:	bfdd      	ittte	le
 8006496:	231a      	movle	r3, #26
 8006498:	700b      	strble	r3, [r1, #0]
        state->pos = token->ptr;
        token->len = 0;
 800649a:	2300      	movle	r3, #0
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 800649c:	2310      	movgt	r3, #16
        state->pos = token->ptr;
 800649e:	bfda      	itte	le
 80064a0:	6065      	strle	r5, [r4, #4]
        token->len = 0;
 80064a2:	608b      	strle	r3, [r1, #8]
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 80064a4:	700b      	strbgt	r3, [r1, #0]
    }

    return token->len;
 80064a6:	6888      	ldr	r0, [r1, #8]
}
 80064a8:	bd70      	pop	{r4, r5, r6, pc}
 80064aa:	bf00      	nop
 80064ac:	020000e3 	.word	0x020000e3

080064b0 <scpiLex_Comma>:
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
    token->ptr = state->pos;
 80064b0:	6843      	ldr	r3, [r0, #4]
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
 80064b2:	b510      	push	{r4, lr}
 80064b4:	460c      	mov	r4, r1
    token->ptr = state->pos;
 80064b6:	604b      	str	r3, [r1, #4]

    if (skipChr(state, ',')) {
 80064b8:	212c      	movs	r1, #44	; 0x2c
 80064ba:	f7ff fd8b 	bl	8005fd4 <skipChr>
 80064be:	b128      	cbz	r0, 80064cc <scpiLex_Comma+0x1c>
        token->len = 1;
 80064c0:	2301      	movs	r3, #1
 80064c2:	60a3      	str	r3, [r4, #8]
        token->type = SCPI_TOKEN_COMMA;
 80064c4:	2300      	movs	r3, #0
    } else {
        token->len = 0;
        token->type = SCPI_TOKEN_UNKNOWN;
 80064c6:	7023      	strb	r3, [r4, #0]
    }

    return token->len;
}
 80064c8:	68a0      	ldr	r0, [r4, #8]
 80064ca:	bd10      	pop	{r4, pc}
        token->len = 0;
 80064cc:	60a0      	str	r0, [r4, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 80064ce:	231a      	movs	r3, #26
 80064d0:	e7f9      	b.n	80064c6 <scpiLex_Comma+0x16>

080064d2 <scpiLex_Semicolon>:
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
    token->ptr = state->pos;
 80064d2:	6843      	ldr	r3, [r0, #4]
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
 80064d4:	b510      	push	{r4, lr}
 80064d6:	460c      	mov	r4, r1
    token->ptr = state->pos;
 80064d8:	604b      	str	r3, [r1, #4]

    if (skipChr(state, ';')) {
 80064da:	213b      	movs	r1, #59	; 0x3b
 80064dc:	f7ff fd7a 	bl	8005fd4 <skipChr>
 80064e0:	b120      	cbz	r0, 80064ec <scpiLex_Semicolon+0x1a>
        token->len = 1;
 80064e2:	2301      	movs	r3, #1
 80064e4:	60a3      	str	r3, [r4, #8]
        token->type = SCPI_TOKEN_SEMICOLON;
    } else {
        token->len = 0;
        token->type = SCPI_TOKEN_UNKNOWN;
 80064e6:	7023      	strb	r3, [r4, #0]
    }

    return token->len;
}
 80064e8:	68a0      	ldr	r0, [r4, #8]
 80064ea:	bd10      	pop	{r4, pc}
        token->len = 0;
 80064ec:	60a0      	str	r0, [r4, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 80064ee:	231a      	movs	r3, #26
 80064f0:	e7f9      	b.n	80064e6 <scpiLex_Semicolon+0x14>

080064f2 <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
 80064f2:	b538      	push	{r3, r4, r5, lr}
 80064f4:	4605      	mov	r5, r0
 80064f6:	460c      	mov	r4, r1
    token->ptr = state->pos;
 80064f8:	6843      	ldr	r3, [r0, #4]
 80064fa:	604b      	str	r3, [r1, #4]

    skipChr(state, '\r');
 80064fc:	210d      	movs	r1, #13
 80064fe:	f7ff fd69 	bl	8005fd4 <skipChr>
    skipChr(state, '\n');
 8006502:	210a      	movs	r1, #10
 8006504:	4628      	mov	r0, r5
 8006506:	f7ff fd65 	bl	8005fd4 <skipChr>

    token->len = state->pos - token->ptr;
 800650a:	686b      	ldr	r3, [r5, #4]
 800650c:	6862      	ldr	r2, [r4, #4]
 800650e:	1a9b      	subs	r3, r3, r2

    if ((token->len > 0)) {
 8006510:	2b00      	cmp	r3, #0
    token->len = state->pos - token->ptr;
 8006512:	60a3      	str	r3, [r4, #8]
        token->type = SCPI_TOKEN_NL;
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8006514:	bfdd      	ittte	le
 8006516:	231a      	movle	r3, #26
 8006518:	7023      	strble	r3, [r4, #0]
        state->pos = token->ptr;
        token->len = 0;
 800651a:	2300      	movle	r3, #0
        token->type = SCPI_TOKEN_NL;
 800651c:	2305      	movgt	r3, #5
        state->pos = token->ptr;
 800651e:	bfda      	itte	le
 8006520:	606a      	strle	r2, [r5, #4]
        token->len = 0;
 8006522:	60a3      	strle	r3, [r4, #8]
        token->type = SCPI_TOKEN_NL;
 8006524:	7023      	strbgt	r3, [r4, #0]
    }

    return token->len;
}
 8006526:	68a0      	ldr	r0, [r4, #8]
 8006528:	bd38      	pop	{r3, r4, r5, pc}
	...

0800652c <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 800652c:	b508      	push	{r3, lr}
    SCPI_ResultMnemonic(context, SCPI_STD_VERSION_REVISION);
 800652e:	2206      	movs	r2, #6
 8006530:	4902      	ldr	r1, [pc, #8]	; (800653c <SCPI_SystemVersionQ+0x10>)
 8006532:	f000 f915 	bl	8006760 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
}
 8006536:	2001      	movs	r0, #1
 8006538:	bd08      	pop	{r3, pc}
 800653a:	bf00      	nop
 800653c:	0800a3ce 	.word	0x0800a3ce

08006540 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 8006540:	b513      	push	{r0, r1, r4, lr}
 8006542:	4604      	mov	r4, r0
    scpi_error_t error;
    SCPI_ErrorPop(context, &error);
 8006544:	a901      	add	r1, sp, #4
 8006546:	f7ff fa0f 	bl	8005968 <SCPI_ErrorPop>
    SCPI_ResultError(context, &error);
 800654a:	a901      	add	r1, sp, #4
 800654c:	4620      	mov	r0, r4
 800654e:	f000 f963 	bl	8006818 <SCPI_ResultError>
#if USE_DEVICE_DEPENDENT_ERROR_INFORMATION
    SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
#endif
    return SCPI_RES_OK;
}
 8006552:	2001      	movs	r0, #1
 8006554:	b002      	add	sp, #8
 8006556:	bd10      	pop	{r4, pc}

08006558 <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 8006558:	b510      	push	{r4, lr}
 800655a:	4604      	mov	r4, r0
    SCPI_ResultInt32(context, SCPI_ErrorCount(context));
 800655c:	f7ff f9d2 	bl	8005904 <SCPI_ErrorCount>
 8006560:	4601      	mov	r1, r0
 8006562:	4620      	mov	r0, r4
 8006564:	f000 f90d 	bl	8006782 <SCPI_ResultInt32>

    return SCPI_RES_OK;
}
 8006568:	2001      	movs	r0, #1
 800656a:	bd10      	pop	{r4, pc}

0800656c <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 800656c:	b410      	push	{r4}
    if (len > 0) {
 800656e:	b11a      	cbz	r2, 8006578 <writeData+0xc>
        return context->interface->write(context, data, len);
 8006570:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    } else {
        return 0;
    }
}
 8006572:	bc10      	pop	{r4}
        return context->interface->write(context, data, len);
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	4718      	bx	r3
}
 8006578:	4610      	mov	r0, r2
 800657a:	bc10      	pop	{r4}
 800657c:	4770      	bx	lr
	...

08006580 <ParamSignToUInt32>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt32(scpi_t * context, scpi_parameter_t * parameter, uint32_t * value, scpi_bool_t sign) {
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	460d      	mov	r5, r1

    if (!value) {
 8006584:	4614      	mov	r4, r2
 8006586:	b922      	cbnz	r2, 8006592 <ParamSignToUInt32+0x12>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8006588:	4916      	ldr	r1, [pc, #88]	; (80065e4 <ParamSignToUInt32+0x64>)
 800658a:	f7ff fa4f 	bl	8005a2c <SCPI_ErrorPush>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
            } else {
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
            }
        default:
            return FALSE;
 800658e:	2000      	movs	r0, #0
 8006590:	e026      	b.n	80065e0 <ParamSignToUInt32+0x60>
    switch (parameter->type) {
 8006592:	780a      	ldrb	r2, [r1, #0]
 8006594:	3a06      	subs	r2, #6
 8006596:	2a05      	cmp	r2, #5
 8006598:	d8f9      	bhi.n	800658e <ParamSignToUInt32+0xe>
 800659a:	a101      	add	r1, pc, #4	; (adr r1, 80065a0 <ParamSignToUInt32+0x20>)
 800659c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065a0:	080065b9 	.word	0x080065b9
 80065a4:	080065c5 	.word	0x080065c5
 80065a8:	080065c9 	.word	0x080065c9
 80065ac:	0800658f 	.word	0x0800658f
 80065b0:	080065cd 	.word	0x080065cd
 80065b4:	080065cd 	.word	0x080065cd
            return strBaseToUInt32(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 80065b8:	2210      	movs	r2, #16
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 80065ba:	4621      	mov	r1, r4
 80065bc:	6868      	ldr	r0, [r5, #4]
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 80065be:	f000 fd97 	bl	80070f0 <strBaseToUInt32>
 80065c2:	e00a      	b.n	80065da <ParamSignToUInt32+0x5a>
            return strBaseToUInt32(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 80065c4:	2208      	movs	r2, #8
 80065c6:	e7f8      	b.n	80065ba <ParamSignToUInt32+0x3a>
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 80065c8:	2202      	movs	r2, #2
 80065ca:	e7f6      	b.n	80065ba <ParamSignToUInt32+0x3a>
 80065cc:	6868      	ldr	r0, [r5, #4]
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 80065ce:	220a      	movs	r2, #10
 80065d0:	4621      	mov	r1, r4
            if (sign) {
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0f3      	beq.n	80065be <ParamSignToUInt32+0x3e>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 80065d6:	f000 fd80 	bl	80070da <strBaseToInt32>
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 80065da:	3000      	adds	r0, #0
 80065dc:	bf18      	it	ne
 80065de:	2001      	movne	r0, #1
    }
}
 80065e0:	bd38      	pop	{r3, r4, r5, pc}
 80065e2:	bf00      	nop
 80065e4:	fffffeca 	.word	0xfffffeca

080065e8 <ParamSignToUInt64>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt64(scpi_t * context, scpi_parameter_t * parameter, uint64_t * value, scpi_bool_t sign) {
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	460d      	mov	r5, r1

    if (!value) {
 80065ec:	4614      	mov	r4, r2
 80065ee:	b922      	cbnz	r2, 80065fa <ParamSignToUInt64+0x12>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 80065f0:	4916      	ldr	r1, [pc, #88]	; (800664c <ParamSignToUInt64+0x64>)
 80065f2:	f7ff fa1b 	bl	8005a2c <SCPI_ErrorPush>
                return strBaseToInt64(parameter->ptr, (int64_t *) value, 10) > 0 ? TRUE : FALSE;
            } else {
                return strBaseToUInt64(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
            }
        default:
            return FALSE;
 80065f6:	2000      	movs	r0, #0
 80065f8:	e026      	b.n	8006648 <ParamSignToUInt64+0x60>
    switch (parameter->type) {
 80065fa:	780a      	ldrb	r2, [r1, #0]
 80065fc:	3a06      	subs	r2, #6
 80065fe:	2a05      	cmp	r2, #5
 8006600:	d8f9      	bhi.n	80065f6 <ParamSignToUInt64+0xe>
 8006602:	a101      	add	r1, pc, #4	; (adr r1, 8006608 <ParamSignToUInt64+0x20>)
 8006604:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006608:	08006621 	.word	0x08006621
 800660c:	0800662d 	.word	0x0800662d
 8006610:	08006631 	.word	0x08006631
 8006614:	080065f7 	.word	0x080065f7
 8006618:	08006635 	.word	0x08006635
 800661c:	08006635 	.word	0x08006635
            return strBaseToUInt64(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 8006620:	2210      	movs	r2, #16
            return strBaseToUInt64(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 8006622:	4621      	mov	r1, r4
 8006624:	6868      	ldr	r0, [r5, #4]
                return strBaseToUInt64(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 8006626:	f000 fd7a 	bl	800711e <strBaseToUInt64>
 800662a:	e00a      	b.n	8006642 <ParamSignToUInt64+0x5a>
            return strBaseToUInt64(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 800662c:	2208      	movs	r2, #8
 800662e:	e7f8      	b.n	8006622 <ParamSignToUInt64+0x3a>
            return strBaseToUInt64(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 8006630:	2202      	movs	r2, #2
 8006632:	e7f6      	b.n	8006622 <ParamSignToUInt64+0x3a>
 8006634:	6868      	ldr	r0, [r5, #4]
                return strBaseToInt64(parameter->ptr, (int64_t *) value, 10) > 0 ? TRUE : FALSE;
 8006636:	220a      	movs	r2, #10
 8006638:	4621      	mov	r1, r4
            if (sign) {
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f3      	beq.n	8006626 <ParamSignToUInt64+0x3e>
                return strBaseToInt64(parameter->ptr, (int64_t *) value, 10) > 0 ? TRUE : FALSE;
 800663e:	f000 fd62 	bl	8007106 <strBaseToInt64>
                return strBaseToUInt64(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 8006642:	3000      	adds	r0, #0
 8006644:	bf18      	it	ne
 8006646:	2001      	movne	r0, #1
    }
}
 8006648:	bd38      	pop	{r3, r4, r5, pc}
 800664a:	bf00      	nop
 800664c:	fffffeca 	.word	0xfffffeca

08006650 <writeDelimiter>:
    if (context->output_count > 0) {
 8006650:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006652:	2b00      	cmp	r3, #0
 8006654:	dd03      	ble.n	800665e <writeDelimiter+0xe>
        return writeData(context, ",", 1);
 8006656:	2201      	movs	r2, #1
 8006658:	4902      	ldr	r1, [pc, #8]	; (8006664 <writeDelimiter+0x14>)
 800665a:	f7ff bf87 	b.w	800656c <writeData>
}
 800665e:	2000      	movs	r0, #0
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	0800a435 	.word	0x0800a435

08006668 <resultUInt32BaseSign>:
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 8006668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800666a:	4614      	mov	r4, r2
 800666c:	b08d      	sub	sp, #52	; 0x34
 800666e:	4605      	mov	r5, r0
    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 8006670:	9300      	str	r3, [sp, #0]
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 8006672:	4608      	mov	r0, r1
    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 8006674:	4613      	mov	r3, r2
 8006676:	a903      	add	r1, sp, #12
 8006678:	2221      	movs	r2, #33	; 0x21
 800667a:	f000 fcc3 	bl	8007004 <UInt32ToStrBaseSign>
 800667e:	3c02      	subs	r4, #2
 8006680:	b2e4      	uxtb	r4, r4
 8006682:	2c0e      	cmp	r4, #14
 8006684:	bf98      	it	ls
 8006686:	4b0e      	ldrls	r3, [pc, #56]	; (80066c0 <resultUInt32BaseSign+0x58>)
 8006688:	4607      	mov	r7, r0
    result += writeDelimiter(context);
 800668a:	4628      	mov	r0, r5
 800668c:	bf94      	ite	ls
 800668e:	f853 6024 	ldrls.w	r6, [r3, r4, lsl #2]
    switch (base) {
 8006692:	2600      	movhi	r6, #0
    result += writeDelimiter(context);
 8006694:	f7ff ffdc 	bl	8006650 <writeDelimiter>
 8006698:	4604      	mov	r4, r0
    if (basePrefix != NULL) {
 800669a:	b12e      	cbz	r6, 80066a8 <resultUInt32BaseSign+0x40>
        result += writeData(context, basePrefix, 2);
 800669c:	2202      	movs	r2, #2
 800669e:	4631      	mov	r1, r6
 80066a0:	4628      	mov	r0, r5
 80066a2:	f7ff ff63 	bl	800656c <writeData>
 80066a6:	4404      	add	r4, r0
    result += writeData(context, buffer, len);
 80066a8:	463a      	mov	r2, r7
 80066aa:	a903      	add	r1, sp, #12
 80066ac:	4628      	mov	r0, r5
 80066ae:	f7ff ff5d 	bl	800656c <writeData>
    context->output_count++;
 80066b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
}
 80066b4:	4420      	add	r0, r4
    context->output_count++;
 80066b6:	3301      	adds	r3, #1
 80066b8:	632b      	str	r3, [r5, #48]	; 0x30
}
 80066ba:	b00d      	add	sp, #52	; 0x34
 80066bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066be:	bf00      	nop
 80066c0:	0800a3d8 	.word	0x0800a3d8

080066c4 <SCPI_Init>:
        scpi_error_t * error_queue_data, int16_t error_queue_size) {
 80066c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c8:	4604      	mov	r4, r0
 80066ca:	468b      	mov	fp, r1
 80066cc:	4692      	mov	sl, r2
 80066ce:	b085      	sub	sp, #20
 80066d0:	9303      	str	r3, [sp, #12]
 80066d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    memset(context, 0, sizeof (*context));
 80066d4:	229c      	movs	r2, #156	; 0x9c
        scpi_error_t * error_queue_data, int16_t error_queue_size) {
 80066d6:	e9dd 950e 	ldrd	r9, r5, [sp, #56]	; 0x38
 80066da:	e9dd 8710 	ldrd	r8, r7, [sp, #64]	; 0x40
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    memset(context, 0, sizeof (*context));
 80066e2:	2100      	movs	r1, #0
        scpi_error_t * error_queue_data, int16_t error_queue_size) {
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    memset(context, 0, sizeof (*context));
 80066e8:	3004      	adds	r0, #4
        scpi_error_t * error_queue_data, int16_t error_queue_size) {
 80066ea:	9302      	str	r3, [sp, #8]
 80066ec:	f9bd 6054 	ldrsh.w	r6, [sp, #84]	; 0x54
    memset(context, 0, sizeof (*context));
 80066f0:	f000 fffe 	bl	80076f0 <memset>
    context->units = units;
 80066f4:	9b03      	ldr	r3, [sp, #12]
    context->idn[3] = idn4;
 80066f6:	e9c4 8723 	strd	r8, r7, [r4, #140]	; 0x8c
    context->units = units;
 80066fa:	65e3      	str	r3, [r4, #92]	; 0x5c
    context->idn[1] = idn2;
 80066fc:	e9c4 9521 	strd	r9, r5, [r4, #132]	; 0x84
    context->cmdlist = commands;
 8006700:	f8c4 b000 	str.w	fp, [r4]
    context->interface = interface;
 8006704:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
    char *s1 = malloc( sizeof(char) * ( 25 ) );
 8006708:	2019      	movs	r0, #25
 800670a:	f000 ffb3 	bl	8007674 <malloc>
 800670e:	4680      	mov	r8, r0
    char *s2 = malloc( sizeof(char) * ( 25 ) );
 8006710:	2019      	movs	r0, #25
 8006712:	f000 ffaf 	bl	8007674 <malloc>
 8006716:	4607      	mov	r7, r0
    sprintf(s1, "%s-%s", idn2, "UART");
 8006718:	f8df 9040 	ldr.w	r9, [pc, #64]	; 800675c <SCPI_Init+0x98>
 800671c:	462a      	mov	r2, r5
 800671e:	4649      	mov	r1, r9
 8006720:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <SCPI_Init+0x90>)
 8006722:	4640      	mov	r0, r8
 8006724:	f001 fb68 	bl	8007df8 <siprintf>
    sprintf(s2, "%s-%s", idn2, "USB");
 8006728:	462a      	mov	r2, r5
 800672a:	4649      	mov	r1, r9
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <SCPI_Init+0x94>)
 800672e:	4638      	mov	r0, r7
 8006730:	f001 fb62 	bl	8007df8 <siprintf>
    context->buffer.data = input_buffer;
 8006734:	9b00      	ldr	r3, [sp, #0]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8006736:	4632      	mov	r2, r6
    context->buffer.data = input_buffer;
 8006738:	60e3      	str	r3, [r4, #12]
    context->buffer.length = input_buffer_length;
 800673a:	9b01      	ldr	r3, [sp, #4]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 800673c:	4620      	mov	r0, r4
    context->buffer.length = input_buffer_length;
 800673e:	6063      	str	r3, [r4, #4]
    context->buffer.position = 0;
 8006740:	2300      	movs	r3, #0
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8006742:	9902      	ldr	r1, [sp, #8]
    context->idn[5] = s2;
 8006744:	e9c4 8725 	strd	r8, r7, [r4, #148]	; 0x94
    context->buffer.position = 0;
 8006748:	60a3      	str	r3, [r4, #8]
}
 800674a:	b005      	add	sp, #20
 800674c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8006750:	f7ff b8d5 	b.w	80058fe <SCPI_ErrorInit>
 8006754:	0800a414 	.word	0x0800a414
 8006758:	0800a41f 	.word	0x0800a41f
 800675c:	0800a419 	.word	0x0800a419

08006760 <SCPI_ResultCharacters>:
size_t SCPI_ResultCharacters(scpi_t * context, const char * data, size_t len) {
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	4604      	mov	r4, r0
 8006764:	460e      	mov	r6, r1
 8006766:	4617      	mov	r7, r2
    result += writeDelimiter(context);
 8006768:	f7ff ff72 	bl	8006650 <writeDelimiter>
    result += writeData(context, data, len);
 800676c:	463a      	mov	r2, r7
    result += writeDelimiter(context);
 800676e:	4605      	mov	r5, r0
    result += writeData(context, data, len);
 8006770:	4631      	mov	r1, r6
 8006772:	4620      	mov	r0, r4
 8006774:	f7ff fefa 	bl	800656c <writeData>
    context->output_count++;
 8006778:	6b23      	ldr	r3, [r4, #48]	; 0x30
}
 800677a:	4428      	add	r0, r5
    context->output_count++;
 800677c:	3301      	adds	r3, #1
 800677e:	6323      	str	r3, [r4, #48]	; 0x30
}
 8006780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006782 <SCPI_ResultInt32>:
    return resultUInt32BaseSign(context, val, 10, TRUE);
 8006782:	2301      	movs	r3, #1
 8006784:	220a      	movs	r2, #10
 8006786:	f7ff bf6f 	b.w	8006668 <resultUInt32BaseSign>
	...

0800678c <SCPI_ResultText>:
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 800678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006790:	4604      	mov	r4, r0
    size_t len = strlen(data);
 8006792:	4608      	mov	r0, r1
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 8006794:	460e      	mov	r6, r1
    size_t len = strlen(data);
 8006796:	f7f9 fce5 	bl	8000164 <strlen>
 800679a:	4607      	mov	r7, r0
    result += writeDelimiter(context);
 800679c:	4620      	mov	r0, r4
 800679e:	f7ff ff57 	bl	8006650 <writeDelimiter>
    result += writeData(context, "\"", 1);
 80067a2:	2201      	movs	r2, #1
    result += writeDelimiter(context);
 80067a4:	4605      	mov	r5, r0
    result += writeData(context, "\"", 1);
 80067a6:	491b      	ldr	r1, [pc, #108]	; (8006814 <SCPI_ResultText+0x88>)
 80067a8:	4620      	mov	r0, r4
 80067aa:	f7ff fedf 	bl	800656c <writeData>
    while ((quote = strnpbrk(data, len, "\""))) {
 80067ae:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006814 <SCPI_ResultText+0x88>
    result += writeData(context, "\"", 1);
 80067b2:	4405      	add	r5, r0
    while ((quote = strnpbrk(data, len, "\""))) {
 80067b4:	4a17      	ldr	r2, [pc, #92]	; (8006814 <SCPI_ResultText+0x88>)
 80067b6:	4639      	mov	r1, r7
 80067b8:	4630      	mov	r0, r6
 80067ba:	f000 fc0e 	bl	8006fda <strnpbrk>
 80067be:	4681      	mov	r9, r0
 80067c0:	b988      	cbnz	r0, 80067e6 <SCPI_ResultText+0x5a>
    result += writeData(context, data, len);
 80067c2:	463a      	mov	r2, r7
 80067c4:	4631      	mov	r1, r6
 80067c6:	4620      	mov	r0, r4
 80067c8:	f7ff fed0 	bl	800656c <writeData>
    result += writeData(context, "\"", 1);
 80067cc:	2201      	movs	r2, #1
    result += writeData(context, data, len);
 80067ce:	4606      	mov	r6, r0
    result += writeData(context, "\"", 1);
 80067d0:	4910      	ldr	r1, [pc, #64]	; (8006814 <SCPI_ResultText+0x88>)
 80067d2:	4620      	mov	r0, r4
 80067d4:	f7ff feca 	bl	800656c <writeData>
    context->output_count++;
 80067d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067da:	4435      	add	r5, r6
 80067dc:	3301      	adds	r3, #1
 80067de:	6323      	str	r3, [r4, #48]	; 0x30
}
 80067e0:	4428      	add	r0, r5
 80067e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        result += writeData(context, data, quote - data + 1);
 80067e6:	eba9 0806 	sub.w	r8, r9, r6
 80067ea:	f108 0201 	add.w	r2, r8, #1
 80067ee:	4631      	mov	r1, r6
 80067f0:	4620      	mov	r0, r4
 80067f2:	f7ff febb 	bl	800656c <writeData>
        result += writeData(context, "\"", 1);
 80067f6:	2201      	movs	r2, #1
        result += writeData(context, data, quote - data + 1);
 80067f8:	4606      	mov	r6, r0
        result += writeData(context, "\"", 1);
 80067fa:	4651      	mov	r1, sl
 80067fc:	4620      	mov	r0, r4
 80067fe:	f7ff feb5 	bl	800656c <writeData>
        len -= quote - data + 1;
 8006802:	ea6f 0808 	mvn.w	r8, r8
        result += writeData(context, "\"", 1);
 8006806:	4430      	add	r0, r6
 8006808:	4405      	add	r5, r0
        len -= quote - data + 1;
 800680a:	4447      	add	r7, r8
        data = quote + 1;
 800680c:	f109 0601 	add.w	r6, r9, #1
 8006810:	e7d0      	b.n	80067b4 <SCPI_ResultText+0x28>
 8006812:	bf00      	nop
 8006814:	0800a24c 	.word	0x0800a24c

08006818 <SCPI_ResultError>:
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 8006818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	4607      	mov	r7, r0
    data[0] = SCPI_ErrorTranslate(error->error_code);
 800681e:	f9b1 0000 	ldrsh.w	r0, [r1]
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 8006822:	460c      	mov	r4, r1
    data[0] = SCPI_ErrorTranslate(error->error_code);
 8006824:	f7ff f906 	bl	8005a34 <SCPI_ErrorTranslate>
 8006828:	4680      	mov	r8, r0
    len[0] = strlen(data[0]);
 800682a:	f7f9 fc9b 	bl	8000164 <strlen>
    result += SCPI_ResultInt32(context, error->error_code);
 800682e:	f9b4 1000 	ldrsh.w	r1, [r4]
    len[0] = strlen(data[0]);
 8006832:	4605      	mov	r5, r0
    result += SCPI_ResultInt32(context, error->error_code);
 8006834:	4638      	mov	r0, r7
 8006836:	f7ff ffa4 	bl	8006782 <SCPI_ResultInt32>
 800683a:	4604      	mov	r4, r0
    result += writeDelimiter(context);
 800683c:	4638      	mov	r0, r7
 800683e:	f7ff ff07 	bl	8006650 <writeDelimiter>
    result += writeData(context, "\"", 1);
 8006842:	2201      	movs	r2, #1
    result += writeDelimiter(context);
 8006844:	4404      	add	r4, r0
    result += writeData(context, "\"", 1);
 8006846:	491f      	ldr	r1, [pc, #124]	; (80068c4 <SCPI_ResultError+0xac>)
 8006848:	4638      	mov	r0, r7
 800684a:	f7ff fe8f 	bl	800656c <writeData>
 800684e:	2dff      	cmp	r5, #255	; 0xff
 8006850:	bf28      	it	cs
 8006852:	25ff      	movcs	r5, #255	; 0xff
 8006854:	f04f 09ff 	mov.w	r9, #255	; 0xff
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8006858:	f8df a068 	ldr.w	sl, [pc, #104]	; 80068c4 <SCPI_ResultError+0xac>
    result += writeData(context, "\"", 1);
 800685c:	4404      	add	r4, r0
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 800685e:	4652      	mov	r2, sl
 8006860:	4629      	mov	r1, r5
 8006862:	4640      	mov	r0, r8
 8006864:	f000 fbb9 	bl	8006fda <strnpbrk>
 8006868:	4683      	mov	fp, r0
 800686a:	b128      	cbz	r0, 8006878 <SCPI_ResultError+0x60>
            if ((step = quote - data[i] + 1) >= outputlimit) {
 800686c:	ebab 0608 	sub.w	r6, fp, r8
 8006870:	3601      	adds	r6, #1
 8006872:	45b1      	cmp	r9, r6
 8006874:	d80f      	bhi.n	8006896 <SCPI_ResultError+0x7e>
                len[i] -= 1;
 8006876:	3d01      	subs	r5, #1
        result += writeData(context, data[i], len[i]);
 8006878:	462a      	mov	r2, r5
 800687a:	4641      	mov	r1, r8
 800687c:	4638      	mov	r0, r7
 800687e:	f7ff fe75 	bl	800656c <writeData>
    result += writeData(context, "\"", 1);
 8006882:	2201      	movs	r2, #1
        result += writeData(context, data[i], len[i]);
 8006884:	4605      	mov	r5, r0
    result += writeData(context, "\"", 1);
 8006886:	490f      	ldr	r1, [pc, #60]	; (80068c4 <SCPI_ResultError+0xac>)
 8006888:	4638      	mov	r0, r7
 800688a:	f7ff fe6f 	bl	800656c <writeData>
 800688e:	442c      	add	r4, r5
}
 8006890:	4420      	add	r0, r4
 8006892:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            result += writeData(context, data[i], step);
 8006896:	4641      	mov	r1, r8
 8006898:	4632      	mov	r2, r6
 800689a:	4638      	mov	r0, r7
 800689c:	f7ff fe66 	bl	800656c <writeData>
            result += writeData(context, "\"", 1);
 80068a0:	2201      	movs	r2, #1
            result += writeData(context, data[i], step);
 80068a2:	4680      	mov	r8, r0
            result += writeData(context, "\"", 1);
 80068a4:	4651      	mov	r1, sl
 80068a6:	4638      	mov	r0, r7
 80068a8:	f7ff fe60 	bl	800656c <writeData>
            outputlimit -= step + 1;
 80068ac:	43f3      	mvns	r3, r6
            len[i] -= step;
 80068ae:	1bad      	subs	r5, r5, r6
            outputlimit -= step + 1;
 80068b0:	4499      	add	r9, r3
            result += writeData(context, "\"", 1);
 80068b2:	4440      	add	r0, r8
 80068b4:	454d      	cmp	r5, r9
 80068b6:	4404      	add	r4, r0
 80068b8:	bf28      	it	cs
 80068ba:	464d      	movcs	r5, r9
            data[i] = quote + 1;
 80068bc:	f10b 0801 	add.w	r8, fp, #1
 80068c0:	e7cd      	b.n	800685e <SCPI_ResultError+0x46>
 80068c2:	bf00      	nop
 80068c4:	0800a24c 	.word	0x0800a24c

080068c8 <SCPI_ResultArbitraryBlockHeader>:
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 80068c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    block_header[0] = '#';
 80068ca:	2323      	movs	r3, #35	; 0x23
 80068cc:	ac04      	add	r4, sp, #16
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 80068ce:	460e      	mov	r6, r1
    block_header[0] = '#';
 80068d0:	f804 3d0c 	strb.w	r3, [r4, #-12]!
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 80068d4:	230a      	movs	r3, #10
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 80068d6:	4605      	mov	r5, r0
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 80068d8:	461a      	mov	r2, r3
 80068da:	f10d 0106 	add.w	r1, sp, #6
 80068de:	4630      	mov	r0, r6
 80068e0:	f000 fbf4 	bl	80070cc <SCPI_UInt32ToStrBase>
    header_len = strlen(block_header + 2);
 80068e4:	f10d 0006 	add.w	r0, sp, #6
 80068e8:	f7f9 fc3c 	bl	8000164 <strlen>
    context->arbitrary_reminding = len;
 80068ec:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
    block_header[1] = (char) (header_len + '0');
 80068f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
    return writeData(context, block_header, header_len + 2);
 80068f4:	1c82      	adds	r2, r0, #2
 80068f6:	4621      	mov	r1, r4
 80068f8:	4628      	mov	r0, r5
    block_header[1] = (char) (header_len + '0');
 80068fa:	f88d 3005 	strb.w	r3, [sp, #5]
    return writeData(context, block_header, header_len + 2);
 80068fe:	f7ff fe35 	bl	800656c <writeData>
}
 8006902:	b004      	add	sp, #16
 8006904:	bd70      	pop	{r4, r5, r6, pc}
	...

08006908 <SCPI_ResultArbitraryBlockData>:
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 8006908:	b510      	push	{r4, lr}
    if (context->arbitrary_reminding < len) {
 800690a:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 800690e:	4603      	mov	r3, r0
    if (context->arbitrary_reminding < len) {
 8006910:	4294      	cmp	r4, r2
 8006912:	d30b      	bcc.n	800692c <SCPI_ResultArbitraryBlockData+0x24>
    context->arbitrary_reminding -= len;
 8006914:	1aa4      	subs	r4, r4, r2
 8006916:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    if (context->arbitrary_reminding == 0) {
 800691a:	b914      	cbnz	r4, 8006922 <SCPI_ResultArbitraryBlockData+0x1a>
        context->output_count++;
 800691c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800691e:	3001      	adds	r0, #1
 8006920:	6318      	str	r0, [r3, #48]	; 0x30
    return writeData(context, (const char *) data, len);
 8006922:	4618      	mov	r0, r3
}
 8006924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return writeData(context, (const char *) data, len);
 8006928:	f7ff be20 	b.w	800656c <writeData>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800692c:	4902      	ldr	r1, [pc, #8]	; (8006938 <SCPI_ResultArbitraryBlockData+0x30>)
 800692e:	f7ff f87d 	bl	8005a2c <SCPI_ErrorPush>
}
 8006932:	2000      	movs	r0, #0
 8006934:	bd10      	pop	{r4, pc}
 8006936:	bf00      	nop
 8006938:	fffffeca 	.word	0xfffffeca

0800693c <SCPI_ResultArbitraryBlock>:
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	460f      	mov	r7, r1
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 8006940:	4611      	mov	r1, r2
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 8006942:	4606      	mov	r6, r0
 8006944:	4614      	mov	r4, r2
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 8006946:	f7ff ffbf 	bl	80068c8 <SCPI_ResultArbitraryBlockHeader>
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 800694a:	4622      	mov	r2, r4
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 800694c:	4605      	mov	r5, r0
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 800694e:	4639      	mov	r1, r7
 8006950:	4630      	mov	r0, r6
 8006952:	f7ff ffd9 	bl	8006908 <SCPI_ResultArbitraryBlockData>
}
 8006956:	4428      	add	r0, r5
 8006958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800695a <SCPI_ParamIsNumber>:
    switch (parameter->type) {
 800695a:	7803      	ldrb	r3, [r0, #0]
 800695c:	3b06      	subs	r3, #6
 800695e:	2b05      	cmp	r3, #5
 8006960:	d806      	bhi.n	8006970 <SCPI_ParamIsNumber+0x16>
 8006962:	e8df f003 	tbb	[pc, r3]
 8006966:	0707      	.short	0x0707
 8006968:	03070507 	.word	0x03070507
            return suffixAllowed;
 800696c:	4608      	mov	r0, r1
 800696e:	4770      	bx	lr
            return FALSE;
 8006970:	2000      	movs	r0, #0
 8006972:	4770      	bx	lr
            return TRUE;
 8006974:	2001      	movs	r0, #1
}
 8006976:	4770      	bx	lr

08006978 <SCPI_ParamToUInt64>:
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToUInt64(scpi_t * context, scpi_parameter_t * parameter, uint64_t * value) {
    return ParamSignToUInt64(context, parameter, value, FALSE);
 8006978:	2300      	movs	r3, #0
 800697a:	f7ff be35 	b.w	80065e8 <ParamSignToUInt64>
	...

08006980 <SCPI_ParamToDouble>:
 * @param context
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToDouble(scpi_t * context, scpi_parameter_t * parameter, double * value) {
 8006980:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006982:	460c      	mov	r4, r1
    scpi_bool_t result;
    uint64_t valint;

    if (!value) {
 8006984:	4615      	mov	r5, r2
 8006986:	b922      	cbnz	r2, 8006992 <SCPI_ParamToDouble+0x12>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8006988:	4916      	ldr	r1, [pc, #88]	; (80069e4 <SCPI_ParamToDouble+0x64>)
 800698a:	f7ff f84f 	bl	8005a2c <SCPI_ErrorPush>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            result = strToDouble(parameter->ptr, value) > 0 ? TRUE : FALSE;
            break;
        default:
            result = FALSE;
 800698e:	2400      	movs	r4, #0
 8006990:	e01c      	b.n	80069cc <SCPI_ParamToDouble+0x4c>
    switch (parameter->type) {
 8006992:	780b      	ldrb	r3, [r1, #0]
 8006994:	3b06      	subs	r3, #6
 8006996:	2b05      	cmp	r3, #5
 8006998:	d8f9      	bhi.n	800698e <SCPI_ParamToDouble+0xe>
 800699a:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <SCPI_ParamToDouble+0x20>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	080069b9 	.word	0x080069b9
 80069a4:	080069b9 	.word	0x080069b9
 80069a8:	080069b9 	.word	0x080069b9
 80069ac:	0800698f 	.word	0x0800698f
 80069b0:	080069d3 	.word	0x080069d3
 80069b4:	080069d3 	.word	0x080069d3
            result = SCPI_ParamToUInt64(context, parameter, &valint);
 80069b8:	466a      	mov	r2, sp
 80069ba:	f7ff ffdd 	bl	8006978 <SCPI_ParamToUInt64>
 80069be:	4604      	mov	r4, r0
            *value = valint;
 80069c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069c4:	f7f9 fd5c 	bl	8000480 <__aeabi_ul2d>
 80069c8:	e9c5 0100 	strd	r0, r1, [r5]
    }
    return result;
}
 80069cc:	4620      	mov	r0, r4
 80069ce:	b002      	add	sp, #8
 80069d0:	bd70      	pop	{r4, r5, r6, pc}
            result = strToDouble(parameter->ptr, value) > 0 ? TRUE : FALSE;
 80069d2:	6860      	ldr	r0, [r4, #4]
 80069d4:	4629      	mov	r1, r5
 80069d6:	f000 fc25 	bl	8007224 <strToDouble>
 80069da:	1c04      	adds	r4, r0, #0
 80069dc:	bf18      	it	ne
 80069de:	2401      	movne	r4, #1
            break;
 80069e0:	e7f4      	b.n	80069cc <SCPI_ParamToDouble+0x4c>
 80069e2:	bf00      	nop
 80069e4:	fffffeca 	.word	0xfffffeca

080069e8 <scpiParser_parseProgramData>:
 * Parse one parameter and detect type
 * @param state
 * @param token
 * @return
 */
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 80069e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80069ec:	460e      	mov	r6, r1
    scpi_token_t tmp;
    int result = 0;
    int wsLen;
    int suffixLen;
    int realLen = 0;
    realLen += scpiLex_WhiteSpace(state, &tmp);
 80069ee:	a901      	add	r1, sp, #4
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 80069f0:	4605      	mov	r5, r0
    realLen += scpiLex_WhiteSpace(state, &tmp);
 80069f2:	f7ff fb13 	bl	800601c <scpiLex_WhiteSpace>

    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 80069f6:	4631      	mov	r1, r6
    realLen += scpiLex_WhiteSpace(state, &tmp);
 80069f8:	4607      	mov	r7, r0
    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 80069fa:	4628      	mov	r0, r5
 80069fc:	f7ff fc15 	bl	800622a <scpiLex_NondecimalNumericData>
    if (result == 0) result = scpiLex_CharacterProgramData(state, token);
 8006a00:	4604      	mov	r4, r0
 8006a02:	b988      	cbnz	r0, 8006a28 <scpiParser_parseProgramData+0x40>
 8006a04:	4631      	mov	r1, r6
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7ff fb71 	bl	80060ee <scpiLex_CharacterProgramData>
    if (result == 0) {
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	b958      	cbnz	r0, 8006a28 <scpiParser_parseProgramData+0x40>
        result = scpiLex_DecimalNumericProgramData(state, token);
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	f7ff fb98 	bl	8006148 <scpiLex_DecimalNumericProgramData>
        if (result != 0) {
 8006a18:	4604      	mov	r4, r0
 8006a1a:	b970      	cbnz	r0, 8006a3a <scpiParser_parseProgramData+0x52>
                result = token->len;
            }
        }
    }

    if (result == 0) result = scpiLex_StringProgramData(state, token);
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f7ff fc68 	bl	80062f4 <scpiLex_StringProgramData>
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 8006a24:	4604      	mov	r4, r0
 8006a26:	b1e0      	cbz	r0, 8006a62 <scpiParser_parseProgramData+0x7a>
    if (result == 0) result = scpiLex_ProgramExpression(state, token);

    realLen += scpiLex_WhiteSpace(state, &tmp);
 8006a28:	a901      	add	r1, sp, #4
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7ff faf6 	bl	800601c <scpiLex_WhiteSpace>
 8006a30:	4438      	add	r0, r7

    return result + realLen;
}
 8006a32:	4420      	add	r0, r4
 8006a34:	b004      	add	sp, #16
 8006a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 8006a3a:	a901      	add	r1, sp, #4
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f7ff faed 	bl	800601c <scpiLex_WhiteSpace>
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 8006a42:	a901      	add	r1, sp, #4
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 8006a44:	4680      	mov	r8, r0
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 8006a46:	4628      	mov	r0, r5
 8006a48:	f7ff fbbd 	bl	80061c6 <scpiLex_SuffixProgramData>
            if (suffixLen > 0) {
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	ddeb      	ble.n	8006a28 <scpiParser_parseProgramData+0x40>
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 8006a50:	230b      	movs	r3, #11
                token->len += wsLen + suffixLen;
 8006a52:	68b4      	ldr	r4, [r6, #8]
 8006a54:	4480      	add	r8, r0
 8006a56:	4444      	add	r4, r8
 8006a58:	60b4      	str	r4, [r6, #8]
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 8006a5a:	7033      	strb	r3, [r6, #0]
    if (result == 0) result = scpiLex_StringProgramData(state, token);
 8006a5c:	2c00      	cmp	r4, #0
 8006a5e:	d0dd      	beq.n	8006a1c <scpiParser_parseProgramData+0x34>
 8006a60:	e7e2      	b.n	8006a28 <scpiParser_parseProgramData+0x40>
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	f7ff fc84 	bl	8006372 <scpiLex_ArbitraryBlockProgramData>
    if (result == 0) result = scpiLex_ProgramExpression(state, token);
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d1db      	bne.n	8006a28 <scpiParser_parseProgramData+0x40>
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	f7ff fce0 	bl	8006438 <scpiLex_ProgramExpression>
 8006a78:	4604      	mov	r4, r0
 8006a7a:	e7d5      	b.n	8006a28 <scpiParser_parseProgramData+0x40>

08006a7c <SCPI_Parameter>:
scpi_bool_t SCPI_Parameter(scpi_t * context, scpi_parameter_t * parameter, scpi_bool_t mandatory) {
 8006a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a80:	4606      	mov	r6, r0
    if (!parameter) {
 8006a82:	460d      	mov	r5, r1
 8006a84:	2400      	movs	r4, #0
 8006a86:	b939      	cbnz	r1, 8006a98 <SCPI_Parameter+0x1c>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8006a88:	f5a1 719b 	sub.w	r1, r1, #310	; 0x136
 8006a8c:	f7fe ffce 	bl	8005a2c <SCPI_ErrorPush>
        return FALSE;
 8006a90:	462a      	mov	r2, r5
}
 8006a92:	4610      	mov	r0, r2
 8006a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    token->type = SCPI_TOKEN_UNKNOWN;
 8006a98:	f04f 081a 	mov.w	r8, #26
    if (state->pos >= (state->buffer + state->len)) {
 8006a9c:	69c7      	ldr	r7, [r0, #28]
 8006a9e:	6943      	ldr	r3, [r0, #20]
    token->ptr = ptr;
 8006aa0:	e9c1 4401 	strd	r4, r4, [r1, #4]
    if (state->pos >= (state->buffer + state->len)) {
 8006aa4:	443b      	add	r3, r7
 8006aa6:	6987      	ldr	r7, [r0, #24]
    token->type = SCPI_TOKEN_UNKNOWN;
 8006aa8:	f881 8000 	strb.w	r8, [r1]
    if (state->pos >= (state->buffer + state->len)) {
 8006aac:	429f      	cmp	r7, r3
 8006aae:	d309      	bcc.n	8006ac4 <SCPI_Parameter+0x48>
        if (mandatory) {
 8006ab0:	b12a      	cbz	r2, 8006abe <SCPI_Parameter+0x42>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8006ab2:	f06f 016c 	mvn.w	r1, #108	; 0x6c
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 8006ab6:	f7fe ffb9 	bl	8005a2c <SCPI_ErrorPush>
            return FALSE;
 8006aba:	4622      	mov	r2, r4
 8006abc:	e7e9      	b.n	8006a92 <SCPI_Parameter+0x16>
            parameter->type = SCPI_TOKEN_PROGRAM_MNEMONIC; /* TODO: select something different */
 8006abe:	2309      	movs	r3, #9
 8006ac0:	700b      	strb	r3, [r1, #0]
 8006ac2:	e7e6      	b.n	8006a92 <SCPI_Parameter+0x16>
    if (context->input_count != 0) {
 8006ac4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    state = &context->param_list.lex_state;
 8006ac6:	f100 0714 	add.w	r7, r0, #20
    if (context->input_count != 0) {
 8006aca:	b163      	cbz	r3, 8006ae6 <SCPI_Parameter+0x6a>
        scpiLex_Comma(state, parameter);
 8006acc:	4638      	mov	r0, r7
 8006ace:	f7ff fcef 	bl	80064b0 <scpiLex_Comma>
        if (parameter->type != SCPI_TOKEN_COMMA) {
 8006ad2:	782b      	ldrb	r3, [r5, #0]
 8006ad4:	b13b      	cbz	r3, 8006ae6 <SCPI_Parameter+0x6a>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 8006ad6:	f06f 0166 	mvn.w	r1, #102	; 0x66
    token->ptr = ptr;
 8006ada:	e9c5 4401 	strd	r4, r4, [r5, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8006ade:	f885 8000 	strb.w	r8, [r5]
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	e7e7      	b.n	8006ab6 <SCPI_Parameter+0x3a>
    context->input_count++;
 8006ae6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 8006ae8:	4629      	mov	r1, r5
    context->input_count++;
 8006aea:	3301      	adds	r3, #1
 8006aec:	6373      	str	r3, [r6, #52]	; 0x34
    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 8006aee:	4638      	mov	r0, r7
 8006af0:	f7ff ff7a 	bl	80069e8 <scpiParser_parseProgramData>
 8006af4:	782b      	ldrb	r3, [r5, #0]
 8006af6:	3b06      	subs	r3, #6
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b0a      	cmp	r3, #10
 8006afc:	d806      	bhi.n	8006b0c <SCPI_Parameter+0x90>
 8006afe:	2201      	movs	r2, #1
 8006b00:	f240 71bf 	movw	r1, #1983	; 0x7bf
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	420b      	tst	r3, r1
 8006b0a:	d1c2      	bne.n	8006a92 <SCPI_Parameter+0x16>
    token->len = 0;
 8006b0c:	2400      	movs	r4, #0
    token->type = SCPI_TOKEN_UNKNOWN;
 8006b0e:	231a      	movs	r3, #26
    token->ptr = ptr;
 8006b10:	e9c5 4401 	strd	r4, r4, [r5, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8006b14:	702b      	strb	r3, [r5, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 8006b16:	f06f 0196 	mvn.w	r1, #150	; 0x96
 8006b1a:	e7e2      	b.n	8006ae2 <SCPI_Parameter+0x66>

08006b1c <SCPI_ParamDouble>:
scpi_bool_t SCPI_ParamDouble(scpi_t * context, double * value, scpi_bool_t mandatory) {
 8006b1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006b1e:	4605      	mov	r5, r0
    if (!value) {
 8006b20:	460e      	mov	r6, r1
 8006b22:	b931      	cbnz	r1, 8006b32 <SCPI_ParamDouble+0x16>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8006b24:	4913      	ldr	r1, [pc, #76]	; (8006b74 <SCPI_ParamDouble+0x58>)
 8006b26:	f7fe ff81 	bl	8005a2c <SCPI_ErrorPush>
        return FALSE;
 8006b2a:	4634      	mov	r4, r6
}
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	b004      	add	sp, #16
 8006b30:	bd70      	pop	{r4, r5, r6, pc}
    result = SCPI_Parameter(context, &param, mandatory);
 8006b32:	a901      	add	r1, sp, #4
 8006b34:	f7ff ffa2 	bl	8006a7c <SCPI_Parameter>
    if (result) {
 8006b38:	4604      	mov	r4, r0
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d0f6      	beq.n	8006b2c <SCPI_ParamDouble+0x10>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 8006b3e:	2100      	movs	r1, #0
 8006b40:	a801      	add	r0, sp, #4
 8006b42:	f7ff ff0a 	bl	800695a <SCPI_ParamIsNumber>
 8006b46:	4604      	mov	r4, r0
 8006b48:	b128      	cbz	r0, 8006b56 <SCPI_ParamDouble+0x3a>
            SCPI_ParamToDouble(context, &param, value);
 8006b4a:	4632      	mov	r2, r6
 8006b4c:	a901      	add	r1, sp, #4
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f7ff ff16 	bl	8006980 <SCPI_ParamToDouble>
 8006b54:	e7ea      	b.n	8006b2c <SCPI_ParamDouble+0x10>
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 8006b56:	2101      	movs	r1, #1
 8006b58:	a801      	add	r0, sp, #4
 8006b5a:	f7ff fefe 	bl	800695a <SCPI_ParamIsNumber>
 8006b5e:	b128      	cbz	r0, 8006b6c <SCPI_ParamDouble+0x50>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 8006b60:	f06f 0189 	mvn.w	r1, #137	; 0x89
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8006b64:	4628      	mov	r0, r5
 8006b66:	f7fe ff61 	bl	8005a2c <SCPI_ErrorPush>
 8006b6a:	e7df      	b.n	8006b2c <SCPI_ParamDouble+0x10>
 8006b6c:	f06f 0167 	mvn.w	r1, #103	; 0x67
 8006b70:	e7f8      	b.n	8006b64 <SCPI_ParamDouble+0x48>
 8006b72:	bf00      	nop
 8006b74:	fffffeca 	.word	0xfffffeca

08006b78 <ParamSignUInt32>:
static scpi_bool_t ParamSignUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory, scpi_bool_t sign) {
 8006b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	461f      	mov	r7, r3
    if (!value) {
 8006b80:	460c      	mov	r4, r1
 8006b82:	b921      	cbnz	r1, 8006b8e <ParamSignUInt32+0x16>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8006b84:	4913      	ldr	r1, [pc, #76]	; (8006bd4 <ParamSignUInt32+0x5c>)
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8006b86:	f7fe ff51 	bl	8005a2c <SCPI_ErrorPush>
            result = FALSE;
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	e00f      	b.n	8006bae <ParamSignUInt32+0x36>
    result = SCPI_Parameter(context, &param, mandatory);
 8006b8e:	a901      	add	r1, sp, #4
 8006b90:	f7ff ff74 	bl	8006a7c <SCPI_Parameter>
    if (result) {
 8006b94:	b158      	cbz	r0, 8006bae <ParamSignUInt32+0x36>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 8006b96:	2100      	movs	r1, #0
 8006b98:	a801      	add	r0, sp, #4
 8006b9a:	f7ff fede 	bl	800695a <SCPI_ParamIsNumber>
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	b138      	cbz	r0, 8006bb2 <ParamSignUInt32+0x3a>
            result = ParamSignToUInt32(context, &param, value, sign);
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	a901      	add	r1, sp, #4
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f7ff fce9 	bl	8006580 <ParamSignToUInt32>
}
 8006bae:	b005      	add	sp, #20
 8006bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	a801      	add	r0, sp, #4
 8006bb6:	f7ff fed0 	bl	800695a <SCPI_ParamIsNumber>
 8006bba:	4604      	mov	r4, r0
 8006bbc:	b130      	cbz	r0, 8006bcc <ParamSignUInt32+0x54>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f06f 0189 	mvn.w	r1, #137	; 0x89
 8006bc4:	f7fe ff32 	bl	8005a2c <SCPI_ErrorPush>
            result = FALSE;
 8006bc8:	4630      	mov	r0, r6
 8006bca:	e7f0      	b.n	8006bae <ParamSignUInt32+0x36>
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8006bcc:	f06f 0167 	mvn.w	r1, #103	; 0x67
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	e7d8      	b.n	8006b86 <ParamSignUInt32+0xe>
 8006bd4:	fffffeca 	.word	0xfffffeca

08006bd8 <SCPI_ParamInt32>:
    return ParamSignUInt32(context, (uint32_t *) value, mandatory, TRUE);
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f7ff bfcd 	b.w	8006b78 <ParamSignUInt32>
	...

08006be0 <SCPI_ParamCopyText>:
scpi_bool_t SCPI_ParamCopyText(scpi_t * context, char * buffer, size_t buffer_len, size_t * copy_len, scpi_bool_t mandatory) {
 8006be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be2:	4605      	mov	r5, r0
 8006be4:	b085      	sub	sp, #20
 8006be6:	4616      	mov	r6, r2
 8006be8:	461f      	mov	r7, r3
    if (!buffer || !copy_len) {
 8006bea:	460c      	mov	r4, r1
 8006bec:	b101      	cbz	r1, 8006bf0 <SCPI_ParamCopyText+0x10>
 8006bee:	b933      	cbnz	r3, 8006bfe <SCPI_ParamCopyText+0x1e>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8006bf0:	491c      	ldr	r1, [pc, #112]	; (8006c64 <SCPI_ParamCopyText+0x84>)
                SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f7fe ff1a 	bl	8005a2c <SCPI_ErrorPush>
                result = FALSE;
 8006bf8:	2000      	movs	r0, #0
}
 8006bfa:	b005      	add	sp, #20
 8006bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    result = SCPI_Parameter(context, &param, mandatory);
 8006bfe:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8006c02:	a901      	add	r1, sp, #4
 8006c04:	f7ff ff3a 	bl	8006a7c <SCPI_Parameter>
    if (result) {
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d0f6      	beq.n	8006bfa <SCPI_ParamCopyText+0x1a>
        switch (param.type) {
 8006c0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006c10:	f1a3 020e 	sub.w	r2, r3, #14
 8006c14:	2a01      	cmp	r2, #1
 8006c16:	d821      	bhi.n	8006c5c <SCPI_ParamCopyText+0x7c>
                for (i_from = 1, i_to = 0; i_from < (size_t) (param.len - 1); i_from++) {
 8006c18:	9a03      	ldr	r2, [sp, #12]
                quote = param.type == SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA ? '\'' : '"';
 8006c1a:	2b0e      	cmp	r3, #14
                for (i_from = 1, i_to = 0; i_from < (size_t) (param.len - 1); i_from++) {
 8006c1c:	f102 30ff 	add.w	r0, r2, #4294967295
                quote = param.type == SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA ? '\'' : '"';
 8006c20:	bf14      	ite	ne
 8006c22:	f04f 0c22 	movne.w	ip, #34	; 0x22
 8006c26:	f04f 0c27 	moveq.w	ip, #39	; 0x27
                for (i_from = 1, i_to = 0; i_from < (size_t) (param.len - 1); i_from++) {
 8006c2a:	4625      	mov	r5, r4
 8006c2c:	2201      	movs	r2, #1
                    buffer[i_to] = param.ptr[i_from];
 8006c2e:	9b02      	ldr	r3, [sp, #8]
                for (i_from = 1, i_to = 0; i_from < (size_t) (param.len - 1); i_from++) {
 8006c30:	4290      	cmp	r0, r2
 8006c32:	eba5 0104 	sub.w	r1, r5, r4
 8006c36:	d806      	bhi.n	8006c46 <SCPI_ParamCopyText+0x66>
                if (i_to < buffer_len) {
 8006c38:	428e      	cmp	r6, r1
                *copy_len = i_to;
 8006c3a:	6039      	str	r1, [r7, #0]
                if (i_to < buffer_len) {
 8006c3c:	d901      	bls.n	8006c42 <SCPI_ParamCopyText+0x62>
                    buffer[i_to] = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	5463      	strb	r3, [r4, r1]
    result = SCPI_Parameter(context, &param, mandatory);
 8006c42:	2001      	movs	r0, #1
 8006c44:	e7d9      	b.n	8006bfa <SCPI_ParamCopyText+0x1a>
                    if (i_from >= buffer_len) {
 8006c46:	42b2      	cmp	r2, r6
 8006c48:	d2f6      	bcs.n	8006c38 <SCPI_ParamCopyText+0x58>
                    buffer[i_to] = param.ptr[i_from];
 8006c4a:	5c99      	ldrb	r1, [r3, r2]
 8006c4c:	f805 1b01 	strb.w	r1, [r5], #1
                    if (param.ptr[i_from] == quote) {
 8006c50:	5c99      	ldrb	r1, [r3, r2]
 8006c52:	4561      	cmp	r1, ip
 8006c54:	bf08      	it	eq
 8006c56:	3201      	addeq	r2, #1
                for (i_from = 1, i_to = 0; i_from < (size_t) (param.len - 1); i_from++) {
 8006c58:	3201      	adds	r2, #1
 8006c5a:	e7e9      	b.n	8006c30 <SCPI_ParamCopyText+0x50>
                SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8006c5c:	f06f 0167 	mvn.w	r1, #103	; 0x67
 8006c60:	e7c7      	b.n	8006bf2 <SCPI_ParamCopyText+0x12>
 8006c62:	bf00      	nop
 8006c64:	fffffeca 	.word	0xfffffeca

08006c68 <scpiParser_parseAllProgramData>:

    int result;
    scpi_token_t tmp;
    int paramCount = 0;

    token->len = -1;
 8006c68:	f04f 33ff 	mov.w	r3, #4294967295
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8006c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    token->len = -1;
 8006c6e:	608b      	str	r3, [r1, #8]
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 8006c70:	2318      	movs	r3, #24
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8006c72:	4606      	mov	r6, r0
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 8006c74:	700b      	strb	r3, [r1, #0]
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8006c76:	460c      	mov	r4, r1
    token->ptr = state->pos;
 8006c78:	6843      	ldr	r3, [r0, #4]
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8006c7a:	4617      	mov	r7, r2
    int paramCount = 0;
 8006c7c:	2500      	movs	r5, #0


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8006c7e:	2001      	movs	r0, #1
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8006c80:	b085      	sub	sp, #20
    token->ptr = state->pos;
 8006c82:	604b      	str	r3, [r1, #4]
        token->len += result;
 8006c84:	68a3      	ldr	r3, [r4, #8]
            token->len = 0;
            paramCount = -1;
            break;
        }

        result = scpiParser_parseProgramData(state, &tmp);
 8006c86:	a901      	add	r1, sp, #4
        token->len += result;
 8006c88:	4418      	add	r0, r3
 8006c8a:	60a0      	str	r0, [r4, #8]
        result = scpiParser_parseProgramData(state, &tmp);
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	f7ff feab 	bl	80069e8 <scpiParser_parseProgramData>
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
 8006c92:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006c96:	2a1a      	cmp	r2, #26
 8006c98:	d013      	beq.n	8006cc2 <scpiParser_parseAllProgramData+0x5a>
            token->len += result;
 8006c9a:	68a3      	ldr	r3, [r4, #8]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8006c9c:	a901      	add	r1, sp, #4
            token->len += result;
 8006c9e:	4403      	add	r3, r0
 8006ca0:	60a3      	str	r3, [r4, #8]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8006ca2:	4630      	mov	r0, r6
            token->type = SCPI_TOKEN_UNKNOWN;
            token->len = 0;
            paramCount = -1;
            break;
        }
        paramCount++;
 8006ca4:	3501      	adds	r5, #1
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8006ca6:	f7ff fc03 	bl	80064b0 <scpiLex_Comma>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d1ea      	bne.n	8006c84 <scpiParser_parseAllProgramData+0x1c>
    }

    if (token->len == -1) {
 8006cae:	68a3      	ldr	r3, [r4, #8]
 8006cb0:	3301      	adds	r3, #1
        token->len = 0;
 8006cb2:	bf04      	itt	eq
 8006cb4:	2300      	moveq	r3, #0
 8006cb6:	60a3      	streq	r3, [r4, #8]
    }

    if (numberOfParameters != NULL) {
 8006cb8:	b107      	cbz	r7, 8006cbc <scpiParser_parseAllProgramData+0x54>
        *numberOfParameters = paramCount;
 8006cba:	603d      	str	r5, [r7, #0]
    }
    return token->len;
}
 8006cbc:	68a0      	ldr	r0, [r4, #8]
 8006cbe:	b005      	add	sp, #20
 8006cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            token->len = 0;
 8006cc2:	2300      	movs	r3, #0
            token->type = SCPI_TOKEN_UNKNOWN;
 8006cc4:	7022      	strb	r2, [r4, #0]
            token->len = 0;
 8006cc6:	60a3      	str	r3, [r4, #8]
            paramCount = -1;
 8006cc8:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 8006ccc:	e7ef      	b.n	8006cae <scpiParser_parseAllProgramData+0x46>

08006cce <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 8006cce:	b530      	push	{r4, r5, lr}
    scpi_token_t tmp;
    int result = 0;

    lex_state.buffer = lex_state.pos = buffer;
    lex_state.len = len;
    state->numberOfParameters = 0;
 8006cd0:	2500      	movs	r5, #0
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	b087      	sub	sp, #28
    lex_state.buffer = lex_state.pos = buffer;
 8006cd6:	e9cd 1100 	strd	r1, r1, [sp]
    state->numberOfParameters = 0;
 8006cda:	6185      	str	r5, [r0, #24]

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
 8006cdc:	a903      	add	r1, sp, #12
 8006cde:	4668      	mov	r0, sp
    lex_state.len = len;
 8006ce0:	9202      	str	r2, [sp, #8]
    scpiLex_WhiteSpace(&lex_state, &tmp);
 8006ce2:	f7ff f99b 	bl	800601c <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	4668      	mov	r0, sp
 8006cea:	f7ff f9a8 	bl	800603e <scpiLex_ProgramHeader>
 8006cee:	42a8      	cmp	r0, r5
 8006cf0:	db38      	blt.n	8006d64 <scpiParser_detectProgramMessageUnit+0x96>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
 8006cf2:	a903      	add	r1, sp, #12
 8006cf4:	4668      	mov	r0, sp
 8006cf6:	f7ff f991 	bl	800601c <scpiLex_WhiteSpace>
 8006cfa:	42a8      	cmp	r0, r5
 8006cfc:	dd2c      	ble.n	8006d58 <scpiParser_detectProgramMessageUnit+0x8a>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
 8006cfe:	f104 0218 	add.w	r2, r4, #24
 8006d02:	f104 010c 	add.w	r1, r4, #12
 8006d06:	4668      	mov	r0, sp
 8006d08:	f7ff ffae 	bl	8006c68 <scpiParser_parseAllProgramData>
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
        invalidateToken(&state->programData, lex_state.buffer);
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
 8006d0c:	a903      	add	r1, sp, #12
 8006d0e:	4668      	mov	r0, sp
 8006d10:	f7ff fbef 	bl	80064f2 <scpiLex_NewLine>
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
 8006d14:	4605      	mov	r5, r0
 8006d16:	b920      	cbnz	r0, 8006d22 <scpiParser_detectProgramMessageUnit+0x54>
 8006d18:	a903      	add	r1, sp, #12
 8006d1a:	4668      	mov	r0, sp
 8006d1c:	f7ff fbd9 	bl	80064d2 <scpiLex_Semicolon>
 8006d20:	4605      	mov	r5, r0

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
 8006d22:	4668      	mov	r0, sp
 8006d24:	f7ff f978 	bl	8006018 <scpiLex_IsEos>
 8006d28:	9a00      	ldr	r2, [sp, #0]
 8006d2a:	b958      	cbnz	r0, 8006d44 <scpiParser_detectProgramMessageUnit+0x76>
 8006d2c:	b955      	cbnz	r5, 8006d44 <scpiParser_detectProgramMessageUnit+0x76>
        lex_state.pos++;
 8006d2e:	9b01      	ldr	r3, [sp, #4]
    token->ptr = ptr;
 8006d30:	e9c4 2504 	strd	r2, r5, [r4, #16]
        lex_state.pos++;
 8006d34:	3301      	adds	r3, #1
 8006d36:	9301      	str	r3, [sp, #4]

        state->programHeader.len = 1;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	60a3      	str	r3, [r4, #8]
        state->programHeader.type = SCPI_TOKEN_INVALID;
 8006d3c:	2319      	movs	r3, #25
 8006d3e:	7023      	strb	r3, [r4, #0]
    token->type = SCPI_TOKEN_UNKNOWN;
 8006d40:	231a      	movs	r3, #26
 8006d42:	7323      	strb	r3, [r4, #12]

        invalidateToken(&state->programData, lex_state.buffer);
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
 8006d44:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d113      	bne.n	8006d74 <scpiParser_detectProgramMessageUnit+0xa6>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
 8006d4c:	2302      	movs	r3, #2
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
    }

    return lex_state.pos - lex_state.buffer;
}
 8006d4e:	9801      	ldr	r0, [sp, #4]
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 8006d50:	7723      	strb	r3, [r4, #28]
}
 8006d52:	1a80      	subs	r0, r0, r2
 8006d54:	b007      	add	sp, #28
 8006d56:	bd30      	pop	{r4, r5, pc}
    token->ptr = ptr;
 8006d58:	9b01      	ldr	r3, [sp, #4]
    token->len = 0;
 8006d5a:	6165      	str	r5, [r4, #20]
    token->ptr = ptr;
 8006d5c:	6123      	str	r3, [r4, #16]
    token->type = SCPI_TOKEN_UNKNOWN;
 8006d5e:	231a      	movs	r3, #26
 8006d60:	7323      	strb	r3, [r4, #12]
 8006d62:	e7d3      	b.n	8006d0c <scpiParser_detectProgramMessageUnit+0x3e>
 8006d64:	231a      	movs	r3, #26
        invalidateToken(&state->programHeader, lex_state.buffer);
 8006d66:	9a00      	ldr	r2, [sp, #0]
    token->type = SCPI_TOKEN_UNKNOWN;
 8006d68:	7023      	strb	r3, [r4, #0]
    token->ptr = ptr;
 8006d6a:	e9c4 2501 	strd	r2, r5, [r4, #4]
 8006d6e:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8006d72:	e7f5      	b.n	8006d60 <scpiParser_detectProgramMessageUnit+0x92>
    } else if (SCPI_TOKEN_NL == tmp.type) {
 8006d74:	2b05      	cmp	r3, #5
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
 8006d76:	bf0c      	ite	eq
 8006d78:	2301      	moveq	r3, #1
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 8006d7a:	2300      	movne	r3, #0
 8006d7c:	e7e7      	b.n	8006d4e <scpiParser_detectProgramMessageUnit+0x80>
	...

08006d80 <SCPI_Parse>:
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 8006d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 8006d84:	231a      	movs	r3, #26
 8006d86:	2500      	movs	r5, #0
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 8006d88:	b08b      	sub	sp, #44	; 0x2c
 8006d8a:	460e      	mov	r6, r1
 8006d8c:	4690      	mov	r8, r2
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 8006d8e:	f88d 301c 	strb.w	r3, [sp, #28]
 8006d92:	e9cd 5508 	strd	r5, r5, [sp, #32]
    if (context == NULL) {
 8006d96:	4604      	mov	r4, r0
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f000 80ae 	beq.w	8006efa <SCPI_Parse+0x17a>
    scpi_bool_t result = TRUE;
 8006d9e:	2701      	movs	r7, #1
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 8006da0:	46ab      	mov	fp, r5
    state = &context->parser_state;
 8006da2:	f100 0364 	add.w	r3, r0, #100	; 0x64
 8006da6:	9302      	str	r3, [sp, #8]
    context->output_count = 0;
 8006da8:	6305      	str	r5, [r0, #48]	; 0x30
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 8006daa:	4642      	mov	r2, r8
 8006dac:	4631      	mov	r1, r6
 8006dae:	9802      	ldr	r0, [sp, #8]
 8006db0:	f7ff ff8d 	bl	8006cce <scpiParser_detectProgramMessageUnit>
        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 8006db4:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 8006db8:	4681      	mov	r9, r0
        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 8006dba:	2b19      	cmp	r3, #25
 8006dbc:	d106      	bne.n	8006dcc <SCPI_Parse+0x4c>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER);
 8006dbe:	f06f 0164 	mvn.w	r1, #100	; 0x64
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f7fe fe32 	bl	8005a2c <SCPI_ErrorPush>
                result = FALSE;
 8006dc8:	2700      	movs	r7, #0
 8006dca:	e07a      	b.n	8006ec2 <SCPI_Parse+0x142>
        } else if (state->programHeader.len > 0) {
 8006dcc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dd77      	ble.n	8006ec2 <SCPI_Parse+0x142>
            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 8006dd2:	f04f 0a00 	mov.w	sl, #0
            composeCompoundCommand(&cmd_prev, &state->programHeader);
 8006dd6:	9902      	ldr	r1, [sp, #8]
 8006dd8:	a807      	add	r0, sp, #28
 8006dda:	f000 fbb5 	bl	8007548 <composeCompoundCommand>
            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 8006dde:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006de0:	9304      	str	r3, [sp, #16]
 8006de2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006de4:	9305      	str	r3, [sp, #20]
    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	f853 000a 	ldr.w	r0, [r3, sl]
 8006dec:	eb03 020a 	add.w	r2, r3, sl
 8006df0:	9203      	str	r2, [sp, #12]
 8006df2:	b990      	cbnz	r0, 8006e1a <SCPI_Parse+0x9a>
 8006df4:	eb06 0209 	add.w	r2, r6, r9
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
 8006df8:	4296      	cmp	r6, r2
 8006dfa:	eba2 0306 	sub.w	r3, r2, r6
 8006dfe:	d068      	beq.n	8006ed2 <SCPI_Parse+0x152>
 8006e00:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8006e04:	290d      	cmp	r1, #13
 8006e06:	d0f7      	beq.n	8006df8 <SCPI_Parse+0x78>
 8006e08:	290a      	cmp	r1, #10
 8006e0a:	d0f5      	beq.n	8006df8 <SCPI_Parse+0x78>
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
 8006e0c:	4632      	mov	r2, r6
 8006e0e:	f06f 0170 	mvn.w	r1, #112	; 0x70
 8006e12:	4620      	mov	r0, r4
 8006e14:	f7fe fdba 	bl	800598c <SCPI_ErrorPushEx>
 8006e18:	e7d6      	b.n	8006dc8 <SCPI_Parse+0x48>
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 8006e1a:	e9cd bb00 	strd	fp, fp, [sp]
 8006e1e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8006e22:	2300      	movs	r3, #0
 8006e24:	f000 fa8c 	bl	8007340 <matchCommand>
 8006e28:	f10a 0a0c 	add.w	sl, sl, #12
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d0da      	beq.n	8006de6 <SCPI_Parse+0x66>
            context->param_list.cmd = cmd;
 8006e30:	9b03      	ldr	r3, [sp, #12]
 8006e32:	6123      	str	r3, [r4, #16]
                context->param_list.lex_state.buffer = state->programData.ptr;
 8006e34:	6f63      	ldr	r3, [r4, #116]	; 0x74
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
 8006e36:	e9c4 3305 	strd	r3, r3, [r4, #20]
                context->param_list.lex_state.len = state->programData.len;
 8006e3a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006e3c:	61e3      	str	r3, [r4, #28]
                context->param_list.cmd_raw.data = state->programHeader.ptr;
 8006e3e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
                context->param_list.cmd_raw.position = 0;
 8006e40:	e9c4 b309 	strd	fp, r3, [r4, #36]	; 0x24
                context->param_list.cmd_raw.length = state->programHeader.len;
 8006e44:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006e46:	6223      	str	r3, [r4, #32]
    if (context->output_count > 0) {
 8006e48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	dc18      	bgt.n	8006e80 <SCPI_Parse+0x100>
    if (cmd->callback != NULL) {
 8006e4e:	9b03      	ldr	r3, [sp, #12]
    context->cmd_error = FALSE;
 8006e50:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    if (cmd->callback != NULL) {
 8006e54:	685b      	ldr	r3, [r3, #4]
    context->input_count = 0;
 8006e56:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    context->arbitrary_reminding = 0;
 8006e5a:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
    if (cmd->callback != NULL) {
 8006e5e:	b3b3      	cbz	r3, 8006ece <SCPI_Parse+0x14e>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
 8006e60:	4620      	mov	r0, r4
 8006e62:	4798      	blx	r3
 8006e64:	2801      	cmp	r0, #1
 8006e66:	f894 a038 	ldrb.w	sl, [r4, #56]	; 0x38
 8006e6a:	d00f      	beq.n	8006e8c <SCPI_Parse+0x10c>
            if (!context->cmd_error) {
 8006e6c:	f1ba 0f00 	cmp.w	sl, #0
 8006e70:	d104      	bne.n	8006e7c <SCPI_Parse+0xfc>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 8006e72:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8006e76:	4620      	mov	r0, r4
 8006e78:	f7fe fdd8 	bl	8005a2c <SCPI_ErrorPush>
            result = FALSE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	e007      	b.n	8006e90 <SCPI_Parse+0x110>
        return writeData(context, ";", 1);
 8006e80:	2201      	movs	r2, #1
 8006e82:	491f      	ldr	r1, [pc, #124]	; (8006f00 <SCPI_Parse+0x180>)
 8006e84:	4620      	mov	r0, r4
 8006e86:	f7ff fb71 	bl	800656c <writeData>
 8006e8a:	e7e0      	b.n	8006e4e <SCPI_Parse+0xce>
            if (context->cmd_error) {
 8006e8c:	f08a 0301 	eor.w	r3, sl, #1
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
 8006e90:	69e1      	ldr	r1, [r4, #28]
 8006e92:	6962      	ldr	r2, [r4, #20]
 8006e94:	440a      	add	r2, r1
 8006e96:	69a1      	ldr	r1, [r4, #24]
 8006e98:	4291      	cmp	r1, r2
 8006e9a:	d20a      	bcs.n	8006eb2 <SCPI_Parse+0x132>
 8006e9c:	f894 a038 	ldrb.w	sl, [r4, #56]	; 0x38
 8006ea0:	f1ba 0f00 	cmp.w	sl, #0
 8006ea4:	d105      	bne.n	8006eb2 <SCPI_Parse+0x132>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 8006ea6:	f06f 016b 	mvn.w	r1, #107	; 0x6b
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7fe fdbe 	bl	8005a2c <SCPI_ErrorPush>
        result = FALSE;
 8006eb0:	4653      	mov	r3, sl
 8006eb2:	401f      	ands	r7, r3
                cmd_prev = state->programHeader;
 8006eb4:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8006eb8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ebc:	ab0a      	add	r3, sp, #40	; 0x28
 8006ebe:	e903 0007 	stmdb	r3, {r0, r1, r2}
        if (r < len) {
 8006ec2:	45c8      	cmp	r8, r9
 8006ec4:	dd07      	ble.n	8006ed6 <SCPI_Parse+0x156>
            data += r;
 8006ec6:	444e      	add	r6, r9
            len -= r;
 8006ec8:	eba8 0809 	sub.w	r8, r8, r9
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 8006ecc:	e76d      	b.n	8006daa <SCPI_Parse+0x2a>
    scpi_bool_t result = TRUE;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e7de      	b.n	8006e90 <SCPI_Parse+0x110>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	e79a      	b.n	8006e0c <SCPI_Parse+0x8c>
    if (context->output_count > 0) {
 8006ed6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	dd0a      	ble.n	8006ef2 <SCPI_Parse+0x172>
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
 8006edc:	2202      	movs	r2, #2
 8006ede:	4909      	ldr	r1, [pc, #36]	; (8006f04 <SCPI_Parse+0x184>)
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f7ff fb43 	bl	800656c <writeData>
    if (context && context->interface && context->interface->flush) {
 8006ee6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006ee8:	b11b      	cbz	r3, 8006ef2 <SCPI_Parse+0x172>
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	b10b      	cbz	r3, 8006ef2 <SCPI_Parse+0x172>
        return context->interface->flush(context);
 8006eee:	4620      	mov	r0, r4
 8006ef0:	4798      	blx	r3
}
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	b00b      	add	sp, #44	; 0x2c
 8006ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return FALSE;
 8006efa:	4607      	mov	r7, r0
 8006efc:	e7f9      	b.n	8006ef2 <SCPI_Parse+0x172>
 8006efe:	bf00      	nop
 8006f00:	0800a423 	.word	0x0800a423
 8006f04:	08009f9c 	.word	0x08009f9c

08006f08 <SCPI_Input>:
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	e9d0 3602 	ldrd	r3, r6, [r0, #8]
 8006f0e:	4604      	mov	r4, r0
    if (len == 0) {
 8006f10:	4615      	mov	r5, r2
 8006f12:	b942      	cbnz	r2, 8006f26 <SCPI_Input+0x1e>
        context->buffer.data[context->buffer.position] = 0;
 8006f14:	54f2      	strb	r2, [r6, r3]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 8006f16:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
 8006f1a:	f7ff ff31 	bl	8006d80 <SCPI_Parse>
 8006f1e:	4606      	mov	r6, r0
        context->buffer.position = 0;
 8006f20:	60a5      	str	r5, [r4, #8]
}
 8006f22:	4630      	mov	r0, r6
 8006f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buffer_free = context->buffer.length - context->buffer.position;
 8006f26:	6847      	ldr	r7, [r0, #4]
 8006f28:	1aff      	subs	r7, r7, r3
        if (len > (buffer_free - 1)) {
 8006f2a:	42ba      	cmp	r2, r7
 8006f2c:	db08      	blt.n	8006f40 <SCPI_Input+0x38>
            context->buffer.position = 0;
 8006f2e:	2500      	movs	r5, #0
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 8006f30:	f46f 71b5 	mvn.w	r1, #362	; 0x16a
            context->buffer.position = 0;
 8006f34:	6085      	str	r5, [r0, #8]
            context->buffer.data[context->buffer.position] = 0;
 8006f36:	7035      	strb	r5, [r6, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 8006f38:	f7fe fd78 	bl	8005a2c <SCPI_ErrorPush>
            return FALSE;
 8006f3c:	462e      	mov	r6, r5
 8006f3e:	e7f0      	b.n	8006f22 <SCPI_Input+0x1a>
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 8006f40:	18f0      	adds	r0, r6, r3
 8006f42:	f000 fbb1 	bl	80076a8 <memcpy>
        context->buffer.position += len;
 8006f46:	68a3      	ldr	r3, [r4, #8]
    scpi_bool_t result = TRUE;
 8006f48:	2601      	movs	r6, #1
        context->buffer.position += len;
 8006f4a:	442b      	add	r3, r5
        context->buffer.data[context->buffer.position] = 0;
 8006f4c:	2500      	movs	r5, #0
 8006f4e:	68e2      	ldr	r2, [r4, #12]
        context->buffer.position += len;
 8006f50:	60a3      	str	r3, [r4, #8]
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 8006f52:	f104 0764 	add.w	r7, r4, #100	; 0x64
        context->buffer.data[context->buffer.position] = 0;
 8006f56:	54d5      	strb	r5, [r2, r3]
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 8006f58:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	1b52      	subs	r2, r2, r5
 8006f60:	4429      	add	r1, r5
 8006f62:	f7ff feb4 	bl	8006cce <scpiParser_detectProgramMessageUnit>
            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 8006f66:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
            totcmdlen += cmdlen;
 8006f6a:	4405      	add	r5, r0
            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d110      	bne.n	8006f92 <SCPI_Input+0x8a>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
 8006f70:	462a      	mov	r2, r5
 8006f72:	68e1      	ldr	r1, [r4, #12]
 8006f74:	4620      	mov	r0, r4
 8006f76:	f7ff ff03 	bl	8006d80 <SCPI_Parse>
 8006f7a:	4606      	mov	r6, r0
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 8006f7c:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8006f80:	1b52      	subs	r2, r2, r5
 8006f82:	1941      	adds	r1, r0, r5
 8006f84:	f000 fb9b 	bl	80076be <memmove>
                context->buffer.position -= totcmdlen;
 8006f88:	68a3      	ldr	r3, [r4, #8]
 8006f8a:	1b5d      	subs	r5, r3, r5
 8006f8c:	60a5      	str	r5, [r4, #8]
                totcmdlen = 0;
 8006f8e:	2500      	movs	r5, #0
 8006f90:	e7e2      	b.n	8006f58 <SCPI_Input+0x50>
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN
 8006f92:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
 8006f96:	2a1a      	cmp	r2, #26
 8006f98:	d101      	bne.n	8006f9e <SCPI_Input+0x96>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0c1      	beq.n	8006f22 <SCPI_Input+0x1a>
                if (totcmdlen >= context->buffer.position) break;
 8006f9e:	68a3      	ldr	r3, [r4, #8]
 8006fa0:	42ab      	cmp	r3, r5
 8006fa2:	d8d9      	bhi.n	8006f58 <SCPI_Input+0x50>
 8006fa4:	e7bd      	b.n	8006f22 <SCPI_Input+0x1a>

08006fa6 <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 8006fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006faa:	4605      	mov	r5, r0
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 8006fac:	4604      	mov	r4, r0
 8006fae:	eb00 0801 	add.w	r8, r0, r1
 8006fb2:	4544      	cmp	r4, r8
 8006fb4:	eba4 0605 	sub.w	r6, r4, r5
 8006fb8:	d00c      	beq.n	8006fd4 <patternSeparatorShortPos+0x2e>
 8006fba:	7823      	ldrb	r3, [r4, #0]
 8006fbc:	4627      	mov	r7, r4
 8006fbe:	b14b      	cbz	r3, 8006fd4 <patternSeparatorShortPos+0x2e>
        if (islower((unsigned char) pattern[i])) {
 8006fc0:	f000 fb4a 	bl	8007658 <__locale_ctype_ptr>
 8006fc4:	783b      	ldrb	r3, [r7, #0]
 8006fc6:	3401      	adds	r4, #1
 8006fc8:	4418      	add	r0, r3
 8006fca:	7843      	ldrb	r3, [r0, #1]
 8006fcc:	f003 0303 	and.w	r3, r3, #3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d1ee      	bne.n	8006fb2 <patternSeparatorShortPos+0xc>
            return i;
        }
    }
    return i;
}
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006fda <strnpbrk>:
char * strnpbrk(const char *str, size_t size, const char *set) {
 8006fda:	b570      	push	{r4, r5, r6, lr}
    const char * strend = str + size;
 8006fdc:	4401      	add	r1, r0
    while ((strend != str) && ((c = *str++) != 0)) {
 8006fde:	4288      	cmp	r0, r1
 8006fe0:	d003      	beq.n	8006fea <strnpbrk+0x10>
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006fe8:	b923      	cbnz	r3, 8006ff4 <strnpbrk+0x1a>
    return (NULL);
 8006fea:	2000      	movs	r0, #0
 8006fec:	e001      	b.n	8006ff2 <strnpbrk+0x18>
            if (sc == c)
 8006fee:	42ab      	cmp	r3, r5
 8006ff0:	d101      	bne.n	8006ff6 <strnpbrk+0x1c>
}
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}
        for (scanp = set; (sc = *scanp++) != '\0';)
 8006ff4:	4616      	mov	r6, r2
 8006ff6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006ffa:	2d00      	cmp	r5, #0
 8006ffc:	d1f7      	bne.n	8006fee <strnpbrk+0x14>
 8006ffe:	4620      	mov	r0, r4
 8007000:	e7ed      	b.n	8006fde <strnpbrk+0x4>
	...

08007004 <UInt32ToStrBaseSign>:
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 8007004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007008:	4605      	mov	r5, r0
 800700a:	460f      	mov	r7, r1
 800700c:	b086      	sub	sp, #24
    const char digits[] = "0123456789ABCDEF";
 800700e:	4e2d      	ldr	r6, [pc, #180]	; (80070c4 <UInt32ToStrBaseSign+0xc0>)
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 8007010:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
    const char digits[] = "0123456789ABCDEF";
 8007014:	f10d 0c04 	add.w	ip, sp, #4
 8007018:	f106 0810 	add.w	r8, r6, #16
 800701c:	46e6      	mov	lr, ip
 800701e:	6830      	ldr	r0, [r6, #0]
 8007020:	6871      	ldr	r1, [r6, #4]
 8007022:	3608      	adds	r6, #8
 8007024:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8007028:	4546      	cmp	r6, r8
 800702a:	46f4      	mov	ip, lr
 800702c:	d1f6      	bne.n	800701c <UInt32ToStrBaseSign+0x18>
 800702e:	7831      	ldrb	r1, [r6, #0]
 8007030:	f88e 1000 	strb.w	r1, [lr]
    if (uval == 0) {
 8007034:	b94d      	cbnz	r5, 800704a <UInt32ToStrBaseSign+0x46>
        ADD_CHAR('0');
 8007036:	2a00      	cmp	r2, #0
 8007038:	d041      	beq.n	80070be <UInt32ToStrBaseSign+0xba>
 800703a:	2330      	movs	r3, #48	; 0x30
 800703c:	2001      	movs	r0, #1
 800703e:	703b      	strb	r3, [r7, #0]
    if (pos < len) str[pos] = 0;
 8007040:	4290      	cmp	r0, r2
 8007042:	d22f      	bcs.n	80070a4 <UInt32ToStrBaseSign+0xa0>
 8007044:	2300      	movs	r3, #0
 8007046:	543b      	strb	r3, [r7, r0]
 8007048:	e02c      	b.n	80070a4 <UInt32ToStrBaseSign+0xa0>
        switch (base) {
 800704a:	2b08      	cmp	r3, #8
 800704c:	d006      	beq.n	800705c <UInt32ToStrBaseSign+0x58>
 800704e:	2b10      	cmp	r3, #16
 8007050:	d02e      	beq.n	80070b0 <UInt32ToStrBaseSign+0xac>
 8007052:	2b02      	cmp	r3, #2
 8007054:	d129      	bne.n	80070aa <UInt32ToStrBaseSign+0xa6>
                x = 0x80000000L;
 8007056:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800705a:	e001      	b.n	8007060 <UInt32ToStrBaseSign+0x5c>
                x = 0x40000000L;
 800705c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        if (sign && ((int32_t) val < 0) && (base == 10)) {
 8007060:	b34c      	cbz	r4, 80070b6 <UInt32ToStrBaseSign+0xb2>
 8007062:	2d00      	cmp	r5, #0
 8007064:	da27      	bge.n	80070b6 <UInt32ToStrBaseSign+0xb2>
 8007066:	2b0a      	cmp	r3, #10
 8007068:	d125      	bne.n	80070b6 <UInt32ToStrBaseSign+0xb2>
            uval = -val;
 800706a:	426d      	negs	r5, r5
            ADD_CHAR('-');
 800706c:	b31a      	cbz	r2, 80070b6 <UInt32ToStrBaseSign+0xb2>
 800706e:	202d      	movs	r0, #45	; 0x2d
 8007070:	7038      	strb	r0, [r7, #0]
 8007072:	2001      	movs	r0, #1
        while ((uval / x) == 0) {
 8007074:	fbb5 f4f1 	udiv	r4, r5, r1
 8007078:	fbb1 f6f3 	udiv	r6, r1, r3
 800707c:	b1ec      	cbz	r4, 80070ba <UInt32ToStrBaseSign+0xb6>
            digit = (uint8_t) (uval / x);
 800707e:	fbb5 f4f1 	udiv	r4, r5, r1
            ADD_CHAR(digits[digit]);
 8007082:	4290      	cmp	r0, r2
 8007084:	b2e4      	uxtb	r4, r4
 8007086:	d205      	bcs.n	8007094 <UInt32ToStrBaseSign+0x90>
 8007088:	ae06      	add	r6, sp, #24
 800708a:	4426      	add	r6, r4
 800708c:	f816 6c14 	ldrb.w	r6, [r6, #-20]
 8007090:	543e      	strb	r6, [r7, r0]
 8007092:	3001      	adds	r0, #1
            uval -= digit * x;
 8007094:	fb04 5511 	mls	r5, r4, r1, r5
            x /= base;
 8007098:	fbb1 f1f3 	udiv	r1, r1, r3
        } while (x && (pos < len));
 800709c:	2900      	cmp	r1, #0
 800709e:	d0cf      	beq.n	8007040 <UInt32ToStrBaseSign+0x3c>
 80070a0:	4290      	cmp	r0, r2
 80070a2:	d3ec      	bcc.n	800707e <UInt32ToStrBaseSign+0x7a>
}
 80070a4:	b006      	add	sp, #24
 80070a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                x = 1000000000L;
 80070aa:	4907      	ldr	r1, [pc, #28]	; (80070c8 <UInt32ToStrBaseSign+0xc4>)
                base = 10;
 80070ac:	230a      	movs	r3, #10
                break;
 80070ae:	e7d7      	b.n	8007060 <UInt32ToStrBaseSign+0x5c>
                x = 0x10000000L;
 80070b0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
                break;
 80070b4:	e7d4      	b.n	8007060 <UInt32ToStrBaseSign+0x5c>
    size_t pos = 0;
 80070b6:	2000      	movs	r0, #0
 80070b8:	e7dc      	b.n	8007074 <UInt32ToStrBaseSign+0x70>
            x /= base;
 80070ba:	4631      	mov	r1, r6
 80070bc:	e7da      	b.n	8007074 <UInt32ToStrBaseSign+0x70>
    size_t pos = 0;
 80070be:	4610      	mov	r0, r2
    return pos;
 80070c0:	e7f0      	b.n	80070a4 <UInt32ToStrBaseSign+0xa0>
 80070c2:	bf00      	nop
 80070c4:	0800a4da 	.word	0x0800a4da
 80070c8:	3b9aca00 	.word	0x3b9aca00

080070cc <SCPI_UInt32ToStrBase>:
size_t SCPI_UInt32ToStrBase(uint32_t val, char * str, size_t len, int8_t base) {
 80070cc:	b513      	push	{r0, r1, r4, lr}
    return UInt32ToStrBaseSign(val, str, len, base, FALSE);
 80070ce:	2400      	movs	r4, #0
 80070d0:	9400      	str	r4, [sp, #0]
 80070d2:	f7ff ff97 	bl	8007004 <UInt32ToStrBaseSign>
}
 80070d6:	b002      	add	sp, #8
 80070d8:	bd10      	pop	{r4, pc}

080070da <strBaseToInt32>:
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 80070da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070dc:	460d      	mov	r5, r1
    *val = strtol(str, &endptr, base);
 80070de:	a901      	add	r1, sp, #4
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 80070e0:	4604      	mov	r4, r0
    *val = strtol(str, &endptr, base);
 80070e2:	f000 ff6b 	bl	8007fbc <strtol>
 80070e6:	6028      	str	r0, [r5, #0]
}
 80070e8:	9801      	ldr	r0, [sp, #4]
 80070ea:	1b00      	subs	r0, r0, r4
 80070ec:	b003      	add	sp, #12
 80070ee:	bd30      	pop	{r4, r5, pc}

080070f0 <strBaseToUInt32>:
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 80070f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070f2:	460d      	mov	r5, r1
    *val = strtoul(str, &endptr, base);
 80070f4:	a901      	add	r1, sp, #4
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 80070f6:	4604      	mov	r4, r0
    *val = strtoul(str, &endptr, base);
 80070f8:	f001 f8ba 	bl	8008270 <strtoul>
 80070fc:	6028      	str	r0, [r5, #0]
}
 80070fe:	9801      	ldr	r0, [sp, #4]
 8007100:	1b00      	subs	r0, r0, r4
 8007102:	b003      	add	sp, #12
 8007104:	bd30      	pop	{r4, r5, pc}

08007106 <strBaseToInt64>:
size_t strBaseToInt64(const char * str, int64_t * val, int8_t base) {
 8007106:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007108:	460d      	mov	r5, r1
    *val = SCPIDEFINE_strtoll(str, &endptr, base);
 800710a:	a901      	add	r1, sp, #4
size_t strBaseToInt64(const char * str, int64_t * val, int8_t base) {
 800710c:	4604      	mov	r4, r0
    *val = SCPIDEFINE_strtoll(str, &endptr, base);
 800710e:	f001 f81f 	bl	8008150 <strtoll>
 8007112:	e9c5 0100 	strd	r0, r1, [r5]
}
 8007116:	9801      	ldr	r0, [sp, #4]
 8007118:	1b00      	subs	r0, r0, r4
 800711a:	b003      	add	sp, #12
 800711c:	bd30      	pop	{r4, r5, pc}

0800711e <strBaseToUInt64>:
size_t strBaseToUInt64(const char * str, uint64_t * val, int8_t base) {
 800711e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007120:	460d      	mov	r5, r1
    *val = SCPIDEFINE_strtoull(str, &endptr, base);
 8007122:	a901      	add	r1, sp, #4
size_t strBaseToUInt64(const char * str, uint64_t * val, int8_t base) {
 8007124:	4604      	mov	r4, r0
    *val = SCPIDEFINE_strtoull(str, &endptr, base);
 8007126:	f001 f96f 	bl	8008408 <strtoull>
 800712a:	e9c5 0100 	strd	r0, r1, [r5]
}
 800712e:	9801      	ldr	r0, [sp, #4]
 8007130:	1b00      	subs	r0, r0, r4
 8007132:	b003      	add	sp, #12
 8007134:	bd30      	pop	{r4, r5, pc}
	...

08007138 <simple_strtod>:
{
 8007138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	460d      	mov	r5, r1
 c_tmp = strchr(str, '.');
 800713e:	212e      	movs	r1, #46	; 0x2e
{
 8007140:	4607      	mov	r7, r0
 c_tmp = strchr(str, '.');
 8007142:	f000 fe79 	bl	8007e38 <strchr>
 *endptr = (char*)str;
 8007146:	602f      	str	r7, [r5, #0]
 if(c_tmp != NULL)
 8007148:	2800      	cmp	r0, #0
 800714a:	d064      	beq.n	8007216 <simple_strtod+0xde>
 800714c:	4606      	mov	r6, r0
 double result = 0.0;
 800714e:	f04f 0800 	mov.w	r8, #0
 8007152:	f04f 0900 	mov.w	r9, #0
    inc = -1;
 8007156:	f04f 34ff 	mov.w	r4, #4294967295
    while(*c_tmp != 0 && inc > -9)
 800715a:	f816 af01 	ldrb.w	sl, [r6, #1]!
 800715e:	f1ba 0f00 	cmp.w	sl, #0
 8007162:	d132      	bne.n	80071ca <simple_strtod+0x92>
    c_tmp = strchr(str, '.');
 8007164:	212e      	movs	r1, #46	; 0x2e
 8007166:	4638      	mov	r0, r7
 8007168:	f000 fe66 	bl	8007e38 <strchr>
    c_tmp--;
 800716c:	1e46      	subs	r6, r0, #1
 800716e:	4634      	mov	r4, r6
        result += (*c_tmp - '0') * pow(10.0,inc);
 8007170:	f04f 0a00 	mov.w	sl, #0
 8007174:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8007220 <simple_strtod+0xe8>
 8007178:	7820      	ldrb	r0, [r4, #0]
 800717a:	3830      	subs	r0, #48	; 0x30
 800717c:	f7f9 f94c 	bl	8000418 <__aeabi_i2d>
 8007180:	e9cd 0100 	strd	r0, r1, [sp]
 8007184:	1b30      	subs	r0, r6, r4
 8007186:	b240      	sxtb	r0, r0
 8007188:	f7f9 f946 	bl	8000418 <__aeabi_i2d>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	4650      	mov	r0, sl
 8007192:	4659      	mov	r1, fp
 8007194:	f001 fe82 	bl	8008e9c <pow>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071a0:	f7f9 f9a4 	bl	80004ec <__aeabi_dmul>
 80071a4:	460b      	mov	r3, r1
 80071a6:	4602      	mov	r2, r0
 80071a8:	4649      	mov	r1, r9
 80071aa:	4640      	mov	r0, r8
 80071ac:	f7f8 ffe8 	bl	8000180 <__adddf3>
        c_tmp--; inc++; (*endptr)++;
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	3c01      	subs	r4, #1
 80071b4:	3301      	adds	r3, #1
    }while(c_tmp >= str);
 80071b6:	42a7      	cmp	r7, r4
        result += (*c_tmp - '0') * pow(10.0,inc);
 80071b8:	4680      	mov	r8, r0
 80071ba:	4689      	mov	r9, r1
        c_tmp--; inc++; (*endptr)++;
 80071bc:	602b      	str	r3, [r5, #0]
    }while(c_tmp >= str);
 80071be:	d9db      	bls.n	8007178 <simple_strtod+0x40>
}
 80071c0:	4640      	mov	r0, r8
 80071c2:	4649      	mov	r1, r9
 80071c4:	b003      	add	sp, #12
 80071c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while(*c_tmp != 0 && inc > -9)
 80071ca:	f114 0f09 	cmn.w	r4, #9
 80071ce:	d0c9      	beq.n	8007164 <simple_strtod+0x2c>
        result += (*c_tmp - '0') * pow(10.0, inc);
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7f9 f921 	bl	8000418 <__aeabi_i2d>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	2000      	movs	r0, #0
 80071dc:	4910      	ldr	r1, [pc, #64]	; (8007220 <simple_strtod+0xe8>)
 80071de:	f001 fe5d 	bl	8008e9c <pow>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	f1aa 0030 	sub.w	r0, sl, #48	; 0x30
 80071ea:	e9cd 2300 	strd	r2, r3, [sp]
 80071ee:	f7f9 f913 	bl	8000418 <__aeabi_i2d>
 80071f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071f6:	f7f9 f979 	bl	80004ec <__aeabi_dmul>
 80071fa:	460b      	mov	r3, r1
 80071fc:	4602      	mov	r2, r0
 80071fe:	4649      	mov	r1, r9
 8007200:	4640      	mov	r0, r8
 8007202:	f7f8 ffbd 	bl	8000180 <__adddf3>
        c_tmp++; inc--; (*endptr)++;
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	3c01      	subs	r4, #1
 800720a:	3301      	adds	r3, #1
        result += (*c_tmp - '0') * pow(10.0, inc);
 800720c:	4680      	mov	r8, r0
 800720e:	4689      	mov	r9, r1
 8007210:	b264      	sxtb	r4, r4
        c_tmp++; inc--; (*endptr)++;
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	e7a1      	b.n	800715a <simple_strtod+0x22>
 double result = 0.0;
 8007216:	f04f 0800 	mov.w	r8, #0
 800721a:	f04f 0900 	mov.w	r9, #0
 return result;
 800721e:	e7cf      	b.n	80071c0 <simple_strtod+0x88>
 8007220:	40240000 	.word	0x40240000

08007224 <strToDouble>:
size_t strToDouble(const char * str, double * val) {
 8007224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007226:	460d      	mov	r5, r1
    *val = simple_strtod(str, &endptr);
 8007228:	a901      	add	r1, sp, #4
size_t strToDouble(const char * str, double * val) {
 800722a:	4604      	mov	r4, r0
    *val = simple_strtod(str, &endptr);
 800722c:	f7ff ff84 	bl	8007138 <simple_strtod>
 8007230:	e9c5 0100 	strd	r0, r1, [r5]
}
 8007234:	9801      	ldr	r0, [sp, #4]
 8007236:	1b00      	subs	r0, r0, r4
 8007238:	b003      	add	sp, #12
 800723a:	bd30      	pop	{r4, r5, pc}

0800723c <compareStr>:
    if (len1 != len2) {
 800723c:	4299      	cmp	r1, r3
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 800723e:	b510      	push	{r4, lr}
 8007240:	4614      	mov	r4, r2
    if (len1 != len2) {
 8007242:	d107      	bne.n	8007254 <compareStr+0x18>
    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
 8007244:	460a      	mov	r2, r1
 8007246:	4621      	mov	r1, r4
 8007248:	f000 fe0b 	bl	8007e62 <strncasecmp>
 800724c:	fab0 f080 	clz	r0, r0
 8007250:	0940      	lsrs	r0, r0, #5
}
 8007252:	bd10      	pop	{r4, pc}
        return FALSE;
 8007254:	2000      	movs	r0, #0
 8007256:	e7fc      	b.n	8007252 <compareStr+0x16>

08007258 <compareStrAndNum>:
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 8007258:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (len2 < len1) {
 800725c:	428b      	cmp	r3, r1
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 800725e:	460c      	mov	r4, r1
 8007260:	4616      	mov	r6, r2
 8007262:	461f      	mov	r7, r3
 8007264:	f8dd 8020 	ldr.w	r8, [sp, #32]
    if (len2 < len1) {
 8007268:	d203      	bcs.n	8007272 <compareStrAndNum+0x1a>
        return FALSE;
 800726a:	2000      	movs	r0, #0
}
 800726c:	b002      	add	sp, #8
 800726e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
 8007272:	460a      	mov	r2, r1
 8007274:	4631      	mov	r1, r6
 8007276:	f000 fdf4 	bl	8007e62 <strncasecmp>
 800727a:	4605      	mov	r5, r0
 800727c:	2800      	cmp	r0, #0
 800727e:	d1f4      	bne.n	800726a <compareStrAndNum+0x12>
        if (num) {
 8007280:	f1b8 0f00 	cmp.w	r8, #0
 8007284:	d10e      	bne.n	80072a4 <compareStrAndNum+0x4c>
 8007286:	4434      	add	r4, r6
 8007288:	443e      	add	r6, r7
            for (i = len1; i < len2; i++) {
 800728a:	42b4      	cmp	r4, r6
 800728c:	d101      	bne.n	8007292 <compareStrAndNum+0x3a>
        result = TRUE;
 800728e:	2001      	movs	r0, #1
 8007290:	e7ec      	b.n	800726c <compareStrAndNum+0x14>
                if (!isdigit((int) str2[i])) {
 8007292:	f000 f9e1 	bl	8007658 <__locale_ctype_ptr>
 8007296:	f814 3b01 	ldrb.w	r3, [r4], #1
 800729a:	4418      	add	r0, r3
 800729c:	7843      	ldrb	r3, [r0, #1]
 800729e:	075b      	lsls	r3, r3, #29
 80072a0:	d5e3      	bpl.n	800726a <compareStrAndNum+0x12>
 80072a2:	e7f2      	b.n	800728a <compareStrAndNum+0x32>
            if (len1 == len2) {
 80072a4:	42a7      	cmp	r7, r4
 80072a6:	d0f2      	beq.n	800728e <compareStrAndNum+0x36>
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
 80072a8:	1930      	adds	r0, r6, r4
 80072aa:	220a      	movs	r2, #10
 80072ac:	a901      	add	r1, sp, #4
 80072ae:	f7ff ff14 	bl	80070da <strBaseToInt32>
 80072b2:	4404      	add	r4, r0
                if (i != len2) {
 80072b4:	42a7      	cmp	r7, r4
 80072b6:	d103      	bne.n	80072c0 <compareStrAndNum+0x68>
                    *num = tmpNum;
 80072b8:	9b01      	ldr	r3, [sp, #4]
 80072ba:	f8c8 3000 	str.w	r3, [r8]
 80072be:	e7e6      	b.n	800728e <compareStrAndNum+0x36>
                    result = FALSE;
 80072c0:	4628      	mov	r0, r5
 80072c2:	e7d3      	b.n	800726c <compareStrAndNum+0x14>

080072c4 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
 80072c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80072cc:	4604      	mov	r4, r0
 80072ce:	4615      	mov	r5, r2
 80072d0:	461e      	mov	r6, r3
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
 80072d2:	460f      	mov	r7, r1
 80072d4:	b1f9      	cbz	r1, 8007316 <matchPattern+0x52>
 80072d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80072da:	f810 3008 	ldrb.w	r3, [r0, r8]
 80072de:	2b23      	cmp	r3, #35	; 0x23
 80072e0:	d119      	bne.n	8007316 <matchPattern+0x52>
        size_t new_pattern_len = pattern_len - 1;

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 80072e2:	4641      	mov	r1, r8
 80072e4:	f7ff fe5f 	bl	8006fa6 <patternSeparatorShortPos>

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 80072e8:	f8cd 9000 	str.w	r9, [sp]
        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 80072ec:	4607      	mov	r7, r0
        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 80072ee:	4633      	mov	r3, r6
 80072f0:	462a      	mov	r2, r5
 80072f2:	4641      	mov	r1, r8
 80072f4:	4620      	mov	r0, r4
 80072f6:	f7ff ffaf 	bl	8007258 <compareStrAndNum>
 80072fa:	b9f8      	cbnz	r0, 800733c <matchPattern+0x78>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
 80072fc:	f8cd 9000 	str.w	r9, [sp]
 8007300:	4633      	mov	r3, r6
 8007302:	462a      	mov	r2, r5
 8007304:	4639      	mov	r1, r7
 8007306:	4620      	mov	r0, r4
 8007308:	f7ff ffa6 	bl	8007258 <compareStrAndNum>
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);

        return compareStr(pattern, pattern_len, str, str_len) ||
 800730c:	f000 0001 	and.w	r0, r0, #1
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
    }
}
 8007310:	b003      	add	sp, #12
 8007312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 8007316:	4639      	mov	r1, r7
 8007318:	4620      	mov	r0, r4
 800731a:	f7ff fe44 	bl	8006fa6 <patternSeparatorShortPos>
        return compareStr(pattern, pattern_len, str, str_len) ||
 800731e:	4633      	mov	r3, r6
        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 8007320:	4680      	mov	r8, r0
        return compareStr(pattern, pattern_len, str, str_len) ||
 8007322:	462a      	mov	r2, r5
 8007324:	4639      	mov	r1, r7
 8007326:	4620      	mov	r0, r4
 8007328:	f7ff ff88 	bl	800723c <compareStr>
 800732c:	b930      	cbnz	r0, 800733c <matchPattern+0x78>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
 800732e:	4633      	mov	r3, r6
 8007330:	462a      	mov	r2, r5
 8007332:	4641      	mov	r1, r8
 8007334:	4620      	mov	r0, r4
 8007336:	f7ff ff81 	bl	800723c <compareStr>
 800733a:	e7e7      	b.n	800730c <matchPattern+0x48>
        return compareStr(pattern, pattern_len, str, str_len) ||
 800733c:	2001      	movs	r0, #1
 800733e:	e7e5      	b.n	800730c <matchPattern+0x48>

08007340 <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
 8007340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	b085      	sub	sp, #20
 8007346:	4615      	mov	r5, r2
 8007348:	4688      	mov	r8, r1
 800734a:	9303      	str	r3, [sp, #12]
 800734c:	4606      	mov	r6, r0

    size_t numbers_idx = 0;
    int32_t *number_ptr = NULL;

    const char * pattern_ptr = pattern;
    int pattern_len = strlen(pattern);
 800734e:	f7f8 ff09 	bl	8000164 <strlen>
 8007352:	4604      	mov	r4, r0

    const char * cmd_ptr = cmd;
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 8007354:	4629      	mov	r1, r5
 8007356:	4640      	mov	r0, r8
 8007358:	f000 fda8 	bl	8007eac <strnlen>

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
 800735c:	1933      	adds	r3, r6, r4
 800735e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 8007362:	4605      	mov	r5, r0
    if (pattern_ptr[pattern_len - 1] == '?') {
 8007364:	2b3f      	cmp	r3, #63	; 0x3f
 8007366:	d106      	bne.n	8007376 <matchCommand+0x36>
        if (cmd_ptr[cmd_len - 1] == '?') {
 8007368:	1e45      	subs	r5, r0, #1
 800736a:	f818 3005 	ldrb.w	r3, [r8, r5]
 800736e:	2b3f      	cmp	r3, #63	; 0x3f
 8007370:	f040 80e4 	bne.w	800753c <matchCommand+0x1fc>
            cmd_len -= 1;
            pattern_len -= 1;
 8007374:	3c01      	subs	r4, #1
            return FALSE;
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
 8007376:	7833      	ldrb	r3, [r6, #0]
 8007378:	2b5b      	cmp	r3, #91	; 0x5b
        SKIP_PATTERN(1);
 800737a:	bf08      	it	eq
 800737c:	3601      	addeq	r6, #1
        brackets++;
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 800737e:	7833      	ldrb	r3, [r6, #0]
        SKIP_PATTERN(1);
 8007380:	bf06      	itte	eq
 8007382:	f104 34ff 	addeq.w	r4, r4, #4294967295
        brackets++;
 8007386:	f04f 0901 	moveq.w	r9, #1
    int brackets = 0;
 800738a:	f04f 0900 	movne.w	r9, #0
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 800738e:	2b3a      	cmp	r3, #58	; 0x3a
        SKIP_PATTERN(1);
    }

    if (cmd_ptr[0] == ':') {
 8007390:	f898 3000 	ldrb.w	r3, [r8]
        SKIP_PATTERN(1);
 8007394:	bf04      	itt	eq
 8007396:	3601      	addeq	r6, #1
 8007398:	f104 34ff 	addeq.w	r4, r4, #4294967295
    if (cmd_ptr[0] == ':') {
 800739c:	2b3a      	cmp	r3, #58	; 0x3a
 800739e:	d109      	bne.n	80073b4 <matchCommand+0x74>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
 80073a0:	2d01      	cmp	r5, #1
 80073a2:	d907      	bls.n	80073b4 <matchCommand+0x74>
            if (cmd_ptr[1] != '*') {
 80073a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80073a8:	2b2a      	cmp	r3, #42	; 0x2a
 80073aa:	f000 80c7 	beq.w	800753c <matchCommand+0x1fc>
                SKIP_CMD(1);
 80073ae:	f108 0801 	add.w	r8, r8, #1
 80073b2:	3d01      	subs	r5, #1
        brackets++;
 80073b4:	2300      	movs	r3, #0
 80073b6:	9302      	str	r3, [sp, #8]
    char * separator = strnpbrk(pattern, len, "?:[]");
 80073b8:	4a61      	ldr	r2, [pc, #388]	; (8007540 <matchCommand+0x200>)
 80073ba:	4621      	mov	r1, r4
 80073bc:	4630      	mov	r0, r6
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 80073be:	46a3      	mov	fp, r4
    char * separator = strnpbrk(pattern, len, "?:[]");
 80073c0:	f7ff fe0b 	bl	8006fda <strnpbrk>
    if (separator == NULL) {
 80073c4:	b108      	cbz	r0, 80073ca <matchCommand+0x8a>
        return separator - pattern;
 80073c6:	eba0 0b06 	sub.w	fp, r0, r6
    char * separator = strnpbrk(cmd, len, ":?");
 80073ca:	4a5e      	ldr	r2, [pc, #376]	; (8007544 <matchCommand+0x204>)
 80073cc:	4629      	mov	r1, r5
 80073ce:	4640      	mov	r0, r8
 80073d0:	f7ff fe03 	bl	8006fda <strnpbrk>
    if (separator == NULL) {
 80073d4:	b398      	cbz	r0, 800743e <matchCommand+0xfe>
        result = separator - cmd;
 80073d6:	eba0 0a08 	sub.w	sl, r0, r8

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
 80073da:	f1bb 0f00 	cmp.w	fp, #0
 80073de:	dd32      	ble.n	8007446 <matchCommand+0x106>
 80073e0:	eb06 030b 	add.w	r3, r6, fp
 80073e4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80073e8:	2b23      	cmp	r3, #35	; 0x23
 80073ea:	d12c      	bne.n	8007446 <matchCommand+0x106>
            if (numbers && (numbers_idx < numbers_len)) {
 80073ec:	9b03      	ldr	r3, [sp, #12]
 80073ee:	b343      	cbz	r3, 8007442 <matchCommand+0x102>
 80073f0:	9b02      	ldr	r3, [sp, #8]
 80073f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d224      	bcs.n	8007442 <matchCommand+0x102>
                number_ptr = numbers + numbers_idx;
 80073f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                *number_ptr = default_value; /* default value */
 8007400:	9a03      	ldr	r2, [sp, #12]
 8007402:	9902      	ldr	r1, [sp, #8]
 8007404:	4610      	mov	r0, r2
 8007406:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007408:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
            } else {
                number_ptr = NULL;
            }
            numbers_idx++;
 800740c:	9a02      	ldr	r2, [sp, #8]
 800740e:	3201      	adds	r2, #1
 8007410:	9202      	str	r2, [sp, #8]
        } else {
            number_ptr = NULL;
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	4642      	mov	r2, r8
 8007416:	4653      	mov	r3, sl
 8007418:	4659      	mov	r1, fp
 800741a:	4630      	mov	r0, r6
 800741c:	f7ff ff52 	bl	80072c4 <matchPattern>
 8007420:	eb06 070b 	add.w	r7, r6, fp
 8007424:	eba4 040b 	sub.w	r4, r4, fp
 8007428:	2800      	cmp	r0, #0
 800742a:	d073      	beq.n	8007514 <matchCommand+0x1d4>
            SKIP_PATTERN(pattern_sep_pos);
            SKIP_CMD(cmd_sep_pos);
 800742c:	eba5 050a 	sub.w	r5, r5, sl
            result = TRUE;

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
 8007430:	b95c      	cbnz	r4, 800744a <matchCommand+0x10a>
 8007432:	fab5 f085 	clz	r0, r5
 8007436:	0940      	lsrs	r0, r0, #5
    }

    return result;
#undef SKIP_PATTERN
#undef SKIP_CMD
}
 8007438:	b005      	add	sp, #20
 800743a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        result = len;
 800743e:	46aa      	mov	sl, r5
 8007440:	e7cb      	b.n	80073da <matchCommand+0x9a>
                number_ptr = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	e7e2      	b.n	800740c <matchCommand+0xcc>
            number_ptr = NULL;
 8007446:	2300      	movs	r3, #0
 8007448:	e7e3      	b.n	8007412 <matchCommand+0xd2>
            if (cmd_len == 0) {
 800744a:	bb35      	cbnz	r5, 800749a <matchCommand+0x15a>
    char * separator = strnpbrk(pattern, len, "?:[]");
 800744c:	4e3c      	ldr	r6, [pc, #240]	; (8007540 <matchCommand+0x200>)
 800744e:	4632      	mov	r2, r6
 8007450:	4621      	mov	r1, r4
 8007452:	4638      	mov	r0, r7
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8007454:	4625      	mov	r5, r4
    char * separator = strnpbrk(pattern, len, "?:[]");
 8007456:	f7ff fdc0 	bl	8006fda <strnpbrk>
    if (separator == NULL) {
 800745a:	b100      	cbz	r0, 800745e <matchCommand+0x11e>
        return separator - pattern;
 800745c:	1bc5      	subs	r5, r0, r7
                    switch (pattern_ptr[pattern_sep_pos]) {
 800745e:	5d7a      	ldrb	r2, [r7, r5]
 8007460:	2a5b      	cmp	r2, #91	; 0x5b
 8007462:	d010      	beq.n	8007486 <matchCommand+0x146>
 8007464:	2a5d      	cmp	r2, #93	; 0x5d
 8007466:	d011      	beq.n	800748c <matchCommand+0x14c>
                    SKIP_PATTERN(pattern_sep_pos + 1);
 8007468:	3501      	adds	r5, #1
 800746a:	442f      	add	r7, r5
 800746c:	1b64      	subs	r4, r4, r5
                    if (brackets == 0) {
 800746e:	f1b9 0f00 	cmp.w	r9, #0
 8007472:	d104      	bne.n	800747e <matchCommand+0x13e>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
 8007474:	2c00      	cmp	r4, #0
 8007476:	dd0c      	ble.n	8007492 <matchCommand+0x152>
 8007478:	783a      	ldrb	r2, [r7, #0]
 800747a:	2a5b      	cmp	r2, #91	; 0x5b
 800747c:	d15e      	bne.n	800753c <matchCommand+0x1fc>
                while (pattern_len) {
 800747e:	2c00      	cmp	r4, #0
 8007480:	d1e5      	bne.n	800744e <matchCommand+0x10e>
            result = TRUE;
 8007482:	2001      	movs	r0, #1
 8007484:	e7d8      	b.n	8007438 <matchCommand+0xf8>
                            brackets++;
 8007486:	f109 0901 	add.w	r9, r9, #1
                            break;
 800748a:	e7ed      	b.n	8007468 <matchCommand+0x128>
                            brackets--;
 800748c:	f109 39ff 	add.w	r9, r9, #4294967295
                            break;
 8007490:	e7ea      	b.n	8007468 <matchCommand+0x128>
                if (pattern_len != 0) {
 8007492:	bf0c      	ite	eq
 8007494:	2001      	moveq	r0, #1
 8007496:	2000      	movne	r0, #0
 8007498:	e7ce      	b.n	8007438 <matchCommand+0xf8>
            if ((pattern_len > 0)
 800749a:	2c00      	cmp	r4, #0
 800749c:	dd4e      	ble.n	800753c <matchCommand+0x1fc>
                    && ((pattern_ptr[0] == cmd_ptr[0])
 800749e:	7839      	ldrb	r1, [r7, #0]
 80074a0:	f818 200a 	ldrb.w	r2, [r8, sl]
            SKIP_CMD(cmd_sep_pos);
 80074a4:	eb08 000a 	add.w	r0, r8, sl
                    && ((pattern_ptr[0] == cmd_ptr[0])
 80074a8:	4291      	cmp	r1, r2
 80074aa:	d107      	bne.n	80074bc <matchCommand+0x17c>
                    && (pattern_ptr[0] == ':'))) {
 80074ac:	293a      	cmp	r1, #58	; 0x3a
 80074ae:	d105      	bne.n	80074bc <matchCommand+0x17c>
                SKIP_PATTERN(1);
 80074b0:	1c7e      	adds	r6, r7, #1
 80074b2:	3c01      	subs	r4, #1
                SKIP_CMD(1);
 80074b4:	f100 0801 	add.w	r8, r0, #1
 80074b8:	3d01      	subs	r5, #1
 80074ba:	e77d      	b.n	80073b8 <matchCommand+0x78>
            } else if ((pattern_len > 1)
 80074bc:	2c01      	cmp	r4, #1
 80074be:	d03d      	beq.n	800753c <matchCommand+0x1fc>
                    && (pattern_ptr[1] == cmd_ptr[0])
 80074c0:	787e      	ldrb	r6, [r7, #1]
 80074c2:	42b2      	cmp	r2, r6
 80074c4:	d117      	bne.n	80074f6 <matchCommand+0x1b6>
                    && (pattern_ptr[0] == '[')
 80074c6:	295b      	cmp	r1, #91	; 0x5b
 80074c8:	d109      	bne.n	80074de <matchCommand+0x19e>
                    && (pattern_ptr[1] == ':')) {
 80074ca:	2a3a      	cmp	r2, #58	; 0x3a
 80074cc:	d113      	bne.n	80074f6 <matchCommand+0x1b6>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
 80074ce:	1cbe      	adds	r6, r7, #2
 80074d0:	3c02      	subs	r4, #2
                SKIP_CMD(1);
 80074d2:	f100 0801 	add.w	r8, r0, #1
 80074d6:	3d01      	subs	r5, #1
                brackets++;
 80074d8:	f109 0901 	add.w	r9, r9, #1
 80074dc:	e76c      	b.n	80073b8 <matchCommand+0x78>
                    && (pattern_ptr[0] == ']')
 80074de:	295d      	cmp	r1, #93	; 0x5d
 80074e0:	d109      	bne.n	80074f6 <matchCommand+0x1b6>
                    && (pattern_ptr[1] == ':')) {
 80074e2:	2a3a      	cmp	r2, #58	; 0x3a
 80074e4:	d107      	bne.n	80074f6 <matchCommand+0x1b6>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
 80074e6:	1cbe      	adds	r6, r7, #2
 80074e8:	3c02      	subs	r4, #2
                SKIP_CMD(1);
 80074ea:	f100 0801 	add.w	r8, r0, #1
 80074ee:	3d01      	subs	r5, #1
                brackets--;
 80074f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80074f4:	e760      	b.n	80073b8 <matchCommand+0x78>
            } else if ((pattern_len > 2)
 80074f6:	2c02      	cmp	r4, #2
 80074f8:	d020      	beq.n	800753c <matchCommand+0x1fc>
                    && (pattern_ptr[2] == cmd_ptr[0])
 80074fa:	f897 c002 	ldrb.w	ip, [r7, #2]
 80074fe:	4594      	cmp	ip, r2
 8007500:	d11c      	bne.n	800753c <matchCommand+0x1fc>
                    && (pattern_ptr[0] == ']')
 8007502:	295d      	cmp	r1, #93	; 0x5d
 8007504:	d11a      	bne.n	800753c <matchCommand+0x1fc>
                    && (pattern_ptr[1] == '[')
 8007506:	2e5b      	cmp	r6, #91	; 0x5b
 8007508:	d118      	bne.n	800753c <matchCommand+0x1fc>
                    && (pattern_ptr[2] == ':')) {
 800750a:	2a3a      	cmp	r2, #58	; 0x3a
 800750c:	d116      	bne.n	800753c <matchCommand+0x1fc>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
 800750e:	1cfe      	adds	r6, r7, #3
 8007510:	3c03      	subs	r4, #3
 8007512:	e7cf      	b.n	80074b4 <matchCommand+0x174>
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 8007514:	f816 200b 	ldrb.w	r2, [r6, fp]
 8007518:	2a5d      	cmp	r2, #93	; 0x5d
 800751a:	d10f      	bne.n	800753c <matchCommand+0x1fc>
 800751c:	787a      	ldrb	r2, [r7, #1]
 800751e:	2a3a      	cmp	r2, #58	; 0x3a
 8007520:	d102      	bne.n	8007528 <matchCommand+0x1e8>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 8007522:	1cbe      	adds	r6, r7, #2
 8007524:	3c02      	subs	r4, #2
 8007526:	e7e3      	b.n	80074f0 <matchCommand+0x1b0>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
 8007528:	2c02      	cmp	r4, #2
 800752a:	dd07      	ble.n	800753c <matchCommand+0x1fc>
                    && (pattern_ptr[1] == '[')
 800752c:	2a5b      	cmp	r2, #91	; 0x5b
 800752e:	d105      	bne.n	800753c <matchCommand+0x1fc>
                    && (pattern_ptr[2] == ':')) {
 8007530:	78ba      	ldrb	r2, [r7, #2]
 8007532:	2a3a      	cmp	r2, #58	; 0x3a
 8007534:	d102      	bne.n	800753c <matchCommand+0x1fc>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 8007536:	1cfe      	adds	r6, r7, #3
 8007538:	3c03      	subs	r4, #3
 800753a:	e73d      	b.n	80073b8 <matchCommand+0x78>
            return FALSE;
 800753c:	2000      	movs	r0, #0
 800753e:	e77b      	b.n	8007438 <matchCommand+0xf8>
 8007540:	0800a4eb 	.word	0x0800a4eb
 8007544:	0800a4f0 	.word	0x0800a4f0

08007548 <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
 8007548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
 800754a:	b1c1      	cbz	r1, 800757e <composeCompoundCommand+0x36>
 800754c:	684c      	ldr	r4, [r1, #4]
 800754e:	b1c4      	cbz	r4, 8007582 <composeCompoundCommand+0x3a>
 8007550:	688b      	ldr	r3, [r1, #8]
 8007552:	b1c3      	cbz	r3, 8007586 <composeCompoundCommand+0x3e>
        return FALSE;

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
 8007554:	6845      	ldr	r5, [r0, #4]
 8007556:	b185      	cbz	r5, 800757a <composeCompoundCommand+0x32>
 8007558:	6882      	ldr	r2, [r0, #8]
 800755a:	b172      	cbz	r2, 800757a <composeCompoundCommand+0x32>
        return TRUE;

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
 800755c:	7826      	ldrb	r6, [r4, #0]
 800755e:	f006 06ef 	and.w	r6, r6, #239	; 0xef
 8007562:	2e2a      	cmp	r6, #42	; 0x2a
 8007564:	d009      	beq.n	800757a <composeCompoundCommand+0x32>
        return TRUE;

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
 8007566:	782e      	ldrb	r6, [r5, #0]
 8007568:	2e2a      	cmp	r6, #42	; 0x2a
 800756a:	d006      	beq.n	800757a <composeCompoundCommand+0x32>
        return TRUE;

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
        if (prev->ptr[i - 1] == ':') {
 800756c:	1e56      	subs	r6, r2, #1
 800756e:	5daf      	ldrb	r7, [r5, r6]
 8007570:	2f3a      	cmp	r7, #58	; 0x3a
 8007572:	d00a      	beq.n	800758a <composeCompoundCommand+0x42>
    for (i = prev->len; i > 0; i--) {
 8007574:	4632      	mov	r2, r6
 8007576:	2e00      	cmp	r6, #0
 8007578:	d1f8      	bne.n	800756c <composeCompoundCommand+0x24>
        return TRUE;

    current->ptr -= i;
    current->len += i;
    memmove(current->ptr, prev->ptr, i);
    return TRUE;
 800757a:	2001      	movs	r0, #1
 800757c:	e000      	b.n	8007580 <composeCompoundCommand+0x38>
        return FALSE;
 800757e:	4608      	mov	r0, r1
}
 8007580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FALSE;
 8007582:	4620      	mov	r0, r4
 8007584:	e7fc      	b.n	8007580 <composeCompoundCommand+0x38>
 8007586:	4618      	mov	r0, r3
 8007588:	e7fa      	b.n	8007580 <composeCompoundCommand+0x38>
    current->ptr -= i;
 800758a:	1aa4      	subs	r4, r4, r2
 800758c:	604c      	str	r4, [r1, #4]
    current->len += i;
 800758e:	4413      	add	r3, r2
 8007590:	608b      	str	r3, [r1, #8]
    memmove(current->ptr, prev->ptr, i);
 8007592:	6841      	ldr	r1, [r0, #4]
 8007594:	4620      	mov	r0, r4
 8007596:	f000 f892 	bl	80076be <memmove>
 800759a:	e7ee      	b.n	800757a <composeCompoundCommand+0x32>

0800759c <__assert_func>:
 800759c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800759e:	461c      	mov	r4, r3
 80075a0:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <__assert_func+0x2c>)
 80075a2:	4605      	mov	r5, r0
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68d8      	ldr	r0, [r3, #12]
 80075a8:	b152      	cbz	r2, 80075c0 <__assert_func+0x24>
 80075aa:	4b08      	ldr	r3, [pc, #32]	; (80075cc <__assert_func+0x30>)
 80075ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80075b0:	9100      	str	r1, [sp, #0]
 80075b2:	462b      	mov	r3, r5
 80075b4:	4622      	mov	r2, r4
 80075b6:	4906      	ldr	r1, [pc, #24]	; (80075d0 <__assert_func+0x34>)
 80075b8:	f000 f814 	bl	80075e4 <fiprintf>
 80075bc:	f001 f808 	bl	80085d0 <abort>
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <__assert_func+0x38>)
 80075c2:	461a      	mov	r2, r3
 80075c4:	e7f2      	b.n	80075ac <__assert_func+0x10>
 80075c6:	bf00      	nop
 80075c8:	20000190 	.word	0x20000190
 80075cc:	0800a4f3 	.word	0x0800a4f3
 80075d0:	0800a500 	.word	0x0800a500
 80075d4:	08009f9e 	.word	0x08009f9e

080075d8 <__errno>:
 80075d8:	4b01      	ldr	r3, [pc, #4]	; (80075e0 <__errno+0x8>)
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20000190 	.word	0x20000190

080075e4 <fiprintf>:
 80075e4:	b40e      	push	{r1, r2, r3}
 80075e6:	b503      	push	{r0, r1, lr}
 80075e8:	4601      	mov	r1, r0
 80075ea:	ab03      	add	r3, sp, #12
 80075ec:	4805      	ldr	r0, [pc, #20]	; (8007604 <fiprintf+0x20>)
 80075ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f2:	6800      	ldr	r0, [r0, #0]
 80075f4:	9301      	str	r3, [sp, #4]
 80075f6:	f000 f951 	bl	800789c <_vfiprintf_r>
 80075fa:	b002      	add	sp, #8
 80075fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007600:	b003      	add	sp, #12
 8007602:	4770      	bx	lr
 8007604:	20000190 	.word	0x20000190

08007608 <__libc_init_array>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	2500      	movs	r5, #0
 800760c:	4e0c      	ldr	r6, [pc, #48]	; (8007640 <__libc_init_array+0x38>)
 800760e:	4c0d      	ldr	r4, [pc, #52]	; (8007644 <__libc_init_array+0x3c>)
 8007610:	1ba4      	subs	r4, r4, r6
 8007612:	10a4      	asrs	r4, r4, #2
 8007614:	42a5      	cmp	r5, r4
 8007616:	d109      	bne.n	800762c <__libc_init_array+0x24>
 8007618:	f002 fc6a 	bl	8009ef0 <_init>
 800761c:	2500      	movs	r5, #0
 800761e:	4e0a      	ldr	r6, [pc, #40]	; (8007648 <__libc_init_array+0x40>)
 8007620:	4c0a      	ldr	r4, [pc, #40]	; (800764c <__libc_init_array+0x44>)
 8007622:	1ba4      	subs	r4, r4, r6
 8007624:	10a4      	asrs	r4, r4, #2
 8007626:	42a5      	cmp	r5, r4
 8007628:	d105      	bne.n	8007636 <__libc_init_array+0x2e>
 800762a:	bd70      	pop	{r4, r5, r6, pc}
 800762c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007630:	4798      	blx	r3
 8007632:	3501      	adds	r5, #1
 8007634:	e7ee      	b.n	8007614 <__libc_init_array+0xc>
 8007636:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800763a:	4798      	blx	r3
 800763c:	3501      	adds	r5, #1
 800763e:	e7f2      	b.n	8007626 <__libc_init_array+0x1e>
 8007640:	0800a710 	.word	0x0800a710
 8007644:	0800a710 	.word	0x0800a710
 8007648:	0800a710 	.word	0x0800a710
 800764c:	0800a714 	.word	0x0800a714

08007650 <__locale_ctype_ptr_l>:
 8007650:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007654:	4770      	bx	lr
	...

08007658 <__locale_ctype_ptr>:
 8007658:	4b04      	ldr	r3, [pc, #16]	; (800766c <__locale_ctype_ptr+0x14>)
 800765a:	4a05      	ldr	r2, [pc, #20]	; (8007670 <__locale_ctype_ptr+0x18>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	2b00      	cmp	r3, #0
 8007662:	bf08      	it	eq
 8007664:	4613      	moveq	r3, r2
 8007666:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800766a:	4770      	bx	lr
 800766c:	20000190 	.word	0x20000190
 8007670:	200001f4 	.word	0x200001f4

08007674 <malloc>:
 8007674:	4b02      	ldr	r3, [pc, #8]	; (8007680 <malloc+0xc>)
 8007676:	4601      	mov	r1, r0
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	f000 b88d 	b.w	8007798 <_malloc_r>
 800767e:	bf00      	nop
 8007680:	20000190 	.word	0x20000190

08007684 <__ascii_mbtowc>:
 8007684:	b082      	sub	sp, #8
 8007686:	b901      	cbnz	r1, 800768a <__ascii_mbtowc+0x6>
 8007688:	a901      	add	r1, sp, #4
 800768a:	b142      	cbz	r2, 800769e <__ascii_mbtowc+0x1a>
 800768c:	b14b      	cbz	r3, 80076a2 <__ascii_mbtowc+0x1e>
 800768e:	7813      	ldrb	r3, [r2, #0]
 8007690:	600b      	str	r3, [r1, #0]
 8007692:	7812      	ldrb	r2, [r2, #0]
 8007694:	1c10      	adds	r0, r2, #0
 8007696:	bf18      	it	ne
 8007698:	2001      	movne	r0, #1
 800769a:	b002      	add	sp, #8
 800769c:	4770      	bx	lr
 800769e:	4610      	mov	r0, r2
 80076a0:	e7fb      	b.n	800769a <__ascii_mbtowc+0x16>
 80076a2:	f06f 0001 	mvn.w	r0, #1
 80076a6:	e7f8      	b.n	800769a <__ascii_mbtowc+0x16>

080076a8 <memcpy>:
 80076a8:	b510      	push	{r4, lr}
 80076aa:	1e43      	subs	r3, r0, #1
 80076ac:	440a      	add	r2, r1
 80076ae:	4291      	cmp	r1, r2
 80076b0:	d100      	bne.n	80076b4 <memcpy+0xc>
 80076b2:	bd10      	pop	{r4, pc}
 80076b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076bc:	e7f7      	b.n	80076ae <memcpy+0x6>

080076be <memmove>:
 80076be:	4288      	cmp	r0, r1
 80076c0:	b510      	push	{r4, lr}
 80076c2:	eb01 0302 	add.w	r3, r1, r2
 80076c6:	d807      	bhi.n	80076d8 <memmove+0x1a>
 80076c8:	1e42      	subs	r2, r0, #1
 80076ca:	4299      	cmp	r1, r3
 80076cc:	d00a      	beq.n	80076e4 <memmove+0x26>
 80076ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076d2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80076d6:	e7f8      	b.n	80076ca <memmove+0xc>
 80076d8:	4283      	cmp	r3, r0
 80076da:	d9f5      	bls.n	80076c8 <memmove+0xa>
 80076dc:	1881      	adds	r1, r0, r2
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	42d3      	cmn	r3, r2
 80076e2:	d100      	bne.n	80076e6 <memmove+0x28>
 80076e4:	bd10      	pop	{r4, pc}
 80076e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076ee:	e7f7      	b.n	80076e0 <memmove+0x22>

080076f0 <memset>:
 80076f0:	4603      	mov	r3, r0
 80076f2:	4402      	add	r2, r0
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d100      	bne.n	80076fa <memset+0xa>
 80076f8:	4770      	bx	lr
 80076fa:	f803 1b01 	strb.w	r1, [r3], #1
 80076fe:	e7f9      	b.n	80076f4 <memset+0x4>

08007700 <_free_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4605      	mov	r5, r0
 8007704:	2900      	cmp	r1, #0
 8007706:	d043      	beq.n	8007790 <_free_r+0x90>
 8007708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800770c:	1f0c      	subs	r4, r1, #4
 800770e:	2b00      	cmp	r3, #0
 8007710:	bfb8      	it	lt
 8007712:	18e4      	addlt	r4, r4, r3
 8007714:	f001 f950 	bl	80089b8 <__malloc_lock>
 8007718:	4a1e      	ldr	r2, [pc, #120]	; (8007794 <_free_r+0x94>)
 800771a:	6813      	ldr	r3, [r2, #0]
 800771c:	4610      	mov	r0, r2
 800771e:	b933      	cbnz	r3, 800772e <_free_r+0x2e>
 8007720:	6063      	str	r3, [r4, #4]
 8007722:	6014      	str	r4, [r2, #0]
 8007724:	4628      	mov	r0, r5
 8007726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800772a:	f001 b946 	b.w	80089ba <__malloc_unlock>
 800772e:	42a3      	cmp	r3, r4
 8007730:	d90b      	bls.n	800774a <_free_r+0x4a>
 8007732:	6821      	ldr	r1, [r4, #0]
 8007734:	1862      	adds	r2, r4, r1
 8007736:	4293      	cmp	r3, r2
 8007738:	bf01      	itttt	eq
 800773a:	681a      	ldreq	r2, [r3, #0]
 800773c:	685b      	ldreq	r3, [r3, #4]
 800773e:	1852      	addeq	r2, r2, r1
 8007740:	6022      	streq	r2, [r4, #0]
 8007742:	6063      	str	r3, [r4, #4]
 8007744:	6004      	str	r4, [r0, #0]
 8007746:	e7ed      	b.n	8007724 <_free_r+0x24>
 8007748:	4613      	mov	r3, r2
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	b10a      	cbz	r2, 8007752 <_free_r+0x52>
 800774e:	42a2      	cmp	r2, r4
 8007750:	d9fa      	bls.n	8007748 <_free_r+0x48>
 8007752:	6819      	ldr	r1, [r3, #0]
 8007754:	1858      	adds	r0, r3, r1
 8007756:	42a0      	cmp	r0, r4
 8007758:	d10b      	bne.n	8007772 <_free_r+0x72>
 800775a:	6820      	ldr	r0, [r4, #0]
 800775c:	4401      	add	r1, r0
 800775e:	1858      	adds	r0, r3, r1
 8007760:	4282      	cmp	r2, r0
 8007762:	6019      	str	r1, [r3, #0]
 8007764:	d1de      	bne.n	8007724 <_free_r+0x24>
 8007766:	6810      	ldr	r0, [r2, #0]
 8007768:	6852      	ldr	r2, [r2, #4]
 800776a:	4401      	add	r1, r0
 800776c:	6019      	str	r1, [r3, #0]
 800776e:	605a      	str	r2, [r3, #4]
 8007770:	e7d8      	b.n	8007724 <_free_r+0x24>
 8007772:	d902      	bls.n	800777a <_free_r+0x7a>
 8007774:	230c      	movs	r3, #12
 8007776:	602b      	str	r3, [r5, #0]
 8007778:	e7d4      	b.n	8007724 <_free_r+0x24>
 800777a:	6820      	ldr	r0, [r4, #0]
 800777c:	1821      	adds	r1, r4, r0
 800777e:	428a      	cmp	r2, r1
 8007780:	bf01      	itttt	eq
 8007782:	6811      	ldreq	r1, [r2, #0]
 8007784:	6852      	ldreq	r2, [r2, #4]
 8007786:	1809      	addeq	r1, r1, r0
 8007788:	6021      	streq	r1, [r4, #0]
 800778a:	6062      	str	r2, [r4, #4]
 800778c:	605c      	str	r4, [r3, #4]
 800778e:	e7c9      	b.n	8007724 <_free_r+0x24>
 8007790:	bd38      	pop	{r3, r4, r5, pc}
 8007792:	bf00      	nop
 8007794:	200005a8 	.word	0x200005a8

08007798 <_malloc_r>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	1ccd      	adds	r5, r1, #3
 800779c:	f025 0503 	bic.w	r5, r5, #3
 80077a0:	3508      	adds	r5, #8
 80077a2:	2d0c      	cmp	r5, #12
 80077a4:	bf38      	it	cc
 80077a6:	250c      	movcc	r5, #12
 80077a8:	2d00      	cmp	r5, #0
 80077aa:	4606      	mov	r6, r0
 80077ac:	db01      	blt.n	80077b2 <_malloc_r+0x1a>
 80077ae:	42a9      	cmp	r1, r5
 80077b0:	d903      	bls.n	80077ba <_malloc_r+0x22>
 80077b2:	230c      	movs	r3, #12
 80077b4:	6033      	str	r3, [r6, #0]
 80077b6:	2000      	movs	r0, #0
 80077b8:	bd70      	pop	{r4, r5, r6, pc}
 80077ba:	f001 f8fd 	bl	80089b8 <__malloc_lock>
 80077be:	4a21      	ldr	r2, [pc, #132]	; (8007844 <_malloc_r+0xac>)
 80077c0:	6814      	ldr	r4, [r2, #0]
 80077c2:	4621      	mov	r1, r4
 80077c4:	b991      	cbnz	r1, 80077ec <_malloc_r+0x54>
 80077c6:	4c20      	ldr	r4, [pc, #128]	; (8007848 <_malloc_r+0xb0>)
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	b91b      	cbnz	r3, 80077d4 <_malloc_r+0x3c>
 80077cc:	4630      	mov	r0, r6
 80077ce:	f000 fb03 	bl	8007dd8 <_sbrk_r>
 80077d2:	6020      	str	r0, [r4, #0]
 80077d4:	4629      	mov	r1, r5
 80077d6:	4630      	mov	r0, r6
 80077d8:	f000 fafe 	bl	8007dd8 <_sbrk_r>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d124      	bne.n	800782a <_malloc_r+0x92>
 80077e0:	230c      	movs	r3, #12
 80077e2:	4630      	mov	r0, r6
 80077e4:	6033      	str	r3, [r6, #0]
 80077e6:	f001 f8e8 	bl	80089ba <__malloc_unlock>
 80077ea:	e7e4      	b.n	80077b6 <_malloc_r+0x1e>
 80077ec:	680b      	ldr	r3, [r1, #0]
 80077ee:	1b5b      	subs	r3, r3, r5
 80077f0:	d418      	bmi.n	8007824 <_malloc_r+0x8c>
 80077f2:	2b0b      	cmp	r3, #11
 80077f4:	d90f      	bls.n	8007816 <_malloc_r+0x7e>
 80077f6:	600b      	str	r3, [r1, #0]
 80077f8:	18cc      	adds	r4, r1, r3
 80077fa:	50cd      	str	r5, [r1, r3]
 80077fc:	4630      	mov	r0, r6
 80077fe:	f001 f8dc 	bl	80089ba <__malloc_unlock>
 8007802:	f104 000b 	add.w	r0, r4, #11
 8007806:	1d23      	adds	r3, r4, #4
 8007808:	f020 0007 	bic.w	r0, r0, #7
 800780c:	1ac3      	subs	r3, r0, r3
 800780e:	d0d3      	beq.n	80077b8 <_malloc_r+0x20>
 8007810:	425a      	negs	r2, r3
 8007812:	50e2      	str	r2, [r4, r3]
 8007814:	e7d0      	b.n	80077b8 <_malloc_r+0x20>
 8007816:	684b      	ldr	r3, [r1, #4]
 8007818:	428c      	cmp	r4, r1
 800781a:	bf16      	itet	ne
 800781c:	6063      	strne	r3, [r4, #4]
 800781e:	6013      	streq	r3, [r2, #0]
 8007820:	460c      	movne	r4, r1
 8007822:	e7eb      	b.n	80077fc <_malloc_r+0x64>
 8007824:	460c      	mov	r4, r1
 8007826:	6849      	ldr	r1, [r1, #4]
 8007828:	e7cc      	b.n	80077c4 <_malloc_r+0x2c>
 800782a:	1cc4      	adds	r4, r0, #3
 800782c:	f024 0403 	bic.w	r4, r4, #3
 8007830:	42a0      	cmp	r0, r4
 8007832:	d005      	beq.n	8007840 <_malloc_r+0xa8>
 8007834:	1a21      	subs	r1, r4, r0
 8007836:	4630      	mov	r0, r6
 8007838:	f000 face 	bl	8007dd8 <_sbrk_r>
 800783c:	3001      	adds	r0, #1
 800783e:	d0cf      	beq.n	80077e0 <_malloc_r+0x48>
 8007840:	6025      	str	r5, [r4, #0]
 8007842:	e7db      	b.n	80077fc <_malloc_r+0x64>
 8007844:	200005a8 	.word	0x200005a8
 8007848:	200005ac 	.word	0x200005ac

0800784c <__sfputc_r>:
 800784c:	6893      	ldr	r3, [r2, #8]
 800784e:	b410      	push	{r4}
 8007850:	3b01      	subs	r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	6093      	str	r3, [r2, #8]
 8007856:	da07      	bge.n	8007868 <__sfputc_r+0x1c>
 8007858:	6994      	ldr	r4, [r2, #24]
 800785a:	42a3      	cmp	r3, r4
 800785c:	db01      	blt.n	8007862 <__sfputc_r+0x16>
 800785e:	290a      	cmp	r1, #10
 8007860:	d102      	bne.n	8007868 <__sfputc_r+0x1c>
 8007862:	bc10      	pop	{r4}
 8007864:	f000 bde6 	b.w	8008434 <__swbuf_r>
 8007868:	6813      	ldr	r3, [r2, #0]
 800786a:	1c58      	adds	r0, r3, #1
 800786c:	6010      	str	r0, [r2, #0]
 800786e:	7019      	strb	r1, [r3, #0]
 8007870:	4608      	mov	r0, r1
 8007872:	bc10      	pop	{r4}
 8007874:	4770      	bx	lr

08007876 <__sfputs_r>:
 8007876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007878:	4606      	mov	r6, r0
 800787a:	460f      	mov	r7, r1
 800787c:	4614      	mov	r4, r2
 800787e:	18d5      	adds	r5, r2, r3
 8007880:	42ac      	cmp	r4, r5
 8007882:	d101      	bne.n	8007888 <__sfputs_r+0x12>
 8007884:	2000      	movs	r0, #0
 8007886:	e007      	b.n	8007898 <__sfputs_r+0x22>
 8007888:	463a      	mov	r2, r7
 800788a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800788e:	4630      	mov	r0, r6
 8007890:	f7ff ffdc 	bl	800784c <__sfputc_r>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d1f3      	bne.n	8007880 <__sfputs_r+0xa>
 8007898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800789c <_vfiprintf_r>:
 800789c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a0:	460c      	mov	r4, r1
 80078a2:	b09d      	sub	sp, #116	; 0x74
 80078a4:	4617      	mov	r7, r2
 80078a6:	461d      	mov	r5, r3
 80078a8:	4606      	mov	r6, r0
 80078aa:	b118      	cbz	r0, 80078b4 <_vfiprintf_r+0x18>
 80078ac:	6983      	ldr	r3, [r0, #24]
 80078ae:	b90b      	cbnz	r3, 80078b4 <_vfiprintf_r+0x18>
 80078b0:	f000 ff86 	bl	80087c0 <__sinit>
 80078b4:	4b7c      	ldr	r3, [pc, #496]	; (8007aa8 <_vfiprintf_r+0x20c>)
 80078b6:	429c      	cmp	r4, r3
 80078b8:	d158      	bne.n	800796c <_vfiprintf_r+0xd0>
 80078ba:	6874      	ldr	r4, [r6, #4]
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	0718      	lsls	r0, r3, #28
 80078c0:	d55e      	bpl.n	8007980 <_vfiprintf_r+0xe4>
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d05b      	beq.n	8007980 <_vfiprintf_r+0xe4>
 80078c8:	2300      	movs	r3, #0
 80078ca:	9309      	str	r3, [sp, #36]	; 0x24
 80078cc:	2320      	movs	r3, #32
 80078ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078d2:	2330      	movs	r3, #48	; 0x30
 80078d4:	f04f 0b01 	mov.w	fp, #1
 80078d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078dc:	9503      	str	r5, [sp, #12]
 80078de:	46b8      	mov	r8, r7
 80078e0:	4645      	mov	r5, r8
 80078e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078e6:	b10b      	cbz	r3, 80078ec <_vfiprintf_r+0x50>
 80078e8:	2b25      	cmp	r3, #37	; 0x25
 80078ea:	d154      	bne.n	8007996 <_vfiprintf_r+0xfa>
 80078ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80078f0:	d00b      	beq.n	800790a <_vfiprintf_r+0x6e>
 80078f2:	4653      	mov	r3, sl
 80078f4:	463a      	mov	r2, r7
 80078f6:	4621      	mov	r1, r4
 80078f8:	4630      	mov	r0, r6
 80078fa:	f7ff ffbc 	bl	8007876 <__sfputs_r>
 80078fe:	3001      	adds	r0, #1
 8007900:	f000 80c2 	beq.w	8007a88 <_vfiprintf_r+0x1ec>
 8007904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007906:	4453      	add	r3, sl
 8007908:	9309      	str	r3, [sp, #36]	; 0x24
 800790a:	f898 3000 	ldrb.w	r3, [r8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 80ba 	beq.w	8007a88 <_vfiprintf_r+0x1ec>
 8007914:	2300      	movs	r3, #0
 8007916:	f04f 32ff 	mov.w	r2, #4294967295
 800791a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800791e:	9304      	str	r3, [sp, #16]
 8007920:	9307      	str	r3, [sp, #28]
 8007922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007926:	931a      	str	r3, [sp, #104]	; 0x68
 8007928:	46a8      	mov	r8, r5
 800792a:	2205      	movs	r2, #5
 800792c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007930:	485e      	ldr	r0, [pc, #376]	; (8007aac <_vfiprintf_r+0x210>)
 8007932:	f001 f833 	bl	800899c <memchr>
 8007936:	9b04      	ldr	r3, [sp, #16]
 8007938:	bb78      	cbnz	r0, 800799a <_vfiprintf_r+0xfe>
 800793a:	06d9      	lsls	r1, r3, #27
 800793c:	bf44      	itt	mi
 800793e:	2220      	movmi	r2, #32
 8007940:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007944:	071a      	lsls	r2, r3, #28
 8007946:	bf44      	itt	mi
 8007948:	222b      	movmi	r2, #43	; 0x2b
 800794a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800794e:	782a      	ldrb	r2, [r5, #0]
 8007950:	2a2a      	cmp	r2, #42	; 0x2a
 8007952:	d02a      	beq.n	80079aa <_vfiprintf_r+0x10e>
 8007954:	46a8      	mov	r8, r5
 8007956:	2000      	movs	r0, #0
 8007958:	250a      	movs	r5, #10
 800795a:	9a07      	ldr	r2, [sp, #28]
 800795c:	4641      	mov	r1, r8
 800795e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007962:	3b30      	subs	r3, #48	; 0x30
 8007964:	2b09      	cmp	r3, #9
 8007966:	d969      	bls.n	8007a3c <_vfiprintf_r+0x1a0>
 8007968:	b360      	cbz	r0, 80079c4 <_vfiprintf_r+0x128>
 800796a:	e024      	b.n	80079b6 <_vfiprintf_r+0x11a>
 800796c:	4b50      	ldr	r3, [pc, #320]	; (8007ab0 <_vfiprintf_r+0x214>)
 800796e:	429c      	cmp	r4, r3
 8007970:	d101      	bne.n	8007976 <_vfiprintf_r+0xda>
 8007972:	68b4      	ldr	r4, [r6, #8]
 8007974:	e7a2      	b.n	80078bc <_vfiprintf_r+0x20>
 8007976:	4b4f      	ldr	r3, [pc, #316]	; (8007ab4 <_vfiprintf_r+0x218>)
 8007978:	429c      	cmp	r4, r3
 800797a:	bf08      	it	eq
 800797c:	68f4      	ldreq	r4, [r6, #12]
 800797e:	e79d      	b.n	80078bc <_vfiprintf_r+0x20>
 8007980:	4621      	mov	r1, r4
 8007982:	4630      	mov	r0, r6
 8007984:	f000 fdb6 	bl	80084f4 <__swsetup_r>
 8007988:	2800      	cmp	r0, #0
 800798a:	d09d      	beq.n	80078c8 <_vfiprintf_r+0x2c>
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	b01d      	add	sp, #116	; 0x74
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007996:	46a8      	mov	r8, r5
 8007998:	e7a2      	b.n	80078e0 <_vfiprintf_r+0x44>
 800799a:	4a44      	ldr	r2, [pc, #272]	; (8007aac <_vfiprintf_r+0x210>)
 800799c:	4645      	mov	r5, r8
 800799e:	1a80      	subs	r0, r0, r2
 80079a0:	fa0b f000 	lsl.w	r0, fp, r0
 80079a4:	4318      	orrs	r0, r3
 80079a6:	9004      	str	r0, [sp, #16]
 80079a8:	e7be      	b.n	8007928 <_vfiprintf_r+0x8c>
 80079aa:	9a03      	ldr	r2, [sp, #12]
 80079ac:	1d11      	adds	r1, r2, #4
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	9103      	str	r1, [sp, #12]
 80079b2:	2a00      	cmp	r2, #0
 80079b4:	db01      	blt.n	80079ba <_vfiprintf_r+0x11e>
 80079b6:	9207      	str	r2, [sp, #28]
 80079b8:	e004      	b.n	80079c4 <_vfiprintf_r+0x128>
 80079ba:	4252      	negs	r2, r2
 80079bc:	f043 0302 	orr.w	r3, r3, #2
 80079c0:	9207      	str	r2, [sp, #28]
 80079c2:	9304      	str	r3, [sp, #16]
 80079c4:	f898 3000 	ldrb.w	r3, [r8]
 80079c8:	2b2e      	cmp	r3, #46	; 0x2e
 80079ca:	d10e      	bne.n	80079ea <_vfiprintf_r+0x14e>
 80079cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80079d0:	2b2a      	cmp	r3, #42	; 0x2a
 80079d2:	d138      	bne.n	8007a46 <_vfiprintf_r+0x1aa>
 80079d4:	9b03      	ldr	r3, [sp, #12]
 80079d6:	f108 0802 	add.w	r8, r8, #2
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	9203      	str	r2, [sp, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bfb8      	it	lt
 80079e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80079e8:	9305      	str	r3, [sp, #20]
 80079ea:	4d33      	ldr	r5, [pc, #204]	; (8007ab8 <_vfiprintf_r+0x21c>)
 80079ec:	2203      	movs	r2, #3
 80079ee:	f898 1000 	ldrb.w	r1, [r8]
 80079f2:	4628      	mov	r0, r5
 80079f4:	f000 ffd2 	bl	800899c <memchr>
 80079f8:	b140      	cbz	r0, 8007a0c <_vfiprintf_r+0x170>
 80079fa:	2340      	movs	r3, #64	; 0x40
 80079fc:	1b40      	subs	r0, r0, r5
 80079fe:	fa03 f000 	lsl.w	r0, r3, r0
 8007a02:	9b04      	ldr	r3, [sp, #16]
 8007a04:	f108 0801 	add.w	r8, r8, #1
 8007a08:	4303      	orrs	r3, r0
 8007a0a:	9304      	str	r3, [sp, #16]
 8007a0c:	f898 1000 	ldrb.w	r1, [r8]
 8007a10:	2206      	movs	r2, #6
 8007a12:	482a      	ldr	r0, [pc, #168]	; (8007abc <_vfiprintf_r+0x220>)
 8007a14:	f108 0701 	add.w	r7, r8, #1
 8007a18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a1c:	f000 ffbe 	bl	800899c <memchr>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d037      	beq.n	8007a94 <_vfiprintf_r+0x1f8>
 8007a24:	4b26      	ldr	r3, [pc, #152]	; (8007ac0 <_vfiprintf_r+0x224>)
 8007a26:	bb1b      	cbnz	r3, 8007a70 <_vfiprintf_r+0x1d4>
 8007a28:	9b03      	ldr	r3, [sp, #12]
 8007a2a:	3307      	adds	r3, #7
 8007a2c:	f023 0307 	bic.w	r3, r3, #7
 8007a30:	3308      	adds	r3, #8
 8007a32:	9303      	str	r3, [sp, #12]
 8007a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a36:	444b      	add	r3, r9
 8007a38:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3a:	e750      	b.n	80078de <_vfiprintf_r+0x42>
 8007a3c:	fb05 3202 	mla	r2, r5, r2, r3
 8007a40:	2001      	movs	r0, #1
 8007a42:	4688      	mov	r8, r1
 8007a44:	e78a      	b.n	800795c <_vfiprintf_r+0xc0>
 8007a46:	2300      	movs	r3, #0
 8007a48:	250a      	movs	r5, #10
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	f108 0801 	add.w	r8, r8, #1
 8007a50:	9305      	str	r3, [sp, #20]
 8007a52:	4640      	mov	r0, r8
 8007a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a58:	3a30      	subs	r2, #48	; 0x30
 8007a5a:	2a09      	cmp	r2, #9
 8007a5c:	d903      	bls.n	8007a66 <_vfiprintf_r+0x1ca>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0c3      	beq.n	80079ea <_vfiprintf_r+0x14e>
 8007a62:	9105      	str	r1, [sp, #20]
 8007a64:	e7c1      	b.n	80079ea <_vfiprintf_r+0x14e>
 8007a66:	fb05 2101 	mla	r1, r5, r1, r2
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4680      	mov	r8, r0
 8007a6e:	e7f0      	b.n	8007a52 <_vfiprintf_r+0x1b6>
 8007a70:	ab03      	add	r3, sp, #12
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	4622      	mov	r2, r4
 8007a76:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <_vfiprintf_r+0x228>)
 8007a78:	a904      	add	r1, sp, #16
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f3af 8000 	nop.w
 8007a80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a84:	4681      	mov	r9, r0
 8007a86:	d1d5      	bne.n	8007a34 <_vfiprintf_r+0x198>
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	065b      	lsls	r3, r3, #25
 8007a8c:	f53f af7e 	bmi.w	800798c <_vfiprintf_r+0xf0>
 8007a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a92:	e77d      	b.n	8007990 <_vfiprintf_r+0xf4>
 8007a94:	ab03      	add	r3, sp, #12
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	4622      	mov	r2, r4
 8007a9a:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <_vfiprintf_r+0x228>)
 8007a9c:	a904      	add	r1, sp, #16
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f000 f888 	bl	8007bb4 <_printf_i>
 8007aa4:	e7ec      	b.n	8007a80 <_vfiprintf_r+0x1e4>
 8007aa6:	bf00      	nop
 8007aa8:	0800a680 	.word	0x0800a680
 8007aac:	0800a53c 	.word	0x0800a53c
 8007ab0:	0800a6a0 	.word	0x0800a6a0
 8007ab4:	0800a660 	.word	0x0800a660
 8007ab8:	0800a542 	.word	0x0800a542
 8007abc:	0800a546 	.word	0x0800a546
 8007ac0:	00000000 	.word	0x00000000
 8007ac4:	08007877 	.word	0x08007877

08007ac8 <_printf_common>:
 8007ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007acc:	4691      	mov	r9, r2
 8007ace:	461f      	mov	r7, r3
 8007ad0:	688a      	ldr	r2, [r1, #8]
 8007ad2:	690b      	ldr	r3, [r1, #16]
 8007ad4:	4606      	mov	r6, r0
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	bfb8      	it	lt
 8007ada:	4613      	movlt	r3, r2
 8007adc:	f8c9 3000 	str.w	r3, [r9]
 8007ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007aea:	b112      	cbz	r2, 8007af2 <_printf_common+0x2a>
 8007aec:	3301      	adds	r3, #1
 8007aee:	f8c9 3000 	str.w	r3, [r9]
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	0699      	lsls	r1, r3, #26
 8007af6:	bf42      	ittt	mi
 8007af8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007afc:	3302      	addmi	r3, #2
 8007afe:	f8c9 3000 	strmi.w	r3, [r9]
 8007b02:	6825      	ldr	r5, [r4, #0]
 8007b04:	f015 0506 	ands.w	r5, r5, #6
 8007b08:	d107      	bne.n	8007b1a <_printf_common+0x52>
 8007b0a:	f104 0a19 	add.w	sl, r4, #25
 8007b0e:	68e3      	ldr	r3, [r4, #12]
 8007b10:	f8d9 2000 	ldr.w	r2, [r9]
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	42ab      	cmp	r3, r5
 8007b18:	dc29      	bgt.n	8007b6e <_printf_common+0xa6>
 8007b1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007b1e:	6822      	ldr	r2, [r4, #0]
 8007b20:	3300      	adds	r3, #0
 8007b22:	bf18      	it	ne
 8007b24:	2301      	movne	r3, #1
 8007b26:	0692      	lsls	r2, r2, #26
 8007b28:	d42e      	bmi.n	8007b88 <_printf_common+0xc0>
 8007b2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4630      	mov	r0, r6
 8007b32:	47c0      	blx	r8
 8007b34:	3001      	adds	r0, #1
 8007b36:	d021      	beq.n	8007b7c <_printf_common+0xb4>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	68e5      	ldr	r5, [r4, #12]
 8007b3c:	f003 0306 	and.w	r3, r3, #6
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	bf18      	it	ne
 8007b44:	2500      	movne	r5, #0
 8007b46:	f8d9 2000 	ldr.w	r2, [r9]
 8007b4a:	f04f 0900 	mov.w	r9, #0
 8007b4e:	bf08      	it	eq
 8007b50:	1aad      	subeq	r5, r5, r2
 8007b52:	68a3      	ldr	r3, [r4, #8]
 8007b54:	6922      	ldr	r2, [r4, #16]
 8007b56:	bf08      	it	eq
 8007b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	bfc4      	itt	gt
 8007b60:	1a9b      	subgt	r3, r3, r2
 8007b62:	18ed      	addgt	r5, r5, r3
 8007b64:	341a      	adds	r4, #26
 8007b66:	454d      	cmp	r5, r9
 8007b68:	d11a      	bne.n	8007ba0 <_printf_common+0xd8>
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	e008      	b.n	8007b80 <_printf_common+0xb8>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4652      	mov	r2, sl
 8007b72:	4639      	mov	r1, r7
 8007b74:	4630      	mov	r0, r6
 8007b76:	47c0      	blx	r8
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d103      	bne.n	8007b84 <_printf_common+0xbc>
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b84:	3501      	adds	r5, #1
 8007b86:	e7c2      	b.n	8007b0e <_printf_common+0x46>
 8007b88:	2030      	movs	r0, #48	; 0x30
 8007b8a:	18e1      	adds	r1, r4, r3
 8007b8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b96:	4422      	add	r2, r4
 8007b98:	3302      	adds	r3, #2
 8007b9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b9e:	e7c4      	b.n	8007b2a <_printf_common+0x62>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	4639      	mov	r1, r7
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	47c0      	blx	r8
 8007baa:	3001      	adds	r0, #1
 8007bac:	d0e6      	beq.n	8007b7c <_printf_common+0xb4>
 8007bae:	f109 0901 	add.w	r9, r9, #1
 8007bb2:	e7d8      	b.n	8007b66 <_printf_common+0x9e>

08007bb4 <_printf_i>:
 8007bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	7e09      	ldrb	r1, [r1, #24]
 8007bc0:	b085      	sub	sp, #20
 8007bc2:	296e      	cmp	r1, #110	; 0x6e
 8007bc4:	4617      	mov	r7, r2
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	4698      	mov	r8, r3
 8007bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bcc:	f000 80b3 	beq.w	8007d36 <_printf_i+0x182>
 8007bd0:	d822      	bhi.n	8007c18 <_printf_i+0x64>
 8007bd2:	2963      	cmp	r1, #99	; 0x63
 8007bd4:	d036      	beq.n	8007c44 <_printf_i+0x90>
 8007bd6:	d80a      	bhi.n	8007bee <_printf_i+0x3a>
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	f000 80b9 	beq.w	8007d50 <_printf_i+0x19c>
 8007bde:	2958      	cmp	r1, #88	; 0x58
 8007be0:	f000 8083 	beq.w	8007cea <_printf_i+0x136>
 8007be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007be8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007bec:	e032      	b.n	8007c54 <_printf_i+0xa0>
 8007bee:	2964      	cmp	r1, #100	; 0x64
 8007bf0:	d001      	beq.n	8007bf6 <_printf_i+0x42>
 8007bf2:	2969      	cmp	r1, #105	; 0x69
 8007bf4:	d1f6      	bne.n	8007be4 <_printf_i+0x30>
 8007bf6:	6820      	ldr	r0, [r4, #0]
 8007bf8:	6813      	ldr	r3, [r2, #0]
 8007bfa:	0605      	lsls	r5, r0, #24
 8007bfc:	f103 0104 	add.w	r1, r3, #4
 8007c00:	d52a      	bpl.n	8007c58 <_printf_i+0xa4>
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6011      	str	r1, [r2, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	da03      	bge.n	8007c12 <_printf_i+0x5e>
 8007c0a:	222d      	movs	r2, #45	; 0x2d
 8007c0c:	425b      	negs	r3, r3
 8007c0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007c12:	486f      	ldr	r0, [pc, #444]	; (8007dd0 <_printf_i+0x21c>)
 8007c14:	220a      	movs	r2, #10
 8007c16:	e039      	b.n	8007c8c <_printf_i+0xd8>
 8007c18:	2973      	cmp	r1, #115	; 0x73
 8007c1a:	f000 809d 	beq.w	8007d58 <_printf_i+0x1a4>
 8007c1e:	d808      	bhi.n	8007c32 <_printf_i+0x7e>
 8007c20:	296f      	cmp	r1, #111	; 0x6f
 8007c22:	d020      	beq.n	8007c66 <_printf_i+0xb2>
 8007c24:	2970      	cmp	r1, #112	; 0x70
 8007c26:	d1dd      	bne.n	8007be4 <_printf_i+0x30>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	f043 0320 	orr.w	r3, r3, #32
 8007c2e:	6023      	str	r3, [r4, #0]
 8007c30:	e003      	b.n	8007c3a <_printf_i+0x86>
 8007c32:	2975      	cmp	r1, #117	; 0x75
 8007c34:	d017      	beq.n	8007c66 <_printf_i+0xb2>
 8007c36:	2978      	cmp	r1, #120	; 0x78
 8007c38:	d1d4      	bne.n	8007be4 <_printf_i+0x30>
 8007c3a:	2378      	movs	r3, #120	; 0x78
 8007c3c:	4865      	ldr	r0, [pc, #404]	; (8007dd4 <_printf_i+0x220>)
 8007c3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c42:	e055      	b.n	8007cf0 <_printf_i+0x13c>
 8007c44:	6813      	ldr	r3, [r2, #0]
 8007c46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c4a:	1d19      	adds	r1, r3, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6011      	str	r1, [r2, #0]
 8007c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c54:	2301      	movs	r3, #1
 8007c56:	e08c      	b.n	8007d72 <_printf_i+0x1be>
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c5e:	6011      	str	r1, [r2, #0]
 8007c60:	bf18      	it	ne
 8007c62:	b21b      	sxthne	r3, r3
 8007c64:	e7cf      	b.n	8007c06 <_printf_i+0x52>
 8007c66:	6813      	ldr	r3, [r2, #0]
 8007c68:	6825      	ldr	r5, [r4, #0]
 8007c6a:	1d18      	adds	r0, r3, #4
 8007c6c:	6010      	str	r0, [r2, #0]
 8007c6e:	0628      	lsls	r0, r5, #24
 8007c70:	d501      	bpl.n	8007c76 <_printf_i+0xc2>
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	e002      	b.n	8007c7c <_printf_i+0xc8>
 8007c76:	0668      	lsls	r0, r5, #25
 8007c78:	d5fb      	bpl.n	8007c72 <_printf_i+0xbe>
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	296f      	cmp	r1, #111	; 0x6f
 8007c7e:	bf14      	ite	ne
 8007c80:	220a      	movne	r2, #10
 8007c82:	2208      	moveq	r2, #8
 8007c84:	4852      	ldr	r0, [pc, #328]	; (8007dd0 <_printf_i+0x21c>)
 8007c86:	2100      	movs	r1, #0
 8007c88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c8c:	6865      	ldr	r5, [r4, #4]
 8007c8e:	2d00      	cmp	r5, #0
 8007c90:	60a5      	str	r5, [r4, #8]
 8007c92:	f2c0 8095 	blt.w	8007dc0 <_printf_i+0x20c>
 8007c96:	6821      	ldr	r1, [r4, #0]
 8007c98:	f021 0104 	bic.w	r1, r1, #4
 8007c9c:	6021      	str	r1, [r4, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d13d      	bne.n	8007d1e <_printf_i+0x16a>
 8007ca2:	2d00      	cmp	r5, #0
 8007ca4:	f040 808e 	bne.w	8007dc4 <_printf_i+0x210>
 8007ca8:	4665      	mov	r5, ip
 8007caa:	2a08      	cmp	r2, #8
 8007cac:	d10b      	bne.n	8007cc6 <_printf_i+0x112>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	07db      	lsls	r3, r3, #31
 8007cb2:	d508      	bpl.n	8007cc6 <_printf_i+0x112>
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	6862      	ldr	r2, [r4, #4]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	bfde      	ittt	le
 8007cbc:	2330      	movle	r3, #48	; 0x30
 8007cbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cc6:	ebac 0305 	sub.w	r3, ip, r5
 8007cca:	6123      	str	r3, [r4, #16]
 8007ccc:	f8cd 8000 	str.w	r8, [sp]
 8007cd0:	463b      	mov	r3, r7
 8007cd2:	aa03      	add	r2, sp, #12
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f7ff fef6 	bl	8007ac8 <_printf_common>
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d14d      	bne.n	8007d7c <_printf_i+0x1c8>
 8007ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce4:	b005      	add	sp, #20
 8007ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cea:	4839      	ldr	r0, [pc, #228]	; (8007dd0 <_printf_i+0x21c>)
 8007cec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007cf0:	6813      	ldr	r3, [r2, #0]
 8007cf2:	6821      	ldr	r1, [r4, #0]
 8007cf4:	1d1d      	adds	r5, r3, #4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6015      	str	r5, [r2, #0]
 8007cfa:	060a      	lsls	r2, r1, #24
 8007cfc:	d50b      	bpl.n	8007d16 <_printf_i+0x162>
 8007cfe:	07ca      	lsls	r2, r1, #31
 8007d00:	bf44      	itt	mi
 8007d02:	f041 0120 	orrmi.w	r1, r1, #32
 8007d06:	6021      	strmi	r1, [r4, #0]
 8007d08:	b91b      	cbnz	r3, 8007d12 <_printf_i+0x15e>
 8007d0a:	6822      	ldr	r2, [r4, #0]
 8007d0c:	f022 0220 	bic.w	r2, r2, #32
 8007d10:	6022      	str	r2, [r4, #0]
 8007d12:	2210      	movs	r2, #16
 8007d14:	e7b7      	b.n	8007c86 <_printf_i+0xd2>
 8007d16:	064d      	lsls	r5, r1, #25
 8007d18:	bf48      	it	mi
 8007d1a:	b29b      	uxthmi	r3, r3
 8007d1c:	e7ef      	b.n	8007cfe <_printf_i+0x14a>
 8007d1e:	4665      	mov	r5, ip
 8007d20:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d24:	fb02 3311 	mls	r3, r2, r1, r3
 8007d28:	5cc3      	ldrb	r3, [r0, r3]
 8007d2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007d2e:	460b      	mov	r3, r1
 8007d30:	2900      	cmp	r1, #0
 8007d32:	d1f5      	bne.n	8007d20 <_printf_i+0x16c>
 8007d34:	e7b9      	b.n	8007caa <_printf_i+0xf6>
 8007d36:	6813      	ldr	r3, [r2, #0]
 8007d38:	6825      	ldr	r5, [r4, #0]
 8007d3a:	1d18      	adds	r0, r3, #4
 8007d3c:	6961      	ldr	r1, [r4, #20]
 8007d3e:	6010      	str	r0, [r2, #0]
 8007d40:	0628      	lsls	r0, r5, #24
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	d501      	bpl.n	8007d4a <_printf_i+0x196>
 8007d46:	6019      	str	r1, [r3, #0]
 8007d48:	e002      	b.n	8007d50 <_printf_i+0x19c>
 8007d4a:	066a      	lsls	r2, r5, #25
 8007d4c:	d5fb      	bpl.n	8007d46 <_printf_i+0x192>
 8007d4e:	8019      	strh	r1, [r3, #0]
 8007d50:	2300      	movs	r3, #0
 8007d52:	4665      	mov	r5, ip
 8007d54:	6123      	str	r3, [r4, #16]
 8007d56:	e7b9      	b.n	8007ccc <_printf_i+0x118>
 8007d58:	6813      	ldr	r3, [r2, #0]
 8007d5a:	1d19      	adds	r1, r3, #4
 8007d5c:	6011      	str	r1, [r2, #0]
 8007d5e:	681d      	ldr	r5, [r3, #0]
 8007d60:	6862      	ldr	r2, [r4, #4]
 8007d62:	2100      	movs	r1, #0
 8007d64:	4628      	mov	r0, r5
 8007d66:	f000 fe19 	bl	800899c <memchr>
 8007d6a:	b108      	cbz	r0, 8007d70 <_printf_i+0x1bc>
 8007d6c:	1b40      	subs	r0, r0, r5
 8007d6e:	6060      	str	r0, [r4, #4]
 8007d70:	6863      	ldr	r3, [r4, #4]
 8007d72:	6123      	str	r3, [r4, #16]
 8007d74:	2300      	movs	r3, #0
 8007d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d7a:	e7a7      	b.n	8007ccc <_printf_i+0x118>
 8007d7c:	6923      	ldr	r3, [r4, #16]
 8007d7e:	462a      	mov	r2, r5
 8007d80:	4639      	mov	r1, r7
 8007d82:	4630      	mov	r0, r6
 8007d84:	47c0      	blx	r8
 8007d86:	3001      	adds	r0, #1
 8007d88:	d0aa      	beq.n	8007ce0 <_printf_i+0x12c>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	079b      	lsls	r3, r3, #30
 8007d8e:	d413      	bmi.n	8007db8 <_printf_i+0x204>
 8007d90:	68e0      	ldr	r0, [r4, #12]
 8007d92:	9b03      	ldr	r3, [sp, #12]
 8007d94:	4298      	cmp	r0, r3
 8007d96:	bfb8      	it	lt
 8007d98:	4618      	movlt	r0, r3
 8007d9a:	e7a3      	b.n	8007ce4 <_printf_i+0x130>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	464a      	mov	r2, r9
 8007da0:	4639      	mov	r1, r7
 8007da2:	4630      	mov	r0, r6
 8007da4:	47c0      	blx	r8
 8007da6:	3001      	adds	r0, #1
 8007da8:	d09a      	beq.n	8007ce0 <_printf_i+0x12c>
 8007daa:	3501      	adds	r5, #1
 8007dac:	68e3      	ldr	r3, [r4, #12]
 8007dae:	9a03      	ldr	r2, [sp, #12]
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	42ab      	cmp	r3, r5
 8007db4:	dcf2      	bgt.n	8007d9c <_printf_i+0x1e8>
 8007db6:	e7eb      	b.n	8007d90 <_printf_i+0x1dc>
 8007db8:	2500      	movs	r5, #0
 8007dba:	f104 0919 	add.w	r9, r4, #25
 8007dbe:	e7f5      	b.n	8007dac <_printf_i+0x1f8>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1ac      	bne.n	8007d1e <_printf_i+0x16a>
 8007dc4:	7803      	ldrb	r3, [r0, #0]
 8007dc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dce:	e76c      	b.n	8007caa <_printf_i+0xf6>
 8007dd0:	0800a4da 	.word	0x0800a4da
 8007dd4:	0800a54d 	.word	0x0800a54d

08007dd8 <_sbrk_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	2300      	movs	r3, #0
 8007ddc:	4c05      	ldr	r4, [pc, #20]	; (8007df4 <_sbrk_r+0x1c>)
 8007dde:	4605      	mov	r5, r0
 8007de0:	4608      	mov	r0, r1
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	f7f9 fea8 	bl	8001b38 <_sbrk>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d102      	bne.n	8007df2 <_sbrk_r+0x1a>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	b103      	cbz	r3, 8007df2 <_sbrk_r+0x1a>
 8007df0:	602b      	str	r3, [r5, #0]
 8007df2:	bd38      	pop	{r3, r4, r5, pc}
 8007df4:	20002c48 	.word	0x20002c48

08007df8 <siprintf>:
 8007df8:	b40e      	push	{r1, r2, r3}
 8007dfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007dfe:	b500      	push	{lr}
 8007e00:	b09c      	sub	sp, #112	; 0x70
 8007e02:	ab1d      	add	r3, sp, #116	; 0x74
 8007e04:	9002      	str	r0, [sp, #8]
 8007e06:	9006      	str	r0, [sp, #24]
 8007e08:	9107      	str	r1, [sp, #28]
 8007e0a:	9104      	str	r1, [sp, #16]
 8007e0c:	4808      	ldr	r0, [pc, #32]	; (8007e30 <siprintf+0x38>)
 8007e0e:	4909      	ldr	r1, [pc, #36]	; (8007e34 <siprintf+0x3c>)
 8007e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e14:	9105      	str	r1, [sp, #20]
 8007e16:	6800      	ldr	r0, [r0, #0]
 8007e18:	a902      	add	r1, sp, #8
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	f000 fe4e 	bl	8008abc <_svfiprintf_r>
 8007e20:	2200      	movs	r2, #0
 8007e22:	9b02      	ldr	r3, [sp, #8]
 8007e24:	701a      	strb	r2, [r3, #0]
 8007e26:	b01c      	add	sp, #112	; 0x70
 8007e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e2c:	b003      	add	sp, #12
 8007e2e:	4770      	bx	lr
 8007e30:	20000190 	.word	0x20000190
 8007e34:	ffff0208 	.word	0xffff0208

08007e38 <strchr>:
 8007e38:	b2c9      	uxtb	r1, r1
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e40:	b11a      	cbz	r2, 8007e4a <strchr+0x12>
 8007e42:	428a      	cmp	r2, r1
 8007e44:	d1f9      	bne.n	8007e3a <strchr+0x2>
 8007e46:	4618      	mov	r0, r3
 8007e48:	4770      	bx	lr
 8007e4a:	2900      	cmp	r1, #0
 8007e4c:	bf18      	it	ne
 8007e4e:	2300      	movne	r3, #0
 8007e50:	e7f9      	b.n	8007e46 <strchr+0xe>

08007e52 <strcpy>:
 8007e52:	4603      	mov	r3, r0
 8007e54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e58:	f803 2b01 	strb.w	r2, [r3], #1
 8007e5c:	2a00      	cmp	r2, #0
 8007e5e:	d1f9      	bne.n	8007e54 <strcpy+0x2>
 8007e60:	4770      	bx	lr

08007e62 <strncasecmp>:
 8007e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e66:	4606      	mov	r6, r0
 8007e68:	460f      	mov	r7, r1
 8007e6a:	eb00 0802 	add.w	r8, r0, r2
 8007e6e:	45b0      	cmp	r8, r6
 8007e70:	d019      	beq.n	8007ea6 <strncasecmp+0x44>
 8007e72:	f816 4b01 	ldrb.w	r4, [r6], #1
 8007e76:	f7ff fbef 	bl	8007658 <__locale_ctype_ptr>
 8007e7a:	4420      	add	r0, r4
 8007e7c:	7843      	ldrb	r3, [r0, #1]
 8007e7e:	f817 5b01 	ldrb.w	r5, [r7], #1
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	bf08      	it	eq
 8007e8a:	3420      	addeq	r4, #32
 8007e8c:	f7ff fbe4 	bl	8007658 <__locale_ctype_ptr>
 8007e90:	4428      	add	r0, r5
 8007e92:	7842      	ldrb	r2, [r0, #1]
 8007e94:	f002 0203 	and.w	r2, r2, #3
 8007e98:	2a01      	cmp	r2, #1
 8007e9a:	bf08      	it	eq
 8007e9c:	3520      	addeq	r5, #32
 8007e9e:	1b60      	subs	r0, r4, r5
 8007ea0:	d102      	bne.n	8007ea8 <strncasecmp+0x46>
 8007ea2:	2d00      	cmp	r5, #0
 8007ea4:	d1e3      	bne.n	8007e6e <strncasecmp+0xc>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007eac <strnlen>:
 8007eac:	4603      	mov	r3, r0
 8007eae:	b510      	push	{r4, lr}
 8007eb0:	4401      	add	r1, r0
 8007eb2:	428b      	cmp	r3, r1
 8007eb4:	d002      	beq.n	8007ebc <strnlen+0x10>
 8007eb6:	781a      	ldrb	r2, [r3, #0]
 8007eb8:	1c5c      	adds	r4, r3, #1
 8007eba:	b90a      	cbnz	r2, 8007ec0 <strnlen+0x14>
 8007ebc:	1a18      	subs	r0, r3, r0
 8007ebe:	bd10      	pop	{r4, pc}
 8007ec0:	4623      	mov	r3, r4
 8007ec2:	e7f6      	b.n	8007eb2 <strnlen+0x6>

08007ec4 <_strtol_l.isra.0>:
 8007ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec8:	4680      	mov	r8, r0
 8007eca:	4689      	mov	r9, r1
 8007ecc:	4692      	mov	sl, r2
 8007ece:	461e      	mov	r6, r3
 8007ed0:	460f      	mov	r7, r1
 8007ed2:	463d      	mov	r5, r7
 8007ed4:	9808      	ldr	r0, [sp, #32]
 8007ed6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007eda:	f7ff fbb9 	bl	8007650 <__locale_ctype_ptr_l>
 8007ede:	4420      	add	r0, r4
 8007ee0:	7843      	ldrb	r3, [r0, #1]
 8007ee2:	f013 0308 	ands.w	r3, r3, #8
 8007ee6:	d132      	bne.n	8007f4e <_strtol_l.isra.0+0x8a>
 8007ee8:	2c2d      	cmp	r4, #45	; 0x2d
 8007eea:	d132      	bne.n	8007f52 <_strtol_l.isra.0+0x8e>
 8007eec:	2201      	movs	r2, #1
 8007eee:	787c      	ldrb	r4, [r7, #1]
 8007ef0:	1cbd      	adds	r5, r7, #2
 8007ef2:	2e00      	cmp	r6, #0
 8007ef4:	d05d      	beq.n	8007fb2 <_strtol_l.isra.0+0xee>
 8007ef6:	2e10      	cmp	r6, #16
 8007ef8:	d109      	bne.n	8007f0e <_strtol_l.isra.0+0x4a>
 8007efa:	2c30      	cmp	r4, #48	; 0x30
 8007efc:	d107      	bne.n	8007f0e <_strtol_l.isra.0+0x4a>
 8007efe:	782b      	ldrb	r3, [r5, #0]
 8007f00:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f04:	2b58      	cmp	r3, #88	; 0x58
 8007f06:	d14f      	bne.n	8007fa8 <_strtol_l.isra.0+0xe4>
 8007f08:	2610      	movs	r6, #16
 8007f0a:	786c      	ldrb	r4, [r5, #1]
 8007f0c:	3502      	adds	r5, #2
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	bf14      	ite	ne
 8007f12:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007f16:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007f1a:	2700      	movs	r7, #0
 8007f1c:	fbb1 fcf6 	udiv	ip, r1, r6
 8007f20:	4638      	mov	r0, r7
 8007f22:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007f26:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007f2a:	2b09      	cmp	r3, #9
 8007f2c:	d817      	bhi.n	8007f5e <_strtol_l.isra.0+0x9a>
 8007f2e:	461c      	mov	r4, r3
 8007f30:	42a6      	cmp	r6, r4
 8007f32:	dd23      	ble.n	8007f7c <_strtol_l.isra.0+0xb8>
 8007f34:	1c7b      	adds	r3, r7, #1
 8007f36:	d007      	beq.n	8007f48 <_strtol_l.isra.0+0x84>
 8007f38:	4584      	cmp	ip, r0
 8007f3a:	d31c      	bcc.n	8007f76 <_strtol_l.isra.0+0xb2>
 8007f3c:	d101      	bne.n	8007f42 <_strtol_l.isra.0+0x7e>
 8007f3e:	45a6      	cmp	lr, r4
 8007f40:	db19      	blt.n	8007f76 <_strtol_l.isra.0+0xb2>
 8007f42:	2701      	movs	r7, #1
 8007f44:	fb00 4006 	mla	r0, r0, r6, r4
 8007f48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f4c:	e7eb      	b.n	8007f26 <_strtol_l.isra.0+0x62>
 8007f4e:	462f      	mov	r7, r5
 8007f50:	e7bf      	b.n	8007ed2 <_strtol_l.isra.0+0xe>
 8007f52:	2c2b      	cmp	r4, #43	; 0x2b
 8007f54:	bf04      	itt	eq
 8007f56:	1cbd      	addeq	r5, r7, #2
 8007f58:	787c      	ldrbeq	r4, [r7, #1]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	e7c9      	b.n	8007ef2 <_strtol_l.isra.0+0x2e>
 8007f5e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007f62:	2b19      	cmp	r3, #25
 8007f64:	d801      	bhi.n	8007f6a <_strtol_l.isra.0+0xa6>
 8007f66:	3c37      	subs	r4, #55	; 0x37
 8007f68:	e7e2      	b.n	8007f30 <_strtol_l.isra.0+0x6c>
 8007f6a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007f6e:	2b19      	cmp	r3, #25
 8007f70:	d804      	bhi.n	8007f7c <_strtol_l.isra.0+0xb8>
 8007f72:	3c57      	subs	r4, #87	; 0x57
 8007f74:	e7dc      	b.n	8007f30 <_strtol_l.isra.0+0x6c>
 8007f76:	f04f 37ff 	mov.w	r7, #4294967295
 8007f7a:	e7e5      	b.n	8007f48 <_strtol_l.isra.0+0x84>
 8007f7c:	1c7b      	adds	r3, r7, #1
 8007f7e:	d108      	bne.n	8007f92 <_strtol_l.isra.0+0xce>
 8007f80:	2322      	movs	r3, #34	; 0x22
 8007f82:	4608      	mov	r0, r1
 8007f84:	f8c8 3000 	str.w	r3, [r8]
 8007f88:	f1ba 0f00 	cmp.w	sl, #0
 8007f8c:	d107      	bne.n	8007f9e <_strtol_l.isra.0+0xda>
 8007f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f92:	b102      	cbz	r2, 8007f96 <_strtol_l.isra.0+0xd2>
 8007f94:	4240      	negs	r0, r0
 8007f96:	f1ba 0f00 	cmp.w	sl, #0
 8007f9a:	d0f8      	beq.n	8007f8e <_strtol_l.isra.0+0xca>
 8007f9c:	b10f      	cbz	r7, 8007fa2 <_strtol_l.isra.0+0xde>
 8007f9e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007fa2:	f8ca 9000 	str.w	r9, [sl]
 8007fa6:	e7f2      	b.n	8007f8e <_strtol_l.isra.0+0xca>
 8007fa8:	2430      	movs	r4, #48	; 0x30
 8007faa:	2e00      	cmp	r6, #0
 8007fac:	d1af      	bne.n	8007f0e <_strtol_l.isra.0+0x4a>
 8007fae:	2608      	movs	r6, #8
 8007fb0:	e7ad      	b.n	8007f0e <_strtol_l.isra.0+0x4a>
 8007fb2:	2c30      	cmp	r4, #48	; 0x30
 8007fb4:	d0a3      	beq.n	8007efe <_strtol_l.isra.0+0x3a>
 8007fb6:	260a      	movs	r6, #10
 8007fb8:	e7a9      	b.n	8007f0e <_strtol_l.isra.0+0x4a>
	...

08007fbc <strtol>:
 8007fbc:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <strtol+0x24>)
 8007fbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fc0:	681c      	ldr	r4, [r3, #0]
 8007fc2:	4d08      	ldr	r5, [pc, #32]	; (8007fe4 <strtol+0x28>)
 8007fc4:	6a23      	ldr	r3, [r4, #32]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	bf08      	it	eq
 8007fca:	462b      	moveq	r3, r5
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	460a      	mov	r2, r1
 8007fd2:	4601      	mov	r1, r0
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f7ff ff75 	bl	8007ec4 <_strtol_l.isra.0>
 8007fda:	b003      	add	sp, #12
 8007fdc:	bd30      	pop	{r4, r5, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000190 	.word	0x20000190
 8007fe4:	200001f4 	.word	0x200001f4

08007fe8 <_strtoll_l.isra.0>:
 8007fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	468a      	mov	sl, r1
 8007fee:	4693      	mov	fp, r2
 8007ff0:	461f      	mov	r7, r3
 8007ff2:	4688      	mov	r8, r1
 8007ff4:	b089      	sub	sp, #36	; 0x24
 8007ff6:	9007      	str	r0, [sp, #28]
 8007ff8:	4645      	mov	r5, r8
 8007ffa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ffc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008000:	f7ff fb26 	bl	8007650 <__locale_ctype_ptr_l>
 8008004:	4420      	add	r0, r4
 8008006:	7846      	ldrb	r6, [r0, #1]
 8008008:	f016 0608 	ands.w	r6, r6, #8
 800800c:	d155      	bne.n	80080ba <_strtoll_l.isra.0+0xd2>
 800800e:	2c2d      	cmp	r4, #45	; 0x2d
 8008010:	d155      	bne.n	80080be <_strtoll_l.isra.0+0xd6>
 8008012:	2601      	movs	r6, #1
 8008014:	f898 4001 	ldrb.w	r4, [r8, #1]
 8008018:	f108 0502 	add.w	r5, r8, #2
 800801c:	2f00      	cmp	r7, #0
 800801e:	f000 8091 	beq.w	8008144 <_strtoll_l.isra.0+0x15c>
 8008022:	2f10      	cmp	r7, #16
 8008024:	d10a      	bne.n	800803c <_strtoll_l.isra.0+0x54>
 8008026:	2c30      	cmp	r4, #48	; 0x30
 8008028:	d108      	bne.n	800803c <_strtoll_l.isra.0+0x54>
 800802a:	782b      	ldrb	r3, [r5, #0]
 800802c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008030:	2b58      	cmp	r3, #88	; 0x58
 8008032:	f040 8081 	bne.w	8008138 <_strtoll_l.isra.0+0x150>
 8008036:	2710      	movs	r7, #16
 8008038:	786c      	ldrb	r4, [r5, #1]
 800803a:	3502      	adds	r5, #2
 800803c:	2e00      	cmp	r6, #0
 800803e:	d145      	bne.n	80080cc <_strtoll_l.isra.0+0xe4>
 8008040:	f04f 39ff 	mov.w	r9, #4294967295
 8008044:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8008048:	463a      	mov	r2, r7
 800804a:	17fb      	asrs	r3, r7, #31
 800804c:	4648      	mov	r0, r9
 800804e:	4641      	mov	r1, r8
 8008050:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008054:	f7f9 f816 	bl	8001084 <__aeabi_uldivmod>
 8008058:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800805c:	4696      	mov	lr, r2
 800805e:	2100      	movs	r1, #0
 8008060:	2200      	movs	r2, #0
 8008062:	2300      	movs	r3, #0
 8008064:	e9cd 1200 	strd	r1, r2, [sp]
 8008068:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800806c:	f1bc 0f09 	cmp.w	ip, #9
 8008070:	d831      	bhi.n	80080d6 <_strtoll_l.isra.0+0xee>
 8008072:	4664      	mov	r4, ip
 8008074:	42a7      	cmp	r7, r4
 8008076:	dd3f      	ble.n	80080f8 <_strtoll_l.isra.0+0x110>
 8008078:	1c59      	adds	r1, r3, #1
 800807a:	d01b      	beq.n	80080b4 <_strtoll_l.isra.0+0xcc>
 800807c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008084:	4299      	cmp	r1, r3
 8008086:	bf08      	it	eq
 8008088:	4290      	cmpeq	r0, r2
 800808a:	d332      	bcc.n	80080f2 <_strtoll_l.isra.0+0x10a>
 800808c:	d101      	bne.n	8008092 <_strtoll_l.isra.0+0xaa>
 800808e:	45a6      	cmp	lr, r4
 8008090:	db2f      	blt.n	80080f2 <_strtoll_l.isra.0+0x10a>
 8008092:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8008096:	434b      	muls	r3, r1
 8008098:	9800      	ldr	r0, [sp, #0]
 800809a:	9903      	ldr	r1, [sp, #12]
 800809c:	fb00 3301 	mla	r3, r0, r1, r3
 80080a0:	9902      	ldr	r1, [sp, #8]
 80080a2:	fba1 0100 	umull	r0, r1, r1, r0
 80080a6:	1902      	adds	r2, r0, r4
 80080a8:	4419      	add	r1, r3
 80080aa:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
 80080ae:	e9cd 2300 	strd	r2, r3, [sp]
 80080b2:	2301      	movs	r3, #1
 80080b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080b8:	e7d6      	b.n	8008068 <_strtoll_l.isra.0+0x80>
 80080ba:	46a8      	mov	r8, r5
 80080bc:	e79c      	b.n	8007ff8 <_strtoll_l.isra.0+0x10>
 80080be:	2c2b      	cmp	r4, #43	; 0x2b
 80080c0:	bf04      	itt	eq
 80080c2:	f108 0502 	addeq.w	r5, r8, #2
 80080c6:	f898 4001 	ldrbeq.w	r4, [r8, #1]
 80080ca:	e7a7      	b.n	800801c <_strtoll_l.isra.0+0x34>
 80080cc:	f04f 0900 	mov.w	r9, #0
 80080d0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80080d4:	e7b8      	b.n	8008048 <_strtoll_l.isra.0+0x60>
 80080d6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80080da:	f1bc 0f19 	cmp.w	ip, #25
 80080de:	d801      	bhi.n	80080e4 <_strtoll_l.isra.0+0xfc>
 80080e0:	3c37      	subs	r4, #55	; 0x37
 80080e2:	e7c7      	b.n	8008074 <_strtoll_l.isra.0+0x8c>
 80080e4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80080e8:	f1bc 0f19 	cmp.w	ip, #25
 80080ec:	d804      	bhi.n	80080f8 <_strtoll_l.isra.0+0x110>
 80080ee:	3c57      	subs	r4, #87	; 0x57
 80080f0:	e7c0      	b.n	8008074 <_strtoll_l.isra.0+0x8c>
 80080f2:	f04f 33ff 	mov.w	r3, #4294967295
 80080f6:	e7dd      	b.n	80080b4 <_strtoll_l.isra.0+0xcc>
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	d10c      	bne.n	8008116 <_strtoll_l.isra.0+0x12e>
 80080fc:	2322      	movs	r3, #34	; 0x22
 80080fe:	9a07      	ldr	r2, [sp, #28]
 8008100:	e9cd 9800 	strd	r9, r8, [sp]
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	f1bb 0f00 	cmp.w	fp, #0
 800810a:	d110      	bne.n	800812e <_strtoll_l.isra.0+0x146>
 800810c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008110:	b009      	add	sp, #36	; 0x24
 8008112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008116:	b136      	cbz	r6, 8008126 <_strtoll_l.isra.0+0x13e>
 8008118:	e9dd 1200 	ldrd	r1, r2, [sp]
 800811c:	4249      	negs	r1, r1
 800811e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 8008122:	e9cd 1200 	strd	r1, r2, [sp]
 8008126:	f1bb 0f00 	cmp.w	fp, #0
 800812a:	d0ef      	beq.n	800810c <_strtoll_l.isra.0+0x124>
 800812c:	b10b      	cbz	r3, 8008132 <_strtoll_l.isra.0+0x14a>
 800812e:	f105 3aff 	add.w	sl, r5, #4294967295
 8008132:	f8cb a000 	str.w	sl, [fp]
 8008136:	e7e9      	b.n	800810c <_strtoll_l.isra.0+0x124>
 8008138:	2430      	movs	r4, #48	; 0x30
 800813a:	2f00      	cmp	r7, #0
 800813c:	f47f af7e 	bne.w	800803c <_strtoll_l.isra.0+0x54>
 8008140:	2708      	movs	r7, #8
 8008142:	e77b      	b.n	800803c <_strtoll_l.isra.0+0x54>
 8008144:	2c30      	cmp	r4, #48	; 0x30
 8008146:	f43f af70 	beq.w	800802a <_strtoll_l.isra.0+0x42>
 800814a:	270a      	movs	r7, #10
 800814c:	e776      	b.n	800803c <_strtoll_l.isra.0+0x54>
	...

08008150 <strtoll>:
 8008150:	4b08      	ldr	r3, [pc, #32]	; (8008174 <strtoll+0x24>)
 8008152:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008154:	681c      	ldr	r4, [r3, #0]
 8008156:	4d08      	ldr	r5, [pc, #32]	; (8008178 <strtoll+0x28>)
 8008158:	6a23      	ldr	r3, [r4, #32]
 800815a:	2b00      	cmp	r3, #0
 800815c:	bf08      	it	eq
 800815e:	462b      	moveq	r3, r5
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	4613      	mov	r3, r2
 8008164:	460a      	mov	r2, r1
 8008166:	4601      	mov	r1, r0
 8008168:	4620      	mov	r0, r4
 800816a:	f7ff ff3d 	bl	8007fe8 <_strtoll_l.isra.0>
 800816e:	b003      	add	sp, #12
 8008170:	bd30      	pop	{r4, r5, pc}
 8008172:	bf00      	nop
 8008174:	20000190 	.word	0x20000190
 8008178:	200001f4 	.word	0x200001f4

0800817c <_strtoul_l.isra.0>:
 800817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	4680      	mov	r8, r0
 8008182:	4689      	mov	r9, r1
 8008184:	4692      	mov	sl, r2
 8008186:	461e      	mov	r6, r3
 8008188:	460f      	mov	r7, r1
 800818a:	463d      	mov	r5, r7
 800818c:	9808      	ldr	r0, [sp, #32]
 800818e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008192:	f7ff fa5d 	bl	8007650 <__locale_ctype_ptr_l>
 8008196:	4420      	add	r0, r4
 8008198:	7843      	ldrb	r3, [r0, #1]
 800819a:	f013 0308 	ands.w	r3, r3, #8
 800819e:	d130      	bne.n	8008202 <_strtoul_l.isra.0+0x86>
 80081a0:	2c2d      	cmp	r4, #45	; 0x2d
 80081a2:	d130      	bne.n	8008206 <_strtoul_l.isra.0+0x8a>
 80081a4:	2101      	movs	r1, #1
 80081a6:	787c      	ldrb	r4, [r7, #1]
 80081a8:	1cbd      	adds	r5, r7, #2
 80081aa:	2e00      	cmp	r6, #0
 80081ac:	d05c      	beq.n	8008268 <_strtoul_l.isra.0+0xec>
 80081ae:	2e10      	cmp	r6, #16
 80081b0:	d109      	bne.n	80081c6 <_strtoul_l.isra.0+0x4a>
 80081b2:	2c30      	cmp	r4, #48	; 0x30
 80081b4:	d107      	bne.n	80081c6 <_strtoul_l.isra.0+0x4a>
 80081b6:	782b      	ldrb	r3, [r5, #0]
 80081b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081bc:	2b58      	cmp	r3, #88	; 0x58
 80081be:	d14e      	bne.n	800825e <_strtoul_l.isra.0+0xe2>
 80081c0:	2610      	movs	r6, #16
 80081c2:	786c      	ldrb	r4, [r5, #1]
 80081c4:	3502      	adds	r5, #2
 80081c6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ca:	fbb2 f2f6 	udiv	r2, r2, r6
 80081ce:	2300      	movs	r3, #0
 80081d0:	fb06 fc02 	mul.w	ip, r6, r2
 80081d4:	4618      	mov	r0, r3
 80081d6:	ea6f 0c0c 	mvn.w	ip, ip
 80081da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80081de:	2f09      	cmp	r7, #9
 80081e0:	d817      	bhi.n	8008212 <_strtoul_l.isra.0+0x96>
 80081e2:	463c      	mov	r4, r7
 80081e4:	42a6      	cmp	r6, r4
 80081e6:	dd23      	ble.n	8008230 <_strtoul_l.isra.0+0xb4>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	db1e      	blt.n	800822a <_strtoul_l.isra.0+0xae>
 80081ec:	4282      	cmp	r2, r0
 80081ee:	d31c      	bcc.n	800822a <_strtoul_l.isra.0+0xae>
 80081f0:	d101      	bne.n	80081f6 <_strtoul_l.isra.0+0x7a>
 80081f2:	45a4      	cmp	ip, r4
 80081f4:	db19      	blt.n	800822a <_strtoul_l.isra.0+0xae>
 80081f6:	2301      	movs	r3, #1
 80081f8:	fb00 4006 	mla	r0, r0, r6, r4
 80081fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008200:	e7eb      	b.n	80081da <_strtoul_l.isra.0+0x5e>
 8008202:	462f      	mov	r7, r5
 8008204:	e7c1      	b.n	800818a <_strtoul_l.isra.0+0xe>
 8008206:	2c2b      	cmp	r4, #43	; 0x2b
 8008208:	bf04      	itt	eq
 800820a:	1cbd      	addeq	r5, r7, #2
 800820c:	787c      	ldrbeq	r4, [r7, #1]
 800820e:	4619      	mov	r1, r3
 8008210:	e7cb      	b.n	80081aa <_strtoul_l.isra.0+0x2e>
 8008212:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008216:	2f19      	cmp	r7, #25
 8008218:	d801      	bhi.n	800821e <_strtoul_l.isra.0+0xa2>
 800821a:	3c37      	subs	r4, #55	; 0x37
 800821c:	e7e2      	b.n	80081e4 <_strtoul_l.isra.0+0x68>
 800821e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008222:	2f19      	cmp	r7, #25
 8008224:	d804      	bhi.n	8008230 <_strtoul_l.isra.0+0xb4>
 8008226:	3c57      	subs	r4, #87	; 0x57
 8008228:	e7dc      	b.n	80081e4 <_strtoul_l.isra.0+0x68>
 800822a:	f04f 33ff 	mov.w	r3, #4294967295
 800822e:	e7e5      	b.n	80081fc <_strtoul_l.isra.0+0x80>
 8008230:	2b00      	cmp	r3, #0
 8008232:	da09      	bge.n	8008248 <_strtoul_l.isra.0+0xcc>
 8008234:	2322      	movs	r3, #34	; 0x22
 8008236:	f04f 30ff 	mov.w	r0, #4294967295
 800823a:	f8c8 3000 	str.w	r3, [r8]
 800823e:	f1ba 0f00 	cmp.w	sl, #0
 8008242:	d107      	bne.n	8008254 <_strtoul_l.isra.0+0xd8>
 8008244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008248:	b101      	cbz	r1, 800824c <_strtoul_l.isra.0+0xd0>
 800824a:	4240      	negs	r0, r0
 800824c:	f1ba 0f00 	cmp.w	sl, #0
 8008250:	d0f8      	beq.n	8008244 <_strtoul_l.isra.0+0xc8>
 8008252:	b10b      	cbz	r3, 8008258 <_strtoul_l.isra.0+0xdc>
 8008254:	f105 39ff 	add.w	r9, r5, #4294967295
 8008258:	f8ca 9000 	str.w	r9, [sl]
 800825c:	e7f2      	b.n	8008244 <_strtoul_l.isra.0+0xc8>
 800825e:	2430      	movs	r4, #48	; 0x30
 8008260:	2e00      	cmp	r6, #0
 8008262:	d1b0      	bne.n	80081c6 <_strtoul_l.isra.0+0x4a>
 8008264:	2608      	movs	r6, #8
 8008266:	e7ae      	b.n	80081c6 <_strtoul_l.isra.0+0x4a>
 8008268:	2c30      	cmp	r4, #48	; 0x30
 800826a:	d0a4      	beq.n	80081b6 <_strtoul_l.isra.0+0x3a>
 800826c:	260a      	movs	r6, #10
 800826e:	e7aa      	b.n	80081c6 <_strtoul_l.isra.0+0x4a>

08008270 <strtoul>:
 8008270:	4b08      	ldr	r3, [pc, #32]	; (8008294 <strtoul+0x24>)
 8008272:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008274:	681c      	ldr	r4, [r3, #0]
 8008276:	4d08      	ldr	r5, [pc, #32]	; (8008298 <strtoul+0x28>)
 8008278:	6a23      	ldr	r3, [r4, #32]
 800827a:	2b00      	cmp	r3, #0
 800827c:	bf08      	it	eq
 800827e:	462b      	moveq	r3, r5
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	4613      	mov	r3, r2
 8008284:	460a      	mov	r2, r1
 8008286:	4601      	mov	r1, r0
 8008288:	4620      	mov	r0, r4
 800828a:	f7ff ff77 	bl	800817c <_strtoul_l.isra.0>
 800828e:	b003      	add	sp, #12
 8008290:	bd30      	pop	{r4, r5, pc}
 8008292:	bf00      	nop
 8008294:	20000190 	.word	0x20000190
 8008298:	200001f4 	.word	0x200001f4

0800829c <_strtoull_l.isra.0>:
 800829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a0:	4688      	mov	r8, r1
 80082a2:	4691      	mov	r9, r2
 80082a4:	461f      	mov	r7, r3
 80082a6:	468b      	mov	fp, r1
 80082a8:	b087      	sub	sp, #28
 80082aa:	9005      	str	r0, [sp, #20]
 80082ac:	465d      	mov	r5, fp
 80082ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 80082b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082b4:	f7ff f9cc 	bl	8007650 <__locale_ctype_ptr_l>
 80082b8:	4420      	add	r0, r4
 80082ba:	7846      	ldrb	r6, [r0, #1]
 80082bc:	f016 0608 	ands.w	r6, r6, #8
 80082c0:	d158      	bne.n	8008374 <_strtoull_l.isra.0+0xd8>
 80082c2:	2c2d      	cmp	r4, #45	; 0x2d
 80082c4:	d158      	bne.n	8008378 <_strtoull_l.isra.0+0xdc>
 80082c6:	2601      	movs	r6, #1
 80082c8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80082cc:	f10b 0502 	add.w	r5, fp, #2
 80082d0:	2f00      	cmp	r7, #0
 80082d2:	f000 8093 	beq.w	80083fc <_strtoull_l.isra.0+0x160>
 80082d6:	2f10      	cmp	r7, #16
 80082d8:	d10a      	bne.n	80082f0 <_strtoull_l.isra.0+0x54>
 80082da:	2c30      	cmp	r4, #48	; 0x30
 80082dc:	d108      	bne.n	80082f0 <_strtoull_l.isra.0+0x54>
 80082de:	782b      	ldrb	r3, [r5, #0]
 80082e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80082e4:	2b58      	cmp	r3, #88	; 0x58
 80082e6:	f040 8083 	bne.w	80083f0 <_strtoull_l.isra.0+0x154>
 80082ea:	2710      	movs	r7, #16
 80082ec:	786c      	ldrb	r4, [r5, #1]
 80082ee:	3502      	adds	r5, #2
 80082f0:	ea4f 7be7 	mov.w	fp, r7, asr #31
 80082f4:	463a      	mov	r2, r7
 80082f6:	465b      	mov	r3, fp
 80082f8:	f04f 30ff 	mov.w	r0, #4294967295
 80082fc:	f04f 31ff 	mov.w	r1, #4294967295
 8008300:	f7f8 fec0 	bl	8001084 <__aeabi_uldivmod>
 8008304:	463a      	mov	r2, r7
 8008306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800830a:	465b      	mov	r3, fp
 800830c:	f04f 30ff 	mov.w	r0, #4294967295
 8008310:	f04f 31ff 	mov.w	r1, #4294967295
 8008314:	f7f8 feb6 	bl	8001084 <__aeabi_uldivmod>
 8008318:	2100      	movs	r1, #0
 800831a:	4696      	mov	lr, r2
 800831c:	2200      	movs	r2, #0
 800831e:	46ba      	mov	sl, r7
 8008320:	2300      	movs	r3, #0
 8008322:	e9cd 1200 	strd	r1, r2, [sp]
 8008326:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800832a:	f1bc 0f09 	cmp.w	ip, #9
 800832e:	d82a      	bhi.n	8008386 <_strtoull_l.isra.0+0xea>
 8008330:	4664      	mov	r4, ip
 8008332:	42a7      	cmp	r7, r4
 8008334:	dd38      	ble.n	80083a8 <_strtoull_l.isra.0+0x10c>
 8008336:	2b00      	cmp	r3, #0
 8008338:	db33      	blt.n	80083a2 <_strtoull_l.isra.0+0x106>
 800833a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800833e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008342:	4299      	cmp	r1, r3
 8008344:	bf08      	it	eq
 8008346:	4290      	cmpeq	r0, r2
 8008348:	d32b      	bcc.n	80083a2 <_strtoull_l.isra.0+0x106>
 800834a:	d101      	bne.n	8008350 <_strtoull_l.isra.0+0xb4>
 800834c:	45a6      	cmp	lr, r4
 800834e:	db28      	blt.n	80083a2 <_strtoull_l.isra.0+0x106>
 8008350:	9b01      	ldr	r3, [sp, #4]
 8008352:	9900      	ldr	r1, [sp, #0]
 8008354:	fb0a f303 	mul.w	r3, sl, r3
 8008358:	fb01 330b 	mla	r3, r1, fp, r3
 800835c:	fbaa 0101 	umull	r0, r1, sl, r1
 8008360:	1902      	adds	r2, r0, r4
 8008362:	4419      	add	r1, r3
 8008364:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
 8008368:	e9cd 2300 	strd	r2, r3, [sp]
 800836c:	2301      	movs	r3, #1
 800836e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008372:	e7d8      	b.n	8008326 <_strtoull_l.isra.0+0x8a>
 8008374:	46ab      	mov	fp, r5
 8008376:	e799      	b.n	80082ac <_strtoull_l.isra.0+0x10>
 8008378:	2c2b      	cmp	r4, #43	; 0x2b
 800837a:	bf04      	itt	eq
 800837c:	f10b 0502 	addeq.w	r5, fp, #2
 8008380:	f89b 4001 	ldrbeq.w	r4, [fp, #1]
 8008384:	e7a4      	b.n	80082d0 <_strtoull_l.isra.0+0x34>
 8008386:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800838a:	f1bc 0f19 	cmp.w	ip, #25
 800838e:	d801      	bhi.n	8008394 <_strtoull_l.isra.0+0xf8>
 8008390:	3c37      	subs	r4, #55	; 0x37
 8008392:	e7ce      	b.n	8008332 <_strtoull_l.isra.0+0x96>
 8008394:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008398:	f1bc 0f19 	cmp.w	ip, #25
 800839c:	d804      	bhi.n	80083a8 <_strtoull_l.isra.0+0x10c>
 800839e:	3c57      	subs	r4, #87	; 0x57
 80083a0:	e7c7      	b.n	8008332 <_strtoull_l.isra.0+0x96>
 80083a2:	f04f 33ff 	mov.w	r3, #4294967295
 80083a6:	e7e2      	b.n	800836e <_strtoull_l.isra.0+0xd2>
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	da10      	bge.n	80083ce <_strtoull_l.isra.0+0x132>
 80083ac:	2322      	movs	r3, #34	; 0x22
 80083ae:	9a05      	ldr	r2, [sp, #20]
 80083b0:	f04f 34ff 	mov.w	r4, #4294967295
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ba:	e9cd 3400 	strd	r3, r4, [sp]
 80083be:	f1b9 0f00 	cmp.w	r9, #0
 80083c2:	d110      	bne.n	80083e6 <_strtoull_l.isra.0+0x14a>
 80083c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083c8:	b007      	add	sp, #28
 80083ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ce:	b136      	cbz	r6, 80083de <_strtoull_l.isra.0+0x142>
 80083d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083d4:	4249      	negs	r1, r1
 80083d6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 80083da:	e9cd 1200 	strd	r1, r2, [sp]
 80083de:	f1b9 0f00 	cmp.w	r9, #0
 80083e2:	d0ef      	beq.n	80083c4 <_strtoull_l.isra.0+0x128>
 80083e4:	b10b      	cbz	r3, 80083ea <_strtoull_l.isra.0+0x14e>
 80083e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80083ea:	f8c9 8000 	str.w	r8, [r9]
 80083ee:	e7e9      	b.n	80083c4 <_strtoull_l.isra.0+0x128>
 80083f0:	2430      	movs	r4, #48	; 0x30
 80083f2:	2f00      	cmp	r7, #0
 80083f4:	f47f af7c 	bne.w	80082f0 <_strtoull_l.isra.0+0x54>
 80083f8:	2708      	movs	r7, #8
 80083fa:	e779      	b.n	80082f0 <_strtoull_l.isra.0+0x54>
 80083fc:	2c30      	cmp	r4, #48	; 0x30
 80083fe:	f43f af6e 	beq.w	80082de <_strtoull_l.isra.0+0x42>
 8008402:	270a      	movs	r7, #10
 8008404:	e774      	b.n	80082f0 <_strtoull_l.isra.0+0x54>
	...

08008408 <strtoull>:
 8008408:	4b08      	ldr	r3, [pc, #32]	; (800842c <strtoull+0x24>)
 800840a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800840c:	681c      	ldr	r4, [r3, #0]
 800840e:	4d08      	ldr	r5, [pc, #32]	; (8008430 <strtoull+0x28>)
 8008410:	6a23      	ldr	r3, [r4, #32]
 8008412:	2b00      	cmp	r3, #0
 8008414:	bf08      	it	eq
 8008416:	462b      	moveq	r3, r5
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	4613      	mov	r3, r2
 800841c:	460a      	mov	r2, r1
 800841e:	4601      	mov	r1, r0
 8008420:	4620      	mov	r0, r4
 8008422:	f7ff ff3b 	bl	800829c <_strtoull_l.isra.0>
 8008426:	b003      	add	sp, #12
 8008428:	bd30      	pop	{r4, r5, pc}
 800842a:	bf00      	nop
 800842c:	20000190 	.word	0x20000190
 8008430:	200001f4 	.word	0x200001f4

08008434 <__swbuf_r>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	460e      	mov	r6, r1
 8008438:	4614      	mov	r4, r2
 800843a:	4605      	mov	r5, r0
 800843c:	b118      	cbz	r0, 8008446 <__swbuf_r+0x12>
 800843e:	6983      	ldr	r3, [r0, #24]
 8008440:	b90b      	cbnz	r3, 8008446 <__swbuf_r+0x12>
 8008442:	f000 f9bd 	bl	80087c0 <__sinit>
 8008446:	4b21      	ldr	r3, [pc, #132]	; (80084cc <__swbuf_r+0x98>)
 8008448:	429c      	cmp	r4, r3
 800844a:	d12a      	bne.n	80084a2 <__swbuf_r+0x6e>
 800844c:	686c      	ldr	r4, [r5, #4]
 800844e:	69a3      	ldr	r3, [r4, #24]
 8008450:	60a3      	str	r3, [r4, #8]
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	071a      	lsls	r2, r3, #28
 8008456:	d52e      	bpl.n	80084b6 <__swbuf_r+0x82>
 8008458:	6923      	ldr	r3, [r4, #16]
 800845a:	b363      	cbz	r3, 80084b6 <__swbuf_r+0x82>
 800845c:	6923      	ldr	r3, [r4, #16]
 800845e:	6820      	ldr	r0, [r4, #0]
 8008460:	b2f6      	uxtb	r6, r6
 8008462:	1ac0      	subs	r0, r0, r3
 8008464:	6963      	ldr	r3, [r4, #20]
 8008466:	4637      	mov	r7, r6
 8008468:	4283      	cmp	r3, r0
 800846a:	dc04      	bgt.n	8008476 <__swbuf_r+0x42>
 800846c:	4621      	mov	r1, r4
 800846e:	4628      	mov	r0, r5
 8008470:	f000 f93c 	bl	80086ec <_fflush_r>
 8008474:	bb28      	cbnz	r0, 80084c2 <__swbuf_r+0x8e>
 8008476:	68a3      	ldr	r3, [r4, #8]
 8008478:	3001      	adds	r0, #1
 800847a:	3b01      	subs	r3, #1
 800847c:	60a3      	str	r3, [r4, #8]
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	6022      	str	r2, [r4, #0]
 8008484:	701e      	strb	r6, [r3, #0]
 8008486:	6963      	ldr	r3, [r4, #20]
 8008488:	4283      	cmp	r3, r0
 800848a:	d004      	beq.n	8008496 <__swbuf_r+0x62>
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	07db      	lsls	r3, r3, #31
 8008490:	d519      	bpl.n	80084c6 <__swbuf_r+0x92>
 8008492:	2e0a      	cmp	r6, #10
 8008494:	d117      	bne.n	80084c6 <__swbuf_r+0x92>
 8008496:	4621      	mov	r1, r4
 8008498:	4628      	mov	r0, r5
 800849a:	f000 f927 	bl	80086ec <_fflush_r>
 800849e:	b190      	cbz	r0, 80084c6 <__swbuf_r+0x92>
 80084a0:	e00f      	b.n	80084c2 <__swbuf_r+0x8e>
 80084a2:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <__swbuf_r+0x9c>)
 80084a4:	429c      	cmp	r4, r3
 80084a6:	d101      	bne.n	80084ac <__swbuf_r+0x78>
 80084a8:	68ac      	ldr	r4, [r5, #8]
 80084aa:	e7d0      	b.n	800844e <__swbuf_r+0x1a>
 80084ac:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <__swbuf_r+0xa0>)
 80084ae:	429c      	cmp	r4, r3
 80084b0:	bf08      	it	eq
 80084b2:	68ec      	ldreq	r4, [r5, #12]
 80084b4:	e7cb      	b.n	800844e <__swbuf_r+0x1a>
 80084b6:	4621      	mov	r1, r4
 80084b8:	4628      	mov	r0, r5
 80084ba:	f000 f81b 	bl	80084f4 <__swsetup_r>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d0cc      	beq.n	800845c <__swbuf_r+0x28>
 80084c2:	f04f 37ff 	mov.w	r7, #4294967295
 80084c6:	4638      	mov	r0, r7
 80084c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ca:	bf00      	nop
 80084cc:	0800a680 	.word	0x0800a680
 80084d0:	0800a6a0 	.word	0x0800a6a0
 80084d4:	0800a660 	.word	0x0800a660

080084d8 <__ascii_wctomb>:
 80084d8:	b149      	cbz	r1, 80084ee <__ascii_wctomb+0x16>
 80084da:	2aff      	cmp	r2, #255	; 0xff
 80084dc:	bf8b      	itete	hi
 80084de:	238a      	movhi	r3, #138	; 0x8a
 80084e0:	700a      	strbls	r2, [r1, #0]
 80084e2:	6003      	strhi	r3, [r0, #0]
 80084e4:	2001      	movls	r0, #1
 80084e6:	bf88      	it	hi
 80084e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80084ec:	4770      	bx	lr
 80084ee:	4608      	mov	r0, r1
 80084f0:	4770      	bx	lr
	...

080084f4 <__swsetup_r>:
 80084f4:	4b32      	ldr	r3, [pc, #200]	; (80085c0 <__swsetup_r+0xcc>)
 80084f6:	b570      	push	{r4, r5, r6, lr}
 80084f8:	681d      	ldr	r5, [r3, #0]
 80084fa:	4606      	mov	r6, r0
 80084fc:	460c      	mov	r4, r1
 80084fe:	b125      	cbz	r5, 800850a <__swsetup_r+0x16>
 8008500:	69ab      	ldr	r3, [r5, #24]
 8008502:	b913      	cbnz	r3, 800850a <__swsetup_r+0x16>
 8008504:	4628      	mov	r0, r5
 8008506:	f000 f95b 	bl	80087c0 <__sinit>
 800850a:	4b2e      	ldr	r3, [pc, #184]	; (80085c4 <__swsetup_r+0xd0>)
 800850c:	429c      	cmp	r4, r3
 800850e:	d10f      	bne.n	8008530 <__swsetup_r+0x3c>
 8008510:	686c      	ldr	r4, [r5, #4]
 8008512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008516:	b29a      	uxth	r2, r3
 8008518:	0715      	lsls	r5, r2, #28
 800851a:	d42c      	bmi.n	8008576 <__swsetup_r+0x82>
 800851c:	06d0      	lsls	r0, r2, #27
 800851e:	d411      	bmi.n	8008544 <__swsetup_r+0x50>
 8008520:	2209      	movs	r2, #9
 8008522:	6032      	str	r2, [r6, #0]
 8008524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	f04f 30ff 	mov.w	r0, #4294967295
 800852e:	e03e      	b.n	80085ae <__swsetup_r+0xba>
 8008530:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <__swsetup_r+0xd4>)
 8008532:	429c      	cmp	r4, r3
 8008534:	d101      	bne.n	800853a <__swsetup_r+0x46>
 8008536:	68ac      	ldr	r4, [r5, #8]
 8008538:	e7eb      	b.n	8008512 <__swsetup_r+0x1e>
 800853a:	4b24      	ldr	r3, [pc, #144]	; (80085cc <__swsetup_r+0xd8>)
 800853c:	429c      	cmp	r4, r3
 800853e:	bf08      	it	eq
 8008540:	68ec      	ldreq	r4, [r5, #12]
 8008542:	e7e6      	b.n	8008512 <__swsetup_r+0x1e>
 8008544:	0751      	lsls	r1, r2, #29
 8008546:	d512      	bpl.n	800856e <__swsetup_r+0x7a>
 8008548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800854a:	b141      	cbz	r1, 800855e <__swsetup_r+0x6a>
 800854c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008550:	4299      	cmp	r1, r3
 8008552:	d002      	beq.n	800855a <__swsetup_r+0x66>
 8008554:	4630      	mov	r0, r6
 8008556:	f7ff f8d3 	bl	8007700 <_free_r>
 800855a:	2300      	movs	r3, #0
 800855c:	6363      	str	r3, [r4, #52]	; 0x34
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	2300      	movs	r3, #0
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	6923      	ldr	r3, [r4, #16]
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	f043 0308 	orr.w	r3, r3, #8
 8008574:	81a3      	strh	r3, [r4, #12]
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	b94b      	cbnz	r3, 800858e <__swsetup_r+0x9a>
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008584:	d003      	beq.n	800858e <__swsetup_r+0x9a>
 8008586:	4621      	mov	r1, r4
 8008588:	4630      	mov	r0, r6
 800858a:	f000 f9c7 	bl	800891c <__smakebuf_r>
 800858e:	89a2      	ldrh	r2, [r4, #12]
 8008590:	f012 0301 	ands.w	r3, r2, #1
 8008594:	d00c      	beq.n	80085b0 <__swsetup_r+0xbc>
 8008596:	2300      	movs	r3, #0
 8008598:	60a3      	str	r3, [r4, #8]
 800859a:	6963      	ldr	r3, [r4, #20]
 800859c:	425b      	negs	r3, r3
 800859e:	61a3      	str	r3, [r4, #24]
 80085a0:	6923      	ldr	r3, [r4, #16]
 80085a2:	b953      	cbnz	r3, 80085ba <__swsetup_r+0xc6>
 80085a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80085ac:	d1ba      	bne.n	8008524 <__swsetup_r+0x30>
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	0792      	lsls	r2, r2, #30
 80085b2:	bf58      	it	pl
 80085b4:	6963      	ldrpl	r3, [r4, #20]
 80085b6:	60a3      	str	r3, [r4, #8]
 80085b8:	e7f2      	b.n	80085a0 <__swsetup_r+0xac>
 80085ba:	2000      	movs	r0, #0
 80085bc:	e7f7      	b.n	80085ae <__swsetup_r+0xba>
 80085be:	bf00      	nop
 80085c0:	20000190 	.word	0x20000190
 80085c4:	0800a680 	.word	0x0800a680
 80085c8:	0800a6a0 	.word	0x0800a6a0
 80085cc:	0800a660 	.word	0x0800a660

080085d0 <abort>:
 80085d0:	b508      	push	{r3, lr}
 80085d2:	2006      	movs	r0, #6
 80085d4:	f000 fb92 	bl	8008cfc <raise>
 80085d8:	2001      	movs	r0, #1
 80085da:	f7f9 fa7f 	bl	8001adc <_exit>
	...

080085e0 <__sflush_r>:
 80085e0:	898a      	ldrh	r2, [r1, #12]
 80085e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e6:	4605      	mov	r5, r0
 80085e8:	0710      	lsls	r0, r2, #28
 80085ea:	460c      	mov	r4, r1
 80085ec:	d458      	bmi.n	80086a0 <__sflush_r+0xc0>
 80085ee:	684b      	ldr	r3, [r1, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dc05      	bgt.n	8008600 <__sflush_r+0x20>
 80085f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dc02      	bgt.n	8008600 <__sflush_r+0x20>
 80085fa:	2000      	movs	r0, #0
 80085fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008602:	2e00      	cmp	r6, #0
 8008604:	d0f9      	beq.n	80085fa <__sflush_r+0x1a>
 8008606:	2300      	movs	r3, #0
 8008608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800860c:	682f      	ldr	r7, [r5, #0]
 800860e:	6a21      	ldr	r1, [r4, #32]
 8008610:	602b      	str	r3, [r5, #0]
 8008612:	d032      	beq.n	800867a <__sflush_r+0x9a>
 8008614:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	075a      	lsls	r2, r3, #29
 800861a:	d505      	bpl.n	8008628 <__sflush_r+0x48>
 800861c:	6863      	ldr	r3, [r4, #4]
 800861e:	1ac0      	subs	r0, r0, r3
 8008620:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008622:	b10b      	cbz	r3, 8008628 <__sflush_r+0x48>
 8008624:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008626:	1ac0      	subs	r0, r0, r3
 8008628:	2300      	movs	r3, #0
 800862a:	4602      	mov	r2, r0
 800862c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800862e:	6a21      	ldr	r1, [r4, #32]
 8008630:	4628      	mov	r0, r5
 8008632:	47b0      	blx	r6
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	89a3      	ldrh	r3, [r4, #12]
 8008638:	d106      	bne.n	8008648 <__sflush_r+0x68>
 800863a:	6829      	ldr	r1, [r5, #0]
 800863c:	291d      	cmp	r1, #29
 800863e:	d848      	bhi.n	80086d2 <__sflush_r+0xf2>
 8008640:	4a29      	ldr	r2, [pc, #164]	; (80086e8 <__sflush_r+0x108>)
 8008642:	40ca      	lsrs	r2, r1
 8008644:	07d6      	lsls	r6, r2, #31
 8008646:	d544      	bpl.n	80086d2 <__sflush_r+0xf2>
 8008648:	2200      	movs	r2, #0
 800864a:	6062      	str	r2, [r4, #4]
 800864c:	6922      	ldr	r2, [r4, #16]
 800864e:	04d9      	lsls	r1, r3, #19
 8008650:	6022      	str	r2, [r4, #0]
 8008652:	d504      	bpl.n	800865e <__sflush_r+0x7e>
 8008654:	1c42      	adds	r2, r0, #1
 8008656:	d101      	bne.n	800865c <__sflush_r+0x7c>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	b903      	cbnz	r3, 800865e <__sflush_r+0x7e>
 800865c:	6560      	str	r0, [r4, #84]	; 0x54
 800865e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008660:	602f      	str	r7, [r5, #0]
 8008662:	2900      	cmp	r1, #0
 8008664:	d0c9      	beq.n	80085fa <__sflush_r+0x1a>
 8008666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800866a:	4299      	cmp	r1, r3
 800866c:	d002      	beq.n	8008674 <__sflush_r+0x94>
 800866e:	4628      	mov	r0, r5
 8008670:	f7ff f846 	bl	8007700 <_free_r>
 8008674:	2000      	movs	r0, #0
 8008676:	6360      	str	r0, [r4, #52]	; 0x34
 8008678:	e7c0      	b.n	80085fc <__sflush_r+0x1c>
 800867a:	2301      	movs	r3, #1
 800867c:	4628      	mov	r0, r5
 800867e:	47b0      	blx	r6
 8008680:	1c41      	adds	r1, r0, #1
 8008682:	d1c8      	bne.n	8008616 <__sflush_r+0x36>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0c5      	beq.n	8008616 <__sflush_r+0x36>
 800868a:	2b1d      	cmp	r3, #29
 800868c:	d001      	beq.n	8008692 <__sflush_r+0xb2>
 800868e:	2b16      	cmp	r3, #22
 8008690:	d101      	bne.n	8008696 <__sflush_r+0xb6>
 8008692:	602f      	str	r7, [r5, #0]
 8008694:	e7b1      	b.n	80085fa <__sflush_r+0x1a>
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869c:	81a3      	strh	r3, [r4, #12]
 800869e:	e7ad      	b.n	80085fc <__sflush_r+0x1c>
 80086a0:	690f      	ldr	r7, [r1, #16]
 80086a2:	2f00      	cmp	r7, #0
 80086a4:	d0a9      	beq.n	80085fa <__sflush_r+0x1a>
 80086a6:	0793      	lsls	r3, r2, #30
 80086a8:	bf18      	it	ne
 80086aa:	2300      	movne	r3, #0
 80086ac:	680e      	ldr	r6, [r1, #0]
 80086ae:	bf08      	it	eq
 80086b0:	694b      	ldreq	r3, [r1, #20]
 80086b2:	eba6 0807 	sub.w	r8, r6, r7
 80086b6:	600f      	str	r7, [r1, #0]
 80086b8:	608b      	str	r3, [r1, #8]
 80086ba:	f1b8 0f00 	cmp.w	r8, #0
 80086be:	dd9c      	ble.n	80085fa <__sflush_r+0x1a>
 80086c0:	4643      	mov	r3, r8
 80086c2:	463a      	mov	r2, r7
 80086c4:	6a21      	ldr	r1, [r4, #32]
 80086c6:	4628      	mov	r0, r5
 80086c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086ca:	47b0      	blx	r6
 80086cc:	2800      	cmp	r0, #0
 80086ce:	dc06      	bgt.n	80086de <__sflush_r+0xfe>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d6:	81a3      	strh	r3, [r4, #12]
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	e78e      	b.n	80085fc <__sflush_r+0x1c>
 80086de:	4407      	add	r7, r0
 80086e0:	eba8 0800 	sub.w	r8, r8, r0
 80086e4:	e7e9      	b.n	80086ba <__sflush_r+0xda>
 80086e6:	bf00      	nop
 80086e8:	20400001 	.word	0x20400001

080086ec <_fflush_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	690b      	ldr	r3, [r1, #16]
 80086f0:	4605      	mov	r5, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	b1db      	cbz	r3, 800872e <_fflush_r+0x42>
 80086f6:	b118      	cbz	r0, 8008700 <_fflush_r+0x14>
 80086f8:	6983      	ldr	r3, [r0, #24]
 80086fa:	b90b      	cbnz	r3, 8008700 <_fflush_r+0x14>
 80086fc:	f000 f860 	bl	80087c0 <__sinit>
 8008700:	4b0c      	ldr	r3, [pc, #48]	; (8008734 <_fflush_r+0x48>)
 8008702:	429c      	cmp	r4, r3
 8008704:	d109      	bne.n	800871a <_fflush_r+0x2e>
 8008706:	686c      	ldr	r4, [r5, #4]
 8008708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800870c:	b17b      	cbz	r3, 800872e <_fflush_r+0x42>
 800870e:	4621      	mov	r1, r4
 8008710:	4628      	mov	r0, r5
 8008712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008716:	f7ff bf63 	b.w	80085e0 <__sflush_r>
 800871a:	4b07      	ldr	r3, [pc, #28]	; (8008738 <_fflush_r+0x4c>)
 800871c:	429c      	cmp	r4, r3
 800871e:	d101      	bne.n	8008724 <_fflush_r+0x38>
 8008720:	68ac      	ldr	r4, [r5, #8]
 8008722:	e7f1      	b.n	8008708 <_fflush_r+0x1c>
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <_fflush_r+0x50>)
 8008726:	429c      	cmp	r4, r3
 8008728:	bf08      	it	eq
 800872a:	68ec      	ldreq	r4, [r5, #12]
 800872c:	e7ec      	b.n	8008708 <_fflush_r+0x1c>
 800872e:	2000      	movs	r0, #0
 8008730:	bd38      	pop	{r3, r4, r5, pc}
 8008732:	bf00      	nop
 8008734:	0800a680 	.word	0x0800a680
 8008738:	0800a6a0 	.word	0x0800a6a0
 800873c:	0800a660 	.word	0x0800a660

08008740 <std>:
 8008740:	2300      	movs	r3, #0
 8008742:	b510      	push	{r4, lr}
 8008744:	4604      	mov	r4, r0
 8008746:	e9c0 3300 	strd	r3, r3, [r0]
 800874a:	6083      	str	r3, [r0, #8]
 800874c:	8181      	strh	r1, [r0, #12]
 800874e:	6643      	str	r3, [r0, #100]	; 0x64
 8008750:	81c2      	strh	r2, [r0, #14]
 8008752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008756:	6183      	str	r3, [r0, #24]
 8008758:	4619      	mov	r1, r3
 800875a:	2208      	movs	r2, #8
 800875c:	305c      	adds	r0, #92	; 0x5c
 800875e:	f7fe ffc7 	bl	80076f0 <memset>
 8008762:	4b05      	ldr	r3, [pc, #20]	; (8008778 <std+0x38>)
 8008764:	6224      	str	r4, [r4, #32]
 8008766:	6263      	str	r3, [r4, #36]	; 0x24
 8008768:	4b04      	ldr	r3, [pc, #16]	; (800877c <std+0x3c>)
 800876a:	62a3      	str	r3, [r4, #40]	; 0x28
 800876c:	4b04      	ldr	r3, [pc, #16]	; (8008780 <std+0x40>)
 800876e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008770:	4b04      	ldr	r3, [pc, #16]	; (8008784 <std+0x44>)
 8008772:	6323      	str	r3, [r4, #48]	; 0x30
 8008774:	bd10      	pop	{r4, pc}
 8008776:	bf00      	nop
 8008778:	08008d35 	.word	0x08008d35
 800877c:	08008d57 	.word	0x08008d57
 8008780:	08008d8f 	.word	0x08008d8f
 8008784:	08008db3 	.word	0x08008db3

08008788 <_cleanup_r>:
 8008788:	4901      	ldr	r1, [pc, #4]	; (8008790 <_cleanup_r+0x8>)
 800878a:	f000 b885 	b.w	8008898 <_fwalk_reent>
 800878e:	bf00      	nop
 8008790:	080086ed 	.word	0x080086ed

08008794 <__sfmoreglue>:
 8008794:	b570      	push	{r4, r5, r6, lr}
 8008796:	2568      	movs	r5, #104	; 0x68
 8008798:	1e4a      	subs	r2, r1, #1
 800879a:	4355      	muls	r5, r2
 800879c:	460e      	mov	r6, r1
 800879e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087a2:	f7fe fff9 	bl	8007798 <_malloc_r>
 80087a6:	4604      	mov	r4, r0
 80087a8:	b140      	cbz	r0, 80087bc <__sfmoreglue+0x28>
 80087aa:	2100      	movs	r1, #0
 80087ac:	e9c0 1600 	strd	r1, r6, [r0]
 80087b0:	300c      	adds	r0, #12
 80087b2:	60a0      	str	r0, [r4, #8]
 80087b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087b8:	f7fe ff9a 	bl	80076f0 <memset>
 80087bc:	4620      	mov	r0, r4
 80087be:	bd70      	pop	{r4, r5, r6, pc}

080087c0 <__sinit>:
 80087c0:	6983      	ldr	r3, [r0, #24]
 80087c2:	b510      	push	{r4, lr}
 80087c4:	4604      	mov	r4, r0
 80087c6:	bb33      	cbnz	r3, 8008816 <__sinit+0x56>
 80087c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80087cc:	6503      	str	r3, [r0, #80]	; 0x50
 80087ce:	4b12      	ldr	r3, [pc, #72]	; (8008818 <__sinit+0x58>)
 80087d0:	4a12      	ldr	r2, [pc, #72]	; (800881c <__sinit+0x5c>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6282      	str	r2, [r0, #40]	; 0x28
 80087d6:	4298      	cmp	r0, r3
 80087d8:	bf04      	itt	eq
 80087da:	2301      	moveq	r3, #1
 80087dc:	6183      	streq	r3, [r0, #24]
 80087de:	f000 f81f 	bl	8008820 <__sfp>
 80087e2:	6060      	str	r0, [r4, #4]
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 f81b 	bl	8008820 <__sfp>
 80087ea:	60a0      	str	r0, [r4, #8]
 80087ec:	4620      	mov	r0, r4
 80087ee:	f000 f817 	bl	8008820 <__sfp>
 80087f2:	2200      	movs	r2, #0
 80087f4:	60e0      	str	r0, [r4, #12]
 80087f6:	2104      	movs	r1, #4
 80087f8:	6860      	ldr	r0, [r4, #4]
 80087fa:	f7ff ffa1 	bl	8008740 <std>
 80087fe:	2201      	movs	r2, #1
 8008800:	2109      	movs	r1, #9
 8008802:	68a0      	ldr	r0, [r4, #8]
 8008804:	f7ff ff9c 	bl	8008740 <std>
 8008808:	2202      	movs	r2, #2
 800880a:	2112      	movs	r1, #18
 800880c:	68e0      	ldr	r0, [r4, #12]
 800880e:	f7ff ff97 	bl	8008740 <std>
 8008812:	2301      	movs	r3, #1
 8008814:	61a3      	str	r3, [r4, #24]
 8008816:	bd10      	pop	{r4, pc}
 8008818:	0800a530 	.word	0x0800a530
 800881c:	08008789 	.word	0x08008789

08008820 <__sfp>:
 8008820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008822:	4b1b      	ldr	r3, [pc, #108]	; (8008890 <__sfp+0x70>)
 8008824:	4607      	mov	r7, r0
 8008826:	681e      	ldr	r6, [r3, #0]
 8008828:	69b3      	ldr	r3, [r6, #24]
 800882a:	b913      	cbnz	r3, 8008832 <__sfp+0x12>
 800882c:	4630      	mov	r0, r6
 800882e:	f7ff ffc7 	bl	80087c0 <__sinit>
 8008832:	3648      	adds	r6, #72	; 0x48
 8008834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008838:	3b01      	subs	r3, #1
 800883a:	d503      	bpl.n	8008844 <__sfp+0x24>
 800883c:	6833      	ldr	r3, [r6, #0]
 800883e:	b133      	cbz	r3, 800884e <__sfp+0x2e>
 8008840:	6836      	ldr	r6, [r6, #0]
 8008842:	e7f7      	b.n	8008834 <__sfp+0x14>
 8008844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008848:	b16d      	cbz	r5, 8008866 <__sfp+0x46>
 800884a:	3468      	adds	r4, #104	; 0x68
 800884c:	e7f4      	b.n	8008838 <__sfp+0x18>
 800884e:	2104      	movs	r1, #4
 8008850:	4638      	mov	r0, r7
 8008852:	f7ff ff9f 	bl	8008794 <__sfmoreglue>
 8008856:	6030      	str	r0, [r6, #0]
 8008858:	2800      	cmp	r0, #0
 800885a:	d1f1      	bne.n	8008840 <__sfp+0x20>
 800885c:	230c      	movs	r3, #12
 800885e:	4604      	mov	r4, r0
 8008860:	603b      	str	r3, [r7, #0]
 8008862:	4620      	mov	r0, r4
 8008864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008866:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <__sfp+0x74>)
 8008868:	6665      	str	r5, [r4, #100]	; 0x64
 800886a:	e9c4 5500 	strd	r5, r5, [r4]
 800886e:	60a5      	str	r5, [r4, #8]
 8008870:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008874:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008878:	2208      	movs	r2, #8
 800887a:	4629      	mov	r1, r5
 800887c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008880:	f7fe ff36 	bl	80076f0 <memset>
 8008884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800888c:	e7e9      	b.n	8008862 <__sfp+0x42>
 800888e:	bf00      	nop
 8008890:	0800a530 	.word	0x0800a530
 8008894:	ffff0001 	.word	0xffff0001

08008898 <_fwalk_reent>:
 8008898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800889c:	4680      	mov	r8, r0
 800889e:	4689      	mov	r9, r1
 80088a0:	2600      	movs	r6, #0
 80088a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088a6:	b914      	cbnz	r4, 80088ae <_fwalk_reent+0x16>
 80088a8:	4630      	mov	r0, r6
 80088aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80088b2:	3f01      	subs	r7, #1
 80088b4:	d501      	bpl.n	80088ba <_fwalk_reent+0x22>
 80088b6:	6824      	ldr	r4, [r4, #0]
 80088b8:	e7f5      	b.n	80088a6 <_fwalk_reent+0xe>
 80088ba:	89ab      	ldrh	r3, [r5, #12]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d907      	bls.n	80088d0 <_fwalk_reent+0x38>
 80088c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088c4:	3301      	adds	r3, #1
 80088c6:	d003      	beq.n	80088d0 <_fwalk_reent+0x38>
 80088c8:	4629      	mov	r1, r5
 80088ca:	4640      	mov	r0, r8
 80088cc:	47c8      	blx	r9
 80088ce:	4306      	orrs	r6, r0
 80088d0:	3568      	adds	r5, #104	; 0x68
 80088d2:	e7ee      	b.n	80088b2 <_fwalk_reent+0x1a>

080088d4 <__swhatbuf_r>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	460e      	mov	r6, r1
 80088d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088dc:	b096      	sub	sp, #88	; 0x58
 80088de:	2900      	cmp	r1, #0
 80088e0:	4614      	mov	r4, r2
 80088e2:	461d      	mov	r5, r3
 80088e4:	da07      	bge.n	80088f6 <__swhatbuf_r+0x22>
 80088e6:	2300      	movs	r3, #0
 80088e8:	602b      	str	r3, [r5, #0]
 80088ea:	89b3      	ldrh	r3, [r6, #12]
 80088ec:	061a      	lsls	r2, r3, #24
 80088ee:	d410      	bmi.n	8008912 <__swhatbuf_r+0x3e>
 80088f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088f4:	e00e      	b.n	8008914 <__swhatbuf_r+0x40>
 80088f6:	466a      	mov	r2, sp
 80088f8:	f000 fa82 	bl	8008e00 <_fstat_r>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	dbf2      	blt.n	80088e6 <__swhatbuf_r+0x12>
 8008900:	9a01      	ldr	r2, [sp, #4]
 8008902:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008906:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800890a:	425a      	negs	r2, r3
 800890c:	415a      	adcs	r2, r3
 800890e:	602a      	str	r2, [r5, #0]
 8008910:	e7ee      	b.n	80088f0 <__swhatbuf_r+0x1c>
 8008912:	2340      	movs	r3, #64	; 0x40
 8008914:	2000      	movs	r0, #0
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	b016      	add	sp, #88	; 0x58
 800891a:	bd70      	pop	{r4, r5, r6, pc}

0800891c <__smakebuf_r>:
 800891c:	898b      	ldrh	r3, [r1, #12]
 800891e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008920:	079d      	lsls	r5, r3, #30
 8008922:	4606      	mov	r6, r0
 8008924:	460c      	mov	r4, r1
 8008926:	d507      	bpl.n	8008938 <__smakebuf_r+0x1c>
 8008928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	6123      	str	r3, [r4, #16]
 8008930:	2301      	movs	r3, #1
 8008932:	6163      	str	r3, [r4, #20]
 8008934:	b002      	add	sp, #8
 8008936:	bd70      	pop	{r4, r5, r6, pc}
 8008938:	ab01      	add	r3, sp, #4
 800893a:	466a      	mov	r2, sp
 800893c:	f7ff ffca 	bl	80088d4 <__swhatbuf_r>
 8008940:	9900      	ldr	r1, [sp, #0]
 8008942:	4605      	mov	r5, r0
 8008944:	4630      	mov	r0, r6
 8008946:	f7fe ff27 	bl	8007798 <_malloc_r>
 800894a:	b948      	cbnz	r0, 8008960 <__smakebuf_r+0x44>
 800894c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008950:	059a      	lsls	r2, r3, #22
 8008952:	d4ef      	bmi.n	8008934 <__smakebuf_r+0x18>
 8008954:	f023 0303 	bic.w	r3, r3, #3
 8008958:	f043 0302 	orr.w	r3, r3, #2
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	e7e3      	b.n	8008928 <__smakebuf_r+0xc>
 8008960:	4b0d      	ldr	r3, [pc, #52]	; (8008998 <__smakebuf_r+0x7c>)
 8008962:	62b3      	str	r3, [r6, #40]	; 0x28
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	6020      	str	r0, [r4, #0]
 8008968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800896c:	81a3      	strh	r3, [r4, #12]
 800896e:	9b00      	ldr	r3, [sp, #0]
 8008970:	6120      	str	r0, [r4, #16]
 8008972:	6163      	str	r3, [r4, #20]
 8008974:	9b01      	ldr	r3, [sp, #4]
 8008976:	b15b      	cbz	r3, 8008990 <__smakebuf_r+0x74>
 8008978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800897c:	4630      	mov	r0, r6
 800897e:	f000 fa51 	bl	8008e24 <_isatty_r>
 8008982:	b128      	cbz	r0, 8008990 <__smakebuf_r+0x74>
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	f023 0303 	bic.w	r3, r3, #3
 800898a:	f043 0301 	orr.w	r3, r3, #1
 800898e:	81a3      	strh	r3, [r4, #12]
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	431d      	orrs	r5, r3
 8008994:	81a5      	strh	r5, [r4, #12]
 8008996:	e7cd      	b.n	8008934 <__smakebuf_r+0x18>
 8008998:	08008789 	.word	0x08008789

0800899c <memchr>:
 800899c:	b510      	push	{r4, lr}
 800899e:	b2c9      	uxtb	r1, r1
 80089a0:	4402      	add	r2, r0
 80089a2:	4290      	cmp	r0, r2
 80089a4:	4603      	mov	r3, r0
 80089a6:	d101      	bne.n	80089ac <memchr+0x10>
 80089a8:	2300      	movs	r3, #0
 80089aa:	e003      	b.n	80089b4 <memchr+0x18>
 80089ac:	781c      	ldrb	r4, [r3, #0]
 80089ae:	3001      	adds	r0, #1
 80089b0:	428c      	cmp	r4, r1
 80089b2:	d1f6      	bne.n	80089a2 <memchr+0x6>
 80089b4:	4618      	mov	r0, r3
 80089b6:	bd10      	pop	{r4, pc}

080089b8 <__malloc_lock>:
 80089b8:	4770      	bx	lr

080089ba <__malloc_unlock>:
 80089ba:	4770      	bx	lr

080089bc <_realloc_r>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	4607      	mov	r7, r0
 80089c0:	4614      	mov	r4, r2
 80089c2:	460e      	mov	r6, r1
 80089c4:	b921      	cbnz	r1, 80089d0 <_realloc_r+0x14>
 80089c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089ca:	4611      	mov	r1, r2
 80089cc:	f7fe bee4 	b.w	8007798 <_malloc_r>
 80089d0:	b922      	cbnz	r2, 80089dc <_realloc_r+0x20>
 80089d2:	f7fe fe95 	bl	8007700 <_free_r>
 80089d6:	4625      	mov	r5, r4
 80089d8:	4628      	mov	r0, r5
 80089da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089dc:	f000 fa44 	bl	8008e68 <_malloc_usable_size_r>
 80089e0:	42a0      	cmp	r0, r4
 80089e2:	d20f      	bcs.n	8008a04 <_realloc_r+0x48>
 80089e4:	4621      	mov	r1, r4
 80089e6:	4638      	mov	r0, r7
 80089e8:	f7fe fed6 	bl	8007798 <_malloc_r>
 80089ec:	4605      	mov	r5, r0
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d0f2      	beq.n	80089d8 <_realloc_r+0x1c>
 80089f2:	4631      	mov	r1, r6
 80089f4:	4622      	mov	r2, r4
 80089f6:	f7fe fe57 	bl	80076a8 <memcpy>
 80089fa:	4631      	mov	r1, r6
 80089fc:	4638      	mov	r0, r7
 80089fe:	f7fe fe7f 	bl	8007700 <_free_r>
 8008a02:	e7e9      	b.n	80089d8 <_realloc_r+0x1c>
 8008a04:	4635      	mov	r5, r6
 8008a06:	e7e7      	b.n	80089d8 <_realloc_r+0x1c>

08008a08 <__ssputs_r>:
 8008a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a0c:	688e      	ldr	r6, [r1, #8]
 8008a0e:	4682      	mov	sl, r0
 8008a10:	429e      	cmp	r6, r3
 8008a12:	460c      	mov	r4, r1
 8008a14:	4690      	mov	r8, r2
 8008a16:	4699      	mov	r9, r3
 8008a18:	d837      	bhi.n	8008a8a <__ssputs_r+0x82>
 8008a1a:	898a      	ldrh	r2, [r1, #12]
 8008a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a20:	d031      	beq.n	8008a86 <__ssputs_r+0x7e>
 8008a22:	2302      	movs	r3, #2
 8008a24:	6825      	ldr	r5, [r4, #0]
 8008a26:	6909      	ldr	r1, [r1, #16]
 8008a28:	1a6f      	subs	r7, r5, r1
 8008a2a:	6965      	ldr	r5, [r4, #20]
 8008a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a30:	fb95 f5f3 	sdiv	r5, r5, r3
 8008a34:	f109 0301 	add.w	r3, r9, #1
 8008a38:	443b      	add	r3, r7
 8008a3a:	429d      	cmp	r5, r3
 8008a3c:	bf38      	it	cc
 8008a3e:	461d      	movcc	r5, r3
 8008a40:	0553      	lsls	r3, r2, #21
 8008a42:	d530      	bpl.n	8008aa6 <__ssputs_r+0x9e>
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7fe fea7 	bl	8007798 <_malloc_r>
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	b950      	cbnz	r0, 8008a64 <__ssputs_r+0x5c>
 8008a4e:	230c      	movs	r3, #12
 8008a50:	f04f 30ff 	mov.w	r0, #4294967295
 8008a54:	f8ca 3000 	str.w	r3, [sl]
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a64:	463a      	mov	r2, r7
 8008a66:	6921      	ldr	r1, [r4, #16]
 8008a68:	f7fe fe1e 	bl	80076a8 <memcpy>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	6126      	str	r6, [r4, #16]
 8008a7a:	443e      	add	r6, r7
 8008a7c:	6026      	str	r6, [r4, #0]
 8008a7e:	464e      	mov	r6, r9
 8008a80:	6165      	str	r5, [r4, #20]
 8008a82:	1bed      	subs	r5, r5, r7
 8008a84:	60a5      	str	r5, [r4, #8]
 8008a86:	454e      	cmp	r6, r9
 8008a88:	d900      	bls.n	8008a8c <__ssputs_r+0x84>
 8008a8a:	464e      	mov	r6, r9
 8008a8c:	4632      	mov	r2, r6
 8008a8e:	4641      	mov	r1, r8
 8008a90:	6820      	ldr	r0, [r4, #0]
 8008a92:	f7fe fe14 	bl	80076be <memmove>
 8008a96:	68a3      	ldr	r3, [r4, #8]
 8008a98:	2000      	movs	r0, #0
 8008a9a:	1b9b      	subs	r3, r3, r6
 8008a9c:	60a3      	str	r3, [r4, #8]
 8008a9e:	6823      	ldr	r3, [r4, #0]
 8008aa0:	441e      	add	r6, r3
 8008aa2:	6026      	str	r6, [r4, #0]
 8008aa4:	e7dc      	b.n	8008a60 <__ssputs_r+0x58>
 8008aa6:	462a      	mov	r2, r5
 8008aa8:	f7ff ff88 	bl	80089bc <_realloc_r>
 8008aac:	4606      	mov	r6, r0
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d1e2      	bne.n	8008a78 <__ssputs_r+0x70>
 8008ab2:	6921      	ldr	r1, [r4, #16]
 8008ab4:	4650      	mov	r0, sl
 8008ab6:	f7fe fe23 	bl	8007700 <_free_r>
 8008aba:	e7c8      	b.n	8008a4e <__ssputs_r+0x46>

08008abc <_svfiprintf_r>:
 8008abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac0:	461d      	mov	r5, r3
 8008ac2:	898b      	ldrh	r3, [r1, #12]
 8008ac4:	b09d      	sub	sp, #116	; 0x74
 8008ac6:	061f      	lsls	r7, r3, #24
 8008ac8:	4680      	mov	r8, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	4616      	mov	r6, r2
 8008ace:	d50f      	bpl.n	8008af0 <_svfiprintf_r+0x34>
 8008ad0:	690b      	ldr	r3, [r1, #16]
 8008ad2:	b96b      	cbnz	r3, 8008af0 <_svfiprintf_r+0x34>
 8008ad4:	2140      	movs	r1, #64	; 0x40
 8008ad6:	f7fe fe5f 	bl	8007798 <_malloc_r>
 8008ada:	6020      	str	r0, [r4, #0]
 8008adc:	6120      	str	r0, [r4, #16]
 8008ade:	b928      	cbnz	r0, 8008aec <_svfiprintf_r+0x30>
 8008ae0:	230c      	movs	r3, #12
 8008ae2:	f8c8 3000 	str.w	r3, [r8]
 8008ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aea:	e0c8      	b.n	8008c7e <_svfiprintf_r+0x1c2>
 8008aec:	2340      	movs	r3, #64	; 0x40
 8008aee:	6163      	str	r3, [r4, #20]
 8008af0:	2300      	movs	r3, #0
 8008af2:	9309      	str	r3, [sp, #36]	; 0x24
 8008af4:	2320      	movs	r3, #32
 8008af6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008afa:	2330      	movs	r3, #48	; 0x30
 8008afc:	f04f 0b01 	mov.w	fp, #1
 8008b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b04:	9503      	str	r5, [sp, #12]
 8008b06:	4637      	mov	r7, r6
 8008b08:	463d      	mov	r5, r7
 8008b0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b0e:	b10b      	cbz	r3, 8008b14 <_svfiprintf_r+0x58>
 8008b10:	2b25      	cmp	r3, #37	; 0x25
 8008b12:	d13e      	bne.n	8008b92 <_svfiprintf_r+0xd6>
 8008b14:	ebb7 0a06 	subs.w	sl, r7, r6
 8008b18:	d00b      	beq.n	8008b32 <_svfiprintf_r+0x76>
 8008b1a:	4653      	mov	r3, sl
 8008b1c:	4632      	mov	r2, r6
 8008b1e:	4621      	mov	r1, r4
 8008b20:	4640      	mov	r0, r8
 8008b22:	f7ff ff71 	bl	8008a08 <__ssputs_r>
 8008b26:	3001      	adds	r0, #1
 8008b28:	f000 80a4 	beq.w	8008c74 <_svfiprintf_r+0x1b8>
 8008b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2e:	4453      	add	r3, sl
 8008b30:	9309      	str	r3, [sp, #36]	; 0x24
 8008b32:	783b      	ldrb	r3, [r7, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 809d 	beq.w	8008c74 <_svfiprintf_r+0x1b8>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b44:	9304      	str	r3, [sp, #16]
 8008b46:	9307      	str	r3, [sp, #28]
 8008b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b4e:	462f      	mov	r7, r5
 8008b50:	2205      	movs	r2, #5
 8008b52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008b56:	4850      	ldr	r0, [pc, #320]	; (8008c98 <_svfiprintf_r+0x1dc>)
 8008b58:	f7ff ff20 	bl	800899c <memchr>
 8008b5c:	9b04      	ldr	r3, [sp, #16]
 8008b5e:	b9d0      	cbnz	r0, 8008b96 <_svfiprintf_r+0xda>
 8008b60:	06d9      	lsls	r1, r3, #27
 8008b62:	bf44      	itt	mi
 8008b64:	2220      	movmi	r2, #32
 8008b66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b6a:	071a      	lsls	r2, r3, #28
 8008b6c:	bf44      	itt	mi
 8008b6e:	222b      	movmi	r2, #43	; 0x2b
 8008b70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b74:	782a      	ldrb	r2, [r5, #0]
 8008b76:	2a2a      	cmp	r2, #42	; 0x2a
 8008b78:	d015      	beq.n	8008ba6 <_svfiprintf_r+0xea>
 8008b7a:	462f      	mov	r7, r5
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	250a      	movs	r5, #10
 8008b80:	9a07      	ldr	r2, [sp, #28]
 8008b82:	4639      	mov	r1, r7
 8008b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b88:	3b30      	subs	r3, #48	; 0x30
 8008b8a:	2b09      	cmp	r3, #9
 8008b8c:	d94d      	bls.n	8008c2a <_svfiprintf_r+0x16e>
 8008b8e:	b1b8      	cbz	r0, 8008bc0 <_svfiprintf_r+0x104>
 8008b90:	e00f      	b.n	8008bb2 <_svfiprintf_r+0xf6>
 8008b92:	462f      	mov	r7, r5
 8008b94:	e7b8      	b.n	8008b08 <_svfiprintf_r+0x4c>
 8008b96:	4a40      	ldr	r2, [pc, #256]	; (8008c98 <_svfiprintf_r+0x1dc>)
 8008b98:	463d      	mov	r5, r7
 8008b9a:	1a80      	subs	r0, r0, r2
 8008b9c:	fa0b f000 	lsl.w	r0, fp, r0
 8008ba0:	4318      	orrs	r0, r3
 8008ba2:	9004      	str	r0, [sp, #16]
 8008ba4:	e7d3      	b.n	8008b4e <_svfiprintf_r+0x92>
 8008ba6:	9a03      	ldr	r2, [sp, #12]
 8008ba8:	1d11      	adds	r1, r2, #4
 8008baa:	6812      	ldr	r2, [r2, #0]
 8008bac:	9103      	str	r1, [sp, #12]
 8008bae:	2a00      	cmp	r2, #0
 8008bb0:	db01      	blt.n	8008bb6 <_svfiprintf_r+0xfa>
 8008bb2:	9207      	str	r2, [sp, #28]
 8008bb4:	e004      	b.n	8008bc0 <_svfiprintf_r+0x104>
 8008bb6:	4252      	negs	r2, r2
 8008bb8:	f043 0302 	orr.w	r3, r3, #2
 8008bbc:	9207      	str	r2, [sp, #28]
 8008bbe:	9304      	str	r3, [sp, #16]
 8008bc0:	783b      	ldrb	r3, [r7, #0]
 8008bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8008bc4:	d10c      	bne.n	8008be0 <_svfiprintf_r+0x124>
 8008bc6:	787b      	ldrb	r3, [r7, #1]
 8008bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bca:	d133      	bne.n	8008c34 <_svfiprintf_r+0x178>
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	3702      	adds	r7, #2
 8008bd0:	1d1a      	adds	r2, r3, #4
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	9203      	str	r2, [sp, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	bfb8      	it	lt
 8008bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bde:	9305      	str	r3, [sp, #20]
 8008be0:	4d2e      	ldr	r5, [pc, #184]	; (8008c9c <_svfiprintf_r+0x1e0>)
 8008be2:	2203      	movs	r2, #3
 8008be4:	7839      	ldrb	r1, [r7, #0]
 8008be6:	4628      	mov	r0, r5
 8008be8:	f7ff fed8 	bl	800899c <memchr>
 8008bec:	b138      	cbz	r0, 8008bfe <_svfiprintf_r+0x142>
 8008bee:	2340      	movs	r3, #64	; 0x40
 8008bf0:	1b40      	subs	r0, r0, r5
 8008bf2:	fa03 f000 	lsl.w	r0, r3, r0
 8008bf6:	9b04      	ldr	r3, [sp, #16]
 8008bf8:	3701      	adds	r7, #1
 8008bfa:	4303      	orrs	r3, r0
 8008bfc:	9304      	str	r3, [sp, #16]
 8008bfe:	7839      	ldrb	r1, [r7, #0]
 8008c00:	2206      	movs	r2, #6
 8008c02:	4827      	ldr	r0, [pc, #156]	; (8008ca0 <_svfiprintf_r+0x1e4>)
 8008c04:	1c7e      	adds	r6, r7, #1
 8008c06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c0a:	f7ff fec7 	bl	800899c <memchr>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d038      	beq.n	8008c84 <_svfiprintf_r+0x1c8>
 8008c12:	4b24      	ldr	r3, [pc, #144]	; (8008ca4 <_svfiprintf_r+0x1e8>)
 8008c14:	bb13      	cbnz	r3, 8008c5c <_svfiprintf_r+0x1a0>
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	3307      	adds	r3, #7
 8008c1a:	f023 0307 	bic.w	r3, r3, #7
 8008c1e:	3308      	adds	r3, #8
 8008c20:	9303      	str	r3, [sp, #12]
 8008c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c24:	444b      	add	r3, r9
 8008c26:	9309      	str	r3, [sp, #36]	; 0x24
 8008c28:	e76d      	b.n	8008b06 <_svfiprintf_r+0x4a>
 8008c2a:	fb05 3202 	mla	r2, r5, r2, r3
 8008c2e:	2001      	movs	r0, #1
 8008c30:	460f      	mov	r7, r1
 8008c32:	e7a6      	b.n	8008b82 <_svfiprintf_r+0xc6>
 8008c34:	2300      	movs	r3, #0
 8008c36:	250a      	movs	r5, #10
 8008c38:	4619      	mov	r1, r3
 8008c3a:	3701      	adds	r7, #1
 8008c3c:	9305      	str	r3, [sp, #20]
 8008c3e:	4638      	mov	r0, r7
 8008c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c44:	3a30      	subs	r2, #48	; 0x30
 8008c46:	2a09      	cmp	r2, #9
 8008c48:	d903      	bls.n	8008c52 <_svfiprintf_r+0x196>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d0c8      	beq.n	8008be0 <_svfiprintf_r+0x124>
 8008c4e:	9105      	str	r1, [sp, #20]
 8008c50:	e7c6      	b.n	8008be0 <_svfiprintf_r+0x124>
 8008c52:	fb05 2101 	mla	r1, r5, r1, r2
 8008c56:	2301      	movs	r3, #1
 8008c58:	4607      	mov	r7, r0
 8008c5a:	e7f0      	b.n	8008c3e <_svfiprintf_r+0x182>
 8008c5c:	ab03      	add	r3, sp, #12
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	4622      	mov	r2, r4
 8008c62:	4b11      	ldr	r3, [pc, #68]	; (8008ca8 <_svfiprintf_r+0x1ec>)
 8008c64:	a904      	add	r1, sp, #16
 8008c66:	4640      	mov	r0, r8
 8008c68:	f3af 8000 	nop.w
 8008c6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008c70:	4681      	mov	r9, r0
 8008c72:	d1d6      	bne.n	8008c22 <_svfiprintf_r+0x166>
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	065b      	lsls	r3, r3, #25
 8008c78:	f53f af35 	bmi.w	8008ae6 <_svfiprintf_r+0x2a>
 8008c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c7e:	b01d      	add	sp, #116	; 0x74
 8008c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c84:	ab03      	add	r3, sp, #12
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	4622      	mov	r2, r4
 8008c8a:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <_svfiprintf_r+0x1ec>)
 8008c8c:	a904      	add	r1, sp, #16
 8008c8e:	4640      	mov	r0, r8
 8008c90:	f7fe ff90 	bl	8007bb4 <_printf_i>
 8008c94:	e7ea      	b.n	8008c6c <_svfiprintf_r+0x1b0>
 8008c96:	bf00      	nop
 8008c98:	0800a53c 	.word	0x0800a53c
 8008c9c:	0800a542 	.word	0x0800a542
 8008ca0:	0800a546 	.word	0x0800a546
 8008ca4:	00000000 	.word	0x00000000
 8008ca8:	08008a09 	.word	0x08008a09

08008cac <_raise_r>:
 8008cac:	291f      	cmp	r1, #31
 8008cae:	b538      	push	{r3, r4, r5, lr}
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	d904      	bls.n	8008cc0 <_raise_r+0x14>
 8008cb6:	2316      	movs	r3, #22
 8008cb8:	6003      	str	r3, [r0, #0]
 8008cba:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
 8008cc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008cc2:	b112      	cbz	r2, 8008cca <_raise_r+0x1e>
 8008cc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cc8:	b94b      	cbnz	r3, 8008cde <_raise_r+0x32>
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 f830 	bl	8008d30 <_getpid_r>
 8008cd0:	462a      	mov	r2, r5
 8008cd2:	4601      	mov	r1, r0
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cda:	f000 b817 	b.w	8008d0c <_kill_r>
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d00a      	beq.n	8008cf8 <_raise_r+0x4c>
 8008ce2:	1c59      	adds	r1, r3, #1
 8008ce4:	d103      	bne.n	8008cee <_raise_r+0x42>
 8008ce6:	2316      	movs	r3, #22
 8008ce8:	6003      	str	r3, [r0, #0]
 8008cea:	2001      	movs	r0, #1
 8008cec:	e7e7      	b.n	8008cbe <_raise_r+0x12>
 8008cee:	2400      	movs	r4, #0
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cf6:	4798      	blx	r3
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	e7e0      	b.n	8008cbe <_raise_r+0x12>

08008cfc <raise>:
 8008cfc:	4b02      	ldr	r3, [pc, #8]	; (8008d08 <raise+0xc>)
 8008cfe:	4601      	mov	r1, r0
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	f7ff bfd3 	b.w	8008cac <_raise_r>
 8008d06:	bf00      	nop
 8008d08:	20000190 	.word	0x20000190

08008d0c <_kill_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	2300      	movs	r3, #0
 8008d10:	4c06      	ldr	r4, [pc, #24]	; (8008d2c <_kill_r+0x20>)
 8008d12:	4605      	mov	r5, r0
 8008d14:	4608      	mov	r0, r1
 8008d16:	4611      	mov	r1, r2
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	f7f8 fed7 	bl	8001acc <_kill>
 8008d1e:	1c43      	adds	r3, r0, #1
 8008d20:	d102      	bne.n	8008d28 <_kill_r+0x1c>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	b103      	cbz	r3, 8008d28 <_kill_r+0x1c>
 8008d26:	602b      	str	r3, [r5, #0]
 8008d28:	bd38      	pop	{r3, r4, r5, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20002c48 	.word	0x20002c48

08008d30 <_getpid_r>:
 8008d30:	f7f8 beca 	b.w	8001ac8 <_getpid>

08008d34 <__sread>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	460c      	mov	r4, r1
 8008d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3c:	f000 f89c 	bl	8008e78 <_read_r>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	bfab      	itete	ge
 8008d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d46:	89a3      	ldrhlt	r3, [r4, #12]
 8008d48:	181b      	addge	r3, r3, r0
 8008d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d4e:	bfac      	ite	ge
 8008d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d52:	81a3      	strhlt	r3, [r4, #12]
 8008d54:	bd10      	pop	{r4, pc}

08008d56 <__swrite>:
 8008d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5a:	461f      	mov	r7, r3
 8008d5c:	898b      	ldrh	r3, [r1, #12]
 8008d5e:	4605      	mov	r5, r0
 8008d60:	05db      	lsls	r3, r3, #23
 8008d62:	460c      	mov	r4, r1
 8008d64:	4616      	mov	r6, r2
 8008d66:	d505      	bpl.n	8008d74 <__swrite+0x1e>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d70:	f000 f868 	bl	8008e44 <_lseek_r>
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	4632      	mov	r2, r6
 8008d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d7c:	81a3      	strh	r3, [r4, #12]
 8008d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d82:	463b      	mov	r3, r7
 8008d84:	4628      	mov	r0, r5
 8008d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8a:	f000 b817 	b.w	8008dbc <_write_r>

08008d8e <__sseek>:
 8008d8e:	b510      	push	{r4, lr}
 8008d90:	460c      	mov	r4, r1
 8008d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d96:	f000 f855 	bl	8008e44 <_lseek_r>
 8008d9a:	1c43      	adds	r3, r0, #1
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	bf15      	itete	ne
 8008da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008daa:	81a3      	strheq	r3, [r4, #12]
 8008dac:	bf18      	it	ne
 8008dae:	81a3      	strhne	r3, [r4, #12]
 8008db0:	bd10      	pop	{r4, pc}

08008db2 <__sclose>:
 8008db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db6:	f000 b813 	b.w	8008de0 <_close_r>
	...

08008dbc <_write_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	4c05      	ldr	r4, [pc, #20]	; (8008ddc <_write_r+0x20>)
 8008dc8:	6022      	str	r2, [r4, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f7f8 fe9a 	bl	8001b04 <_write>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_write_r+0x1e>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_write_r+0x1e>
 8008dd8:	602b      	str	r3, [r5, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	20002c48 	.word	0x20002c48

08008de0 <_close_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	2300      	movs	r3, #0
 8008de4:	4c05      	ldr	r4, [pc, #20]	; (8008dfc <_close_r+0x1c>)
 8008de6:	4605      	mov	r5, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	6023      	str	r3, [r4, #0]
 8008dec:	f7f8 fe98 	bl	8001b20 <_close>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d102      	bne.n	8008dfa <_close_r+0x1a>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	b103      	cbz	r3, 8008dfa <_close_r+0x1a>
 8008df8:	602b      	str	r3, [r5, #0]
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	20002c48 	.word	0x20002c48

08008e00 <_fstat_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	2300      	movs	r3, #0
 8008e04:	4c06      	ldr	r4, [pc, #24]	; (8008e20 <_fstat_r+0x20>)
 8008e06:	4605      	mov	r5, r0
 8008e08:	4608      	mov	r0, r1
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	f7f8 fe8a 	bl	8001b26 <_fstat>
 8008e12:	1c43      	adds	r3, r0, #1
 8008e14:	d102      	bne.n	8008e1c <_fstat_r+0x1c>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	b103      	cbz	r3, 8008e1c <_fstat_r+0x1c>
 8008e1a:	602b      	str	r3, [r5, #0]
 8008e1c:	bd38      	pop	{r3, r4, r5, pc}
 8008e1e:	bf00      	nop
 8008e20:	20002c48 	.word	0x20002c48

08008e24 <_isatty_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	2300      	movs	r3, #0
 8008e28:	4c05      	ldr	r4, [pc, #20]	; (8008e40 <_isatty_r+0x1c>)
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	6023      	str	r3, [r4, #0]
 8008e30:	f7f8 fe7e 	bl	8001b30 <_isatty>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_isatty_r+0x1a>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_isatty_r+0x1a>
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	20002c48 	.word	0x20002c48

08008e44 <_lseek_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4605      	mov	r5, r0
 8008e48:	4608      	mov	r0, r1
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	4c05      	ldr	r4, [pc, #20]	; (8008e64 <_lseek_r+0x20>)
 8008e50:	6022      	str	r2, [r4, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	f7f8 fe6e 	bl	8001b34 <_lseek>
 8008e58:	1c43      	adds	r3, r0, #1
 8008e5a:	d102      	bne.n	8008e62 <_lseek_r+0x1e>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	b103      	cbz	r3, 8008e62 <_lseek_r+0x1e>
 8008e60:	602b      	str	r3, [r5, #0]
 8008e62:	bd38      	pop	{r3, r4, r5, pc}
 8008e64:	20002c48 	.word	0x20002c48

08008e68 <_malloc_usable_size_r>:
 8008e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e6c:	1f18      	subs	r0, r3, #4
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	bfbc      	itt	lt
 8008e72:	580b      	ldrlt	r3, [r1, r0]
 8008e74:	18c0      	addlt	r0, r0, r3
 8008e76:	4770      	bx	lr

08008e78 <_read_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	4611      	mov	r1, r2
 8008e80:	2200      	movs	r2, #0
 8008e82:	4c05      	ldr	r4, [pc, #20]	; (8008e98 <_read_r+0x20>)
 8008e84:	6022      	str	r2, [r4, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	f7f8 fe2e 	bl	8001ae8 <_read>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_read_r+0x1e>
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_read_r+0x1e>
 8008e94:	602b      	str	r3, [r5, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	20002c48 	.word	0x20002c48

08008e9c <pow>:
 8008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	b08f      	sub	sp, #60	; 0x3c
 8008ea2:	461d      	mov	r5, r3
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	4689      	mov	r9, r1
 8008ea8:	4614      	mov	r4, r2
 8008eaa:	f000 f955 	bl	8009158 <__ieee754_pow>
 8008eae:	4fa1      	ldr	r7, [pc, #644]	; (8009134 <pow+0x298>)
 8008eb0:	e9cd 0100 	strd	r0, r1, [sp]
 8008eb4:	f997 3000 	ldrsb.w	r3, [r7]
 8008eb8:	463e      	mov	r6, r7
 8008eba:	9302      	str	r3, [sp, #8]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	d05f      	beq.n	8008f80 <pow+0xe4>
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	462b      	mov	r3, r5
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	f7f7 fdaa 	bl	8000a20 <__aeabi_dcmpun>
 8008ecc:	4682      	mov	sl, r0
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d156      	bne.n	8008f80 <pow+0xe4>
 8008ed2:	4642      	mov	r2, r8
 8008ed4:	464b      	mov	r3, r9
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	4649      	mov	r1, r9
 8008eda:	f7f7 fda1 	bl	8000a20 <__aeabi_dcmpun>
 8008ede:	9003      	str	r0, [sp, #12]
 8008ee0:	b1e8      	cbz	r0, 8008f1e <pow+0x82>
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7f7 fd67 	bl	80009bc <__aeabi_dcmpeq>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d046      	beq.n	8008f80 <pow+0xe4>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	9304      	str	r3, [sp, #16]
 8008ef8:	4b8f      	ldr	r3, [pc, #572]	; (8009138 <pow+0x29c>)
 8008efa:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008efe:	9305      	str	r3, [sp, #20]
 8008f00:	4b8e      	ldr	r3, [pc, #568]	; (800913c <pow+0x2a0>)
 8008f02:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008f06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d031      	beq.n	8008f78 <pow+0xdc>
 8008f14:	a804      	add	r0, sp, #16
 8008f16:	f000 fedf 	bl	8009cd8 <matherr>
 8008f1a:	bb38      	cbnz	r0, 8008f6c <pow+0xd0>
 8008f1c:	e058      	b.n	8008fd0 <pow+0x134>
 8008f1e:	f04f 0a00 	mov.w	sl, #0
 8008f22:	f04f 0b00 	mov.w	fp, #0
 8008f26:	4652      	mov	r2, sl
 8008f28:	465b      	mov	r3, fp
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	f7f7 fd45 	bl	80009bc <__aeabi_dcmpeq>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	d051      	beq.n	8008fda <pow+0x13e>
 8008f36:	4652      	mov	r2, sl
 8008f38:	465b      	mov	r3, fp
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	f7f7 fd3d 	bl	80009bc <__aeabi_dcmpeq>
 8008f42:	4606      	mov	r6, r0
 8008f44:	b308      	cbz	r0, 8008f8a <pow+0xee>
 8008f46:	2301      	movs	r3, #1
 8008f48:	9304      	str	r3, [sp, #16]
 8008f4a:	4b7b      	ldr	r3, [pc, #492]	; (8009138 <pow+0x29c>)
 8008f4c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008f50:	9305      	str	r3, [sp, #20]
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008f58:	930c      	str	r3, [sp, #48]	; 0x30
 8008f5a:	9b02      	ldr	r3, [sp, #8]
 8008f5c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d0d7      	beq.n	8008f14 <pow+0x78>
 8008f64:	2200      	movs	r2, #0
 8008f66:	4b75      	ldr	r3, [pc, #468]	; (800913c <pow+0x2a0>)
 8008f68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f6e:	b11b      	cbz	r3, 8008f78 <pow+0xdc>
 8008f70:	f7fe fb32 	bl	80075d8 <__errno>
 8008f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f76:	6003      	str	r3, [r0, #0]
 8008f78:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8008f7c:	e9cd 3400 	strd	r3, r4, [sp]
 8008f80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f84:	b00f      	add	sp, #60	; 0x3c
 8008f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	f000 fe9d 	bl	8009ccc <finite>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d0f4      	beq.n	8008f80 <pow+0xe4>
 8008f96:	4652      	mov	r2, sl
 8008f98:	465b      	mov	r3, fp
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	f7f7 fd17 	bl	80009d0 <__aeabi_dcmplt>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d0ec      	beq.n	8008f80 <pow+0xe4>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	4b63      	ldr	r3, [pc, #396]	; (8009138 <pow+0x29c>)
 8008fac:	960c      	str	r6, [sp, #48]	; 0x30
 8008fae:	9305      	str	r3, [sp, #20]
 8008fb0:	f997 3000 	ldrsb.w	r3, [r7]
 8008fb4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008fb8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008fbc:	b913      	cbnz	r3, 8008fc4 <pow+0x128>
 8008fbe:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008fc2:	e7a7      	b.n	8008f14 <pow+0x78>
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	495e      	ldr	r1, [pc, #376]	; (8009140 <pow+0x2a4>)
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008fce:	d1a1      	bne.n	8008f14 <pow+0x78>
 8008fd0:	f7fe fb02 	bl	80075d8 <__errno>
 8008fd4:	2321      	movs	r3, #33	; 0x21
 8008fd6:	6003      	str	r3, [r0, #0]
 8008fd8:	e7c8      	b.n	8008f6c <pow+0xd0>
 8008fda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fde:	f000 fe75 	bl	8009ccc <finite>
 8008fe2:	9002      	str	r0, [sp, #8]
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d177      	bne.n	80090d8 <pow+0x23c>
 8008fe8:	4640      	mov	r0, r8
 8008fea:	4649      	mov	r1, r9
 8008fec:	f000 fe6e 	bl	8009ccc <finite>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d071      	beq.n	80090d8 <pow+0x23c>
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	f000 fe68 	bl	8009ccc <finite>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d06b      	beq.n	80090d8 <pow+0x23c>
 8009000:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009004:	4619      	mov	r1, r3
 8009006:	4610      	mov	r0, r2
 8009008:	f7f7 fd0a 	bl	8000a20 <__aeabi_dcmpun>
 800900c:	f997 7000 	ldrsb.w	r7, [r7]
 8009010:	4b49      	ldr	r3, [pc, #292]	; (8009138 <pow+0x29c>)
 8009012:	b1a0      	cbz	r0, 800903e <pow+0x1a2>
 8009014:	2201      	movs	r2, #1
 8009016:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800901a:	9b02      	ldr	r3, [sp, #8]
 800901c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009020:	930c      	str	r3, [sp, #48]	; 0x30
 8009022:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009026:	2f00      	cmp	r7, #0
 8009028:	d0c9      	beq.n	8008fbe <pow+0x122>
 800902a:	4652      	mov	r2, sl
 800902c:	465b      	mov	r3, fp
 800902e:	4650      	mov	r0, sl
 8009030:	4659      	mov	r1, fp
 8009032:	f7f7 fb85 	bl	8000740 <__aeabi_ddiv>
 8009036:	2f02      	cmp	r7, #2
 8009038:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800903c:	e7c7      	b.n	8008fce <pow+0x132>
 800903e:	2203      	movs	r2, #3
 8009040:	900c      	str	r0, [sp, #48]	; 0x30
 8009042:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009046:	4620      	mov	r0, r4
 8009048:	4629      	mov	r1, r5
 800904a:	2200      	movs	r2, #0
 800904c:	4b3d      	ldr	r3, [pc, #244]	; (8009144 <pow+0x2a8>)
 800904e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009052:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009056:	f7f7 fa49 	bl	80004ec <__aeabi_dmul>
 800905a:	4604      	mov	r4, r0
 800905c:	460d      	mov	r5, r1
 800905e:	bb17      	cbnz	r7, 80090a6 <pow+0x20a>
 8009060:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009064:	4b38      	ldr	r3, [pc, #224]	; (8009148 <pow+0x2ac>)
 8009066:	4640      	mov	r0, r8
 8009068:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800906c:	4649      	mov	r1, r9
 800906e:	4652      	mov	r2, sl
 8009070:	465b      	mov	r3, fp
 8009072:	f7f7 fcad 	bl	80009d0 <__aeabi_dcmplt>
 8009076:	2800      	cmp	r0, #0
 8009078:	d054      	beq.n	8009124 <pow+0x288>
 800907a:	4620      	mov	r0, r4
 800907c:	4629      	mov	r1, r5
 800907e:	f000 fe33 	bl	8009ce8 <rint>
 8009082:	4622      	mov	r2, r4
 8009084:	462b      	mov	r3, r5
 8009086:	f7f7 fc99 	bl	80009bc <__aeabi_dcmpeq>
 800908a:	b920      	cbnz	r0, 8009096 <pow+0x1fa>
 800908c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009090:	4b2e      	ldr	r3, [pc, #184]	; (800914c <pow+0x2b0>)
 8009092:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009096:	f996 3000 	ldrsb.w	r3, [r6]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d142      	bne.n	8009124 <pow+0x288>
 800909e:	f7fe fa9b 	bl	80075d8 <__errno>
 80090a2:	2322      	movs	r3, #34	; 0x22
 80090a4:	e797      	b.n	8008fd6 <pow+0x13a>
 80090a6:	2200      	movs	r2, #0
 80090a8:	4b29      	ldr	r3, [pc, #164]	; (8009150 <pow+0x2b4>)
 80090aa:	4640      	mov	r0, r8
 80090ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80090b0:	4649      	mov	r1, r9
 80090b2:	4652      	mov	r2, sl
 80090b4:	465b      	mov	r3, fp
 80090b6:	f7f7 fc8b 	bl	80009d0 <__aeabi_dcmplt>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d0eb      	beq.n	8009096 <pow+0x1fa>
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	f000 fe11 	bl	8009ce8 <rint>
 80090c6:	4622      	mov	r2, r4
 80090c8:	462b      	mov	r3, r5
 80090ca:	f7f7 fc77 	bl	80009bc <__aeabi_dcmpeq>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d1e1      	bne.n	8009096 <pow+0x1fa>
 80090d2:	2200      	movs	r2, #0
 80090d4:	4b1a      	ldr	r3, [pc, #104]	; (8009140 <pow+0x2a4>)
 80090d6:	e7dc      	b.n	8009092 <pow+0x1f6>
 80090d8:	2200      	movs	r2, #0
 80090da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090de:	2300      	movs	r3, #0
 80090e0:	f7f7 fc6c 	bl	80009bc <__aeabi_dcmpeq>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	f43f af4b 	beq.w	8008f80 <pow+0xe4>
 80090ea:	4640      	mov	r0, r8
 80090ec:	4649      	mov	r1, r9
 80090ee:	f000 fded 	bl	8009ccc <finite>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	f43f af44 	beq.w	8008f80 <pow+0xe4>
 80090f8:	4620      	mov	r0, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	f000 fde6 	bl	8009ccc <finite>
 8009100:	2800      	cmp	r0, #0
 8009102:	f43f af3d 	beq.w	8008f80 <pow+0xe4>
 8009106:	2304      	movs	r3, #4
 8009108:	9304      	str	r3, [sp, #16]
 800910a:	4b0b      	ldr	r3, [pc, #44]	; (8009138 <pow+0x29c>)
 800910c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009110:	9305      	str	r3, [sp, #20]
 8009112:	2300      	movs	r3, #0
 8009114:	2400      	movs	r4, #0
 8009116:	930c      	str	r3, [sp, #48]	; 0x30
 8009118:	2300      	movs	r3, #0
 800911a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800911e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8009122:	e7b8      	b.n	8009096 <pow+0x1fa>
 8009124:	a804      	add	r0, sp, #16
 8009126:	f000 fdd7 	bl	8009cd8 <matherr>
 800912a:	2800      	cmp	r0, #0
 800912c:	f47f af1e 	bne.w	8008f6c <pow+0xd0>
 8009130:	e7b5      	b.n	800909e <pow+0x202>
 8009132:	bf00      	nop
 8009134:	20000360 	.word	0x20000360
 8009138:	0800a6c0 	.word	0x0800a6c0
 800913c:	3ff00000 	.word	0x3ff00000
 8009140:	fff00000 	.word	0xfff00000
 8009144:	3fe00000 	.word	0x3fe00000
 8009148:	47efffff 	.word	0x47efffff
 800914c:	c7efffff 	.word	0xc7efffff
 8009150:	7ff00000 	.word	0x7ff00000
 8009154:	00000000 	.word	0x00000000

08009158 <__ieee754_pow>:
 8009158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	b091      	sub	sp, #68	; 0x44
 800915e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009162:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8009166:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800916a:	ea55 0302 	orrs.w	r3, r5, r2
 800916e:	4607      	mov	r7, r0
 8009170:	4688      	mov	r8, r1
 8009172:	f000 84b7 	beq.w	8009ae4 <__ieee754_pow+0x98c>
 8009176:	4b80      	ldr	r3, [pc, #512]	; (8009378 <__ieee754_pow+0x220>)
 8009178:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800917c:	429c      	cmp	r4, r3
 800917e:	4689      	mov	r9, r1
 8009180:	4682      	mov	sl, r0
 8009182:	dc09      	bgt.n	8009198 <__ieee754_pow+0x40>
 8009184:	d103      	bne.n	800918e <__ieee754_pow+0x36>
 8009186:	b938      	cbnz	r0, 8009198 <__ieee754_pow+0x40>
 8009188:	42a5      	cmp	r5, r4
 800918a:	dc0d      	bgt.n	80091a8 <__ieee754_pow+0x50>
 800918c:	e001      	b.n	8009192 <__ieee754_pow+0x3a>
 800918e:	429d      	cmp	r5, r3
 8009190:	dc02      	bgt.n	8009198 <__ieee754_pow+0x40>
 8009192:	429d      	cmp	r5, r3
 8009194:	d10e      	bne.n	80091b4 <__ieee754_pow+0x5c>
 8009196:	b16a      	cbz	r2, 80091b4 <__ieee754_pow+0x5c>
 8009198:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800919c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80091a0:	ea54 030a 	orrs.w	r3, r4, sl
 80091a4:	f000 849e 	beq.w	8009ae4 <__ieee754_pow+0x98c>
 80091a8:	4874      	ldr	r0, [pc, #464]	; (800937c <__ieee754_pow+0x224>)
 80091aa:	b011      	add	sp, #68	; 0x44
 80091ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b0:	f000 bd94 	b.w	8009cdc <nan>
 80091b4:	f1b9 0f00 	cmp.w	r9, #0
 80091b8:	da53      	bge.n	8009262 <__ieee754_pow+0x10a>
 80091ba:	4b71      	ldr	r3, [pc, #452]	; (8009380 <__ieee754_pow+0x228>)
 80091bc:	429d      	cmp	r5, r3
 80091be:	dc4e      	bgt.n	800925e <__ieee754_pow+0x106>
 80091c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80091c4:	429d      	cmp	r5, r3
 80091c6:	dd4c      	ble.n	8009262 <__ieee754_pow+0x10a>
 80091c8:	152b      	asrs	r3, r5, #20
 80091ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80091ce:	2b14      	cmp	r3, #20
 80091d0:	dd28      	ble.n	8009224 <__ieee754_pow+0xcc>
 80091d2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80091d6:	fa22 f103 	lsr.w	r1, r2, r3
 80091da:	fa01 f303 	lsl.w	r3, r1, r3
 80091de:	4293      	cmp	r3, r2
 80091e0:	d13f      	bne.n	8009262 <__ieee754_pow+0x10a>
 80091e2:	f001 0101 	and.w	r1, r1, #1
 80091e6:	f1c1 0302 	rsb	r3, r1, #2
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	2a00      	cmp	r2, #0
 80091ee:	d15c      	bne.n	80092aa <__ieee754_pow+0x152>
 80091f0:	4b61      	ldr	r3, [pc, #388]	; (8009378 <__ieee754_pow+0x220>)
 80091f2:	429d      	cmp	r5, r3
 80091f4:	d126      	bne.n	8009244 <__ieee754_pow+0xec>
 80091f6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80091fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80091fe:	ea53 030a 	orrs.w	r3, r3, sl
 8009202:	f000 846f 	beq.w	8009ae4 <__ieee754_pow+0x98c>
 8009206:	4b5f      	ldr	r3, [pc, #380]	; (8009384 <__ieee754_pow+0x22c>)
 8009208:	429c      	cmp	r4, r3
 800920a:	dd2c      	ble.n	8009266 <__ieee754_pow+0x10e>
 800920c:	2e00      	cmp	r6, #0
 800920e:	f280 846f 	bge.w	8009af0 <__ieee754_pow+0x998>
 8009212:	f04f 0b00 	mov.w	fp, #0
 8009216:	f04f 0c00 	mov.w	ip, #0
 800921a:	4658      	mov	r0, fp
 800921c:	4661      	mov	r1, ip
 800921e:	b011      	add	sp, #68	; 0x44
 8009220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009224:	2a00      	cmp	r2, #0
 8009226:	d13e      	bne.n	80092a6 <__ieee754_pow+0x14e>
 8009228:	f1c3 0314 	rsb	r3, r3, #20
 800922c:	fa45 f103 	asr.w	r1, r5, r3
 8009230:	fa01 f303 	lsl.w	r3, r1, r3
 8009234:	42ab      	cmp	r3, r5
 8009236:	f040 8463 	bne.w	8009b00 <__ieee754_pow+0x9a8>
 800923a:	f001 0101 	and.w	r1, r1, #1
 800923e:	f1c1 0302 	rsb	r3, r1, #2
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	4b50      	ldr	r3, [pc, #320]	; (8009388 <__ieee754_pow+0x230>)
 8009246:	429d      	cmp	r5, r3
 8009248:	d114      	bne.n	8009274 <__ieee754_pow+0x11c>
 800924a:	2e00      	cmp	r6, #0
 800924c:	f280 8454 	bge.w	8009af8 <__ieee754_pow+0x9a0>
 8009250:	463a      	mov	r2, r7
 8009252:	4643      	mov	r3, r8
 8009254:	2000      	movs	r0, #0
 8009256:	494c      	ldr	r1, [pc, #304]	; (8009388 <__ieee754_pow+0x230>)
 8009258:	f7f7 fa72 	bl	8000740 <__aeabi_ddiv>
 800925c:	e013      	b.n	8009286 <__ieee754_pow+0x12e>
 800925e:	2302      	movs	r3, #2
 8009260:	e7c3      	b.n	80091ea <__ieee754_pow+0x92>
 8009262:	2300      	movs	r3, #0
 8009264:	e7c1      	b.n	80091ea <__ieee754_pow+0x92>
 8009266:	2e00      	cmp	r6, #0
 8009268:	dad3      	bge.n	8009212 <__ieee754_pow+0xba>
 800926a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800926e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009272:	e7d2      	b.n	800921a <__ieee754_pow+0xc2>
 8009274:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8009278:	d108      	bne.n	800928c <__ieee754_pow+0x134>
 800927a:	463a      	mov	r2, r7
 800927c:	4643      	mov	r3, r8
 800927e:	4638      	mov	r0, r7
 8009280:	4641      	mov	r1, r8
 8009282:	f7f7 f933 	bl	80004ec <__aeabi_dmul>
 8009286:	4683      	mov	fp, r0
 8009288:	468c      	mov	ip, r1
 800928a:	e7c6      	b.n	800921a <__ieee754_pow+0xc2>
 800928c:	4b3f      	ldr	r3, [pc, #252]	; (800938c <__ieee754_pow+0x234>)
 800928e:	429e      	cmp	r6, r3
 8009290:	d10b      	bne.n	80092aa <__ieee754_pow+0x152>
 8009292:	f1b9 0f00 	cmp.w	r9, #0
 8009296:	db08      	blt.n	80092aa <__ieee754_pow+0x152>
 8009298:	4638      	mov	r0, r7
 800929a:	4641      	mov	r1, r8
 800929c:	b011      	add	sp, #68	; 0x44
 800929e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a2:	f000 bc63 	b.w	8009b6c <__ieee754_sqrt>
 80092a6:	2300      	movs	r3, #0
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	4638      	mov	r0, r7
 80092ac:	4641      	mov	r1, r8
 80092ae:	f000 fd09 	bl	8009cc4 <fabs>
 80092b2:	4683      	mov	fp, r0
 80092b4:	468c      	mov	ip, r1
 80092b6:	f1ba 0f00 	cmp.w	sl, #0
 80092ba:	d12b      	bne.n	8009314 <__ieee754_pow+0x1bc>
 80092bc:	b124      	cbz	r4, 80092c8 <__ieee754_pow+0x170>
 80092be:	4b32      	ldr	r3, [pc, #200]	; (8009388 <__ieee754_pow+0x230>)
 80092c0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d125      	bne.n	8009314 <__ieee754_pow+0x1bc>
 80092c8:	2e00      	cmp	r6, #0
 80092ca:	da07      	bge.n	80092dc <__ieee754_pow+0x184>
 80092cc:	465a      	mov	r2, fp
 80092ce:	4663      	mov	r3, ip
 80092d0:	2000      	movs	r0, #0
 80092d2:	492d      	ldr	r1, [pc, #180]	; (8009388 <__ieee754_pow+0x230>)
 80092d4:	f7f7 fa34 	bl	8000740 <__aeabi_ddiv>
 80092d8:	4683      	mov	fp, r0
 80092da:	468c      	mov	ip, r1
 80092dc:	f1b9 0f00 	cmp.w	r9, #0
 80092e0:	da9b      	bge.n	800921a <__ieee754_pow+0xc2>
 80092e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80092e6:	9b00      	ldr	r3, [sp, #0]
 80092e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80092ec:	4323      	orrs	r3, r4
 80092ee:	d108      	bne.n	8009302 <__ieee754_pow+0x1aa>
 80092f0:	465a      	mov	r2, fp
 80092f2:	4663      	mov	r3, ip
 80092f4:	4658      	mov	r0, fp
 80092f6:	4661      	mov	r1, ip
 80092f8:	f7f6 ff40 	bl	800017c <__aeabi_dsub>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	e7aa      	b.n	8009258 <__ieee754_pow+0x100>
 8009302:	9b00      	ldr	r3, [sp, #0]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d188      	bne.n	800921a <__ieee754_pow+0xc2>
 8009308:	4658      	mov	r0, fp
 800930a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800930e:	4683      	mov	fp, r0
 8009310:	469c      	mov	ip, r3
 8009312:	e782      	b.n	800921a <__ieee754_pow+0xc2>
 8009314:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8009318:	f109 33ff 	add.w	r3, r9, #4294967295
 800931c:	930d      	str	r3, [sp, #52]	; 0x34
 800931e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009320:	9b00      	ldr	r3, [sp, #0]
 8009322:	4313      	orrs	r3, r2
 8009324:	d104      	bne.n	8009330 <__ieee754_pow+0x1d8>
 8009326:	463a      	mov	r2, r7
 8009328:	4643      	mov	r3, r8
 800932a:	4638      	mov	r0, r7
 800932c:	4641      	mov	r1, r8
 800932e:	e7e3      	b.n	80092f8 <__ieee754_pow+0x1a0>
 8009330:	4b17      	ldr	r3, [pc, #92]	; (8009390 <__ieee754_pow+0x238>)
 8009332:	429d      	cmp	r5, r3
 8009334:	f340 80fe 	ble.w	8009534 <__ieee754_pow+0x3dc>
 8009338:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800933c:	429d      	cmp	r5, r3
 800933e:	dd0b      	ble.n	8009358 <__ieee754_pow+0x200>
 8009340:	4b10      	ldr	r3, [pc, #64]	; (8009384 <__ieee754_pow+0x22c>)
 8009342:	429c      	cmp	r4, r3
 8009344:	dc0e      	bgt.n	8009364 <__ieee754_pow+0x20c>
 8009346:	2e00      	cmp	r6, #0
 8009348:	f6bf af63 	bge.w	8009212 <__ieee754_pow+0xba>
 800934c:	a308      	add	r3, pc, #32	; (adr r3, 8009370 <__ieee754_pow+0x218>)
 800934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009352:	4610      	mov	r0, r2
 8009354:	4619      	mov	r1, r3
 8009356:	e794      	b.n	8009282 <__ieee754_pow+0x12a>
 8009358:	4b0e      	ldr	r3, [pc, #56]	; (8009394 <__ieee754_pow+0x23c>)
 800935a:	429c      	cmp	r4, r3
 800935c:	ddf3      	ble.n	8009346 <__ieee754_pow+0x1ee>
 800935e:	4b0a      	ldr	r3, [pc, #40]	; (8009388 <__ieee754_pow+0x230>)
 8009360:	429c      	cmp	r4, r3
 8009362:	dd19      	ble.n	8009398 <__ieee754_pow+0x240>
 8009364:	2e00      	cmp	r6, #0
 8009366:	dcf1      	bgt.n	800934c <__ieee754_pow+0x1f4>
 8009368:	e753      	b.n	8009212 <__ieee754_pow+0xba>
 800936a:	bf00      	nop
 800936c:	f3af 8000 	nop.w
 8009370:	8800759c 	.word	0x8800759c
 8009374:	7e37e43c 	.word	0x7e37e43c
 8009378:	7ff00000 	.word	0x7ff00000
 800937c:	08009f9e 	.word	0x08009f9e
 8009380:	433fffff 	.word	0x433fffff
 8009384:	3fefffff 	.word	0x3fefffff
 8009388:	3ff00000 	.word	0x3ff00000
 800938c:	3fe00000 	.word	0x3fe00000
 8009390:	41e00000 	.word	0x41e00000
 8009394:	3feffffe 	.word	0x3feffffe
 8009398:	4661      	mov	r1, ip
 800939a:	2200      	movs	r2, #0
 800939c:	4b60      	ldr	r3, [pc, #384]	; (8009520 <__ieee754_pow+0x3c8>)
 800939e:	4658      	mov	r0, fp
 80093a0:	f7f6 feec 	bl	800017c <__aeabi_dsub>
 80093a4:	a354      	add	r3, pc, #336	; (adr r3, 80094f8 <__ieee754_pow+0x3a0>)
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	4604      	mov	r4, r0
 80093ac:	460d      	mov	r5, r1
 80093ae:	f7f7 f89d 	bl	80004ec <__aeabi_dmul>
 80093b2:	a353      	add	r3, pc, #332	; (adr r3, 8009500 <__ieee754_pow+0x3a8>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	4606      	mov	r6, r0
 80093ba:	460f      	mov	r7, r1
 80093bc:	4620      	mov	r0, r4
 80093be:	4629      	mov	r1, r5
 80093c0:	f7f7 f894 	bl	80004ec <__aeabi_dmul>
 80093c4:	2200      	movs	r2, #0
 80093c6:	4682      	mov	sl, r0
 80093c8:	468b      	mov	fp, r1
 80093ca:	4b56      	ldr	r3, [pc, #344]	; (8009524 <__ieee754_pow+0x3cc>)
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	f7f7 f88c 	bl	80004ec <__aeabi_dmul>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	a14b      	add	r1, pc, #300	; (adr r1, 8009508 <__ieee754_pow+0x3b0>)
 80093da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093de:	f7f6 fecd 	bl	800017c <__aeabi_dsub>
 80093e2:	4622      	mov	r2, r4
 80093e4:	462b      	mov	r3, r5
 80093e6:	f7f7 f881 	bl	80004ec <__aeabi_dmul>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	2000      	movs	r0, #0
 80093f0:	494d      	ldr	r1, [pc, #308]	; (8009528 <__ieee754_pow+0x3d0>)
 80093f2:	f7f6 fec3 	bl	800017c <__aeabi_dsub>
 80093f6:	4622      	mov	r2, r4
 80093f8:	462b      	mov	r3, r5
 80093fa:	4680      	mov	r8, r0
 80093fc:	4689      	mov	r9, r1
 80093fe:	4620      	mov	r0, r4
 8009400:	4629      	mov	r1, r5
 8009402:	f7f7 f873 	bl	80004ec <__aeabi_dmul>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4640      	mov	r0, r8
 800940c:	4649      	mov	r1, r9
 800940e:	f7f7 f86d 	bl	80004ec <__aeabi_dmul>
 8009412:	a33f      	add	r3, pc, #252	; (adr r3, 8009510 <__ieee754_pow+0x3b8>)
 8009414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009418:	f7f7 f868 	bl	80004ec <__aeabi_dmul>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4650      	mov	r0, sl
 8009422:	4659      	mov	r1, fp
 8009424:	f7f6 feaa 	bl	800017c <__aeabi_dsub>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4604      	mov	r4, r0
 800942e:	460d      	mov	r5, r1
 8009430:	4630      	mov	r0, r6
 8009432:	4639      	mov	r1, r7
 8009434:	f7f6 fea4 	bl	8000180 <__adddf3>
 8009438:	2000      	movs	r0, #0
 800943a:	468b      	mov	fp, r1
 800943c:	4682      	mov	sl, r0
 800943e:	4632      	mov	r2, r6
 8009440:	463b      	mov	r3, r7
 8009442:	f7f6 fe9b 	bl	800017c <__aeabi_dsub>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4620      	mov	r0, r4
 800944c:	4629      	mov	r1, r5
 800944e:	f7f6 fe95 	bl	800017c <__aeabi_dsub>
 8009452:	9b00      	ldr	r3, [sp, #0]
 8009454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009456:	3b01      	subs	r3, #1
 8009458:	4313      	orrs	r3, r2
 800945a:	f04f 0300 	mov.w	r3, #0
 800945e:	bf0c      	ite	eq
 8009460:	4c32      	ldreq	r4, [pc, #200]	; (800952c <__ieee754_pow+0x3d4>)
 8009462:	4c2f      	ldrne	r4, [pc, #188]	; (8009520 <__ieee754_pow+0x3c8>)
 8009464:	4606      	mov	r6, r0
 8009466:	e9cd 3400 	strd	r3, r4, [sp]
 800946a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800946e:	2400      	movs	r4, #0
 8009470:	460f      	mov	r7, r1
 8009472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009476:	4622      	mov	r2, r4
 8009478:	462b      	mov	r3, r5
 800947a:	f7f6 fe7f 	bl	800017c <__aeabi_dsub>
 800947e:	4652      	mov	r2, sl
 8009480:	465b      	mov	r3, fp
 8009482:	f7f7 f833 	bl	80004ec <__aeabi_dmul>
 8009486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800948a:	4680      	mov	r8, r0
 800948c:	4689      	mov	r9, r1
 800948e:	4630      	mov	r0, r6
 8009490:	4639      	mov	r1, r7
 8009492:	f7f7 f82b 	bl	80004ec <__aeabi_dmul>
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	4640      	mov	r0, r8
 800949c:	4649      	mov	r1, r9
 800949e:	f7f6 fe6f 	bl	8000180 <__adddf3>
 80094a2:	4622      	mov	r2, r4
 80094a4:	462b      	mov	r3, r5
 80094a6:	4680      	mov	r8, r0
 80094a8:	4689      	mov	r9, r1
 80094aa:	4650      	mov	r0, sl
 80094ac:	4659      	mov	r1, fp
 80094ae:	f7f7 f81d 	bl	80004ec <__aeabi_dmul>
 80094b2:	4604      	mov	r4, r0
 80094b4:	460d      	mov	r5, r1
 80094b6:	460b      	mov	r3, r1
 80094b8:	4602      	mov	r2, r0
 80094ba:	4649      	mov	r1, r9
 80094bc:	4640      	mov	r0, r8
 80094be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80094c2:	f7f6 fe5d 	bl	8000180 <__adddf3>
 80094c6:	4b1a      	ldr	r3, [pc, #104]	; (8009530 <__ieee754_pow+0x3d8>)
 80094c8:	4682      	mov	sl, r0
 80094ca:	4299      	cmp	r1, r3
 80094cc:	460f      	mov	r7, r1
 80094ce:	460e      	mov	r6, r1
 80094d0:	f340 82e1 	ble.w	8009a96 <__ieee754_pow+0x93e>
 80094d4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80094d8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80094dc:	4303      	orrs	r3, r0
 80094de:	f000 81db 	beq.w	8009898 <__ieee754_pow+0x740>
 80094e2:	a30d      	add	r3, pc, #52	; (adr r3, 8009518 <__ieee754_pow+0x3c0>)
 80094e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094ec:	f7f6 fffe 	bl	80004ec <__aeabi_dmul>
 80094f0:	a309      	add	r3, pc, #36	; (adr r3, 8009518 <__ieee754_pow+0x3c0>)
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	e6c4      	b.n	8009282 <__ieee754_pow+0x12a>
 80094f8:	60000000 	.word	0x60000000
 80094fc:	3ff71547 	.word	0x3ff71547
 8009500:	f85ddf44 	.word	0xf85ddf44
 8009504:	3e54ae0b 	.word	0x3e54ae0b
 8009508:	55555555 	.word	0x55555555
 800950c:	3fd55555 	.word	0x3fd55555
 8009510:	652b82fe 	.word	0x652b82fe
 8009514:	3ff71547 	.word	0x3ff71547
 8009518:	8800759c 	.word	0x8800759c
 800951c:	7e37e43c 	.word	0x7e37e43c
 8009520:	3ff00000 	.word	0x3ff00000
 8009524:	3fd00000 	.word	0x3fd00000
 8009528:	3fe00000 	.word	0x3fe00000
 800952c:	bff00000 	.word	0xbff00000
 8009530:	408fffff 	.word	0x408fffff
 8009534:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009538:	f04f 0200 	mov.w	r2, #0
 800953c:	da08      	bge.n	8009550 <__ieee754_pow+0x3f8>
 800953e:	4658      	mov	r0, fp
 8009540:	4bcd      	ldr	r3, [pc, #820]	; (8009878 <__ieee754_pow+0x720>)
 8009542:	4661      	mov	r1, ip
 8009544:	f7f6 ffd2 	bl	80004ec <__aeabi_dmul>
 8009548:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800954c:	4683      	mov	fp, r0
 800954e:	460c      	mov	r4, r1
 8009550:	1523      	asrs	r3, r4, #20
 8009552:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009556:	4413      	add	r3, r2
 8009558:	930c      	str	r3, [sp, #48]	; 0x30
 800955a:	4bc8      	ldr	r3, [pc, #800]	; (800987c <__ieee754_pow+0x724>)
 800955c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009560:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009564:	429c      	cmp	r4, r3
 8009566:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800956a:	dd08      	ble.n	800957e <__ieee754_pow+0x426>
 800956c:	4bc4      	ldr	r3, [pc, #784]	; (8009880 <__ieee754_pow+0x728>)
 800956e:	429c      	cmp	r4, r3
 8009570:	f340 815b 	ble.w	800982a <__ieee754_pow+0x6d2>
 8009574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009576:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800957a:	3301      	adds	r3, #1
 800957c:	930c      	str	r3, [sp, #48]	; 0x30
 800957e:	f04f 0800 	mov.w	r8, #0
 8009582:	4658      	mov	r0, fp
 8009584:	4629      	mov	r1, r5
 8009586:	4bbf      	ldr	r3, [pc, #764]	; (8009884 <__ieee754_pow+0x72c>)
 8009588:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800958c:	444b      	add	r3, r9
 800958e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009592:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009596:	461a      	mov	r2, r3
 8009598:	4623      	mov	r3, r4
 800959a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800959e:	f7f6 fded 	bl	800017c <__aeabi_dsub>
 80095a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80095a6:	4606      	mov	r6, r0
 80095a8:	460f      	mov	r7, r1
 80095aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095ae:	f7f6 fde7 	bl	8000180 <__adddf3>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	2000      	movs	r0, #0
 80095b8:	49b3      	ldr	r1, [pc, #716]	; (8009888 <__ieee754_pow+0x730>)
 80095ba:	f7f7 f8c1 	bl	8000740 <__aeabi_ddiv>
 80095be:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	4630      	mov	r0, r6
 80095c8:	4639      	mov	r1, r7
 80095ca:	f7f6 ff8f 	bl	80004ec <__aeabi_dmul>
 80095ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80095d2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80095d6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80095da:	2300      	movs	r3, #0
 80095dc:	2200      	movs	r2, #0
 80095de:	106d      	asrs	r5, r5, #1
 80095e0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80095ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80095ee:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80095f2:	4650      	mov	r0, sl
 80095f4:	4659      	mov	r1, fp
 80095f6:	4614      	mov	r4, r2
 80095f8:	461d      	mov	r5, r3
 80095fa:	f7f6 ff77 	bl	80004ec <__aeabi_dmul>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	4630      	mov	r0, r6
 8009604:	4639      	mov	r1, r7
 8009606:	f7f6 fdb9 	bl	800017c <__aeabi_dsub>
 800960a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800960e:	4606      	mov	r6, r0
 8009610:	460f      	mov	r7, r1
 8009612:	4620      	mov	r0, r4
 8009614:	4629      	mov	r1, r5
 8009616:	f7f6 fdb1 	bl	800017c <__aeabi_dsub>
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009622:	f7f6 fdab 	bl	800017c <__aeabi_dsub>
 8009626:	4652      	mov	r2, sl
 8009628:	465b      	mov	r3, fp
 800962a:	f7f6 ff5f 	bl	80004ec <__aeabi_dmul>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	4630      	mov	r0, r6
 8009634:	4639      	mov	r1, r7
 8009636:	f7f6 fda1 	bl	800017c <__aeabi_dsub>
 800963a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800963e:	f7f6 ff55 	bl	80004ec <__aeabi_dmul>
 8009642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009646:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800964a:	4610      	mov	r0, r2
 800964c:	4619      	mov	r1, r3
 800964e:	f7f6 ff4d 	bl	80004ec <__aeabi_dmul>
 8009652:	a377      	add	r3, pc, #476	; (adr r3, 8009830 <__ieee754_pow+0x6d8>)
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	4604      	mov	r4, r0
 800965a:	460d      	mov	r5, r1
 800965c:	f7f6 ff46 	bl	80004ec <__aeabi_dmul>
 8009660:	a375      	add	r3, pc, #468	; (adr r3, 8009838 <__ieee754_pow+0x6e0>)
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	f7f6 fd8b 	bl	8000180 <__adddf3>
 800966a:	4622      	mov	r2, r4
 800966c:	462b      	mov	r3, r5
 800966e:	f7f6 ff3d 	bl	80004ec <__aeabi_dmul>
 8009672:	a373      	add	r3, pc, #460	; (adr r3, 8009840 <__ieee754_pow+0x6e8>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	f7f6 fd82 	bl	8000180 <__adddf3>
 800967c:	4622      	mov	r2, r4
 800967e:	462b      	mov	r3, r5
 8009680:	f7f6 ff34 	bl	80004ec <__aeabi_dmul>
 8009684:	a370      	add	r3, pc, #448	; (adr r3, 8009848 <__ieee754_pow+0x6f0>)
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f7f6 fd79 	bl	8000180 <__adddf3>
 800968e:	4622      	mov	r2, r4
 8009690:	462b      	mov	r3, r5
 8009692:	f7f6 ff2b 	bl	80004ec <__aeabi_dmul>
 8009696:	a36e      	add	r3, pc, #440	; (adr r3, 8009850 <__ieee754_pow+0x6f8>)
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	f7f6 fd70 	bl	8000180 <__adddf3>
 80096a0:	4622      	mov	r2, r4
 80096a2:	462b      	mov	r3, r5
 80096a4:	f7f6 ff22 	bl	80004ec <__aeabi_dmul>
 80096a8:	a36b      	add	r3, pc, #428	; (adr r3, 8009858 <__ieee754_pow+0x700>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f7f6 fd67 	bl	8000180 <__adddf3>
 80096b2:	4622      	mov	r2, r4
 80096b4:	4606      	mov	r6, r0
 80096b6:	460f      	mov	r7, r1
 80096b8:	462b      	mov	r3, r5
 80096ba:	4620      	mov	r0, r4
 80096bc:	4629      	mov	r1, r5
 80096be:	f7f6 ff15 	bl	80004ec <__aeabi_dmul>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4630      	mov	r0, r6
 80096c8:	4639      	mov	r1, r7
 80096ca:	f7f6 ff0f 	bl	80004ec <__aeabi_dmul>
 80096ce:	4604      	mov	r4, r0
 80096d0:	460d      	mov	r5, r1
 80096d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096d6:	4652      	mov	r2, sl
 80096d8:	465b      	mov	r3, fp
 80096da:	f7f6 fd51 	bl	8000180 <__adddf3>
 80096de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80096e2:	f7f6 ff03 	bl	80004ec <__aeabi_dmul>
 80096e6:	4622      	mov	r2, r4
 80096e8:	462b      	mov	r3, r5
 80096ea:	f7f6 fd49 	bl	8000180 <__adddf3>
 80096ee:	4652      	mov	r2, sl
 80096f0:	4606      	mov	r6, r0
 80096f2:	460f      	mov	r7, r1
 80096f4:	465b      	mov	r3, fp
 80096f6:	4650      	mov	r0, sl
 80096f8:	4659      	mov	r1, fp
 80096fa:	f7f6 fef7 	bl	80004ec <__aeabi_dmul>
 80096fe:	2200      	movs	r2, #0
 8009700:	4b62      	ldr	r3, [pc, #392]	; (800988c <__ieee754_pow+0x734>)
 8009702:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009706:	f7f6 fd3b 	bl	8000180 <__adddf3>
 800970a:	4632      	mov	r2, r6
 800970c:	463b      	mov	r3, r7
 800970e:	f7f6 fd37 	bl	8000180 <__adddf3>
 8009712:	9804      	ldr	r0, [sp, #16]
 8009714:	460d      	mov	r5, r1
 8009716:	4604      	mov	r4, r0
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	4650      	mov	r0, sl
 800971e:	4659      	mov	r1, fp
 8009720:	f7f6 fee4 	bl	80004ec <__aeabi_dmul>
 8009724:	2200      	movs	r2, #0
 8009726:	4682      	mov	sl, r0
 8009728:	468b      	mov	fp, r1
 800972a:	4b58      	ldr	r3, [pc, #352]	; (800988c <__ieee754_pow+0x734>)
 800972c:	4620      	mov	r0, r4
 800972e:	4629      	mov	r1, r5
 8009730:	f7f6 fd24 	bl	800017c <__aeabi_dsub>
 8009734:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009738:	f7f6 fd20 	bl	800017c <__aeabi_dsub>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	4630      	mov	r0, r6
 8009742:	4639      	mov	r1, r7
 8009744:	f7f6 fd1a 	bl	800017c <__aeabi_dsub>
 8009748:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800974c:	f7f6 fece 	bl	80004ec <__aeabi_dmul>
 8009750:	4622      	mov	r2, r4
 8009752:	4606      	mov	r6, r0
 8009754:	460f      	mov	r7, r1
 8009756:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800975a:	462b      	mov	r3, r5
 800975c:	f7f6 fec6 	bl	80004ec <__aeabi_dmul>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4630      	mov	r0, r6
 8009766:	4639      	mov	r1, r7
 8009768:	f7f6 fd0a 	bl	8000180 <__adddf3>
 800976c:	4606      	mov	r6, r0
 800976e:	460f      	mov	r7, r1
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4650      	mov	r0, sl
 8009776:	4659      	mov	r1, fp
 8009778:	f7f6 fd02 	bl	8000180 <__adddf3>
 800977c:	a338      	add	r3, pc, #224	; (adr r3, 8009860 <__ieee754_pow+0x708>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	9804      	ldr	r0, [sp, #16]
 8009784:	460d      	mov	r5, r1
 8009786:	4604      	mov	r4, r0
 8009788:	f7f6 feb0 	bl	80004ec <__aeabi_dmul>
 800978c:	4652      	mov	r2, sl
 800978e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009792:	465b      	mov	r3, fp
 8009794:	4620      	mov	r0, r4
 8009796:	4629      	mov	r1, r5
 8009798:	f7f6 fcf0 	bl	800017c <__aeabi_dsub>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4630      	mov	r0, r6
 80097a2:	4639      	mov	r1, r7
 80097a4:	f7f6 fcea 	bl	800017c <__aeabi_dsub>
 80097a8:	a32f      	add	r3, pc, #188	; (adr r3, 8009868 <__ieee754_pow+0x710>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f7f6 fe9d 	bl	80004ec <__aeabi_dmul>
 80097b2:	a32f      	add	r3, pc, #188	; (adr r3, 8009870 <__ieee754_pow+0x718>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	4606      	mov	r6, r0
 80097ba:	460f      	mov	r7, r1
 80097bc:	4620      	mov	r0, r4
 80097be:	4629      	mov	r1, r5
 80097c0:	f7f6 fe94 	bl	80004ec <__aeabi_dmul>
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	4630      	mov	r0, r6
 80097ca:	4639      	mov	r1, r7
 80097cc:	f7f6 fcd8 	bl	8000180 <__adddf3>
 80097d0:	4b2f      	ldr	r3, [pc, #188]	; (8009890 <__ieee754_pow+0x738>)
 80097d2:	444b      	add	r3, r9
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	f7f6 fcd2 	bl	8000180 <__adddf3>
 80097dc:	4604      	mov	r4, r0
 80097de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80097e0:	460d      	mov	r5, r1
 80097e2:	f7f6 fe19 	bl	8000418 <__aeabi_i2d>
 80097e6:	4606      	mov	r6, r0
 80097e8:	460f      	mov	r7, r1
 80097ea:	4b2a      	ldr	r3, [pc, #168]	; (8009894 <__ieee754_pow+0x73c>)
 80097ec:	4622      	mov	r2, r4
 80097ee:	444b      	add	r3, r9
 80097f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097f4:	462b      	mov	r3, r5
 80097f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097fa:	f7f6 fcc1 	bl	8000180 <__adddf3>
 80097fe:	4642      	mov	r2, r8
 8009800:	464b      	mov	r3, r9
 8009802:	f7f6 fcbd 	bl	8000180 <__adddf3>
 8009806:	4632      	mov	r2, r6
 8009808:	463b      	mov	r3, r7
 800980a:	f7f6 fcb9 	bl	8000180 <__adddf3>
 800980e:	9804      	ldr	r0, [sp, #16]
 8009810:	4632      	mov	r2, r6
 8009812:	463b      	mov	r3, r7
 8009814:	4682      	mov	sl, r0
 8009816:	468b      	mov	fp, r1
 8009818:	f7f6 fcb0 	bl	800017c <__aeabi_dsub>
 800981c:	4642      	mov	r2, r8
 800981e:	464b      	mov	r3, r9
 8009820:	f7f6 fcac 	bl	800017c <__aeabi_dsub>
 8009824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009828:	e60b      	b.n	8009442 <__ieee754_pow+0x2ea>
 800982a:	f04f 0801 	mov.w	r8, #1
 800982e:	e6a8      	b.n	8009582 <__ieee754_pow+0x42a>
 8009830:	4a454eef 	.word	0x4a454eef
 8009834:	3fca7e28 	.word	0x3fca7e28
 8009838:	93c9db65 	.word	0x93c9db65
 800983c:	3fcd864a 	.word	0x3fcd864a
 8009840:	a91d4101 	.word	0xa91d4101
 8009844:	3fd17460 	.word	0x3fd17460
 8009848:	518f264d 	.word	0x518f264d
 800984c:	3fd55555 	.word	0x3fd55555
 8009850:	db6fabff 	.word	0xdb6fabff
 8009854:	3fdb6db6 	.word	0x3fdb6db6
 8009858:	33333303 	.word	0x33333303
 800985c:	3fe33333 	.word	0x3fe33333
 8009860:	e0000000 	.word	0xe0000000
 8009864:	3feec709 	.word	0x3feec709
 8009868:	dc3a03fd 	.word	0xdc3a03fd
 800986c:	3feec709 	.word	0x3feec709
 8009870:	145b01f5 	.word	0x145b01f5
 8009874:	be3e2fe0 	.word	0xbe3e2fe0
 8009878:	43400000 	.word	0x43400000
 800987c:	0003988e 	.word	0x0003988e
 8009880:	000bb679 	.word	0x000bb679
 8009884:	0800a6c8 	.word	0x0800a6c8
 8009888:	3ff00000 	.word	0x3ff00000
 800988c:	40080000 	.word	0x40080000
 8009890:	0800a6e8 	.word	0x0800a6e8
 8009894:	0800a6d8 	.word	0x0800a6d8
 8009898:	a39b      	add	r3, pc, #620	; (adr r3, 8009b08 <__ieee754_pow+0x9b0>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	4640      	mov	r0, r8
 80098a0:	4649      	mov	r1, r9
 80098a2:	f7f6 fc6d 	bl	8000180 <__adddf3>
 80098a6:	4622      	mov	r2, r4
 80098a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098ac:	462b      	mov	r3, r5
 80098ae:	4650      	mov	r0, sl
 80098b0:	4639      	mov	r1, r7
 80098b2:	f7f6 fc63 	bl	800017c <__aeabi_dsub>
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098be:	f7f7 f8a5 	bl	8000a0c <__aeabi_dcmpgt>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	f47f ae0d 	bne.w	80094e2 <__ieee754_pow+0x38a>
 80098c8:	4aa3      	ldr	r2, [pc, #652]	; (8009b58 <__ieee754_pow+0xa00>)
 80098ca:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80098ce:	4293      	cmp	r3, r2
 80098d0:	f340 8103 	ble.w	8009ada <__ieee754_pow+0x982>
 80098d4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80098d8:	2000      	movs	r0, #0
 80098da:	151b      	asrs	r3, r3, #20
 80098dc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80098e0:	fa4a f303 	asr.w	r3, sl, r3
 80098e4:	4433      	add	r3, r6
 80098e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80098ea:	4f9c      	ldr	r7, [pc, #624]	; (8009b5c <__ieee754_pow+0xa04>)
 80098ec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80098f0:	4117      	asrs	r7, r2
 80098f2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80098f6:	ea23 0107 	bic.w	r1, r3, r7
 80098fa:	f1c2 0214 	rsb	r2, r2, #20
 80098fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009902:	fa4a fa02 	asr.w	sl, sl, r2
 8009906:	2e00      	cmp	r6, #0
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4620      	mov	r0, r4
 800990e:	4629      	mov	r1, r5
 8009910:	bfb8      	it	lt
 8009912:	f1ca 0a00 	rsblt	sl, sl, #0
 8009916:	f7f6 fc31 	bl	800017c <__aeabi_dsub>
 800991a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800991e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009922:	4642      	mov	r2, r8
 8009924:	464b      	mov	r3, r9
 8009926:	f7f6 fc2b 	bl	8000180 <__adddf3>
 800992a:	a379      	add	r3, pc, #484	; (adr r3, 8009b10 <__ieee754_pow+0x9b8>)
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	2000      	movs	r0, #0
 8009932:	460d      	mov	r5, r1
 8009934:	4604      	mov	r4, r0
 8009936:	f7f6 fdd9 	bl	80004ec <__aeabi_dmul>
 800993a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800993e:	4606      	mov	r6, r0
 8009940:	460f      	mov	r7, r1
 8009942:	4620      	mov	r0, r4
 8009944:	4629      	mov	r1, r5
 8009946:	f7f6 fc19 	bl	800017c <__aeabi_dsub>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	4640      	mov	r0, r8
 8009950:	4649      	mov	r1, r9
 8009952:	f7f6 fc13 	bl	800017c <__aeabi_dsub>
 8009956:	a370      	add	r3, pc, #448	; (adr r3, 8009b18 <__ieee754_pow+0x9c0>)
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f7f6 fdc6 	bl	80004ec <__aeabi_dmul>
 8009960:	a36f      	add	r3, pc, #444	; (adr r3, 8009b20 <__ieee754_pow+0x9c8>)
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	4680      	mov	r8, r0
 8009968:	4689      	mov	r9, r1
 800996a:	4620      	mov	r0, r4
 800996c:	4629      	mov	r1, r5
 800996e:	f7f6 fdbd 	bl	80004ec <__aeabi_dmul>
 8009972:	4602      	mov	r2, r0
 8009974:	460b      	mov	r3, r1
 8009976:	4640      	mov	r0, r8
 8009978:	4649      	mov	r1, r9
 800997a:	f7f6 fc01 	bl	8000180 <__adddf3>
 800997e:	4604      	mov	r4, r0
 8009980:	460d      	mov	r5, r1
 8009982:	4602      	mov	r2, r0
 8009984:	460b      	mov	r3, r1
 8009986:	4630      	mov	r0, r6
 8009988:	4639      	mov	r1, r7
 800998a:	f7f6 fbf9 	bl	8000180 <__adddf3>
 800998e:	4632      	mov	r2, r6
 8009990:	463b      	mov	r3, r7
 8009992:	4680      	mov	r8, r0
 8009994:	4689      	mov	r9, r1
 8009996:	f7f6 fbf1 	bl	800017c <__aeabi_dsub>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	4620      	mov	r0, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	f7f6 fbeb 	bl	800017c <__aeabi_dsub>
 80099a6:	4642      	mov	r2, r8
 80099a8:	4606      	mov	r6, r0
 80099aa:	460f      	mov	r7, r1
 80099ac:	464b      	mov	r3, r9
 80099ae:	4640      	mov	r0, r8
 80099b0:	4649      	mov	r1, r9
 80099b2:	f7f6 fd9b 	bl	80004ec <__aeabi_dmul>
 80099b6:	a35c      	add	r3, pc, #368	; (adr r3, 8009b28 <__ieee754_pow+0x9d0>)
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	4604      	mov	r4, r0
 80099be:	460d      	mov	r5, r1
 80099c0:	f7f6 fd94 	bl	80004ec <__aeabi_dmul>
 80099c4:	a35a      	add	r3, pc, #360	; (adr r3, 8009b30 <__ieee754_pow+0x9d8>)
 80099c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ca:	f7f6 fbd7 	bl	800017c <__aeabi_dsub>
 80099ce:	4622      	mov	r2, r4
 80099d0:	462b      	mov	r3, r5
 80099d2:	f7f6 fd8b 	bl	80004ec <__aeabi_dmul>
 80099d6:	a358      	add	r3, pc, #352	; (adr r3, 8009b38 <__ieee754_pow+0x9e0>)
 80099d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099dc:	f7f6 fbd0 	bl	8000180 <__adddf3>
 80099e0:	4622      	mov	r2, r4
 80099e2:	462b      	mov	r3, r5
 80099e4:	f7f6 fd82 	bl	80004ec <__aeabi_dmul>
 80099e8:	a355      	add	r3, pc, #340	; (adr r3, 8009b40 <__ieee754_pow+0x9e8>)
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	f7f6 fbc5 	bl	800017c <__aeabi_dsub>
 80099f2:	4622      	mov	r2, r4
 80099f4:	462b      	mov	r3, r5
 80099f6:	f7f6 fd79 	bl	80004ec <__aeabi_dmul>
 80099fa:	a353      	add	r3, pc, #332	; (adr r3, 8009b48 <__ieee754_pow+0x9f0>)
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	f7f6 fbbe 	bl	8000180 <__adddf3>
 8009a04:	4622      	mov	r2, r4
 8009a06:	462b      	mov	r3, r5
 8009a08:	f7f6 fd70 	bl	80004ec <__aeabi_dmul>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4640      	mov	r0, r8
 8009a12:	4649      	mov	r1, r9
 8009a14:	f7f6 fbb2 	bl	800017c <__aeabi_dsub>
 8009a18:	4604      	mov	r4, r0
 8009a1a:	460d      	mov	r5, r1
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4640      	mov	r0, r8
 8009a22:	4649      	mov	r1, r9
 8009a24:	f7f6 fd62 	bl	80004ec <__aeabi_dmul>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f7f6 fba1 	bl	800017c <__aeabi_dsub>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a42:	f7f6 fe7d 	bl	8000740 <__aeabi_ddiv>
 8009a46:	4632      	mov	r2, r6
 8009a48:	4604      	mov	r4, r0
 8009a4a:	460d      	mov	r5, r1
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	4640      	mov	r0, r8
 8009a50:	4649      	mov	r1, r9
 8009a52:	f7f6 fd4b 	bl	80004ec <__aeabi_dmul>
 8009a56:	4632      	mov	r2, r6
 8009a58:	463b      	mov	r3, r7
 8009a5a:	f7f6 fb91 	bl	8000180 <__adddf3>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4620      	mov	r0, r4
 8009a64:	4629      	mov	r1, r5
 8009a66:	f7f6 fb89 	bl	800017c <__aeabi_dsub>
 8009a6a:	4642      	mov	r2, r8
 8009a6c:	464b      	mov	r3, r9
 8009a6e:	f7f6 fb85 	bl	800017c <__aeabi_dsub>
 8009a72:	4602      	mov	r2, r0
 8009a74:	460b      	mov	r3, r1
 8009a76:	2000      	movs	r0, #0
 8009a78:	4939      	ldr	r1, [pc, #228]	; (8009b60 <__ieee754_pow+0xa08>)
 8009a7a:	f7f6 fb7f 	bl	800017c <__aeabi_dsub>
 8009a7e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009a82:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009a86:	da2b      	bge.n	8009ae0 <__ieee754_pow+0x988>
 8009a88:	4652      	mov	r2, sl
 8009a8a:	f000 f9b9 	bl	8009e00 <scalbn>
 8009a8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a92:	f7ff bbf6 	b.w	8009282 <__ieee754_pow+0x12a>
 8009a96:	4b33      	ldr	r3, [pc, #204]	; (8009b64 <__ieee754_pow+0xa0c>)
 8009a98:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009a9c:	429f      	cmp	r7, r3
 8009a9e:	f77f af13 	ble.w	80098c8 <__ieee754_pow+0x770>
 8009aa2:	4b31      	ldr	r3, [pc, #196]	; (8009b68 <__ieee754_pow+0xa10>)
 8009aa4:	440b      	add	r3, r1
 8009aa6:	4303      	orrs	r3, r0
 8009aa8:	d00b      	beq.n	8009ac2 <__ieee754_pow+0x96a>
 8009aaa:	a329      	add	r3, pc, #164	; (adr r3, 8009b50 <__ieee754_pow+0x9f8>)
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ab4:	f7f6 fd1a 	bl	80004ec <__aeabi_dmul>
 8009ab8:	a325      	add	r3, pc, #148	; (adr r3, 8009b50 <__ieee754_pow+0x9f8>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7ff bbe0 	b.w	8009282 <__ieee754_pow+0x12a>
 8009ac2:	4622      	mov	r2, r4
 8009ac4:	462b      	mov	r3, r5
 8009ac6:	f7f6 fb59 	bl	800017c <__aeabi_dsub>
 8009aca:	4642      	mov	r2, r8
 8009acc:	464b      	mov	r3, r9
 8009ace:	f7f6 ff93 	bl	80009f8 <__aeabi_dcmpge>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	f43f aef8 	beq.w	80098c8 <__ieee754_pow+0x770>
 8009ad8:	e7e7      	b.n	8009aaa <__ieee754_pow+0x952>
 8009ada:	f04f 0a00 	mov.w	sl, #0
 8009ade:	e71e      	b.n	800991e <__ieee754_pow+0x7c6>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	e7d4      	b.n	8009a8e <__ieee754_pow+0x936>
 8009ae4:	f04f 0b00 	mov.w	fp, #0
 8009ae8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009b60 <__ieee754_pow+0xa08>
 8009aec:	f7ff bb95 	b.w	800921a <__ieee754_pow+0xc2>
 8009af0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009af4:	f7ff bb91 	b.w	800921a <__ieee754_pow+0xc2>
 8009af8:	4638      	mov	r0, r7
 8009afa:	4641      	mov	r1, r8
 8009afc:	f7ff bbc3 	b.w	8009286 <__ieee754_pow+0x12e>
 8009b00:	9200      	str	r2, [sp, #0]
 8009b02:	f7ff bb9f 	b.w	8009244 <__ieee754_pow+0xec>
 8009b06:	bf00      	nop
 8009b08:	652b82fe 	.word	0x652b82fe
 8009b0c:	3c971547 	.word	0x3c971547
 8009b10:	00000000 	.word	0x00000000
 8009b14:	3fe62e43 	.word	0x3fe62e43
 8009b18:	fefa39ef 	.word	0xfefa39ef
 8009b1c:	3fe62e42 	.word	0x3fe62e42
 8009b20:	0ca86c39 	.word	0x0ca86c39
 8009b24:	be205c61 	.word	0xbe205c61
 8009b28:	72bea4d0 	.word	0x72bea4d0
 8009b2c:	3e663769 	.word	0x3e663769
 8009b30:	c5d26bf1 	.word	0xc5d26bf1
 8009b34:	3ebbbd41 	.word	0x3ebbbd41
 8009b38:	af25de2c 	.word	0xaf25de2c
 8009b3c:	3f11566a 	.word	0x3f11566a
 8009b40:	16bebd93 	.word	0x16bebd93
 8009b44:	3f66c16c 	.word	0x3f66c16c
 8009b48:	5555553e 	.word	0x5555553e
 8009b4c:	3fc55555 	.word	0x3fc55555
 8009b50:	c2f8f359 	.word	0xc2f8f359
 8009b54:	01a56e1f 	.word	0x01a56e1f
 8009b58:	3fe00000 	.word	0x3fe00000
 8009b5c:	000fffff 	.word	0x000fffff
 8009b60:	3ff00000 	.word	0x3ff00000
 8009b64:	4090cbff 	.word	0x4090cbff
 8009b68:	3f6f3400 	.word	0x3f6f3400

08009b6c <__ieee754_sqrt>:
 8009b6c:	4b54      	ldr	r3, [pc, #336]	; (8009cc0 <__ieee754_sqrt+0x154>)
 8009b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b72:	438b      	bics	r3, r1
 8009b74:	4606      	mov	r6, r0
 8009b76:	460d      	mov	r5, r1
 8009b78:	460a      	mov	r2, r1
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	d10f      	bne.n	8009b9e <__ieee754_sqrt+0x32>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	f7f6 fcb3 	bl	80004ec <__aeabi_dmul>
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	f7f6 faf7 	bl	8000180 <__adddf3>
 8009b92:	4606      	mov	r6, r0
 8009b94:	460d      	mov	r5, r1
 8009b96:	4630      	mov	r0, r6
 8009b98:	4629      	mov	r1, r5
 8009b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b9e:	2900      	cmp	r1, #0
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	dc0e      	bgt.n	8009bc4 <__ieee754_sqrt+0x58>
 8009ba6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009baa:	ea5c 0707 	orrs.w	r7, ip, r7
 8009bae:	d0f2      	beq.n	8009b96 <__ieee754_sqrt+0x2a>
 8009bb0:	b141      	cbz	r1, 8009bc4 <__ieee754_sqrt+0x58>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	f7f6 fae1 	bl	800017c <__aeabi_dsub>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	f7f6 fdbf 	bl	8000740 <__aeabi_ddiv>
 8009bc2:	e7e6      	b.n	8009b92 <__ieee754_sqrt+0x26>
 8009bc4:	1512      	asrs	r2, r2, #20
 8009bc6:	d074      	beq.n	8009cb2 <__ieee754_sqrt+0x146>
 8009bc8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009bcc:	07d5      	lsls	r5, r2, #31
 8009bce:	f04f 0500 	mov.w	r5, #0
 8009bd2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009bd6:	bf48      	it	mi
 8009bd8:	0fd9      	lsrmi	r1, r3, #31
 8009bda:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009bde:	bf44      	itt	mi
 8009be0:	005b      	lslmi	r3, r3, #1
 8009be2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8009be6:	1051      	asrs	r1, r2, #1
 8009be8:	0fda      	lsrs	r2, r3, #31
 8009bea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8009bee:	4628      	mov	r0, r5
 8009bf0:	2216      	movs	r2, #22
 8009bf2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009bf6:	005b      	lsls	r3, r3, #1
 8009bf8:	1987      	adds	r7, r0, r6
 8009bfa:	42a7      	cmp	r7, r4
 8009bfc:	bfde      	ittt	le
 8009bfe:	19b8      	addle	r0, r7, r6
 8009c00:	1be4      	suble	r4, r4, r7
 8009c02:	19ad      	addle	r5, r5, r6
 8009c04:	0fdf      	lsrs	r7, r3, #31
 8009c06:	3a01      	subs	r2, #1
 8009c08:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8009c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c10:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009c14:	d1f0      	bne.n	8009bf8 <__ieee754_sqrt+0x8c>
 8009c16:	f04f 0c20 	mov.w	ip, #32
 8009c1a:	4696      	mov	lr, r2
 8009c1c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009c20:	4284      	cmp	r4, r0
 8009c22:	eb06 070e 	add.w	r7, r6, lr
 8009c26:	dc02      	bgt.n	8009c2e <__ieee754_sqrt+0xc2>
 8009c28:	d112      	bne.n	8009c50 <__ieee754_sqrt+0xe4>
 8009c2a:	429f      	cmp	r7, r3
 8009c2c:	d810      	bhi.n	8009c50 <__ieee754_sqrt+0xe4>
 8009c2e:	2f00      	cmp	r7, #0
 8009c30:	eb07 0e06 	add.w	lr, r7, r6
 8009c34:	da42      	bge.n	8009cbc <__ieee754_sqrt+0x150>
 8009c36:	f1be 0f00 	cmp.w	lr, #0
 8009c3a:	db3f      	blt.n	8009cbc <__ieee754_sqrt+0x150>
 8009c3c:	f100 0801 	add.w	r8, r0, #1
 8009c40:	1a24      	subs	r4, r4, r0
 8009c42:	4640      	mov	r0, r8
 8009c44:	429f      	cmp	r7, r3
 8009c46:	bf88      	it	hi
 8009c48:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8009c4c:	1bdb      	subs	r3, r3, r7
 8009c4e:	4432      	add	r2, r6
 8009c50:	0064      	lsls	r4, r4, #1
 8009c52:	f1bc 0c01 	subs.w	ip, ip, #1
 8009c56:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8009c5a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009c5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c62:	d1dd      	bne.n	8009c20 <__ieee754_sqrt+0xb4>
 8009c64:	4323      	orrs	r3, r4
 8009c66:	d006      	beq.n	8009c76 <__ieee754_sqrt+0x10a>
 8009c68:	1c54      	adds	r4, r2, #1
 8009c6a:	bf0b      	itete	eq
 8009c6c:	4662      	moveq	r2, ip
 8009c6e:	3201      	addne	r2, #1
 8009c70:	3501      	addeq	r5, #1
 8009c72:	f022 0201 	bicne.w	r2, r2, #1
 8009c76:	106b      	asrs	r3, r5, #1
 8009c78:	0852      	lsrs	r2, r2, #1
 8009c7a:	07e8      	lsls	r0, r5, #31
 8009c7c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009c80:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009c84:	bf48      	it	mi
 8009c86:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009c8a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8009c8e:	4616      	mov	r6, r2
 8009c90:	e781      	b.n	8009b96 <__ieee754_sqrt+0x2a>
 8009c92:	0adc      	lsrs	r4, r3, #11
 8009c94:	3915      	subs	r1, #21
 8009c96:	055b      	lsls	r3, r3, #21
 8009c98:	2c00      	cmp	r4, #0
 8009c9a:	d0fa      	beq.n	8009c92 <__ieee754_sqrt+0x126>
 8009c9c:	02e6      	lsls	r6, r4, #11
 8009c9e:	d50a      	bpl.n	8009cb6 <__ieee754_sqrt+0x14a>
 8009ca0:	f1c2 0020 	rsb	r0, r2, #32
 8009ca4:	fa23 f000 	lsr.w	r0, r3, r0
 8009ca8:	1e55      	subs	r5, r2, #1
 8009caa:	4093      	lsls	r3, r2
 8009cac:	4304      	orrs	r4, r0
 8009cae:	1b4a      	subs	r2, r1, r5
 8009cb0:	e78a      	b.n	8009bc8 <__ieee754_sqrt+0x5c>
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	e7f0      	b.n	8009c98 <__ieee754_sqrt+0x12c>
 8009cb6:	0064      	lsls	r4, r4, #1
 8009cb8:	3201      	adds	r2, #1
 8009cba:	e7ef      	b.n	8009c9c <__ieee754_sqrt+0x130>
 8009cbc:	4680      	mov	r8, r0
 8009cbe:	e7bf      	b.n	8009c40 <__ieee754_sqrt+0xd4>
 8009cc0:	7ff00000 	.word	0x7ff00000

08009cc4 <fabs>:
 8009cc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4770      	bx	lr

08009ccc <finite>:
 8009ccc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8009cd0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8009cd4:	0fc0      	lsrs	r0, r0, #31
 8009cd6:	4770      	bx	lr

08009cd8 <matherr>:
 8009cd8:	2000      	movs	r0, #0
 8009cda:	4770      	bx	lr

08009cdc <nan>:
 8009cdc:	2000      	movs	r0, #0
 8009cde:	4901      	ldr	r1, [pc, #4]	; (8009ce4 <nan+0x8>)
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	7ff80000 	.word	0x7ff80000

08009ce8 <rint>:
 8009ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009cee:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8009cf2:	f1bc 0f13 	cmp.w	ip, #19
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	460d      	mov	r5, r1
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8009d02:	dc5a      	bgt.n	8009dba <rint+0xd2>
 8009d04:	f1bc 0f00 	cmp.w	ip, #0
 8009d08:	da2b      	bge.n	8009d62 <rint+0x7a>
 8009d0a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009d0e:	4302      	orrs	r2, r0
 8009d10:	d023      	beq.n	8009d5a <rint+0x72>
 8009d12:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009d16:	4302      	orrs	r2, r0
 8009d18:	4256      	negs	r6, r2
 8009d1a:	4316      	orrs	r6, r2
 8009d1c:	0c4b      	lsrs	r3, r1, #17
 8009d1e:	0b36      	lsrs	r6, r6, #12
 8009d20:	4934      	ldr	r1, [pc, #208]	; (8009df4 <rint+0x10c>)
 8009d22:	045b      	lsls	r3, r3, #17
 8009d24:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8009d28:	ea46 0503 	orr.w	r5, r6, r3
 8009d2c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8009d30:	4602      	mov	r2, r0
 8009d32:	462b      	mov	r3, r5
 8009d34:	e9d1 4500 	ldrd	r4, r5, [r1]
 8009d38:	4620      	mov	r0, r4
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	f7f6 fa20 	bl	8000180 <__adddf3>
 8009d40:	e9cd 0100 	strd	r0, r1, [sp]
 8009d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d48:	462b      	mov	r3, r5
 8009d4a:	4622      	mov	r2, r4
 8009d4c:	f7f6 fa16 	bl	800017c <__aeabi_dsub>
 8009d50:	4604      	mov	r4, r0
 8009d52:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d56:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	b003      	add	sp, #12
 8009d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d62:	4a25      	ldr	r2, [pc, #148]	; (8009df8 <rint+0x110>)
 8009d64:	fa42 f20c 	asr.w	r2, r2, ip
 8009d68:	4011      	ands	r1, r2
 8009d6a:	4301      	orrs	r1, r0
 8009d6c:	d0f5      	beq.n	8009d5a <rint+0x72>
 8009d6e:	0852      	lsrs	r2, r2, #1
 8009d70:	ea05 0102 	and.w	r1, r5, r2
 8009d74:	ea50 0601 	orrs.w	r6, r0, r1
 8009d78:	d00c      	beq.n	8009d94 <rint+0xac>
 8009d7a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d7e:	f1bc 0f13 	cmp.w	ip, #19
 8009d82:	bf0c      	ite	eq
 8009d84:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8009d88:	2600      	movne	r6, #0
 8009d8a:	ea25 0202 	bic.w	r2, r5, r2
 8009d8e:	fa43 f30c 	asr.w	r3, r3, ip
 8009d92:	4313      	orrs	r3, r2
 8009d94:	4917      	ldr	r1, [pc, #92]	; (8009df4 <rint+0x10c>)
 8009d96:	4632      	mov	r2, r6
 8009d98:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8009d9c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009da0:	4620      	mov	r0, r4
 8009da2:	4629      	mov	r1, r5
 8009da4:	f7f6 f9ec 	bl	8000180 <__adddf3>
 8009da8:	e9cd 0100 	strd	r0, r1, [sp]
 8009dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009db0:	4622      	mov	r2, r4
 8009db2:	462b      	mov	r3, r5
 8009db4:	f7f6 f9e2 	bl	800017c <__aeabi_dsub>
 8009db8:	e008      	b.n	8009dcc <rint+0xe4>
 8009dba:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8009dbe:	dd08      	ble.n	8009dd2 <rint+0xea>
 8009dc0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8009dc4:	d1c9      	bne.n	8009d5a <rint+0x72>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	f7f6 f9da 	bl	8000180 <__adddf3>
 8009dcc:	4604      	mov	r4, r0
 8009dce:	460d      	mov	r5, r1
 8009dd0:	e7c3      	b.n	8009d5a <rint+0x72>
 8009dd2:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8009dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dda:	40ca      	lsrs	r2, r1
 8009ddc:	4210      	tst	r0, r2
 8009dde:	d0bc      	beq.n	8009d5a <rint+0x72>
 8009de0:	0852      	lsrs	r2, r2, #1
 8009de2:	4210      	tst	r0, r2
 8009de4:	bf1f      	itttt	ne
 8009de6:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8009dea:	ea20 0202 	bicne.w	r2, r0, r2
 8009dee:	410e      	asrne	r6, r1
 8009df0:	4316      	orrne	r6, r2
 8009df2:	e7cf      	b.n	8009d94 <rint+0xac>
 8009df4:	0800a6f8 	.word	0x0800a6f8
 8009df8:	000fffff 	.word	0x000fffff
 8009dfc:	00000000 	.word	0x00000000

08009e00 <scalbn>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	4616      	mov	r6, r2
 8009e04:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009e08:	4604      	mov	r4, r0
 8009e0a:	460d      	mov	r5, r1
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	b982      	cbnz	r2, 8009e32 <scalbn+0x32>
 8009e10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e14:	4303      	orrs	r3, r0
 8009e16:	d034      	beq.n	8009e82 <scalbn+0x82>
 8009e18:	4b2d      	ldr	r3, [pc, #180]	; (8009ed0 <scalbn+0xd0>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f7f6 fb66 	bl	80004ec <__aeabi_dmul>
 8009e20:	4b2c      	ldr	r3, [pc, #176]	; (8009ed4 <scalbn+0xd4>)
 8009e22:	4604      	mov	r4, r0
 8009e24:	429e      	cmp	r6, r3
 8009e26:	460d      	mov	r5, r1
 8009e28:	da0d      	bge.n	8009e46 <scalbn+0x46>
 8009e2a:	a325      	add	r3, pc, #148	; (adr r3, 8009ec0 <scalbn+0xc0>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	e01c      	b.n	8009e6c <scalbn+0x6c>
 8009e32:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8009e36:	42ba      	cmp	r2, r7
 8009e38:	d109      	bne.n	8009e4e <scalbn+0x4e>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	f7f6 f9a0 	bl	8000180 <__adddf3>
 8009e40:	4604      	mov	r4, r0
 8009e42:	460d      	mov	r5, r1
 8009e44:	e01d      	b.n	8009e82 <scalbn+0x82>
 8009e46:	460b      	mov	r3, r1
 8009e48:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009e4c:	3a36      	subs	r2, #54	; 0x36
 8009e4e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009e52:	4432      	add	r2, r6
 8009e54:	428a      	cmp	r2, r1
 8009e56:	dd0c      	ble.n	8009e72 <scalbn+0x72>
 8009e58:	4622      	mov	r2, r4
 8009e5a:	462b      	mov	r3, r5
 8009e5c:	a11a      	add	r1, pc, #104	; (adr r1, 8009ec8 <scalbn+0xc8>)
 8009e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e62:	f000 f83b 	bl	8009edc <copysign>
 8009e66:	a318      	add	r3, pc, #96	; (adr r3, 8009ec8 <scalbn+0xc8>)
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	f7f6 fb3e 	bl	80004ec <__aeabi_dmul>
 8009e70:	e7e6      	b.n	8009e40 <scalbn+0x40>
 8009e72:	2a00      	cmp	r2, #0
 8009e74:	dd08      	ble.n	8009e88 <scalbn+0x88>
 8009e76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e7a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e7e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009e82:	4620      	mov	r0, r4
 8009e84:	4629      	mov	r1, r5
 8009e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e88:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009e8c:	da0b      	bge.n	8009ea6 <scalbn+0xa6>
 8009e8e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009e92:	429e      	cmp	r6, r3
 8009e94:	4622      	mov	r2, r4
 8009e96:	462b      	mov	r3, r5
 8009e98:	dce0      	bgt.n	8009e5c <scalbn+0x5c>
 8009e9a:	a109      	add	r1, pc, #36	; (adr r1, 8009ec0 <scalbn+0xc0>)
 8009e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea0:	f000 f81c 	bl	8009edc <copysign>
 8009ea4:	e7c1      	b.n	8009e2a <scalbn+0x2a>
 8009ea6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009eaa:	3236      	adds	r2, #54	; 0x36
 8009eac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009eb0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	2200      	movs	r2, #0
 8009eba:	4b07      	ldr	r3, [pc, #28]	; (8009ed8 <scalbn+0xd8>)
 8009ebc:	e7d6      	b.n	8009e6c <scalbn+0x6c>
 8009ebe:	bf00      	nop
 8009ec0:	c2f8f359 	.word	0xc2f8f359
 8009ec4:	01a56e1f 	.word	0x01a56e1f
 8009ec8:	8800759c 	.word	0x8800759c
 8009ecc:	7e37e43c 	.word	0x7e37e43c
 8009ed0:	43500000 	.word	0x43500000
 8009ed4:	ffff3cb0 	.word	0xffff3cb0
 8009ed8:	3c900000 	.word	0x3c900000

08009edc <copysign>:
 8009edc:	b530      	push	{r4, r5, lr}
 8009ede:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009ee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ee6:	ea42 0503 	orr.w	r5, r2, r3
 8009eea:	4629      	mov	r1, r5
 8009eec:	bd30      	pop	{r4, r5, pc}
	...

08009ef0 <_init>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	bf00      	nop
 8009ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef6:	bc08      	pop	{r3}
 8009ef8:	469e      	mov	lr, r3
 8009efa:	4770      	bx	lr

08009efc <_fini>:
 8009efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efe:	bf00      	nop
 8009f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f02:	bc08      	pop	{r3}
 8009f04:	469e      	mov	lr, r3
 8009f06:	4770      	bx	lr
