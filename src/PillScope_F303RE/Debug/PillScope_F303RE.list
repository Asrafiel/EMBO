
PillScope_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d98  08014df8  08014df8  00024df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b90  08015b90  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08015b90  08015b90  00025b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b98  08015b98  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b98  08015b98  00025b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b9c  08015b9c  00025b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08015ba0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e138  200001f8  08015d98  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e330  08015d98  0003e330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032e2e  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000618e  00000000  00000000  00063056  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002348  00000000  00000000  000691e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020b0  00000000  00000000  0006b530  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cbc0  00000000  00000000  0006d5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fb62  00000000  00000000  0009a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7053  00000000  00000000  000b9d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b0d55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a200  00000000  00000000  001b0dd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014ddc 	.word	0x08014ddc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08014ddc 	.word	0x08014ddc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_ADC_REG_SetTriggerEdge>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	60da      	str	r2, [r3, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3330      	adds	r3, #48	; 0x30
 8001014:	4619      	mov	r1, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800101c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001020:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	fa92 f2a2 	rbit	r2, r2
 8001028:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	fab2 f282 	clz	r2, r2
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	40d3      	lsrs	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	211f      	movs	r1, #31
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	401a      	ands	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	0e9b      	lsrs	r3, r3, #26
 8001052:	f003 011f 	and.w	r1, r3, #31
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	431a      	orrs	r2, r3
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001066:	bf00      	nop
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001072:	b480      	push	{r7}
 8001074:	b08d      	sub	sp, #52	; 0x34
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3314      	adds	r3, #20
 8001082:	4619      	mov	r1, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800108e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	fa92 f2a2 	rbit	r2, r2
 8001096:	617a      	str	r2, [r7, #20]
  return result;
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	fab2 f282 	clz	r2, r2
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	40d3      	lsrs	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80010b2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80010b6:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	6a39      	ldr	r1, [r7, #32]
 80010ba:	fa91 f1a1 	rbit	r1, r1
 80010be:	61f9      	str	r1, [r7, #28]
  return result;
 80010c0:	69f9      	ldr	r1, [r7, #28]
 80010c2:	fab1 f181 	clz	r1, r1
 80010c6:	b2c9      	uxtb	r1, r1
 80010c8:	40cb      	lsrs	r3, r1
 80010ca:	2107      	movs	r1, #7
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	401a      	ands	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80010da:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80010de:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010e2:	fa91 f1a1 	rbit	r1, r1
 80010e6:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80010e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010ea:	fab1 f181 	clz	r1, r1
 80010ee:	b2c9      	uxtb	r1, r1
 80010f0:	40cb      	lsrs	r3, r1
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	431a      	orrs	r2, r3
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80010fe:	bf00      	nop
 8001100:	3734      	adds	r7, #52	; 0x34
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001122:	400b      	ands	r3, r1
 8001124:	43db      	mvns	r3, r3
 8001126:	401a      	ands	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0318 	and.w	r3, r3, #24
 800112e:	4908      	ldr	r1, [pc, #32]	; (8001150 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001130:	40d9      	lsrs	r1, r3
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	4019      	ands	r1, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001138:	400b      	ands	r3, r1
 800113a:	431a      	orrs	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	0007fffe 	.word	0x0007fffe

08001154 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, __ADC_MASK_SHIFT(AWDy, ADC_AWD_CRX_REGOFFSET_MASK)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	330c      	adds	r3, #12
 8001164:	4618      	mov	r0, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800116c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001170:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	fa92 f2a2 	rbit	r2, r2
 8001178:	617a      	str	r2, [r7, #20]
  return result;
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	fab2 f282 	clz	r2, r2
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	fa23 f102 	lsr.w	r1, r3, r2
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	f003 0202 	and.w	r2, r3, #2
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4403      	add	r3, r0
 800119a:	61fb      	str	r3, [r7, #28]
                                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));
  
  MODIFY_REG(*preg,
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <LL_ADC_SetAnalogWDMonitChannels+0x70>)
 80011a4:	400b      	ands	r3, r1
 80011a6:	43db      	mvns	r3, r3
 80011a8:	401a      	ands	r2, r3
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	400b      	ands	r3, r1
 80011b0:	431a      	orrs	r2, r3
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80011b6:	bf00      	nop
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	7dc7fffe 	.word	0x7dc7fffe

080011c8 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, __ADC_MASK_SHIFT(AWDy, ADC_AWD_TRX_REGOFFSET_MASK));
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3320      	adds	r3, #32
 80011da:	4619      	mov	r1, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80011e2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80011e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	fa92 f2a2 	rbit	r2, r2
 80011ee:	617a      	str	r2, [r7, #20]
  return result;
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	fab2 f282 	clz	r2, r2
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	40d3      	lsrs	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	0419      	lsls	r1, r3, #16
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	430b      	orrs	r3, r1
 8001210:	431a      	orrs	r2, r3
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8001216:	bf00      	nop
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  /* 1. Set the intermediate state before moving the ADC voltage regulator    */
  /*    to state enable.                                                      */
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	609a      	str	r2, [r3, #8]
  /* 2. Set the final state of ADC voltage regulator enable                   */
  /*    (ADVREGEN bits set to 0x01).                                          */
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800123e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001242:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN_0);
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	605a      	str	r2, [r3, #4]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <LL_DAC_EnableTrigger>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2104      	movs	r1, #4
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	601a      	str	r2, [r3, #0]
          DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <LL_DMA_SetDataTransferDirection+0x48>)
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	461a      	mov	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012c4:	f023 0310 	bic.w	r3, r3, #16
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	3a01      	subs	r2, #1
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <LL_DMA_SetDataTransferDirection+0x48>)
 80012ce:	5c8a      	ldrb	r2, [r1, r2]
 80012d0:	4611      	mov	r1, r2
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	440a      	add	r2, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	08015578 	.word	0x08015578

080012f0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3b01      	subs	r3, #1
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <LL_DMA_SetMode+0x44>)
 8001302:	5cd3      	ldrb	r3, [r2, r3]
 8001304:	461a      	mov	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 0220 	bic.w	r2, r3, #32
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <LL_DMA_SetMode+0x44>)
 8001316:	5ccb      	ldrb	r3, [r1, r3]
 8001318:	4619      	mov	r1, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	440b      	add	r3, r1
 800131e:	4619      	mov	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	08015578 	.word	0x08015578

08001338 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	3b01      	subs	r3, #1
 8001348:	4a0c      	ldr	r2, [pc, #48]	; (800137c <LL_DMA_SetPeriphIncMode+0x44>)
 800134a:	5cd3      	ldrb	r3, [r2, r3]
 800134c:	461a      	mov	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4413      	add	r3, r2
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	3b01      	subs	r3, #1
 800135c:	4907      	ldr	r1, [pc, #28]	; (800137c <LL_DMA_SetPeriphIncMode+0x44>)
 800135e:	5ccb      	ldrb	r3, [r1, r3]
 8001360:	4619      	mov	r1, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	440b      	add	r3, r1
 8001366:	4619      	mov	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	08015578 	.word	0x08015578

08001380 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	3b01      	subs	r3, #1
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <LL_DMA_SetMemoryIncMode+0x44>)
 8001392:	5cd3      	ldrb	r3, [r2, r3]
 8001394:	461a      	mov	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4413      	add	r3, r2
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	4907      	ldr	r1, [pc, #28]	; (80013c4 <LL_DMA_SetMemoryIncMode+0x44>)
 80013a6:	5ccb      	ldrb	r3, [r1, r3]
 80013a8:	4619      	mov	r1, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	440b      	add	r3, r1
 80013ae:	4619      	mov	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	08015578 	.word	0x08015578

080013c8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	4a0c      	ldr	r2, [pc, #48]	; (800140c <LL_DMA_SetPeriphSize+0x44>)
 80013da:	5cd3      	ldrb	r3, [r2, r3]
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <LL_DMA_SetPeriphSize+0x44>)
 80013ee:	5ccb      	ldrb	r3, [r1, r3]
 80013f0:	4619      	mov	r1, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	440b      	add	r3, r1
 80013f6:	4619      	mov	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	08015578 	.word	0x08015578

08001410 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	3b01      	subs	r3, #1
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <LL_DMA_SetMemorySize+0x44>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	461a      	mov	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3b01      	subs	r3, #1
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <LL_DMA_SetMemorySize+0x44>)
 8001436:	5ccb      	ldrb	r3, [r1, r3]
 8001438:	4619      	mov	r1, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	440b      	add	r3, r1
 800143e:	4619      	mov	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	08015578 	.word	0x08015578

08001458 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	3b01      	subs	r3, #1
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800146a:	5cd3      	ldrb	r3, [r2, r3]
 800146c:	461a      	mov	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4413      	add	r3, r2
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	3b01      	subs	r3, #1
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	4619      	mov	r1, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	440b      	add	r3, r1
 8001486:	4619      	mov	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	08015578 	.word	0x08015578

080014a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <LL_RCC_HSI_Enable+0x1c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <LL_RCC_HSI_Enable+0x1c>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <LL_RCC_HSI_IsReady+0x20>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000

080014e4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4904      	ldr	r1, [pc, #16]	; (800150c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000

08001510 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <LL_RCC_SetSysClkSource+0x24>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 0203 	bic.w	r2, r3, #3
 8001520:	4904      	ldr	r1, [pc, #16]	; (8001534 <LL_RCC_SetSysClkSource+0x24>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40021000 	.word	0x40021000

08001538 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <LL_RCC_GetSysClkSource+0x18>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 030c 	and.w	r3, r3, #12
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000

08001554 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <LL_RCC_SetAHBPrescaler+0x24>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001564:	4904      	ldr	r1, [pc, #16]	; (8001578 <LL_RCC_SetAHBPrescaler+0x24>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40021000 	.word	0x40021000

0800157c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800158c:	4904      	ldr	r1, [pc, #16]	; (80015a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000

080015a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015b4:	4904      	ldr	r1, [pc, #16]	; (80015c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40021000 	.word	0x40021000

080015cc <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <LL_RCC_SetUSARTClockSource+0x34>)
 80015d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	0e1b      	lsrs	r3, r3, #24
 80015dc:	2103      	movs	r1, #3
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	401a      	ands	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80015ec:	4904      	ldr	r1, [pc, #16]	; (8001600 <LL_RCC_SetUSARTClockSource+0x34>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <LL_RCC_SetTIMClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMClockSource(uint32_t TIMxSource)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_TIM1SW << (TIMxSource >> 27U)), (TIMxSource & 0x03FFFFFFU));
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <LL_RCC_SetTIMClockSource+0x34>)
 800160e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	0edb      	lsrs	r3, r3, #27
 8001614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	401a      	ands	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8001626:	4904      	ldr	r1, [pc, #16]	; (8001638 <LL_RCC_SetTIMClockSource+0x34>)
 8001628:	4313      	orrs	r3, r2
 800162a:	630b      	str	r3, [r1, #48]	; 0x30
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	40021000 	.word	0x40021000

0800163c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <LL_RCC_PLL_Enable+0x1c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <LL_RCC_PLL_Enable+0x1c>)
 8001646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000

0800165c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <LL_RCC_PLL_IsReady+0x24>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800166c:	bf0c      	ite	eq
 800166e:	2301      	moveq	r3, #1
 8001670:	2300      	movne	r3, #0
 8001672:	b2db      	uxtb	r3, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000

08001684 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001698:	68f9      	ldr	r1, [r7, #12]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	430b      	orrs	r3, r1
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	f023 020f 	bic.w	r2, r3, #15
 80016ac:	4904      	ldr	r1, [pc, #16]	; (80016c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40021000 	.word	0x40021000

080016c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4013      	ands	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40021000 	.word	0x40021000

080016f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016fe:	69da      	ldr	r2, [r3, #28]
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <LL_APB1_GRP1_EnableClock+0x2c>)
 800170a:	69da      	ldr	r2, [r3, #28]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4013      	ands	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40021000 	.word	0x40021000

08001724 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <LL_APB2_GRP1_EnableClock+0x2c>)
 800172e:	699a      	ldr	r2, [r3, #24]
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4313      	orrs	r3, r2
 8001736:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <LL_APB2_GRP1_EnableClock+0x2c>)
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4013      	ands	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40021000 	.word	0x40021000

08001754 <LL_SYSCFG_SetRemapDMA_ADC>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_ADC(uint32_t Remap)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(SYSCFG_BASE + (Remap >> 24U)); 
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0e1b      	lsrs	r3, r3, #24
 8001760:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001764:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, (Remap & 0x00FF0000U) >> 8U, (Remap & 0x0000FFFFU));
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001776:	43db      	mvns	r3, r3
 8001778:	401a      	ands	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	b29b      	uxth	r3, r3
 800177e:	431a      	orrs	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	601a      	str	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_SYSCFG_SetRemapDMA_DAC>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_DAC(uint32_t Remap)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR1, (Remap & 0x00FF0000U) >> 8U, (Remap & 0x0000FF00U));
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80017a4:	43db      	mvns	r3, r3
 80017a6:	401a      	ands	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80017ae:	4904      	ldr	r1, [pc, #16]	; (80017c0 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40010000 	.word	0x40010000

080017c4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <LL_SYSCFG_SetEXTISource+0x58>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	3302      	adds	r3, #2
 80017d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	0c1b      	lsrs	r3, r3, #16
 80017de:	43db      	mvns	r3, r3
 80017e0:	ea02 0103 	and.w	r1, r2, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	0c1b      	lsrs	r3, r3, #16
 80017e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	60bb      	str	r3, [r7, #8]
  return result;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	fab3 f383 	clz	r3, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	fa03 f202 	lsl.w	r2, r3, r2
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <LL_SYSCFG_SetEXTISource+0x58>)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	430a      	orrs	r2, r1
 800180a:	3302      	adds	r3, #2
 800180c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40010000 	.word	0x40010000

08001820 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <LL_FLASH_SetLatency+0x24>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 0207 	bic.w	r2, r3, #7
 8001830:	4904      	ldr	r1, [pc, #16]	; (8001844 <LL_FLASH_SetLatency+0x24>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40022000 	.word	0x40022000

08001848 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <LL_FLASH_GetLatency+0x18>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40022000 	.word	0x40022000

08001864 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	601a      	str	r2, [r3, #0]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	601a      	str	r2, [r3, #0]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_TIM_OC_DisableFast>:
  * @note   OC5FE and OC6FE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d028      	beq.n	8001906 <LL_TIM_OC_DisableFast+0x62>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d023      	beq.n	8001902 <LL_TIM_OC_DisableFast+0x5e>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b10      	cmp	r3, #16
 80018be:	d01e      	beq.n	80018fe <LL_TIM_OC_DisableFast+0x5a>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b40      	cmp	r3, #64	; 0x40
 80018c4:	d019      	beq.n	80018fa <LL_TIM_OC_DisableFast+0x56>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018cc:	d013      	beq.n	80018f6 <LL_TIM_OC_DisableFast+0x52>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d4:	d00d      	beq.n	80018f2 <LL_TIM_OC_DisableFast+0x4e>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018dc:	d007      	beq.n	80018ee <LL_TIM_OC_DisableFast+0x4a>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	d101      	bne.n	80018ea <LL_TIM_OC_DisableFast+0x46>
 80018e6:	2307      	movs	r3, #7
 80018e8:	e00e      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 80018ea:	2308      	movs	r3, #8
 80018ec:	e00c      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 80018ee:	2306      	movs	r3, #6
 80018f0:	e00a      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 80018f2:	2305      	movs	r3, #5
 80018f4:	e008      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e006      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 80018fa:	2303      	movs	r3, #3
 80018fc:	e004      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 80018fe:	2302      	movs	r3, #2
 8001900:	e002      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3318      	adds	r3, #24
 800190e:	4619      	mov	r1, r3
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <LL_TIM_OC_DisableFast+0x9c>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	440b      	add	r3, r1
 8001918:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	4908      	ldr	r1, [pc, #32]	; (8001944 <LL_TIM_OC_DisableFast+0xa0>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	4619      	mov	r1, r3
 8001926:	2304      	movs	r3, #4
 8001928:	408b      	lsls	r3, r1
 800192a:	43db      	mvns	r3, r3
 800192c:	401a      	ands	r2, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	601a      	str	r2, [r3, #0]

}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	08015580 	.word	0x08015580
 8001944:	0801558c 	.word	0x0801558c

08001948 <LL_TIM_OC_EnablePreload>:
  * @note   OC5PE and OC6PE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d028      	beq.n	80019aa <LL_TIM_OC_EnablePreload+0x62>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b04      	cmp	r3, #4
 800195c:	d023      	beq.n	80019a6 <LL_TIM_OC_EnablePreload+0x5e>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b10      	cmp	r3, #16
 8001962:	d01e      	beq.n	80019a2 <LL_TIM_OC_EnablePreload+0x5a>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2b40      	cmp	r3, #64	; 0x40
 8001968:	d019      	beq.n	800199e <LL_TIM_OC_EnablePreload+0x56>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001970:	d013      	beq.n	800199a <LL_TIM_OC_EnablePreload+0x52>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001978:	d00d      	beq.n	8001996 <LL_TIM_OC_EnablePreload+0x4e>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001980:	d007      	beq.n	8001992 <LL_TIM_OC_EnablePreload+0x4a>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d101      	bne.n	800198e <LL_TIM_OC_EnablePreload+0x46>
 800198a:	2307      	movs	r3, #7
 800198c:	e00e      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 800198e:	2308      	movs	r3, #8
 8001990:	e00c      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 8001992:	2306      	movs	r3, #6
 8001994:	e00a      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 8001996:	2305      	movs	r3, #5
 8001998:	e008      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 800199a:	2304      	movs	r3, #4
 800199c:	e006      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 800199e:	2303      	movs	r3, #3
 80019a0:	e004      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e002      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 80019aa:	2300      	movs	r3, #0
 80019ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3318      	adds	r3, #24
 80019b2:	4619      	mov	r1, r3
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <LL_TIM_OC_EnablePreload+0x98>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	440b      	add	r3, r1
 80019bc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <LL_TIM_OC_EnablePreload+0x9c>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	4619      	mov	r1, r3
 80019ca:	2308      	movs	r3, #8
 80019cc:	408b      	lsls	r3, r1
 80019ce:	431a      	orrs	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	601a      	str	r2, [r3, #0]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	08015580 	.word	0x08015580
 80019e4:	0801558c 	.word	0x0801558c

080019e8 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d028      	beq.n	8001a4c <LL_TIM_IC_SetActiveInput+0x64>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d023      	beq.n	8001a48 <LL_TIM_IC_SetActiveInput+0x60>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b10      	cmp	r3, #16
 8001a04:	d01e      	beq.n	8001a44 <LL_TIM_IC_SetActiveInput+0x5c>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b40      	cmp	r3, #64	; 0x40
 8001a0a:	d019      	beq.n	8001a40 <LL_TIM_IC_SetActiveInput+0x58>
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a12:	d013      	beq.n	8001a3c <LL_TIM_IC_SetActiveInput+0x54>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1a:	d00d      	beq.n	8001a38 <LL_TIM_IC_SetActiveInput+0x50>
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a22:	d007      	beq.n	8001a34 <LL_TIM_IC_SetActiveInput+0x4c>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2a:	d101      	bne.n	8001a30 <LL_TIM_IC_SetActiveInput+0x48>
 8001a2c:	2307      	movs	r3, #7
 8001a2e:	e00e      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a30:	2308      	movs	r3, #8
 8001a32:	e00c      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a34:	2306      	movs	r3, #6
 8001a36:	e00a      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a38:	2305      	movs	r3, #5
 8001a3a:	e008      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	e006      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a40:	2303      	movs	r3, #3
 8001a42:	e004      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e002      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3318      	adds	r3, #24
 8001a54:	4619      	mov	r1, r3
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <LL_TIM_IC_SetActiveInput+0xac>)
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	490c      	ldr	r1, [pc, #48]	; (8001a98 <LL_TIM_IC_SetActiveInput+0xb0>)
 8001a68:	5ccb      	ldrb	r3, [r1, r3]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	408b      	lsls	r3, r1
 8001a70:	43db      	mvns	r3, r3
 8001a72:	401a      	ands	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	0c1b      	lsrs	r3, r3, #16
 8001a78:	7df9      	ldrb	r1, [r7, #23]
 8001a7a:	4807      	ldr	r0, [pc, #28]	; (8001a98 <LL_TIM_IC_SetActiveInput+0xb0>)
 8001a7c:	5c41      	ldrb	r1, [r0, r1]
 8001a7e:	408b      	lsls	r3, r1
 8001a80:	431a      	orrs	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	601a      	str	r2, [r3, #0]
}
 8001a86:	bf00      	nop
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	08015580 	.word	0x08015580
 8001a98:	08015598 	.word	0x08015598

08001a9c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d028      	beq.n	8001b00 <LL_TIM_IC_SetPrescaler+0x64>
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d023      	beq.n	8001afc <LL_TIM_IC_SetPrescaler+0x60>
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d01e      	beq.n	8001af8 <LL_TIM_IC_SetPrescaler+0x5c>
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b40      	cmp	r3, #64	; 0x40
 8001abe:	d019      	beq.n	8001af4 <LL_TIM_IC_SetPrescaler+0x58>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac6:	d013      	beq.n	8001af0 <LL_TIM_IC_SetPrescaler+0x54>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ace:	d00d      	beq.n	8001aec <LL_TIM_IC_SetPrescaler+0x50>
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad6:	d007      	beq.n	8001ae8 <LL_TIM_IC_SetPrescaler+0x4c>
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ade:	d101      	bne.n	8001ae4 <LL_TIM_IC_SetPrescaler+0x48>
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	e00e      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	e00c      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001ae8:	2306      	movs	r3, #6
 8001aea:	e00a      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001aec:	2305      	movs	r3, #5
 8001aee:	e008      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e006      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001af4:	2303      	movs	r3, #3
 8001af6:	e004      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e002      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001b00:	2300      	movs	r3, #0
 8001b02:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3318      	adds	r3, #24
 8001b08:	4619      	mov	r1, r3
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <LL_TIM_IC_SetPrescaler+0xac>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	440b      	add	r3, r1
 8001b12:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	490c      	ldr	r1, [pc, #48]	; (8001b4c <LL_TIM_IC_SetPrescaler+0xb0>)
 8001b1c:	5ccb      	ldrb	r3, [r1, r3]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	230c      	movs	r3, #12
 8001b22:	408b      	lsls	r3, r1
 8001b24:	43db      	mvns	r3, r3
 8001b26:	401a      	ands	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0c1b      	lsrs	r3, r3, #16
 8001b2c:	7df9      	ldrb	r1, [r7, #23]
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <LL_TIM_IC_SetPrescaler+0xb0>)
 8001b30:	5c41      	ldrb	r1, [r0, r1]
 8001b32:	408b      	lsls	r3, r1
 8001b34:	431a      	orrs	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	601a      	str	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	08015580 	.word	0x08015580
 8001b4c:	08015598 	.word	0x08015598

08001b50 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d028      	beq.n	8001bb4 <LL_TIM_IC_SetFilter+0x64>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d023      	beq.n	8001bb0 <LL_TIM_IC_SetFilter+0x60>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d01e      	beq.n	8001bac <LL_TIM_IC_SetFilter+0x5c>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b40      	cmp	r3, #64	; 0x40
 8001b72:	d019      	beq.n	8001ba8 <LL_TIM_IC_SetFilter+0x58>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b7a:	d013      	beq.n	8001ba4 <LL_TIM_IC_SetFilter+0x54>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b82:	d00d      	beq.n	8001ba0 <LL_TIM_IC_SetFilter+0x50>
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8a:	d007      	beq.n	8001b9c <LL_TIM_IC_SetFilter+0x4c>
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b92:	d101      	bne.n	8001b98 <LL_TIM_IC_SetFilter+0x48>
 8001b94:	2307      	movs	r3, #7
 8001b96:	e00e      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001b98:	2308      	movs	r3, #8
 8001b9a:	e00c      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001b9c:	2306      	movs	r3, #6
 8001b9e:	e00a      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	e008      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	e006      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e004      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e002      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3318      	adds	r3, #24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <LL_TIM_IC_SetFilter+0xac>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	440b      	add	r3, r1
 8001bc6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	490c      	ldr	r1, [pc, #48]	; (8001c00 <LL_TIM_IC_SetFilter+0xb0>)
 8001bd0:	5ccb      	ldrb	r3, [r1, r3]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	23f0      	movs	r3, #240	; 0xf0
 8001bd6:	408b      	lsls	r3, r1
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	401a      	ands	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0c1b      	lsrs	r3, r3, #16
 8001be0:	7df9      	ldrb	r1, [r7, #23]
 8001be2:	4807      	ldr	r0, [pc, #28]	; (8001c00 <LL_TIM_IC_SetFilter+0xb0>)
 8001be4:	5c41      	ldrb	r1, [r0, r1]
 8001be6:	408b      	lsls	r3, r1
 8001be8:	431a      	orrs	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	371c      	adds	r7, #28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	08015580 	.word	0x08015580
 8001c00:	08015598 	.word	0x08015598

08001c04 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d028      	beq.n	8001c68 <LL_TIM_IC_SetPolarity+0x64>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d023      	beq.n	8001c64 <LL_TIM_IC_SetPolarity+0x60>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b10      	cmp	r3, #16
 8001c20:	d01e      	beq.n	8001c60 <LL_TIM_IC_SetPolarity+0x5c>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b40      	cmp	r3, #64	; 0x40
 8001c26:	d019      	beq.n	8001c5c <LL_TIM_IC_SetPolarity+0x58>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c2e:	d013      	beq.n	8001c58 <LL_TIM_IC_SetPolarity+0x54>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c36:	d00d      	beq.n	8001c54 <LL_TIM_IC_SetPolarity+0x50>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c3e:	d007      	beq.n	8001c50 <LL_TIM_IC_SetPolarity+0x4c>
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d101      	bne.n	8001c4c <LL_TIM_IC_SetPolarity+0x48>
 8001c48:	2307      	movs	r3, #7
 8001c4a:	e00e      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	e00c      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c50:	2306      	movs	r3, #6
 8001c52:	e00a      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c54:	2305      	movs	r3, #5
 8001c56:	e008      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e006      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e004      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e002      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a1a      	ldr	r2, [r3, #32]
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	490b      	ldr	r1, [pc, #44]	; (8001ca0 <LL_TIM_IC_SetPolarity+0x9c>)
 8001c74:	5ccb      	ldrb	r3, [r1, r3]
 8001c76:	4619      	mov	r1, r3
 8001c78:	230a      	movs	r3, #10
 8001c7a:	408b      	lsls	r3, r1
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	401a      	ands	r2, r3
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <LL_TIM_IC_SetPolarity+0x9c>)
 8001c84:	5ccb      	ldrb	r3, [r1, r3]
 8001c86:	4619      	mov	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	408b      	lsls	r3, r1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	080155a4 	.word	0x080155a4

08001ca4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001cb6:	f023 0307 	bic.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	605a      	str	r2, [r3, #4]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @note   OC5 and OC6 are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	605a      	str	r2, [r3, #4]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_TIM_SetSlaveMode>:
  *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
  *         @arg @ref LL_TIM_SLAVEMODE_COMBINED_RESETTRIGGER
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2c:	f023 0307 	bic.w	r3, r3, #7
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	609a      	str	r2, [r3, #8]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_TIM_SetTriggerInput>:
  *         @arg @ref LL_TIM_TS_TI2FP2
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_TIM_EnableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_TIM_DisableIT_TRIG>:
  * @rmtoll DIER         TIE           LL_TIM_DisableIT_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60da      	str	r2, [r3, #12]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_TIM_DisableDMAReq_TRIG>:
  * @rmtoll DIER         TDE           LL_TIM_DisableDMAReq_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60da      	str	r2, [r3, #12]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	609a      	str	r2, [r3, #8]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	609a      	str	r2, [r3, #8]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b089      	sub	sp, #36	; 0x24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	613b      	str	r3, [r7, #16]
  return result;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	401a      	ands	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	61bb      	str	r3, [r7, #24]
  return result;
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	3724      	adds	r7, #36	; 0x24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	613b      	str	r3, [r7, #16]
  return result;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2103      	movs	r1, #3
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	61bb      	str	r3, [r7, #24]
  return result;
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	431a      	orrs	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	60da      	str	r2, [r3, #12]
}
 8001f06:	bf00      	nop
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f32:	f001 f82f 	bl	8002f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f36:	f000 f81f 	bl	8001f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f3a:	f000 feed 	bl	8002d18 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f3e:	f000 fee1 	bl	8002d04 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f42:	f000 fe8b 	bl	8002c5c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001f46:	f000 f86f 	bl	8002028 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f4a:	f000 f969 	bl	8002220 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001f4e:	f000 fa35 	bl	80023bc <MX_ADC3_Init>
  MX_ADC4_Init();
 8001f52:	f000 fb0f 	bl	8002574 <MX_ADC4_Init>
  MX_TIM3_Init();
 8001f56:	f000 fcbf 	bl	80028d8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001f5a:	f000 fc43 	bl	80027e4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001f5e:	f000 fd2f 	bl	80029c0 <MX_TIM4_Init>
  MX_DAC1_Init();
 8001f62:	f000 fbd3 	bl	800270c <MX_DAC1_Init>
  MX_TIM8_Init();
 8001f66:	f000 fde3 	bl	8002b30 <MX_TIM8_Init>
  MX_TIM6_Init();
 8001f6a:	f000 fdab 	bl	8002ac4 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 8001f6e:	f002 ff9f 	bl	8004eb0 <app_main>
 8001f72:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f7ff fc4f 	bl	8001820 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001f82:	bf00      	nop
 8001f84:	f7ff fc60 	bl	8001848 <LL_FLASH_GetLatency>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d1fa      	bne.n	8001f84 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001f8e:	f7ff fa87 	bl	80014a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001f92:	bf00      	nop
 8001f94:	f7ff fa94 	bl	80014c0 <LL_RCC_HSI_IsReady>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d1fa      	bne.n	8001f94 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001f9e:	2010      	movs	r0, #16
 8001fa0:	f7ff faa0 	bl	80014e4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_9, LL_RCC_PREDIV_DIV_1);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8001faa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fae:	f7ff fb69 	bl	8001684 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001fb2:	f7ff fb43 	bl	800163c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001fb6:	bf00      	nop
 8001fb8:	f7ff fb50 	bl	800165c <LL_RCC_PLL_IsReady>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d1fa      	bne.n	8001fb8 <SystemClock_Config+0x40>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff fac6 	bl	8001554 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001fc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001fcc:	f7ff fad6 	bl	800157c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff fae7 	bl	80015a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	f7ff fa9a 	bl	8001510 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001fdc:	bf00      	nop
 8001fde:	f7ff faab 	bl	8001538 <LL_RCC_GetSysClkSource>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d1fa      	bne.n	8001fde <SystemClock_Config+0x66>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8001fe8:	480e      	ldr	r0, [pc, #56]	; (8002024 <SystemClock_Config+0xac>)
 8001fea:	f002 ff43 	bl	8004e74 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001fee:	200f      	movs	r0, #15
 8001ff0:	f000 ffe6 	bl	8002fc0 <HAL_InitTick>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001ffa:	f000 feef 	bl	8002ddc <Error_Handler>
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001ffe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002002:	f7ff fae3 	bl	80015cc <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM8_CLKSOURCE_PCLK2);
 8002006:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800200a:	f7ff fafb 	bl	8001604 <LL_RCC_SetTIMClockSource>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM2_CLKSOURCE_PCLK1);
 800200e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002012:	f7ff faf7 	bl	8001604 <LL_RCC_SetTIMClockSource>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM34_CLKSOURCE_PCLK1);
 8002016:	f04f 4008 	mov.w	r0, #2281701376	; 0x88000000
 800201a:	f7ff faf3 	bl	8001604 <LL_RCC_SetTIMClockSource>
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	044aa200 	.word	0x044aa200

08002028 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b094      	sub	sp, #80	; 0x50
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800202e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800203a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	611a      	str	r2, [r3, #16]
 800204a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800204c:	f107 0318 	add.w	r3, r7, #24
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205a:	463b      	mov	r3, r7
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
 8002068:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 800206a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800206e:	f7ff fb29 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002072:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002076:	f7ff fb25 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC0   ------> ADC1_IN6
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800207a:	2301      	movs	r3, #1
 800207c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800207e:	2303      	movs	r3, #3
 8002080:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002086:	463b      	mov	r3, r7
 8002088:	4619      	mov	r1, r3
 800208a:	485b      	ldr	r0, [pc, #364]	; (80021f8 <MX_ADC1_Init+0x1d0>)
 800208c:	f001 feaf 	bl	8003dee <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002090:	2200      	movs	r2, #0
 8002092:	2101      	movs	r1, #1
 8002094:	4859      	ldr	r0, [pc, #356]	; (80021fc <MX_ADC1_Init+0x1d4>)
 8002096:	f7ff f905 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_VERYHIGH);
 800209a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800209e:	2101      	movs	r1, #1
 80020a0:	4856      	ldr	r0, [pc, #344]	; (80021fc <MX_ADC1_Init+0x1d4>)
 80020a2:	f7ff f9d9 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 80020a6:	2220      	movs	r2, #32
 80020a8:	2101      	movs	r1, #1
 80020aa:	4854      	ldr	r0, [pc, #336]	; (80021fc <MX_ADC1_Init+0x1d4>)
 80020ac:	f7ff f920 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2101      	movs	r1, #1
 80020b4:	4851      	ldr	r0, [pc, #324]	; (80021fc <MX_ADC1_Init+0x1d4>)
 80020b6:	f7ff f93f 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80020ba:	2280      	movs	r2, #128	; 0x80
 80020bc:	2101      	movs	r1, #1
 80020be:	484f      	ldr	r0, [pc, #316]	; (80021fc <MX_ADC1_Init+0x1d4>)
 80020c0:	f7ff f95e 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80020c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c8:	2101      	movs	r1, #1
 80020ca:	484c      	ldr	r0, [pc, #304]	; (80021fc <MX_ADC1_Init+0x1d4>)
 80020cc:	f7ff f97c 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80020d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d4:	2101      	movs	r1, #1
 80020d6:	4849      	ldr	r0, [pc, #292]	; (80021fc <MX_ADC1_Init+0x1d4>)
 80020d8:	f7ff f99a 	bl	8001410 <LL_DMA_SetMemorySize>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80020dc:	2300      	movs	r3, #0
 80020de:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80020e0:	2300      	movs	r3, #0
 80020e2:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80020e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ec:	4619      	mov	r1, r3
 80020ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020f2:	f001 fa7f 	bl	80035f4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO_ADC12;
 80020f6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80020fc:	2301      	movs	r3, #1
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002104:	2300      	movs	r3, #0
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002108:	2303      	movs	r3, #3
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800210c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002116:	4619      	mov	r1, r3
 8002118:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800211c:	f001 fa90 	bl	8003640 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8002120:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002124:	f7ff f87d 	bl	8001222 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8002128:	4b35      	ldr	r3, [pc, #212]	; (8002200 <MX_ADC1_Init+0x1d8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	4a35      	ldr	r2, [pc, #212]	; (8002204 <MX_ADC1_Init+0x1dc>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	099a      	lsrs	r2, r3, #6
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	461a      	mov	r2, r3
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <MX_ADC1_Init+0x1e0>)
 8002142:	fba3 2302 	umull	r2, r3, r3, r2
 8002146:	08db      	lsrs	r3, r3, #3
 8002148:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(wait_loop_index != 0)
 800214a:	e002      	b.n	8002152 <MX_ADC1_Init+0x12a>
     {
   wait_loop_index--;
 800214c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800214e:	3b01      	subs	r3, #1
 8002150:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(wait_loop_index != 0)
 8002152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f9      	bne.n	800214c <MX_ADC1_Init+0x124>
     }
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8002158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002162:	f107 0318 	add.w	r3, r7, #24
 8002166:	4619      	mov	r1, r3
 8002168:	4828      	ldr	r0, [pc, #160]	; (800220c <MX_ADC1_Init+0x1e4>)
 800216a:	f001 f9e5 	bl	8003538 <LL_ADC_CommonInit>
  LL_ADC_REG_SetTriggerEdge(ADC1, LL_ADC_REG_TRIG_EXT_RISING);
 800216e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002172:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002176:	f7fe ff32 	bl	8000fde <LL_ADC_REG_SetTriggerEdge>
  /** Configure Analog WatchDog 1
  */
  LL_ADC_SetAnalogWDMonitChannels(ADC1, LL_ADC_AWD1, LL_ADC_AWD_CH_VREFINT_REG);
 800217a:	4a25      	ldr	r2, [pc, #148]	; (8002210 <MX_ADC1_Init+0x1e8>)
 800217c:	4925      	ldr	r1, [pc, #148]	; (8002214 <MX_ADC1_Init+0x1ec>)
 800217e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002182:	f7fe ffe7 	bl	8001154 <LL_ADC_SetAnalogWDMonitChannels>
  LL_ADC_ConfigAnalogWDThresholds(ADC1, LL_ADC_AWD1, 4095, 0);
 8002186:	2300      	movs	r3, #0
 8002188:	f640 72ff 	movw	r2, #4095	; 0xfff
 800218c:	4921      	ldr	r1, [pc, #132]	; (8002214 <MX_ADC1_Init+0x1ec>)
 800218e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002192:	f7ff f819 	bl	80011c8 <LL_ADC_ConfigAnalogWDThresholds>
  LL_ADC_EnableIT_AWD1(ADC1);
 8002196:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800219a:	f7ff f85c 	bl	8001256 <LL_ADC_EnableIT_AWD1>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_VREFINT);
 800219e:	4a1e      	ldr	r2, [pc, #120]	; (8002218 <MX_ADC1_Init+0x1f0>)
 80021a0:	2106      	movs	r1, #6
 80021a2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021a6:	f7fe ff2d 	bl	8001004 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80021aa:	2200      	movs	r2, #0
 80021ac:	491a      	ldr	r1, [pc, #104]	; (8002218 <MX_ADC1_Init+0x1f0>)
 80021ae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021b2:	f7fe ff5e 	bl	8001072 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SINGLE_ENDED);
 80021b6:	227f      	movs	r2, #127	; 0x7f
 80021b8:	4917      	ldr	r1, [pc, #92]	; (8002218 <MX_ADC1_Init+0x1f0>)
 80021ba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021be:	f7fe ffa5 	bl	800110c <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 80021c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80021c6:	4811      	ldr	r0, [pc, #68]	; (800220c <MX_ADC1_Init+0x1e4>)
 80021c8:	f7fe fef6 	bl	8000fb8 <LL_ADC_SetCommonPathInternalCh>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_6);
 80021cc:	4a13      	ldr	r2, [pc, #76]	; (800221c <MX_ADC1_Init+0x1f4>)
 80021ce:	210c      	movs	r1, #12
 80021d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021d4:	f7fe ff16 	bl	8001004 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80021d8:	2200      	movs	r2, #0
 80021da:	4910      	ldr	r1, [pc, #64]	; (800221c <MX_ADC1_Init+0x1f4>)
 80021dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021e0:	f7fe ff47 	bl	8001072 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SINGLE_ENDED);
 80021e4:	227f      	movs	r2, #127	; 0x7f
 80021e6:	490d      	ldr	r1, [pc, #52]	; (800221c <MX_ADC1_Init+0x1f4>)
 80021e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021ec:	f7fe ff8e 	bl	800110c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	3750      	adds	r7, #80	; 0x50
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	48000800 	.word	0x48000800
 80021fc:	40020000 	.word	0x40020000
 8002200:	20000000 	.word	0x20000000
 8002204:	053e2d63 	.word	0x053e2d63
 8002208:	cccccccd 	.word	0xcccccccd
 800220c:	50000300 	.word	0x50000300
 8002210:	c8c40000 	.word	0xc8c40000
 8002214:	7dc00000 	.word	0x7dc00000
 8002218:	cb840000 	.word	0xcb840000
 800221c:	19200040 	.word	0x19200040

08002220 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b090      	sub	sp, #64	; 0x40
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002226:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002232:	f107 0318 	add.w	r3, r7, #24
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]
 8002242:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	463b      	mov	r3, r7
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	611a      	str	r2, [r3, #16]
 8002252:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8002254:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002258:	f7ff fa34 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800225c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002260:	f7ff fa30 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC1   ------> ADC2_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002264:	2302      	movs	r3, #2
 8002266:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002268:	2303      	movs	r3, #3
 800226a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002270:	463b      	mov	r3, r7
 8002272:	4619      	mov	r1, r3
 8002274:	4847      	ldr	r0, [pc, #284]	; (8002394 <MX_ADC2_Init+0x174>)
 8002276:	f001 fdba 	bl	8003dee <LL_GPIO_Init>

  /* ADC2 DMA Init */

  /* ADC2 Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800227a:	2200      	movs	r2, #0
 800227c:	2103      	movs	r1, #3
 800227e:	4846      	ldr	r0, [pc, #280]	; (8002398 <MX_ADC2_Init+0x178>)
 8002280:	f7ff f810 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_VERYHIGH);
 8002284:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002288:	2103      	movs	r1, #3
 800228a:	4843      	ldr	r0, [pc, #268]	; (8002398 <MX_ADC2_Init+0x178>)
 800228c:	f7ff f8e4 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 8002290:	2220      	movs	r2, #32
 8002292:	2103      	movs	r1, #3
 8002294:	4840      	ldr	r0, [pc, #256]	; (8002398 <MX_ADC2_Init+0x178>)
 8002296:	f7ff f82b 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 800229a:	2200      	movs	r2, #0
 800229c:	2103      	movs	r1, #3
 800229e:	483e      	ldr	r0, [pc, #248]	; (8002398 <MX_ADC2_Init+0x178>)
 80022a0:	f7ff f84a 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	2103      	movs	r1, #3
 80022a8:	483b      	ldr	r0, [pc, #236]	; (8002398 <MX_ADC2_Init+0x178>)
 80022aa:	f7ff f869 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 80022ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b2:	2103      	movs	r1, #3
 80022b4:	4838      	ldr	r0, [pc, #224]	; (8002398 <MX_ADC2_Init+0x178>)
 80022b6:	f7ff f887 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 80022ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022be:	2103      	movs	r1, #3
 80022c0:	4835      	ldr	r0, [pc, #212]	; (8002398 <MX_ADC2_Init+0x178>)
 80022c2:	f7ff f8a5 	bl	8001410 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_ADC(LL_SYSCFG_ADC24_RMP_DMA2_CH34);
 80022c6:	4835      	ldr	r0, [pc, #212]	; (800239c <MX_ADC2_Init+0x17c>)
 80022c8:	f7ff fa44 	bl	8001754 <LL_SYSCFG_SetRemapDMA_ADC>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80022cc:	2300      	movs	r3, #0
 80022ce:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80022d0:	2300      	movs	r3, #0
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 80022d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022dc:	4619      	mov	r1, r3
 80022de:	4830      	ldr	r0, [pc, #192]	; (80023a0 <MX_ADC2_Init+0x180>)
 80022e0:	f001 f988 	bl	80035f4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO_ADC12;
 80022e4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80022e8:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80022f6:	2303      	movs	r3, #3
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 80022fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8002300:	f107 0318 	add.w	r3, r7, #24
 8002304:	4619      	mov	r1, r3
 8002306:	4826      	ldr	r0, [pc, #152]	; (80023a0 <MX_ADC2_Init+0x180>)
 8002308:	f001 f99a 	bl	8003640 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 800230c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002310:	f7fe ff87 	bl	8001222 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8002314:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <MX_ADC2_Init+0x184>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <MX_ADC2_Init+0x188>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	099a      	lsrs	r2, r3, #6
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	461a      	mov	r2, r3
 800232c:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <MX_ADC2_Init+0x18c>)
 800232e:	fba3 2302 	umull	r2, r3, r3, r2
 8002332:	08db      	lsrs	r3, r3, #3
 8002334:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 8002336:	e002      	b.n	800233e <MX_ADC2_Init+0x11e>
     {
   wait_loop_index--;
 8002338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800233a:	3b01      	subs	r3, #1
 800233c:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 800233e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f9      	bne.n	8002338 <MX_ADC2_Init+0x118>
     }
  LL_ADC_REG_SetTriggerEdge(ADC2, LL_ADC_REG_TRIG_EXT_RISING);
 8002344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002348:	4815      	ldr	r0, [pc, #84]	; (80023a0 <MX_ADC2_Init+0x180>)
 800234a:	f7fe fe48 	bl	8000fde <LL_ADC_REG_SetTriggerEdge>
  /** Configure Analog WatchDog 1
  */
  LL_ADC_SetAnalogWDMonitChannels(ADC2, LL_ADC_AWD1, LL_ADC_AWD_CHANNEL_7_REG);
 800234e:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <MX_ADC2_Init+0x190>)
 8002350:	4918      	ldr	r1, [pc, #96]	; (80023b4 <MX_ADC2_Init+0x194>)
 8002352:	4813      	ldr	r0, [pc, #76]	; (80023a0 <MX_ADC2_Init+0x180>)
 8002354:	f7fe fefe 	bl	8001154 <LL_ADC_SetAnalogWDMonitChannels>
  LL_ADC_ConfigAnalogWDThresholds(ADC2, LL_ADC_AWD1, 4095, 0);
 8002358:	2300      	movs	r3, #0
 800235a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800235e:	4915      	ldr	r1, [pc, #84]	; (80023b4 <MX_ADC2_Init+0x194>)
 8002360:	480f      	ldr	r0, [pc, #60]	; (80023a0 <MX_ADC2_Init+0x180>)
 8002362:	f7fe ff31 	bl	80011c8 <LL_ADC_ConfigAnalogWDThresholds>
  LL_ADC_EnableIT_AWD1(ADC2);
 8002366:	480e      	ldr	r0, [pc, #56]	; (80023a0 <MX_ADC2_Init+0x180>)
 8002368:	f7fe ff75 	bl	8001256 <LL_ADC_EnableIT_AWD1>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <MX_ADC2_Init+0x198>)
 800236e:	2106      	movs	r1, #6
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <MX_ADC2_Init+0x180>)
 8002372:	f7fe fe47 	bl	8001004 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002376:	2200      	movs	r2, #0
 8002378:	490f      	ldr	r1, [pc, #60]	; (80023b8 <MX_ADC2_Init+0x198>)
 800237a:	4809      	ldr	r0, [pc, #36]	; (80023a0 <MX_ADC2_Init+0x180>)
 800237c:	f7fe fe79 	bl	8001072 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_7, LL_ADC_SINGLE_ENDED);
 8002380:	227f      	movs	r2, #127	; 0x7f
 8002382:	490d      	ldr	r1, [pc, #52]	; (80023b8 <MX_ADC2_Init+0x198>)
 8002384:	4806      	ldr	r0, [pc, #24]	; (80023a0 <MX_ADC2_Init+0x180>)
 8002386:	f7fe fec1 	bl	800110c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	3740      	adds	r7, #64	; 0x40
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	48000800 	.word	0x48000800
 8002398:	40020400 	.word	0x40020400
 800239c:	00010100 	.word	0x00010100
 80023a0:	50000100 	.word	0x50000100
 80023a4:	20000000 	.word	0x20000000
 80023a8:	053e2d63 	.word	0x053e2d63
 80023ac:	cccccccd 	.word	0xcccccccd
 80023b0:	1cc00080 	.word	0x1cc00080
 80023b4:	7dc00000 	.word	0x7dc00000
 80023b8:	1d500080 	.word	0x1d500080

080023bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b094      	sub	sp, #80	; 0x50
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80023c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80023ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	611a      	str	r2, [r3, #16]
 80023de:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80023e0:	f107 0318 	add.w	r3, r7, #24
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ee:	463b      	mov	r3, r7
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
 80023fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC34);
 80023fe:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002402:	f7ff f95f 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002406:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800240a:	f7ff f95b 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**ADC3 GPIO Configuration
  PB0   ------> ADC3_IN12
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800240e:	2301      	movs	r3, #1
 8002410:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002412:	2303      	movs	r3, #3
 8002414:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	463b      	mov	r3, r7
 800241c:	4619      	mov	r1, r3
 800241e:	484b      	ldr	r0, [pc, #300]	; (800254c <MX_ADC3_Init+0x190>)
 8002420:	f001 fce5 	bl	8003dee <LL_GPIO_Init>

  /* ADC3 DMA Init */

  /* ADC3 Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002424:	2200      	movs	r2, #0
 8002426:	2105      	movs	r1, #5
 8002428:	4849      	ldr	r0, [pc, #292]	; (8002550 <MX_ADC3_Init+0x194>)
 800242a:	f7fe ff3b 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_VERYHIGH);
 800242e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002432:	2105      	movs	r1, #5
 8002434:	4846      	ldr	r0, [pc, #280]	; (8002550 <MX_ADC3_Init+0x194>)
 8002436:	f7ff f80f 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 800243a:	2200      	movs	r2, #0
 800243c:	2105      	movs	r1, #5
 800243e:	4844      	ldr	r0, [pc, #272]	; (8002550 <MX_ADC3_Init+0x194>)
 8002440:	f7fe ff56 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8002444:	2200      	movs	r2, #0
 8002446:	2105      	movs	r1, #5
 8002448:	4841      	ldr	r0, [pc, #260]	; (8002550 <MX_ADC3_Init+0x194>)
 800244a:	f7fe ff75 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	2105      	movs	r1, #5
 8002452:	483f      	ldr	r0, [pc, #252]	; (8002550 <MX_ADC3_Init+0x194>)
 8002454:	f7fe ff94 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_HALFWORD);
 8002458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800245c:	2105      	movs	r1, #5
 800245e:	483c      	ldr	r0, [pc, #240]	; (8002550 <MX_ADC3_Init+0x194>)
 8002460:	f7fe ffb2 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_HALFWORD);
 8002464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002468:	2105      	movs	r1, #5
 800246a:	4839      	ldr	r0, [pc, #228]	; (8002550 <MX_ADC3_Init+0x194>)
 800246c:	f7fe ffd0 	bl	8001410 <LL_DMA_SetMemorySize>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002470:	2300      	movs	r3, #0
 8002472:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002474:	2300      	movs	r3, #0
 8002476:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8002478:	2300      	movs	r3, #0
 800247a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 800247c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002480:	4619      	mov	r1, r3
 8002482:	4834      	ldr	r0, [pc, #208]	; (8002554 <MX_ADC3_Init+0x198>)
 8002484:	f001 f8b6 	bl	80035f4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO__ADC34;
 8002488:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800249a:	2303      	movs	r3, #3
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800249e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 80024a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024a8:	4619      	mov	r1, r3
 80024aa:	482a      	ldr	r0, [pc, #168]	; (8002554 <MX_ADC3_Init+0x198>)
 80024ac:	f001 f8c8 	bl	8003640 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 80024b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024b4:	f7fe feb5 	bl	8001222 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80024b8:	4b27      	ldr	r3, [pc, #156]	; (8002558 <MX_ADC3_Init+0x19c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	4a27      	ldr	r2, [pc, #156]	; (800255c <MX_ADC3_Init+0x1a0>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	099a      	lsrs	r2, r3, #6
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b23      	ldr	r3, [pc, #140]	; (8002560 <MX_ADC3_Init+0x1a4>)
 80024d2:	fba3 2302 	umull	r2, r3, r3, r2
 80024d6:	08db      	lsrs	r3, r3, #3
 80024d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(wait_loop_index != 0)
 80024da:	e002      	b.n	80024e2 <MX_ADC3_Init+0x126>
     {
   wait_loop_index--;
 80024dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024de:	3b01      	subs	r3, #1
 80024e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(wait_loop_index != 0)
 80024e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f9      	bne.n	80024dc <MX_ADC3_Init+0x120>
     }
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80024e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ec:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 80024f2:	f107 0318 	add.w	r3, r7, #24
 80024f6:	4619      	mov	r1, r3
 80024f8:	481a      	ldr	r0, [pc, #104]	; (8002564 <MX_ADC3_Init+0x1a8>)
 80024fa:	f001 f81d 	bl	8003538 <LL_ADC_CommonInit>
  LL_ADC_REG_SetTriggerEdge(ADC3, LL_ADC_REG_TRIG_EXT_RISING);
 80024fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002502:	4814      	ldr	r0, [pc, #80]	; (8002554 <MX_ADC3_Init+0x198>)
 8002504:	f7fe fd6b 	bl	8000fde <LL_ADC_REG_SetTriggerEdge>
  /** Configure Analog WatchDog 1
  */
  LL_ADC_SetAnalogWDMonitChannels(ADC3, LL_ADC_AWD1, LL_ADC_AWD_CHANNEL_12_REG);
 8002508:	4a17      	ldr	r2, [pc, #92]	; (8002568 <MX_ADC3_Init+0x1ac>)
 800250a:	4918      	ldr	r1, [pc, #96]	; (800256c <MX_ADC3_Init+0x1b0>)
 800250c:	4811      	ldr	r0, [pc, #68]	; (8002554 <MX_ADC3_Init+0x198>)
 800250e:	f7fe fe21 	bl	8001154 <LL_ADC_SetAnalogWDMonitChannels>
  LL_ADC_ConfigAnalogWDThresholds(ADC3, LL_ADC_AWD1, 4095, 0);
 8002512:	2300      	movs	r3, #0
 8002514:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002518:	4914      	ldr	r1, [pc, #80]	; (800256c <MX_ADC3_Init+0x1b0>)
 800251a:	480e      	ldr	r0, [pc, #56]	; (8002554 <MX_ADC3_Init+0x198>)
 800251c:	f7fe fe54 	bl	80011c8 <LL_ADC_ConfigAnalogWDThresholds>
  LL_ADC_EnableIT_AWD1(ADC3);
 8002520:	480c      	ldr	r0, [pc, #48]	; (8002554 <MX_ADC3_Init+0x198>)
 8002522:	f7fe fe98 	bl	8001256 <LL_ADC_EnableIT_AWD1>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_12);
 8002526:	4a12      	ldr	r2, [pc, #72]	; (8002570 <MX_ADC3_Init+0x1b4>)
 8002528:	2106      	movs	r1, #6
 800252a:	480a      	ldr	r0, [pc, #40]	; (8002554 <MX_ADC3_Init+0x198>)
 800252c:	f7fe fd6a 	bl	8001004 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002530:	2200      	movs	r2, #0
 8002532:	490f      	ldr	r1, [pc, #60]	; (8002570 <MX_ADC3_Init+0x1b4>)
 8002534:	4807      	ldr	r0, [pc, #28]	; (8002554 <MX_ADC3_Init+0x198>)
 8002536:	f7fe fd9c 	bl	8001072 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_12, LL_ADC_SINGLE_ENDED);
 800253a:	227f      	movs	r2, #127	; 0x7f
 800253c:	490c      	ldr	r1, [pc, #48]	; (8002570 <MX_ADC3_Init+0x1b4>)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_ADC3_Init+0x198>)
 8002540:	f7fe fde4 	bl	800110c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002544:	bf00      	nop
 8002546:	3750      	adds	r7, #80	; 0x50
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	48000400 	.word	0x48000400
 8002550:	40020400 	.word	0x40020400
 8002554:	50000400 	.word	0x50000400
 8002558:	20000000 	.word	0x20000000
 800255c:	053e2d63 	.word	0x053e2d63
 8002560:	cccccccd 	.word	0xcccccccd
 8002564:	50000700 	.word	0x50000700
 8002568:	30c01000 	.word	0x30c01000
 800256c:	7dc00000 	.word	0x7dc00000
 8002570:	32601000 	.word	0x32601000

08002574 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b090      	sub	sp, #64	; 0x40
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800257a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002586:	f107 0318 	add.w	r3, r7, #24
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	611a      	str	r2, [r3, #16]
 8002596:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	463b      	mov	r3, r7
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	611a      	str	r2, [r3, #16]
 80025a6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC34);
 80025a8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80025ac:	f7ff f88a 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80025b0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80025b4:	f7ff f886 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**ADC4 GPIO Configuration
  PB14   ------> ADC4_IN4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80025b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80025be:	2303      	movs	r3, #3
 80025c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c6:	463b      	mov	r3, r7
 80025c8:	4619      	mov	r1, r3
 80025ca:	4847      	ldr	r0, [pc, #284]	; (80026e8 <MX_ADC4_Init+0x174>)
 80025cc:	f001 fc0f 	bl	8003dee <LL_GPIO_Init>

  /* ADC4 DMA Init */

  /* ADC4 Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2104      	movs	r1, #4
 80025d4:	4845      	ldr	r0, [pc, #276]	; (80026ec <MX_ADC4_Init+0x178>)
 80025d6:	f7fe fe65 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_VERYHIGH);
 80025da:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80025de:	2104      	movs	r1, #4
 80025e0:	4842      	ldr	r0, [pc, #264]	; (80026ec <MX_ADC4_Init+0x178>)
 80025e2:	f7fe ff39 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_4, LL_DMA_MODE_CIRCULAR);
 80025e6:	2220      	movs	r2, #32
 80025e8:	2104      	movs	r1, #4
 80025ea:	4840      	ldr	r0, [pc, #256]	; (80026ec <MX_ADC4_Init+0x178>)
 80025ec:	f7fe fe80 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2104      	movs	r1, #4
 80025f4:	483d      	ldr	r0, [pc, #244]	; (80026ec <MX_ADC4_Init+0x178>)
 80025f6:	f7fe fe9f 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 80025fa:	2280      	movs	r2, #128	; 0x80
 80025fc:	2104      	movs	r1, #4
 80025fe:	483b      	ldr	r0, [pc, #236]	; (80026ec <MX_ADC4_Init+0x178>)
 8002600:	f7fe febe 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_HALFWORD);
 8002604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002608:	2104      	movs	r1, #4
 800260a:	4838      	ldr	r0, [pc, #224]	; (80026ec <MX_ADC4_Init+0x178>)
 800260c:	f7fe fedc 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_HALFWORD);
 8002610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002614:	2104      	movs	r1, #4
 8002616:	4835      	ldr	r0, [pc, #212]	; (80026ec <MX_ADC4_Init+0x178>)
 8002618:	f7fe fefa 	bl	8001410 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_ADC(LL_SYSCFG_ADC24_RMP_DMA2_CH34);
 800261c:	4834      	ldr	r0, [pc, #208]	; (80026f0 <MX_ADC4_Init+0x17c>)
 800261e:	f7ff f899 	bl	8001754 <LL_SYSCFG_SetRemapDMA_ADC>
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002622:	2300      	movs	r3, #0
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002626:	2300      	movs	r3, #0
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800262a:	2300      	movs	r3, #0
 800262c:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_Init(ADC4, &ADC_InitStruct);
 800262e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002632:	4619      	mov	r1, r3
 8002634:	482f      	ldr	r0, [pc, #188]	; (80026f4 <MX_ADC4_Init+0x180>)
 8002636:	f000 ffdd 	bl	80035f4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO__ADC34;
 800263a:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 800263e:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002648:	2300      	movs	r3, #0
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800264c:	2303      	movs	r3, #3
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8002650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_Init(ADC4, &ADC_REG_InitStruct);
 8002656:	f107 0318 	add.w	r3, r7, #24
 800265a:	4619      	mov	r1, r3
 800265c:	4825      	ldr	r0, [pc, #148]	; (80026f4 <MX_ADC4_Init+0x180>)
 800265e:	f000 ffef 	bl	8003640 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8002662:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002666:	f7fe fddc 	bl	8001222 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <MX_ADC4_Init+0x184>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	099b      	lsrs	r3, r3, #6
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <MX_ADC4_Init+0x188>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	099a      	lsrs	r2, r3, #6
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	461a      	mov	r2, r3
 8002682:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <MX_ADC4_Init+0x18c>)
 8002684:	fba3 2302 	umull	r2, r3, r3, r2
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 800268c:	e002      	b.n	8002694 <MX_ADC4_Init+0x120>
     {
   wait_loop_index--;
 800268e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002690:	3b01      	subs	r3, #1
 8002692:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 8002694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f9      	bne.n	800268e <MX_ADC4_Init+0x11a>
     }
  LL_ADC_REG_SetTriggerEdge(ADC4, LL_ADC_REG_TRIG_EXT_RISING);
 800269a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800269e:	4815      	ldr	r0, [pc, #84]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026a0:	f7fe fc9d 	bl	8000fde <LL_ADC_REG_SetTriggerEdge>
  /** Configure Analog WatchDog 1
  */
  LL_ADC_SetAnalogWDMonitChannels(ADC4, LL_ADC_AWD1, LL_ADC_AWD_CHANNEL_4_REG);
 80026a4:	4a17      	ldr	r2, [pc, #92]	; (8002704 <MX_ADC4_Init+0x190>)
 80026a6:	4918      	ldr	r1, [pc, #96]	; (8002708 <MX_ADC4_Init+0x194>)
 80026a8:	4812      	ldr	r0, [pc, #72]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026aa:	f7fe fd53 	bl	8001154 <LL_ADC_SetAnalogWDMonitChannels>
  LL_ADC_ConfigAnalogWDThresholds(ADC4, LL_ADC_AWD1, 4095, 0);
 80026ae:	2300      	movs	r3, #0
 80026b0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80026b4:	4914      	ldr	r1, [pc, #80]	; (8002708 <MX_ADC4_Init+0x194>)
 80026b6:	480f      	ldr	r0, [pc, #60]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026b8:	f7fe fd86 	bl	80011c8 <LL_ADC_ConfigAnalogWDThresholds>
  LL_ADC_EnableIT_AWD1(ADC4);
 80026bc:	480d      	ldr	r0, [pc, #52]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026be:	f7fe fdca 	bl	8001256 <LL_ADC_EnableIT_AWD1>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC4, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 80026c2:	4a10      	ldr	r2, [pc, #64]	; (8002704 <MX_ADC4_Init+0x190>)
 80026c4:	2106      	movs	r1, #6
 80026c6:	480b      	ldr	r0, [pc, #44]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026c8:	f7fe fc9c 	bl	8001004 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC4, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80026cc:	2200      	movs	r2, #0
 80026ce:	490d      	ldr	r1, [pc, #52]	; (8002704 <MX_ADC4_Init+0x190>)
 80026d0:	4808      	ldr	r0, [pc, #32]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026d2:	f7fe fcce 	bl	8001072 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC4, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 80026d6:	227f      	movs	r2, #127	; 0x7f
 80026d8:	490a      	ldr	r1, [pc, #40]	; (8002704 <MX_ADC4_Init+0x190>)
 80026da:	4806      	ldr	r0, [pc, #24]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026dc:	f7fe fd16 	bl	800110c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80026e0:	bf00      	nop
 80026e2:	3740      	adds	r7, #64	; 0x40
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	48000400 	.word	0x48000400
 80026ec:	40020400 	.word	0x40020400
 80026f0:	00010100 	.word	0x00010100
 80026f4:	50000500 	.word	0x50000500
 80026f8:	20000000 	.word	0x20000000
 80026fc:	053e2d63 	.word	0x053e2d63
 8002700:	cccccccd 	.word	0xcccccccd
 8002704:	10c00010 	.word	0x10c00010
 8002708:	7dc00000 	.word	0x7dc00000

0800270c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	; 0x28
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8002712:	f107 0318 	add.w	r3, r7, #24
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	463b      	mov	r3, r7
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 8002730:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002734:	f7fe ffde 	bl	80016f4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002738:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800273c:	f7fe ffc2 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration
  PA4   ------> DAC1_OUT1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002740:	2310      	movs	r3, #16
 8002742:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002744:	2303      	movs	r3, #3
 8002746:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002748:	2300      	movs	r3, #0
 800274a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274c:	463b      	mov	r3, r7
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002754:	f001 fb4b 	bl	8003dee <LL_GPIO_Init>

  /* DAC1 DMA Init */

  /* DAC1_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002758:	2210      	movs	r2, #16
 800275a:	2103      	movs	r1, #3
 800275c:	481d      	ldr	r0, [pc, #116]	; (80027d4 <MX_DAC1_Init+0xc8>)
 800275e:	f7fe fda1 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_HIGH);
 8002762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002766:	2103      	movs	r1, #3
 8002768:	481a      	ldr	r0, [pc, #104]	; (80027d4 <MX_DAC1_Init+0xc8>)
 800276a:	f7fe fe75 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 800276e:	2220      	movs	r2, #32
 8002770:	2103      	movs	r1, #3
 8002772:	4818      	ldr	r0, [pc, #96]	; (80027d4 <MX_DAC1_Init+0xc8>)
 8002774:	f7fe fdbc 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8002778:	2200      	movs	r2, #0
 800277a:	2103      	movs	r1, #3
 800277c:	4815      	ldr	r0, [pc, #84]	; (80027d4 <MX_DAC1_Init+0xc8>)
 800277e:	f7fe fddb 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	2103      	movs	r1, #3
 8002786:	4813      	ldr	r0, [pc, #76]	; (80027d4 <MX_DAC1_Init+0xc8>)
 8002788:	f7fe fdfa 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 800278c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002790:	2103      	movs	r1, #3
 8002792:	4810      	ldr	r0, [pc, #64]	; (80027d4 <MX_DAC1_Init+0xc8>)
 8002794:	f7fe fe18 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 8002798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800279c:	2103      	movs	r1, #3
 800279e:	480d      	ldr	r0, [pc, #52]	; (80027d4 <MX_DAC1_Init+0xc8>)
 80027a0:	f7fe fe36 	bl	8001410 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_DAC(LL_SYSCFG_DAC1_CH1_RMP_DMA1_CH3);
 80027a4:	480c      	ldr	r0, [pc, #48]	; (80027d8 <MX_DAC1_Init+0xcc>)
 80027a6:	f7fe fff3 	bl	8001790 <LL_SYSCFG_SetRemapDMA_DAC>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC channel OUT1 config
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_EXT_TIM6_TRGO;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 80027b6:	f107 0318 	add.w	r3, r7, #24
 80027ba:	461a      	mov	r2, r3
 80027bc:	4907      	ldr	r1, [pc, #28]	; (80027dc <MX_DAC1_Init+0xd0>)
 80027be:	4808      	ldr	r0, [pc, #32]	; (80027e0 <MX_DAC1_Init+0xd4>)
 80027c0:	f000 ffa7 	bl	8003712 <LL_DAC_Init>
  LL_DAC_EnableTrigger(DAC1, LL_DAC_CHANNEL_1);
 80027c4:	4905      	ldr	r1, [pc, #20]	; (80027dc <MX_DAC1_Init+0xd0>)
 80027c6:	4806      	ldr	r0, [pc, #24]	; (80027e0 <MX_DAC1_Init+0xd4>)
 80027c8:	f7fe fd55 	bl	8001276 <LL_DAC_EnableTrigger>
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80027cc:	bf00      	nop
 80027ce:	3728      	adds	r7, #40	; 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40020000 	.word	0x40020000
 80027d8:	00202000 	.word	0x00202000
 80027dc:	02100001 	.word	0x02100001
 80027e0:	40007400 	.word	0x40007400

080027e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b094      	sub	sp, #80	; 0x50
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80027ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]
 80027f8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	2220      	movs	r2, #32
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f00f fc22 	bl	801204c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]
 8002816:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002818:	2001      	movs	r0, #1
 800281a:	f7fe ff6b 	bl	80016f4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002822:	2300      	movs	r3, #0
 8002824:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000;
 8002826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800282c:	2300      	movs	r3, #0
 800282e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002830:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800283a:	f001 fe67 	bl	800450c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800283e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002842:	f7ff f81f 	bl	8001884 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002846:	2100      	movs	r1, #0
 8002848:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800284c:	f7ff fa2a 	bl	8001ca4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8002850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002854:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002858:	f7ff f876 	bl	8001948 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800285c:	2360      	movs	r3, #96	; 0x60
 800285e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800286c:	2300      	movs	r3, #0
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	461a      	mov	r2, r3
 8002876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800287a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800287e:	f001 fedd 	bl	800463c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8002882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002886:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800288a:	f7ff f80b 	bl	80018a4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_ENABLE);
 800288e:	2110      	movs	r1, #16
 8002890:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002894:	f7ff fa1b 	bl	8001cce <LL_TIM_SetTriggerOutput>
  LL_TIM_EnableMasterSlaveMode(TIM2);
 8002898:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800289c:	f7ff fa65 	bl	8001d6a <LL_TIM_EnableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80028a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80028a4:	f7fe ff0e 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PB10   ------> TIM2_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80028a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028ae:	2302      	movs	r3, #2
 80028b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80028be:	2301      	movs	r3, #1
 80028c0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4803      	ldr	r0, [pc, #12]	; (80028d4 <MX_TIM2_Init+0xf0>)
 80028c8:	f001 fa91 	bl	8003dee <LL_GPIO_Init>

}
 80028cc:	bf00      	nop
 80028ce:	3750      	adds	r7, #80	; 0x50
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	48000400 	.word	0x48000400

080028d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08e      	sub	sp, #56	; 0x38
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80028de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	2220      	movs	r2, #32
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f00f fba9 	bl	801204c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80028fa:	2002      	movs	r0, #2
 80028fc:	f7fe fefa 	bl	80016f4 <LL_APB1_GRP1_EnableClock>

  /* TIM3 DMA Init */

  /* TIM3_CH1_TRIG Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002900:	2200      	movs	r2, #0
 8002902:	2106      	movs	r1, #6
 8002904:	482c      	ldr	r0, [pc, #176]	; (80029b8 <MX_TIM3_Init+0xe0>)
 8002906:	f7fe fccd 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_VERYHIGH);
 800290a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800290e:	2106      	movs	r1, #6
 8002910:	4829      	ldr	r0, [pc, #164]	; (80029b8 <MX_TIM3_Init+0xe0>)
 8002912:	f7fe fda1 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8002916:	2220      	movs	r2, #32
 8002918:	2106      	movs	r1, #6
 800291a:	4827      	ldr	r0, [pc, #156]	; (80029b8 <MX_TIM3_Init+0xe0>)
 800291c:	f7fe fce8 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002920:	2200      	movs	r2, #0
 8002922:	2106      	movs	r1, #6
 8002924:	4824      	ldr	r0, [pc, #144]	; (80029b8 <MX_TIM3_Init+0xe0>)
 8002926:	f7fe fd07 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	2106      	movs	r1, #6
 800292e:	4822      	ldr	r0, [pc, #136]	; (80029b8 <MX_TIM3_Init+0xe0>)
 8002930:	f7fe fd26 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_HALFWORD);
 8002934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002938:	2106      	movs	r1, #6
 800293a:	481f      	ldr	r0, [pc, #124]	; (80029b8 <MX_TIM3_Init+0xe0>)
 800293c:	f7fe fd44 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_HALFWORD);
 8002940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002944:	2106      	movs	r1, #6
 8002946:	481c      	ldr	r0, [pc, #112]	; (80029b8 <MX_TIM3_Init+0xe0>)
 8002948:	f7fe fd62 	bl	8001410 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1000;
 800294c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002950:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002952:	2300      	movs	r3, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 72;
 8002956:	2348      	movs	r3, #72	; 0x48
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800295a:	2300      	movs	r3, #0
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800295e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002962:	4619      	mov	r1, r3
 8002964:	4815      	ldr	r0, [pc, #84]	; (80029bc <MX_TIM3_Init+0xe4>)
 8002966:	f001 fdd1 	bl	800450c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800296a:	4814      	ldr	r0, [pc, #80]	; (80029bc <MX_TIM3_Init+0xe4>)
 800296c:	f7fe ff7a 	bl	8001864 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002970:	2100      	movs	r1, #0
 8002972:	4812      	ldr	r0, [pc, #72]	; (80029bc <MX_TIM3_Init+0xe4>)
 8002974:	f7ff f996 	bl	8001ca4 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002978:	2300      	movs	r3, #0
 800297a:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	461a      	mov	r2, r3
 8002990:	2101      	movs	r1, #1
 8002992:	480a      	ldr	r0, [pc, #40]	; (80029bc <MX_TIM3_Init+0xe4>)
 8002994:	f001 fe52 	bl	800463c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002998:	2101      	movs	r1, #1
 800299a:	4808      	ldr	r0, [pc, #32]	; (80029bc <MX_TIM3_Init+0xe4>)
 800299c:	f7fe ff82 	bl	80018a4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_UPDATE);
 80029a0:	2120      	movs	r1, #32
 80029a2:	4806      	ldr	r0, [pc, #24]	; (80029bc <MX_TIM3_Init+0xe4>)
 80029a4:	f7ff f993 	bl	8001cce <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80029a8:	4804      	ldr	r0, [pc, #16]	; (80029bc <MX_TIM3_Init+0xe4>)
 80029aa:	f7ff f9ee 	bl	8001d8a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029ae:	bf00      	nop
 80029b0:	3738      	adds	r7, #56	; 0x38
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40000400 	.word	0x40000400

080029c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b094      	sub	sp, #80	; 0x50
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80029c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	60da      	str	r2, [r3, #12]
 80029d4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	2220      	movs	r2, #32
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f00f fb34 	bl	801204c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	609a      	str	r2, [r3, #8]
 80029ee:	60da      	str	r2, [r3, #12]
 80029f0:	611a      	str	r2, [r3, #16]
 80029f2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80029f4:	2004      	movs	r0, #4
 80029f6:	f7fe fe7d 	bl	80016f4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 1000;
 80029fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002a00:	2300      	movs	r3, #0
 8002a02:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 73;
 8002a04:	2349      	movs	r3, #73	; 0x49
 8002a06:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002a0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a10:	4619      	mov	r1, r3
 8002a12:	482a      	ldr	r0, [pc, #168]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a14:	f001 fd7a 	bl	800450c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 8002a18:	4828      	ldr	r0, [pc, #160]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a1a:	f7fe ff23 	bl	8001864 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4826      	ldr	r0, [pc, #152]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a22:	f7ff f93f 	bl	8001ca4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8002a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a2a:	4824      	ldr	r0, [pc, #144]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a2c:	f7fe ff8c 	bl	8001948 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002a30:	2360      	movs	r3, #96	; 0x60
 8002a32:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a4e:	481b      	ldr	r0, [pc, #108]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a50:	f001 fdf4 	bl	800463c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8002a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a58:	4818      	ldr	r0, [pc, #96]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a5a:	f7fe ff23 	bl	80018a4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM4, LL_TIM_TS_ITR1);
 8002a5e:	2110      	movs	r1, #16
 8002a60:	4816      	ldr	r0, [pc, #88]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a62:	f7ff f96f 	bl	8001d44 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM4, LL_TIM_SLAVEMODE_TRIGGER);
 8002a66:	2106      	movs	r1, #6
 8002a68:	4814      	ldr	r0, [pc, #80]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a6a:	f7ff f956 	bl	8001d1a <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM4);
 8002a6e:	4813      	ldr	r0, [pc, #76]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a70:	f7ff f99b 	bl	8001daa <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM4);
 8002a74:	4811      	ldr	r0, [pc, #68]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a76:	f7ff f9a8 	bl	8001dca <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_UPDATE);
 8002a7a:	2120      	movs	r1, #32
 8002a7c:	480f      	ldr	r0, [pc, #60]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a7e:	f7ff f926 	bl	8001cce <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002a82:	480e      	ldr	r0, [pc, #56]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a84:	f7ff f981 	bl	8001d8a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002a88:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002a8c:	f7fe fe1a 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB8   ------> TIM4_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a96:	2302      	movs	r3, #2
 8002a98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	4804      	ldr	r0, [pc, #16]	; (8002ac0 <MX_TIM4_Init+0x100>)
 8002ab0:	f001 f99d 	bl	8003dee <LL_GPIO_Init>

}
 8002ab4:	bf00      	nop
 8002ab6:	3750      	adds	r7, #80	; 0x50
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	48000400 	.word	0x48000400

08002ac4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002ad6:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <MX_TIM6_Init+0x68>)
 8002ad8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002af4:	480c      	ldr	r0, [pc, #48]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002af6:	f000 fb78 	bl	80031ea <HAL_TIM_Base_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002b00:	f000 f96c 	bl	8002ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b04:	2320      	movs	r3, #32
 8002b06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4805      	ldr	r0, [pc, #20]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002b12:	f000 fc5f 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002b1c:	f000 f95e 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000470 	.word	0x20000470
 8002b2c:	40001000 	.word	0x40001000

08002b30 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08c      	sub	sp, #48	; 0x30
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002b36:	f107 031c 	add.w	r3, r7, #28
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	609a      	str	r2, [r3, #8]
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
 8002b54:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8002b56:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b5a:	f7fe fde3 	bl	8001724 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002b5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b62:	f7fe fdaf 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**TIM8 GPIO Configuration
  PC9   ------> TIM8_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4832      	ldr	r0, [pc, #200]	; (8002c50 <MX_TIM8_Init+0x120>)
 8002b86:	f001 f932 	bl	8003dee <LL_GPIO_Init>

  /* TIM8 DMA Init */

  /* TIM8_CH4_TRIG_COM Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4831      	ldr	r0, [pc, #196]	; (8002c54 <MX_TIM8_Init+0x124>)
 8002b90:	f7fe fb88 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH);
 8002b94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b98:	2102      	movs	r1, #2
 8002b9a:	482e      	ldr	r0, [pc, #184]	; (8002c54 <MX_TIM8_Init+0x124>)
 8002b9c:	f7fe fc5c 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	482b      	ldr	r0, [pc, #172]	; (8002c54 <MX_TIM8_Init+0x124>)
 8002ba6:	f7fe fba3 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2102      	movs	r1, #2
 8002bae:	4829      	ldr	r0, [pc, #164]	; (8002c54 <MX_TIM8_Init+0x124>)
 8002bb0:	f7fe fbc2 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8002bb4:	2280      	movs	r2, #128	; 0x80
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	4826      	ldr	r0, [pc, #152]	; (8002c54 <MX_TIM8_Init+0x124>)
 8002bba:	f7fe fbe1 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_HALFWORD);
 8002bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	4823      	ldr	r0, [pc, #140]	; (8002c54 <MX_TIM8_Init+0x124>)
 8002bc6:	f7fe fbff 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_HALFWORD);
 8002bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bce:	2102      	movs	r1, #2
 8002bd0:	4820      	ldr	r0, [pc, #128]	; (8002c54 <MX_TIM8_Init+0x124>)
 8002bd2:	f7fe fc1d 	bl	8001410 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.RepetitionCounter = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8002bec:	f107 031c 	add.w	r3, r7, #28
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4819      	ldr	r0, [pc, #100]	; (8002c58 <MX_TIM8_Init+0x128>)
 8002bf4:	f001 fc8a 	bl	800450c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8002bf8:	4817      	ldr	r0, [pc, #92]	; (8002c58 <MX_TIM8_Init+0x128>)
 8002bfa:	f7fe fe43 	bl	8001884 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4815      	ldr	r0, [pc, #84]	; (8002c58 <MX_TIM8_Init+0x128>)
 8002c02:	f7ff f864 	bl	8001cce <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM8, LL_TIM_TRGO2_RESET);
 8002c06:	2100      	movs	r1, #0
 8002c08:	4813      	ldr	r0, [pc, #76]	; (8002c58 <MX_TIM8_Init+0x128>)
 8002c0a:	f7ff f873 	bl	8001cf4 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8002c0e:	4812      	ldr	r0, [pc, #72]	; (8002c58 <MX_TIM8_Init+0x128>)
 8002c10:	f7ff f8bb 	bl	8001d8a <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH4, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002c14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c1c:	480e      	ldr	r0, [pc, #56]	; (8002c58 <MX_TIM8_Init+0x128>)
 8002c1e:	f7fe fee3 	bl	80019e8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH4, LL_TIM_ICPSC_DIV1);
 8002c22:	2200      	movs	r2, #0
 8002c24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c28:	480b      	ldr	r0, [pc, #44]	; (8002c58 <MX_TIM8_Init+0x128>)
 8002c2a:	f7fe ff37 	bl	8001a9c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH4, LL_TIM_IC_FILTER_FDIV1);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c34:	4808      	ldr	r0, [pc, #32]	; (8002c58 <MX_TIM8_Init+0x128>)
 8002c36:	f7fe ff8b 	bl	8001b50 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH4, LL_TIM_IC_POLARITY_RISING);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c40:	4805      	ldr	r0, [pc, #20]	; (8002c58 <MX_TIM8_Init+0x128>)
 8002c42:	f7fe ffdf 	bl	8001c04 <LL_TIM_IC_SetPolarity>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	3730      	adds	r7, #48	; 0x30
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	48000800 	.word	0x48000800
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40013400 	.word	0x40013400

08002c5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08e      	sub	sp, #56	; 0x38
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002c62:	f107 031c 	add.w	r3, r7, #28
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
 8002c70:	611a      	str	r2, [r3, #16]
 8002c72:	615a      	str	r2, [r3, #20]
 8002c74:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
 8002c84:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002c86:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c8a:	f7fe fd33 	bl	80016f4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002c8e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c92:	f7fe fd17 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c96:	230c      	movs	r3, #12
 8002c98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002caa:	2307      	movs	r3, #7
 8002cac:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb6:	f001 f89a 	bl	8003dee <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002cba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002cbe:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002ccc:	230c      	movs	r3, #12
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4808      	ldr	r0, [pc, #32]	; (8002d00 <MX_USART2_UART_Init+0xa4>)
 8002ce0:	f002 f84a 	bl	8004d78 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8002ce4:	4806      	ldr	r0, [pc, #24]	; (8002d00 <MX_USART2_UART_Init+0xa4>)
 8002ce6:	f7ff f8a6 	bl	8001e36 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <MX_USART2_UART_Init+0xa4>)
 8002cec:	f7ff f88d 	bl	8001e0a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002cf0:	4803      	ldr	r0, [pc, #12]	; (8002d00 <MX_USART2_UART_Init+0xa4>)
 8002cf2:	f7ff f87a 	bl	8001dea <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	3738      	adds	r7, #56	; 0x38
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40004400 	.word	0x40004400

08002d04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f7fe fcdb 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8002d0e:	2002      	movs	r0, #2
 8002d10:	f7fe fcd8 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>

}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002d1e:	f107 031c 	add.w	r3, r7, #28
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
 8002d38:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002d3a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d3e:	f7fe fcc1 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8002d42:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002d46:	f7fe fcbd 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002d4a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002d4e:	f7fe fcb9 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002d52:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002d56:	f7fe fcb5 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8002d5a:	2120      	movs	r1, #32
 8002d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d60:	f7ff f8d7 	bl	8001f12 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8002d64:	491b      	ldr	r1, [pc, #108]	; (8002dd4 <MX_GPIO_Init+0xbc>)
 8002d66:	2002      	movs	r0, #2
 8002d68:	f7fe fd2c 	bl	80017c4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d72:	4819      	ldr	r0, [pc, #100]	; (8002dd8 <MX_GPIO_Init+0xc0>)
 8002d74:	f7ff f89e 	bl	8001eb4 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d7e:	4816      	ldr	r0, [pc, #88]	; (8002dd8 <MX_GPIO_Init+0xc0>)
 8002d80:	f7ff f869 	bl	8001e56 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8002d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d88:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8002da0:	f107 031c 	add.w	r3, r7, #28
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fe35 	bl	8003a14 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8002daa:	2320      	movs	r3, #32
 8002dac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002dae:	2301      	movs	r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc6:	f001 f812 	bl	8003dee <LL_GPIO_Init>

}
 8002dca:	bf00      	nop
 8002dcc:	3728      	adds	r7, #40	; 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	00f00003 	.word	0x00f00003
 8002dd8:	48000800 	.word	0x48000800

08002ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_MspInit+0x4c>)
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <HAL_MspInit+0x4c>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6193      	str	r3, [r2, #24]
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <HAL_MspInit+0x4c>)
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_MspInit+0x4c>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <HAL_MspInit+0x4c>)
 8002e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e14:	61d3      	str	r3, [r2, #28]
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_MspInit+0x4c>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	210f      	movs	r1, #15
 8002e26:	f06f 0001 	mvn.w	r0, #1
 8002e2a:	f000 f9b6 	bl	800319a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000

08002e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <HAL_TIM_Base_MspInit+0x38>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d10b      	bne.n	8002e66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_TIM_Base_MspInit+0x3c>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <HAL_TIM_Base_MspInit+0x3c>)
 8002e54:	f043 0310 	orr.w	r3, r3, #16
 8002e58:	61d3      	str	r3, [r2, #28]
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_TIM_Base_MspInit+0x3c>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40001000 	.word	0x40001000
 8002e78:	40021000 	.word	0x40021000

08002e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8e:	e7fe      	b.n	8002e8e <HardFault_Handler+0x4>

08002e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <MemManage_Handler+0x4>

08002e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e9a:	e7fe      	b.n	8002e9a <BusFault_Handler+0x4>

08002e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ea0:	e7fe      	b.n	8002ea0 <UsageFault_Handler+0x4>

08002ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eb8:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <_sbrk+0x5c>)
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <_sbrk+0x60>)
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec4:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <_sbrk+0x64>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ecc:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <_sbrk+0x64>)
 8002ece:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <_sbrk+0x68>)
 8002ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <_sbrk+0x64>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d207      	bcs.n	8002ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ee0:	f00f f842 	bl	8011f68 <__errno>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	230c      	movs	r3, #12
 8002ee8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295
 8002eee:	e009      	b.n	8002f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <_sbrk+0x64>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <_sbrk+0x64>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <_sbrk+0x64>)
 8002f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f02:	68fb      	ldr	r3, [r7, #12]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20010000 	.word	0x20010000
 8002f10:	00000400 	.word	0x00000400
 8002f14:	20000214 	.word	0x20000214
 8002f18:	2000e330 	.word	0x2000e330

08002f1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <SystemInit+0x20>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <SystemInit+0x20>)
 8002f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f44:	480d      	ldr	r0, [pc, #52]	; (8002f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f46:	490e      	ldr	r1, [pc, #56]	; (8002f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f48:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <LoopForever+0xe>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f4c:	e002      	b.n	8002f54 <LoopCopyDataInit>

08002f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f52:	3304      	adds	r3, #4

08002f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f58:	d3f9      	bcc.n	8002f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5a:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f5c:	4c0b      	ldr	r4, [pc, #44]	; (8002f8c <LoopForever+0x16>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f60:	e001      	b.n	8002f66 <LoopFillZerobss>

08002f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f64:	3204      	adds	r2, #4

08002f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f68:	d3fb      	bcc.n	8002f62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f6a:	f7ff ffd7 	bl	8002f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f6e:	f00f f801 	bl	8011f74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f72:	f7fe ffdc 	bl	8001f2e <main>

08002f76 <LoopForever>:

LoopForever:
    b LoopForever
 8002f76:	e7fe      	b.n	8002f76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f80:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002f84:	08015ba0 	.word	0x08015ba0
  ldr r2, =_sbss
 8002f88:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002f8c:	2000e330 	.word	0x2000e330

08002f90 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f90:	e7fe      	b.n	8002f90 <CAN_RX1_IRQHandler>
	...

08002f94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_Init+0x28>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <HAL_Init+0x28>)
 8002f9e:	f043 0310 	orr.w	r3, r3, #16
 8002fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f000 f8ed 	bl	8003184 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002faa:	200f      	movs	r0, #15
 8002fac:	f000 f808 	bl	8002fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb0:	f7ff ff1c 	bl	8002dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40022000 	.word	0x40022000

08002fc0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_InitTick+0x54>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_InitTick+0x58>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f8f7 	bl	80031d2 <HAL_SYSTICK_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00e      	b.n	800300c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b0f      	cmp	r3, #15
 8002ff2:	d80a      	bhi.n	800300a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	f000 f8cd 	bl	800319a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003000:	4a06      	ldr	r2, [pc, #24]	; (800301c <HAL_InitTick+0x5c>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e000      	b.n	800300c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000000 	.word	0x20000000
 8003018:	20000008 	.word	0x20000008
 800301c:	20000004 	.word	0x20000004

08003020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800303c:	4013      	ands	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800304c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003052:	4a04      	ldr	r2, [pc, #16]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	60d3      	str	r3, [r2, #12]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <__NVIC_GetPriorityGrouping+0x18>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 0307 	and.w	r3, r3, #7
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	6039      	str	r1, [r7, #0]
 800308e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db0a      	blt.n	80030ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	490c      	ldr	r1, [pc, #48]	; (80030d0 <__NVIC_SetPriority+0x4c>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	440b      	add	r3, r1
 80030a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ac:	e00a      	b.n	80030c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4908      	ldr	r1, [pc, #32]	; (80030d4 <__NVIC_SetPriority+0x50>)
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3b04      	subs	r3, #4
 80030bc:	0112      	lsls	r2, r2, #4
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	440b      	add	r3, r1
 80030c2:	761a      	strb	r2, [r3, #24]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000e100 	.word	0xe000e100
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f1c3 0307 	rsb	r3, r3, #7
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	bf28      	it	cs
 80030f6:	2304      	movcs	r3, #4
 80030f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d902      	bls.n	8003108 <NVIC_EncodePriority+0x30>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3b03      	subs	r3, #3
 8003106:	e000      	b.n	800310a <NVIC_EncodePriority+0x32>
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	401a      	ands	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003120:	f04f 31ff 	mov.w	r1, #4294967295
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	43d9      	mvns	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003130:	4313      	orrs	r3, r2
         );
}
 8003132:	4618      	mov	r0, r3
 8003134:	3724      	adds	r7, #36	; 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003150:	d301      	bcc.n	8003156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003152:	2301      	movs	r3, #1
 8003154:	e00f      	b.n	8003176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003156:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <SysTick_Config+0x40>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315e:	210f      	movs	r1, #15
 8003160:	f04f 30ff 	mov.w	r0, #4294967295
 8003164:	f7ff ff8e 	bl	8003084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <SysTick_Config+0x40>)
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <SysTick_Config+0x40>)
 8003170:	2207      	movs	r2, #7
 8003172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	e000e010 	.word	0xe000e010

08003184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff ff47 	bl	8003020 <__NVIC_SetPriorityGrouping>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	4603      	mov	r3, r0
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ac:	f7ff ff5c 	bl	8003068 <__NVIC_GetPriorityGrouping>
 80031b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	6978      	ldr	r0, [r7, #20]
 80031b8:	f7ff ff8e 	bl	80030d8 <NVIC_EncodePriority>
 80031bc:	4602      	mov	r2, r0
 80031be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff5d 	bl	8003084 <__NVIC_SetPriority>
}
 80031ca:	bf00      	nop
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff ffb0 	bl	8003140 <SysTick_Config>
 80031e0:	4603      	mov	r3, r0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e049      	b.n	8003290 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff fe13 	bl	8002e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f000 f835 	bl	8003298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a42      	ldr	r2, [pc, #264]	; (80033b4 <TIM_Base_SetConfig+0x11c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d013      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b6:	d00f      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3f      	ldr	r2, [pc, #252]	; (80033b8 <TIM_Base_SetConfig+0x120>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00b      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3e      	ldr	r2, [pc, #248]	; (80033bc <TIM_Base_SetConfig+0x124>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d007      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3d      	ldr	r2, [pc, #244]	; (80033c0 <TIM_Base_SetConfig+0x128>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a3c      	ldr	r2, [pc, #240]	; (80033c4 <TIM_Base_SetConfig+0x12c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d108      	bne.n	80032ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a31      	ldr	r2, [pc, #196]	; (80033b4 <TIM_Base_SetConfig+0x11c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d01f      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f8:	d01b      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2e      	ldr	r2, [pc, #184]	; (80033b8 <TIM_Base_SetConfig+0x120>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d017      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <TIM_Base_SetConfig+0x124>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <TIM_Base_SetConfig+0x128>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00f      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a2c      	ldr	r2, [pc, #176]	; (80033c8 <TIM_Base_SetConfig+0x130>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00b      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <TIM_Base_SetConfig+0x134>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <TIM_Base_SetConfig+0x138>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <TIM_Base_SetConfig+0x12c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d108      	bne.n	8003344 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <TIM_Base_SetConfig+0x11c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d013      	beq.n	8003398 <TIM_Base_SetConfig+0x100>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <TIM_Base_SetConfig+0x128>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00f      	beq.n	8003398 <TIM_Base_SetConfig+0x100>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a13      	ldr	r2, [pc, #76]	; (80033c8 <TIM_Base_SetConfig+0x130>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00b      	beq.n	8003398 <TIM_Base_SetConfig+0x100>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a12      	ldr	r2, [pc, #72]	; (80033cc <TIM_Base_SetConfig+0x134>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <TIM_Base_SetConfig+0x100>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <TIM_Base_SetConfig+0x138>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0x100>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <TIM_Base_SetConfig+0x12c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d103      	bne.n	80033a0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	615a      	str	r2, [r3, #20]
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800
 80033c0:	40013400 	.word	0x40013400
 80033c4:	40015000 	.word	0x40015000
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800

080033d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e06d      	b.n	80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a30      	ldr	r2, [pc, #192]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a2d      	ldr	r2, [pc, #180]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d108      	bne.n	800343c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003430:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01d      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003468:	d018      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a16      	ldr	r2, [pc, #88]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a11      	ldr	r2, [pc, #68]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d10c      	bne.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40013400 	.word	0x40013400
 80034dc:	40015000 	.word	0x40015000
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800
 80034e8:	40014000 	.word	0x40014000

080034ec <LL_ADC_REG_SetSequencerLength>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f023 020f 	bic.w	r2, r3, #15
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <LL_ADC_IsEnabled>:
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	bf0c      	ite	eq
 8003526:	2301      	moveq	r3, #1
 8003528:	2300      	movne	r3, #0
 800352a:	b2db      	uxtb	r3, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a25      	ldr	r2, [pc, #148]	; (80035e0 <LL_ADC_CommonInit+0xa8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10f      	bne.n	800356e <LL_ADC_CommonInit+0x36>
 800354e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003552:	f7ff ffde 	bl	8003512 <LL_ADC_IsEnabled>
 8003556:	4604      	mov	r4, r0
 8003558:	4822      	ldr	r0, [pc, #136]	; (80035e4 <LL_ADC_CommonInit+0xac>)
 800355a:	f7ff ffda 	bl	8003512 <LL_ADC_IsEnabled>
 800355e:	4603      	mov	r3, r0
 8003560:	4323      	orrs	r3, r4
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf0c      	ite	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	2300      	movne	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e00d      	b.n	800358a <LL_ADC_CommonInit+0x52>
 800356e:	481e      	ldr	r0, [pc, #120]	; (80035e8 <LL_ADC_CommonInit+0xb0>)
 8003570:	f7ff ffcf 	bl	8003512 <LL_ADC_IsEnabled>
 8003574:	4604      	mov	r4, r0
 8003576:	481d      	ldr	r0, [pc, #116]	; (80035ec <LL_ADC_CommonInit+0xb4>)
 8003578:	f7ff ffcb 	bl	8003512 <LL_ADC_IsEnabled>
 800357c:	4603      	mov	r3, r0
 800357e:	4323      	orrs	r3, r4
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d020      	beq.n	80035d0 <LL_ADC_CommonInit+0x98>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d012      	beq.n	80035bc <LL_ADC_CommonInit+0x84>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <LL_ADC_CommonInit+0xb8>)
 800359c:	4013      	ands	r3, r2
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	6811      	ldr	r1, [r2, #0]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	6852      	ldr	r2, [r2, #4]
 80035a6:	4311      	orrs	r1, r2
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	6892      	ldr	r2, [r2, #8]
 80035ac:	4311      	orrs	r1, r2
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	68d2      	ldr	r2, [r2, #12]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	e00b      	b.n	80035d4 <LL_ADC_CommonInit+0x9c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <LL_ADC_CommonInit+0xb8>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	e001      	b.n	80035d4 <LL_ADC_CommonInit+0x9c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd90      	pop	{r4, r7, pc}
 80035de:	bf00      	nop
 80035e0:	50000300 	.word	0x50000300
 80035e4:	50000100 	.word	0x50000100
 80035e8:	50000400 	.word	0x50000400
 80035ec:	50000500 	.word	0x50000500
 80035f0:	fffc30e0 	.word	0xfffc30e0

080035f4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ff85 	bl	8003512 <LL_ADC_IsEnabled>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d111      	bne.n	8003632 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003616:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	6811      	ldr	r1, [r2, #0]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	6852      	ldr	r2, [r2, #4]
 8003622:	4311      	orrs	r1, r2
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	6892      	ldr	r2, [r2, #8]
 8003628:	430a      	orrs	r2, r1
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	60da      	str	r2, [r3, #12]
 8003630:	e001      	b.n	8003636 <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ff5f 	bl	8003512 <LL_ADC_IsEnabled>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d132      	bne.n	80036c0 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d015      	beq.n	800368e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <LL_ADC_REG_Init+0x90>)
 8003668:	4013      	ands	r3, r2
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	6811      	ldr	r1, [r2, #0]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	6892      	ldr	r2, [r2, #8]
 8003672:	4311      	orrs	r1, r2
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	68d2      	ldr	r2, [r2, #12]
 8003678:	4311      	orrs	r1, r2
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	6912      	ldr	r2, [r2, #16]
 800367e:	4311      	orrs	r1, r2
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	6952      	ldr	r2, [r2, #20]
 8003684:	430a      	orrs	r2, r1
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]
 800368c:	e011      	b.n	80036b2 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <LL_ADC_REG_Init+0x90>)
 8003694:	4013      	ands	r3, r2
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	6811      	ldr	r1, [r2, #0]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	68d2      	ldr	r2, [r2, #12]
 800369e:	4311      	orrs	r1, r2
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	6912      	ldr	r2, [r2, #16]
 80036a4:	4311      	orrs	r1, r2
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	6952      	ldr	r2, [r2, #20]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4619      	mov	r1, r3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff17 	bl	80034ec <LL_ADC_REG_SetSequencerLength>
 80036be:	e001      	b.n	80036c4 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	fff0c03c 	.word	0xfff0c03c

080036d4 <LL_DAC_IsEnabled>:
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2101      	movs	r1, #1
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	429a      	cmp	r2, r3
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff ffd5 	bl	80036d4 <LL_DAC_IsEnabled>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d13a      	bne.n	80037a6 <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01e      	beq.n	8003776 <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	f640 71fa 	movw	r1, #4090	; 0xffa
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	401a      	ands	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6819      	ldr	r1, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4319      	orrs	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4319      	orrs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	4319      	orrs	r1, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	431a      	orrs	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e019      	b.n	80037aa <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	21fa      	movs	r1, #250	; 0xfa
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	401a      	ands	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	4319      	orrs	r1, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	431a      	orrs	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e001      	b.n	80037aa <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4904      	ldr	r1, [pc, #16]	; (80037d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40010400 	.word	0x40010400

080037d8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <LL_EXTI_EnableIT_32_63+0x20>)
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	4904      	ldr	r1, [pc, #16]	; (80037f8 <LL_EXTI_EnableIT_32_63+0x20>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	620b      	str	r3, [r1, #32]
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40010400 	.word	0x40010400

080037fc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <LL_EXTI_DisableIT_0_31+0x24>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	43db      	mvns	r3, r3
 800380c:	4904      	ldr	r1, [pc, #16]	; (8003820 <LL_EXTI_DisableIT_0_31+0x24>)
 800380e:	4013      	ands	r3, r2
 8003810:	600b      	str	r3, [r1, #0]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010400 	.word	0x40010400

08003824 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <LL_EXTI_DisableIT_32_63+0x24>)
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	43db      	mvns	r3, r3
 8003834:	4904      	ldr	r1, [pc, #16]	; (8003848 <LL_EXTI_DisableIT_32_63+0x24>)
 8003836:	4013      	ands	r3, r2
 8003838:	620b      	str	r3, [r1, #32]
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40010400 	.word	0x40010400

0800384c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	4904      	ldr	r1, [pc, #16]	; (800386c <LL_EXTI_EnableEvent_0_31+0x20>)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]

}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40010400 	.word	0x40010400

08003870 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <LL_EXTI_EnableEvent_32_63+0x20>)
 800387a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387c:	4904      	ldr	r1, [pc, #16]	; (8003890 <LL_EXTI_EnableEvent_32_63+0x20>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4313      	orrs	r3, r2
 8003882:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40010400 	.word	0x40010400

08003894 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	4904      	ldr	r1, [pc, #16]	; (80038b8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40010400 	.word	0x40010400

080038bc <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80038c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	4904      	ldr	r1, [pc, #16]	; (80038e0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40010400 	.word	0x40010400

080038e4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	4904      	ldr	r1, [pc, #16]	; (8003904 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]

}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40010400 	.word	0x40010400

08003908 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003914:	4904      	ldr	r1, [pc, #16]	; (8003928 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4313      	orrs	r3, r2
 800391a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	40010400 	.word	0x40010400

0800392c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	43db      	mvns	r3, r3
 800393c:	4904      	ldr	r1, [pc, #16]	; (8003950 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800393e:	4013      	ands	r3, r2
 8003940:	608b      	str	r3, [r1, #8]

}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40010400 	.word	0x40010400

08003954 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800395c:	4b06      	ldr	r3, [pc, #24]	; (8003978 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800395e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	43db      	mvns	r3, r3
 8003964:	4904      	ldr	r1, [pc, #16]	; (8003978 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003966:	4013      	ands	r3, r2
 8003968:	628b      	str	r3, [r1, #40]	; 0x28
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40010400 	.word	0x40010400

0800397c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	4904      	ldr	r1, [pc, #16]	; (800399c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4313      	orrs	r3, r2
 800398e:	60cb      	str	r3, [r1, #12]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40010400 	.word	0x40010400

080039a0 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80039aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ac:	4904      	ldr	r1, [pc, #16]	; (80039c0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40010400 	.word	0x40010400

080039c4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	43db      	mvns	r3, r3
 80039d4:	4904      	ldr	r1, [pc, #16]	; (80039e8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	60cb      	str	r3, [r1, #12]
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40010400 	.word	0x40010400

080039ec <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80039f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	4904      	ldr	r1, [pc, #16]	; (8003a10 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40010400 	.word	0x40010400

08003a14 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	7a1b      	ldrb	r3, [r3, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80c2 	beq.w	8003bae <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d05b      	beq.n	8003aea <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	7a5b      	ldrb	r3, [r3, #9]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d00e      	beq.n	8003a58 <LL_EXTI_Init+0x44>
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d017      	beq.n	8003a6e <LL_EXTI_Init+0x5a>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d120      	bne.n	8003a84 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff ff24 	bl	8003894 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff feaf 	bl	80037b4 <LL_EXTI_EnableIT_0_31>
          break;
 8003a56:	e018      	b.n	8003a8a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fecd 	bl	80037fc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fef0 	bl	800384c <LL_EXTI_EnableEvent_0_31>
          break;
 8003a6c:	e00d      	b.n	8003a8a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fe9e 	bl	80037b4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fee5 	bl	800384c <LL_EXTI_EnableEvent_0_31>
          break;
 8003a82:	e002      	b.n	8003a8a <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
          break;
 8003a88:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	7a9b      	ldrb	r3, [r3, #10]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d02b      	beq.n	8003aea <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	7a9b      	ldrb	r3, [r3, #10]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d00e      	beq.n	8003ab8 <LL_EXTI_Init+0xa4>
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d017      	beq.n	8003ace <LL_EXTI_Init+0xba>
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d120      	bne.n	8003ae4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff8c 	bl	80039c4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ff17 	bl	80038e4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003ab6:	e019      	b.n	8003aec <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff35 	bl	800392c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff58 	bl	800397c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003acc:	e00e      	b.n	8003aec <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ff06 	bl	80038e4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff4d 	bl	800397c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003ae2:	e003      	b.n	8003aec <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
            break;
 8003ae8:	e000      	b.n	8003aec <LL_EXTI_Init+0xd8>
        }
      }
 8003aea:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d071      	beq.n	8003bd8 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	7a5b      	ldrb	r3, [r3, #9]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d00e      	beq.n	8003b1a <LL_EXTI_Init+0x106>
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d017      	beq.n	8003b30 <LL_EXTI_Init+0x11c>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d120      	bne.n	8003b46 <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fed7 	bl	80038bc <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fe60 	bl	80037d8 <LL_EXTI_EnableIT_32_63>
          break;
 8003b18:	e018      	b.n	8003b4c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fe80 	bl	8003824 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fea1 	bl	8003870 <LL_EXTI_EnableEvent_32_63>
          break;
 8003b2e:	e00d      	b.n	8003b4c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fe4f 	bl	80037d8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fe96 	bl	8003870 <LL_EXTI_EnableEvent_32_63>
          break;
 8003b44:	e002      	b.n	8003b4c <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
          break;
 8003b4a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7a9b      	ldrb	r3, [r3, #10]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d041      	beq.n	8003bd8 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	7a9b      	ldrb	r3, [r3, #10]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d00e      	beq.n	8003b7a <LL_EXTI_Init+0x166>
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d017      	beq.n	8003b90 <LL_EXTI_Init+0x17c>
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d120      	bne.n	8003ba6 <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ff3f 	bl	80039ec <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fec8 	bl	8003908 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8003b78:	e02f      	b.n	8003bda <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fee8 	bl	8003954 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff09 	bl	80039a0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003b8e:	e024      	b.n	8003bda <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff feb7 	bl	8003908 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fefe 	bl	80039a0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003ba4:	e019      	b.n	8003bda <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
            break;
 8003baa:	bf00      	nop
 8003bac:	e015      	b.n	8003bda <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff fe22 	bl	80037fc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fe69 	bl	8003894 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fe2c 	bl	8003824 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fe73 	bl	80038bc <LL_EXTI_DisableEvent_32_63>
 8003bd6:	e000      	b.n	8003bda <LL_EXTI_Init+0x1c6>
      }
 8003bd8:	bf00      	nop
#endif
  }
  return status;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <LL_GPIO_SetPinMode>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	613b      	str	r3, [r7, #16]
  return result;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	2103      	movs	r1, #3
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	401a      	ands	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	61bb      	str	r3, [r7, #24]
  return result;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	fab3 f383 	clz	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	601a      	str	r2, [r3, #0]
}
 8003c36:	bf00      	nop
 8003c38:	3724      	adds	r7, #36	; 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_GPIO_SetPinOutputType>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	401a      	ands	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]
}
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <LL_GPIO_SetPinSpeed>:
{
 8003c72:	b480      	push	{r7}
 8003c74:	b089      	sub	sp, #36	; 0x24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	613b      	str	r3, [r7, #16]
  return result;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	fab3 f383 	clz	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	2103      	movs	r1, #3
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	401a      	ands	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	61bb      	str	r3, [r7, #24]
  return result;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	fab3 f383 	clz	r3, r3
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	609a      	str	r2, [r3, #8]
}
 8003cc4:	bf00      	nop
 8003cc6:	3724      	adds	r7, #36	; 0x24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <LL_GPIO_SetPinPull>:
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	613b      	str	r3, [r7, #16]
  return result;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2103      	movs	r1, #3
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	401a      	ands	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	61bb      	str	r3, [r7, #24]
  return result;
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	60da      	str	r2, [r3, #12]
}
 8003d22:	bf00      	nop
 8003d24:	3724      	adds	r7, #36	; 0x24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_GPIO_SetAFPin_0_7>:
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b089      	sub	sp, #36	; 0x24
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	613b      	str	r3, [r7, #16]
  return result;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	210f      	movs	r1, #15
 8003d56:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	401a      	ands	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	61bb      	str	r3, [r7, #24]
  return result;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	fab3 f383 	clz	r3, r3
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	621a      	str	r2, [r3, #32]
}
 8003d80:	bf00      	nop
 8003d82:	3724      	adds	r7, #36	; 0x24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_GPIO_SetAFPin_8_15>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	; 0x24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	fa93 f3a3 	rbit	r3, r3
 8003da8:	613b      	str	r3, [r7, #16]
  return result;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	fab3 f383 	clz	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	210f      	movs	r1, #15
 8003db6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	401a      	ands	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	0a1b      	lsrs	r3, r3, #8
 8003dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	61bb      	str	r3, [r7, #24]
  return result;
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	fab3 f383 	clz	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003de2:	bf00      	nop
 8003de4:	3724      	adds	r7, #36	; 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b088      	sub	sp, #32
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	613b      	str	r3, [r7, #16]
  return result;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003e10:	e051      	b.n	8003eb6 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	2101      	movs	r1, #1
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	4013      	ands	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d043      	beq.n	8003eb0 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d003      	beq.n	8003e38 <LL_GPIO_Init+0x4a>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d10e      	bne.n	8003e56 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	69b9      	ldr	r1, [r7, #24]
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff ff16 	bl	8003c72 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6819      	ldr	r1, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fef6 	bl	8003c42 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	69b9      	ldr	r1, [r7, #24]
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff ff36 	bl	8003cd0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d11a      	bne.n	8003ea2 <LL_GPIO_Init+0xb4>
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	60bb      	str	r3, [r7, #8]
  return result;
 8003e78:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003e7a:	fab3 f383 	clz	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b07      	cmp	r3, #7
 8003e82:	d807      	bhi.n	8003e94 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	69b9      	ldr	r1, [r7, #24]
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ff4e 	bl	8003d2e <LL_GPIO_SetAFPin_0_7>
 8003e92:	e006      	b.n	8003ea2 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	69b9      	ldr	r1, [r7, #24]
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff75 	bl	8003d8c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	69b9      	ldr	r1, [r7, #24]
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff fe9a 	bl	8003be4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1a6      	bne.n	8003e12 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <LL_RCC_HSI_IsReady>:
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <LL_RCC_HSI_IsReady+0x20>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <LL_RCC_LSE_IsReady>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <LL_RCC_LSE_IsReady+0x20>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40021000 	.word	0x40021000

08003f18 <LL_RCC_GetSysClkSource>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <LL_RCC_GetSysClkSource+0x18>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 030c 	and.w	r3, r3, #12
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000

08003f34 <LL_RCC_GetAHBPrescaler>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <LL_RCC_GetAHBPrescaler+0x18>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000

08003f50 <LL_RCC_GetAPB1Prescaler>:
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000

08003f6c <LL_RCC_GetAPB2Prescaler>:
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000

08003f88 <LL_RCC_GetUSARTClockSource>:
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8003f90:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <LL_RCC_GetUSARTClockSource+0x28>)
 8003f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f94:	2103      	movs	r1, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	4313      	orrs	r3, r2
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	40021000 	.word	0x40021000

08003fb4 <LL_RCC_GetUARTClockSource>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, UARTx) | (UARTx >> 8U));
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <LL_RCC_GetUARTClockSource+0x24>)
 8003fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	4313      	orrs	r3, r2
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000

08003fdc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <LL_RCC_PLL_GetMainSource+0x18>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000

08003ff8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8004004:	4618      	mov	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000

08004014 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <LL_RCC_PLL_GetPrediv+0x18>)
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	f003 030f 	and.w	r3, r3, #15
}
 8004020:	4618      	mov	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000

08004030 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d12a      	bne.n	8004098 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff ffa0 	bl	8003f88 <LL_RCC_GetUSARTClockSource>
 8004048:	4603      	mov	r3, r0
 800404a:	2b02      	cmp	r3, #2
 800404c:	d00f      	beq.n	800406e <LL_RCC_GetUSARTClockFreq+0x3e>
 800404e:	2b03      	cmp	r3, #3
 8004050:	d005      	beq.n	800405e <LL_RCC_GetUSARTClockFreq+0x2e>
 8004052:	2b01      	cmp	r3, #1
 8004054:	d114      	bne.n	8004080 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004056:	f000 f92b 	bl	80042b0 <RCC_GetSystemClockFreq>
 800405a:	60f8      	str	r0, [r7, #12]
        break;
 800405c:	e021      	b.n	80040a2 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800405e:	f7ff ff37 	bl	8003ed0 <LL_RCC_HSI_IsReady>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d019      	beq.n	800409c <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8004068:	4b46      	ldr	r3, [pc, #280]	; (8004184 <LL_RCC_GetUSARTClockFreq+0x154>)
 800406a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800406c:	e016      	b.n	800409c <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800406e:	f7ff ff41 	bl	8003ef4 <LL_RCC_LSE_IsReady>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d013      	beq.n	80040a0 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8004078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800407e:	e00f      	b.n	80040a0 <LL_RCC_GetUSARTClockFreq+0x70>
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004080:	f000 f916 	bl	80042b0 <RCC_GetSystemClockFreq>
 8004084:	4603      	mov	r3, r0
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f934 	bl	80042f4 <RCC_GetHCLKClockFreq>
 800408c:	4603      	mov	r3, r0
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f95a 	bl	8004348 <RCC_GetPCLK2ClockFreq>
 8004094:	60f8      	str	r0, [r7, #12]
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8004096:	e004      	b.n	80040a2 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8004098:	bf00      	nop
 800409a:	e002      	b.n	80040a2 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 800409c:	bf00      	nop
 800409e:	e000      	b.n	80040a2 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 80040a0:	bf00      	nop
#endif /* RCC_CFGR3_USART1SW  */

#if defined(RCC_CFGR3_USART2SW)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d12d      	bne.n	8004104 <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ff6d 	bl	8003f88 <LL_RCC_GetUSARTClockSource>
 80040ae:	4603      	mov	r3, r0
 80040b0:	4a35      	ldr	r2, [pc, #212]	; (8004188 <LL_RCC_GetUSARTClockFreq+0x158>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d011      	beq.n	80040da <LL_RCC_GetUSARTClockFreq+0xaa>
 80040b6:	4a35      	ldr	r2, [pc, #212]	; (800418c <LL_RCC_GetUSARTClockFreq+0x15c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d006      	beq.n	80040ca <LL_RCC_GetUSARTClockFreq+0x9a>
 80040bc:	4a34      	ldr	r2, [pc, #208]	; (8004190 <LL_RCC_GetUSARTClockFreq+0x160>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d114      	bne.n	80040ec <LL_RCC_GetUSARTClockFreq+0xbc>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80040c2:	f000 f8f5 	bl	80042b0 <RCC_GetSystemClockFreq>
 80040c6:	60f8      	str	r0, [r7, #12]
        break;
 80040c8:	e021      	b.n	800410e <LL_RCC_GetUSARTClockFreq+0xde>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80040ca:	f7ff ff01 	bl	8003ed0 <LL_RCC_HSI_IsReady>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d019      	beq.n	8004108 <LL_RCC_GetUSARTClockFreq+0xd8>
        {
          usart_frequency = HSI_VALUE;
 80040d4:	4b2b      	ldr	r3, [pc, #172]	; (8004184 <LL_RCC_GetUSARTClockFreq+0x154>)
 80040d6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80040d8:	e016      	b.n	8004108 <LL_RCC_GetUSARTClockFreq+0xd8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80040da:	f7ff ff0b 	bl	8003ef4 <LL_RCC_LSE_IsReady>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <LL_RCC_GetUSARTClockFreq+0xdc>
        {
          usart_frequency = LSE_VALUE;
 80040e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80040ea:	e00f      	b.n	800410c <LL_RCC_GetUSARTClockFreq+0xdc>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80040ec:	f000 f8e0 	bl	80042b0 <RCC_GetSystemClockFreq>
 80040f0:	4603      	mov	r3, r0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f8fe 	bl	80042f4 <RCC_GetHCLKClockFreq>
 80040f8:	4603      	mov	r3, r0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f910 	bl	8004320 <RCC_GetPCLK1ClockFreq>
 8004100:	60f8      	str	r0, [r7, #12]
        break;
 8004102:	e004      	b.n	800410e <LL_RCC_GetUSARTClockFreq+0xde>
    }
  }
 8004104:	bf00      	nop
 8004106:	e002      	b.n	800410e <LL_RCC_GetUSARTClockFreq+0xde>
        break;
 8004108:	bf00      	nop
 800410a:	e000      	b.n	800410e <LL_RCC_GetUSARTClockFreq+0xde>
        break;
 800410c:	bf00      	nop
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b12      	cmp	r3, #18
 8004112:	d12d      	bne.n	8004170 <LL_RCC_GetUSARTClockFreq+0x140>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff ff37 	bl	8003f88 <LL_RCC_GetUSARTClockSource>
 800411a:	4603      	mov	r3, r0
 800411c:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <LL_RCC_GetUSARTClockFreq+0x164>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d011      	beq.n	8004146 <LL_RCC_GetUSARTClockFreq+0x116>
 8004122:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <LL_RCC_GetUSARTClockFreq+0x168>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d006      	beq.n	8004136 <LL_RCC_GetUSARTClockFreq+0x106>
 8004128:	4a1c      	ldr	r2, [pc, #112]	; (800419c <LL_RCC_GetUSARTClockFreq+0x16c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d114      	bne.n	8004158 <LL_RCC_GetUSARTClockFreq+0x128>
    {
      case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800412e:	f000 f8bf 	bl	80042b0 <RCC_GetSystemClockFreq>
 8004132:	60f8      	str	r0, [r7, #12]
        break;
 8004134:	e021      	b.n	800417a <LL_RCC_GetUSARTClockFreq+0x14a>

      case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004136:	f7ff fecb 	bl	8003ed0 <LL_RCC_HSI_IsReady>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d019      	beq.n	8004174 <LL_RCC_GetUSARTClockFreq+0x144>
        {
          usart_frequency = HSI_VALUE;
 8004140:	4b10      	ldr	r3, [pc, #64]	; (8004184 <LL_RCC_GetUSARTClockFreq+0x154>)
 8004142:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004144:	e016      	b.n	8004174 <LL_RCC_GetUSARTClockFreq+0x144>

      case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004146:	f7ff fed5 	bl	8003ef4 <LL_RCC_LSE_IsReady>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <LL_RCC_GetUSARTClockFreq+0x148>
        {
          usart_frequency = LSE_VALUE;
 8004150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004154:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004156:	e00f      	b.n	8004178 <LL_RCC_GetUSARTClockFreq+0x148>

      case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004158:	f000 f8aa 	bl	80042b0 <RCC_GetSystemClockFreq>
 800415c:	4603      	mov	r3, r0
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f8c8 	bl	80042f4 <RCC_GetHCLKClockFreq>
 8004164:	4603      	mov	r3, r0
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f8da 	bl	8004320 <RCC_GetPCLK1ClockFreq>
 800416c:	60f8      	str	r0, [r7, #12]
        break;
 800416e:	e004      	b.n	800417a <LL_RCC_GetUSARTClockFreq+0x14a>
    }
  }
 8004170:	bf00      	nop
 8004172:	e002      	b.n	800417a <LL_RCC_GetUSARTClockFreq+0x14a>
        break;
 8004174:	bf00      	nop
 8004176:	e000      	b.n	800417a <LL_RCC_GetUSARTClockFreq+0x14a>
        break;
 8004178:	bf00      	nop

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800417a:	68fb      	ldr	r3, [r7, #12]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	007a1200 	.word	0x007a1200
 8004188:	10020000 	.word	0x10020000
 800418c:	10030000 	.word	0x10030000
 8004190:	10010000 	.word	0x10010000
 8004194:	12080000 	.word	0x12080000
 8004198:	120c0000 	.word	0x120c0000
 800419c:	12040000 	.word	0x12040000

080041a0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(UART4)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041b2:	d12d      	bne.n	8004210 <LL_RCC_GetUARTClockFreq+0x70>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff fefd 	bl	8003fb4 <LL_RCC_GetUARTClockSource>
 80041ba:	4603      	mov	r3, r0
 80041bc:	4a35      	ldr	r2, [pc, #212]	; (8004294 <LL_RCC_GetUARTClockFreq+0xf4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d011      	beq.n	80041e6 <LL_RCC_GetUARTClockFreq+0x46>
 80041c2:	4a35      	ldr	r2, [pc, #212]	; (8004298 <LL_RCC_GetUARTClockFreq+0xf8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d006      	beq.n	80041d6 <LL_RCC_GetUARTClockFreq+0x36>
 80041c8:	4a34      	ldr	r2, [pc, #208]	; (800429c <LL_RCC_GetUARTClockFreq+0xfc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d114      	bne.n	80041f8 <LL_RCC_GetUARTClockFreq+0x58>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80041ce:	f000 f86f 	bl	80042b0 <RCC_GetSystemClockFreq>
 80041d2:	60f8      	str	r0, [r7, #12]
        break;
 80041d4:	e021      	b.n	800421a <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80041d6:	f7ff fe7b 	bl	8003ed0 <LL_RCC_HSI_IsReady>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d019      	beq.n	8004214 <LL_RCC_GetUARTClockFreq+0x74>
        {
          uart_frequency = HSI_VALUE;
 80041e0:	4b2f      	ldr	r3, [pc, #188]	; (80042a0 <LL_RCC_GetUARTClockFreq+0x100>)
 80041e2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80041e4:	e016      	b.n	8004214 <LL_RCC_GetUARTClockFreq+0x74>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80041e6:	f7ff fe85 	bl	8003ef4 <LL_RCC_LSE_IsReady>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d013      	beq.n	8004218 <LL_RCC_GetUARTClockFreq+0x78>
        {
          uart_frequency = LSE_VALUE;
 80041f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80041f6:	e00f      	b.n	8004218 <LL_RCC_GetUARTClockFreq+0x78>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80041f8:	f000 f85a 	bl	80042b0 <RCC_GetSystemClockFreq>
 80041fc:	4603      	mov	r3, r0
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f878 	bl	80042f4 <RCC_GetHCLKClockFreq>
 8004204:	4603      	mov	r3, r0
 8004206:	4618      	mov	r0, r3
 8004208:	f000 f88a 	bl	8004320 <RCC_GetPCLK1ClockFreq>
 800420c:	60f8      	str	r0, [r7, #12]
        break;
 800420e:	e004      	b.n	800421a <LL_RCC_GetUARTClockFreq+0x7a>
    }
  }
 8004210:	bf00      	nop
 8004212:	e002      	b.n	800421a <LL_RCC_GetUARTClockFreq+0x7a>
        break;
 8004214:	bf00      	nop
 8004216:	e000      	b.n	800421a <LL_RCC_GetUARTClockFreq+0x7a>
        break;
 8004218:	bf00      	nop
#endif /* UART4 */

#if defined(UART5)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004220:	d12d      	bne.n	800427e <LL_RCC_GetUARTClockFreq+0xde>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fec6 	bl	8003fb4 <LL_RCC_GetUARTClockSource>
 8004228:	4603      	mov	r3, r0
 800422a:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <LL_RCC_GetUARTClockFreq+0x104>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d011      	beq.n	8004254 <LL_RCC_GetUARTClockFreq+0xb4>
 8004230:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <LL_RCC_GetUARTClockFreq+0x108>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d006      	beq.n	8004244 <LL_RCC_GetUARTClockFreq+0xa4>
 8004236:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <LL_RCC_GetUARTClockFreq+0x10c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d114      	bne.n	8004266 <LL_RCC_GetUARTClockFreq+0xc6>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800423c:	f000 f838 	bl	80042b0 <RCC_GetSystemClockFreq>
 8004240:	60f8      	str	r0, [r7, #12]
        break;
 8004242:	e021      	b.n	8004288 <LL_RCC_GetUARTClockFreq+0xe8>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004244:	f7ff fe44 	bl	8003ed0 <LL_RCC_HSI_IsReady>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d019      	beq.n	8004282 <LL_RCC_GetUARTClockFreq+0xe2>
        {
          uart_frequency = HSI_VALUE;
 800424e:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <LL_RCC_GetUARTClockFreq+0x100>)
 8004250:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004252:	e016      	b.n	8004282 <LL_RCC_GetUARTClockFreq+0xe2>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004254:	f7ff fe4e 	bl	8003ef4 <LL_RCC_LSE_IsReady>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d013      	beq.n	8004286 <LL_RCC_GetUARTClockFreq+0xe6>
        {
          uart_frequency = LSE_VALUE;
 800425e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004262:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004264:	e00f      	b.n	8004286 <LL_RCC_GetUARTClockFreq+0xe6>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004266:	f000 f823 	bl	80042b0 <RCC_GetSystemClockFreq>
 800426a:	4603      	mov	r3, r0
 800426c:	4618      	mov	r0, r3
 800426e:	f000 f841 	bl	80042f4 <RCC_GetHCLKClockFreq>
 8004272:	4603      	mov	r3, r0
 8004274:	4618      	mov	r0, r3
 8004276:	f000 f853 	bl	8004320 <RCC_GetPCLK1ClockFreq>
 800427a:	60f8      	str	r0, [r7, #12]
        break;
 800427c:	e004      	b.n	8004288 <LL_RCC_GetUARTClockFreq+0xe8>
    }
  }
 800427e:	bf00      	nop
 8004280:	e002      	b.n	8004288 <LL_RCC_GetUARTClockFreq+0xe8>
        break;
 8004282:	bf00      	nop
 8004284:	e000      	b.n	8004288 <LL_RCC_GetUARTClockFreq+0xe8>
        break;
 8004286:	bf00      	nop
#endif /* UART5 */

  return uart_frequency;
 8004288:	68fb      	ldr	r3, [r7, #12]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	00203000 	.word	0x00203000
 8004298:	00303000 	.word	0x00303000
 800429c:	00103000 	.word	0x00103000
 80042a0:	007a1200 	.word	0x007a1200
 80042a4:	0080c000 	.word	0x0080c000
 80042a8:	00c0c000 	.word	0x00c0c000
 80042ac:	0040c000 	.word	0x0040c000

080042b0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80042ba:	f7ff fe2d 	bl	8003f18 <LL_RCC_GetSysClkSource>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d006      	beq.n	80042d2 <RCC_GetSystemClockFreq+0x22>
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d007      	beq.n	80042d8 <RCC_GetSystemClockFreq+0x28>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80042cc:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <RCC_GetSystemClockFreq+0x40>)
 80042ce:	607b      	str	r3, [r7, #4]
      break;
 80042d0:	e009      	b.n	80042e6 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <RCC_GetSystemClockFreq+0x40>)
 80042d4:	607b      	str	r3, [r7, #4]
      break;
 80042d6:	e006      	b.n	80042e6 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80042d8:	f000 f84a 	bl	8004370 <RCC_PLL_GetFreqDomain_SYS>
 80042dc:	6078      	str	r0, [r7, #4]
      break;
 80042de:	e002      	b.n	80042e6 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <RCC_GetSystemClockFreq+0x40>)
 80042e2:	607b      	str	r3, [r7, #4]
      break;
 80042e4:	bf00      	nop
  }

  return frequency;
 80042e6:	687b      	ldr	r3, [r7, #4]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	007a1200 	.word	0x007a1200

080042f4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80042fc:	f7ff fe1a 	bl	8003f34 <LL_RCC_GetAHBPrescaler>
 8004300:	4603      	mov	r3, r0
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	4a04      	ldr	r2, [pc, #16]	; (800431c <RCC_GetHCLKClockFreq+0x28>)
 800430a:	5cd3      	ldrb	r3, [r2, r3]
 800430c:	461a      	mov	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	40d3      	lsrs	r3, r2
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	080155b0 	.word	0x080155b0

08004320 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004328:	f7ff fe12 	bl	8003f50 <LL_RCC_GetAPB1Prescaler>
 800432c:	4603      	mov	r3, r0
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	4a04      	ldr	r2, [pc, #16]	; (8004344 <RCC_GetPCLK1ClockFreq+0x24>)
 8004332:	5cd3      	ldrb	r3, [r2, r3]
 8004334:	461a      	mov	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	40d3      	lsrs	r3, r2
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	080155c0 	.word	0x080155c0

08004348 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004350:	f7ff fe0c 	bl	8003f6c <LL_RCC_GetAPB2Prescaler>
 8004354:	4603      	mov	r3, r0
 8004356:	0adb      	lsrs	r3, r3, #11
 8004358:	4a04      	ldr	r2, [pc, #16]	; (800436c <RCC_GetPCLK2ClockFreq+0x24>)
 800435a:	5cd3      	ldrb	r3, [r2, r3]
 800435c:	461a      	mov	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	40d3      	lsrs	r3, r2
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	080155c0 	.word	0x080155c0

08004370 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	2300      	movs	r3, #0
 800437c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800437e:	f7ff fe2d 	bl	8003fdc <LL_RCC_PLL_GetMainSource>
 8004382:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800438a:	d003      	beq.n	8004394 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004390:	d003      	beq.n	800439a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004392:	e005      	b.n	80043a0 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004394:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004396:	60fb      	str	r3, [r7, #12]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8004398:	e005      	b.n	80043a6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800439a:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800439c:	60fb      	str	r3, [r7, #12]
      break;
 800439e:	e002      	b.n	80043a6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 80043a0:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80043a2:	60fb      	str	r3, [r7, #12]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80043a4:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 80043a6:	f7ff fe35 	bl	8004014 <LL_RCC_PLL_GetPrediv>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	3301      	adds	r3, #1
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	fbb2 f4f3 	udiv	r4, r2, r3
 80043b8:	f7ff fe1e 	bl	8003ff8 <LL_RCC_PLL_GetMultiplicator>
 80043bc:	4603      	mov	r3, r0
 80043be:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043c2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043c6:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	fa92 f2a2 	rbit	r2, r2
 80043ce:	603a      	str	r2, [r7, #0]
  return result;
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	fab2 f282 	clz	r2, r2
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	40d3      	lsrs	r3, r2
 80043da:	3302      	adds	r3, #2
 80043dc:	fb03 f304 	mul.w	r3, r3, r4
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd90      	pop	{r4, r7, pc}
 80043e8:	007a1200 	.word	0x007a1200

080043ec <LL_TIM_SetPrescaler>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_TIM_SetAutoReload>:
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_TIM_SetRepetitionCounter>:
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_TIM_OC_SetCompareCH1>:
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <LL_TIM_OC_SetCompareCH2>:
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_TIM_OC_SetCompareCH3>:
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_TIM_OC_SetCompareCH4>:
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <LL_TIM_OC_SetCompareCH5>:
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <LL_TIM_OC_SetCompareCH6>:
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f043 0201 	orr.w	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	615a      	str	r2, [r3, #20]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a3f      	ldr	r2, [pc, #252]	; (800461c <LL_TIM_Init+0x110>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <LL_TIM_Init+0x40>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452a:	d00f      	beq.n	800454c <LL_TIM_Init+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a3c      	ldr	r2, [pc, #240]	; (8004620 <LL_TIM_Init+0x114>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00b      	beq.n	800454c <LL_TIM_Init+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a3b      	ldr	r2, [pc, #236]	; (8004624 <LL_TIM_Init+0x118>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d007      	beq.n	800454c <LL_TIM_Init+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a3a      	ldr	r2, [pc, #232]	; (8004628 <LL_TIM_Init+0x11c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d003      	beq.n	800454c <LL_TIM_Init+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a39      	ldr	r2, [pc, #228]	; (800462c <LL_TIM_Init+0x120>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d106      	bne.n	800455a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2f      	ldr	r2, [pc, #188]	; (800461c <LL_TIM_Init+0x110>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d01f      	beq.n	80045a2 <LL_TIM_Init+0x96>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d01b      	beq.n	80045a2 <LL_TIM_Init+0x96>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2c      	ldr	r2, [pc, #176]	; (8004620 <LL_TIM_Init+0x114>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d017      	beq.n	80045a2 <LL_TIM_Init+0x96>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a2b      	ldr	r2, [pc, #172]	; (8004624 <LL_TIM_Init+0x118>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <LL_TIM_Init+0x96>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2a      	ldr	r2, [pc, #168]	; (8004628 <LL_TIM_Init+0x11c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00f      	beq.n	80045a2 <LL_TIM_Init+0x96>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2a      	ldr	r2, [pc, #168]	; (8004630 <LL_TIM_Init+0x124>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00b      	beq.n	80045a2 <LL_TIM_Init+0x96>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a29      	ldr	r2, [pc, #164]	; (8004634 <LL_TIM_Init+0x128>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d007      	beq.n	80045a2 <LL_TIM_Init+0x96>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a28      	ldr	r2, [pc, #160]	; (8004638 <LL_TIM_Init+0x12c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d003      	beq.n	80045a2 <LL_TIM_Init+0x96>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a23      	ldr	r2, [pc, #140]	; (800462c <LL_TIM_Init+0x120>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d106      	bne.n	80045b0 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff23 	bl	8004408 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	4619      	mov	r1, r3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ff0f 	bl	80043ec <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a12      	ldr	r2, [pc, #72]	; (800461c <LL_TIM_Init+0x110>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d013      	beq.n	80045fe <LL_TIM_Init+0xf2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a13      	ldr	r2, [pc, #76]	; (8004628 <LL_TIM_Init+0x11c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00f      	beq.n	80045fe <LL_TIM_Init+0xf2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a13      	ldr	r2, [pc, #76]	; (8004630 <LL_TIM_Init+0x124>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00b      	beq.n	80045fe <LL_TIM_Init+0xf2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a12      	ldr	r2, [pc, #72]	; (8004634 <LL_TIM_Init+0x128>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d007      	beq.n	80045fe <LL_TIM_Init+0xf2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a11      	ldr	r2, [pc, #68]	; (8004638 <LL_TIM_Init+0x12c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d003      	beq.n	80045fe <LL_TIM_Init+0xf2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a0c      	ldr	r2, [pc, #48]	; (800462c <LL_TIM_Init+0x120>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d105      	bne.n	800460a <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff0d 	bl	8004424 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ff6e 	bl	80044ec <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40013400 	.word	0x40013400
 800462c:	40015000 	.word	0x40015000
 8004630:	40014000 	.word	0x40014000
 8004634:	40014400 	.word	0x40014400
 8004638:	40014800 	.word	0x40014800

0800463c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004652:	d01f      	beq.n	8004694 <LL_TIM_OC_Init+0x58>
 8004654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004658:	d804      	bhi.n	8004664 <LL_TIM_OC_Init+0x28>
 800465a:	2b01      	cmp	r3, #1
 800465c:	d00c      	beq.n	8004678 <LL_TIM_OC_Init+0x3c>
 800465e:	2b10      	cmp	r3, #16
 8004660:	d011      	beq.n	8004686 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8004662:	e033      	b.n	80046cc <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004668:	d022      	beq.n	80046b0 <LL_TIM_OC_Init+0x74>
 800466a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466e:	d026      	beq.n	80046be <LL_TIM_OC_Init+0x82>
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004674:	d015      	beq.n	80046a2 <LL_TIM_OC_Init+0x66>
      break;
 8004676:	e029      	b.n	80046cc <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f82c 	bl	80046d8 <OC1Config>
 8004680:	4603      	mov	r3, r0
 8004682:	75fb      	strb	r3, [r7, #23]
      break;
 8004684:	e022      	b.n	80046cc <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f8ab 	bl	80047e4 <OC2Config>
 800468e:	4603      	mov	r3, r0
 8004690:	75fb      	strb	r3, [r7, #23]
      break;
 8004692:	e01b      	b.n	80046cc <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f92e 	bl	80048f8 <OC3Config>
 800469c:	4603      	mov	r3, r0
 800469e:	75fb      	strb	r3, [r7, #23]
      break;
 80046a0:	e014      	b.n	80046cc <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f9b1 	bl	8004a0c <OC4Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	75fb      	strb	r3, [r7, #23]
      break;
 80046ae:	e00d      	b.n	80046cc <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fa1c 	bl	8004af0 <OC5Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	75fb      	strb	r3, [r7, #23]
      break;
 80046bc:	e006      	b.n	80046cc <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fa7f 	bl	8004bc4 <OC6Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	75fb      	strb	r3, [r7, #23]
      break;
 80046ca:	bf00      	nop
  }

  return result;
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f023 0201 	bic.w	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f023 0202 	bic.w	r2, r3, #2
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f023 0201 	bic.w	r2, r3, #1
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a24      	ldr	r2, [pc, #144]	; (80047cc <OC1Config+0xf4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d013      	beq.n	8004766 <OC1Config+0x8e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a23      	ldr	r2, [pc, #140]	; (80047d0 <OC1Config+0xf8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00f      	beq.n	8004766 <OC1Config+0x8e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a22      	ldr	r2, [pc, #136]	; (80047d4 <OC1Config+0xfc>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00b      	beq.n	8004766 <OC1Config+0x8e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a21      	ldr	r2, [pc, #132]	; (80047d8 <OC1Config+0x100>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <OC1Config+0x8e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a20      	ldr	r2, [pc, #128]	; (80047dc <OC1Config+0x104>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d003      	beq.n	8004766 <OC1Config+0x8e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <OC1Config+0x108>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d11e      	bne.n	80047a4 <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f023 0208 	bic.w	r2, r3, #8
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 0204 	bic.w	r2, r3, #4
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4619      	mov	r1, r3
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff fe42 	bl	8004440 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40013400 	.word	0x40013400
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40014400 	.word	0x40014400
 80047dc:	40014800 	.word	0x40014800
 80047e0:	40015000 	.word	0x40015000

080047e4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f023 0210 	bic.w	r2, r3, #16
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800481a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	0212      	lsls	r2, r2, #8
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f023 0220 	bic.w	r2, r3, #32
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f023 0210 	bic.w	r2, r3, #16
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a25      	ldr	r2, [pc, #148]	; (80048e0 <OC2Config+0xfc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <OC2Config+0x94>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a24      	ldr	r2, [pc, #144]	; (80048e4 <OC2Config+0x100>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00f      	beq.n	8004878 <OC2Config+0x94>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a23      	ldr	r2, [pc, #140]	; (80048e8 <OC2Config+0x104>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00b      	beq.n	8004878 <OC2Config+0x94>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a22      	ldr	r2, [pc, #136]	; (80048ec <OC2Config+0x108>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <OC2Config+0x94>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a21      	ldr	r2, [pc, #132]	; (80048f0 <OC2Config+0x10c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <OC2Config+0x94>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a20      	ldr	r2, [pc, #128]	; (80048f4 <OC2Config+0x110>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d11f      	bne.n	80048b8 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	019b      	lsls	r3, r3, #6
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	019b      	lsls	r3, r3, #6
 8004894:	4313      	orrs	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	4619      	mov	r1, r3
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff fdc6 	bl	800445c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40012c00 	.word	0x40012c00
 80048e4:	40013400 	.word	0x40013400
 80048e8:	40014000 	.word	0x40014000
 80048ec:	40014400 	.word	0x40014400
 80048f0:	40014800 	.word	0x40014800
 80048f4:	40015000 	.word	0x40015000

080048f8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0303 	bic.w	r3, r3, #3
 8004926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a25      	ldr	r2, [pc, #148]	; (80049f4 <OC3Config+0xfc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <OC3Config+0x92>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a24      	ldr	r2, [pc, #144]	; (80049f8 <OC3Config+0x100>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00f      	beq.n	800498a <OC3Config+0x92>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a23      	ldr	r2, [pc, #140]	; (80049fc <OC3Config+0x104>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00b      	beq.n	800498a <OC3Config+0x92>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <OC3Config+0x108>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d007      	beq.n	800498a <OC3Config+0x92>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <OC3Config+0x10c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d003      	beq.n	800498a <OC3Config+0x92>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <OC3Config+0x110>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d11f      	bne.n	80049ca <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	029b      	lsls	r3, r3, #10
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	029b      	lsls	r3, r3, #10
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	015b      	lsls	r3, r3, #5
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	4619      	mov	r1, r3
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff fd4b 	bl	8004478 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800
 8004a08:	40015000 	.word	0x40015000

08004a0c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	0212      	lsls	r2, r2, #8
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	031b      	lsls	r3, r3, #12
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	031b      	lsls	r3, r3, #12
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <OC4Config+0xcc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <OC4Config+0x94>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a18      	ldr	r2, [pc, #96]	; (8004adc <OC4Config+0xd0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00f      	beq.n	8004aa0 <OC4Config+0x94>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a17      	ldr	r2, [pc, #92]	; (8004ae0 <OC4Config+0xd4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00b      	beq.n	8004aa0 <OC4Config+0x94>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a16      	ldr	r2, [pc, #88]	; (8004ae4 <OC4Config+0xd8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d007      	beq.n	8004aa0 <OC4Config+0x94>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a15      	ldr	r2, [pc, #84]	; (8004ae8 <OC4Config+0xdc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <OC4Config+0x94>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a14      	ldr	r2, [pc, #80]	; (8004aec <OC4Config+0xe0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d107      	bne.n	8004ab0 <OC4Config+0xa4>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	019b      	lsls	r3, r3, #6
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff fce6 	bl	8004494 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40013400 	.word	0x40013400
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40014400 	.word	0x40014400
 8004ae8:	40014800 	.word	0x40014800
 8004aec:	40015000 	.word	0x40015000

08004af0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a19      	ldr	r2, [pc, #100]	; (8004bac <OC5Config+0xbc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <OC5Config+0x84>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <OC5Config+0xc0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00f      	beq.n	8004b74 <OC5Config+0x84>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a17      	ldr	r2, [pc, #92]	; (8004bb4 <OC5Config+0xc4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00b      	beq.n	8004b74 <OC5Config+0x84>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <OC5Config+0xc8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <OC5Config+0x84>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <OC5Config+0xcc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <OC5Config+0x84>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a14      	ldr	r2, [pc, #80]	; (8004bc0 <OC5Config+0xd0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d109      	bne.n	8004b88 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4619      	mov	r1, r3
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fc8b 	bl	80044b0 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40013400 	.word	0x40013400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	40014800 	.word	0x40014800
 8004bc0:	40015000 	.word	0x40015000

08004bc4 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	0212      	lsls	r2, r2, #8
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	051b      	lsls	r3, r3, #20
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	051b      	lsls	r3, r3, #20
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <OC6Config+0xbc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d013      	beq.n	8004c4a <OC6Config+0x86>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <OC6Config+0xc0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00f      	beq.n	8004c4a <OC6Config+0x86>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a16      	ldr	r2, [pc, #88]	; (8004c88 <OC6Config+0xc4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00b      	beq.n	8004c4a <OC6Config+0x86>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <OC6Config+0xc8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d007      	beq.n	8004c4a <OC6Config+0x86>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <OC6Config+0xcc>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d003      	beq.n	8004c4a <OC6Config+0x86>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <OC6Config+0xd0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d109      	bne.n	8004c5e <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	029b      	lsls	r3, r3, #10
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fc30 	bl	80044d0 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40013400 	.word	0x40013400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40014400 	.word	0x40014400
 8004c90:	40014800 	.word	0x40014800
 8004c94:	40015000 	.word	0x40015000

08004c98 <LL_USART_IsEnabled>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <LL_USART_IsEnabled+0x18>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <LL_USART_IsEnabled+0x1a>
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <LL_USART_SetStopBitsLength>:
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	605a      	str	r2, [r3, #4]
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <LL_USART_SetHWFlowCtrl>:
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	609a      	str	r2, [r3, #8]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <LL_USART_SetBaudRate>:
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b087      	sub	sp, #28
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1e:	d11a      	bne.n	8004d56 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	005a      	lsls	r2, r3, #1
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	441a      	add	r2, r3
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	60da      	str	r2, [r3, #12]
}
 8004d54:	e00a      	b.n	8004d6c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	085a      	lsrs	r2, r3, #1
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	441a      	add	r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	60da      	str	r2, [r3, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff ff84 	bl	8004c98 <LL_USART_IsEnabled>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d15c      	bne.n	8004e50 <LL_USART_Init+0xd8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b30      	ldr	r3, [pc, #192]	; (8004e5c <LL_USART_Init+0xe4>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	6851      	ldr	r1, [r2, #4]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	68d2      	ldr	r2, [r2, #12]
 8004da6:	4311      	orrs	r1, r2
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	6912      	ldr	r2, [r2, #16]
 8004dac:	4311      	orrs	r1, r2
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	6992      	ldr	r2, [r2, #24]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff ff7c 	bl	8004cbe <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff89 	bl	8004ce4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a22      	ldr	r2, [pc, #136]	; (8004e60 <LL_USART_Init+0xe8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d104      	bne.n	8004de4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004dda:	2000      	movs	r0, #0
 8004ddc:	f7ff f928 	bl	8004030 <LL_RCC_GetUSARTClockFreq>
 8004de0:	60b8      	str	r0, [r7, #8]
 8004de2:	e024      	b.n	8004e2e <LL_USART_Init+0xb6>
    }
    else if (USARTx == USART2)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <LL_USART_Init+0xec>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d104      	bne.n	8004df6 <LL_USART_Init+0x7e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004dec:	2010      	movs	r0, #16
 8004dee:	f7ff f91f 	bl	8004030 <LL_RCC_GetUSARTClockFreq>
 8004df2:	60b8      	str	r0, [r7, #8]
 8004df4:	e01b      	b.n	8004e2e <LL_USART_Init+0xb6>
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
    else if (USARTx == USART3)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1b      	ldr	r2, [pc, #108]	; (8004e68 <LL_USART_Init+0xf0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d104      	bne.n	8004e08 <LL_USART_Init+0x90>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8004dfe:	2012      	movs	r0, #18
 8004e00:	f7ff f916 	bl	8004030 <LL_RCC_GetUSARTClockFreq>
 8004e04:	60b8      	str	r0, [r7, #8]
 8004e06:	e012      	b.n	8004e2e <LL_USART_Init+0xb6>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <LL_USART_Init+0xf4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d105      	bne.n	8004e1c <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8004e10:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004e14:	f7ff f9c4 	bl	80041a0 <LL_RCC_GetUARTClockFreq>
 8004e18:	60b8      	str	r0, [r7, #8]
 8004e1a:	e008      	b.n	8004e2e <LL_USART_Init+0xb6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <LL_USART_Init+0xf8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d104      	bne.n	8004e2e <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8004e24:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8004e28:	f7ff f9ba 	bl	80041a0 <LL_RCC_GetUARTClockFreq>
 8004e2c:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00d      	beq.n	8004e50 <LL_USART_Init+0xd8>
        && (USART_InitStruct->BaudRate != 0U))
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <LL_USART_Init+0xd8>
    {
      status = SUCCESS;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	699a      	ldr	r2, [r3, #24]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff ff5d 	bl	8004d0a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	efff69f3 	.word	0xefff69f3
 8004e60:	40013800 	.word	0x40013800
 8004e64:	40004400 	.word	0x40004400
 8004e68:	40004800 	.word	0x40004800
 8004e6c:	40004c00 	.word	0x40004c00
 8004e70:	40005000 	.word	0x40005000

08004e74 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004e7c:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <LL_SetSystemCoreClock+0x1c>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6013      	str	r3, [r2, #0]
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000000 	.word	0x20000000

08004e94 <iwdg_feed>:

#ifndef INC_PERIPH_H_
#define INC_PERIPH_H_

static inline void iwdg_feed()
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
    PS_IWDG_RST;
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <iwdg_feed+0x18>)
 8004e9a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004e9e:	601a      	str	r2, [r3, #0]
};
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40003000 	.word	0x40003000

08004eb0 <app_main>:

volatile uint8_t init_done = 0;   // system initialized


void app_main(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af04      	add	r7, sp, #16
  __ASM volatile ("cpsid i" : : : "memory");
 8004eb6:	b672      	cpsid	i
    __disable_irq();

    sem1_comm = xSemaphoreCreateBinaryStatic(&buff_sem1_comm);
 8004eb8:	2303      	movs	r3, #3
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	4b44      	ldr	r3, [pc, #272]	; (8004fd0 <app_main+0x120>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	f00b fc7a 	bl	80107bc <xQueueGenericCreateStatic>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b42      	ldr	r3, [pc, #264]	; (8004fd4 <app_main+0x124>)
 8004ecc:	601a      	str	r2, [r3, #0]
    sem2_trig = xSemaphoreCreateBinaryStatic(&buff_sem2_trig);
 8004ece:	2303      	movs	r3, #3
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	4b41      	ldr	r3, [pc, #260]	; (8004fd8 <app_main+0x128>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	2001      	movs	r0, #1
 8004eda:	f00b fc6f 	bl	80107bc <xQueueGenericCreateStatic>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	4b3e      	ldr	r3, [pc, #248]	; (8004fdc <app_main+0x12c>)
 8004ee2:	601a      	str	r2, [r3, #0]
    mtx1 = xSemaphoreCreateMutexStatic(&buff_mtx1);
 8004ee4:	493e      	ldr	r1, [pc, #248]	; (8004fe0 <app_main+0x130>)
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	f00b fd0f 	bl	801090a <xQueueCreateMutexStatic>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b3d      	ldr	r3, [pc, #244]	; (8004fe4 <app_main+0x134>)
 8004ef0:	601a      	str	r2, [r3, #0]

    ASSERT(sem1_comm != NULL);
 8004ef2:	4b38      	ldr	r3, [pc, #224]	; (8004fd4 <app_main+0x124>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <app_main+0x52>
 8004efa:	213b      	movs	r1, #59	; 0x3b
 8004efc:	483a      	ldr	r0, [pc, #232]	; (8004fe8 <app_main+0x138>)
 8004efe:	f007 f892 	bl	800c026 <assert2>
    ASSERT(sem2_trig != NULL);
 8004f02:	4b36      	ldr	r3, [pc, #216]	; (8004fdc <app_main+0x12c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d103      	bne.n	8004f12 <app_main+0x62>
 8004f0a:	213c      	movs	r1, #60	; 0x3c
 8004f0c:	4836      	ldr	r0, [pc, #216]	; (8004fe8 <app_main+0x138>)
 8004f0e:	f007 f88a 	bl	800c026 <assert2>
    ASSERT(mtx1 != NULL);
 8004f12:	4b34      	ldr	r3, [pc, #208]	; (8004fe4 <app_main+0x134>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <app_main+0x72>
 8004f1a:	213d      	movs	r1, #61	; 0x3d
 8004f1c:	4832      	ldr	r0, [pc, #200]	; (8004fe8 <app_main+0x138>)
 8004f1e:	f007 f882 	bl	800c026 <assert2>

    ASSERT(xTaskCreateStatic(t1_wd, "T1", PS_STACK_T1, NULL, PS_PRI_T1, stack_t1, &buff_t1) != NULL);
 8004f22:	4b32      	ldr	r3, [pc, #200]	; (8004fec <app_main+0x13c>)
 8004f24:	9302      	str	r3, [sp, #8]
 8004f26:	4b32      	ldr	r3, [pc, #200]	; (8004ff0 <app_main+0x140>)
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2240      	movs	r2, #64	; 0x40
 8004f32:	4930      	ldr	r1, [pc, #192]	; (8004ff4 <app_main+0x144>)
 8004f34:	4830      	ldr	r0, [pc, #192]	; (8004ff8 <app_main+0x148>)
 8004f36:	f00c f898 	bl	801106a <xTaskCreateStatic>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <app_main+0x98>
 8004f40:	213f      	movs	r1, #63	; 0x3f
 8004f42:	4829      	ldr	r0, [pc, #164]	; (8004fe8 <app_main+0x138>)
 8004f44:	f007 f86f 	bl	800c026 <assert2>
    ASSERT(xTaskCreateStatic(t2_trig_check, "T2", PS_STACK_T2, NULL, PS_PRI_T2, stack_t2, &buff_t2) != NULL);
 8004f48:	4b2c      	ldr	r3, [pc, #176]	; (8004ffc <app_main+0x14c>)
 8004f4a:	9302      	str	r3, [sp, #8]
 8004f4c:	4b2c      	ldr	r3, [pc, #176]	; (8005000 <app_main+0x150>)
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	2301      	movs	r3, #1
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	2300      	movs	r3, #0
 8004f56:	2240      	movs	r2, #64	; 0x40
 8004f58:	492a      	ldr	r1, [pc, #168]	; (8005004 <app_main+0x154>)
 8004f5a:	482b      	ldr	r0, [pc, #172]	; (8005008 <app_main+0x158>)
 8004f5c:	f00c f885 	bl	801106a <xTaskCreateStatic>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d103      	bne.n	8004f6e <app_main+0xbe>
 8004f66:	2140      	movs	r1, #64	; 0x40
 8004f68:	481f      	ldr	r0, [pc, #124]	; (8004fe8 <app_main+0x138>)
 8004f6a:	f007 f85c 	bl	800c026 <assert2>
    ASSERT(xTaskCreateStatic(t3_trig_post_count, "T3", PS_STACK_T3, NULL, PS_PRI_T3, stack_t3, &buff_t3) != NULL);
 8004f6e:	4b27      	ldr	r3, [pc, #156]	; (800500c <app_main+0x15c>)
 8004f70:	9302      	str	r3, [sp, #8]
 8004f72:	4b27      	ldr	r3, [pc, #156]	; (8005010 <app_main+0x160>)
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	2304      	movs	r3, #4
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2240      	movs	r2, #64	; 0x40
 8004f7e:	4925      	ldr	r1, [pc, #148]	; (8005014 <app_main+0x164>)
 8004f80:	4825      	ldr	r0, [pc, #148]	; (8005018 <app_main+0x168>)
 8004f82:	f00c f872 	bl	801106a <xTaskCreateStatic>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d103      	bne.n	8004f94 <app_main+0xe4>
 8004f8c:	2141      	movs	r1, #65	; 0x41
 8004f8e:	4816      	ldr	r0, [pc, #88]	; (8004fe8 <app_main+0x138>)
 8004f90:	f007 f849 	bl	800c026 <assert2>
    ASSERT(xTaskCreateStatic(t4_comm_and_init, "T4", PS_STACK_T4, NULL, PS_PRI_T4, stack_t4, &buff_t4) != NULL);
 8004f94:	4b21      	ldr	r3, [pc, #132]	; (800501c <app_main+0x16c>)
 8004f96:	9302      	str	r3, [sp, #8]
 8004f98:	4b21      	ldr	r3, [pc, #132]	; (8005020 <app_main+0x170>)
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fa6:	491f      	ldr	r1, [pc, #124]	; (8005024 <app_main+0x174>)
 8004fa8:	481f      	ldr	r0, [pc, #124]	; (8005028 <app_main+0x178>)
 8004faa:	f00c f85e 	bl	801106a <xTaskCreateStatic>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d103      	bne.n	8004fbc <app_main+0x10c>
 8004fb4:	2142      	movs	r1, #66	; 0x42
 8004fb6:	480c      	ldr	r0, [pc, #48]	; (8004fe8 <app_main+0x138>)
 8004fb8:	f007 f835 	bl	800c026 <assert2>
  __ASM volatile ("cpsie i" : : : "memory");
 8004fbc:	b662      	cpsie	i

    __enable_irq();

    vTaskStartScheduler();
 8004fbe:	f00c f9e7 	bl	8011390 <vTaskStartScheduler>

    ASSERT(0);
 8004fc2:	2148      	movs	r1, #72	; 0x48
 8004fc4:	4808      	ldr	r0, [pc, #32]	; (8004fe8 <app_main+0x138>)
 8004fc6:	f007 f82e 	bl	800c026 <assert2>
}
 8004fca:	bf00      	nop
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	200004bc 	.word	0x200004bc
 8004fd4:	2000d650 	.word	0x2000d650
 8004fd8:	2000d654 	.word	0x2000d654
 8004fdc:	2000d69c 	.word	0x2000d69c
 8004fe0:	2000e0e8 	.word	0x2000e0e8
 8004fe4:	2000ccd0 	.word	0x2000ccd0
 8004fe8:	08014df8 	.word	0x08014df8
 8004fec:	200007a4 	.word	0x200007a4
 8004ff0:	2000dfe8 	.word	0x2000dfe8
 8004ff4:	08014e24 	.word	0x08014e24
 8004ff8:	0800502d 	.word	0x0800502d
 8004ffc:	2000dfa0 	.word	0x2000dfa0
 8005000:	20000504 	.word	0x20000504
 8005004:	08014e28 	.word	0x08014e28
 8005008:	08005071 	.word	0x08005071
 800500c:	2000d5bc 	.word	0x2000d5bc
 8005010:	2000ccd4 	.word	0x2000ccd4
 8005014:	08014e2c 	.word	0x08014e2c
 8005018:	080050e1 	.word	0x080050e1
 800501c:	2000d608 	.word	0x2000d608
 8005020:	2000d7a0 	.word	0x2000d7a0
 8005024:	08014e30 	.word	0x08014e30
 8005028:	0800516d 	.word	0x0800516d

0800502c <t1_wd>:

void t1_wd(void* p)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
    while (!init_done)
 8005034:	e002      	b.n	800503c <t1_wd+0x10>
        vTaskDelay(2);
 8005036:	2002      	movs	r0, #2
 8005038:	f00c f95c 	bl	80112f4 <vTaskDelay>
    while (!init_done)
 800503c:	4b09      	ldr	r3, [pc, #36]	; (8005064 <t1_wd+0x38>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f7      	beq.n	8005036 <t1_wd+0xa>

    while(1)
    {
        iwdg_feed();
 8005046:	f7ff ff25 	bl	8004e94 <iwdg_feed>
        led_blink_do(&led, daq.uwTick);
 800504a:	4b07      	ldr	r3, [pc, #28]	; (8005068 <t1_wd+0x3c>)
 800504c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8005050:	3330      	adds	r3, #48	; 0x30
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4619      	mov	r1, r3
 8005056:	4805      	ldr	r0, [pc, #20]	; (800506c <t1_wd+0x40>)
 8005058:	f004 f920 	bl	800929c <led_blink_do>

        vTaskDelay(10);
 800505c:	200a      	movs	r0, #10
 800505e:	f00c f949 	bl	80112f4 <vTaskDelay>
        iwdg_feed();
 8005062:	e7f0      	b.n	8005046 <t1_wd+0x1a>
 8005064:	20000218 	.word	0x20000218
 8005068:	200007ec 	.word	0x200007ec
 800506c:	2000ccc0 	.word	0x2000ccc0

08005070 <t2_trig_check>:
    }
}

void t2_trig_check(void* p)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
    while (!init_done)
 8005078:	e002      	b.n	8005080 <t2_trig_check+0x10>
        vTaskDelay(2);
 800507a:	2002      	movs	r0, #2
 800507c:	f00c f93a 	bl	80112f4 <vTaskDelay>
    while (!init_done)
 8005080:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <t2_trig_check+0x60>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f7      	beq.n	800507a <t2_trig_check+0xa>

    while(1)
    {
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 800508a:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <t2_trig_check+0x64>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f04f 31ff 	mov.w	r1, #4294967295
 8005092:	4618      	mov	r0, r3
 8005094:	f00b fdd8 	bl	8010c48 <xQueueSemaphoreTake>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d003      	beq.n	80050a6 <t2_trig_check+0x36>
 800509e:	2160      	movs	r1, #96	; 0x60
 80050a0:	480d      	ldr	r0, [pc, #52]	; (80050d8 <t2_trig_check+0x68>)
 80050a2:	f006 ffc0 	bl	800c026 <assert2>

        daq_trig_check(&daq);
 80050a6:	480d      	ldr	r0, [pc, #52]	; (80050dc <t2_trig_check+0x6c>)
 80050a8:	f002 fc10 	bl	80078cc <daq_trig_check>

        ASSERT(xSemaphoreGive(mtx1) == pdPASS);
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <t2_trig_check+0x64>)
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	2300      	movs	r3, #0
 80050b2:	2200      	movs	r2, #0
 80050b4:	2100      	movs	r1, #0
 80050b6:	f00b fc43 	bl	8010940 <xQueueGenericSend>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d003      	beq.n	80050c8 <t2_trig_check+0x58>
 80050c0:	2164      	movs	r1, #100	; 0x64
 80050c2:	4805      	ldr	r0, [pc, #20]	; (80050d8 <t2_trig_check+0x68>)
 80050c4:	f006 ffaf 	bl	800c026 <assert2>

        vTaskDelay(5);
 80050c8:	2005      	movs	r0, #5
 80050ca:	f00c f913 	bl	80112f4 <vTaskDelay>
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 80050ce:	e7dc      	b.n	800508a <t2_trig_check+0x1a>
 80050d0:	20000218 	.word	0x20000218
 80050d4:	2000ccd0 	.word	0x2000ccd0
 80050d8:	08014df8 	.word	0x08014df8
 80050dc:	200007ec 	.word	0x200007ec

080050e0 <t3_trig_post_count>:
    }
}

void t3_trig_post_count(void* p)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
    while (!init_done)
 80050e8:	e002      	b.n	80050f0 <t3_trig_post_count+0x10>
        vTaskDelay(2);
 80050ea:	2002      	movs	r0, #2
 80050ec:	f00c f902 	bl	80112f4 <vTaskDelay>
    while (!init_done)
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <t3_trig_post_count+0x78>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f7      	beq.n	80050ea <t3_trig_post_count+0xa>

    while(1)
    {
        ASSERT(xSemaphoreTake(sem2_trig, portMAX_DELAY) == pdPASS);
 80050fa:	4b18      	ldr	r3, [pc, #96]	; (800515c <t3_trig_post_count+0x7c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f04f 31ff 	mov.w	r1, #4294967295
 8005102:	4618      	mov	r0, r3
 8005104:	f00b fda0 	bl	8010c48 <xQueueSemaphoreTake>
 8005108:	4603      	mov	r3, r0
 800510a:	2b01      	cmp	r3, #1
 800510c:	d003      	beq.n	8005116 <t3_trig_post_count+0x36>
 800510e:	2171      	movs	r1, #113	; 0x71
 8005110:	4813      	ldr	r0, [pc, #76]	; (8005160 <t3_trig_post_count+0x80>)
 8005112:	f006 ff88 	bl	800c026 <assert2>
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 8005116:	4b13      	ldr	r3, [pc, #76]	; (8005164 <t3_trig_post_count+0x84>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f04f 31ff 	mov.w	r1, #4294967295
 800511e:	4618      	mov	r0, r3
 8005120:	f00b fd92 	bl	8010c48 <xQueueSemaphoreTake>
 8005124:	4603      	mov	r3, r0
 8005126:	2b01      	cmp	r3, #1
 8005128:	d003      	beq.n	8005132 <t3_trig_post_count+0x52>
 800512a:	2172      	movs	r1, #114	; 0x72
 800512c:	480c      	ldr	r0, [pc, #48]	; (8005160 <t3_trig_post_count+0x80>)
 800512e:	f006 ff7a 	bl	800c026 <assert2>

        daq_trig_postcount(&daq);
 8005132:	480d      	ldr	r0, [pc, #52]	; (8005168 <t3_trig_post_count+0x88>)
 8005134:	f002 ff44 	bl	8007fc0 <daq_trig_postcount>

        ASSERT(xSemaphoreGive(mtx1) == pdPASS);
 8005138:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <t3_trig_post_count+0x84>)
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	2300      	movs	r3, #0
 800513e:	2200      	movs	r2, #0
 8005140:	2100      	movs	r1, #0
 8005142:	f00b fbfd 	bl	8010940 <xQueueGenericSend>
 8005146:	4603      	mov	r3, r0
 8005148:	2b01      	cmp	r3, #1
 800514a:	d0d6      	beq.n	80050fa <t3_trig_post_count+0x1a>
 800514c:	2176      	movs	r1, #118	; 0x76
 800514e:	4804      	ldr	r0, [pc, #16]	; (8005160 <t3_trig_post_count+0x80>)
 8005150:	f006 ff69 	bl	800c026 <assert2>
        ASSERT(xSemaphoreTake(sem2_trig, portMAX_DELAY) == pdPASS);
 8005154:	e7d1      	b.n	80050fa <t3_trig_post_count+0x1a>
 8005156:	bf00      	nop
 8005158:	20000218 	.word	0x20000218
 800515c:	2000d69c 	.word	0x2000d69c
 8005160:	08014df8 	.word	0x08014df8
 8005164:	2000ccd0 	.word	0x2000ccd0
 8005168:	200007ec 	.word	0x200007ec

0800516c <t4_comm_and_init>:
    }
}

void t4_comm_and_init(void* p)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af04      	add	r7, sp, #16
 8005172:	6078      	str	r0, [r7, #4]
    pwm_init(&pwm);
 8005174:	483e      	ldr	r0, [pc, #248]	; (8005270 <t4_comm_and_init+0x104>)
 8005176:	f006 f875 	bl	800b264 <pwm_init>
    led_init(&led);
 800517a:	483e      	ldr	r0, [pc, #248]	; (8005274 <t4_comm_and_init+0x108>)
 800517c:	f004 f811 	bl	80091a2 <led_init>
    cntr_init(&cntr);
 8005180:	483d      	ldr	r0, [pc, #244]	; (8005278 <t4_comm_and_init+0x10c>)
 8005182:	f000 f9d3 	bl	800552c <cntr_init>
    comm_init(&comm);
 8005186:	483d      	ldr	r0, [pc, #244]	; (800527c <t4_comm_and_init+0x110>)
 8005188:	f000 fcea 	bl	8005b60 <comm_init>
    daq_init(&daq);
 800518c:	483c      	ldr	r0, [pc, #240]	; (8005280 <t4_comm_and_init+0x114>)
 800518e:	f000 ff45 	bl	800601c <daq_init>
    daq_mode_set(&daq, VM);
 8005192:	2101      	movs	r1, #1
 8005194:	483a      	ldr	r0, [pc, #232]	; (8005280 <t4_comm_and_init+0x114>)
 8005196:	f001 ff7b 	bl	8007090 <daq_mode_set>
    led_blink_set(&led, 3, PS_BLINK_LONG_MS, daq.uwTick);
 800519a:	4b39      	ldr	r3, [pc, #228]	; (8005280 <t4_comm_and_init+0x114>)
 800519c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80051a0:	3330      	adds	r3, #48	; 0x30
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80051a8:	2103      	movs	r1, #3
 80051aa:	4832      	ldr	r0, [pc, #200]	; (8005274 <t4_comm_and_init+0x108>)
 80051ac:	f004 f85c 	bl	8009268 <led_blink_set>

#ifdef PS_DAC
    sgen_init(&sgen);
 80051b0:	4834      	ldr	r0, [pc, #208]	; (8005284 <t4_comm_and_init+0x118>)
 80051b2:	f006 fa1d 	bl	800b5f0 <sgen_init>
#endif

#ifdef PS_DEBUG
    pwm_set(&pwm, 1000, 25, 25, 50, 1, 1);
 80051b6:	2301      	movs	r3, #1
 80051b8:	9302      	str	r3, [sp, #8]
 80051ba:	2301      	movs	r3, #1
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	2332      	movs	r3, #50	; 0x32
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	2319      	movs	r3, #25
 80051c4:	2219      	movs	r2, #25
 80051c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80051ca:	4829      	ldr	r0, [pc, #164]	; (8005270 <t4_comm_and_init+0x104>)
 80051cc:	f006 f86a 	bl	800b2a4 <pwm_set>
    //LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_256);
    //LL_IWDG_SetReloadCounter(IWDG, 0x0FFF);
#ifdef PS_DAC
    sgen_enable(&sgen, SINE, 100, 1000, PS_DAC_BUFF_LEN);
 80051d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051d4:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8005288 <t4_comm_and_init+0x11c>
 80051d8:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800528c <t4_comm_and_init+0x120>
 80051dc:	2101      	movs	r1, #1
 80051de:	4829      	ldr	r0, [pc, #164]	; (8005284 <t4_comm_and_init+0x118>)
 80051e0:	f006 fa24 	bl	800b62c <sgen_enable>
#endif
#endif

    while (PS_VM_ReadQ(NULL) == SCPI_RES_ERR); // read vcc
 80051e4:	bf00      	nop
 80051e6:	2000      	movs	r0, #0
 80051e8:	f004 fd32 	bl	8009c50 <PS_VM_ReadQ>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f2:	d0f8      	beq.n	80051e6 <t4_comm_and_init+0x7a>
    init_done = 1;
 80051f4:	4b26      	ldr	r3, [pc, #152]	; (8005290 <t4_comm_and_init+0x124>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	701a      	strb	r2, [r3, #0]

    while(1)
    {
        ASSERT(xSemaphoreTake(sem1_comm, portMAX_DELAY) == pdPASS);
 80051fa:	4b26      	ldr	r3, [pc, #152]	; (8005294 <t4_comm_and_init+0x128>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f04f 31ff 	mov.w	r1, #4294967295
 8005202:	4618      	mov	r0, r3
 8005204:	f00b fd20 	bl	8010c48 <xQueueSemaphoreTake>
 8005208:	4603      	mov	r3, r0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d003      	beq.n	8005216 <t4_comm_and_init+0xaa>
 800520e:	2196      	movs	r1, #150	; 0x96
 8005210:	4821      	ldr	r0, [pc, #132]	; (8005298 <t4_comm_and_init+0x12c>)
 8005212:	f006 ff08 	bl	800c026 <assert2>
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 8005216:	4b21      	ldr	r3, [pc, #132]	; (800529c <t4_comm_and_init+0x130>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f04f 31ff 	mov.w	r1, #4294967295
 800521e:	4618      	mov	r0, r3
 8005220:	f00b fd12 	bl	8010c48 <xQueueSemaphoreTake>
 8005224:	4603      	mov	r3, r0
 8005226:	2b01      	cmp	r3, #1
 8005228:	d003      	beq.n	8005232 <t4_comm_and_init+0xc6>
 800522a:	2197      	movs	r1, #151	; 0x97
 800522c:	481a      	ldr	r0, [pc, #104]	; (8005298 <t4_comm_and_init+0x12c>)
 800522e:	f006 fefa 	bl	800c026 <assert2>

        //iwdg_feed();
        if (comm_main(&comm))
 8005232:	4812      	ldr	r0, [pc, #72]	; (800527c <t4_comm_and_init+0x110>)
 8005234:	f000 fd00 	bl	8005c38 <comm_main>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d009      	beq.n	8005252 <t4_comm_and_init+0xe6>
            led_blink_set(&led, 1, PS_BLINK_SHORT_MS, daq.uwTick);
 800523e:	4b10      	ldr	r3, [pc, #64]	; (8005280 <t4_comm_and_init+0x114>)
 8005240:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8005244:	3330      	adds	r3, #48	; 0x30
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2232      	movs	r2, #50	; 0x32
 800524a:	2101      	movs	r1, #1
 800524c:	4809      	ldr	r0, [pc, #36]	; (8005274 <t4_comm_and_init+0x108>)
 800524e:	f004 f80b 	bl	8009268 <led_blink_set>

        ASSERT(xSemaphoreGive(mtx1) == pdPASS);
 8005252:	4b12      	ldr	r3, [pc, #72]	; (800529c <t4_comm_and_init+0x130>)
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	2300      	movs	r3, #0
 8005258:	2200      	movs	r2, #0
 800525a:	2100      	movs	r1, #0
 800525c:	f00b fb70 	bl	8010940 <xQueueGenericSend>
 8005260:	4603      	mov	r3, r0
 8005262:	2b01      	cmp	r3, #1
 8005264:	d0c9      	beq.n	80051fa <t4_comm_and_init+0x8e>
 8005266:	219d      	movs	r1, #157	; 0x9d
 8005268:	480b      	ldr	r0, [pc, #44]	; (8005298 <t4_comm_and_init+0x12c>)
 800526a:	f006 fedc 	bl	800c026 <assert2>
        ASSERT(xSemaphoreTake(sem1_comm, portMAX_DELAY) == pdPASS);
 800526e:	e7c4      	b.n	80051fa <t4_comm_and_init+0x8e>
 8005270:	2000d6a0 	.word	0x2000d6a0
 8005274:	2000ccc0 	.word	0x2000ccc0
 8005278:	20000604 	.word	0x20000604
 800527c:	2000d6d0 	.word	0x2000d6d0
 8005280:	200007ec 	.word	0x200007ec
 8005284:	2000cdd4 	.word	0x2000cdd4
 8005288:	447a0000 	.word	0x447a0000
 800528c:	42c80000 	.word	0x42c80000
 8005290:	20000218 	.word	0x20000218
 8005294:	2000d650 	.word	0x2000d650
 8005298:	08014df8 	.word	0x08014df8
 800529c:	2000ccd0 	.word	0x2000ccd0

080052a0 <__NVIC_GetPriorityGrouping>:
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052a4:	4b04      	ldr	r3, [pc, #16]	; (80052b8 <__NVIC_GetPriorityGrouping+0x18>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	f003 0307 	and.w	r3, r3, #7
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	e000ed00 	.word	0xe000ed00

080052bc <__NVIC_EnableIRQ>:
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	db0b      	blt.n	80052e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	f003 021f 	and.w	r2, r3, #31
 80052d4:	4907      	ldr	r1, [pc, #28]	; (80052f4 <__NVIC_EnableIRQ+0x38>)
 80052d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	2001      	movs	r0, #1
 80052de:	fa00 f202 	lsl.w	r2, r0, r2
 80052e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	e000e100 	.word	0xe000e100

080052f8 <__NVIC_DisableIRQ>:
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005306:	2b00      	cmp	r3, #0
 8005308:	db10      	blt.n	800532c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	f003 021f 	and.w	r2, r3, #31
 8005310:	4909      	ldr	r1, [pc, #36]	; (8005338 <__NVIC_DisableIRQ+0x40>)
 8005312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	2001      	movs	r0, #1
 800531a:	fa00 f202 	lsl.w	r2, r0, r2
 800531e:	3320      	adds	r3, #32
 8005320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005328:	f3bf 8f6f 	isb	sy
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	e000e100 	.word	0xe000e100

0800533c <__NVIC_SetPriority>:
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	6039      	str	r1, [r7, #0]
 8005346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534c:	2b00      	cmp	r3, #0
 800534e:	db0a      	blt.n	8005366 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	b2da      	uxtb	r2, r3
 8005354:	490c      	ldr	r1, [pc, #48]	; (8005388 <__NVIC_SetPriority+0x4c>)
 8005356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535a:	0112      	lsls	r2, r2, #4
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	440b      	add	r3, r1
 8005360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005364:	e00a      	b.n	800537c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	b2da      	uxtb	r2, r3
 800536a:	4908      	ldr	r1, [pc, #32]	; (800538c <__NVIC_SetPriority+0x50>)
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	3b04      	subs	r3, #4
 8005374:	0112      	lsls	r2, r2, #4
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	440b      	add	r3, r1
 800537a:	761a      	strb	r2, [r3, #24]
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	e000e100 	.word	0xe000e100
 800538c:	e000ed00 	.word	0xe000ed00

08005390 <NVIC_EncodePriority>:
{
 8005390:	b480      	push	{r7}
 8005392:	b089      	sub	sp, #36	; 0x24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f1c3 0307 	rsb	r3, r3, #7
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	bf28      	it	cs
 80053ae:	2304      	movcs	r3, #4
 80053b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	3304      	adds	r3, #4
 80053b6:	2b06      	cmp	r3, #6
 80053b8:	d902      	bls.n	80053c0 <NVIC_EncodePriority+0x30>
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3b03      	subs	r3, #3
 80053be:	e000      	b.n	80053c2 <NVIC_EncodePriority+0x32>
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053c4:	f04f 32ff 	mov.w	r2, #4294967295
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43da      	mvns	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	401a      	ands	r2, r3
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053d8:	f04f 31ff 	mov.w	r1, #4294967295
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	fa01 f303 	lsl.w	r3, r1, r3
 80053e2:	43d9      	mvns	r1, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e8:	4313      	orrs	r3, r2
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3724      	adds	r7, #36	; 0x24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	3b01      	subs	r3, #1
 8005406:	4a06      	ldr	r2, [pc, #24]	; (8005420 <LL_DMA_GetDataLength+0x28>)
 8005408:	5cd3      	ldrb	r3, [r2, r3]
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4413      	add	r3, r2
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	08015608 	.word	0x08015608

08005424 <LL_TIM_EnableCounter>:
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f043 0201 	orr.w	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	601a      	str	r2, [r3, #0]
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <LL_TIM_DisableCounter>:
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f023 0201 	bic.w	r2, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <LL_TIM_CC_EnableChannel>:
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1a      	ldr	r2, [r3, #32]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <LL_TIM_CC_DisableChannel>:
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1a      	ldr	r2, [r3, #32]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	43db      	mvns	r3, r3
 8005498:	401a      	ands	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	621a      	str	r2, [r3, #32]
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <LL_TIM_EnableIT_UPDATE>:
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f043 0201 	orr.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60da      	str	r2, [r3, #12]
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <LL_TIM_EnableIT_CC4>:
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC4IE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f043 0210 	orr.w	r2, r3, #16
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60da      	str	r2, [r3, #12]
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <LL_TIM_EnableDMAReq_CC4>:
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60da      	str	r2, [r3, #12]
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <LL_TIM_DisableDMAReq_CC4>:
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60da      	str	r2, [r3, #12]
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <cntr_init>:
#include "main.h"
#include "periph.h"


void cntr_init(cntr_data_t* self)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af04      	add	r7, sp, #16
 8005532:	6078      	str	r0, [r7, #4]
    self->freq = 0;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    self->ovf = 0;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    self->enabled = 0;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    self->data_ovf_it = 0;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    memset(self->data_ccr, 0, PS_CNTR_BUFF_SZ * sizeof(uint16_t));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	22c8      	movs	r2, #200	; 0xc8
 800555a:	2100      	movs	r1, #0
 800555c:	4618      	mov	r0, r3
 800555e:	f00c fd75 	bl	801204c <memset>
    memset(self->data_ovf, 0, PS_CNTR_BUFF_SZ * sizeof(uint16_t));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	33c8      	adds	r3, #200	; 0xc8
 8005566:	22c8      	movs	r2, #200	; 0xc8
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f00c fd6e 	bl	801204c <memset>
    dma_set((uint32_t)&PS_TIM_CNTR->PS_TIM_CNTR_CCR, PS_DMA_CNTR, PS_DMA_CH_CNTR, (uint32_t)&self->data_ccr, PS_CNTR_BUFF_SZ,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	461a      	mov	r2, r3
 8005574:	2300      	movs	r3, #0
 8005576:	9303      	str	r3, [sp, #12]
 8005578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800557c:	9302      	str	r3, [sp, #8]
 800557e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	2364      	movs	r3, #100	; 0x64
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	2202      	movs	r2, #2
 800558c:	4913      	ldr	r1, [pc, #76]	; (80055dc <cntr_init+0xb0>)
 800558e:	4814      	ldr	r0, [pc, #80]	; (80055e0 <cntr_init+0xb4>)
 8005590:	f004 f8ce 	bl	8009730 <dma_set>
            LL_DMA_PDATAALIGN_HALFWORD, LL_DMA_MDATAALIGN_HALFWORD, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

    NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8005594:	f7ff fe84 	bl	80052a0 <__NVIC_GetPriorityGrouping>
 8005598:	4603      	mov	r3, r0
 800559a:	2200      	movs	r2, #0
 800559c:	2101      	movs	r1, #1
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fef6 	bl	8005390 <NVIC_EncodePriority>
 80055a4:	4603      	mov	r3, r0
 80055a6:	4619      	mov	r1, r3
 80055a8:	2019      	movs	r0, #25
 80055aa:	f7ff fec7 	bl	800533c <__NVIC_SetPriority>
    NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80055ae:	f7ff fe77 	bl	80052a0 <__NVIC_GetPriorityGrouping>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2200      	movs	r2, #0
 80055b6:	2101      	movs	r1, #1
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff fee9 	bl	8005390 <NVIC_EncodePriority>
 80055be:	4603      	mov	r3, r0
 80055c0:	4619      	mov	r1, r3
 80055c2:	201b      	movs	r0, #27
 80055c4:	f7ff feba 	bl	800533c <__NVIC_SetPriority>
    PS_TIM_CNTR_CC(LL_TIM_EnableIT_)(PS_TIM_CNTR);
 80055c8:	4806      	ldr	r0, [pc, #24]	; (80055e4 <cntr_init+0xb8>)
 80055ca:	f7ff ff7e 	bl	80054ca <LL_TIM_EnableIT_CC4>
    LL_TIM_EnableIT_UPDATE(PS_TIM_CNTR);
 80055ce:	4805      	ldr	r0, [pc, #20]	; (80055e4 <cntr_init+0xb8>)
 80055d0:	f7ff ff6b 	bl	80054aa <LL_TIM_EnableIT_UPDATE>
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40020400 	.word	0x40020400
 80055e0:	40013440 	.word	0x40013440
 80055e4:	40013400 	.word	0x40013400

080055e8 <cntr_enable>:

void cntr_enable(cntr_data_t* self, uint8_t enable)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	70fb      	strb	r3, [r7, #3]
    if (enable)
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d014      	beq.n	8005624 <cntr_enable+0x3c>
    {
        cntr_init(self);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff ff96 	bl	800552c <cntr_init>

        PS_TIM_CNTR_CC(LL_TIM_EnableDMAReq_)(PS_TIM_CNTR);
 8005600:	4815      	ldr	r0, [pc, #84]	; (8005658 <cntr_enable+0x70>)
 8005602:	f7ff ff72 	bl	80054ea <LL_TIM_EnableDMAReq_CC4>
        NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005606:	201b      	movs	r0, #27
 8005608:	f7ff fe58 	bl	80052bc <__NVIC_EnableIRQ>
        NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800560c:	2019      	movs	r0, #25
 800560e:	f7ff fe55 	bl	80052bc <__NVIC_EnableIRQ>
        LL_TIM_EnableCounter(PS_TIM_CNTR);
 8005612:	4811      	ldr	r0, [pc, #68]	; (8005658 <cntr_enable+0x70>)
 8005614:	f7ff ff06 	bl	8005424 <LL_TIM_EnableCounter>
        LL_TIM_CC_EnableChannel(PS_TIM_CNTR, PS_TIM_CNTR_CH);
 8005618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800561c:	480e      	ldr	r0, [pc, #56]	; (8005658 <cntr_enable+0x70>)
 800561e:	f7ff ff21 	bl	8005464 <LL_TIM_CC_EnableChannel>
 8005622:	e010      	b.n	8005646 <cntr_enable+0x5e>
    }
    else
    {
        LL_TIM_DisableCounter(PS_TIM_CNTR);
 8005624:	480c      	ldr	r0, [pc, #48]	; (8005658 <cntr_enable+0x70>)
 8005626:	f7ff ff0d 	bl	8005444 <LL_TIM_DisableCounter>
        LL_TIM_CC_DisableChannel(PS_TIM_CNTR, PS_TIM_CNTR_CH);
 800562a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800562e:	480a      	ldr	r0, [pc, #40]	; (8005658 <cntr_enable+0x70>)
 8005630:	f7ff ff29 	bl	8005486 <LL_TIM_CC_DisableChannel>
        NVIC_DisableIRQ(TIM1_CC_IRQn);
 8005634:	201b      	movs	r0, #27
 8005636:	f7ff fe5f 	bl	80052f8 <__NVIC_DisableIRQ>
        NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 800563a:	2019      	movs	r0, #25
 800563c:	f7ff fe5c 	bl	80052f8 <__NVIC_DisableIRQ>
        PS_TIM_CNTR_CC(LL_TIM_DisableDMAReq_)(PS_TIM_CNTR);
 8005640:	4805      	ldr	r0, [pc, #20]	; (8005658 <cntr_enable+0x70>)
 8005642:	f7ff ff62 	bl	800550a <LL_TIM_DisableDMAReq_CC4>
    }
    self->enabled = enable;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	40013400 	.word	0x40013400

0800565c <cntr_read>:

float cntr_read(cntr_data_t* self, daq_data_t* daq)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08a      	sub	sp, #40	; 0x28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
    int uwTick_start = daq->uwTick;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800566c:	3330      	adds	r3, #48	; 0x30
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	61fb      	str	r3, [r7, #28]
    int sz = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	61bb      	str	r3, [r7, #24]

    cntr_enable(self, 1);
 8005676:	2101      	movs	r1, #1
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff ffb5 	bl	80055e8 <cntr_enable>

    while (1)
    {
        sz = LL_DMA_GetDataLength(PS_DMA_CNTR, PS_DMA_CH_CNTR);
 800567e:	2102      	movs	r1, #2
 8005680:	4843      	ldr	r0, [pc, #268]	; (8005790 <cntr_read+0x134>)
 8005682:	f7ff feb9 	bl	80053f8 <LL_DMA_GetDataLength>
 8005686:	4603      	mov	r3, r0
 8005688:	61bb      	str	r3, [r7, #24]

        uint32_t timeout = daq->uwTick - uwTick_start;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8005690:	3330      	adds	r3, #48	; 0x30
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	617b      	str	r3, [r7, #20]
        if (timeout < 0)
            timeout += PS_UWTICK_MAX;

        if (timeout > PS_CNTR_MEAS_MS || sz == 0)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80056a0:	d803      	bhi.n	80056aa <cntr_read+0x4e>
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d000      	beq.n	80056aa <cntr_read+0x4e>
    {
 80056a8:	e7e9      	b.n	800567e <cntr_read+0x22>
            break;
    }

    cntr_enable(self, 0);
 80056aa:	2100      	movs	r1, #0
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff ff9b 	bl	80055e8 <cntr_enable>

    sz = PS_CNTR_BUFF_SZ - sz;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80056b8:	61bb      	str	r3, [r7, #24]

    if (sz >= 2)
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	dd5f      	ble.n	8005780 <cntr_read+0x124>
    {
        uint32_t ovf = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t ccr_sum = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	623b      	str	r3, [r7, #32]

        if (self->data_ovf_it > 1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	dd0e      	ble.n	80056f0 <cntr_read+0x94>
            ovf = self->data_ovf[self->data_ovf_it - 1] - self->data_ovf[0] - 1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80056d8:	1e5a      	subs	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3264      	adds	r2, #100	; 0x64
 80056de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80056e2:	461a      	mov	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24

        if (self->data_ovf_it > 0)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	dd0f      	ble.n	800571a <cntr_read+0xbe>
            ccr_sum += (PS_TIM_CNTR_MAX - self->data_ccr[0]) + self->data_ccr[sz - 1];
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005702:	33ff      	adds	r3, #255	; 0xff
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	1e51      	subs	r1, r2, #1
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800570e:	4413      	add	r3, r2
 8005710:	461a      	mov	r2, r3
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	4413      	add	r3, r2
 8005716:	623b      	str	r3, [r7, #32]
 8005718:	e00c      	b.n	8005734 <cntr_read+0xd8>
        else
            ccr_sum += self->data_ccr[sz - 1] - self->data_ccr[0];
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	1e5a      	subs	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005724:	461a      	mov	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	461a      	mov	r2, r3
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	4413      	add	r3, r2
 8005732:	623b      	str	r3, [r7, #32]

        float total = (ovf * PS_TIM_CNTR_MAX) + ccr_sum;
 8005734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005736:	4613      	mov	r3, r2
 8005738:	041b      	lsls	r3, r3, #16
 800573a:	1a9a      	subs	r2, r3, r2
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	4413      	add	r3, r2
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005748:	edc7 7a04 	vstr	s15, [r7, #16]
        total /= (float)(sz - 1);
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	3b01      	subs	r3, #1
 8005750:	ee07 3a90 	vmov	s15, r3
 8005754:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005758:	edd7 6a04 	vldr	s13, [r7, #16]
 800575c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005760:	edc7 7a04 	vstr	s15, [r7, #16]
        float f = (float)PS_TIM_CNTR_FREQ / total;
 8005764:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005794 <cntr_read+0x138>
 8005768:	ed97 7a04 	vldr	s14, [r7, #16]
 800576c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005770:	edc7 7a03 	vstr	s15, [r7, #12]
        self->freq = f;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
        return f;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	e000      	b.n	8005782 <cntr_read+0x126>
    }
    else
    {
        return -1; // timeout
 8005780:	4b05      	ldr	r3, [pc, #20]	; (8005798 <cntr_read+0x13c>)
 8005782:	ee07 3a90 	vmov	s15, r3
    }
}
 8005786:	eeb0 0a67 	vmov.f32	s0, s15
 800578a:	3728      	adds	r7, #40	; 0x28
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40020400 	.word	0x40020400
 8005794:	4c895440 	.word	0x4c895440
 8005798:	bf800000 	.word	0xbf800000

0800579c <__NVIC_GetPriorityGrouping>:
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057a0:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <__NVIC_GetPriorityGrouping+0x18>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	0a1b      	lsrs	r3, r3, #8
 80057a6:	f003 0307 	and.w	r3, r3, #7
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <__NVIC_EnableIRQ>:
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	db0b      	blt.n	80057e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	f003 021f 	and.w	r2, r3, #31
 80057d0:	4907      	ldr	r1, [pc, #28]	; (80057f0 <__NVIC_EnableIRQ+0x38>)
 80057d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	2001      	movs	r0, #1
 80057da:	fa00 f202 	lsl.w	r2, r0, r2
 80057de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	e000e100 	.word	0xe000e100

080057f4 <__NVIC_SetPriority>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	6039      	str	r1, [r7, #0]
 80057fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005804:	2b00      	cmp	r3, #0
 8005806:	db0a      	blt.n	800581e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	b2da      	uxtb	r2, r3
 800580c:	490c      	ldr	r1, [pc, #48]	; (8005840 <__NVIC_SetPriority+0x4c>)
 800580e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005812:	0112      	lsls	r2, r2, #4
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	440b      	add	r3, r1
 8005818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800581c:	e00a      	b.n	8005834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	4908      	ldr	r1, [pc, #32]	; (8005844 <__NVIC_SetPriority+0x50>)
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	3b04      	subs	r3, #4
 800582c:	0112      	lsls	r2, r2, #4
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	440b      	add	r3, r1
 8005832:	761a      	strb	r2, [r3, #24]
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	e000e100 	.word	0xe000e100
 8005844:	e000ed00 	.word	0xe000ed00

08005848 <NVIC_EncodePriority>:
{
 8005848:	b480      	push	{r7}
 800584a:	b089      	sub	sp, #36	; 0x24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f1c3 0307 	rsb	r3, r3, #7
 8005862:	2b04      	cmp	r3, #4
 8005864:	bf28      	it	cs
 8005866:	2304      	movcs	r3, #4
 8005868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3304      	adds	r3, #4
 800586e:	2b06      	cmp	r3, #6
 8005870:	d902      	bls.n	8005878 <NVIC_EncodePriority+0x30>
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	3b03      	subs	r3, #3
 8005876:	e000      	b.n	800587a <NVIC_EncodePriority+0x32>
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800587c:	f04f 32ff 	mov.w	r2, #4294967295
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	43da      	mvns	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	401a      	ands	r2, r3
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005890:	f04f 31ff 	mov.w	r1, #4294967295
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	43d9      	mvns	r1, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058a0:	4313      	orrs	r3, r2
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3724      	adds	r7, #36	; 0x24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <LL_USART_IsActiveFlag_TXE>:
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058be:	2b80      	cmp	r3, #128	; 0x80
 80058c0:	d101      	bne.n	80058c6 <LL_USART_IsActiveFlag_TXE+0x18>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <LL_USART_IsActiveFlag_TXE+0x1a>
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <LL_USART_EnableIT_RXNE>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f043 0220 	orr.w	r2, r3, #32
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	b29a      	uxth	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <SCPI_Write>:


/************************* SCPI Core *************************/

size_t SCPI_Write(scpi_t * context, const char * data, size_t len)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
    (void) context;

    return comm_respond((comm_data_t*)context->comm, data, len);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f9b0 	bl	8005c90 <comm_respond>
 8005930:	4603      	mov	r3, r0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
    (void) context;

    return SCPI_RES_OK;
 8005942:	2301      	movs	r3, #1
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err)
{
 8005950:	b590      	push	{r4, r7, lr}
 8005952:	b09d      	sub	sp, #116	; 0x74
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
    (void) context;

    char buff[100];
    int len = sprintf(buff, "**ERROR: %d, \"%s\"\r\n", (int16_t) err, SCPI_ErrorTranslate(err));
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	b21b      	sxth	r3, r3
 800595e:	461c      	mov	r4, r3
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	b21b      	sxth	r3, r3
 8005964:	4618      	mov	r0, r3
 8005966:	f007 f81f 	bl	800c9a8 <SCPI_ErrorTranslate>
 800596a:	4603      	mov	r3, r0
 800596c:	f107 0008 	add.w	r0, r7, #8
 8005970:	4622      	mov	r2, r4
 8005972:	4909      	ldr	r1, [pc, #36]	; (8005998 <SCPI_Error+0x48>)
 8005974:	f00c fb72 	bl	801205c <siprintf>
 8005978:	66f8      	str	r0, [r7, #108]	; 0x6c
    comm_respond((comm_data_t*)context->comm, buff, len);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005980:	f107 0108 	add.w	r1, r7, #8
 8005984:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005986:	4618      	mov	r0, r3
 8005988:	f000 f982 	bl	8005c90 <comm_respond>
    return 0;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3774      	adds	r7, #116	; 0x74
 8005992:	46bd      	mov	sp, r7
 8005994:	bd90      	pop	{r4, r7, pc}
 8005996:	bf00      	nop
 8005998:	08014f74 	.word	0x08014f74

0800599c <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b09e      	sub	sp, #120	; 0x78
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
 80059a8:	4613      	mov	r3, r2
 80059aa:	803b      	strh	r3, [r7, #0]
    (void) context;

    char buff[100];
    int len = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (SCPI_CTRL_SRQ == ctrl)
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d108      	bne.n	80059c8 <SCPI_Control+0x2c>
        len = sprintf(buff, "**SRQ: 0x%X (%d)\r\n", val, val);
 80059b6:	883a      	ldrh	r2, [r7, #0]
 80059b8:	883b      	ldrh	r3, [r7, #0]
 80059ba:	f107 0008 	add.w	r0, r7, #8
 80059be:	490f      	ldr	r1, [pc, #60]	; (80059fc <SCPI_Control+0x60>)
 80059c0:	f00c fb4c 	bl	801205c <siprintf>
 80059c4:	66f8      	str	r0, [r7, #108]	; 0x6c
 80059c6:	e00a      	b.n	80059de <SCPI_Control+0x42>
    else
        len = sprintf(buff, "**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	8839      	ldrh	r1, [r7, #0]
 80059cc:	883b      	ldrh	r3, [r7, #0]
 80059ce:	f107 0008 	add.w	r0, r7, #8
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	460b      	mov	r3, r1
 80059d6:	490a      	ldr	r1, [pc, #40]	; (8005a00 <SCPI_Control+0x64>)
 80059d8:	f00c fb40 	bl	801205c <siprintf>
 80059dc:	66f8      	str	r0, [r7, #108]	; 0x6c

    comm_respond((comm_data_t*)context->comm, buff, len);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80059e4:	f107 0108 	add.w	r1, r7, #8
 80059e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 f950 	bl	8005c90 <comm_respond>
    return SCPI_RES_OK;
 80059f0:	2301      	movs	r3, #1
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3770      	adds	r7, #112	; 0x70
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	08014f88 	.word	0x08014f88
 8005a00:	08014f9c 	.word	0x08014f9c

08005a04 <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
    (void) context;

    comm_respond((comm_data_t*)context->comm, "**Reset\r\n", 9);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005a12:	2209      	movs	r2, #9
 8005a14:	4904      	ldr	r1, [pc, #16]	; (8005a28 <SCPI_Reset+0x24>)
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 f93a 	bl	8005c90 <comm_respond>
    return SCPI_RES_OK;
 8005a1c:	2301      	movs	r3, #1
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	08014fb8 	.word	0x08014fb8

08005a2c <SCPI_CoreIdnQ>:

scpi_result_t SCPI_CoreIdnQ(scpi_t * context)
{
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < 4; i++) {
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e039      	b.n	8005aae <SCPI_CoreIdnQ+0x82>
        if (context->idn[i])
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3320      	adds	r3, #32
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d029      	beq.n	8005a9e <SCPI_CoreIdnQ+0x72>
        {
            int j = i;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	60bb      	str	r3, [r7, #8]
            if (i == 1 && ((comm_data_t*)(context->comm))->uart.available)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d109      	bne.n	8005a68 <SCPI_CoreIdnQ+0x3c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005a5a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <SCPI_CoreIdnQ+0x3c>
                j = 4;
 8005a62:	2304      	movs	r3, #4
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	e004      	b.n	8005a72 <SCPI_CoreIdnQ+0x46>
            else if (i == 1) // comm_data_usb.available
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <SCPI_CoreIdnQ+0x46>
                j = 5;
 8005a6e:	2305      	movs	r3, #5
 8005a70:	60bb      	str	r3, [r7, #8]

            SCPI_ResultMnemonic(context, context->idn[j]);
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	3320      	adds	r3, #32
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	685c      	ldr	r4, [r3, #4]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	3320      	adds	r3, #32
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fa fbb2 	bl	80001f4 <strlen>
 8005a90:	4603      	mov	r3, r0
 8005a92:	461a      	mov	r2, r3
 8005a94:	4621      	mov	r1, r4
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f008 fef2 	bl	800e880 <SCPI_ResultCharacters>
 8005a9c:	e004      	b.n	8005aa8 <SCPI_CoreIdnQ+0x7c>
        } else {
            SCPI_ResultMnemonic(context, "0");
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	4907      	ldr	r1, [pc, #28]	; (8005ac0 <SCPI_CoreIdnQ+0x94>)
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f008 feec 	bl	800e880 <SCPI_ResultCharacters>
    for (i = 0; i < 4; i++) {
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	ddc2      	ble.n	8005a3a <SCPI_CoreIdnQ+0xe>
        }
    }
    return SCPI_RES_OK;
 8005ab4:	2301      	movs	r3, #1
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd90      	pop	{r4, r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	08014fc4 	.word	0x08014fc4

08005ac4 <uart_put_text>:

/************************* Write Respond *************************/

void uart_put_text(const char* data)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < strlen(data); i++)
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	e009      	b.n	8005ae6 <uart_put_text+0x22>
        uart_put_char(data[i]);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f80e 	bl	8005afc <uart_put_char>
    for (int i = 0; i < strlen(data); i++)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fa fb84 	bl	80001f4 <strlen>
 8005aec:	4602      	mov	r2, r0
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d8ee      	bhi.n	8005ad2 <uart_put_text+0xe>
}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <uart_put_char>:

static void uart_put_char(const char data)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
    while(!LL_USART_IsActiveFlag_TXE(PS_UART));
 8005b06:	bf00      	nop
 8005b08:	4807      	ldr	r0, [pc, #28]	; (8005b28 <uart_put_char+0x2c>)
 8005b0a:	f7ff fed0 	bl	80058ae <LL_USART_IsActiveFlag_TXE>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f9      	beq.n	8005b08 <uart_put_char+0xc>
    LL_USART_TransmitData8(PS_UART, data);
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	4619      	mov	r1, r3
 8005b18:	4803      	ldr	r0, [pc, #12]	; (8005b28 <uart_put_char+0x2c>)
 8005b1a:	f7ff feeb 	bl	80058f4 <LL_USART_TransmitData8>
}
 8005b1e:	bf00      	nop
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40004400 	.word	0x40004400

08005b2c <uart_put_str>:

static void uart_put_str(const char* data, int len)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < len; i++)
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e009      	b.n	8005b50 <uart_put_str+0x24>
        uart_put_char(data[i]);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	4413      	add	r3, r2
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff ffd9 	bl	8005afc <uart_put_char>
    for (int i = 0; i < len; i++)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	dbf1      	blt.n	8005b3c <uart_put_str+0x10>
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <comm_init>:

/************************* Main Comm *************************/

void comm_init(comm_data_t* self)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08c      	sub	sp, #48	; 0x30
 8005b64:	af0a      	add	r7, sp, #40	; 0x28
 8005b66:	6078      	str	r0, [r7, #4]
    self->uart.last = 0;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
    self->uart.available = 0;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    self->uart.rx_index = 0;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    self->usb.last = 0;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    self->usb.available = 0;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    self->usb.rx_index = 0;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    comm_ptr = self;
 8005b98:	4a1a      	ldr	r2, [pc, #104]	; (8005c04 <comm_init+0xa4>)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6013      	str	r3, [r2, #0]

    SCPI_Init(&scpi_context,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	9308      	str	r3, [sp, #32]
 8005ba2:	2311      	movs	r3, #17
 8005ba4:	9307      	str	r3, [sp, #28]
 8005ba6:	4b18      	ldr	r3, [pc, #96]	; (8005c08 <comm_init+0xa8>)
 8005ba8:	9306      	str	r3, [sp, #24]
 8005baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bae:	9305      	str	r3, [sp, #20]
 8005bb0:	4b16      	ldr	r3, [pc, #88]	; (8005c0c <comm_init+0xac>)
 8005bb2:	9304      	str	r3, [sp, #16]
 8005bb4:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <comm_init+0xb0>)
 8005bb6:	9303      	str	r3, [sp, #12]
 8005bb8:	4b16      	ldr	r3, [pc, #88]	; (8005c14 <comm_init+0xb4>)
 8005bba:	9302      	str	r3, [sp, #8]
 8005bbc:	4b16      	ldr	r3, [pc, #88]	; (8005c18 <comm_init+0xb8>)
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <comm_init+0xbc>)
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	4b16      	ldr	r3, [pc, #88]	; (8005c20 <comm_init+0xc0>)
 8005bc6:	4a17      	ldr	r2, [pc, #92]	; (8005c24 <comm_init+0xc4>)
 8005bc8:	4917      	ldr	r1, [pc, #92]	; (8005c28 <comm_init+0xc8>)
 8005bca:	4818      	ldr	r0, [pc, #96]	; (8005c2c <comm_init+0xcc>)
 8005bcc:	f008 fd52 	bl	800e674 <SCPI_Init>
              SCPI_IDN1, SCPI_IDN2, SCPI_IDN3, SCPI_IDN4,
              scpi_input_buffer, SCPI_INPUT_BUFFER_LENGTH,
              scpi_error_queue_data, SCPI_ERROR_QUEUE_SIZE,
              self);

    LL_USART_EnableIT_RXNE(PS_UART);
 8005bd0:	4817      	ldr	r0, [pc, #92]	; (8005c30 <comm_init+0xd0>)
 8005bd2:	f7ff fe7f 	bl	80058d4 <LL_USART_EnableIT_RXNE>
    uart_put_text(WELCOME_STR);
 8005bd6:	4817      	ldr	r0, [pc, #92]	; (8005c34 <comm_init+0xd4>)
 8005bd8:	f7ff ff74 	bl	8005ac4 <uart_put_text>

    NVIC_SetPriority(PS_IRQN_UART, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_UART, 0));
 8005bdc:	f7ff fdde 	bl	800579c <__NVIC_GetPriorityGrouping>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2200      	movs	r2, #0
 8005be4:	2106      	movs	r1, #6
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff fe2e 	bl	8005848 <NVIC_EncodePriority>
 8005bec:	4603      	mov	r3, r0
 8005bee:	4619      	mov	r1, r3
 8005bf0:	2026      	movs	r0, #38	; 0x26
 8005bf2:	f7ff fdff 	bl	80057f4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PS_IRQN_UART);
 8005bf6:	2026      	movs	r0, #38	; 0x26
 8005bf8:	f7ff fdde 	bl	80057b8 <__NVIC_EnableIRQ>
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	2000d604 	.word	0x2000d604
 8005c08:	2000e308 	.word	0x2000e308
 8005c0c:	2000e208 	.word	0x2000e208
 8005c10:	08014fc4 	.word	0x08014fc4
 8005c14:	08014fc8 	.word	0x08014fc8
 8005c18:	08014fd0 	.word	0x08014fd0
 8005c1c:	08014fe4 	.word	0x08014fe4
 8005c20:	080157d0 	.word	0x080157d0
 8005c24:	2000000c 	.word	0x2000000c
 8005c28:	08015610 	.word	0x08015610
 8005c2c:	2000e130 	.word	0x2000e130
 8005c30:	40004400 	.word	0x40004400
 8005c34:	08014ff4 	.word	0x08014ff4

08005c38 <comm_main>:

uint8_t comm_main(comm_data_t* self)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
    if (self->uart.available)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01a      	beq.n	8005c80 <comm_main+0x48>
    {
        SCPI_Input(&scpi_context, self->uart.rx_buffer, self->uart.rx_index);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f103 0167 	add.w	r1, r3, #103	; 0x67
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8005c56:	461a      	mov	r2, r3
 8005c58:	480c      	ldr	r0, [pc, #48]	; (8005c8c <comm_main+0x54>)
 8005c5a:	f008 fd6b 	bl	800e734 <SCPI_Input>

        memset(self->uart.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3367      	adds	r3, #103	; 0x67
 8005c62:	2264      	movs	r2, #100	; 0x64
 8005c64:	2100      	movs	r1, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f00c f9f0 	bl	801204c <memset>
        self->uart.rx_index = 0;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        self->uart.available = 0;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
        return 1;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <comm_main+0x4a>
        self->usb.rx_index = 0;
        self->usb.available = 0;
        return 1;
    }
#endif
    return 0;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	2000e130 	.word	0x2000e130

08005c90 <comm_respond>:

int comm_respond(comm_data_t* self, const char* data, int len)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
    if (self->uart.last)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <comm_respond+0x22>
    {
        uart_put_str(data, len);
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	68b8      	ldr	r0, [r7, #8]
 8005caa:	f7ff ff3f 	bl	8005b2c <uart_put_str>
        return len;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	e000      	b.n	8005cb4 <comm_respond+0x24>
        }

        return len;
    }
#endif
    return 0;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <__NVIC_GetPriorityGrouping>:
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cc0:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	0a1b      	lsrs	r3, r3, #8
 8005cc6:	f003 0307 	and.w	r3, r3, #7
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	e000ed00 	.word	0xe000ed00

08005cd8 <__NVIC_EnableIRQ>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	db0b      	blt.n	8005d02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	f003 021f 	and.w	r2, r3, #31
 8005cf0:	4907      	ldr	r1, [pc, #28]	; (8005d10 <__NVIC_EnableIRQ+0x38>)
 8005cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf6:	095b      	lsrs	r3, r3, #5
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8005cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	e000e100 	.word	0xe000e100

08005d14 <__NVIC_DisableIRQ>:
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	db10      	blt.n	8005d48 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	f003 021f 	and.w	r2, r3, #31
 8005d2c:	4909      	ldr	r1, [pc, #36]	; (8005d54 <__NVIC_DisableIRQ+0x40>)
 8005d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	2001      	movs	r0, #1
 8005d36:	fa00 f202 	lsl.w	r2, r0, r2
 8005d3a:	3320      	adds	r3, #32
 8005d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005d44:	f3bf 8f6f 	isb	sy
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	e000e100 	.word	0xe000e100

08005d58 <__NVIC_ClearPendingIRQ>:
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	db0c      	blt.n	8005d84 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	f003 021f 	and.w	r2, r3, #31
 8005d70:	4907      	ldr	r1, [pc, #28]	; (8005d90 <__NVIC_ClearPendingIRQ+0x38>)
 8005d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	2001      	movs	r0, #1
 8005d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d7e:	3360      	adds	r3, #96	; 0x60
 8005d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	e000e100 	.word	0xe000e100

08005d94 <__NVIC_SetPriority>:
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	6039      	str	r1, [r7, #0]
 8005d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	db0a      	blt.n	8005dbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	490c      	ldr	r1, [pc, #48]	; (8005de0 <__NVIC_SetPriority+0x4c>)
 8005dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db2:	0112      	lsls	r2, r2, #4
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	440b      	add	r3, r1
 8005db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005dbc:	e00a      	b.n	8005dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	4908      	ldr	r1, [pc, #32]	; (8005de4 <__NVIC_SetPriority+0x50>)
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	3b04      	subs	r3, #4
 8005dcc:	0112      	lsls	r2, r2, #4
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	761a      	strb	r2, [r3, #24]
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	e000e100 	.word	0xe000e100
 8005de4:	e000ed00 	.word	0xe000ed00

08005de8 <NVIC_EncodePriority>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	b089      	sub	sp, #36	; 0x24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	f1c3 0307 	rsb	r3, r3, #7
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	bf28      	it	cs
 8005e06:	2304      	movcs	r3, #4
 8005e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	2b06      	cmp	r3, #6
 8005e10:	d902      	bls.n	8005e18 <NVIC_EncodePriority+0x30>
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	3b03      	subs	r3, #3
 8005e16:	e000      	b.n	8005e1a <NVIC_EncodePriority+0x32>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	43da      	mvns	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e30:	f04f 31ff 	mov.w	r1, #4294967295
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3a:	43d9      	mvns	r1, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e40:	4313      	orrs	r3, r2
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3724      	adds	r7, #36	; 0x24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <LL_ADC_DMA_GetRegAddr>:
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d103      	bne.n	8005e6c <LL_ADC_DMA_GetRegAddr+0x1c>
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3340      	adds	r3, #64	; 0x40
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	e00c      	b.n	8005e86 <LL_ADC_DMA_GetRegAddr+0x36>
    data_reg_addr = (uint32_t)&((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e72:	d003      	beq.n	8005e7c <LL_ADC_DMA_GetRegAddr+0x2c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a07      	ldr	r2, [pc, #28]	; (8005e94 <LL_ADC_DMA_GetRegAddr+0x44>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d101      	bne.n	8005e80 <LL_ADC_DMA_GetRegAddr+0x30>
 8005e7c:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <LL_ADC_DMA_GetRegAddr+0x48>)
 8005e7e:	e000      	b.n	8005e82 <LL_ADC_DMA_GetRegAddr+0x32>
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <LL_ADC_DMA_GetRegAddr+0x4c>)
 8005e82:	330c      	adds	r3, #12
 8005e84:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8005e86:	68fb      	ldr	r3, [r7, #12]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	50000100 	.word	0x50000100
 8005e98:	50000300 	.word	0x50000300
 8005e9c:	50000700 	.word	0x50000700

08005ea0 <LL_ADC_SetAnalogWDMonitChannels>:
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b089      	sub	sp, #36	; 0x24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, __ADC_MASK_SHIFT(AWDy, ADC_AWD_CRX_REGOFFSET_MASK)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005eb8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005ebc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	fa92 f2a2 	rbit	r2, r2
 8005ec4:	617a      	str	r2, [r7, #20]
  return result;
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	fab2 f282 	clz	r2, r2
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	fa23 f102 	lsr.w	r1, r3, r2
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f003 0202 	and.w	r2, r3, #2
 8005ed8:	4613      	mov	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4403      	add	r3, r0
 8005ee6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <LL_ADC_SetAnalogWDMonitChannels+0x70>)
 8005ef0:	400b      	ands	r3, r1
 8005ef2:	43db      	mvns	r3, r3
 8005ef4:	401a      	ands	r2, r3
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	400b      	ands	r3, r1
 8005efc:	431a      	orrs	r2, r3
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	601a      	str	r2, [r3, #0]
}
 8005f02:	bf00      	nop
 8005f04:	3724      	adds	r7, #36	; 0x24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	7dc7fffe 	.word	0x7dc7fffe

08005f14 <LL_ADC_REG_StartConversion>:
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f28:	f043 0204 	orr.w	r2, r3, #4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	609a      	str	r2, [r3, #8]
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <LL_ADC_REG_StopConversion>:
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f50:	f043 0210 	orr.w	r2, r3, #16
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	609a      	str	r2, [r3, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <LL_TIM_EnableCounter>:
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f043 0201 	orr.w	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <LL_TIM_DisableCounter>:
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f023 0201 	bic.w	r2, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	601a      	str	r2, [r3, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <LL_TIM_SetPrescaler>:
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <LL_TIM_SetAutoReload>:
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <LL_TIM_EnableDMAReq_CC1>:
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	60da      	str	r2, [r3, #12]
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <LL_TIM_DisableDMAReq_CC1>:
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60da      	str	r2, [r3, #12]
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <daq_init>:
                       DMA_TypeDef* dma, enum daq_bits bits);
static void daq_clear_buff(daq_buff_t* buff);


void daq_init(daq_data_t* self)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
    daq_trig_init(self);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 fba7 	bl	8007778 <daq_trig_init>
    daq_settings_init(self);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f914 	bl	8006258 <daq_settings_init>
    daq_settings_save(&self->save_s, &self->trig.save_s, &self->set, &self->trig.set);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f503 4044 	add.w	r0, r3, #50176	; 0xc400
 8006036:	3008      	adds	r0, #8
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f503 4144 	add.w	r1, r3, #50176	; 0xc400
 800603e:	3150      	adds	r1, #80	; 0x50
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
 8006046:	32fc      	adds	r2, #252	; 0xfc
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800604e:	333c      	adds	r3, #60	; 0x3c
 8006050:	f000 f8c1 	bl	80061d6 <daq_settings_save>
    self->mode = SCOPE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800605a:	3334      	adds	r3, #52	; 0x34
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]

    daq_clear_buff(&self->buff1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fc3b 	bl	80068de <daq_clear_buff>
    daq_clear_buff(&self->buff2);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	330c      	adds	r3, #12
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fc36 	bl	80068de <daq_clear_buff>
    daq_clear_buff(&self->buff3);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3318      	adds	r3, #24
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fc31 	bl	80068de <daq_clear_buff>
    daq_clear_buff(&self->buff4);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3324      	adds	r3, #36	; 0x24
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fc2c 	bl	80068de <daq_clear_buff>
    daq_clear_buff(&self->buff_out);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3330      	adds	r3, #48	; 0x30
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fc27 	bl	80068de <daq_clear_buff>
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	333c      	adds	r3, #60	; 0x3c
 8006094:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006098:	2100      	movs	r1, #0
 800609a:	4618      	mov	r0, r3
 800609c:	f00b ffd6 	bl	801204c <memset>
    self->buff_raw_ptr = 0;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80060a6:	33fa      	adds	r3, #250	; 0xfa
 80060a8:	2200      	movs	r2, #0
 80060aa:	801a      	strh	r2, [r3, #0]

    self->trig.buff_trig = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80060b2:	33b0      	adds	r3, #176	; 0xb0
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
    self->buff_out.reserve = 0;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	871a      	strh	r2, [r3, #56]	; 0x38
    self->enabled = 0;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80060c4:	3336      	adds	r3, #54	; 0x36
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
    self->dis_hold = 0;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80060d0:	3335      	adds	r3, #53	; 0x35
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
    self->vref = 0;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80060dc:	3320      	adds	r3, #32
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
    self->vcc_mv = 0;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80060ea:	3324      	adds	r3, #36	; 0x24
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
    self->adc_max_val = 0;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80060f8:	332c      	adds	r3, #44	; 0x2c
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
    self->smpl_time = 0;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006106:	3328      	adds	r3, #40	; 0x28
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
    self->interleaved = 0;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006114:	3337      	adds	r3, #55	; 0x37
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
    self->dualmode = 0;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006120:	3338      	adds	r3, #56	; 0x38
 8006122:	2200      	movs	r2, #0
 8006124:	701a      	strb	r2, [r3, #0]
    self->uwTick = 0;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800612c:	3330      	adds	r3, #48	; 0x30
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]

    NVIC_SetPriority(PS_IRQN_DAQ_TIM, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_TIM3, 0));
 8006132:	f7ff fdc3 	bl	8005cbc <__NVIC_GetPriorityGrouping>
 8006136:	4603      	mov	r3, r0
 8006138:	2200      	movs	r2, #0
 800613a:	2101      	movs	r1, #1
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff fe53 	bl	8005de8 <NVIC_EncodePriority>
 8006142:	4603      	mov	r3, r0
 8006144:	4619      	mov	r1, r3
 8006146:	201d      	movs	r0, #29
 8006148:	f7ff fe24 	bl	8005d94 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PS_IRQN_DAQ_TIM);
 800614c:	201d      	movs	r0, #29
 800614e:	f7ff fdc3 	bl	8005cd8 <__NVIC_EnableIRQ>

#if defined(PS_ADC_MODE_ADC1) || defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
    NVIC_SetPriority(PS_IRQN_ADC12, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_ADC, 0));
 8006152:	f7ff fdb3 	bl	8005cbc <__NVIC_GetPriorityGrouping>
 8006156:	4603      	mov	r3, r0
 8006158:	2200      	movs	r2, #0
 800615a:	2105      	movs	r1, #5
 800615c:	4618      	mov	r0, r3
 800615e:	f7ff fe43 	bl	8005de8 <NVIC_EncodePriority>
 8006162:	4603      	mov	r3, r0
 8006164:	4619      	mov	r1, r3
 8006166:	2012      	movs	r0, #18
 8006168:	f7ff fe14 	bl	8005d94 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PS_IRQN_ADC12);
 800616c:	2012      	movs	r0, #18
 800616e:	f7ff fdb3 	bl	8005cd8 <__NVIC_EnableIRQ>
#endif

#if defined(PS_ADC_MODE_ADC1234)
    NVIC_SetPriority(PS_IRQN_ADC3, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_ADC, 0));
 8006172:	f7ff fda3 	bl	8005cbc <__NVIC_GetPriorityGrouping>
 8006176:	4603      	mov	r3, r0
 8006178:	2200      	movs	r2, #0
 800617a:	2105      	movs	r1, #5
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff fe33 	bl	8005de8 <NVIC_EncodePriority>
 8006182:	4603      	mov	r3, r0
 8006184:	4619      	mov	r1, r3
 8006186:	202f      	movs	r0, #47	; 0x2f
 8006188:	f7ff fe04 	bl	8005d94 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PS_IRQN_ADC3);
 800618c:	202f      	movs	r0, #47	; 0x2f
 800618e:	f7ff fda3 	bl	8005cd8 <__NVIC_EnableIRQ>

    NVIC_SetPriority(PS_IRQN_ADC4, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_ADC, 0));
 8006192:	f7ff fd93 	bl	8005cbc <__NVIC_GetPriorityGrouping>
 8006196:	4603      	mov	r3, r0
 8006198:	2200      	movs	r2, #0
 800619a:	2105      	movs	r1, #5
 800619c:	4618      	mov	r0, r3
 800619e:	f7ff fe23 	bl	8005de8 <NVIC_EncodePriority>
 80061a2:	4603      	mov	r3, r0
 80061a4:	4619      	mov	r1, r3
 80061a6:	203d      	movs	r0, #61	; 0x3d
 80061a8:	f7ff fdf4 	bl	8005d94 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PS_IRQN_ADC4);
 80061ac:	203d      	movs	r0, #61	; 0x3d
 80061ae:	f7ff fd93 	bl	8005cd8 <__NVIC_EnableIRQ>
#endif

    NVIC_DisableIRQ(PS_LA_IRQ_EXTI1);
 80061b2:	2006      	movs	r0, #6
 80061b4:	f7ff fdae 	bl	8005d14 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(PS_LA_IRQ_EXTI2);
 80061b8:	2007      	movs	r0, #7
 80061ba:	f7ff fdab 	bl	8005d14 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(PS_LA_IRQ_EXTI3);
 80061be:	2008      	movs	r0, #8
 80061c0:	f7ff fda8 	bl	8005d14 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(PS_LA_IRQ_EXTI4);
 80061c4:	2009      	movs	r0, #9
 80061c6:	f7ff fda5 	bl	8005d14 <__NVIC_DisableIRQ>

    adc_init();
 80061ca:	f003 fadb 	bl	8009784 <adc_init>
}
 80061ce:	bf00      	nop
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <daq_settings_save>:

void daq_settings_save(daq_settings_t* src1, trig_settings_t* src2, daq_settings_t* dst1, trig_settings_t* dst2)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	607a      	str	r2, [r7, #4]
 80061e2:	603b      	str	r3, [r7, #0]
    dst1->fs = src1->fs;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	605a      	str	r2, [r3, #4]
    dst1->mem = src1->mem;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	891a      	ldrh	r2, [r3, #8]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	811a      	strh	r2, [r3, #8]
    dst1->bits = src1->bits;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	7a9a      	ldrb	r2, [r3, #10]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	729a      	strb	r2, [r3, #10]

    dst1->ch1_en = src1->ch1_en;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	781a      	ldrb	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	701a      	strb	r2, [r3, #0]
    dst1->ch2_en = src1->ch2_en;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	785a      	ldrb	r2, [r3, #1]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	705a      	strb	r2, [r3, #1]
    dst1->ch3_en = src1->ch3_en;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	789a      	ldrb	r2, [r3, #2]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	709a      	strb	r2, [r3, #2]
    dst1->ch4_en = src1->ch4_en;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	78da      	ldrb	r2, [r3, #3]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	70da      	strb	r2, [r3, #3]

    dst2->val_percent = src2->val_percent;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	611a      	str	r2, [r3, #16]
    dst2->val = src2->val;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	60da      	str	r2, [r3, #12]
    dst2->ch = src2->ch;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	609a      	str	r2, [r3, #8]
    dst2->edge = src2->edge;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	795a      	ldrb	r2, [r3, #5]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	715a      	strb	r2, [r3, #5]
    dst2->mode = src2->mode;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	791a      	ldrb	r2, [r3, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	711a      	strb	r2, [r3, #4]
    dst2->pretrigger = src2->pretrigger;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	601a      	str	r2, [r3, #0]
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <daq_settings_init>:

void daq_settings_init(daq_data_t* self)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
    // SCOPE
    self->save_s.fs = 100000; //TODO defaults from CFG macros
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006266:	330c      	adds	r3, #12
 8006268:	4a50      	ldr	r2, [pc, #320]	; (80063ac <daq_settings_init+0x154>)
 800626a:	601a      	str	r2, [r3, #0]
    self->save_s.mem = 500;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006272:	3310      	adds	r3, #16
 8006274:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006278:	801a      	strh	r2, [r3, #0]
    self->save_s.bits = B12;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006280:	3312      	adds	r3, #18
 8006282:	220c      	movs	r2, #12
 8006284:	701a      	strb	r2, [r3, #0]

    self->save_s.ch1_en = 1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800628c:	3308      	adds	r3, #8
 800628e:	2201      	movs	r2, #1
 8006290:	701a      	strb	r2, [r3, #0]
    self->save_s.ch2_en = 1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006298:	3309      	adds	r3, #9
 800629a:	2201      	movs	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
    self->save_s.ch3_en = 0;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80062a4:	330a      	adds	r3, #10
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
    self->save_s.ch4_en = 0;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80062b0:	330b      	adds	r3, #11
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]

    self->trig.save_s.val_percent = 50;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80062bc:	3360      	adds	r3, #96	; 0x60
 80062be:	2232      	movs	r2, #50	; 0x32
 80062c0:	601a      	str	r2, [r3, #0]
    self->trig.save_s.val = 2047;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80062c8:	335c      	adds	r3, #92	; 0x5c
 80062ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80062ce:	601a      	str	r2, [r3, #0]
    self->trig.save_s.ch = 1;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80062d6:	3358      	adds	r3, #88	; 0x58
 80062d8:	2201      	movs	r2, #1
 80062da:	601a      	str	r2, [r3, #0]
    self->trig.save_s.edge = RISING;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80062e2:	3355      	adds	r3, #85	; 0x55
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
    self->trig.save_s.mode = DISABLED;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80062ee:	3354      	adds	r3, #84	; 0x54
 80062f0:	2203      	movs	r2, #3
 80062f2:	701a      	strb	r2, [r3, #0]
    self->trig.save_s.pretrigger = 50;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80062fa:	3350      	adds	r3, #80	; 0x50
 80062fc:	2232      	movs	r2, #50	; 0x32
 80062fe:	601a      	str	r2, [r3, #0]

    // LA
    self->save_l.fs = 100000;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006306:	3318      	adds	r3, #24
 8006308:	4a28      	ldr	r2, [pc, #160]	; (80063ac <daq_settings_init+0x154>)
 800630a:	601a      	str	r2, [r3, #0]
    self->save_l.mem = 1000;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006312:	331c      	adds	r3, #28
 8006314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006318:	801a      	strh	r2, [r3, #0]
    self->save_l.bits = B1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006320:	331e      	adds	r3, #30
 8006322:	2201      	movs	r2, #1
 8006324:	701a      	strb	r2, [r3, #0]

    self->save_l.ch1_en = 1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800632c:	3314      	adds	r3, #20
 800632e:	2201      	movs	r2, #1
 8006330:	701a      	strb	r2, [r3, #0]
    self->save_l.ch2_en = 1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006338:	3315      	adds	r3, #21
 800633a:	2201      	movs	r2, #1
 800633c:	701a      	strb	r2, [r3, #0]
    self->save_l.ch3_en = 1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006344:	3316      	adds	r3, #22
 8006346:	2201      	movs	r2, #1
 8006348:	701a      	strb	r2, [r3, #0]
    self->save_l.ch4_en = 1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006350:	3317      	adds	r3, #23
 8006352:	2201      	movs	r2, #1
 8006354:	701a      	strb	r2, [r3, #0]

    self->trig.save_s.val_percent = 0;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800635c:	3360      	adds	r3, #96	; 0x60
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
    self->trig.save_l.val = 0;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006368:	3370      	adds	r3, #112	; 0x70
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
    self->trig.save_l.ch = 1;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006374:	336c      	adds	r3, #108	; 0x6c
 8006376:	2201      	movs	r2, #1
 8006378:	601a      	str	r2, [r3, #0]
    self->trig.save_l.edge = RISING;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006380:	3369      	adds	r3, #105	; 0x69
 8006382:	2200      	movs	r2, #0
 8006384:	701a      	strb	r2, [r3, #0]
    self->trig.save_l.mode = DISABLED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800638c:	3368      	adds	r3, #104	; 0x68
 800638e:	2203      	movs	r2, #3
 8006390:	701a      	strb	r2, [r3, #0]
    self->trig.save_l.pretrigger = 50;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006398:	3364      	adds	r3, #100	; 0x64
 800639a:	2232      	movs	r2, #50	; 0x32
 800639c:	601a      	str	r2, [r3, #0]
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	47c35000 	.word	0x47c35000

080063b0 <daq_mem_set>:

int daq_mem_set(daq_data_t* self, uint16_t mem_per_ch)
{
 80063b0:	b5b0      	push	{r4, r5, r7, lr}
 80063b2:	b090      	sub	sp, #64	; 0x40
 80063b4:	af06      	add	r7, sp, #24
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	807b      	strh	r3, [r7, #2]
    daq_enable(self, 0);
 80063bc:	2100      	movs	r1, #0
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fd7c 	bl	8006ebc <daq_enable>
    daq_reset(self);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fd0b 	bl	8006de0 <daq_reset>

    self->buff_out.reserve = 0;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	871a      	strh	r2, [r3, #56]	; 0x38
    daq_clear_buff(&self->buff1);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fa83 	bl	80068de <daq_clear_buff>
    daq_clear_buff(&self->buff2);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	330c      	adds	r3, #12
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fa7e 	bl	80068de <daq_clear_buff>
    daq_clear_buff(&self->buff3);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3318      	adds	r3, #24
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fa79 	bl	80068de <daq_clear_buff>
    daq_clear_buff(&self->buff4);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3324      	adds	r3, #36	; 0x24
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fa74 	bl	80068de <daq_clear_buff>
    daq_clear_buff(&self->buff_out);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3330      	adds	r3, #48	; 0x30
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fa6f 	bl	80068de <daq_clear_buff>
    self->buff_raw_ptr = 0;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006406:	33fa      	adds	r3, #250	; 0xfa
 8006408:	2200      	movs	r2, #0
 800640a:	801a      	strh	r2, [r3, #0]
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	333c      	adds	r3, #60	; 0x3c
 8006410:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f00b fe18 	bl	801204c <memset>

    int max_len = PS_DAQ_MAX_MEM;
 800641c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
    int out_per_ch = mem_per_ch;
 8006422:	887b      	ldrh	r3, [r7, #2]
 8006424:	623b      	str	r3, [r7, #32]
    if (self->set.bits == B12)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800642c:	3306      	adds	r3, #6
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b0c      	cmp	r3, #12
 8006432:	d107      	bne.n	8006444 <daq_mem_set+0x94>
    {
        max_len /= 2;
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	0fda      	lsrs	r2, r3, #31
 8006438:	4413      	add	r3, r2
 800643a:	105b      	asrs	r3, r3, #1
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
        out_per_ch *= 2;
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	623b      	str	r3, [r7, #32]
    }

    if (self->mode != LA)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800644a:	3334      	adds	r3, #52	; 0x34
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b02      	cmp	r3, #2
 8006450:	f000 80f0 	beq.w	8006634 <daq_mem_set+0x284>
    {
        uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800645a:	3334      	adds	r3, #52	; 0x34
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b01      	cmp	r3, #1
 8006460:	bf0c      	ite	eq
 8006462:	2301      	moveq	r3, #1
 8006464:	2300      	movne	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	77fb      	strb	r3, [r7, #31]
        self->buff_out.chans = total - is_vcc;
        self->buff_out.len = out_per_ch * (total - is_vcc);

#elif defined(PS_ADC_MODE_ADC1234)

        int len1 = self->set.ch1_en + is_vcc;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006470:	33fc      	adds	r3, #252	; 0xfc
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	7ffb      	ldrb	r3, [r7, #31]
 8006478:	4413      	add	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
        int len2 = self->set.ch3_en;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006482:	33fe      	adds	r3, #254	; 0xfe
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	617b      	str	r3, [r7, #20]
        int len3 = self->set.ch3_en;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800648e:	33fe      	adds	r3, #254	; 0xfe
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	613b      	str	r3, [r7, #16]
        int len4 = self->set.ch3_en;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800649a:	33fe      	adds	r3, #254	; 0xfe
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	60fb      	str	r3, [r7, #12]
        int total = len1 + len2 + len3 + len4;
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	441a      	add	r2, r3
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4413      	add	r3, r2
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	60bb      	str	r3, [r7, #8]
            len3 = 1;
            len4 = 0;
            total = 2; // TODO size??
        }
#endif
        if (mem_per_ch < 0 || (mem_per_ch * total) + (mem_per_ch * (total - is_vcc)) > max_len)
 80064b0:	7ffb      	ldrb	r3, [r7, #31]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	1ad2      	subs	r2, r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	4413      	add	r3, r2
 80064ba:	887a      	ldrh	r2, [r7, #2]
 80064bc:	fb02 f303 	mul.w	r3, r2, r3
 80064c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c2:	429a      	cmp	r2, r3
 80064c4:	da02      	bge.n	80064cc <daq_mem_set+0x11c>
            return -2;
 80064c6:	f06f 0301 	mvn.w	r3, #1
 80064ca:	e0fd      	b.n	80066c8 <daq_mem_set+0x318>

        if (len1 > 0)
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	dd1d      	ble.n	800650e <daq_mem_set+0x15e>
            daq_malloc(self, &self->buff1, mem_per_ch * len1, PS_MEM_RESERVE, len1, PS_ADC_ADDR(ADC1), PS_DMA_CH_ADC1, PS_DMA_ADC1, self->set.bits);
 80064d2:	687c      	ldr	r4, [r7, #4]
 80064d4:	887b      	ldrh	r3, [r7, #2]
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	fb02 f503 	mul.w	r5, r2, r3
 80064dc:	2100      	movs	r1, #0
 80064de:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80064e2:	f7ff fcb5 	bl	8005e50 <LL_ADC_DMA_GetRegAddr>
 80064e6:	4602      	mov	r2, r0
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80064ee:	3306      	adds	r3, #6
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	9304      	str	r3, [sp, #16]
 80064f4:	4b76      	ldr	r3, [pc, #472]	; (80066d0 <daq_mem_set+0x320>)
 80064f6:	9303      	str	r3, [sp, #12]
 80064f8:	2301      	movs	r3, #1
 80064fa:	9302      	str	r3, [sp, #8]
 80064fc:	9201      	str	r2, [sp, #4]
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	230a      	movs	r3, #10
 8006504:	462a      	mov	r2, r5
 8006506:	4621      	mov	r1, r4
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f8ed 	bl	80066e8 <daq_malloc>
        if (len2 > 0)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	dd1e      	ble.n	8006552 <daq_mem_set+0x1a2>
            daq_malloc(self, &self->buff2, mem_per_ch * len2, PS_MEM_RESERVE, len2, PS_ADC_ADDR(ADC2), PS_DMA_CH_ADC2, PS_DMA_ADC2, self->set.bits);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f103 040c 	add.w	r4, r3, #12
 800651a:	887b      	ldrh	r3, [r7, #2]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	fb02 f503 	mul.w	r5, r2, r3
 8006522:	2100      	movs	r1, #0
 8006524:	486b      	ldr	r0, [pc, #428]	; (80066d4 <daq_mem_set+0x324>)
 8006526:	f7ff fc93 	bl	8005e50 <LL_ADC_DMA_GetRegAddr>
 800652a:	4602      	mov	r2, r0
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006532:	3306      	adds	r3, #6
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	9304      	str	r3, [sp, #16]
 8006538:	4b67      	ldr	r3, [pc, #412]	; (80066d8 <daq_mem_set+0x328>)
 800653a:	9303      	str	r3, [sp, #12]
 800653c:	2301      	movs	r3, #1
 800653e:	9302      	str	r3, [sp, #8]
 8006540:	9201      	str	r2, [sp, #4]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	230a      	movs	r3, #10
 8006548:	462a      	mov	r2, r5
 800654a:	4621      	mov	r1, r4
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f8cb 	bl	80066e8 <daq_malloc>
        if (len3 > 0)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	dd1e      	ble.n	8006596 <daq_mem_set+0x1e6>
            daq_malloc(self, &self->buff3, mem_per_ch * len3, PS_MEM_RESERVE, len3, PS_ADC_ADDR(ADC3), PS_DMA_CH_ADC3, PS_DMA_ADC3, self->set.bits);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f103 0418 	add.w	r4, r3, #24
 800655e:	887b      	ldrh	r3, [r7, #2]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	fb02 f503 	mul.w	r5, r2, r3
 8006566:	2100      	movs	r1, #0
 8006568:	485c      	ldr	r0, [pc, #368]	; (80066dc <daq_mem_set+0x32c>)
 800656a:	f7ff fc71 	bl	8005e50 <LL_ADC_DMA_GetRegAddr>
 800656e:	4602      	mov	r2, r0
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006576:	3306      	adds	r3, #6
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	9304      	str	r3, [sp, #16]
 800657c:	4b56      	ldr	r3, [pc, #344]	; (80066d8 <daq_mem_set+0x328>)
 800657e:	9303      	str	r3, [sp, #12]
 8006580:	2305      	movs	r3, #5
 8006582:	9302      	str	r3, [sp, #8]
 8006584:	9201      	str	r2, [sp, #4]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	230a      	movs	r3, #10
 800658c:	462a      	mov	r2, r5
 800658e:	4621      	mov	r1, r4
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f8a9 	bl	80066e8 <daq_malloc>
        if (len4 > 0)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	dd1e      	ble.n	80065da <daq_mem_set+0x22a>
            daq_malloc(self, &self->buff4, mem_per_ch * len4, PS_MEM_RESERVE, len4, PS_ADC_ADDR(ADC4), PS_DMA_CH_ADC4, PS_DMA_ADC4, self->set.bits);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80065a2:	887b      	ldrh	r3, [r7, #2]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	fb02 f503 	mul.w	r5, r2, r3
 80065aa:	2100      	movs	r1, #0
 80065ac:	484c      	ldr	r0, [pc, #304]	; (80066e0 <daq_mem_set+0x330>)
 80065ae:	f7ff fc4f 	bl	8005e50 <LL_ADC_DMA_GetRegAddr>
 80065b2:	4602      	mov	r2, r0
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80065ba:	3306      	adds	r3, #6
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	4b45      	ldr	r3, [pc, #276]	; (80066d8 <daq_mem_set+0x328>)
 80065c2:	9303      	str	r3, [sp, #12]
 80065c4:	2302      	movs	r3, #2
 80065c6:	9302      	str	r3, [sp, #8]
 80065c8:	9201      	str	r2, [sp, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	230a      	movs	r3, #10
 80065d0:	462a      	mov	r2, r5
 80065d2:	4621      	mov	r1, r4
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f887 	bl	80066e8 <daq_malloc>

        self->buff_out.chans = total - is_vcc;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	b29a      	uxth	r2, r3
 80065de:	7ffb      	ldrb	r3, [r7, #31]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	869a      	strh	r2, [r3, #52]	; 0x34
        self->buff_out.len = out_per_ch * (total - is_vcc);
 80065ea:	7ffb      	ldrb	r3, [r7, #31]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	fb12 f303 	smulbb	r3, r2, r3
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	86da      	strh	r2, [r3, #54]	; 0x36

#endif

        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800660c:	33fa      	adds	r3, #250	; 0xfa
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	441a      	add	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
        self->buff_raw_ptr += self->buff_out.len;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800661c:	33fa      	adds	r3, #250	; 0xfa
 800661e:	881a      	ldrh	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006624:	4413      	add	r3, r2
 8006626:	b29a      	uxth	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800662e:	33fa      	adds	r3, #250	; 0xfa
 8006630:	801a      	strh	r2, [r3, #0]
 8006632:	e03b      	b.n	80066ac <daq_mem_set+0x2fc>
    }
    else // mode == LA
    {
        if (mem_per_ch < 0 || (mem_per_ch * 2) > PS_DAQ_MAX_MEM)
 8006634:	887b      	ldrh	r3, [r7, #2]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	f24c 3250 	movw	r2, #50000	; 0xc350
 800663c:	4293      	cmp	r3, r2
 800663e:	dd02      	ble.n	8006646 <daq_mem_set+0x296>
            return -2;
 8006640:	f06f 0301 	mvn.w	r3, #1
 8006644:	e040      	b.n	80066c8 <daq_mem_set+0x318>

        daq_malloc(self, &self->buff1, mem_per_ch, PS_MEM_RESERVE, 4, (uint32_t)&PS_GPIO_LA_PORT->IDR, PS_DMA_CH_LA, PS_DMA_LA, self->set.bits);
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	887a      	ldrh	r2, [r7, #2]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006650:	3306      	adds	r3, #6
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	9304      	str	r3, [sp, #16]
 8006656:	4b1e      	ldr	r3, [pc, #120]	; (80066d0 <daq_mem_set+0x320>)
 8006658:	9303      	str	r3, [sp, #12]
 800665a:	2306      	movs	r3, #6
 800665c:	9302      	str	r3, [sp, #8]
 800665e:	4b21      	ldr	r3, [pc, #132]	; (80066e4 <daq_mem_set+0x334>)
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	2304      	movs	r3, #4
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	230a      	movs	r3, #10
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f83d 	bl	80066e8 <daq_malloc>

        self->buff_out.chans = 4;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2204      	movs	r2, #4
 8006672:	869a      	strh	r2, [r3, #52]	; 0x34
        self->buff_out.len = mem_per_ch;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	887a      	ldrh	r2, [r7, #2]
 8006678:	86da      	strh	r2, [r3, #54]	; 0x36
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006686:	33fa      	adds	r3, #250	; 0xfa
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	441a      	add	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	631a      	str	r2, [r3, #48]	; 0x30
        self->buff_raw_ptr += self->buff_out.len;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006696:	33fa      	adds	r3, #250	; 0xfa
 8006698:	881a      	ldrh	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669e:	4413      	add	r3, r2
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80066a8:	33fa      	adds	r3, #250	; 0xfa
 80066aa:	801a      	strh	r2, [r3, #0]
    }

    self->set.mem = mem_per_ch;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80066b2:	3304      	adds	r3, #4
 80066b4:	887a      	ldrh	r2, [r7, #2]
 80066b6:	801a      	strh	r2, [r3, #0]

    daq_trig_update(self);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f001 feab 	bl	8008414 <daq_trig_update>
    daq_enable(self, 1);
 80066be:	2101      	movs	r1, #1
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fbfb 	bl	8006ebc <daq_enable>
    return 0;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3728      	adds	r7, #40	; 0x28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bdb0      	pop	{r4, r5, r7, pc}
 80066d0:	40020000 	.word	0x40020000
 80066d4:	50000100 	.word	0x50000100
 80066d8:	40020400 	.word	0x40020400
 80066dc:	50000400 	.word	0x50000400
 80066e0:	50000500 	.word	0x50000500
 80066e4:	48000810 	.word	0x48000810

080066e8 <daq_malloc>:

static void daq_malloc(daq_data_t* self, daq_buff_t* buff, int mem, int reserve, int chans, uint32_t src,
                       uint32_t dma_ch, DMA_TypeDef* dma, enum daq_bits bits)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b090      	sub	sp, #64	; 0x40
 80066ec:	af04      	add	r7, sp, #16
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
    if (bits == B12)
 80066f6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80066fa:	2b0c      	cmp	r3, #12
 80066fc:	d154      	bne.n	80067a8 <daq_malloc+0xc0>
    {
        mem += reserve * chans;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	4413      	add	r3, r2
 800670a:	607b      	str	r3, [r7, #4]
        buff->reserve = reserve * chans;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	b29a      	uxth	r2, r3
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	b29b      	uxth	r3, r3
 8006714:	fb12 f303 	smulbb	r3, r2, r3
 8006718:	b29a      	uxth	r2, r3
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	811a      	strh	r2, [r3, #8]

        size_t ln = mem * sizeof(uint16_t);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	61fb      	str	r3, [r7, #28]
        buff->data = (uint16_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006730:	33fa      	adds	r3, #250	; 0xfa
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	441a      	add	r2, r3
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	601a      	str	r2, [r3, #0]
        self->buff_raw_ptr += mem * 2;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006740:	33fa      	adds	r3, #250	; 0xfa
 8006742:	881a      	ldrh	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	b29b      	uxth	r3, r3
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	b29b      	uxth	r3, r3
 800674c:	4413      	add	r3, r2
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006756:	33fa      	adds	r3, #250	; 0xfa
 8006758:	801a      	strh	r2, [r3, #0]
        buff->chans = chans;
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	b29a      	uxth	r2, r3
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	809a      	strh	r2, [r3, #4]
        buff->len = mem;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	b29a      	uxth	r2, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	80da      	strh	r2, [r3, #6]
        memset(buff->data, 0, ln);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	2100      	movs	r1, #0
 8006772:	4618      	mov	r0, r3
 8006774:	f00b fc6a 	bl	801204c <memset>
        uint32_t dma_p_sz = LL_DMA_PDATAALIGN_HALFWORD;
 8006778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800677c:	61bb      	str	r3, [r7, #24]
        uint32_t dma_m_sz = LL_DMA_MDATAALIGN_HALFWORD;
 800677e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006782:	617b      	str	r3, [r7, #20]
        {
            dma_p_sz = LL_DMA_PDATAALIGN_WORD;
            dma_m_sz = LL_DMA_MDATAALIGN_WORD;
        }
#endif
        dma_set(src, dma, dma_ch, (uint32_t)((uint16_t*)((uint8_t*)buff->data)), mem,
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4619      	mov	r1, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	9203      	str	r2, [sp, #12]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	9202      	str	r2, [sp, #8]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	9201      	str	r2, [sp, #4]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	460b      	mov	r3, r1
 800679c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800679e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80067a2:	f002 ffc5 	bl	8009730 <dma_set>
        buff->len = mem;
        memset(buff->data, 0, ln);
        dma_set(src, dma, PS_DMA_CH_LA, (uint32_t)((uint8_t*)buff->data), mem,
                LL_DMA_PDATAALIGN_BYTE, LL_DMA_MDATAALIGN_BYTE, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
    }
}
 80067a6:	e096      	b.n	80068d6 <daq_malloc+0x1ee>
    else if (bits == B8)
 80067a8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d14f      	bne.n	8006850 <daq_malloc+0x168>
        mem += reserve * chans;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067b4:	fb02 f303 	mul.w	r3, r2, r3
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	4413      	add	r3, r2
 80067bc:	607b      	str	r3, [r7, #4]
        buff->reserve = reserve * chans;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	fb12 f303 	smulbb	r3, r2, r3
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	811a      	strh	r2, [r3, #8]
        size_t ln = mem * sizeof(uint8_t);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80067e0:	33fa      	adds	r3, #250	; 0xfa
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	441a      	add	r2, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	601a      	str	r2, [r3, #0]
        self->buff_raw_ptr += mem;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80067f0:	33fa      	adds	r3, #250	; 0xfa
 80067f2:	881a      	ldrh	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	4413      	add	r3, r2
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006802:	33fa      	adds	r3, #250	; 0xfa
 8006804:	801a      	strh	r2, [r3, #0]
        buff->chans = chans;
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	b29a      	uxth	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	809a      	strh	r2, [r3, #4]
        buff->len = mem;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	b29a      	uxth	r2, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	80da      	strh	r2, [r3, #6]
        memset(buff->data, 0, ln);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800681c:	2100      	movs	r1, #0
 800681e:	4618      	mov	r0, r3
 8006820:	f00b fc14 	bl	801204c <memset>
        uint32_t dma_p_sz = LL_DMA_PDATAALIGN_BYTE;
 8006824:	2300      	movs	r3, #0
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t dma_m_sz = LL_DMA_MDATAALIGN_BYTE;
 8006828:	2300      	movs	r3, #0
 800682a:	623b      	str	r3, [r7, #32]
        dma_set(src, dma, dma_ch, (uint32_t)((uint8_t*)buff->data), mem,
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4619      	mov	r1, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	9203      	str	r2, [sp, #12]
 8006838:	6a3a      	ldr	r2, [r7, #32]
 800683a:	9202      	str	r2, [sp, #8]
 800683c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683e:	9201      	str	r2, [sp, #4]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	460b      	mov	r3, r1
 8006844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006846:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006848:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800684a:	f002 ff71 	bl	8009730 <dma_set>
}
 800684e:	e042      	b.n	80068d6 <daq_malloc+0x1ee>
        mem += reserve * 1;
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	4413      	add	r3, r2
 8006856:	607b      	str	r3, [r7, #4]
        buff->reserve = reserve * 1;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	b29a      	uxth	r2, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	811a      	strh	r2, [r3, #8]
        size_t ln = mem * sizeof(uint8_t);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006870:	33fa      	adds	r3, #250	; 0xfa
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	441a      	add	r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	601a      	str	r2, [r3, #0]
        self->buff_raw_ptr += mem;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006880:	33fa      	adds	r3, #250	; 0xfa
 8006882:	881a      	ldrh	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	b29b      	uxth	r3, r3
 8006888:	4413      	add	r3, r2
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006892:	33fa      	adds	r3, #250	; 0xfa
 8006894:	801a      	strh	r2, [r3, #0]
        buff->chans = chans;
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	b29a      	uxth	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	809a      	strh	r2, [r3, #4]
        buff->len = mem;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	80da      	strh	r2, [r3, #6]
        memset(buff->data, 0, ln);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f00b fbcc 	bl	801204c <memset>
        dma_set(src, dma, PS_DMA_CH_LA, (uint32_t)((uint8_t*)buff->data), mem,
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4619      	mov	r1, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	9203      	str	r2, [sp, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	9202      	str	r2, [sp, #8]
 80068c4:	2200      	movs	r2, #0
 80068c6:	9201      	str	r2, [sp, #4]
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	460b      	mov	r3, r1
 80068cc:	2206      	movs	r2, #6
 80068ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80068d2:	f002 ff2d 	bl	8009730 <dma_set>
}
 80068d6:	bf00      	nop
 80068d8:	3730      	adds	r7, #48	; 0x30
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <daq_clear_buff>:

static void daq_clear_buff(daq_buff_t* buff)
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
    buff->data = NULL;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]
    buff->chans = 0;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	809a      	strh	r2, [r3, #4]
    buff->len = 0;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	80da      	strh	r2, [r3, #6]
    buff->reserve = 0;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	811a      	strh	r2, [r3, #8]
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
	...

0800690c <daq_bit_set>:

int daq_bit_set(daq_data_t* self, enum daq_bits bits)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
    if (bits != B12 && bits != B8 && bits != B1)
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	2b0c      	cmp	r3, #12
 800691c:	d008      	beq.n	8006930 <daq_bit_set+0x24>
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	2b08      	cmp	r3, #8
 8006922:	d005      	beq.n	8006930 <daq_bit_set+0x24>
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d002      	beq.n	8006930 <daq_bit_set+0x24>
        return -1;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	e05e      	b.n	80069ee <daq_bit_set+0xe2>

    self->set.bits = bits;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006936:	3306      	adds	r3, #6
 8006938:	78fa      	ldrb	r2, [r7, #3]
 800693a:	701a      	strb	r2, [r3, #0]
    if (bits == B12)
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	2b0c      	cmp	r3, #12
 8006940:	d106      	bne.n	8006950 <daq_bit_set+0x44>
        self->adc_max_val = 4095;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006948:	332c      	adds	r3, #44	; 0x2c
 800694a:	4a2b      	ldr	r2, [pc, #172]	; (80069f8 <daq_bit_set+0xec>)
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e010      	b.n	8006972 <daq_bit_set+0x66>
    else if (bits == B8)
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	2b08      	cmp	r3, #8
 8006954:	d106      	bne.n	8006964 <daq_bit_set+0x58>
        self->adc_max_val = 255;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800695c:	332c      	adds	r3, #44	; 0x2c
 800695e:	4a27      	ldr	r2, [pc, #156]	; (80069fc <daq_bit_set+0xf0>)
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	e006      	b.n	8006972 <daq_bit_set+0x66>
    else
        self->adc_max_val = 1;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800696a:	332c      	adds	r3, #44	; 0x2c
 800696c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006970:	601a      	str	r2, [r3, #0]

    if (self->mode == SCOPE || self->mode == VM)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006978:	3334      	adds	r3, #52	; 0x34
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d006      	beq.n	800698e <daq_bit_set+0x82>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006986:	3334      	adds	r3, #52	; 0x34
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d12e      	bne.n	80069ec <daq_bit_set+0xe0>
    {
        daq_enable(self, 0);
 800698e:	2100      	movs	r1, #0
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fa93 	bl	8006ebc <daq_enable>
        daq_reset(self);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fa22 	bl	8006de0 <daq_reset>
#ifndef PS_ADC_BIT8
            return -2;
#endif
        }

        uint32_t bits_raw = LL_ADC_RESOLUTION_12B;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
#ifdef PS_ADC_BIT8
        if (bits == B8)
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d101      	bne.n	80069aa <daq_bit_set+0x9e>
            bits_raw = LL_ADC_RESOLUTION_8B;
 80069a6:	2310      	movs	r3, #16
 80069a8:	60fb      	str	r3, [r7, #12]
#endif

#if defined(PS_ADC_MODE_ADC1) || defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
        adc_set_res(ADC1, bits_raw);
 80069aa:	68f9      	ldr	r1, [r7, #12]
 80069ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80069b0:	f003 f81f 	bl	80099f2 <adc_set_res>
#endif

#if defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
        adc_set_res(ADC2, bits_raw);
 80069b4:	68f9      	ldr	r1, [r7, #12]
 80069b6:	4812      	ldr	r0, [pc, #72]	; (8006a00 <daq_bit_set+0xf4>)
 80069b8:	f003 f81b 	bl	80099f2 <adc_set_res>
#endif

#if defined(PS_ADC_MODE_ADC1234)
        adc_set_res(ADC3, bits_raw);
 80069bc:	68f9      	ldr	r1, [r7, #12]
 80069be:	4811      	ldr	r0, [pc, #68]	; (8006a04 <daq_bit_set+0xf8>)
 80069c0:	f003 f817 	bl	80099f2 <adc_set_res>
        adc_set_res(ADC4, bits_raw);
 80069c4:	68f9      	ldr	r1, [r7, #12]
 80069c6:	4810      	ldr	r0, [pc, #64]	; (8006a08 <daq_bit_set+0xfc>)
 80069c8:	f003 f813 	bl	80099f2 <adc_set_res>
#endif
        int ret = daq_mem_set(self, self->set.mem);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80069d2:	3304      	adds	r3, #4
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff fce9 	bl	80063b0 <daq_mem_set>
 80069de:	60b8      	str	r0, [r7, #8]

        daq_enable(self, 1);
 80069e0:	2101      	movs	r1, #1
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa6a 	bl	8006ebc <daq_enable>

        return ret;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	e000      	b.n	80069ee <daq_bit_set+0xe2>
    }
    return 0;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	457ff000 	.word	0x457ff000
 80069fc:	437f0000 	.word	0x437f0000
 8006a00:	50000100 	.word	0x50000100
 8006a04:	50000400 	.word	0x50000400
 8006a08:	50000500 	.word	0x50000500

08006a0c <daq_fs_set>:

int daq_fs_set(daq_data_t* self, float fs)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08a      	sub	sp, #40	; 0x28
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	ed87 0a00 	vstr	s0, [r7]
    uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006a1e:	3334      	adds	r3, #52	; 0x34
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	bf0c      	ite	eq
 8006a26:	2301      	moveq	r3, #1
 8006a28:	2300      	movne	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	77fb      	strb	r3, [r7, #31]
    float fs2 = fs;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	61bb      	str	r3, [r7, #24]
    if (channs == 1)
        fs2 /= 2.0;
#endif

#elif defined(PS_ADC_MODE_ADC1234)
    float scope_max_fs = (self->set.bits == B12 ? PS_DAQ_MAX_B12_FS : PS_DAQ_MAX_B8_FS) / (float)(self->set.ch1_en ? 1 + is_vcc : 1);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006a38:	3306      	adds	r3, #6
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b0c      	cmp	r3, #12
 8006a3e:	d102      	bne.n	8006a46 <daq_fs_set+0x3a>
 8006a40:	eddf 6a39 	vldr	s13, [pc, #228]	; 8006b28 <daq_fs_set+0x11c>
 8006a44:	e001      	b.n	8006a4a <daq_fs_set+0x3e>
 8006a46:	eddf 6a39 	vldr	s13, [pc, #228]	; 8006b2c <daq_fs_set+0x120>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006a50:	33fc      	adds	r3, #252	; 0xfc
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d006      	beq.n	8006a66 <daq_fs_set+0x5a>
 8006a58:	7ffb      	ldrb	r3, [r7, #31]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	ee07 3a90 	vmov	s15, r3
 8006a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a64:	e001      	b.n	8006a6a <daq_fs_set+0x5e>
 8006a66:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a6e:	ed87 7a05 	vstr	s14, [r7, #20]
        fs2 /= 4.0;
#endif

#endif

    if (fs2 <= 0 || fs2 > (self->mode == LA ? PS_LA_MAX_FS : scope_max_fs))
 8006a72:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a7e:	d912      	bls.n	8006aa6 <daq_fs_set+0x9a>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006a86:	3334      	adds	r3, #52	; 0x34
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d002      	beq.n	8006a94 <daq_fs_set+0x88>
 8006a8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a92:	e001      	b.n	8006a98 <daq_fs_set+0x8c>
 8006a94:	eddf 7a26 	vldr	s15, [pc, #152]	; 8006b30 <daq_fs_set+0x124>
 8006a98:	ed97 7a06 	vldr	s14, [r7, #24]
 8006a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa4:	d502      	bpl.n	8006aac <daq_fs_set+0xa0>
        return -1;
 8006aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aaa:	e038      	b.n	8006b1e <daq_fs_set+0x112>

    self->set.fs = fs;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	601a      	str	r2, [r3, #0]

    daq_enable(self, 0);
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f9ff 	bl	8006ebc <daq_enable>
    daq_reset(self);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f98e 	bl	8006de0 <daq_reset>

    int prescaler = 1;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	613b      	str	r3, [r7, #16]
    int reload = 1;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]
    self->set.fs = get_freq(&prescaler, &reload, PS_TIM_DAQ_MAX, PS_TIM_DAQ_FREQ, fs2);
 8006acc:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ad4:	ee17 3a90 	vmov	r3, s15
 8006ad8:	f107 010c 	add.w	r1, r7, #12
 8006adc:	f107 0010 	add.w	r0, r7, #16
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	4b14      	ldr	r3, [pc, #80]	; (8006b34 <daq_fs_set+0x128>)
 8006ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ae8:	f005 fc56 	bl	800c398 <get_freq>
 8006aec:	eef0 7a40 	vmov.f32	s15, s0
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006af6:	edc3 7a00 	vstr	s15, [r3]

    LL_TIM_SetPrescaler(PS_TIM_DAQ, prescaler);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	4619      	mov	r1, r3
 8006afe:	480e      	ldr	r0, [pc, #56]	; (8006b38 <daq_fs_set+0x12c>)
 8006b00:	f7ff fa50 	bl	8005fa4 <LL_TIM_SetPrescaler>
    LL_TIM_SetAutoReload(PS_TIM_DAQ, reload);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4619      	mov	r1, r3
 8006b08:	480b      	ldr	r0, [pc, #44]	; (8006b38 <daq_fs_set+0x12c>)
 8006b0a:	f7ff fa59 	bl	8005fc0 <LL_TIM_SetAutoReload>

    daq_trig_update(self);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 fc80 	bl	8008414 <daq_trig_update>
    daq_enable(self, 1);
 8006b14:	2101      	movs	r1, #1
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f9d0 	bl	8006ebc <daq_enable>
    return 0;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	48c35000 	.word	0x48c35000
 8006b2c:	48f42400 	.word	0x48f42400
 8006b30:	4a989680 	.word	0x4a989680
 8006b34:	044aa200 	.word	0x044aa200
 8006b38:	40000400 	.word	0x40000400
 8006b3c:	00000000 	.word	0x00000000

08006b40 <daq_ch_set>:

int daq_ch_set(daq_data_t* self, uint8_t ch1, uint8_t ch2, uint8_t ch3, uint8_t ch4, float fs)
{
 8006b40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b44:	b090      	sub	sp, #64	; 0x40
 8006b46:	af04      	add	r7, sp, #16
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	4608      	mov	r0, r1
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	461a      	mov	r2, r3
 8006b50:	ed87 0a01 	vstr	s0, [r7, #4]
 8006b54:	4603      	mov	r3, r0
 8006b56:	72fb      	strb	r3, [r7, #11]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	72bb      	strb	r3, [r7, #10]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	727b      	strb	r3, [r7, #9]
    self->set.ch1_en = ch1;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006b66:	33fc      	adds	r3, #252	; 0xfc
 8006b68:	7afa      	ldrb	r2, [r7, #11]
 8006b6a:	701a      	strb	r2, [r3, #0]
    self->set.ch2_en = ch2;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006b72:	33fd      	adds	r3, #253	; 0xfd
 8006b74:	7aba      	ldrb	r2, [r7, #10]
 8006b76:	701a      	strb	r2, [r3, #0]
    self->set.ch3_en = ch3;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006b7e:	33fe      	adds	r3, #254	; 0xfe
 8006b80:	7a7a      	ldrb	r2, [r7, #9]
 8006b82:	701a      	strb	r2, [r3, #0]
    self->set.ch4_en = ch4;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006b8a:	33ff      	adds	r3, #255	; 0xff
 8006b8c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8006b90:	701a      	strb	r2, [r3, #0]

    if (self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en == 0)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006b98:	33fc      	adds	r3, #252	; 0xfc
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006ba4:	33fd      	adds	r3, #253	; 0xfd
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	441a      	add	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006bb0:	33fe      	adds	r3, #254	; 0xfe
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	441a      	add	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006bbc:	33ff      	adds	r3, #255	; 0xff
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <daq_ch_set+0x8c>
        return -1;
 8006bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bca:	e0f3      	b.n	8006db4 <daq_ch_set+0x274>

    int reen = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (self->enabled)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006bd6:	3336      	adds	r3, #54	; 0x36
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d008      	beq.n	8006bf0 <daq_ch_set+0xb0>
    {
        reen = 1;
 8006bde:	2301      	movs	r3, #1
 8006be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        daq_enable(self, 0);
 8006be2:	2100      	movs	r1, #0
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f969 	bl	8006ebc <daq_enable>
        daq_reset(self);
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f8f8 	bl	8006de0 <daq_reset>
    }

    if (self->mode != LA)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006bf6:	3334      	adds	r3, #52	; 0x34
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	f000 80c8 	beq.w	8006d90 <daq_ch_set+0x250>
    {
        if (fs <= 0)
 8006c00:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c0c:	d802      	bhi.n	8006c14 <daq_ch_set+0xd4>
            return -1;
 8006c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c12:	e0cf      	b.n	8006db4 <daq_ch_set+0x274>

        uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006c1a:	3334      	adds	r3, #52	; 0x34
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	bf0c      	ite	eq
 8006c22:	2301      	moveq	r3, #1
 8006c24:	2300      	movne	r3, #0
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	77fb      	strb	r3, [r7, #31]
        uint32_t smpl_time = PS_ADC_SMPLT[0];
 8006c2a:	4b67      	ldr	r3, [pc, #412]	; (8006dc8 <daq_ch_set+0x288>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28
        float smpl_time_n = PS_ADC_SMPLT_N[0];
 8006c30:	4b66      	ldr	r3, [pc, #408]	; (8006dcc <daq_ch_set+0x28c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
        int channs = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61bb      	str	r3, [r7, #24]
#elif defined(PS_ADC_MODE_ADC12)
        int len1 = self->set.ch1_en + self->set.ch2_en + is_vcc;
        int len2 = self->set.ch3_en + self->set.ch4_en;
        channs = len1 > len2 ? len1 : len2;
#elif defined(PS_ADC_MODE_ADC1234)
        channs = is_vcc ? 2 : 1;
 8006c3a:	7ffb      	ldrb	r3, [r7, #31]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <daq_ch_set+0x104>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e000      	b.n	8006c46 <daq_ch_set+0x106>
 8006c44:	2301      	movs	r3, #1
 8006c46:	61bb      	str	r3, [r7, #24]
#endif

        float T = 1.0 / fs;
 8006c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8006c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c54:	edc7 7a05 	vstr	s15, [r7, #20]
        for (int i = 0; i < PS_ADC_SMPLT_CNT; i++) // find best sample time
 8006c58:	2300      	movs	r3, #0
 8006c5a:	623b      	str	r3, [r7, #32]
 8006c5c:	e05b      	b.n	8006d16 <daq_ch_set+0x1d6>
        {
            if (((float)channs * PS_ADC_1CH_SMPL_TM(PS_ADC_SMPLT_N[i] + 0.5, (self->set.bits == B12 ? PS_ADC_TCONV12 : PS_ADC_TCONV8))) < T)
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	ee07 3a90 	vmov	s15, r3
 8006c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c68:	ee17 0a90 	vmov	r0, s15
 8006c6c:	f7f9 fc84 	bl	8000578 <__aeabi_f2d>
 8006c70:	4604      	mov	r4, r0
 8006c72:	460d      	mov	r5, r1
 8006c74:	4a55      	ldr	r2, [pc, #340]	; (8006dcc <daq_ch_set+0x28c>)
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7f9 fc7a 	bl	8000578 <__aeabi_f2d>
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	4b51      	ldr	r3, [pc, #324]	; (8006dd0 <daq_ch_set+0x290>)
 8006c8a:	f7f9 fb17 	bl	80002bc <__adddf3>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4690      	mov	r8, r2
 8006c94:	4699      	mov	r9, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006c9c:	3306      	adds	r3, #6
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b0c      	cmp	r3, #12
 8006ca2:	d103      	bne.n	8006cac <daq_ch_set+0x16c>
 8006ca4:	f04f 0000 	mov.w	r0, #0
 8006ca8:	494a      	ldr	r1, [pc, #296]	; (8006dd4 <daq_ch_set+0x294>)
 8006caa:	e002      	b.n	8006cb2 <daq_ch_set+0x172>
 8006cac:	f04f 0000 	mov.w	r0, #0
 8006cb0:	4949      	ldr	r1, [pc, #292]	; (8006dd8 <daq_ch_set+0x298>)
 8006cb2:	4642      	mov	r2, r8
 8006cb4:	464b      	mov	r3, r9
 8006cb6:	f7f9 fb01 	bl	80002bc <__adddf3>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	a33f      	add	r3, pc, #252	; (adr r3, 8006dc0 <daq_ch_set+0x280>)
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	f7f9 fcae 	bl	8000628 <__aeabi_dmul>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	f7f9 fca8 	bl	8000628 <__aeabi_dmul>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	460c      	mov	r4, r1
 8006cdc:	4625      	mov	r5, r4
 8006cde:	461c      	mov	r4, r3
 8006ce0:	6978      	ldr	r0, [r7, #20]
 8006ce2:	f7f9 fc49 	bl	8000578 <__aeabi_f2d>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4620      	mov	r0, r4
 8006cec:	4629      	mov	r1, r5
 8006cee:	f7f9 ff0d 	bl	8000b0c <__aeabi_dcmplt>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d100      	bne.n	8006cfa <daq_ch_set+0x1ba>
                smpl_time = PS_ADC_SMPLT[i];
                smpl_time_n = PS_ADC_SMPLT_N[i];
            }
            else
            {
                break;
 8006cf8:	e010      	b.n	8006d1c <daq_ch_set+0x1dc>
                smpl_time = PS_ADC_SMPLT[i];
 8006cfa:	4a33      	ldr	r2, [pc, #204]	; (8006dc8 <daq_ch_set+0x288>)
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
                smpl_time_n = PS_ADC_SMPLT_N[i];
 8006d04:	4a31      	ldr	r2, [pc, #196]	; (8006dcc <daq_ch_set+0x28c>)
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
        for (int i = 0; i < PS_ADC_SMPLT_CNT; i++) // find best sample time
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	3301      	adds	r3, #1
 8006d14:	623b      	str	r3, [r7, #32]
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	2b07      	cmp	r3, #7
 8006d1a:	dda0      	ble.n	8006c5e <daq_ch_set+0x11e>
            }
        }
        self->smpl_time = smpl_time_n;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006d22:	3328      	adds	r3, #40	; 0x28
 8006d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d26:	601a      	str	r2, [r3, #0]
        else
            self->interleaved = 0;
#endif

#elif defined(PS_ADC_MODE_ADC1234) /* --------------------------------------------------------------------------*/
        adc_set_ch(ADC1, ch1, 0, 0, 0, smpl_time, is_vcc);
 8006d28:	7af9      	ldrb	r1, [r7, #11]
 8006d2a:	7ffb      	ldrb	r3, [r7, #31]
 8006d2c:	9302      	str	r3, [sp, #8]
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	2300      	movs	r3, #0
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	2300      	movs	r3, #0
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006d3e:	f002 fd71 	bl	8009824 <adc_set_ch>
        adc_set_ch(ADC2, 0, ch2, 0, 0, smpl_time, 0);
 8006d42:	7aba      	ldrb	r2, [r7, #10]
 8006d44:	2300      	movs	r3, #0
 8006d46:	9302      	str	r3, [sp, #8]
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	2300      	movs	r3, #0
 8006d52:	2100      	movs	r1, #0
 8006d54:	4821      	ldr	r0, [pc, #132]	; (8006ddc <daq_ch_set+0x29c>)
 8006d56:	f002 fd65 	bl	8009824 <adc_set_ch>
        adc_set_ch(ADC1, 0, 0, ch3, 0, smpl_time, 0);
 8006d5a:	7a7a      	ldrb	r2, [r7, #9]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	9302      	str	r3, [sp, #8]
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	2300      	movs	r3, #0
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006d72:	f002 fd57 	bl	8009824 <adc_set_ch>
        adc_set_ch(ADC2, 0, 0, 0, ch4, smpl_time, 0);
 8006d76:	2300      	movs	r3, #0
 8006d78:	9302      	str	r3, [sp, #8]
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	2300      	movs	r3, #0
 8006d86:	2200      	movs	r2, #0
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4814      	ldr	r0, [pc, #80]	; (8006ddc <daq_ch_set+0x29c>)
 8006d8c:	f002 fd4a 	bl	8009824 <adc_set_ch>
#endif

#endif
    }

    int ret = daq_mem_set(self, self->set.mem);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006d96:	3304      	adds	r3, #4
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff fb07 	bl	80063b0 <daq_mem_set>
 8006da2:	6138      	str	r0, [r7, #16]

    if (reen)
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <daq_ch_set+0x272>
        daq_enable(self, 1);
 8006daa:	2101      	movs	r1, #1
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 f885 	bl	8006ebc <daq_enable>
    return ret;
 8006db2:	693b      	ldr	r3, [r7, #16]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3730      	adds	r7, #48	; 0x30
 8006db8:	46bd      	mov	sp, r7
 8006dba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006dbe:	bf00      	nop
 8006dc0:	5698c2c2 	.word	0x5698c2c2
 8006dc4:	3e4dd37f 	.word	0x3e4dd37f
 8006dc8:	080155c8 	.word	0x080155c8
 8006dcc:	080155e8 	.word	0x080155e8
 8006dd0:	3fe00000 	.word	0x3fe00000
 8006dd4:	40290000 	.word	0x40290000
 8006dd8:	40210000 	.word	0x40210000
 8006ddc:	50000100 	.word	0x50000100

08006de0 <daq_reset>:

void daq_reset(daq_data_t* self)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
    self->trig.uwtick_first = 0;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006dee:	3394      	adds	r3, #148	; 0x94
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
    self->trig.pretrig_cntr = 0;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006dfa:	3398      	adds	r3, #152	; 0x98
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]
    self->trig.posttrig_size = 0;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006e06:	33a4      	adds	r3, #164	; 0xa4
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]
    self->trig.ready_last = 0;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006e12:	337b      	adds	r3, #123	; 0x7b
 8006e14:	2200      	movs	r2, #0
 8006e16:	701a      	strb	r2, [r3, #0]
    self->trig.ready = 0;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006e1e:	337a      	adds	r3, #122	; 0x7a
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
    self->trig.cntr = 0;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006e2a:	337c      	adds	r3, #124	; 0x7c
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
    self->trig.all_cntr = 0;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006e36:	3380      	adds	r3, #128	; 0x80
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
    //self->trig.pos_frst = 0;
    //self->trig.pos_trig = 0;
    //self->trig.pos_last = 0;
    //self->trig.pos_diff = 0;
    self->trig.pretrig_cntr = 0;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006e42:	3398      	adds	r3, #152	; 0x98
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
    self->trig.is_post = 0;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006e4e:	3378      	adds	r3, #120	; 0x78
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]

    if (self->buff1.len > 0)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	88db      	ldrh	r3, [r3, #6]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d007      	beq.n	8006e6c <daq_reset+0x8c>
        memset(self->buff1.data, 0, self->buff1.len);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6818      	ldr	r0, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	88db      	ldrh	r3, [r3, #6]
 8006e64:	461a      	mov	r2, r3
 8006e66:	2100      	movs	r1, #0
 8006e68:	f00b f8f0 	bl	801204c <memset>
    if (self->buff2.len > 0)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	8a5b      	ldrh	r3, [r3, #18]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <daq_reset+0xa4>
        memset(self->buff2.data, 0, self->buff2.len);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68d8      	ldr	r0, [r3, #12]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8a5b      	ldrh	r3, [r3, #18]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	2100      	movs	r1, #0
 8006e80:	f00b f8e4 	bl	801204c <memset>
    if (self->buff3.len > 0)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8bdb      	ldrh	r3, [r3, #30]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <daq_reset+0xbc>
        memset(self->buff3.data, 0, self->buff3.len);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6998      	ldr	r0, [r3, #24]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8bdb      	ldrh	r3, [r3, #30]
 8006e94:	461a      	mov	r2, r3
 8006e96:	2100      	movs	r1, #0
 8006e98:	f00b f8d8 	bl	801204c <memset>
    if (self->buff4.len > 0)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <daq_reset+0xd4>
        memset(self->buff4.data, 0, self->buff4.len);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eac:	461a      	mov	r2, r3
 8006eae:	2100      	movs	r1, #0
 8006eb0:	f00b f8cc 	bl	801204c <memset>
}
 8006eb4:	bf00      	nop
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <daq_enable>:

void daq_enable(daq_data_t* self, uint8_t enable)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
    if (!enable)
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d102      	bne.n	8006ed4 <daq_enable+0x18>
    {
        LL_TIM_DisableCounter(PS_TIM_DAQ);
 8006ece:	485c      	ldr	r0, [pc, #368]	; (8007040 <daq_enable+0x184>)
 8006ed0:	f7ff f858 	bl	8005f84 <LL_TIM_DisableCounter>
        //for (int i = 0; i < 1000; i++) __asm("nop");
    }

    if (self->enabled && self->dis_hold)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006eda:	3336      	adds	r3, #54	; 0x36
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <daq_enable+0x36>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006ee8:	3335      	adds	r3, #53	; 0x35
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f040 80a3 	bne.w	8007038 <daq_enable+0x17c>
        return;

    self->trig.pretrig_cntr = 0;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006ef8:	3398      	adds	r3, #152	; 0x98
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
    self->trig.all_cntr = 0;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f04:	3380      	adds	r3, #128	; 0x80
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]
    self->trig.cntr = 0;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f10:	337c      	adds	r3, #124	; 0x7c
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
    self->trig.ignore = 0;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f1c:	3379      	adds	r3, #121	; 0x79
 8006f1e:	2200      	movs	r2, #0
 8006f20:	701a      	strb	r2, [r3, #0]

    if (self->mode == SCOPE || self->mode == VM)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f28:	3334      	adds	r3, #52	; 0x34
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d006      	beq.n	8006f3e <daq_enable+0x82>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f36:	3334      	adds	r3, #52	; 0x34
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d120      	bne.n	8006f80 <daq_enable+0xc4>
    {

#if defined(PS_ADC_MODE_ADC1) || defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
        daq_enable_adc(self, ADC1, enable, PS_DMA_CH_ADC1);
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	2301      	movs	r3, #1
 8006f42:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f884 	bl	8007054 <daq_enable_adc>
#endif

        if (!self->interleaved)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f52:	3337      	adds	r3, #55	; 0x37
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d14a      	bne.n	8006ff0 <daq_enable+0x134>
        {
#if defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
        daq_enable_adc(self, ADC2, enable, PS_DMA_CH_ADC2);
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	4939      	ldr	r1, [pc, #228]	; (8007044 <daq_enable+0x188>)
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f877 	bl	8007054 <daq_enable_adc>
#endif

#if defined(PS_ADC_MODE_ADC1234)
        daq_enable_adc(self, ADC3, enable, PS_DMA_CH_ADC3);
 8006f66:	78fa      	ldrb	r2, [r7, #3]
 8006f68:	2305      	movs	r3, #5
 8006f6a:	4937      	ldr	r1, [pc, #220]	; (8007048 <daq_enable+0x18c>)
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f871 	bl	8007054 <daq_enable_adc>
        daq_enable_adc(self, ADC4, enable, PS_DMA_CH_ADC4);
 8006f72:	78fa      	ldrb	r2, [r7, #3]
 8006f74:	2302      	movs	r3, #2
 8006f76:	4935      	ldr	r1, [pc, #212]	; (800704c <daq_enable+0x190>)
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f86b 	bl	8007054 <daq_enable_adc>
        if (!self->interleaved)
 8006f7e:	e037      	b.n	8006ff0 <daq_enable+0x134>
        }

    }
    else //if(self->mode == LA)
    {
        ASSERT(self->trig.exti_trig != 0);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f86:	33bc      	adds	r3, #188	; 0xbc
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <daq_enable+0xdc>
 8006f8e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8006f92:	482f      	ldr	r0, [pc, #188]	; (8007050 <daq_enable+0x194>)
 8006f94:	f005 f847 	bl	800c026 <assert2>

        if (enable)
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d01c      	beq.n	8006fd8 <daq_enable+0x11c>
        {
            LL_TIM_EnableDMAReq_CC1(PS_TIM_DAQ);
 8006f9e:	4828      	ldr	r0, [pc, #160]	; (8007040 <daq_enable+0x184>)
 8006fa0:	f7ff f81c 	bl	8005fdc <LL_TIM_EnableDMAReq_CC1>
            NVIC_ClearPendingIRQ(self->trig.exti_trig);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006faa:	33bc      	adds	r3, #188	; 0xbc
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	b25b      	sxtb	r3, r3
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fe fed1 	bl	8005d58 <__NVIC_ClearPendingIRQ>
            if (self->trig.set.mode != DISABLED)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006fbc:	3340      	adds	r3, #64	; 0x40
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d015      	beq.n	8006ff0 <daq_enable+0x134>
                NVIC_EnableIRQ(self->trig.exti_trig);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006fca:	33bc      	adds	r3, #188	; 0xbc
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	b25b      	sxtb	r3, r3
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fe fe81 	bl	8005cd8 <__NVIC_EnableIRQ>
 8006fd6:	e00b      	b.n	8006ff0 <daq_enable+0x134>
            //LL_EXTI_EnableIT_0_31(PS_LA_EXTI1);
        }
        else
        {
            LL_TIM_DisableDMAReq_CC1(PS_TIM_DAQ);
 8006fd8:	4819      	ldr	r0, [pc, #100]	; (8007040 <daq_enable+0x184>)
 8006fda:	f7ff f80f 	bl	8005ffc <LL_TIM_DisableDMAReq_CC1>
            NVIC_DisableIRQ(self->trig.exti_trig);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006fe4:	33bc      	adds	r3, #188	; 0xbc
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	b25b      	sxtb	r3, r3
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe fe92 	bl	8005d14 <__NVIC_DisableIRQ>
        }
    }
    if (enable)
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <daq_enable+0x142>
        LL_TIM_EnableCounter(PS_TIM_DAQ);
 8006ff6:	4812      	ldr	r0, [pc, #72]	; (8007040 <daq_enable+0x184>)
 8006ff8:	f7fe ffb4 	bl	8005f64 <LL_TIM_EnableCounter>
 8006ffc:	e00b      	b.n	8007016 <daq_enable+0x15a>
    else
        for (int i = 0; i < 10000; i++) __asm("nop"); // let DMA and ADC finish their jobs
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	e003      	b.n	800700c <daq_enable+0x150>
 8007004:	bf00      	nop
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3301      	adds	r3, #1
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007012:	4293      	cmp	r3, r2
 8007014:	ddf6      	ble.n	8007004 <daq_enable+0x148>

    self->enabled = enable;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800701c:	3336      	adds	r3, #54	; 0x36
 800701e:	78fa      	ldrb	r2, [r7, #3]
 8007020:	701a      	strb	r2, [r3, #0]
    self->trig.uwtick_first = self->uwTick;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007028:	3330      	adds	r3, #48	; 0x30
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007032:	3394      	adds	r3, #148	; 0x94
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	e000      	b.n	800703a <daq_enable+0x17e>
        return;
 8007038:	bf00      	nop
}
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40000400 	.word	0x40000400
 8007044:	50000100 	.word	0x50000100
 8007048:	50000400 	.word	0x50000400
 800704c:	50000500 	.word	0x50000500
 8007050:	08015138 	.word	0x08015138

08007054 <daq_enable_adc>:

static void daq_enable_adc(daq_data_t* self, ADC_TypeDef* adc, uint8_t enable, uint32_t dma_ch)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	4613      	mov	r3, r2
 8007062:	71fb      	strb	r3, [r7, #7]
    if (enable)
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <daq_enable_adc+0x1e>
    {
#ifdef LL_ADC_SPEC_START
        LL_ADC_REG_StartConversionExtTrig(adc, LL_ADC_REG_TRIG_EXT_RISING);
#else
        LL_ADC_REG_StartConversion(adc);
 800706a:	68b8      	ldr	r0, [r7, #8]
 800706c:	f7fe ff52 	bl	8005f14 <LL_ADC_REG_StartConversion>
#else
        LL_ADC_REG_StopConversion(adc);
#endif
        LL_ADC_SetAnalogWDMonitChannels(adc, PS_ADC_AWD LL_ADC_AWD_DISABLE);
    }
}
 8007070:	e007      	b.n	8007082 <daq_enable_adc+0x2e>
        LL_ADC_REG_StopConversion(adc);
 8007072:	68b8      	ldr	r0, [r7, #8]
 8007074:	f7fe ff62 	bl	8005f3c <LL_ADC_REG_StopConversion>
        LL_ADC_SetAnalogWDMonitChannels(adc, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 8007078:	2200      	movs	r2, #0
 800707a:	4904      	ldr	r1, [pc, #16]	; (800708c <daq_enable_adc+0x38>)
 800707c:	68b8      	ldr	r0, [r7, #8]
 800707e:	f7fe ff0f 	bl	8005ea0 <LL_ADC_SetAnalogWDMonitChannels>
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	7dc00000 	.word	0x7dc00000

08007090 <daq_mode_set>:

void daq_mode_set(daq_data_t* self, enum daq_mode mode)
{
 8007090:	b590      	push	{r4, r7, lr}
 8007092:	b091      	sub	sp, #68	; 0x44
 8007094:	af02      	add	r7, sp, #8
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	460b      	mov	r3, r1
 800709a:	70fb      	strb	r3, [r7, #3]
    if (self->mode == SCOPE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80070a2:	3334      	adds	r3, #52	; 0x34
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d112      	bne.n	80070d0 <daq_mode_set+0x40>
        daq_settings_save(&self->set, &self->trig.set, &self->save_s, &self->trig.save_s);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f503 4043 	add.w	r0, r3, #49920	; 0xc300
 80070b0:	30fc      	adds	r0, #252	; 0xfc
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f503 4144 	add.w	r1, r3, #50176	; 0xc400
 80070b8:	313c      	adds	r1, #60	; 0x3c
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f503 4244 	add.w	r2, r3, #50176	; 0xc400
 80070c0:	3208      	adds	r2, #8
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80070c8:	3350      	adds	r3, #80	; 0x50
 80070ca:	f7ff f884 	bl	80061d6 <daq_settings_save>
 80070ce:	e018      	b.n	8007102 <daq_mode_set+0x72>
    else if (self->mode == LA)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80070d6:	3334      	adds	r3, #52	; 0x34
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d111      	bne.n	8007102 <daq_mode_set+0x72>
        daq_settings_save(&self->set, &self->trig.set, &self->save_l, &self->trig.save_l);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f503 4043 	add.w	r0, r3, #49920	; 0xc300
 80070e4:	30fc      	adds	r0, #252	; 0xfc
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f503 4144 	add.w	r1, r3, #50176	; 0xc400
 80070ec:	313c      	adds	r1, #60	; 0x3c
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f503 4244 	add.w	r2, r3, #50176	; 0xc400
 80070f4:	3214      	adds	r2, #20
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80070fc:	3364      	adds	r3, #100	; 0x64
 80070fe:	f7ff f86a 	bl	80061d6 <daq_settings_save>

    daq_enable(self, 0);
 8007102:	2100      	movs	r1, #0
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff fed9 	bl	8006ebc <daq_enable>
    daq_reset(self);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff fe68 	bl	8006de0 <daq_reset>
    self->dis_hold = 1;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007116:	3335      	adds	r3, #53	; 0x35
 8007118:	2201      	movs	r2, #1
 800711a:	701a      	strb	r2, [r3, #0]
    self->mode = mode;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007122:	3334      	adds	r3, #52	; 0x34
 8007124:	78fa      	ldrb	r2, [r7, #3]
 8007126:	701a      	strb	r2, [r3, #0]

    // GPIO init
    if (mode == SCOPE || mode == VM)
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <daq_mode_set+0xa4>
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d12e      	bne.n	8007192 <daq_mode_set+0x102>
    {
        LL_GPIO_InitTypeDef GPIO_InitStruct =
 8007134:	f107 0320 	add.w	r3, r7, #32
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	605a      	str	r2, [r3, #4]
 800713e:	609a      	str	r2, [r3, #8]
 8007140:	60da      	str	r2, [r3, #12]
 8007142:	611a      	str	r2, [r3, #16]
 8007144:	615a      	str	r2, [r3, #20]
 8007146:	2301      	movs	r3, #1
 8007148:	623b      	str	r3, [r7, #32]
 800714a:	2303      	movs	r3, #3
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
 800714e:	2303      	movs	r3, #3
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            .Pin = PS_GPIO_ADC_CH1,
            .Speed = LL_GPIO_SPEED_FREQ_HIGH,
            .Mode = LL_GPIO_MODE_ANALOG
        };
        LL_GPIO_Init(PS_GPIO_ADC_PORT1, &GPIO_InitStruct);
 8007152:	f107 0320 	add.w	r3, r7, #32
 8007156:	4619      	mov	r1, r3
 8007158:	489b      	ldr	r0, [pc, #620]	; (80073c8 <daq_mode_set+0x338>)
 800715a:	f7fc fe48 	bl	8003dee <LL_GPIO_Init>
        GPIO_InitStruct.Pin = PS_GPIO_ADC_CH2;
 800715e:	2302      	movs	r3, #2
 8007160:	623b      	str	r3, [r7, #32]
        LL_GPIO_Init(PS_GPIO_ADC_PORT2, &GPIO_InitStruct);
 8007162:	f107 0320 	add.w	r3, r7, #32
 8007166:	4619      	mov	r1, r3
 8007168:	4897      	ldr	r0, [pc, #604]	; (80073c8 <daq_mode_set+0x338>)
 800716a:	f7fc fe40 	bl	8003dee <LL_GPIO_Init>
        GPIO_InitStruct.Pin = PS_GPIO_ADC_CH3;
 800716e:	2301      	movs	r3, #1
 8007170:	623b      	str	r3, [r7, #32]
        LL_GPIO_Init(PS_GPIO_ADC_PORT3, &GPIO_InitStruct);
 8007172:	f107 0320 	add.w	r3, r7, #32
 8007176:	4619      	mov	r1, r3
 8007178:	4894      	ldr	r0, [pc, #592]	; (80073cc <daq_mode_set+0x33c>)
 800717a:	f7fc fe38 	bl	8003dee <LL_GPIO_Init>
        GPIO_InitStruct.Pin = PS_GPIO_ADC_CH4;
 800717e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007182:	623b      	str	r3, [r7, #32]
        LL_GPIO_Init(PS_GPIO_ADC_PORT4, &GPIO_InitStruct);
 8007184:	f107 0320 	add.w	r3, r7, #32
 8007188:	4619      	mov	r1, r3
 800718a:	4890      	ldr	r0, [pc, #576]	; (80073cc <daq_mode_set+0x33c>)
 800718c:	f7fc fe2f 	bl	8003dee <LL_GPIO_Init>
    {
 8007190:	e012      	b.n	80071b8 <daq_mode_set+0x128>
    }
    else // if (mode == LA)
    {
        LL_GPIO_InitTypeDef GPIO_InitStruct =
 8007192:	f107 0308 	add.w	r3, r7, #8
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	605a      	str	r2, [r3, #4]
 800719c:	609a      	str	r2, [r3, #8]
 800719e:	60da      	str	r2, [r3, #12]
 80071a0:	611a      	str	r2, [r3, #16]
 80071a2:	615a      	str	r2, [r3, #20]
 80071a4:	230f      	movs	r3, #15
 80071a6:	60bb      	str	r3, [r7, #8]
 80071a8:	2303      	movs	r3, #3
 80071aa:	613b      	str	r3, [r7, #16]
        {
            .Pin = PS_GPIO_LA_CH1 | PS_GPIO_LA_CH2 | PS_GPIO_LA_CH3 | PS_GPIO_LA_CH4,
            .Speed = LL_GPIO_SPEED_FREQ_HIGH,
            .Mode = LL_GPIO_MODE_INPUT //LL_GPIO_MODE_FLOATING;
        };
        LL_GPIO_Init(PS_GPIO_LA_PORT, &GPIO_InitStruct);
 80071ac:	f107 0308 	add.w	r3, r7, #8
 80071b0:	4619      	mov	r1, r3
 80071b2:	4885      	ldr	r0, [pc, #532]	; (80073c8 <daq_mode_set+0x338>)
 80071b4:	f7fc fe1b 	bl	8003dee <LL_GPIO_Init>
    }

    // DAQ init
    if (mode == SCOPE)
 80071b8:	78fb      	ldrb	r3, [r7, #3]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d166      	bne.n	800728c <daq_mode_set+0x1fc>
    {
        daq_mem_set(self, 3); // safety guard
 80071be:	2103      	movs	r1, #3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff f8f5 	bl	80063b0 <daq_mem_set>
        daq_bit_set(self, self->save_s.bits);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80071cc:	3312      	adds	r3, #18
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff fb9a 	bl	800690c <daq_bit_set>
        daq_ch_set(self, self->save_s.ch1_en, self->save_s.ch2_en, self->save_s.ch3_en, self->save_s.ch4_en, self->save_s.fs);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80071de:	3308      	adds	r3, #8
 80071e0:	7819      	ldrb	r1, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80071e8:	3309      	adds	r3, #9
 80071ea:	7818      	ldrb	r0, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80071f2:	330a      	adds	r3, #10
 80071f4:	781c      	ldrb	r4, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80071fc:	330b      	adds	r3, #11
 80071fe:	781a      	ldrb	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007206:	330c      	adds	r3, #12
 8007208:	edd3 7a00 	vldr	s15, [r3]
 800720c:	9200      	str	r2, [sp, #0]
 800720e:	eeb0 0a67 	vmov.f32	s0, s15
 8007212:	4623      	mov	r3, r4
 8007214:	4602      	mov	r2, r0
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff fc92 	bl	8006b40 <daq_ch_set>
        daq_fs_set(self, self->save_s.fs);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007222:	330c      	adds	r3, #12
 8007224:	edd3 7a00 	vldr	s15, [r3]
 8007228:	eeb0 0a67 	vmov.f32	s0, s15
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7ff fbed 	bl	8006a0c <daq_fs_set>
        daq_mem_set(self, self->save_s.mem);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007238:	3310      	adds	r3, #16
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff f8b6 	bl	80063b0 <daq_mem_set>
        daq_trig_set(self, self->trig.save_s.ch, self->trig.save_s.val, self->trig.save_s.edge,
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800724a:	3358      	adds	r3, #88	; 0x58
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	461c      	mov	r4, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007256:	335c      	adds	r3, #92	; 0x5c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	b2d9      	uxtb	r1, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007262:	3355      	adds	r3, #85	; 0x55
 8007264:	7818      	ldrb	r0, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800726c:	3354      	adds	r3, #84	; 0x54
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007276:	3350      	adds	r3, #80	; 0x50
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	9301      	str	r3, [sp, #4]
 800727c:	9200      	str	r2, [sp, #0]
 800727e:	4603      	mov	r3, r0
 8007280:	460a      	mov	r2, r1
 8007282:	4621      	mov	r1, r4
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 f8f1 	bl	800846c <daq_trig_set>
 800728a:	e08e      	b.n	80073aa <daq_mode_set+0x31a>
                     self->trig.save_s.mode, self->trig.save_s.pretrigger);
    }
    else if (mode == VM)
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d125      	bne.n	80072de <daq_mode_set+0x24e>
    {
        daq_mem_set(self, 3); // safety guard
 8007292:	2103      	movs	r1, #3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff f88b 	bl	80063b0 <daq_mem_set>
        daq_bit_set(self, B12);
 800729a:	210c      	movs	r1, #12
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff fb35 	bl	800690c <daq_bit_set>
        daq_ch_set(self, 1, 1, 1, 1, PS_VM_FS);
 80072a2:	2301      	movs	r3, #1
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80073d0 <daq_mode_set+0x340>
 80072aa:	2301      	movs	r3, #1
 80072ac:	2201      	movs	r2, #1
 80072ae:	2101      	movs	r1, #1
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff fc45 	bl	8006b40 <daq_ch_set>
        daq_mem_set(self, PS_VM_MEM);
 80072b6:	21c8      	movs	r1, #200	; 0xc8
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff f879 	bl	80063b0 <daq_mem_set>
        daq_fs_set(self, PS_VM_FS);
 80072be:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80073d0 <daq_mode_set+0x340>
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff fba2 	bl	8006a0c <daq_fs_set>
        daq_trig_set(self, 0, 0, RISING, DISABLED, 50);
 80072c8:	2332      	movs	r3, #50	; 0x32
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	2303      	movs	r3, #3
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	2300      	movs	r3, #0
 80072d2:	2200      	movs	r2, #0
 80072d4:	2100      	movs	r1, #0
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 f8c8 	bl	800846c <daq_trig_set>
 80072dc:	e065      	b.n	80073aa <daq_mode_set+0x31a>
    }
    else // if (mode == LA)
    {
        daq_mem_set(self, 3); // safety guard
 80072de:	2103      	movs	r1, #3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff f865 	bl	80063b0 <daq_mem_set>
        daq_bit_set(self, self->save_l.bits);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80072ec:	331e      	adds	r3, #30
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff fb0a 	bl	800690c <daq_bit_set>
        daq_ch_set(self, self->save_l.ch1_en, self->save_l.ch2_en, self->save_l.ch3_en, self->save_l.ch4_en, self->save_l.fs);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80072fe:	3314      	adds	r3, #20
 8007300:	7819      	ldrb	r1, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007308:	3315      	adds	r3, #21
 800730a:	7818      	ldrb	r0, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007312:	3316      	adds	r3, #22
 8007314:	781c      	ldrb	r4, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800731c:	3317      	adds	r3, #23
 800731e:	781a      	ldrb	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007326:	3318      	adds	r3, #24
 8007328:	edd3 7a00 	vldr	s15, [r3]
 800732c:	9200      	str	r2, [sp, #0]
 800732e:	eeb0 0a67 	vmov.f32	s0, s15
 8007332:	4623      	mov	r3, r4
 8007334:	4602      	mov	r2, r0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7ff fc02 	bl	8006b40 <daq_ch_set>
        daq_fs_set(self, self->save_l.fs);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007342:	3318      	adds	r3, #24
 8007344:	edd3 7a00 	vldr	s15, [r3]
 8007348:	eeb0 0a67 	vmov.f32	s0, s15
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff fb5d 	bl	8006a0c <daq_fs_set>
        daq_mem_set(self, self->save_l.mem);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007358:	331c      	adds	r3, #28
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff f826 	bl	80063b0 <daq_mem_set>
        daq_trig_set(self, self->trig.save_l.ch, self->trig.save_l.val, self->trig.save_l.edge,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800736a:	336c      	adds	r3, #108	; 0x6c
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	461c      	mov	r4, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007376:	3370      	adds	r3, #112	; 0x70
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	b2d9      	uxtb	r1, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007382:	3369      	adds	r3, #105	; 0x69
 8007384:	7818      	ldrb	r0, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800738c:	3368      	adds	r3, #104	; 0x68
 800738e:	781a      	ldrb	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007396:	3364      	adds	r3, #100	; 0x64
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	9200      	str	r2, [sp, #0]
 800739e:	4603      	mov	r3, r0
 80073a0:	460a      	mov	r2, r1
 80073a2:	4621      	mov	r1, r4
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 f861 	bl	800846c <daq_trig_set>
                     self->trig.save_l.mode, self->trig.save_l.pretrigger);
    }

    self->dis_hold = 0;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80073b0:	3335      	adds	r3, #53	; 0x35
 80073b2:	2200      	movs	r2, #0
 80073b4:	701a      	strb	r2, [r3, #0]
    daq_enable(self, 1);
 80073b6:	2101      	movs	r1, #1
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff fd7f 	bl	8006ebc <daq_enable>
}
 80073be:	bf00      	nop
 80073c0:	373c      	adds	r7, #60	; 0x3c
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd90      	pop	{r4, r7, pc}
 80073c6:	bf00      	nop
 80073c8:	48000800 	.word	0x48000800
 80073cc:	48000400 	.word	0x48000400
 80073d0:	42c80000 	.word	0x42c80000

080073d4 <get_last_circ_idx>:
void get_avg_from_circ(int last_idx, int ch_num, int avg_num, void* buff, int daq_bits, float* v1, float* v2, float* v3, float* v4, float* v5);
int get_vcc_from_circ(int from, int total, int bufflen, int ch_num, int daq_bits, void* buff);
int get_1ch_from_circ(int from, int total, int bufflen, int ch, int ch_num, int daq_bits, float vcc, float vref_cal, void* buff, uint8_t* out, int* idx);

static inline int get_last_circ_idx(int pos, int len)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
    int last_idx = pos - 1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	60fb      	str	r3, [r7, #12]
    if (last_idx < 0)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	da02      	bge.n	80073f0 <get_last_circ_idx+0x1c>
        last_idx = len - 1;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
    return last_idx;
 80073f0:	68fb      	ldr	r3, [r7, #12]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
	...

08007400 <__NVIC_GetPriorityGrouping>:
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007404:	4b04      	ldr	r3, [pc, #16]	; (8007418 <__NVIC_GetPriorityGrouping+0x18>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	0a1b      	lsrs	r3, r3, #8
 800740a:	f003 0307 	and.w	r3, r3, #7
}
 800740e:	4618      	mov	r0, r3
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	e000ed00 	.word	0xe000ed00

0800741c <__NVIC_DisableIRQ>:
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800742a:	2b00      	cmp	r3, #0
 800742c:	db10      	blt.n	8007450 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	f003 021f 	and.w	r2, r3, #31
 8007434:	4909      	ldr	r1, [pc, #36]	; (800745c <__NVIC_DisableIRQ+0x40>)
 8007436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800743a:	095b      	lsrs	r3, r3, #5
 800743c:	2001      	movs	r0, #1
 800743e:	fa00 f202 	lsl.w	r2, r0, r2
 8007442:	3320      	adds	r3, #32
 8007444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007448:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800744c:	f3bf 8f6f 	isb	sy
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	e000e100 	.word	0xe000e100

08007460 <__NVIC_SetPriority>:
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	6039      	str	r1, [r7, #0]
 800746a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800746c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007470:	2b00      	cmp	r3, #0
 8007472:	db0a      	blt.n	800748a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	b2da      	uxtb	r2, r3
 8007478:	490c      	ldr	r1, [pc, #48]	; (80074ac <__NVIC_SetPriority+0x4c>)
 800747a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800747e:	0112      	lsls	r2, r2, #4
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	440b      	add	r3, r1
 8007484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007488:	e00a      	b.n	80074a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	b2da      	uxtb	r2, r3
 800748e:	4908      	ldr	r1, [pc, #32]	; (80074b0 <__NVIC_SetPriority+0x50>)
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	3b04      	subs	r3, #4
 8007498:	0112      	lsls	r2, r2, #4
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	440b      	add	r3, r1
 800749e:	761a      	strb	r2, [r3, #24]
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	e000e100 	.word	0xe000e100
 80074b0:	e000ed00 	.word	0xe000ed00

080074b4 <NVIC_EncodePriority>:
{
 80074b4:	b480      	push	{r7}
 80074b6:	b089      	sub	sp, #36	; 0x24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	f1c3 0307 	rsb	r3, r3, #7
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	bf28      	it	cs
 80074d2:	2304      	movcs	r3, #4
 80074d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	3304      	adds	r3, #4
 80074da:	2b06      	cmp	r3, #6
 80074dc:	d902      	bls.n	80074e4 <NVIC_EncodePriority+0x30>
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	3b03      	subs	r3, #3
 80074e2:	e000      	b.n	80074e6 <NVIC_EncodePriority+0x32>
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074e8:	f04f 32ff 	mov.w	r2, #4294967295
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	43da      	mvns	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	401a      	ands	r2, r3
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	fa01 f303 	lsl.w	r3, r1, r3
 8007506:	43d9      	mvns	r1, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800750c:	4313      	orrs	r3, r2
}
 800750e:	4618      	mov	r0, r3
 8007510:	3724      	adds	r7, #36	; 0x24
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
	...

0800751c <iwdg_feed>:
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
    PS_IWDG_RST;
 8007520:	4b04      	ldr	r3, [pc, #16]	; (8007534 <iwdg_feed+0x18>)
 8007522:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007526:	601a      	str	r2, [r3, #0]
};
 8007528:	bf00      	nop
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	40003000 	.word	0x40003000

08007538 <LL_ADC_SetAnalogWDMonitChannels>:
{
 8007538:	b480      	push	{r7}
 800753a:	b089      	sub	sp, #36	; 0x24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, __ADC_MASK_SHIFT(AWDy, ADC_AWD_CRX_REGOFFSET_MASK)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	330c      	adds	r3, #12
 8007548:	4618      	mov	r0, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007550:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8007554:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	fa92 f2a2 	rbit	r2, r2
 800755c:	617a      	str	r2, [r7, #20]
  return result;
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	fab2 f282 	clz	r2, r2
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	fa23 f102 	lsr.w	r1, r3, r2
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f003 0202 	and.w	r2, r3, #2
 8007570:	4613      	mov	r3, r2
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4403      	add	r3, r0
 800757e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <LL_ADC_SetAnalogWDMonitChannels+0x70>)
 8007588:	400b      	ands	r3, r1
 800758a:	43db      	mvns	r3, r3
 800758c:	401a      	ands	r2, r3
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	400b      	ands	r3, r1
 8007594:	431a      	orrs	r2, r3
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	601a      	str	r2, [r3, #0]
}
 800759a:	bf00      	nop
 800759c:	3724      	adds	r7, #36	; 0x24
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	7dc7fffe 	.word	0x7dc7fffe

080075ac <LL_ADC_SetAnalogWDThresholds>:
{
 80075ac:	b480      	push	{r7}
 80075ae:	b08b      	sub	sp, #44	; 0x2c
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, __ADC_MASK_SHIFT(AWDy, ADC_AWD_TRX_REGOFFSET_MASK));
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3320      	adds	r3, #32
 80075be:	4619      	mov	r1, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80075c6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80075ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	fa92 f2a2 	rbit	r2, r2
 80075d2:	617a      	str	r2, [r7, #20]
  return result;
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	fab2 f282 	clz	r2, r2
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	40d3      	lsrs	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	440b      	add	r3, r1
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(*preg,
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	43db      	mvns	r3, r3
 80075ec:	401a      	ands	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	fa93 f3a3 	rbit	r3, r3
 80075f8:	61fb      	str	r3, [r7, #28]
  return result;
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	fab3 f383 	clz	r3, r3
 8007600:	b2db      	uxtb	r3, r3
 8007602:	4619      	mov	r1, r3
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	408b      	lsls	r3, r1
 8007608:	431a      	orrs	r2, r3
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	601a      	str	r2, [r3, #0]
}
 800760e:	bf00      	nop
 8007610:	372c      	adds	r7, #44	; 0x2c
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <LL_ADC_GetAnalogWDThresholds>:
{
 800761a:	b480      	push	{r7}
 800761c:	b08b      	sub	sp, #44	; 0x2c
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, __ADC_MASK_SHIFT(AWDy, ADC_AWD_TRX_REGOFFSET_MASK));
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3320      	adds	r3, #32
 800762a:	4619      	mov	r1, r3
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007632:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8007636:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	fa92 f2a2 	rbit	r2, r2
 800763e:	617a      	str	r2, [r7, #20]
  return result;
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	fab2 f282 	clz	r2, r2
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	40d3      	lsrs	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	440b      	add	r3, r1
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
  return (uint32_t)(READ_BIT(*preg,
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800765a:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800765e:	4013      	ands	r3, r2
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	623a      	str	r2, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007664:	6a3a      	ldr	r2, [r7, #32]
 8007666:	fa92 f2a2 	rbit	r2, r2
 800766a:	61fa      	str	r2, [r7, #28]
  return result;
 800766c:	69fa      	ldr	r2, [r7, #28]
                    >> POSITION_VAL(AWDThresholdsHighLow)
 800766e:	fab2 f282 	clz	r2, r2
 8007672:	b2d2      	uxtb	r2, r2
  return (uint32_t)(READ_BIT(*preg,
 8007674:	40d3      	lsrs	r3, r2
}
 8007676:	4618      	mov	r0, r3
 8007678:	372c      	adds	r7, #44	; 0x2c
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <LL_DMA_GetDataLength>:
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	3b01      	subs	r3, #1
 8007692:	4a06      	ldr	r2, [pc, #24]	; (80076ac <LL_DMA_GetDataLength+0x28>)
 8007694:	5cd3      	ldrb	r3, [r2, r3]
 8007696:	461a      	mov	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4413      	add	r3, r2
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	b29b      	uxth	r3, r3
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	08015778 	.word	0x08015778

080076b0 <LL_SYSCFG_SetEXTISource>:
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80076ba:	4a13      	ldr	r2, [pc, #76]	; (8007708 <LL_SYSCFG_SetEXTISource+0x58>)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	3302      	adds	r3, #2
 80076c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	0c1b      	lsrs	r3, r3, #16
 80076ca:	43db      	mvns	r3, r3
 80076cc:	ea02 0103 	and.w	r1, r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	0c1b      	lsrs	r3, r3, #16
 80076d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	fa93 f3a3 	rbit	r3, r3
 80076dc:	60bb      	str	r3, [r7, #8]
  return result;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	fab3 f383 	clz	r3, r3
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	fa03 f202 	lsl.w	r2, r3, r2
 80076ee:	4806      	ldr	r0, [pc, #24]	; (8007708 <LL_SYSCFG_SetEXTISource+0x58>)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	430a      	orrs	r2, r1
 80076f6:	3302      	adds	r3, #2
 80076f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80076fc:	bf00      	nop
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	40010000 	.word	0x40010000

0800770c <LL_EXTI_EnableIT_0_31>:
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <LL_EXTI_EnableIT_0_31+0x20>)
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	4904      	ldr	r1, [pc, #16]	; (800772c <LL_EXTI_EnableIT_0_31+0x20>)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4313      	orrs	r3, r2
 800771e:	600b      	str	r3, [r1, #0]
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	40010400 	.word	0x40010400

08007730 <LL_EXTI_DisableIT_0_31>:
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8007738:	4b06      	ldr	r3, [pc, #24]	; (8007754 <LL_EXTI_DisableIT_0_31+0x24>)
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	43db      	mvns	r3, r3
 8007740:	4904      	ldr	r1, [pc, #16]	; (8007754 <LL_EXTI_DisableIT_0_31+0x24>)
 8007742:	4013      	ands	r3, r2
 8007744:	600b      	str	r3, [r1, #0]
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	40010400 	.word	0x40010400

08007758 <LL_TIM_DisableCounter>:
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f023 0201 	bic.w	r2, r3, #1
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	601a      	str	r2, [r3, #0]
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <daq_trig_init>:
#include "FreeRTOS.h"
#include "semphr.h"


void daq_trig_init(daq_data_t* self)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
    self->trig.ignore = 0;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007786:	3379      	adds	r3, #121	; 0x79
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
    self->trig.ready = 0;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007792:	337a      	adds	r3, #122	; 0x7a
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]
    self->trig.cntr = 0;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800779e:	337c      	adds	r3, #124	; 0x7c
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
    self->trig.awd_trig = 0;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077aa:	33ac      	adds	r3, #172	; 0xac
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
    self->trig.all_cntr = 0;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077b6:	3380      	adds	r3, #128	; 0x80
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
    self->trig.pos_frst = 0;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077c2:	3384      	adds	r3, #132	; 0x84
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]
    self->trig.pos_trig = 0;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077ce:	3388      	adds	r3, #136	; 0x88
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
    self->trig.pos_last = 0;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077da:	338c      	adds	r3, #140	; 0x8c
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]
    self->trig.pos_diff = 0;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077e6:	3390      	adds	r3, #144	; 0x90
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
    self->trig.uwtick_first = 0;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077f2:	3394      	adds	r3, #148	; 0x94
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]
    self->trig.pretrig_cntr = 0;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077fe:	3398      	adds	r3, #152	; 0x98
 8007800:	2200      	movs	r2, #0
 8007802:	601a      	str	r2, [r3, #0]
    self->trig.is_post = 0;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800780a:	3378      	adds	r3, #120	; 0x78
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
    self->trig.posttrig_size = 0;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007816:	33a4      	adds	r3, #164	; 0xa4
 8007818:	2200      	movs	r2, #0
 800781a:	601a      	str	r2, [r3, #0]
    self->trig.auttrig_val = 0;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007822:	33a0      	adds	r3, #160	; 0xa0
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]
    self->trig.pretrig_val = 0;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800782e:	339c      	adds	r3, #156	; 0x9c
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]
    self->trig.fullmem_val = 0;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800783a:	33a8      	adds	r3, #168	; 0xa8
 800783c:	2200      	movs	r2, #0
 800783e:	601a      	str	r2, [r3, #0]
    self->trig.buff_trig = NULL;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007846:	33b0      	adds	r3, #176	; 0xb0
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
    self->trig.dma_ch_trig = PS_DMA_CH_ADC1;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007852:	33b4      	adds	r3, #180	; 0xb4
 8007854:	2201      	movs	r2, #1
 8007856:	601a      	str	r2, [r3, #0]
    self->trig.exti_trig = PS_LA_IRQ_EXTI1;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800785e:	33bc      	adds	r3, #188	; 0xbc
 8007860:	2206      	movs	r2, #6
 8007862:	601a      	str	r2, [r3, #0]
    self->trig.adc_trig = ADC1;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800786a:	33c0      	adds	r3, #192	; 0xc0
 800786c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007870:	601a      	str	r2, [r3, #0]
    self->trig.dma_trig = PS_DMA_ADC1;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007878:	33b8      	adds	r3, #184	; 0xb8
 800787a:	4a13      	ldr	r2, [pc, #76]	; (80078c8 <daq_trig_init+0x150>)
 800787c:	601a      	str	r2, [r3, #0]
    self->trig.order = 0;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007884:	33c4      	adds	r3, #196	; 0xc4
 8007886:	2200      	movs	r2, #0
 8007888:	601a      	str	r2, [r3, #0]
    self->trig.ready_last = 0;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007890:	337b      	adds	r3, #123	; 0x7b
 8007892:	2200      	movs	r2, #0
 8007894:	701a      	strb	r2, [r3, #0]
    self->trig.post_start = 0;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800789c:	33c8      	adds	r3, #200	; 0xc8
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
    self->trig.post_from = 0;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80078a8:	33cc      	adds	r3, #204	; 0xcc
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]
    self->trig.dma_pos_catched = 0;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80078b4:	33d0      	adds	r3, #208	; 0xd0
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	40020000 	.word	0x40020000

080078cc <daq_trig_check>:

void daq_trig_check(daq_data_t* self)
{
 80078cc:	b590      	push	{r4, r7, lr}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
    if (self->enabled) // check pre trigger
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80078da:	3336      	adds	r3, #54	; 0x36
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d057      	beq.n	8007992 <daq_trig_check+0xc6>
    {
        self->trig.pretrig_cntr = self->uwTick - self->trig.uwtick_first;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80078e8:	3330      	adds	r3, #48	; 0x30
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80078f2:	3394      	adds	r3, #148	; 0x94
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007900:	3398      	adds	r3, #152	; 0x98
 8007902:	601a      	str	r2, [r3, #0]
        if (self->trig.pretrig_cntr < 0)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800790a:	3398      	adds	r3, #152	; 0x98
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	da0b      	bge.n	800792a <daq_trig_check+0x5e>
            self->trig.pretrig_cntr += PS_UWTICK_MAX;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007918:	3398      	adds	r3, #152	; 0x98
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3b01      	subs	r3, #1
 800791e:	461a      	mov	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007926:	3398      	adds	r3, #152	; 0x98
 8007928:	601a      	str	r2, [r3, #0]

        if (self->trig.pretrig_cntr > self->trig.pretrig_val && self->trig.set.mode != DISABLED)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007930:	3398      	adds	r3, #152	; 0x98
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800793a:	339c      	adds	r3, #156	; 0x9c
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	dd2d      	ble.n	800799e <daq_trig_check+0xd2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007948:	3340      	adds	r3, #64	; 0x40
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b03      	cmp	r3, #3
 800794e:	d026      	beq.n	800799e <daq_trig_check+0xd2>
        {
            if (self->mode == SCOPE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007956:	3334      	adds	r3, #52	; 0x34
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d11f      	bne.n	800799e <daq_trig_check+0xd2>
            {
                ASSERT(self->trig.awd_trig != 0);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007964:	33ac      	adds	r3, #172	; 0xac
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d103      	bne.n	8007974 <daq_trig_check+0xa8>
 800796c:	2142      	movs	r1, #66	; 0x42
 800796e:	485e      	ldr	r0, [pc, #376]	; (8007ae8 <daq_trig_check+0x21c>)
 8007970:	f004 fb59 	bl	800c026 <assert2>
                LL_ADC_SetAnalogWDMonitChannels(self->trig.adc_trig, PS_ADC_AWD self->trig.awd_trig);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800797a:	33c0      	adds	r3, #192	; 0xc0
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007984:	33ac      	adds	r3, #172	; 0xac
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	4958      	ldr	r1, [pc, #352]	; (8007aec <daq_trig_check+0x220>)
 800798c:	f7ff fdd4 	bl	8007538 <LL_ADC_SetAnalogWDMonitChannels>
 8007990:	e005      	b.n	800799e <daq_trig_check+0xd2>
            */
        }
    }
    else
    {
        self->trig.pretrig_cntr = 0;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007998:	3398      	adds	r3, #152	; 0x98
 800799a:	2200      	movs	r2, #0
 800799c:	601a      	str	r2, [r3, #0]
    }

    if (self->mode != VM) // auto trigger
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80079a4:	3334      	adds	r3, #52	; 0x34
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	f000 808f 	beq.w	8007acc <daq_trig_check+0x200>
    {
        if (self->enabled &&
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80079b4:	3336      	adds	r3, #54	; 0x36
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d060      	beq.n	8007a7e <daq_trig_check+0x1b2>
            self->trig.set.mode == AUTO &&
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80079c2:	3340      	adds	r3, #64	; 0x40
 80079c4:	781b      	ldrb	r3, [r3, #0]
        if (self->enabled &&
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d159      	bne.n	8007a7e <daq_trig_check+0x1b2>
            self->trig.is_post == 0 &&
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80079d0:	3378      	adds	r3, #120	; 0x78
 80079d2:	781b      	ldrb	r3, [r3, #0]
            self->trig.set.mode == AUTO &&
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d152      	bne.n	8007a7e <daq_trig_check+0x1b2>
            self->trig.ready == 0 &&
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80079de:	337a      	adds	r3, #122	; 0x7a
 80079e0:	781b      	ldrb	r3, [r3, #0]
            self->trig.is_post == 0 &&
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d14b      	bne.n	8007a7e <daq_trig_check+0x1b2>
            self->trig.pretrig_cntr > self->trig.auttrig_val)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80079ec:	3398      	adds	r3, #152	; 0x98
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80079f6:	33a0      	adds	r3, #160	; 0xa0
 80079f8:	681b      	ldr	r3, [r3, #0]
            self->trig.ready == 0 &&
 80079fa:	429a      	cmp	r2, r3
 80079fc:	dd3f      	ble.n	8007a7e <daq_trig_check+0x1b2>
        {
            daq_enable(self, 0);
 80079fe:	2100      	movs	r1, #0
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff fa5b 	bl	8006ebc <daq_enable>
            self->trig.pos_frst = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_ch_trig, self->trig.dma_trig);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007a0c:	33b0      	adds	r3, #176	; 0xb0
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	88db      	ldrh	r3, [r3, #6]
 8007a12:	461c      	mov	r4, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007a1a:	33b8      	adds	r3, #184	; 0xb8
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007a24:	33b4      	adds	r3, #180	; 0xb4
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	f7ff fe2a 	bl	8007684 <LL_DMA_GetDataLength>
 8007a30:	4603      	mov	r3, r0
 8007a32:	1ae3      	subs	r3, r4, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007a3c:	33b0      	adds	r3, #176	; 0xb0
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	88db      	ldrh	r3, [r3, #6]
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f7ff fcc5 	bl	80073d4 <get_last_circ_idx>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007a52:	3384      	adds	r3, #132	; 0x84
 8007a54:	601a      	str	r2, [r3, #0]

            self->trig.ready = 1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007a5c:	337a      	adds	r3, #122	; 0x7a
 8007a5e:	2201      	movs	r2, #1
 8007a60:	701a      	strb	r2, [r3, #0]
            self->trig.is_post = 0;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007a68:	3378      	adds	r3, #120	; 0x78
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]

            comm_respond(comm_ptr, PS_RESP_RDY_A, 10);
 8007a6e:	4b20      	ldr	r3, [pc, #128]	; (8007af0 <daq_trig_check+0x224>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	220a      	movs	r2, #10
 8007a74:	491f      	ldr	r1, [pc, #124]	; (8007af4 <daq_trig_check+0x228>)
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fe f90a 	bl	8005c90 <comm_respond>
 8007a7c:	e026      	b.n	8007acc <daq_trig_check+0x200>
        }
        else if (self->trig.set.mode == DISABLED &&  // trigger is disabled
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007a84:	3340      	adds	r3, #64	; 0x40
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d11f      	bne.n	8007acc <daq_trig_check+0x200>
                 self->trig.pretrig_cntr > self->trig.fullmem_val)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007a92:	3398      	adds	r3, #152	; 0x98
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007a9c:	33a8      	adds	r3, #168	; 0xa8
 8007a9e:	681b      	ldr	r3, [r3, #0]
        else if (self->trig.set.mode == DISABLED &&  // trigger is disabled
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	dd13      	ble.n	8007acc <daq_trig_check+0x200>
        {
            self->trig.ready = 1;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007aaa:	337a      	adds	r3, #122	; 0x7a
 8007aac:	2201      	movs	r2, #1
 8007aae:	701a      	strb	r2, [r3, #0]
            if (self->trig.ready_last == 0)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ab6:	337b      	adds	r3, #123	; 0x7b
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d106      	bne.n	8007acc <daq_trig_check+0x200>
                comm_respond(comm_ptr, PS_RESP_RDY_D, 10);
 8007abe:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <daq_trig_check+0x224>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	220a      	movs	r2, #10
 8007ac4:	490c      	ldr	r1, [pc, #48]	; (8007af8 <daq_trig_check+0x22c>)
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe f8e2 	bl	8005c90 <comm_respond>
        }
    }
    self->trig.ready_last = self->trig.ready;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ad2:	337a      	adds	r3, #122	; 0x7a
 8007ad4:	781a      	ldrb	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007adc:	337b      	adds	r3, #123	; 0x7b
 8007ade:	701a      	strb	r2, [r3, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd90      	pop	{r4, r7, pc}
 8007ae8:	08015164 	.word	0x08015164
 8007aec:	7dc00000 	.word	0x7dc00000
 8007af0:	2000d604 	.word	0x2000d604
 8007af4:	08015194 	.word	0x08015194
 8007af8:	080151a0 	.word	0x080151a0

08007afc <daq_trig_trigger_scope>:

void daq_trig_trigger_scope(daq_data_t* self)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08c      	sub	sp, #48	; 0x30
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
    ASSERT(self->trig.buff_trig != NULL);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007b0a:	33b0      	adds	r3, #176	; 0xb0
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d103      	bne.n	8007b1a <daq_trig_trigger_scope+0x1e>
 8007b12:	2172      	movs	r1, #114	; 0x72
 8007b14:	48b0      	ldr	r0, [pc, #704]	; (8007dd8 <daq_trig_trigger_scope+0x2dc>)
 8007b16:	f004 fa86 	bl	800c026 <assert2>
    ASSERT(self->trig.dma_ch_trig != 0);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007b20:	33b4      	adds	r3, #180	; 0xb4
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d103      	bne.n	8007b30 <daq_trig_trigger_scope+0x34>
 8007b28:	2173      	movs	r1, #115	; 0x73
 8007b2a:	48ab      	ldr	r0, [pc, #684]	; (8007dd8 <daq_trig_trigger_scope+0x2dc>)
 8007b2c:	f004 fa7b 	bl	800c026 <assert2>

    if (self->trig.ready || self->trig.post_start)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007b36:	337a      	adds	r3, #122	; 0x7a
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f040 8185 	bne.w	8007e4a <daq_trig_trigger_scope+0x34e>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007b46:	33c8      	adds	r3, #200	; 0xc8
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f040 817d 	bne.w	8007e4a <daq_trig_trigger_scope+0x34e>
        return;

    int ch_cnt = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8007b56:	33fc      	adds	r3, #252	; 0xfc
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8007b62:	33fd      	adds	r3, #253	; 0xfd
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	441a      	add	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8007b6e:	33fe      	adds	r3, #254	; 0xfe
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	441a      	add	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8007b7a:	33ff      	adds	r3, #255	; 0xff
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	4413      	add	r3, r2
 8007b80:	627b      	str	r3, [r7, #36]	; 0x24
    int ch_pos_trig = self->trig.dma_pos_catched % ch_cnt;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007b88:	33d0      	adds	r3, #208	; 0xd0
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b8e:	fb93 f2f2 	sdiv	r2, r3, r2
 8007b92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b94:	fb01 f202 	mul.w	r2, r1, r2
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	623b      	str	r3, [r7, #32]
    int ch_pos_want = ch_cnt - self->trig.order - 1;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ba2:	33c4      	adds	r3, #196	; 0xc4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	61fb      	str	r3, [r7, #28]

    if (ch_pos_want < ch_pos_trig)
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	da0e      	bge.n	8007bd4 <daq_trig_trigger_scope+0xd8>
        self->trig.dma_pos_catched -= ch_pos_trig - ch_pos_want;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007bbc:	33d0      	adds	r3, #208	; 0xd0
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	6a39      	ldr	r1, [r7, #32]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	1acb      	subs	r3, r1, r3
 8007bc6:	1ad2      	subs	r2, r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007bce:	33d0      	adds	r3, #208	; 0xd0
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	e013      	b.n	8007bfc <daq_trig_trigger_scope+0x100>
    else if (ch_pos_want > ch_pos_trig)
 8007bd4:	69fa      	ldr	r2, [r7, #28]
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	dd0f      	ble.n	8007bfc <daq_trig_trigger_scope+0x100>
        self->trig.dma_pos_catched -= ch_cnt - (ch_pos_want - ch_pos_trig);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007be2:	33d0      	adds	r3, #208	; 0xd0
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	69f9      	ldr	r1, [r7, #28]
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	1acb      	subs	r3, r1, r3
 8007bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bee:	1acb      	subs	r3, r1, r3
 8007bf0:	1ad2      	subs	r2, r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007bf8:	33d0      	adds	r3, #208	; 0xd0
 8007bfa:	601a      	str	r2, [r3, #0]


    if (self->trig.dma_pos_catched < 0)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c02:	33d0      	adds	r3, #208	; 0xd0
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	da10      	bge.n	8007c2c <daq_trig_trigger_scope+0x130>
        self->trig.dma_pos_catched += self->trig.buff_trig->len;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c10:	33d0      	adds	r3, #208	; 0xd0
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c1a:	33b0      	adds	r3, #176	; 0xb0
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	88db      	ldrh	r3, [r3, #6]
 8007c20:	441a      	add	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c28:	33d0      	adds	r3, #208	; 0xd0
 8007c2a:	601a      	str	r2, [r3, #0]

    int prev_last_idx = self->trig.dma_pos_catched - self->trig.buff_trig->chans;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c32:	33d0      	adds	r3, #208	; 0xd0
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c3c:	33b0      	adds	r3, #176	; 0xb0
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	889b      	ldrh	r3, [r3, #4]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (prev_last_idx < 0)
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	da09      	bge.n	8007c60 <daq_trig_trigger_scope+0x164>
        prev_last_idx += self->trig.buff_trig->len;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c52:	33b0      	adds	r3, #176	; 0xb0
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	88db      	ldrh	r3, [r3, #6]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	4413      	add	r3, r2
 8007c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint16_t last_val = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t prev_last_val = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	853b      	strh	r3, [r7, #40]	; 0x28

    if (self->set.bits == B8)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c6e:	3306      	adds	r3, #6
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b08      	cmp	r3, #8
 8007c74:	d118      	bne.n	8007ca8 <daq_trig_trigger_scope+0x1ac>
    {
        last_val = (uint16_t)(((uint8_t*)(self->trig.buff_trig->data))[self->trig.dma_pos_catched]);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c7c:	33b0      	adds	r3, #176	; 0xb0
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c88:	33d0      	adds	r3, #208	; 0xd0
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	857b      	strh	r3, [r7, #42]	; 0x2a
        prev_last_val = (uint16_t)(((uint8_t*)(self->trig.buff_trig->data))[prev_last_idx]);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c98:	33b0      	adds	r3, #176	; 0xb0
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca0:	4413      	add	r3, r2
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	853b      	strh	r3, [r7, #40]	; 0x28
 8007ca6:	e019      	b.n	8007cdc <daq_trig_trigger_scope+0x1e0>
    }
    else //(self->set.bits == B12)
    {
        last_val = (*((uint16_t*)(((uint8_t*)self->trig.buff_trig->data)+(self->trig.dma_pos_catched * 2))));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007cae:	33b0      	adds	r3, #176	; 0xb0
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007cba:	33d0      	adds	r3, #208	; 0xd0
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	4413      	add	r3, r2
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	857b      	strh	r3, [r7, #42]	; 0x2a
        prev_last_val = (*((uint16_t*)(((uint8_t*)self->trig.buff_trig->data)+(prev_last_idx * 2))));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ccc:	33b0      	adds	r3, #176	; 0xb0
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cd4:	0052      	lsls	r2, r2, #1
 8007cd6:	4413      	add	r3, r2
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    self->trig.all_cntr++;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ce2:	3380      	adds	r3, #128	; 0x80
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007cee:	3380      	adds	r3, #128	; 0x80
 8007cf0:	601a      	str	r2, [r3, #0]

    if (self->trig.ignore)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007cf8:	3379      	adds	r3, #121	; 0x79
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d032      	beq.n	8007d66 <daq_trig_trigger_scope+0x26a>
    {
        self->trig.ignore = 0;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d06:	3379      	adds	r3, #121	; 0x79
 8007d08:	2200      	movs	r2, #0
 8007d0a:	701a      	strb	r2, [r3, #0]

        uint32_t h = LL_ADC_GetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d12:	33c0      	adds	r3, #192	; 0xc0
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a31      	ldr	r2, [pc, #196]	; (8007ddc <daq_trig_trigger_scope+0x2e0>)
 8007d18:	4931      	ldr	r1, [pc, #196]	; (8007de0 <daq_trig_trigger_scope+0x2e4>)
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff fc7d 	bl	800761a <LL_ADC_GetAnalogWDThresholds>
 8007d20:	6138      	str	r0, [r7, #16]
        uint32_t l = LL_ADC_GetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d28:	33c0      	adds	r3, #192	; 0xc0
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007d30:	492b      	ldr	r1, [pc, #172]	; (8007de0 <daq_trig_trigger_scope+0x2e4>)
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fc71 	bl	800761a <LL_ADC_GetAnalogWDThresholds>
 8007d38:	60f8      	str	r0, [r7, #12]

        LL_ADC_SetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH, l);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d40:	33c0      	adds	r3, #192	; 0xc0
 8007d42:	6818      	ldr	r0, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4a25      	ldr	r2, [pc, #148]	; (8007ddc <daq_trig_trigger_scope+0x2e0>)
 8007d48:	4925      	ldr	r1, [pc, #148]	; (8007de0 <daq_trig_trigger_scope+0x2e4>)
 8007d4a:	f7ff fc2f 	bl	80075ac <LL_ADC_SetAnalogWDThresholds>
        LL_ADC_SetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW, h);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d54:	33c0      	adds	r3, #192	; 0xc0
 8007d56:	6818      	ldr	r0, [r3, #0]
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007d5e:	4920      	ldr	r1, [pc, #128]	; (8007de0 <daq_trig_trigger_scope+0x2e4>)
 8007d60:	f7ff fc24 	bl	80075ac <LL_ADC_SetAnalogWDThresholds>
 8007d64:	e072      	b.n	8007e4c <daq_trig_trigger_scope+0x350>
    }
    else
    {
        // trigger condition
        if ((self->trig.set.edge == RISING && last_val > self->trig.set.val && prev_last_val <= self->trig.set.val) ||
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d6c:	3341      	adds	r3, #65	; 0x41
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10f      	bne.n	8007d94 <daq_trig_trigger_scope+0x298>
 8007d74:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d7c:	3348      	adds	r3, #72	; 0x48
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	dd07      	ble.n	8007d94 <daq_trig_trigger_scope+0x298>
 8007d84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d8c:	3348      	adds	r3, #72	; 0x48
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	dd16      	ble.n	8007dc2 <daq_trig_trigger_scope+0x2c6>
            (self->trig.set.edge == FALLING && last_val < self->trig.set.val && prev_last_val >= self->trig.set.val))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d9a:	3341      	adds	r3, #65	; 0x41
 8007d9c:	781b      	ldrb	r3, [r3, #0]
        if ((self->trig.set.edge == RISING && last_val > self->trig.set.val && prev_last_val <= self->trig.set.val) ||
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d120      	bne.n	8007de4 <daq_trig_trigger_scope+0x2e8>
            (self->trig.set.edge == FALLING && last_val < self->trig.set.val && prev_last_val >= self->trig.set.val))
 8007da2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007daa:	3348      	adds	r3, #72	; 0x48
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	da18      	bge.n	8007de4 <daq_trig_trigger_scope+0x2e8>
 8007db2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007dba:	3348      	adds	r3, #72	; 0x48
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	db10      	blt.n	8007de4 <daq_trig_trigger_scope+0x2e8>
        {
            daq_trig_poststart(self, self->trig.dma_pos_catched);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007dc8:	33d0      	adds	r3, #208	; 0xd0
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f888 	bl	8007ee4 <daq_trig_poststart>
 8007dd4:	e03a      	b.n	8007e4c <daq_trig_trigger_scope+0x350>
 8007dd6:	bf00      	nop
 8007dd8:	08015164 	.word	0x08015164
 8007ddc:	0fff0000 	.word	0x0fff0000
 8007de0:	7dc00000 	.word	0x7dc00000
        }
        else // false trig, switch edges and wait for another window
        {
            self->trig.ignore = 1;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007dea:	3379      	adds	r3, #121	; 0x79
 8007dec:	2201      	movs	r2, #1
 8007dee:	701a      	strb	r2, [r3, #0]

            uint32_t h = LL_ADC_GetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007df6:	33c0      	adds	r3, #192	; 0xc0
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a16      	ldr	r2, [pc, #88]	; (8007e54 <daq_trig_trigger_scope+0x358>)
 8007dfc:	4916      	ldr	r1, [pc, #88]	; (8007e58 <daq_trig_trigger_scope+0x35c>)
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff fc0b 	bl	800761a <LL_ADC_GetAnalogWDThresholds>
 8007e04:	61b8      	str	r0, [r7, #24]
            uint32_t l = LL_ADC_GetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e0c:	33c0      	adds	r3, #192	; 0xc0
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007e14:	4910      	ldr	r1, [pc, #64]	; (8007e58 <daq_trig_trigger_scope+0x35c>)
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff fbff 	bl	800761a <LL_ADC_GetAnalogWDThresholds>
 8007e1c:	6178      	str	r0, [r7, #20]

            LL_ADC_SetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH, l);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e24:	33c0      	adds	r3, #192	; 0xc0
 8007e26:	6818      	ldr	r0, [r3, #0]
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	4a0a      	ldr	r2, [pc, #40]	; (8007e54 <daq_trig_trigger_scope+0x358>)
 8007e2c:	490a      	ldr	r1, [pc, #40]	; (8007e58 <daq_trig_trigger_scope+0x35c>)
 8007e2e:	f7ff fbbd 	bl	80075ac <LL_ADC_SetAnalogWDThresholds>
            LL_ADC_SetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW, h);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e38:	33c0      	adds	r3, #192	; 0xc0
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007e42:	4905      	ldr	r1, [pc, #20]	; (8007e58 <daq_trig_trigger_scope+0x35c>)
 8007e44:	f7ff fbb2 	bl	80075ac <LL_ADC_SetAnalogWDThresholds>
 8007e48:	e000      	b.n	8007e4c <daq_trig_trigger_scope+0x350>
        return;
 8007e4a:	bf00      	nop
        }
    }
}
 8007e4c:	3730      	adds	r7, #48	; 0x30
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	0fff0000 	.word	0x0fff0000
 8007e58:	7dc00000 	.word	0x7dc00000

08007e5c <daq_trig_trigger_la>:

void daq_trig_trigger_la(daq_data_t* self)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
    ASSERT(self->trig.buff_trig != NULL);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e6a:	33b0      	adds	r3, #176	; 0xb0
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d103      	bne.n	8007e7a <daq_trig_trigger_la+0x1e>
 8007e72:	21ba      	movs	r1, #186	; 0xba
 8007e74:	481a      	ldr	r0, [pc, #104]	; (8007ee0 <daq_trig_trigger_la+0x84>)
 8007e76:	f004 f8d6 	bl	800c026 <assert2>
    ASSERT(self->trig.dma_ch_trig != 0);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e80:	33b4      	adds	r3, #180	; 0xb4
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d103      	bne.n	8007e90 <daq_trig_trigger_la+0x34>
 8007e88:	21bb      	movs	r1, #187	; 0xbb
 8007e8a:	4815      	ldr	r0, [pc, #84]	; (8007ee0 <daq_trig_trigger_la+0x84>)
 8007e8c:	f004 f8cb 	bl	800c026 <assert2>

    if (self->trig.ready || self->trig.post_start)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e96:	337a      	adds	r3, #122	; 0x7a
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d11c      	bne.n	8007ed8 <daq_trig_trigger_la+0x7c>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ea4:	33c8      	adds	r3, #200	; 0xc8
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d115      	bne.n	8007ed8 <daq_trig_trigger_la+0x7c>
        return;

    if (self->trig.pretrig_cntr > self->trig.pretrig_val)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007eb2:	3398      	adds	r3, #152	; 0x98
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ebc:	339c      	adds	r3, #156	; 0x9c
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	dd0a      	ble.n	8007eda <daq_trig_trigger_la+0x7e>
    {
        //self->trig.pretrig_cntr = 0;
        daq_trig_poststart(self, self->trig.dma_pos_catched);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007eca:	33d0      	adds	r3, #208	; 0xd0
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f807 	bl	8007ee4 <daq_trig_poststart>
 8007ed6:	e000      	b.n	8007eda <daq_trig_trigger_la+0x7e>
        return;
 8007ed8:	bf00      	nop
    }
}
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	08015164 	.word	0x08015164

08007ee4 <daq_trig_poststart>:

void daq_trig_poststart(daq_data_t* self, int pos)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
    self->trig.post_start = 1;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ef4:	33c8      	adds	r3, #200	; 0xc8
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]
    self->trig.post_from = pos;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007f00:	33cc      	adds	r3, #204	; 0xcc
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	601a      	str	r2, [r3, #0]

    if (self->mode != LA)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007f0c:	3334      	adds	r3, #52	; 0x34
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d015      	beq.n	8007f40 <daq_trig_poststart+0x5c>
    {
#if defined(PS_ADC_MODE_ADC1) || defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
        LL_ADC_SetAnalogWDMonitChannels(ADC1, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 8007f14:	2200      	movs	r2, #0
 8007f16:	4923      	ldr	r1, [pc, #140]	; (8007fa4 <daq_trig_poststart+0xc0>)
 8007f18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007f1c:	f7ff fb0c 	bl	8007538 <LL_ADC_SetAnalogWDMonitChannels>
#endif

#if defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
        LL_ADC_SetAnalogWDMonitChannels(ADC2, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 8007f20:	2200      	movs	r2, #0
 8007f22:	4920      	ldr	r1, [pc, #128]	; (8007fa4 <daq_trig_poststart+0xc0>)
 8007f24:	4820      	ldr	r0, [pc, #128]	; (8007fa8 <daq_trig_poststart+0xc4>)
 8007f26:	f7ff fb07 	bl	8007538 <LL_ADC_SetAnalogWDMonitChannels>
#endif

#if defined(PS_ADC_MODE_ADC1234)
        LL_ADC_SetAnalogWDMonitChannels(ADC3, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	491d      	ldr	r1, [pc, #116]	; (8007fa4 <daq_trig_poststart+0xc0>)
 8007f2e:	481f      	ldr	r0, [pc, #124]	; (8007fac <daq_trig_poststart+0xc8>)
 8007f30:	f7ff fb02 	bl	8007538 <LL_ADC_SetAnalogWDMonitChannels>
        LL_ADC_SetAnalogWDMonitChannels(ADC4, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 8007f34:	2200      	movs	r2, #0
 8007f36:	491b      	ldr	r1, [pc, #108]	; (8007fa4 <daq_trig_poststart+0xc0>)
 8007f38:	481d      	ldr	r0, [pc, #116]	; (8007fb0 <daq_trig_poststart+0xcc>)
 8007f3a:	f7ff fafd 	bl	8007538 <LL_ADC_SetAnalogWDMonitChannels>
 8007f3e:	e008      	b.n	8007f52 <daq_trig_poststart+0x6e>
#endif
    }
    else
    {
        NVIC_DisableIRQ(self->trig.exti_trig);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007f46:	33bc      	adds	r3, #188	; 0xbc
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	b25b      	sxtb	r3, r3
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff fa65 	bl	800741c <__NVIC_DisableIRQ>
    }

    self->trig.pretrig_cntr = 0;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007f58:	3398      	adds	r3, #152	; 0x98
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]

    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]
    ASSERT(xSemaphoreGiveFromISR(sem2_trig, &xHigherPriorityTaskWoken) == pdPASS);
 8007f62:	4b14      	ldr	r3, [pc, #80]	; (8007fb4 <daq_trig_poststart+0xd0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f107 020c 	add.w	r2, r7, #12
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f008 fde1 	bl	8010b34 <xQueueGiveFromISR>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d003      	beq.n	8007f80 <daq_trig_poststart+0x9c>
 8007f78:	21e3      	movs	r1, #227	; 0xe3
 8007f7a:	480f      	ldr	r0, [pc, #60]	; (8007fb8 <daq_trig_poststart+0xd4>)
 8007f7c:	f004 f853 	bl	800c026 <assert2>
    if (xHigherPriorityTaskWoken != pdFALSE)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <daq_trig_poststart+0xb8>
        portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d007      	beq.n	8007f9c <daq_trig_poststart+0xb8>
 8007f8c:	4b0b      	ldr	r3, [pc, #44]	; (8007fbc <daq_trig_poststart+0xd8>)
 8007f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	f3bf 8f6f 	isb	sy
}
 8007f9c:	bf00      	nop
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	7dc00000 	.word	0x7dc00000
 8007fa8:	50000100 	.word	0x50000100
 8007fac:	50000400 	.word	0x50000400
 8007fb0:	50000500 	.word	0x50000500
 8007fb4:	2000d69c 	.word	0x2000d69c
 8007fb8:	08015164 	.word	0x08015164
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <daq_trig_postcount>:

volatile int timeout;

void daq_trig_postcount(daq_data_t* self)
{
 8007fc0:	b5b0      	push	{r4, r5, r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
    int last_idx = self->trig.post_from;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007fce:	33cc      	adds	r3, #204	; 0xcc
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	617b      	str	r3, [r7, #20]

    ASSERT(self->trig.buff_trig != NULL);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007fda:	33b0      	adds	r3, #176	; 0xb0
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d103      	bne.n	8007fea <daq_trig_postcount+0x2a>
 8007fe2:	21ee      	movs	r1, #238	; 0xee
 8007fe4:	4875      	ldr	r0, [pc, #468]	; (80081bc <daq_trig_postcount+0x1fc>)
 8007fe6:	f004 f81e 	bl	800c026 <assert2>

    self->trig.is_post = 1;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ff0:	3378      	adds	r3, #120	; 0x78
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	701a      	strb	r2, [r3, #0]
    self->trig.cntr++;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ffc:	337c      	adds	r3, #124	; 0x7c
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008008:	337c      	adds	r3, #124	; 0x7c
 800800a:	601a      	str	r2, [r3, #0]

    if (self->mode == SCOPE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008012:	3334      	adds	r3, #52	; 0x34
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	f040 80d4 	bne.w	80081c4 <daq_trig_postcount+0x204>
    {
        self->trig.pos_trig = last_idx + self->trig.order;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008022:	33c4      	adds	r3, #196	; 0xc4
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	441a      	add	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008030:	3388      	adds	r3, #136	; 0x88
 8008032:	601a      	str	r2, [r3, #0]
        if (self->trig.pos_trig >= self->trig.buff_trig->len)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800803a:	3388      	adds	r3, #136	; 0x88
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008044:	33b0      	adds	r3, #176	; 0xb0
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	88db      	ldrh	r3, [r3, #6]
 800804a:	429a      	cmp	r2, r3
 800804c:	db10      	blt.n	8008070 <daq_trig_postcount+0xb0>
            self->trig.pos_trig -= self->trig.buff_trig->len;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008054:	3388      	adds	r3, #136	; 0x88
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800805e:	33b0      	adds	r3, #176	; 0xb0
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	88db      	ldrh	r3, [r3, #6]
 8008064:	1ad2      	subs	r2, r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800806c:	3388      	adds	r3, #136	; 0x88
 800806e:	601a      	str	r2, [r3, #0]

        int post = (int)((float)self->set.mem * ((float)(100 - self->trig.set.pretrigger) / 100.0));
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008076:	3304      	adds	r3, #4
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008082:	ee17 0a90 	vmov	r0, s15
 8008086:	f7f8 fa77 	bl	8000578 <__aeabi_f2d>
 800808a:	4604      	mov	r4, r0
 800808c:	460d      	mov	r5, r1
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008094:	333c      	adds	r3, #60	; 0x3c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800809c:	ee07 3a90 	vmov	s15, r3
 80080a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080a4:	ee17 0a90 	vmov	r0, s15
 80080a8:	f7f8 fa66 	bl	8000578 <__aeabi_f2d>
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	4b43      	ldr	r3, [pc, #268]	; (80081c0 <daq_trig_postcount+0x200>)
 80080b2:	f7f8 fbe3 	bl	800087c <__aeabi_ddiv>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4620      	mov	r0, r4
 80080bc:	4629      	mov	r1, r5
 80080be:	f7f8 fab3 	bl	8000628 <__aeabi_dmul>
 80080c2:	4603      	mov	r3, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	4618      	mov	r0, r3
 80080c8:	4621      	mov	r1, r4
 80080ca:	f7f8 fd5d 	bl	8000b88 <__aeabi_d2iz>
 80080ce:	4603      	mov	r3, r0
 80080d0:	613b      	str	r3, [r7, #16]
        self->trig.posttrig_size = post * self->trig.buff_trig->chans;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80080d8:	33b0      	adds	r3, #176	; 0xb0
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	889b      	ldrh	r3, [r3, #4]
 80080de:	461a      	mov	r2, r3
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	fb03 f202 	mul.w	r2, r3, r2
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80080ec:	33a4      	adds	r3, #164	; 0xa4
 80080ee:	601a      	str	r2, [r3, #0]

        self->trig.pos_last = self->trig.pos_trig + self->trig.posttrig_size;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80080f6:	3388      	adds	r3, #136	; 0x88
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008100:	33a4      	adds	r3, #164	; 0xa4
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	441a      	add	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800810c:	338c      	adds	r3, #140	; 0x8c
 800810e:	601a      	str	r2, [r3, #0]
        if (self->trig.pos_last >= self->trig.buff_trig->len)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008116:	338c      	adds	r3, #140	; 0x8c
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008120:	33b0      	adds	r3, #176	; 0xb0
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	88db      	ldrh	r3, [r3, #6]
 8008126:	429a      	cmp	r2, r3
 8008128:	db10      	blt.n	800814c <daq_trig_postcount+0x18c>
            self->trig.pos_last -= self->trig.buff_trig->len;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008130:	338c      	adds	r3, #140	; 0x8c
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800813a:	33b0      	adds	r3, #176	; 0xb0
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	88db      	ldrh	r3, [r3, #6]
 8008140:	1ad2      	subs	r2, r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008148:	338c      	adds	r3, #140	; 0x8c
 800814a:	601a      	str	r2, [r3, #0]

        self->trig.pos_frst = self->trig.pos_trig - ((self->set.mem - post + 1) * self->trig.buff_trig->chans) + 1;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008152:	3388      	adds	r3, #136	; 0x88
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800815c:	3304      	adds	r3, #4
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	4619      	mov	r1, r3
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	1acb      	subs	r3, r1, r3
 8008166:	1c59      	adds	r1, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800816e:	33b0      	adds	r3, #176	; 0xb0
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	889b      	ldrh	r3, [r3, #4]
 8008174:	fb03 f301 	mul.w	r3, r3, r1
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008182:	3384      	adds	r3, #132	; 0x84
 8008184:	601a      	str	r2, [r3, #0]
        //if (self->trig.pos_frst >= self->trig.buff_trig->len)
        //    self->trig.pos_frst -= self->trig.buff_trig->len;
        if (self->trig.pos_frst < 0)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800818c:	3384      	adds	r3, #132	; 0x84
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	f280 80b0 	bge.w	80082f6 <daq_trig_postcount+0x336>
            self->trig.pos_frst += self->trig.buff_trig->len;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800819c:	3384      	adds	r3, #132	; 0x84
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80081a6:	33b0      	adds	r3, #176	; 0xb0
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	88db      	ldrh	r3, [r3, #6]
 80081ac:	441a      	add	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80081b4:	3384      	adds	r3, #132	; 0x84
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	e09d      	b.n	80082f6 <daq_trig_postcount+0x336>
 80081ba:	bf00      	nop
 80081bc:	08015164 	.word	0x08015164
 80081c0:	40590000 	.word	0x40590000
    }
    else // mode == LA
    {
        self->trig.pos_trig = last_idx;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80081ca:	3388      	adds	r3, #136	; 0x88
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	601a      	str	r2, [r3, #0]
        self->trig.posttrig_size = (int)((float)self->set.mem * ((float)(100 - self->trig.set.pretrigger) / 100.0));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80081d6:	3304      	adds	r3, #4
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e2:	ee17 0a90 	vmov	r0, s15
 80081e6:	f7f8 f9c7 	bl	8000578 <__aeabi_f2d>
 80081ea:	4604      	mov	r4, r0
 80081ec:	460d      	mov	r5, r1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80081f4:	333c      	adds	r3, #60	; 0x3c
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80081fc:	ee07 3a90 	vmov	s15, r3
 8008200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008204:	ee17 0a90 	vmov	r0, s15
 8008208:	f7f8 f9b6 	bl	8000578 <__aeabi_f2d>
 800820c:	f04f 0200 	mov.w	r2, #0
 8008210:	4b7c      	ldr	r3, [pc, #496]	; (8008404 <daq_trig_postcount+0x444>)
 8008212:	f7f8 fb33 	bl	800087c <__aeabi_ddiv>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	4620      	mov	r0, r4
 800821c:	4629      	mov	r1, r5
 800821e:	f7f8 fa03 	bl	8000628 <__aeabi_dmul>
 8008222:	4603      	mov	r3, r0
 8008224:	460c      	mov	r4, r1
 8008226:	4618      	mov	r0, r3
 8008228:	4621      	mov	r1, r4
 800822a:	f7f8 fcad 	bl	8000b88 <__aeabi_d2iz>
 800822e:	4602      	mov	r2, r0
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008236:	33a4      	adds	r3, #164	; 0xa4
 8008238:	601a      	str	r2, [r3, #0]

        self->trig.pos_last = self->trig.pos_trig + self->trig.posttrig_size;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008240:	3388      	adds	r3, #136	; 0x88
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800824a:	33a4      	adds	r3, #164	; 0xa4
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	441a      	add	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008256:	338c      	adds	r3, #140	; 0x8c
 8008258:	601a      	str	r2, [r3, #0]
        if (self->trig.pos_last >= self->trig.buff_trig->len)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008260:	338c      	adds	r3, #140	; 0x8c
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800826a:	33b0      	adds	r3, #176	; 0xb0
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	88db      	ldrh	r3, [r3, #6]
 8008270:	429a      	cmp	r2, r3
 8008272:	db10      	blt.n	8008296 <daq_trig_postcount+0x2d6>
            self->trig.pos_last -= self->trig.buff_trig->len;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800827a:	338c      	adds	r3, #140	; 0x8c
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008284:	33b0      	adds	r3, #176	; 0xb0
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	88db      	ldrh	r3, [r3, #6]
 800828a:	1ad2      	subs	r2, r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008292:	338c      	adds	r3, #140	; 0x8c
 8008294:	601a      	str	r2, [r3, #0]

        self->trig.pos_frst = self->trig.pos_trig - (self->set.mem - self->trig.posttrig_size) + 1; // +1 ??
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800829c:	3388      	adds	r3, #136	; 0x88
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80082a6:	3304      	adds	r3, #4
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	4619      	mov	r1, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80082b2:	33a4      	adds	r3, #164	; 0xa4
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	1acb      	subs	r3, r1, r3
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80082c2:	3384      	adds	r3, #132	; 0x84
 80082c4:	601a      	str	r2, [r3, #0]
        if (self->trig.pos_frst < 0)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80082cc:	3384      	adds	r3, #132	; 0x84
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	da10      	bge.n	80082f6 <daq_trig_postcount+0x336>
            self->trig.pos_frst += self->trig.buff_trig->len;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80082da:	3384      	adds	r3, #132	; 0x84
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80082e4:	33b0      	adds	r3, #176	; 0xb0
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	88db      	ldrh	r3, [r3, #6]
 80082ea:	441a      	add	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80082f2:	3384      	adds	r3, #132	; 0x84
 80082f4:	601a      	str	r2, [r3, #0]
    }

    int pos_last_len = self->trig.buff_trig->len - self->trig.pos_last;  // DMA len of last valid point to compare
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80082fc:	33b0      	adds	r3, #176	; 0xb0
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	88db      	ldrh	r3, [r3, #6]
 8008302:	461a      	mov	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800830a:	338c      	adds	r3, #140	; 0x8c
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	60fb      	str	r3, [r7, #12]
    //int uwTick_frist = uwTick;
    //timeout = (int)(((float)self->trig.posttrig_size + PS_MEM_RESERVE) * (1.0 / self->set.fs) * 1000.0);
    //if (timeout < 1)
    //    timeout = 1;

    int target_prev = -1;
 8008312:	f04f 33ff 	mov.w	r3, #4294967295
 8008316:	61fb      	str	r3, [r7, #28]
    int dma_changes = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	61bb      	str	r3, [r7, #24]
    while(1)
    {
        iwdg_feed(); // 1
 800831c:	f7ff f8fe 	bl	800751c <iwdg_feed>
        //if (uwTick_diff < 0)
        //    uwTick_diff += PS_UWTICK_MAX;

        // 15 instructions worst case
        // Cortex M3 - 1.25 IPC per core -> 72/(15/1.25) = 6 MHz max
        int target = LL_DMA_GetDataLength(self->trig.dma_trig, self->trig.dma_ch_trig); // 6
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008326:	33b8      	adds	r3, #184	; 0xb8
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008330:	33b4      	adds	r3, #180	; 0xb4
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4619      	mov	r1, r3
 8008336:	4610      	mov	r0, r2
 8008338:	f7ff f9a4 	bl	8007684 <LL_DMA_GetDataLength>
 800833c:	4603      	mov	r3, r0
 800833e:	60bb      	str	r3, [r7, #8]
        if (target != target_prev)
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	429a      	cmp	r2, r3
 8008346:	d002      	beq.n	800834e <daq_trig_postcount+0x38e>
            dma_changes++;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	3301      	adds	r3, #1
 800834c:	61bb      	str	r3, [r7, #24]
        target_prev = target;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	61fb      	str	r3, [r7, #28]

        if (target == pos_last_len || dma_changes == self->trig.posttrig_size)// || uwTick_diff > timeout) // 5
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	429a      	cmp	r2, r3
 8008358:	d007      	beq.n	800836a <daq_trig_postcount+0x3aa>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008360:	33a4      	adds	r3, #164	; 0xa4
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	429a      	cmp	r2, r3
 8008368:	d1d8      	bne.n	800831c <daq_trig_postcount+0x35c>
        {
            LL_TIM_DisableCounter(PS_TIM_DAQ);
 800836a:	4827      	ldr	r0, [pc, #156]	; (8008408 <daq_trig_postcount+0x448>)
 800836c:	f7ff f9f4 	bl	8007758 <LL_TIM_DisableCounter>

            daq_enable(self, 0);
 8008370:	2100      	movs	r1, #0
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7fe fda2 	bl	8006ebc <daq_enable>
            self->trig.ready = 1;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800837e:	337a      	adds	r3, #122	; 0x7a
 8008380:	2201      	movs	r2, #1
 8008382:	701a      	strb	r2, [r3, #0]
            self->trig.is_post = 0;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800838a:	3378      	adds	r3, #120	; 0x78
 800838c:	2200      	movs	r2, #0
 800838e:	701a      	strb	r2, [r3, #0]

            self->trig.pos_diff = self->trig.pos_last - self->trig.pos_trig;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008396:	338c      	adds	r3, #140	; 0x8c
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083a0:	3388      	adds	r3, #136	; 0x88
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	1ad2      	subs	r2, r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083ac:	3390      	adds	r3, #144	; 0x90
 80083ae:	601a      	str	r2, [r3, #0]
            if (self->trig.pos_diff < 0)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083b6:	3390      	adds	r3, #144	; 0x90
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	da10      	bge.n	80083e0 <daq_trig_postcount+0x420>
                self->trig.pos_diff += self->trig.buff_trig->len;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083c4:	3390      	adds	r3, #144	; 0x90
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083ce:	33b0      	adds	r3, #176	; 0xb0
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	88db      	ldrh	r3, [r3, #6]
 80083d4:	441a      	add	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083dc:	3390      	adds	r3, #144	; 0x90
 80083de:	601a      	str	r2, [r3, #0]

            comm_respond(comm_ptr, PS_RESP_RDY_N, 10); // data ready
 80083e0:	4b0a      	ldr	r3, [pc, #40]	; (800840c <daq_trig_postcount+0x44c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	220a      	movs	r2, #10
 80083e6:	490a      	ldr	r1, [pc, #40]	; (8008410 <daq_trig_postcount+0x450>)
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fd fc51 	bl	8005c90 <comm_respond>

            break;
 80083ee:	bf00      	nop
        }
    }
    self->trig.post_start = 0;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083f6:	33c8      	adds	r3, #200	; 0xc8
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]
}
 80083fc:	bf00      	nop
 80083fe:	3720      	adds	r7, #32
 8008400:	46bd      	mov	sp, r7
 8008402:	bdb0      	pop	{r4, r5, r7, pc}
 8008404:	40590000 	.word	0x40590000
 8008408:	40000400 	.word	0x40000400
 800840c:	2000d604 	.word	0x2000d604
 8008410:	080151ac 	.word	0x080151ac

08008414 <daq_trig_update>:

void daq_trig_update(daq_data_t* self)
{
 8008414:	b590      	push	{r4, r7, lr}
 8008416:	b085      	sub	sp, #20
 8008418:	af02      	add	r7, sp, #8
 800841a:	6078      	str	r0, [r7, #4]
    daq_trig_set(self, self->trig.set.ch, self->trig.set.val_percent,
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008422:	3344      	adds	r3, #68	; 0x44
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	461c      	mov	r4, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800842e:	334c      	adds	r3, #76	; 0x4c
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	b2d9      	uxtb	r1, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800843a:	3341      	adds	r3, #65	; 0x41
 800843c:	7818      	ldrb	r0, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008444:	3340      	adds	r3, #64	; 0x40
 8008446:	781a      	ldrb	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800844e:	333c      	adds	r3, #60	; 0x3c
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	9301      	str	r3, [sp, #4]
 8008454:	9200      	str	r2, [sp, #0]
 8008456:	4603      	mov	r3, r0
 8008458:	460a      	mov	r2, r1
 800845a:	4621      	mov	r1, r4
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f805 	bl	800846c <daq_trig_set>
                 self->trig.set.edge, self->trig.set.mode, self->trig.set.pretrigger);
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	bd90      	pop	{r4, r7, pc}
	...

0800846c <daq_trig_set>:
{
    daq_trig_set(self, 0, self->trig.set.val_percent, self->trig.set.edge, DISABLED, self->trig.set.pretrigger);
}

int daq_trig_set(daq_data_t* self, uint32_t ch, uint8_t level, enum trig_edge edge, enum trig_mode mode, int pretrigger)
{
 800846c:	b5b0      	push	{r4, r5, r7, lr}
 800846e:	b08c      	sub	sp, #48	; 0x30
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4611      	mov	r1, r2
 8008478:	461a      	mov	r2, r3
 800847a:	460b      	mov	r3, r1
 800847c:	71fb      	strb	r3, [r7, #7]
 800847e:	4613      	mov	r3, r2
 8008480:	71bb      	strb	r3, [r7, #6]
    if((level < 0 || level > 100) ||
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	2b64      	cmp	r3, #100	; 0x64
 8008486:	d808      	bhi.n	800849a <daq_trig_set+0x2e>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b04      	cmp	r3, #4
 800848c:	d805      	bhi.n	800849a <daq_trig_set+0x2e>
       (ch < 0 || ch > 4) ||
 800848e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008490:	2b63      	cmp	r3, #99	; 0x63
 8008492:	dc02      	bgt.n	800849a <daq_trig_set+0x2e>
       (pretrigger > 99 || pretrigger < 1))
 8008494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008496:	2b00      	cmp	r3, #0
 8008498:	dc02      	bgt.n	80084a0 <daq_trig_set+0x34>
    {
        return -1;
 800849a:	f04f 33ff 	mov.w	r3, #4294967295
 800849e:	e314      	b.n	8008aca <daq_trig_set+0x65e>
    }

    daq_enable(self, 0);
 80084a0:	2100      	movs	r1, #0
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7fe fd0a 	bl	8006ebc <daq_enable>
    daq_reset(self);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7fe fc99 	bl	8006de0 <daq_reset>
    ADC_TypeDef* adc = ADC1;
 80084ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80084b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (self->mode == LA)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80084ba:	3334      	adds	r3, #52	; 0x34
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d112      	bne.n	80084e8 <daq_trig_set+0x7c>
    {
        self->trig.buff_trig = &self->buff1;
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80084ca:	33b0      	adds	r3, #176	; 0xb0
 80084cc:	601a      	str	r2, [r3, #0]
        self->trig.dma_ch_trig = PS_DMA_CH_LA;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80084d4:	33b4      	adds	r3, #180	; 0xb4
 80084d6:	2206      	movs	r2, #6
 80084d8:	601a      	str	r2, [r3, #0]
        self->trig.dma_trig = PS_DMA_LA;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80084e0:	33b8      	adds	r3, #184	; 0xb8
 80084e2:	4ab4      	ldr	r2, [pc, #720]	; (80087b4 <daq_trig_set+0x348>)
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	e097      	b.n	8008618 <daq_trig_set+0x1ac>
    }
    else
    {
        int ch2 = ch;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	62bb      	str	r3, [r7, #40]	; 0x28
        if (ch == 0 || mode == DISABLED)
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <daq_trig_set+0x8e>
 80084f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d126      	bne.n	8008548 <daq_trig_set+0xdc>
        {
            if (self->set.ch1_en) ch2 = 1;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8008500:	33fc      	adds	r3, #252	; 0xfc
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <daq_trig_set+0xa2>
 8008508:	2301      	movs	r3, #1
 800850a:	62bb      	str	r3, [r7, #40]	; 0x28
 800850c:	e01c      	b.n	8008548 <daq_trig_set+0xdc>
            else if (self->set.ch2_en) ch2 = 2;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8008514:	33fd      	adds	r3, #253	; 0xfd
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <daq_trig_set+0xb6>
 800851c:	2302      	movs	r3, #2
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008520:	e012      	b.n	8008548 <daq_trig_set+0xdc>
            else if (self->set.ch3_en) ch2 = 3;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8008528:	33fe      	adds	r3, #254	; 0xfe
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <daq_trig_set+0xca>
 8008530:	2303      	movs	r3, #3
 8008532:	62bb      	str	r3, [r7, #40]	; 0x28
 8008534:	e008      	b.n	8008548 <daq_trig_set+0xdc>
            else if (self->set.ch4_en) ch2 = 4;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800853c:	33ff      	adds	r3, #255	; 0xff
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <daq_trig_set+0xdc>
 8008544:	2304      	movs	r3, #4
 8008546:	62bb      	str	r3, [r7, #40]	; 0x28
                if (ch2 == 4) self->trig.order = ch_cnt - it;
        }

#elif defined(PS_ADC_MODE_ADC1234)

        self->trig.order = 0;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800854e:	33c4      	adds	r3, #196	; 0xc4
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
        if (ch2 == 1)
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	2b01      	cmp	r3, #1
 8008558:	d114      	bne.n	8008584 <daq_trig_set+0x118>
        {
            adc = ADC1;
 800855a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800855e:	62fb      	str	r3, [r7, #44]	; 0x2c
            self->trig.buff_trig = &self->buff1;
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008568:	33b0      	adds	r3, #176	; 0xb0
 800856a:	601a      	str	r2, [r3, #0]
            self->trig.dma_ch_trig = PS_DMA_CH_ADC1;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008572:	33b4      	adds	r3, #180	; 0xb4
 8008574:	2201      	movs	r2, #1
 8008576:	601a      	str	r2, [r3, #0]
            self->trig.dma_trig = PS_DMA_ADC1;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800857e:	33b8      	adds	r3, #184	; 0xb8
 8008580:	4a8c      	ldr	r2, [pc, #560]	; (80087b4 <daq_trig_set+0x348>)
 8008582:	601a      	str	r2, [r3, #0]
        }
        if (ch2 == 2)
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	2b02      	cmp	r3, #2
 8008588:	d116      	bne.n	80085b8 <daq_trig_set+0x14c>
        {
            adc = ADC2;
 800858a:	4b8b      	ldr	r3, [pc, #556]	; (80087b8 <daq_trig_set+0x34c>)
 800858c:	62fb      	str	r3, [r7, #44]	; 0x2c
            self->trig.buff_trig = &self->buff2;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f103 020c 	add.w	r2, r3, #12
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800859a:	33b0      	adds	r3, #176	; 0xb0
 800859c:	601a      	str	r2, [r3, #0]
            self->trig.dma_ch_trig = PS_DMA_CH_ADC2;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80085a4:	33b4      	adds	r3, #180	; 0xb4
 80085a6:	2201      	movs	r2, #1
 80085a8:	601a      	str	r2, [r3, #0]
            self->trig.dma_trig = PS_DMA_ADC2;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80085b0:	33b8      	adds	r3, #184	; 0xb8
 80085b2:	4a82      	ldr	r2, [pc, #520]	; (80087bc <daq_trig_set+0x350>)
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	e02f      	b.n	8008618 <daq_trig_set+0x1ac>
        }
        else if (ch2 == 3)
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d116      	bne.n	80085ec <daq_trig_set+0x180>
        {
            adc = ADC3;
 80085be:	4b80      	ldr	r3, [pc, #512]	; (80087c0 <daq_trig_set+0x354>)
 80085c0:	62fb      	str	r3, [r7, #44]	; 0x2c
            self->trig.buff_trig = &self->buff3;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f103 0218 	add.w	r2, r3, #24
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80085ce:	33b0      	adds	r3, #176	; 0xb0
 80085d0:	601a      	str	r2, [r3, #0]
            self->trig.dma_ch_trig = PS_DMA_CH_ADC3;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80085d8:	33b4      	adds	r3, #180	; 0xb4
 80085da:	2205      	movs	r2, #5
 80085dc:	601a      	str	r2, [r3, #0]
            self->trig.dma_trig = PS_DMA_ADC3;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80085e4:	33b8      	adds	r3, #184	; 0xb8
 80085e6:	4a75      	ldr	r2, [pc, #468]	; (80087bc <daq_trig_set+0x350>)
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e015      	b.n	8008618 <daq_trig_set+0x1ac>
        }
        else // if (ch2 == 4)
        {
            adc = ADC4;
 80085ec:	4b75      	ldr	r3, [pc, #468]	; (80087c4 <daq_trig_set+0x358>)
 80085ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            self->trig.buff_trig = &self->buff4;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80085fc:	33b0      	adds	r3, #176	; 0xb0
 80085fe:	601a      	str	r2, [r3, #0]
            self->trig.dma_ch_trig = PS_DMA_CH_ADC4;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008606:	33b4      	adds	r3, #180	; 0xb4
 8008608:	2202      	movs	r2, #2
 800860a:	601a      	str	r2, [r3, #0]
            self->trig.dma_trig = PS_DMA_ADC4;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008612:	33b8      	adds	r3, #184	; 0xb8
 8008614:	4a69      	ldr	r2, [pc, #420]	; (80087bc <daq_trig_set+0x350>)
 8008616:	601a      	str	r2, [r3, #0]
        }

#endif
    }

    self->trig.fullmem_val = (int)(((1.0 / (float)self->set.fs) * (float)self->set.mem) * (float)PS_SYSTICK_FREQ) + 1;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4618      	mov	r0, r3
 8008622:	f7f7 ffa9 	bl	8000578 <__aeabi_f2d>
 8008626:	4603      	mov	r3, r0
 8008628:	460c      	mov	r4, r1
 800862a:	461a      	mov	r2, r3
 800862c:	4623      	mov	r3, r4
 800862e:	f04f 0000 	mov.w	r0, #0
 8008632:	4965      	ldr	r1, [pc, #404]	; (80087c8 <daq_trig_set+0x35c>)
 8008634:	f7f8 f922 	bl	800087c <__aeabi_ddiv>
 8008638:	4603      	mov	r3, r0
 800863a:	460c      	mov	r4, r1
 800863c:	4625      	mov	r5, r4
 800863e:	461c      	mov	r4, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008646:	3304      	adds	r3, #4
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008652:	ee17 0a90 	vmov	r0, s15
 8008656:	f7f7 ff8f 	bl	8000578 <__aeabi_f2d>
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	4620      	mov	r0, r4
 8008660:	4629      	mov	r1, r5
 8008662:	f7f7 ffe1 	bl	8000628 <__aeabi_dmul>
 8008666:	4603      	mov	r3, r0
 8008668:	460c      	mov	r4, r1
 800866a:	4618      	mov	r0, r3
 800866c:	4621      	mov	r1, r4
 800866e:	f04f 0200 	mov.w	r2, #0
 8008672:	4b56      	ldr	r3, [pc, #344]	; (80087cc <daq_trig_set+0x360>)
 8008674:	f7f7 ffd8 	bl	8000628 <__aeabi_dmul>
 8008678:	4603      	mov	r3, r0
 800867a:	460c      	mov	r4, r1
 800867c:	4618      	mov	r0, r3
 800867e:	4621      	mov	r1, r4
 8008680:	f7f8 fa82 	bl	8000b88 <__aeabi_d2iz>
 8008684:	4603      	mov	r3, r0
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800868e:	33a8      	adds	r3, #168	; 0xa8
 8008690:	601a      	str	r2, [r3, #0]
    self->trig.auttrig_val = PS_AUTRIG_MIN_MS + (int)((float)self->trig.fullmem_val * 1.0);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008698:	33a8      	adds	r3, #168	; 0xa8
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	ee07 3a90 	vmov	s15, r3
 80086a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086a8:	ee17 3a90 	vmov	r3, s15
 80086ac:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80086b6:	33a0      	adds	r3, #160	; 0xa0
 80086b8:	601a      	str	r2, [r3, #0]
    self->trig.adc_trig = adc;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80086c0:	33c0      	adds	r3, #192	; 0xc0
 80086c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086c4:	601a      	str	r2, [r3, #0]

    if (ch == 0 || mode == DISABLED)
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <daq_trig_set+0x268>
 80086cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d12b      	bne.n	800872c <daq_trig_set+0x2c0>
    {
        ASSERT(self->trig.exti_trig != 0);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80086da:	33bc      	adds	r3, #188	; 0xbc
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d104      	bne.n	80086ec <daq_trig_set+0x280>
 80086e2:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80086e6:	483a      	ldr	r0, [pc, #232]	; (80087d0 <daq_trig_set+0x364>)
 80086e8:	f003 fc9d 	bl	800c026 <assert2>

        NVIC_DisableIRQ(self->trig.exti_trig);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80086f2:	33bc      	adds	r3, #188	; 0xbc
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	b25b      	sxtb	r3, r3
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe fe8f 	bl	800741c <__NVIC_DisableIRQ>
        LL_ADC_SetAnalogWDMonitChannels(adc, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 80086fe:	2200      	movs	r2, #0
 8008700:	4934      	ldr	r1, [pc, #208]	; (80087d4 <daq_trig_set+0x368>)
 8008702:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008704:	f7fe ff18 	bl	8007538 <LL_ADC_SetAnalogWDMonitChannels>

        self->trig.set.ch = 0;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800870e:	3344      	adds	r3, #68	; 0x44
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
        self->trig.set.mode = DISABLED;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800871a:	3340      	adds	r3, #64	; 0x40
 800871c:	2203      	movs	r2, #3
 800871e:	701a      	strb	r2, [r3, #0]

        daq_enable(self, 1);
 8008720:	2101      	movs	r1, #1
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7fe fbca 	bl	8006ebc <daq_enable>
        return 0;
 8008728:	2300      	movs	r3, #0
 800872a:	e1ce      	b.n	8008aca <daq_trig_set+0x65e>
    }

    if (self->mode == LA)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008732:	3334      	adds	r3, #52	; 0x34
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b02      	cmp	r3, #2
 8008738:	f040 80a7 	bne.w	800888a <daq_trig_set+0x41e>
    {

        LL_ADC_SetAnalogWDMonitChannels(adc, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 800873c:	2200      	movs	r2, #0
 800873e:	4925      	ldr	r1, [pc, #148]	; (80087d4 <daq_trig_set+0x368>)
 8008740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008742:	f7fe fef9 	bl	8007538 <LL_ADC_SetAnalogWDMonitChannels>

        LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8008746:	f107 0310 	add.w	r3, r7, #16
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	605a      	str	r2, [r3, #4]
 8008750:	609a      	str	r2, [r3, #8]
        uint32_t extiline = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t exti = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	623b      	str	r3, [r7, #32]

        if (ch == 1)
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d10b      	bne.n	8008778 <daq_trig_set+0x30c>
        {
            self->trig.exti_trig = PS_LA_IRQ_EXTI1;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008766:	33bc      	adds	r3, #188	; 0xbc
 8008768:	2206      	movs	r2, #6
 800876a:	601a      	str	r2, [r3, #0]
            extiline = PS_LA_EXTILINE1;
 800876c:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8008770:	627b      	str	r3, [r7, #36]	; 0x24
            exti = PS_LA_EXTI1;
 8008772:	2301      	movs	r3, #1
 8008774:	623b      	str	r3, [r7, #32]
 8008776:	e03a      	b.n	80087ee <daq_trig_set+0x382>
        }
        else if (ch == 2)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b02      	cmp	r3, #2
 800877c:	d10b      	bne.n	8008796 <daq_trig_set+0x32a>
        {
            self->trig.exti_trig = PS_LA_IRQ_EXTI2;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008784:	33bc      	adds	r3, #188	; 0xbc
 8008786:	2207      	movs	r2, #7
 8008788:	601a      	str	r2, [r3, #0]
            extiline = PS_LA_EXTILINE2;
 800878a:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
            exti = PS_LA_EXTI2;
 8008790:	2302      	movs	r3, #2
 8008792:	623b      	str	r3, [r7, #32]
 8008794:	e02b      	b.n	80087ee <daq_trig_set+0x382>
        }
        else if (ch == 3)
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b03      	cmp	r3, #3
 800879a:	d11d      	bne.n	80087d8 <daq_trig_set+0x36c>
        {
            self->trig.exti_trig = PS_LA_IRQ_EXTI3;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80087a2:	33bc      	adds	r3, #188	; 0xbc
 80087a4:	2208      	movs	r2, #8
 80087a6:	601a      	str	r2, [r3, #0]
            extiline = PS_LA_EXTILINE3;
 80087a8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
            exti = PS_LA_EXTI3;
 80087ae:	2304      	movs	r3, #4
 80087b0:	623b      	str	r3, [r7, #32]
 80087b2:	e01c      	b.n	80087ee <daq_trig_set+0x382>
 80087b4:	40020000 	.word	0x40020000
 80087b8:	50000100 	.word	0x50000100
 80087bc:	40020400 	.word	0x40020400
 80087c0:	50000400 	.word	0x50000400
 80087c4:	50000500 	.word	0x50000500
 80087c8:	3ff00000 	.word	0x3ff00000
 80087cc:	408f4000 	.word	0x408f4000
 80087d0:	08015164 	.word	0x08015164
 80087d4:	7dc00000 	.word	0x7dc00000
        }
        else // if (ch == 4)
        {
            self->trig.exti_trig = PS_LA_IRQ_EXTI4;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80087de:	33bc      	adds	r3, #188	; 0xbc
 80087e0:	2209      	movs	r2, #9
 80087e2:	601a      	str	r2, [r3, #0]
            extiline = PS_LA_EXTILINE4;
 80087e4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
            exti = PS_LA_EXTI4;
 80087ea:	2308      	movs	r3, #8
 80087ec:	623b      	str	r3, [r7, #32]
        }

        LL_EXTI_DisableIT_0_31(PS_LA_EXTI1);
 80087ee:	2001      	movs	r0, #1
 80087f0:	f7fe ff9e 	bl	8007730 <LL_EXTI_DisableIT_0_31>
        LL_EXTI_DisableIT_0_31(PS_LA_EXTI2);
 80087f4:	2002      	movs	r0, #2
 80087f6:	f7fe ff9b 	bl	8007730 <LL_EXTI_DisableIT_0_31>
        LL_EXTI_DisableIT_0_31(PS_LA_EXTI3);
 80087fa:	2004      	movs	r0, #4
 80087fc:	f7fe ff98 	bl	8007730 <LL_EXTI_DisableIT_0_31>
        LL_EXTI_DisableIT_0_31(PS_LA_EXTI4);
 8008800:	2008      	movs	r0, #8
 8008802:	f7fe ff95 	bl	8007730 <LL_EXTI_DisableIT_0_31>

        PS_GPIO_EXTI_SRC(PS_LA_EXTI_PORT, extiline);
 8008806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008808:	2002      	movs	r0, #2
 800880a:	f7fe ff51 	bl	80076b0 <LL_SYSCFG_SetEXTISource>

        EXTI_InitStruct.Line_0_31 = exti;
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	613b      	str	r3, [r7, #16]
        EXTI_InitStruct.LineCommand = ENABLE;
 8008812:	2301      	movs	r3, #1
 8008814:	763b      	strb	r3, [r7, #24]
        EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8008816:	2300      	movs	r3, #0
 8008818:	767b      	strb	r3, [r7, #25]
        EXTI_InitStruct.Trigger = (edge == RISING ? LL_EXTI_TRIGGER_RISING : LL_EXTI_TRIGGER_FALLING);
 800881a:	79bb      	ldrb	r3, [r7, #6]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <daq_trig_set+0x3b8>
 8008820:	2301      	movs	r3, #1
 8008822:	e000      	b.n	8008826 <daq_trig_set+0x3ba>
 8008824:	2302      	movs	r3, #2
 8008826:	76bb      	strb	r3, [r7, #26]
        LL_EXTI_Init(&EXTI_InitStruct);
 8008828:	f107 0310 	add.w	r3, r7, #16
 800882c:	4618      	mov	r0, r3
 800882e:	f7fb f8f1 	bl	8003a14 <LL_EXTI_Init>
        LL_EXTI_EnableIT_0_31(exti);
 8008832:	6a38      	ldr	r0, [r7, #32]
 8008834:	f7fe ff6a 	bl	800770c <LL_EXTI_EnableIT_0_31>

        NVIC_SetPriority(self->trig.exti_trig, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_EXTI, 0));
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800883e:	33bc      	adds	r3, #188	; 0xbc
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	b25c      	sxtb	r4, r3
 8008844:	f7fe fddc 	bl	8007400 <__NVIC_GetPriorityGrouping>
 8008848:	4603      	mov	r3, r0
 800884a:	2200      	movs	r2, #0
 800884c:	2105      	movs	r1, #5
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fe30 	bl	80074b4 <NVIC_EncodePriority>
 8008854:	4603      	mov	r3, r0
 8008856:	4619      	mov	r1, r3
 8008858:	4620      	mov	r0, r4
 800885a:	f7fe fe01 	bl	8007460 <__NVIC_SetPriority>
        NVIC_DisableIRQ(self->trig.exti_trig);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008864:	33bc      	adds	r3, #188	; 0xbc
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	b25b      	sxtb	r3, r3
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fdd6 	bl	800741c <__NVIC_DisableIRQ>

        self->trig.set.val = 0;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008876:	3348      	adds	r3, #72	; 0x48
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]
        self->trig.set.val_percent = 0;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008882:	334c      	adds	r3, #76	; 0x4c
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	e0c4      	b.n	8008a14 <daq_trig_set+0x5a8>
    }
    else // SCOPE
    {
        ASSERT(self->trig.exti_trig != 0);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008890:	33bc      	adds	r3, #188	; 0xbc
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d104      	bne.n	80088a2 <daq_trig_set+0x436>
 8008898:	f44f 7105 	mov.w	r1, #532	; 0x214
 800889c:	488d      	ldr	r0, [pc, #564]	; (8008ad4 <daq_trig_set+0x668>)
 800889e:	f003 fbc2 	bl	800c026 <assert2>
        NVIC_DisableIRQ(self->trig.exti_trig);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80088a8:	33bc      	adds	r3, #188	; 0xbc
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	b25b      	sxtb	r3, r3
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fdb4 	bl	800741c <__NVIC_DisableIRQ>

        if ((ch == 1 && self->set.ch1_en) ||
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d106      	bne.n	80088c8 <daq_trig_set+0x45c>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80088c0:	33fc      	adds	r3, #252	; 0xfc
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d11f      	bne.n	8008908 <daq_trig_set+0x49c>
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d106      	bne.n	80088dc <daq_trig_set+0x470>
            (ch == 2 && self->set.ch2_en) ||
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80088d4:	33fd      	adds	r3, #253	; 0xfd
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d115      	bne.n	8008908 <daq_trig_set+0x49c>
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d106      	bne.n	80088f0 <daq_trig_set+0x484>
            (ch == 3 && self->set.ch3_en) ||
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80088e8:	33fe      	adds	r3, #254	; 0xfe
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10b      	bne.n	8008908 <daq_trig_set+0x49c>
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	f040 808b 	bne.w	8008a0e <daq_trig_set+0x5a2>
            (ch == 4 && self->set.ch4_en))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80088fe:	33ff      	adds	r3, #255	; 0xff
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 8083 	beq.w	8008a0e <daq_trig_set+0x5a2>
        {
            if (ch == 1)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d106      	bne.n	800891c <daq_trig_set+0x4b0>
                self->trig.awd_trig = PS_ADC_AWD1;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008914:	33ac      	adds	r3, #172	; 0xac
 8008916:	4a70      	ldr	r2, [pc, #448]	; (8008ad8 <daq_trig_set+0x66c>)
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	e01c      	b.n	8008956 <daq_trig_set+0x4ea>
            else if (ch == 2)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d106      	bne.n	8008930 <daq_trig_set+0x4c4>
                self->trig.awd_trig = PS_ADC_AWD2;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008928:	33ac      	adds	r3, #172	; 0xac
 800892a:	4a6c      	ldr	r2, [pc, #432]	; (8008adc <daq_trig_set+0x670>)
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	e012      	b.n	8008956 <daq_trig_set+0x4ea>
            else if (ch == 3)
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2b03      	cmp	r3, #3
 8008934:	d106      	bne.n	8008944 <daq_trig_set+0x4d8>
                self->trig.awd_trig = PS_ADC_AWD3;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800893c:	33ac      	adds	r3, #172	; 0xac
 800893e:	4a68      	ldr	r2, [pc, #416]	; (8008ae0 <daq_trig_set+0x674>)
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	e008      	b.n	8008956 <daq_trig_set+0x4ea>
            else if (ch == 4)
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	2b04      	cmp	r3, #4
 8008948:	d105      	bne.n	8008956 <daq_trig_set+0x4ea>
                self->trig.awd_trig = PS_ADC_AWD4;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008950:	33ac      	adds	r3, #172	; 0xac
 8008952:	4a64      	ldr	r2, [pc, #400]	; (8008ae4 <daq_trig_set+0x678>)
 8008954:	601a      	str	r2, [r3, #0]

            uint32_t level_raw = (int)(self->adc_max_val / 100.0 * (float)level);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800895c:	332c      	adds	r3, #44	; 0x2c
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4618      	mov	r0, r3
 8008962:	f7f7 fe09 	bl	8000578 <__aeabi_f2d>
 8008966:	f04f 0200 	mov.w	r2, #0
 800896a:	4b5f      	ldr	r3, [pc, #380]	; (8008ae8 <daq_trig_set+0x67c>)
 800896c:	f7f7 ff86 	bl	800087c <__aeabi_ddiv>
 8008970:	4603      	mov	r3, r0
 8008972:	460c      	mov	r4, r1
 8008974:	4625      	mov	r5, r4
 8008976:	461c      	mov	r4, r3
 8008978:	79fb      	ldrb	r3, [r7, #7]
 800897a:	ee07 3a90 	vmov	s15, r3
 800897e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008982:	ee17 0a90 	vmov	r0, s15
 8008986:	f7f7 fdf7 	bl	8000578 <__aeabi_f2d>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4620      	mov	r0, r4
 8008990:	4629      	mov	r1, r5
 8008992:	f7f7 fe49 	bl	8000628 <__aeabi_dmul>
 8008996:	4603      	mov	r3, r0
 8008998:	460c      	mov	r4, r1
 800899a:	4618      	mov	r0, r3
 800899c:	4621      	mov	r1, r4
 800899e:	f7f8 f8f3 	bl	8000b88 <__aeabi_d2iz>
 80089a2:	4603      	mov	r3, r0
 80089a4:	61fb      	str	r3, [r7, #28]

            if (edge == RISING)
 80089a6:	79bb      	ldrb	r3, [r7, #6]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10d      	bne.n	80089c8 <daq_trig_set+0x55c>
            {
                LL_ADC_SetAnalogWDThresholds(adc, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH, level);
 80089ac:	79fb      	ldrb	r3, [r7, #7]
 80089ae:	4a4f      	ldr	r2, [pc, #316]	; (8008aec <daq_trig_set+0x680>)
 80089b0:	494f      	ldr	r1, [pc, #316]	; (8008af0 <daq_trig_set+0x684>)
 80089b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089b4:	f7fe fdfa 	bl	80075ac <LL_ADC_SetAnalogWDThresholds>
                LL_ADC_SetAnalogWDThresholds(adc, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW, 0);
 80089b8:	2300      	movs	r3, #0
 80089ba:	f640 72ff 	movw	r2, #4095	; 0xfff
 80089be:	494c      	ldr	r1, [pc, #304]	; (8008af0 <daq_trig_set+0x684>)
 80089c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089c2:	f7fe fdf3 	bl	80075ac <LL_ADC_SetAnalogWDThresholds>
 80089c6:	e015      	b.n	80089f4 <daq_trig_set+0x588>
            }
            else // (edge == FALLING)
            {
                LL_ADC_SetAnalogWDThresholds(adc, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH, (int)self->adc_max_val);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80089ce:	332c      	adds	r3, #44	; 0x2c
 80089d0:	edd3 7a00 	vldr	s15, [r3]
 80089d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089d8:	ee17 3a90 	vmov	r3, s15
 80089dc:	4a43      	ldr	r2, [pc, #268]	; (8008aec <daq_trig_set+0x680>)
 80089de:	4944      	ldr	r1, [pc, #272]	; (8008af0 <daq_trig_set+0x684>)
 80089e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089e2:	f7fe fde3 	bl	80075ac <LL_ADC_SetAnalogWDThresholds>
                LL_ADC_SetAnalogWDThresholds(adc, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW, level);
 80089e6:	79fb      	ldrb	r3, [r7, #7]
 80089e8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80089ec:	4940      	ldr	r1, [pc, #256]	; (8008af0 <daq_trig_set+0x684>)
 80089ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089f0:	f7fe fddc 	bl	80075ac <LL_ADC_SetAnalogWDThresholds>
            }

            self->trig.set.val = level_raw;
 80089f4:	69fa      	ldr	r2, [r7, #28]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80089fc:	3348      	adds	r3, #72	; 0x48
 80089fe:	601a      	str	r2, [r3, #0]
            self->trig.set.val_percent = level;
 8008a00:	79fa      	ldrb	r2, [r7, #7]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a08:	334c      	adds	r3, #76	; 0x4c
 8008a0a:	601a      	str	r2, [r3, #0]
        {
 8008a0c:	e002      	b.n	8008a14 <daq_trig_set+0x5a8>
        }
        else return -1;
 8008a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a12:	e05a      	b.n	8008aca <daq_trig_set+0x65e>
    }

    self->trig.pretrig_val = (int)((float)self->trig.fullmem_val * ((float)pretrigger / 100.0)) + 1;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a1a:	33a8      	adds	r3, #168	; 0xa8
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a26:	ee17 0a90 	vmov	r0, s15
 8008a2a:	f7f7 fda5 	bl	8000578 <__aeabi_f2d>
 8008a2e:	4604      	mov	r4, r0
 8008a30:	460d      	mov	r5, r1
 8008a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a34:	ee07 3a90 	vmov	s15, r3
 8008a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a3c:	ee17 0a90 	vmov	r0, s15
 8008a40:	f7f7 fd9a 	bl	8000578 <__aeabi_f2d>
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	4b27      	ldr	r3, [pc, #156]	; (8008ae8 <daq_trig_set+0x67c>)
 8008a4a:	f7f7 ff17 	bl	800087c <__aeabi_ddiv>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4620      	mov	r0, r4
 8008a54:	4629      	mov	r1, r5
 8008a56:	f7f7 fde7 	bl	8000628 <__aeabi_dmul>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	4618      	mov	r0, r3
 8008a60:	4621      	mov	r1, r4
 8008a62:	f7f8 f891 	bl	8000b88 <__aeabi_d2iz>
 8008a66:	4603      	mov	r3, r0
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a70:	339c      	adds	r3, #156	; 0x9c
 8008a72:	601a      	str	r2, [r3, #0]
    self->trig.set.pretrigger = pretrigger;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a7a:	333c      	adds	r3, #60	; 0x3c
 8008a7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a7e:	601a      	str	r2, [r3, #0]
    self->trig.set.mode = mode;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a86:	3340      	adds	r3, #64	; 0x40
 8008a88:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008a8c:	701a      	strb	r2, [r3, #0]
    self->trig.set.edge = edge;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a94:	3341      	adds	r3, #65	; 0x41
 8008a96:	79ba      	ldrb	r2, [r7, #6]
 8008a98:	701a      	strb	r2, [r3, #0]
    self->trig.set.ch = ch;
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008aa2:	3344      	adds	r3, #68	; 0x44
 8008aa4:	601a      	str	r2, [r3, #0]

    if (self->trig.pretrig_val < PS_PRETRIG_MIN_MS)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008aac:	339c      	adds	r3, #156	; 0x9c
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b09      	cmp	r3, #9
 8008ab2:	dc05      	bgt.n	8008ac0 <daq_trig_set+0x654>
        self->trig.pretrig_val = PS_PRETRIG_MIN_MS;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008aba:	339c      	adds	r3, #156	; 0x9c
 8008abc:	220a      	movs	r2, #10
 8008abe:	601a      	str	r2, [r3, #0]

    daq_enable(self, 1);
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f7fe f9fa 	bl	8006ebc <daq_enable>
    return 0;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3730      	adds	r7, #48	; 0x30
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	08015164 	.word	0x08015164
 8008ad8:	18c00040 	.word	0x18c00040
 8008adc:	1cc00080 	.word	0x1cc00080
 8008ae0:	30c01000 	.word	0x30c01000
 8008ae4:	10c00010 	.word	0x10c00010
 8008ae8:	40590000 	.word	0x40590000
 8008aec:	0fff0000 	.word	0x0fff0000
 8008af0:	7dc00000 	.word	0x7dc00000

08008af4 <get_last_circ_idx>:
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
    int last_idx = pos - 1;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	3b01      	subs	r3, #1
 8008b02:	60fb      	str	r3, [r7, #12]
    if (last_idx < 0)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da02      	bge.n	8008b10 <get_last_circ_idx+0x1c>
        last_idx = len - 1;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	60fb      	str	r3, [r7, #12]
    return last_idx;
 8008b10:	68fb      	ldr	r3, [r7, #12]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <LL_ADC_IsActiveFlag_AWD1>:
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b2e:	2b80      	cmp	r3, #128	; 0x80
 8008b30:	bf0c      	ite	eq
 8008b32:	2301      	moveq	r3, #1
 8008b34:	2300      	movne	r3, #0
 8008b36:	b2db      	uxtb	r3, r3
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <LL_ADC_ClearFlag_AWD1>:
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2280      	movs	r2, #128	; 0x80
 8008b50:	601a      	str	r2, [r3, #0]
}
 8008b52:	bf00      	nop
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
	...

08008b60 <LL_DMA_GetDataLength>:
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	4a06      	ldr	r2, [pc, #24]	; (8008b88 <LL_DMA_GetDataLength+0x28>)
 8008b70:	5cd3      	ldrb	r3, [r2, r3]
 8008b72:	461a      	mov	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4413      	add	r3, r2
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	b29b      	uxth	r3, r3
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	08015780 	.word	0x08015780

08008b8c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8008b94:	4b07      	ldr	r3, [pc, #28]	; (8008bb4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8008b96:	695a      	ldr	r2, [r3, #20]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	bf0c      	ite	eq
 8008ba2:	2301      	moveq	r3, #1
 8008ba4:	2300      	movne	r3, #0
 8008ba6:	b2db      	uxtb	r3, r3
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	40010400 	.word	0x40010400

08008bb8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8008bc0:	4a04      	ldr	r2, [pc, #16]	; (8008bd4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6153      	str	r3, [r2, #20]
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	40010400 	.word	0x40010400

08008bd8 <LL_TIM_ClearFlag_UPDATE>:
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f06f 0201 	mvn.w	r2, #1
 8008be6:	611a      	str	r2, [r3, #16]
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d101      	bne.n	8008c0c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e000      	b.n	8008c0e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <LL_TIM_ClearFlag_CC4>:
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f06f 0210 	mvn.w	r2, #16
 8008c28:	611a      	str	r2, [r3, #16]
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <LL_TIM_IsActiveFlag_CC4>:
{
 8008c36:	b480      	push	{r7}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	f003 0310 	and.w	r3, r3, #16
 8008c46:	2b10      	cmp	r3, #16
 8008c48:	d101      	bne.n	8008c4e <LL_TIM_IsActiveFlag_CC4+0x18>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e000      	b.n	8008c50 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <LL_USART_IsActiveFlag_RXNE>:
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	2b20      	cmp	r3, #32
 8008c6e:	d101      	bne.n	8008c74 <LL_USART_IsActiveFlag_RXNE+0x18>
 8008c70:	2301      	movs	r3, #1
 8008c72:	e000      	b.n	8008c76 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <LL_USART_ClearFlag_RTO>:
{
 8008c82:	b480      	push	{r7}
 8008c84:	b083      	sub	sp, #12
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c90:	621a      	str	r2, [r3, #32]
}
 8008c92:	bf00      	nop
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <LL_USART_ReceiveData8>:
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	b2db      	uxtb	r3, r3
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
	...

08008cbc <SysTick_Handler>:
    return USBD_OK;
}
*/

void SysTick_Handler(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
    if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8008cc0:	f008 ff24 	bl	8011b0c <xTaskGetSchedulerState>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d001      	beq.n	8008cce <SysTick_Handler+0x12>
        xPortSysTickHandler();
 8008cca:	f007 fc95 	bl	80105f8 <xPortSysTickHandler>
#ifdef PS_HAL_SYSTICK
    HAL_IncTick();
#endif
    daq.uwTick++;
 8008cce:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <SysTick_Handler+0x2c>)
 8008cd0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008cd4:	3330      	adds	r3, #48	; 0x30
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <SysTick_Handler+0x2c>)
 8008cdc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008ce0:	3330      	adds	r3, #48	; 0x30
 8008ce2:	601a      	str	r2, [r3, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	200007ec 	.word	0x200007ec

08008cec <SVC_Handler>:

void SVC_Handler(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
    vPortSVCHandler();
 8008cf0:	f007 fb5e 	bl	80103b0 <vPortSVCHandler>
}
 8008cf4:	bf00      	nop
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	af00      	add	r7, sp, #0
    xPortPendSVHandler();
 8008cfc:	f007 fc58 	bl	80105b0 <xPortPendSVHandler>
}
 8008d00:	bf00      	nop
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
    if (LL_USART_IsActiveFlag_RXNE(PS_UART) == 1)
 8008d0a:	482b      	ldr	r0, [pc, #172]	; (8008db8 <USART1_IRQHandler+0xb4>)
 8008d0c:	f7ff ffa6 	bl	8008c5c <LL_USART_IsActiveFlag_RXNE>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d14c      	bne.n	8008db0 <USART1_IRQHandler+0xac>
    {
        char rx = LL_USART_ReceiveData8(PS_UART);
 8008d16:	4828      	ldr	r0, [pc, #160]	; (8008db8 <USART1_IRQHandler+0xb4>)
 8008d18:	f7ff ffc1 	bl	8008c9e <LL_USART_ReceiveData8>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	71fb      	strb	r3, [r7, #7]

        comm.uart.rx_buffer[comm.uart.rx_index++] = rx;
 8008d20:	4b26      	ldr	r3, [pc, #152]	; (8008dbc <USART1_IRQHandler+0xb8>)
 8008d22:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	b2d1      	uxtb	r1, r2
 8008d2a:	4a24      	ldr	r2, [pc, #144]	; (8008dbc <USART1_IRQHandler+0xb8>)
 8008d2c:	f882 10cd 	strb.w	r1, [r2, #205]	; 0xcd
 8008d30:	461a      	mov	r2, r3
 8008d32:	4b22      	ldr	r3, [pc, #136]	; (8008dbc <USART1_IRQHandler+0xb8>)
 8008d34:	4413      	add	r3, r2
 8008d36:	79fa      	ldrb	r2, [r7, #7]
 8008d38:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67

        if (comm.uart.rx_index >= RX_BUFF_LAST)
 8008d3c:	4b1f      	ldr	r3, [pc, #124]	; (8008dbc <USART1_IRQHandler+0xb8>)
 8008d3e:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8008d42:	2b62      	cmp	r3, #98	; 0x62
 8008d44:	d903      	bls.n	8008d4e <USART1_IRQHandler+0x4a>
            comm.uart.rx_index = 0;
 8008d46:	4b1d      	ldr	r3, [pc, #116]	; (8008dbc <USART1_IRQHandler+0xb8>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

        comm.uart.last = 1;
 8008d4e:	4b1b      	ldr	r3, [pc, #108]	; (8008dbc <USART1_IRQHandler+0xb8>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        comm.usb.last = 0;
 8008d56:	4b19      	ldr	r3, [pc, #100]	; (8008dbc <USART1_IRQHandler+0xb8>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

        if (rx == '\n')
 8008d5e:	79fb      	ldrb	r3, [r7, #7]
 8008d60:	2b0a      	cmp	r3, #10
 8008d62:	d122      	bne.n	8008daa <USART1_IRQHandler+0xa6>
        {
            portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8008d64:	2300      	movs	r3, #0
 8008d66:	603b      	str	r3, [r7, #0]
            if(xSemaphoreGiveFromISR(sem1_comm, &xHigherPriorityTaskWoken) != pdPASS)
 8008d68:	4b15      	ldr	r3, [pc, #84]	; (8008dc0 <USART1_IRQHandler+0xbc>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	463a      	mov	r2, r7
 8008d6e:	4611      	mov	r1, r2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f007 fedf 	bl	8010b34 <xQueueGiveFromISR>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d004      	beq.n	8008d86 <USART1_IRQHandler+0x82>
            {
                comm.uart.rx_index = 0;
 8008d7c:	4b0f      	ldr	r3, [pc, #60]	; (8008dbc <USART1_IRQHandler+0xb8>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8008d84:	e011      	b.n	8008daa <USART1_IRQHandler+0xa6>
            }
            else
            {
                comm.uart.available = 1;
 8008d86:	4b0d      	ldr	r3, [pc, #52]	; (8008dbc <USART1_IRQHandler+0xb8>)
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
                if (xHigherPriorityTaskWoken != pdFALSE)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00a      	beq.n	8008daa <USART1_IRQHandler+0xa6>
                    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d007      	beq.n	8008daa <USART1_IRQHandler+0xa6>
 8008d9a:	4b0a      	ldr	r3, [pc, #40]	; (8008dc4 <USART1_IRQHandler+0xc0>)
 8008d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	f3bf 8f6f 	isb	sy
            }
        }
        PS_UART_CLEAR_FLAG(PS_UART);
 8008daa:	4803      	ldr	r0, [pc, #12]	; (8008db8 <USART1_IRQHandler+0xb4>)
 8008dac:	f7ff ff69 	bl	8008c82 <LL_USART_ClearFlag_RTO>
    }
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	40004400 	.word	0x40004400
 8008dbc:	2000d6d0 	.word	0x2000d6d0
 8008dc0:	2000d650 	.word	0x2000d650
 8008dc4:	e000ed04 	.word	0xe000ed04

08008dc8 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 8008dc8:	b598      	push	{r3, r4, r7, lr}
 8008dca:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, daq.trig.dma_trig); // critical
 8008dcc:	4b21      	ldr	r3, [pc, #132]	; (8008e54 <ADC1_2_IRQHandler+0x8c>)
 8008dce:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008dd2:	33b0      	adds	r3, #176	; 0xb0
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	88db      	ldrh	r3, [r3, #6]
 8008dd8:	461c      	mov	r4, r3
 8008dda:	4b1e      	ldr	r3, [pc, #120]	; (8008e54 <ADC1_2_IRQHandler+0x8c>)
 8008ddc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008de0:	33b8      	adds	r3, #184	; 0xb8
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	4b1b      	ldr	r3, [pc, #108]	; (8008e54 <ADC1_2_IRQHandler+0x8c>)
 8008de6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008dea:	33b4      	adds	r3, #180	; 0xb4
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4619      	mov	r1, r3
 8008df0:	4610      	mov	r0, r2
 8008df2:	f7ff feb5 	bl	8008b60 <LL_DMA_GetDataLength>
 8008df6:	4603      	mov	r3, r0
 8008df8:	1ae3      	subs	r3, r4, r3
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	4b15      	ldr	r3, [pc, #84]	; (8008e54 <ADC1_2_IRQHandler+0x8c>)
 8008dfe:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e02:	33b0      	adds	r3, #176	; 0xb0
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	88db      	ldrh	r3, [r3, #6]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	f7ff fe72 	bl	8008af4 <get_last_circ_idx>
 8008e10:	4602      	mov	r2, r0
 8008e12:	4b10      	ldr	r3, [pc, #64]	; (8008e54 <ADC1_2_IRQHandler+0x8c>)
 8008e14:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e18:	33d0      	adds	r3, #208	; 0xd0
 8008e1a:	601a      	str	r2, [r3, #0]

#if defined(PS_ADC_MODE_ADC1) || defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
    if (LL_ADC_IsActiveFlag_AWD1(ADC1) == 1)
 8008e1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008e20:	f7ff fe7d 	bl	8008b1e <LL_ADC_IsActiveFlag_AWD1>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d106      	bne.n	8008e38 <ADC1_2_IRQHandler+0x70>
    {
        daq_trig_trigger_scope(&daq);
 8008e2a:	480a      	ldr	r0, [pc, #40]	; (8008e54 <ADC1_2_IRQHandler+0x8c>)
 8008e2c:	f7fe fe66 	bl	8007afc <daq_trig_trigger_scope>
        LL_ADC_ClearFlag_AWD1(ADC1);
 8008e30:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008e34:	f7ff fe86 	bl	8008b44 <LL_ADC_ClearFlag_AWD1>
    }

    if (LL_ADC_IsActiveFlag_AWD1(ADC2) == 1)
 8008e38:	4807      	ldr	r0, [pc, #28]	; (8008e58 <ADC1_2_IRQHandler+0x90>)
 8008e3a:	f7ff fe70 	bl	8008b1e <LL_ADC_IsActiveFlag_AWD1>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d105      	bne.n	8008e50 <ADC1_2_IRQHandler+0x88>
    {
        daq_trig_trigger_scope(&daq);
 8008e44:	4803      	ldr	r0, [pc, #12]	; (8008e54 <ADC1_2_IRQHandler+0x8c>)
 8008e46:	f7fe fe59 	bl	8007afc <daq_trig_trigger_scope>
        LL_ADC_ClearFlag_AWD1(ADC2);
 8008e4a:	4803      	ldr	r0, [pc, #12]	; (8008e58 <ADC1_2_IRQHandler+0x90>)
 8008e4c:	f7ff fe7a 	bl	8008b44 <LL_ADC_ClearFlag_AWD1>
    }
#endif
}
 8008e50:	bf00      	nop
 8008e52:	bd98      	pop	{r3, r4, r7, pc}
 8008e54:	200007ec 	.word	0x200007ec
 8008e58:	50000100 	.word	0x50000100

08008e5c <ADC3_IRQHandler>:

#if defined(PS_ADC_MODE_ADC1234)
void ADC3_IRQHandler(void)
{
 8008e5c:	b598      	push	{r3, r4, r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, daq.trig.dma_trig); // critical
 8008e60:	4b1a      	ldr	r3, [pc, #104]	; (8008ecc <ADC3_IRQHandler+0x70>)
 8008e62:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e66:	33b0      	adds	r3, #176	; 0xb0
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	88db      	ldrh	r3, [r3, #6]
 8008e6c:	461c      	mov	r4, r3
 8008e6e:	4b17      	ldr	r3, [pc, #92]	; (8008ecc <ADC3_IRQHandler+0x70>)
 8008e70:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e74:	33b8      	adds	r3, #184	; 0xb8
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	4b14      	ldr	r3, [pc, #80]	; (8008ecc <ADC3_IRQHandler+0x70>)
 8008e7a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e7e:	33b4      	adds	r3, #180	; 0xb4
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4619      	mov	r1, r3
 8008e84:	4610      	mov	r0, r2
 8008e86:	f7ff fe6b 	bl	8008b60 <LL_DMA_GetDataLength>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	1ae3      	subs	r3, r4, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	4b0e      	ldr	r3, [pc, #56]	; (8008ecc <ADC3_IRQHandler+0x70>)
 8008e92:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e96:	33b0      	adds	r3, #176	; 0xb0
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	88db      	ldrh	r3, [r3, #6]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	f7ff fe28 	bl	8008af4 <get_last_circ_idx>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <ADC3_IRQHandler+0x70>)
 8008ea8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008eac:	33d0      	adds	r3, #208	; 0xd0
 8008eae:	601a      	str	r2, [r3, #0]

    if (LL_ADC_IsActiveFlag_AWD1(ADC3) == 1)
 8008eb0:	4807      	ldr	r0, [pc, #28]	; (8008ed0 <ADC3_IRQHandler+0x74>)
 8008eb2:	f7ff fe34 	bl	8008b1e <LL_ADC_IsActiveFlag_AWD1>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d105      	bne.n	8008ec8 <ADC3_IRQHandler+0x6c>
    {
        daq_trig_trigger_scope(&daq);
 8008ebc:	4803      	ldr	r0, [pc, #12]	; (8008ecc <ADC3_IRQHandler+0x70>)
 8008ebe:	f7fe fe1d 	bl	8007afc <daq_trig_trigger_scope>
        LL_ADC_ClearFlag_AWD1(ADC3);
 8008ec2:	4803      	ldr	r0, [pc, #12]	; (8008ed0 <ADC3_IRQHandler+0x74>)
 8008ec4:	f7ff fe3e 	bl	8008b44 <LL_ADC_ClearFlag_AWD1>
    }
}
 8008ec8:	bf00      	nop
 8008eca:	bd98      	pop	{r3, r4, r7, pc}
 8008ecc:	200007ec 	.word	0x200007ec
 8008ed0:	50000400 	.word	0x50000400

08008ed4 <ADC4_IRQHandler>:

void ADC4_IRQHandler(void)
{
 8008ed4:	b598      	push	{r3, r4, r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, daq.trig.dma_trig); // critical
 8008ed8:	4b1a      	ldr	r3, [pc, #104]	; (8008f44 <ADC4_IRQHandler+0x70>)
 8008eda:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008ede:	33b0      	adds	r3, #176	; 0xb0
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	88db      	ldrh	r3, [r3, #6]
 8008ee4:	461c      	mov	r4, r3
 8008ee6:	4b17      	ldr	r3, [pc, #92]	; (8008f44 <ADC4_IRQHandler+0x70>)
 8008ee8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008eec:	33b8      	adds	r3, #184	; 0xb8
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	4b14      	ldr	r3, [pc, #80]	; (8008f44 <ADC4_IRQHandler+0x70>)
 8008ef2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008ef6:	33b4      	adds	r3, #180	; 0xb4
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4619      	mov	r1, r3
 8008efc:	4610      	mov	r0, r2
 8008efe:	f7ff fe2f 	bl	8008b60 <LL_DMA_GetDataLength>
 8008f02:	4603      	mov	r3, r0
 8008f04:	1ae3      	subs	r3, r4, r3
 8008f06:	461a      	mov	r2, r3
 8008f08:	4b0e      	ldr	r3, [pc, #56]	; (8008f44 <ADC4_IRQHandler+0x70>)
 8008f0a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008f0e:	33b0      	adds	r3, #176	; 0xb0
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	88db      	ldrh	r3, [r3, #6]
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f7ff fdec 	bl	8008af4 <get_last_circ_idx>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <ADC4_IRQHandler+0x70>)
 8008f20:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008f24:	33d0      	adds	r3, #208	; 0xd0
 8008f26:	601a      	str	r2, [r3, #0]

    if (LL_ADC_IsActiveFlag_AWD1(ADC4) == 1)
 8008f28:	4807      	ldr	r0, [pc, #28]	; (8008f48 <ADC4_IRQHandler+0x74>)
 8008f2a:	f7ff fdf8 	bl	8008b1e <LL_ADC_IsActiveFlag_AWD1>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d105      	bne.n	8008f40 <ADC4_IRQHandler+0x6c>
    {
        daq_trig_trigger_scope(&daq);
 8008f34:	4803      	ldr	r0, [pc, #12]	; (8008f44 <ADC4_IRQHandler+0x70>)
 8008f36:	f7fe fde1 	bl	8007afc <daq_trig_trigger_scope>
        LL_ADC_ClearFlag_AWD1(ADC4);
 8008f3a:	4803      	ldr	r0, [pc, #12]	; (8008f48 <ADC4_IRQHandler+0x74>)
 8008f3c:	f7ff fe02 	bl	8008b44 <LL_ADC_ClearFlag_AWD1>
    }
}
 8008f40:	bf00      	nop
 8008f42:	bd98      	pop	{r3, r4, r7, pc}
 8008f44:	200007ec 	.word	0x200007ec
 8008f48:	50000500 	.word	0x50000500

08008f4c <TIM8_UP_IRQHandler>:
#endif

void PS_TIM_CNTR_UP_IRQh(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
    if(LL_TIM_IsActiveFlag_UPDATE(PS_TIM_CNTR) == 1)
 8008f50:	4808      	ldr	r0, [pc, #32]	; (8008f74 <TIM8_UP_IRQHandler+0x28>)
 8008f52:	f7ff fe4f 	bl	8008bf4 <LL_TIM_IsActiveFlag_UPDATE>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d109      	bne.n	8008f70 <TIM8_UP_IRQHandler+0x24>
    {
        LL_TIM_ClearFlag_UPDATE(PS_TIM_CNTR);
 8008f5c:	4805      	ldr	r0, [pc, #20]	; (8008f74 <TIM8_UP_IRQHandler+0x28>)
 8008f5e:	f7ff fe3b 	bl	8008bd8 <LL_TIM_ClearFlag_UPDATE>
        cntr.ovf++;
 8008f62:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <TIM8_UP_IRQHandler+0x2c>)
 8008f64:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8008f68:	3301      	adds	r3, #1
 8008f6a:	4a03      	ldr	r2, [pc, #12]	; (8008f78 <TIM8_UP_IRQHandler+0x2c>)
 8008f6c:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
    }
}
 8008f70:	bf00      	nop
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	40013400 	.word	0x40013400
 8008f78:	20000604 	.word	0x20000604

08008f7c <TIM8_CC_IRQHandler>:

void PS_TIM_CNTR_CCR_IRQh(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
    if (cntr.data_ovf_it < PS_CNTR_BUFF_SZ)
 8008f80:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <TIM8_CC_IRQHandler+0x44>)
 8008f82:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8008f86:	2b63      	cmp	r3, #99	; 0x63
 8008f88:	dc0e      	bgt.n	8008fa8 <TIM8_CC_IRQHandler+0x2c>
        cntr.data_ovf[cntr.data_ovf_it++] = cntr.ovf; // BUG
 8008f8a:	4b0d      	ldr	r3, [pc, #52]	; (8008fc0 <TIM8_CC_IRQHandler+0x44>)
 8008f8c:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8008f90:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <TIM8_CC_IRQHandler+0x44>)
 8008f92:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	4909      	ldr	r1, [pc, #36]	; (8008fc0 <TIM8_CC_IRQHandler+0x44>)
 8008f9a:	f8c1 2190 	str.w	r2, [r1, #400]	; 0x190
 8008f9e:	b281      	uxth	r1, r0
 8008fa0:	4a07      	ldr	r2, [pc, #28]	; (8008fc0 <TIM8_CC_IRQHandler+0x44>)
 8008fa2:	3364      	adds	r3, #100	; 0x64
 8008fa4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    if(PS_TIM_CNTR_CC(LL_TIM_IsActiveFlag_)(PS_TIM_CNTR) == 1)
 8008fa8:	4806      	ldr	r0, [pc, #24]	; (8008fc4 <TIM8_CC_IRQHandler+0x48>)
 8008faa:	f7ff fe44 	bl	8008c36 <LL_TIM_IsActiveFlag_CC4>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d102      	bne.n	8008fba <TIM8_CC_IRQHandler+0x3e>
    {
        PS_TIM_CNTR_CC(LL_TIM_ClearFlag_)(PS_TIM_CNTR);
 8008fb4:	4803      	ldr	r0, [pc, #12]	; (8008fc4 <TIM8_CC_IRQHandler+0x48>)
 8008fb6:	f7ff fe30 	bl	8008c1a <LL_TIM_ClearFlag_CC4>
    }
}
 8008fba:	bf00      	nop
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000604 	.word	0x20000604
 8008fc4:	40013400 	.word	0x40013400

08008fc8 <EXTI0_IRQHandler>:

void PS_LA_CH1_IRQh(void)
{
 8008fc8:	b598      	push	{r3, r4, r7, lr}
 8008fca:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, PS_DMA_LA); // critical
 8008fcc:	4b18      	ldr	r3, [pc, #96]	; (8009030 <EXTI0_IRQHandler+0x68>)
 8008fce:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008fd2:	33b0      	adds	r3, #176	; 0xb0
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	88db      	ldrh	r3, [r3, #6]
 8008fd8:	461c      	mov	r4, r3
 8008fda:	4b15      	ldr	r3, [pc, #84]	; (8009030 <EXTI0_IRQHandler+0x68>)
 8008fdc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008fe0:	33b4      	adds	r3, #180	; 0xb4
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4813      	ldr	r0, [pc, #76]	; (8009034 <EXTI0_IRQHandler+0x6c>)
 8008fe8:	f7ff fdba 	bl	8008b60 <LL_DMA_GetDataLength>
 8008fec:	4603      	mov	r3, r0
 8008fee:	1ae3      	subs	r3, r4, r3
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	4b0f      	ldr	r3, [pc, #60]	; (8009030 <EXTI0_IRQHandler+0x68>)
 8008ff4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008ff8:	33b0      	adds	r3, #176	; 0xb0
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	88db      	ldrh	r3, [r3, #6]
 8008ffe:	4619      	mov	r1, r3
 8009000:	4610      	mov	r0, r2
 8009002:	f7ff fd77 	bl	8008af4 <get_last_circ_idx>
 8009006:	4602      	mov	r2, r0
 8009008:	4b09      	ldr	r3, [pc, #36]	; (8009030 <EXTI0_IRQHandler+0x68>)
 800900a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800900e:	33d0      	adds	r3, #208	; 0xd0
 8009010:	601a      	str	r2, [r3, #0]

    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI1) == 1)
 8009012:	2001      	movs	r0, #1
 8009014:	f7ff fdba 	bl	8008b8c <LL_EXTI_IsActiveFlag_0_31>
 8009018:	4603      	mov	r3, r0
 800901a:	2b01      	cmp	r3, #1
 800901c:	d105      	bne.n	800902a <EXTI0_IRQHandler+0x62>
    {
        daq_trig_trigger_la(&daq);
 800901e:	4804      	ldr	r0, [pc, #16]	; (8009030 <EXTI0_IRQHandler+0x68>)
 8009020:	f7fe ff1c 	bl	8007e5c <daq_trig_trigger_la>
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI1);
 8009024:	2001      	movs	r0, #1
 8009026:	f7ff fdc7 	bl	8008bb8 <LL_EXTI_ClearFlag_0_31>
    }
}
 800902a:	bf00      	nop
 800902c:	bd98      	pop	{r3, r4, r7, pc}
 800902e:	bf00      	nop
 8009030:	200007ec 	.word	0x200007ec
 8009034:	40020000 	.word	0x40020000

08009038 <EXTI1_IRQHandler>:

void PS_LA_CH2_IRQh(void)
{
 8009038:	b598      	push	{r3, r4, r7, lr}
 800903a:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, PS_DMA_LA); // critical
 800903c:	4b18      	ldr	r3, [pc, #96]	; (80090a0 <EXTI1_IRQHandler+0x68>)
 800903e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009042:	33b0      	adds	r3, #176	; 0xb0
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	88db      	ldrh	r3, [r3, #6]
 8009048:	461c      	mov	r4, r3
 800904a:	4b15      	ldr	r3, [pc, #84]	; (80090a0 <EXTI1_IRQHandler+0x68>)
 800904c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009050:	33b4      	adds	r3, #180	; 0xb4
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4619      	mov	r1, r3
 8009056:	4813      	ldr	r0, [pc, #76]	; (80090a4 <EXTI1_IRQHandler+0x6c>)
 8009058:	f7ff fd82 	bl	8008b60 <LL_DMA_GetDataLength>
 800905c:	4603      	mov	r3, r0
 800905e:	1ae3      	subs	r3, r4, r3
 8009060:	461a      	mov	r2, r3
 8009062:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <EXTI1_IRQHandler+0x68>)
 8009064:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009068:	33b0      	adds	r3, #176	; 0xb0
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	88db      	ldrh	r3, [r3, #6]
 800906e:	4619      	mov	r1, r3
 8009070:	4610      	mov	r0, r2
 8009072:	f7ff fd3f 	bl	8008af4 <get_last_circ_idx>
 8009076:	4602      	mov	r2, r0
 8009078:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <EXTI1_IRQHandler+0x68>)
 800907a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800907e:	33d0      	adds	r3, #208	; 0xd0
 8009080:	601a      	str	r2, [r3, #0]

    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI2) == 1)
 8009082:	2002      	movs	r0, #2
 8009084:	f7ff fd82 	bl	8008b8c <LL_EXTI_IsActiveFlag_0_31>
 8009088:	4603      	mov	r3, r0
 800908a:	2b01      	cmp	r3, #1
 800908c:	d105      	bne.n	800909a <EXTI1_IRQHandler+0x62>
    {
        daq_trig_trigger_la(&daq);
 800908e:	4804      	ldr	r0, [pc, #16]	; (80090a0 <EXTI1_IRQHandler+0x68>)
 8009090:	f7fe fee4 	bl	8007e5c <daq_trig_trigger_la>
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI2);
 8009094:	2002      	movs	r0, #2
 8009096:	f7ff fd8f 	bl	8008bb8 <LL_EXTI_ClearFlag_0_31>
    }
}
 800909a:	bf00      	nop
 800909c:	bd98      	pop	{r3, r4, r7, pc}
 800909e:	bf00      	nop
 80090a0:	200007ec 	.word	0x200007ec
 80090a4:	40020000 	.word	0x40020000

080090a8 <EXTI2_TSC_IRQHandler>:

void PS_LA_CH3_IRQh(void)
{
 80090a8:	b598      	push	{r3, r4, r7, lr}
 80090aa:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, PS_DMA_LA); // critical
 80090ac:	4b18      	ldr	r3, [pc, #96]	; (8009110 <EXTI2_TSC_IRQHandler+0x68>)
 80090ae:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80090b2:	33b0      	adds	r3, #176	; 0xb0
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	88db      	ldrh	r3, [r3, #6]
 80090b8:	461c      	mov	r4, r3
 80090ba:	4b15      	ldr	r3, [pc, #84]	; (8009110 <EXTI2_TSC_IRQHandler+0x68>)
 80090bc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80090c0:	33b4      	adds	r3, #180	; 0xb4
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4619      	mov	r1, r3
 80090c6:	4813      	ldr	r0, [pc, #76]	; (8009114 <EXTI2_TSC_IRQHandler+0x6c>)
 80090c8:	f7ff fd4a 	bl	8008b60 <LL_DMA_GetDataLength>
 80090cc:	4603      	mov	r3, r0
 80090ce:	1ae3      	subs	r3, r4, r3
 80090d0:	461a      	mov	r2, r3
 80090d2:	4b0f      	ldr	r3, [pc, #60]	; (8009110 <EXTI2_TSC_IRQHandler+0x68>)
 80090d4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80090d8:	33b0      	adds	r3, #176	; 0xb0
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	88db      	ldrh	r3, [r3, #6]
 80090de:	4619      	mov	r1, r3
 80090e0:	4610      	mov	r0, r2
 80090e2:	f7ff fd07 	bl	8008af4 <get_last_circ_idx>
 80090e6:	4602      	mov	r2, r0
 80090e8:	4b09      	ldr	r3, [pc, #36]	; (8009110 <EXTI2_TSC_IRQHandler+0x68>)
 80090ea:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80090ee:	33d0      	adds	r3, #208	; 0xd0
 80090f0:	601a      	str	r2, [r3, #0]

    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI3) == 1)
 80090f2:	2004      	movs	r0, #4
 80090f4:	f7ff fd4a 	bl	8008b8c <LL_EXTI_IsActiveFlag_0_31>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d105      	bne.n	800910a <EXTI2_TSC_IRQHandler+0x62>
    {
        daq_trig_trigger_la(&daq);
 80090fe:	4804      	ldr	r0, [pc, #16]	; (8009110 <EXTI2_TSC_IRQHandler+0x68>)
 8009100:	f7fe feac 	bl	8007e5c <daq_trig_trigger_la>
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI3);
 8009104:	2004      	movs	r0, #4
 8009106:	f7ff fd57 	bl	8008bb8 <LL_EXTI_ClearFlag_0_31>
    }
}
 800910a:	bf00      	nop
 800910c:	bd98      	pop	{r3, r4, r7, pc}
 800910e:	bf00      	nop
 8009110:	200007ec 	.word	0x200007ec
 8009114:	40020000 	.word	0x40020000

08009118 <EXTI3_IRQHandler>:

void PS_LA_CH4_IRQh(void)
{
 8009118:	b598      	push	{r3, r4, r7, lr}
 800911a:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, PS_DMA_LA); // critical
 800911c:	4b18      	ldr	r3, [pc, #96]	; (8009180 <EXTI3_IRQHandler+0x68>)
 800911e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009122:	33b0      	adds	r3, #176	; 0xb0
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	88db      	ldrh	r3, [r3, #6]
 8009128:	461c      	mov	r4, r3
 800912a:	4b15      	ldr	r3, [pc, #84]	; (8009180 <EXTI3_IRQHandler+0x68>)
 800912c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009130:	33b4      	adds	r3, #180	; 0xb4
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4619      	mov	r1, r3
 8009136:	4813      	ldr	r0, [pc, #76]	; (8009184 <EXTI3_IRQHandler+0x6c>)
 8009138:	f7ff fd12 	bl	8008b60 <LL_DMA_GetDataLength>
 800913c:	4603      	mov	r3, r0
 800913e:	1ae3      	subs	r3, r4, r3
 8009140:	461a      	mov	r2, r3
 8009142:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <EXTI3_IRQHandler+0x68>)
 8009144:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009148:	33b0      	adds	r3, #176	; 0xb0
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	88db      	ldrh	r3, [r3, #6]
 800914e:	4619      	mov	r1, r3
 8009150:	4610      	mov	r0, r2
 8009152:	f7ff fccf 	bl	8008af4 <get_last_circ_idx>
 8009156:	4602      	mov	r2, r0
 8009158:	4b09      	ldr	r3, [pc, #36]	; (8009180 <EXTI3_IRQHandler+0x68>)
 800915a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800915e:	33d0      	adds	r3, #208	; 0xd0
 8009160:	601a      	str	r2, [r3, #0]

    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI4) == 1)
 8009162:	2008      	movs	r0, #8
 8009164:	f7ff fd12 	bl	8008b8c <LL_EXTI_IsActiveFlag_0_31>
 8009168:	4603      	mov	r3, r0
 800916a:	2b01      	cmp	r3, #1
 800916c:	d105      	bne.n	800917a <EXTI3_IRQHandler+0x62>
    {
        daq_trig_trigger_la(&daq);
 800916e:	4804      	ldr	r0, [pc, #16]	; (8009180 <EXTI3_IRQHandler+0x68>)
 8009170:	f7fe fe74 	bl	8007e5c <daq_trig_trigger_la>
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI4);
 8009174:	2008      	movs	r0, #8
 8009176:	f7ff fd1f 	bl	8008bb8 <LL_EXTI_ClearFlag_0_31>
    }
}
 800917a:	bf00      	nop
 800917c:	bd98      	pop	{r3, r4, r7, pc}
 800917e:	bf00      	nop
 8009180:	200007ec 	.word	0x200007ec
 8009184:	40020000 	.word	0x40020000

08009188 <EXTI4_IRQHandler>:

void PS_LA_UNUSED_IRQh(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI_UNUSED) == 1)
 800918c:	2010      	movs	r0, #16
 800918e:	f7ff fcfd 	bl	8008b8c <LL_EXTI_IsActiveFlag_0_31>
 8009192:	4603      	mov	r3, r0
 8009194:	2b01      	cmp	r3, #1
 8009196:	d102      	bne.n	800919e <EXTI4_IRQHandler+0x16>
    {
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI_UNUSED);
 8009198:	2010      	movs	r0, #16
 800919a:	f7ff fd0d 	bl	8008bb8 <LL_EXTI_ClearFlag_0_31>
    }
}
 800919e:	bf00      	nop
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <led_init>:
#include "led.h"
#include "main.h"


void led_init(led_data_t* self)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b083      	sub	sp, #12
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
    self->ms = 0;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	605a      	str	r2, [r3, #4]
    self->num = 0;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
    self->enabled = 0;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	60da      	str	r2, [r3, #12]
    self->uwtick_first = 0;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	609a      	str	r2, [r3, #8]
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <led_set>:

void led_set(led_data_t* self, uint8_t enable)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b083      	sub	sp, #12
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	460b      	mov	r3, r1
 80091d8:	70fb      	strb	r3, [r7, #3]
    self->enabled = enable;
 80091da:	78fa      	ldrb	r2, [r7, #3]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	60da      	str	r2, [r3, #12]
    if (!self->enabled)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d108      	bne.n	80091fa <led_set+0x2c>
        PS_LED_PORT->BSRR |= (1 << PS_LED_PIN);  // 1
 80091e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80091f2:	f043 0320 	orr.w	r3, r3, #32
 80091f6:	6193      	str	r3, [r2, #24]
    else
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
}
 80091f8:	e007      	b.n	800920a <led_set+0x3c>
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
 80091fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8009204:	f043 0320 	orr.w	r3, r3, #32
 8009208:	6293      	str	r3, [r2, #40]	; 0x28
}
 800920a:	bf00      	nop
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <led_toggle>:

void led_toggle(led_data_t* self)
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
    if (self->enabled)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d008      	beq.n	8009238 <led_toggle+0x22>
        PS_LED_PORT->BSRR |= (1 << PS_LED_PIN);  // 1
 8009226:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8009230:	f043 0320 	orr.w	r3, r3, #32
 8009234:	6193      	str	r3, [r2, #24]
 8009236:	e007      	b.n	8009248 <led_toggle+0x32>
    else
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
 8009238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8009242:	f043 0320 	orr.w	r3, r3, #32
 8009246:	6293      	str	r3, [r2, #40]	; 0x28
    self->enabled = !self->enabled;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	bf0c      	ite	eq
 8009250:	2301      	moveq	r3, #1
 8009252:	2300      	movne	r3, #0
 8009254:	b2db      	uxtb	r3, r3
 8009256:	461a      	mov	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	60da      	str	r2, [r3, #12]
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <led_blink_set>:

void led_blink_set(led_data_t* self, int num, int ms, uint32_t _uwTick)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]
    self->num = (num * 2) - 1;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	005b      	lsls	r3, r3, #1
 800927a:	1e5a      	subs	r2, r3, #1
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	601a      	str	r2, [r3, #0]
    self->ms = ms;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	605a      	str	r2, [r3, #4]
    self->uwtick_first = _uwTick;
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	609a      	str	r2, [r3, #8]
    led_set(self, 1);
 800928c:	2101      	movs	r1, #1
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7ff ff9d 	bl	80091ce <led_set>
}
 8009294:	bf00      	nop
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <led_blink_do>:

void led_blink_do(led_data_t* self, uint32_t _uwTick)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
    if (self->num > 0)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dd23      	ble.n	80092f6 <led_blink_do+0x5a>
    {
        int diff;
        if (_uwTick >= self->uwtick_first)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	461a      	mov	r2, r3
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d306      	bcc.n	80092c8 <led_blink_do+0x2c>
            diff = _uwTick - self->uwtick_first;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	461a      	mov	r2, r3
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	1a9b      	subs	r3, r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]
 80092c6:	e006      	b.n	80092d6 <led_blink_do+0x3a>
        else
            diff = (_uwTick - self->uwtick_first) + 4294967295;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	461a      	mov	r2, r3
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	1a9b      	subs	r3, r3, r2
 80092d2:	3b01      	subs	r3, #1
 80092d4:	60fb      	str	r3, [r7, #12]

        if (diff >= self->ms)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	429a      	cmp	r2, r3
 80092de:	db0a      	blt.n	80092f6 <led_blink_do+0x5a>
        {
            self->uwtick_first = _uwTick;
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	609a      	str	r2, [r3, #8]
            self->num--;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	1e5a      	subs	r2, r3, #1
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	601a      	str	r2, [r3, #0]
            led_toggle(self);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff ff90 	bl	8009216 <led_toggle>
        }
    }
}
 80092f6:	bf00      	nop
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <LL_ADC_SetResolution>:
{
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	f023 0218 	bic.w	r2, r3, #24
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	60da      	str	r2, [r3, #12]
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <LL_ADC_REG_SetTriggerSource>:
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f423 627c 	bic.w	r2, r3, #4032	; 0xfc0
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	431a      	orrs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60da      	str	r2, [r3, #12]
}
 800933e:	bf00      	nop
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <LL_ADC_REG_SetSequencerLength>:
{
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009358:	f023 020f 	bic.w	r2, r3, #15
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	431a      	orrs	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <LL_ADC_REG_SetSequencerRanks>:
{
 8009370:	b480      	push	{r7}
 8009372:	b089      	sub	sp, #36	; 0x24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3330      	adds	r3, #48	; 0x30
 8009380:	4619      	mov	r1, r3
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009388:	f44f 7240 	mov.w	r2, #768	; 0x300
 800938c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	fa92 f2a2 	rbit	r2, r2
 8009394:	617a      	str	r2, [r7, #20]
  return result;
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	fab2 f282 	clz	r2, r2
 800939c:	b2d2      	uxtb	r2, r2
 800939e:	40d3      	lsrs	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	440b      	add	r3, r1
 80093a4:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	f003 031f 	and.w	r3, r3, #31
 80093b0:	211f      	movs	r1, #31
 80093b2:	fa01 f303 	lsl.w	r3, r1, r3
 80093b6:	43db      	mvns	r3, r3
 80093b8:	401a      	ands	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	0e9b      	lsrs	r3, r3, #26
 80093be:	f003 011f 	and.w	r1, r3, #31
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	f003 031f 	and.w	r3, r3, #31
 80093c8:	fa01 f303 	lsl.w	r3, r1, r3
 80093cc:	431a      	orrs	r2, r3
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	601a      	str	r2, [r3, #0]
}
 80093d2:	bf00      	nop
 80093d4:	3724      	adds	r7, #36	; 0x24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <LL_ADC_REG_SetDMATransfer>:
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG, DMATransfer);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f023 0203 	bic.w	r2, r3, #3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	431a      	orrs	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	60da      	str	r2, [r3, #12]
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <LL_ADC_REG_GetDMATransfer>:
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f003 0303 	and.w	r3, r3, #3
}
 8009414:	4618      	mov	r0, r3
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <LL_ADC_SetChannelSamplingTime>:
{
 8009420:	b480      	push	{r7}
 8009422:	b08d      	sub	sp, #52	; 0x34
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3314      	adds	r3, #20
 8009430:	4619      	mov	r1, r3
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800943c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800943e:	69ba      	ldr	r2, [r7, #24]
 8009440:	fa92 f2a2 	rbit	r2, r2
 8009444:	617a      	str	r2, [r7, #20]
  return result;
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	fab2 f282 	clz	r2, r2
 800944c:	b2d2      	uxtb	r2, r2
 800944e:	40d3      	lsrs	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	440b      	add	r3, r1
 8009454:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 8009456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8009460:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8009464:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009466:	6a39      	ldr	r1, [r7, #32]
 8009468:	fa91 f1a1 	rbit	r1, r1
 800946c:	61f9      	str	r1, [r7, #28]
  return result;
 800946e:	69f9      	ldr	r1, [r7, #28]
 8009470:	fab1 f181 	clz	r1, r1
 8009474:	b2c9      	uxtb	r1, r1
 8009476:	40cb      	lsrs	r3, r1
 8009478:	2107      	movs	r1, #7
 800947a:	fa01 f303 	lsl.w	r3, r1, r3
 800947e:	43db      	mvns	r3, r3
 8009480:	401a      	ands	r2, r3
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8009488:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800948c:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800948e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009490:	fa91 f1a1 	rbit	r1, r1
 8009494:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8009496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009498:	fab1 f181 	clz	r1, r1
 800949c:	b2c9      	uxtb	r1, r1
 800949e:	40cb      	lsrs	r3, r1
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	fa01 f303 	lsl.w	r3, r1, r3
 80094a6:	431a      	orrs	r2, r3
 80094a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094aa:	601a      	str	r2, [r3, #0]
}
 80094ac:	bf00      	nop
 80094ae:	3734      	adds	r7, #52	; 0x34
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <LL_ADC_SetMultimode>:
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DUAL, Multimode);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f023 021f 	bic.w	r2, r3, #31
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	431a      	orrs	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	609a      	str	r2, [r3, #8]
}
 80094d2:	bf00      	nop
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <LL_ADC_Enable>:
{
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80094f2:	f043 0201 	orr.w	r2, r3, #1
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	609a      	str	r2, [r3, #8]
}
 80094fa:	bf00      	nop
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <LL_ADC_StartCalibration>:
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009522:	4313      	orrs	r3, r2
 8009524:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	609a      	str	r2, [r3, #8]
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <LL_ADC_IsCalibrationOnGoing>:
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800954c:	bf0c      	ite	eq
 800954e:	2301      	moveq	r3, #1
 8009550:	2300      	movne	r3, #0
 8009552:	b2db      	uxtb	r3, r3
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <LL_DMA_EnableChannel>:
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	3b01      	subs	r3, #1
 800956e:	4a0b      	ldr	r2, [pc, #44]	; (800959c <LL_DMA_EnableChannel+0x3c>)
 8009570:	5cd3      	ldrb	r3, [r2, r3]
 8009572:	461a      	mov	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4413      	add	r3, r2
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	3a01      	subs	r2, #1
 800957e:	4907      	ldr	r1, [pc, #28]	; (800959c <LL_DMA_EnableChannel+0x3c>)
 8009580:	5c8a      	ldrb	r2, [r1, r2]
 8009582:	4611      	mov	r1, r2
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	440a      	add	r2, r1
 8009588:	f043 0301 	orr.w	r3, r3, #1
 800958c:	6013      	str	r3, [r2, #0]
}
 800958e:	bf00      	nop
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	08015788 	.word	0x08015788

080095a0 <LL_DMA_DisableChannel>:
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	4a0b      	ldr	r2, [pc, #44]	; (80095dc <LL_DMA_DisableChannel+0x3c>)
 80095b0:	5cd3      	ldrb	r3, [r2, r3]
 80095b2:	461a      	mov	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4413      	add	r3, r2
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	3a01      	subs	r2, #1
 80095be:	4907      	ldr	r1, [pc, #28]	; (80095dc <LL_DMA_DisableChannel+0x3c>)
 80095c0:	5c8a      	ldrb	r2, [r1, r2]
 80095c2:	4611      	mov	r1, r2
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	440a      	add	r2, r1
 80095c8:	f023 0301 	bic.w	r3, r3, #1
 80095cc:	6013      	str	r3, [r2, #0]
}
 80095ce:	bf00      	nop
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	08015788 	.word	0x08015788

080095e0 <LL_DMA_SetPeriphSize>:
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	3b01      	subs	r3, #1
 80095f0:	4a0c      	ldr	r2, [pc, #48]	; (8009624 <LL_DMA_SetPeriphSize+0x44>)
 80095f2:	5cd3      	ldrb	r3, [r2, r3]
 80095f4:	461a      	mov	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4413      	add	r3, r2
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	3b01      	subs	r3, #1
 8009604:	4907      	ldr	r1, [pc, #28]	; (8009624 <LL_DMA_SetPeriphSize+0x44>)
 8009606:	5ccb      	ldrb	r3, [r1, r3]
 8009608:	4619      	mov	r1, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	440b      	add	r3, r1
 800960e:	4619      	mov	r1, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4313      	orrs	r3, r2
 8009614:	600b      	str	r3, [r1, #0]
}
 8009616:	bf00      	nop
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	08015788 	.word	0x08015788

08009628 <LL_DMA_SetMemorySize>:
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	3b01      	subs	r3, #1
 8009638:	4a0c      	ldr	r2, [pc, #48]	; (800966c <LL_DMA_SetMemorySize+0x44>)
 800963a:	5cd3      	ldrb	r3, [r2, r3]
 800963c:	461a      	mov	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	3b01      	subs	r3, #1
 800964c:	4907      	ldr	r1, [pc, #28]	; (800966c <LL_DMA_SetMemorySize+0x44>)
 800964e:	5ccb      	ldrb	r3, [r1, r3]
 8009650:	4619      	mov	r1, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	440b      	add	r3, r1
 8009656:	4619      	mov	r1, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4313      	orrs	r3, r2
 800965c:	600b      	str	r3, [r1, #0]
}
 800965e:	bf00      	nop
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	08015788 	.word	0x08015788

08009670 <LL_DMA_SetDataLength>:
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	3b01      	subs	r3, #1
 8009680:	4a0c      	ldr	r2, [pc, #48]	; (80096b4 <LL_DMA_SetDataLength+0x44>)
 8009682:	5cd3      	ldrb	r3, [r2, r3]
 8009684:	461a      	mov	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	4413      	add	r3, r2
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	0c1b      	lsrs	r3, r3, #16
 800968e:	041b      	lsls	r3, r3, #16
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	3a01      	subs	r2, #1
 8009694:	4907      	ldr	r1, [pc, #28]	; (80096b4 <LL_DMA_SetDataLength+0x44>)
 8009696:	5c8a      	ldrb	r2, [r1, r2]
 8009698:	4611      	mov	r1, r2
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	440a      	add	r2, r1
 800969e:	4611      	mov	r1, r2
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	604b      	str	r3, [r1, #4]
}
 80096a6:	bf00      	nop
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	08015788 	.word	0x08015788

080096b8 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
 80096c4:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	2b10      	cmp	r3, #16
 80096ca:	d114      	bne.n	80096f6 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	3b01      	subs	r3, #1
 80096d0:	4a16      	ldr	r2, [pc, #88]	; (800972c <LL_DMA_ConfigAddresses+0x74>)
 80096d2:	5cd3      	ldrb	r3, [r2, r3]
 80096d4:	461a      	mov	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	4413      	add	r3, r2
 80096da:	461a      	mov	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	3b01      	subs	r3, #1
 80096e4:	4a11      	ldr	r2, [pc, #68]	; (800972c <LL_DMA_ConfigAddresses+0x74>)
 80096e6:	5cd3      	ldrb	r3, [r2, r3]
 80096e8:	461a      	mov	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	461a      	mov	r2, r3
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 80096f4:	e013      	b.n	800971e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	4a0c      	ldr	r2, [pc, #48]	; (800972c <LL_DMA_ConfigAddresses+0x74>)
 80096fc:	5cd3      	ldrb	r3, [r2, r3]
 80096fe:	461a      	mov	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	461a      	mov	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	3b01      	subs	r3, #1
 800970e:	4a07      	ldr	r2, [pc, #28]	; (800972c <LL_DMA_ConfigAddresses+0x74>)
 8009710:	5cd3      	ldrb	r3, [r2, r3]
 8009712:	461a      	mov	r2, r3
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	461a      	mov	r2, r3
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	60d3      	str	r3, [r2, #12]
}
 800971e:	bf00      	nop
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	08015788 	.word	0x08015788

08009730 <dma_set>:
#include "comm.h"
#include "main.h"


void dma_set(uint32_t src, DMA_TypeDef* dma, uint32_t dma_ch, uint32_t dst, uint32_t buff_size, uint32_t p_sz, uint32_t m_sz, uint32_t dir)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af02      	add	r7, sp, #8
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
 800973c:	603b      	str	r3, [r7, #0]
    LL_DMA_DisableChannel(dma, dma_ch);
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	68b8      	ldr	r0, [r7, #8]
 8009742:	f7ff ff2d 	bl	80095a0 <LL_DMA_DisableChannel>
    // Select ADC as DMA transfer request.
    //LL_DMAMUX_SetRequestID(DMAMUX1, LL_DMAMUX_CHANNEL_0, LL_DMAMUX_REQ_ADC1);

    // DMA transfer addresses and size.
    LL_DMA_ConfigAddresses(dma, dma_ch, src, dst, dir);
 8009746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	68b8      	ldr	r0, [r7, #8]
 8009752:	f7ff ffb1 	bl	80096b8 <LL_DMA_ConfigAddresses>
    LL_DMA_SetPeriphSize(dma, dma_ch, p_sz);
 8009756:	69fa      	ldr	r2, [r7, #28]
 8009758:	6879      	ldr	r1, [r7, #4]
 800975a:	68b8      	ldr	r0, [r7, #8]
 800975c:	f7ff ff40 	bl	80095e0 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(dma, dma_ch, m_sz);
 8009760:	6a3a      	ldr	r2, [r7, #32]
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	68b8      	ldr	r0, [r7, #8]
 8009766:	f7ff ff5f 	bl	8009628 <LL_DMA_SetMemorySize>
    LL_DMA_SetDataLength(dma, dma_ch, buff_size);
 800976a:	69ba      	ldr	r2, [r7, #24]
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	68b8      	ldr	r0, [r7, #8]
 8009770:	f7ff ff7e 	bl	8009670 <LL_DMA_SetDataLength>
    //LL_DMA_EnableIT_TC(dma, dma_ch); // Enable transfer complete interrupt.
    //LL_DMA_EnableIT_HT(dma, dma_ch); // Enable half transfer interrupt.
    //LL_DMA_EnableIT_TE(dma, dma_ch); // Enable transfer error interrupt.

    // Enable
    LL_DMA_EnableChannel(dma, dma_ch);
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	68b8      	ldr	r0, [r7, #8]
 8009778:	f7ff fef2 	bl	8009560 <LL_DMA_EnableChannel>
}
 800977c:	bf00      	nop
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <adc_init>:
    return LL_ADC_REG_ReadConversionData12(ADC2);
}
*/

void adc_init()
{
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
#if defined(PS_ADC_MODE_ADC1) || defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
    adc_init_calib(ADC1);
 8009788:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800978c:	f000 f812 	bl	80097b4 <adc_init_calib>
#endif

#endif

#if defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
    adc_init_calib(ADC2);
 8009790:	4805      	ldr	r0, [pc, #20]	; (80097a8 <adc_init+0x24>)
 8009792:	f000 f80f 	bl	80097b4 <adc_init_calib>
#endif

#if defined(PS_ADC_MODE_ADC1234)
    adc_init_calib(ADC3);
 8009796:	4805      	ldr	r0, [pc, #20]	; (80097ac <adc_init+0x28>)
 8009798:	f000 f80c 	bl	80097b4 <adc_init_calib>
    adc_init_calib(ADC4);
 800979c:	4804      	ldr	r0, [pc, #16]	; (80097b0 <adc_init+0x2c>)
 800979e:	f000 f809 	bl	80097b4 <adc_init_calib>
#endif
}
 80097a2:	bf00      	nop
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	50000100 	.word	0x50000100
 80097ac:	50000400 	.word	0x50000400
 80097b0:	50000500 	.word	0x50000500

080097b4 <adc_init_calib>:

void adc_init_calib(ADC_TypeDef* adc)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
#if defined(PS_ADC_CAL_EN)
    LL_ADC_Enable(adc);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff fe8e 	bl	80094de <LL_ADC_Enable>
#endif
#if defined(ADC_CR2_TSVREFE)
    adc->CR2 |= ADC_CR2_TSVREFE;
#endif
    uint32_t  wait_loop_index = ((PS_ADC_EN_TICKS * 32) >> 1);
 80097c2:	2340      	movs	r3, #64	; 0x40
 80097c4:	617b      	str	r3, [r7, #20]
    while(wait_loop_index != 0)
 80097c6:	e002      	b.n	80097ce <adc_init_calib+0x1a>
    {
      wait_loop_index--;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	3b01      	subs	r3, #1
 80097cc:	617b      	str	r3, [r7, #20]
    while(wait_loop_index != 0)
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1f9      	bne.n	80097c8 <adc_init_calib+0x14>
    //LL_ADC_EnableInternalRegulator(adc);
    //LL_ADC_DisableDeepPowerDown(adc);
    //for (int i = 0; i <  1000; ++i) asm("nop");

    //LL_ADC_Disable(adc);
    const uint32_t dma_tx_mode = LL_ADC_REG_GetDMATransfer(adc);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff fe15 	bl	8009404 <LL_ADC_REG_GetDMATransfer>
 80097da:	60f8      	str	r0, [r7, #12]
    LL_ADC_REG_SetDMATransfer(adc, LL_ADC_REG_DMA_TRANSFER_NONE);
 80097dc:	2100      	movs	r1, #0
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7ff fdfd 	bl	80093de <LL_ADC_REG_SetDMATransfer>

#ifdef LL_ADC_DIFFERENTIAL_ENDED
    LL_ADC_StartCalibration(adc, LL_ADC_SINGLE_ENDED);
 80097e4:	217f      	movs	r1, #127	; 0x7f
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff fe8d 	bl	8009506 <LL_ADC_StartCalibration>
#else
    LL_ADC_StartCalibration(adc);
#endif
    while (LL_ADC_IsCalibrationOnGoing(adc) != 0);
 80097ec:	bf00      	nop
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff fea2 	bl	8009538 <LL_ADC_IsCalibrationOnGoing>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1f9      	bne.n	80097ee <adc_init_calib+0x3a>

    for (int i = 0; i <  10000; ++i) asm("nop");
 80097fa:	2300      	movs	r3, #0
 80097fc:	613b      	str	r3, [r7, #16]
 80097fe:	e003      	b.n	8009808 <adc_init_calib+0x54>
 8009800:	bf00      	nop
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	3301      	adds	r3, #1
 8009806:	613b      	str	r3, [r7, #16]
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	f242 720f 	movw	r2, #9999	; 0x270f
 800980e:	4293      	cmp	r3, r2
 8009810:	ddf6      	ble.n	8009800 <adc_init_calib+0x4c>

    LL_ADC_REG_SetDMATransfer(adc, dma_tx_mode);
 8009812:	68f9      	ldr	r1, [r7, #12]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7ff fde2 	bl	80093de <LL_ADC_REG_SetDMATransfer>
#if !defined(PS_ADC_CAL_EN)
    LL_ADC_Enable(adc);
#endif
}
 800981a:	bf00      	nop
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <adc_set_ch>:

void adc_set_ch(ADC_TypeDef* adc, uint8_t ch1, uint8_t ch2, uint8_t ch3, uint8_t ch4, uint32_t smpl_time, uint8_t vrefint)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	4608      	mov	r0, r1
 800982e:	4611      	mov	r1, r2
 8009830:	461a      	mov	r2, r3
 8009832:	4603      	mov	r3, r0
 8009834:	70fb      	strb	r3, [r7, #3]
 8009836:	460b      	mov	r3, r1
 8009838:	70bb      	strb	r3, [r7, #2]
 800983a:	4613      	mov	r3, r2
 800983c:	707b      	strb	r3, [r7, #1]
#ifdef PS_ADC_TRIG_34
    if (ch1 == 1 || ch2 == 2)
 800983e:	78fb      	ldrb	r3, [r7, #3]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d002      	beq.n	800984a <adc_set_ch+0x26>
 8009844:	78bb      	ldrb	r3, [r7, #2]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d105      	bne.n	8009856 <adc_set_ch+0x32>
        LL_ADC_REG_SetTriggerSource(adc, PS_ADC_TRIG_12);
 800984a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7ff fd68 	bl	8009324 <LL_ADC_REG_SetTriggerSource>
 8009854:	e004      	b.n	8009860 <adc_set_ch+0x3c>
    else
        LL_ADC_REG_SetTriggerSource(adc, PS_ADC_TRIG_34);
 8009856:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7ff fd62 	bl	8009324 <LL_ADC_REG_SetTriggerSource>
#else
    LL_ADC_REG_SetTriggerSource(adc, PS_ADC_TRIG_12);
#endif
    LL_ADC_SetMultimode(__LL_ADC_COMMON_INSTANCE(adc), LL_ADC_MULTI_INDEPENDENT);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009866:	d003      	beq.n	8009870 <adc_set_ch+0x4c>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a49      	ldr	r2, [pc, #292]	; (8009990 <adc_set_ch+0x16c>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d101      	bne.n	8009874 <adc_set_ch+0x50>
 8009870:	4b48      	ldr	r3, [pc, #288]	; (8009994 <adc_set_ch+0x170>)
 8009872:	e000      	b.n	8009876 <adc_set_ch+0x52>
 8009874:	4b48      	ldr	r3, [pc, #288]	; (8009998 <adc_set_ch+0x174>)
 8009876:	2100      	movs	r1, #0
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff fe1d 	bl	80094b8 <LL_ADC_SetMultimode>
    LL_ADC_REG_SetDMATransfer(adc, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 800987e:	2103      	movs	r1, #3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff fdac 	bl	80093de <LL_ADC_REG_SetDMATransfer>

    //LL_ADC_Disable(adc);
    int len = ch1 + ch2 + ch3 + ch4 + vrefint;
 8009886:	78fa      	ldrb	r2, [r7, #3]
 8009888:	78bb      	ldrb	r3, [r7, #2]
 800988a:	441a      	add	r2, r3
 800988c:	787b      	ldrb	r3, [r7, #1]
 800988e:	441a      	add	r2, r3
 8009890:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009894:	441a      	add	r2, r3
 8009896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800989a:	4413      	add	r3, r2
 800989c:	60fb      	str	r3, [r7, #12]

    uint32_t len_raw = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800989e:	2300      	movs	r3, #0
 80098a0:	617b      	str	r3, [r7, #20]
    if (len == 2)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d101      	bne.n	80098ac <adc_set_ch+0x88>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80098a8:	2301      	movs	r3, #1
 80098aa:	617b      	str	r3, [r7, #20]
    if (len == 3)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d102      	bne.n	80098b8 <adc_set_ch+0x94>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 80098b2:	2302      	movs	r3, #2
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	e00a      	b.n	80098ce <adc_set_ch+0xaa>
    else if (len == 4)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d102      	bne.n	80098c4 <adc_set_ch+0xa0>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
 80098be:	2303      	movs	r3, #3
 80098c0:	617b      	str	r3, [r7, #20]
 80098c2:	e004      	b.n	80098ce <adc_set_ch+0xaa>
    else if (len == 5)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b05      	cmp	r3, #5
 80098c8:	d101      	bne.n	80098ce <adc_set_ch+0xaa>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS;
 80098ca:	2304      	movs	r3, #4
 80098cc:	617b      	str	r3, [r7, #20]

    LL_ADC_REG_SetSequencerLength(adc, len_raw);
 80098ce:	6979      	ldr	r1, [r7, #20]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff fd3a 	bl	800934a <LL_ADC_REG_SetSequencerLength>

    uint32_t next_rank = LL_ADC_REG_RANK_1;
 80098d6:	2306      	movs	r3, #6
 80098d8:	613b      	str	r3, [r7, #16]

    if (vrefint)
 80098da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00d      	beq.n	80098fe <adc_set_ch+0xda>
    {
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, LL_ADC_CHANNEL_VREFINT);
 80098e2:	4a2e      	ldr	r2, [pc, #184]	; (800999c <adc_set_ch+0x178>)
 80098e4:	6939      	ldr	r1, [r7, #16]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7ff fd42 	bl	8009370 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, LL_ADC_CHANNEL_VREFINT, smpl_time);
 80098ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ee:	492b      	ldr	r1, [pc, #172]	; (800999c <adc_set_ch+0x178>)
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff fd95 	bl	8009420 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 80098f6:	6938      	ldr	r0, [r7, #16]
 80098f8:	f000 f85a 	bl	80099b0 <adc_get_next_rank>
 80098fc:	6138      	str	r0, [r7, #16]
    }
    if (ch1) {
 80098fe:	78fb      	ldrb	r3, [r7, #3]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00d      	beq.n	8009920 <adc_set_ch+0xfc>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH1);
 8009904:	4a26      	ldr	r2, [pc, #152]	; (80099a0 <adc_set_ch+0x17c>)
 8009906:	6939      	ldr	r1, [r7, #16]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff fd31 	bl	8009370 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH1, smpl_time);
 800990e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009910:	4923      	ldr	r1, [pc, #140]	; (80099a0 <adc_set_ch+0x17c>)
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7ff fd84 	bl	8009420 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 8009918:	6938      	ldr	r0, [r7, #16]
 800991a:	f000 f849 	bl	80099b0 <adc_get_next_rank>
 800991e:	6138      	str	r0, [r7, #16]
    }
    if (ch2) {
 8009920:	78bb      	ldrb	r3, [r7, #2]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00d      	beq.n	8009942 <adc_set_ch+0x11e>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH2);
 8009926:	4a1f      	ldr	r2, [pc, #124]	; (80099a4 <adc_set_ch+0x180>)
 8009928:	6939      	ldr	r1, [r7, #16]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff fd20 	bl	8009370 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH2, smpl_time);
 8009930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009932:	491c      	ldr	r1, [pc, #112]	; (80099a4 <adc_set_ch+0x180>)
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff fd73 	bl	8009420 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 800993a:	6938      	ldr	r0, [r7, #16]
 800993c:	f000 f838 	bl	80099b0 <adc_get_next_rank>
 8009940:	6138      	str	r0, [r7, #16]
    }
    if (ch3) {
 8009942:	787b      	ldrb	r3, [r7, #1]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00d      	beq.n	8009964 <adc_set_ch+0x140>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH3);
 8009948:	4a17      	ldr	r2, [pc, #92]	; (80099a8 <adc_set_ch+0x184>)
 800994a:	6939      	ldr	r1, [r7, #16]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff fd0f 	bl	8009370 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH3, smpl_time);
 8009952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009954:	4914      	ldr	r1, [pc, #80]	; (80099a8 <adc_set_ch+0x184>)
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff fd62 	bl	8009420 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 800995c:	6938      	ldr	r0, [r7, #16]
 800995e:	f000 f827 	bl	80099b0 <adc_get_next_rank>
 8009962:	6138      	str	r0, [r7, #16]
    }
    if (ch4) {
 8009964:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00d      	beq.n	8009988 <adc_set_ch+0x164>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH4);
 800996c:	4a0f      	ldr	r2, [pc, #60]	; (80099ac <adc_set_ch+0x188>)
 800996e:	6939      	ldr	r1, [r7, #16]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff fcfd 	bl	8009370 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH4, smpl_time);
 8009976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009978:	490c      	ldr	r1, [pc, #48]	; (80099ac <adc_set_ch+0x188>)
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff fd50 	bl	8009420 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 8009980:	6938      	ldr	r0, [r7, #16]
 8009982:	f000 f815 	bl	80099b0 <adc_get_next_rank>
 8009986:	6138      	str	r0, [r7, #16]
    }

    //LL_ADC_Enable(adc);
}
 8009988:	bf00      	nop
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	50000100 	.word	0x50000100
 8009994:	50000300 	.word	0x50000300
 8009998:	50000700 	.word	0x50000700
 800999c:	cb840000 	.word	0xcb840000
 80099a0:	19200040 	.word	0x19200040
 80099a4:	1d500080 	.word	0x1d500080
 80099a8:	32601000 	.word	0x32601000
 80099ac:	10c00010 	.word	0x10c00010

080099b0 <adc_get_next_rank>:

uint32_t adc_get_next_rank(uint32_t rank)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
    if (rank == LL_ADC_REG_RANK_1)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2b06      	cmp	r3, #6
 80099bc:	d101      	bne.n	80099c2 <adc_get_next_rank+0x12>
        return LL_ADC_REG_RANK_2;
 80099be:	230c      	movs	r3, #12
 80099c0:	e011      	b.n	80099e6 <adc_get_next_rank+0x36>
    if (rank == LL_ADC_REG_RANK_2)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b0c      	cmp	r3, #12
 80099c6:	d101      	bne.n	80099cc <adc_get_next_rank+0x1c>
        return LL_ADC_REG_RANK_3;
 80099c8:	2312      	movs	r3, #18
 80099ca:	e00c      	b.n	80099e6 <adc_get_next_rank+0x36>
    else if (rank == LL_ADC_REG_RANK_3)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b12      	cmp	r3, #18
 80099d0:	d101      	bne.n	80099d6 <adc_get_next_rank+0x26>
        return LL_ADC_REG_RANK_4;
 80099d2:	2318      	movs	r3, #24
 80099d4:	e007      	b.n	80099e6 <adc_get_next_rank+0x36>
    else if (rank == LL_ADC_REG_RANK_4)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b18      	cmp	r3, #24
 80099da:	d102      	bne.n	80099e2 <adc_get_next_rank+0x32>
        return LL_ADC_REG_RANK_5;
 80099dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099e0:	e001      	b.n	80099e6 <adc_get_next_rank+0x36>
    else
        return LL_ADC_REG_RANK_6;
 80099e2:	f44f 7383 	mov.w	r3, #262	; 0x106
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <adc_set_res>:

void adc_set_res(ADC_TypeDef* adc, uint32_t resolution) // LL_ADC_RESOLUTION_12B, LL_ADC_RESOLUTION_8B
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	6039      	str	r1, [r7, #0]
    //LL_ADC_Disable(adc);
#ifdef PS_ADC_BIT8
    LL_ADC_SetResolution(adc, resolution);
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7ff fc7d 	bl	80092fe <LL_ADC_SetResolution>
#endif
    //LL_ADC_Enable(adc);
}
 8009a04:	bf00      	nop
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <get_last_circ_idx>:
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
    int last_idx = pos - 1;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	60fb      	str	r3, [r7, #12]
    if (last_idx < 0)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	da02      	bge.n	8009a28 <get_last_circ_idx+0x1c>
        last_idx = len - 1;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	60fb      	str	r3, [r7, #12]
    return last_idx;
 8009a28:	68fb      	ldr	r3, [r7, #12]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
	...

08009a38 <LL_DMA_GetDataLength>:
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	3b01      	subs	r3, #1
 8009a46:	4a06      	ldr	r2, [pc, #24]	; (8009a60 <LL_DMA_GetDataLength+0x28>)
 8009a48:	5cd3      	ldrb	r3, [r2, r3]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4413      	add	r3, r2
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	b29b      	uxth	r3, r3
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	08015790 	.word	0x08015790

08009a64 <PS_Reset>:


/************************* [IEEE 488] *************************/

scpi_result_t PS_Reset(scpi_t * context)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
    daq_enable(&daq, 0);
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	480b      	ldr	r0, [pc, #44]	; (8009a9c <PS_Reset+0x38>)
 8009a70:	f7fd fa24 	bl	8006ebc <daq_enable>
    daq_settings_init(&daq);
 8009a74:	4809      	ldr	r0, [pc, #36]	; (8009a9c <PS_Reset+0x38>)
 8009a76:	f7fc fbef 	bl	8006258 <daq_settings_init>
    daq_mode_set(&daq, VM);
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	4807      	ldr	r0, [pc, #28]	; (8009a9c <PS_Reset+0x38>)
 8009a7e:	f7fd fb07 	bl	8007090 <daq_mode_set>
    daq_enable(&daq, 1);
 8009a82:	2101      	movs	r1, #1
 8009a84:	4805      	ldr	r0, [pc, #20]	; (8009a9c <PS_Reset+0x38>)
 8009a86:	f7fd fa19 	bl	8006ebc <daq_enable>
    // TODO reset pwm?

    SCPI_ResultText(context, SCPI_OK);
 8009a8a:	4905      	ldr	r1, [pc, #20]	; (8009aa0 <PS_Reset+0x3c>)
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f004 ff91 	bl	800e9b4 <SCPI_ResultText>
    return SCPI_RES_OK;
 8009a92:	2301      	movs	r3, #1
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	200007ec 	.word	0x200007ec
 8009aa0:	080151b8 	.word	0x080151b8

08009aa4 <PS_System_Mode>:

/************************* [System Actions] *************************/

scpi_result_t PS_System_Mode(scpi_t * context)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
    const char* p1;
    size_t p1l;

    if (!SCPI_ParamCharacters(context, &p1, &p1l, TRUE))
 8009aac:	f107 0208 	add.w	r2, r7, #8
 8009ab0:	f107 010c 	add.w	r1, r7, #12
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f005 fc3c 	bl	800f334 <SCPI_ParamCharacters>
 8009abc:	4603      	mov	r3, r0
 8009abe:	f083 0301 	eor.w	r3, r3, #1
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <PS_System_Mode+0x2a>
        return SCPI_RES_ERR;
 8009ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8009acc:	e033      	b.n	8009b36 <PS_System_Mode+0x92>

    if (strcmp(p1, "SCOPE\r\n") == 0)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	491b      	ldr	r1, [pc, #108]	; (8009b40 <PS_System_Mode+0x9c>)
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7f6 fb84 	bl	80001e0 <strcmp>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d104      	bne.n	8009ae8 <PS_System_Mode+0x44>
        daq_mode_set(&daq, SCOPE);
 8009ade:	2100      	movs	r1, #0
 8009ae0:	4818      	ldr	r0, [pc, #96]	; (8009b44 <PS_System_Mode+0xa0>)
 8009ae2:	f7fd fad5 	bl	8007090 <daq_mode_set>
 8009ae6:	e021      	b.n	8009b2c <PS_System_Mode+0x88>
    else if (strcmp(p1, "VM\r\n") == 0)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4917      	ldr	r1, [pc, #92]	; (8009b48 <PS_System_Mode+0xa4>)
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7f6 fb77 	bl	80001e0 <strcmp>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d104      	bne.n	8009b02 <PS_System_Mode+0x5e>
        daq_mode_set(&daq, VM);
 8009af8:	2101      	movs	r1, #1
 8009afa:	4812      	ldr	r0, [pc, #72]	; (8009b44 <PS_System_Mode+0xa0>)
 8009afc:	f7fd fac8 	bl	8007090 <daq_mode_set>
 8009b00:	e014      	b.n	8009b2c <PS_System_Mode+0x88>
    else if (strcmp(p1, "LA\r\n") == 0)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	4911      	ldr	r1, [pc, #68]	; (8009b4c <PS_System_Mode+0xa8>)
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7f6 fb6a 	bl	80001e0 <strcmp>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d104      	bne.n	8009b1c <PS_System_Mode+0x78>
        daq_mode_set(&daq, LA);
 8009b12:	2102      	movs	r1, #2
 8009b14:	480b      	ldr	r0, [pc, #44]	; (8009b44 <PS_System_Mode+0xa0>)
 8009b16:	f7fd fabb 	bl	8007090 <daq_mode_set>
 8009b1a:	e007      	b.n	8009b2c <PS_System_Mode+0x88>
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8009b1c:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f002 ff2f 	bl	800c984 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8009b26:	f04f 33ff 	mov.w	r3, #4294967295
 8009b2a:	e004      	b.n	8009b36 <PS_System_Mode+0x92>
    }

    SCPI_ResultText(context, SCPI_OK);
 8009b2c:	4908      	ldr	r1, [pc, #32]	; (8009b50 <PS_System_Mode+0xac>)
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f004 ff40 	bl	800e9b4 <SCPI_ResultText>
    return SCPI_RES_OK;
 8009b34:	2301      	movs	r3, #1
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	080151bc 	.word	0x080151bc
 8009b44:	200007ec 	.word	0x200007ec
 8009b48:	080151c4 	.word	0x080151c4
 8009b4c:	080151cc 	.word	0x080151cc
 8009b50:	080151b8 	.word	0x080151b8

08009b54 <PS_System_ModeQ>:

scpi_result_t PS_System_ModeQ(scpi_t * context)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
    if (daq.mode == SCOPE)
 8009b5c:	4b10      	ldr	r3, [pc, #64]	; (8009ba0 <PS_System_ModeQ+0x4c>)
 8009b5e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009b62:	3334      	adds	r3, #52	; 0x34
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d104      	bne.n	8009b74 <PS_System_ModeQ+0x20>
        SCPI_ResultText(context, "SCOPE");
 8009b6a:	490e      	ldr	r1, [pc, #56]	; (8009ba4 <PS_System_ModeQ+0x50>)
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f004 ff21 	bl	800e9b4 <SCPI_ResultText>
 8009b72:	e00f      	b.n	8009b94 <PS_System_ModeQ+0x40>
    else if (daq.mode == VM)
 8009b74:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <PS_System_ModeQ+0x4c>)
 8009b76:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009b7a:	3334      	adds	r3, #52	; 0x34
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d104      	bne.n	8009b8c <PS_System_ModeQ+0x38>
        SCPI_ResultText(context, "VM");
 8009b82:	4909      	ldr	r1, [pc, #36]	; (8009ba8 <PS_System_ModeQ+0x54>)
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f004 ff15 	bl	800e9b4 <SCPI_ResultText>
 8009b8a:	e003      	b.n	8009b94 <PS_System_ModeQ+0x40>
    else
        SCPI_ResultText(context, "LA");
 8009b8c:	4907      	ldr	r1, [pc, #28]	; (8009bac <PS_System_ModeQ+0x58>)
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f004 ff10 	bl	800e9b4 <SCPI_ResultText>

    return SCPI_RES_OK;
 8009b94:	2301      	movs	r3, #1
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	200007ec 	.word	0x200007ec
 8009ba4:	080151d4 	.word	0x080151d4
 8009ba8:	080151dc 	.word	0x080151dc
 8009bac:	080151e0 	.word	0x080151e0

08009bb0 <PS_System_LimitsQ>:

scpi_result_t PS_System_LimitsQ(scpi_t * context)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b0a4      	sub	sp, #144	; 0x90
 8009bb4:	af08      	add	r7, sp, #32
 8009bb6:	6078      	str	r0, [r7, #4]
    char buff[80];
    char dual[2] = {'\0'};
 8009bb8:	2300      	movs	r3, #0
 8009bba:	823b      	strh	r3, [r7, #16]
    char inter[2] = {'\0'};
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	81bb      	strh	r3, [r7, #12]
    uint8_t dac = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t bit8 = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    uint8_t adcs = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
#ifdef PS_DAC
    dac = 1;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
#endif
#ifdef PS_ADC_BIT8
    bit8 = 1;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
#if defined(PS_ADC_MODE_ADC1)
    adcs = 1;
#elif defined(PS_ADC_MODE_ADC12)
    adcs = 2;
#elif defined(PS_ADC_MODE_ADC1234)
    adcs = 4;
 8009bde:	2304      	movs	r3, #4
 8009be0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    //char smplt12_s[15];
    //char smplt8_s[15];
    //sprint_fast(smplt12_s, "%s", PS_ADC_1CH_SMPL_TM(PS_ADC_SMPLT_MAX_N, PS_ADC_TCONV12), 8);
    //sprint_fast(smplt8_s, "%s", PS_ADC_1CH_SMPL_TM(PS_ADC_SMPLT_MAX_N, PS_ADC_TCONV8), 8);

    int pwm_max_f = PS_TIM_PWM1_FREQ / 2;
 8009be4:	4b15      	ldr	r3, [pc, #84]	; (8009c3c <PS_System_LimitsQ+0x8c>)
 8009be6:	66bb      	str	r3, [r7, #104]	; 0x68

    int len = sprintf(buff, "%d,%d,%d,%d,%d,%d%s%s,%d,%d", PS_DAQ_MAX_B12_FS, PS_DAQ_MAX_B8_FS, PS_DAQ_MAX_MEM,
 8009be8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8009bec:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8009bf0:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8009bf4:	f107 0014 	add.w	r0, r7, #20
 8009bf8:	9107      	str	r1, [sp, #28]
 8009bfa:	9206      	str	r2, [sp, #24]
 8009bfc:	f107 020c 	add.w	r2, r7, #12
 8009c00:	9205      	str	r2, [sp, #20]
 8009c02:	f107 0210 	add.w	r2, r7, #16
 8009c06:	9204      	str	r2, [sp, #16]
 8009c08:	9303      	str	r3, [sp, #12]
 8009c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c0c:	9302      	str	r3, [sp, #8]
 8009c0e:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <PS_System_LimitsQ+0x90>)
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <PS_System_LimitsQ+0x94>)
 8009c1a:	4a0b      	ldr	r2, [pc, #44]	; (8009c48 <PS_System_LimitsQ+0x98>)
 8009c1c:	490b      	ldr	r1, [pc, #44]	; (8009c4c <PS_System_LimitsQ+0x9c>)
 8009c1e:	f008 fa1d 	bl	801205c <siprintf>
 8009c22:	6678      	str	r0, [r7, #100]	; 0x64
                      PS_LA_MAX_FS, pwm_max_f, adcs, dual, inter, bit8, dac);

    SCPI_ResultCharacters(context, buff, len);
 8009c24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009c26:	f107 0314 	add.w	r3, r7, #20
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f004 fe27 	bl	800e880 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 8009c32:	2301      	movs	r3, #1
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3770      	adds	r7, #112	; 0x70
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	02255100 	.word	0x02255100
 8009c40:	004c4b40 	.word	0x004c4b40
 8009c44:	0007a120 	.word	0x0007a120
 8009c48:	00061a80 	.word	0x00061a80
 8009c4c:	080151e4 	.word	0x080151e4

08009c50 <PS_VM_ReadQ>:

/************************* [VM Actions] *************************/

scpi_result_t PS_VM_ReadQ(scpi_t * context)
{
 8009c50:	b5b0      	push	{r4, r5, r7, lr}
 8009c52:	b0c2      	sub	sp, #264	; 0x108
 8009c54:	af06      	add	r7, sp, #24
 8009c56:	6078      	str	r0, [r7, #4]
    if (daq.mode == VM)
 8009c58:	4bc9      	ldr	r3, [pc, #804]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009c5a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009c5e:	3334      	adds	r3, #52	; 0x34
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	f040 81e6 	bne.w	800a034 <PS_VM_ReadQ+0x3e4>
    {
        daq_enable(&daq, 0);
 8009c68:	2100      	movs	r1, #0
 8009c6a:	48c5      	ldr	r0, [pc, #788]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009c6c:	f7fd f926 	bl	8006ebc <daq_enable>

        uint32_t p1 = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (context != NULL)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d007      	beq.n	8009c8c <PS_VM_ReadQ+0x3c>
            SCPI_ParamUInt32(context, &p1, FALSE);
 8009c7c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009c80:	2200      	movs	r2, #0
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f005 fb43 	bl	800f310 <SCPI_ParamUInt32>
 8009c8a:	e002      	b.n	8009c92 <PS_VM_ReadQ+0x42>
        else
            p1 = 1;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

        float vref_raw = 0;
 8009c92:	f04f 0300 	mov.w	r3, #0
 8009c96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        float ch1_raw = 0;
 8009c9a:	f04f 0300 	mov.w	r3, #0
 8009c9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        float ch2_raw = 0;
 8009ca2:	f04f 0300 	mov.w	r3, #0
 8009ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        float ch3_raw = 0;
 8009caa:	f04f 0300 	mov.w	r3, #0
 8009cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        float ch4_raw = 0;
 8009cb2:	f04f 0300 	mov.w	r3, #0
 8009cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        int avg_num = 1;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        if (p1 > 0)
 8009cc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d003      	beq.n	8009cd0 <PS_VM_ReadQ+0x80>
            avg_num = (int)p1;
 8009cc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ccc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

        if (avg_num > daq.set.mem)
 8009cd0:	4bab      	ldr	r3, [pc, #684]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009cd2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	881b      	ldrh	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	dd07      	ble.n	8009cf4 <PS_VM_ReadQ+0xa4>
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8009ce4:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f002 fe4b 	bl	800c984 <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 8009cee:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf2:	e1a5      	b.n	800a040 <PS_VM_ReadQ+0x3f0>

        get_avg_from_circ(last1, 3, avg_num, daq.buff1.data, daq.set.bits, &vref_raw, &ch1_raw, &ch2_raw, NULL, NULL);
        get_avg_from_circ(last2, 2, avg_num, daq.buff2.data, daq.set.bits, &ch3_raw, &ch4_raw, NULL, NULL, NULL);

#elif defined(PS_ADC_MODE_ADC1234)
        int last1 = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_CH_ADC1, PS_DMA_ADC1);
 8009cf4:	4ba2      	ldr	r3, [pc, #648]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009cf6:	88db      	ldrh	r3, [r3, #6]
 8009cf8:	461c      	mov	r4, r3
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	48a1      	ldr	r0, [pc, #644]	; (8009f84 <PS_VM_ReadQ+0x334>)
 8009cfe:	f7ff fe9b 	bl	8009a38 <LL_DMA_GetDataLength>
 8009d02:	4603      	mov	r3, r0
 8009d04:	1ae3      	subs	r3, r4, r3
 8009d06:	461a      	mov	r2, r3
 8009d08:	4b9d      	ldr	r3, [pc, #628]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009d0a:	88db      	ldrh	r3, [r3, #6]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4610      	mov	r0, r2
 8009d10:	f7ff fe7c 	bl	8009a0c <get_last_circ_idx>
 8009d14:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        int last2 = PS_DMA_LAST_IDX(daq.buff2.len, PS_DMA_CH_ADC2, PS_DMA_ADC2);
 8009d18:	4b99      	ldr	r3, [pc, #612]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009d1a:	8a5b      	ldrh	r3, [r3, #18]
 8009d1c:	461c      	mov	r4, r3
 8009d1e:	2101      	movs	r1, #1
 8009d20:	4899      	ldr	r0, [pc, #612]	; (8009f88 <PS_VM_ReadQ+0x338>)
 8009d22:	f7ff fe89 	bl	8009a38 <LL_DMA_GetDataLength>
 8009d26:	4603      	mov	r3, r0
 8009d28:	1ae3      	subs	r3, r4, r3
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	4b94      	ldr	r3, [pc, #592]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009d2e:	8a5b      	ldrh	r3, [r3, #18]
 8009d30:	4619      	mov	r1, r3
 8009d32:	4610      	mov	r0, r2
 8009d34:	f7ff fe6a 	bl	8009a0c <get_last_circ_idx>
 8009d38:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
        int last3 = PS_DMA_LAST_IDX(daq.buff3.len, PS_DMA_CH_ADC3, PS_DMA_ADC3);
 8009d3c:	4b90      	ldr	r3, [pc, #576]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009d3e:	8bdb      	ldrh	r3, [r3, #30]
 8009d40:	461c      	mov	r4, r3
 8009d42:	2105      	movs	r1, #5
 8009d44:	4890      	ldr	r0, [pc, #576]	; (8009f88 <PS_VM_ReadQ+0x338>)
 8009d46:	f7ff fe77 	bl	8009a38 <LL_DMA_GetDataLength>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	1ae3      	subs	r3, r4, r3
 8009d4e:	461a      	mov	r2, r3
 8009d50:	4b8b      	ldr	r3, [pc, #556]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009d52:	8bdb      	ldrh	r3, [r3, #30]
 8009d54:	4619      	mov	r1, r3
 8009d56:	4610      	mov	r0, r2
 8009d58:	f7ff fe58 	bl	8009a0c <get_last_circ_idx>
 8009d5c:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
        int last4 = PS_DMA_LAST_IDX(daq.buff4.len, PS_DMA_CH_ADC4, PS_DMA_ADC4);
 8009d60:	4b87      	ldr	r3, [pc, #540]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d64:	461c      	mov	r4, r3
 8009d66:	2102      	movs	r1, #2
 8009d68:	4887      	ldr	r0, [pc, #540]	; (8009f88 <PS_VM_ReadQ+0x338>)
 8009d6a:	f7ff fe65 	bl	8009a38 <LL_DMA_GetDataLength>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	1ae3      	subs	r3, r4, r3
 8009d72:	461a      	mov	r2, r3
 8009d74:	4b82      	ldr	r3, [pc, #520]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	f7ff fe46 	bl	8009a0c <get_last_circ_idx>
 8009d80:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        get_avg_from_circ(last1, 2, avg_num, daq.buff1.data, daq.set.bits, &vref_raw, &ch1_raw, NULL, NULL, NULL);
 8009d84:	4b7e      	ldr	r3, [pc, #504]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	4b7d      	ldr	r3, [pc, #500]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009d8a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009d8e:	3306      	adds	r3, #6
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	4619      	mov	r1, r3
 8009d94:	2300      	movs	r3, #0
 8009d96:	9305      	str	r3, [sp, #20]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	9304      	str	r3, [sp, #16]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9303      	str	r3, [sp, #12]
 8009da0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009da4:	9302      	str	r3, [sp, #8]
 8009da6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009daa:	9301      	str	r3, [sp, #4]
 8009dac:	9100      	str	r1, [sp, #0]
 8009dae:	4613      	mov	r3, r2
 8009db0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009db4:	2102      	movs	r1, #2
 8009db6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8009dba:	f002 f93b 	bl	800c034 <get_avg_from_circ>
        get_avg_from_circ(last2, 1, avg_num, daq.buff2.data, daq.set.bits, &ch2_raw, NULL, NULL, NULL, NULL);
 8009dbe:	4b70      	ldr	r3, [pc, #448]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009dc0:	68da      	ldr	r2, [r3, #12]
 8009dc2:	4b6f      	ldr	r3, [pc, #444]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009dc4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009dc8:	3306      	adds	r3, #6
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9305      	str	r3, [sp, #20]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9304      	str	r3, [sp, #16]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	9303      	str	r3, [sp, #12]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	9302      	str	r3, [sp, #8]
 8009dde:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	9100      	str	r1, [sp, #0]
 8009de6:	4613      	mov	r3, r2
 8009de8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009dec:	2101      	movs	r1, #1
 8009dee:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8009df2:	f002 f91f 	bl	800c034 <get_avg_from_circ>
        get_avg_from_circ(last3, 1, avg_num, daq.buff3.data, daq.set.bits, &ch3_raw, NULL, NULL, NULL, NULL);
 8009df6:	4b62      	ldr	r3, [pc, #392]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009df8:	699a      	ldr	r2, [r3, #24]
 8009dfa:	4b61      	ldr	r3, [pc, #388]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009dfc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009e00:	3306      	adds	r3, #6
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	4619      	mov	r1, r3
 8009e06:	2300      	movs	r3, #0
 8009e08:	9305      	str	r3, [sp, #20]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	9304      	str	r3, [sp, #16]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	9303      	str	r3, [sp, #12]
 8009e12:	2300      	movs	r3, #0
 8009e14:	9302      	str	r3, [sp, #8]
 8009e16:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009e1a:	9301      	str	r3, [sp, #4]
 8009e1c:	9100      	str	r1, [sp, #0]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009e24:	2101      	movs	r1, #1
 8009e26:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8009e2a:	f002 f903 	bl	800c034 <get_avg_from_circ>
        get_avg_from_circ(last4, 1, avg_num, daq.buff4.data, daq.set.bits, &ch4_raw, NULL, NULL, NULL, NULL);
 8009e2e:	4b54      	ldr	r3, [pc, #336]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e32:	4b53      	ldr	r3, [pc, #332]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009e34:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009e38:	3306      	adds	r3, #6
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9305      	str	r3, [sp, #20]
 8009e42:	2300      	movs	r3, #0
 8009e44:	9304      	str	r3, [sp, #16]
 8009e46:	2300      	movs	r3, #0
 8009e48:	9303      	str	r3, [sp, #12]
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	9302      	str	r3, [sp, #8]
 8009e4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009e52:	9301      	str	r3, [sp, #4]
 8009e54:	9100      	str	r1, [sp, #0]
 8009e56:	4613      	mov	r3, r2
 8009e58:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8009e62:	f002 f8e7 	bl	800c034 <get_avg_from_circ>
        char ch2_s[10];
        char ch3_s[10];
        char ch4_s[10];

#ifdef VREFINT_CAL_ADDR
        float vcc = 3.3 * PS_ADC_VREF_CAL / vref_raw;
 8009e66:	4b49      	ldr	r3, [pc, #292]	; (8009f8c <PS_VM_ReadQ+0x33c>)
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7f6 fb72 	bl	8000554 <__aeabi_i2d>
 8009e70:	a341      	add	r3, pc, #260	; (adr r3, 8009f78 <PS_VM_ReadQ+0x328>)
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	f7f6 fbd7 	bl	8000628 <__aeabi_dmul>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	4625      	mov	r5, r4
 8009e80:	461c      	mov	r4, r3
 8009e82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7f6 fb76 	bl	8000578 <__aeabi_f2d>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	4620      	mov	r0, r4
 8009e92:	4629      	mov	r1, r5
 8009e94:	f7f6 fcf2 	bl	800087c <__aeabi_ddiv>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	f7f6 feba 	bl	8000c18 <__aeabi_d2f>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
#else
        float vcc = daq.adc_max_val * PS_ADC_VREF_CAL / vref_raw / 1000;
#endif
        float ch1 = vcc * ch1_raw / daq.adc_max_val;
 8009eaa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009eae:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8009eb2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009eb6:	4b32      	ldr	r3, [pc, #200]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009eb8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009ebc:	332c      	adds	r3, #44	; 0x2c
 8009ebe:	ed93 7a00 	vldr	s14, [r3]
 8009ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ec6:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
        float ch2 = vcc * ch2_raw / daq.adc_max_val;
 8009eca:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009ece:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8009ed2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009ed6:	4b2a      	ldr	r3, [pc, #168]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009ed8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009edc:	332c      	adds	r3, #44	; 0x2c
 8009ede:	ed93 7a00 	vldr	s14, [r3]
 8009ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ee6:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
        float ch3 = vcc * ch3_raw / daq.adc_max_val;
 8009eea:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009eee:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8009ef2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009ef6:	4b22      	ldr	r3, [pc, #136]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009ef8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009efc:	332c      	adds	r3, #44	; 0x2c
 8009efe:	ed93 7a00 	vldr	s14, [r3]
 8009f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f06:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
        float ch4 = vcc * ch4_raw / daq.adc_max_val;
 8009f0a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8009f0e:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8009f12:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009f16:	4b1a      	ldr	r3, [pc, #104]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009f18:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009f1c:	332c      	adds	r3, #44	; 0x2c
 8009f1e:	ed93 7a00 	vldr	s14, [r3]
 8009f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f26:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

        daq.vref = vref_raw;
 8009f2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009f2e:	4b14      	ldr	r3, [pc, #80]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009f30:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009f34:	3320      	adds	r3, #32
 8009f36:	601a      	str	r2, [r3, #0]
        daq.vcc_mv = vcc * 1000;
 8009f38:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8009f3c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009f90 <PS_VM_ReadQ+0x340>
 8009f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f44:	4b0e      	ldr	r3, [pc, #56]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009f46:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009f4a:	3324      	adds	r3, #36	; 0x24
 8009f4c:	edc3 7a00 	vstr	s15, [r3]

        if (context == NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d11e      	bne.n	8009f94 <PS_VM_ReadQ+0x344>
        {
            if (daq.vcc_mv > 0)
 8009f56:	4b0a      	ldr	r3, [pc, #40]	; (8009f80 <PS_VM_ReadQ+0x330>)
 8009f58:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009f5c:	3324      	adds	r3, #36	; 0x24
 8009f5e:	edd3 7a00 	vldr	s15, [r3]
 8009f62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f6a:	dd01      	ble.n	8009f70 <PS_VM_ReadQ+0x320>
                return SCPI_RES_OK;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e067      	b.n	800a040 <PS_VM_ReadQ+0x3f0>
            else
                return SCPI_RES_ERR;
 8009f70:	f04f 33ff 	mov.w	r3, #4294967295
 8009f74:	e064      	b.n	800a040 <PS_VM_ReadQ+0x3f0>
 8009f76:	bf00      	nop
 8009f78:	66666666 	.word	0x66666666
 8009f7c:	400a6666 	.word	0x400a6666
 8009f80:	200007ec 	.word	0x200007ec
 8009f84:	40020000 	.word	0x40020000
 8009f88:	40020400 	.word	0x40020400
 8009f8c:	1ffff7ba 	.word	0x1ffff7ba
 8009f90:	447a0000 	.word	0x447a0000
        }

        sprint_fast(vcc_s, "%s", vcc, 4);
 8009f94:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009f98:	2204      	movs	r2, #4
 8009f9a:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 8009f9e:	492a      	ldr	r1, [pc, #168]	; (800a048 <PS_VM_ReadQ+0x3f8>)
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f002 fa65 	bl	800c470 <sprint_fast>
        sprint_fast(ch1_s, "%s", ch1, 4);
 8009fa6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009faa:	2204      	movs	r2, #4
 8009fac:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 8009fb0:	4925      	ldr	r1, [pc, #148]	; (800a048 <PS_VM_ReadQ+0x3f8>)
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f002 fa5c 	bl	800c470 <sprint_fast>
        sprint_fast(ch2_s, "%s", ch2, 4);
 8009fb8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009fbc:	2204      	movs	r2, #4
 8009fbe:	ed97 0a34 	vldr	s0, [r7, #208]	; 0xd0
 8009fc2:	4921      	ldr	r1, [pc, #132]	; (800a048 <PS_VM_ReadQ+0x3f8>)
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f002 fa53 	bl	800c470 <sprint_fast>
        sprint_fast(ch3_s, "%s", ch3, 4);
 8009fca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009fce:	2204      	movs	r2, #4
 8009fd0:	ed97 0a33 	vldr	s0, [r7, #204]	; 0xcc
 8009fd4:	491c      	ldr	r1, [pc, #112]	; (800a048 <PS_VM_ReadQ+0x3f8>)
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f002 fa4a 	bl	800c470 <sprint_fast>
        sprint_fast(ch4_s, "%s", ch4, 4);
 8009fdc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009fe0:	2204      	movs	r2, #4
 8009fe2:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 8009fe6:	4918      	ldr	r1, [pc, #96]	; (800a048 <PS_VM_ReadQ+0x3f8>)
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f002 fa41 	bl	800c470 <sprint_fast>

        char buff[100];
        int len = sprintf(buff, "%s,%s,%s,%s,%s", ch1_s, ch2_s, ch3_s, ch4_s, vcc_s);
 8009fee:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8009ff2:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8009ff6:	f107 000c 	add.w	r0, r7, #12
 8009ffa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009ffe:	9302      	str	r3, [sp, #8]
 800a000:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	460b      	mov	r3, r1
 800a00e:	490f      	ldr	r1, [pc, #60]	; (800a04c <PS_VM_ReadQ+0x3fc>)
 800a010:	f008 f824 	bl	801205c <siprintf>
 800a014:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        daq_enable(&daq, 1);
 800a018:	2101      	movs	r1, #1
 800a01a:	480d      	ldr	r0, [pc, #52]	; (800a050 <PS_VM_ReadQ+0x400>)
 800a01c:	f7fc ff4e 	bl	8006ebc <daq_enable>

        SCPI_ResultCharacters(context, buff, len);
 800a020:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a024:	f107 030c 	add.w	r3, r7, #12
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f004 fc28 	bl	800e880 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 800a030:	2301      	movs	r3, #1
 800a032:	e005      	b.n	800a040 <PS_VM_ReadQ+0x3f0>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800a034:	2101      	movs	r1, #1
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f002 fca4 	bl	800c984 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800a03c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a040:	4618      	mov	r0, r3
 800a042:	37f0      	adds	r7, #240	; 0xf0
 800a044:	46bd      	mov	sp, r7
 800a046:	bdb0      	pop	{r4, r5, r7, pc}
 800a048:	08015200 	.word	0x08015200
 800a04c:	08015204 	.word	0x08015204
 800a050:	200007ec 	.word	0x200007ec

0800a054 <PS_SCOPE_ReadQ>:

/************************* [SCOPE Actions] *************************/

scpi_result_t PS_SCOPE_ReadQ(scpi_t * context)
{
 800a054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a056:	b091      	sub	sp, #68	; 0x44
 800a058:	af06      	add	r7, sp, #24
 800a05a:	6078      	str	r0, [r7, #4]
    if (daq.mode == SCOPE)
 800a05c:	4b31      	ldr	r3, [pc, #196]	; (800a124 <PS_SCOPE_ReadQ+0xd0>)
 800a05e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a062:	3334      	adds	r3, #52	; 0x34
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	f040 8197 	bne.w	800a39a <PS_SCOPE_ReadQ+0x346>
    {
        if (daq.trig.ready == 0)
 800a06c:	4b2d      	ldr	r3, [pc, #180]	; (800a124 <PS_SCOPE_ReadQ+0xd0>)
 800a06e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a072:	337a      	adds	r3, #122	; 0x7a
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d105      	bne.n	800a086 <PS_SCOPE_ReadQ+0x32>
        {
            SCPI_ResultText(context, PS_RESP_NRDY);
 800a07a:	492b      	ldr	r1, [pc, #172]	; (800a128 <PS_SCOPE_ReadQ+0xd4>)
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f004 fc99 	bl	800e9b4 <SCPI_ResultText>
            return SCPI_RES_OK;
 800a082:	2301      	movs	r3, #1
 800a084:	e18f      	b.n	800a3a6 <PS_SCOPE_ReadQ+0x352>
        }

        if (daq.trig.set.mode == DISABLED)
 800a086:	4b27      	ldr	r3, [pc, #156]	; (800a124 <PS_SCOPE_ReadQ+0xd0>)
 800a088:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a08c:	3340      	adds	r3, #64	; 0x40
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	2b03      	cmp	r3, #3
 800a092:	d123      	bne.n	800a0dc <PS_SCOPE_ReadQ+0x88>
        {
            daq_enable(&daq, 0);
 800a094:	2100      	movs	r1, #0
 800a096:	4823      	ldr	r0, [pc, #140]	; (800a124 <PS_SCOPE_ReadQ+0xd0>)
 800a098:	f7fc ff10 	bl	8006ebc <daq_enable>
            daq.trig.pos_frst = PS_DMA_LAST_IDX(daq.buff1.len, daq.trig.dma_ch_trig, daq.trig.dma_trig);
 800a09c:	4b21      	ldr	r3, [pc, #132]	; (800a124 <PS_SCOPE_ReadQ+0xd0>)
 800a09e:	88db      	ldrh	r3, [r3, #6]
 800a0a0:	461c      	mov	r4, r3
 800a0a2:	4b20      	ldr	r3, [pc, #128]	; (800a124 <PS_SCOPE_ReadQ+0xd0>)
 800a0a4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a0a8:	33b8      	adds	r3, #184	; 0xb8
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	4b1d      	ldr	r3, [pc, #116]	; (800a124 <PS_SCOPE_ReadQ+0xd0>)
 800a0ae:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a0b2:	33b4      	adds	r3, #180	; 0xb4
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	f7ff fcbd 	bl	8009a38 <LL_DMA_GetDataLength>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	1ae3      	subs	r3, r4, r3
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	4b17      	ldr	r3, [pc, #92]	; (800a124 <PS_SCOPE_ReadQ+0xd0>)
 800a0c6:	88db      	ldrh	r3, [r3, #6]
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	f7ff fc9e 	bl	8009a0c <get_last_circ_idx>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	4b14      	ldr	r3, [pc, #80]	; (800a124 <PS_SCOPE_ReadQ+0xd0>)
 800a0d4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a0d8:	3384      	adds	r3, #132	; 0x84
 800a0da:	601a      	str	r2, [r3, #0]
        }

#ifdef VREFINT_CAL_ADDR
        float cal = PS_ADC_VREF_CAL / daq.adc_max_val * 3300;
 800a0dc:	4b13      	ldr	r3, [pc, #76]	; (800a12c <PS_SCOPE_ReadQ+0xd8>)
 800a0de:	881b      	ldrh	r3, [r3, #0]
 800a0e0:	ee07 3a90 	vmov	s15, r3
 800a0e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a0e8:	4b0e      	ldr	r3, [pc, #56]	; (800a124 <PS_SCOPE_ReadQ+0xd0>)
 800a0ea:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a0ee:	332c      	adds	r3, #44	; 0x2c
 800a0f0:	ed93 7a00 	vldr	s14, [r3]
 800a0f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a130 <PS_SCOPE_ReadQ+0xdc>
 800a0fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a100:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
#else
        float cal = PS_ADC_VREF_CAL;
#endif

        if (daq.set.bits == B8) // compressing
 800a104:	4b07      	ldr	r3, [pc, #28]	; (800a124 <PS_SCOPE_ReadQ+0xd0>)
 800a106:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a10a:	3306      	adds	r3, #6
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	2b08      	cmp	r3, #8
 800a110:	d110      	bne.n	800a134 <PS_SCOPE_ReadQ+0xe0>
            cal /= 10.0;
 800a112:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a116:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800a11a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a11e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800a122:	e00f      	b.n	800a144 <PS_SCOPE_ReadQ+0xf0>
 800a124:	200007ec 	.word	0x200007ec
 800a128:	08015214 	.word	0x08015214
 800a12c:	1ffff7ba 	.word	0x1ffff7ba
 800a130:	454e4000 	.word	0x454e4000
        else
            cal *= 10.0;
 800a134:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a138:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a13c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a140:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            added += get_1ch_from_circ(daq.trig.pos_frst, buff2_mem, daq.buff2.len, ch_it++, daq.buff2.chans,
                                       daq.set.bits, daq.vref, cal, daq.buff2.data, daq.buff_out.data, &idx);

#elif defined(PS_ADC_MODE_ADC1234)

        int buff1_mem = daq.buff1.len - daq.buff1.reserve;
 800a144:	4b9a      	ldr	r3, [pc, #616]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a146:	88db      	ldrh	r3, [r3, #6]
 800a148:	461a      	mov	r2, r3
 800a14a:	4b99      	ldr	r3, [pc, #612]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a14c:	891b      	ldrh	r3, [r3, #8]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	61fb      	str	r3, [r7, #28]
        int buff2_mem = daq.buff2.len - daq.buff2.reserve;
 800a152:	4b97      	ldr	r3, [pc, #604]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a154:	8a5b      	ldrh	r3, [r3, #18]
 800a156:	461a      	mov	r2, r3
 800a158:	4b95      	ldr	r3, [pc, #596]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a15a:	8a9b      	ldrh	r3, [r3, #20]
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	61bb      	str	r3, [r7, #24]
        int buff3_mem = daq.buff3.len - daq.buff3.reserve;
 800a160:	4b93      	ldr	r3, [pc, #588]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a162:	8bdb      	ldrh	r3, [r3, #30]
 800a164:	461a      	mov	r2, r3
 800a166:	4b92      	ldr	r3, [pc, #584]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a168:	8c1b      	ldrh	r3, [r3, #32]
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	617b      	str	r3, [r7, #20]
        int buff4_mem = daq.buff4.len - daq.buff4.reserve;
 800a16e:	4b90      	ldr	r3, [pc, #576]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a172:	461a      	mov	r2, r3
 800a174:	4b8e      	ldr	r3, [pc, #568]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a176:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	613b      	str	r3, [r7, #16]

        int added = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	623b      	str	r3, [r7, #32]
        int idx = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]

        if (daq.set.ch1_en)
 800a184:	4b8a      	ldr	r3, [pc, #552]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a186:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a18a:	33fc      	adds	r3, #252	; 0xfc
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d02e      	beq.n	800a1f0 <PS_SCOPE_ReadQ+0x19c>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, 1, daq.buff1.chans,
 800a192:	4b87      	ldr	r3, [pc, #540]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a194:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a198:	3384      	adds	r3, #132	; 0x84
 800a19a:	6818      	ldr	r0, [r3, #0]
 800a19c:	4b84      	ldr	r3, [pc, #528]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a19e:	88db      	ldrh	r3, [r3, #6]
 800a1a0:	461e      	mov	r6, r3
 800a1a2:	4b83      	ldr	r3, [pc, #524]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a1a4:	889b      	ldrh	r3, [r3, #4]
 800a1a6:	461c      	mov	r4, r3
                                       daq.set.bits, daq.vref, cal, daq.buff1.data, daq.buff_out.data, &idx);
 800a1a8:	4b81      	ldr	r3, [pc, #516]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a1aa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a1ae:	3306      	adds	r3, #6
 800a1b0:	781b      	ldrb	r3, [r3, #0]
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, 1, daq.buff1.chans,
 800a1b2:	461d      	mov	r5, r3
 800a1b4:	4b7e      	ldr	r3, [pc, #504]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a1b6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a1ba:	3320      	adds	r3, #32
 800a1bc:	edd3 7a00 	vldr	s15, [r3]
 800a1c0:	4b7b      	ldr	r3, [pc, #492]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
                                       daq.set.bits, daq.vref, cal, daq.buff1.data, daq.buff_out.data, &idx);
 800a1c4:	4a7a      	ldr	r2, [pc, #488]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a1c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, 1, daq.buff1.chans,
 800a1c8:	f107 010c 	add.w	r1, r7, #12
 800a1cc:	9104      	str	r1, [sp, #16]
 800a1ce:	9203      	str	r2, [sp, #12]
 800a1d0:	9302      	str	r3, [sp, #8]
 800a1d2:	9501      	str	r5, [sp, #4]
 800a1d4:	9400      	str	r4, [sp, #0]
 800a1d6:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800a1da:	eeb0 0a67 	vmov.f32	s0, s15
 800a1de:	2301      	movs	r3, #1
 800a1e0:	4632      	mov	r2, r6
 800a1e2:	69f9      	ldr	r1, [r7, #28]
 800a1e4:	f002 f82c 	bl	800c240 <get_1ch_from_circ>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	623b      	str	r3, [r7, #32]
        if (daq.set.ch2_en)
 800a1f0:	4b6f      	ldr	r3, [pc, #444]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a1f2:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a1f6:	33fd      	adds	r3, #253	; 0xfd
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d02e      	beq.n	800a25c <PS_SCOPE_ReadQ+0x208>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff2_mem, daq.buff2.len, 1, daq.buff2.chans,
 800a1fe:	4b6c      	ldr	r3, [pc, #432]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a200:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a204:	3384      	adds	r3, #132	; 0x84
 800a206:	6818      	ldr	r0, [r3, #0]
 800a208:	4b69      	ldr	r3, [pc, #420]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a20a:	8a5b      	ldrh	r3, [r3, #18]
 800a20c:	461e      	mov	r6, r3
 800a20e:	4b68      	ldr	r3, [pc, #416]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a210:	8a1b      	ldrh	r3, [r3, #16]
 800a212:	461c      	mov	r4, r3
                                       daq.set.bits, daq.vref, cal, daq.buff2.data, daq.buff_out.data, &idx);
 800a214:	4b66      	ldr	r3, [pc, #408]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a216:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a21a:	3306      	adds	r3, #6
 800a21c:	781b      	ldrb	r3, [r3, #0]
            added += get_1ch_from_circ(daq.trig.pos_frst, buff2_mem, daq.buff2.len, 1, daq.buff2.chans,
 800a21e:	461d      	mov	r5, r3
 800a220:	4b63      	ldr	r3, [pc, #396]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a222:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a226:	3320      	adds	r3, #32
 800a228:	edd3 7a00 	vldr	s15, [r3]
 800a22c:	4b60      	ldr	r3, [pc, #384]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a22e:	68db      	ldr	r3, [r3, #12]
                                       daq.set.bits, daq.vref, cal, daq.buff2.data, daq.buff_out.data, &idx);
 800a230:	4a5f      	ldr	r2, [pc, #380]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a232:	6b12      	ldr	r2, [r2, #48]	; 0x30
            added += get_1ch_from_circ(daq.trig.pos_frst, buff2_mem, daq.buff2.len, 1, daq.buff2.chans,
 800a234:	f107 010c 	add.w	r1, r7, #12
 800a238:	9104      	str	r1, [sp, #16]
 800a23a:	9203      	str	r2, [sp, #12]
 800a23c:	9302      	str	r3, [sp, #8]
 800a23e:	9501      	str	r5, [sp, #4]
 800a240:	9400      	str	r4, [sp, #0]
 800a242:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800a246:	eeb0 0a67 	vmov.f32	s0, s15
 800a24a:	2301      	movs	r3, #1
 800a24c:	4632      	mov	r2, r6
 800a24e:	69b9      	ldr	r1, [r7, #24]
 800a250:	f001 fff6 	bl	800c240 <get_1ch_from_circ>
 800a254:	4602      	mov	r2, r0
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	4413      	add	r3, r2
 800a25a:	623b      	str	r3, [r7, #32]
        if (daq.set.ch3_en)
 800a25c:	4b54      	ldr	r3, [pc, #336]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a25e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a262:	33fe      	adds	r3, #254	; 0xfe
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d02e      	beq.n	800a2c8 <PS_SCOPE_ReadQ+0x274>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff3_mem, daq.buff3.len, 1, daq.buff3.chans,
 800a26a:	4b51      	ldr	r3, [pc, #324]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a26c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a270:	3384      	adds	r3, #132	; 0x84
 800a272:	6818      	ldr	r0, [r3, #0]
 800a274:	4b4e      	ldr	r3, [pc, #312]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a276:	8bdb      	ldrh	r3, [r3, #30]
 800a278:	461e      	mov	r6, r3
 800a27a:	4b4d      	ldr	r3, [pc, #308]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a27c:	8b9b      	ldrh	r3, [r3, #28]
 800a27e:	461c      	mov	r4, r3
                                       daq.set.bits, daq.vref, cal, daq.buff3.data, daq.buff_out.data, &idx);
 800a280:	4b4b      	ldr	r3, [pc, #300]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a282:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a286:	3306      	adds	r3, #6
 800a288:	781b      	ldrb	r3, [r3, #0]
            added += get_1ch_from_circ(daq.trig.pos_frst, buff3_mem, daq.buff3.len, 1, daq.buff3.chans,
 800a28a:	461d      	mov	r5, r3
 800a28c:	4b48      	ldr	r3, [pc, #288]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a28e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a292:	3320      	adds	r3, #32
 800a294:	edd3 7a00 	vldr	s15, [r3]
 800a298:	4b45      	ldr	r3, [pc, #276]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a29a:	699b      	ldr	r3, [r3, #24]
                                       daq.set.bits, daq.vref, cal, daq.buff3.data, daq.buff_out.data, &idx);
 800a29c:	4a44      	ldr	r2, [pc, #272]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a29e:	6b12      	ldr	r2, [r2, #48]	; 0x30
            added += get_1ch_from_circ(daq.trig.pos_frst, buff3_mem, daq.buff3.len, 1, daq.buff3.chans,
 800a2a0:	f107 010c 	add.w	r1, r7, #12
 800a2a4:	9104      	str	r1, [sp, #16]
 800a2a6:	9203      	str	r2, [sp, #12]
 800a2a8:	9302      	str	r3, [sp, #8]
 800a2aa:	9501      	str	r5, [sp, #4]
 800a2ac:	9400      	str	r4, [sp, #0]
 800a2ae:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800a2b2:	eeb0 0a67 	vmov.f32	s0, s15
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	4632      	mov	r2, r6
 800a2ba:	6979      	ldr	r1, [r7, #20]
 800a2bc:	f001 ffc0 	bl	800c240 <get_1ch_from_circ>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	623b      	str	r3, [r7, #32]
        if (daq.set.ch4_en)
 800a2c8:	4b39      	ldr	r3, [pc, #228]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a2ca:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a2ce:	33ff      	adds	r3, #255	; 0xff
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d02e      	beq.n	800a334 <PS_SCOPE_ReadQ+0x2e0>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff4_mem, daq.buff4.len, 1, daq.buff4.chans,
 800a2d6:	4b36      	ldr	r3, [pc, #216]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a2d8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a2dc:	3384      	adds	r3, #132	; 0x84
 800a2de:	6818      	ldr	r0, [r3, #0]
 800a2e0:	4b33      	ldr	r3, [pc, #204]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a2e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2e4:	461e      	mov	r6, r3
 800a2e6:	4b32      	ldr	r3, [pc, #200]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a2e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2ea:	461c      	mov	r4, r3
                                       daq.set.bits, daq.vref, cal, daq.buff4.data, daq.buff_out.data, &idx);
 800a2ec:	4b30      	ldr	r3, [pc, #192]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a2ee:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a2f2:	3306      	adds	r3, #6
 800a2f4:	781b      	ldrb	r3, [r3, #0]
            added += get_1ch_from_circ(daq.trig.pos_frst, buff4_mem, daq.buff4.len, 1, daq.buff4.chans,
 800a2f6:	461d      	mov	r5, r3
 800a2f8:	4b2d      	ldr	r3, [pc, #180]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a2fa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a2fe:	3320      	adds	r3, #32
 800a300:	edd3 7a00 	vldr	s15, [r3]
 800a304:	4b2a      	ldr	r3, [pc, #168]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                       daq.set.bits, daq.vref, cal, daq.buff4.data, daq.buff_out.data, &idx);
 800a308:	4a29      	ldr	r2, [pc, #164]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a30a:	6b12      	ldr	r2, [r2, #48]	; 0x30
            added += get_1ch_from_circ(daq.trig.pos_frst, buff4_mem, daq.buff4.len, 1, daq.buff4.chans,
 800a30c:	f107 010c 	add.w	r1, r7, #12
 800a310:	9104      	str	r1, [sp, #16]
 800a312:	9203      	str	r2, [sp, #12]
 800a314:	9302      	str	r3, [sp, #8]
 800a316:	9501      	str	r5, [sp, #4]
 800a318:	9400      	str	r4, [sp, #0]
 800a31a:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800a31e:	eeb0 0a67 	vmov.f32	s0, s15
 800a322:	2301      	movs	r3, #1
 800a324:	4632      	mov	r2, r6
 800a326:	6939      	ldr	r1, [r7, #16]
 800a328:	f001 ff8a 	bl	800c240 <get_1ch_from_circ>
 800a32c:	4602      	mov	r2, r0
 800a32e:	6a3b      	ldr	r3, [r7, #32]
 800a330:	4413      	add	r3, r2
 800a332:	623b      	str	r3, [r7, #32]
#endif

        daq.trig.pretrig_cntr = 0;
 800a334:	4b1e      	ldr	r3, [pc, #120]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a336:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a33a:	3398      	adds	r3, #152	; 0x98
 800a33c:	2200      	movs	r2, #0
 800a33e:	601a      	str	r2, [r3, #0]
        daq.trig.ready = 0;
 800a340:	4b1b      	ldr	r3, [pc, #108]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a342:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a346:	337a      	adds	r3, #122	; 0x7a
 800a348:	2200      	movs	r2, #0
 800a34a:	701a      	strb	r2, [r3, #0]
        daq.trig.ready_last = 0;
 800a34c:	4b18      	ldr	r3, [pc, #96]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a34e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a352:	337b      	adds	r3, #123	; 0x7b
 800a354:	2200      	movs	r2, #0
 800a356:	701a      	strb	r2, [r3, #0]

        if (daq.trig.set.mode != SINGLE)
 800a358:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a35a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a35e:	3340      	adds	r3, #64	; 0x40
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	2b02      	cmp	r3, #2
 800a364:	d003      	beq.n	800a36e <PS_SCOPE_ReadQ+0x31a>
        {
            daq_enable(&daq, 1);
 800a366:	2101      	movs	r1, #1
 800a368:	4811      	ldr	r0, [pc, #68]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a36a:	f7fc fda7 	bl	8006ebc <daq_enable>
        }

        //ASSERT(added == daq.buff_out.len);
        if (added != daq.buff_out.len)
 800a36e:	4b10      	ldr	r3, [pc, #64]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a372:	461a      	mov	r2, r3
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	4293      	cmp	r3, r2
 800a378:	d005      	beq.n	800a386 <PS_SCOPE_ReadQ+0x332>
        {
            SCPI_ResultText(context, "ERROR: invalid buffer size"); // TODO DEBUG
 800a37a:	490e      	ldr	r1, [pc, #56]	; (800a3b4 <PS_SCOPE_ReadQ+0x360>)
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f004 fb19 	bl	800e9b4 <SCPI_ResultText>
            return SCPI_RES_OK;
 800a382:	2301      	movs	r3, #1
 800a384:	e00f      	b.n	800a3a6 <PS_SCOPE_ReadQ+0x352>
        }

        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
 800a386:	4b0a      	ldr	r3, [pc, #40]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a388:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a38a:	4b09      	ldr	r3, [pc, #36]	; (800a3b0 <PS_SCOPE_ReadQ+0x35c>)
 800a38c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a38e:	461a      	mov	r2, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f004 fceb 	bl	800ed6c <SCPI_ResultArbitraryBlock>
        return SCPI_RES_OK;
 800a396:	2301      	movs	r3, #1
 800a398:	e005      	b.n	800a3a6 <PS_SCOPE_ReadQ+0x352>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800a39a:	2101      	movs	r1, #1
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f002 faf1 	bl	800c984 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800a3a2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	372c      	adds	r7, #44	; 0x2c
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	200007ec 	.word	0x200007ec
 800a3b4:	08015220 	.word	0x08015220

0800a3b8 <PS_SCOPE_Set>:

scpi_result_t PS_SCOPE_Set(scpi_t * context)
{
 800a3b8:	b590      	push	{r4, r7, lr}
 800a3ba:	b097      	sub	sp, #92	; 0x5c
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	6078      	str	r0, [r7, #4]
    if (daq.mode == SCOPE)
 800a3c0:	4ba7      	ldr	r3, [pc, #668]	; (800a660 <PS_SCOPE_Set+0x2a8>)
 800a3c2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a3c6:	3334      	adds	r3, #52	; 0x34
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f040 8192 	bne.w	800a6f4 <PS_SCOPE_Set+0x33c>
        const char* p4;
        const char* p7;
        const char* p8;
        size_t p4l, p7l, p8l;

        if (!SCPI_ParamUInt32(context, &p1, TRUE) ||
 800a3d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f004 ff99 	bl	800f310 <SCPI_ParamUInt32>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	f083 0301 	eor.w	r3, r3, #1
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d16a      	bne.n	800a4c0 <PS_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p2, TRUE) ||
 800a3ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f004 ff8c 	bl	800f310 <SCPI_ParamUInt32>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	f083 0301 	eor.w	r3, r3, #1
 800a3fe:	b2db      	uxtb	r3, r3
        if (!SCPI_ParamUInt32(context, &p1, TRUE) ||
 800a400:	2b00      	cmp	r3, #0
 800a402:	d15d      	bne.n	800a4c0 <PS_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800a404:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a408:	2201      	movs	r2, #1
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f004 ff7f 	bl	800f310 <SCPI_ParamUInt32>
 800a412:	4603      	mov	r3, r0
 800a414:	f083 0301 	eor.w	r3, r3, #1
 800a418:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p2, TRUE) ||
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d150      	bne.n	800a4c0 <PS_SCOPE_Set+0x108>
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 800a41e:	f107 0214 	add.w	r2, r7, #20
 800a422:	f107 0120 	add.w	r1, r7, #32
 800a426:	2301      	movs	r3, #1
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f004 ff83 	bl	800f334 <SCPI_ParamCharacters>
 800a42e:	4603      	mov	r3, r0
 800a430:	f083 0301 	eor.w	r3, r3, #1
 800a434:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800a436:	2b00      	cmp	r3, #0
 800a438:	d142      	bne.n	800a4c0 <PS_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800a43a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a43e:	2201      	movs	r2, #1
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f004 ff64 	bl	800f310 <SCPI_ParamUInt32>
 800a448:	4603      	mov	r3, r0
 800a44a:	f083 0301 	eor.w	r3, r3, #1
 800a44e:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 800a450:	2b00      	cmp	r3, #0
 800a452:	d135      	bne.n	800a4c0 <PS_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
 800a454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a458:	2201      	movs	r2, #1
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f004 ff57 	bl	800f310 <SCPI_ParamUInt32>
 800a462:	4603      	mov	r3, r0
 800a464:	f083 0301 	eor.w	r3, r3, #1
 800a468:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d128      	bne.n	800a4c0 <PS_SCOPE_Set+0x108>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800a46e:	f107 0210 	add.w	r2, r7, #16
 800a472:	f107 011c 	add.w	r1, r7, #28
 800a476:	2301      	movs	r3, #1
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f004 ff5b 	bl	800f334 <SCPI_ParamCharacters>
 800a47e:	4603      	mov	r3, r0
 800a480:	f083 0301 	eor.w	r3, r3, #1
 800a484:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
 800a486:	2b00      	cmp	r3, #0
 800a488:	d11a      	bne.n	800a4c0 <PS_SCOPE_Set+0x108>
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
 800a48a:	f107 020c 	add.w	r2, r7, #12
 800a48e:	f107 0118 	add.w	r1, r7, #24
 800a492:	2301      	movs	r3, #1
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f004 ff4d 	bl	800f334 <SCPI_ParamCharacters>
 800a49a:	4603      	mov	r3, r0
 800a49c:	f083 0301 	eor.w	r3, r3, #1
 800a4a0:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10c      	bne.n	800a4c0 <PS_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p9, TRUE))
 800a4a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f004 ff2e 	bl	800f310 <SCPI_ParamUInt32>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	f083 0301 	eor.w	r3, r3, #1
 800a4ba:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <PS_SCOPE_Set+0x10e>
        {
            return SCPI_RES_ERR;
 800a4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c4:	e11c      	b.n	800a700 <PS_SCOPE_Set+0x348>
        }

        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	2b04      	cmp	r3, #4
 800a4ca:	d143      	bne.n	800a554 <PS_SCOPE_Set+0x19c>
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d140      	bne.n	800a554 <PS_SCOPE_Set+0x19c>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d13d      	bne.n	800a554 <PS_SCOPE_Set+0x19c>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	781b      	ldrb	r3, [r3, #0]
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 800a4dc:	2b54      	cmp	r3, #84	; 0x54
 800a4de:	d003      	beq.n	800a4e8 <PS_SCOPE_Set+0x130>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	2b46      	cmp	r3, #70	; 0x46
 800a4e6:	d135      	bne.n	800a554 <PS_SCOPE_Set+0x19c>
 800a4e8:	6a3b      	ldr	r3, [r7, #32]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b54      	cmp	r3, #84	; 0x54
 800a4f0:	d004      	beq.n	800a4fc <PS_SCOPE_Set+0x144>
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	2b46      	cmp	r3, #70	; 0x46
 800a4fa:	d12b      	bne.n	800a554 <PS_SCOPE_Set+0x19c>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 800a4fc:	6a3b      	ldr	r3, [r7, #32]
 800a4fe:	3302      	adds	r3, #2
 800a500:	781b      	ldrb	r3, [r3, #0]
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 800a502:	2b54      	cmp	r3, #84	; 0x54
 800a504:	d004      	beq.n	800a510 <PS_SCOPE_Set+0x158>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	3302      	adds	r3, #2
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b46      	cmp	r3, #70	; 0x46
 800a50e:	d121      	bne.n	800a554 <PS_SCOPE_Set+0x19c>
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	3303      	adds	r3, #3
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	2b54      	cmp	r3, #84	; 0x54
 800a518:	d004      	beq.n	800a524 <PS_SCOPE_Set+0x16c>
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	3303      	adds	r3, #3
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	2b46      	cmp	r3, #70	; 0x46
 800a522:	d117      	bne.n	800a554 <PS_SCOPE_Set+0x19c>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	781b      	ldrb	r3, [r3, #0]
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 800a528:	2b52      	cmp	r3, #82	; 0x52
 800a52a:	d003      	beq.n	800a534 <PS_SCOPE_Set+0x17c>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	2b46      	cmp	r3, #70	; 0x46
 800a532:	d10f      	bne.n	800a554 <PS_SCOPE_Set+0x19c>
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	2b41      	cmp	r3, #65	; 0x41
 800a53a:	d013      	beq.n	800a564 <PS_SCOPE_Set+0x1ac>
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b4e      	cmp	r3, #78	; 0x4e
 800a542:	d00f      	beq.n	800a564 <PS_SCOPE_Set+0x1ac>
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b53      	cmp	r3, #83	; 0x53
 800a54a:	d00b      	beq.n	800a564 <PS_SCOPE_Set+0x1ac>
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b44      	cmp	r3, #68	; 0x44
 800a552:	d007      	beq.n	800a564 <PS_SCOPE_Set+0x1ac>
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800a554:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f002 fa13 	bl	800c984 <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800a55e:	f04f 33ff 	mov.w	r3, #4294967295
 800a562:	e0cd      	b.n	800a700 <PS_SCOPE_Set+0x348>
        }

        daq_settings_save(&daq.set, &daq.trig.set, &daq.save_s, &daq.trig.save_s);
 800a564:	4b3f      	ldr	r3, [pc, #252]	; (800a664 <PS_SCOPE_Set+0x2ac>)
 800a566:	4a40      	ldr	r2, [pc, #256]	; (800a668 <PS_SCOPE_Set+0x2b0>)
 800a568:	4940      	ldr	r1, [pc, #256]	; (800a66c <PS_SCOPE_Set+0x2b4>)
 800a56a:	4841      	ldr	r0, [pc, #260]	; (800a670 <PS_SCOPE_Set+0x2b8>)
 800a56c:	f7fb fe33 	bl	80061d6 <daq_settings_save>
        daq_enable(&daq, 0);
 800a570:	2100      	movs	r1, #0
 800a572:	483b      	ldr	r0, [pc, #236]	; (800a660 <PS_SCOPE_Set+0x2a8>)
 800a574:	f7fc fca2 	bl	8006ebc <daq_enable>
        daq_reset(&daq);
 800a578:	4839      	ldr	r0, [pc, #228]	; (800a660 <PS_SCOPE_Set+0x2a8>)
 800a57a:	f7fc fc31 	bl	8006de0 <daq_reset>
        daq.dis_hold = 1;
 800a57e:	4b38      	ldr	r3, [pc, #224]	; (800a660 <PS_SCOPE_Set+0x2a8>)
 800a580:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a584:	3335      	adds	r3, #53	; 0x35
 800a586:	2201      	movs	r2, #1
 800a588:	701a      	strb	r2, [r3, #0]

        daq_mem_set(&daq, 3); // safety guard
 800a58a:	2103      	movs	r1, #3
 800a58c:	4834      	ldr	r0, [pc, #208]	; (800a660 <PS_SCOPE_Set+0x2a8>)
 800a58e:	f7fb ff0f 	bl	80063b0 <daq_mem_set>
        int ret2 = daq_bit_set(&daq, (int)p1);
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	b2db      	uxtb	r3, r3
 800a596:	4619      	mov	r1, r3
 800a598:	4831      	ldr	r0, [pc, #196]	; (800a660 <PS_SCOPE_Set+0x2a8>)
 800a59a:	f7fc f9b7 	bl	800690c <daq_bit_set>
 800a59e:	64f8      	str	r0, [r7, #76]	; 0x4c
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	2b54      	cmp	r3, #84	; 0x54
 800a5a6:	bf0c      	ite	eq
 800a5a8:	2301      	moveq	r3, #1
 800a5aa:	2300      	movne	r3, #0
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6a3b      	ldr	r3, [r7, #32]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	2b54      	cmp	r3, #84	; 0x54
 800a5b8:	bf0c      	ite	eq
 800a5ba:	2301      	moveq	r3, #1
 800a5bc:	2300      	movne	r3, #0
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	4618      	mov	r0, r3
                                    p4[2] == 'T' ? 1 : 0, p4[3] == 'T' ? 1 : 0, (int)p3);
 800a5c2:	6a3b      	ldr	r3, [r7, #32]
 800a5c4:	3302      	adds	r3, #2
 800a5c6:	781b      	ldrb	r3, [r3, #0]
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800a5c8:	2b54      	cmp	r3, #84	; 0x54
 800a5ca:	bf0c      	ite	eq
 800a5cc:	2301      	moveq	r3, #1
 800a5ce:	2300      	movne	r3, #0
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	461c      	mov	r4, r3
                                    p4[2] == 'T' ? 1 : 0, p4[3] == 'T' ? 1 : 0, (int)p3);
 800a5d4:	6a3b      	ldr	r3, [r7, #32]
 800a5d6:	3303      	adds	r3, #3
 800a5d8:	781b      	ldrb	r3, [r3, #0]
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800a5da:	2b54      	cmp	r3, #84	; 0x54
 800a5dc:	bf0c      	ite	eq
 800a5de:	2301      	moveq	r3, #1
 800a5e0:	2300      	movne	r3, #0
 800a5e2:	b2db      	uxtb	r3, r3
                                    p4[2] == 'T' ? 1 : 0, p4[3] == 'T' ? 1 : 0, (int)p3);
 800a5e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e6:	ee07 2a90 	vmov	s15, r2
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800a5ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a5f4:	4623      	mov	r3, r4
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	4819      	ldr	r0, [pc, #100]	; (800a660 <PS_SCOPE_Set+0x2a8>)
 800a5fa:	f7fc faa1 	bl	8006b40 <daq_ch_set>
 800a5fe:	64b8      	str	r0, [r7, #72]	; 0x48
        int ret3 = daq_fs_set(&daq, (int)p3);
 800a600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a602:	ee07 3a90 	vmov	s15, r3
 800a606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a60a:	eeb0 0a67 	vmov.f32	s0, s15
 800a60e:	4814      	ldr	r0, [pc, #80]	; (800a660 <PS_SCOPE_Set+0x2a8>)
 800a610:	f7fc f9fc 	bl	8006a0c <daq_fs_set>
 800a614:	6478      	str	r0, [r7, #68]	; 0x44
        int ret1 = daq_mem_set(&daq, (int)p2);
 800a616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a618:	b29b      	uxth	r3, r3
 800a61a:	4619      	mov	r1, r3
 800a61c:	4810      	ldr	r0, [pc, #64]	; (800a660 <PS_SCOPE_Set+0x2a8>)
 800a61e:	f7fb fec7 	bl	80063b0 <daq_mem_set>
 800a622:	6438      	str	r0, [r7, #64]	; 0x40
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 800a624:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	2b52      	cmp	r3, #82	; 0x52
 800a630:	bf14      	ite	ne
 800a632:	2301      	movne	r3, #1
 800a634:	2300      	moveq	r3, #0
 800a636:	b2db      	uxtb	r3, r3
 800a638:	461c      	mov	r4, r3
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	781b      	ldrb	r3, [r3, #0]
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 800a63e:	2b41      	cmp	r3, #65	; 0x41
 800a640:	d018      	beq.n	800a674 <PS_SCOPE_Set+0x2bc>
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	2b4e      	cmp	r3, #78	; 0x4e
 800a648:	d007      	beq.n	800a65a <PS_SCOPE_Set+0x2a2>
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	2b53      	cmp	r3, #83	; 0x53
 800a650:	d101      	bne.n	800a656 <PS_SCOPE_Set+0x29e>
 800a652:	2302      	movs	r3, #2
 800a654:	e00f      	b.n	800a676 <PS_SCOPE_Set+0x2be>
 800a656:	2303      	movs	r3, #3
 800a658:	e00d      	b.n	800a676 <PS_SCOPE_Set+0x2be>
 800a65a:	2301      	movs	r3, #1
 800a65c:	e00b      	b.n	800a676 <PS_SCOPE_Set+0x2be>
 800a65e:	bf00      	nop
 800a660:	200007ec 	.word	0x200007ec
 800a664:	2000cc3c 	.word	0x2000cc3c
 800a668:	2000cbf4 	.word	0x2000cbf4
 800a66c:	2000cc28 	.word	0x2000cc28
 800a670:	2000cbe8 	.word	0x2000cbe8
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 800a674:	2300      	movs	r3, #0
 800a676:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a678:	9001      	str	r0, [sp, #4]
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	4623      	mov	r3, r4
 800a67e:	4822      	ldr	r0, [pc, #136]	; (800a708 <PS_SCOPE_Set+0x350>)
 800a680:	f7fd fef4 	bl	800846c <daq_trig_set>
 800a684:	63f8      	str	r0, [r7, #60]	; 0x3c

        if (ret1 + ret2 + ret3 + ret4 + ret5 == 0)
 800a686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a68a:	441a      	add	r2, r3
 800a68c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a68e:	441a      	add	r2, r3
 800a690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a692:	441a      	add	r2, r3
 800a694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a696:	4413      	add	r3, r2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10f      	bne.n	800a6bc <PS_SCOPE_Set+0x304>
        {
            daq.dis_hold = 0;
 800a69c:	4b1a      	ldr	r3, [pc, #104]	; (800a708 <PS_SCOPE_Set+0x350>)
 800a69e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a6a2:	3335      	adds	r3, #53	; 0x35
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	701a      	strb	r2, [r3, #0]
            daq_enable(&daq, 1);
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	4817      	ldr	r0, [pc, #92]	; (800a708 <PS_SCOPE_Set+0x350>)
 800a6ac:	f7fc fc06 	bl	8006ebc <daq_enable>

            SCPI_ResultText(context, SCPI_OK);
 800a6b0:	4916      	ldr	r1, [pc, #88]	; (800a70c <PS_SCOPE_Set+0x354>)
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f004 f97e 	bl	800e9b4 <SCPI_ResultText>
            return SCPI_RES_OK;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e021      	b.n	800a700 <PS_SCOPE_Set+0x348>
        }
        else
        {
            daq.mode = VM;
 800a6bc:	4b12      	ldr	r3, [pc, #72]	; (800a708 <PS_SCOPE_Set+0x350>)
 800a6be:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a6c2:	3334      	adds	r3, #52	; 0x34
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	701a      	strb	r2, [r3, #0]
            daq_mode_set(&daq, SCOPE);  // reload saved settings
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	480f      	ldr	r0, [pc, #60]	; (800a708 <PS_SCOPE_Set+0x350>)
 800a6cc:	f7fc fce0 	bl	8007090 <daq_mode_set>
            daq.dis_hold = 0;
 800a6d0:	4b0d      	ldr	r3, [pc, #52]	; (800a708 <PS_SCOPE_Set+0x350>)
 800a6d2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a6d6:	3335      	adds	r3, #53	; 0x35
 800a6d8:	2200      	movs	r2, #0
 800a6da:	701a      	strb	r2, [r3, #0]
            daq_enable(&daq, 1);
 800a6dc:	2101      	movs	r1, #1
 800a6de:	480a      	ldr	r0, [pc, #40]	; (800a708 <PS_SCOPE_Set+0x350>)
 800a6e0:	f7fc fbec 	bl	8006ebc <daq_enable>

            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800a6e4:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f002 f94b 	bl	800c984 <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800a6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f2:	e005      	b.n	800a700 <PS_SCOPE_Set+0x348>
        }
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f002 f944 	bl	800c984 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800a6fc:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a700:	4618      	mov	r0, r3
 800a702:	3754      	adds	r7, #84	; 0x54
 800a704:	46bd      	mov	sp, r7
 800a706:	bd90      	pop	{r4, r7, pc}
 800a708:	200007ec 	.word	0x200007ec
 800a70c:	080151b8 	.word	0x080151b8

0800a710 <PS_SCOPE_SetQ>:

scpi_result_t PS_SCOPE_SetQ(scpi_t * context)
{
 800a710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a712:	b0b1      	sub	sp, #196	; 0xc4
 800a714:	af08      	add	r7, sp, #32
 800a716:	6078      	str	r0, [r7, #4]
    if (daq.mode == SCOPE)
 800a718:	4b81      	ldr	r3, [pc, #516]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a71a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a71e:	3334      	adds	r3, #52	; 0x34
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	f040 80e7 	bne.w	800a8f6 <PS_SCOPE_SetQ+0x1e6>
        char freq_s[30];
        char chans_en[5];
        char edge_s[2];
        char mode_s[2];

        sprint_fast(freq_s, "%s", daq.set.fs, 3);
 800a728:	4b7d      	ldr	r3, [pc, #500]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a72a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a72e:	edd3 7a00 	vldr	s15, [r3]
 800a732:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a736:	2203      	movs	r2, #3
 800a738:	eeb0 0a67 	vmov.f32	s0, s15
 800a73c:	4979      	ldr	r1, [pc, #484]	; (800a924 <PS_SCOPE_SetQ+0x214>)
 800a73e:	4618      	mov	r0, r3
 800a740:	f001 fe96 	bl	800c470 <sprint_fast>
        chans_en[0] = daq.set.ch1_en ? 'T' : 'F';
 800a744:	4b76      	ldr	r3, [pc, #472]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a746:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a74a:	33fc      	adds	r3, #252	; 0xfc
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <PS_SCOPE_SetQ+0x46>
 800a752:	2354      	movs	r3, #84	; 0x54
 800a754:	e000      	b.n	800a758 <PS_SCOPE_SetQ+0x48>
 800a756:	2346      	movs	r3, #70	; 0x46
 800a758:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        chans_en[1] = daq.set.ch2_en ? 'T' : 'F';
 800a75c:	4b70      	ldr	r3, [pc, #448]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a75e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a762:	33fd      	adds	r3, #253	; 0xfd
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <PS_SCOPE_SetQ+0x5e>
 800a76a:	2354      	movs	r3, #84	; 0x54
 800a76c:	e000      	b.n	800a770 <PS_SCOPE_SetQ+0x60>
 800a76e:	2346      	movs	r3, #70	; 0x46
 800a770:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        chans_en[2] = daq.set.ch3_en ? 'T' : 'F';
 800a774:	4b6a      	ldr	r3, [pc, #424]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a776:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a77a:	33fe      	adds	r3, #254	; 0xfe
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <PS_SCOPE_SetQ+0x76>
 800a782:	2354      	movs	r3, #84	; 0x54
 800a784:	e000      	b.n	800a788 <PS_SCOPE_SetQ+0x78>
 800a786:	2346      	movs	r3, #70	; 0x46
 800a788:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        chans_en[3] = daq.set.ch4_en ? 'T' : 'F';
 800a78c:	4b64      	ldr	r3, [pc, #400]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a78e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a792:	33ff      	adds	r3, #255	; 0xff
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <PS_SCOPE_SetQ+0x8e>
 800a79a:	2354      	movs	r3, #84	; 0x54
 800a79c:	e000      	b.n	800a7a0 <PS_SCOPE_SetQ+0x90>
 800a79e:	2346      	movs	r3, #70	; 0x46
 800a7a0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        edge_s[0] = daq.trig.set.edge == RISING ? 'R' : 'F';
 800a7a4:	4b5e      	ldr	r3, [pc, #376]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a7a6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a7aa:	3341      	adds	r3, #65	; 0x41
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <PS_SCOPE_SetQ+0xa6>
 800a7b2:	2352      	movs	r3, #82	; 0x52
 800a7b4:	e000      	b.n	800a7b8 <PS_SCOPE_SetQ+0xa8>
 800a7b6:	2346      	movs	r3, #70	; 0x46
 800a7b8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 800a7bc:	4b58      	ldr	r3, [pc, #352]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a7be:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a7c2:	3340      	adds	r3, #64	; 0x40
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d013      	beq.n	800a7f2 <PS_SCOPE_SetQ+0xe2>
 800a7ca:	4b55      	ldr	r3, [pc, #340]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a7cc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a7d0:	3340      	adds	r3, #64	; 0x40
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d00a      	beq.n	800a7ee <PS_SCOPE_SetQ+0xde>
            (daq.trig.set.mode == SINGLE ? 'S' : 'D'));
 800a7d8:	4b51      	ldr	r3, [pc, #324]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a7da:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a7de:	3340      	adds	r3, #64	; 0x40
 800a7e0:	781b      	ldrb	r3, [r3, #0]
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d101      	bne.n	800a7ea <PS_SCOPE_SetQ+0xda>
 800a7e6:	2353      	movs	r3, #83	; 0x53
 800a7e8:	e004      	b.n	800a7f4 <PS_SCOPE_SetQ+0xe4>
 800a7ea:	2344      	movs	r3, #68	; 0x44
 800a7ec:	e002      	b.n	800a7f4 <PS_SCOPE_SetQ+0xe4>
 800a7ee:	234e      	movs	r3, #78	; 0x4e
 800a7f0:	e000      	b.n	800a7f4 <PS_SCOPE_SetQ+0xe4>
 800a7f2:	2341      	movs	r3, #65	; 0x41
 800a7f4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        chans_en[4] = '\0';
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        edge_s[1] = '\0';
 800a7fe:	2300      	movs	r3, #0
 800a800:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
        mode_s[1] = '\0';
 800a804:	2300      	movs	r3, #0
 800a806:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

        char maxZ_s[15];
        float max_Z = PS_ADC_MAXZ(daq.smpl_time, daq.set.bits == B12 ? PS_LN2POW14 : PS_LN2POW10);
 800a80a:	4b45      	ldr	r3, [pc, #276]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a80c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a810:	3328      	adds	r3, #40	; 0x28
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4618      	mov	r0, r3
 800a816:	f7f5 feaf 	bl	8000578 <__aeabi_f2d>
 800a81a:	4b41      	ldr	r3, [pc, #260]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a81c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a820:	3306      	adds	r3, #6
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b0c      	cmp	r3, #12
 800a826:	d103      	bne.n	800a830 <PS_SCOPE_SetQ+0x120>
 800a828:	a439      	add	r4, pc, #228	; (adr r4, 800a910 <PS_SCOPE_SetQ+0x200>)
 800a82a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a82e:	e002      	b.n	800a836 <PS_SCOPE_SetQ+0x126>
 800a830:	a439      	add	r4, pc, #228	; (adr r4, 800a918 <PS_SCOPE_SetQ+0x208>)
 800a832:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a836:	461a      	mov	r2, r3
 800a838:	4623      	mov	r3, r4
 800a83a:	f7f6 f81f 	bl	800087c <__aeabi_ddiv>
 800a83e:	4603      	mov	r3, r0
 800a840:	460c      	mov	r4, r1
 800a842:	4618      	mov	r0, r3
 800a844:	4621      	mov	r1, r4
 800a846:	f04f 0200 	mov.w	r2, #0
 800a84a:	4b37      	ldr	r3, [pc, #220]	; (800a928 <PS_SCOPE_SetQ+0x218>)
 800a84c:	f7f5 fd34 	bl	80002b8 <__aeabi_dsub>
 800a850:	4603      	mov	r3, r0
 800a852:	460c      	mov	r4, r1
 800a854:	4618      	mov	r0, r3
 800a856:	4621      	mov	r1, r4
 800a858:	f7f6 f9de 	bl	8000c18 <__aeabi_d2f>
 800a85c:	4603      	mov	r3, r0
 800a85e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        sprint_fast(maxZ_s, "%skOhm", max_Z, 1);
 800a862:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a866:	2201      	movs	r2, #1
 800a868:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 800a86c:	492f      	ldr	r1, [pc, #188]	; (800a92c <PS_SCOPE_SetQ+0x21c>)
 800a86e:	4618      	mov	r0, r3
 800a870:	f001 fdfe 	bl	800c470 <sprint_fast>

        int len = sprintf(buff, "\"%d,%d,%s,%s,%d,%d,%s,%s,%d,%s\"", daq.set.bits, daq.set.mem, freq_s, chans_en,
 800a874:	4b2a      	ldr	r3, [pc, #168]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a876:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a87a:	3306      	adds	r3, #6
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	461d      	mov	r5, r3
 800a880:	4b27      	ldr	r3, [pc, #156]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a882:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a886:	3304      	adds	r3, #4
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	461e      	mov	r6, r3
 800a88c:	4b24      	ldr	r3, [pc, #144]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a88e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a892:	3344      	adds	r3, #68	; 0x44
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	4b22      	ldr	r3, [pc, #136]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a898:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a89c:	334c      	adds	r3, #76	; 0x4c
 800a89e:	6819      	ldr	r1, [r3, #0]
 800a8a0:	4b1f      	ldr	r3, [pc, #124]	; (800a920 <PS_SCOPE_SetQ+0x210>)
 800a8a2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a8a6:	333c      	adds	r3, #60	; 0x3c
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f107 0408 	add.w	r4, r7, #8
 800a8ae:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800a8b2:	9007      	str	r0, [sp, #28]
 800a8b4:	9306      	str	r3, [sp, #24]
 800a8b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a8ba:	9305      	str	r3, [sp, #20]
 800a8bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	9103      	str	r1, [sp, #12]
 800a8c4:	9202      	str	r2, [sp, #8]
 800a8c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a8d0:	9300      	str	r3, [sp, #0]
 800a8d2:	4633      	mov	r3, r6
 800a8d4:	462a      	mov	r2, r5
 800a8d6:	4916      	ldr	r1, [pc, #88]	; (800a930 <PS_SCOPE_SetQ+0x220>)
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f007 fbbf 	bl	801205c <siprintf>
 800a8de:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                          daq.trig.set.ch, daq.trig.set.val_percent, edge_s, mode_s, daq.trig.set.pretrigger, maxZ_s);

        SCPI_ResultCharacters(context, buff, len);
 800a8e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a8e6:	f107 0308 	add.w	r3, r7, #8
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f003 ffc7 	bl	800e880 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e005      	b.n	800a902 <PS_SCOPE_SetQ+0x1f2>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800a8f6:	2101      	movs	r1, #1
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f002 f843 	bl	800c984 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800a8fe:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a902:	4618      	mov	r0, r3
 800a904:	37a4      	adds	r7, #164	; 0xa4
 800a906:	46bd      	mov	sp, r7
 800a908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a90a:	bf00      	nop
 800a90c:	f3af 8000 	nop.w
 800a910:	ff0bb948 	.word	0xff0bb948
 800a914:	40165baf 	.word	0x40165baf
 800a918:	d95672ff 	.word	0xd95672ff
 800a91c:	400ff0b1 	.word	0x400ff0b1
 800a920:	200007ec 	.word	0x200007ec
 800a924:	08015200 	.word	0x08015200
 800a928:	3ff00000 	.word	0x3ff00000
 800a92c:	0801523c 	.word	0x0801523c
 800a930:	08015244 	.word	0x08015244

0800a934 <PS_LA_ReadQ>:

/************************* [LA Actions] *************************/

scpi_result_t PS_LA_ReadQ(scpi_t * context)
{
 800a934:	b590      	push	{r4, r7, lr}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
    if (daq.mode == LA)
 800a93c:	4b46      	ldr	r3, [pc, #280]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a93e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a942:	3334      	adds	r3, #52	; 0x34
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2b02      	cmp	r3, #2
 800a948:	d17b      	bne.n	800aa42 <PS_LA_ReadQ+0x10e>
    {
        if (daq.trig.ready == 0)
 800a94a:	4b43      	ldr	r3, [pc, #268]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a94c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a950:	337a      	adds	r3, #122	; 0x7a
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d105      	bne.n	800a964 <PS_LA_ReadQ+0x30>
        {
            SCPI_ResultText(context, PS_RESP_NRDY);
 800a958:	4940      	ldr	r1, [pc, #256]	; (800aa5c <PS_LA_ReadQ+0x128>)
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f004 f82a 	bl	800e9b4 <SCPI_ResultText>
            return SCPI_RES_OK;
 800a960:	2301      	movs	r3, #1
 800a962:	e074      	b.n	800aa4e <PS_LA_ReadQ+0x11a>
        }

        if (daq.trig.set.mode == DISABLED)
 800a964:	4b3c      	ldr	r3, [pc, #240]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a966:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a96a:	3340      	adds	r3, #64	; 0x40
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d119      	bne.n	800a9a6 <PS_LA_ReadQ+0x72>
        {
            daq_enable(&daq, 0);
 800a972:	2100      	movs	r1, #0
 800a974:	4838      	ldr	r0, [pc, #224]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a976:	f7fc faa1 	bl	8006ebc <daq_enable>
            daq.trig.pos_frst = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_CH_LA, PS_DMA_LA);
 800a97a:	4b37      	ldr	r3, [pc, #220]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a97c:	88db      	ldrh	r3, [r3, #6]
 800a97e:	461c      	mov	r4, r3
 800a980:	2106      	movs	r1, #6
 800a982:	4837      	ldr	r0, [pc, #220]	; (800aa60 <PS_LA_ReadQ+0x12c>)
 800a984:	f7ff f858 	bl	8009a38 <LL_DMA_GetDataLength>
 800a988:	4603      	mov	r3, r0
 800a98a:	1ae3      	subs	r3, r4, r3
 800a98c:	461a      	mov	r2, r3
 800a98e:	4b32      	ldr	r3, [pc, #200]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a990:	88db      	ldrh	r3, [r3, #6]
 800a992:	4619      	mov	r1, r3
 800a994:	4610      	mov	r0, r2
 800a996:	f7ff f839 	bl	8009a0c <get_last_circ_idx>
 800a99a:	4602      	mov	r2, r0
 800a99c:	4b2e      	ldr	r3, [pc, #184]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a99e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a9a2:	3384      	adds	r3, #132	; 0x84
 800a9a4:	601a      	str	r2, [r3, #0]
        }

        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	4b2b      	ldr	r3, [pc, #172]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a9ac:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a9b0:	3384      	adds	r3, #132	; 0x84
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	60bb      	str	r3, [r7, #8]
 800a9b6:	e017      	b.n	800a9e8 <PS_LA_ReadQ+0xb4>
        {
            if (i >= daq.buff1.len)
 800a9b8:	4b27      	ldr	r3, [pc, #156]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a9ba:	88db      	ldrh	r3, [r3, #6]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	db01      	blt.n	800a9c8 <PS_LA_ReadQ+0x94>
                i = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	60bb      	str	r3, [r7, #8]

            ((uint8_t*)daq.buff_out.data)[k] = (uint8_t)(((uint8_t*)daq.buff1.data)[i]);
 800a9c8:	4b23      	ldr	r3, [pc, #140]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	441a      	add	r2, r3
 800a9d0:	4b21      	ldr	r3, [pc, #132]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a9d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	440b      	add	r3, r1
 800a9d8:	7812      	ldrb	r2, [r2, #0]
 800a9da:	701a      	strb	r2, [r3, #0]
        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	60fb      	str	r3, [r7, #12]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	60bb      	str	r3, [r7, #8]
 800a9e8:	4b1b      	ldr	r3, [pc, #108]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a9ea:	88db      	ldrh	r3, [r3, #6]
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	dbe1      	blt.n	800a9b8 <PS_LA_ReadQ+0x84>
        }

        daq.trig.pretrig_cntr = 0;
 800a9f4:	4b18      	ldr	r3, [pc, #96]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800a9f6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a9fa:	3398      	adds	r3, #152	; 0x98
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	601a      	str	r2, [r3, #0]
        daq.trig.ready = 0;
 800aa00:	4b15      	ldr	r3, [pc, #84]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800aa02:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800aa06:	337a      	adds	r3, #122	; 0x7a
 800aa08:	2200      	movs	r2, #0
 800aa0a:	701a      	strb	r2, [r3, #0]
        daq.trig.ready_last = 0;
 800aa0c:	4b12      	ldr	r3, [pc, #72]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800aa0e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800aa12:	337b      	adds	r3, #123	; 0x7b
 800aa14:	2200      	movs	r2, #0
 800aa16:	701a      	strb	r2, [r3, #0]

        if (daq.trig.set.mode != SINGLE)
 800aa18:	4b0f      	ldr	r3, [pc, #60]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800aa1a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800aa1e:	3340      	adds	r3, #64	; 0x40
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d003      	beq.n	800aa2e <PS_LA_ReadQ+0xfa>
        {
            daq_enable(&daq, 1);
 800aa26:	2101      	movs	r1, #1
 800aa28:	480b      	ldr	r0, [pc, #44]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800aa2a:	f7fc fa47 	bl	8006ebc <daq_enable>
        }

        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
 800aa2e:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800aa30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800aa32:	4b09      	ldr	r3, [pc, #36]	; (800aa58 <PS_LA_ReadQ+0x124>)
 800aa34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa36:	461a      	mov	r2, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f004 f997 	bl	800ed6c <SCPI_ResultArbitraryBlock>
        return SCPI_RES_OK;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e005      	b.n	800aa4e <PS_LA_ReadQ+0x11a>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800aa42:	2101      	movs	r1, #1
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f001 ff9d 	bl	800c984 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800aa4a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd90      	pop	{r4, r7, pc}
 800aa56:	bf00      	nop
 800aa58:	200007ec 	.word	0x200007ec
 800aa5c:	08015214 	.word	0x08015214
 800aa60:	40020000 	.word	0x40020000

0800aa64 <PS_LA_Set>:

scpi_result_t PS_LA_Set(scpi_t * context)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b092      	sub	sp, #72	; 0x48
 800aa68:	af02      	add	r7, sp, #8
 800aa6a:	6078      	str	r0, [r7, #4]
    if (daq.mode == LA)
 800aa6c:	4b92      	ldr	r3, [pc, #584]	; (800acb8 <PS_LA_Set+0x254>)
 800aa6e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800aa72:	3334      	adds	r3, #52	; 0x34
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	f040 8113 	bne.w	800aca2 <PS_LA_Set+0x23e>
        uint32_t p2, p3, p5, p9;
        const char* p7;
        const char* p8;
        size_t p7l, p8l;

        if (!SCPI_ParamUInt32(context, &p2, TRUE) ||
 800aa7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa80:	2201      	movs	r2, #1
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f004 fc43 	bl	800f310 <SCPI_ParamUInt32>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	f083 0301 	eor.w	r3, r3, #1
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d142      	bne.n	800ab1c <PS_LA_Set+0xb8>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800aa96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f004 fc36 	bl	800f310 <SCPI_ParamUInt32>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	f083 0301 	eor.w	r3, r3, #1
 800aaaa:	b2db      	uxtb	r3, r3
        if (!SCPI_ParamUInt32(context, &p2, TRUE) ||
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d135      	bne.n	800ab1c <PS_LA_Set+0xb8>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800aab0:	f107 0320 	add.w	r3, r7, #32
 800aab4:	2201      	movs	r2, #1
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f004 fc29 	bl	800f310 <SCPI_ParamUInt32>
 800aabe:	4603      	mov	r3, r0
 800aac0:	f083 0301 	eor.w	r3, r3, #1
 800aac4:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d128      	bne.n	800ab1c <PS_LA_Set+0xb8>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800aaca:	f107 0210 	add.w	r2, r7, #16
 800aace:	f107 0118 	add.w	r1, r7, #24
 800aad2:	2301      	movs	r3, #1
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f004 fc2d 	bl	800f334 <SCPI_ParamCharacters>
 800aada:	4603      	mov	r3, r0
 800aadc:	f083 0301 	eor.w	r3, r3, #1
 800aae0:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d11a      	bne.n	800ab1c <PS_LA_Set+0xb8>
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
 800aae6:	f107 020c 	add.w	r2, r7, #12
 800aaea:	f107 0114 	add.w	r1, r7, #20
 800aaee:	2301      	movs	r3, #1
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f004 fc1f 	bl	800f334 <SCPI_ParamCharacters>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	f083 0301 	eor.w	r3, r3, #1
 800aafc:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10c      	bne.n	800ab1c <PS_LA_Set+0xb8>
            !SCPI_ParamUInt32(context, &p9, TRUE))
 800ab02:	f107 031c 	add.w	r3, r7, #28
 800ab06:	2201      	movs	r2, #1
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f004 fc00 	bl	800f310 <SCPI_ParamUInt32>
 800ab10:	4603      	mov	r3, r0
 800ab12:	f083 0301 	eor.w	r3, r3, #1
 800ab16:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <PS_LA_Set+0xbe>
        {
            return SCPI_RES_ERR;
 800ab1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab20:	e0c5      	b.n	800acae <PS_LA_Set+0x24a>
        }

        if (p7l != 1 || p8l != 1 ||
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d11a      	bne.n	800ab5e <PS_LA_Set+0xfa>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d117      	bne.n	800ab5e <PS_LA_Set+0xfa>
            (p7[0] != 'R' && p7[0] != 'F') ||
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	781b      	ldrb	r3, [r3, #0]
        if (p7l != 1 || p8l != 1 ||
 800ab32:	2b52      	cmp	r3, #82	; 0x52
 800ab34:	d003      	beq.n	800ab3e <PS_LA_Set+0xda>
            (p7[0] != 'R' && p7[0] != 'F') ||
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	2b46      	cmp	r3, #70	; 0x46
 800ab3c:	d10f      	bne.n	800ab5e <PS_LA_Set+0xfa>
            (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	781b      	ldrb	r3, [r3, #0]
            (p7[0] != 'R' && p7[0] != 'F') ||
 800ab42:	2b41      	cmp	r3, #65	; 0x41
 800ab44:	d013      	beq.n	800ab6e <PS_LA_Set+0x10a>
            (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	2b4e      	cmp	r3, #78	; 0x4e
 800ab4c:	d00f      	beq.n	800ab6e <PS_LA_Set+0x10a>
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	2b53      	cmp	r3, #83	; 0x53
 800ab54:	d00b      	beq.n	800ab6e <PS_LA_Set+0x10a>
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	2b44      	cmp	r3, #68	; 0x44
 800ab5c:	d007      	beq.n	800ab6e <PS_LA_Set+0x10a>
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800ab5e:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f001 ff0e 	bl	800c984 <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800ab68:	f04f 33ff 	mov.w	r3, #4294967295
 800ab6c:	e09f      	b.n	800acae <PS_LA_Set+0x24a>
        }

        daq_settings_save(&daq.set, &daq.trig.set, &daq.save_l, &daq.trig.save_l);
 800ab6e:	4b53      	ldr	r3, [pc, #332]	; (800acbc <PS_LA_Set+0x258>)
 800ab70:	4a53      	ldr	r2, [pc, #332]	; (800acc0 <PS_LA_Set+0x25c>)
 800ab72:	4954      	ldr	r1, [pc, #336]	; (800acc4 <PS_LA_Set+0x260>)
 800ab74:	4854      	ldr	r0, [pc, #336]	; (800acc8 <PS_LA_Set+0x264>)
 800ab76:	f7fb fb2e 	bl	80061d6 <daq_settings_save>
        daq_enable(&daq, 0);
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	484e      	ldr	r0, [pc, #312]	; (800acb8 <PS_LA_Set+0x254>)
 800ab7e:	f7fc f99d 	bl	8006ebc <daq_enable>
        daq_reset(&daq);
 800ab82:	484d      	ldr	r0, [pc, #308]	; (800acb8 <PS_LA_Set+0x254>)
 800ab84:	f7fc f92c 	bl	8006de0 <daq_reset>
        daq.dis_hold = 1;
 800ab88:	4b4b      	ldr	r3, [pc, #300]	; (800acb8 <PS_LA_Set+0x254>)
 800ab8a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ab8e:	3335      	adds	r3, #53	; 0x35
 800ab90:	2201      	movs	r2, #1
 800ab92:	701a      	strb	r2, [r3, #0]

        daq_mem_set(&daq, 3); // safety guard
 800ab94:	2103      	movs	r1, #3
 800ab96:	4848      	ldr	r0, [pc, #288]	; (800acb8 <PS_LA_Set+0x254>)
 800ab98:	f7fb fc0a 	bl	80063b0 <daq_mem_set>
        int ret2 = daq_bit_set(&daq, B1);
 800ab9c:	2101      	movs	r1, #1
 800ab9e:	4846      	ldr	r0, [pc, #280]	; (800acb8 <PS_LA_Set+0x254>)
 800aba0:	f7fb feb4 	bl	800690c <daq_bit_set>
 800aba4:	63f8      	str	r0, [r7, #60]	; 0x3c
        int ret4 = daq_ch_set(&daq, 1, 1, 1, 1, (int)p3);
 800aba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba8:	ee07 3a90 	vmov	s15, r3
 800abac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abb0:	2301      	movs	r3, #1
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	eeb0 0a67 	vmov.f32	s0, s15
 800abb8:	2301      	movs	r3, #1
 800abba:	2201      	movs	r2, #1
 800abbc:	2101      	movs	r1, #1
 800abbe:	483e      	ldr	r0, [pc, #248]	; (800acb8 <PS_LA_Set+0x254>)
 800abc0:	f7fb ffbe 	bl	8006b40 <daq_ch_set>
 800abc4:	63b8      	str	r0, [r7, #56]	; 0x38
        int ret3 = daq_fs_set(&daq, (int)p3);
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	ee07 3a90 	vmov	s15, r3
 800abcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abd0:	eeb0 0a67 	vmov.f32	s0, s15
 800abd4:	4838      	ldr	r0, [pc, #224]	; (800acb8 <PS_LA_Set+0x254>)
 800abd6:	f7fb ff19 	bl	8006a0c <daq_fs_set>
 800abda:	6378      	str	r0, [r7, #52]	; 0x34
        int ret1 = daq_mem_set(&daq, (int)p2);
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	b29b      	uxth	r3, r3
 800abe0:	4619      	mov	r1, r3
 800abe2:	4835      	ldr	r0, [pc, #212]	; (800acb8 <PS_LA_Set+0x254>)
 800abe4:	f7fb fbe4 	bl	80063b0 <daq_mem_set>
 800abe8:	6338      	str	r0, [r7, #48]	; 0x30
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800abea:	6a39      	ldr	r1, [r7, #32]
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	2b52      	cmp	r3, #82	; 0x52
 800abf2:	bf14      	ite	ne
 800abf4:	2301      	movne	r3, #1
 800abf6:	2300      	moveq	r3, #0
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	4618      	mov	r0, r3
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	781b      	ldrb	r3, [r3, #0]
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800ac00:	2b41      	cmp	r3, #65	; 0x41
 800ac02:	d00d      	beq.n	800ac20 <PS_LA_Set+0x1bc>
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	2b4e      	cmp	r3, #78	; 0x4e
 800ac0a:	d007      	beq.n	800ac1c <PS_LA_Set+0x1b8>
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b53      	cmp	r3, #83	; 0x53
 800ac12:	d101      	bne.n	800ac18 <PS_LA_Set+0x1b4>
 800ac14:	2302      	movs	r3, #2
 800ac16:	e004      	b.n	800ac22 <PS_LA_Set+0x1be>
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e002      	b.n	800ac22 <PS_LA_Set+0x1be>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e000      	b.n	800ac22 <PS_LA_Set+0x1be>
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800ac20:	2300      	movs	r3, #0
 800ac22:	69fa      	ldr	r2, [r7, #28]
 800ac24:	9201      	str	r2, [sp, #4]
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4822      	ldr	r0, [pc, #136]	; (800acb8 <PS_LA_Set+0x254>)
 800ac2e:	f7fd fc1d 	bl	800846c <daq_trig_set>
 800ac32:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (ret1 + ret2 + ret3 + ret4 + ret5 == 0)
 800ac34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac38:	441a      	add	r2, r3
 800ac3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3c:	441a      	add	r2, r3
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac40:	441a      	add	r2, r3
 800ac42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac44:	4413      	add	r3, r2
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10f      	bne.n	800ac6a <PS_LA_Set+0x206>
        {
            daq.dis_hold = 0;
 800ac4a:	4b1b      	ldr	r3, [pc, #108]	; (800acb8 <PS_LA_Set+0x254>)
 800ac4c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ac50:	3335      	adds	r3, #53	; 0x35
 800ac52:	2200      	movs	r2, #0
 800ac54:	701a      	strb	r2, [r3, #0]
            daq_enable(&daq, 1);
 800ac56:	2101      	movs	r1, #1
 800ac58:	4817      	ldr	r0, [pc, #92]	; (800acb8 <PS_LA_Set+0x254>)
 800ac5a:	f7fc f92f 	bl	8006ebc <daq_enable>

            SCPI_ResultText(context, SCPI_OK);
 800ac5e:	491b      	ldr	r1, [pc, #108]	; (800accc <PS_LA_Set+0x268>)
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f003 fea7 	bl	800e9b4 <SCPI_ResultText>
            return SCPI_RES_OK;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e021      	b.n	800acae <PS_LA_Set+0x24a>
        }
        else
        {
            daq.mode = VM;
 800ac6a:	4b13      	ldr	r3, [pc, #76]	; (800acb8 <PS_LA_Set+0x254>)
 800ac6c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ac70:	3334      	adds	r3, #52	; 0x34
 800ac72:	2201      	movs	r2, #1
 800ac74:	701a      	strb	r2, [r3, #0]
            daq_mode_set(&daq, LA); // reload saved settings
 800ac76:	2102      	movs	r1, #2
 800ac78:	480f      	ldr	r0, [pc, #60]	; (800acb8 <PS_LA_Set+0x254>)
 800ac7a:	f7fc fa09 	bl	8007090 <daq_mode_set>
            daq.dis_hold = 0;
 800ac7e:	4b0e      	ldr	r3, [pc, #56]	; (800acb8 <PS_LA_Set+0x254>)
 800ac80:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ac84:	3335      	adds	r3, #53	; 0x35
 800ac86:	2200      	movs	r2, #0
 800ac88:	701a      	strb	r2, [r3, #0]
            daq_enable(&daq, 1);
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	480a      	ldr	r0, [pc, #40]	; (800acb8 <PS_LA_Set+0x254>)
 800ac8e:	f7fc f915 	bl	8006ebc <daq_enable>

            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800ac92:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f001 fe74 	bl	800c984 <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800ac9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aca0:	e005      	b.n	800acae <PS_LA_Set+0x24a>
        }
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800aca2:	2101      	movs	r1, #1
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f001 fe6d 	bl	800c984 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800acaa:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3740      	adds	r7, #64	; 0x40
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	200007ec 	.word	0x200007ec
 800acbc:	2000cc50 	.word	0x2000cc50
 800acc0:	2000cc00 	.word	0x2000cc00
 800acc4:	2000cc28 	.word	0x2000cc28
 800acc8:	2000cbe8 	.word	0x2000cbe8
 800accc:	080151b8 	.word	0x080151b8

0800acd0 <PS_LA_SetQ>:

scpi_result_t PS_LA_SetQ(scpi_t * context)
{
 800acd0:	b590      	push	{r4, r7, lr}
 800acd2:	b0a7      	sub	sp, #156	; 0x9c
 800acd4:	af04      	add	r7, sp, #16
 800acd6:	6078      	str	r0, [r7, #4]
    if (daq.mode == LA)
 800acd8:	4b3d      	ldr	r3, [pc, #244]	; (800add0 <PS_LA_SetQ+0x100>)
 800acda:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800acde:	3334      	adds	r3, #52	; 0x34
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d16a      	bne.n	800adbc <PS_LA_SetQ+0xec>
        char buff[80];
        char freq_s[30];
        char edge_s[2];
        char mode_s[2];

        sprint_fast(freq_s, "%s", daq.set.fs, 3);
 800ace6:	4b3a      	ldr	r3, [pc, #232]	; (800add0 <PS_LA_SetQ+0x100>)
 800ace8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800acec:	edd3 7a00 	vldr	s15, [r3]
 800acf0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800acf4:	2203      	movs	r2, #3
 800acf6:	eeb0 0a67 	vmov.f32	s0, s15
 800acfa:	4936      	ldr	r1, [pc, #216]	; (800add4 <PS_LA_SetQ+0x104>)
 800acfc:	4618      	mov	r0, r3
 800acfe:	f001 fbb7 	bl	800c470 <sprint_fast>
        edge_s[0] = daq.trig.set.edge == RISING ? 'R' : 'F';
 800ad02:	4b33      	ldr	r3, [pc, #204]	; (800add0 <PS_LA_SetQ+0x100>)
 800ad04:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ad08:	3341      	adds	r3, #65	; 0x41
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <PS_LA_SetQ+0x44>
 800ad10:	2352      	movs	r3, #82	; 0x52
 800ad12:	e000      	b.n	800ad16 <PS_LA_SetQ+0x46>
 800ad14:	2346      	movs	r3, #70	; 0x46
 800ad16:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 800ad1a:	4b2d      	ldr	r3, [pc, #180]	; (800add0 <PS_LA_SetQ+0x100>)
 800ad1c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ad20:	3340      	adds	r3, #64	; 0x40
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d013      	beq.n	800ad50 <PS_LA_SetQ+0x80>
 800ad28:	4b29      	ldr	r3, [pc, #164]	; (800add0 <PS_LA_SetQ+0x100>)
 800ad2a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ad2e:	3340      	adds	r3, #64	; 0x40
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d00a      	beq.n	800ad4c <PS_LA_SetQ+0x7c>
            (daq.trig.set.mode == SINGLE ? 'S' : 'D'));
 800ad36:	4b26      	ldr	r3, [pc, #152]	; (800add0 <PS_LA_SetQ+0x100>)
 800ad38:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ad3c:	3340      	adds	r3, #64	; 0x40
 800ad3e:	781b      	ldrb	r3, [r3, #0]
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d101      	bne.n	800ad48 <PS_LA_SetQ+0x78>
 800ad44:	2353      	movs	r3, #83	; 0x53
 800ad46:	e004      	b.n	800ad52 <PS_LA_SetQ+0x82>
 800ad48:	2344      	movs	r3, #68	; 0x44
 800ad4a:	e002      	b.n	800ad52 <PS_LA_SetQ+0x82>
 800ad4c:	234e      	movs	r3, #78	; 0x4e
 800ad4e:	e000      	b.n	800ad52 <PS_LA_SetQ+0x82>
 800ad50:	2341      	movs	r3, #65	; 0x41
 800ad52:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        edge_s[1] = '\0';
 800ad56:	2300      	movs	r3, #0
 800ad58:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
        mode_s[1] = '\0';
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        int len = sprintf(buff, "\"%d,%s,%d,%s,%s,%d\"", daq.set.mem, freq_s,
 800ad62:	4b1b      	ldr	r3, [pc, #108]	; (800add0 <PS_LA_SetQ+0x100>)
 800ad64:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ad68:	3304      	adds	r3, #4
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	461c      	mov	r4, r3
 800ad6e:	4b18      	ldr	r3, [pc, #96]	; (800add0 <PS_LA_SetQ+0x100>)
 800ad70:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ad74:	3344      	adds	r3, #68	; 0x44
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	4b15      	ldr	r3, [pc, #84]	; (800add0 <PS_LA_SetQ+0x100>)
 800ad7a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ad7e:	333c      	adds	r3, #60	; 0x3c
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800ad86:	f107 000c 	add.w	r0, r7, #12
 800ad8a:	9303      	str	r3, [sp, #12]
 800ad8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ad90:	9302      	str	r3, [sp, #8]
 800ad92:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ad96:	9301      	str	r3, [sp, #4]
 800ad98:	9200      	str	r2, [sp, #0]
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4622      	mov	r2, r4
 800ad9e:	490e      	ldr	r1, [pc, #56]	; (800add8 <PS_LA_SetQ+0x108>)
 800ada0:	f007 f95c 	bl	801205c <siprintf>
 800ada4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                          daq.trig.set.ch, edge_s, mode_s, daq.trig.set.pretrigger);

        SCPI_ResultCharacters(context, buff, len);
 800ada8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800adac:	f107 030c 	add.w	r3, r7, #12
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f003 fd64 	bl	800e880 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 800adb8:	2301      	movs	r3, #1
 800adba:	e005      	b.n	800adc8 <PS_LA_SetQ+0xf8>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800adbc:	2101      	movs	r1, #1
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f001 fde0 	bl	800c984 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800adc4:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800adc8:	4618      	mov	r0, r3
 800adca:	378c      	adds	r7, #140	; 0x8c
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd90      	pop	{r4, r7, pc}
 800add0:	200007ec 	.word	0x200007ec
 800add4:	08015200 	.word	0x08015200
 800add8:	08015264 	.word	0x08015264
 800addc:	00000000 	.word	0x00000000

0800ade0 <PS_CNTR_ReadQ>:

/************************* [CNTR Actions] *************************/

scpi_result_t PS_CNTR_ReadQ(scpi_t * context)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b0a8      	sub	sp, #160	; 0xa0
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
    float f = cntr_read(&cntr, &daq);
 800ade8:	495b      	ldr	r1, [pc, #364]	; (800af58 <PS_CNTR_ReadQ+0x178>)
 800adea:	485c      	ldr	r0, [pc, #368]	; (800af5c <PS_CNTR_ReadQ+0x17c>)
 800adec:	f7fa fc36 	bl	800565c <cntr_read>
 800adf0:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c

    if (f > -1)
 800adf4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800adf8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800adfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae04:	f340 8096 	ble.w	800af34 <PS_CNTR_ReadQ+0x154>
    {
        char f_s[20];
        char T_s[20];

        float T = 1.0 / f;
 800ae08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae0c:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800ae10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae14:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

        if (f < 1000)
 800ae18:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ae1c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800af60 <PS_CNTR_ReadQ+0x180>
 800ae20:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae28:	d509      	bpl.n	800ae3e <PS_CNTR_ReadQ+0x5e>
            sprint_fast(f_s, "%s Hz", f, 3);
 800ae2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ae2e:	2203      	movs	r2, #3
 800ae30:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 800ae34:	494b      	ldr	r1, [pc, #300]	; (800af64 <PS_CNTR_ReadQ+0x184>)
 800ae36:	4618      	mov	r0, r3
 800ae38:	f001 fb1a 	bl	800c470 <sprint_fast>
 800ae3c:	e027      	b.n	800ae8e <PS_CNTR_ReadQ+0xae>
        else if (f < 1000000)
 800ae3e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ae42:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800af68 <PS_CNTR_ReadQ+0x188>
 800ae46:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae4e:	d50f      	bpl.n	800ae70 <PS_CNTR_ReadQ+0x90>
            sprint_fast(f_s, "%s kHz", f / 1000.0, 3);
 800ae50:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ae54:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800af60 <PS_CNTR_ReadQ+0x180>
 800ae58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ae5c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ae60:	2203      	movs	r2, #3
 800ae62:	eeb0 0a66 	vmov.f32	s0, s13
 800ae66:	4941      	ldr	r1, [pc, #260]	; (800af6c <PS_CNTR_ReadQ+0x18c>)
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f001 fb01 	bl	800c470 <sprint_fast>
 800ae6e:	e00e      	b.n	800ae8e <PS_CNTR_ReadQ+0xae>
        else //if (f < 1000000000)
            sprint_fast(f_s, "%s MHz", f / 1000000.0, 3);
 800ae70:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ae74:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800af68 <PS_CNTR_ReadQ+0x188>
 800ae78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ae7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ae80:	2203      	movs	r2, #3
 800ae82:	eeb0 0a66 	vmov.f32	s0, s13
 800ae86:	493a      	ldr	r1, [pc, #232]	; (800af70 <PS_CNTR_ReadQ+0x190>)
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f001 faf1 	bl	800c470 <sprint_fast>

        if (T >= 1)
 800ae8e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800ae92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae9e:	db09      	blt.n	800aeb4 <PS_CNTR_ReadQ+0xd4>
            sprint_fast(T_s, "%s s", T, 3);
 800aea0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800aea4:	2203      	movs	r2, #3
 800aea6:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800aeaa:	4932      	ldr	r1, [pc, #200]	; (800af74 <PS_CNTR_ReadQ+0x194>)
 800aeac:	4618      	mov	r0, r3
 800aeae:	f001 fadf 	bl	800c470 <sprint_fast>
 800aeb2:	e02a      	b.n	800af0a <PS_CNTR_ReadQ+0x12a>
        else if (T >= 0.001)
 800aeb4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800aeb8:	f7f5 fb5e 	bl	8000578 <__aeabi_f2d>
 800aebc:	a324      	add	r3, pc, #144	; (adr r3, 800af50 <PS_CNTR_ReadQ+0x170>)
 800aebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec2:	f7f5 fe37 	bl	8000b34 <__aeabi_dcmpge>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00f      	beq.n	800aeec <PS_CNTR_ReadQ+0x10c>
            sprint_fast(T_s, "%s ms", T * 1000.0, 3);
 800aecc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800aed0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800af60 <PS_CNTR_ReadQ+0x180>
 800aed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aed8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800aedc:	2203      	movs	r2, #3
 800aede:	eeb0 0a67 	vmov.f32	s0, s15
 800aee2:	4925      	ldr	r1, [pc, #148]	; (800af78 <PS_CNTR_ReadQ+0x198>)
 800aee4:	4618      	mov	r0, r3
 800aee6:	f001 fac3 	bl	800c470 <sprint_fast>
 800aeea:	e00e      	b.n	800af0a <PS_CNTR_ReadQ+0x12a>
        else //if (T >= 0.000001)
            sprint_fast(T_s, "%s us", T * 1000000.0, 3);
 800aeec:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800aef0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800af68 <PS_CNTR_ReadQ+0x188>
 800aef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aef8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800aefc:	2203      	movs	r2, #3
 800aefe:	eeb0 0a67 	vmov.f32	s0, s15
 800af02:	491e      	ldr	r1, [pc, #120]	; (800af7c <PS_CNTR_ReadQ+0x19c>)
 800af04:	4618      	mov	r0, r3
 800af06:	f001 fab3 	bl	800c470 <sprint_fast>

        char buff[100];
        int len = sprintf(buff, "%s,%s", f_s, T_s);
 800af0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800af0e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800af12:	f107 0008 	add.w	r0, r7, #8
 800af16:	491a      	ldr	r1, [pc, #104]	; (800af80 <PS_CNTR_ReadQ+0x1a0>)
 800af18:	f007 f8a0 	bl	801205c <siprintf>
 800af1c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

        SCPI_ResultCharacters(context, buff, len);
 800af20:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af24:	f107 0308 	add.w	r3, r7, #8
 800af28:	4619      	mov	r1, r3
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f003 fca8 	bl	800e880 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 800af30:	2301      	movs	r3, #1
 800af32:	e006      	b.n	800af42 <PS_CNTR_ReadQ+0x162>
    }
    else // if (f == -1)
    {
        SCPI_ErrorPush(context, SCPI_ERROR_TIME_OUT);
 800af34:	f46f 71b6 	mvn.w	r1, #364	; 0x16c
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f001 fd23 	bl	800c984 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800af3e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800af42:	4618      	mov	r0, r3
 800af44:	37a0      	adds	r7, #160	; 0xa0
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	f3af 8000 	nop.w
 800af50:	d2f1a9fc 	.word	0xd2f1a9fc
 800af54:	3f50624d 	.word	0x3f50624d
 800af58:	200007ec 	.word	0x200007ec
 800af5c:	20000604 	.word	0x20000604
 800af60:	447a0000 	.word	0x447a0000
 800af64:	08015278 	.word	0x08015278
 800af68:	49742400 	.word	0x49742400
 800af6c:	08015280 	.word	0x08015280
 800af70:	08015288 	.word	0x08015288
 800af74:	08015290 	.word	0x08015290
 800af78:	08015298 	.word	0x08015298
 800af7c:	080152a0 	.word	0x080152a0
 800af80:	080152a8 	.word	0x080152a8

0800af84 <PS_SGEN_Set>:

/************************* [SGEN Actions] *************************/
scpi_result_t PS_SGEN_Set(scpi_t * context)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
#ifdef PS_DAC
    double p1;
    if (!SCPI_ParamDouble(context, &p1, TRUE))
 800af8c:	f107 0308 	add.w	r3, r7, #8
 800af90:	2201      	movs	r2, #1
 800af92:	4619      	mov	r1, r3
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f004 f90b 	bl	800f1b0 <SCPI_ParamDouble>
 800af9a:	4603      	mov	r3, r0
 800af9c:	f083 0301 	eor.w	r3, r3, #1
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d007      	beq.n	800afb6 <PS_SGEN_Set+0x32>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800afa6:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f001 fcea 	bl	800c984 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800afb0:	f04f 33ff 	mov.w	r3, #4294967295
 800afb4:	e004      	b.n	800afc0 <PS_SGEN_Set+0x3c>
    }

    //sgen_enable(&sgen, p1 == 1); // TODO

    SCPI_ResultText(context, SCPI_OK);
 800afb6:	4904      	ldr	r1, [pc, #16]	; (800afc8 <PS_SGEN_Set+0x44>)
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f003 fcfb 	bl	800e9b4 <SCPI_ResultText>
    return SCPI_RES_OK;
 800afbe:	2301      	movs	r3, #1
#else
    SCPI_ErrorPush(context, SCPI_ERROR_DAC_NA);
    return SCPI_RES_ERR;
#endif
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	080151b8 	.word	0x080151b8

0800afcc <PS_PWM_SetQ>:

/************************* [PWM Actions] *************************/

scpi_result_t PS_PWM_SetQ(scpi_t * context)
{
 800afcc:	b590      	push	{r4, r7, lr}
 800afce:	b0a5      	sub	sp, #148	; 0x94
 800afd0:	af04      	add	r7, sp, #16
 800afd2:	6078      	str	r0, [r7, #4]
    char buff[60];
    char buff_freq[10];
    char buff_duty1[10];
    char buff_duty2[10];

    float freq = pwm.ch1.freq;
 800afd4:	4b28      	ldr	r3, [pc, #160]	; (800b078 <PS_PWM_SetQ+0xac>)
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	67fb      	str	r3, [r7, #124]	; 0x7c
    float duty1 = pwm.ch1.duty;
 800afda:	4b27      	ldr	r3, [pc, #156]	; (800b078 <PS_PWM_SetQ+0xac>)
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	67bb      	str	r3, [r7, #120]	; 0x78
    float duty2 = pwm.ch2.duty;
 800afe0:	4b25      	ldr	r3, [pc, #148]	; (800b078 <PS_PWM_SetQ+0xac>)
 800afe2:	6a1b      	ldr	r3, [r3, #32]
 800afe4:	677b      	str	r3, [r7, #116]	; 0x74
    int offset2 = pwm.ch2.offset;
 800afe6:	4b24      	ldr	r3, [pc, #144]	; (800b078 <PS_PWM_SetQ+0xac>)
 800afe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afea:	673b      	str	r3, [r7, #112]	; 0x70
    uint8_t en1 = pwm.ch1.enabled;
 800afec:	4b22      	ldr	r3, [pc, #136]	; (800b078 <PS_PWM_SetQ+0xac>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t en2 = pwm.ch2.enabled;
 800aff4:	4b20      	ldr	r3, [pc, #128]	; (800b078 <PS_PWM_SetQ+0xac>)
 800aff6:	7e1b      	ldrb	r3, [r3, #24]
 800aff8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

    sprint_fast(buff_freq, "%s", freq, 4);
 800affc:	f107 0320 	add.w	r3, r7, #32
 800b000:	2204      	movs	r2, #4
 800b002:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 800b006:	491d      	ldr	r1, [pc, #116]	; (800b07c <PS_PWM_SetQ+0xb0>)
 800b008:	4618      	mov	r0, r3
 800b00a:	f001 fa31 	bl	800c470 <sprint_fast>
    sprint_fast(buff_duty1, "%s", duty1, 4);
 800b00e:	f107 0314 	add.w	r3, r7, #20
 800b012:	2204      	movs	r2, #4
 800b014:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 800b018:	4918      	ldr	r1, [pc, #96]	; (800b07c <PS_PWM_SetQ+0xb0>)
 800b01a:	4618      	mov	r0, r3
 800b01c:	f001 fa28 	bl	800c470 <sprint_fast>
    sprint_fast(buff_duty2, "%s", duty2, 4);
 800b020:	f107 0308 	add.w	r3, r7, #8
 800b024:	2204      	movs	r2, #4
 800b026:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800b02a:	4914      	ldr	r1, [pc, #80]	; (800b07c <PS_PWM_SetQ+0xb0>)
 800b02c:	4618      	mov	r0, r3
 800b02e:	f001 fa1f 	bl	800c470 <sprint_fast>
    int len = sprintf(buff, "%s,%s,%s,%d,%d,%d", buff_freq, buff_duty1, buff_duty2, offset2, en1, en2);
 800b032:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b036:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800b03a:	f107 0414 	add.w	r4, r7, #20
 800b03e:	f107 0120 	add.w	r1, r7, #32
 800b042:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800b046:	9203      	str	r2, [sp, #12]
 800b048:	9302      	str	r3, [sp, #8]
 800b04a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b04c:	9301      	str	r3, [sp, #4]
 800b04e:	f107 0308 	add.w	r3, r7, #8
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	4623      	mov	r3, r4
 800b056:	460a      	mov	r2, r1
 800b058:	4909      	ldr	r1, [pc, #36]	; (800b080 <PS_PWM_SetQ+0xb4>)
 800b05a:	f006 ffff 	bl	801205c <siprintf>
 800b05e:	66b8      	str	r0, [r7, #104]	; 0x68

    SCPI_ResultCharacters(context, buff, len);
 800b060:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f003 fc09 	bl	800e880 <SCPI_ResultCharacters>

    return SCPI_RES_OK;
 800b06e:	2301      	movs	r3, #1
}
 800b070:	4618      	mov	r0, r3
 800b072:	3784      	adds	r7, #132	; 0x84
 800b074:	46bd      	mov	sp, r7
 800b076:	bd90      	pop	{r4, r7, pc}
 800b078:	2000d6a0 	.word	0x2000d6a0
 800b07c:	08015200 	.word	0x08015200
 800b080:	080152b0 	.word	0x080152b0

0800b084 <PS_PWM_Set>:

scpi_result_t PS_PWM_Set(scpi_t * context)
{
 800b084:	b5b0      	push	{r4, r5, r7, lr}
 800b086:	b08e      	sub	sp, #56	; 0x38
 800b088:	af04      	add	r7, sp, #16
 800b08a:	6078      	str	r0, [r7, #4]
    uint32_t param1, param2, param3, param4, param5, param6;

    if (!SCPI_ParamUInt32(context, &param1, TRUE) ||
 800b08c:	f107 0320 	add.w	r3, r7, #32
 800b090:	2201      	movs	r2, #1
 800b092:	4619      	mov	r1, r3
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f004 f93b 	bl	800f310 <SCPI_ParamUInt32>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f083 0301 	eor.w	r3, r3, #1
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d140      	bne.n	800b128 <PS_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
 800b0a6:	f107 031c 	add.w	r3, r7, #28
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f004 f92e 	bl	800f310 <SCPI_ParamUInt32>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f083 0301 	eor.w	r3, r3, #1
 800b0ba:	b2db      	uxtb	r3, r3
    if (!SCPI_ParamUInt32(context, &param1, TRUE) ||
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d133      	bne.n	800b128 <PS_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param3, TRUE) ||
 800b0c0:	f107 0318 	add.w	r3, r7, #24
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f004 f921 	bl	800f310 <SCPI_ParamUInt32>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	f083 0301 	eor.w	r3, r3, #1
 800b0d4:	b2db      	uxtb	r3, r3
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d126      	bne.n	800b128 <PS_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param4, TRUE) ||
 800b0da:	f107 0314 	add.w	r3, r7, #20
 800b0de:	2201      	movs	r2, #1
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f004 f914 	bl	800f310 <SCPI_ParamUInt32>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f083 0301 	eor.w	r3, r3, #1
 800b0ee:	b2db      	uxtb	r3, r3
        !SCPI_ParamUInt32(context, &param3, TRUE) ||
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d119      	bne.n	800b128 <PS_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param5, TRUE) ||
 800b0f4:	f107 0310 	add.w	r3, r7, #16
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f004 f907 	bl	800f310 <SCPI_ParamUInt32>
 800b102:	4603      	mov	r3, r0
 800b104:	f083 0301 	eor.w	r3, r3, #1
 800b108:	b2db      	uxtb	r3, r3
        !SCPI_ParamUInt32(context, &param4, TRUE) ||
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10c      	bne.n	800b128 <PS_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param6, TRUE))
 800b10e:	f107 030c 	add.w	r3, r7, #12
 800b112:	2201      	movs	r2, #1
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f004 f8fa 	bl	800f310 <SCPI_ParamUInt32>
 800b11c:	4603      	mov	r3, r0
 800b11e:	f083 0301 	eor.w	r3, r3, #1
 800b122:	b2db      	uxtb	r3, r3
        !SCPI_ParamUInt32(context, &param5, TRUE) ||
 800b124:	2b00      	cmp	r3, #0
 800b126:	d007      	beq.n	800b138 <PS_PWM_Set+0xb4>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800b128:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f001 fc29 	bl	800c984 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b132:	f04f 33ff 	mov.w	r3, #4294967295
 800b136:	e022      	b.n	800b17e <PS_PWM_Set+0xfa>
    }

    int ret = pwm_set(&pwm, param1, param2, param3, param4, param5, param6);
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	4618      	mov	r0, r3
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	461c      	mov	r4, r3
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	461d      	mov	r5, r3
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	68f9      	ldr	r1, [r7, #12]
 800b14a:	9102      	str	r1, [sp, #8]
 800b14c:	9201      	str	r2, [sp, #4]
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	462b      	mov	r3, r5
 800b152:	4622      	mov	r2, r4
 800b154:	4601      	mov	r1, r0
 800b156:	480c      	ldr	r0, [pc, #48]	; (800b188 <PS_PWM_Set+0x104>)
 800b158:	f000 f8a4 	bl	800b2a4 <pwm_set>
 800b15c:	6278      	str	r0, [r7, #36]	; 0x24

    if (ret != 0)
 800b15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b160:	2b00      	cmp	r3, #0
 800b162:	d007      	beq.n	800b174 <PS_PWM_Set+0xf0>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800b164:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f001 fc0b 	bl	800c984 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b16e:	f04f 33ff 	mov.w	r3, #4294967295
 800b172:	e004      	b.n	800b17e <PS_PWM_Set+0xfa>
    }

    SCPI_ResultText(context, SCPI_OK);
 800b174:	4905      	ldr	r1, [pc, #20]	; (800b18c <PS_PWM_Set+0x108>)
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f003 fc1c 	bl	800e9b4 <SCPI_ResultText>
    return SCPI_RES_OK;
 800b17c:	2301      	movs	r3, #1
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3728      	adds	r7, #40	; 0x28
 800b182:	46bd      	mov	sp, r7
 800b184:	bdb0      	pop	{r4, r5, r7, pc}
 800b186:	bf00      	nop
 800b188:	2000d6a0 	.word	0x2000d6a0
 800b18c:	080151b8 	.word	0x080151b8

0800b190 <LL_TIM_EnableCounter>:
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f043 0201 	orr.w	r2, r3, #1
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	601a      	str	r2, [r3, #0]
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <LL_TIM_DisableCounter>:
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f023 0201 	bic.w	r2, r3, #1
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	601a      	str	r2, [r3, #0]
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <LL_TIM_SetCounter>:
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <LL_TIM_SetPrescaler>:
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b1fc:	bf00      	nop
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <LL_TIM_SetAutoReload>:
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	683a      	ldr	r2, [r7, #0]
 800b216:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <LL_TIM_CC_EnableChannel>:
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a1a      	ldr	r2, [r3, #32]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	431a      	orrs	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	621a      	str	r2, [r3, #32]
}
 800b23a:	bf00      	nop
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <LL_TIM_OC_SetCompareCH1>:
{
 800b246:	b480      	push	{r7}
 800b248:	b083      	sub	sp, #12
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b256:	bf00      	nop
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
	...

0800b264 <pwm_init>:
#include "pwm.h"
#include "main.h"


void pwm_init(pwm_data_t* self)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
    self->ch1.enabled = 0;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	701a      	strb	r2, [r3, #0]
    self->ch2.enabled = 0;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	761a      	strb	r2, [r3, #24]
    self->ch1.freq = 1000;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a08      	ldr	r2, [pc, #32]	; (800b29c <pwm_init+0x38>)
 800b27c:	605a      	str	r2, [r3, #4]
    self->ch2.freq = 1000;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a06      	ldr	r2, [pc, #24]	; (800b29c <pwm_init+0x38>)
 800b282:	61da      	str	r2, [r3, #28]
    self->ch1.duty = 50;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a06      	ldr	r2, [pc, #24]	; (800b2a0 <pwm_init+0x3c>)
 800b288:	609a      	str	r2, [r3, #8]
    self->ch2.duty = 50;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a04      	ldr	r2, [pc, #16]	; (800b2a0 <pwm_init+0x3c>)
 800b28e:	621a      	str	r2, [r3, #32]
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr
 800b29c:	447a0000 	.word	0x447a0000
 800b2a0:	42480000 	.word	0x42480000

0800b2a4 <pwm_set>:

int pwm_set(pwm_data_t* self, int freq, int duty1, int duty2, int offset2, int enable1, int enable2)
{
 800b2a4:	b5b0      	push	{r4, r5, r7, lr}
 800b2a6:	b08c      	sub	sp, #48	; 0x30
 800b2a8:	af02      	add	r7, sp, #8
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	607a      	str	r2, [r7, #4]
 800b2b0:	603b      	str	r3, [r7, #0]
    if (freq <= 0 || freq > PS_PWM_MAX_F || duty1 < 0 || duty1 > 100 ||
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	dd15      	ble.n	800b2e4 <pwm_set+0x40>
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	4a8c      	ldr	r2, [pc, #560]	; (800b4ec <pwm_set+0x248>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	dc11      	bgt.n	800b2e4 <pwm_set+0x40>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	db0e      	blt.n	800b2e4 <pwm_set+0x40>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b64      	cmp	r3, #100	; 0x64
 800b2ca:	dc0b      	bgt.n	800b2e4 <pwm_set+0x40>
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	db08      	blt.n	800b2e4 <pwm_set+0x40>
        duty2 < 0 || duty2 > 100 || offset2 < 0 || offset2 > 100)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	2b64      	cmp	r3, #100	; 0x64
 800b2d6:	dc05      	bgt.n	800b2e4 <pwm_set+0x40>
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	db02      	blt.n	800b2e4 <pwm_set+0x40>
 800b2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e0:	2b64      	cmp	r3, #100	; 0x64
 800b2e2:	dd02      	ble.n	800b2ea <pwm_set+0x46>
    {
        return -1;
 800b2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e8:	e0fb      	b.n	800b4e2 <pwm_set+0x23e>
    }

    LL_TIM_DisableCounter(PS_TIM_PWM1);
 800b2ea:	4881      	ldr	r0, [pc, #516]	; (800b4f0 <pwm_set+0x24c>)
 800b2ec:	f7ff ff60 	bl	800b1b0 <LL_TIM_DisableCounter>
    LL_TIM_DisableCounter(PS_TIM_PWM2);
 800b2f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b2f4:	f7ff ff5c 	bl	800b1b0 <LL_TIM_DisableCounter>

    if (!enable1)
 800b2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <pwm_set+0x5e>
        return 0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	e0ef      	b.n	800b4e2 <pwm_set+0x23e>

    int prescaler = 1;
 800b302:	2301      	movs	r3, #1
 800b304:	617b      	str	r3, [r7, #20]
    int reload = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	613b      	str	r3, [r7, #16]

    self->ch1.enabled = enable1;
 800b30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	701a      	strb	r2, [r3, #0]
    self->ch1.freq = get_freq(&prescaler, &reload, PS_TIM_PWM1_MAX, PS_TIM_PWM1_FREQ, freq);
 800b312:	f107 0110 	add.w	r1, r7, #16
 800b316:	f107 0014 	add.w	r0, r7, #20
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	4b75      	ldr	r3, [pc, #468]	; (800b4f4 <pwm_set+0x250>)
 800b320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b324:	f001 f838 	bl	800c398 <get_freq>
 800b328:	eef0 7a40 	vmov.f32	s15, s0
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	edc3 7a01 	vstr	s15, [r3, #4]
    self->ch1.prescaler = prescaler;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	461a      	mov	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	60da      	str	r2, [r3, #12]
    self->ch1.reload = reload;
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	461a      	mov	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	611a      	str	r2, [r3, #16]
    self->ch1.offset = 0;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	615a      	str	r2, [r3, #20]

    self->ch2.enabled = enable2;
 800b348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	761a      	strb	r2, [r3, #24]
    self->ch2.freq = self->ch1.freq;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	61da      	str	r2, [r3, #28]
    self->ch2.prescaler = prescaler;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	461a      	mov	r2, r3
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	625a      	str	r2, [r3, #36]	; 0x24
    self->ch2.reload = reload;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	461a      	mov	r2, r3
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	629a      	str	r2, [r3, #40]	; 0x28
    self->ch2.offset = offset2;
 800b368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	62da      	str	r2, [r3, #44]	; 0x2c

    LL_TIM_SetAutoReload(PS_TIM_PWM1, reload);
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	4619      	mov	r1, r3
 800b372:	485f      	ldr	r0, [pc, #380]	; (800b4f0 <pwm_set+0x24c>)
 800b374:	f7ff ff48 	bl	800b208 <LL_TIM_SetAutoReload>
    LL_TIM_SetAutoReload(PS_TIM_PWM2, reload);
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	4619      	mov	r1, r3
 800b37c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b380:	f7ff ff42 	bl	800b208 <LL_TIM_SetAutoReload>
    LL_TIM_SetPrescaler(PS_TIM_PWM1, prescaler);
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	4619      	mov	r1, r3
 800b388:	4859      	ldr	r0, [pc, #356]	; (800b4f0 <pwm_set+0x24c>)
 800b38a:	f7ff ff2f 	bl	800b1ec <LL_TIM_SetPrescaler>
    LL_TIM_SetPrescaler(PS_TIM_PWM2, prescaler);
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	4619      	mov	r1, r3
 800b392:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b396:	f7ff ff29 	bl	800b1ec <LL_TIM_SetPrescaler>

    int compare1 = (duty1 / (float)100) * reload;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	ee07 3a90 	vmov	s15, r3
 800b3a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3a4:	eddf 6a54 	vldr	s13, [pc, #336]	; 800b4f8 <pwm_set+0x254>
 800b3a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	ee07 3a90 	vmov	s15, r3
 800b3b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3be:	ee17 3a90 	vmov	r3, s15
 800b3c2:	627b      	str	r3, [r7, #36]	; 0x24
    float real_duty1 = ((float)compare1 / (float)reload) * (float)100;
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c6:	ee07 3a90 	vmov	s15, r3
 800b3ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	ee07 3a90 	vmov	s15, r3
 800b3d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3dc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b4f8 <pwm_set+0x254>
 800b3e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3e4:	edc7 7a08 	vstr	s15, [r7, #32]

    int compare2 = (duty2 / (float)100) * reload;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	ee07 3a90 	vmov	s15, r3
 800b3ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3f2:	eddf 6a41 	vldr	s13, [pc, #260]	; 800b4f8 <pwm_set+0x254>
 800b3f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	ee07 3a90 	vmov	s15, r3
 800b400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b40c:	ee17 3a90 	vmov	r3, s15
 800b410:	61fb      	str	r3, [r7, #28]
    float real_duty2 = ((float)compare2 / (float)reload) * (float)100;
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	ee07 3a90 	vmov	s15, r3
 800b418:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b42a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800b4f8 <pwm_set+0x254>
 800b42e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b432:	edc7 7a06 	vstr	s15, [r7, #24]

    self->ch1.duty = real_duty1;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6a3a      	ldr	r2, [r7, #32]
 800b43a:	609a      	str	r2, [r3, #8]
    self->ch2.duty = real_duty2;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	621a      	str	r2, [r3, #32]

    LL_TIM_OC_SetCompareCH1(PS_TIM_PWM1, compare1);
 800b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b444:	4619      	mov	r1, r3
 800b446:	482a      	ldr	r0, [pc, #168]	; (800b4f0 <pwm_set+0x24c>)
 800b448:	f7ff fefd 	bl	800b246 <LL_TIM_OC_SetCompareCH1>
    LL_TIM_OC_SetCompareCH1(PS_TIM_PWM2, compare2);
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	4619      	mov	r1, r3
 800b450:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b454:	f7ff fef7 	bl	800b246 <LL_TIM_OC_SetCompareCH1>
    
    LL_TIM_SetCounter(PS_TIM_PWM1, 0);
 800b458:	2100      	movs	r1, #0
 800b45a:	4825      	ldr	r0, [pc, #148]	; (800b4f0 <pwm_set+0x24c>)
 800b45c:	f7ff feb8 	bl	800b1d0 <LL_TIM_SetCounter>
    LL_TIM_SetCounter(PS_TIM_PWM2, 0);
 800b460:	2100      	movs	r1, #0
 800b462:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b466:	f7ff feb3 	bl	800b1d0 <LL_TIM_SetCounter>

    // http://www.micromouseonline.com/2016/02/05/clock-pulses-with-variable-phase-stm32/
    if (offset2 > 0)
 800b46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	dd2c      	ble.n	800b4ca <pwm_set+0x226>
        LL_TIM_SetCounter(PS_TIM_PWM2, (int)((float)offset2 / 100.0 * (float)reload));
 800b470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b472:	ee07 3a90 	vmov	s15, r3
 800b476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b47a:	ee17 0a90 	vmov	r0, s15
 800b47e:	f7f5 f87b 	bl	8000578 <__aeabi_f2d>
 800b482:	f04f 0200 	mov.w	r2, #0
 800b486:	4b1d      	ldr	r3, [pc, #116]	; (800b4fc <pwm_set+0x258>)
 800b488:	f7f5 f9f8 	bl	800087c <__aeabi_ddiv>
 800b48c:	4603      	mov	r3, r0
 800b48e:	460c      	mov	r4, r1
 800b490:	4625      	mov	r5, r4
 800b492:	461c      	mov	r4, r3
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	ee07 3a90 	vmov	s15, r3
 800b49a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b49e:	ee17 0a90 	vmov	r0, s15
 800b4a2:	f7f5 f869 	bl	8000578 <__aeabi_f2d>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	f7f5 f8bb 	bl	8000628 <__aeabi_dmul>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	f7f5 fb65 	bl	8000b88 <__aeabi_d2iz>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b4c6:	f7ff fe83 	bl	800b1d0 <LL_TIM_SetCounter>

    if (enable1)
 800b4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d004      	beq.n	800b4da <pwm_set+0x236>
        LL_TIM_CC_EnableChannel(PS_TIM_PWM1, PS_TIM_PWM1_CH);
 800b4d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4d4:	4806      	ldr	r0, [pc, #24]	; (800b4f0 <pwm_set+0x24c>)
 800b4d6:	f7ff fea5 	bl	800b224 <LL_TIM_CC_EnableChannel>

    //if (enable2)
    //    LL_TIM_CC_EnableChannel(PS_TIM_PWM2, PS_TIM_PWM2_CH);

    LL_TIM_EnableCounter(PS_TIM_PWM1);
 800b4da:	4805      	ldr	r0, [pc, #20]	; (800b4f0 <pwm_set+0x24c>)
 800b4dc:	f7ff fe58 	bl	800b190 <LL_TIM_EnableCounter>

    return 0;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3728      	adds	r7, #40	; 0x28
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bdb0      	pop	{r4, r5, r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	000f4240 	.word	0x000f4240
 800b4f0:	40000800 	.word	0x40000800
 800b4f4:	044aa200 	.word	0x044aa200
 800b4f8:	42c80000 	.word	0x42c80000
 800b4fc:	40590000 	.word	0x40590000

0800b500 <LL_DAC_EnableDMAReq>:
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	f003 0310 	and.w	r3, r3, #16
 800b514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b518:	fa01 f303 	lsl.w	r3, r1, r3
 800b51c:	431a      	orrs	r2, r3
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	601a      	str	r2, [r3, #0]
}
 800b522:	bf00      	nop
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <LL_DAC_DMA_GetRegAddr>:
{
 800b52e:	b480      	push	{r7}
 800b530:	b087      	sub	sp, #28
 800b532:	af00      	add	r7, sp, #0
 800b534:	60f8      	str	r0, [r7, #12]
 800b536:	60b9      	str	r1, [r7, #8]
 800b538:	607a      	str	r2, [r7, #4]
  return ((uint32_t)(__DAC_PTR_REG_OFFSET((DACx)->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, Register))));
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	3308      	adds	r3, #8
 800b53e:	4619      	mov	r1, r3
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4013      	ands	r3, r2
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	fa92 f2a2 	rbit	r2, r2
 800b550:	613a      	str	r2, [r7, #16]
  return result;
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	fab2 f282 	clz	r2, r2
 800b558:	b2d2      	uxtb	r2, r2
 800b55a:	40d3      	lsrs	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	440b      	add	r3, r1
}
 800b560:	4618      	mov	r0, r3
 800b562:	371c      	adds	r7, #28
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <LL_DAC_EnableTrigger>:
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	f003 0310 	and.w	r3, r3, #16
 800b580:	2104      	movs	r1, #4
 800b582:	fa01 f303 	lsl.w	r3, r1, r3
 800b586:	431a      	orrs	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	601a      	str	r2, [r3, #0]
}
 800b58c:	bf00      	nop
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <LL_TIM_EnableCounter>:
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f043 0201 	orr.w	r2, r3, #1
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	601a      	str	r2, [r3, #0]
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <LL_TIM_SetPrescaler>:
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	683a      	ldr	r2, [r7, #0]
 800b5c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <LL_TIM_SetAutoReload>:
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	683a      	ldr	r2, [r7, #0]
 800b5e2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <sgen_init>:

static int get_rnd(int* m_w, int* m_z);


void sgen_init(sgen_data_t* self)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
    self->enabled = 0;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	701a      	strb	r2, [r3, #0]
    self->tim_f_real = 0;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f04f 0200 	mov.w	r2, #0
 800b604:	611a      	str	r2, [r3, #16]
    memset(self->data, 0x00, PS_DAC_BUFF_LEN * sizeof(uint16_t));
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	3318      	adds	r3, #24
 800b60a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b60e:	2100      	movs	r1, #0
 800b610:	4618      	mov	r0, r3
 800b612:	f006 fd1b 	bl	801204c <memset>
    sgen_const(self, 50);
 800b616:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800b628 <sgen_init+0x38>
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f8b4 	bl	800b788 <sgen_const>
}
 800b620:	bf00      	nop
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	42480000 	.word	0x42480000

0800b62c <sgen_enable>:

void sgen_enable(sgen_data_t* self, enum sgen_mode mode, float A, float f, int N)
{
 800b62c:	b590      	push	{r4, r7, lr}
 800b62e:	b08d      	sub	sp, #52	; 0x34
 800b630:	af04      	add	r7, sp, #16
 800b632:	6178      	str	r0, [r7, #20]
 800b634:	460b      	mov	r3, r1
 800b636:	ed87 0a03 	vstr	s0, [r7, #12]
 800b63a:	edc7 0a02 	vstr	s1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
 800b640:	74fb      	strb	r3, [r7, #19]
    if (self->enabled)
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	f040 8090 	bne.w	800b76c <sgen_enable+0x140>
        return;

    if (mode == SINE)
 800b64c:	7cfb      	ldrb	r3, [r7, #19]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d108      	bne.n	800b664 <sgen_enable+0x38>
        sgen_sine(self, A, f, N);
 800b652:	6879      	ldr	r1, [r7, #4]
 800b654:	edd7 0a02 	vldr	s1, [r7, #8]
 800b658:	ed97 0a03 	vldr	s0, [r7, #12]
 800b65c:	6978      	ldr	r0, [r7, #20]
 800b65e:	f000 f8ff 	bl	800b860 <sgen_sine>
 800b662:	e034      	b.n	800b6ce <sgen_enable+0xa2>
    else if (mode == SQUARE)
 800b664:	7cfb      	ldrb	r3, [r7, #19]
 800b666:	2b02      	cmp	r3, #2
 800b668:	d108      	bne.n	800b67c <sgen_enable+0x50>
        sgen_square(self, A, f, N);
 800b66a:	6879      	ldr	r1, [r7, #4]
 800b66c:	edd7 0a02 	vldr	s1, [r7, #8]
 800b670:	ed97 0a03 	vldr	s0, [r7, #12]
 800b674:	6978      	ldr	r0, [r7, #20]
 800b676:	f000 f9e3 	bl	800ba40 <sgen_square>
 800b67a:	e028      	b.n	800b6ce <sgen_enable+0xa2>
    else if (mode == TRIANGLE)
 800b67c:	7cfb      	ldrb	r3, [r7, #19]
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d108      	bne.n	800b694 <sgen_enable+0x68>
        sgen_triangle(self, A, f, N);
 800b682:	6879      	ldr	r1, [r7, #4]
 800b684:	edd7 0a02 	vldr	s1, [r7, #8]
 800b688:	ed97 0a03 	vldr	s0, [r7, #12]
 800b68c:	6978      	ldr	r0, [r7, #20]
 800b68e:	f000 fa8b 	bl	800bba8 <sgen_triangle>
 800b692:	e01c      	b.n	800b6ce <sgen_enable+0xa2>
    else if (mode == SAW)
 800b694:	7cfb      	ldrb	r3, [r7, #19]
 800b696:	2b04      	cmp	r3, #4
 800b698:	d108      	bne.n	800b6ac <sgen_enable+0x80>
        sgen_saw(self, A, f, N);
 800b69a:	6879      	ldr	r1, [r7, #4]
 800b69c:	edd7 0a02 	vldr	s1, [r7, #8]
 800b6a0:	ed97 0a03 	vldr	s0, [r7, #12]
 800b6a4:	6978      	ldr	r0, [r7, #20]
 800b6a6:	f000 fb3f 	bl	800bd28 <sgen_saw>
 800b6aa:	e010      	b.n	800b6ce <sgen_enable+0xa2>
    else if (mode == RAND)
 800b6ac:	7cfb      	ldrb	r3, [r7, #19]
 800b6ae:	2b05      	cmp	r3, #5
 800b6b0:	d108      	bne.n	800b6c4 <sgen_enable+0x98>
        sgen_rand(self, A, f, N);
 800b6b2:	6879      	ldr	r1, [r7, #4]
 800b6b4:	edd7 0a02 	vldr	s1, [r7, #8]
 800b6b8:	ed97 0a03 	vldr	s0, [r7, #12]
 800b6bc:	6978      	ldr	r0, [r7, #20]
 800b6be:	f000 fbe3 	bl	800be88 <sgen_rand>
 800b6c2:	e004      	b.n	800b6ce <sgen_enable+0xa2>
    else // mode == CONST
        sgen_const(self, A);
 800b6c4:	ed97 0a03 	vldr	s0, [r7, #12]
 800b6c8:	6978      	ldr	r0, [r7, #20]
 800b6ca:	f000 f85d 	bl	800b788 <sgen_const>

    int prescaler = 1;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	61fb      	str	r3, [r7, #28]
    int reload = 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	61bb      	str	r3, [r7, #24]

    self->tim_f_real = get_freq(&prescaler, &reload, PS_TIM_SGEN_MAX, PS_TIM_SGEN_FREQ, self->tim_f);
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	edd3 7a03 	vldr	s15, [r3, #12]
 800b6dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6e0:	ee17 3a90 	vmov	r3, s15
 800b6e4:	f107 0118 	add.w	r1, r7, #24
 800b6e8:	f107 001c 	add.w	r0, r7, #28
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	4b21      	ldr	r3, [pc, #132]	; (800b774 <sgen_enable+0x148>)
 800b6f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6f4:	f000 fe50 	bl	800c398 <get_freq>
 800b6f8:	eef0 7a40 	vmov.f32	s15, s0
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	edc3 7a04 	vstr	s15, [r3, #16]

    dma_set((uint32_t)&self->data, PS_DMA_SGEN, PS_DMA_CH_SGEN,
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	3318      	adds	r3, #24
 800b706:	461c      	mov	r4, r3
 800b708:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 800b70c:	491a      	ldr	r1, [pc, #104]	; (800b778 <sgen_enable+0x14c>)
 800b70e:	481b      	ldr	r0, [pc, #108]	; (800b77c <sgen_enable+0x150>)
 800b710:	f7ff ff0d 	bl	800b52e <LL_DAC_DMA_GetRegAddr>
 800b714:	4601      	mov	r1, r0
            LL_DAC_DMA_GetRegAddr(PS_DAC, PS_DAC_CH, LL_DAC_DMA_REG_DATA_12BITS_RIGHT_ALIGNED), self->samples,
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	695b      	ldr	r3, [r3, #20]
    dma_set((uint32_t)&self->data, PS_DMA_SGEN, PS_DMA_CH_SGEN,
 800b71a:	461a      	mov	r2, r3
 800b71c:	2310      	movs	r3, #16
 800b71e:	9303      	str	r3, [sp, #12]
 800b720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b724:	9302      	str	r3, [sp, #8]
 800b726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b72a:	9301      	str	r3, [sp, #4]
 800b72c:	9200      	str	r2, [sp, #0]
 800b72e:	460b      	mov	r3, r1
 800b730:	2203      	movs	r2, #3
 800b732:	4913      	ldr	r1, [pc, #76]	; (800b780 <sgen_enable+0x154>)
 800b734:	4620      	mov	r0, r4
 800b736:	f7fd fffb 	bl	8009730 <dma_set>
            LL_DMA_PDATAALIGN_HALFWORD, LL_DMA_MDATAALIGN_HALFWORD, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

    LL_DAC_EnableDMAReq(PS_DAC, PS_DAC_CH);
 800b73a:	490f      	ldr	r1, [pc, #60]	; (800b778 <sgen_enable+0x14c>)
 800b73c:	480f      	ldr	r0, [pc, #60]	; (800b77c <sgen_enable+0x150>)
 800b73e:	f7ff fedf 	bl	800b500 <LL_DAC_EnableDMAReq>
    LL_DAC_EnableTrigger(PS_DAC, PS_DAC_CH);
 800b742:	490d      	ldr	r1, [pc, #52]	; (800b778 <sgen_enable+0x14c>)
 800b744:	480d      	ldr	r0, [pc, #52]	; (800b77c <sgen_enable+0x150>)
 800b746:	f7ff ff11 	bl	800b56c <LL_DAC_EnableTrigger>
    LL_TIM_SetAutoReload(PS_TIM_SGEN, reload);
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	4619      	mov	r1, r3
 800b74e:	480d      	ldr	r0, [pc, #52]	; (800b784 <sgen_enable+0x158>)
 800b750:	f7ff ff40 	bl	800b5d4 <LL_TIM_SetAutoReload>
    LL_TIM_SetPrescaler(PS_TIM_SGEN, prescaler);
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	4619      	mov	r1, r3
 800b758:	480a      	ldr	r0, [pc, #40]	; (800b784 <sgen_enable+0x158>)
 800b75a:	f7ff ff2d 	bl	800b5b8 <LL_TIM_SetPrescaler>
    LL_TIM_EnableCounter(PS_TIM_SGEN);
 800b75e:	4809      	ldr	r0, [pc, #36]	; (800b784 <sgen_enable+0x158>)
 800b760:	f7ff ff1a 	bl	800b598 <LL_TIM_EnableCounter>

    self->enabled = 1;
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	2201      	movs	r2, #1
 800b768:	701a      	strb	r2, [r3, #0]
 800b76a:	e000      	b.n	800b76e <sgen_enable+0x142>
        return;
 800b76c:	bf00      	nop
}
 800b76e:	3724      	adds	r7, #36	; 0x24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd90      	pop	{r4, r7, pc}
 800b774:	044aa200 	.word	0x044aa200
 800b778:	02100001 	.word	0x02100001
 800b77c:	40007400 	.word	0x40007400
 800b780:	40020000 	.word	0x40020000
 800b784:	40001000 	.word	0x40001000

0800b788 <sgen_const>:

    self->enabled = 0;
}

static void sgen_const(sgen_data_t* self, float A)
{
 800b788:	b590      	push	{r4, r7, lr}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	ed87 0a00 	vstr	s0, [r7]
    ASSERT(A >= 0 && A <= 100);
 800b794:	edd7 7a00 	vldr	s15, [r7]
 800b798:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a0:	bfac      	ite	ge
 800b7a2:	2301      	movge	r3, #1
 800b7a4:	2300      	movlt	r3, #0
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	f083 0301 	eor.w	r3, r3, #1
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d110      	bne.n	800b7d4 <sgen_const+0x4c>
 800b7b2:	edd7 7a00 	vldr	s15, [r7]
 800b7b6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b850 <sgen_const+0xc8>
 800b7ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c2:	bf94      	ite	ls
 800b7c4:	2301      	movls	r3, #1
 800b7c6:	2300      	movhi	r3, #0
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	f083 0301 	eor.w	r3, r3, #1
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <sgen_const+0x54>
 800b7d4:	2154      	movs	r1, #84	; 0x54
 800b7d6:	481f      	ldr	r0, [pc, #124]	; (800b854 <sgen_const+0xcc>)
 800b7d8:	f000 fc25 	bl	800c026 <assert2>

    self->mode = CONST;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	705a      	strb	r2, [r3, #1]
    self->freq = 0;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f04f 0200 	mov.w	r2, #0
 800b7e8:	605a      	str	r2, [r3, #4]
    self->ampl = A;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	683a      	ldr	r2, [r7, #0]
 800b7ee:	609a      	str	r2, [r3, #8]
    self->samples = PS_DAC_BUFF_LEN;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7f6:	615a      	str	r2, [r3, #20]
    self->tim_f = PS_DAC_BUFF_LEN;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a17      	ldr	r2, [pc, #92]	; (800b858 <sgen_const+0xd0>)
 800b7fc:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < PS_DAC_BUFF_LEN; i++)
 800b7fe:	2300      	movs	r3, #0
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	e017      	b.n	800b834 <sgen_const+0xac>
    {
        self->data[i] = (uint16_t)(PS_DAC_MAX_VAL * A);
 800b804:	6838      	ldr	r0, [r7, #0]
 800b806:	f7f4 feb7 	bl	8000578 <__aeabi_f2d>
 800b80a:	a30f      	add	r3, pc, #60	; (adr r3, 800b848 <sgen_const+0xc0>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f7f4 ff0a 	bl	8000628 <__aeabi_dmul>
 800b814:	4603      	mov	r3, r0
 800b816:	460c      	mov	r4, r1
 800b818:	4618      	mov	r0, r3
 800b81a:	4621      	mov	r1, r4
 800b81c:	f7f5 f9dc 	bl	8000bd8 <__aeabi_d2uiz>
 800b820:	4603      	mov	r3, r0
 800b822:	b299      	uxth	r1, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	320c      	adds	r2, #12
 800b82a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < PS_DAC_BUFF_LEN; i++)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3301      	adds	r3, #1
 800b832:	60fb      	str	r3, [r7, #12]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b83a:	dbe3      	blt.n	800b804 <sgen_const+0x7c>
    }
}
 800b83c:	bf00      	nop
 800b83e:	3714      	adds	r7, #20
 800b840:	46bd      	mov	sp, r7
 800b842:	bd90      	pop	{r4, r7, pc}
 800b844:	f3af 8000 	nop.w
 800b848:	00000000 	.word	0x00000000
 800b84c:	40affe00 	.word	0x40affe00
 800b850:	42c80000 	.word	0x42c80000
 800b854:	080152c4 	.word	0x080152c4
 800b858:	447a0000 	.word	0x447a0000
 800b85c:	00000000 	.word	0x00000000

0800b860 <sgen_sine>:

// https://controllerstech.com/dac-in-stm32/
static void sgen_sine(sgen_data_t* self, float A, float f, int N)
{
 800b860:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b864:	b086      	sub	sp, #24
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	ed87 0a02 	vstr	s0, [r7, #8]
 800b86e:	edc7 0a01 	vstr	s1, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
    ASSERT(A >= 0 && A <= 100 && f > 0 && N > 0 && N < PS_DAC_BUFF_LEN);
 800b874:	edd7 7a02 	vldr	s15, [r7, #8]
 800b878:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b880:	bfac      	ite	ge
 800b882:	2301      	movge	r3, #1
 800b884:	2300      	movlt	r3, #0
 800b886:	b2db      	uxtb	r3, r3
 800b888:	f083 0301 	eor.w	r3, r3, #1
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d126      	bne.n	800b8e0 <sgen_sine+0x80>
 800b892:	edd7 7a02 	vldr	s15, [r7, #8]
 800b896:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800ba30 <sgen_sine+0x1d0>
 800b89a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a2:	bf94      	ite	ls
 800b8a4:	2301      	movls	r3, #1
 800b8a6:	2300      	movhi	r3, #0
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	f083 0301 	eor.w	r3, r3, #1
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d115      	bne.n	800b8e0 <sgen_sine+0x80>
 800b8b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800b8b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c0:	bfcc      	ite	gt
 800b8c2:	2301      	movgt	r3, #1
 800b8c4:	2300      	movle	r3, #0
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	f083 0301 	eor.w	r3, r3, #1
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d106      	bne.n	800b8e0 <sgen_sine+0x80>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	dd03      	ble.n	800b8e0 <sgen_sine+0x80>
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8de:	db03      	blt.n	800b8e8 <sgen_sine+0x88>
 800b8e0:	2165      	movs	r1, #101	; 0x65
 800b8e2:	4854      	ldr	r0, [pc, #336]	; (800ba34 <sgen_sine+0x1d4>)
 800b8e4:	f000 fb9f 	bl	800c026 <assert2>

    self->mode = SINE;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	705a      	strb	r2, [r3, #1]
    self->freq = f;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	605a      	str	r2, [r3, #4]
    self->ampl = A;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	609a      	str	r2, [r3, #8]
    self->samples = N;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	683a      	ldr	r2, [r7, #0]
 800b8fe:	615a      	str	r2, [r3, #20]
    self->tim_f = f * N;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	ee07 3a90 	vmov	s15, r3
 800b906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b90a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	edc3 7a03 	vstr	s15, [r3, #12]

    float a = ((A/100.0*PS_DAC_MAX_VAL)/2);
 800b918:	68b8      	ldr	r0, [r7, #8]
 800b91a:	f7f4 fe2d 	bl	8000578 <__aeabi_f2d>
 800b91e:	f04f 0200 	mov.w	r2, #0
 800b922:	4b45      	ldr	r3, [pc, #276]	; (800ba38 <sgen_sine+0x1d8>)
 800b924:	f7f4 ffaa 	bl	800087c <__aeabi_ddiv>
 800b928:	4603      	mov	r3, r0
 800b92a:	460c      	mov	r4, r1
 800b92c:	4618      	mov	r0, r3
 800b92e:	4621      	mov	r1, r4
 800b930:	a33b      	add	r3, pc, #236	; (adr r3, 800ba20 <sgen_sine+0x1c0>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	f7f4 fe77 	bl	8000628 <__aeabi_dmul>
 800b93a:	4603      	mov	r3, r0
 800b93c:	460c      	mov	r4, r1
 800b93e:	4618      	mov	r0, r3
 800b940:	4621      	mov	r1, r4
 800b942:	f04f 0200 	mov.w	r2, #0
 800b946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b94a:	f7f4 ff97 	bl	800087c <__aeabi_ddiv>
 800b94e:	4603      	mov	r3, r0
 800b950:	460c      	mov	r4, r1
 800b952:	4618      	mov	r0, r3
 800b954:	4621      	mov	r1, r4
 800b956:	f7f5 f95f 	bl	8000c18 <__aeabi_d2f>
 800b95a:	4603      	mov	r3, r0
 800b95c:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < N; i++)
 800b95e:	2300      	movs	r3, #0
 800b960:	617b      	str	r3, [r7, #20]
 800b962:	e054      	b.n	800ba0e <sgen_sine+0x1ae>
    {
        self->data[i] = (uint16_t)(a*(sin((float)i*2.0*PI/(float)N) + 1));
 800b964:	6938      	ldr	r0, [r7, #16]
 800b966:	f7f4 fe07 	bl	8000578 <__aeabi_f2d>
 800b96a:	4604      	mov	r4, r0
 800b96c:	460d      	mov	r5, r1
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	ee07 3a90 	vmov	s15, r3
 800b974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b978:	ee17 0a90 	vmov	r0, s15
 800b97c:	f7f4 fdfc 	bl	8000578 <__aeabi_f2d>
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	f7f4 fc9a 	bl	80002bc <__adddf3>
 800b988:	4602      	mov	r2, r0
 800b98a:	460b      	mov	r3, r1
 800b98c:	4610      	mov	r0, r2
 800b98e:	4619      	mov	r1, r3
 800b990:	a325      	add	r3, pc, #148	; (adr r3, 800ba28 <sgen_sine+0x1c8>)
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	f7f4 fe47 	bl	8000628 <__aeabi_dmul>
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	4690      	mov	r8, r2
 800b9a0:	4699      	mov	r9, r3
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	ee07 3a90 	vmov	s15, r3
 800b9a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9ac:	ee17 0a90 	vmov	r0, s15
 800b9b0:	f7f4 fde2 	bl	8000578 <__aeabi_f2d>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	4640      	mov	r0, r8
 800b9ba:	4649      	mov	r1, r9
 800b9bc:	f7f4 ff5e 	bl	800087c <__aeabi_ddiv>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	ec43 2b17 	vmov	d7, r2, r3
 800b9c8:	eeb0 0a47 	vmov.f32	s0, s14
 800b9cc:	eef0 0a67 	vmov.f32	s1, s15
 800b9d0:	f007 fa2a 	bl	8012e28 <sin>
 800b9d4:	ec51 0b10 	vmov	r0, r1, d0
 800b9d8:	f04f 0200 	mov.w	r2, #0
 800b9dc:	4b17      	ldr	r3, [pc, #92]	; (800ba3c <sgen_sine+0x1dc>)
 800b9de:	f7f4 fc6d 	bl	80002bc <__adddf3>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	f7f4 fe1d 	bl	8000628 <__aeabi_dmul>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	f7f5 f8ef 	bl	8000bd8 <__aeabi_d2uiz>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	b299      	uxth	r1, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	320c      	adds	r2, #12
 800ba04:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < N; i++)
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	617b      	str	r3, [r7, #20]
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	dba6      	blt.n	800b964 <sgen_sine+0x104>
    }
}
 800ba16:	bf00      	nop
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ba20:	00000000 	.word	0x00000000
 800ba24:	40affe00 	.word	0x40affe00
 800ba28:	54442eea 	.word	0x54442eea
 800ba2c:	400921fb 	.word	0x400921fb
 800ba30:	42c80000 	.word	0x42c80000
 800ba34:	080152c4 	.word	0x080152c4
 800ba38:	40590000 	.word	0x40590000
 800ba3c:	3ff00000 	.word	0x3ff00000

0800ba40 <sgen_square>:

static void sgen_square(sgen_data_t* self, float A, float f, int N)
{
 800ba40:	b590      	push	{r4, r7, lr}
 800ba42:	b089      	sub	sp, #36	; 0x24
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	ed87 0a02 	vstr	s0, [r7, #8]
 800ba4c:	edc7 0a01 	vstr	s1, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
    ASSERT(A >= 0 && A <= 100 && f > 0 && N > 0 && N < PS_DAC_BUFF_LEN);
 800ba52:	edd7 7a02 	vldr	s15, [r7, #8]
 800ba56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba5e:	bfac      	ite	ge
 800ba60:	2301      	movge	r3, #1
 800ba62:	2300      	movlt	r3, #0
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	f083 0301 	eor.w	r3, r3, #1
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d126      	bne.n	800babe <sgen_square+0x7e>
 800ba70:	edd7 7a02 	vldr	s15, [r7, #8]
 800ba74:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800bb98 <sgen_square+0x158>
 800ba78:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba80:	bf94      	ite	ls
 800ba82:	2301      	movls	r3, #1
 800ba84:	2300      	movhi	r3, #0
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	f083 0301 	eor.w	r3, r3, #1
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d115      	bne.n	800babe <sgen_square+0x7e>
 800ba92:	edd7 7a01 	vldr	s15, [r7, #4]
 800ba96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba9e:	bfcc      	ite	gt
 800baa0:	2301      	movgt	r3, #1
 800baa2:	2300      	movle	r3, #0
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	f083 0301 	eor.w	r3, r3, #1
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b00      	cmp	r3, #0
 800baae:	d106      	bne.n	800babe <sgen_square+0x7e>
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	dd03      	ble.n	800babe <sgen_square+0x7e>
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800babc:	db03      	blt.n	800bac6 <sgen_square+0x86>
 800babe:	2176      	movs	r1, #118	; 0x76
 800bac0:	4836      	ldr	r0, [pc, #216]	; (800bb9c <sgen_square+0x15c>)
 800bac2:	f000 fab0 	bl	800c026 <assert2>

    self->mode = SINE;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2201      	movs	r2, #1
 800baca:	705a      	strb	r2, [r3, #1]
    self->freq = f;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	605a      	str	r2, [r3, #4]
    self->ampl = A;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	68ba      	ldr	r2, [r7, #8]
 800bad6:	609a      	str	r2, [r3, #8]
    self->samples = N;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	615a      	str	r2, [r3, #20]
    self->tim_f = f * N;
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	ee07 3a90 	vmov	s15, r3
 800bae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bae8:	edd7 7a01 	vldr	s15, [r7, #4]
 800baec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	edc3 7a03 	vstr	s15, [r3, #12]

    float a = (A/100.0*PS_DAC_MAX_VAL);
 800baf6:	68b8      	ldr	r0, [r7, #8]
 800baf8:	f7f4 fd3e 	bl	8000578 <__aeabi_f2d>
 800bafc:	f04f 0200 	mov.w	r2, #0
 800bb00:	4b27      	ldr	r3, [pc, #156]	; (800bba0 <sgen_square+0x160>)
 800bb02:	f7f4 febb 	bl	800087c <__aeabi_ddiv>
 800bb06:	4603      	mov	r3, r0
 800bb08:	460c      	mov	r4, r1
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	a320      	add	r3, pc, #128	; (adr r3, 800bb90 <sgen_square+0x150>)
 800bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb14:	f7f4 fd88 	bl	8000628 <__aeabi_dmul>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	4621      	mov	r1, r4
 800bb20:	f7f5 f87a 	bl	8000c18 <__aeabi_d2f>
 800bb24:	4603      	mov	r3, r0
 800bb26:	61bb      	str	r3, [r7, #24]
    int half = N / 2;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	0fda      	lsrs	r2, r3, #31
 800bb2c:	4413      	add	r3, r2
 800bb2e:	105b      	asrs	r3, r3, #1
 800bb30:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < N; i++)
 800bb32:	2300      	movs	r3, #0
 800bb34:	61fb      	str	r3, [r7, #28]
 800bb36:	e020      	b.n	800bb7a <sgen_square+0x13a>
    {
        self->data[i] = (uint16_t)((i >= half) < a ? a : 0);
 800bb38:	69fa      	ldr	r2, [r7, #28]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	db02      	blt.n	800bb46 <sgen_square+0x106>
 800bb40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb44:	e001      	b.n	800bb4a <sgen_square+0x10a>
 800bb46:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800bba4 <sgen_square+0x164>
 800bb4a:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb56:	d507      	bpl.n	800bb68 <sgen_square+0x128>
 800bb58:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb60:	ee17 3a90 	vmov	r3, s15
 800bb64:	b299      	uxth	r1, r3
 800bb66:	e000      	b.n	800bb6a <sgen_square+0x12a>
 800bb68:	2100      	movs	r1, #0
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	69fa      	ldr	r2, [r7, #28]
 800bb6e:	320c      	adds	r2, #12
 800bb70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < N; i++)
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	3301      	adds	r3, #1
 800bb78:	61fb      	str	r3, [r7, #28]
 800bb7a:	69fa      	ldr	r2, [r7, #28]
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	dbda      	blt.n	800bb38 <sgen_square+0xf8>
    }
}
 800bb82:	bf00      	nop
 800bb84:	3724      	adds	r7, #36	; 0x24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd90      	pop	{r4, r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	f3af 8000 	nop.w
 800bb90:	00000000 	.word	0x00000000
 800bb94:	40affe00 	.word	0x40affe00
 800bb98:	42c80000 	.word	0x42c80000
 800bb9c:	080152c4 	.word	0x080152c4
 800bba0:	40590000 	.word	0x40590000
 800bba4:	00000000 	.word	0x00000000

0800bba8 <sgen_triangle>:

static void sgen_triangle(sgen_data_t* self, float A, float f, int N)
{
 800bba8:	b590      	push	{r4, r7, lr}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	ed87 0a02 	vstr	s0, [r7, #8]
 800bbb4:	edc7 0a01 	vstr	s1, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
    ASSERT(A >= 0 && A <= 100 && f > 0 && N > 0 && N < PS_DAC_BUFF_LEN);
 800bbba:	edd7 7a02 	vldr	s15, [r7, #8]
 800bbbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc6:	bfac      	ite	ge
 800bbc8:	2301      	movge	r3, #1
 800bbca:	2300      	movlt	r3, #0
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	f083 0301 	eor.w	r3, r3, #1
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d126      	bne.n	800bc26 <sgen_triangle+0x7e>
 800bbd8:	edd7 7a02 	vldr	s15, [r7, #8]
 800bbdc:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800bd18 <sgen_triangle+0x170>
 800bbe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe8:	bf94      	ite	ls
 800bbea:	2301      	movls	r3, #1
 800bbec:	2300      	movhi	r3, #0
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	f083 0301 	eor.w	r3, r3, #1
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d115      	bne.n	800bc26 <sgen_triangle+0x7e>
 800bbfa:	edd7 7a01 	vldr	s15, [r7, #4]
 800bbfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc06:	bfcc      	ite	gt
 800bc08:	2301      	movgt	r3, #1
 800bc0a:	2300      	movle	r3, #0
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	f083 0301 	eor.w	r3, r3, #1
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d106      	bne.n	800bc26 <sgen_triangle+0x7e>
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	dd03      	ble.n	800bc26 <sgen_triangle+0x7e>
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc24:	db03      	blt.n	800bc2e <sgen_triangle+0x86>
 800bc26:	2188      	movs	r1, #136	; 0x88
 800bc28:	483c      	ldr	r0, [pc, #240]	; (800bd1c <sgen_triangle+0x174>)
 800bc2a:	f000 f9fc 	bl	800c026 <assert2>

    self->mode = SINE;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2201      	movs	r2, #1
 800bc32:	705a      	strb	r2, [r3, #1]
    self->freq = f;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	605a      	str	r2, [r3, #4]
    self->ampl = A;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	609a      	str	r2, [r3, #8]
    self->samples = N;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	683a      	ldr	r2, [r7, #0]
 800bc44:	615a      	str	r2, [r3, #20]
    self->tim_f = f * N;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	ee07 3a90 	vmov	s15, r3
 800bc4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc50:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	edc3 7a03 	vstr	s15, [r3, #12]
    
    float a = (A/100.0*PS_DAC_MAX_VAL);
 800bc5e:	68b8      	ldr	r0, [r7, #8]
 800bc60:	f7f4 fc8a 	bl	8000578 <__aeabi_f2d>
 800bc64:	f04f 0200 	mov.w	r2, #0
 800bc68:	4b2d      	ldr	r3, [pc, #180]	; (800bd20 <sgen_triangle+0x178>)
 800bc6a:	f7f4 fe07 	bl	800087c <__aeabi_ddiv>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	460c      	mov	r4, r1
 800bc72:	4618      	mov	r0, r3
 800bc74:	4621      	mov	r1, r4
 800bc76:	a326      	add	r3, pc, #152	; (adr r3, 800bd10 <sgen_triangle+0x168>)
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	f7f4 fcd4 	bl	8000628 <__aeabi_dmul>
 800bc80:	4603      	mov	r3, r0
 800bc82:	460c      	mov	r4, r1
 800bc84:	4618      	mov	r0, r3
 800bc86:	4621      	mov	r1, r4
 800bc88:	f7f4 ffc6 	bl	8000c18 <__aeabi_d2f>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < N; i++)
 800bc90:	2300      	movs	r3, #0
 800bc92:	617b      	str	r3, [r7, #20]
 800bc94:	e033      	b.n	800bcfe <sgen_triangle+0x156>
    {
        self->data[i] = (uint16_t)(a - abs(i % (uint16_t)(2*a) - a));
 800bc96:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bc9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bca2:	ee17 3a90 	vmov	r3, s15
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	461a      	mov	r2, r3
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	fb93 f1f2 	sdiv	r1, r3, r2
 800bcb0:	fb02 f201 	mul.w	r2, r2, r1
 800bcb4:	1a9b      	subs	r3, r3, r2
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bcbe:	edd7 7a04 	vldr	s15, [r7, #16]
 800bcc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcca:	ee17 3a90 	vmov	r3, s15
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	bfb8      	it	lt
 800bcd2:	425b      	neglt	r3, r3
 800bcd4:	ee07 3a90 	vmov	s15, r3
 800bcd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcdc:	ed97 7a04 	vldr	s14, [r7, #16]
 800bce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bce8:	ee17 3a90 	vmov	r3, s15
 800bcec:	b299      	uxth	r1, r3
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	697a      	ldr	r2, [r7, #20]
 800bcf2:	320c      	adds	r2, #12
 800bcf4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < N; i++)
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	617b      	str	r3, [r7, #20]
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	dbc7      	blt.n	800bc96 <sgen_triangle+0xee>
    }
}
 800bd06:	bf00      	nop
 800bd08:	371c      	adds	r7, #28
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd90      	pop	{r4, r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	00000000 	.word	0x00000000
 800bd14:	40affe00 	.word	0x40affe00
 800bd18:	42c80000 	.word	0x42c80000
 800bd1c:	080152c4 	.word	0x080152c4
 800bd20:	40590000 	.word	0x40590000
 800bd24:	00000000 	.word	0x00000000

0800bd28 <sgen_saw>:

static void sgen_saw(sgen_data_t* self, float A, float f, int N)
{
 800bd28:	b590      	push	{r4, r7, lr}
 800bd2a:	b089      	sub	sp, #36	; 0x24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	ed87 0a02 	vstr	s0, [r7, #8]
 800bd34:	edc7 0a01 	vstr	s1, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
    ASSERT(A >= 0 && A <= 100 && f > 0 && N > 0 && N < PS_DAC_BUFF_LEN);
 800bd3a:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd46:	bfac      	ite	ge
 800bd48:	2301      	movge	r3, #1
 800bd4a:	2300      	movlt	r3, #0
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	f083 0301 	eor.w	r3, r3, #1
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d126      	bne.n	800bda6 <sgen_saw+0x7e>
 800bd58:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd5c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800be78 <sgen_saw+0x150>
 800bd60:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd68:	bf94      	ite	ls
 800bd6a:	2301      	movls	r3, #1
 800bd6c:	2300      	movhi	r3, #0
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	f083 0301 	eor.w	r3, r3, #1
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d115      	bne.n	800bda6 <sgen_saw+0x7e>
 800bd7a:	edd7 7a01 	vldr	s15, [r7, #4]
 800bd7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd86:	bfcc      	ite	gt
 800bd88:	2301      	movgt	r3, #1
 800bd8a:	2300      	movle	r3, #0
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	f083 0301 	eor.w	r3, r3, #1
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d106      	bne.n	800bda6 <sgen_saw+0x7e>
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	dd03      	ble.n	800bda6 <sgen_saw+0x7e>
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bda4:	db03      	blt.n	800bdae <sgen_saw+0x86>
 800bda6:	2199      	movs	r1, #153	; 0x99
 800bda8:	4834      	ldr	r0, [pc, #208]	; (800be7c <sgen_saw+0x154>)
 800bdaa:	f000 f93c 	bl	800c026 <assert2>

    self->mode = SINE;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	705a      	strb	r2, [r3, #1]
    self->freq = f;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	605a      	str	r2, [r3, #4]
    self->ampl = A;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	609a      	str	r2, [r3, #8]
    self->samples = N;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	615a      	str	r2, [r3, #20]
    self->tim_f = f * N;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	ee07 3a90 	vmov	s15, r3
 800bdcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bdd0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bdd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	edc3 7a03 	vstr	s15, [r3, #12]

    float a = (A/100.0*PS_DAC_MAX_VAL);
 800bdde:	68b8      	ldr	r0, [r7, #8]
 800bde0:	f7f4 fbca 	bl	8000578 <__aeabi_f2d>
 800bde4:	f04f 0200 	mov.w	r2, #0
 800bde8:	4b25      	ldr	r3, [pc, #148]	; (800be80 <sgen_saw+0x158>)
 800bdea:	f7f4 fd47 	bl	800087c <__aeabi_ddiv>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	460c      	mov	r4, r1
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	a31e      	add	r3, pc, #120	; (adr r3, 800be70 <sgen_saw+0x148>)
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f7f4 fc14 	bl	8000628 <__aeabi_dmul>
 800be00:	4603      	mov	r3, r0
 800be02:	460c      	mov	r4, r1
 800be04:	4618      	mov	r0, r3
 800be06:	4621      	mov	r1, r4
 800be08:	f7f4 ff06 	bl	8000c18 <__aeabi_d2f>
 800be0c:	4603      	mov	r3, r0
 800be0e:	617b      	str	r3, [r7, #20]
    float inc = a / (float)N;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	ee07 3a90 	vmov	s15, r3
 800be16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be1a:	edd7 6a05 	vldr	s13, [r7, #20]
 800be1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be22:	edc7 7a04 	vstr	s15, [r7, #16]
    float _a;
    for (int i = 0; i < N; i++)
 800be26:	2300      	movs	r3, #0
 800be28:	61bb      	str	r3, [r7, #24]
 800be2a:	e016      	b.n	800be5a <sgen_saw+0x132>
    {
        self->data[i] = (uint16_t)(_a);
 800be2c:	edd7 7a07 	vldr	s15, [r7, #28]
 800be30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be34:	ee17 3a90 	vmov	r3, s15
 800be38:	b299      	uxth	r1, r3
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	69ba      	ldr	r2, [r7, #24]
 800be3e:	320c      	adds	r2, #12
 800be40:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        _a += inc;
 800be44:	ed97 7a07 	vldr	s14, [r7, #28]
 800be48:	edd7 7a04 	vldr	s15, [r7, #16]
 800be4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be50:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < N; i++)
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	3301      	adds	r3, #1
 800be58:	61bb      	str	r3, [r7, #24]
 800be5a:	69ba      	ldr	r2, [r7, #24]
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	429a      	cmp	r2, r3
 800be60:	dbe4      	blt.n	800be2c <sgen_saw+0x104>
    }
}
 800be62:	bf00      	nop
 800be64:	3724      	adds	r7, #36	; 0x24
 800be66:	46bd      	mov	sp, r7
 800be68:	bd90      	pop	{r4, r7, pc}
 800be6a:	bf00      	nop
 800be6c:	f3af 8000 	nop.w
 800be70:	00000000 	.word	0x00000000
 800be74:	40affe00 	.word	0x40affe00
 800be78:	42c80000 	.word	0x42c80000
 800be7c:	080152c4 	.word	0x080152c4
 800be80:	40590000 	.word	0x40590000
 800be84:	00000000 	.word	0x00000000

0800be88 <sgen_rand>:

static void sgen_rand(sgen_data_t* self, float A, float f, int N)
{
 800be88:	b590      	push	{r4, r7, lr}
 800be8a:	b089      	sub	sp, #36	; 0x24
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	ed87 0a02 	vstr	s0, [r7, #8]
 800be94:	edc7 0a01 	vstr	s1, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
    ASSERT(A >= 0 && A <= 100 && f > 0 && N > 0 && N < PS_DAC_BUFF_LEN);
 800be9a:	edd7 7a02 	vldr	s15, [r7, #8]
 800be9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea6:	bfac      	ite	ge
 800bea8:	2301      	movge	r3, #1
 800beaa:	2300      	movlt	r3, #0
 800beac:	b2db      	uxtb	r3, r3
 800beae:	f083 0301 	eor.w	r3, r3, #1
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d126      	bne.n	800bf06 <sgen_rand+0x7e>
 800beb8:	edd7 7a02 	vldr	s15, [r7, #8]
 800bebc:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800bfc8 <sgen_rand+0x140>
 800bec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec8:	bf94      	ite	ls
 800beca:	2301      	movls	r3, #1
 800becc:	2300      	movhi	r3, #0
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	f083 0301 	eor.w	r3, r3, #1
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d115      	bne.n	800bf06 <sgen_rand+0x7e>
 800beda:	edd7 7a01 	vldr	s15, [r7, #4]
 800bede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee6:	bfcc      	ite	gt
 800bee8:	2301      	movgt	r3, #1
 800beea:	2300      	movle	r3, #0
 800beec:	b2db      	uxtb	r3, r3
 800beee:	f083 0301 	eor.w	r3, r3, #1
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d106      	bne.n	800bf06 <sgen_rand+0x7e>
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	dd03      	ble.n	800bf06 <sgen_rand+0x7e>
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf04:	db03      	blt.n	800bf0e <sgen_rand+0x86>
 800bf06:	21ad      	movs	r1, #173	; 0xad
 800bf08:	4830      	ldr	r0, [pc, #192]	; (800bfcc <sgen_rand+0x144>)
 800bf0a:	f000 f88c 	bl	800c026 <assert2>

    self->mode = SINE;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2201      	movs	r2, #1
 800bf12:	705a      	strb	r2, [r3, #1]
    self->freq = f;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	605a      	str	r2, [r3, #4]
    self->ampl = A;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	609a      	str	r2, [r3, #8]
    self->samples = N;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	683a      	ldr	r2, [r7, #0]
 800bf24:	615a      	str	r2, [r3, #20]
    self->tim_f = f * N;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	ee07 3a90 	vmov	s15, r3
 800bf2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bf30:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	edc3 7a03 	vstr	s15, [r3, #12]

    int m_w = 1;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	61bb      	str	r3, [r7, #24]
    int m_z = 2; 
 800bf42:	2302      	movs	r3, #2
 800bf44:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < N; i++)
 800bf46:	2300      	movs	r3, #0
 800bf48:	61fb      	str	r3, [r7, #28]
 800bf4a:	e02d      	b.n	800bfa8 <sgen_rand+0x120>
    {
        self->data[i] = (uint16_t)(((float)get_rnd(&m_w, &m_z) / 2147483647.0) * PS_DAC_MAX_VAL);
 800bf4c:	f107 0214 	add.w	r2, r7, #20
 800bf50:	f107 0318 	add.w	r3, r7, #24
 800bf54:	4611      	mov	r1, r2
 800bf56:	4618      	mov	r0, r3
 800bf58:	f000 f83a 	bl	800bfd0 <get_rnd>
 800bf5c:	ee07 0a90 	vmov	s15, r0
 800bf60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf64:	ee17 0a90 	vmov	r0, s15
 800bf68:	f7f4 fb06 	bl	8000578 <__aeabi_f2d>
 800bf6c:	a312      	add	r3, pc, #72	; (adr r3, 800bfb8 <sgen_rand+0x130>)
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	f7f4 fc83 	bl	800087c <__aeabi_ddiv>
 800bf76:	4603      	mov	r3, r0
 800bf78:	460c      	mov	r4, r1
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	a310      	add	r3, pc, #64	; (adr r3, 800bfc0 <sgen_rand+0x138>)
 800bf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf84:	f7f4 fb50 	bl	8000628 <__aeabi_dmul>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	4621      	mov	r1, r4
 800bf90:	f7f4 fe22 	bl	8000bd8 <__aeabi_d2uiz>
 800bf94:	4603      	mov	r3, r0
 800bf96:	b299      	uxth	r1, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	69fa      	ldr	r2, [r7, #28]
 800bf9c:	320c      	adds	r2, #12
 800bf9e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < N; i++)
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	61fb      	str	r3, [r7, #28]
 800bfa8:	69fa      	ldr	r2, [r7, #28]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	dbcd      	blt.n	800bf4c <sgen_rand+0xc4>
    }
}
 800bfb0:	bf00      	nop
 800bfb2:	3724      	adds	r7, #36	; 0x24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd90      	pop	{r4, r7, pc}
 800bfb8:	ffc00000 	.word	0xffc00000
 800bfbc:	41dfffff 	.word	0x41dfffff
 800bfc0:	00000000 	.word	0x00000000
 800bfc4:	40affe00 	.word	0x40affe00
 800bfc8:	42c80000 	.word	0x42c80000
 800bfcc:	080152c4 	.word	0x080152c4

0800bfd0 <get_rnd>:

static int get_rnd(int* m_w, int* m_z)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
    *m_z = 36969L * (*m_z & 65535L) + (*m_z >> 16);
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	f249 0269 	movw	r2, #36969	; 0x9069
 800bfe4:	fb02 f203 	mul.w	r2, r2, r3
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	141b      	asrs	r3, r3, #16
 800bfee:	441a      	add	r2, r3
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	601a      	str	r2, [r3, #0]
    *m_w = 18000L * (*m_w & 65535L) + (*m_w >> 16);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	f244 6250 	movw	r2, #18000	; 0x4650
 800bffe:	fb02 f203 	mul.w	r2, r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	141b      	asrs	r3, r3, #16
 800c008:	441a      	add	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	601a      	str	r2, [r3, #0]
    return (*m_z << 16) + *m_w;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	041a      	lsls	r2, r3, #16
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4413      	add	r3, r2
} 
 800c01a:	4618      	mov	r0, r3
 800c01c:	370c      	adds	r7, #12
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr

0800c026 <assert2>:

#include "utility.h"
#include "cfg.h"

void assert2(const char *file, uint32_t line)
{
 800c026:	b480      	push	{r7}
 800c028:	b083      	sub	sp, #12
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
 800c02e:	6039      	str	r1, [r7, #0]
    while(1);
 800c030:	e7fe      	b.n	800c030 <assert2+0xa>
	...

0800c034 <get_avg_from_circ>:
    //__asm("bkpt 3");
}

void get_avg_from_circ(int last_idx, int ch_num, int avg_num, void* buff, int daq_bits, float* v1, float* v2, float* v3, float* v4, float* v5)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b088      	sub	sp, #32
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
 800c040:	603b      	str	r3, [r7, #0]
    int total = ch_num * avg_num;
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	fb02 f303 	mul.w	r3, r2, r3
 800c04a:	613b      	str	r3, [r7, #16]
    ASSERT(v1 != NULL && total > 0 && buff != NULL);
 800c04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d005      	beq.n	800c05e <get_avg_from_circ+0x2a>
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	dd02      	ble.n	800c05e <get_avg_from_circ+0x2a>
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d103      	bne.n	800c066 <get_avg_from_circ+0x32>
 800c05e:	2117      	movs	r1, #23
 800c060:	4876      	ldr	r0, [pc, #472]	; (800c23c <get_avg_from_circ+0x208>)
 800c062:	f7ff ffe0 	bl	800c026 <assert2>

    for (int i = last_idx, j = 0; j < total; j++, i++)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	61fb      	str	r3, [r7, #28]
 800c06a:	2300      	movs	r3, #0
 800c06c:	61bb      	str	r3, [r7, #24]
 800c06e:	e08f      	b.n	800c190 <get_avg_from_circ+0x15c>
    {
        if (i >= total)
 800c070:	69fa      	ldr	r2, [r7, #28]
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	429a      	cmp	r2, r3
 800c076:	db01      	blt.n	800c07c <get_avg_from_circ+0x48>
            i = 0;
 800c078:	2300      	movs	r3, #0
 800c07a:	61fb      	str	r3, [r7, #28]

        float val;
        if (daq_bits == 12)
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	2b0c      	cmp	r3, #12
 800c080:	d10c      	bne.n	800c09c <get_avg_from_circ+0x68>
            val = (float)(*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	005b      	lsls	r3, r3, #1
 800c086:	461a      	mov	r2, r3
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	4413      	add	r3, r2
 800c08c:	881b      	ldrh	r3, [r3, #0]
 800c08e:	ee07 3a90 	vmov	s15, r3
 800c092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c096:	edc7 7a05 	vstr	s15, [r7, #20]
 800c09a:	e009      	b.n	800c0b0 <get_avg_from_circ+0x7c>
        else
            val = (float)(((uint8_t*)buff)[i]);
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	ee07 3a90 	vmov	s15, r3
 800c0a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ac:	edc7 7a05 	vstr	s15, [r7, #20]

        if (i % ch_num == 0)
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	68ba      	ldr	r2, [r7, #8]
 800c0b4:	fb93 f2f2 	sdiv	r2, r3, r2
 800c0b8:	68b9      	ldr	r1, [r7, #8]
 800c0ba:	fb01 f202 	mul.w	r2, r1, r2
 800c0be:	1a9b      	subs	r3, r3, r2
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10a      	bne.n	800c0da <get_avg_from_circ+0xa6>
            *v1 += val;
 800c0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c6:	ed93 7a00 	vldr	s14, [r3]
 800c0ca:	edd7 7a05 	vldr	s15, [r7, #20]
 800c0ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d4:	edc3 7a00 	vstr	s15, [r3]
 800c0d8:	e054      	b.n	800c184 <get_avg_from_circ+0x150>
        else if (ch_num > 1 && i % ch_num == 1)
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	dd14      	ble.n	800c10a <get_avg_from_circ+0xd6>
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	fb93 f2f2 	sdiv	r2, r3, r2
 800c0e8:	68b9      	ldr	r1, [r7, #8]
 800c0ea:	fb01 f202 	mul.w	r2, r1, r2
 800c0ee:	1a9b      	subs	r3, r3, r2
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d10a      	bne.n	800c10a <get_avg_from_circ+0xd6>
            *v2 += val;
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f6:	ed93 7a00 	vldr	s14, [r3]
 800c0fa:	edd7 7a05 	vldr	s15, [r7, #20]
 800c0fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	edc3 7a00 	vstr	s15, [r3]
 800c108:	e03c      	b.n	800c184 <get_avg_from_circ+0x150>
        else if (ch_num > 2 && i % ch_num == 2)
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	2b02      	cmp	r3, #2
 800c10e:	dd14      	ble.n	800c13a <get_avg_from_circ+0x106>
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	fb93 f2f2 	sdiv	r2, r3, r2
 800c118:	68b9      	ldr	r1, [r7, #8]
 800c11a:	fb01 f202 	mul.w	r2, r1, r2
 800c11e:	1a9b      	subs	r3, r3, r2
 800c120:	2b02      	cmp	r3, #2
 800c122:	d10a      	bne.n	800c13a <get_avg_from_circ+0x106>
            *v3 += val;
 800c124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c126:	ed93 7a00 	vldr	s14, [r3]
 800c12a:	edd7 7a05 	vldr	s15, [r7, #20]
 800c12e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c134:	edc3 7a00 	vstr	s15, [r3]
 800c138:	e024      	b.n	800c184 <get_avg_from_circ+0x150>
        else if (ch_num > 3 && i % ch_num == 3)
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2b03      	cmp	r3, #3
 800c13e:	dd14      	ble.n	800c16a <get_avg_from_circ+0x136>
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	fb93 f2f2 	sdiv	r2, r3, r2
 800c148:	68b9      	ldr	r1, [r7, #8]
 800c14a:	fb01 f202 	mul.w	r2, r1, r2
 800c14e:	1a9b      	subs	r3, r3, r2
 800c150:	2b03      	cmp	r3, #3
 800c152:	d10a      	bne.n	800c16a <get_avg_from_circ+0x136>
            *v4 += val;
 800c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c156:	ed93 7a00 	vldr	s14, [r3]
 800c15a:	edd7 7a05 	vldr	s15, [r7, #20]
 800c15e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c164:	edc3 7a00 	vstr	s15, [r3]
 800c168:	e00c      	b.n	800c184 <get_avg_from_circ+0x150>
        else if (ch_num > 4)  // && i % ch_num == 4)
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	2b04      	cmp	r3, #4
 800c16e:	dd09      	ble.n	800c184 <get_avg_from_circ+0x150>
            *v5 += val;
 800c170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c172:	ed93 7a00 	vldr	s14, [r3]
 800c176:	edd7 7a05 	vldr	s15, [r7, #20]
 800c17a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c180:	edc3 7a00 	vstr	s15, [r3]
    for (int i = last_idx, j = 0; j < total; j++, i++)
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	3301      	adds	r3, #1
 800c188:	61bb      	str	r3, [r7, #24]
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	3301      	adds	r3, #1
 800c18e:	61fb      	str	r3, [r7, #28]
 800c190:	69ba      	ldr	r2, [r7, #24]
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	429a      	cmp	r2, r3
 800c196:	f6ff af6b 	blt.w	800c070 <get_avg_from_circ+0x3c>
    }
    *v1 /= avg_num;
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	edd3 6a00 	vldr	s13, [r3]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	ee07 3a90 	vmov	s15, r3
 800c1a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c1aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b0:	edc3 7a00 	vstr	s15, [r3]
    if (v2 != NULL) *v2 /= avg_num;
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00c      	beq.n	800c1d4 <get_avg_from_circ+0x1a0>
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	edd3 6a00 	vldr	s13, [r3]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	ee07 3a90 	vmov	s15, r3
 800c1c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c1ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d0:	edc3 7a00 	vstr	s15, [r3]
    if (v3 != NULL) *v3 /= avg_num;
 800c1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00c      	beq.n	800c1f4 <get_avg_from_circ+0x1c0>
 800c1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1dc:	edd3 6a00 	vldr	s13, [r3]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	ee07 3a90 	vmov	s15, r3
 800c1e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c1ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f0:	edc3 7a00 	vstr	s15, [r3]
    if (v4 != NULL) *v4 /= avg_num;
 800c1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00c      	beq.n	800c214 <get_avg_from_circ+0x1e0>
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fc:	edd3 6a00 	vldr	s13, [r3]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	ee07 3a90 	vmov	s15, r3
 800c206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c20a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c210:	edc3 7a00 	vstr	s15, [r3]
    if (v5 != NULL) *v5 /= avg_num;
 800c214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00c      	beq.n	800c234 <get_avg_from_circ+0x200>
 800c21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c21c:	edd3 6a00 	vldr	s13, [r3]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	ee07 3a90 	vmov	s15, r3
 800c226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c22a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c230:	edc3 7a00 	vstr	s15, [r3]
}
 800c234:	bf00      	nop
 800c236:	3720      	adds	r7, #32
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	080152f0 	.word	0x080152f0

0800c240 <get_1ch_from_circ>:
    }
    return ret /= avg_num;
}

int get_1ch_from_circ(int from, int total, int bufflen, int ch, int ch_num, int daq_bits, float vcc, float vref_cal, void* buff, uint8_t* out, int* idx)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b08e      	sub	sp, #56	; 0x38
 800c244:	af00      	add	r7, sp, #0
 800c246:	61f8      	str	r0, [r7, #28]
 800c248:	61b9      	str	r1, [r7, #24]
 800c24a:	617a      	str	r2, [r7, #20]
 800c24c:	613b      	str	r3, [r7, #16]
 800c24e:	ed87 0a03 	vstr	s0, [r7, #12]
 800c252:	edc7 0a02 	vstr	s1, [r7, #8]
    ASSERT(ch > 0 && ch_num > 0 && total > 0 && buff != NULL);
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	dd08      	ble.n	800c26e <get_1ch_from_circ+0x2e>
 800c25c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c25e:	2b00      	cmp	r3, #0
 800c260:	dd05      	ble.n	800c26e <get_1ch_from_circ+0x2e>
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	2b00      	cmp	r3, #0
 800c266:	dd02      	ble.n	800c26e <get_1ch_from_circ+0x2e>
 800c268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d103      	bne.n	800c276 <get_1ch_from_circ+0x36>
 800c26e:	2162      	movs	r1, #98	; 0x62
 800c270:	4848      	ldr	r0, [pc, #288]	; (800c394 <get_1ch_from_circ+0x154>)
 800c272:	f7ff fed8 	bl	800c026 <assert2>

    int found = 0;
 800c276:	2300      	movs	r3, #0
 800c278:	637b      	str	r3, [r7, #52]	; 0x34

    for (int k = 0, i = from; k < total; k++, i++)
 800c27a:	2300      	movs	r3, #0
 800c27c:	633b      	str	r3, [r7, #48]	; 0x30
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c282:	e07d      	b.n	800c380 <get_1ch_from_circ+0x140>
    {
        if (i >= bufflen)
 800c284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	429a      	cmp	r2, r3
 800c28a:	db01      	blt.n	800c290 <get_1ch_from_circ+0x50>
            i = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (i % ch_num == ch - 1)
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c294:	fb93 f2f2 	sdiv	r2, r3, r2
 800c298:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c29a:	fb01 f202 	mul.w	r2, r1, r2
 800c29e:	1a9a      	subs	r2, r3, r2
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d165      	bne.n	800c374 <get_1ch_from_circ+0x134>
        {
            found++;
 800c2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	637b      	str	r3, [r7, #52]	; 0x34
            float val = 0;
 800c2ae:	f04f 0300 	mov.w	r3, #0
 800c2b2:	62bb      	str	r3, [r7, #40]	; 0x28
            if (daq_bits == 12)
 800c2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2b6:	2b0c      	cmp	r3, #12
 800c2b8:	d136      	bne.n	800c328 <get_1ch_from_circ+0xe8>
            {
                val = (float) (*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 800c2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	461a      	mov	r2, r3
 800c2c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2c2:	4413      	add	r3, r2
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	ee07 3a90 	vmov	s15, r3
 800c2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                uint16_t ret = (uint16_t)(vref_cal * (val / vcc)); // 0.8 mV precision rounded (output in mV*10)
 800c2d2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c2d6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2de:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2ea:	ee17 3a90 	vmov	r3, s15
 800c2ee:	84bb      	strh	r3, [r7, #36]	; 0x24
                out[(*idx)++] = LO_BYTE16(ret);
 800c2f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	1c59      	adds	r1, r3, #1
 800c2f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2f8:	6011      	str	r1, [r2, #0]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2fe:	4413      	add	r3, r2
 800c300:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c302:	b2d2      	uxtb	r2, r2
 800c304:	701a      	strb	r2, [r3, #0]
                out[(*idx)++] = HI_BYTE16(ret);
 800c306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c308:	0a1b      	lsrs	r3, r3, #8
 800c30a:	b298      	uxth	r0, r3
 800c30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	1c59      	adds	r1, r3, #1
 800c312:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c314:	6011      	str	r1, [r2, #0]
 800c316:	461a      	mov	r2, r3
 800c318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c31a:	4413      	add	r3, r2
 800c31c:	b2c2      	uxtb	r2, r0
 800c31e:	701a      	strb	r2, [r3, #0]
                found++;
 800c320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c322:	3301      	adds	r3, #1
 800c324:	637b      	str	r3, [r7, #52]	; 0x34
 800c326:	e025      	b.n	800c374 <get_1ch_from_circ+0x134>
            }
            else // (daq_bits == 8)
            {
                val = (float)(((uint8_t*)buff)[i]);
 800c328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c32c:	4413      	add	r3, r2
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	ee07 3a90 	vmov	s15, r3
 800c334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c338:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                uint8_t ret = (uint8_t)(vref_cal * (val / vcc));   // 13 mV precision rounded (output in mV/10)
 800c33c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c340:	edd7 7a03 	vldr	s15, [r7, #12]
 800c344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c348:	edd7 7a02 	vldr	s15, [r7, #8]
 800c34c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c354:	edc7 7a01 	vstr	s15, [r7, #4]
 800c358:	793b      	ldrb	r3, [r7, #4]
 800c35a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                out[(*idx)++] = ret;
 800c35e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	1c59      	adds	r1, r3, #1
 800c364:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c366:	6011      	str	r1, [r2, #0]
 800c368:	461a      	mov	r2, r3
 800c36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c36c:	4413      	add	r3, r2
 800c36e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c372:	701a      	strb	r2, [r3, #0]
    for (int k = 0, i = from; k < total; k++, i++)
 800c374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c376:	3301      	adds	r3, #1
 800c378:	633b      	str	r3, [r7, #48]	; 0x30
 800c37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37c:	3301      	adds	r3, #1
 800c37e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	429a      	cmp	r2, r3
 800c386:	f6ff af7d 	blt.w	800c284 <get_1ch_from_circ+0x44>
            }
        }
    }
    return found;
 800c38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3738      	adds	r7, #56	; 0x38
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	080152f0 	.word	0x080152f0

0800c398 <get_freq>:

// freq_want = freq_osc/((prescaler+1)*(reload+1))
// (prescaler+1)*(reload+1) = freq_osc/freq_want
float get_freq(int* prescaler, int* reload, int max_reload, int freq_osc, int freq_want)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b086      	sub	sp, #24
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
 800c3a4:	603b      	str	r3, [r7, #0]
    ASSERT(freq_osc >= freq_want && freq_want > 0 && freq_osc > 0 && max_reload > 0);
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	6a3b      	ldr	r3, [r7, #32]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	db08      	blt.n	800c3c0 <get_freq+0x28>
 800c3ae:	6a3b      	ldr	r3, [r7, #32]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	dd05      	ble.n	800c3c0 <get_freq+0x28>
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	dd02      	ble.n	800c3c0 <get_freq+0x28>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	dc03      	bgt.n	800c3c8 <get_freq+0x30>
 800c3c0:	2186      	movs	r1, #134	; 0x86
 800c3c2:	4829      	ldr	r0, [pc, #164]	; (800c468 <get_freq+0xd0>)
 800c3c4:	f7ff fe2f 	bl	800c026 <assert2>
    *prescaler = 0;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	601a      	str	r2, [r3, #0]

    do
    {
        *reload = (int)((float)freq_osc / (float)(*prescaler + 1) / (float)freq_want) - 1; // TODO check negative reload?
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	ee07 3a90 	vmov	s15, r3
 800c3d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	ee07 3a90 	vmov	s15, r3
 800c3e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c3ea:	6a3b      	ldr	r3, [r7, #32]
 800c3ec:	ee07 3a90 	vmov	s15, r3
 800c3f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c3f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3fc:	ee17 3a90 	vmov	r3, s15
 800c400:	1e5a      	subs	r2, r3, #1
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	601a      	str	r2, [r3, #0]
        if (*reload > max_reload)
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	da04      	bge.n	800c41a <get_freq+0x82>
            (*prescaler)++;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	1c5a      	adds	r2, r3, #1
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	601a      	str	r2, [r3, #0]
    }
    while (*reload > max_reload);
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	429a      	cmp	r2, r3
 800c422:	dbd4      	blt.n	800c3ce <get_freq+0x36>

    float ret  = (float)freq_osc / ((float)(*prescaler + 1) * (float)(*reload + 1));
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	ee07 3a90 	vmov	s15, r3
 800c42a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3301      	adds	r3, #1
 800c434:	ee07 3a90 	vmov	s15, r3
 800c438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3301      	adds	r3, #1
 800c442:	ee07 3a90 	vmov	s15, r3
 800c446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c44a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c44e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c452:	edc7 7a05 	vstr	s15, [r7, #20]
    return ret;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	ee07 3a90 	vmov	s15, r3
}
 800c45c:	eeb0 0a67 	vmov.f32	s0, s15
 800c460:	3718      	adds	r7, #24
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	080152f0 	.word	0x080152f0
 800c46c:	00000000 	.word	0x00000000

0800c470 <sprint_fast>:

/* Author: Jakub Parez
 * Descr:  ultra fast float sprintf
 */
void sprint_fast(char* s, const char* format, float fVal, int prec)
{
 800c470:	b5b0      	push	{r4, r5, r7, lr}
 800c472:	b0bc      	sub	sp, #240	; 0xf0
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c47e:	603a      	str	r2, [r7, #0]
    char result[100] = { '\0' };
 800c480:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c484:	2264      	movs	r2, #100	; 0x64
 800c486:	2100      	movs	r1, #0
 800c488:	4618      	mov	r0, r3
 800c48a:	f005 fddf 	bl	801204c <memset>
    char result_rev[100] = { '\0' };
 800c48e:	f107 0314 	add.w	r3, r7, #20
 800c492:	2264      	movs	r2, #100	; 0x64
 800c494:	2100      	movs	r1, #0
 800c496:	4618      	mov	r0, r3
 800c498:	f005 fdd8 	bl	801204c <memset>
    int dVal, dec, i, j, k;

    if (prec <= 0)
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	dc13      	bgt.n	800c4ca <sprint_fast+0x5a>
    {
        sprintf(result, "%d", (int)fVal);
 800c4a2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c4a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c4ae:	ee17 2a90 	vmov	r2, s15
 800c4b2:	4989      	ldr	r1, [pc, #548]	; (800c6d8 <sprint_fast+0x268>)
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f005 fdd1 	bl	801205c <siprintf>
        sprintf(s, format, result);
 800c4ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c4be:	461a      	mov	r2, r3
 800c4c0:	68b9      	ldr	r1, [r7, #8]
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	f005 fdca 	bl	801205c <siprintf>
 800c4c8:	e0f8      	b.n	800c6bc <sprint_fast+0x24c>
        return;
    }

    fVal += 0.5 * pow(0.1, prec);
 800c4ca:	6838      	ldr	r0, [r7, #0]
 800c4cc:	f7f4 f842 	bl	8000554 <__aeabi_i2d>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	ec44 3b11 	vmov	d1, r3, r4
 800c4d8:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 800c6c8 <sprint_fast+0x258>
 800c4dc:	f006 fcec 	bl	8012eb8 <pow>
 800c4e0:	ec51 0b10 	vmov	r0, r1, d0
 800c4e4:	f04f 0200 	mov.w	r2, #0
 800c4e8:	4b7c      	ldr	r3, [pc, #496]	; (800c6dc <sprint_fast+0x26c>)
 800c4ea:	f7f4 f89d 	bl	8000628 <__aeabi_dmul>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	460c      	mov	r4, r1
 800c4f2:	4625      	mov	r5, r4
 800c4f4:	461c      	mov	r4, r3
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7f4 f83e 	bl	8000578 <__aeabi_f2d>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	460b      	mov	r3, r1
 800c500:	4620      	mov	r0, r4
 800c502:	4629      	mov	r1, r5
 800c504:	f7f3 feda 	bl	80002bc <__adddf3>
 800c508:	4603      	mov	r3, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	4618      	mov	r0, r3
 800c50e:	4621      	mov	r1, r4
 800c510:	f7f4 fb82 	bl	8000c18 <__aeabi_d2f>
 800c514:	4603      	mov	r3, r0
 800c516:	607b      	str	r3, [r7, #4]
    k = pow(10, prec);
 800c518:	6838      	ldr	r0, [r7, #0]
 800c51a:	f7f4 f81b 	bl	8000554 <__aeabi_i2d>
 800c51e:	4603      	mov	r3, r0
 800c520:	460c      	mov	r4, r1
 800c522:	ec44 3b11 	vmov	d1, r3, r4
 800c526:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 800c6d0 <sprint_fast+0x260>
 800c52a:	f006 fcc5 	bl	8012eb8 <pow>
 800c52e:	ec54 3b10 	vmov	r3, r4, d0
 800c532:	4618      	mov	r0, r3
 800c534:	4621      	mov	r1, r4
 800c536:	f7f4 fb27 	bl	8000b88 <__aeabi_d2iz>
 800c53a:	4603      	mov	r3, r0
 800c53c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    dVal = fVal;
 800c540:	edd7 7a01 	vldr	s15, [r7, #4]
 800c544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c548:	ee17 3a90 	vmov	r3, s15
 800c54c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    dec = ((int)(fVal * k)) % k;
 800c550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c554:	ee07 3a90 	vmov	s15, r3
 800c558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c55c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c560:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c568:	ee17 1a90 	vmov	r1, s15
 800c56c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c570:	fb91 f3f3 	sdiv	r3, r1, r3
 800c574:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c578:	fb02 f303 	mul.w	r3, r2, r3
 800c57c:	1acb      	subs	r3, r1, r3
 800c57e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    for (i = 0; i < prec; i++)
 800c582:	2300      	movs	r3, #0
 800c584:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c588:	e025      	b.n	800c5d6 <sprint_fast+0x166>
    {
        result[i] = (dec % 10) + '0';
 800c58a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800c58e:	4b54      	ldr	r3, [pc, #336]	; (800c6e0 <sprint_fast+0x270>)
 800c590:	fb83 1302 	smull	r1, r3, r3, r2
 800c594:	1099      	asrs	r1, r3, #2
 800c596:	17d3      	asrs	r3, r2, #31
 800c598:	1ac9      	subs	r1, r1, r3
 800c59a:	460b      	mov	r3, r1
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	440b      	add	r3, r1
 800c5a0:	005b      	lsls	r3, r3, #1
 800c5a2:	1ad1      	subs	r1, r2, r3
 800c5a4:	b2cb      	uxtb	r3, r1
 800c5a6:	3330      	adds	r3, #48	; 0x30
 800c5a8:	b2d9      	uxtb	r1, r3
 800c5aa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5b2:	4413      	add	r3, r2
 800c5b4:	460a      	mov	r2, r1
 800c5b6:	701a      	strb	r2, [r3, #0]
        dec /= 10;
 800c5b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c5bc:	4a48      	ldr	r2, [pc, #288]	; (800c6e0 <sprint_fast+0x270>)
 800c5be:	fb82 1203 	smull	r1, r2, r2, r3
 800c5c2:	1092      	asrs	r2, r2, #2
 800c5c4:	17db      	asrs	r3, r3, #31
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    for (i = 0; i < prec; i++)
 800c5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c5d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	dbd4      	blt.n	800c58a <sprint_fast+0x11a>
    }

    result[i] = '.';
 800c5e0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c5e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5e8:	4413      	add	r3, r2
 800c5ea:	222e      	movs	r2, #46	; 0x2e
 800c5ec:	701a      	strb	r2, [r3, #0]
    i++;
 800c5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    if (dVal > 0)
 800c5f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	dd30      	ble.n	800c662 <sprint_fast+0x1f2>
    {
        while (dVal > 0)
 800c600:	e025      	b.n	800c64e <sprint_fast+0x1de>
        {
            result[i] = (dVal % 10) + '0';
 800c602:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800c606:	4b36      	ldr	r3, [pc, #216]	; (800c6e0 <sprint_fast+0x270>)
 800c608:	fb83 1302 	smull	r1, r3, r3, r2
 800c60c:	1099      	asrs	r1, r3, #2
 800c60e:	17d3      	asrs	r3, r2, #31
 800c610:	1ac9      	subs	r1, r1, r3
 800c612:	460b      	mov	r3, r1
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	440b      	add	r3, r1
 800c618:	005b      	lsls	r3, r3, #1
 800c61a:	1ad1      	subs	r1, r2, r3
 800c61c:	b2cb      	uxtb	r3, r1
 800c61e:	3330      	adds	r3, #48	; 0x30
 800c620:	b2d9      	uxtb	r1, r3
 800c622:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c62a:	4413      	add	r3, r2
 800c62c:	460a      	mov	r2, r1
 800c62e:	701a      	strb	r2, [r3, #0]
            dVal /= 10;
 800c630:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c634:	4a2a      	ldr	r2, [pc, #168]	; (800c6e0 <sprint_fast+0x270>)
 800c636:	fb82 1203 	smull	r1, r2, r2, r3
 800c63a:	1092      	asrs	r2, r2, #2
 800c63c:	17db      	asrs	r3, r3, #31
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            i++;
 800c644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c648:	3301      	adds	r3, #1
 800c64a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        while (dVal > 0)
 800c64e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c652:	2b00      	cmp	r3, #0
 800c654:	dcd5      	bgt.n	800c602 <sprint_fast+0x192>
        }
        i--;
 800c656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c65a:	3b01      	subs	r3, #1
 800c65c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c660:	e006      	b.n	800c670 <sprint_fast+0x200>
    }
    else
        result[i] = '0';
 800c662:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c66a:	4413      	add	r3, r2
 800c66c:	2230      	movs	r2, #48	; 0x30
 800c66e:	701a      	strb	r2, [r3, #0]

    for (j = 0; i >= 0; i--, j++)
 800c670:	2300      	movs	r3, #0
 800c672:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c676:	e016      	b.n	800c6a6 <sprint_fast+0x236>
        result_rev[j] = result[i];
 800c678:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c67c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c680:	4413      	add	r3, r2
 800c682:	7819      	ldrb	r1, [r3, #0]
 800c684:	f107 0214 	add.w	r2, r7, #20
 800c688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c68c:	4413      	add	r3, r2
 800c68e:	460a      	mov	r2, r1
 800c690:	701a      	strb	r2, [r3, #0]
    for (j = 0; i >= 0; i--, j++)
 800c692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c696:	3b01      	subs	r3, #1
 800c698:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c6a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	dae4      	bge.n	800c678 <sprint_fast+0x208>

    sprintf(s, format, result_rev);
 800c6ae:	f107 0314 	add.w	r3, r7, #20
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	68b9      	ldr	r1, [r7, #8]
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f005 fcd0 	bl	801205c <siprintf>
}
 800c6bc:	37f0      	adds	r7, #240	; 0xf0
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bdb0      	pop	{r4, r5, r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	f3af 8000 	nop.w
 800c6c8:	9999999a 	.word	0x9999999a
 800c6cc:	3fb99999 	.word	0x3fb99999
 800c6d0:	00000000 	.word	0x00000000
 800c6d4:	40240000 	.word	0x40240000
 800c6d8:	08015320 	.word	0x08015320
 800c6dc:	3fe00000 	.word	0x3fe00000
 800c6e0:	66666667 	.word	0x66666667

0800c6e4 <SCPI_ErrorInit>:

/**
 * Initialize error queue
 * @param context - scpi context
 */
void SCPI_ErrorInit(scpi_t * context, scpi_error_t * data, int16_t size) {
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	80fb      	strh	r3, [r7, #6]
    fifo_init(&context->error_queue, data, size);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	333c      	adds	r3, #60	; 0x3c
 800c6f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c6fa:	68b9      	ldr	r1, [r7, #8]
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 fa05 	bl	800cb0c <fifo_init>
}
 800c702:	bf00      	nop
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <SCPI_ErrorEmitEmpty>:

/**
 * Emit no error
 * @param context scpi context
 */
static void SCPI_ErrorEmitEmpty(scpi_t * context) {
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b082      	sub	sp, #8
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
    if ((SCPI_ErrorCount(context) == 0) && (SCPI_RegGet(context, SCPI_REG_STB) & STB_QMA)) {
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 f872 	bl	800c7fc <SCPI_ErrorCount>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d11c      	bne.n	800c758 <SCPI_ErrorEmitEmpty+0x4e>
 800c71e:	2100      	movs	r1, #0
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 fb6a 	bl	800cdfa <SCPI_RegGet>
 800c726:	4603      	mov	r3, r0
 800c728:	f003 0304 	and.w	r3, r3, #4
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d013      	beq.n	800c758 <SCPI_ErrorEmitEmpty+0x4e>
        SCPI_RegClearBits(context, SCPI_REG_STB, STB_QMA);
 800c730:	2204      	movs	r2, #4
 800c732:	2100      	movs	r1, #0
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 fc60 	bl	800cffa <SCPI_RegClearBits>

        if (context->interface && context->interface->error) {
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00a      	beq.n	800c758 <SCPI_ErrorEmitEmpty+0x4e>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d005      	beq.n	800c758 <SCPI_ErrorEmitEmpty+0x4e>
            context->interface->error(context, 0);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2100      	movs	r1, #0
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	4798      	blx	r3
        }
    }
}
 800c758:	bf00      	nop
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <SCPI_ErrorEmit>:
/**
 * Emit error
 * @param context scpi context
 * @param err Error to emit
 */
static void SCPI_ErrorEmit(scpi_t * context, int16_t err) {
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	460b      	mov	r3, r1
 800c76a:	807b      	strh	r3, [r7, #2]
    SCPI_RegSetBits(context, SCPI_REG_STB, STB_QMA);
 800c76c:	2204      	movs	r2, #4
 800c76e:	2100      	movs	r1, #0
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fc27 	bl	800cfc4 <SCPI_RegSetBits>

    if (context->interface && context->interface->error) {
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00c      	beq.n	800c798 <SCPI_ErrorEmit+0x38>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d007      	beq.n	800c798 <SCPI_ErrorEmit+0x38>
        context->interface->error(context, err);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c792:	4611      	mov	r1, r2
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	4798      	blx	r3
    }
}
 800c798:	bf00      	nop
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    while (fifo_remove(&context->error_queue, &error)) {
        SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
    }
#endif
    fifo_clear(&context->error_queue);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	333c      	adds	r3, #60	; 0x3c
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 f9c9 	bl	800cb44 <fifo_clear>

    SCPI_ErrorEmitEmpty(context);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f7ff ffa9 	bl	800c70a <SCPI_ErrorEmitEmpty>
}
 800c7b8:	bf00      	nop
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <SCPI_ErrorPop>:
 * Pop error from queue
 * @param context - scpi context
 * @param error
 * @return
 */
scpi_bool_t SCPI_ErrorPop(scpi_t * context, scpi_error_t * error) {
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
    if (!error || !context) return FALSE;
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <SCPI_ErrorPop+0x16>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <SCPI_ErrorPop+0x1a>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	e00c      	b.n	800c7f4 <SCPI_ErrorPop+0x34>
    SCPI_ERROR_SETVAL(error, 0, NULL);
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	801a      	strh	r2, [r3, #0]
    fifo_remove(&context->error_queue, error);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	333c      	adds	r3, #60	; 0x3c
 800c7e4:	6839      	ldr	r1, [r7, #0]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 fa1f 	bl	800cc2a <fifo_remove>

    SCPI_ErrorEmitEmpty(context);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f7ff ff8c 	bl	800c70a <SCPI_ErrorEmitEmpty>

    return TRUE;
 800c7f2:	2301      	movs	r3, #1
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
    int16_t result = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	81fb      	strh	r3, [r7, #14]

    fifo_count(&context->error_queue, &result);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	333c      	adds	r3, #60	; 0x3c
 800c80c:	f107 020e 	add.w	r2, r7, #14
 800c810:	4611      	mov	r1, r2
 800c812:	4618      	mov	r0, r3
 800c814:	f000 fa7c 	bl	800cd10 <fifo_count>

    return result;
 800c818:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <SCPI_ErrorAddInternal>:

static scpi_bool_t SCPI_ErrorAddInternal(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800c824:	b580      	push	{r7, lr}
 800c826:	b086      	sub	sp, #24
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	607a      	str	r2, [r7, #4]
 800c82e:	603b      	str	r3, [r7, #0]
 800c830:	460b      	mov	r3, r1
 800c832:	817b      	strh	r3, [r7, #10]
    scpi_error_t error_value;
    /* SCPIDEFINE_strndup is sometimes a dumy that does not reference it's arguments. 
       Since info_len is not referenced elsewhere caoing to void prevents unusd argument warnings */
    (void) info_len;
    char * info_ptr = info ? SCPIDEFINE_strndup(&context->error_info_heap, info, info_len) : NULL;
 800c834:	2300      	movs	r3, #0
 800c836:	617b      	str	r3, [r7, #20]
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
 800c838:	897b      	ldrh	r3, [r7, #10]
 800c83a:	823b      	strh	r3, [r7, #16]
    if (!fifo_add(&context->error_queue, &error_value)) {
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	333c      	adds	r3, #60	; 0x3c
 800c840:	f107 0210 	add.w	r2, r7, #16
 800c844:	4611      	mov	r1, r2
 800c846:	4618      	mov	r0, r3
 800c848:	f000 f9b6 	bl	800cbb8 <fifo_add>
 800c84c:	4603      	mov	r3, r0
 800c84e:	f083 0301 	eor.w	r3, r3, #1
 800c852:	b2db      	uxtb	r3, r3
 800c854:	2b00      	cmp	r3, #0
 800c856:	d014      	beq.n	800c882 <SCPI_ErrorAddInternal+0x5e>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        fifo_remove_last(&context->error_queue, &error_value);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	333c      	adds	r3, #60	; 0x3c
 800c85c:	f107 0210 	add.w	r2, r7, #16
 800c860:	4611      	mov	r1, r2
 800c862:	4618      	mov	r0, r3
 800c864:	f000 fa18 	bl	800cc98 <fifo_remove_last>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 800c868:	f64f 63a2 	movw	r3, #65186	; 0xfea2
 800c86c:	823b      	strh	r3, [r7, #16]
        fifo_add(&context->error_queue, &error_value);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	333c      	adds	r3, #60	; 0x3c
 800c872:	f107 0210 	add.w	r2, r7, #16
 800c876:	4611      	mov	r1, r2
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 f99d 	bl	800cbb8 <fifo_add>
        return FALSE;
 800c87e:	2300      	movs	r3, #0
 800c880:	e000      	b.n	800c884 <SCPI_ErrorAddInternal+0x60>
    }
    return TRUE;
 800c882:	2301      	movs	r3, #1
}
 800c884:	4618      	mov	r0, r3
 800c886:	3718      	adds	r7, #24
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	607a      	str	r2, [r7, #4]
 800c896:	603b      	str	r3, [r7, #0]
 800c898:	460b      	mov	r3, r1
 800c89a:	817b      	strh	r3, [r7, #10]
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d007      	beq.n	800c8b2 <SCPI_ErrorPushEx+0x26>
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d104      	bne.n	800c8b2 <SCPI_ErrorPushEx+0x26>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
 800c8a8:	21ff      	movs	r1, #255	; 0xff
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f005 fc28 	bl	8012100 <strnlen>
 800c8b0:	6038      	str	r0, [r7, #0]
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);
 800c8b2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f7ff ffb2 	bl	800c824 <SCPI_ErrorAddInternal>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	bf14      	ite	ne
 800c8c6:	2301      	movne	r3, #1
 800c8c8:	2300      	moveq	r3, #0
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	f083 0301 	eor.w	r3, r3, #1
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	74fb      	strb	r3, [r7, #19]
 800c8d4:	7cfb      	ldrb	r3, [r7, #19]
 800c8d6:	f003 0301 	and.w	r3, r3, #1
 800c8da:	74fb      	strb	r3, [r7, #19]

    for (i = 0; i < ERROR_DEFS_N; i++) {
 800c8dc:	2300      	movs	r3, #0
 800c8de:	617b      	str	r3, [r7, #20]
 800c8e0:	e02b      	b.n	800c93a <SCPI_ErrorPushEx+0xae>
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 800c8e2:	4926      	ldr	r1, [pc, #152]	; (800c97c <SCPI_ErrorPushEx+0xf0>)
 800c8e4:	697a      	ldr	r2, [r7, #20]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	005b      	lsls	r3, r3, #1
 800c8ea:	4413      	add	r3, r2
 800c8ec:	005b      	lsls	r3, r3, #1
 800c8ee:	440b      	add	r3, r1
 800c8f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	dc1b      	bgt.n	800c934 <SCPI_ErrorPushEx+0xa8>
 800c8fc:	491f      	ldr	r1, [pc, #124]	; (800c97c <SCPI_ErrorPushEx+0xf0>)
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	4613      	mov	r3, r2
 800c902:	005b      	lsls	r3, r3, #1
 800c904:	4413      	add	r3, r2
 800c906:	005b      	lsls	r3, r3, #1
 800c908:	440b      	add	r3, r1
 800c90a:	3302      	adds	r3, #2
 800c90c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c910:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800c914:	429a      	cmp	r2, r3
 800c916:	db0d      	blt.n	800c934 <SCPI_ErrorPushEx+0xa8>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
 800c918:	4918      	ldr	r1, [pc, #96]	; (800c97c <SCPI_ErrorPushEx+0xf0>)
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	4613      	mov	r3, r2
 800c91e:	005b      	lsls	r3, r3, #1
 800c920:	4413      	add	r3, r2
 800c922:	005b      	lsls	r3, r3, #1
 800c924:	440b      	add	r3, r1
 800c926:	3304      	adds	r3, #4
 800c928:	881b      	ldrh	r3, [r3, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	2102      	movs	r1, #2
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f000 fb48 	bl	800cfc4 <SCPI_RegSetBits>
    for (i = 0; i < ERROR_DEFS_N; i++) {
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	3301      	adds	r3, #1
 800c938:	617b      	str	r3, [r7, #20]
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	2b08      	cmp	r3, #8
 800c93e:	ddd0      	ble.n	800c8e2 <SCPI_ErrorPushEx+0x56>
        }
    }

    SCPI_ErrorEmit(context, err);
 800c940:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c944:	4619      	mov	r1, r3
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f7ff ff0a 	bl	800c760 <SCPI_ErrorEmit>
    if (queue_overflow) {
 800c94c:	7cfb      	ldrb	r3, [r7, #19]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d003      	beq.n	800c95a <SCPI_ErrorPushEx+0xce>
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
 800c952:	490b      	ldr	r1, [pc, #44]	; (800c980 <SCPI_ErrorPushEx+0xf4>)
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7ff ff03 	bl	800c760 <SCPI_ErrorEmit>
    }

    if (context) {
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d003      	beq.n	800c968 <SCPI_ErrorPushEx+0xdc>
        context->cmd_error = TRUE;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    fifo_clear(&context->error_queue); // EDIT
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	333c      	adds	r3, #60	; 0x3c
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 f8e9 	bl	800cb44 <fifo_clear>
}
 800c972:	bf00      	nop
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	08015798 	.word	0x08015798
 800c980:	fffffea2 	.word	0xfffffea2

0800c984 <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	807b      	strh	r3, [r7, #2]
    SCPI_ErrorPushEx(context, err, NULL, 0);
 800c990:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800c994:	2300      	movs	r3, #0
 800c996:	2200      	movs	r2, #0
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7ff ff77 	bl	800c88c <SCPI_ErrorPushEx>
    return;
 800c99e:	bf00      	nop
}
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
	...

0800c9a8 <SCPI_ErrorTranslate>:
/**
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	80fb      	strh	r3, [r7, #6]
    switch (err) {
 800c9b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c9b6:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 800c9ba:	d062      	beq.n	800ca82 <SCPI_ErrorTranslate+0xda>
 800c9bc:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 800c9c0:	dc29      	bgt.n	800ca16 <SCPI_ErrorTranslate+0x6e>
 800c9c2:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 800c9c6:	d066      	beq.n	800ca96 <SCPI_ErrorTranslate+0xee>
 800c9c8:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 800c9cc:	dc12      	bgt.n	800c9f4 <SCPI_ErrorTranslate+0x4c>
 800c9ce:	f46f 72b6 	mvn.w	r2, #364	; 0x16c
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d065      	beq.n	800caa2 <SCPI_ErrorTranslate+0xfa>
 800c9d6:	f513 7fb6 	cmn.w	r3, #364	; 0x16c
 800c9da:	da03      	bge.n	800c9e4 <SCPI_ErrorTranslate+0x3c>
 800c9dc:	f513 7fb9 	cmn.w	r3, #370	; 0x172
 800c9e0:	d061      	beq.n	800caa6 <SCPI_ErrorTranslate+0xfe>
 800c9e2:	e064      	b.n	800caae <SCPI_ErrorTranslate+0x106>
 800c9e4:	f46f 72b5 	mvn.w	r2, #362	; 0x16a
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d058      	beq.n	800ca9e <SCPI_ErrorTranslate+0xf6>
 800c9ec:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 800c9f0:	d053      	beq.n	800ca9a <SCPI_ErrorTranslate+0xf2>
 800c9f2:	e05c      	b.n	800caae <SCPI_ErrorTranslate+0x106>
 800c9f4:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 800c9f8:	d049      	beq.n	800ca8e <SCPI_ErrorTranslate+0xe6>
 800c9fa:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 800c9fe:	dc03      	bgt.n	800ca08 <SCPI_ErrorTranslate+0x60>
 800ca00:	f113 0fe0 	cmn.w	r3, #224	; 0xe0
 800ca04:	d045      	beq.n	800ca92 <SCPI_ErrorTranslate+0xea>
 800ca06:	e052      	b.n	800caae <SCPI_ErrorTranslate+0x106>
 800ca08:	f113 0faa 	cmn.w	r3, #170	; 0xaa
 800ca0c:	d03d      	beq.n	800ca8a <SCPI_ErrorTranslate+0xe2>
 800ca0e:	f113 0f97 	cmn.w	r3, #151	; 0x97
 800ca12:	d038      	beq.n	800ca86 <SCPI_ErrorTranslate+0xde>
 800ca14:	e04b      	b.n	800caae <SCPI_ErrorTranslate+0x106>
 800ca16:	f113 0f68 	cmn.w	r3, #104	; 0x68
 800ca1a:	d028      	beq.n	800ca6e <SCPI_ErrorTranslate+0xc6>
 800ca1c:	f113 0f68 	cmn.w	r3, #104	; 0x68
 800ca20:	dc10      	bgt.n	800ca44 <SCPI_ErrorTranslate+0x9c>
 800ca22:	f113 0f71 	cmn.w	r3, #113	; 0x71
 800ca26:	d028      	beq.n	800ca7a <SCPI_ErrorTranslate+0xd2>
 800ca28:	f113 0f71 	cmn.w	r3, #113	; 0x71
 800ca2c:	dc03      	bgt.n	800ca36 <SCPI_ErrorTranslate+0x8e>
 800ca2e:	f113 0f83 	cmn.w	r3, #131	; 0x83
 800ca32:	d024      	beq.n	800ca7e <SCPI_ErrorTranslate+0xd6>
 800ca34:	e03b      	b.n	800caae <SCPI_ErrorTranslate+0x106>
 800ca36:	f113 0f6d 	cmn.w	r3, #109	; 0x6d
 800ca3a:	d01c      	beq.n	800ca76 <SCPI_ErrorTranslate+0xce>
 800ca3c:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 800ca40:	d017      	beq.n	800ca72 <SCPI_ErrorTranslate+0xca>
 800ca42:	e034      	b.n	800caae <SCPI_ErrorTranslate+0x106>
 800ca44:	f113 0f65 	cmn.w	r3, #101	; 0x65
 800ca48:	d00d      	beq.n	800ca66 <SCPI_ErrorTranslate+0xbe>
 800ca4a:	f113 0f65 	cmn.w	r3, #101	; 0x65
 800ca4e:	dc03      	bgt.n	800ca58 <SCPI_ErrorTranslate+0xb0>
 800ca50:	f113 0f67 	cmn.w	r3, #103	; 0x67
 800ca54:	d009      	beq.n	800ca6a <SCPI_ErrorTranslate+0xc2>
 800ca56:	e02a      	b.n	800caae <SCPI_ErrorTranslate+0x106>
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <SCPI_ErrorTranslate+0xba>
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d024      	beq.n	800caaa <SCPI_ErrorTranslate+0x102>
 800ca60:	e025      	b.n	800caae <SCPI_ErrorTranslate+0x106>
#if USE_FULL_ERROR_LIST
#define XE X
#else
#define XE(def, val, str)
#endif
        LIST_OF_ERRORS
 800ca62:	4b16      	ldr	r3, [pc, #88]	; (800cabc <SCPI_ErrorTranslate+0x114>)
 800ca64:	e024      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca66:	4b16      	ldr	r3, [pc, #88]	; (800cac0 <SCPI_ErrorTranslate+0x118>)
 800ca68:	e022      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca6a:	4b16      	ldr	r3, [pc, #88]	; (800cac4 <SCPI_ErrorTranslate+0x11c>)
 800ca6c:	e020      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca6e:	4b16      	ldr	r3, [pc, #88]	; (800cac8 <SCPI_ErrorTranslate+0x120>)
 800ca70:	e01e      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca72:	4b16      	ldr	r3, [pc, #88]	; (800cacc <SCPI_ErrorTranslate+0x124>)
 800ca74:	e01c      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca76:	4b16      	ldr	r3, [pc, #88]	; (800cad0 <SCPI_ErrorTranslate+0x128>)
 800ca78:	e01a      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca7a:	4b16      	ldr	r3, [pc, #88]	; (800cad4 <SCPI_ErrorTranslate+0x12c>)
 800ca7c:	e018      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca7e:	4b16      	ldr	r3, [pc, #88]	; (800cad8 <SCPI_ErrorTranslate+0x130>)
 800ca80:	e016      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca82:	4b16      	ldr	r3, [pc, #88]	; (800cadc <SCPI_ErrorTranslate+0x134>)
 800ca84:	e014      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca86:	4b16      	ldr	r3, [pc, #88]	; (800cae0 <SCPI_ErrorTranslate+0x138>)
 800ca88:	e012      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca8a:	4b16      	ldr	r3, [pc, #88]	; (800cae4 <SCPI_ErrorTranslate+0x13c>)
 800ca8c:	e010      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca8e:	4b16      	ldr	r3, [pc, #88]	; (800cae8 <SCPI_ErrorTranslate+0x140>)
 800ca90:	e00e      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca92:	4b16      	ldr	r3, [pc, #88]	; (800caec <SCPI_ErrorTranslate+0x144>)
 800ca94:	e00c      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca96:	4b16      	ldr	r3, [pc, #88]	; (800caf0 <SCPI_ErrorTranslate+0x148>)
 800ca98:	e00a      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca9a:	4b16      	ldr	r3, [pc, #88]	; (800caf4 <SCPI_ErrorTranslate+0x14c>)
 800ca9c:	e008      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800ca9e:	4b16      	ldr	r3, [pc, #88]	; (800caf8 <SCPI_ErrorTranslate+0x150>)
 800caa0:	e006      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800caa2:	4b16      	ldr	r3, [pc, #88]	; (800cafc <SCPI_ErrorTranslate+0x154>)
 800caa4:	e004      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800caa6:	4b16      	ldr	r3, [pc, #88]	; (800cb00 <SCPI_ErrorTranslate+0x158>)
 800caa8:	e002      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
 800caaa:	4b16      	ldr	r3, [pc, #88]	; (800cb04 <SCPI_ErrorTranslate+0x15c>)
 800caac:	e000      	b.n	800cab0 <SCPI_ErrorTranslate+0x108>
#if USE_USER_ERROR_LIST
        LIST_OF_USER_ERRORS
#endif
#undef X
#undef XE
        default: return "Unknown error";
 800caae:	4b16      	ldr	r3, [pc, #88]	; (800cb08 <SCPI_ErrorTranslate+0x160>)
    }
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr
 800cabc:	08015324 	.word	0x08015324
 800cac0:	08015330 	.word	0x08015330
 800cac4:	08015344 	.word	0x08015344
 800cac8:	08015358 	.word	0x08015358
 800cacc:	08015368 	.word	0x08015368
 800cad0:	08015380 	.word	0x08015380
 800cad4:	08015394 	.word	0x08015394
 800cad8:	080153a8 	.word	0x080153a8
 800cadc:	080153b8 	.word	0x080153b8
 800cae0:	080153cc 	.word	0x080153cc
 800cae4:	080153e0 	.word	0x080153e0
 800cae8:	080153f4 	.word	0x080153f4
 800caec:	08015404 	.word	0x08015404
 800caf0:	0801541c 	.word	0x0801541c
 800caf4:	0801542c 	.word	0x0801542c
 800caf8:	0801543c 	.word	0x0801543c
 800cafc:	08015454 	.word	0x08015454
 800cb00:	08015464 	.word	0x08015464
 800cb04:	08015478 	.word	0x08015478
 800cb08:	08015488 	.word	0x08015488

0800cb0c <fifo_init>:

/**
 * Initialize fifo
 * @param fifo
 */
void fifo_init(scpi_fifo_t * fifo, scpi_error_t * data, int16_t size) {
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	4613      	mov	r3, r2
 800cb18:	80fb      	strh	r3, [r7, #6]
    fifo->wr = 0;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2200      	movs	r2, #0
 800cb24:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	809a      	strh	r2, [r3, #4]
    fifo->data = data;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	609a      	str	r2, [r3, #8]
    fifo->size = size;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	88fa      	ldrh	r2, [r7, #6]
 800cb36:	80da      	strh	r2, [r3, #6]
}
 800cb38:	bf00      	nop
 800cb3a:	3714      	adds	r7, #20
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <fifo_clear>:

/**
 * Empty fifo
 * @param fifo
 */
void fifo_clear(scpi_fifo_t * fifo) {
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
    fifo->wr = 0;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	809a      	strh	r2, [r3, #4]
}
 800cb5e:	bf00      	nop
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <fifo_is_empty>:
/**
 * Test if fifo is empty
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_empty(scpi_fifo_t * fifo) {
 800cb6a:	b480      	push	{r7}
 800cb6c:	b083      	sub	sp, #12
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
    return fifo->count == 0;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	bf0c      	ite	eq
 800cb7c:	2301      	moveq	r3, #1
 800cb7e:	2300      	movne	r3, #0
 800cb80:	b2db      	uxtb	r3, r3
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	370c      	adds	r7, #12
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr

0800cb8e <fifo_is_full>:
/**
 * Test if fifo is full
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_full(scpi_fifo_t * fifo) {
 800cb8e:	b480      	push	{r7}
 800cb90:	b083      	sub	sp, #12
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
    return fifo->count == fifo->size;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	bf0c      	ite	eq
 800cba6:	2301      	moveq	r3, #1
 800cba8:	2300      	movne	r3, #0
 800cbaa:	b2db      	uxtb	r3, r3
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <fifo_add>:
 * @param fifo
 * @param err
 * @param info
 * @return
 */
scpi_bool_t fifo_add(scpi_fifo_t * fifo, const scpi_error_t * value) {
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
    /* FIFO full? */
    if (fifo_is_full(fifo)) {
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff ffe3 	bl	800cb8e <fifo_is_full>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <fifo_add+0x1a>
        return FALSE;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	e027      	b.n	800cc22 <fifo_add+0x6a>
    }
    if (!value) {
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d101      	bne.n	800cbdc <fifo_add+0x24>
        return FALSE;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	e022      	b.n	800cc22 <fifo_add+0x6a>
    }

    fifo->data[fifo->wr] = *value;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	689a      	ldr	r2, [r3, #8]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbe6:	005b      	lsls	r3, r3, #1
 800cbe8:	4413      	add	r3, r2
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	8812      	ldrh	r2, [r2, #0]
 800cbee:	801a      	strh	r2, [r3, #0]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800cbfe:	fb93 f1f2 	sdiv	r1, r3, r2
 800cc02:	fb02 f201 	mul.w	r2, r2, r1
 800cc06:	1a9b      	subs	r3, r3, r2
 800cc08:	b21a      	sxth	r2, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	801a      	strh	r2, [r3, #0]
    fifo->count += 1;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	3301      	adds	r3, #1
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	b21a      	sxth	r2, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	809a      	strh	r2, [r3, #4]
    return TRUE;
 800cc20:	2301      	movs	r3, #1
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <fifo_remove>:
 * Remove element form fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove(scpi_fifo_t * fifo, scpi_error_t * value) {
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b082      	sub	sp, #8
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f7ff ff98 	bl	800cb6a <fifo_is_empty>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <fifo_remove+0x1a>
        return FALSE;
 800cc40:	2300      	movs	r3, #0
 800cc42:	e025      	b.n	800cc90 <fifo_remove+0x66>
    }

    if (value) {
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d009      	beq.n	800cc5e <fifo_remove+0x34>
        *value = fifo->data[fifo->rd];
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	689a      	ldr	r2, [r3, #8]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	441a      	add	r2, r3
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	8812      	ldrh	r2, [r2, #0]
 800cc5c:	801a      	strh	r2, [r3, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc64:	3301      	adds	r3, #1
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800cc6c:	fb93 f1f2 	sdiv	r1, r3, r2
 800cc70:	fb02 f201 	mul.w	r2, r2, r1
 800cc74:	1a9b      	subs	r3, r3, r2
 800cc76:	b21a      	sxth	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	805a      	strh	r2, [r3, #2]
    fifo->count -= 1;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	3b01      	subs	r3, #1
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	b21a      	sxth	r2, r3
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	809a      	strh	r2, [r3, #4]

    return TRUE;
 800cc8e:	2301      	movs	r3, #1
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <fifo_remove_last>:
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7ff ff61 	bl	800cb6a <fifo_is_empty>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d001      	beq.n	800ccb2 <fifo_remove_last+0x1a>
        return FALSE;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	e02a      	b.n	800cd08 <fifo_remove_last+0x70>
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ccb8:	461a      	mov	r2, r3
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ccca:	fb93 f1f2 	sdiv	r1, r3, r2
 800ccce:	fb02 f201 	mul.w	r2, r2, r1
 800ccd2:	1a9b      	subs	r3, r3, r2
 800ccd4:	b21a      	sxth	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	801a      	strh	r2, [r3, #0]

    if (value) {
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d009      	beq.n	800ccf4 <fifo_remove_last+0x5c>
        *value = fifo->data[fifo->wr];
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	689a      	ldr	r2, [r3, #8]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ccea:	005b      	lsls	r3, r3, #1
 800ccec:	441a      	add	r2, r3
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	8812      	ldrh	r2, [r2, #0]
 800ccf2:	801a      	strh	r2, [r3, #0]
    }
    fifo->count -= 1;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	b21a      	sxth	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	809a      	strh	r2, [r3, #4]

    return TRUE;
 800cd06:	2301      	movs	r3, #1
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <fifo_count>:
 * Retrive number of elements in fifo
 * @param fifo
 * @param value
 * @return
 */
scpi_bool_t fifo_count(scpi_fifo_t * fifo, int16_t * value) {
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
    *value = fifo->count;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	801a      	strh	r2, [r3, #0]
    return TRUE;
 800cd24:	2301      	movs	r3, #1
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b082      	sub	sp, #8
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	70fb      	strb	r3, [r7, #3]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 800cd3e:	78fb      	ldrb	r3, [r7, #3]
 800cd40:	4619      	mov	r1, r3
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 f859 	bl	800cdfa <SCPI_RegGet>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	78fb      	ldrb	r3, [r7, #3]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 f88d 	bl	800ce70 <SCPI_RegSet>
}
 800cd56:	bf00      	nop
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <regUpdateEvent>:
 * in the condition register
 * @param context
 * @param condReg - condition register name
 * @param eventReg - event register name
 */
static void regUpdateEvent(scpi_t * context, scpi_reg_val_t oldCondVal, scpi_reg_val_t newCondVal, scpi_reg_name_t eventReg) {
 800cd5e:	b590      	push	{r4, r7, lr}
 800cd60:	b085      	sub	sp, #20
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	60f8      	str	r0, [r7, #12]
 800cd66:	4608      	mov	r0, r1
 800cd68:	4611      	mov	r1, r2
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	817b      	strh	r3, [r7, #10]
 800cd70:	460b      	mov	r3, r1
 800cd72:	813b      	strh	r3, [r7, #8]
 800cd74:	4613      	mov	r3, r2
 800cd76:	71fb      	strb	r3, [r7, #7]
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 800cd78:	897b      	ldrh	r3, [r7, #10]
 800cd7a:	43db      	mvns	r3, r3
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	893b      	ldrh	r3, [r7, #8]
 800cd80:	4013      	ands	r3, r2
 800cd82:	b29c      	uxth	r4, r3
 800cd84:	79fb      	ldrb	r3, [r7, #7]
 800cd86:	4619      	mov	r1, r3
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f000 f836 	bl	800cdfa <SCPI_RegGet>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	4323      	orrs	r3, r4
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	79fb      	ldrb	r3, [r7, #7]
 800cd96:	4619      	mov	r1, r3
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f000 f869 	bl	800ce70 <SCPI_RegSet>
}
 800cd9e:	bf00      	nop
 800cda0:	3714      	adds	r7, #20
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd90      	pop	{r4, r7, pc}

0800cda6 <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b084      	sub	sp, #16
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	60f8      	str	r0, [r7, #12]
 800cdae:	4608      	mov	r0, r1
 800cdb0:	4611      	mov	r1, r2
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	817b      	strh	r3, [r7, #10]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	727b      	strb	r3, [r7, #9]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	80fb      	strh	r3, [r7, #6]
    if (val & SCPI_RegGet(context, mask)) {
 800cdc0:	7a7b      	ldrb	r3, [r7, #9]
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f000 f818 	bl	800cdfa <SCPI_RegGet>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	461a      	mov	r2, r3
 800cdce:	897b      	ldrh	r3, [r7, #10]
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d006      	beq.n	800cde6 <regUpdateSTB+0x40>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 800cdd8:	88fb      	ldrh	r3, [r7, #6]
 800cdda:	461a      	mov	r2, r3
 800cddc:	2100      	movs	r1, #0
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f000 f8f0 	bl	800cfc4 <SCPI_RegSetBits>
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
    }
}
 800cde4:	e005      	b.n	800cdf2 <regUpdateSTB+0x4c>
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 800cde6:	88fb      	ldrh	r3, [r7, #6]
 800cde8:	461a      	mov	r2, r3
 800cdea:	2100      	movs	r1, #0
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f000 f904 	bl	800cffa <SCPI_RegClearBits>
}
 800cdf2:	bf00      	nop
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <SCPI_RegGet>:
/**
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
 800cdfa:	b480      	push	{r7}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	460b      	mov	r3, r1
 800ce04:	70fb      	strb	r3, [r7, #3]
    if ((name < SCPI_REG_COUNT) && context) {
 800ce06:	78fb      	ldrb	r3, [r7, #3]
 800ce08:	2b09      	cmp	r3, #9
 800ce0a:	d808      	bhi.n	800ce1e <SCPI_RegGet+0x24>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d005      	beq.n	800ce1e <SCPI_RegGet+0x24>
        return context->registers[name];
 800ce12:	78fa      	ldrb	r2, [r7, #3]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	3224      	adds	r2, #36	; 0x24
 800ce18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ce1c:	e000      	b.n	800ce20 <SCPI_RegGet+0x26>
    } else {
        return 0;
 800ce1e:	2300      	movs	r3, #0
    }
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <writeControl>:
 * Wrapper function to control interface from context
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	460b      	mov	r3, r1
 800ce36:	70fb      	strb	r3, [r7, #3]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	803b      	strh	r3, [r7, #0]
    if (context && context->interface && context->interface->control) {
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d011      	beq.n	800ce66 <writeControl+0x3a>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00d      	beq.n	800ce66 <writeControl+0x3a>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d008      	beq.n	800ce66 <writeControl+0x3a>
        return context->interface->control(context, ctrl, val);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	883a      	ldrh	r2, [r7, #0]
 800ce5c:	78f9      	ldrb	r1, [r7, #3]
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	4798      	blx	r3
 800ce62:	4603      	mov	r3, r0
 800ce64:	e000      	b.n	800ce68 <writeControl+0x3c>
    } else {
        return 0;
 800ce66:	2300      	movs	r3, #0
    }
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	70fb      	strb	r3, [r7, #3]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	803b      	strh	r3, [r7, #0]
    scpi_bool_t srq = FALSE;
 800ce80:	2300      	movs	r3, #0
 800ce82:	73fb      	strb	r3, [r7, #15]
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 800ce84:	78fb      	ldrb	r3, [r7, #3]
 800ce86:	2b09      	cmp	r3, #9
 800ce88:	f200 8098 	bhi.w	800cfbc <SCPI_RegSet+0x14c>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f000 8094 	beq.w	800cfbc <SCPI_RegSet+0x14c>
        return;
    }

    /* store old register value */
    old_val = context->registers[name];
 800ce94:	78fa      	ldrb	r2, [r7, #3]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	3224      	adds	r2, #36	; 0x24
 800ce9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ce9e:	81bb      	strh	r3, [r7, #12]

    /* set register value */
    context->registers[name] = val;
 800cea0:	78fa      	ldrb	r2, [r7, #3]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	3224      	adds	r2, #36	; 0x24
 800cea6:	8839      	ldrh	r1, [r7, #0]
 800cea8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
 800ceac:	78fb      	ldrb	r3, [r7, #3]
 800ceae:	2b0a      	cmp	r3, #10
 800ceb0:	d870      	bhi.n	800cf94 <SCPI_RegSet+0x124>
 800ceb2:	a201      	add	r2, pc, #4	; (adr r2, 800ceb8 <SCPI_RegSet+0x48>)
 800ceb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb8:	0800cee5 	.word	0x0800cee5
 800cebc:	0800cf25 	.word	0x0800cf25
 800cec0:	0800cf2f 	.word	0x0800cf2f
 800cec4:	0800cf3d 	.word	0x0800cf3d
 800cec8:	0800cf6d 	.word	0x0800cf6d
 800cecc:	0800cf7b 	.word	0x0800cf7b
 800ced0:	0800cf85 	.word	0x0800cf85
 800ced4:	0800cf47 	.word	0x0800cf47
 800ced8:	0800cf55 	.word	0x0800cf55
 800cedc:	0800cf5f 	.word	0x0800cf5f
 800cee0:	0800cf95 	.word	0x0800cf95
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
 800cee4:	2101      	movs	r1, #1
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7ff ff87 	bl	800cdfa <SCPI_RegGet>
 800ceec:	4603      	mov	r3, r0
 800ceee:	817b      	strh	r3, [r7, #10]
            mask &= ~STB_SRQ;
 800cef0:	897b      	ldrh	r3, [r7, #10]
 800cef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cef6:	817b      	strh	r3, [r7, #10]
            if (val & mask) {
 800cef8:	883a      	ldrh	r2, [r7, #0]
 800cefa:	897b      	ldrh	r3, [r7, #10]
 800cefc:	4013      	ands	r3, r2
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00a      	beq.n	800cf1a <SCPI_RegSet+0xaa>
                val |= STB_SRQ;
 800cf04:	883b      	ldrh	r3, [r7, #0]
 800cf06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf0a:	803b      	strh	r3, [r7, #0]
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
 800cf0c:	89ba      	ldrh	r2, [r7, #12]
 800cf0e:	883b      	ldrh	r3, [r7, #0]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d03e      	beq.n	800cf92 <SCPI_RegSet+0x122>
                    srq = TRUE;
 800cf14:	2301      	movs	r3, #1
 800cf16:	73fb      	strb	r3, [r7, #15]
                }
            } else {
                val &= ~STB_SRQ;
            }
            break;
 800cf18:	e03b      	b.n	800cf92 <SCPI_RegSet+0x122>
                val &= ~STB_SRQ;
 800cf1a:	883b      	ldrh	r3, [r7, #0]
 800cf1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf20:	803b      	strh	r3, [r7, #0]
            break;
 800cf22:	e036      	b.n	800cf92 <SCPI_RegSet+0x122>
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
 800cf24:	2100      	movs	r1, #0
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7ff ff03 	bl	800cd32 <regUpdate>
            break;
 800cf2c:	e032      	b.n	800cf94 <SCPI_RegSet+0x124>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
 800cf2e:	8839      	ldrh	r1, [r7, #0]
 800cf30:	2320      	movs	r3, #32
 800cf32:	2203      	movs	r2, #3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7ff ff36 	bl	800cda6 <regUpdateSTB>
            break;
 800cf3a:	e02b      	b.n	800cf94 <SCPI_RegSet+0x124>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
 800cf3c:	2102      	movs	r1, #2
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7ff fef7 	bl	800cd32 <regUpdate>
            break;
 800cf44:	e026      	b.n	800cf94 <SCPI_RegSet+0x124>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
 800cf46:	8839      	ldrh	r1, [r7, #0]
 800cf48:	2308      	movs	r3, #8
 800cf4a:	2208      	movs	r2, #8
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7ff ff2a 	bl	800cda6 <regUpdateSTB>
            break;
 800cf52:	e01f      	b.n	800cf94 <SCPI_RegSet+0x124>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
 800cf54:	2107      	movs	r1, #7
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7ff feeb 	bl	800cd32 <regUpdate>
            break;
 800cf5c:	e01a      	b.n	800cf94 <SCPI_RegSet+0x124>
        case SCPI_REG_QUESC:
            regUpdateEvent(context, old_val, val, SCPI_REG_QUES);
 800cf5e:	883a      	ldrh	r2, [r7, #0]
 800cf60:	89b9      	ldrh	r1, [r7, #12]
 800cf62:	2307      	movs	r3, #7
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7ff fefa 	bl	800cd5e <regUpdateEvent>
            break;
 800cf6a:	e013      	b.n	800cf94 <SCPI_RegSet+0x124>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 800cf6c:	8839      	ldrh	r1, [r7, #0]
 800cf6e:	2380      	movs	r3, #128	; 0x80
 800cf70:	2205      	movs	r2, #5
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7ff ff17 	bl	800cda6 <regUpdateSTB>
            break;
 800cf78:	e00c      	b.n	800cf94 <SCPI_RegSet+0x124>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
 800cf7a:	2104      	movs	r1, #4
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff fed8 	bl	800cd32 <regUpdate>
            break;
 800cf82:	e007      	b.n	800cf94 <SCPI_RegSet+0x124>
        case SCPI_REG_OPERC:
            regUpdateEvent(context, old_val, val, SCPI_REG_OPER);
 800cf84:	883a      	ldrh	r2, [r7, #0]
 800cf86:	89b9      	ldrh	r1, [r7, #12]
 800cf88:	2304      	movs	r3, #4
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7ff fee7 	bl	800cd5e <regUpdateEvent>
            break;
 800cf90:	e000      	b.n	800cf94 <SCPI_RegSet+0x124>
            break;
 800cf92:	bf00      	nop
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
 800cf94:	78fa      	ldrb	r2, [r7, #3]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	3224      	adds	r2, #36	; 0x24
 800cf9a:	8839      	ldrh	r1, [r7, #0]
 800cf9c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (srq) {
 800cfa0:	7bfb      	ldrb	r3, [r7, #15]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00b      	beq.n	800cfbe <SCPI_RegSet+0x14e>
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
 800cfa6:	2100      	movs	r1, #0
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f7ff ff26 	bl	800cdfa <SCPI_RegGet>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	2101      	movs	r1, #1
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f7ff ff39 	bl	800ce2c <writeControl>
 800cfba:	e000      	b.n	800cfbe <SCPI_RegSet+0x14e>
        return;
 800cfbc:	bf00      	nop
    }
}
 800cfbe:	3710      	adds	r7, #16
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	460b      	mov	r3, r1
 800cfce:	70fb      	strb	r3, [r7, #3]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 800cfd4:	78fb      	ldrb	r3, [r7, #3]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7ff ff0e 	bl	800cdfa <SCPI_RegGet>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	883b      	ldrh	r3, [r7, #0]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	78fb      	ldrb	r3, [r7, #3]
 800cfea:	4619      	mov	r1, r3
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7ff ff3f 	bl	800ce70 <SCPI_RegSet>
}
 800cff2:	bf00      	nop
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b082      	sub	sp, #8
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	460b      	mov	r3, r1
 800d004:	70fb      	strb	r3, [r7, #3]
 800d006:	4613      	mov	r3, r2
 800d008:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 800d00a:	78fb      	ldrb	r3, [r7, #3]
 800d00c:	4619      	mov	r1, r3
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f7ff fef3 	bl	800cdfa <SCPI_RegGet>
 800d014:	4603      	mov	r3, r0
 800d016:	b21a      	sxth	r2, r3
 800d018:	f9b7 3000 	ldrsh.w	r3, [r7]
 800d01c:	43db      	mvns	r3, r3
 800d01e:	b21b      	sxth	r3, r3
 800d020:	4013      	ands	r3, r2
 800d022:	b21b      	sxth	r3, r3
 800d024:	b29a      	uxth	r2, r3
 800d026:	78fb      	ldrb	r3, [r7, #3]
 800d028:	4619      	mov	r1, r3
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7ff ff20 	bl	800ce70 <SCPI_RegSet>
}
 800d030:	bf00      	nop
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 800d040:	2200      	movs	r2, #0
 800d042:	2102      	movs	r1, #2
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7ff ff13 	bl	800ce70 <SCPI_RegSet>
}
 800d04a:	bf00      	nop
 800d04c:	3708      	adds	r7, #8
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
 800d052:	b580      	push	{r7, lr}
 800d054:	b082      	sub	sp, #8
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
    SCPI_EventClear(context);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f7ff ffec 	bl	800d038 <SCPI_EventClear>
    SCPI_ErrorClear(context);
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff fb9d 	bl	800c7a0 <SCPI_ErrorClear>
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
 800d066:	2200      	movs	r2, #0
 800d068:	2104      	movs	r1, #4
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7ff ff00 	bl	800ce70 <SCPI_RegSet>
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 800d070:	2200      	movs	r2, #0
 800d072:	2107      	movs	r1, #7
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7ff fefb 	bl	800ce70 <SCPI_RegSet>
    return SCPI_RES_OK;
 800d07a:	2301      	movs	r3, #1
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
    int32_t new_ESE;
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 800d08c:	f107 030c 	add.w	r3, r7, #12
 800d090:	2201      	movs	r2, #1
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f002 f929 	bl	800f2ec <SCPI_ParamInt32>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d008      	beq.n	800d0b2 <SCPI_CoreEse+0x2e>
        SCPI_RegSet(context, SCPI_REG_ESE, (scpi_reg_val_t) new_ESE);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	2103      	movs	r1, #3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f7ff fee1 	bl	800ce70 <SCPI_RegSet>
        return SCPI_RES_OK;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e001      	b.n	800d0b6 <SCPI_CoreEse+0x32>
    }
    return SCPI_RES_ERR;
 800d0b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b082      	sub	sp, #8
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESE));
 800d0c6:	2103      	movs	r1, #3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f7ff fe96 	bl	800cdfa <SCPI_RegGet>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f001 fc5d 	bl	800e992 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800d0d8:	2301      	movs	r3, #1
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b082      	sub	sp, #8
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESR));
 800d0ea:	2102      	movs	r1, #2
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7ff fe84 	bl	800cdfa <SCPI_RegGet>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f001 fc4b 	bl	800e992 <SCPI_ResultInt32>
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	2102      	movs	r1, #2
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f7ff feb5 	bl	800ce70 <SCPI_RegSet>
    return SCPI_RES_OK;
 800d106:	2301      	movs	r3, #1
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3708      	adds	r7, #8
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
 800d118:	2201      	movs	r2, #1
 800d11a:	2102      	movs	r1, #2
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7ff ff51 	bl	800cfc4 <SCPI_RegSetBits>
    return SCPI_RES_OK;
 800d122:	2301      	movs	r3, #1
}
 800d124:	4618      	mov	r0, r3
 800d126:	3708      	adds	r7, #8
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
    /* Operation is always completed */
    SCPI_ResultInt32(context, 1);
 800d134:	2101      	movs	r1, #1
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f001 fc2b 	bl	800e992 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800d13c:	2301      	movs	r3, #1
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 800d146:	b580      	push	{r7, lr}
 800d148:	b084      	sub	sp, #16
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
    int32_t new_SRE;
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 800d14e:	f107 030c 	add.w	r3, r7, #12
 800d152:	2201      	movs	r2, #1
 800d154:	4619      	mov	r1, r3
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f002 f8c8 	bl	800f2ec <SCPI_ParamInt32>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d008      	beq.n	800d174 <SCPI_CoreSre+0x2e>
        SCPI_RegSet(context, SCPI_REG_SRE, (scpi_reg_val_t) new_SRE);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	b29b      	uxth	r3, r3
 800d166:	461a      	mov	r2, r3
 800d168:	2101      	movs	r1, #1
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7ff fe80 	bl	800ce70 <SCPI_RegSet>
        return SCPI_RES_OK;
 800d170:	2301      	movs	r3, #1
 800d172:	e001      	b.n	800d178 <SCPI_CoreSre+0x32>
    }
    return SCPI_RES_ERR;
 800d174:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_SRE));
 800d188:	2101      	movs	r1, #1
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f7ff fe35 	bl	800cdfa <SCPI_RegGet>
 800d190:	4603      	mov	r3, r0
 800d192:	4619      	mov	r1, r3
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f001 fbfc 	bl	800e992 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800d19a:	2301      	movs	r3, #1
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3708      	adds	r7, #8
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_STB));
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7ff fe23 	bl	800cdfa <SCPI_RegGet>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f001 fbea 	bl	800e992 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800d1be:	2301      	movs	r3, #1
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3708      	adds	r7, #8
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <SCPI_CoreWai>:
/**
 * *WAI
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
 800d1d0:	2301      	movs	r3, #1
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	370c      	adds	r7, #12
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr

0800d1de <isws>:
/**
 * Is white space
 * @param c
 * @return 
 */
static int isws(int c) {
 800d1de:	b480      	push	{r7}
 800d1e0:	b083      	sub	sp, #12
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
    if ((c == ' ') || (c == '\t')) {
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2b20      	cmp	r3, #32
 800d1ea:	d002      	beq.n	800d1f2 <isws+0x14>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b09      	cmp	r3, #9
 800d1f0:	d101      	bne.n	800d1f6 <isws+0x18>
        return 1;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e000      	b.n	800d1f8 <isws+0x1a>
    }
    return 0;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <isbdigit>:
/**
 * Is binary digit
 * @param c
 * @return 
 */
static int isbdigit(int c) {
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1')) {
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b30      	cmp	r3, #48	; 0x30
 800d210:	d002      	beq.n	800d218 <isbdigit+0x14>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2b31      	cmp	r3, #49	; 0x31
 800d216:	d101      	bne.n	800d21c <isbdigit+0x18>
        return 1;
 800d218:	2301      	movs	r3, #1
 800d21a:	e000      	b.n	800d21e <isbdigit+0x1a>
    }
    return 0;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	370c      	adds	r7, #12
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr

0800d22a <isqdigit>:
/**
 * Is hexadecimal digit
 * @param c
 * @return 
 */
static int isqdigit(int c) {
 800d22a:	b480      	push	{r7}
 800d22c:	b083      	sub	sp, #12
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7')) {
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2b30      	cmp	r3, #48	; 0x30
 800d236:	d014      	beq.n	800d262 <isqdigit+0x38>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2b31      	cmp	r3, #49	; 0x31
 800d23c:	d011      	beq.n	800d262 <isqdigit+0x38>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2b32      	cmp	r3, #50	; 0x32
 800d242:	d00e      	beq.n	800d262 <isqdigit+0x38>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b33      	cmp	r3, #51	; 0x33
 800d248:	d00b      	beq.n	800d262 <isqdigit+0x38>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2b34      	cmp	r3, #52	; 0x34
 800d24e:	d008      	beq.n	800d262 <isqdigit+0x38>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b35      	cmp	r3, #53	; 0x35
 800d254:	d005      	beq.n	800d262 <isqdigit+0x38>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b36      	cmp	r3, #54	; 0x36
 800d25a:	d002      	beq.n	800d262 <isqdigit+0x38>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2b37      	cmp	r3, #55	; 0x37
 800d260:	d101      	bne.n	800d266 <isqdigit+0x3c>
        return 1;
 800d262:	2301      	movs	r3, #1
 800d264:	e000      	b.n	800d268 <isqdigit+0x3e>
    }
    return 0;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <iseos>:
/**
 * Is end of string
 * @param state
 * @return 
 */
static int iseos(lex_state_t * state) {
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
    if ((state->buffer + state->len) <= (state->pos)) {
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	6892      	ldr	r2, [r2, #8]
 800d284:	441a      	add	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d801      	bhi.n	800d292 <iseos+0x1e>
        return 1;
 800d28e:	2301      	movs	r3, #1
 800d290:	e000      	b.n	800d294 <iseos+0x20>
    } else {
        return 0;
 800d292:	2300      	movs	r3, #0
    }
}
 800d294:	4618      	mov	r0, r3
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <scpiLex_IsEos>:
/**
 * Private export of iseos
 * @param state
 * @return 
 */
int scpiLex_IsEos(lex_state_t * state) {
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
    return iseos(state);
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f7ff ffe3 	bl	800d274 <iseos>
 800d2ae:	4603      	mov	r3, r0
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <ischr>:
 * Test current character
 * @param state
 * @param chr
 * @return 
 */
static int ischr(lex_state_t * state, char chr) {
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	70fb      	strb	r3, [r7, #3]
    return (state->pos[0] == chr);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	78fa      	ldrb	r2, [r7, #3]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	bf0c      	ite	eq
 800d2d0:	2301      	moveq	r3, #1
 800d2d2:	2300      	movne	r3, #0
 800d2d4:	b2db      	uxtb	r3, r3
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	370c      	adds	r7, #12
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <isplusmn>:
/**
 * Is plus or minus
 * @param c
 * @return 
 */
static int isplusmn(int c) {
 800d2e2:	b480      	push	{r7}
 800d2e4:	b083      	sub	sp, #12
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
    return c == '+' || c == '-';
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b2b      	cmp	r3, #43	; 0x2b
 800d2ee:	d002      	beq.n	800d2f6 <isplusmn+0x14>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2b2d      	cmp	r3, #45	; 0x2d
 800d2f4:	d101      	bne.n	800d2fa <isplusmn+0x18>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e000      	b.n	800d2fc <isplusmn+0x1a>
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	370c      	adds	r7, #12
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <isH>:
/**
 * Is letter H
 * @param c
 * @return 
 */
static int isH(int c) {
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
    return c == 'h' || c == 'H';
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2b68      	cmp	r3, #104	; 0x68
 800d314:	d002      	beq.n	800d31c <isH+0x14>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b48      	cmp	r3, #72	; 0x48
 800d31a:	d101      	bne.n	800d320 <isH+0x18>
 800d31c:	2301      	movs	r3, #1
 800d31e:	e000      	b.n	800d322 <isH+0x1a>
 800d320:	2300      	movs	r3, #0
}
 800d322:	4618      	mov	r0, r3
 800d324:	370c      	adds	r7, #12
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <isB>:
/**
 * Is letter B
 * @param c
 * @return 
 */
static int isB(int c) {
 800d32e:	b480      	push	{r7}
 800d330:	b083      	sub	sp, #12
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
    return c == 'b' || c == 'B';
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2b62      	cmp	r3, #98	; 0x62
 800d33a:	d002      	beq.n	800d342 <isB+0x14>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b42      	cmp	r3, #66	; 0x42
 800d340:	d101      	bne.n	800d346 <isB+0x18>
 800d342:	2301      	movs	r3, #1
 800d344:	e000      	b.n	800d348 <isB+0x1a>
 800d346:	2300      	movs	r3, #0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <isQ>:
/**
 * Is letter Q
 * @param c
 * @return 
 */
static int isQ(int c) {
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
    return c == 'q' || c == 'Q';
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2b71      	cmp	r3, #113	; 0x71
 800d360:	d002      	beq.n	800d368 <isQ+0x14>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b51      	cmp	r3, #81	; 0x51
 800d366:	d101      	bne.n	800d36c <isQ+0x18>
 800d368:	2301      	movs	r3, #1
 800d36a:	e000      	b.n	800d36e <isQ+0x1a>
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	370c      	adds	r7, #12
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr

0800d37a <isE>:
/**
 * Is letter E
 * @param c
 * @return 
 */
static int isE(int c) {
 800d37a:	b480      	push	{r7}
 800d37c:	b083      	sub	sp, #12
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
    return c == 'e' || c == 'E';
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b65      	cmp	r3, #101	; 0x65
 800d386:	d002      	beq.n	800d38e <isE+0x14>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2b45      	cmp	r3, #69	; 0x45
 800d38c:	d101      	bne.n	800d392 <isE+0x18>
 800d38e:	2301      	movs	r3, #1
 800d390:	e000      	b.n	800d394 <isE+0x1a>
 800d392:	2300      	movs	r3, #0
}
 800d394:	4618      	mov	r0, r3
 800d396:	370c      	adds	r7, #12
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr

0800d3a0 <skipWs>:
/**
 * Skip all whitespaces
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
    int someSpace = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 800d3ac:	e007      	b.n	800d3be <skipWs+0x1e>
        state->pos++;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	1c5a      	adds	r2, r3, #1
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	605a      	str	r2, [r3, #4]
        someSpace++;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7ff ff58 	bl	800d274 <iseos>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d108      	bne.n	800d3dc <skipWs+0x3c>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7ff ff04 	bl	800d1de <isws>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1e8      	bne.n	800d3ae <skipWs+0xe>
    }

    return someSpace;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <skipDigit>:
/**
 * Skip decimal digit
 * @param state
 * @return 
 */
static int skipDigit(lex_state_t * state) {
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b082      	sub	sp, #8
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f7ff ff40 	bl	800d274 <iseos>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d113      	bne.n	800d422 <skipDigit+0x3c>
 800d3fa:	f004 fde3 	bl	8011fc4 <__locale_ctype_ptr>
 800d3fe:	4602      	mov	r2, r0
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	3301      	adds	r3, #1
 800d408:	4413      	add	r3, r2
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	f003 0304 	and.w	r3, r3, #4
 800d410:	2b00      	cmp	r3, #0
 800d412:	d006      	beq.n	800d422 <skipDigit+0x3c>
        state->pos++;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	1c5a      	adds	r2, r3, #1
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800d41e:	2301      	movs	r3, #1
 800d420:	e000      	b.n	800d424 <skipDigit+0x3e>
    } else {
        return SKIP_NONE;
 800d422:	2300      	movs	r3, #0
    }
}
 800d424:	4618      	mov	r0, r3
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <skipNumbers>:
/**
 * Skip multiple decimal digits
 * @param state
 * @return 
 */
static int skipNumbers(lex_state_t * state) {
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800d434:	2300      	movs	r3, #0
 800d436:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 800d438:	e007      	b.n	800d44a <skipNumbers+0x1e>
        state->pos++;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	605a      	str	r2, [r3, #4]
        someNumbers++;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	3301      	adds	r3, #1
 800d448:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f7ff ff12 	bl	800d274 <iseos>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d10c      	bne.n	800d470 <skipNumbers+0x44>
 800d456:	f004 fdb5 	bl	8011fc4 <__locale_ctype_ptr>
 800d45a:	4602      	mov	r2, r0
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	3301      	adds	r3, #1
 800d464:	4413      	add	r3, r2
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	f003 0304 	and.w	r3, r3, #4
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1e4      	bne.n	800d43a <skipNumbers+0xe>
    }
    return someNumbers;
 800d470:	68fb      	ldr	r3, [r7, #12]
}
 800d472:	4618      	mov	r0, r3
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}

0800d47a <skipPlusmn>:
/**
 * Skip plus or minus
 * @param state
 * @return 
 */
static int skipPlusmn(lex_state_t * state) {
 800d47a:	b580      	push	{r7, lr}
 800d47c:	b082      	sub	sp, #8
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isplusmn(state->pos[0])) {
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f7ff fef6 	bl	800d274 <iseos>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10f      	bne.n	800d4ae <skipPlusmn+0x34>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	4618      	mov	r0, r3
 800d496:	f7ff ff24 	bl	800d2e2 <isplusmn>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d006      	beq.n	800d4ae <skipPlusmn+0x34>
        state->pos++;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	1c5a      	adds	r2, r3, #1
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e000      	b.n	800d4b0 <skipPlusmn+0x36>
    } else {
        return SKIP_NONE;
 800d4ae:	2300      	movs	r3, #0
    }
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <skipAlpha>:
/**
 * Skip any character from 'a'-'Z'
 * @param state
 * @return 
 */
static int skipAlpha(lex_state_t * state) {
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
    int someLetters = 0;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800d4c4:	e007      	b.n	800d4d6 <skipAlpha+0x1e>
        state->pos++;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	1c5a      	adds	r2, r3, #1
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	605a      	str	r2, [r3, #4]
        someLetters++;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7ff fecc 	bl	800d274 <iseos>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10c      	bne.n	800d4fc <skipAlpha+0x44>
 800d4e2:	f004 fd6f 	bl	8011fc4 <__locale_ctype_ptr>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	4413      	add	r3, r2
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	f003 0303 	and.w	r3, r3, #3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1e4      	bne.n	800d4c6 <skipAlpha+0xe>
    }
    return someLetters;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3710      	adds	r7, #16
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <skipChr>:
 * Skip exact character chr or nothing
 * @param state
 * @param chr
 * @return 
 */
static int skipChr(lex_state_t * state, char chr) {
 800d506:	b580      	push	{r7, lr}
 800d508:	b082      	sub	sp, #8
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
 800d50e:	460b      	mov	r3, r1
 800d510:	70fb      	strb	r3, [r7, #3]
    if (!iseos(state) && ischr(state, chr)) {
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f7ff feae 	bl	800d274 <iseos>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10e      	bne.n	800d53c <skipChr+0x36>
 800d51e:	78fb      	ldrb	r3, [r7, #3]
 800d520:	4619      	mov	r1, r3
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f7ff fec8 	bl	800d2b8 <ischr>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d006      	beq.n	800d53c <skipChr+0x36>
        state->pos++;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800d538:	2301      	movs	r3, #1
 800d53a:	e000      	b.n	800d53e <skipChr+0x38>
    } else {
        return SKIP_NONE;
 800d53c:	2300      	movs	r3, #0
    }
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3708      	adds	r7, #8
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <skipSlashDot>:
/**
 * Skip slash or dot
 * @param state
 * @return 
 */
static int skipSlashDot(lex_state_t * state) {
 800d546:	b590      	push	{r4, r7, lr}
 800d548:	b083      	sub	sp, #12
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7ff fe90 	bl	800d274 <iseos>
 800d554:	4603      	mov	r3, r0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d113      	bne.n	800d582 <skipSlashDot+0x3c>
 800d55a:	212f      	movs	r1, #47	; 0x2f
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f7ff feab 	bl	800d2b8 <ischr>
 800d562:	4604      	mov	r4, r0
 800d564:	212e      	movs	r1, #46	; 0x2e
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7ff fea6 	bl	800d2b8 <ischr>
 800d56c:	4603      	mov	r3, r0
 800d56e:	4323      	orrs	r3, r4
 800d570:	2b00      	cmp	r3, #0
 800d572:	d006      	beq.n	800d582 <skipSlashDot+0x3c>
        state->pos++;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	1c5a      	adds	r2, r3, #1
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800d57e:	2301      	movs	r3, #1
 800d580:	e000      	b.n	800d584 <skipSlashDot+0x3e>
    } else {
        return SKIP_NONE;
 800d582:	2300      	movs	r3, #0
    }
}
 800d584:	4618      	mov	r0, r3
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd90      	pop	{r4, r7, pc}

0800d58c <skipStar>:
/**
 * Skip star
 * @param state
 * @return 
 */
static int skipStar(lex_state_t * state) {
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, '*')) {
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7ff fe6d 	bl	800d274 <iseos>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d10d      	bne.n	800d5bc <skipStar+0x30>
 800d5a0:	212a      	movs	r1, #42	; 0x2a
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f7ff fe88 	bl	800d2b8 <ischr>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d006      	beq.n	800d5bc <skipStar+0x30>
        state->pos++;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	1c5a      	adds	r2, r3, #1
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	e000      	b.n	800d5be <skipStar+0x32>
    } else {
        return SKIP_NONE;
 800d5bc:	2300      	movs	r3, #0
    }
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <skipColon>:
/**
 * Skip colon
 * @param state
 * @return 
 */
static int skipColon(lex_state_t * state) {
 800d5c6:	b580      	push	{r7, lr}
 800d5c8:	b082      	sub	sp, #8
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, ':')) {
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7ff fe50 	bl	800d274 <iseos>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10d      	bne.n	800d5f6 <skipColon+0x30>
 800d5da:	213a      	movs	r1, #58	; 0x3a
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f7ff fe6b 	bl	800d2b8 <ischr>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d006      	beq.n	800d5f6 <skipColon+0x30>
        state->pos++;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	1c5a      	adds	r2, r3, #1
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e000      	b.n	800d5f8 <skipColon+0x32>
    } else {
        return SKIP_NONE;
 800d5f6:	2300      	movs	r3, #0
    }
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <skipProgramMnemonic>:
/**
 * Skip program mnemonic [a-z][a-z0-9_]*
 * @param state
 * @return 
 */
static int skipProgramMnemonic(lex_state_t * state) {
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
    const char * startPos = state->pos;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	60fb      	str	r3, [r7, #12]
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f7ff fe30 	bl	800d274 <iseos>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d131      	bne.n	800d67e <skipProgramMnemonic+0x7e>
 800d61a:	f004 fcd3 	bl	8011fc4 <__locale_ctype_ptr>
 800d61e:	4602      	mov	r2, r0
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	3301      	adds	r3, #1
 800d628:	4413      	add	r3, r2
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	f003 0303 	and.w	r3, r3, #3
 800d630:	2b00      	cmp	r3, #0
 800d632:	d024      	beq.n	800d67e <skipProgramMnemonic+0x7e>
        state->pos++;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	1c5a      	adds	r2, r3, #1
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800d63e:	e004      	b.n	800d64a <skipProgramMnemonic+0x4a>
            state->pos++;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	1c5a      	adds	r2, r3, #1
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7ff fe12 	bl	800d274 <iseos>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d113      	bne.n	800d67e <skipProgramMnemonic+0x7e>
 800d656:	f004 fcb5 	bl	8011fc4 <__locale_ctype_ptr>
 800d65a:	4602      	mov	r2, r0
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	3301      	adds	r3, #1
 800d664:	4413      	add	r3, r2
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	f003 0307 	and.w	r3, r3, #7
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d1e7      	bne.n	800d640 <skipProgramMnemonic+0x40>
 800d670:	215f      	movs	r1, #95	; 0x5f
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7ff fe20 	bl	800d2b8 <ischr>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d1e0      	bne.n	800d640 <skipProgramMnemonic+0x40>
        }
    }

    if (iseos(state)) {
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f7ff fdf8 	bl	800d274 <iseos>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d004      	beq.n	800d694 <skipProgramMnemonic+0x94>
        return (state->pos - startPos) * SKIP_INCOMPLETE;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	6852      	ldr	r2, [r2, #4]
 800d690:	1a9b      	subs	r3, r3, r2
 800d692:	e004      	b.n	800d69e <skipProgramMnemonic+0x9e>
    } else {
        return (state->pos - startPos) * SKIP_OK;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	461a      	mov	r2, r3
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	1ad3      	subs	r3, r2, r3
    }
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <scpiLex_WhiteSpace>:
 * Detect token white space
 * @param state
 * @param token
 * @return 
 */
int scpiLex_WhiteSpace(lex_state_t * state, scpi_token_t * token) {
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b082      	sub	sp, #8
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
 800d6ae:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685a      	ldr	r2, [r3, #4]
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	605a      	str	r2, [r3, #4]

    skipWs(state);
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f7ff fe71 	bl	800d3a0 <skipWs>

    token->len = state->pos - token->ptr;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	1ad2      	subs	r2, r2, r3
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	609a      	str	r2, [r3, #8]

    if (token->len > 0) {
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	dd03      	ble.n	800d6de <scpiLex_WhiteSpace+0x38>
        token->type = SCPI_TOKEN_WS;
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	2217      	movs	r2, #23
 800d6da:	701a      	strb	r2, [r3, #0]
 800d6dc:	e002      	b.n	800d6e4 <scpiLex_WhiteSpace+0x3e>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	221a      	movs	r2, #26
 800d6e2:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	689b      	ldr	r3, [r3, #8]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3708      	adds	r7, #8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <skipCommonProgramHeader>:
/**
 * Skip command program header \*<PROGRAM MNEMONIC>
 * @param state
 * @return 
 */
static int skipCommonProgramHeader(lex_state_t * state) {
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
    int res;
    if (skipStar(state)) {
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f7ff ff47 	bl	800d58c <skipStar>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d01c      	beq.n	800d73e <skipCommonProgramHeader+0x4e>
        res = skipProgramMnemonic(state);
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f7ff ff7b 	bl	800d600 <skipProgramMnemonic>
 800d70a:	60f8      	str	r0, [r7, #12]
        if (res == SKIP_NONE && iseos(state)) {
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d108      	bne.n	800d724 <skipCommonProgramHeader+0x34>
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f7ff fdae 	bl	800d274 <iseos>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d002      	beq.n	800d724 <skipCommonProgramHeader+0x34>
            return SKIP_INCOMPLETE;
 800d71e:	f04f 33ff 	mov.w	r3, #4294967295
 800d722:	e00d      	b.n	800d740 <skipCommonProgramHeader+0x50>
        } else if (res <= SKIP_INCOMPLETE) {
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2b00      	cmp	r3, #0
 800d728:	da01      	bge.n	800d72e <skipCommonProgramHeader+0x3e>
            return SKIP_OK;
 800d72a:	2301      	movs	r3, #1
 800d72c:	e008      	b.n	800d740 <skipCommonProgramHeader+0x50>
        } else if (res >= SKIP_OK) {
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2b00      	cmp	r3, #0
 800d732:	dd01      	ble.n	800d738 <skipCommonProgramHeader+0x48>
            return SKIP_OK;
 800d734:	2301      	movs	r3, #1
 800d736:	e003      	b.n	800d740 <skipCommonProgramHeader+0x50>
        } else {
            return SKIP_INCOMPLETE;
 800d738:	f04f 33ff 	mov.w	r3, #4294967295
 800d73c:	e000      	b.n	800d740 <skipCommonProgramHeader+0x50>
        }
    }
    return SKIP_NONE;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3710      	adds	r7, #16
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <skipCompoundProgramHeader>:
/**
 * Skip compound program header :<PROGRAM MNEMONIC>:<PROGRAM MNEMONIC>...
 * @param state
 * @return 
 */
static int skipCompoundProgramHeader(lex_state_t * state) {
 800d748:	b580      	push	{r7, lr}
 800d74a:	b084      	sub	sp, #16
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
    int res;
    int firstColon = skipColon(state);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f7ff ff38 	bl	800d5c6 <skipColon>
 800d756:	60f8      	str	r0, [r7, #12]

    res = skipProgramMnemonic(state);
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f7ff ff51 	bl	800d600 <skipProgramMnemonic>
 800d75e:	60b8      	str	r0, [r7, #8]
    if (res >= SKIP_OK) {
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	2b00      	cmp	r3, #0
 800d764:	dd17      	ble.n	800d796 <skipCompoundProgramHeader+0x4e>
        while (skipColon(state)) {
 800d766:	e00e      	b.n	800d786 <skipCompoundProgramHeader+0x3e>
            res = skipProgramMnemonic(state);
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f7ff ff49 	bl	800d600 <skipProgramMnemonic>
 800d76e:	60b8      	str	r0, [r7, #8]
            if (res <= SKIP_INCOMPLETE) {
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	2b00      	cmp	r3, #0
 800d774:	da01      	bge.n	800d77a <skipCompoundProgramHeader+0x32>
                return SKIP_OK;
 800d776:	2301      	movs	r3, #1
 800d778:	e019      	b.n	800d7ae <skipCompoundProgramHeader+0x66>
            } else if (res == SKIP_NONE) {
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d102      	bne.n	800d786 <skipCompoundProgramHeader+0x3e>
                return SKIP_INCOMPLETE;
 800d780:	f04f 33ff 	mov.w	r3, #4294967295
 800d784:	e013      	b.n	800d7ae <skipCompoundProgramHeader+0x66>
        while (skipColon(state)) {
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7ff ff1d 	bl	800d5c6 <skipColon>
 800d78c:	4603      	mov	r3, r0
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1ea      	bne.n	800d768 <skipCompoundProgramHeader+0x20>
            }
        }
        return SKIP_OK;
 800d792:	2301      	movs	r3, #1
 800d794:	e00b      	b.n	800d7ae <skipCompoundProgramHeader+0x66>
    } else if (res <= SKIP_INCOMPLETE) {
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	da01      	bge.n	800d7a0 <skipCompoundProgramHeader+0x58>
        return SKIP_OK;
 800d79c:	2301      	movs	r3, #1
 800d79e:	e006      	b.n	800d7ae <skipCompoundProgramHeader+0x66>
    } else if (firstColon) {
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d002      	beq.n	800d7ac <skipCompoundProgramHeader+0x64>
        return SKIP_INCOMPLETE;
 800d7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7aa:	e000      	b.n	800d7ae <skipCompoundProgramHeader+0x66>
    } else {
        return SKIP_NONE;
 800d7ac:	2300      	movs	r3, #0
    }
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <scpiLex_ProgramHeader>:
 * Detect token command or compound program header
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b084      	sub	sp, #16
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	6039      	str	r1, [r7, #0]
    int res;
    token->ptr = state->pos;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	685a      	ldr	r2, [r3, #4]
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	221a      	movs	r2, #26
 800d7cc:	701a      	strb	r2, [r3, #0]

    res = skipCommonProgramHeader(state);
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f7ff ff8e 	bl	800d6f0 <skipCommonProgramHeader>
 800d7d4:	60f8      	str	r0, [r7, #12]
    if (res >= SKIP_OK) {
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	dd0e      	ble.n	800d7fa <scpiLex_ProgramHeader+0x44>
        if (skipChr(state, '?') >= SKIP_OK) {
 800d7dc:	213f      	movs	r1, #63	; 0x3f
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7ff fe91 	bl	800d506 <skipChr>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	dd03      	ble.n	800d7f2 <scpiLex_ProgramHeader+0x3c>
            token->type = SCPI_TOKEN_COMMON_QUERY_PROGRAM_HEADER;
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	2216      	movs	r2, #22
 800d7ee:	701a      	strb	r2, [r3, #0]
 800d7f0:	e029      	b.n	800d846 <scpiLex_ProgramHeader+0x90>
        } else {
            token->type = SCPI_TOKEN_COMMON_PROGRAM_HEADER;
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	2213      	movs	r2, #19
 800d7f6:	701a      	strb	r2, [r3, #0]
 800d7f8:	e025      	b.n	800d846 <scpiLex_ProgramHeader+0x90>
        }
    } else if (res <= SKIP_INCOMPLETE) {
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	da03      	bge.n	800d808 <scpiLex_ProgramHeader+0x52>
        token->type = SCPI_TOKEN_INCOMPLETE_COMMON_PROGRAM_HEADER;
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	2214      	movs	r2, #20
 800d804:	701a      	strb	r2, [r3, #0]
 800d806:	e01e      	b.n	800d846 <scpiLex_ProgramHeader+0x90>
    } else if (res == SKIP_NONE) {
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d11b      	bne.n	800d846 <scpiLex_ProgramHeader+0x90>
        res = skipCompoundProgramHeader(state);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff ff9a 	bl	800d748 <skipCompoundProgramHeader>
 800d814:	60f8      	str	r0, [r7, #12]

        if (res >= SKIP_OK) {
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	dd0e      	ble.n	800d83a <scpiLex_ProgramHeader+0x84>
            if (skipChr(state, '?') >= SKIP_OK) {
 800d81c:	213f      	movs	r1, #63	; 0x3f
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7ff fe71 	bl	800d506 <skipChr>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	dd03      	ble.n	800d832 <scpiLex_ProgramHeader+0x7c>
                token->type = SCPI_TOKEN_COMPOUND_QUERY_PROGRAM_HEADER;
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	2215      	movs	r2, #21
 800d82e:	701a      	strb	r2, [r3, #0]
 800d830:	e009      	b.n	800d846 <scpiLex_ProgramHeader+0x90>
            } else {
                token->type = SCPI_TOKEN_COMPOUND_PROGRAM_HEADER;
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	2211      	movs	r2, #17
 800d836:	701a      	strb	r2, [r3, #0]
 800d838:	e005      	b.n	800d846 <scpiLex_ProgramHeader+0x90>
            }
        } else if (res <= SKIP_INCOMPLETE) {
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	da02      	bge.n	800d846 <scpiLex_ProgramHeader+0x90>
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2212      	movs	r2, #18
 800d844:	701a      	strb	r2, [r3, #0]
        }
    }

    if (token->type != SCPI_TOKEN_UNKNOWN) {
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	2b1a      	cmp	r3, #26
 800d84c:	d008      	beq.n	800d860 <scpiLex_ProgramHeader+0xaa>
        token->len = state->pos - token->ptr;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	461a      	mov	r2, r3
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	1ad2      	subs	r2, r2, r3
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	609a      	str	r2, [r3, #8]
 800d85e:	e006      	b.n	800d86e <scpiLex_ProgramHeader+0xb8>
    } else {
        token->len = 0;
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	2200      	movs	r2, #0
 800d864:	609a      	str	r2, [r3, #8]
        state->pos = token->ptr;
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	685a      	ldr	r2, [r3, #4]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	605a      	str	r2, [r3, #4]
    }

    return token->len;
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	689b      	ldr	r3, [r3, #8]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <scpiLex_CharacterProgramData>:
 * Detect token "Character program data"
 * @param state
 * @param token
 * @return 
 */
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b082      	sub	sp, #8
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	685a      	ldr	r2, [r3, #4]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f7ff fcf1 	bl	800d274 <iseos>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d131      	bne.n	800d8fc <scpiLex_CharacterProgramData+0x82>
 800d898:	f004 fb94 	bl	8011fc4 <__locale_ctype_ptr>
 800d89c:	4602      	mov	r2, r0
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	4413      	add	r3, r2
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	f003 0303 	and.w	r3, r3, #3
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d024      	beq.n	800d8fc <scpiLex_CharacterProgramData+0x82>
        state->pos++;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	1c5a      	adds	r2, r3, #1
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800d8bc:	e004      	b.n	800d8c8 <scpiLex_CharacterProgramData+0x4e>
            state->pos++;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	1c5a      	adds	r2, r3, #1
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f7ff fcd3 	bl	800d274 <iseos>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d113      	bne.n	800d8fc <scpiLex_CharacterProgramData+0x82>
 800d8d4:	f004 fb76 	bl	8011fc4 <__locale_ctype_ptr>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	4413      	add	r3, r2
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	f003 0307 	and.w	r3, r3, #7
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1e7      	bne.n	800d8be <scpiLex_CharacterProgramData+0x44>
 800d8ee:	215f      	movs	r1, #95	; 0x5f
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7ff fce1 	bl	800d2b8 <ischr>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d1e0      	bne.n	800d8be <scpiLex_CharacterProgramData+0x44>
        }
    }

    token->len = state->pos - token->ptr;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	461a      	mov	r2, r3
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	1ad2      	subs	r2, r2, r3
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	2b00      	cmp	r3, #0
 800d912:	dd03      	ble.n	800d91c <scpiLex_CharacterProgramData+0xa2>
        token->type = SCPI_TOKEN_PROGRAM_MNEMONIC;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2209      	movs	r2, #9
 800d918:	701a      	strb	r2, [r3, #0]
 800d91a:	e002      	b.n	800d922 <scpiLex_CharacterProgramData+0xa8>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	221a      	movs	r2, #26
 800d920:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	689b      	ldr	r3, [r3, #8]
}
 800d926:	4618      	mov	r0, r3
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <skipMantisa>:

/* 7.7.2 <DECIMAL NUMERIC PROGRAM DATA> */
static int skipMantisa(lex_state_t * state) {
 800d92e:	b580      	push	{r7, lr}
 800d930:	b084      	sub	sp, #16
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800d936:	2300      	movs	r3, #0
 800d938:	60fb      	str	r3, [r7, #12]

    skipPlusmn(state);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7ff fd9d 	bl	800d47a <skipPlusmn>

    someNumbers += skipNumbers(state);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f7ff fd73 	bl	800d42c <skipNumbers>
 800d946:	4602      	mov	r2, r0
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	4413      	add	r3, r2
 800d94c:	60fb      	str	r3, [r7, #12]

    if (skipChr(state, '.')) {
 800d94e:	212e      	movs	r1, #46	; 0x2e
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7ff fdd8 	bl	800d506 <skipChr>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d006      	beq.n	800d96a <skipMantisa+0x3c>
        someNumbers += skipNumbers(state);
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f7ff fd65 	bl	800d42c <skipNumbers>
 800d962:	4602      	mov	r2, r0
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	4413      	add	r3, r2
 800d968:	60fb      	str	r3, [r7, #12]
    }

    return someNumbers;
 800d96a:	68fb      	ldr	r3, [r7, #12]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3710      	adds	r7, #16
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <skipExponent>:

static int skipExponent(lex_state_t * state) {
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800d97c:	2300      	movs	r3, #0
 800d97e:	60fb      	str	r3, [r7, #12]

    if (!iseos(state) && isE(state->pos[0])) {
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f7ff fc77 	bl	800d274 <iseos>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d117      	bne.n	800d9bc <skipExponent+0x48>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	4618      	mov	r0, r3
 800d994:	f7ff fcf1 	bl	800d37a <isE>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00e      	beq.n	800d9bc <skipExponent+0x48>
        state->pos++;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	1c5a      	adds	r2, r3, #1
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	605a      	str	r2, [r3, #4]

        skipWs(state);
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7ff fcf9 	bl	800d3a0 <skipWs>

        skipPlusmn(state);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f7ff fd63 	bl	800d47a <skipPlusmn>

        someNumbers = skipNumbers(state);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7ff fd39 	bl	800d42c <skipNumbers>
 800d9ba:	60f8      	str	r0, [r7, #12]
    }

    return someNumbers;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <scpiLex_DecimalNumericProgramData>:
 * Detect token Decimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b084      	sub	sp, #16
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
 800d9ce:	6039      	str	r1, [r7, #0]
    char * rollback;
    token->ptr = state->pos;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	685a      	ldr	r2, [r3, #4]
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	605a      	str	r2, [r3, #4]

    if (skipMantisa(state)) {
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f7ff ffa8 	bl	800d92e <skipMantisa>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00f      	beq.n	800da04 <scpiLex_DecimalNumericProgramData+0x3e>
        rollback = state->pos;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	60fb      	str	r3, [r7, #12]
        skipWs(state);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f7ff fcd8 	bl	800d3a0 <skipWs>
        if (!skipExponent(state)) {
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7ff ffbf 	bl	800d974 <skipExponent>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d107      	bne.n	800da0c <scpiLex_DecimalNumericProgramData+0x46>
            state->pos = rollback;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	605a      	str	r2, [r3, #4]
 800da02:	e003      	b.n	800da0c <scpiLex_DecimalNumericProgramData+0x46>
        }
    } else {
        state->pos = token->ptr;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	685a      	ldr	r2, [r3, #4]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	605a      	str	r2, [r3, #4]
    }

    token->len = state->pos - token->ptr;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	461a      	mov	r2, r3
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	1ad2      	subs	r2, r2, r3
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	2b00      	cmp	r3, #0
 800da22:	dd03      	ble.n	800da2c <scpiLex_DecimalNumericProgramData+0x66>
        token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA;
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	220a      	movs	r2, #10
 800da28:	701a      	strb	r2, [r3, #0]
 800da2a:	e002      	b.n	800da32 <scpiLex_DecimalNumericProgramData+0x6c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	221a      	movs	r2, #26
 800da30:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	689b      	ldr	r3, [r3, #8]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <scpiLex_SuffixProgramData>:

/* 7.7.3 <SUFFIX PROGRAM DATA> */
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 800da3e:	b580      	push	{r7, lr}
 800da40:	b082      	sub	sp, #8
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
 800da46:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	605a      	str	r2, [r3, #4]

    skipChr(state, '/');
 800da50:	212f      	movs	r1, #47	; 0x2f
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7ff fd57 	bl	800d506 <skipChr>

    /* TODO: strict parsing  : SLASH? (ALPHA+ (MINUS? DIGIT)?) ((SLASH | DOT) (ALPHA+ (MINUS? DIGIT)?))* */
    if (skipAlpha(state)) {
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7ff fd2d 	bl	800d4b8 <skipAlpha>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d017      	beq.n	800da94 <scpiLex_SuffixProgramData+0x56>
        skipChr(state, '-');
 800da64:	212d      	movs	r1, #45	; 0x2d
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7ff fd4d 	bl	800d506 <skipChr>
        skipDigit(state);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff fcba 	bl	800d3e6 <skipDigit>

        while (skipSlashDot(state)) {
 800da72:	e009      	b.n	800da88 <scpiLex_SuffixProgramData+0x4a>
            skipAlpha(state);
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f7ff fd1f 	bl	800d4b8 <skipAlpha>
            skipChr(state, '-');
 800da7a:	212d      	movs	r1, #45	; 0x2d
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f7ff fd42 	bl	800d506 <skipChr>
            skipDigit(state);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7ff fcaf 	bl	800d3e6 <skipDigit>
        while (skipSlashDot(state)) {
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7ff fd5c 	bl	800d546 <skipSlashDot>
 800da8e:	4603      	mov	r3, r0
 800da90:	2b00      	cmp	r3, #0
 800da92:	d1ef      	bne.n	800da74 <scpiLex_SuffixProgramData+0x36>
        }
    }

    token->len = state->pos - token->ptr;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	461a      	mov	r2, r3
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	1ad2      	subs	r2, r2, r3
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	609a      	str	r2, [r3, #8]
    if ((token->len > 0)) {
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	689b      	ldr	r3, [r3, #8]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	dd03      	ble.n	800dab4 <scpiLex_SuffixProgramData+0x76>
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	220c      	movs	r2, #12
 800dab0:	701a      	strb	r2, [r3, #0]
 800dab2:	e009      	b.n	800dac8 <scpiLex_SuffixProgramData+0x8a>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	221a      	movs	r2, #26
 800dab8:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	685a      	ldr	r2, [r3, #4]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2200      	movs	r2, #0
 800dac6:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	689b      	ldr	r3, [r3, #8]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <skipHexNum>:

/* 7.7.4 <NONDECIMAL NUMERIC PROGRAM DATA> */
static int skipHexNum(lex_state_t * state) {
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800dadc:	2300      	movs	r3, #0
 800dade:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 800dae0:	e007      	b.n	800daf2 <skipHexNum+0x1e>
        state->pos++;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	1c5a      	adds	r2, r3, #1
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	605a      	str	r2, [r3, #4]
        someNumbers++;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	3301      	adds	r3, #1
 800daf0:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7ff fbbe 	bl	800d274 <iseos>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d10c      	bne.n	800db18 <skipHexNum+0x44>
 800dafe:	f004 fa61 	bl	8011fc4 <__locale_ctype_ptr>
 800db02:	4602      	mov	r2, r0
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	685b      	ldr	r3, [r3, #4]
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	3301      	adds	r3, #1
 800db0c:	4413      	add	r3, r2
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800db14:	2b00      	cmp	r3, #0
 800db16:	d1e4      	bne.n	800dae2 <skipHexNum+0xe>
    }
    return someNumbers;
 800db18:	68fb      	ldr	r3, [r7, #12]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <skipOctNum>:

static int skipOctNum(lex_state_t * state) {
 800db22:	b580      	push	{r7, lr}
 800db24:	b084      	sub	sp, #16
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800db2a:	2300      	movs	r3, #0
 800db2c:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 800db2e:	e007      	b.n	800db40 <skipOctNum+0x1e>
        state->pos++;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	1c5a      	adds	r2, r3, #1
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	605a      	str	r2, [r3, #4]
        someNumbers++;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	3301      	adds	r3, #1
 800db3e:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7ff fb97 	bl	800d274 <iseos>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d108      	bne.n	800db5e <skipOctNum+0x3c>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	4618      	mov	r0, r3
 800db54:	f7ff fb69 	bl	800d22a <isqdigit>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1e8      	bne.n	800db30 <skipOctNum+0xe>
    }
    return someNumbers;
 800db5e:	68fb      	ldr	r3, [r7, #12]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <skipBinNum>:

static int skipBinNum(lex_state_t * state) {
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800db70:	2300      	movs	r3, #0
 800db72:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 800db74:	e007      	b.n	800db86 <skipBinNum+0x1e>
        state->pos++;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	1c5a      	adds	r2, r3, #1
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	605a      	str	r2, [r3, #4]
        someNumbers++;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	3301      	adds	r3, #1
 800db84:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7ff fb74 	bl	800d274 <iseos>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d108      	bne.n	800dba4 <skipBinNum+0x3c>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff fb33 	bl	800d204 <isbdigit>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d1e8      	bne.n	800db76 <skipBinNum+0xe>
    }
    return someNumbers;
 800dba4:	68fb      	ldr	r3, [r7, #12]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <scpiLex_NondecimalNumericData>:
 * Detect token nondecimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
 800dbb6:	6039      	str	r1, [r7, #0]
    int someNumbers = 0;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	685a      	ldr	r2, [r3, #4]
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	605a      	str	r2, [r3, #4]
    if (skipChr(state, '#')) {
 800dbc4:	2123      	movs	r1, #35	; 0x23
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f7ff fc9d 	bl	800d506 <skipChr>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d046      	beq.n	800dc60 <scpiLex_NondecimalNumericData+0xb2>
        if (!iseos(state)) {
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f7ff fb4e 	bl	800d274 <iseos>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d140      	bne.n	800dc60 <scpiLex_NondecimalNumericData+0xb2>
            if (isH(state->pos[0])) {
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7ff fb8f 	bl	800d308 <isH>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00c      	beq.n	800dc0a <scpiLex_NondecimalNumericData+0x5c>
                state->pos++;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	1c5a      	adds	r2, r3, #1
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	605a      	str	r2, [r3, #4]
                someNumbers = skipHexNum(state);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7ff ff6a 	bl	800dad4 <skipHexNum>
 800dc00:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_HEXNUM;
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	2206      	movs	r2, #6
 800dc06:	701a      	strb	r2, [r3, #0]
 800dc08:	e02a      	b.n	800dc60 <scpiLex_NondecimalNumericData+0xb2>
            } else if (isQ(state->pos[0])) {
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7ff fb9f 	bl	800d354 <isQ>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00c      	beq.n	800dc36 <scpiLex_NondecimalNumericData+0x88>
                state->pos++;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	1c5a      	adds	r2, r3, #1
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	605a      	str	r2, [r3, #4]
                someNumbers = skipOctNum(state);
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f7ff ff7b 	bl	800db22 <skipOctNum>
 800dc2c:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_OCTNUM;
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	2207      	movs	r2, #7
 800dc32:	701a      	strb	r2, [r3, #0]
 800dc34:	e014      	b.n	800dc60 <scpiLex_NondecimalNumericData+0xb2>
            } else if (isB(state->pos[0])) {
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff fb76 	bl	800d32e <isB>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d00b      	beq.n	800dc60 <scpiLex_NondecimalNumericData+0xb2>
                state->pos++;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	1c5a      	adds	r2, r3, #1
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	605a      	str	r2, [r3, #4]
                someNumbers = skipBinNum(state);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f7ff ff88 	bl	800db68 <skipBinNum>
 800dc58:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_BINNUM;
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	2208      	movs	r2, #8
 800dc5e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (someNumbers) {
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00d      	beq.n	800dc82 <scpiLex_NondecimalNumericData+0xd4>
        token->ptr += 2; /* ignore number prefix */
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	1c9a      	adds	r2, r3, #2
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	605a      	str	r2, [r3, #4]
        token->len = state->pos - token->ptr;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	461a      	mov	r2, r3
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	1ad2      	subs	r2, r2, r3
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	609a      	str	r2, [r3, #8]
 800dc80:	e009      	b.n	800dc96 <scpiLex_NondecimalNumericData+0xe8>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	221a      	movs	r2, #26
 800dc86:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	685a      	ldr	r2, [r3, #4]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	2200      	movs	r2, #0
 800dc94:	609a      	str	r2, [r3, #8]
    }
    return token->len > 0 ? token->len + 2 : 0;
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	dd03      	ble.n	800dca6 <scpiLex_NondecimalNumericData+0xf8>
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	3302      	adds	r3, #2
 800dca4:	e000      	b.n	800dca8 <scpiLex_NondecimalNumericData+0xfa>
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <isascii7bit>:

/* 7.7.5 <STRING PROGRAM DATA> */
static int isascii7bit(int c) {
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
    return (c >= 0) && (c <= 0x7f);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	db04      	blt.n	800dcc8 <isascii7bit+0x18>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2b7f      	cmp	r3, #127	; 0x7f
 800dcc2:	dc01      	bgt.n	800dcc8 <isascii7bit+0x18>
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	e000      	b.n	800dcca <isascii7bit+0x1a>
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	370c      	adds	r7, #12
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <skipQuoteProgramData>:

static void skipQuoteProgramData(lex_state_t * state, char quote) {
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b082      	sub	sp, #8
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	460b      	mov	r3, r1
 800dce0:	70fb      	strb	r3, [r7, #3]
    while (!iseos(state)) {
 800dce2:	e03d      	b.n	800dd60 <skipQuoteProgramData+0x8a>
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7ff ffe0 	bl	800dcb0 <isascii7bit>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00d      	beq.n	800dd12 <skipQuoteProgramData+0x3c>
 800dcf6:	78fb      	ldrb	r3, [r7, #3]
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7ff fadc 	bl	800d2b8 <ischr>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d105      	bne.n	800dd12 <skipQuoteProgramData+0x3c>
            state->pos++;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	1c5a      	adds	r2, r3, #1
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	605a      	str	r2, [r3, #4]
 800dd10:	e026      	b.n	800dd60 <skipQuoteProgramData+0x8a>
        } else if (ischr(state, quote)) {
 800dd12:	78fb      	ldrb	r3, [r7, #3]
 800dd14:	4619      	mov	r1, r3
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f7ff face 	bl	800d2b8 <ischr>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d025      	beq.n	800dd6e <skipQuoteProgramData+0x98>
            state->pos++;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	1c5a      	adds	r2, r3, #1
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	605a      	str	r2, [r3, #4]
            if (!iseos(state) && ischr(state, quote)) {
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f7ff faa1 	bl	800d274 <iseos>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10d      	bne.n	800dd54 <skipQuoteProgramData+0x7e>
 800dd38:	78fb      	ldrb	r3, [r7, #3]
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f7ff fabb 	bl	800d2b8 <ischr>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d005      	beq.n	800dd54 <skipQuoteProgramData+0x7e>
                state->pos++;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	1c5a      	adds	r2, r3, #1
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	605a      	str	r2, [r3, #4]
 800dd52:	e005      	b.n	800dd60 <skipQuoteProgramData+0x8a>
            } else {
                state->pos--;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	1e5a      	subs	r2, r3, #1
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	605a      	str	r2, [r3, #4]
                break;
 800dd5e:	e007      	b.n	800dd70 <skipQuoteProgramData+0x9a>
    while (!iseos(state)) {
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f7ff fa87 	bl	800d274 <iseos>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d0bb      	beq.n	800dce4 <skipQuoteProgramData+0xe>
            }
        } else {
            break;
        }
    }
}
 800dd6c:	e000      	b.n	800dd70 <skipQuoteProgramData+0x9a>
            break;
 800dd6e:	bf00      	nop
}
 800dd70:	bf00      	nop
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <skipDoubleQuoteProgramData>:

static void skipDoubleQuoteProgramData(lex_state_t * state) {
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '"');
 800dd80:	2122      	movs	r1, #34	; 0x22
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f7ff ffa7 	bl	800dcd6 <skipQuoteProgramData>
}
 800dd88:	bf00      	nop
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <skipSingleQuoteProgramData>:

static void skipSingleQuoteProgramData(lex_state_t * state) {
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '\'');
 800dd98:	2127      	movs	r1, #39	; 0x27
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff ff9b 	bl	800dcd6 <skipQuoteProgramData>
}
 800dda0:	bf00      	nop
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <scpiLex_StringProgramData>:
 * Detect token String data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	685a      	ldr	r2, [r3, #4]
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	605a      	str	r2, [r3, #4]

    if (!iseos(state)) {
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7ff fa5a 	bl	800d274 <iseos>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d162      	bne.n	800de8c <scpiLex_StringProgramData+0xe4>
        if (ischr(state, '"')) {
 800ddc6:	2122      	movs	r1, #34	; 0x22
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f7ff fa75 	bl	800d2b8 <ischr>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d02a      	beq.n	800de2a <scpiLex_StringProgramData+0x82>
            state->pos++;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	1c5a      	adds	r2, r3, #1
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	220f      	movs	r2, #15
 800dde2:	701a      	strb	r2, [r3, #0]
            skipDoubleQuoteProgramData(state);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f7ff ffc7 	bl	800dd78 <skipDoubleQuoteProgramData>
            if (!iseos(state) && ischr(state, '"')) {
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7ff fa42 	bl	800d274 <iseos>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d114      	bne.n	800de20 <scpiLex_StringProgramData+0x78>
 800ddf6:	2122      	movs	r1, #34	; 0x22
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f7ff fa5d 	bl	800d2b8 <ischr>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00d      	beq.n	800de20 <scpiLex_StringProgramData+0x78>
                state->pos++;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	461a      	mov	r2, r3
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	1ad2      	subs	r2, r2, r3
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	609a      	str	r2, [r3, #8]
 800de1e:	e035      	b.n	800de8c <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	685a      	ldr	r2, [r3, #4]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	605a      	str	r2, [r3, #4]
 800de28:	e030      	b.n	800de8c <scpiLex_StringProgramData+0xe4>
            }
        } else if (ischr(state, '\'')) {
 800de2a:	2127      	movs	r1, #39	; 0x27
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f7ff fa43 	bl	800d2b8 <ischr>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d029      	beq.n	800de8c <scpiLex_StringProgramData+0xe4>
            state->pos++;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	1c5a      	adds	r2, r3, #1
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	220e      	movs	r2, #14
 800de46:	701a      	strb	r2, [r3, #0]
            skipSingleQuoteProgramData(state);
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff ffa1 	bl	800dd90 <skipSingleQuoteProgramData>
            if (!iseos(state) && ischr(state, '\'')) {
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7ff fa10 	bl	800d274 <iseos>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d114      	bne.n	800de84 <scpiLex_StringProgramData+0xdc>
 800de5a:	2127      	movs	r1, #39	; 0x27
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7ff fa2b 	bl	800d2b8 <ischr>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d00d      	beq.n	800de84 <scpiLex_StringProgramData+0xdc>
                state->pos++;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	1c5a      	adds	r2, r3, #1
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	461a      	mov	r2, r3
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	1ad2      	subs	r2, r2, r3
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	609a      	str	r2, [r3, #8]
 800de82:	e003      	b.n	800de8c <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	685a      	ldr	r2, [r3, #4]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	605a      	str	r2, [r3, #4]
            }
        }
    }

    token->len = state->pos - token->ptr;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	461a      	mov	r2, r3
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	1ad2      	subs	r2, r2, r3
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	dc09      	bgt.n	800deb8 <scpiLex_StringProgramData+0x110>
        /* token->ptr++;
         * token->len -= 2; */
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	221a      	movs	r2, #26
 800dea8:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	685a      	ldr	r2, [r3, #4]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	2200      	movs	r2, #0
 800deb6:	609a      	str	r2, [r3, #8]
    }

    return token->len > 0 ? token->len : 0;
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <isNonzeroDigit>:

/* 7.7.6 <ARBITRARY BLOCK PROGRAM DATA> */
static int isNonzeroDigit(int c) {
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
    return isdigit(c) && (c != '0');
 800ded0:	f004 f878 	bl	8011fc4 <__locale_ctype_ptr>
 800ded4:	4602      	mov	r2, r0
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	3301      	adds	r3, #1
 800deda:	4413      	add	r3, r2
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	f003 0304 	and.w	r3, r3, #4
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d004      	beq.n	800def0 <isNonzeroDigit+0x28>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2b30      	cmp	r3, #48	; 0x30
 800deea:	d001      	beq.n	800def0 <isNonzeroDigit+0x28>
 800deec:	2301      	movs	r3, #1
 800deee:	e000      	b.n	800def2 <isNonzeroDigit+0x2a>
 800def0:	2300      	movs	r3, #0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3708      	adds	r7, #8
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <scpiLex_ArbitraryBlockProgramData>:
 * Detect token Block Data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 800defa:	b580      	push	{r7, lr}
 800defc:	b086      	sub	sp, #24
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
 800df02:	6039      	str	r1, [r7, #0]
    int i;
    int arbitraryBlockLength = 0;
 800df04:	2300      	movs	r3, #0
 800df06:	613b      	str	r3, [r7, #16]
    const char * ptr = state->pos;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	60bb      	str	r3, [r7, #8]
    int validData = -1;
 800df0e:	f04f 33ff 	mov.w	r3, #4294967295
 800df12:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	685a      	ldr	r2, [r3, #4]
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	605a      	str	r2, [r3, #4]

    if (skipChr(state, '#')) {
 800df1c:	2123      	movs	r1, #35	; 0x23
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7ff faf1 	bl	800d506 <skipChr>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d079      	beq.n	800e01e <scpiLex_ArbitraryBlockProgramData+0x124>
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f7ff f9a2 	bl	800d274 <iseos>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d169      	bne.n	800e00a <scpiLex_ArbitraryBlockProgramData+0x110>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7ff ffc3 	bl	800dec8 <isNonzeroDigit>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d060      	beq.n	800e00a <scpiLex_ArbitraryBlockProgramData+0x110>
            /* Get number of digits */
            i = state->pos[0] - '0';
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	3b30      	subs	r3, #48	; 0x30
 800df50:	617b      	str	r3, [r7, #20]
            state->pos++;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	1c5a      	adds	r2, r3, #1
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	605a      	str	r2, [r3, #4]

            for (; i > 0; i--) {
 800df5c:	e027      	b.n	800dfae <scpiLex_ArbitraryBlockProgramData+0xb4>
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f7ff f988 	bl	800d274 <iseos>
 800df64:	4603      	mov	r3, r0
 800df66:	2b00      	cmp	r3, #0
 800df68:	d124      	bne.n	800dfb4 <scpiLex_ArbitraryBlockProgramData+0xba>
 800df6a:	f004 f82b 	bl	8011fc4 <__locale_ctype_ptr>
 800df6e:	4602      	mov	r2, r0
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	3301      	adds	r3, #1
 800df78:	4413      	add	r3, r2
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	f003 0304 	and.w	r3, r3, #4
 800df80:	2b00      	cmp	r3, #0
 800df82:	d017      	beq.n	800dfb4 <scpiLex_ArbitraryBlockProgramData+0xba>
                    arbitraryBlockLength *= 10;
 800df84:	693a      	ldr	r2, [r7, #16]
 800df86:	4613      	mov	r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	4413      	add	r3, r2
 800df8c:	005b      	lsls	r3, r3, #1
 800df8e:	613b      	str	r3, [r7, #16]
                    arbitraryBlockLength += (state->pos[0] - '0');
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	3b30      	subs	r3, #48	; 0x30
 800df98:	693a      	ldr	r2, [r7, #16]
 800df9a:	4413      	add	r3, r2
 800df9c:	613b      	str	r3, [r7, #16]
                    state->pos++;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	1c5a      	adds	r2, r3, #1
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	605a      	str	r2, [r3, #4]
            for (; i > 0; i--) {
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	617b      	str	r3, [r7, #20]
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	dcd4      	bgt.n	800df5e <scpiLex_ArbitraryBlockProgramData+0x64>
                } else {
                    break;
                }
            }

            if (i == 0) {
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d11e      	bne.n	800dff8 <scpiLex_ArbitraryBlockProgramData+0xfe>
                state->pos += arbitraryBlockLength;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	685a      	ldr	r2, [r3, #4]
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	441a      	add	r2, r3
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	605a      	str	r2, [r3, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	6892      	ldr	r2, [r2, #8]
 800dfce:	441a      	add	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d30c      	bcc.n	800dff2 <scpiLex_ArbitraryBlockProgramData+0xf8>
                    token->ptr = state->pos - arbitraryBlockLength;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	685a      	ldr	r2, [r3, #4]
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	425b      	negs	r3, r3
 800dfe0:	441a      	add	r2, r3
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	605a      	str	r2, [r3, #4]
                    token->len = arbitraryBlockLength;
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	693a      	ldr	r2, [r7, #16]
 800dfea:	609a      	str	r2, [r3, #8]
                    validData = 1;
 800dfec:	2301      	movs	r3, #1
 800dfee:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 800dff0:	e014      	b.n	800e01c <scpiLex_ArbitraryBlockProgramData+0x122>
                } else {
                    validData = 0;
 800dff2:	2300      	movs	r3, #0
 800dff4:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 800dff6:	e011      	b.n	800e01c <scpiLex_ArbitraryBlockProgramData+0x122>
                }
            } else if (iseos(state)) {
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7ff f93b 	bl	800d274 <iseos>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00b      	beq.n	800e01c <scpiLex_ArbitraryBlockProgramData+0x122>
                validData = 0;
 800e004:	2300      	movs	r3, #0
 800e006:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 800e008:	e008      	b.n	800e01c <scpiLex_ArbitraryBlockProgramData+0x122>
            }
        } else if (iseos(state)) {
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f7ff f932 	bl	800d274 <iseos>
 800e010:	4603      	mov	r3, r0
 800e012:	2b00      	cmp	r3, #0
 800e014:	d003      	beq.n	800e01e <scpiLex_ArbitraryBlockProgramData+0x124>
            validData = 0;
 800e016:	2300      	movs	r3, #0
 800e018:	60fb      	str	r3, [r7, #12]
 800e01a:	e000      	b.n	800e01e <scpiLex_ArbitraryBlockProgramData+0x124>
            if (i == 0) {
 800e01c:	bf00      	nop
        }
    }

    if (validData == 1) {
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2b01      	cmp	r3, #1
 800e022:	d103      	bne.n	800e02c <scpiLex_ArbitraryBlockProgramData+0x132>
        /* valid */
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	220d      	movs	r2, #13
 800e028:	701a      	strb	r2, [r3, #0]
 800e02a:	e01a      	b.n	800e062 <scpiLex_ArbitraryBlockProgramData+0x168>
    } else if (validData == 0) {
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10d      	bne.n	800e04e <scpiLex_ArbitraryBlockProgramData+0x154>
        /* incomplete */
        token->type = SCPI_TOKEN_UNKNOWN;
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	221a      	movs	r2, #26
 800e036:	701a      	strb	r2, [r3, #0]
        token->len = 0;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	2200      	movs	r2, #0
 800e03c:	609a      	str	r2, [r3, #8]
        state->pos = state->buffer + state->len;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	6892      	ldr	r2, [r2, #8]
 800e046:	441a      	add	r2, r3
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	605a      	str	r2, [r3, #4]
 800e04c:	e009      	b.n	800e062 <scpiLex_ArbitraryBlockProgramData+0x168>
    } else {
        /* invalid */
        token->type = SCPI_TOKEN_UNKNOWN;
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	221a      	movs	r2, #26
 800e052:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	685a      	ldr	r2, [r3, #4]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	2200      	movs	r2, #0
 800e060:	609a      	str	r2, [r3, #8]
    }

    return token->len + (token->ptr - ptr);
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	689a      	ldr	r2, [r3, #8]
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	4619      	mov	r1, r3
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	1acb      	subs	r3, r1, r3
 800e070:	4413      	add	r3, r2
}
 800e072:	4618      	mov	r0, r3
 800e074:	3718      	adds	r7, #24
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <isProgramExpression>:

/* 7.7.7 <EXPRESSION PROGRAM DATA> */
static int isProgramExpression(int c) {
 800e07a:	b480      	push	{r7}
 800e07c:	b083      	sub	sp, #12
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
    if ((c >= 0x20) && (c <= 0x7e)) {
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2b1f      	cmp	r3, #31
 800e086:	dd16      	ble.n	800e0b6 <isProgramExpression+0x3c>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b7e      	cmp	r3, #126	; 0x7e
 800e08c:	dc13      	bgt.n	800e0b6 <isProgramExpression+0x3c>
        if ((c != '"')
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2b22      	cmp	r3, #34	; 0x22
 800e092:	d010      	beq.n	800e0b6 <isProgramExpression+0x3c>
                && (c != '#')
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2b23      	cmp	r3, #35	; 0x23
 800e098:	d00d      	beq.n	800e0b6 <isProgramExpression+0x3c>
                && (c != '\'')
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b27      	cmp	r3, #39	; 0x27
 800e09e:	d00a      	beq.n	800e0b6 <isProgramExpression+0x3c>
                && (c != '(')
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2b28      	cmp	r3, #40	; 0x28
 800e0a4:	d007      	beq.n	800e0b6 <isProgramExpression+0x3c>
                && (c != ')')
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b29      	cmp	r3, #41	; 0x29
 800e0aa:	d004      	beq.n	800e0b6 <isProgramExpression+0x3c>
                && (c != ';')) {
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2b3b      	cmp	r3, #59	; 0x3b
 800e0b0:	d001      	beq.n	800e0b6 <isProgramExpression+0x3c>
            return 1;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e000      	b.n	800e0b8 <isProgramExpression+0x3e>
        }
    }

    return 0;
 800e0b6:	2300      	movs	r3, #0
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	370c      	adds	r7, #12
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <skipProgramExpression>:

static void skipProgramExpression(lex_state_t * state) {
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 800e0cc:	e004      	b.n	800e0d8 <skipProgramExpression+0x14>
        state->pos++;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	1c5a      	adds	r2, r3, #1
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	605a      	str	r2, [r3, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f7ff f8cb 	bl	800d274 <iseos>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d108      	bne.n	800e0f6 <skipProgramExpression+0x32>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7ff ffc5 	bl	800e07a <isProgramExpression>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d1eb      	bne.n	800e0ce <skipProgramExpression+0xa>
    }
}
 800e0f6:	bf00      	nop
 800e0f8:	3708      	adds	r7, #8
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <scpiLex_ProgramExpression>:
 * Detect token Expression
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b082      	sub	sp, #8
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	685a      	ldr	r2, [r3, #4]
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && ischr(state, '(')) {
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f7ff f8af 	bl	800d274 <iseos>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d12c      	bne.n	800e176 <scpiLex_ProgramExpression+0x78>
 800e11c:	2128      	movs	r1, #40	; 0x28
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7ff f8ca 	bl	800d2b8 <ischr>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d025      	beq.n	800e176 <scpiLex_ProgramExpression+0x78>
        state->pos++;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	1c5a      	adds	r2, r3, #1
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	605a      	str	r2, [r3, #4]
        skipProgramExpression(state);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7ff ffc5 	bl	800e0c4 <skipProgramExpression>

        if (!iseos(state) && ischr(state, ')')) {
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f7ff f89a 	bl	800d274 <iseos>
 800e140:	4603      	mov	r3, r0
 800e142:	2b00      	cmp	r3, #0
 800e144:	d114      	bne.n	800e170 <scpiLex_ProgramExpression+0x72>
 800e146:	2129      	movs	r1, #41	; 0x29
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7ff f8b5 	bl	800d2b8 <ischr>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d00d      	beq.n	800e170 <scpiLex_ProgramExpression+0x72>
            state->pos++;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	1c5a      	adds	r2, r3, #1
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	605a      	str	r2, [r3, #4]
            token->len = state->pos - token->ptr;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	461a      	mov	r2, r3
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	1ad2      	subs	r2, r2, r3
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	609a      	str	r2, [r3, #8]
 800e16e:	e002      	b.n	800e176 <scpiLex_ProgramExpression+0x78>
        } else {
            token->len = 0;
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	2200      	movs	r2, #0
 800e174:	609a      	str	r2, [r3, #8]
        }
    }

    if ((token->len > 0)) {
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	689b      	ldr	r3, [r3, #8]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	dd03      	ble.n	800e186 <scpiLex_ProgramExpression+0x88>
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	2210      	movs	r2, #16
 800e182:	701a      	strb	r2, [r3, #0]
 800e184:	e009      	b.n	800e19a <scpiLex_ProgramExpression+0x9c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	221a      	movs	r2, #26
 800e18a:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	685a      	ldr	r2, [r3, #4]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	2200      	movs	r2, #0
 800e198:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	689b      	ldr	r3, [r3, #8]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3708      	adds	r7, #8
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <scpiLex_Comma>:
 * Detect token comma
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b082      	sub	sp, #8
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
 800e1ae:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	685a      	ldr	r2, [r3, #4]
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ',')) {
 800e1b8:	212c      	movs	r1, #44	; 0x2c
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff f9a3 	bl	800d506 <skipChr>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d006      	beq.n	800e1d4 <scpiLex_Comma+0x2e>
        token->len = 1;
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_COMMA;
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	701a      	strb	r2, [r3, #0]
 800e1d2:	e005      	b.n	800e1e0 <scpiLex_Comma+0x3a>
    } else {
        token->len = 0;
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	221a      	movs	r2, #26
 800e1de:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	689b      	ldr	r3, [r3, #8]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <scpiLex_Semicolon>:
 * Detect token semicolon
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	685a      	ldr	r2, [r3, #4]
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ';')) {
 800e1fe:	213b      	movs	r1, #59	; 0x3b
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f7ff f980 	bl	800d506 <skipChr>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d006      	beq.n	800e21a <scpiLex_Semicolon+0x2e>
        token->len = 1;
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	2201      	movs	r2, #1
 800e210:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_SEMICOLON;
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	2201      	movs	r2, #1
 800e216:	701a      	strb	r2, [r3, #0]
 800e218:	e005      	b.n	800e226 <scpiLex_Semicolon+0x3a>
    } else {
        token->len = 0;
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	2200      	movs	r2, #0
 800e21e:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	221a      	movs	r2, #26
 800e224:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	689b      	ldr	r3, [r3, #8]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3708      	adds	r7, #8
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
 800e232:	b580      	push	{r7, lr}
 800e234:	b082      	sub	sp, #8
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
 800e23a:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	685a      	ldr	r2, [r3, #4]
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	605a      	str	r2, [r3, #4]

    skipChr(state, '\r');
 800e244:	210d      	movs	r1, #13
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f7ff f95d 	bl	800d506 <skipChr>
    skipChr(state, '\n');
 800e24c:	210a      	movs	r1, #10
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7ff f959 	bl	800d506 <skipChr>

    token->len = state->pos - token->ptr;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	461a      	mov	r2, r3
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	1ad2      	subs	r2, r2, r3
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	dd03      	ble.n	800e274 <scpiLex_NewLine+0x42>
        token->type = SCPI_TOKEN_NL;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	2205      	movs	r2, #5
 800e270:	701a      	strb	r2, [r3, #0]
 800e272:	e009      	b.n	800e288 <scpiLex_NewLine+0x56>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	221a      	movs	r2, #26
 800e278:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	685a      	ldr	r2, [r3, #4]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	2200      	movs	r2, #0
 800e286:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	689b      	ldr	r3, [r3, #8]
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
    SCPI_ResultMnemonic(context, SCPI_STD_VERSION_REVISION);
 800e29c:	2206      	movs	r2, #6
 800e29e:	4904      	ldr	r1, [pc, #16]	; (800e2b0 <SCPI_SystemVersionQ+0x1c>)
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f000 faed 	bl	800e880 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 800e2a6:	2301      	movs	r3, #1
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3708      	adds	r7, #8
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	08015498 	.word	0x08015498

0800e2b4 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    SCPI_ErrorPop(context, &error);
 800e2bc:	f107 030c 	add.w	r3, r7, #12
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f7fe fa7c 	bl	800c7c0 <SCPI_ErrorPop>
    SCPI_ResultError(context, &error);
 800e2c8:	f107 030c 	add.w	r3, r7, #12
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 fbd4 	bl	800ea7c <SCPI_ResultError>
#if USE_DEVICE_DEPENDENT_ERROR_INFORMATION
    SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
#endif
    return SCPI_RES_OK;
 800e2d4:	2301      	movs	r3, #1
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3710      	adds	r7, #16
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b082      	sub	sp, #8
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_ErrorCount(context));
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f7fe fa88 	bl	800c7fc <SCPI_ErrorCount>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f000 fb4e 	bl	800e992 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 800e2f6:	2301      	movs	r3, #1
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3708      	adds	r7, #8
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
    if (len > 0) {
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d008      	beq.n	800e324 <writeData+0x24>
        return context->interface->write(context, data, len);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	68b9      	ldr	r1, [r7, #8]
 800e31c:	68f8      	ldr	r0, [r7, #12]
 800e31e:	4798      	blx	r3
 800e320:	4603      	mov	r3, r0
 800e322:	e000      	b.n	800e326 <writeData+0x26>
    } else {
        return 0;
 800e324:	2300      	movs	r3, #0
    }
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <flushData>:
/**
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
 800e32e:	b580      	push	{r7, lr}
 800e330:	b082      	sub	sp, #8
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->flush) {
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00f      	beq.n	800e35c <flushData+0x2e>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e340:	2b00      	cmp	r3, #0
 800e342:	d00b      	beq.n	800e35c <flushData+0x2e>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e348:	68db      	ldr	r3, [r3, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d006      	beq.n	800e35c <flushData+0x2e>
        return context->interface->flush(context);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	4798      	blx	r3
 800e358:	4603      	mov	r3, r0
 800e35a:	e000      	b.n	800e35e <flushData+0x30>
    } else {
        return SCPI_RES_OK;
 800e35c:	2301      	movs	r3, #1
    }
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3708      	adds	r7, #8
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
	...

0800e368 <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e374:	2b00      	cmp	r3, #0
 800e376:	dd06      	ble.n	800e386 <writeDelimiter+0x1e>
        return writeData(context, ",", 1);
 800e378:	2201      	movs	r2, #1
 800e37a:	4905      	ldr	r1, [pc, #20]	; (800e390 <writeDelimiter+0x28>)
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7ff ffbf 	bl	800e300 <writeData>
 800e382:	4603      	mov	r3, r0
 800e384:	e000      	b.n	800e388 <writeDelimiter+0x20>
    } else {
        return 0;
 800e386:	2300      	movs	r3, #0
    }
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	080154a0 	.word	0x080154a0

0800e394 <writeNewLine>:
/**
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	dd0a      	ble.n	800e3ba <writeNewLine+0x26>
        size_t len;
#ifndef SCPI_LINE_ENDING
#error no termination character defined
#endif
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	4907      	ldr	r1, [pc, #28]	; (800e3c4 <writeNewLine+0x30>)
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f7ff ffa9 	bl	800e300 <writeData>
 800e3ae:	60f8      	str	r0, [r7, #12]
        flushData(context);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f7ff ffbc 	bl	800e32e <flushData>
        return len;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	e000      	b.n	800e3bc <writeNewLine+0x28>
    } else {
        return 0;
 800e3ba:	2300      	movs	r3, #0
    }
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3710      	adds	r7, #16
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	080154a4 	.word	0x080154a4

0800e3c8 <writeSemicolon>:
/**
 * Conditionaly write ";"
 * @param context
 * @return number of characters written
 */
static size_t writeSemicolon(scpi_t * context) {
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	dd06      	ble.n	800e3e6 <writeSemicolon+0x1e>
        return writeData(context, ";", 1);
 800e3d8:	2201      	movs	r2, #1
 800e3da:	4905      	ldr	r1, [pc, #20]	; (800e3f0 <writeSemicolon+0x28>)
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7ff ff8f 	bl	800e300 <writeData>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	e000      	b.n	800e3e8 <writeSemicolon+0x20>
    } else {
        return 0;
 800e3e6:	2300      	movs	r3, #0
    }
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3708      	adds	r7, #8
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	080154a8 	.word	0x080154a8

0800e3f4 <processCommand>:

/**
 * Process command
 * @param context
 */
static scpi_bool_t processCommand(scpi_t * context) {
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b086      	sub	sp, #24
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
    const scpi_command_t * cmd = context->param_list.cmd;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	613b      	str	r3, [r7, #16]
    lex_state_t * state = &context->param_list.lex_state;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	3314      	adds	r3, #20
 800e406:	60fb      	str	r3, [r7, #12]
    scpi_bool_t result = TRUE;
 800e408:	2301      	movs	r3, #1
 800e40a:	75fb      	strb	r3, [r7, #23]

    /* conditionaly write ; */
    writeSemicolon(context);
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f7ff ffdb 	bl	800e3c8 <writeSemicolon>

    context->cmd_error = FALSE;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2200      	movs	r2, #0
 800e416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    context->output_count = 0;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	631a      	str	r2, [r3, #48]	; 0x30
    context->input_count = 0;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2200      	movs	r2, #0
 800e424:	635a      	str	r2, [r3, #52]	; 0x34
    context->arbitrary_reminding = 0;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2200      	movs	r2, #0
 800e42a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d01d      	beq.n	800e472 <processCommand+0x7e>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	4798      	blx	r3
 800e43e:	4603      	mov	r3, r0
 800e440:	2b01      	cmp	r3, #1
 800e442:	d00f      	beq.n	800e464 <processCommand+0x70>
            if (!context->cmd_error) {
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e44a:	f083 0301 	eor.w	r3, r3, #1
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	2b00      	cmp	r3, #0
 800e452:	d004      	beq.n	800e45e <processCommand+0x6a>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 800e454:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f7fe fa93 	bl	800c984 <SCPI_ErrorPush>
            }
            result = FALSE;
 800e45e:	2300      	movs	r3, #0
 800e460:	75fb      	strb	r3, [r7, #23]
 800e462:	e006      	b.n	800e472 <processCommand+0x7e>
        } else {
            if (context->cmd_error) {
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <processCommand+0x7e>
                result = FALSE;
 800e46e:	2300      	movs	r3, #0
 800e470:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    /* set error if command callback did not read all parameters */
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	685a      	ldr	r2, [r3, #4]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	68f9      	ldr	r1, [r7, #12]
 800e47c:	6889      	ldr	r1, [r1, #8]
 800e47e:	440b      	add	r3, r1
 800e480:	429a      	cmp	r2, r3
 800e482:	d20e      	bcs.n	800e4a2 <processCommand+0xae>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e48a:	f083 0301 	eor.w	r3, r3, #1
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	2b00      	cmp	r3, #0
 800e492:	d006      	beq.n	800e4a2 <processCommand+0xae>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 800e494:	f06f 016b 	mvn.w	r1, #107	; 0x6b
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f7fe fa73 	bl	800c984 <SCPI_ErrorPush>
        result = FALSE;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 800e4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3718      	adds	r7, #24
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <findCommandHeader>:
/**
 * Cycle all patterns and search matching pattern. Execute command callback.
 * @param context
 * @result TRUE if context->paramlist is filled with correct values
 */
static scpi_bool_t findCommandHeader(scpi_t * context, const char * header, int len) {
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b088      	sub	sp, #32
 800e4b0:	af02      	add	r7, sp, #8
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	607a      	str	r2, [r7, #4]
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	617b      	str	r3, [r7, #20]
 800e4bc:	e01e      	b.n	800e4fc <findCommandHeader+0x50>
        cmd = &context->cmdlist[i];
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	6819      	ldr	r1, [r3, #0]
 800e4c2:	697a      	ldr	r2, [r7, #20]
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	005b      	lsls	r3, r3, #1
 800e4c8:	4413      	add	r3, r2
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	440b      	add	r3, r1
 800e4ce:	613b      	str	r3, [r7, #16]
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	6818      	ldr	r0, [r3, #0]
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	9301      	str	r3, [sp, #4]
 800e4da:	2300      	movs	r3, #0
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	2300      	movs	r3, #0
 800e4e0:	68b9      	ldr	r1, [r7, #8]
 800e4e2:	f001 fc26 	bl	800fd32 <matchCommand>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d004      	beq.n	800e4f6 <findCommandHeader+0x4a>
            context->param_list.cmd = cmd;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	693a      	ldr	r2, [r7, #16]
 800e4f0:	611a      	str	r2, [r3, #16]
            return TRUE;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	e00e      	b.n	800e514 <findCommandHeader+0x68>
    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	617b      	str	r3, [r7, #20]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6819      	ldr	r1, [r3, #0]
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	4613      	mov	r3, r2
 800e504:	005b      	lsls	r3, r3, #1
 800e506:	4413      	add	r3, r2
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	440b      	add	r3, r1
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1d5      	bne.n	800e4be <findCommandHeader+0x12>
        }
    }
    return FALSE;
 800e512:	2300      	movs	r3, #0
}
 800e514:	4618      	mov	r0, r3
 800e516:	3718      	adds	r7, #24
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return FALSE if there was some error during evaluation of commands
 */
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b08c      	sub	sp, #48	; 0x30
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 800e528:	2301      	movs	r3, #1
 800e52a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    scpi_parser_state_t * state;
    int r;
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 800e52e:	231a      	movs	r3, #26
 800e530:	753b      	strb	r3, [r7, #20]
 800e532:	2300      	movs	r3, #0
 800e534:	61bb      	str	r3, [r7, #24]
 800e536:	2300      	movs	r3, #0
 800e538:	61fb      	str	r3, [r7, #28]

    if (context == NULL) {
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d101      	bne.n	800e544 <SCPI_Parse+0x28>
        return FALSE;
 800e540:	2300      	movs	r3, #0
 800e542:	e093      	b.n	800e66c <SCPI_Parse+0x150>
    }

    state = &context->parser_state;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	3364      	adds	r3, #100	; 0x64
 800e548:	627b      	str	r3, [r7, #36]	; 0x24
    context->output_count = 0;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2200      	movs	r2, #0
 800e54e:	631a      	str	r2, [r3, #48]	; 0x30

    while (1) {
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	68b9      	ldr	r1, [r7, #8]
 800e554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e556:	f001 f806 	bl	800f566 <scpiParser_detectProgramMessageUnit>
 800e55a:	6238      	str	r0, [r7, #32]

        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 800e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	2b19      	cmp	r3, #25
 800e562:	d10c      	bne.n	800e57e <SCPI_Parse+0x62>
            if (result != FALSE)
 800e564:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d004      	beq.n	800e576 <SCPI_Parse+0x5a>
                SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER); // EDIT
 800e56c:	f06f 0164 	mvn.w	r1, #100	; 0x64
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	f7fe fa07 	bl	800c984 <SCPI_ErrorPush>
            result = FALSE;
 800e576:	2300      	movs	r3, #0
 800e578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e57c:	e063      	b.n	800e646 <SCPI_Parse+0x12a>
        } else if (state->programHeader.len > 0) {
 800e57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e580:	689b      	ldr	r3, [r3, #8]
 800e582:	2b00      	cmp	r3, #0
 800e584:	dd5f      	ble.n	800e646 <SCPI_Parse+0x12a>

            composeCompoundCommand(&cmd_prev, &state->programHeader);
 800e586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e588:	f107 0314 	add.w	r3, r7, #20
 800e58c:	4611      	mov	r1, r2
 800e58e:	4618      	mov	r0, r3
 800e590:	f001 fd98 	bl	80100c4 <composeCompoundCommand>

            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	6859      	ldr	r1, [r3, #4]
 800e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	461a      	mov	r2, r3
 800e59e:	68f8      	ldr	r0, [r7, #12]
 800e5a0:	f7ff ff84 	bl	800e4ac <findCommandHeader>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d02c      	beq.n	800e604 <SCPI_Parse+0xe8>

                context->param_list.lex_state.buffer = state->programData.ptr;
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ac:	691a      	ldr	r2, [r3, #16]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	615a      	str	r2, [r3, #20]
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	695a      	ldr	r2, [r3, #20]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	619a      	str	r2, [r3, #24]
                context->param_list.lex_state.len = state->programData.len;
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5bc:	695a      	ldr	r2, [r3, #20]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	61da      	str	r2, [r3, #28]
                context->param_list.cmd_raw.data = state->programHeader.ptr;
 800e5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	629a      	str	r2, [r3, #40]	; 0x28
                context->param_list.cmd_raw.position = 0;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	625a      	str	r2, [r3, #36]	; 0x24
                context->param_list.cmd_raw.length = state->programHeader.len;
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	689b      	ldr	r3, [r3, #8]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	621a      	str	r2, [r3, #32]

                result &= processCommand(context);
 800e5da:	68f8      	ldr	r0, [r7, #12]
 800e5dc:	f7ff ff0a 	bl	800e3f4 <processCommand>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5e8:	4013      	ands	r3, r2
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	bf14      	ite	ne
 800e5ee:	2301      	movne	r3, #1
 800e5f0:	2300      	moveq	r3, #0
 800e5f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                cmd_prev = state->programHeader;
 800e5f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5f8:	f107 0314 	add.w	r3, r7, #20
 800e5fc:	ca07      	ldmia	r2, {r0, r1, r2}
 800e5fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e602:	e020      	b.n	800e646 <SCPI_Parse+0x12a>
            } else {
                /* place undefined header with error */
                /* calculate length of errornouse header and trim \r\n */
                size_t r2 = r;
 800e604:	6a3b      	ldr	r3, [r7, #32]
 800e606:	62bb      	str	r3, [r7, #40]	; 0x28
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
 800e608:	e002      	b.n	800e610 <SCPI_Parse+0xf4>
 800e60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60c:	3b01      	subs	r3, #1
 800e60e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e612:	2b00      	cmp	r3, #0
 800e614:	d00d      	beq.n	800e632 <SCPI_Parse+0x116>
 800e616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e618:	3b01      	subs	r3, #1
 800e61a:	68ba      	ldr	r2, [r7, #8]
 800e61c:	4413      	add	r3, r2
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	2b0d      	cmp	r3, #13
 800e622:	d0f2      	beq.n	800e60a <SCPI_Parse+0xee>
 800e624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e626:	3b01      	subs	r3, #1
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	4413      	add	r3, r2
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	2b0a      	cmp	r3, #10
 800e630:	d0eb      	beq.n	800e60a <SCPI_Parse+0xee>
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
 800e632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e634:	68ba      	ldr	r2, [r7, #8]
 800e636:	f06f 0170 	mvn.w	r1, #112	; 0x70
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f7fe f926 	bl	800c88c <SCPI_ErrorPushEx>
                result = FALSE;
 800e640:	2300      	movs	r3, #0
 800e642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        if (r < len) {
 800e646:	6a3a      	ldr	r2, [r7, #32]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	da08      	bge.n	800e660 <SCPI_Parse+0x144>
            data += r;
 800e64e:	6a3b      	ldr	r3, [r7, #32]
 800e650:	68ba      	ldr	r2, [r7, #8]
 800e652:	4413      	add	r3, r2
 800e654:	60bb      	str	r3, [r7, #8]
            len -= r;
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	6a3b      	ldr	r3, [r7, #32]
 800e65a:	1ad3      	subs	r3, r2, r3
 800e65c:	607b      	str	r3, [r7, #4]
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 800e65e:	e777      	b.n	800e550 <SCPI_Parse+0x34>
        } else {
            break;
 800e660:	bf00      	nop
        }

    }

    /* conditionaly write new line */
    writeNewLine(context);
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f7ff fe96 	bl	800e394 <writeNewLine>

    return result;
 800e668:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3730      	adds	r7, #48	; 0x30
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <SCPI_Init>:
        const scpi_command_t * commands,
        scpi_interface_t * interface,
        const scpi_unit_def_t * units,
        const char * idn1, const char * idn2, const char * idn3, const char * idn4,
        char * input_buffer, size_t input_buffer_length,
        scpi_error_t * error_queue_data, int16_t error_queue_size, void* comm) {
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	607a      	str	r2, [r7, #4]
 800e680:	603b      	str	r3, [r7, #0]
    memset(context, 0, sizeof (*context));
 800e682:	22d8      	movs	r2, #216	; 0xd8
 800e684:	2100      	movs	r1, #0
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f003 fce0 	bl	801204c <memset>
    context->cmdlist = commands;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	601a      	str	r2, [r3, #0]
    context->interface = interface;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	62da      	str	r2, [r3, #44]	; 0x2c
    context->units = units;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	683a      	ldr	r2, [r7, #0]
 800e69c:	65da      	str	r2, [r3, #92]	; 0x5c
    context->idn[0] = idn1;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	69ba      	ldr	r2, [r7, #24]
 800e6a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    context->idn[1] = idn2;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	69fa      	ldr	r2, [r7, #28]
 800e6aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    context->idn[2] = idn3;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	6a3a      	ldr	r2, [r7, #32]
 800e6b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    context->idn[3] = idn4;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 800e6c4:	4b18      	ldr	r3, [pc, #96]	; (800e728 <SCPI_Init+0xb4>)
 800e6c6:	69fa      	ldr	r2, [r7, #28]
 800e6c8:	4918      	ldr	r1, [pc, #96]	; (800e72c <SCPI_Init+0xb8>)
 800e6ca:	f003 fcc7 	bl	801205c <siprintf>
    sprintf(context->idn5, "%s-%s", idn2, "USB");
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f103 00b5 	add.w	r0, r3, #181	; 0xb5
 800e6d4:	4b16      	ldr	r3, [pc, #88]	; (800e730 <SCPI_Init+0xbc>)
 800e6d6:	69fa      	ldr	r2, [r7, #28]
 800e6d8:	4914      	ldr	r1, [pc, #80]	; (800e72c <SCPI_Init+0xb8>)
 800e6da:	f003 fcbf 	bl	801205c <siprintf>
    context->idn[4] = context->idn4;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    context->idn[5] = context->idn5;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    context->buffer.data = input_buffer;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6fa:	60da      	str	r2, [r3, #12]
    context->buffer.length = input_buffer_length;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e700:	605a      	str	r2, [r3, #4]
    context->buffer.position = 0;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2200      	movs	r2, #0
 800e706:	609a      	str	r2, [r3, #8]
    context->comm = comm;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e70c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 800e710:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800e714:	461a      	mov	r2, r3
 800e716:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f7fd ffe3 	bl	800c6e4 <SCPI_ErrorInit>
}
 800e71e:	bf00      	nop
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	080154ac 	.word	0x080154ac
 800e72c:	080154b4 	.word	0x080154b4
 800e730:	080154bc 	.word	0x080154bc

0800e734 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return
 */
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
 800e734:	b580      	push	{r7, lr}
 800e736:	b088      	sub	sp, #32
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 800e740:	2301      	movs	r3, #1
 800e742:	77fb      	strb	r3, [r7, #31]
    size_t totcmdlen = 0;
 800e744:	2300      	movs	r3, #0
 800e746:	61bb      	str	r3, [r7, #24]
    int cmdlen = 0;
 800e748:	2300      	movs	r3, #0
 800e74a:	617b      	str	r3, [r7, #20]

    if (len == 0) {
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d114      	bne.n	800e77c <SCPI_Input+0x48>
        context->buffer.data[context->buffer.position] = 0;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	68da      	ldr	r2, [r3, #12]
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	4413      	add	r3, r2
 800e75c:	2200      	movs	r2, #0
 800e75e:	701a      	strb	r2, [r3, #0]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	68d9      	ldr	r1, [r3, #12]
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	461a      	mov	r2, r3
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f7ff fed6 	bl	800e51c <SCPI_Parse>
 800e770:	4603      	mov	r3, r0
 800e772:	77fb      	strb	r3, [r7, #31]
        context->buffer.position = 0;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	609a      	str	r2, [r3, #8]
 800e77a:	e07c      	b.n	800e876 <SCPI_Input+0x142>
    } else {
        int buffer_free;

        buffer_free = context->buffer.length - context->buffer.position;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	685a      	ldr	r2, [r3, #4]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	689b      	ldr	r3, [r3, #8]
 800e784:	1ad3      	subs	r3, r2, r3
 800e786:	613b      	str	r3, [r7, #16]
        if (len > (buffer_free - 1)) {
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	3b01      	subs	r3, #1
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	429a      	cmp	r2, r3
 800e790:	dd10      	ble.n	800e7b4 <SCPI_Input+0x80>
            /* Input buffer overrun - invalidate buffer */
            context->buffer.position = 0;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2200      	movs	r2, #0
 800e796:	609a      	str	r2, [r3, #8]
            context->buffer.data[context->buffer.position] = 0;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	68da      	ldr	r2, [r3, #12]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	701a      	strb	r2, [r3, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 800e7a6:	f46f 71b5 	mvn.w	r1, #362	; 0x16a
 800e7aa:	68f8      	ldr	r0, [r7, #12]
 800e7ac:	f7fe f8ea 	bl	800c984 <SCPI_ErrorPush>
            return FALSE;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	e061      	b.n	800e878 <SCPI_Input+0x144>
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	68da      	ldr	r2, [r3, #12]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	4413      	add	r3, r2
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	68b9      	ldr	r1, [r7, #8]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f003 fc1e 	bl	8012004 <memcpy>
        context->buffer.position += len;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	689a      	ldr	r2, [r3, #8]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	441a      	add	r2, r3
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	609a      	str	r2, [r3, #8]
        context->buffer.data[context->buffer.position] = 0;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	68da      	ldr	r2, [r3, #12]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	689b      	ldr	r3, [r3, #8]
 800e7dc:	4413      	add	r3, r2
 800e7de:	2200      	movs	r2, #0
 800e7e0:	701a      	strb	r2, [r3, #0]


        while (1) {
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	68da      	ldr	r2, [r3, #12]
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	18d1      	adds	r1, r2, r3
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	689a      	ldr	r2, [r3, #8]
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	1ad3      	subs	r3, r2, r3
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	f000 feb4 	bl	800f566 <scpiParser_detectProgramMessageUnit>
 800e7fe:	6178      	str	r0, [r7, #20]
            totcmdlen += cmdlen;
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	69ba      	ldr	r2, [r7, #24]
 800e804:	4413      	add	r3, r2
 800e806:	61bb      	str	r3, [r7, #24]

            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d11e      	bne.n	800e850 <SCPI_Input+0x11c>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	69ba      	ldr	r2, [r7, #24]
 800e818:	4619      	mov	r1, r3
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	f7ff fe7e 	bl	800e51c <SCPI_Parse>
 800e820:	4603      	mov	r3, r0
 800e822:	77fb      	strb	r3, [r7, #31]
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	68d8      	ldr	r0, [r3, #12]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	68da      	ldr	r2, [r3, #12]
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	18d1      	adds	r1, r2, r3
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	689a      	ldr	r2, [r3, #8]
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	461a      	mov	r2, r3
 800e83a:	f003 fbee 	bl	801201a <memmove>
                context->buffer.position -= totcmdlen;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	689a      	ldr	r2, [r3, #8]
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	1ad2      	subs	r2, r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	609a      	str	r2, [r3, #8]
                totcmdlen = 0;
 800e84a:	2300      	movs	r3, #0
 800e84c:	61bb      	str	r3, [r7, #24]
 800e84e:	e7c8      	b.n	800e7e2 <SCPI_Input+0xae>
            } else {
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800e856:	2b1a      	cmp	r3, #26
 800e858:	d104      	bne.n	800e864 <SCPI_Input+0x130>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e860:	2b00      	cmp	r3, #0
 800e862:	d005      	beq.n	800e870 <SCPI_Input+0x13c>
                if (totcmdlen >= context->buffer.position) break;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	69ba      	ldr	r2, [r7, #24]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d202      	bcs.n	800e874 <SCPI_Input+0x140>
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800e86e:	e7b8      	b.n	800e7e2 <SCPI_Input+0xae>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 800e870:	bf00      	nop
 800e872:	e000      	b.n	800e876 <SCPI_Input+0x142>
                if (totcmdlen >= context->buffer.position) break;
 800e874:	bf00      	nop
            }
        }
    }

    return result;
 800e876:	7ffb      	ldrb	r3, [r7, #31]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3720      	adds	r7, #32
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <SCPI_ResultCharacters>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return
 */
size_t SCPI_ResultCharacters(scpi_t * context, const char * data, size_t len) {
 800e880:	b580      	push	{r7, lr}
 800e882:	b086      	sub	sp, #24
 800e884:	af00      	add	r7, sp, #0
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 800e88c:	2300      	movs	r3, #0
 800e88e:	617b      	str	r3, [r7, #20]
    result += writeDelimiter(context);
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f7ff fd69 	bl	800e368 <writeDelimiter>
 800e896:	4602      	mov	r2, r0
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	4413      	add	r3, r2
 800e89c:	617b      	str	r3, [r7, #20]
    result += writeData(context, data, len);
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	68b9      	ldr	r1, [r7, #8]
 800e8a2:	68f8      	ldr	r0, [r7, #12]
 800e8a4:	f7ff fd2c 	bl	800e300 <writeData>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	617b      	str	r3, [r7, #20]
    context->output_count++;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b4:	1c5a      	adds	r2, r3, #1
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 800e8ba:	697b      	ldr	r3, [r7, #20]
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3718      	adds	r7, #24
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <getBasePrefix>:
/**
 * Return prefix of nondecimal base
 * @param base
 * @return
 */
static const char * getBasePrefix(int8_t base) {
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	71fb      	strb	r3, [r7, #7]
    switch (base) {
 800e8ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e8d2:	2b08      	cmp	r3, #8
 800e8d4:	d005      	beq.n	800e8e2 <getBasePrefix+0x1e>
 800e8d6:	2b10      	cmp	r3, #16
 800e8d8:	d005      	beq.n	800e8e6 <getBasePrefix+0x22>
 800e8da:	2b02      	cmp	r3, #2
 800e8dc:	d105      	bne.n	800e8ea <getBasePrefix+0x26>
        case 2: return "#B";
 800e8de:	4b06      	ldr	r3, [pc, #24]	; (800e8f8 <getBasePrefix+0x34>)
 800e8e0:	e004      	b.n	800e8ec <getBasePrefix+0x28>
        case 8: return "#Q";
 800e8e2:	4b06      	ldr	r3, [pc, #24]	; (800e8fc <getBasePrefix+0x38>)
 800e8e4:	e002      	b.n	800e8ec <getBasePrefix+0x28>
        case 16: return "#H";
 800e8e6:	4b06      	ldr	r3, [pc, #24]	; (800e900 <getBasePrefix+0x3c>)
 800e8e8:	e000      	b.n	800e8ec <getBasePrefix+0x28>
        default: return NULL;
 800e8ea:	2300      	movs	r3, #0
    }
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr
 800e8f8:	080154c0 	.word	0x080154c0
 800e8fc:	080154c4 	.word	0x080154c4
 800e900:	080154c8 	.word	0x080154c8

0800e904 <resultUInt32BaseSign>:
 * @param val
 * @param base
 * @param sign
 * @return
 */
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 800e904:	b580      	push	{r7, lr}
 800e906:	b092      	sub	sp, #72	; 0x48
 800e908:	af02      	add	r7, sp, #8
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	4611      	mov	r1, r2
 800e910:	461a      	mov	r2, r3
 800e912:	460b      	mov	r3, r1
 800e914:	71fb      	strb	r3, [r7, #7]
 800e916:	4613      	mov	r3, r2
 800e918:	71bb      	strb	r3, [r7, #6]
    char buffer[32 + 1];
    const char * basePrefix;
    size_t result = 0;
 800e91a:	2300      	movs	r3, #0
 800e91c:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t len;

    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 800e91e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800e922:	f107 0110 	add.w	r1, r7, #16
 800e926:	79bb      	ldrb	r3, [r7, #6]
 800e928:	9300      	str	r3, [sp, #0]
 800e92a:	4613      	mov	r3, r2
 800e92c:	2221      	movs	r2, #33	; 0x21
 800e92e:	68b8      	ldr	r0, [r7, #8]
 800e930:	f000 fee4 	bl	800f6fc <UInt32ToStrBaseSign>
 800e934:	63b8      	str	r0, [r7, #56]	; 0x38
    basePrefix = getBasePrefix(base);
 800e936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7ff ffc2 	bl	800e8c4 <getBasePrefix>
 800e940:	6378      	str	r0, [r7, #52]	; 0x34

    result += writeDelimiter(context);
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	f7ff fd10 	bl	800e368 <writeDelimiter>
 800e948:	4602      	mov	r2, r0
 800e94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e94c:	4413      	add	r3, r2
 800e94e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (basePrefix != NULL) {
 800e950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e952:	2b00      	cmp	r3, #0
 800e954:	d008      	beq.n	800e968 <resultUInt32BaseSign+0x64>
        result += writeData(context, basePrefix, 2);
 800e956:	2202      	movs	r2, #2
 800e958:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e95a:	68f8      	ldr	r0, [r7, #12]
 800e95c:	f7ff fcd0 	bl	800e300 <writeData>
 800e960:	4602      	mov	r2, r0
 800e962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e964:	4413      	add	r3, r2
 800e966:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    result += writeData(context, buffer, len);
 800e968:	f107 0310 	add.w	r3, r7, #16
 800e96c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e96e:	4619      	mov	r1, r3
 800e970:	68f8      	ldr	r0, [r7, #12]
 800e972:	f7ff fcc5 	bl	800e300 <writeData>
 800e976:	4602      	mov	r2, r0
 800e978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e97a:	4413      	add	r3, r2
 800e97c:	63fb      	str	r3, [r7, #60]	; 0x3c
    context->output_count++;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e982:	1c5a      	adds	r2, r3, #1
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 800e988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3740      	adds	r7, #64	; 0x40
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}

0800e992 <SCPI_ResultInt32>:
 * Write signed 32 bit integer value to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultInt32(scpi_t * context, int32_t val) {
 800e992:	b580      	push	{r7, lr}
 800e994:	b082      	sub	sp, #8
 800e996:	af00      	add	r7, sp, #0
 800e998:	6078      	str	r0, [r7, #4]
 800e99a:	6039      	str	r1, [r7, #0]
    return resultUInt32BaseSign(context, val, 10, TRUE);
 800e99c:	6839      	ldr	r1, [r7, #0]
 800e99e:	2301      	movs	r3, #1
 800e9a0:	220a      	movs	r2, #10
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7ff ffae 	bl	800e904 <resultUInt32BaseSign>
 800e9a8:	4603      	mov	r3, r0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
	...

0800e9b4 <SCPI_ResultText>:
 * Write string withn " to the result
 * @param context
 * @param data
 * @return
 */
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b086      	sub	sp, #24
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	617b      	str	r3, [r7, #20]
    size_t len = strlen(data);
 800e9c2:	6838      	ldr	r0, [r7, #0]
 800e9c4:	f7f1 fc16 	bl	80001f4 <strlen>
 800e9c8:	6138      	str	r0, [r7, #16]
    const char * quote;
    result += writeDelimiter(context);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f7ff fccc 	bl	800e368 <writeDelimiter>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	617b      	str	r3, [r7, #20]
    result += writeData(context, "\"", 1);
 800e9d8:	2201      	movs	r2, #1
 800e9da:	4927      	ldr	r1, [pc, #156]	; (800ea78 <SCPI_ResultText+0xc4>)
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7ff fc8f 	bl	800e300 <writeData>
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	4413      	add	r3, r2
 800e9e8:	617b      	str	r3, [r7, #20]
    while ((quote = strnpbrk(data, len, "\""))) {
 800e9ea:	e020      	b.n	800ea2e <SCPI_ResultText+0x7a>
        result += writeData(context, data, quote - data + 1);
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	1ad3      	subs	r3, r2, r3
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	6839      	ldr	r1, [r7, #0]
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f7ff fc81 	bl	800e300 <writeData>
 800e9fe:	4602      	mov	r2, r0
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	4413      	add	r3, r2
 800ea04:	617b      	str	r3, [r7, #20]
        result += writeData(context, "\"", 1);
 800ea06:	2201      	movs	r2, #1
 800ea08:	491b      	ldr	r1, [pc, #108]	; (800ea78 <SCPI_ResultText+0xc4>)
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7ff fc78 	bl	800e300 <writeData>
 800ea10:	4602      	mov	r2, r0
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	4413      	add	r3, r2
 800ea16:	617b      	str	r3, [r7, #20]
        len -= quote - data + 1;
 800ea18:	68fa      	ldr	r2, [r7, #12]
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	461a      	mov	r2, r3
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	1a9b      	subs	r3, r3, r2
 800ea24:	3b01      	subs	r3, #1
 800ea26:	613b      	str	r3, [r7, #16]
        data = quote + 1;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	603b      	str	r3, [r7, #0]
    while ((quote = strnpbrk(data, len, "\""))) {
 800ea2e:	4a12      	ldr	r2, [pc, #72]	; (800ea78 <SCPI_ResultText+0xc4>)
 800ea30:	6939      	ldr	r1, [r7, #16]
 800ea32:	6838      	ldr	r0, [r7, #0]
 800ea34:	f000 fe32 	bl	800f69c <strnpbrk>
 800ea38:	60f8      	str	r0, [r7, #12]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1d5      	bne.n	800e9ec <SCPI_ResultText+0x38>
    }
    result += writeData(context, data, len);
 800ea40:	693a      	ldr	r2, [r7, #16]
 800ea42:	6839      	ldr	r1, [r7, #0]
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7ff fc5b 	bl	800e300 <writeData>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	4413      	add	r3, r2
 800ea50:	617b      	str	r3, [r7, #20]
    result += writeData(context, "\"", 1);
 800ea52:	2201      	movs	r2, #1
 800ea54:	4908      	ldr	r1, [pc, #32]	; (800ea78 <SCPI_ResultText+0xc4>)
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f7ff fc52 	bl	800e300 <writeData>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	4413      	add	r3, r2
 800ea62:	617b      	str	r3, [r7, #20]
    context->output_count++;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea68:	1c5a      	adds	r2, r3, #1
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 800ea6e:	697b      	ldr	r3, [r7, #20]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3718      	adds	r7, #24
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	080154cc 	.word	0x080154cc

0800ea7c <SCPI_ResultError>:
 *
 * @param context
 * @param error
 * @return
 */
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b08a      	sub	sp, #40	; 0x28
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 800ea86:	2300      	movs	r3, #0
 800ea88:	627b      	str	r3, [r7, #36]	; 0x24
    size_t outputlimit = SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH;
 800ea8a:	23ff      	movs	r3, #255	; 0xff
 800ea8c:	623b      	str	r3, [r7, #32]
    size_t step = 0;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	61bb      	str	r3, [r7, #24]

    const char * data[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t len[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t i;

    data[0] = SCPI_ErrorTranslate(error->error_code);
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7fd ff85 	bl	800c9a8 <SCPI_ErrorTranslate>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	613b      	str	r3, [r7, #16]
    len[0] = strlen(data[0]);
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7f1 fba5 	bl	80001f4 <strlen>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	60fb      	str	r3, [r7, #12]
#else
    SCPIDEFINE_get_parts(&context->error_info_heap, data[1], &len[1], &data[2], &len[2]);
#endif
#endif

    result += SCPI_ResultInt32(context, error->error_code);
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eab4:	4619      	mov	r1, r3
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f7ff ff6b 	bl	800e992 <SCPI_ResultInt32>
 800eabc:	4602      	mov	r2, r0
 800eabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac0:	4413      	add	r3, r2
 800eac2:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeDelimiter(context);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff fc4f 	bl	800e368 <writeDelimiter>
 800eaca:	4602      	mov	r2, r0
 800eacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eace:	4413      	add	r3, r2
 800ead0:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeData(context, "\"", 1);
 800ead2:	2201      	movs	r2, #1
 800ead4:	4976      	ldr	r1, [pc, #472]	; (800ecb0 <SCPI_ResultError+0x234>)
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f7ff fc12 	bl	800e300 <writeData>
 800eadc:	4602      	mov	r2, r0
 800eade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae0:	4413      	add	r3, r2
 800eae2:	627b      	str	r3, [r7, #36]	; 0x24

    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 800eae4:	2300      	movs	r3, #0
 800eae6:	61fb      	str	r3, [r7, #28]
 800eae8:	e0c4      	b.n	800ec74 <SCPI_ResultError+0x1f8>
        if (i == 1) {
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d109      	bne.n	800eb04 <SCPI_ResultError+0x88>
            result += writeSemicolon(context);
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7ff fc69 	bl	800e3c8 <writeSemicolon>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	4413      	add	r3, r2
 800eafc:	627b      	str	r3, [r7, #36]	; 0x24
            outputlimit -= 1;
 800eafe:	6a3b      	ldr	r3, [r7, #32]
 800eb00:	3b01      	subs	r3, #1
 800eb02:	623b      	str	r3, [r7, #32]
        }
        if (len[i] > outputlimit) {
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eb0c:	4413      	add	r3, r2
 800eb0e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800eb12:	6a3a      	ldr	r2, [r7, #32]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d273      	bcs.n	800ec00 <SCPI_ResultError+0x184>
            len[i] = outputlimit;
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eb20:	4413      	add	r3, r2
 800eb22:	6a3a      	ldr	r2, [r7, #32]
 800eb24:	f843 2c1c 	str.w	r2, [r3, #-28]
        }

        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 800eb28:	e06a      	b.n	800ec00 <SCPI_ResultError+0x184>
            if ((step = quote - data[i] + 1) >= outputlimit) {
 800eb2a:	697a      	ldr	r2, [r7, #20]
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	009b      	lsls	r3, r3, #2
 800eb30:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800eb34:	440b      	add	r3, r1
 800eb36:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	61bb      	str	r3, [r7, #24]
 800eb40:	69ba      	ldr	r2, [r7, #24]
 800eb42:	6a3b      	ldr	r3, [r7, #32]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d312      	bcc.n	800eb6e <SCPI_ResultError+0xf2>
                len[i] -= 1;
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	009b      	lsls	r3, r3, #2
 800eb4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eb50:	4413      	add	r3, r2
 800eb52:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800eb56:	1e5a      	subs	r2, r3, #1
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	009b      	lsls	r3, r3, #2
 800eb5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800eb60:	440b      	add	r3, r1
 800eb62:	f843 2c1c 	str.w	r2, [r3, #-28]
                outputlimit -= 1;
 800eb66:	6a3b      	ldr	r3, [r7, #32]
 800eb68:	3b01      	subs	r3, #1
 800eb6a:	623b      	str	r3, [r7, #32]
                break;
 800eb6c:	e05f      	b.n	800ec2e <SCPI_ResultError+0x1b2>
            }
            result += writeData(context, data[i], step);
 800eb6e:	69fb      	ldr	r3, [r7, #28]
 800eb70:	009b      	lsls	r3, r3, #2
 800eb72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eb76:	4413      	add	r3, r2
 800eb78:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800eb7c:	69ba      	ldr	r2, [r7, #24]
 800eb7e:	4619      	mov	r1, r3
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7ff fbbd 	bl	800e300 <writeData>
 800eb86:	4602      	mov	r2, r0
 800eb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8a:	4413      	add	r3, r2
 800eb8c:	627b      	str	r3, [r7, #36]	; 0x24
            result += writeData(context, "\"", 1);
 800eb8e:	2201      	movs	r2, #1
 800eb90:	4947      	ldr	r1, [pc, #284]	; (800ecb0 <SCPI_ResultError+0x234>)
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7ff fbb4 	bl	800e300 <writeData>
 800eb98:	4602      	mov	r2, r0
 800eb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9c:	4413      	add	r3, r2
 800eb9e:	627b      	str	r3, [r7, #36]	; 0x24
            len[i] -= step;
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eba8:	4413      	add	r3, r2
 800ebaa:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	1ad2      	subs	r2, r2, r3
 800ebb2:	69fb      	ldr	r3, [r7, #28]
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ebba:	440b      	add	r3, r1
 800ebbc:	f843 2c1c 	str.w	r2, [r3, #-28]
            outputlimit -= step + 1;
 800ebc0:	6a3a      	ldr	r2, [r7, #32]
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	1ad3      	subs	r3, r2, r3
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	623b      	str	r3, [r7, #32]
            data[i] = quote + 1;
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	1c5a      	adds	r2, r3, #1
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ebd6:	440b      	add	r3, r1
 800ebd8:	f843 2c18 	str.w	r2, [r3, #-24]
            if (len[i] > outputlimit) {
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	009b      	lsls	r3, r3, #2
 800ebe0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ebe4:	4413      	add	r3, r2
 800ebe6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800ebea:	6a3a      	ldr	r2, [r7, #32]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d207      	bcs.n	800ec00 <SCPI_ResultError+0x184>
                len[i] = outputlimit;
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ebf8:	4413      	add	r3, r2
 800ebfa:	6a3a      	ldr	r2, [r7, #32]
 800ebfc:	f843 2c1c 	str.w	r2, [r3, #-28]
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ec08:	4413      	add	r3, r2
 800ec0a:	f853 0c18 	ldr.w	r0, [r3, #-24]
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	009b      	lsls	r3, r3, #2
 800ec12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ec16:	4413      	add	r3, r2
 800ec18:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800ec1c:	4a24      	ldr	r2, [pc, #144]	; (800ecb0 <SCPI_ResultError+0x234>)
 800ec1e:	4619      	mov	r1, r3
 800ec20:	f000 fd3c 	bl	800f69c <strnpbrk>
 800ec24:	6178      	str	r0, [r7, #20]
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f47f af7e 	bne.w	800eb2a <SCPI_ResultError+0xae>
            }
        }

        result += writeData(context, data[i], len[i]);
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	009b      	lsls	r3, r3, #2
 800ec32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ec36:	4413      	add	r3, r2
 800ec38:	f853 1c18 	ldr.w	r1, [r3, #-24]
 800ec3c:	69fb      	ldr	r3, [r7, #28]
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ec44:	4413      	add	r3, r2
 800ec46:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f7ff fb57 	bl	800e300 <writeData>
 800ec52:	4602      	mov	r2, r0
 800ec54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec56:	4413      	add	r3, r2
 800ec58:	627b      	str	r3, [r7, #36]	; 0x24
        outputlimit -= len[i];
 800ec5a:	69fb      	ldr	r3, [r7, #28]
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ec62:	4413      	add	r3, r2
 800ec64:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800ec68:	6a3a      	ldr	r2, [r7, #32]
 800ec6a:	1ad3      	subs	r3, r2, r3
 800ec6c:	623b      	str	r3, [r7, #32]
    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 800ec6e:	69fb      	ldr	r3, [r7, #28]
 800ec70:	3301      	adds	r3, #1
 800ec72:	61fb      	str	r3, [r7, #28]
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d10c      	bne.n	800ec94 <SCPI_ResultError+0x218>
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	009b      	lsls	r3, r3, #2
 800ec7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ec82:	4413      	add	r3, r2
 800ec84:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d003      	beq.n	800ec94 <SCPI_ResultError+0x218>
 800ec8c:	6a3b      	ldr	r3, [r7, #32]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	f47f af2b 	bne.w	800eaea <SCPI_ResultError+0x6e>
    }
    result += writeData(context, "\"", 1);
 800ec94:	2201      	movs	r2, #1
 800ec96:	4906      	ldr	r1, [pc, #24]	; (800ecb0 <SCPI_ResultError+0x234>)
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7ff fb31 	bl	800e300 <writeData>
 800ec9e:	4602      	mov	r2, r0
 800eca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca2:	4413      	add	r3, r2
 800eca4:	627b      	str	r3, [r7, #36]	; 0x24

    return result;
 800eca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3728      	adds	r7, #40	; 0x28
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	080154cc 	.word	0x080154cc

0800ecb4 <SCPI_ResultArbitraryBlockHeader>:
 * Write arbitrary block header with length
 * @param context
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
    char block_header[12];
    size_t header_len;
    block_header[0] = '#';
 800ecbe:	2323      	movs	r3, #35	; 0x23
 800ecc0:	723b      	strb	r3, [r7, #8]
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 800ecc2:	f107 0108 	add.w	r1, r7, #8
 800ecc6:	3102      	adds	r1, #2
 800ecc8:	230a      	movs	r3, #10
 800ecca:	220a      	movs	r2, #10
 800eccc:	6838      	ldr	r0, [r7, #0]
 800ecce:	f000 fdb5 	bl	800f83c <SCPI_UInt32ToStrBase>

    header_len = strlen(block_header + 2);
 800ecd2:	f107 0308 	add.w	r3, r7, #8
 800ecd6:	3302      	adds	r3, #2
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7f1 fa8b 	bl	80001f4 <strlen>
 800ecde:	6178      	str	r0, [r7, #20]
    block_header[1] = (char) (header_len + '0');
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	3330      	adds	r3, #48	; 0x30
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	727b      	strb	r3, [r7, #9]

    context->arbitrary_reminding = len;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	683a      	ldr	r2, [r7, #0]
 800ecee:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    return writeData(context, block_header, header_len + 2);
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	1c9a      	adds	r2, r3, #2
 800ecf6:	f107 0308 	add.w	r3, r7, #8
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f7ff faff 	bl	800e300 <writeData>
 800ed02:	4603      	mov	r3, r0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3718      	adds	r7, #24
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <SCPI_ResultArbitraryBlockData>:
 * @param context
 * @param data
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	607a      	str	r2, [r7, #4]

    if (context->arbitrary_reminding < len) {
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d905      	bls.n	800ed30 <SCPI_ResultArbitraryBlockData+0x24>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800ed24:	4910      	ldr	r1, [pc, #64]	; (800ed68 <SCPI_ResultArbitraryBlockData+0x5c>)
 800ed26:	68f8      	ldr	r0, [r7, #12]
 800ed28:	f7fd fe2c 	bl	800c984 <SCPI_ErrorPush>
        return 0;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e017      	b.n	800ed60 <SCPI_ResultArbitraryBlockData+0x54>
    }

    context->arbitrary_reminding -= len;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	1ad2      	subs	r2, r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    if (context->arbitrary_reminding == 0) {
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d104      	bne.n	800ed54 <SCPI_ResultArbitraryBlockData+0x48>
        context->output_count++;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed4e:	1c5a      	adds	r2, r3, #1
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return writeData(context, (const char *) data, len);
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	68b9      	ldr	r1, [r7, #8]
 800ed58:	68f8      	ldr	r0, [r7, #12]
 800ed5a:	f7ff fad1 	bl	800e300 <writeData>
 800ed5e:	4603      	mov	r3, r0
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3710      	adds	r7, #16
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}
 800ed68:	fffffeca 	.word	0xfffffeca

0800ed6c <SCPI_ResultArbitraryBlock>:
 * @param context
 * @param data
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	617b      	str	r3, [r7, #20]
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 800ed7c:	6879      	ldr	r1, [r7, #4]
 800ed7e:	68f8      	ldr	r0, [r7, #12]
 800ed80:	f7ff ff98 	bl	800ecb4 <SCPI_ResultArbitraryBlockHeader>
 800ed84:	4602      	mov	r2, r0
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	4413      	add	r3, r2
 800ed8a:	617b      	str	r3, [r7, #20]
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	68b9      	ldr	r1, [r7, #8]
 800ed90:	68f8      	ldr	r0, [r7, #12]
 800ed92:	f7ff ffbb 	bl	800ed0c <SCPI_ResultArbitraryBlockData>
 800ed96:	4602      	mov	r2, r0
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	617b      	str	r3, [r7, #20]
    return result;
 800ed9e:	697b      	ldr	r3, [r7, #20]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3718      	adds	r7, #24
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <invalidateToken>:
/**
 * Invalidate token
 * @param token
 * @param ptr
 */
static void invalidateToken(scpi_token_t * token, char * ptr) {
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
    token->len = 0;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2200      	movs	r2, #0
 800edb6:	609a      	str	r2, [r3, #8]
    token->ptr = ptr;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	683a      	ldr	r2, [r7, #0]
 800edbc:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	221a      	movs	r2, #26
 800edc2:	701a      	strb	r2, [r3, #0]
}
 800edc4:	bf00      	nop
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <SCPI_Parameter>:
 * @param context
 * @param parameter
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_Parameter(scpi_t * context, scpi_parameter_t * parameter, scpi_bool_t mandatory) {
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	4613      	mov	r3, r2
 800eddc:	71fb      	strb	r3, [r7, #7]
    lex_state_t * state;

    if (!parameter) {
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d105      	bne.n	800edf0 <SCPI_Parameter+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800ede4:	4939      	ldr	r1, [pc, #228]	; (800eecc <SCPI_Parameter+0xfc>)
 800ede6:	68f8      	ldr	r0, [r7, #12]
 800ede8:	f7fd fdcc 	bl	800c984 <SCPI_ErrorPush>
        return FALSE;
 800edec:	2300      	movs	r3, #0
 800edee:	e069      	b.n	800eec4 <SCPI_Parameter+0xf4>
    }

    invalidateToken(parameter, NULL);
 800edf0:	2100      	movs	r1, #0
 800edf2:	68b8      	ldr	r0, [r7, #8]
 800edf4:	f7ff ffd8 	bl	800eda8 <invalidateToken>

    state = &context->param_list.lex_state;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	3314      	adds	r3, #20
 800edfc:	617b      	str	r3, [r7, #20]

    if (state->pos >= (state->buffer + state->len)) {
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	685a      	ldr	r2, [r3, #4]
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	6979      	ldr	r1, [r7, #20]
 800ee08:	6889      	ldr	r1, [r1, #8]
 800ee0a:	440b      	add	r3, r1
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d30d      	bcc.n	800ee2c <SCPI_Parameter+0x5c>
        if (mandatory) {
 800ee10:	79fb      	ldrb	r3, [r7, #7]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d005      	beq.n	800ee22 <SCPI_Parameter+0x52>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 800ee16:	f06f 016c 	mvn.w	r1, #108	; 0x6c
 800ee1a:	68f8      	ldr	r0, [r7, #12]
 800ee1c:	f7fd fdb2 	bl	800c984 <SCPI_ErrorPush>
 800ee20:	e002      	b.n	800ee28 <SCPI_Parameter+0x58>
        } else {
            parameter->type = SCPI_TOKEN_PROGRAM_MNEMONIC; /* TODO: select something different */
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	2209      	movs	r2, #9
 800ee26:	701a      	strb	r2, [r3, #0]
        }
        return FALSE;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	e04b      	b.n	800eec4 <SCPI_Parameter+0xf4>
    }
    if (context->input_count != 0) {
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d012      	beq.n	800ee5a <SCPI_Parameter+0x8a>
        scpiLex_Comma(state, parameter);
 800ee34:	68b9      	ldr	r1, [r7, #8]
 800ee36:	6978      	ldr	r0, [r7, #20]
 800ee38:	f7ff f9b5 	bl	800e1a6 <scpiLex_Comma>
        if (parameter->type != SCPI_TOKEN_COMMA) {
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d00a      	beq.n	800ee5a <SCPI_Parameter+0x8a>
            invalidateToken(parameter, NULL);
 800ee44:	2100      	movs	r1, #0
 800ee46:	68b8      	ldr	r0, [r7, #8]
 800ee48:	f7ff ffae 	bl	800eda8 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 800ee4c:	f06f 0166 	mvn.w	r1, #102	; 0x66
 800ee50:	68f8      	ldr	r0, [r7, #12]
 800ee52:	f7fd fd97 	bl	800c984 <SCPI_ErrorPush>
            return FALSE;
 800ee56:	2300      	movs	r3, #0
 800ee58:	e034      	b.n	800eec4 <SCPI_Parameter+0xf4>
        }
    }

    context->input_count++;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee5e:	1c5a      	adds	r2, r3, #1
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	635a      	str	r2, [r3, #52]	; 0x34

    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	3314      	adds	r3, #20
 800ee68:	68b9      	ldr	r1, [r7, #8]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f000 faa0 	bl	800f3b0 <scpiParser_parseProgramData>

    switch (parameter->type) {
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	3b06      	subs	r3, #6
 800ee76:	2b0a      	cmp	r3, #10
 800ee78:	d81a      	bhi.n	800eeb0 <SCPI_Parameter+0xe0>
 800ee7a:	a201      	add	r2, pc, #4	; (adr r2, 800ee80 <SCPI_Parameter+0xb0>)
 800ee7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee80:	0800eead 	.word	0x0800eead
 800ee84:	0800eead 	.word	0x0800eead
 800ee88:	0800eead 	.word	0x0800eead
 800ee8c:	0800eead 	.word	0x0800eead
 800ee90:	0800eead 	.word	0x0800eead
 800ee94:	0800eead 	.word	0x0800eead
 800ee98:	0800eeb1 	.word	0x0800eeb1
 800ee9c:	0800eead 	.word	0x0800eead
 800eea0:	0800eead 	.word	0x0800eead
 800eea4:	0800eead 	.word	0x0800eead
 800eea8:	0800eead 	.word	0x0800eead
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
        case SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA:
        case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_PROGRAM_EXPRESSION:
            return TRUE;
 800eeac:	2301      	movs	r3, #1
 800eeae:	e009      	b.n	800eec4 <SCPI_Parameter+0xf4>
        default:
            invalidateToken(parameter, NULL);
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	68b8      	ldr	r0, [r7, #8]
 800eeb4:	f7ff ff78 	bl	800eda8 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 800eeb8:	f06f 0196 	mvn.w	r1, #150	; 0x96
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f7fd fd61 	bl	800c984 <SCPI_ErrorPush>
            return FALSE;
 800eec2:	2300      	movs	r3, #0
    }
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3718      	adds	r7, #24
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	fffffeca 	.word	0xfffffeca

0800eed0 <SCPI_ParamIsNumber>:
 * Detect if parameter is number
 * @param parameter
 * @param suffixAllowed
 * @return
 */
scpi_bool_t SCPI_ParamIsNumber(scpi_parameter_t * parameter, scpi_bool_t suffixAllowed) {
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	460b      	mov	r3, r1
 800eeda:	70fb      	strb	r3, [r7, #3]
    switch (parameter->type) {
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	3b06      	subs	r3, #6
 800eee2:	2b05      	cmp	r3, #5
 800eee4:	d812      	bhi.n	800ef0c <SCPI_ParamIsNumber+0x3c>
 800eee6:	a201      	add	r2, pc, #4	; (adr r2, 800eeec <SCPI_ParamIsNumber+0x1c>)
 800eee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeec:	0800ef05 	.word	0x0800ef05
 800eef0:	0800ef05 	.word	0x0800ef05
 800eef4:	0800ef05 	.word	0x0800ef05
 800eef8:	0800ef0d 	.word	0x0800ef0d
 800eefc:	0800ef05 	.word	0x0800ef05
 800ef00:	0800ef09 	.word	0x0800ef09
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
            return TRUE;
 800ef04:	2301      	movs	r3, #1
 800ef06:	e002      	b.n	800ef0e <SCPI_ParamIsNumber+0x3e>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            return suffixAllowed;
 800ef08:	78fb      	ldrb	r3, [r7, #3]
 800ef0a:	e000      	b.n	800ef0e <SCPI_ParamIsNumber+0x3e>
        default:
            return FALSE;
 800ef0c:	2300      	movs	r3, #0
    }
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	370c      	adds	r7, #12
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop

0800ef1c <ParamSignToUInt32>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt32(scpi_t * context, scpi_parameter_t * parameter, uint32_t * value, scpi_bool_t sign) {
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
 800ef28:	70fb      	strb	r3, [r7, #3]

    if (!value) {
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d105      	bne.n	800ef3c <ParamSignToUInt32+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800ef30:	4933      	ldr	r1, [pc, #204]	; (800f000 <ParamSignToUInt32+0xe4>)
 800ef32:	68f8      	ldr	r0, [r7, #12]
 800ef34:	f7fd fd26 	bl	800c984 <SCPI_ErrorPush>
        return FALSE;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	e05d      	b.n	800eff8 <ParamSignToUInt32+0xdc>
    }

    switch (parameter->type) {
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	3b06      	subs	r3, #6
 800ef42:	2b05      	cmp	r3, #5
 800ef44:	d857      	bhi.n	800eff6 <ParamSignToUInt32+0xda>
 800ef46:	a201      	add	r2, pc, #4	; (adr r2, 800ef4c <ParamSignToUInt32+0x30>)
 800ef48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef4c:	0800ef65 	.word	0x0800ef65
 800ef50:	0800ef81 	.word	0x0800ef81
 800ef54:	0800ef9d 	.word	0x0800ef9d
 800ef58:	0800eff7 	.word	0x0800eff7
 800ef5c:	0800efb9 	.word	0x0800efb9
 800ef60:	0800efb9 	.word	0x0800efb9
        case SCPI_TOKEN_HEXNUM:
            return strBaseToUInt32(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	2210      	movs	r2, #16
 800ef6a:	6879      	ldr	r1, [r7, #4]
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f000 fc95 	bl	800f89c <strBaseToUInt32>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	bf14      	ite	ne
 800ef78:	2301      	movne	r3, #1
 800ef7a:	2300      	moveq	r3, #0
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	e03b      	b.n	800eff8 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_OCTNUM:
            return strBaseToUInt32(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	2208      	movs	r2, #8
 800ef86:	6879      	ldr	r1, [r7, #4]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f000 fc87 	bl	800f89c <strBaseToUInt32>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	bf14      	ite	ne
 800ef94:	2301      	movne	r3, #1
 800ef96:	2300      	moveq	r3, #0
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	e02d      	b.n	800eff8 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_BINNUM:
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	2202      	movs	r2, #2
 800efa2:	6879      	ldr	r1, [r7, #4]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f000 fc79 	bl	800f89c <strBaseToUInt32>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	bf14      	ite	ne
 800efb0:	2301      	movne	r3, #1
 800efb2:	2300      	moveq	r3, #0
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	e01f      	b.n	800eff8 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            if (sign) {
 800efb8:	78fb      	ldrb	r3, [r7, #3]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00d      	beq.n	800efda <ParamSignToUInt32+0xbe>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	220a      	movs	r2, #10
 800efc4:	6879      	ldr	r1, [r7, #4]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f000 fc4e 	bl	800f868 <strBaseToInt32>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	bf14      	ite	ne
 800efd2:	2301      	movne	r3, #1
 800efd4:	2300      	moveq	r3, #0
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	e00e      	b.n	800eff8 <ParamSignToUInt32+0xdc>
            } else {
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	220a      	movs	r2, #10
 800efe0:	6879      	ldr	r1, [r7, #4]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f000 fc5a 	bl	800f89c <strBaseToUInt32>
 800efe8:	4603      	mov	r3, r0
 800efea:	2b00      	cmp	r3, #0
 800efec:	bf14      	ite	ne
 800efee:	2301      	movne	r3, #1
 800eff0:	2300      	moveq	r3, #0
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	e000      	b.n	800eff8 <ParamSignToUInt32+0xdc>
            }
        default:
            return FALSE;
 800eff6:	2300      	movs	r3, #0
    }
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3710      	adds	r7, #16
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	fffffeca 	.word	0xfffffeca

0800f004 <ParamSignToUInt64>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt64(scpi_t * context, scpi_parameter_t * parameter, uint64_t * value, scpi_bool_t sign) {
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
 800f010:	70fb      	strb	r3, [r7, #3]

    if (!value) {
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d105      	bne.n	800f024 <ParamSignToUInt64+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800f018:	4933      	ldr	r1, [pc, #204]	; (800f0e8 <ParamSignToUInt64+0xe4>)
 800f01a:	68f8      	ldr	r0, [r7, #12]
 800f01c:	f7fd fcb2 	bl	800c984 <SCPI_ErrorPush>
        return FALSE;
 800f020:	2300      	movs	r3, #0
 800f022:	e05d      	b.n	800f0e0 <ParamSignToUInt64+0xdc>
    }

    switch (parameter->type) {
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	3b06      	subs	r3, #6
 800f02a:	2b05      	cmp	r3, #5
 800f02c:	d857      	bhi.n	800f0de <ParamSignToUInt64+0xda>
 800f02e:	a201      	add	r2, pc, #4	; (adr r2, 800f034 <ParamSignToUInt64+0x30>)
 800f030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f034:	0800f04d 	.word	0x0800f04d
 800f038:	0800f069 	.word	0x0800f069
 800f03c:	0800f085 	.word	0x0800f085
 800f040:	0800f0df 	.word	0x0800f0df
 800f044:	0800f0a1 	.word	0x0800f0a1
 800f048:	0800f0a1 	.word	0x0800f0a1
        case SCPI_TOKEN_HEXNUM:
            return strBaseToUInt64(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	2210      	movs	r2, #16
 800f052:	6879      	ldr	r1, [r7, #4]
 800f054:	4618      	mov	r0, r3
 800f056:	f000 fc57 	bl	800f908 <strBaseToUInt64>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	bf14      	ite	ne
 800f060:	2301      	movne	r3, #1
 800f062:	2300      	moveq	r3, #0
 800f064:	b2db      	uxtb	r3, r3
 800f066:	e03b      	b.n	800f0e0 <ParamSignToUInt64+0xdc>
        case SCPI_TOKEN_OCTNUM:
            return strBaseToUInt64(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	2208      	movs	r2, #8
 800f06e:	6879      	ldr	r1, [r7, #4]
 800f070:	4618      	mov	r0, r3
 800f072:	f000 fc49 	bl	800f908 <strBaseToUInt64>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	bf14      	ite	ne
 800f07c:	2301      	movne	r3, #1
 800f07e:	2300      	moveq	r3, #0
 800f080:	b2db      	uxtb	r3, r3
 800f082:	e02d      	b.n	800f0e0 <ParamSignToUInt64+0xdc>
        case SCPI_TOKEN_BINNUM:
            return strBaseToUInt64(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	2202      	movs	r2, #2
 800f08a:	6879      	ldr	r1, [r7, #4]
 800f08c:	4618      	mov	r0, r3
 800f08e:	f000 fc3b 	bl	800f908 <strBaseToUInt64>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	bf14      	ite	ne
 800f098:	2301      	movne	r3, #1
 800f09a:	2300      	moveq	r3, #0
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	e01f      	b.n	800f0e0 <ParamSignToUInt64+0xdc>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            if (sign) {
 800f0a0:	78fb      	ldrb	r3, [r7, #3]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00d      	beq.n	800f0c2 <ParamSignToUInt64+0xbe>
                return strBaseToInt64(parameter->ptr, (int64_t *) value, 10) > 0 ? TRUE : FALSE;
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	220a      	movs	r2, #10
 800f0ac:	6879      	ldr	r1, [r7, #4]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f000 fc0e 	bl	800f8d0 <strBaseToInt64>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	bf14      	ite	ne
 800f0ba:	2301      	movne	r3, #1
 800f0bc:	2300      	moveq	r3, #0
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	e00e      	b.n	800f0e0 <ParamSignToUInt64+0xdc>
            } else {
                return strBaseToUInt64(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	220a      	movs	r2, #10
 800f0c8:	6879      	ldr	r1, [r7, #4]
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f000 fc1c 	bl	800f908 <strBaseToUInt64>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	bf14      	ite	ne
 800f0d6:	2301      	movne	r3, #1
 800f0d8:	2300      	moveq	r3, #0
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	e000      	b.n	800f0e0 <ParamSignToUInt64+0xdc>
            }
        default:
            return FALSE;
 800f0de:	2300      	movs	r3, #0
    }
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3710      	adds	r7, #16
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	fffffeca 	.word	0xfffffeca

0800f0ec <SCPI_ParamToUInt64>:
 * @param context
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToUInt64(scpi_t * context, scpi_parameter_t * parameter, uint64_t * value) {
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
    return ParamSignToUInt64(context, parameter, value, FALSE);
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	687a      	ldr	r2, [r7, #4]
 800f0fc:	68b9      	ldr	r1, [r7, #8]
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f7ff ff80 	bl	800f004 <ParamSignToUInt64>
 800f104:	4603      	mov	r3, r0
}
 800f106:	4618      	mov	r0, r3
 800f108:	3710      	adds	r7, #16
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
	...

0800f110 <SCPI_ParamToDouble>:
 * @param context
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToDouble(scpi_t * context, scpi_parameter_t * parameter, double * value) {
 800f110:	b590      	push	{r4, r7, lr}
 800f112:	b089      	sub	sp, #36	; 0x24
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
    scpi_bool_t result;
    uint64_t valint;

    if (!value) {
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d105      	bne.n	800f12e <SCPI_ParamToDouble+0x1e>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800f122:	4922      	ldr	r1, [pc, #136]	; (800f1ac <SCPI_ParamToDouble+0x9c>)
 800f124:	68f8      	ldr	r0, [r7, #12]
 800f126:	f7fd fc2d 	bl	800c984 <SCPI_ErrorPush>
        return FALSE;
 800f12a:	2300      	movs	r3, #0
 800f12c:	e039      	b.n	800f1a2 <SCPI_ParamToDouble+0x92>
    }

    switch (parameter->type) {
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	3b06      	subs	r3, #6
 800f134:	2b05      	cmp	r3, #5
 800f136:	d831      	bhi.n	800f19c <SCPI_ParamToDouble+0x8c>
 800f138:	a201      	add	r2, pc, #4	; (adr r2, 800f140 <SCPI_ParamToDouble+0x30>)
 800f13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f13e:	bf00      	nop
 800f140:	0800f159 	.word	0x0800f159
 800f144:	0800f159 	.word	0x0800f159
 800f148:	0800f159 	.word	0x0800f159
 800f14c:	0800f19d 	.word	0x0800f19d
 800f150:	0800f183 	.word	0x0800f183
 800f154:	0800f183 	.word	0x0800f183
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
            result = SCPI_ParamToUInt64(context, parameter, &valint);
 800f158:	f107 0310 	add.w	r3, r7, #16
 800f15c:	461a      	mov	r2, r3
 800f15e:	68b9      	ldr	r1, [r7, #8]
 800f160:	68f8      	ldr	r0, [r7, #12]
 800f162:	f7ff ffc3 	bl	800f0ec <SCPI_ParamToUInt64>
 800f166:	4603      	mov	r3, r0
 800f168:	77fb      	strb	r3, [r7, #31]
            *value = valint;
 800f16a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f16e:	4618      	mov	r0, r3
 800f170:	4621      	mov	r1, r4
 800f172:	f7f1 fa23 	bl	80005bc <__aeabi_ul2d>
 800f176:	4603      	mov	r3, r0
 800f178:	460c      	mov	r4, r1
 800f17a:	687a      	ldr	r2, [r7, #4]
 800f17c:	e9c2 3400 	strd	r3, r4, [r2]
            break;
 800f180:	e00e      	b.n	800f1a0 <SCPI_ParamToDouble+0x90>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            result = strToDouble(parameter->ptr, value) > 0 ? TRUE : FALSE;
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	6879      	ldr	r1, [r7, #4]
 800f188:	4618      	mov	r0, r3
 800f18a:	f000 fbd9 	bl	800f940 <strToDouble>
 800f18e:	4603      	mov	r3, r0
 800f190:	2b00      	cmp	r3, #0
 800f192:	bf14      	ite	ne
 800f194:	2301      	movne	r3, #1
 800f196:	2300      	moveq	r3, #0
 800f198:	77fb      	strb	r3, [r7, #31]
            break;
 800f19a:	e001      	b.n	800f1a0 <SCPI_ParamToDouble+0x90>
        default:
            result = FALSE;
 800f19c:	2300      	movs	r3, #0
 800f19e:	77fb      	strb	r3, [r7, #31]
    }
    return result;
 800f1a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3724      	adds	r7, #36	; 0x24
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd90      	pop	{r4, r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	fffffeca 	.word	0xfffffeca

0800f1b0 <SCPI_ParamDouble>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamDouble(scpi_t * context, double * value, scpi_bool_t mandatory) {
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	71fb      	strb	r3, [r7, #7]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value) {
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d105      	bne.n	800f1d0 <SCPI_ParamDouble+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800f1c4:	491f      	ldr	r1, [pc, #124]	; (800f244 <SCPI_ParamDouble+0x94>)
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	f7fd fbdc 	bl	800c984 <SCPI_ErrorPush>
        return FALSE;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	e035      	b.n	800f23c <SCPI_ParamDouble+0x8c>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 800f1d0:	79fa      	ldrb	r2, [r7, #7]
 800f1d2:	f107 0310 	add.w	r3, r7, #16
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f7ff fdf9 	bl	800edd0 <SCPI_Parameter>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	77fb      	strb	r3, [r7, #31]
    if (result) {
 800f1e2:	7ffb      	ldrb	r3, [r7, #31]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d028      	beq.n	800f23a <SCPI_ParamDouble+0x8a>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 800f1e8:	f107 0310 	add.w	r3, r7, #16
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7ff fe6e 	bl	800eed0 <SCPI_ParamIsNumber>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d007      	beq.n	800f20a <SCPI_ParamDouble+0x5a>
            SCPI_ParamToDouble(context, &param, value);
 800f1fa:	f107 0310 	add.w	r3, r7, #16
 800f1fe:	68ba      	ldr	r2, [r7, #8]
 800f200:	4619      	mov	r1, r3
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f7ff ff84 	bl	800f110 <SCPI_ParamToDouble>
 800f208:	e017      	b.n	800f23a <SCPI_ParamDouble+0x8a>
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 800f20a:	f107 0310 	add.w	r3, r7, #16
 800f20e:	2101      	movs	r1, #1
 800f210:	4618      	mov	r0, r3
 800f212:	f7ff fe5d 	bl	800eed0 <SCPI_ParamIsNumber>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d007      	beq.n	800f22c <SCPI_ParamDouble+0x7c>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 800f21c:	f06f 0189 	mvn.w	r1, #137	; 0x89
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f7fd fbaf 	bl	800c984 <SCPI_ErrorPush>
            result = FALSE;
 800f226:	2300      	movs	r3, #0
 800f228:	77fb      	strb	r3, [r7, #31]
 800f22a:	e006      	b.n	800f23a <SCPI_ParamDouble+0x8a>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 800f22c:	f06f 0167 	mvn.w	r1, #103	; 0x67
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f7fd fba7 	bl	800c984 <SCPI_ErrorPush>
            result = FALSE;
 800f236:	2300      	movs	r3, #0
 800f238:	77fb      	strb	r3, [r7, #31]
        }
    }
    return result;
 800f23a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3720      	adds	r7, #32
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	fffffeca 	.word	0xfffffeca

0800f248 <ParamSignUInt32>:
 * @param value
 * @param mandatory
 * @param sign
 * @return
 */
static scpi_bool_t ParamSignUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory, scpi_bool_t sign) {
 800f248:	b580      	push	{r7, lr}
 800f24a:	b088      	sub	sp, #32
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	4611      	mov	r1, r2
 800f254:	461a      	mov	r2, r3
 800f256:	460b      	mov	r3, r1
 800f258:	71fb      	strb	r3, [r7, #7]
 800f25a:	4613      	mov	r3, r2
 800f25c:	71bb      	strb	r3, [r7, #6]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value) {
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d105      	bne.n	800f270 <ParamSignUInt32+0x28>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800f264:	4920      	ldr	r1, [pc, #128]	; (800f2e8 <ParamSignUInt32+0xa0>)
 800f266:	68f8      	ldr	r0, [r7, #12]
 800f268:	f7fd fb8c 	bl	800c984 <SCPI_ErrorPush>
        return FALSE;
 800f26c:	2300      	movs	r3, #0
 800f26e:	e037      	b.n	800f2e0 <ParamSignUInt32+0x98>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 800f270:	79fa      	ldrb	r2, [r7, #7]
 800f272:	f107 0310 	add.w	r3, r7, #16
 800f276:	4619      	mov	r1, r3
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	f7ff fda9 	bl	800edd0 <SCPI_Parameter>
 800f27e:	4603      	mov	r3, r0
 800f280:	77fb      	strb	r3, [r7, #31]
    if (result) {
 800f282:	7ffb      	ldrb	r3, [r7, #31]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d02a      	beq.n	800f2de <ParamSignUInt32+0x96>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 800f288:	f107 0310 	add.w	r3, r7, #16
 800f28c:	2100      	movs	r1, #0
 800f28e:	4618      	mov	r0, r3
 800f290:	f7ff fe1e 	bl	800eed0 <SCPI_ParamIsNumber>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d009      	beq.n	800f2ae <ParamSignUInt32+0x66>
            result = ParamSignToUInt32(context, &param, value, sign);
 800f29a:	79bb      	ldrb	r3, [r7, #6]
 800f29c:	f107 0110 	add.w	r1, r7, #16
 800f2a0:	68ba      	ldr	r2, [r7, #8]
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f7ff fe3a 	bl	800ef1c <ParamSignToUInt32>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	77fb      	strb	r3, [r7, #31]
 800f2ac:	e017      	b.n	800f2de <ParamSignUInt32+0x96>
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 800f2ae:	f107 0310 	add.w	r3, r7, #16
 800f2b2:	2101      	movs	r1, #1
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7ff fe0b 	bl	800eed0 <SCPI_ParamIsNumber>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d007      	beq.n	800f2d0 <ParamSignUInt32+0x88>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 800f2c0:	f06f 0189 	mvn.w	r1, #137	; 0x89
 800f2c4:	68f8      	ldr	r0, [r7, #12]
 800f2c6:	f7fd fb5d 	bl	800c984 <SCPI_ErrorPush>
            result = FALSE;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	77fb      	strb	r3, [r7, #31]
 800f2ce:	e006      	b.n	800f2de <ParamSignUInt32+0x96>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 800f2d0:	f06f 0167 	mvn.w	r1, #103	; 0x67
 800f2d4:	68f8      	ldr	r0, [r7, #12]
 800f2d6:	f7fd fb55 	bl	800c984 <SCPI_ErrorPush>
            result = FALSE;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	77fb      	strb	r3, [r7, #31]
        }
    }
    return result;
 800f2de:	7ffb      	ldrb	r3, [r7, #31]
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3720      	adds	r7, #32
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	fffffeca 	.word	0xfffffeca

0800f2ec <SCPI_ParamInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamInt32(scpi_t * context, int32_t * value, scpi_bool_t mandatory) {
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	60f8      	str	r0, [r7, #12]
 800f2f4:	60b9      	str	r1, [r7, #8]
 800f2f6:	4613      	mov	r3, r2
 800f2f8:	71fb      	strb	r3, [r7, #7]
    return ParamSignUInt32(context, (uint32_t *) value, mandatory, TRUE);
 800f2fa:	79fa      	ldrb	r2, [r7, #7]
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	68b9      	ldr	r1, [r7, #8]
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	f7ff ffa1 	bl	800f248 <ParamSignUInt32>
 800f306:	4603      	mov	r3, r0
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3710      	adds	r7, #16
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <SCPI_ParamUInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory) {
 800f310:	b580      	push	{r7, lr}
 800f312:	b084      	sub	sp, #16
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	4613      	mov	r3, r2
 800f31c:	71fb      	strb	r3, [r7, #7]
    return ParamSignUInt32(context, value, mandatory, FALSE);
 800f31e:	79fa      	ldrb	r2, [r7, #7]
 800f320:	2300      	movs	r3, #0
 800f322:	68b9      	ldr	r1, [r7, #8]
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f7ff ff8f 	bl	800f248 <ParamSignUInt32>
 800f32a:	4603      	mov	r3, r0
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <SCPI_ParamCharacters>:
 * @param value
 * @param len
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamCharacters(scpi_t * context, const char ** value, size_t * len, scpi_bool_t mandatory) {
 800f334:	b580      	push	{r7, lr}
 800f336:	b088      	sub	sp, #32
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
 800f340:	70fb      	strb	r3, [r7, #3]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value || !len) {
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d002      	beq.n	800f34e <SCPI_ParamCharacters+0x1a>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d105      	bne.n	800f35a <SCPI_ParamCharacters+0x26>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800f34e:	4917      	ldr	r1, [pc, #92]	; (800f3ac <SCPI_ParamCharacters+0x78>)
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f7fd fb17 	bl	800c984 <SCPI_ErrorPush>
        return FALSE;
 800f356:	2300      	movs	r3, #0
 800f358:	e023      	b.n	800f3a2 <SCPI_ParamCharacters+0x6e>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 800f35a:	78fa      	ldrb	r2, [r7, #3]
 800f35c:	f107 0310 	add.w	r3, r7, #16
 800f360:	4619      	mov	r1, r3
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f7ff fd34 	bl	800edd0 <SCPI_Parameter>
 800f368:	4603      	mov	r3, r0
 800f36a:	77fb      	strb	r3, [r7, #31]
    if (result) {
 800f36c:	7ffb      	ldrb	r3, [r7, #31]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d015      	beq.n	800f39e <SCPI_ParamCharacters+0x6a>
        switch (param.type) {
 800f372:	7c3b      	ldrb	r3, [r7, #16]
 800f374:	3b0e      	subs	r3, #14
 800f376:	2b01      	cmp	r3, #1
 800f378:	d809      	bhi.n	800f38e <SCPI_ParamCharacters+0x5a>
            case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
            case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
                *value = param.ptr + 1;
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	1c5a      	adds	r2, r3, #1
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	601a      	str	r2, [r3, #0]
                *len = param.len - 2;
 800f382:	69bb      	ldr	r3, [r7, #24]
 800f384:	3b02      	subs	r3, #2
 800f386:	461a      	mov	r2, r3
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	601a      	str	r2, [r3, #0]
                break;
 800f38c:	e008      	b.n	800f3a0 <SCPI_ParamCharacters+0x6c>
            default:
                *value = param.ptr;
 800f38e:	697a      	ldr	r2, [r7, #20]
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	601a      	str	r2, [r3, #0]
                *len = param.len;
 800f394:	69bb      	ldr	r3, [r7, #24]
 800f396:	461a      	mov	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	601a      	str	r2, [r3, #0]
                break;
 800f39c:	e000      	b.n	800f3a0 <SCPI_ParamCharacters+0x6c>
        }

        /* TODO: return also parameter type (ProgramMnemonic, ArbitraryBlockProgramData, SingleQuoteProgramData, DoubleQuoteProgramData */
    }
 800f39e:	bf00      	nop

    return result;
 800f3a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3720      	adds	r7, #32
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	fffffeca 	.word	0xfffffeca

0800f3b0 <scpiParser_parseProgramData>:
 * Parse one parameter and detect type
 * @param state
 * @param token
 * @return
 */
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b08a      	sub	sp, #40	; 0x28
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
    scpi_token_t tmp;
    int result = 0;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	627b      	str	r3, [r7, #36]	; 0x24
    int wsLen;
    int suffixLen;
    int realLen = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	623b      	str	r3, [r7, #32]
    realLen += scpiLex_WhiteSpace(state, &tmp);
 800f3c2:	f107 030c 	add.w	r3, r7, #12
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f7fe f96c 	bl	800d6a6 <scpiLex_WhiteSpace>
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	6a3b      	ldr	r3, [r7, #32]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	623b      	str	r3, [r7, #32]

    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 800f3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d104      	bne.n	800f3e6 <scpiParser_parseProgramData+0x36>
 800f3dc:	6839      	ldr	r1, [r7, #0]
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f7fe fbe5 	bl	800dbae <scpiLex_NondecimalNumericData>
 800f3e4:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_CharacterProgramData(state, token);
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d104      	bne.n	800f3f6 <scpiParser_parseProgramData+0x46>
 800f3ec:	6839      	ldr	r1, [r7, #0]
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7fe fa43 	bl	800d87a <scpiLex_CharacterProgramData>
 800f3f4:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) {
 800f3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d126      	bne.n	800f44a <scpiParser_parseProgramData+0x9a>
        result = scpiLex_DecimalNumericProgramData(state, token);
 800f3fc:	6839      	ldr	r1, [r7, #0]
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f7fe fae1 	bl	800d9c6 <scpiLex_DecimalNumericProgramData>
 800f404:	6278      	str	r0, [r7, #36]	; 0x24
        if (result != 0) {
 800f406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d01e      	beq.n	800f44a <scpiParser_parseProgramData+0x9a>
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 800f40c:	f107 030c 	add.w	r3, r7, #12
 800f410:	4619      	mov	r1, r3
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f7fe f947 	bl	800d6a6 <scpiLex_WhiteSpace>
 800f418:	61f8      	str	r0, [r7, #28]
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 800f41a:	f107 030c 	add.w	r3, r7, #12
 800f41e:	4619      	mov	r1, r3
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7fe fb0c 	bl	800da3e <scpiLex_SuffixProgramData>
 800f426:	61b8      	str	r0, [r7, #24]
            if (suffixLen > 0) {
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	dd0d      	ble.n	800f44a <scpiParser_parseProgramData+0x9a>
                token->len += wsLen + suffixLen;
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	689a      	ldr	r2, [r3, #8]
 800f432:	69f9      	ldr	r1, [r7, #28]
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	440b      	add	r3, r1
 800f438:	441a      	add	r2, r3
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	609a      	str	r2, [r3, #8]
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	220b      	movs	r2, #11
 800f442:	701a      	strb	r2, [r3, #0]
                result = token->len;
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    if (result == 0) result = scpiLex_StringProgramData(state, token);
 800f44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d104      	bne.n	800f45a <scpiParser_parseProgramData+0xaa>
 800f450:	6839      	ldr	r1, [r7, #0]
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7fe fca8 	bl	800dda8 <scpiLex_StringProgramData>
 800f458:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 800f45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d104      	bne.n	800f46a <scpiParser_parseProgramData+0xba>
 800f460:	6839      	ldr	r1, [r7, #0]
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f7fe fd49 	bl	800defa <scpiLex_ArbitraryBlockProgramData>
 800f468:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ProgramExpression(state, token);
 800f46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d104      	bne.n	800f47a <scpiParser_parseProgramData+0xca>
 800f470:	6839      	ldr	r1, [r7, #0]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f7fe fe43 	bl	800e0fe <scpiLex_ProgramExpression>
 800f478:	6278      	str	r0, [r7, #36]	; 0x24

    realLen += scpiLex_WhiteSpace(state, &tmp);
 800f47a:	f107 030c 	add.w	r3, r7, #12
 800f47e:	4619      	mov	r1, r3
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f7fe f910 	bl	800d6a6 <scpiLex_WhiteSpace>
 800f486:	4602      	mov	r2, r0
 800f488:	6a3b      	ldr	r3, [r7, #32]
 800f48a:	4413      	add	r3, r2
 800f48c:	623b      	str	r3, [r7, #32]

    return result + realLen;
 800f48e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f490:	6a3b      	ldr	r3, [r7, #32]
 800f492:	4413      	add	r3, r2
}
 800f494:	4618      	mov	r0, r3
 800f496:	3728      	adds	r7, #40	; 0x28
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <scpiParser_parseAllProgramData>:
 * @param state
 * @param token
 * @param numberOfParameters
 * @return
 */
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b08a      	sub	sp, #40	; 0x28
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]

    int result;
    scpi_token_t tmp;
    int paramCount = 0;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	623b      	str	r3, [r7, #32]

    token->len = -1;
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f4b2:	609a      	str	r2, [r3, #8]
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	2218      	movs	r2, #24
 800f4b8:	701a      	strb	r2, [r3, #0]
    token->ptr = state->pos;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	685a      	ldr	r2, [r3, #4]
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	605a      	str	r2, [r3, #4]


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	627b      	str	r3, [r7, #36]	; 0x24
 800f4c6:	e037      	b.n	800f538 <scpiParser_parseAllProgramData+0x9c>
        token->len += result;
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	689a      	ldr	r2, [r3, #8]
 800f4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ce:	441a      	add	r2, r3
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	609a      	str	r2, [r3, #8]

        if (result == 0) {
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d109      	bne.n	800f4ee <scpiParser_parseAllProgramData+0x52>
            token->type = SCPI_TOKEN_UNKNOWN;
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	221a      	movs	r2, #26
 800f4de:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 800f4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ea:	623b      	str	r3, [r7, #32]
            break;
 800f4ec:	e027      	b.n	800f53e <scpiParser_parseAllProgramData+0xa2>
        }

        result = scpiParser_parseProgramData(state, &tmp);
 800f4ee:	f107 0314 	add.w	r3, r7, #20
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f7ff ff5b 	bl	800f3b0 <scpiParser_parseProgramData>
 800f4fa:	6278      	str	r0, [r7, #36]	; 0x24
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
 800f4fc:	7d3b      	ldrb	r3, [r7, #20]
 800f4fe:	2b1a      	cmp	r3, #26
 800f500:	d006      	beq.n	800f510 <scpiParser_parseAllProgramData+0x74>
            token->len += result;
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	689a      	ldr	r2, [r3, #8]
 800f506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f508:	441a      	add	r2, r3
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	609a      	str	r2, [r3, #8]
 800f50e:	e009      	b.n	800f524 <scpiParser_parseAllProgramData+0x88>
        } else {
            token->type = SCPI_TOKEN_UNKNOWN;
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	221a      	movs	r2, #26
 800f514:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	2200      	movs	r2, #0
 800f51a:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 800f51c:	f04f 33ff 	mov.w	r3, #4294967295
 800f520:	623b      	str	r3, [r7, #32]
            break;
 800f522:	e00c      	b.n	800f53e <scpiParser_parseAllProgramData+0xa2>
        }
        paramCount++;
 800f524:	6a3b      	ldr	r3, [r7, #32]
 800f526:	3301      	adds	r3, #1
 800f528:	623b      	str	r3, [r7, #32]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 800f52a:	f107 0314 	add.w	r3, r7, #20
 800f52e:	4619      	mov	r1, r3
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f7fe fe38 	bl	800e1a6 <scpiLex_Comma>
 800f536:	6278      	str	r0, [r7, #36]	; 0x24
 800f538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d1c4      	bne.n	800f4c8 <scpiParser_parseAllProgramData+0x2c>
    }

    if (token->len == -1) {
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f546:	d102      	bne.n	800f54e <scpiParser_parseAllProgramData+0xb2>
        token->len = 0;
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	2200      	movs	r2, #0
 800f54c:	609a      	str	r2, [r3, #8]
    }

    if (numberOfParameters != NULL) {
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d002      	beq.n	800f55a <scpiParser_parseAllProgramData+0xbe>
        *numberOfParameters = paramCount;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6a3a      	ldr	r2, [r7, #32]
 800f558:	601a      	str	r2, [r3, #0]
    }
    return token->len;
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	689b      	ldr	r3, [r3, #8]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3728      	adds	r7, #40	; 0x28
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 800f566:	b580      	push	{r7, lr}
 800f568:	b08c      	sub	sp, #48	; 0x30
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	60f8      	str	r0, [r7, #12]
 800f56e:	60b9      	str	r1, [r7, #8]
 800f570:	607a      	str	r2, [r7, #4]
    lex_state_t lex_state;
    scpi_token_t tmp;
    int result = 0;
 800f572:	2300      	movs	r3, #0
 800f574:	62fb      	str	r3, [r7, #44]	; 0x2c

    lex_state.buffer = lex_state.pos = buffer;
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	627b      	str	r3, [r7, #36]	; 0x24
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	623b      	str	r3, [r7, #32]
    lex_state.len = len;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	62bb      	str	r3, [r7, #40]	; 0x28
    state->numberOfParameters = 0;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	619a      	str	r2, [r3, #24]

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
 800f588:	f107 0214 	add.w	r2, r7, #20
 800f58c:	f107 0320 	add.w	r3, r7, #32
 800f590:	4611      	mov	r1, r2
 800f592:	4618      	mov	r0, r3
 800f594:	f7fe f887 	bl	800d6a6 <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	f107 0320 	add.w	r3, r7, #32
 800f59e:	4611      	mov	r1, r2
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fe f908 	bl	800d7b6 <scpiLex_ProgramHeader>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	db1e      	blt.n	800f5ea <scpiParser_detectProgramMessageUnit+0x84>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
 800f5ac:	f107 0214 	add.w	r2, r7, #20
 800f5b0:	f107 0320 	add.w	r3, r7, #32
 800f5b4:	4611      	mov	r1, r2
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fe f875 	bl	800d6a6 <scpiLex_WhiteSpace>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	dd0b      	ble.n	800f5da <scpiParser_detectProgramMessageUnit+0x74>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f103 010c 	add.w	r1, r3, #12
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	f103 0218 	add.w	r2, r3, #24
 800f5ce:	f107 0320 	add.w	r3, r7, #32
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7ff ff62 	bl	800f49c <scpiParser_parseAllProgramData>
 800f5d8:	e014      	b.n	800f604 <scpiParser_detectProgramMessageUnit+0x9e>
        } else {
            invalidateToken(&state->programData, lex_state.pos);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	330c      	adds	r3, #12
 800f5de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7ff fbe0 	bl	800eda8 <invalidateToken>
 800f5e8:	e00c      	b.n	800f604 <scpiParser_detectProgramMessageUnit+0x9e>
        }
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6a3a      	ldr	r2, [r7, #32]
 800f5ee:	4611      	mov	r1, r2
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7ff fbd9 	bl	800eda8 <invalidateToken>
        invalidateToken(&state->programData, lex_state.buffer);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	330c      	adds	r3, #12
 800f5fa:	6a3a      	ldr	r2, [r7, #32]
 800f5fc:	4611      	mov	r1, r2
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7ff fbd2 	bl	800eda8 <invalidateToken>
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
 800f604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f606:	2b00      	cmp	r3, #0
 800f608:	d108      	bne.n	800f61c <scpiParser_detectProgramMessageUnit+0xb6>
 800f60a:	f107 0214 	add.w	r2, r7, #20
 800f60e:	f107 0320 	add.w	r3, r7, #32
 800f612:	4611      	mov	r1, r2
 800f614:	4618      	mov	r0, r3
 800f616:	f7fe fe0c 	bl	800e232 <scpiLex_NewLine>
 800f61a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
 800f61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d108      	bne.n	800f634 <scpiParser_detectProgramMessageUnit+0xce>
 800f622:	f107 0214 	add.w	r2, r7, #20
 800f626:	f107 0320 	add.w	r3, r7, #32
 800f62a:	4611      	mov	r1, r2
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7fe fddd 	bl	800e1ec <scpiLex_Semicolon>
 800f632:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
 800f634:	f107 0320 	add.w	r3, r7, #32
 800f638:	4618      	mov	r0, r3
 800f63a:	f7fd fe31 	bl	800d2a0 <scpiLex_IsEos>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d112      	bne.n	800f66a <scpiParser_detectProgramMessageUnit+0x104>
 800f644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f646:	2b00      	cmp	r3, #0
 800f648:	d10f      	bne.n	800f66a <scpiParser_detectProgramMessageUnit+0x104>
        lex_state.pos++;
 800f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64c:	3301      	adds	r3, #1
 800f64e:	627b      	str	r3, [r7, #36]	; 0x24

        state->programHeader.len = 1;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2201      	movs	r2, #1
 800f654:	609a      	str	r2, [r3, #8]
        state->programHeader.type = SCPI_TOKEN_INVALID;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2219      	movs	r2, #25
 800f65a:	701a      	strb	r2, [r3, #0]

        invalidateToken(&state->programData, lex_state.buffer);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	330c      	adds	r3, #12
 800f660:	6a3a      	ldr	r2, [r7, #32]
 800f662:	4611      	mov	r1, r2
 800f664:	4618      	mov	r0, r3
 800f666:	f7ff fb9f 	bl	800eda8 <invalidateToken>
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
 800f66a:	7d3b      	ldrb	r3, [r7, #20]
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d103      	bne.n	800f678 <scpiParser_detectProgramMessageUnit+0x112>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2202      	movs	r2, #2
 800f674:	771a      	strb	r2, [r3, #28]
 800f676:	e009      	b.n	800f68c <scpiParser_detectProgramMessageUnit+0x126>
    } else if (SCPI_TOKEN_NL == tmp.type) {
 800f678:	7d3b      	ldrb	r3, [r7, #20]
 800f67a:	2b05      	cmp	r3, #5
 800f67c:	d103      	bne.n	800f686 <scpiParser_detectProgramMessageUnit+0x120>
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2201      	movs	r2, #1
 800f682:	771a      	strb	r2, [r3, #28]
 800f684:	e002      	b.n	800f68c <scpiParser_detectProgramMessageUnit+0x126>
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2200      	movs	r2, #0
 800f68a:	771a      	strb	r2, [r3, #28]
    }

    return lex_state.pos - lex_state.buffer;
 800f68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68e:	461a      	mov	r2, r3
 800f690:	6a3b      	ldr	r3, [r7, #32]
 800f692:	1ad3      	subs	r3, r2, r3
}
 800f694:	4618      	mov	r0, r3
 800f696:	3730      	adds	r7, #48	; 0x30
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
 800f69c:	b480      	push	{r7}
 800f69e:	b089      	sub	sp, #36	; 0x24
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	607a      	str	r2, [r7, #4]
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
 800f6a8:	68fa      	ldr	r2, [r7, #12]
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	61bb      	str	r3, [r7, #24]

    while ((strend != str) && ((c = *str++) != 0)) {
 800f6b0:	e011      	b.n	800f6d6 <strnpbrk+0x3a>
        for (scanp = set; (sc = *scanp++) != '\0';)
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	61fb      	str	r3, [r7, #28]
 800f6b6:	e006      	b.n	800f6c6 <strnpbrk+0x2a>
            if (sc == c)
 800f6b8:	693a      	ldr	r2, [r7, #16]
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d102      	bne.n	800f6c6 <strnpbrk+0x2a>
                return ((char *) (str - 1));
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	3b01      	subs	r3, #1
 800f6c4:	e014      	b.n	800f6f0 <strnpbrk+0x54>
        for (scanp = set; (sc = *scanp++) != '\0';)
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	1c5a      	adds	r2, r3, #1
 800f6ca:	61fa      	str	r2, [r7, #28]
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	613b      	str	r3, [r7, #16]
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1f0      	bne.n	800f6b8 <strnpbrk+0x1c>
    while ((strend != str) && ((c = *str++) != 0)) {
 800f6d6:	69ba      	ldr	r2, [r7, #24]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d007      	beq.n	800f6ee <strnpbrk+0x52>
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	1c5a      	adds	r2, r3, #1
 800f6e2:	60fa      	str	r2, [r7, #12]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	617b      	str	r3, [r7, #20]
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d1e1      	bne.n	800f6b2 <strnpbrk+0x16>
    }
    return (NULL);
 800f6ee:	2300      	movs	r3, #0
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3724      	adds	r7, #36	; 0x24
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <UInt32ToStrBaseSign>:
 * @param len   string buffer length
 * @param base  output base
 * @param sign
 * @return number of bytes written to str (without '\0')
 */
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 800f6fc:	b4b0      	push	{r4, r5, r7}
 800f6fe:	b08f      	sub	sp, #60	; 0x3c
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
 800f708:	70fb      	strb	r3, [r7, #3]
    const char digits[] = "0123456789ABCDEF";
 800f70a:	4b4a      	ldr	r3, [pc, #296]	; (800f834 <UInt32ToStrBaseSign+0x138>)
 800f70c:	f107 0414 	add.w	r4, r7, #20
 800f710:	461d      	mov	r5, r3
 800f712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f716:	682b      	ldr	r3, [r5, #0]
 800f718:	7023      	strb	r3, [r4, #0]

#define ADD_CHAR(c) if (pos < len) str[pos++] = (c)
    uint32_t x = 0;
 800f71a:	2300      	movs	r3, #0
 800f71c:	637b      	str	r3, [r7, #52]	; 0x34
    int_fast8_t digit;
    size_t pos = 0;
 800f71e:	2300      	movs	r3, #0
 800f720:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t uval = val;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (uval == 0) {
 800f726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d10b      	bne.n	800f744 <UInt32ToStrBaseSign+0x48>
        ADD_CHAR('0');
 800f72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	429a      	cmp	r2, r3
 800f732:	d26f      	bcs.n	800f814 <UInt32ToStrBaseSign+0x118>
 800f734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f736:	1c5a      	adds	r2, r3, #1
 800f738:	633a      	str	r2, [r7, #48]	; 0x30
 800f73a:	68ba      	ldr	r2, [r7, #8]
 800f73c:	4413      	add	r3, r2
 800f73e:	2230      	movs	r2, #48	; 0x30
 800f740:	701a      	strb	r2, [r3, #0]
 800f742:	e067      	b.n	800f814 <UInt32ToStrBaseSign+0x118>
    } else {

        switch (base) {
 800f744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f748:	2b08      	cmp	r3, #8
 800f74a:	d007      	beq.n	800f75c <UInt32ToStrBaseSign+0x60>
 800f74c:	2b10      	cmp	r3, #16
 800f74e:	d00e      	beq.n	800f76e <UInt32ToStrBaseSign+0x72>
 800f750:	2b02      	cmp	r3, #2
 800f752:	d107      	bne.n	800f764 <UInt32ToStrBaseSign+0x68>
            case 2:
                x = 0x80000000L;
 800f754:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f758:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800f75a:	e00c      	b.n	800f776 <UInt32ToStrBaseSign+0x7a>
            case 8:
                x = 0x40000000L;
 800f75c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f760:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800f762:	e008      	b.n	800f776 <UInt32ToStrBaseSign+0x7a>
            default:
            case 10:
                base = 10;
 800f764:	230a      	movs	r3, #10
 800f766:	70fb      	strb	r3, [r7, #3]
                x = 1000000000L;
 800f768:	4b33      	ldr	r3, [pc, #204]	; (800f838 <UInt32ToStrBaseSign+0x13c>)
 800f76a:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800f76c:	e003      	b.n	800f776 <UInt32ToStrBaseSign+0x7a>
            case 16:
                x = 0x10000000L;
 800f76e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f772:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800f774:	bf00      	nop
        }

        /* add sign for numbers in base 10 */
        if (sign && ((int32_t) val < 0) && (base == 10)) {
 800f776:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d01b      	beq.n	800f7b6 <UInt32ToStrBaseSign+0xba>
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2b00      	cmp	r3, #0
 800f782:	da18      	bge.n	800f7b6 <UInt32ToStrBaseSign+0xba>
 800f784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f788:	2b0a      	cmp	r3, #10
 800f78a:	d114      	bne.n	800f7b6 <UInt32ToStrBaseSign+0xba>
            uval = -val;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	425b      	negs	r3, r3
 800f790:	62fb      	str	r3, [r7, #44]	; 0x2c
            ADD_CHAR('-');
 800f792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	429a      	cmp	r2, r3
 800f798:	d20d      	bcs.n	800f7b6 <UInt32ToStrBaseSign+0xba>
 800f79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79c:	1c5a      	adds	r2, r3, #1
 800f79e:	633a      	str	r2, [r7, #48]	; 0x30
 800f7a0:	68ba      	ldr	r2, [r7, #8]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	222d      	movs	r2, #45	; 0x2d
 800f7a6:	701a      	strb	r2, [r3, #0]
        }

        /* remove leading zeros */
        while ((uval / x) == 0) {
 800f7a8:	e005      	b.n	800f7b6 <UInt32ToStrBaseSign+0xba>
            x /= base;
 800f7aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7b4:	637b      	str	r3, [r7, #52]	; 0x34
        while ((uval / x) == 0) {
 800f7b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d0f3      	beq.n	800f7aa <UInt32ToStrBaseSign+0xae>
        }

        do {
            digit = (uint8_t) (uval / x);
 800f7c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	62bb      	str	r3, [r7, #40]	; 0x28
            ADD_CHAR(digits[digit]);
 800f7ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d20a      	bcs.n	800f7ec <UInt32ToStrBaseSign+0xf0>
 800f7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d8:	1c5a      	adds	r2, r3, #1
 800f7da:	633a      	str	r2, [r7, #48]	; 0x30
 800f7dc:	68ba      	ldr	r2, [r7, #8]
 800f7de:	4413      	add	r3, r2
 800f7e0:	f107 0114 	add.w	r1, r7, #20
 800f7e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7e6:	440a      	add	r2, r1
 800f7e8:	7812      	ldrb	r2, [r2, #0]
 800f7ea:	701a      	strb	r2, [r3, #0]
            uval -= digit * x;
 800f7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7f0:	fb02 f303 	mul.w	r3, r2, r3
 800f7f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7f6:	1ad3      	subs	r3, r2, r3
 800f7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            x /= base;
 800f7fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f800:	fbb2 f3f3 	udiv	r3, r2, r3
 800f804:	637b      	str	r3, [r7, #52]	; 0x34
        } while (x && (pos < len));
 800f806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d003      	beq.n	800f814 <UInt32ToStrBaseSign+0x118>
 800f80c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	429a      	cmp	r2, r3
 800f812:	d3d6      	bcc.n	800f7c2 <UInt32ToStrBaseSign+0xc6>
    }

    if (pos < len) str[pos] = 0;
 800f814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d204      	bcs.n	800f826 <UInt32ToStrBaseSign+0x12a>
 800f81c:	68ba      	ldr	r2, [r7, #8]
 800f81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f820:	4413      	add	r3, r2
 800f822:	2200      	movs	r2, #0
 800f824:	701a      	strb	r2, [r3, #0]
    return pos;
 800f826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
#undef ADD_CHAR
}
 800f828:	4618      	mov	r0, r3
 800f82a:	373c      	adds	r7, #60	; 0x3c
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bcb0      	pop	{r4, r5, r7}
 800f830:	4770      	bx	lr
 800f832:	bf00      	nop
 800f834:	08015534 	.word	0x08015534
 800f838:	3b9aca00 	.word	0x3b9aca00

0800f83c <SCPI_UInt32ToStrBase>:
 * @param str   converted textual representation
 * @param len   string buffer length
 * @param base  output base
 * @return number of bytes written to str (without '\0')
 */
size_t SCPI_UInt32ToStrBase(uint32_t val, char * str, size_t len, int8_t base) {
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b086      	sub	sp, #24
 800f840:	af02      	add	r7, sp, #8
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	60b9      	str	r1, [r7, #8]
 800f846:	607a      	str	r2, [r7, #4]
 800f848:	70fb      	strb	r3, [r7, #3]
    return UInt32ToStrBaseSign(val, str, len, base, FALSE);
 800f84a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800f84e:	2300      	movs	r3, #0
 800f850:	9300      	str	r3, [sp, #0]
 800f852:	4613      	mov	r3, r2
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	68b9      	ldr	r1, [r7, #8]
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	f7ff ff4f 	bl	800f6fc <UInt32ToStrBaseSign>
 800f85e:	4603      	mov	r3, r0
}
 800f860:	4618      	mov	r0, r3
 800f862:	3710      	adds	r7, #16
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <strBaseToInt32>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 800f868:	b580      	push	{r7, lr}
 800f86a:	b086      	sub	sp, #24
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	4613      	mov	r3, r2
 800f874:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtol(str, &endptr, base);
 800f876:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800f87a:	f107 0314 	add.w	r3, r7, #20
 800f87e:	4619      	mov	r1, r3
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f002 fcc5 	bl	8012210 <strtol>
 800f886:	4602      	mov	r2, r0
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	601a      	str	r2, [r3, #0]
    return endptr - str;
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	461a      	mov	r2, r3
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	1ad3      	subs	r3, r2, r3
}
 800f894:	4618      	mov	r0, r3
 800f896:	3718      	adds	r7, #24
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <strBaseToUInt32>:
 * Converts string to unsigned 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b086      	sub	sp, #24
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	60b9      	str	r1, [r7, #8]
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtoul(str, &endptr, base);
 800f8aa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800f8ae:	f107 0314 	add.w	r3, r7, #20
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f002 fe05 	bl	80124c4 <strtoul>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	601a      	str	r2, [r3, #0]
    return endptr - str;
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	1ad3      	subs	r3, r2, r3
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3718      	adds	r7, #24
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <strBaseToInt64>:
 * Converts string to signed 64bit integer representation
 * @param str   string value
 * @param val   64bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToInt64(const char * str, int64_t * val, int8_t base) {
 800f8d0:	b590      	push	{r4, r7, lr}
 800f8d2:	b087      	sub	sp, #28
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	60f8      	str	r0, [r7, #12]
 800f8d8:	60b9      	str	r1, [r7, #8]
 800f8da:	4613      	mov	r3, r2
 800f8dc:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = SCPIDEFINE_strtoll(str, &endptr, base);
 800f8de:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800f8e2:	f107 0314 	add.w	r3, r7, #20
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	68f8      	ldr	r0, [r7, #12]
 800f8ea:	f002 fd5b 	bl	80123a4 <strtoll>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	460c      	mov	r4, r1
 800f8f2:	68ba      	ldr	r2, [r7, #8]
 800f8f4:	e9c2 3400 	strd	r3, r4, [r2]
    return endptr - str;
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	1ad3      	subs	r3, r2, r3
}
 800f900:	4618      	mov	r0, r3
 800f902:	371c      	adds	r7, #28
 800f904:	46bd      	mov	sp, r7
 800f906:	bd90      	pop	{r4, r7, pc}

0800f908 <strBaseToUInt64>:
 * Converts string to unsigned 64bit integer representation
 * @param str   string value
 * @param val   64bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToUInt64(const char * str, uint64_t * val, int8_t base) {
 800f908:	b590      	push	{r4, r7, lr}
 800f90a:	b087      	sub	sp, #28
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	4613      	mov	r3, r2
 800f914:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = SCPIDEFINE_strtoull(str, &endptr, base);
 800f916:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800f91a:	f107 0314 	add.w	r3, r7, #20
 800f91e:	4619      	mov	r1, r3
 800f920:	68f8      	ldr	r0, [r7, #12]
 800f922:	f002 fe9b 	bl	801265c <strtoull>
 800f926:	4603      	mov	r3, r0
 800f928:	460c      	mov	r4, r1
 800f92a:	68ba      	ldr	r2, [r7, #8]
 800f92c:	e9c2 3400 	strd	r3, r4, [r2]
    return endptr - str;
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	461a      	mov	r2, r3
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	1ad3      	subs	r3, r2, r3
}
 800f938:	4618      	mov	r0, r3
 800f93a:	371c      	adds	r7, #28
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd90      	pop	{r4, r7, pc}

0800f940 <strToDouble>:
 * @param val   double result
 * @return      number of bytes used in string
 */
double simple_strtod(const char* str, char** endptr);

size_t strToDouble(const char * str, double * val) {
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	6039      	str	r1, [r7, #0]
    char * endptr;
    *val = simple_strtod(str, &endptr);
 800f94a:	f107 030c 	add.w	r3, r7, #12
 800f94e:	4619      	mov	r1, r3
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f000 f811 	bl	800f978 <simple_strtod>
 800f956:	eeb0 7a40 	vmov.f32	s14, s0
 800f95a:	eef0 7a60 	vmov.f32	s15, s1
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	ed83 7b00 	vstr	d7, [r3]
    return endptr - str;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	461a      	mov	r2, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	1ad3      	subs	r3, r2, r3
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3710      	adds	r7, #16
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	0000      	movs	r0, r0
	...

0800f978 <simple_strtod>:

double simple_strtod(const char* str, char** endptr)
{
 800f978:	b5b0      	push	{r4, r5, r7, lr}
 800f97a:	b088      	sub	sp, #32
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
 int8_t inc;
 double result = 0.0;
 800f982:	f04f 0300 	mov.w	r3, #0
 800f986:	f04f 0400 	mov.w	r4, #0
 800f98a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 char * c_tmp;
 c_tmp = strchr(str, '.');
 800f98e:	212e      	movs	r1, #46	; 0x2e
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f002 fb83 	bl	801209c <strchr>
 800f996:	60f8      	str	r0, [r7, #12]
 *endptr = (char*)str;
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	601a      	str	r2, [r3, #0]
 if(c_tmp != NULL)
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f000 8087 	beq.w	800fab4 <simple_strtod+0x13c>
 {
    c_tmp++;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	60fb      	str	r3, [r7, #12]
    inc = -1;
 800f9ac:	23ff      	movs	r3, #255	; 0xff
 800f9ae:	77fb      	strb	r3, [r7, #31]
    while(*c_tmp != 0 && inc > -9)
 800f9b0:	e034      	b.n	800fa1c <simple_strtod+0xa4>
    {
        result += (*c_tmp - '0') * pow(10.0, inc);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	3b30      	subs	r3, #48	; 0x30
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7f0 fdcb 	bl	8000554 <__aeabi_i2d>
 800f9be:	4604      	mov	r4, r0
 800f9c0:	460d      	mov	r5, r1
 800f9c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7f0 fdc4 	bl	8000554 <__aeabi_i2d>
 800f9cc:	4602      	mov	r2, r0
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	ec43 2b11 	vmov	d1, r2, r3
 800f9d4:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 800fad0 <simple_strtod+0x158>
 800f9d8:	f003 fa6e 	bl	8012eb8 <pow>
 800f9dc:	ec53 2b10 	vmov	r2, r3, d0
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	4629      	mov	r1, r5
 800f9e4:	f7f0 fe20 	bl	8000628 <__aeabi_dmul>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	460c      	mov	r4, r1
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	4623      	mov	r3, r4
 800f9f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f9f4:	f7f0 fc62 	bl	80002bc <__adddf3>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	460c      	mov	r4, r1
 800f9fc:	e9c7 3404 	strd	r3, r4, [r7, #16]
        c_tmp++; inc--; (*endptr)++;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	3301      	adds	r3, #1
 800fa04:	60fb      	str	r3, [r7, #12]
 800fa06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	77fb      	strb	r3, [r7, #31]
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	1c5a      	adds	r2, r3, #1
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	601a      	str	r2, [r3, #0]
    while(*c_tmp != 0 && inc > -9)
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d004      	beq.n	800fa2e <simple_strtod+0xb6>
 800fa24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fa28:	f113 0f08 	cmn.w	r3, #8
 800fa2c:	dac1      	bge.n	800f9b2 <simple_strtod+0x3a>
    }
    inc = 0;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	77fb      	strb	r3, [r7, #31]
    c_tmp = strchr(str, '.');
 800fa32:	212e      	movs	r1, #46	; 0x2e
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f002 fb31 	bl	801209c <strchr>
 800fa3a:	60f8      	str	r0, [r7, #12]
    c_tmp--;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	3b01      	subs	r3, #1
 800fa40:	60fb      	str	r3, [r7, #12]
    do
    {
        result += (*c_tmp - '0') * pow(10.0,inc);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	3b30      	subs	r3, #48	; 0x30
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7f0 fd83 	bl	8000554 <__aeabi_i2d>
 800fa4e:	4604      	mov	r4, r0
 800fa50:	460d      	mov	r5, r1
 800fa52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7f0 fd7c 	bl	8000554 <__aeabi_i2d>
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	460b      	mov	r3, r1
 800fa60:	ec43 2b11 	vmov	d1, r2, r3
 800fa64:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800fad0 <simple_strtod+0x158>
 800fa68:	f003 fa26 	bl	8012eb8 <pow>
 800fa6c:	ec53 2b10 	vmov	r2, r3, d0
 800fa70:	4620      	mov	r0, r4
 800fa72:	4629      	mov	r1, r5
 800fa74:	f7f0 fdd8 	bl	8000628 <__aeabi_dmul>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	460c      	mov	r4, r1
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	4623      	mov	r3, r4
 800fa80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fa84:	f7f0 fc1a 	bl	80002bc <__adddf3>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	460c      	mov	r4, r1
 800fa8c:	e9c7 3404 	strd	r3, r4, [r7, #16]
        c_tmp--; inc++; (*endptr)++;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	3b01      	subs	r3, #1
 800fa94:	60fb      	str	r3, [r7, #12]
 800fa96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	77fb      	strb	r3, [r7, #31]
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	1c5a      	adds	r2, r3, #1
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	601a      	str	r2, [r3, #0]
    }while(c_tmp >= str);
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d2c6      	bcs.n	800fa42 <simple_strtod+0xca>
 }
 return result;
 800fab4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800fab8:	ec44 3b17 	vmov	d7, r3, r4
}
 800fabc:	eeb0 0a47 	vmov.f32	s0, s14
 800fac0:	eef0 0a67 	vmov.f32	s1, s15
 800fac4:	3720      	adds	r7, #32
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bdb0      	pop	{r4, r5, r7, pc}
 800faca:	bf00      	nop
 800facc:	f3af 8000 	nop.w
 800fad0:	00000000 	.word	0x00000000
 800fad4:	40240000 	.word	0x40240000

0800fad8 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 800fad8:	b580      	push	{r7, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	607a      	str	r2, [r7, #4]
 800fae4:	603b      	str	r3, [r7, #0]
    if (len1 != len2) {
 800fae6:	68ba      	ldr	r2, [r7, #8]
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	429a      	cmp	r2, r3
 800faec:	d001      	beq.n	800faf2 <compareStr+0x1a>
        return FALSE;
 800faee:	2300      	movs	r3, #0
 800faf0:	e00a      	b.n	800fb08 <compareStr+0x30>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
 800faf2:	683a      	ldr	r2, [r7, #0]
 800faf4:	6879      	ldr	r1, [r7, #4]
 800faf6:	68f8      	ldr	r0, [r7, #12]
 800faf8:	f002 fadd 	bl	80120b6 <strncasecmp>
 800fafc:	4603      	mov	r3, r0
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d101      	bne.n	800fb06 <compareStr+0x2e>
        return TRUE;
 800fb02:	2301      	movs	r3, #1
 800fb04:	e000      	b.n	800fb08 <compareStr+0x30>
    }

    return FALSE;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3710      	adds	r7, #16
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <compareStrAndNum>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if strings match
 */
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b088      	sub	sp, #32
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	607a      	str	r2, [r7, #4]
 800fb1c:	603b      	str	r3, [r7, #0]
    scpi_bool_t result = FALSE;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	77fb      	strb	r3, [r7, #31]
    size_t i;

    if (len2 < len1) {
 800fb22:	683a      	ldr	r2, [r7, #0]
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d201      	bcs.n	800fb2e <compareStrAndNum+0x1e>
        return FALSE;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	e044      	b.n	800fbb8 <compareStrAndNum+0xa8>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
 800fb2e:	68ba      	ldr	r2, [r7, #8]
 800fb30:	6879      	ldr	r1, [r7, #4]
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	f002 fabf 	bl	80120b6 <strncasecmp>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d13b      	bne.n	800fbb6 <compareStrAndNum+0xa6>
        result = TRUE;
 800fb3e:	2301      	movs	r3, #1
 800fb40:	77fb      	strb	r3, [r7, #31]

        if (num) {
 800fb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d01b      	beq.n	800fb80 <compareStrAndNum+0x70>
            if (len1 == len2) {
 800fb48:	68ba      	ldr	r2, [r7, #8]
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d032      	beq.n	800fbb6 <compareStrAndNum+0xa6>
                /* *num = 1; */
            } else {
                int32_t tmpNum;
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	4413      	add	r3, r2
 800fb56:	f107 0114 	add.w	r1, r7, #20
 800fb5a:	220a      	movs	r2, #10
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7ff fe83 	bl	800f868 <strBaseToInt32>
 800fb62:	4602      	mov	r2, r0
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	4413      	add	r3, r2
 800fb68:	61bb      	str	r3, [r7, #24]
                if (i != len2) {
 800fb6a:	69ba      	ldr	r2, [r7, #24]
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d002      	beq.n	800fb78 <compareStrAndNum+0x68>
                    result = FALSE;
 800fb72:	2300      	movs	r3, #0
 800fb74:	77fb      	strb	r3, [r7, #31]
 800fb76:	e01e      	b.n	800fbb6 <compareStrAndNum+0xa6>
                } else {
                    *num = tmpNum;
 800fb78:	697a      	ldr	r2, [r7, #20]
 800fb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7c:	601a      	str	r2, [r3, #0]
 800fb7e:	e01a      	b.n	800fbb6 <compareStrAndNum+0xa6>
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	61bb      	str	r3, [r7, #24]
 800fb84:	e013      	b.n	800fbae <compareStrAndNum+0x9e>
                if (!isdigit((int) str2[i])) {
 800fb86:	f002 fa1d 	bl	8011fc4 <__locale_ctype_ptr>
 800fb8a:	4601      	mov	r1, r0
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	69bb      	ldr	r3, [r7, #24]
 800fb90:	4413      	add	r3, r2
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	3301      	adds	r3, #1
 800fb96:	440b      	add	r3, r1
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	f003 0304 	and.w	r3, r3, #4
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d102      	bne.n	800fba8 <compareStrAndNum+0x98>
                    result = FALSE;
 800fba2:	2300      	movs	r3, #0
 800fba4:	77fb      	strb	r3, [r7, #31]
                    break;
 800fba6:	e006      	b.n	800fbb6 <compareStrAndNum+0xa6>
            for (i = len1; i < len2; i++) {
 800fba8:	69bb      	ldr	r3, [r7, #24]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	61bb      	str	r3, [r7, #24]
 800fbae:	69ba      	ldr	r2, [r7, #24]
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d3e7      	bcc.n	800fb86 <compareStrAndNum+0x76>
                }
            }
        }
    }

    return result;
 800fbb6:	7ffb      	ldrb	r3, [r7, #31]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3720      	adds	r7, #32
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 800fbca:	2300      	movs	r3, #0
 800fbcc:	60fb      	str	r3, [r7, #12]
 800fbce:	e012      	b.n	800fbf6 <patternSeparatorShortPos+0x36>
        if (islower((unsigned char) pattern[i])) {
 800fbd0:	f002 f9f8 	bl	8011fc4 <__locale_ctype_ptr>
 800fbd4:	4601      	mov	r1, r0
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	4413      	add	r3, r2
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	440b      	add	r3, r1
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	f003 0303 	and.w	r3, r3, #3
 800fbe8:	2b02      	cmp	r3, #2
 800fbea:	d101      	bne.n	800fbf0 <patternSeparatorShortPos+0x30>
            return i;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	e00d      	b.n	800fc0c <patternSeparatorShortPos+0x4c>
    for (i = 0; (i < len) && pattern[i]; i++) {
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	60fb      	str	r3, [r7, #12]
 800fbf6:	68fa      	ldr	r2, [r7, #12]
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d205      	bcs.n	800fc0a <patternSeparatorShortPos+0x4a>
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	4413      	add	r3, r2
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d1e2      	bne.n	800fbd0 <patternSeparatorShortPos+0x10>
        }
    }
    return i;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3710      	adds	r7, #16
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <patternSeparatorPos>:
 * Find pattern separator position
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorPos(const char * pattern, size_t len) {
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]

    char * separator = strnpbrk(pattern, len, "?:[]");
 800fc1e:	4a09      	ldr	r2, [pc, #36]	; (800fc44 <patternSeparatorPos+0x30>)
 800fc20:	6839      	ldr	r1, [r7, #0]
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f7ff fd3a 	bl	800f69c <strnpbrk>
 800fc28:	60f8      	str	r0, [r7, #12]
    if (separator == NULL) {
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d101      	bne.n	800fc34 <patternSeparatorPos+0x20>
        return len;
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	e002      	b.n	800fc3a <patternSeparatorPos+0x26>
    } else {
        return separator - pattern;
 800fc34:	68fa      	ldr	r2, [r7, #12]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	1ad3      	subs	r3, r2, r3
    }
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	08015554 	.word	0x08015554

0800fc48 <cmdSeparatorPos>:
 * Find command separator position
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
static size_t cmdSeparatorPos(const char * cmd, size_t len) {
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
    char * separator = strnpbrk(cmd, len, ":?");
 800fc52:	4a0a      	ldr	r2, [pc, #40]	; (800fc7c <cmdSeparatorPos+0x34>)
 800fc54:	6839      	ldr	r1, [r7, #0]
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f7ff fd20 	bl	800f69c <strnpbrk>
 800fc5c:	60b8      	str	r0, [r7, #8]
    size_t result;
    if (separator == NULL) {
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d102      	bne.n	800fc6a <cmdSeparatorPos+0x22>
        result = len;
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	60fb      	str	r3, [r7, #12]
 800fc68:	e003      	b.n	800fc72 <cmdSeparatorPos+0x2a>
    } else {
        result = separator - cmd;
 800fc6a:	68ba      	ldr	r2, [r7, #8]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	1ad3      	subs	r3, r2, r3
 800fc70:	60fb      	str	r3, [r7, #12]
    }

    return result;
 800fc72:	68fb      	ldr	r3, [r7, #12]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3710      	adds	r7, #16
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	0801555c 	.word	0x0801555c

0800fc80 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b088      	sub	sp, #32
 800fc84:	af02      	add	r7, sp, #8
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
 800fc8c:	603b      	str	r3, [r7, #0]
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d02c      	beq.n	800fcee <matchPattern+0x6e>
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	3b01      	subs	r3, #1
 800fc98:	68fa      	ldr	r2, [r7, #12]
 800fc9a:	4413      	add	r3, r2
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	2b23      	cmp	r3, #35	; 0x23
 800fca0:	d125      	bne.n	800fcee <matchPattern+0x6e>
        size_t new_pattern_len = pattern_len - 1;
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	3b01      	subs	r3, #1
 800fca6:	617b      	str	r3, [r7, #20]

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 800fca8:	6979      	ldr	r1, [r7, #20]
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	f7ff ff88 	bl	800fbc0 <patternSeparatorShortPos>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	613b      	str	r3, [r7, #16]

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 800fcb4:	6a3b      	ldr	r3, [r7, #32]
 800fcb6:	9300      	str	r3, [sp, #0]
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	687a      	ldr	r2, [r7, #4]
 800fcbc:	6979      	ldr	r1, [r7, #20]
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f7ff ff26 	bl	800fb10 <compareStrAndNum>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d10a      	bne.n	800fce0 <matchPattern+0x60>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
 800fcca:	6939      	ldr	r1, [r7, #16]
 800fccc:	6a3b      	ldr	r3, [r7, #32]
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f7ff ff1b 	bl	800fb10 <compareStrAndNum>
 800fcda:	4603      	mov	r3, r0
        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d001      	beq.n	800fce4 <matchPattern+0x64>
 800fce0:	2301      	movs	r3, #1
 800fce2:	e000      	b.n	800fce6 <matchPattern+0x66>
 800fce4:	2300      	movs	r3, #0
 800fce6:	f003 0301 	and.w	r3, r3, #1
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	e01d      	b.n	800fd2a <matchPattern+0xaa>
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 800fcee:	68b9      	ldr	r1, [r7, #8]
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f7ff ff65 	bl	800fbc0 <patternSeparatorShortPos>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	613b      	str	r3, [r7, #16]

        return compareStr(pattern, pattern_len, str, str_len) ||
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	68b9      	ldr	r1, [r7, #8]
 800fd00:	68f8      	ldr	r0, [r7, #12]
 800fd02:	f7ff fee9 	bl	800fad8 <compareStr>
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d108      	bne.n	800fd1e <matchPattern+0x9e>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
 800fd0c:	6939      	ldr	r1, [r7, #16]
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	68f8      	ldr	r0, [r7, #12]
 800fd14:	f7ff fee0 	bl	800fad8 <compareStr>
 800fd18:	4603      	mov	r3, r0
        return compareStr(pattern, pattern_len, str, str_len) ||
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d001      	beq.n	800fd22 <matchPattern+0xa2>
 800fd1e:	2301      	movs	r3, #1
 800fd20:	e000      	b.n	800fd24 <matchPattern+0xa4>
 800fd22:	2300      	movs	r3, #0
 800fd24:	f003 0301 	and.w	r3, r3, #1
 800fd28:	b2db      	uxtb	r3, r3
    }
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3718      	adds	r7, #24
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b090      	sub	sp, #64	; 0x40
 800fd36:	af02      	add	r7, sp, #8
 800fd38:	60f8      	str	r0, [r7, #12]
 800fd3a:	60b9      	str	r1, [r7, #8]
 800fd3c:	607a      	str	r2, [r7, #4]
 800fd3e:	603b      	str	r3, [r7, #0]
#define SKIP_PATTERN(n) do {pattern_ptr += (n);  pattern_len -= (n);} while(0)
#define SKIP_CMD(n) do {cmd_ptr += (n);  cmd_len -= (n);} while(0)

    scpi_bool_t result = FALSE;
 800fd40:	2300      	movs	r3, #0
 800fd42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int brackets = 0;
 800fd46:	2300      	movs	r3, #0
 800fd48:	633b      	str	r3, [r7, #48]	; 0x30
    int cmd_sep_pos = 0;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	617b      	str	r3, [r7, #20]

    size_t numbers_idx = 0;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t *number_ptr = NULL;
 800fd52:	2300      	movs	r3, #0
 800fd54:	62bb      	str	r3, [r7, #40]	; 0x28

    const char * pattern_ptr = pattern;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	627b      	str	r3, [r7, #36]	; 0x24
    int pattern_len = strlen(pattern);
 800fd5a:	68f8      	ldr	r0, [r7, #12]
 800fd5c:	f7f0 fa4a 	bl	80001f4 <strlen>
 800fd60:	4603      	mov	r3, r0
 800fd62:	623b      	str	r3, [r7, #32]

    const char * cmd_ptr = cmd;
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	61fb      	str	r3, [r7, #28]
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 800fd68:	6879      	ldr	r1, [r7, #4]
 800fd6a:	68b8      	ldr	r0, [r7, #8]
 800fd6c:	f002 f9c8 	bl	8012100 <strnlen>
 800fd70:	61b8      	str	r0, [r7, #24]

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
 800fd72:	6a3b      	ldr	r3, [r7, #32]
 800fd74:	3b01      	subs	r3, #1
 800fd76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd78:	4413      	add	r3, r2
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	2b3f      	cmp	r3, #63	; 0x3f
 800fd7e:	d10f      	bne.n	800fda0 <matchCommand+0x6e>
        if (cmd_ptr[cmd_len - 1] == '?') {
 800fd80:	69bb      	ldr	r3, [r7, #24]
 800fd82:	3b01      	subs	r3, #1
 800fd84:	69fa      	ldr	r2, [r7, #28]
 800fd86:	4413      	add	r3, r2
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	2b3f      	cmp	r3, #63	; 0x3f
 800fd8c:	d106      	bne.n	800fd9c <matchCommand+0x6a>
            cmd_len -= 1;
 800fd8e:	69bb      	ldr	r3, [r7, #24]
 800fd90:	3b01      	subs	r3, #1
 800fd92:	61bb      	str	r3, [r7, #24]
            pattern_len -= 1;
 800fd94:	6a3b      	ldr	r3, [r7, #32]
 800fd96:	3b01      	subs	r3, #1
 800fd98:	623b      	str	r3, [r7, #32]
 800fd9a:	e001      	b.n	800fda0 <matchCommand+0x6e>
        } else {
            return FALSE;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	e18d      	b.n	80100bc <matchCommand+0x38a>
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
 800fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	2b5b      	cmp	r3, #91	; 0x5b
 800fda6:	d108      	bne.n	800fdba <matchCommand+0x88>
        SKIP_PATTERN(1);
 800fda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdaa:	3301      	adds	r3, #1
 800fdac:	627b      	str	r3, [r7, #36]	; 0x24
 800fdae:	6a3b      	ldr	r3, [r7, #32]
 800fdb0:	3b01      	subs	r3, #1
 800fdb2:	623b      	str	r3, [r7, #32]
        brackets++;
 800fdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 800fdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	2b3a      	cmp	r3, #58	; 0x3a
 800fdc0:	d105      	bne.n	800fdce <matchCommand+0x9c>
        SKIP_PATTERN(1);
 800fdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	627b      	str	r3, [r7, #36]	; 0x24
 800fdc8:	6a3b      	ldr	r3, [r7, #32]
 800fdca:	3b01      	subs	r3, #1
 800fdcc:	623b      	str	r3, [r7, #32]
    }

    if (cmd_ptr[0] == ':') {
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	781b      	ldrb	r3, [r3, #0]
 800fdd2:	2b3a      	cmp	r3, #58	; 0x3a
 800fdd4:	d110      	bne.n	800fdf8 <matchCommand+0xc6>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	2b01      	cmp	r3, #1
 800fdda:	d90d      	bls.n	800fdf8 <matchCommand+0xc6>
            if (cmd_ptr[1] != '*') {
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	3301      	adds	r3, #1
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	2b2a      	cmp	r3, #42	; 0x2a
 800fde4:	d006      	beq.n	800fdf4 <matchCommand+0xc2>
                SKIP_CMD(1);
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	3301      	adds	r3, #1
 800fdea:	61fb      	str	r3, [r7, #28]
 800fdec:	69bb      	ldr	r3, [r7, #24]
 800fdee:	3b01      	subs	r3, #1
 800fdf0:	61bb      	str	r3, [r7, #24]
 800fdf2:	e001      	b.n	800fdf8 <matchCommand+0xc6>
            } else {
                return FALSE;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	e161      	b.n	80100bc <matchCommand+0x38a>
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 800fdf8:	6a3b      	ldr	r3, [r7, #32]
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdfe:	f7ff ff09 	bl	800fc14 <patternSeparatorPos>
 800fe02:	4603      	mov	r3, r0
 800fe04:	613b      	str	r3, [r7, #16]

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);
 800fe06:	69b9      	ldr	r1, [r7, #24]
 800fe08:	69f8      	ldr	r0, [r7, #28]
 800fe0a:	f7ff ff1d 	bl	800fc48 <cmdSeparatorPos>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	617b      	str	r3, [r7, #20]

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	dd1c      	ble.n	800fe52 <matchCommand+0x120>
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	3b01      	subs	r3, #1
 800fe1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe1e:	4413      	add	r3, r2
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	2b23      	cmp	r3, #35	; 0x23
 800fe24:	d115      	bne.n	800fe52 <matchCommand+0x120>
            if (numbers && (numbers_idx < numbers_len)) {
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d00c      	beq.n	800fe46 <matchCommand+0x114>
 800fe2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d208      	bcs.n	800fe46 <matchCommand+0x114>
                number_ptr = numbers + numbers_idx;
 800fe34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	683a      	ldr	r2, [r7, #0]
 800fe3a:	4413      	add	r3, r2
 800fe3c:	62bb      	str	r3, [r7, #40]	; 0x28
                *number_ptr = default_value; /* default value */
 800fe3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe42:	601a      	str	r2, [r3, #0]
 800fe44:	e001      	b.n	800fe4a <matchCommand+0x118>
            } else {
                number_ptr = NULL;
 800fe46:	2300      	movs	r3, #0
 800fe48:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            numbers_idx++;
 800fe4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe50:	e001      	b.n	800fe56 <matchCommand+0x124>
        } else {
            number_ptr = NULL;
 800fe52:	2300      	movs	r3, #0
 800fe54:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
 800fe56:	6939      	ldr	r1, [r7, #16]
 800fe58:	697a      	ldr	r2, [r7, #20]
 800fe5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5c:	9300      	str	r3, [sp, #0]
 800fe5e:	4613      	mov	r3, r2
 800fe60:	69fa      	ldr	r2, [r7, #28]
 800fe62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe64:	f7ff ff0c 	bl	800fc80 <matchPattern>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f000 80e9 	beq.w	8010042 <matchCommand+0x310>
            SKIP_PATTERN(pattern_sep_pos);
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe74:	4413      	add	r3, r2
 800fe76:	627b      	str	r3, [r7, #36]	; 0x24
 800fe78:	6a3a      	ldr	r2, [r7, #32]
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	1ad3      	subs	r3, r2, r3
 800fe7e:	623b      	str	r3, [r7, #32]
            SKIP_CMD(cmd_sep_pos);
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	69fa      	ldr	r2, [r7, #28]
 800fe84:	4413      	add	r3, r2
 800fe86:	61fb      	str	r3, [r7, #28]
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	69ba      	ldr	r2, [r7, #24]
 800fe8c:	1ad3      	subs	r3, r2, r3
 800fe8e:	61bb      	str	r3, [r7, #24]
            result = TRUE;
 800fe90:	2301      	movs	r3, #1
 800fe92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
 800fe96:	6a3b      	ldr	r3, [r7, #32]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d103      	bne.n	800fea4 <matchCommand+0x172>
 800fe9c:	69bb      	ldr	r3, [r7, #24]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f000 8107 	beq.w	80100b2 <matchCommand+0x380>
                break;
            }

            /* pattern complete, but command not */
            if ((pattern_len == 0) && (cmd_len > 0)) {
 800fea4:	6a3b      	ldr	r3, [r7, #32]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d106      	bne.n	800feb8 <matchCommand+0x186>
 800feaa:	69bb      	ldr	r3, [r7, #24]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d003      	beq.n	800feb8 <matchCommand+0x186>
                result = FALSE;
 800feb0:	2300      	movs	r3, #0
 800feb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800feb6:	e0ff      	b.n	80100b8 <matchCommand+0x386>
            }

            /* command complete, but pattern not */
            if (cmd_len == 0) {
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d138      	bne.n	800ff30 <matchCommand+0x1fe>
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
 800febe:	e02c      	b.n	800ff1a <matchCommand+0x1e8>
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 800fec0:	6a3b      	ldr	r3, [r7, #32]
 800fec2:	4619      	mov	r1, r3
 800fec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fec6:	f7ff fea5 	bl	800fc14 <patternSeparatorPos>
 800feca:	4603      	mov	r3, r0
 800fecc:	613b      	str	r3, [r7, #16]
                    switch (pattern_ptr[pattern_sep_pos]) {
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fed2:	4413      	add	r3, r2
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	2b5b      	cmp	r3, #91	; 0x5b
 800fed8:	d002      	beq.n	800fee0 <matchCommand+0x1ae>
 800feda:	2b5d      	cmp	r3, #93	; 0x5d
 800fedc:	d004      	beq.n	800fee8 <matchCommand+0x1b6>
                            break;
                        case ']':
                            brackets--;
                            break;
                        default:
                            break;
 800fede:	e007      	b.n	800fef0 <matchCommand+0x1be>
                            brackets++;
 800fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee2:	3301      	adds	r3, #1
 800fee4:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 800fee6:	e003      	b.n	800fef0 <matchCommand+0x1be>
                            brackets--;
 800fee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feea:	3b01      	subs	r3, #1
 800feec:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 800feee:	bf00      	nop
                    }
                    SKIP_PATTERN(pattern_sep_pos + 1);
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	3301      	adds	r3, #1
 800fef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fef6:	4413      	add	r3, r2
 800fef8:	627b      	str	r3, [r7, #36]	; 0x24
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	3301      	adds	r3, #1
 800fefe:	6a3a      	ldr	r2, [r7, #32]
 800ff00:	1ad3      	subs	r3, r2, r3
 800ff02:	623b      	str	r3, [r7, #32]
                    if (brackets == 0) {
 800ff04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d107      	bne.n	800ff1a <matchCommand+0x1e8>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
 800ff0a:	6a3b      	ldr	r3, [r7, #32]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	dd07      	ble.n	800ff20 <matchCommand+0x1ee>
 800ff10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	2b5b      	cmp	r3, #91	; 0x5b
 800ff16:	d103      	bne.n	800ff20 <matchCommand+0x1ee>
                            continue;
 800ff18:	bf00      	nop
                while (pattern_len) {
 800ff1a:	6a3b      	ldr	r3, [r7, #32]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d1cf      	bne.n	800fec0 <matchCommand+0x18e>
                        } else {
                            break;
                        }
                    }
                }
                if (pattern_len != 0) {
 800ff20:	6a3b      	ldr	r3, [r7, #32]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	f000 80c7 	beq.w	80100b6 <matchCommand+0x384>
                    result = FALSE;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                }
                break; /* exist optional keyword, command is complete */
 800ff2e:	e0c2      	b.n	80100b6 <matchCommand+0x384>
            }

            /* both command and patter contains command separator at this position */
            if ((pattern_len > 0)
 800ff30:	6a3b      	ldr	r3, [r7, #32]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	dd16      	ble.n	800ff64 <matchCommand+0x232>
                    && ((pattern_ptr[0] == cmd_ptr[0])
 800ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff38:	781a      	ldrb	r2, [r3, #0]
 800ff3a:	69fb      	ldr	r3, [r7, #28]
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d110      	bne.n	800ff64 <matchCommand+0x232>
                    && (pattern_ptr[0] == ':'))) {
 800ff42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	2b3a      	cmp	r3, #58	; 0x3a
 800ff48:	d10c      	bne.n	800ff64 <matchCommand+0x232>
                SKIP_PATTERN(1);
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ff50:	6a3b      	ldr	r3, [r7, #32]
 800ff52:	3b01      	subs	r3, #1
 800ff54:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	3301      	adds	r3, #1
 800ff5a:	61fb      	str	r3, [r7, #28]
 800ff5c:	69bb      	ldr	r3, [r7, #24]
 800ff5e:	3b01      	subs	r3, #1
 800ff60:	61bb      	str	r3, [r7, #24]
 800ff62:	e0a5      	b.n	80100b0 <matchCommand+0x37e>
            } else if ((pattern_len > 1)
 800ff64:	6a3b      	ldr	r3, [r7, #32]
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	dd1f      	ble.n	800ffaa <matchCommand+0x278>
                    && (pattern_ptr[1] == cmd_ptr[0])
 800ff6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	781a      	ldrb	r2, [r3, #0]
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d118      	bne.n	800ffaa <matchCommand+0x278>
                    && (pattern_ptr[0] == '[')
 800ff78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	2b5b      	cmp	r3, #91	; 0x5b
 800ff7e:	d114      	bne.n	800ffaa <matchCommand+0x278>
                    && (pattern_ptr[1] == ':')) {
 800ff80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff82:	3301      	adds	r3, #1
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	2b3a      	cmp	r3, #58	; 0x3a
 800ff88:	d10f      	bne.n	800ffaa <matchCommand+0x278>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
 800ff8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8c:	3302      	adds	r3, #2
 800ff8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ff90:	6a3b      	ldr	r3, [r7, #32]
 800ff92:	3b02      	subs	r3, #2
 800ff94:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	3301      	adds	r3, #1
 800ff9a:	61fb      	str	r3, [r7, #28]
 800ff9c:	69bb      	ldr	r3, [r7, #24]
 800ff9e:	3b01      	subs	r3, #1
 800ffa0:	61bb      	str	r3, [r7, #24]
                brackets++;
 800ffa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	633b      	str	r3, [r7, #48]	; 0x30
 800ffa8:	e082      	b.n	80100b0 <matchCommand+0x37e>
            } else if ((pattern_len > 1)
 800ffaa:	6a3b      	ldr	r3, [r7, #32]
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	dd1f      	ble.n	800fff0 <matchCommand+0x2be>
                    && (pattern_ptr[1] == cmd_ptr[0])
 800ffb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	781a      	ldrb	r2, [r3, #0]
 800ffb6:	69fb      	ldr	r3, [r7, #28]
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d118      	bne.n	800fff0 <matchCommand+0x2be>
                    && (pattern_ptr[0] == ']')
 800ffbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	2b5d      	cmp	r3, #93	; 0x5d
 800ffc4:	d114      	bne.n	800fff0 <matchCommand+0x2be>
                    && (pattern_ptr[1] == ':')) {
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	3301      	adds	r3, #1
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	2b3a      	cmp	r3, #58	; 0x3a
 800ffce:	d10f      	bne.n	800fff0 <matchCommand+0x2be>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
 800ffd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd2:	3302      	adds	r3, #2
 800ffd4:	627b      	str	r3, [r7, #36]	; 0x24
 800ffd6:	6a3b      	ldr	r3, [r7, #32]
 800ffd8:	3b02      	subs	r3, #2
 800ffda:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 800ffdc:	69fb      	ldr	r3, [r7, #28]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	61fb      	str	r3, [r7, #28]
 800ffe2:	69bb      	ldr	r3, [r7, #24]
 800ffe4:	3b01      	subs	r3, #1
 800ffe6:	61bb      	str	r3, [r7, #24]
                brackets--;
 800ffe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffea:	3b01      	subs	r3, #1
 800ffec:	633b      	str	r3, [r7, #48]	; 0x30
 800ffee:	e05f      	b.n	80100b0 <matchCommand+0x37e>
            } else if ((pattern_len > 2)
 800fff0:	6a3b      	ldr	r3, [r7, #32]
 800fff2:	2b02      	cmp	r3, #2
 800fff4:	dd21      	ble.n	801003a <matchCommand+0x308>
                    && (pattern_ptr[2] == cmd_ptr[0])
 800fff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff8:	3302      	adds	r3, #2
 800fffa:	781a      	ldrb	r2, [r3, #0]
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	429a      	cmp	r2, r3
 8010002:	d11a      	bne.n	801003a <matchCommand+0x308>
                    && (pattern_ptr[0] == ']')
 8010004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	2b5d      	cmp	r3, #93	; 0x5d
 801000a:	d116      	bne.n	801003a <matchCommand+0x308>
                    && (pattern_ptr[1] == '[')
 801000c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000e:	3301      	adds	r3, #1
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	2b5b      	cmp	r3, #91	; 0x5b
 8010014:	d111      	bne.n	801003a <matchCommand+0x308>
                    && (pattern_ptr[2] == ':')) {
 8010016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010018:	3302      	adds	r3, #2
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	2b3a      	cmp	r3, #58	; 0x3a
 801001e:	d10c      	bne.n	801003a <matchCommand+0x308>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	3303      	adds	r3, #3
 8010024:	627b      	str	r3, [r7, #36]	; 0x24
 8010026:	6a3b      	ldr	r3, [r7, #32]
 8010028:	3b03      	subs	r3, #3
 801002a:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	3301      	adds	r3, #1
 8010030:	61fb      	str	r3, [r7, #28]
 8010032:	69bb      	ldr	r3, [r7, #24]
 8010034:	3b01      	subs	r3, #1
 8010036:	61bb      	str	r3, [r7, #24]
 8010038:	e03a      	b.n	80100b0 <matchCommand+0x37e>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 801003a:	2300      	movs	r3, #0
 801003c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010040:	e03a      	b.n	80100b8 <matchCommand+0x386>
            }
        } else {
            SKIP_PATTERN(pattern_sep_pos);
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010046:	4413      	add	r3, r2
 8010048:	627b      	str	r3, [r7, #36]	; 0x24
 801004a:	6a3a      	ldr	r2, [r7, #32]
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	1ad3      	subs	r3, r2, r3
 8010050:	623b      	str	r3, [r7, #32]
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 8010052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	2b5d      	cmp	r3, #93	; 0x5d
 8010058:	d10e      	bne.n	8010078 <matchCommand+0x346>
 801005a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005c:	3301      	adds	r3, #1
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	2b3a      	cmp	r3, #58	; 0x3a
 8010062:	d109      	bne.n	8010078 <matchCommand+0x346>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 8010064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010066:	3302      	adds	r3, #2
 8010068:	627b      	str	r3, [r7, #36]	; 0x24
 801006a:	6a3b      	ldr	r3, [r7, #32]
 801006c:	3b02      	subs	r3, #2
 801006e:	623b      	str	r3, [r7, #32]
                brackets--;
 8010070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010072:	3b01      	subs	r3, #1
 8010074:	633b      	str	r3, [r7, #48]	; 0x30
 8010076:	e01b      	b.n	80100b0 <matchCommand+0x37e>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
 8010078:	6a3b      	ldr	r3, [r7, #32]
 801007a:	2b02      	cmp	r3, #2
 801007c:	dd14      	ble.n	80100a8 <matchCommand+0x376>
 801007e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	2b5d      	cmp	r3, #93	; 0x5d
 8010084:	d110      	bne.n	80100a8 <matchCommand+0x376>
                    && (pattern_ptr[1] == '[')
 8010086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010088:	3301      	adds	r3, #1
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	2b5b      	cmp	r3, #91	; 0x5b
 801008e:	d10b      	bne.n	80100a8 <matchCommand+0x376>
                    && (pattern_ptr[2] == ':')) {
 8010090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010092:	3302      	adds	r3, #2
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	2b3a      	cmp	r3, #58	; 0x3a
 8010098:	d106      	bne.n	80100a8 <matchCommand+0x376>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 801009a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009c:	3303      	adds	r3, #3
 801009e:	627b      	str	r3, [r7, #36]	; 0x24
 80100a0:	6a3b      	ldr	r3, [r7, #32]
 80100a2:	3b03      	subs	r3, #3
 80100a4:	623b      	str	r3, [r7, #32]
 80100a6:	e003      	b.n	80100b0 <matchCommand+0x37e>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 80100a8:	2300      	movs	r3, #0
 80100aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 80100ae:	e003      	b.n	80100b8 <matchCommand+0x386>
    while (1) {
 80100b0:	e6a2      	b.n	800fdf8 <matchCommand+0xc6>
                break;
 80100b2:	bf00      	nop
 80100b4:	e000      	b.n	80100b8 <matchCommand+0x386>
                break; /* exist optional keyword, command is complete */
 80100b6:	bf00      	nop
            }
        }
    }

    return result;
 80100b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
#undef SKIP_PATTERN
#undef SKIP_CMD
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3738      	adds	r7, #56	; 0x38
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d007      	beq.n	80100e4 <composeCompoundCommand+0x20>
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d003      	beq.n	80100e4 <composeCompoundCommand+0x20>
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	689b      	ldr	r3, [r3, #8]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d101      	bne.n	80100e8 <composeCompoundCommand+0x24>
        return FALSE;
 80100e4:	2300      	movs	r3, #0
 80100e6:	e04d      	b.n	8010184 <composeCompoundCommand+0xc0>

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d003      	beq.n	80100f8 <composeCompoundCommand+0x34>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d101      	bne.n	80100fc <composeCompoundCommand+0x38>
        return TRUE;
 80100f8:	2301      	movs	r3, #1
 80100fa:	e043      	b.n	8010184 <composeCompoundCommand+0xc0>

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	2b2a      	cmp	r3, #42	; 0x2a
 8010104:	d004      	beq.n	8010110 <composeCompoundCommand+0x4c>
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	2b3a      	cmp	r3, #58	; 0x3a
 801010e:	d101      	bne.n	8010114 <composeCompoundCommand+0x50>
        return TRUE;
 8010110:	2301      	movs	r3, #1
 8010112:	e037      	b.n	8010184 <composeCompoundCommand+0xc0>

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	2b2a      	cmp	r3, #42	; 0x2a
 801011c:	d101      	bne.n	8010122 <composeCompoundCommand+0x5e>
        return TRUE;
 801011e:	2301      	movs	r3, #1
 8010120:	e030      	b.n	8010184 <composeCompoundCommand+0xc0>

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	689b      	ldr	r3, [r3, #8]
 8010126:	60fb      	str	r3, [r7, #12]
 8010128:	e00a      	b.n	8010140 <composeCompoundCommand+0x7c>
        if (prev->ptr[i - 1] == ':') {
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	685a      	ldr	r2, [r3, #4]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	3b01      	subs	r3, #1
 8010132:	4413      	add	r3, r2
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	2b3a      	cmp	r3, #58	; 0x3a
 8010138:	d006      	beq.n	8010148 <composeCompoundCommand+0x84>
    for (i = prev->len; i > 0; i--) {
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	3b01      	subs	r3, #1
 801013e:	60fb      	str	r3, [r7, #12]
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d1f1      	bne.n	801012a <composeCompoundCommand+0x66>
 8010146:	e000      	b.n	801014a <composeCompoundCommand+0x86>
            break;
 8010148:	bf00      	nop
        }
    }

    /* Previous command was simple command - nothing to do*/
    if (i == 0)
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d101      	bne.n	8010154 <composeCompoundCommand+0x90>
        return TRUE;
 8010150:	2301      	movs	r3, #1
 8010152:	e017      	b.n	8010184 <composeCompoundCommand+0xc0>

    current->ptr -= i;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	685a      	ldr	r2, [r3, #4]
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	425b      	negs	r3, r3
 801015c:	441a      	add	r2, r3
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	605a      	str	r2, [r3, #4]
    current->len += i;
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	689b      	ldr	r3, [r3, #8]
 8010166:	461a      	mov	r2, r3
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	4413      	add	r3, r2
 801016c:	461a      	mov	r2, r3
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	609a      	str	r2, [r3, #8]
    memmove(current->ptr, prev->ptr, i);
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	6858      	ldr	r0, [r3, #4]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	68fa      	ldr	r2, [r7, #12]
 801017c:	4619      	mov	r1, r3
 801017e:	f001 ff4c 	bl	801201a <memmove>
    return TRUE;
 8010182:	2301      	movs	r3, #1
}
 8010184:	4618      	mov	r0, r3
 8010186:	3710      	adds	r7, #16
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801018c:	b480      	push	{r7}
 801018e:	b083      	sub	sp, #12
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f103 0208 	add.w	r2, r3, #8
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f04f 32ff 	mov.w	r2, #4294967295
 80101a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f103 0208 	add.w	r2, r3, #8
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f103 0208 	add.w	r2, r3, #8
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2200      	movs	r2, #0
 80101be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80101c0:	bf00      	nop
 80101c2:	370c      	adds	r7, #12
 80101c4:	46bd      	mov	sp, r7
 80101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ca:	4770      	bx	lr

080101cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80101cc:	b480      	push	{r7}
 80101ce:	b083      	sub	sp, #12
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2200      	movs	r2, #0
 80101d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80101da:	bf00      	nop
 80101dc:	370c      	adds	r7, #12
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr

080101e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80101e6:	b480      	push	{r7}
 80101e8:	b085      	sub	sp, #20
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	6078      	str	r0, [r7, #4]
 80101ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	68fa      	ldr	r2, [r7, #12]
 80101fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	689a      	ldr	r2, [r3, #8]
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	683a      	ldr	r2, [r7, #0]
 801020a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	683a      	ldr	r2, [r7, #0]
 8010210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	1c5a      	adds	r2, r3, #1
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	601a      	str	r2, [r3, #0]
}
 8010222:	bf00      	nop
 8010224:	3714      	adds	r7, #20
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr

0801022e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801022e:	b480      	push	{r7}
 8010230:	b085      	sub	sp, #20
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
 8010236:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010244:	d103      	bne.n	801024e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	691b      	ldr	r3, [r3, #16]
 801024a:	60fb      	str	r3, [r7, #12]
 801024c:	e00c      	b.n	8010268 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	3308      	adds	r3, #8
 8010252:	60fb      	str	r3, [r7, #12]
 8010254:	e002      	b.n	801025c <vListInsert+0x2e>
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	60fb      	str	r3, [r7, #12]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	68ba      	ldr	r2, [r7, #8]
 8010264:	429a      	cmp	r2, r3
 8010266:	d2f6      	bcs.n	8010256 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	685a      	ldr	r2, [r3, #4]
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	683a      	ldr	r2, [r7, #0]
 8010276:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	68fa      	ldr	r2, [r7, #12]
 801027c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	683a      	ldr	r2, [r7, #0]
 8010282:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	1c5a      	adds	r2, r3, #1
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	601a      	str	r2, [r3, #0]
}
 8010294:	bf00      	nop
 8010296:	3714      	adds	r7, #20
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80102a0:	b480      	push	{r7}
 80102a2:	b085      	sub	sp, #20
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	6892      	ldr	r2, [r2, #8]
 80102b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	689b      	ldr	r3, [r3, #8]
 80102bc:	687a      	ldr	r2, [r7, #4]
 80102be:	6852      	ldr	r2, [r2, #4]
 80102c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	687a      	ldr	r2, [r7, #4]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d103      	bne.n	80102d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	689a      	ldr	r2, [r3, #8]
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	1e5a      	subs	r2, r3, #1
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3714      	adds	r7, #20
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80102f4:	b480      	push	{r7}
 80102f6:	b085      	sub	sp, #20
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	60b9      	str	r1, [r7, #8]
 80102fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	3b04      	subs	r3, #4
 8010304:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801030c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	3b04      	subs	r3, #4
 8010312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	f023 0201 	bic.w	r2, r3, #1
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	3b04      	subs	r3, #4
 8010322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010324:	4a09      	ldr	r2, [pc, #36]	; (801034c <pxPortInitialiseStack+0x58>)
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	3b14      	subs	r3, #20
 801032e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	3b20      	subs	r3, #32
 801033a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801033c:	68fb      	ldr	r3, [r7, #12]
}
 801033e:	4618      	mov	r0, r3
 8010340:	3714      	adds	r7, #20
 8010342:	46bd      	mov	sp, r7
 8010344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010348:	4770      	bx	lr
 801034a:	bf00      	nop
 801034c:	08010351 	.word	0x08010351

08010350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010350:	b480      	push	{r7}
 8010352:	b085      	sub	sp, #20
 8010354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8010356:	2300      	movs	r3, #0
 8010358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801035a:	4b11      	ldr	r3, [pc, #68]	; (80103a0 <prvTaskExitError+0x50>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010362:	d009      	beq.n	8010378 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010368:	f383 8811 	msr	BASEPRI, r3
 801036c:	f3bf 8f6f 	isb	sy
 8010370:	f3bf 8f4f 	dsb	sy
 8010374:	60fb      	str	r3, [r7, #12]
 8010376:	e7fe      	b.n	8010376 <prvTaskExitError+0x26>
 8010378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037c:	f383 8811 	msr	BASEPRI, r3
 8010380:	f3bf 8f6f 	isb	sy
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801038a:	bf00      	nop
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d0fc      	beq.n	801038c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010392:	bf00      	nop
 8010394:	3714      	adds	r7, #20
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	20000020 	.word	0x20000020
	...

080103b0 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80103b0:	4b07      	ldr	r3, [pc, #28]	; (80103d0 <pxCurrentTCBConst2>)
 80103b2:	6819      	ldr	r1, [r3, #0]
 80103b4:	6808      	ldr	r0, [r1, #0]
 80103b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80103ba:	f380 8809 	msr	PSP, r0
 80103be:	f3bf 8f6f 	isb	sy
 80103c2:	f04f 0000 	mov.w	r0, #0
 80103c6:	f380 8811 	msr	BASEPRI, r0
 80103ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80103ce:	4770      	bx	lr

080103d0 <pxCurrentTCBConst2>:
 80103d0:	20000220 	.word	0x20000220
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80103d4:	bf00      	nop
 80103d6:	bf00      	nop

080103d8 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80103d8:	4806      	ldr	r0, [pc, #24]	; (80103f4 <prvPortStartFirstTask+0x1c>)
 80103da:	6800      	ldr	r0, [r0, #0]
 80103dc:	6800      	ldr	r0, [r0, #0]
 80103de:	f380 8808 	msr	MSP, r0
 80103e2:	b662      	cpsie	i
 80103e4:	b661      	cpsie	f
 80103e6:	f3bf 8f4f 	dsb	sy
 80103ea:	f3bf 8f6f 	isb	sy
 80103ee:	df00      	svc	0
 80103f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80103f2:	bf00      	nop
 80103f4:	e000ed08 	.word	0xe000ed08

080103f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b086      	sub	sp, #24
 80103fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80103fe:	4b39      	ldr	r3, [pc, #228]	; (80104e4 <xPortStartScheduler+0xec>)
 8010400:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	b2db      	uxtb	r3, r3
 8010408:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	22ff      	movs	r2, #255	; 0xff
 801040e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	b2db      	uxtb	r3, r3
 8010416:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010418:	79fb      	ldrb	r3, [r7, #7]
 801041a:	b2db      	uxtb	r3, r3
 801041c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010420:	b2da      	uxtb	r2, r3
 8010422:	4b31      	ldr	r3, [pc, #196]	; (80104e8 <xPortStartScheduler+0xf0>)
 8010424:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010426:	4b31      	ldr	r3, [pc, #196]	; (80104ec <xPortStartScheduler+0xf4>)
 8010428:	2207      	movs	r2, #7
 801042a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801042c:	e009      	b.n	8010442 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801042e:	4b2f      	ldr	r3, [pc, #188]	; (80104ec <xPortStartScheduler+0xf4>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	3b01      	subs	r3, #1
 8010434:	4a2d      	ldr	r2, [pc, #180]	; (80104ec <xPortStartScheduler+0xf4>)
 8010436:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010438:	79fb      	ldrb	r3, [r7, #7]
 801043a:	b2db      	uxtb	r3, r3
 801043c:	005b      	lsls	r3, r3, #1
 801043e:	b2db      	uxtb	r3, r3
 8010440:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010442:	79fb      	ldrb	r3, [r7, #7]
 8010444:	b2db      	uxtb	r3, r3
 8010446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801044a:	2b80      	cmp	r3, #128	; 0x80
 801044c:	d0ef      	beq.n	801042e <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 801044e:	4b27      	ldr	r3, [pc, #156]	; (80104ec <xPortStartScheduler+0xf4>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	f1c3 0307 	rsb	r3, r3, #7
 8010456:	2b04      	cmp	r3, #4
 8010458:	d009      	beq.n	801046e <xPortStartScheduler+0x76>
 801045a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801045e:	f383 8811 	msr	BASEPRI, r3
 8010462:	f3bf 8f6f 	isb	sy
 8010466:	f3bf 8f4f 	dsb	sy
 801046a:	613b      	str	r3, [r7, #16]
 801046c:	e7fe      	b.n	801046c <xPortStartScheduler+0x74>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801046e:	4b1f      	ldr	r3, [pc, #124]	; (80104ec <xPortStartScheduler+0xf4>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f1c3 0307 	rsb	r3, r3, #7
 8010476:	2b04      	cmp	r3, #4
 8010478:	d009      	beq.n	801048e <xPortStartScheduler+0x96>
 801047a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047e:	f383 8811 	msr	BASEPRI, r3
 8010482:	f3bf 8f6f 	isb	sy
 8010486:	f3bf 8f4f 	dsb	sy
 801048a:	60fb      	str	r3, [r7, #12]
 801048c:	e7fe      	b.n	801048c <xPortStartScheduler+0x94>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801048e:	4b17      	ldr	r3, [pc, #92]	; (80104ec <xPortStartScheduler+0xf4>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	021b      	lsls	r3, r3, #8
 8010494:	4a15      	ldr	r2, [pc, #84]	; (80104ec <xPortStartScheduler+0xf4>)
 8010496:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010498:	4b14      	ldr	r3, [pc, #80]	; (80104ec <xPortStartScheduler+0xf4>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80104a0:	4a12      	ldr	r2, [pc, #72]	; (80104ec <xPortStartScheduler+0xf4>)
 80104a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	b2da      	uxtb	r2, r3
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80104ac:	4b10      	ldr	r3, [pc, #64]	; (80104f0 <xPortStartScheduler+0xf8>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	4a0f      	ldr	r2, [pc, #60]	; (80104f0 <xPortStartScheduler+0xf8>)
 80104b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80104b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80104b8:	4b0d      	ldr	r3, [pc, #52]	; (80104f0 <xPortStartScheduler+0xf8>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a0c      	ldr	r2, [pc, #48]	; (80104f0 <xPortStartScheduler+0xf8>)
 80104be:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80104c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80104c4:	f000 f8b8 	bl	8010638 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80104c8:	4b0a      	ldr	r3, [pc, #40]	; (80104f4 <xPortStartScheduler+0xfc>)
 80104ca:	2200      	movs	r2, #0
 80104cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80104ce:	f7ff ff83 	bl	80103d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80104d2:	f001 f921 	bl	8011718 <vTaskSwitchContext>
	prvTaskExitError();
 80104d6:	f7ff ff3b 	bl	8010350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80104da:	2300      	movs	r3, #0
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3718      	adds	r7, #24
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	e000e400 	.word	0xe000e400
 80104e8:	20000219 	.word	0x20000219
 80104ec:	2000021c 	.word	0x2000021c
 80104f0:	e000ed20 	.word	0xe000ed20
 80104f4:	20000020 	.word	0x20000020

080104f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80104f8:	b480      	push	{r7}
 80104fa:	b083      	sub	sp, #12
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010502:	f383 8811 	msr	BASEPRI, r3
 8010506:	f3bf 8f6f 	isb	sy
 801050a:	f3bf 8f4f 	dsb	sy
 801050e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010510:	4b0e      	ldr	r3, [pc, #56]	; (801054c <vPortEnterCritical+0x54>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	3301      	adds	r3, #1
 8010516:	4a0d      	ldr	r2, [pc, #52]	; (801054c <vPortEnterCritical+0x54>)
 8010518:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801051a:	4b0c      	ldr	r3, [pc, #48]	; (801054c <vPortEnterCritical+0x54>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	2b01      	cmp	r3, #1
 8010520:	d10e      	bne.n	8010540 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010522:	4b0b      	ldr	r3, [pc, #44]	; (8010550 <vPortEnterCritical+0x58>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	b2db      	uxtb	r3, r3
 8010528:	2b00      	cmp	r3, #0
 801052a:	d009      	beq.n	8010540 <vPortEnterCritical+0x48>
 801052c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010530:	f383 8811 	msr	BASEPRI, r3
 8010534:	f3bf 8f6f 	isb	sy
 8010538:	f3bf 8f4f 	dsb	sy
 801053c:	603b      	str	r3, [r7, #0]
 801053e:	e7fe      	b.n	801053e <vPortEnterCritical+0x46>
	}
}
 8010540:	bf00      	nop
 8010542:	370c      	adds	r7, #12
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr
 801054c:	20000020 	.word	0x20000020
 8010550:	e000ed04 	.word	0xe000ed04

08010554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801055a:	4b11      	ldr	r3, [pc, #68]	; (80105a0 <vPortExitCritical+0x4c>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d109      	bne.n	8010576 <vPortExitCritical+0x22>
 8010562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010566:	f383 8811 	msr	BASEPRI, r3
 801056a:	f3bf 8f6f 	isb	sy
 801056e:	f3bf 8f4f 	dsb	sy
 8010572:	607b      	str	r3, [r7, #4]
 8010574:	e7fe      	b.n	8010574 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8010576:	4b0a      	ldr	r3, [pc, #40]	; (80105a0 <vPortExitCritical+0x4c>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	3b01      	subs	r3, #1
 801057c:	4a08      	ldr	r2, [pc, #32]	; (80105a0 <vPortExitCritical+0x4c>)
 801057e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010580:	4b07      	ldr	r3, [pc, #28]	; (80105a0 <vPortExitCritical+0x4c>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d104      	bne.n	8010592 <vPortExitCritical+0x3e>
 8010588:	2300      	movs	r3, #0
 801058a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010592:	bf00      	nop
 8010594:	370c      	adds	r7, #12
 8010596:	46bd      	mov	sp, r7
 8010598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059c:	4770      	bx	lr
 801059e:	bf00      	nop
 80105a0:	20000020 	.word	0x20000020
	...

080105b0 <xPortPendSVHandler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler( void )
{
	__asm volatile
 80105b0:	f3ef 8009 	mrs	r0, PSP
 80105b4:	f3bf 8f6f 	isb	sy
 80105b8:	4b0d      	ldr	r3, [pc, #52]	; (80105f0 <pxCurrentTCBConst>)
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80105c0:	6010      	str	r0, [r2, #0]
 80105c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80105c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80105ca:	f380 8811 	msr	BASEPRI, r0
 80105ce:	f001 f8a3 	bl	8011718 <vTaskSwitchContext>
 80105d2:	f04f 0000 	mov.w	r0, #0
 80105d6:	f380 8811 	msr	BASEPRI, r0
 80105da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80105de:	6819      	ldr	r1, [r3, #0]
 80105e0:	6808      	ldr	r0, [r1, #0]
 80105e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80105e6:	f380 8809 	msr	PSP, r0
 80105ea:	f3bf 8f6f 	isb	sy
 80105ee:	4770      	bx	lr

080105f0 <pxCurrentTCBConst>:
 80105f0:	20000220 	.word	0x20000220
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80105f4:	bf00      	nop
 80105f6:	bf00      	nop

080105f8 <xPortSysTickHandler>:

/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
	__asm volatile
 80105fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010602:	f383 8811 	msr	BASEPRI, r3
 8010606:	f3bf 8f6f 	isb	sy
 801060a:	f3bf 8f4f 	dsb	sy
 801060e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010610:	f000 ffc6 	bl	80115a0 <xTaskIncrementTick>
 8010614:	4603      	mov	r3, r0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d003      	beq.n	8010622 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801061a:	4b06      	ldr	r3, [pc, #24]	; (8010634 <xPortSysTickHandler+0x3c>)
 801061c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010620:	601a      	str	r2, [r3, #0]
 8010622:	2300      	movs	r3, #0
 8010624:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801062c:	bf00      	nop
 801062e:	3708      	adds	r7, #8
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}
 8010634:	e000ed04 	.word	0xe000ed04

08010638 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010638:	b480      	push	{r7}
 801063a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801063c:	4b08      	ldr	r3, [pc, #32]	; (8010660 <vPortSetupTimerInterrupt+0x28>)
 801063e:	2200      	movs	r2, #0
 8010640:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010642:	4b08      	ldr	r3, [pc, #32]	; (8010664 <vPortSetupTimerInterrupt+0x2c>)
 8010644:	2200      	movs	r2, #0
 8010646:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010648:	4b07      	ldr	r3, [pc, #28]	; (8010668 <vPortSetupTimerInterrupt+0x30>)
 801064a:	4a08      	ldr	r2, [pc, #32]	; (801066c <vPortSetupTimerInterrupt+0x34>)
 801064c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801064e:	4b04      	ldr	r3, [pc, #16]	; (8010660 <vPortSetupTimerInterrupt+0x28>)
 8010650:	2207      	movs	r2, #7
 8010652:	601a      	str	r2, [r3, #0]
}
 8010654:	bf00      	nop
 8010656:	46bd      	mov	sp, r7
 8010658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop
 8010660:	e000e010 	.word	0xe000e010
 8010664:	e000e018 	.word	0xe000e018
 8010668:	e000e014 	.word	0xe000e014
 801066c:	0001193f 	.word	0x0001193f

08010670 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010670:	b480      	push	{r7}
 8010672:	b085      	sub	sp, #20
 8010674:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010676:	f3ef 8305 	mrs	r3, IPSR
 801067a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2b0f      	cmp	r3, #15
 8010680:	d913      	bls.n	80106aa <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010682:	4a16      	ldr	r2, [pc, #88]	; (80106dc <vPortValidateInterruptPriority+0x6c>)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	4413      	add	r3, r2
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801068c:	4b14      	ldr	r3, [pc, #80]	; (80106e0 <vPortValidateInterruptPriority+0x70>)
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	7afa      	ldrb	r2, [r7, #11]
 8010692:	429a      	cmp	r2, r3
 8010694:	d209      	bcs.n	80106aa <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8010696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801069a:	f383 8811 	msr	BASEPRI, r3
 801069e:	f3bf 8f6f 	isb	sy
 80106a2:	f3bf 8f4f 	dsb	sy
 80106a6:	607b      	str	r3, [r7, #4]
 80106a8:	e7fe      	b.n	80106a8 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80106aa:	4b0e      	ldr	r3, [pc, #56]	; (80106e4 <vPortValidateInterruptPriority+0x74>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80106b2:	4b0d      	ldr	r3, [pc, #52]	; (80106e8 <vPortValidateInterruptPriority+0x78>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d909      	bls.n	80106ce <vPortValidateInterruptPriority+0x5e>
 80106ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106be:	f383 8811 	msr	BASEPRI, r3
 80106c2:	f3bf 8f6f 	isb	sy
 80106c6:	f3bf 8f4f 	dsb	sy
 80106ca:	603b      	str	r3, [r7, #0]
 80106cc:	e7fe      	b.n	80106cc <vPortValidateInterruptPriority+0x5c>
	}
 80106ce:	bf00      	nop
 80106d0:	3714      	adds	r7, #20
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	e000e3f0 	.word	0xe000e3f0
 80106e0:	20000219 	.word	0x20000219
 80106e4:	e000ed0c 	.word	0xe000ed0c
 80106e8:	2000021c 	.word	0x2000021c

080106ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b084      	sub	sp, #16
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d109      	bne.n	8010714 <xQueueGenericReset+0x28>
 8010700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010704:	f383 8811 	msr	BASEPRI, r3
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	60bb      	str	r3, [r7, #8]
 8010712:	e7fe      	b.n	8010712 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8010714:	f7ff fef0 	bl	80104f8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010720:	68f9      	ldr	r1, [r7, #12]
 8010722:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010724:	fb01 f303 	mul.w	r3, r1, r3
 8010728:	441a      	add	r2, r3
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2200      	movs	r2, #0
 8010732:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	681a      	ldr	r2, [r3, #0]
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010744:	3b01      	subs	r3, #1
 8010746:	68f9      	ldr	r1, [r7, #12]
 8010748:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801074a:	fb01 f303 	mul.w	r3, r1, r3
 801074e:	441a      	add	r2, r3
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	22ff      	movs	r2, #255	; 0xff
 8010758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	22ff      	movs	r2, #255	; 0xff
 8010760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d114      	bne.n	8010794 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	691b      	ldr	r3, [r3, #16]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d01a      	beq.n	80107a8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	3310      	adds	r3, #16
 8010776:	4618      	mov	r0, r3
 8010778:	f001 f872 	bl	8011860 <xTaskRemoveFromEventList>
 801077c:	4603      	mov	r3, r0
 801077e:	2b00      	cmp	r3, #0
 8010780:	d012      	beq.n	80107a8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010782:	4b0d      	ldr	r3, [pc, #52]	; (80107b8 <xQueueGenericReset+0xcc>)
 8010784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010788:	601a      	str	r2, [r3, #0]
 801078a:	f3bf 8f4f 	dsb	sy
 801078e:	f3bf 8f6f 	isb	sy
 8010792:	e009      	b.n	80107a8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	3310      	adds	r3, #16
 8010798:	4618      	mov	r0, r3
 801079a:	f7ff fcf7 	bl	801018c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	3324      	adds	r3, #36	; 0x24
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7ff fcf2 	bl	801018c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80107a8:	f7ff fed4 	bl	8010554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80107ac:	2301      	movs	r3, #1
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3710      	adds	r7, #16
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}
 80107b6:	bf00      	nop
 80107b8:	e000ed04 	.word	0xe000ed04

080107bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b08e      	sub	sp, #56	; 0x38
 80107c0:	af02      	add	r7, sp, #8
 80107c2:	60f8      	str	r0, [r7, #12]
 80107c4:	60b9      	str	r1, [r7, #8]
 80107c6:	607a      	str	r2, [r7, #4]
 80107c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d109      	bne.n	80107e4 <xQueueGenericCreateStatic+0x28>
 80107d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d4:	f383 8811 	msr	BASEPRI, r3
 80107d8:	f3bf 8f6f 	isb	sy
 80107dc:	f3bf 8f4f 	dsb	sy
 80107e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80107e2:	e7fe      	b.n	80107e2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d109      	bne.n	80107fe <xQueueGenericCreateStatic+0x42>
 80107ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ee:	f383 8811 	msr	BASEPRI, r3
 80107f2:	f3bf 8f6f 	isb	sy
 80107f6:	f3bf 8f4f 	dsb	sy
 80107fa:	627b      	str	r3, [r7, #36]	; 0x24
 80107fc:	e7fe      	b.n	80107fc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d002      	beq.n	801080a <xQueueGenericCreateStatic+0x4e>
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d001      	beq.n	801080e <xQueueGenericCreateStatic+0x52>
 801080a:	2301      	movs	r3, #1
 801080c:	e000      	b.n	8010810 <xQueueGenericCreateStatic+0x54>
 801080e:	2300      	movs	r3, #0
 8010810:	2b00      	cmp	r3, #0
 8010812:	d109      	bne.n	8010828 <xQueueGenericCreateStatic+0x6c>
 8010814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010818:	f383 8811 	msr	BASEPRI, r3
 801081c:	f3bf 8f6f 	isb	sy
 8010820:	f3bf 8f4f 	dsb	sy
 8010824:	623b      	str	r3, [r7, #32]
 8010826:	e7fe      	b.n	8010826 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d102      	bne.n	8010834 <xQueueGenericCreateStatic+0x78>
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d101      	bne.n	8010838 <xQueueGenericCreateStatic+0x7c>
 8010834:	2301      	movs	r3, #1
 8010836:	e000      	b.n	801083a <xQueueGenericCreateStatic+0x7e>
 8010838:	2300      	movs	r3, #0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d109      	bne.n	8010852 <xQueueGenericCreateStatic+0x96>
 801083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010842:	f383 8811 	msr	BASEPRI, r3
 8010846:	f3bf 8f6f 	isb	sy
 801084a:	f3bf 8f4f 	dsb	sy
 801084e:	61fb      	str	r3, [r7, #28]
 8010850:	e7fe      	b.n	8010850 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010852:	2348      	movs	r3, #72	; 0x48
 8010854:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	2b48      	cmp	r3, #72	; 0x48
 801085a:	d009      	beq.n	8010870 <xQueueGenericCreateStatic+0xb4>
 801085c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010860:	f383 8811 	msr	BASEPRI, r3
 8010864:	f3bf 8f6f 	isb	sy
 8010868:	f3bf 8f4f 	dsb	sy
 801086c:	61bb      	str	r3, [r7, #24]
 801086e:	e7fe      	b.n	801086e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010876:	2b00      	cmp	r3, #0
 8010878:	d009      	beq.n	801088e <xQueueGenericCreateStatic+0xd2>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801087a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801087e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010880:	9300      	str	r3, [sp, #0]
 8010882:	4613      	mov	r3, r2
 8010884:	687a      	ldr	r2, [r7, #4]
 8010886:	68b9      	ldr	r1, [r7, #8]
 8010888:	68f8      	ldr	r0, [r7, #12]
 801088a:	f000 f805 	bl	8010898 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801088e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010890:	4618      	mov	r0, r3
 8010892:	3730      	adds	r7, #48	; 0x30
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b084      	sub	sp, #16
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	607a      	str	r2, [r7, #4]
 80108a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d103      	bne.n	80108b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80108ac:	69bb      	ldr	r3, [r7, #24]
 80108ae:	69ba      	ldr	r2, [r7, #24]
 80108b0:	601a      	str	r2, [r3, #0]
 80108b2:	e002      	b.n	80108ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	68fa      	ldr	r2, [r7, #12]
 80108be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80108c0:	69bb      	ldr	r3, [r7, #24]
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80108c6:	2101      	movs	r1, #1
 80108c8:	69b8      	ldr	r0, [r7, #24]
 80108ca:	f7ff ff0f 	bl	80106ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80108ce:	bf00      	nop
 80108d0:	3710      	adds	r7, #16
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b082      	sub	sp, #8
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d00e      	beq.n	8010902 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2200      	movs	r2, #0
 80108e8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2200      	movs	r2, #0
 80108f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80108f6:	2300      	movs	r3, #0
 80108f8:	2200      	movs	r2, #0
 80108fa:	2100      	movs	r1, #0
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f000 f81f 	bl	8010940 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010902:	bf00      	nop
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801090a:	b580      	push	{r7, lr}
 801090c:	b088      	sub	sp, #32
 801090e:	af02      	add	r7, sp, #8
 8010910:	4603      	mov	r3, r0
 8010912:	6039      	str	r1, [r7, #0]
 8010914:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010916:	2301      	movs	r3, #1
 8010918:	617b      	str	r3, [r7, #20]
 801091a:	2300      	movs	r3, #0
 801091c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801091e:	79fb      	ldrb	r3, [r7, #7]
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	2200      	movs	r2, #0
 8010926:	6939      	ldr	r1, [r7, #16]
 8010928:	6978      	ldr	r0, [r7, #20]
 801092a:	f7ff ff47 	bl	80107bc <xQueueGenericCreateStatic>
 801092e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8010930:	68f8      	ldr	r0, [r7, #12]
 8010932:	f7ff ffd0 	bl	80108d6 <prvInitialiseMutex>

		return pxNewQueue;
 8010936:	68fb      	ldr	r3, [r7, #12]
	}
 8010938:	4618      	mov	r0, r3
 801093a:	3718      	adds	r7, #24
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b08e      	sub	sp, #56	; 0x38
 8010944:	af00      	add	r7, sp, #0
 8010946:	60f8      	str	r0, [r7, #12]
 8010948:	60b9      	str	r1, [r7, #8]
 801094a:	607a      	str	r2, [r7, #4]
 801094c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801094e:	2300      	movs	r3, #0
 8010950:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010958:	2b00      	cmp	r3, #0
 801095a:	d109      	bne.n	8010970 <xQueueGenericSend+0x30>
 801095c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010960:	f383 8811 	msr	BASEPRI, r3
 8010964:	f3bf 8f6f 	isb	sy
 8010968:	f3bf 8f4f 	dsb	sy
 801096c:	62bb      	str	r3, [r7, #40]	; 0x28
 801096e:	e7fe      	b.n	801096e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d103      	bne.n	801097e <xQueueGenericSend+0x3e>
 8010976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801097a:	2b00      	cmp	r3, #0
 801097c:	d101      	bne.n	8010982 <xQueueGenericSend+0x42>
 801097e:	2301      	movs	r3, #1
 8010980:	e000      	b.n	8010984 <xQueueGenericSend+0x44>
 8010982:	2300      	movs	r3, #0
 8010984:	2b00      	cmp	r3, #0
 8010986:	d109      	bne.n	801099c <xQueueGenericSend+0x5c>
 8010988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098c:	f383 8811 	msr	BASEPRI, r3
 8010990:	f3bf 8f6f 	isb	sy
 8010994:	f3bf 8f4f 	dsb	sy
 8010998:	627b      	str	r3, [r7, #36]	; 0x24
 801099a:	e7fe      	b.n	801099a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	2b02      	cmp	r3, #2
 80109a0:	d103      	bne.n	80109aa <xQueueGenericSend+0x6a>
 80109a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	d101      	bne.n	80109ae <xQueueGenericSend+0x6e>
 80109aa:	2301      	movs	r3, #1
 80109ac:	e000      	b.n	80109b0 <xQueueGenericSend+0x70>
 80109ae:	2300      	movs	r3, #0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d109      	bne.n	80109c8 <xQueueGenericSend+0x88>
 80109b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b8:	f383 8811 	msr	BASEPRI, r3
 80109bc:	f3bf 8f6f 	isb	sy
 80109c0:	f3bf 8f4f 	dsb	sy
 80109c4:	623b      	str	r3, [r7, #32]
 80109c6:	e7fe      	b.n	80109c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80109c8:	f001 f8a0 	bl	8011b0c <xTaskGetSchedulerState>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d102      	bne.n	80109d8 <xQueueGenericSend+0x98>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d101      	bne.n	80109dc <xQueueGenericSend+0x9c>
 80109d8:	2301      	movs	r3, #1
 80109da:	e000      	b.n	80109de <xQueueGenericSend+0x9e>
 80109dc:	2300      	movs	r3, #0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d109      	bne.n	80109f6 <xQueueGenericSend+0xb6>
 80109e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e6:	f383 8811 	msr	BASEPRI, r3
 80109ea:	f3bf 8f6f 	isb	sy
 80109ee:	f3bf 8f4f 	dsb	sy
 80109f2:	61fb      	str	r3, [r7, #28]
 80109f4:	e7fe      	b.n	80109f4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80109f6:	f7ff fd7f 	bl	80104f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80109fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d302      	bcc.n	8010a0c <xQueueGenericSend+0xcc>
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	2b02      	cmp	r3, #2
 8010a0a:	d129      	bne.n	8010a60 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a0c:	683a      	ldr	r2, [r7, #0]
 8010a0e:	68b9      	ldr	r1, [r7, #8]
 8010a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a12:	f000 fa39 	bl	8010e88 <prvCopyDataToQueue>
 8010a16:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d010      	beq.n	8010a42 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a22:	3324      	adds	r3, #36	; 0x24
 8010a24:	4618      	mov	r0, r3
 8010a26:	f000 ff1b 	bl	8011860 <xTaskRemoveFromEventList>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d013      	beq.n	8010a58 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010a30:	4b3f      	ldr	r3, [pc, #252]	; (8010b30 <xQueueGenericSend+0x1f0>)
 8010a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a36:	601a      	str	r2, [r3, #0]
 8010a38:	f3bf 8f4f 	dsb	sy
 8010a3c:	f3bf 8f6f 	isb	sy
 8010a40:	e00a      	b.n	8010a58 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d007      	beq.n	8010a58 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010a48:	4b39      	ldr	r3, [pc, #228]	; (8010b30 <xQueueGenericSend+0x1f0>)
 8010a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a4e:	601a      	str	r2, [r3, #0]
 8010a50:	f3bf 8f4f 	dsb	sy
 8010a54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010a58:	f7ff fd7c 	bl	8010554 <vPortExitCritical>
				return pdPASS;
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	e063      	b.n	8010b28 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d103      	bne.n	8010a6e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010a66:	f7ff fd75 	bl	8010554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	e05c      	b.n	8010b28 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d106      	bne.n	8010a82 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a74:	f107 0314 	add.w	r3, r7, #20
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f000 ff53 	bl	8011924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a7e:	2301      	movs	r3, #1
 8010a80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a82:	f7ff fd67 	bl	8010554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a86:	f000 fce1 	bl	801144c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a8a:	f7ff fd35 	bl	80104f8 <vPortEnterCritical>
 8010a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a94:	b25b      	sxtb	r3, r3
 8010a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a9a:	d103      	bne.n	8010aa4 <xQueueGenericSend+0x164>
 8010a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010aaa:	b25b      	sxtb	r3, r3
 8010aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ab0:	d103      	bne.n	8010aba <xQueueGenericSend+0x17a>
 8010ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010aba:	f7ff fd4b 	bl	8010554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010abe:	1d3a      	adds	r2, r7, #4
 8010ac0:	f107 0314 	add.w	r3, r7, #20
 8010ac4:	4611      	mov	r1, r2
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f000 ff42 	bl	8011950 <xTaskCheckForTimeOut>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d124      	bne.n	8010b1c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ad4:	f000 faaa 	bl	801102c <prvIsQueueFull>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d018      	beq.n	8010b10 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae0:	3310      	adds	r3, #16
 8010ae2:	687a      	ldr	r2, [r7, #4]
 8010ae4:	4611      	mov	r1, r2
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f000 fe96 	bl	8011818 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010aee:	f000 fa35 	bl	8010f5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010af2:	f000 fcb9 	bl	8011468 <xTaskResumeAll>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	f47f af7c 	bne.w	80109f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010afe:	4b0c      	ldr	r3, [pc, #48]	; (8010b30 <xQueueGenericSend+0x1f0>)
 8010b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b04:	601a      	str	r2, [r3, #0]
 8010b06:	f3bf 8f4f 	dsb	sy
 8010b0a:	f3bf 8f6f 	isb	sy
 8010b0e:	e772      	b.n	80109f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b12:	f000 fa23 	bl	8010f5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b16:	f000 fca7 	bl	8011468 <xTaskResumeAll>
 8010b1a:	e76c      	b.n	80109f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b1e:	f000 fa1d 	bl	8010f5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b22:	f000 fca1 	bl	8011468 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010b26:	2300      	movs	r3, #0
		}
	}
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3738      	adds	r7, #56	; 0x38
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}
 8010b30:	e000ed04 	.word	0xe000ed04

08010b34 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b08e      	sub	sp, #56	; 0x38
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d109      	bne.n	8010b5c <xQueueGiveFromISR+0x28>
 8010b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b4c:	f383 8811 	msr	BASEPRI, r3
 8010b50:	f3bf 8f6f 	isb	sy
 8010b54:	f3bf 8f4f 	dsb	sy
 8010b58:	623b      	str	r3, [r7, #32]
 8010b5a:	e7fe      	b.n	8010b5a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d009      	beq.n	8010b78 <xQueueGiveFromISR+0x44>
 8010b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b68:	f383 8811 	msr	BASEPRI, r3
 8010b6c:	f3bf 8f6f 	isb	sy
 8010b70:	f3bf 8f4f 	dsb	sy
 8010b74:	61fb      	str	r3, [r7, #28]
 8010b76:	e7fe      	b.n	8010b76 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d103      	bne.n	8010b88 <xQueueGiveFromISR+0x54>
 8010b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d101      	bne.n	8010b8c <xQueueGiveFromISR+0x58>
 8010b88:	2301      	movs	r3, #1
 8010b8a:	e000      	b.n	8010b8e <xQueueGiveFromISR+0x5a>
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d109      	bne.n	8010ba6 <xQueueGiveFromISR+0x72>
 8010b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b96:	f383 8811 	msr	BASEPRI, r3
 8010b9a:	f3bf 8f6f 	isb	sy
 8010b9e:	f3bf 8f4f 	dsb	sy
 8010ba2:	61bb      	str	r3, [r7, #24]
 8010ba4:	e7fe      	b.n	8010ba4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ba6:	f7ff fd63 	bl	8010670 <vPortValidateInterruptPriority>
	__asm volatile
 8010baa:	f3ef 8211 	mrs	r2, BASEPRI
 8010bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb2:	f383 8811 	msr	BASEPRI, r3
 8010bb6:	f3bf 8f6f 	isb	sy
 8010bba:	f3bf 8f4f 	dsb	sy
 8010bbe:	617a      	str	r2, [r7, #20]
 8010bc0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010bc2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d22b      	bcs.n	8010c2e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be2:	1c5a      	adds	r2, r3, #1
 8010be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010be8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf0:	d112      	bne.n	8010c18 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d016      	beq.n	8010c28 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfc:	3324      	adds	r3, #36	; 0x24
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f000 fe2e 	bl	8011860 <xTaskRemoveFromEventList>
 8010c04:	4603      	mov	r3, r0
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d00e      	beq.n	8010c28 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d00b      	beq.n	8010c28 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	2201      	movs	r2, #1
 8010c14:	601a      	str	r2, [r3, #0]
 8010c16:	e007      	b.n	8010c28 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	b25a      	sxtb	r2, r3
 8010c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010c28:	2301      	movs	r3, #1
 8010c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8010c2c:	e001      	b.n	8010c32 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	637b      	str	r3, [r7, #52]	; 0x34
 8010c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c34:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3738      	adds	r7, #56	; 0x38
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
	...

08010c48 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b08e      	sub	sp, #56	; 0x38
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010c52:	2300      	movs	r3, #0
 8010c54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d109      	bne.n	8010c78 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8010c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c68:	f383 8811 	msr	BASEPRI, r3
 8010c6c:	f3bf 8f6f 	isb	sy
 8010c70:	f3bf 8f4f 	dsb	sy
 8010c74:	623b      	str	r3, [r7, #32]
 8010c76:	e7fe      	b.n	8010c76 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d009      	beq.n	8010c94 <xQueueSemaphoreTake+0x4c>
 8010c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c84:	f383 8811 	msr	BASEPRI, r3
 8010c88:	f3bf 8f6f 	isb	sy
 8010c8c:	f3bf 8f4f 	dsb	sy
 8010c90:	61fb      	str	r3, [r7, #28]
 8010c92:	e7fe      	b.n	8010c92 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010c94:	f000 ff3a 	bl	8011b0c <xTaskGetSchedulerState>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d102      	bne.n	8010ca4 <xQueueSemaphoreTake+0x5c>
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d101      	bne.n	8010ca8 <xQueueSemaphoreTake+0x60>
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	e000      	b.n	8010caa <xQueueSemaphoreTake+0x62>
 8010ca8:	2300      	movs	r3, #0
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d109      	bne.n	8010cc2 <xQueueSemaphoreTake+0x7a>
 8010cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	61bb      	str	r3, [r7, #24]
 8010cc0:	e7fe      	b.n	8010cc0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010cc2:	f7ff fc19 	bl	80104f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d024      	beq.n	8010d1c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd4:	1e5a      	subs	r2, r3, #1
 8010cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d104      	bne.n	8010cec <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010ce2:	f001 f8d9 	bl	8011e98 <pvTaskIncrementMutexHeldCount>
 8010ce6:	4602      	mov	r2, r0
 8010ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cea:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cee:	691b      	ldr	r3, [r3, #16]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d00f      	beq.n	8010d14 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf6:	3310      	adds	r3, #16
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f000 fdb1 	bl	8011860 <xTaskRemoveFromEventList>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d007      	beq.n	8010d14 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010d04:	4b53      	ldr	r3, [pc, #332]	; (8010e54 <xQueueSemaphoreTake+0x20c>)
 8010d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d0a:	601a      	str	r2, [r3, #0]
 8010d0c:	f3bf 8f4f 	dsb	sy
 8010d10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010d14:	f7ff fc1e 	bl	8010554 <vPortExitCritical>
				return pdPASS;
 8010d18:	2301      	movs	r3, #1
 8010d1a:	e096      	b.n	8010e4a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d110      	bne.n	8010d44 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d009      	beq.n	8010d3c <xQueueSemaphoreTake+0xf4>
 8010d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d2c:	f383 8811 	msr	BASEPRI, r3
 8010d30:	f3bf 8f6f 	isb	sy
 8010d34:	f3bf 8f4f 	dsb	sy
 8010d38:	617b      	str	r3, [r7, #20]
 8010d3a:	e7fe      	b.n	8010d3a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010d3c:	f7ff fc0a 	bl	8010554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010d40:	2300      	movs	r3, #0
 8010d42:	e082      	b.n	8010e4a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d106      	bne.n	8010d58 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d4a:	f107 030c 	add.w	r3, r7, #12
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f000 fde8 	bl	8011924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d54:	2301      	movs	r3, #1
 8010d56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d58:	f7ff fbfc 	bl	8010554 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d5c:	f000 fb76 	bl	801144c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d60:	f7ff fbca 	bl	80104f8 <vPortEnterCritical>
 8010d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d6a:	b25b      	sxtb	r3, r3
 8010d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d70:	d103      	bne.n	8010d7a <xQueueSemaphoreTake+0x132>
 8010d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d74:	2200      	movs	r2, #0
 8010d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d80:	b25b      	sxtb	r3, r3
 8010d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d86:	d103      	bne.n	8010d90 <xQueueSemaphoreTake+0x148>
 8010d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d90:	f7ff fbe0 	bl	8010554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010d94:	463a      	mov	r2, r7
 8010d96:	f107 030c 	add.w	r3, r7, #12
 8010d9a:	4611      	mov	r1, r2
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f000 fdd7 	bl	8011950 <xTaskCheckForTimeOut>
 8010da2:	4603      	mov	r3, r0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d132      	bne.n	8010e0e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010da8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010daa:	f000 f929 	bl	8011000 <prvIsQueueEmpty>
 8010dae:	4603      	mov	r3, r0
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d026      	beq.n	8010e02 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d109      	bne.n	8010dd0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8010dbc:	f7ff fb9c 	bl	80104f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f000 febf 	bl	8011b48 <xTaskPriorityInherit>
 8010dca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010dcc:	f7ff fbc2 	bl	8010554 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd2:	3324      	adds	r3, #36	; 0x24
 8010dd4:	683a      	ldr	r2, [r7, #0]
 8010dd6:	4611      	mov	r1, r2
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f000 fd1d 	bl	8011818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010dde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010de0:	f000 f8bc 	bl	8010f5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010de4:	f000 fb40 	bl	8011468 <xTaskResumeAll>
 8010de8:	4603      	mov	r3, r0
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	f47f af69 	bne.w	8010cc2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8010df0:	4b18      	ldr	r3, [pc, #96]	; (8010e54 <xQueueSemaphoreTake+0x20c>)
 8010df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010df6:	601a      	str	r2, [r3, #0]
 8010df8:	f3bf 8f4f 	dsb	sy
 8010dfc:	f3bf 8f6f 	isb	sy
 8010e00:	e75f      	b.n	8010cc2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010e02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e04:	f000 f8aa 	bl	8010f5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e08:	f000 fb2e 	bl	8011468 <xTaskResumeAll>
 8010e0c:	e759      	b.n	8010cc2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010e0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e10:	f000 f8a4 	bl	8010f5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e14:	f000 fb28 	bl	8011468 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e1a:	f000 f8f1 	bl	8011000 <prvIsQueueEmpty>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	f43f af4e 	beq.w	8010cc2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d00d      	beq.n	8010e48 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8010e2c:	f7ff fb64 	bl	80104f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e32:	f000 f811 	bl	8010e58 <prvGetDisinheritPriorityAfterTimeout>
 8010e36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8010e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e3a:	685b      	ldr	r3, [r3, #4]
 8010e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f000 ff8c 	bl	8011d5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010e44:	f7ff fb86 	bl	8010554 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010e48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3738      	adds	r7, #56	; 0x38
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
 8010e52:	bf00      	nop
 8010e54:	e000ed04 	.word	0xe000ed04

08010e58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010e58:	b480      	push	{r7}
 8010e5a:	b085      	sub	sp, #20
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d006      	beq.n	8010e76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f1c3 0307 	rsb	r3, r3, #7
 8010e72:	60fb      	str	r3, [r7, #12]
 8010e74:	e001      	b.n	8010e7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010e76:	2300      	movs	r3, #0
 8010e78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
	}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3714      	adds	r7, #20
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr

08010e88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b086      	sub	sp, #24
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010e94:	2300      	movs	r3, #0
 8010e96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d10d      	bne.n	8010ec2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d14d      	bne.n	8010f4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f000 fece 	bl	8011c54 <xTaskPriorityDisinherit>
 8010eb8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	605a      	str	r2, [r3, #4]
 8010ec0:	e043      	b.n	8010f4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d119      	bne.n	8010efc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	6898      	ldr	r0, [r3, #8]
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	68b9      	ldr	r1, [r7, #8]
 8010ed4:	f001 f896 	bl	8012004 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	689a      	ldr	r2, [r3, #8]
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee0:	441a      	add	r2, r3
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	689a      	ldr	r2, [r3, #8]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d32b      	bcc.n	8010f4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	609a      	str	r2, [r3, #8]
 8010efa:	e026      	b.n	8010f4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	68d8      	ldr	r0, [r3, #12]
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f04:	461a      	mov	r2, r3
 8010f06:	68b9      	ldr	r1, [r7, #8]
 8010f08:	f001 f87c 	bl	8012004 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	68da      	ldr	r2, [r3, #12]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f14:	425b      	negs	r3, r3
 8010f16:	441a      	add	r2, r3
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	68da      	ldr	r2, [r3, #12]
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d207      	bcs.n	8010f38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	685a      	ldr	r2, [r3, #4]
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f30:	425b      	negs	r3, r3
 8010f32:	441a      	add	r2, r3
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2b02      	cmp	r3, #2
 8010f3c:	d105      	bne.n	8010f4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d002      	beq.n	8010f4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	3b01      	subs	r3, #1
 8010f48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	1c5a      	adds	r2, r3, #1
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010f52:	697b      	ldr	r3, [r7, #20]
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3718      	adds	r7, #24
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b084      	sub	sp, #16
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010f64:	f7ff fac8 	bl	80104f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f70:	e011      	b.n	8010f96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d012      	beq.n	8010fa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	3324      	adds	r3, #36	; 0x24
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f000 fc6e 	bl	8011860 <xTaskRemoveFromEventList>
 8010f84:	4603      	mov	r3, r0
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d001      	beq.n	8010f8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010f8a:	f000 fd37 	bl	80119fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010f8e:	7bfb      	ldrb	r3, [r7, #15]
 8010f90:	3b01      	subs	r3, #1
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	dce9      	bgt.n	8010f72 <prvUnlockQueue+0x16>
 8010f9e:	e000      	b.n	8010fa2 <prvUnlockQueue+0x46>
					break;
 8010fa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	22ff      	movs	r2, #255	; 0xff
 8010fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010faa:	f7ff fad3 	bl	8010554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010fae:	f7ff faa3 	bl	80104f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010fb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010fba:	e011      	b.n	8010fe0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	691b      	ldr	r3, [r3, #16]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d012      	beq.n	8010fea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	3310      	adds	r3, #16
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f000 fc49 	bl	8011860 <xTaskRemoveFromEventList>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d001      	beq.n	8010fd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010fd4:	f000 fd12 	bl	80119fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010fd8:	7bbb      	ldrb	r3, [r7, #14]
 8010fda:	3b01      	subs	r3, #1
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	dce9      	bgt.n	8010fbc <prvUnlockQueue+0x60>
 8010fe8:	e000      	b.n	8010fec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010fea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	22ff      	movs	r2, #255	; 0xff
 8010ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010ff4:	f7ff faae 	bl	8010554 <vPortExitCritical>
}
 8010ff8:	bf00      	nop
 8010ffa:	3710      	adds	r7, #16
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b084      	sub	sp, #16
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011008:	f7ff fa76 	bl	80104f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011010:	2b00      	cmp	r3, #0
 8011012:	d102      	bne.n	801101a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011014:	2301      	movs	r3, #1
 8011016:	60fb      	str	r3, [r7, #12]
 8011018:	e001      	b.n	801101e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801101a:	2300      	movs	r3, #0
 801101c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801101e:	f7ff fa99 	bl	8010554 <vPortExitCritical>

	return xReturn;
 8011022:	68fb      	ldr	r3, [r7, #12]
}
 8011024:	4618      	mov	r0, r3
 8011026:	3710      	adds	r7, #16
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b084      	sub	sp, #16
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011034:	f7ff fa60 	bl	80104f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011040:	429a      	cmp	r2, r3
 8011042:	d102      	bne.n	801104a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011044:	2301      	movs	r3, #1
 8011046:	60fb      	str	r3, [r7, #12]
 8011048:	e001      	b.n	801104e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801104a:	2300      	movs	r3, #0
 801104c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801104e:	f7ff fa81 	bl	8010554 <vPortExitCritical>

	return xReturn;
 8011052:	68fb      	ldr	r3, [r7, #12]
}
 8011054:	4618      	mov	r0, r3
 8011056:	3710      	adds	r7, #16
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <vApplicationStackOverflowHook>:

/* Callback function prototypes. --------------------------*/
#if(  configCHECK_FOR_STACK_OVERFLOW > 0 )

	void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
	{
 801105c:	b480      	push	{r7}
 801105e:	b083      	sub	sp, #12
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	6039      	str	r1, [r7, #0]
	    while (1) {
	        __asm("nop");
 8011066:	bf00      	nop
 8011068:	e7fd      	b.n	8011066 <vApplicationStackOverflowHook+0xa>

0801106a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801106a:	b580      	push	{r7, lr}
 801106c:	b08e      	sub	sp, #56	; 0x38
 801106e:	af04      	add	r7, sp, #16
 8011070:	60f8      	str	r0, [r7, #12]
 8011072:	60b9      	str	r1, [r7, #8]
 8011074:	607a      	str	r2, [r7, #4]
 8011076:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801107a:	2b00      	cmp	r3, #0
 801107c:	d109      	bne.n	8011092 <xTaskCreateStatic+0x28>
 801107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011082:	f383 8811 	msr	BASEPRI, r3
 8011086:	f3bf 8f6f 	isb	sy
 801108a:	f3bf 8f4f 	dsb	sy
 801108e:	623b      	str	r3, [r7, #32]
 8011090:	e7fe      	b.n	8011090 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011094:	2b00      	cmp	r3, #0
 8011096:	d109      	bne.n	80110ac <xTaskCreateStatic+0x42>
 8011098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801109c:	f383 8811 	msr	BASEPRI, r3
 80110a0:	f3bf 8f6f 	isb	sy
 80110a4:	f3bf 8f4f 	dsb	sy
 80110a8:	61fb      	str	r3, [r7, #28]
 80110aa:	e7fe      	b.n	80110aa <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80110ac:	2348      	movs	r3, #72	; 0x48
 80110ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	2b48      	cmp	r3, #72	; 0x48
 80110b4:	d009      	beq.n	80110ca <xTaskCreateStatic+0x60>
 80110b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ba:	f383 8811 	msr	BASEPRI, r3
 80110be:	f3bf 8f6f 	isb	sy
 80110c2:	f3bf 8f4f 	dsb	sy
 80110c6:	61bb      	str	r3, [r7, #24]
 80110c8:	e7fe      	b.n	80110c8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80110ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d01a      	beq.n	8011106 <xTaskCreateStatic+0x9c>
 80110d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d017      	beq.n	8011106 <xTaskCreateStatic+0x9c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80110d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80110da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110de:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80110e0:	2300      	movs	r3, #0
 80110e2:	9303      	str	r3, [sp, #12]
 80110e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e6:	9302      	str	r3, [sp, #8]
 80110e8:	f107 0314 	add.w	r3, r7, #20
 80110ec:	9301      	str	r3, [sp, #4]
 80110ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f0:	9300      	str	r3, [sp, #0]
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	68b9      	ldr	r1, [r7, #8]
 80110f8:	68f8      	ldr	r0, [r7, #12]
 80110fa:	f000 f80b 	bl	8011114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80110fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011100:	f000 f88e 	bl	8011220 <prvAddNewTaskToReadyList>
 8011104:	e001      	b.n	801110a <xTaskCreateStatic+0xa0>
		}
		else
		{
			xReturn = NULL;
 8011106:	2300      	movs	r3, #0
 8011108:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801110a:	697b      	ldr	r3, [r7, #20]
	}
 801110c:	4618      	mov	r0, r3
 801110e:	3728      	adds	r7, #40	; 0x28
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}

08011114 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b088      	sub	sp, #32
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	607a      	str	r2, [r7, #4]
 8011120:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011124:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	009b      	lsls	r3, r3, #2
 801112a:	461a      	mov	r2, r3
 801112c:	21a5      	movs	r1, #165	; 0xa5
 801112e:	f000 ff8d 	bl	801204c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8011132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801113c:	3b01      	subs	r3, #1
 801113e:	009b      	lsls	r3, r3, #2
 8011140:	4413      	add	r3, r2
 8011142:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011144:	69bb      	ldr	r3, [r7, #24]
 8011146:	f023 0307 	bic.w	r3, r3, #7
 801114a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	f003 0307 	and.w	r3, r3, #7
 8011152:	2b00      	cmp	r3, #0
 8011154:	d009      	beq.n	801116a <prvInitialiseNewTask+0x56>
 8011156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801115a:	f383 8811 	msr	BASEPRI, r3
 801115e:	f3bf 8f6f 	isb	sy
 8011162:	f3bf 8f4f 	dsb	sy
 8011166:	617b      	str	r3, [r7, #20]
 8011168:	e7fe      	b.n	8011168 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801116a:	2300      	movs	r3, #0
 801116c:	61fb      	str	r3, [r7, #28]
 801116e:	e012      	b.n	8011196 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011170:	68ba      	ldr	r2, [r7, #8]
 8011172:	69fb      	ldr	r3, [r7, #28]
 8011174:	4413      	add	r3, r2
 8011176:	7819      	ldrb	r1, [r3, #0]
 8011178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	4413      	add	r3, r2
 801117e:	3334      	adds	r3, #52	; 0x34
 8011180:	460a      	mov	r2, r1
 8011182:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8011184:	68ba      	ldr	r2, [r7, #8]
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	4413      	add	r3, r2
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d006      	beq.n	801119e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	3301      	adds	r3, #1
 8011194:	61fb      	str	r3, [r7, #28]
 8011196:	69fb      	ldr	r3, [r7, #28]
 8011198:	2b01      	cmp	r3, #1
 801119a:	d9e9      	bls.n	8011170 <prvInitialiseNewTask+0x5c>
 801119c:	e000      	b.n	80111a0 <prvInitialiseNewTask+0x8c>
		{
			break;
 801119e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80111a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a2:	2200      	movs	r2, #0
 80111a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80111a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111aa:	2b06      	cmp	r3, #6
 80111ac:	d901      	bls.n	80111b2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80111ae:	2306      	movs	r3, #6
 80111b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80111b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80111b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxNewTCB->uxMutexesHeld = 0;
 80111be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c0:	2200      	movs	r2, #0
 80111c2:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80111c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c6:	3304      	adds	r3, #4
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7fe ffff 	bl	80101cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80111ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d0:	3318      	adds	r3, #24
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fe fffa 	bl	80101cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80111d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e0:	f1c3 0207 	rsb	r2, r3, #7
 80111e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80111e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80111ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f0:	2200      	movs	r2, #0
 80111f2:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80111f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f6:	2200      	movs	r2, #0
 80111f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80111fc:	683a      	ldr	r2, [r7, #0]
 80111fe:	68f9      	ldr	r1, [r7, #12]
 8011200:	69b8      	ldr	r0, [r7, #24]
 8011202:	f7ff f877 	bl	80102f4 <pxPortInitialiseStack>
 8011206:	4602      	mov	r2, r0
 8011208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 801120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120e:	2b00      	cmp	r3, #0
 8011210:	d002      	beq.n	8011218 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011216:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011218:	bf00      	nop
 801121a:	3720      	adds	r7, #32
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011228:	f7ff f966 	bl	80104f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801122c:	4b2a      	ldr	r3, [pc, #168]	; (80112d8 <prvAddNewTaskToReadyList+0xb8>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	3301      	adds	r3, #1
 8011232:	4a29      	ldr	r2, [pc, #164]	; (80112d8 <prvAddNewTaskToReadyList+0xb8>)
 8011234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011236:	4b29      	ldr	r3, [pc, #164]	; (80112dc <prvAddNewTaskToReadyList+0xbc>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d109      	bne.n	8011252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801123e:	4a27      	ldr	r2, [pc, #156]	; (80112dc <prvAddNewTaskToReadyList+0xbc>)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011244:	4b24      	ldr	r3, [pc, #144]	; (80112d8 <prvAddNewTaskToReadyList+0xb8>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	2b01      	cmp	r3, #1
 801124a:	d110      	bne.n	801126e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801124c:	f000 fbfa 	bl	8011a44 <prvInitialiseTaskLists>
 8011250:	e00d      	b.n	801126e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011252:	4b23      	ldr	r3, [pc, #140]	; (80112e0 <prvAddNewTaskToReadyList+0xc0>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d109      	bne.n	801126e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801125a:	4b20      	ldr	r3, [pc, #128]	; (80112dc <prvAddNewTaskToReadyList+0xbc>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011264:	429a      	cmp	r2, r3
 8011266:	d802      	bhi.n	801126e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011268:	4a1c      	ldr	r2, [pc, #112]	; (80112dc <prvAddNewTaskToReadyList+0xbc>)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801126e:	4b1d      	ldr	r3, [pc, #116]	; (80112e4 <prvAddNewTaskToReadyList+0xc4>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	3301      	adds	r3, #1
 8011274:	4a1b      	ldr	r2, [pc, #108]	; (80112e4 <prvAddNewTaskToReadyList+0xc4>)
 8011276:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801127c:	2201      	movs	r2, #1
 801127e:	409a      	lsls	r2, r3
 8011280:	4b19      	ldr	r3, [pc, #100]	; (80112e8 <prvAddNewTaskToReadyList+0xc8>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	4313      	orrs	r3, r2
 8011286:	4a18      	ldr	r2, [pc, #96]	; (80112e8 <prvAddNewTaskToReadyList+0xc8>)
 8011288:	6013      	str	r3, [r2, #0]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801128e:	4613      	mov	r3, r2
 8011290:	009b      	lsls	r3, r3, #2
 8011292:	4413      	add	r3, r2
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	4a15      	ldr	r2, [pc, #84]	; (80112ec <prvAddNewTaskToReadyList+0xcc>)
 8011298:	441a      	add	r2, r3
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	3304      	adds	r3, #4
 801129e:	4619      	mov	r1, r3
 80112a0:	4610      	mov	r0, r2
 80112a2:	f7fe ffa0 	bl	80101e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80112a6:	f7ff f955 	bl	8010554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80112aa:	4b0d      	ldr	r3, [pc, #52]	; (80112e0 <prvAddNewTaskToReadyList+0xc0>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d00e      	beq.n	80112d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80112b2:	4b0a      	ldr	r3, [pc, #40]	; (80112dc <prvAddNewTaskToReadyList+0xbc>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112bc:	429a      	cmp	r2, r3
 80112be:	d207      	bcs.n	80112d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80112c0:	4b0b      	ldr	r3, [pc, #44]	; (80112f0 <prvAddNewTaskToReadyList+0xd0>)
 80112c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112c6:	601a      	str	r2, [r3, #0]
 80112c8:	f3bf 8f4f 	dsb	sy
 80112cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112d0:	bf00      	nop
 80112d2:	3708      	adds	r7, #8
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}
 80112d8:	200002f4 	.word	0x200002f4
 80112dc:	20000220 	.word	0x20000220
 80112e0:	20000300 	.word	0x20000300
 80112e4:	20000310 	.word	0x20000310
 80112e8:	200002fc 	.word	0x200002fc
 80112ec:	20000224 	.word	0x20000224
 80112f0:	e000ed04 	.word	0xe000ed04

080112f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b084      	sub	sp, #16
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80112fc:	2300      	movs	r3, #0
 80112fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d016      	beq.n	8011334 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011306:	4b13      	ldr	r3, [pc, #76]	; (8011354 <vTaskDelay+0x60>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d009      	beq.n	8011322 <vTaskDelay+0x2e>
 801130e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011312:	f383 8811 	msr	BASEPRI, r3
 8011316:	f3bf 8f6f 	isb	sy
 801131a:	f3bf 8f4f 	dsb	sy
 801131e:	60bb      	str	r3, [r7, #8]
 8011320:	e7fe      	b.n	8011320 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011322:	f000 f893 	bl	801144c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011326:	2100      	movs	r1, #0
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f000 fdc9 	bl	8011ec0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801132e:	f000 f89b 	bl	8011468 <xTaskResumeAll>
 8011332:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d107      	bne.n	801134a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801133a:	4b07      	ldr	r3, [pc, #28]	; (8011358 <vTaskDelay+0x64>)
 801133c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011340:	601a      	str	r2, [r3, #0]
 8011342:	f3bf 8f4f 	dsb	sy
 8011346:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801134a:	bf00      	nop
 801134c:	3710      	adds	r7, #16
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	2000031c 	.word	0x2000031c
 8011358:	e000ed04 	.word	0xe000ed04

0801135c <vApplicationGetIdleTaskMemory>:


void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 801135c:	b480      	push	{r7}
 801135e:	b085      	sub	sp, #20
 8011360:	af00      	add	r7, sp, #0
 8011362:	60f8      	str	r0, [r7, #12]
 8011364:	60b9      	str	r1, [r7, #8]
 8011366:	607a      	str	r2, [r7, #4]
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task’s
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	4a07      	ldr	r2, [pc, #28]	; (8011388 <vApplicationGetIdleTaskMemory+0x2c>)
 801136c:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Idle task’s stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	4a06      	ldr	r2, [pc, #24]	; (801138c <vApplicationGetIdleTaskMemory+0x30>)
 8011372:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2240      	movs	r2, #64	; 0x40
 8011378:	601a      	str	r2, [r3, #0]
}
 801137a:	bf00      	nop
 801137c:	3714      	adds	r7, #20
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr
 8011386:	bf00      	nop
 8011388:	20000320 	.word	0x20000320
 801138c:	20000368 	.word	0x20000368

08011390 <vTaskStartScheduler>:

void vTaskStartScheduler( void )
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b08a      	sub	sp, #40	; 0x28
 8011394:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011396:	2300      	movs	r3, #0
 8011398:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801139a:	2300      	movs	r3, #0
 801139c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801139e:	463a      	mov	r2, r7
 80113a0:	1d39      	adds	r1, r7, #4
 80113a2:	f107 0308 	add.w	r3, r7, #8
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7ff ffd8 	bl	801135c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80113ac:	6839      	ldr	r1, [r7, #0]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	68ba      	ldr	r2, [r7, #8]
 80113b2:	9202      	str	r2, [sp, #8]
 80113b4:	9301      	str	r3, [sp, #4]
 80113b6:	2300      	movs	r3, #0
 80113b8:	9300      	str	r3, [sp, #0]
 80113ba:	2300      	movs	r3, #0
 80113bc:	460a      	mov	r2, r1
 80113be:	491d      	ldr	r1, [pc, #116]	; (8011434 <vTaskStartScheduler+0xa4>)
 80113c0:	481d      	ldr	r0, [pc, #116]	; (8011438 <vTaskStartScheduler+0xa8>)
 80113c2:	f7ff fe52 	bl	801106a <xTaskCreateStatic>
 80113c6:	4602      	mov	r2, r0
 80113c8:	4b1c      	ldr	r3, [pc, #112]	; (801143c <vTaskStartScheduler+0xac>)
 80113ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80113cc:	4b1b      	ldr	r3, [pc, #108]	; (801143c <vTaskStartScheduler+0xac>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d002      	beq.n	80113da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80113d4:	2301      	movs	r3, #1
 80113d6:	617b      	str	r3, [r7, #20]
 80113d8:	e001      	b.n	80113de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80113da:	2300      	movs	r3, #0
 80113dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	2b01      	cmp	r3, #1
 80113e2:	d115      	bne.n	8011410 <vTaskStartScheduler+0x80>
 80113e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e8:	f383 8811 	msr	BASEPRI, r3
 80113ec:	f3bf 8f6f 	isb	sy
 80113f0:	f3bf 8f4f 	dsb	sy
 80113f4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80113f6:	4b12      	ldr	r3, [pc, #72]	; (8011440 <vTaskStartScheduler+0xb0>)
 80113f8:	f04f 32ff 	mov.w	r2, #4294967295
 80113fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80113fe:	4b11      	ldr	r3, [pc, #68]	; (8011444 <vTaskStartScheduler+0xb4>)
 8011400:	2201      	movs	r2, #1
 8011402:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011404:	4b10      	ldr	r3, [pc, #64]	; (8011448 <vTaskStartScheduler+0xb8>)
 8011406:	2200      	movs	r2, #0
 8011408:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801140a:	f7fe fff5 	bl	80103f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801140e:	e00d      	b.n	801142c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011416:	d109      	bne.n	801142c <vTaskStartScheduler+0x9c>
 8011418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801141c:	f383 8811 	msr	BASEPRI, r3
 8011420:	f3bf 8f6f 	isb	sy
 8011424:	f3bf 8f4f 	dsb	sy
 8011428:	60fb      	str	r3, [r7, #12]
 801142a:	e7fe      	b.n	801142a <vTaskStartScheduler+0x9a>
}
 801142c:	bf00      	nop
 801142e:	3718      	adds	r7, #24
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}
 8011434:	08015570 	.word	0x08015570
 8011438:	08011a15 	.word	0x08011a15
 801143c:	20000318 	.word	0x20000318
 8011440:	20000314 	.word	0x20000314
 8011444:	20000300 	.word	0x20000300
 8011448:	200002f8 	.word	0x200002f8

0801144c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801144c:	b480      	push	{r7}
 801144e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011450:	4b04      	ldr	r3, [pc, #16]	; (8011464 <vTaskSuspendAll+0x18>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	3301      	adds	r3, #1
 8011456:	4a03      	ldr	r2, [pc, #12]	; (8011464 <vTaskSuspendAll+0x18>)
 8011458:	6013      	str	r3, [r2, #0]
}
 801145a:	bf00      	nop
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr
 8011464:	2000031c 	.word	0x2000031c

08011468 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b084      	sub	sp, #16
 801146c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801146e:	2300      	movs	r3, #0
 8011470:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011472:	2300      	movs	r3, #0
 8011474:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011476:	4b41      	ldr	r3, [pc, #260]	; (801157c <xTaskResumeAll+0x114>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d109      	bne.n	8011492 <xTaskResumeAll+0x2a>
 801147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011482:	f383 8811 	msr	BASEPRI, r3
 8011486:	f3bf 8f6f 	isb	sy
 801148a:	f3bf 8f4f 	dsb	sy
 801148e:	603b      	str	r3, [r7, #0]
 8011490:	e7fe      	b.n	8011490 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011492:	f7ff f831 	bl	80104f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011496:	4b39      	ldr	r3, [pc, #228]	; (801157c <xTaskResumeAll+0x114>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	3b01      	subs	r3, #1
 801149c:	4a37      	ldr	r2, [pc, #220]	; (801157c <xTaskResumeAll+0x114>)
 801149e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114a0:	4b36      	ldr	r3, [pc, #216]	; (801157c <xTaskResumeAll+0x114>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d161      	bne.n	801156c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80114a8:	4b35      	ldr	r3, [pc, #212]	; (8011580 <xTaskResumeAll+0x118>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d05d      	beq.n	801156c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80114b0:	e02e      	b.n	8011510 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80114b2:	4b34      	ldr	r3, [pc, #208]	; (8011584 <xTaskResumeAll+0x11c>)
 80114b4:	68db      	ldr	r3, [r3, #12]
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	3318      	adds	r3, #24
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fe feee 	bl	80102a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	3304      	adds	r3, #4
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fe fee9 	bl	80102a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d2:	2201      	movs	r2, #1
 80114d4:	409a      	lsls	r2, r3
 80114d6:	4b2c      	ldr	r3, [pc, #176]	; (8011588 <xTaskResumeAll+0x120>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	4313      	orrs	r3, r2
 80114dc:	4a2a      	ldr	r2, [pc, #168]	; (8011588 <xTaskResumeAll+0x120>)
 80114de:	6013      	str	r3, [r2, #0]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114e4:	4613      	mov	r3, r2
 80114e6:	009b      	lsls	r3, r3, #2
 80114e8:	4413      	add	r3, r2
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	4a27      	ldr	r2, [pc, #156]	; (801158c <xTaskResumeAll+0x124>)
 80114ee:	441a      	add	r2, r3
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	3304      	adds	r3, #4
 80114f4:	4619      	mov	r1, r3
 80114f6:	4610      	mov	r0, r2
 80114f8:	f7fe fe75 	bl	80101e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011500:	4b23      	ldr	r3, [pc, #140]	; (8011590 <xTaskResumeAll+0x128>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011506:	429a      	cmp	r2, r3
 8011508:	d302      	bcc.n	8011510 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 801150a:	4b22      	ldr	r3, [pc, #136]	; (8011594 <xTaskResumeAll+0x12c>)
 801150c:	2201      	movs	r2, #1
 801150e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011510:	4b1c      	ldr	r3, [pc, #112]	; (8011584 <xTaskResumeAll+0x11c>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d1cc      	bne.n	80114b2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d001      	beq.n	8011522 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801151e:	f000 facf 	bl	8011ac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011522:	4b1d      	ldr	r3, [pc, #116]	; (8011598 <xTaskResumeAll+0x130>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d010      	beq.n	8011550 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801152e:	f000 f837 	bl	80115a0 <xTaskIncrementTick>
 8011532:	4603      	mov	r3, r0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d002      	beq.n	801153e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8011538:	4b16      	ldr	r3, [pc, #88]	; (8011594 <xTaskResumeAll+0x12c>)
 801153a:	2201      	movs	r2, #1
 801153c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	3b01      	subs	r3, #1
 8011542:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d1f1      	bne.n	801152e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 801154a:	4b13      	ldr	r3, [pc, #76]	; (8011598 <xTaskResumeAll+0x130>)
 801154c:	2200      	movs	r2, #0
 801154e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011550:	4b10      	ldr	r3, [pc, #64]	; (8011594 <xTaskResumeAll+0x12c>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d009      	beq.n	801156c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011558:	2301      	movs	r3, #1
 801155a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801155c:	4b0f      	ldr	r3, [pc, #60]	; (801159c <xTaskResumeAll+0x134>)
 801155e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011562:	601a      	str	r2, [r3, #0]
 8011564:	f3bf 8f4f 	dsb	sy
 8011568:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801156c:	f7fe fff2 	bl	8010554 <vPortExitCritical>

	return xAlreadyYielded;
 8011570:	68bb      	ldr	r3, [r7, #8]
}
 8011572:	4618      	mov	r0, r3
 8011574:	3710      	adds	r7, #16
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	2000031c 	.word	0x2000031c
 8011580:	200002f4 	.word	0x200002f4
 8011584:	200002e0 	.word	0x200002e0
 8011588:	200002fc 	.word	0x200002fc
 801158c:	20000224 	.word	0x20000224
 8011590:	20000220 	.word	0x20000220
 8011594:	20000308 	.word	0x20000308
 8011598:	20000304 	.word	0x20000304
 801159c:	e000ed04 	.word	0xe000ed04

080115a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b086      	sub	sp, #24
 80115a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80115a6:	2300      	movs	r3, #0
 80115a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115aa:	4b50      	ldr	r3, [pc, #320]	; (80116ec <xTaskIncrementTick+0x14c>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	f040 808c 	bne.w	80116cc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80115b4:	4b4e      	ldr	r3, [pc, #312]	; (80116f0 <xTaskIncrementTick+0x150>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	3301      	adds	r3, #1
 80115ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80115bc:	4a4c      	ldr	r2, [pc, #304]	; (80116f0 <xTaskIncrementTick+0x150>)
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d11f      	bne.n	8011608 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80115c8:	4b4a      	ldr	r3, [pc, #296]	; (80116f4 <xTaskIncrementTick+0x154>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d009      	beq.n	80115e6 <xTaskIncrementTick+0x46>
 80115d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d6:	f383 8811 	msr	BASEPRI, r3
 80115da:	f3bf 8f6f 	isb	sy
 80115de:	f3bf 8f4f 	dsb	sy
 80115e2:	603b      	str	r3, [r7, #0]
 80115e4:	e7fe      	b.n	80115e4 <xTaskIncrementTick+0x44>
 80115e6:	4b43      	ldr	r3, [pc, #268]	; (80116f4 <xTaskIncrementTick+0x154>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	60fb      	str	r3, [r7, #12]
 80115ec:	4b42      	ldr	r3, [pc, #264]	; (80116f8 <xTaskIncrementTick+0x158>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	4a40      	ldr	r2, [pc, #256]	; (80116f4 <xTaskIncrementTick+0x154>)
 80115f2:	6013      	str	r3, [r2, #0]
 80115f4:	4a40      	ldr	r2, [pc, #256]	; (80116f8 <xTaskIncrementTick+0x158>)
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	6013      	str	r3, [r2, #0]
 80115fa:	4b40      	ldr	r3, [pc, #256]	; (80116fc <xTaskIncrementTick+0x15c>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	3301      	adds	r3, #1
 8011600:	4a3e      	ldr	r2, [pc, #248]	; (80116fc <xTaskIncrementTick+0x15c>)
 8011602:	6013      	str	r3, [r2, #0]
 8011604:	f000 fa5c 	bl	8011ac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011608:	4b3d      	ldr	r3, [pc, #244]	; (8011700 <xTaskIncrementTick+0x160>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	693a      	ldr	r2, [r7, #16]
 801160e:	429a      	cmp	r2, r3
 8011610:	d34d      	bcc.n	80116ae <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011612:	4b38      	ldr	r3, [pc, #224]	; (80116f4 <xTaskIncrementTick+0x154>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d101      	bne.n	8011620 <xTaskIncrementTick+0x80>
 801161c:	2301      	movs	r3, #1
 801161e:	e000      	b.n	8011622 <xTaskIncrementTick+0x82>
 8011620:	2300      	movs	r3, #0
 8011622:	2b00      	cmp	r3, #0
 8011624:	d004      	beq.n	8011630 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011626:	4b36      	ldr	r3, [pc, #216]	; (8011700 <xTaskIncrementTick+0x160>)
 8011628:	f04f 32ff 	mov.w	r2, #4294967295
 801162c:	601a      	str	r2, [r3, #0]
					break;
 801162e:	e03e      	b.n	80116ae <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011630:	4b30      	ldr	r3, [pc, #192]	; (80116f4 <xTaskIncrementTick+0x154>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	68db      	ldr	r3, [r3, #12]
 8011636:	68db      	ldr	r3, [r3, #12]
 8011638:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011640:	693a      	ldr	r2, [r7, #16]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	429a      	cmp	r2, r3
 8011646:	d203      	bcs.n	8011650 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011648:	4a2d      	ldr	r2, [pc, #180]	; (8011700 <xTaskIncrementTick+0x160>)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6013      	str	r3, [r2, #0]
						break;
 801164e:	e02e      	b.n	80116ae <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	3304      	adds	r3, #4
 8011654:	4618      	mov	r0, r3
 8011656:	f7fe fe23 	bl	80102a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801165e:	2b00      	cmp	r3, #0
 8011660:	d004      	beq.n	801166c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	3318      	adds	r3, #24
 8011666:	4618      	mov	r0, r3
 8011668:	f7fe fe1a 	bl	80102a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011670:	2201      	movs	r2, #1
 8011672:	409a      	lsls	r2, r3
 8011674:	4b23      	ldr	r3, [pc, #140]	; (8011704 <xTaskIncrementTick+0x164>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4313      	orrs	r3, r2
 801167a:	4a22      	ldr	r2, [pc, #136]	; (8011704 <xTaskIncrementTick+0x164>)
 801167c:	6013      	str	r3, [r2, #0]
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011682:	4613      	mov	r3, r2
 8011684:	009b      	lsls	r3, r3, #2
 8011686:	4413      	add	r3, r2
 8011688:	009b      	lsls	r3, r3, #2
 801168a:	4a1f      	ldr	r2, [pc, #124]	; (8011708 <xTaskIncrementTick+0x168>)
 801168c:	441a      	add	r2, r3
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	3304      	adds	r3, #4
 8011692:	4619      	mov	r1, r3
 8011694:	4610      	mov	r0, r2
 8011696:	f7fe fda6 	bl	80101e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801169e:	4b1b      	ldr	r3, [pc, #108]	; (801170c <xTaskIncrementTick+0x16c>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d3b4      	bcc.n	8011612 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80116a8:	2301      	movs	r3, #1
 80116aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80116ac:	e7b1      	b.n	8011612 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80116ae:	4b17      	ldr	r3, [pc, #92]	; (801170c <xTaskIncrementTick+0x16c>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116b4:	4914      	ldr	r1, [pc, #80]	; (8011708 <xTaskIncrementTick+0x168>)
 80116b6:	4613      	mov	r3, r2
 80116b8:	009b      	lsls	r3, r3, #2
 80116ba:	4413      	add	r3, r2
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	440b      	add	r3, r1
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	2b01      	cmp	r3, #1
 80116c4:	d907      	bls.n	80116d6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80116c6:	2301      	movs	r3, #1
 80116c8:	617b      	str	r3, [r7, #20]
 80116ca:	e004      	b.n	80116d6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80116cc:	4b10      	ldr	r3, [pc, #64]	; (8011710 <xTaskIncrementTick+0x170>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	3301      	adds	r3, #1
 80116d2:	4a0f      	ldr	r2, [pc, #60]	; (8011710 <xTaskIncrementTick+0x170>)
 80116d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80116d6:	4b0f      	ldr	r3, [pc, #60]	; (8011714 <xTaskIncrementTick+0x174>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d001      	beq.n	80116e2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80116de:	2301      	movs	r3, #1
 80116e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80116e2:	697b      	ldr	r3, [r7, #20]
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3718      	adds	r7, #24
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	2000031c 	.word	0x2000031c
 80116f0:	200002f8 	.word	0x200002f8
 80116f4:	200002d8 	.word	0x200002d8
 80116f8:	200002dc 	.word	0x200002dc
 80116fc:	2000030c 	.word	0x2000030c
 8011700:	20000314 	.word	0x20000314
 8011704:	200002fc 	.word	0x200002fc
 8011708:	20000224 	.word	0x20000224
 801170c:	20000220 	.word	0x20000220
 8011710:	20000304 	.word	0x20000304
 8011714:	20000308 	.word	0x20000308

08011718 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b088      	sub	sp, #32
 801171c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801171e:	4b39      	ldr	r3, [pc, #228]	; (8011804 <vTaskSwitchContext+0xec>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d003      	beq.n	801172e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011726:	4b38      	ldr	r3, [pc, #224]	; (8011808 <vTaskSwitchContext+0xf0>)
 8011728:	2201      	movs	r2, #1
 801172a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801172c:	e065      	b.n	80117fa <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 801172e:	4b36      	ldr	r3, [pc, #216]	; (8011808 <vTaskSwitchContext+0xf0>)
 8011730:	2200      	movs	r2, #0
 8011732:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011734:	4b35      	ldr	r3, [pc, #212]	; (801180c <vTaskSwitchContext+0xf4>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801173a:	61fb      	str	r3, [r7, #28]
 801173c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8011740:	61bb      	str	r3, [r7, #24]
 8011742:	69fb      	ldr	r3, [r7, #28]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	69ba      	ldr	r2, [r7, #24]
 8011748:	429a      	cmp	r2, r3
 801174a:	d111      	bne.n	8011770 <vTaskSwitchContext+0x58>
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	3304      	adds	r3, #4
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	69ba      	ldr	r2, [r7, #24]
 8011754:	429a      	cmp	r2, r3
 8011756:	d10b      	bne.n	8011770 <vTaskSwitchContext+0x58>
 8011758:	69fb      	ldr	r3, [r7, #28]
 801175a:	3308      	adds	r3, #8
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	69ba      	ldr	r2, [r7, #24]
 8011760:	429a      	cmp	r2, r3
 8011762:	d105      	bne.n	8011770 <vTaskSwitchContext+0x58>
 8011764:	69fb      	ldr	r3, [r7, #28]
 8011766:	330c      	adds	r3, #12
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	69ba      	ldr	r2, [r7, #24]
 801176c:	429a      	cmp	r2, r3
 801176e:	d008      	beq.n	8011782 <vTaskSwitchContext+0x6a>
 8011770:	4b26      	ldr	r3, [pc, #152]	; (801180c <vTaskSwitchContext+0xf4>)
 8011772:	681a      	ldr	r2, [r3, #0]
 8011774:	4b25      	ldr	r3, [pc, #148]	; (801180c <vTaskSwitchContext+0xf4>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	3334      	adds	r3, #52	; 0x34
 801177a:	4619      	mov	r1, r3
 801177c:	4610      	mov	r0, r2
 801177e:	f7ff fc6d 	bl	801105c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011782:	4b23      	ldr	r3, [pc, #140]	; (8011810 <vTaskSwitchContext+0xf8>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	fab3 f383 	clz	r3, r3
 801178e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011790:	7afb      	ldrb	r3, [r7, #11]
 8011792:	f1c3 031f 	rsb	r3, r3, #31
 8011796:	617b      	str	r3, [r7, #20]
 8011798:	491e      	ldr	r1, [pc, #120]	; (8011814 <vTaskSwitchContext+0xfc>)
 801179a:	697a      	ldr	r2, [r7, #20]
 801179c:	4613      	mov	r3, r2
 801179e:	009b      	lsls	r3, r3, #2
 80117a0:	4413      	add	r3, r2
 80117a2:	009b      	lsls	r3, r3, #2
 80117a4:	440b      	add	r3, r1
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d109      	bne.n	80117c0 <vTaskSwitchContext+0xa8>
	__asm volatile
 80117ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b0:	f383 8811 	msr	BASEPRI, r3
 80117b4:	f3bf 8f6f 	isb	sy
 80117b8:	f3bf 8f4f 	dsb	sy
 80117bc:	607b      	str	r3, [r7, #4]
 80117be:	e7fe      	b.n	80117be <vTaskSwitchContext+0xa6>
 80117c0:	697a      	ldr	r2, [r7, #20]
 80117c2:	4613      	mov	r3, r2
 80117c4:	009b      	lsls	r3, r3, #2
 80117c6:	4413      	add	r3, r2
 80117c8:	009b      	lsls	r3, r3, #2
 80117ca:	4a12      	ldr	r2, [pc, #72]	; (8011814 <vTaskSwitchContext+0xfc>)
 80117cc:	4413      	add	r3, r2
 80117ce:	613b      	str	r3, [r7, #16]
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	685a      	ldr	r2, [r3, #4]
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	605a      	str	r2, [r3, #4]
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	685a      	ldr	r2, [r3, #4]
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	3308      	adds	r3, #8
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d104      	bne.n	80117f0 <vTaskSwitchContext+0xd8>
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	685a      	ldr	r2, [r3, #4]
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	605a      	str	r2, [r3, #4]
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	4a05      	ldr	r2, [pc, #20]	; (801180c <vTaskSwitchContext+0xf4>)
 80117f8:	6013      	str	r3, [r2, #0]
}
 80117fa:	bf00      	nop
 80117fc:	3720      	adds	r7, #32
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	2000031c 	.word	0x2000031c
 8011808:	20000308 	.word	0x20000308
 801180c:	20000220 	.word	0x20000220
 8011810:	200002fc 	.word	0x200002fc
 8011814:	20000224 	.word	0x20000224

08011818 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d109      	bne.n	801183c <vTaskPlaceOnEventList+0x24>
 8011828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801182c:	f383 8811 	msr	BASEPRI, r3
 8011830:	f3bf 8f6f 	isb	sy
 8011834:	f3bf 8f4f 	dsb	sy
 8011838:	60fb      	str	r3, [r7, #12]
 801183a:	e7fe      	b.n	801183a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801183c:	4b07      	ldr	r3, [pc, #28]	; (801185c <vTaskPlaceOnEventList+0x44>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	3318      	adds	r3, #24
 8011842:	4619      	mov	r1, r3
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f7fe fcf2 	bl	801022e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801184a:	2101      	movs	r1, #1
 801184c:	6838      	ldr	r0, [r7, #0]
 801184e:	f000 fb37 	bl	8011ec0 <prvAddCurrentTaskToDelayedList>
}
 8011852:	bf00      	nop
 8011854:	3710      	adds	r7, #16
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop
 801185c:	20000220 	.word	0x20000220

08011860 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b086      	sub	sp, #24
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	68db      	ldr	r3, [r3, #12]
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d109      	bne.n	801188a <xTaskRemoveFromEventList+0x2a>
 8011876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801187a:	f383 8811 	msr	BASEPRI, r3
 801187e:	f3bf 8f6f 	isb	sy
 8011882:	f3bf 8f4f 	dsb	sy
 8011886:	60fb      	str	r3, [r7, #12]
 8011888:	e7fe      	b.n	8011888 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	3318      	adds	r3, #24
 801188e:	4618      	mov	r0, r3
 8011890:	f7fe fd06 	bl	80102a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011894:	4b1d      	ldr	r3, [pc, #116]	; (801190c <xTaskRemoveFromEventList+0xac>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d11c      	bne.n	80118d6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	3304      	adds	r3, #4
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7fe fcfd 	bl	80102a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118aa:	2201      	movs	r2, #1
 80118ac:	409a      	lsls	r2, r3
 80118ae:	4b18      	ldr	r3, [pc, #96]	; (8011910 <xTaskRemoveFromEventList+0xb0>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	4313      	orrs	r3, r2
 80118b4:	4a16      	ldr	r2, [pc, #88]	; (8011910 <xTaskRemoveFromEventList+0xb0>)
 80118b6:	6013      	str	r3, [r2, #0]
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118bc:	4613      	mov	r3, r2
 80118be:	009b      	lsls	r3, r3, #2
 80118c0:	4413      	add	r3, r2
 80118c2:	009b      	lsls	r3, r3, #2
 80118c4:	4a13      	ldr	r2, [pc, #76]	; (8011914 <xTaskRemoveFromEventList+0xb4>)
 80118c6:	441a      	add	r2, r3
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	3304      	adds	r3, #4
 80118cc:	4619      	mov	r1, r3
 80118ce:	4610      	mov	r0, r2
 80118d0:	f7fe fc89 	bl	80101e6 <vListInsertEnd>
 80118d4:	e005      	b.n	80118e2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	3318      	adds	r3, #24
 80118da:	4619      	mov	r1, r3
 80118dc:	480e      	ldr	r0, [pc, #56]	; (8011918 <xTaskRemoveFromEventList+0xb8>)
 80118de:	f7fe fc82 	bl	80101e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118e6:	4b0d      	ldr	r3, [pc, #52]	; (801191c <xTaskRemoveFromEventList+0xbc>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d905      	bls.n	80118fc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80118f0:	2301      	movs	r3, #1
 80118f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80118f4:	4b0a      	ldr	r3, [pc, #40]	; (8011920 <xTaskRemoveFromEventList+0xc0>)
 80118f6:	2201      	movs	r2, #1
 80118f8:	601a      	str	r2, [r3, #0]
 80118fa:	e001      	b.n	8011900 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80118fc:	2300      	movs	r3, #0
 80118fe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8011900:	697b      	ldr	r3, [r7, #20]
}
 8011902:	4618      	mov	r0, r3
 8011904:	3718      	adds	r7, #24
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}
 801190a:	bf00      	nop
 801190c:	2000031c 	.word	0x2000031c
 8011910:	200002fc 	.word	0x200002fc
 8011914:	20000224 	.word	0x20000224
 8011918:	200002e0 	.word	0x200002e0
 801191c:	20000220 	.word	0x20000220
 8011920:	20000308 	.word	0x20000308

08011924 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011924:	b480      	push	{r7}
 8011926:	b083      	sub	sp, #12
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801192c:	4b06      	ldr	r3, [pc, #24]	; (8011948 <vTaskInternalSetTimeOutState+0x24>)
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011934:	4b05      	ldr	r3, [pc, #20]	; (801194c <vTaskInternalSetTimeOutState+0x28>)
 8011936:	681a      	ldr	r2, [r3, #0]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	605a      	str	r2, [r3, #4]
}
 801193c:	bf00      	nop
 801193e:	370c      	adds	r7, #12
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr
 8011948:	2000030c 	.word	0x2000030c
 801194c:	200002f8 	.word	0x200002f8

08011950 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b088      	sub	sp, #32
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d109      	bne.n	8011974 <xTaskCheckForTimeOut+0x24>
 8011960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011964:	f383 8811 	msr	BASEPRI, r3
 8011968:	f3bf 8f6f 	isb	sy
 801196c:	f3bf 8f4f 	dsb	sy
 8011970:	613b      	str	r3, [r7, #16]
 8011972:	e7fe      	b.n	8011972 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d109      	bne.n	801198e <xTaskCheckForTimeOut+0x3e>
 801197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801197e:	f383 8811 	msr	BASEPRI, r3
 8011982:	f3bf 8f6f 	isb	sy
 8011986:	f3bf 8f4f 	dsb	sy
 801198a:	60fb      	str	r3, [r7, #12]
 801198c:	e7fe      	b.n	801198c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801198e:	f7fe fdb3 	bl	80104f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011992:	4b18      	ldr	r3, [pc, #96]	; (80119f4 <xTaskCheckForTimeOut+0xa4>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	685b      	ldr	r3, [r3, #4]
 801199c:	69ba      	ldr	r2, [r7, #24]
 801199e:	1ad3      	subs	r3, r2, r3
 80119a0:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	4b14      	ldr	r3, [pc, #80]	; (80119f8 <xTaskCheckForTimeOut+0xa8>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d007      	beq.n	80119be <xTaskCheckForTimeOut+0x6e>
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	685b      	ldr	r3, [r3, #4]
 80119b2:	69ba      	ldr	r2, [r7, #24]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d302      	bcc.n	80119be <xTaskCheckForTimeOut+0x6e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80119b8:	2301      	movs	r3, #1
 80119ba:	61fb      	str	r3, [r7, #28]
 80119bc:	e012      	b.n	80119e4 <xTaskCheckForTimeOut+0x94>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	697a      	ldr	r2, [r7, #20]
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d20b      	bcs.n	80119e0 <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	681a      	ldr	r2, [r3, #0]
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	1ad2      	subs	r2, r2, r3
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80119d4:	6878      	ldr	r0, [r7, #4]
 80119d6:	f7ff ffa5 	bl	8011924 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80119da:	2300      	movs	r3, #0
 80119dc:	61fb      	str	r3, [r7, #28]
 80119de:	e001      	b.n	80119e4 <xTaskCheckForTimeOut+0x94>
		}
		else
		{
			xReturn = pdTRUE;
 80119e0:	2301      	movs	r3, #1
 80119e2:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80119e4:	f7fe fdb6 	bl	8010554 <vPortExitCritical>

	return xReturn;
 80119e8:	69fb      	ldr	r3, [r7, #28]
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3720      	adds	r7, #32
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop
 80119f4:	200002f8 	.word	0x200002f8
 80119f8:	2000030c 	.word	0x2000030c

080119fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80119fc:	b480      	push	{r7}
 80119fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011a00:	4b03      	ldr	r3, [pc, #12]	; (8011a10 <vTaskMissedYield+0x14>)
 8011a02:	2201      	movs	r2, #1
 8011a04:	601a      	str	r2, [r3, #0]
}
 8011a06:	bf00      	nop
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr
 8011a10:	20000308 	.word	0x20000308

08011a14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011a1c:	f000 f848 	bl	8011ab0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011a20:	4b06      	ldr	r3, [pc, #24]	; (8011a3c <prvIdleTask+0x28>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	d9f9      	bls.n	8011a1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011a28:	4b05      	ldr	r3, [pc, #20]	; (8011a40 <prvIdleTask+0x2c>)
 8011a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a2e:	601a      	str	r2, [r3, #0]
 8011a30:	f3bf 8f4f 	dsb	sy
 8011a34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011a38:	e7f0      	b.n	8011a1c <prvIdleTask+0x8>
 8011a3a:	bf00      	nop
 8011a3c:	20000224 	.word	0x20000224
 8011a40:	e000ed04 	.word	0xe000ed04

08011a44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b082      	sub	sp, #8
 8011a48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	607b      	str	r3, [r7, #4]
 8011a4e:	e00c      	b.n	8011a6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011a50:	687a      	ldr	r2, [r7, #4]
 8011a52:	4613      	mov	r3, r2
 8011a54:	009b      	lsls	r3, r3, #2
 8011a56:	4413      	add	r3, r2
 8011a58:	009b      	lsls	r3, r3, #2
 8011a5a:	4a0f      	ldr	r2, [pc, #60]	; (8011a98 <prvInitialiseTaskLists+0x54>)
 8011a5c:	4413      	add	r3, r2
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7fe fb94 	bl	801018c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	3301      	adds	r3, #1
 8011a68:	607b      	str	r3, [r7, #4]
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2b06      	cmp	r3, #6
 8011a6e:	d9ef      	bls.n	8011a50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011a70:	480a      	ldr	r0, [pc, #40]	; (8011a9c <prvInitialiseTaskLists+0x58>)
 8011a72:	f7fe fb8b 	bl	801018c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011a76:	480a      	ldr	r0, [pc, #40]	; (8011aa0 <prvInitialiseTaskLists+0x5c>)
 8011a78:	f7fe fb88 	bl	801018c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011a7c:	4809      	ldr	r0, [pc, #36]	; (8011aa4 <prvInitialiseTaskLists+0x60>)
 8011a7e:	f7fe fb85 	bl	801018c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011a82:	4b09      	ldr	r3, [pc, #36]	; (8011aa8 <prvInitialiseTaskLists+0x64>)
 8011a84:	4a05      	ldr	r2, [pc, #20]	; (8011a9c <prvInitialiseTaskLists+0x58>)
 8011a86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011a88:	4b08      	ldr	r3, [pc, #32]	; (8011aac <prvInitialiseTaskLists+0x68>)
 8011a8a:	4a05      	ldr	r2, [pc, #20]	; (8011aa0 <prvInitialiseTaskLists+0x5c>)
 8011a8c:	601a      	str	r2, [r3, #0]
}
 8011a8e:	bf00      	nop
 8011a90:	3708      	adds	r7, #8
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}
 8011a96:	bf00      	nop
 8011a98:	20000224 	.word	0x20000224
 8011a9c:	200002b0 	.word	0x200002b0
 8011aa0:	200002c4 	.word	0x200002c4
 8011aa4:	200002e0 	.word	0x200002e0
 8011aa8:	200002d8 	.word	0x200002d8
 8011aac:	200002dc 	.word	0x200002dc

08011ab0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011ab0:	b480      	push	{r7}
 8011ab2:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011ab4:	bf00      	nop
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr
	...

08011ac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011ac6:	4b0f      	ldr	r3, [pc, #60]	; (8011b04 <prvResetNextTaskUnblockTime+0x44>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d101      	bne.n	8011ad4 <prvResetNextTaskUnblockTime+0x14>
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	e000      	b.n	8011ad6 <prvResetNextTaskUnblockTime+0x16>
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d004      	beq.n	8011ae4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011ada:	4b0b      	ldr	r3, [pc, #44]	; (8011b08 <prvResetNextTaskUnblockTime+0x48>)
 8011adc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ae0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011ae2:	e008      	b.n	8011af6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011ae4:	4b07      	ldr	r3, [pc, #28]	; (8011b04 <prvResetNextTaskUnblockTime+0x44>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	68db      	ldr	r3, [r3, #12]
 8011aea:	68db      	ldr	r3, [r3, #12]
 8011aec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	685b      	ldr	r3, [r3, #4]
 8011af2:	4a05      	ldr	r2, [pc, #20]	; (8011b08 <prvResetNextTaskUnblockTime+0x48>)
 8011af4:	6013      	str	r3, [r2, #0]
}
 8011af6:	bf00      	nop
 8011af8:	370c      	adds	r7, #12
 8011afa:	46bd      	mov	sp, r7
 8011afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b00:	4770      	bx	lr
 8011b02:	bf00      	nop
 8011b04:	200002d8 	.word	0x200002d8
 8011b08:	20000314 	.word	0x20000314

08011b0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b083      	sub	sp, #12
 8011b10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011b12:	4b0b      	ldr	r3, [pc, #44]	; (8011b40 <xTaskGetSchedulerState+0x34>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d102      	bne.n	8011b20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	607b      	str	r3, [r7, #4]
 8011b1e:	e008      	b.n	8011b32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b20:	4b08      	ldr	r3, [pc, #32]	; (8011b44 <xTaskGetSchedulerState+0x38>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d102      	bne.n	8011b2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011b28:	2302      	movs	r3, #2
 8011b2a:	607b      	str	r3, [r7, #4]
 8011b2c:	e001      	b.n	8011b32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011b32:	687b      	ldr	r3, [r7, #4]
	}
 8011b34:	4618      	mov	r0, r3
 8011b36:	370c      	adds	r7, #12
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3e:	4770      	bx	lr
 8011b40:	20000300 	.word	0x20000300
 8011b44:	2000031c 	.word	0x2000031c

08011b48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b084      	sub	sp, #16
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011b54:	2300      	movs	r3, #0
 8011b56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d06e      	beq.n	8011c3c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b62:	4b39      	ldr	r3, [pc, #228]	; (8011c48 <xTaskPriorityInherit+0x100>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d25e      	bcs.n	8011c2a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	699b      	ldr	r3, [r3, #24]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	db06      	blt.n	8011b82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b74:	4b34      	ldr	r3, [pc, #208]	; (8011c48 <xTaskPriorityInherit+0x100>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b7a:	f1c3 0207 	rsb	r2, r3, #7
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	6959      	ldr	r1, [r3, #20]
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b8a:	4613      	mov	r3, r2
 8011b8c:	009b      	lsls	r3, r3, #2
 8011b8e:	4413      	add	r3, r2
 8011b90:	009b      	lsls	r3, r3, #2
 8011b92:	4a2e      	ldr	r2, [pc, #184]	; (8011c4c <xTaskPriorityInherit+0x104>)
 8011b94:	4413      	add	r3, r2
 8011b96:	4299      	cmp	r1, r3
 8011b98:	d101      	bne.n	8011b9e <xTaskPriorityInherit+0x56>
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	e000      	b.n	8011ba0 <xTaskPriorityInherit+0x58>
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d03a      	beq.n	8011c1a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	3304      	adds	r3, #4
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7fe fb79 	bl	80102a0 <uxListRemove>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d115      	bne.n	8011be0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bb8:	4924      	ldr	r1, [pc, #144]	; (8011c4c <xTaskPriorityInherit+0x104>)
 8011bba:	4613      	mov	r3, r2
 8011bbc:	009b      	lsls	r3, r3, #2
 8011bbe:	4413      	add	r3, r2
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	440b      	add	r3, r1
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d10a      	bne.n	8011be0 <xTaskPriorityInherit+0x98>
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bce:	2201      	movs	r2, #1
 8011bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8011bd4:	43da      	mvns	r2, r3
 8011bd6:	4b1e      	ldr	r3, [pc, #120]	; (8011c50 <xTaskPriorityInherit+0x108>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	4013      	ands	r3, r2
 8011bdc:	4a1c      	ldr	r2, [pc, #112]	; (8011c50 <xTaskPriorityInherit+0x108>)
 8011bde:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011be0:	4b19      	ldr	r3, [pc, #100]	; (8011c48 <xTaskPriorityInherit+0x100>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bee:	2201      	movs	r2, #1
 8011bf0:	409a      	lsls	r2, r3
 8011bf2:	4b17      	ldr	r3, [pc, #92]	; (8011c50 <xTaskPriorityInherit+0x108>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	4313      	orrs	r3, r2
 8011bf8:	4a15      	ldr	r2, [pc, #84]	; (8011c50 <xTaskPriorityInherit+0x108>)
 8011bfa:	6013      	str	r3, [r2, #0]
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c00:	4613      	mov	r3, r2
 8011c02:	009b      	lsls	r3, r3, #2
 8011c04:	4413      	add	r3, r2
 8011c06:	009b      	lsls	r3, r3, #2
 8011c08:	4a10      	ldr	r2, [pc, #64]	; (8011c4c <xTaskPriorityInherit+0x104>)
 8011c0a:	441a      	add	r2, r3
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	3304      	adds	r3, #4
 8011c10:	4619      	mov	r1, r3
 8011c12:	4610      	mov	r0, r2
 8011c14:	f7fe fae7 	bl	80101e6 <vListInsertEnd>
 8011c18:	e004      	b.n	8011c24 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011c1a:	4b0b      	ldr	r3, [pc, #44]	; (8011c48 <xTaskPriorityInherit+0x100>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011c24:	2301      	movs	r3, #1
 8011c26:	60fb      	str	r3, [r7, #12]
 8011c28:	e008      	b.n	8011c3c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c2e:	4b06      	ldr	r3, [pc, #24]	; (8011c48 <xTaskPriorityInherit+0x100>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d201      	bcs.n	8011c3c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011c38:	2301      	movs	r3, #1
 8011c3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
	}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3710      	adds	r7, #16
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	20000220 	.word	0x20000220
 8011c4c:	20000224 	.word	0x20000224
 8011c50:	200002fc 	.word	0x200002fc

08011c54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b086      	sub	sp, #24
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011c60:	2300      	movs	r3, #0
 8011c62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d06c      	beq.n	8011d44 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011c6a:	4b39      	ldr	r3, [pc, #228]	; (8011d50 <xTaskPriorityDisinherit+0xfc>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	693a      	ldr	r2, [r7, #16]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d009      	beq.n	8011c88 <xTaskPriorityDisinherit+0x34>
 8011c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c78:	f383 8811 	msr	BASEPRI, r3
 8011c7c:	f3bf 8f6f 	isb	sy
 8011c80:	f3bf 8f4f 	dsb	sy
 8011c84:	60fb      	str	r3, [r7, #12]
 8011c86:	e7fe      	b.n	8011c86 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d109      	bne.n	8011ca4 <xTaskPriorityDisinherit+0x50>
 8011c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c94:	f383 8811 	msr	BASEPRI, r3
 8011c98:	f3bf 8f6f 	isb	sy
 8011c9c:	f3bf 8f4f 	dsb	sy
 8011ca0:	60bb      	str	r3, [r7, #8]
 8011ca2:	e7fe      	b.n	8011ca2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ca8:	1e5a      	subs	r2, r3, #1
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	63da      	str	r2, [r3, #60]	; 0x3c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d044      	beq.n	8011d44 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d140      	bne.n	8011d44 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	3304      	adds	r3, #4
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7fe faea 	bl	80102a0 <uxListRemove>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d115      	bne.n	8011cfe <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cd6:	491f      	ldr	r1, [pc, #124]	; (8011d54 <xTaskPriorityDisinherit+0x100>)
 8011cd8:	4613      	mov	r3, r2
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	4413      	add	r3, r2
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	440b      	add	r3, r1
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d10a      	bne.n	8011cfe <xTaskPriorityDisinherit+0xaa>
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cec:	2201      	movs	r2, #1
 8011cee:	fa02 f303 	lsl.w	r3, r2, r3
 8011cf2:	43da      	mvns	r2, r3
 8011cf4:	4b18      	ldr	r3, [pc, #96]	; (8011d58 <xTaskPriorityDisinherit+0x104>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	4013      	ands	r3, r2
 8011cfa:	4a17      	ldr	r2, [pc, #92]	; (8011d58 <xTaskPriorityDisinherit+0x104>)
 8011cfc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d0a:	f1c3 0207 	rsb	r2, r3, #7
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d16:	2201      	movs	r2, #1
 8011d18:	409a      	lsls	r2, r3
 8011d1a:	4b0f      	ldr	r3, [pc, #60]	; (8011d58 <xTaskPriorityDisinherit+0x104>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	4313      	orrs	r3, r2
 8011d20:	4a0d      	ldr	r2, [pc, #52]	; (8011d58 <xTaskPriorityDisinherit+0x104>)
 8011d22:	6013      	str	r3, [r2, #0]
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d28:	4613      	mov	r3, r2
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	4413      	add	r3, r2
 8011d2e:	009b      	lsls	r3, r3, #2
 8011d30:	4a08      	ldr	r2, [pc, #32]	; (8011d54 <xTaskPriorityDisinherit+0x100>)
 8011d32:	441a      	add	r2, r3
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	3304      	adds	r3, #4
 8011d38:	4619      	mov	r1, r3
 8011d3a:	4610      	mov	r0, r2
 8011d3c:	f7fe fa53 	bl	80101e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011d40:	2301      	movs	r3, #1
 8011d42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011d44:	697b      	ldr	r3, [r7, #20]
	}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3718      	adds	r7, #24
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	20000220 	.word	0x20000220
 8011d54:	20000224 	.word	0x20000224
 8011d58:	200002fc 	.word	0x200002fc

08011d5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b088      	sub	sp, #32
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	f000 8086 	beq.w	8011e82 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011d76:	69bb      	ldr	r3, [r7, #24]
 8011d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d109      	bne.n	8011d92 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8011d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d82:	f383 8811 	msr	BASEPRI, r3
 8011d86:	f3bf 8f6f 	isb	sy
 8011d8a:	f3bf 8f4f 	dsb	sy
 8011d8e:	60fb      	str	r3, [r7, #12]
 8011d90:	e7fe      	b.n	8011d90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d96:	683a      	ldr	r2, [r7, #0]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d902      	bls.n	8011da2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	61fb      	str	r3, [r7, #28]
 8011da0:	e002      	b.n	8011da8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011da2:	69bb      	ldr	r3, [r7, #24]
 8011da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011da6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011da8:	69bb      	ldr	r3, [r7, #24]
 8011daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dac:	69fa      	ldr	r2, [r7, #28]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d067      	beq.n	8011e82 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011db2:	69bb      	ldr	r3, [r7, #24]
 8011db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011db6:	697a      	ldr	r2, [r7, #20]
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d162      	bne.n	8011e82 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011dbc:	4b33      	ldr	r3, [pc, #204]	; (8011e8c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	69ba      	ldr	r2, [r7, #24]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d109      	bne.n	8011dda <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8011dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dca:	f383 8811 	msr	BASEPRI, r3
 8011dce:	f3bf 8f6f 	isb	sy
 8011dd2:	f3bf 8f4f 	dsb	sy
 8011dd6:	60bb      	str	r3, [r7, #8]
 8011dd8:	e7fe      	b.n	8011dd8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011dda:	69bb      	ldr	r3, [r7, #24]
 8011ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dde:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011de0:	69bb      	ldr	r3, [r7, #24]
 8011de2:	69fa      	ldr	r2, [r7, #28]
 8011de4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011de6:	69bb      	ldr	r3, [r7, #24]
 8011de8:	699b      	ldr	r3, [r3, #24]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	db04      	blt.n	8011df8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011dee:	69fb      	ldr	r3, [r7, #28]
 8011df0:	f1c3 0207 	rsb	r2, r3, #7
 8011df4:	69bb      	ldr	r3, [r7, #24]
 8011df6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011df8:	69bb      	ldr	r3, [r7, #24]
 8011dfa:	6959      	ldr	r1, [r3, #20]
 8011dfc:	693a      	ldr	r2, [r7, #16]
 8011dfe:	4613      	mov	r3, r2
 8011e00:	009b      	lsls	r3, r3, #2
 8011e02:	4413      	add	r3, r2
 8011e04:	009b      	lsls	r3, r3, #2
 8011e06:	4a22      	ldr	r2, [pc, #136]	; (8011e90 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011e08:	4413      	add	r3, r2
 8011e0a:	4299      	cmp	r1, r3
 8011e0c:	d101      	bne.n	8011e12 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8011e0e:	2301      	movs	r3, #1
 8011e10:	e000      	b.n	8011e14 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8011e12:	2300      	movs	r3, #0
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d034      	beq.n	8011e82 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e18:	69bb      	ldr	r3, [r7, #24]
 8011e1a:	3304      	adds	r3, #4
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fe fa3f 	bl	80102a0 <uxListRemove>
 8011e22:	4603      	mov	r3, r0
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d115      	bne.n	8011e54 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011e28:	69bb      	ldr	r3, [r7, #24]
 8011e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e2c:	4918      	ldr	r1, [pc, #96]	; (8011e90 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011e2e:	4613      	mov	r3, r2
 8011e30:	009b      	lsls	r3, r3, #2
 8011e32:	4413      	add	r3, r2
 8011e34:	009b      	lsls	r3, r3, #2
 8011e36:	440b      	add	r3, r1
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d10a      	bne.n	8011e54 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8011e3e:	69bb      	ldr	r3, [r7, #24]
 8011e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e42:	2201      	movs	r2, #1
 8011e44:	fa02 f303 	lsl.w	r3, r2, r3
 8011e48:	43da      	mvns	r2, r3
 8011e4a:	4b12      	ldr	r3, [pc, #72]	; (8011e94 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	4013      	ands	r3, r2
 8011e50:	4a10      	ldr	r2, [pc, #64]	; (8011e94 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011e52:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011e54:	69bb      	ldr	r3, [r7, #24]
 8011e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e58:	2201      	movs	r2, #1
 8011e5a:	409a      	lsls	r2, r3
 8011e5c:	4b0d      	ldr	r3, [pc, #52]	; (8011e94 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	4313      	orrs	r3, r2
 8011e62:	4a0c      	ldr	r2, [pc, #48]	; (8011e94 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011e64:	6013      	str	r3, [r2, #0]
 8011e66:	69bb      	ldr	r3, [r7, #24]
 8011e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	4413      	add	r3, r2
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	4a07      	ldr	r2, [pc, #28]	; (8011e90 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011e74:	441a      	add	r2, r3
 8011e76:	69bb      	ldr	r3, [r7, #24]
 8011e78:	3304      	adds	r3, #4
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	4610      	mov	r0, r2
 8011e7e:	f7fe f9b2 	bl	80101e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011e82:	bf00      	nop
 8011e84:	3720      	adds	r7, #32
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	20000220 	.word	0x20000220
 8011e90:	20000224 	.word	0x20000224
 8011e94:	200002fc 	.word	0x200002fc

08011e98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011e98:	b480      	push	{r7}
 8011e9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011e9c:	4b07      	ldr	r3, [pc, #28]	; (8011ebc <pvTaskIncrementMutexHeldCount+0x24>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d004      	beq.n	8011eae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011ea4:	4b05      	ldr	r3, [pc, #20]	; (8011ebc <pvTaskIncrementMutexHeldCount+0x24>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011eaa:	3201      	adds	r2, #1
 8011eac:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		return pxCurrentTCB;
 8011eae:	4b03      	ldr	r3, [pc, #12]	; (8011ebc <pvTaskIncrementMutexHeldCount+0x24>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
	}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr
 8011ebc:	20000220 	.word	0x20000220

08011ec0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011eca:	4b21      	ldr	r3, [pc, #132]	; (8011f50 <prvAddCurrentTaskToDelayedList+0x90>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ed0:	4b20      	ldr	r3, [pc, #128]	; (8011f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	3304      	adds	r3, #4
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7fe f9e2 	bl	80102a0 <uxListRemove>
 8011edc:	4603      	mov	r3, r0
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d10b      	bne.n	8011efa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8011ee2:	4b1c      	ldr	r3, [pc, #112]	; (8011f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ee8:	2201      	movs	r2, #1
 8011eea:	fa02 f303 	lsl.w	r3, r2, r3
 8011eee:	43da      	mvns	r2, r3
 8011ef0:	4b19      	ldr	r3, [pc, #100]	; (8011f58 <prvAddCurrentTaskToDelayedList+0x98>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	4013      	ands	r3, r2
 8011ef6:	4a18      	ldr	r2, [pc, #96]	; (8011f58 <prvAddCurrentTaskToDelayedList+0x98>)
 8011ef8:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8011efa:	68fa      	ldr	r2, [r7, #12]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	4413      	add	r3, r2
 8011f00:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011f02:	4b14      	ldr	r3, [pc, #80]	; (8011f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	68ba      	ldr	r2, [r7, #8]
 8011f08:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8011f0a:	68ba      	ldr	r2, [r7, #8]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d209      	bcs.n	8011f26 <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f12:	4b12      	ldr	r3, [pc, #72]	; (8011f5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8011f14:	681a      	ldr	r2, [r3, #0]
 8011f16:	4b0f      	ldr	r3, [pc, #60]	; (8011f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	3304      	adds	r3, #4
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	4610      	mov	r0, r2
 8011f20:	f7fe f985 	bl	801022e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011f24:	e010      	b.n	8011f48 <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f26:	4b0e      	ldr	r3, [pc, #56]	; (8011f60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011f28:	681a      	ldr	r2, [r3, #0]
 8011f2a:	4b0a      	ldr	r3, [pc, #40]	; (8011f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	3304      	adds	r3, #4
 8011f30:	4619      	mov	r1, r3
 8011f32:	4610      	mov	r0, r2
 8011f34:	f7fe f97b 	bl	801022e <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8011f38:	4b0a      	ldr	r3, [pc, #40]	; (8011f64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	68ba      	ldr	r2, [r7, #8]
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d202      	bcs.n	8011f48 <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 8011f42:	4a08      	ldr	r2, [pc, #32]	; (8011f64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	6013      	str	r3, [r2, #0]
}
 8011f48:	bf00      	nop
 8011f4a:	3710      	adds	r7, #16
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	200002f8 	.word	0x200002f8
 8011f54:	20000220 	.word	0x20000220
 8011f58:	200002fc 	.word	0x200002fc
 8011f5c:	200002dc 	.word	0x200002dc
 8011f60:	200002d8 	.word	0x200002d8
 8011f64:	20000314 	.word	0x20000314

08011f68 <__errno>:
 8011f68:	4b01      	ldr	r3, [pc, #4]	; (8011f70 <__errno+0x8>)
 8011f6a:	6818      	ldr	r0, [r3, #0]
 8011f6c:	4770      	bx	lr
 8011f6e:	bf00      	nop
 8011f70:	20000024 	.word	0x20000024

08011f74 <__libc_init_array>:
 8011f74:	b570      	push	{r4, r5, r6, lr}
 8011f76:	4e0d      	ldr	r6, [pc, #52]	; (8011fac <__libc_init_array+0x38>)
 8011f78:	4c0d      	ldr	r4, [pc, #52]	; (8011fb0 <__libc_init_array+0x3c>)
 8011f7a:	1ba4      	subs	r4, r4, r6
 8011f7c:	10a4      	asrs	r4, r4, #2
 8011f7e:	2500      	movs	r5, #0
 8011f80:	42a5      	cmp	r5, r4
 8011f82:	d109      	bne.n	8011f98 <__libc_init_array+0x24>
 8011f84:	4e0b      	ldr	r6, [pc, #44]	; (8011fb4 <__libc_init_array+0x40>)
 8011f86:	4c0c      	ldr	r4, [pc, #48]	; (8011fb8 <__libc_init_array+0x44>)
 8011f88:	f002 ff28 	bl	8014ddc <_init>
 8011f8c:	1ba4      	subs	r4, r4, r6
 8011f8e:	10a4      	asrs	r4, r4, #2
 8011f90:	2500      	movs	r5, #0
 8011f92:	42a5      	cmp	r5, r4
 8011f94:	d105      	bne.n	8011fa2 <__libc_init_array+0x2e>
 8011f96:	bd70      	pop	{r4, r5, r6, pc}
 8011f98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011f9c:	4798      	blx	r3
 8011f9e:	3501      	adds	r5, #1
 8011fa0:	e7ee      	b.n	8011f80 <__libc_init_array+0xc>
 8011fa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011fa6:	4798      	blx	r3
 8011fa8:	3501      	adds	r5, #1
 8011faa:	e7f2      	b.n	8011f92 <__libc_init_array+0x1e>
 8011fac:	08015b98 	.word	0x08015b98
 8011fb0:	08015b98 	.word	0x08015b98
 8011fb4:	08015b98 	.word	0x08015b98
 8011fb8:	08015b9c 	.word	0x08015b9c

08011fbc <__locale_ctype_ptr_l>:
 8011fbc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011fc0:	4770      	bx	lr
	...

08011fc4 <__locale_ctype_ptr>:
 8011fc4:	4b04      	ldr	r3, [pc, #16]	; (8011fd8 <__locale_ctype_ptr+0x14>)
 8011fc6:	4a05      	ldr	r2, [pc, #20]	; (8011fdc <__locale_ctype_ptr+0x18>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	6a1b      	ldr	r3, [r3, #32]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	bf08      	it	eq
 8011fd0:	4613      	moveq	r3, r2
 8011fd2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8011fd6:	4770      	bx	lr
 8011fd8:	20000024 	.word	0x20000024
 8011fdc:	20000088 	.word	0x20000088

08011fe0 <__ascii_mbtowc>:
 8011fe0:	b082      	sub	sp, #8
 8011fe2:	b901      	cbnz	r1, 8011fe6 <__ascii_mbtowc+0x6>
 8011fe4:	a901      	add	r1, sp, #4
 8011fe6:	b142      	cbz	r2, 8011ffa <__ascii_mbtowc+0x1a>
 8011fe8:	b14b      	cbz	r3, 8011ffe <__ascii_mbtowc+0x1e>
 8011fea:	7813      	ldrb	r3, [r2, #0]
 8011fec:	600b      	str	r3, [r1, #0]
 8011fee:	7812      	ldrb	r2, [r2, #0]
 8011ff0:	1c10      	adds	r0, r2, #0
 8011ff2:	bf18      	it	ne
 8011ff4:	2001      	movne	r0, #1
 8011ff6:	b002      	add	sp, #8
 8011ff8:	4770      	bx	lr
 8011ffa:	4610      	mov	r0, r2
 8011ffc:	e7fb      	b.n	8011ff6 <__ascii_mbtowc+0x16>
 8011ffe:	f06f 0001 	mvn.w	r0, #1
 8012002:	e7f8      	b.n	8011ff6 <__ascii_mbtowc+0x16>

08012004 <memcpy>:
 8012004:	b510      	push	{r4, lr}
 8012006:	1e43      	subs	r3, r0, #1
 8012008:	440a      	add	r2, r1
 801200a:	4291      	cmp	r1, r2
 801200c:	d100      	bne.n	8012010 <memcpy+0xc>
 801200e:	bd10      	pop	{r4, pc}
 8012010:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012014:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012018:	e7f7      	b.n	801200a <memcpy+0x6>

0801201a <memmove>:
 801201a:	4288      	cmp	r0, r1
 801201c:	b510      	push	{r4, lr}
 801201e:	eb01 0302 	add.w	r3, r1, r2
 8012022:	d807      	bhi.n	8012034 <memmove+0x1a>
 8012024:	1e42      	subs	r2, r0, #1
 8012026:	4299      	cmp	r1, r3
 8012028:	d00a      	beq.n	8012040 <memmove+0x26>
 801202a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801202e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012032:	e7f8      	b.n	8012026 <memmove+0xc>
 8012034:	4283      	cmp	r3, r0
 8012036:	d9f5      	bls.n	8012024 <memmove+0xa>
 8012038:	1881      	adds	r1, r0, r2
 801203a:	1ad2      	subs	r2, r2, r3
 801203c:	42d3      	cmn	r3, r2
 801203e:	d100      	bne.n	8012042 <memmove+0x28>
 8012040:	bd10      	pop	{r4, pc}
 8012042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012046:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801204a:	e7f7      	b.n	801203c <memmove+0x22>

0801204c <memset>:
 801204c:	4402      	add	r2, r0
 801204e:	4603      	mov	r3, r0
 8012050:	4293      	cmp	r3, r2
 8012052:	d100      	bne.n	8012056 <memset+0xa>
 8012054:	4770      	bx	lr
 8012056:	f803 1b01 	strb.w	r1, [r3], #1
 801205a:	e7f9      	b.n	8012050 <memset+0x4>

0801205c <siprintf>:
 801205c:	b40e      	push	{r1, r2, r3}
 801205e:	b500      	push	{lr}
 8012060:	b09c      	sub	sp, #112	; 0x70
 8012062:	ab1d      	add	r3, sp, #116	; 0x74
 8012064:	9002      	str	r0, [sp, #8]
 8012066:	9006      	str	r0, [sp, #24]
 8012068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801206c:	4809      	ldr	r0, [pc, #36]	; (8012094 <siprintf+0x38>)
 801206e:	9107      	str	r1, [sp, #28]
 8012070:	9104      	str	r1, [sp, #16]
 8012072:	4909      	ldr	r1, [pc, #36]	; (8012098 <siprintf+0x3c>)
 8012074:	f853 2b04 	ldr.w	r2, [r3], #4
 8012078:	9105      	str	r1, [sp, #20]
 801207a:	6800      	ldr	r0, [r0, #0]
 801207c:	9301      	str	r3, [sp, #4]
 801207e:	a902      	add	r1, sp, #8
 8012080:	f000 fbc4 	bl	801280c <_svfiprintf_r>
 8012084:	9b02      	ldr	r3, [sp, #8]
 8012086:	2200      	movs	r2, #0
 8012088:	701a      	strb	r2, [r3, #0]
 801208a:	b01c      	add	sp, #112	; 0x70
 801208c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012090:	b003      	add	sp, #12
 8012092:	4770      	bx	lr
 8012094:	20000024 	.word	0x20000024
 8012098:	ffff0208 	.word	0xffff0208

0801209c <strchr>:
 801209c:	b2c9      	uxtb	r1, r1
 801209e:	4603      	mov	r3, r0
 80120a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120a4:	b11a      	cbz	r2, 80120ae <strchr+0x12>
 80120a6:	428a      	cmp	r2, r1
 80120a8:	d1f9      	bne.n	801209e <strchr+0x2>
 80120aa:	4618      	mov	r0, r3
 80120ac:	4770      	bx	lr
 80120ae:	2900      	cmp	r1, #0
 80120b0:	bf18      	it	ne
 80120b2:	2300      	movne	r3, #0
 80120b4:	e7f9      	b.n	80120aa <strchr+0xe>

080120b6 <strncasecmp>:
 80120b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ba:	4606      	mov	r6, r0
 80120bc:	460f      	mov	r7, r1
 80120be:	eb00 0802 	add.w	r8, r0, r2
 80120c2:	45b0      	cmp	r8, r6
 80120c4:	d019      	beq.n	80120fa <strncasecmp+0x44>
 80120c6:	f816 4b01 	ldrb.w	r4, [r6], #1
 80120ca:	f7ff ff7b 	bl	8011fc4 <__locale_ctype_ptr>
 80120ce:	4420      	add	r0, r4
 80120d0:	f817 5b01 	ldrb.w	r5, [r7], #1
 80120d4:	7843      	ldrb	r3, [r0, #1]
 80120d6:	f003 0303 	and.w	r3, r3, #3
 80120da:	2b01      	cmp	r3, #1
 80120dc:	bf08      	it	eq
 80120de:	3420      	addeq	r4, #32
 80120e0:	f7ff ff70 	bl	8011fc4 <__locale_ctype_ptr>
 80120e4:	4428      	add	r0, r5
 80120e6:	7842      	ldrb	r2, [r0, #1]
 80120e8:	f002 0203 	and.w	r2, r2, #3
 80120ec:	2a01      	cmp	r2, #1
 80120ee:	bf08      	it	eq
 80120f0:	3520      	addeq	r5, #32
 80120f2:	1b60      	subs	r0, r4, r5
 80120f4:	d102      	bne.n	80120fc <strncasecmp+0x46>
 80120f6:	2d00      	cmp	r5, #0
 80120f8:	d1e3      	bne.n	80120c2 <strncasecmp+0xc>
 80120fa:	2000      	movs	r0, #0
 80120fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012100 <strnlen>:
 8012100:	b510      	push	{r4, lr}
 8012102:	4603      	mov	r3, r0
 8012104:	4401      	add	r1, r0
 8012106:	428b      	cmp	r3, r1
 8012108:	d002      	beq.n	8012110 <strnlen+0x10>
 801210a:	781a      	ldrb	r2, [r3, #0]
 801210c:	1c5c      	adds	r4, r3, #1
 801210e:	b90a      	cbnz	r2, 8012114 <strnlen+0x14>
 8012110:	1a18      	subs	r0, r3, r0
 8012112:	bd10      	pop	{r4, pc}
 8012114:	4623      	mov	r3, r4
 8012116:	e7f6      	b.n	8012106 <strnlen+0x6>

08012118 <_strtol_l.isra.0>:
 8012118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801211c:	4680      	mov	r8, r0
 801211e:	4689      	mov	r9, r1
 8012120:	4692      	mov	sl, r2
 8012122:	461e      	mov	r6, r3
 8012124:	460f      	mov	r7, r1
 8012126:	463d      	mov	r5, r7
 8012128:	9808      	ldr	r0, [sp, #32]
 801212a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801212e:	f7ff ff45 	bl	8011fbc <__locale_ctype_ptr_l>
 8012132:	4420      	add	r0, r4
 8012134:	7843      	ldrb	r3, [r0, #1]
 8012136:	f013 0308 	ands.w	r3, r3, #8
 801213a:	d132      	bne.n	80121a2 <_strtol_l.isra.0+0x8a>
 801213c:	2c2d      	cmp	r4, #45	; 0x2d
 801213e:	d132      	bne.n	80121a6 <_strtol_l.isra.0+0x8e>
 8012140:	787c      	ldrb	r4, [r7, #1]
 8012142:	1cbd      	adds	r5, r7, #2
 8012144:	2201      	movs	r2, #1
 8012146:	2e00      	cmp	r6, #0
 8012148:	d05d      	beq.n	8012206 <_strtol_l.isra.0+0xee>
 801214a:	2e10      	cmp	r6, #16
 801214c:	d109      	bne.n	8012162 <_strtol_l.isra.0+0x4a>
 801214e:	2c30      	cmp	r4, #48	; 0x30
 8012150:	d107      	bne.n	8012162 <_strtol_l.isra.0+0x4a>
 8012152:	782b      	ldrb	r3, [r5, #0]
 8012154:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012158:	2b58      	cmp	r3, #88	; 0x58
 801215a:	d14f      	bne.n	80121fc <_strtol_l.isra.0+0xe4>
 801215c:	786c      	ldrb	r4, [r5, #1]
 801215e:	2610      	movs	r6, #16
 8012160:	3502      	adds	r5, #2
 8012162:	2a00      	cmp	r2, #0
 8012164:	bf14      	ite	ne
 8012166:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801216a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801216e:	2700      	movs	r7, #0
 8012170:	fbb1 fcf6 	udiv	ip, r1, r6
 8012174:	4638      	mov	r0, r7
 8012176:	fb06 1e1c 	mls	lr, r6, ip, r1
 801217a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801217e:	2b09      	cmp	r3, #9
 8012180:	d817      	bhi.n	80121b2 <_strtol_l.isra.0+0x9a>
 8012182:	461c      	mov	r4, r3
 8012184:	42a6      	cmp	r6, r4
 8012186:	dd23      	ble.n	80121d0 <_strtol_l.isra.0+0xb8>
 8012188:	1c7b      	adds	r3, r7, #1
 801218a:	d007      	beq.n	801219c <_strtol_l.isra.0+0x84>
 801218c:	4584      	cmp	ip, r0
 801218e:	d31c      	bcc.n	80121ca <_strtol_l.isra.0+0xb2>
 8012190:	d101      	bne.n	8012196 <_strtol_l.isra.0+0x7e>
 8012192:	45a6      	cmp	lr, r4
 8012194:	db19      	blt.n	80121ca <_strtol_l.isra.0+0xb2>
 8012196:	fb00 4006 	mla	r0, r0, r6, r4
 801219a:	2701      	movs	r7, #1
 801219c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80121a0:	e7eb      	b.n	801217a <_strtol_l.isra.0+0x62>
 80121a2:	462f      	mov	r7, r5
 80121a4:	e7bf      	b.n	8012126 <_strtol_l.isra.0+0xe>
 80121a6:	2c2b      	cmp	r4, #43	; 0x2b
 80121a8:	bf04      	itt	eq
 80121aa:	1cbd      	addeq	r5, r7, #2
 80121ac:	787c      	ldrbeq	r4, [r7, #1]
 80121ae:	461a      	mov	r2, r3
 80121b0:	e7c9      	b.n	8012146 <_strtol_l.isra.0+0x2e>
 80121b2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80121b6:	2b19      	cmp	r3, #25
 80121b8:	d801      	bhi.n	80121be <_strtol_l.isra.0+0xa6>
 80121ba:	3c37      	subs	r4, #55	; 0x37
 80121bc:	e7e2      	b.n	8012184 <_strtol_l.isra.0+0x6c>
 80121be:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80121c2:	2b19      	cmp	r3, #25
 80121c4:	d804      	bhi.n	80121d0 <_strtol_l.isra.0+0xb8>
 80121c6:	3c57      	subs	r4, #87	; 0x57
 80121c8:	e7dc      	b.n	8012184 <_strtol_l.isra.0+0x6c>
 80121ca:	f04f 37ff 	mov.w	r7, #4294967295
 80121ce:	e7e5      	b.n	801219c <_strtol_l.isra.0+0x84>
 80121d0:	1c7b      	adds	r3, r7, #1
 80121d2:	d108      	bne.n	80121e6 <_strtol_l.isra.0+0xce>
 80121d4:	2322      	movs	r3, #34	; 0x22
 80121d6:	f8c8 3000 	str.w	r3, [r8]
 80121da:	4608      	mov	r0, r1
 80121dc:	f1ba 0f00 	cmp.w	sl, #0
 80121e0:	d107      	bne.n	80121f2 <_strtol_l.isra.0+0xda>
 80121e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121e6:	b102      	cbz	r2, 80121ea <_strtol_l.isra.0+0xd2>
 80121e8:	4240      	negs	r0, r0
 80121ea:	f1ba 0f00 	cmp.w	sl, #0
 80121ee:	d0f8      	beq.n	80121e2 <_strtol_l.isra.0+0xca>
 80121f0:	b10f      	cbz	r7, 80121f6 <_strtol_l.isra.0+0xde>
 80121f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80121f6:	f8ca 9000 	str.w	r9, [sl]
 80121fa:	e7f2      	b.n	80121e2 <_strtol_l.isra.0+0xca>
 80121fc:	2430      	movs	r4, #48	; 0x30
 80121fe:	2e00      	cmp	r6, #0
 8012200:	d1af      	bne.n	8012162 <_strtol_l.isra.0+0x4a>
 8012202:	2608      	movs	r6, #8
 8012204:	e7ad      	b.n	8012162 <_strtol_l.isra.0+0x4a>
 8012206:	2c30      	cmp	r4, #48	; 0x30
 8012208:	d0a3      	beq.n	8012152 <_strtol_l.isra.0+0x3a>
 801220a:	260a      	movs	r6, #10
 801220c:	e7a9      	b.n	8012162 <_strtol_l.isra.0+0x4a>
	...

08012210 <strtol>:
 8012210:	4b08      	ldr	r3, [pc, #32]	; (8012234 <strtol+0x24>)
 8012212:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012214:	681c      	ldr	r4, [r3, #0]
 8012216:	4d08      	ldr	r5, [pc, #32]	; (8012238 <strtol+0x28>)
 8012218:	6a23      	ldr	r3, [r4, #32]
 801221a:	2b00      	cmp	r3, #0
 801221c:	bf08      	it	eq
 801221e:	462b      	moveq	r3, r5
 8012220:	9300      	str	r3, [sp, #0]
 8012222:	4613      	mov	r3, r2
 8012224:	460a      	mov	r2, r1
 8012226:	4601      	mov	r1, r0
 8012228:	4620      	mov	r0, r4
 801222a:	f7ff ff75 	bl	8012118 <_strtol_l.isra.0>
 801222e:	b003      	add	sp, #12
 8012230:	bd30      	pop	{r4, r5, pc}
 8012232:	bf00      	nop
 8012234:	20000024 	.word	0x20000024
 8012238:	20000088 	.word	0x20000088

0801223c <_strtoll_l.isra.0>:
 801223c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012240:	b089      	sub	sp, #36	; 0x24
 8012242:	468a      	mov	sl, r1
 8012244:	9007      	str	r0, [sp, #28]
 8012246:	4693      	mov	fp, r2
 8012248:	461f      	mov	r7, r3
 801224a:	4688      	mov	r8, r1
 801224c:	4645      	mov	r5, r8
 801224e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012254:	f7ff feb2 	bl	8011fbc <__locale_ctype_ptr_l>
 8012258:	4420      	add	r0, r4
 801225a:	7846      	ldrb	r6, [r0, #1]
 801225c:	f016 0608 	ands.w	r6, r6, #8
 8012260:	d155      	bne.n	801230e <_strtoll_l.isra.0+0xd2>
 8012262:	2c2d      	cmp	r4, #45	; 0x2d
 8012264:	d155      	bne.n	8012312 <_strtoll_l.isra.0+0xd6>
 8012266:	f898 4001 	ldrb.w	r4, [r8, #1]
 801226a:	f108 0502 	add.w	r5, r8, #2
 801226e:	2601      	movs	r6, #1
 8012270:	2f00      	cmp	r7, #0
 8012272:	f000 8091 	beq.w	8012398 <_strtoll_l.isra.0+0x15c>
 8012276:	2f10      	cmp	r7, #16
 8012278:	d10a      	bne.n	8012290 <_strtoll_l.isra.0+0x54>
 801227a:	2c30      	cmp	r4, #48	; 0x30
 801227c:	d108      	bne.n	8012290 <_strtoll_l.isra.0+0x54>
 801227e:	782b      	ldrb	r3, [r5, #0]
 8012280:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012284:	2b58      	cmp	r3, #88	; 0x58
 8012286:	f040 8081 	bne.w	801238c <_strtoll_l.isra.0+0x150>
 801228a:	786c      	ldrb	r4, [r5, #1]
 801228c:	2710      	movs	r7, #16
 801228e:	3502      	adds	r5, #2
 8012290:	2e00      	cmp	r6, #0
 8012292:	d145      	bne.n	8012320 <_strtoll_l.isra.0+0xe4>
 8012294:	f04f 39ff 	mov.w	r9, #4294967295
 8012298:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 801229c:	463a      	mov	r2, r7
 801229e:	17fb      	asrs	r3, r7, #31
 80122a0:	4648      	mov	r0, r9
 80122a2:	4641      	mov	r1, r8
 80122a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80122a8:	f7ee fd06 	bl	8000cb8 <__aeabi_uldivmod>
 80122ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80122b0:	4696      	mov	lr, r2
 80122b2:	2100      	movs	r1, #0
 80122b4:	2200      	movs	r2, #0
 80122b6:	e9cd 1200 	strd	r1, r2, [sp]
 80122ba:	2300      	movs	r3, #0
 80122bc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80122c0:	f1bc 0f09 	cmp.w	ip, #9
 80122c4:	d831      	bhi.n	801232a <_strtoll_l.isra.0+0xee>
 80122c6:	4664      	mov	r4, ip
 80122c8:	42a7      	cmp	r7, r4
 80122ca:	dd3f      	ble.n	801234c <_strtoll_l.isra.0+0x110>
 80122cc:	1c59      	adds	r1, r3, #1
 80122ce:	d01b      	beq.n	8012308 <_strtoll_l.isra.0+0xcc>
 80122d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80122d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122d8:	4299      	cmp	r1, r3
 80122da:	bf08      	it	eq
 80122dc:	4290      	cmpeq	r0, r2
 80122de:	d332      	bcc.n	8012346 <_strtoll_l.isra.0+0x10a>
 80122e0:	d101      	bne.n	80122e6 <_strtoll_l.isra.0+0xaa>
 80122e2:	45a6      	cmp	lr, r4
 80122e4:	db2f      	blt.n	8012346 <_strtoll_l.isra.0+0x10a>
 80122e6:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 80122ea:	9800      	ldr	r0, [sp, #0]
 80122ec:	434b      	muls	r3, r1
 80122ee:	9903      	ldr	r1, [sp, #12]
 80122f0:	fb00 3301 	mla	r3, r0, r1, r3
 80122f4:	9902      	ldr	r1, [sp, #8]
 80122f6:	fba1 0100 	umull	r0, r1, r1, r0
 80122fa:	1902      	adds	r2, r0, r4
 80122fc:	4419      	add	r1, r3
 80122fe:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
 8012302:	e9cd 2300 	strd	r2, r3, [sp]
 8012306:	2301      	movs	r3, #1
 8012308:	f815 4b01 	ldrb.w	r4, [r5], #1
 801230c:	e7d6      	b.n	80122bc <_strtoll_l.isra.0+0x80>
 801230e:	46a8      	mov	r8, r5
 8012310:	e79c      	b.n	801224c <_strtoll_l.isra.0+0x10>
 8012312:	2c2b      	cmp	r4, #43	; 0x2b
 8012314:	bf04      	itt	eq
 8012316:	f108 0502 	addeq.w	r5, r8, #2
 801231a:	f898 4001 	ldrbeq.w	r4, [r8, #1]
 801231e:	e7a7      	b.n	8012270 <_strtoll_l.isra.0+0x34>
 8012320:	f04f 0900 	mov.w	r9, #0
 8012324:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8012328:	e7b8      	b.n	801229c <_strtoll_l.isra.0+0x60>
 801232a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801232e:	f1bc 0f19 	cmp.w	ip, #25
 8012332:	d801      	bhi.n	8012338 <_strtoll_l.isra.0+0xfc>
 8012334:	3c37      	subs	r4, #55	; 0x37
 8012336:	e7c7      	b.n	80122c8 <_strtoll_l.isra.0+0x8c>
 8012338:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801233c:	f1bc 0f19 	cmp.w	ip, #25
 8012340:	d804      	bhi.n	801234c <_strtoll_l.isra.0+0x110>
 8012342:	3c57      	subs	r4, #87	; 0x57
 8012344:	e7c0      	b.n	80122c8 <_strtoll_l.isra.0+0x8c>
 8012346:	f04f 33ff 	mov.w	r3, #4294967295
 801234a:	e7dd      	b.n	8012308 <_strtoll_l.isra.0+0xcc>
 801234c:	1c5a      	adds	r2, r3, #1
 801234e:	d10c      	bne.n	801236a <_strtoll_l.isra.0+0x12e>
 8012350:	9a07      	ldr	r2, [sp, #28]
 8012352:	2322      	movs	r3, #34	; 0x22
 8012354:	6013      	str	r3, [r2, #0]
 8012356:	e9cd 9800 	strd	r9, r8, [sp]
 801235a:	f1bb 0f00 	cmp.w	fp, #0
 801235e:	d110      	bne.n	8012382 <_strtoll_l.isra.0+0x146>
 8012360:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012364:	b009      	add	sp, #36	; 0x24
 8012366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801236a:	b136      	cbz	r6, 801237a <_strtoll_l.isra.0+0x13e>
 801236c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012370:	4249      	negs	r1, r1
 8012372:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 8012376:	e9cd 1200 	strd	r1, r2, [sp]
 801237a:	f1bb 0f00 	cmp.w	fp, #0
 801237e:	d0ef      	beq.n	8012360 <_strtoll_l.isra.0+0x124>
 8012380:	b10b      	cbz	r3, 8012386 <_strtoll_l.isra.0+0x14a>
 8012382:	f105 3aff 	add.w	sl, r5, #4294967295
 8012386:	f8cb a000 	str.w	sl, [fp]
 801238a:	e7e9      	b.n	8012360 <_strtoll_l.isra.0+0x124>
 801238c:	2430      	movs	r4, #48	; 0x30
 801238e:	2f00      	cmp	r7, #0
 8012390:	f47f af7e 	bne.w	8012290 <_strtoll_l.isra.0+0x54>
 8012394:	2708      	movs	r7, #8
 8012396:	e77b      	b.n	8012290 <_strtoll_l.isra.0+0x54>
 8012398:	2c30      	cmp	r4, #48	; 0x30
 801239a:	f43f af70 	beq.w	801227e <_strtoll_l.isra.0+0x42>
 801239e:	270a      	movs	r7, #10
 80123a0:	e776      	b.n	8012290 <_strtoll_l.isra.0+0x54>
	...

080123a4 <strtoll>:
 80123a4:	4b08      	ldr	r3, [pc, #32]	; (80123c8 <strtoll+0x24>)
 80123a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123a8:	681c      	ldr	r4, [r3, #0]
 80123aa:	4d08      	ldr	r5, [pc, #32]	; (80123cc <strtoll+0x28>)
 80123ac:	6a23      	ldr	r3, [r4, #32]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	bf08      	it	eq
 80123b2:	462b      	moveq	r3, r5
 80123b4:	9300      	str	r3, [sp, #0]
 80123b6:	4613      	mov	r3, r2
 80123b8:	460a      	mov	r2, r1
 80123ba:	4601      	mov	r1, r0
 80123bc:	4620      	mov	r0, r4
 80123be:	f7ff ff3d 	bl	801223c <_strtoll_l.isra.0>
 80123c2:	b003      	add	sp, #12
 80123c4:	bd30      	pop	{r4, r5, pc}
 80123c6:	bf00      	nop
 80123c8:	20000024 	.word	0x20000024
 80123cc:	20000088 	.word	0x20000088

080123d0 <_strtoul_l.isra.0>:
 80123d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123d4:	4680      	mov	r8, r0
 80123d6:	4689      	mov	r9, r1
 80123d8:	4692      	mov	sl, r2
 80123da:	461e      	mov	r6, r3
 80123dc:	460f      	mov	r7, r1
 80123de:	463d      	mov	r5, r7
 80123e0:	9808      	ldr	r0, [sp, #32]
 80123e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123e6:	f7ff fde9 	bl	8011fbc <__locale_ctype_ptr_l>
 80123ea:	4420      	add	r0, r4
 80123ec:	7843      	ldrb	r3, [r0, #1]
 80123ee:	f013 0308 	ands.w	r3, r3, #8
 80123f2:	d130      	bne.n	8012456 <_strtoul_l.isra.0+0x86>
 80123f4:	2c2d      	cmp	r4, #45	; 0x2d
 80123f6:	d130      	bne.n	801245a <_strtoul_l.isra.0+0x8a>
 80123f8:	787c      	ldrb	r4, [r7, #1]
 80123fa:	1cbd      	adds	r5, r7, #2
 80123fc:	2101      	movs	r1, #1
 80123fe:	2e00      	cmp	r6, #0
 8012400:	d05c      	beq.n	80124bc <_strtoul_l.isra.0+0xec>
 8012402:	2e10      	cmp	r6, #16
 8012404:	d109      	bne.n	801241a <_strtoul_l.isra.0+0x4a>
 8012406:	2c30      	cmp	r4, #48	; 0x30
 8012408:	d107      	bne.n	801241a <_strtoul_l.isra.0+0x4a>
 801240a:	782b      	ldrb	r3, [r5, #0]
 801240c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012410:	2b58      	cmp	r3, #88	; 0x58
 8012412:	d14e      	bne.n	80124b2 <_strtoul_l.isra.0+0xe2>
 8012414:	786c      	ldrb	r4, [r5, #1]
 8012416:	2610      	movs	r6, #16
 8012418:	3502      	adds	r5, #2
 801241a:	f04f 32ff 	mov.w	r2, #4294967295
 801241e:	2300      	movs	r3, #0
 8012420:	fbb2 f2f6 	udiv	r2, r2, r6
 8012424:	fb06 fc02 	mul.w	ip, r6, r2
 8012428:	ea6f 0c0c 	mvn.w	ip, ip
 801242c:	4618      	mov	r0, r3
 801242e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012432:	2f09      	cmp	r7, #9
 8012434:	d817      	bhi.n	8012466 <_strtoul_l.isra.0+0x96>
 8012436:	463c      	mov	r4, r7
 8012438:	42a6      	cmp	r6, r4
 801243a:	dd23      	ble.n	8012484 <_strtoul_l.isra.0+0xb4>
 801243c:	2b00      	cmp	r3, #0
 801243e:	db1e      	blt.n	801247e <_strtoul_l.isra.0+0xae>
 8012440:	4282      	cmp	r2, r0
 8012442:	d31c      	bcc.n	801247e <_strtoul_l.isra.0+0xae>
 8012444:	d101      	bne.n	801244a <_strtoul_l.isra.0+0x7a>
 8012446:	45a4      	cmp	ip, r4
 8012448:	db19      	blt.n	801247e <_strtoul_l.isra.0+0xae>
 801244a:	fb00 4006 	mla	r0, r0, r6, r4
 801244e:	2301      	movs	r3, #1
 8012450:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012454:	e7eb      	b.n	801242e <_strtoul_l.isra.0+0x5e>
 8012456:	462f      	mov	r7, r5
 8012458:	e7c1      	b.n	80123de <_strtoul_l.isra.0+0xe>
 801245a:	2c2b      	cmp	r4, #43	; 0x2b
 801245c:	bf04      	itt	eq
 801245e:	1cbd      	addeq	r5, r7, #2
 8012460:	787c      	ldrbeq	r4, [r7, #1]
 8012462:	4619      	mov	r1, r3
 8012464:	e7cb      	b.n	80123fe <_strtoul_l.isra.0+0x2e>
 8012466:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801246a:	2f19      	cmp	r7, #25
 801246c:	d801      	bhi.n	8012472 <_strtoul_l.isra.0+0xa2>
 801246e:	3c37      	subs	r4, #55	; 0x37
 8012470:	e7e2      	b.n	8012438 <_strtoul_l.isra.0+0x68>
 8012472:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012476:	2f19      	cmp	r7, #25
 8012478:	d804      	bhi.n	8012484 <_strtoul_l.isra.0+0xb4>
 801247a:	3c57      	subs	r4, #87	; 0x57
 801247c:	e7dc      	b.n	8012438 <_strtoul_l.isra.0+0x68>
 801247e:	f04f 33ff 	mov.w	r3, #4294967295
 8012482:	e7e5      	b.n	8012450 <_strtoul_l.isra.0+0x80>
 8012484:	2b00      	cmp	r3, #0
 8012486:	da09      	bge.n	801249c <_strtoul_l.isra.0+0xcc>
 8012488:	2322      	movs	r3, #34	; 0x22
 801248a:	f8c8 3000 	str.w	r3, [r8]
 801248e:	f04f 30ff 	mov.w	r0, #4294967295
 8012492:	f1ba 0f00 	cmp.w	sl, #0
 8012496:	d107      	bne.n	80124a8 <_strtoul_l.isra.0+0xd8>
 8012498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801249c:	b101      	cbz	r1, 80124a0 <_strtoul_l.isra.0+0xd0>
 801249e:	4240      	negs	r0, r0
 80124a0:	f1ba 0f00 	cmp.w	sl, #0
 80124a4:	d0f8      	beq.n	8012498 <_strtoul_l.isra.0+0xc8>
 80124a6:	b10b      	cbz	r3, 80124ac <_strtoul_l.isra.0+0xdc>
 80124a8:	f105 39ff 	add.w	r9, r5, #4294967295
 80124ac:	f8ca 9000 	str.w	r9, [sl]
 80124b0:	e7f2      	b.n	8012498 <_strtoul_l.isra.0+0xc8>
 80124b2:	2430      	movs	r4, #48	; 0x30
 80124b4:	2e00      	cmp	r6, #0
 80124b6:	d1b0      	bne.n	801241a <_strtoul_l.isra.0+0x4a>
 80124b8:	2608      	movs	r6, #8
 80124ba:	e7ae      	b.n	801241a <_strtoul_l.isra.0+0x4a>
 80124bc:	2c30      	cmp	r4, #48	; 0x30
 80124be:	d0a4      	beq.n	801240a <_strtoul_l.isra.0+0x3a>
 80124c0:	260a      	movs	r6, #10
 80124c2:	e7aa      	b.n	801241a <_strtoul_l.isra.0+0x4a>

080124c4 <strtoul>:
 80124c4:	4b08      	ldr	r3, [pc, #32]	; (80124e8 <strtoul+0x24>)
 80124c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124c8:	681c      	ldr	r4, [r3, #0]
 80124ca:	4d08      	ldr	r5, [pc, #32]	; (80124ec <strtoul+0x28>)
 80124cc:	6a23      	ldr	r3, [r4, #32]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	bf08      	it	eq
 80124d2:	462b      	moveq	r3, r5
 80124d4:	9300      	str	r3, [sp, #0]
 80124d6:	4613      	mov	r3, r2
 80124d8:	460a      	mov	r2, r1
 80124da:	4601      	mov	r1, r0
 80124dc:	4620      	mov	r0, r4
 80124de:	f7ff ff77 	bl	80123d0 <_strtoul_l.isra.0>
 80124e2:	b003      	add	sp, #12
 80124e4:	bd30      	pop	{r4, r5, pc}
 80124e6:	bf00      	nop
 80124e8:	20000024 	.word	0x20000024
 80124ec:	20000088 	.word	0x20000088

080124f0 <_strtoull_l.isra.0>:
 80124f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f4:	b087      	sub	sp, #28
 80124f6:	4688      	mov	r8, r1
 80124f8:	9005      	str	r0, [sp, #20]
 80124fa:	4691      	mov	r9, r2
 80124fc:	461f      	mov	r7, r3
 80124fe:	468b      	mov	fp, r1
 8012500:	465d      	mov	r5, fp
 8012502:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012504:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012508:	f7ff fd58 	bl	8011fbc <__locale_ctype_ptr_l>
 801250c:	4420      	add	r0, r4
 801250e:	7846      	ldrb	r6, [r0, #1]
 8012510:	f016 0608 	ands.w	r6, r6, #8
 8012514:	d158      	bne.n	80125c8 <_strtoull_l.isra.0+0xd8>
 8012516:	2c2d      	cmp	r4, #45	; 0x2d
 8012518:	d158      	bne.n	80125cc <_strtoull_l.isra.0+0xdc>
 801251a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801251e:	f10b 0502 	add.w	r5, fp, #2
 8012522:	2601      	movs	r6, #1
 8012524:	2f00      	cmp	r7, #0
 8012526:	f000 8093 	beq.w	8012650 <_strtoull_l.isra.0+0x160>
 801252a:	2f10      	cmp	r7, #16
 801252c:	d10a      	bne.n	8012544 <_strtoull_l.isra.0+0x54>
 801252e:	2c30      	cmp	r4, #48	; 0x30
 8012530:	d108      	bne.n	8012544 <_strtoull_l.isra.0+0x54>
 8012532:	782b      	ldrb	r3, [r5, #0]
 8012534:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012538:	2b58      	cmp	r3, #88	; 0x58
 801253a:	f040 8083 	bne.w	8012644 <_strtoull_l.isra.0+0x154>
 801253e:	786c      	ldrb	r4, [r5, #1]
 8012540:	2710      	movs	r7, #16
 8012542:	3502      	adds	r5, #2
 8012544:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8012548:	463a      	mov	r2, r7
 801254a:	465b      	mov	r3, fp
 801254c:	f04f 30ff 	mov.w	r0, #4294967295
 8012550:	f04f 31ff 	mov.w	r1, #4294967295
 8012554:	f7ee fbb0 	bl	8000cb8 <__aeabi_uldivmod>
 8012558:	463a      	mov	r2, r7
 801255a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801255e:	465b      	mov	r3, fp
 8012560:	f04f 30ff 	mov.w	r0, #4294967295
 8012564:	f04f 31ff 	mov.w	r1, #4294967295
 8012568:	f7ee fba6 	bl	8000cb8 <__aeabi_uldivmod>
 801256c:	2100      	movs	r1, #0
 801256e:	4696      	mov	lr, r2
 8012570:	2200      	movs	r2, #0
 8012572:	e9cd 1200 	strd	r1, r2, [sp]
 8012576:	46ba      	mov	sl, r7
 8012578:	2300      	movs	r3, #0
 801257a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801257e:	f1bc 0f09 	cmp.w	ip, #9
 8012582:	d82a      	bhi.n	80125da <_strtoull_l.isra.0+0xea>
 8012584:	4664      	mov	r4, ip
 8012586:	42a7      	cmp	r7, r4
 8012588:	dd38      	ble.n	80125fc <_strtoull_l.isra.0+0x10c>
 801258a:	2b00      	cmp	r3, #0
 801258c:	db33      	blt.n	80125f6 <_strtoull_l.isra.0+0x106>
 801258e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012596:	4299      	cmp	r1, r3
 8012598:	bf08      	it	eq
 801259a:	4290      	cmpeq	r0, r2
 801259c:	d32b      	bcc.n	80125f6 <_strtoull_l.isra.0+0x106>
 801259e:	d101      	bne.n	80125a4 <_strtoull_l.isra.0+0xb4>
 80125a0:	45a6      	cmp	lr, r4
 80125a2:	db28      	blt.n	80125f6 <_strtoull_l.isra.0+0x106>
 80125a4:	9b01      	ldr	r3, [sp, #4]
 80125a6:	9900      	ldr	r1, [sp, #0]
 80125a8:	fb0a f303 	mul.w	r3, sl, r3
 80125ac:	fb01 330b 	mla	r3, r1, fp, r3
 80125b0:	fbaa 0101 	umull	r0, r1, sl, r1
 80125b4:	1902      	adds	r2, r0, r4
 80125b6:	4419      	add	r1, r3
 80125b8:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
 80125bc:	e9cd 2300 	strd	r2, r3, [sp]
 80125c0:	2301      	movs	r3, #1
 80125c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80125c6:	e7d8      	b.n	801257a <_strtoull_l.isra.0+0x8a>
 80125c8:	46ab      	mov	fp, r5
 80125ca:	e799      	b.n	8012500 <_strtoull_l.isra.0+0x10>
 80125cc:	2c2b      	cmp	r4, #43	; 0x2b
 80125ce:	bf04      	itt	eq
 80125d0:	f10b 0502 	addeq.w	r5, fp, #2
 80125d4:	f89b 4001 	ldrbeq.w	r4, [fp, #1]
 80125d8:	e7a4      	b.n	8012524 <_strtoull_l.isra.0+0x34>
 80125da:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80125de:	f1bc 0f19 	cmp.w	ip, #25
 80125e2:	d801      	bhi.n	80125e8 <_strtoull_l.isra.0+0xf8>
 80125e4:	3c37      	subs	r4, #55	; 0x37
 80125e6:	e7ce      	b.n	8012586 <_strtoull_l.isra.0+0x96>
 80125e8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80125ec:	f1bc 0f19 	cmp.w	ip, #25
 80125f0:	d804      	bhi.n	80125fc <_strtoull_l.isra.0+0x10c>
 80125f2:	3c57      	subs	r4, #87	; 0x57
 80125f4:	e7c7      	b.n	8012586 <_strtoull_l.isra.0+0x96>
 80125f6:	f04f 33ff 	mov.w	r3, #4294967295
 80125fa:	e7e2      	b.n	80125c2 <_strtoull_l.isra.0+0xd2>
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	da10      	bge.n	8012622 <_strtoull_l.isra.0+0x132>
 8012600:	9a05      	ldr	r2, [sp, #20]
 8012602:	2322      	movs	r3, #34	; 0x22
 8012604:	6013      	str	r3, [r2, #0]
 8012606:	f04f 34ff 	mov.w	r4, #4294967295
 801260a:	f04f 33ff 	mov.w	r3, #4294967295
 801260e:	e9cd 3400 	strd	r3, r4, [sp]
 8012612:	f1b9 0f00 	cmp.w	r9, #0
 8012616:	d110      	bne.n	801263a <_strtoull_l.isra.0+0x14a>
 8012618:	e9dd 0100 	ldrd	r0, r1, [sp]
 801261c:	b007      	add	sp, #28
 801261e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012622:	b136      	cbz	r6, 8012632 <_strtoull_l.isra.0+0x142>
 8012624:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012628:	4249      	negs	r1, r1
 801262a:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 801262e:	e9cd 1200 	strd	r1, r2, [sp]
 8012632:	f1b9 0f00 	cmp.w	r9, #0
 8012636:	d0ef      	beq.n	8012618 <_strtoull_l.isra.0+0x128>
 8012638:	b10b      	cbz	r3, 801263e <_strtoull_l.isra.0+0x14e>
 801263a:	f105 38ff 	add.w	r8, r5, #4294967295
 801263e:	f8c9 8000 	str.w	r8, [r9]
 8012642:	e7e9      	b.n	8012618 <_strtoull_l.isra.0+0x128>
 8012644:	2430      	movs	r4, #48	; 0x30
 8012646:	2f00      	cmp	r7, #0
 8012648:	f47f af7c 	bne.w	8012544 <_strtoull_l.isra.0+0x54>
 801264c:	2708      	movs	r7, #8
 801264e:	e779      	b.n	8012544 <_strtoull_l.isra.0+0x54>
 8012650:	2c30      	cmp	r4, #48	; 0x30
 8012652:	f43f af6e 	beq.w	8012532 <_strtoull_l.isra.0+0x42>
 8012656:	270a      	movs	r7, #10
 8012658:	e774      	b.n	8012544 <_strtoull_l.isra.0+0x54>
	...

0801265c <strtoull>:
 801265c:	4b08      	ldr	r3, [pc, #32]	; (8012680 <strtoull+0x24>)
 801265e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012660:	681c      	ldr	r4, [r3, #0]
 8012662:	4d08      	ldr	r5, [pc, #32]	; (8012684 <strtoull+0x28>)
 8012664:	6a23      	ldr	r3, [r4, #32]
 8012666:	2b00      	cmp	r3, #0
 8012668:	bf08      	it	eq
 801266a:	462b      	moveq	r3, r5
 801266c:	9300      	str	r3, [sp, #0]
 801266e:	4613      	mov	r3, r2
 8012670:	460a      	mov	r2, r1
 8012672:	4601      	mov	r1, r0
 8012674:	4620      	mov	r0, r4
 8012676:	f7ff ff3b 	bl	80124f0 <_strtoull_l.isra.0>
 801267a:	b003      	add	sp, #12
 801267c:	bd30      	pop	{r4, r5, pc}
 801267e:	bf00      	nop
 8012680:	20000024 	.word	0x20000024
 8012684:	20000088 	.word	0x20000088

08012688 <__ascii_wctomb>:
 8012688:	b149      	cbz	r1, 801269e <__ascii_wctomb+0x16>
 801268a:	2aff      	cmp	r2, #255	; 0xff
 801268c:	bf85      	ittet	hi
 801268e:	238a      	movhi	r3, #138	; 0x8a
 8012690:	6003      	strhi	r3, [r0, #0]
 8012692:	700a      	strbls	r2, [r1, #0]
 8012694:	f04f 30ff 	movhi.w	r0, #4294967295
 8012698:	bf98      	it	ls
 801269a:	2001      	movls	r0, #1
 801269c:	4770      	bx	lr
 801269e:	4608      	mov	r0, r1
 80126a0:	4770      	bx	lr
	...

080126a4 <_malloc_r>:
 80126a4:	b570      	push	{r4, r5, r6, lr}
 80126a6:	1ccd      	adds	r5, r1, #3
 80126a8:	f025 0503 	bic.w	r5, r5, #3
 80126ac:	3508      	adds	r5, #8
 80126ae:	2d0c      	cmp	r5, #12
 80126b0:	bf38      	it	cc
 80126b2:	250c      	movcc	r5, #12
 80126b4:	2d00      	cmp	r5, #0
 80126b6:	4606      	mov	r6, r0
 80126b8:	db01      	blt.n	80126be <_malloc_r+0x1a>
 80126ba:	42a9      	cmp	r1, r5
 80126bc:	d903      	bls.n	80126c6 <_malloc_r+0x22>
 80126be:	230c      	movs	r3, #12
 80126c0:	6033      	str	r3, [r6, #0]
 80126c2:	2000      	movs	r0, #0
 80126c4:	bd70      	pop	{r4, r5, r6, pc}
 80126c6:	f000 fb31 	bl	8012d2c <__malloc_lock>
 80126ca:	4a21      	ldr	r2, [pc, #132]	; (8012750 <_malloc_r+0xac>)
 80126cc:	6814      	ldr	r4, [r2, #0]
 80126ce:	4621      	mov	r1, r4
 80126d0:	b991      	cbnz	r1, 80126f8 <_malloc_r+0x54>
 80126d2:	4c20      	ldr	r4, [pc, #128]	; (8012754 <_malloc_r+0xb0>)
 80126d4:	6823      	ldr	r3, [r4, #0]
 80126d6:	b91b      	cbnz	r3, 80126e0 <_malloc_r+0x3c>
 80126d8:	4630      	mov	r0, r6
 80126da:	f000 fb17 	bl	8012d0c <_sbrk_r>
 80126de:	6020      	str	r0, [r4, #0]
 80126e0:	4629      	mov	r1, r5
 80126e2:	4630      	mov	r0, r6
 80126e4:	f000 fb12 	bl	8012d0c <_sbrk_r>
 80126e8:	1c43      	adds	r3, r0, #1
 80126ea:	d124      	bne.n	8012736 <_malloc_r+0x92>
 80126ec:	230c      	movs	r3, #12
 80126ee:	6033      	str	r3, [r6, #0]
 80126f0:	4630      	mov	r0, r6
 80126f2:	f000 fb1c 	bl	8012d2e <__malloc_unlock>
 80126f6:	e7e4      	b.n	80126c2 <_malloc_r+0x1e>
 80126f8:	680b      	ldr	r3, [r1, #0]
 80126fa:	1b5b      	subs	r3, r3, r5
 80126fc:	d418      	bmi.n	8012730 <_malloc_r+0x8c>
 80126fe:	2b0b      	cmp	r3, #11
 8012700:	d90f      	bls.n	8012722 <_malloc_r+0x7e>
 8012702:	600b      	str	r3, [r1, #0]
 8012704:	50cd      	str	r5, [r1, r3]
 8012706:	18cc      	adds	r4, r1, r3
 8012708:	4630      	mov	r0, r6
 801270a:	f000 fb10 	bl	8012d2e <__malloc_unlock>
 801270e:	f104 000b 	add.w	r0, r4, #11
 8012712:	1d23      	adds	r3, r4, #4
 8012714:	f020 0007 	bic.w	r0, r0, #7
 8012718:	1ac3      	subs	r3, r0, r3
 801271a:	d0d3      	beq.n	80126c4 <_malloc_r+0x20>
 801271c:	425a      	negs	r2, r3
 801271e:	50e2      	str	r2, [r4, r3]
 8012720:	e7d0      	b.n	80126c4 <_malloc_r+0x20>
 8012722:	428c      	cmp	r4, r1
 8012724:	684b      	ldr	r3, [r1, #4]
 8012726:	bf16      	itet	ne
 8012728:	6063      	strne	r3, [r4, #4]
 801272a:	6013      	streq	r3, [r2, #0]
 801272c:	460c      	movne	r4, r1
 801272e:	e7eb      	b.n	8012708 <_malloc_r+0x64>
 8012730:	460c      	mov	r4, r1
 8012732:	6849      	ldr	r1, [r1, #4]
 8012734:	e7cc      	b.n	80126d0 <_malloc_r+0x2c>
 8012736:	1cc4      	adds	r4, r0, #3
 8012738:	f024 0403 	bic.w	r4, r4, #3
 801273c:	42a0      	cmp	r0, r4
 801273e:	d005      	beq.n	801274c <_malloc_r+0xa8>
 8012740:	1a21      	subs	r1, r4, r0
 8012742:	4630      	mov	r0, r6
 8012744:	f000 fae2 	bl	8012d0c <_sbrk_r>
 8012748:	3001      	adds	r0, #1
 801274a:	d0cf      	beq.n	80126ec <_malloc_r+0x48>
 801274c:	6025      	str	r5, [r4, #0]
 801274e:	e7db      	b.n	8012708 <_malloc_r+0x64>
 8012750:	20000468 	.word	0x20000468
 8012754:	2000046c 	.word	0x2000046c

08012758 <__ssputs_r>:
 8012758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801275c:	688e      	ldr	r6, [r1, #8]
 801275e:	429e      	cmp	r6, r3
 8012760:	4682      	mov	sl, r0
 8012762:	460c      	mov	r4, r1
 8012764:	4690      	mov	r8, r2
 8012766:	4699      	mov	r9, r3
 8012768:	d837      	bhi.n	80127da <__ssputs_r+0x82>
 801276a:	898a      	ldrh	r2, [r1, #12]
 801276c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012770:	d031      	beq.n	80127d6 <__ssputs_r+0x7e>
 8012772:	6825      	ldr	r5, [r4, #0]
 8012774:	6909      	ldr	r1, [r1, #16]
 8012776:	1a6f      	subs	r7, r5, r1
 8012778:	6965      	ldr	r5, [r4, #20]
 801277a:	2302      	movs	r3, #2
 801277c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012780:	fb95 f5f3 	sdiv	r5, r5, r3
 8012784:	f109 0301 	add.w	r3, r9, #1
 8012788:	443b      	add	r3, r7
 801278a:	429d      	cmp	r5, r3
 801278c:	bf38      	it	cc
 801278e:	461d      	movcc	r5, r3
 8012790:	0553      	lsls	r3, r2, #21
 8012792:	d530      	bpl.n	80127f6 <__ssputs_r+0x9e>
 8012794:	4629      	mov	r1, r5
 8012796:	f7ff ff85 	bl	80126a4 <_malloc_r>
 801279a:	4606      	mov	r6, r0
 801279c:	b950      	cbnz	r0, 80127b4 <__ssputs_r+0x5c>
 801279e:	230c      	movs	r3, #12
 80127a0:	f8ca 3000 	str.w	r3, [sl]
 80127a4:	89a3      	ldrh	r3, [r4, #12]
 80127a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127aa:	81a3      	strh	r3, [r4, #12]
 80127ac:	f04f 30ff 	mov.w	r0, #4294967295
 80127b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127b4:	463a      	mov	r2, r7
 80127b6:	6921      	ldr	r1, [r4, #16]
 80127b8:	f7ff fc24 	bl	8012004 <memcpy>
 80127bc:	89a3      	ldrh	r3, [r4, #12]
 80127be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80127c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127c6:	81a3      	strh	r3, [r4, #12]
 80127c8:	6126      	str	r6, [r4, #16]
 80127ca:	6165      	str	r5, [r4, #20]
 80127cc:	443e      	add	r6, r7
 80127ce:	1bed      	subs	r5, r5, r7
 80127d0:	6026      	str	r6, [r4, #0]
 80127d2:	60a5      	str	r5, [r4, #8]
 80127d4:	464e      	mov	r6, r9
 80127d6:	454e      	cmp	r6, r9
 80127d8:	d900      	bls.n	80127dc <__ssputs_r+0x84>
 80127da:	464e      	mov	r6, r9
 80127dc:	4632      	mov	r2, r6
 80127de:	4641      	mov	r1, r8
 80127e0:	6820      	ldr	r0, [r4, #0]
 80127e2:	f7ff fc1a 	bl	801201a <memmove>
 80127e6:	68a3      	ldr	r3, [r4, #8]
 80127e8:	1b9b      	subs	r3, r3, r6
 80127ea:	60a3      	str	r3, [r4, #8]
 80127ec:	6823      	ldr	r3, [r4, #0]
 80127ee:	441e      	add	r6, r3
 80127f0:	6026      	str	r6, [r4, #0]
 80127f2:	2000      	movs	r0, #0
 80127f4:	e7dc      	b.n	80127b0 <__ssputs_r+0x58>
 80127f6:	462a      	mov	r2, r5
 80127f8:	f000 fae8 	bl	8012dcc <_realloc_r>
 80127fc:	4606      	mov	r6, r0
 80127fe:	2800      	cmp	r0, #0
 8012800:	d1e2      	bne.n	80127c8 <__ssputs_r+0x70>
 8012802:	6921      	ldr	r1, [r4, #16]
 8012804:	4650      	mov	r0, sl
 8012806:	f000 fa93 	bl	8012d30 <_free_r>
 801280a:	e7c8      	b.n	801279e <__ssputs_r+0x46>

0801280c <_svfiprintf_r>:
 801280c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012810:	461d      	mov	r5, r3
 8012812:	898b      	ldrh	r3, [r1, #12]
 8012814:	061f      	lsls	r7, r3, #24
 8012816:	b09d      	sub	sp, #116	; 0x74
 8012818:	4680      	mov	r8, r0
 801281a:	460c      	mov	r4, r1
 801281c:	4616      	mov	r6, r2
 801281e:	d50f      	bpl.n	8012840 <_svfiprintf_r+0x34>
 8012820:	690b      	ldr	r3, [r1, #16]
 8012822:	b96b      	cbnz	r3, 8012840 <_svfiprintf_r+0x34>
 8012824:	2140      	movs	r1, #64	; 0x40
 8012826:	f7ff ff3d 	bl	80126a4 <_malloc_r>
 801282a:	6020      	str	r0, [r4, #0]
 801282c:	6120      	str	r0, [r4, #16]
 801282e:	b928      	cbnz	r0, 801283c <_svfiprintf_r+0x30>
 8012830:	230c      	movs	r3, #12
 8012832:	f8c8 3000 	str.w	r3, [r8]
 8012836:	f04f 30ff 	mov.w	r0, #4294967295
 801283a:	e0c8      	b.n	80129ce <_svfiprintf_r+0x1c2>
 801283c:	2340      	movs	r3, #64	; 0x40
 801283e:	6163      	str	r3, [r4, #20]
 8012840:	2300      	movs	r3, #0
 8012842:	9309      	str	r3, [sp, #36]	; 0x24
 8012844:	2320      	movs	r3, #32
 8012846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801284a:	2330      	movs	r3, #48	; 0x30
 801284c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012850:	9503      	str	r5, [sp, #12]
 8012852:	f04f 0b01 	mov.w	fp, #1
 8012856:	4637      	mov	r7, r6
 8012858:	463d      	mov	r5, r7
 801285a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801285e:	b10b      	cbz	r3, 8012864 <_svfiprintf_r+0x58>
 8012860:	2b25      	cmp	r3, #37	; 0x25
 8012862:	d13e      	bne.n	80128e2 <_svfiprintf_r+0xd6>
 8012864:	ebb7 0a06 	subs.w	sl, r7, r6
 8012868:	d00b      	beq.n	8012882 <_svfiprintf_r+0x76>
 801286a:	4653      	mov	r3, sl
 801286c:	4632      	mov	r2, r6
 801286e:	4621      	mov	r1, r4
 8012870:	4640      	mov	r0, r8
 8012872:	f7ff ff71 	bl	8012758 <__ssputs_r>
 8012876:	3001      	adds	r0, #1
 8012878:	f000 80a4 	beq.w	80129c4 <_svfiprintf_r+0x1b8>
 801287c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801287e:	4453      	add	r3, sl
 8012880:	9309      	str	r3, [sp, #36]	; 0x24
 8012882:	783b      	ldrb	r3, [r7, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	f000 809d 	beq.w	80129c4 <_svfiprintf_r+0x1b8>
 801288a:	2300      	movs	r3, #0
 801288c:	f04f 32ff 	mov.w	r2, #4294967295
 8012890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012894:	9304      	str	r3, [sp, #16]
 8012896:	9307      	str	r3, [sp, #28]
 8012898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801289c:	931a      	str	r3, [sp, #104]	; 0x68
 801289e:	462f      	mov	r7, r5
 80128a0:	2205      	movs	r2, #5
 80128a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80128a6:	4850      	ldr	r0, [pc, #320]	; (80129e8 <_svfiprintf_r+0x1dc>)
 80128a8:	f7ed fcb2 	bl	8000210 <memchr>
 80128ac:	9b04      	ldr	r3, [sp, #16]
 80128ae:	b9d0      	cbnz	r0, 80128e6 <_svfiprintf_r+0xda>
 80128b0:	06d9      	lsls	r1, r3, #27
 80128b2:	bf44      	itt	mi
 80128b4:	2220      	movmi	r2, #32
 80128b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80128ba:	071a      	lsls	r2, r3, #28
 80128bc:	bf44      	itt	mi
 80128be:	222b      	movmi	r2, #43	; 0x2b
 80128c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80128c4:	782a      	ldrb	r2, [r5, #0]
 80128c6:	2a2a      	cmp	r2, #42	; 0x2a
 80128c8:	d015      	beq.n	80128f6 <_svfiprintf_r+0xea>
 80128ca:	9a07      	ldr	r2, [sp, #28]
 80128cc:	462f      	mov	r7, r5
 80128ce:	2000      	movs	r0, #0
 80128d0:	250a      	movs	r5, #10
 80128d2:	4639      	mov	r1, r7
 80128d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128d8:	3b30      	subs	r3, #48	; 0x30
 80128da:	2b09      	cmp	r3, #9
 80128dc:	d94d      	bls.n	801297a <_svfiprintf_r+0x16e>
 80128de:	b1b8      	cbz	r0, 8012910 <_svfiprintf_r+0x104>
 80128e0:	e00f      	b.n	8012902 <_svfiprintf_r+0xf6>
 80128e2:	462f      	mov	r7, r5
 80128e4:	e7b8      	b.n	8012858 <_svfiprintf_r+0x4c>
 80128e6:	4a40      	ldr	r2, [pc, #256]	; (80129e8 <_svfiprintf_r+0x1dc>)
 80128e8:	1a80      	subs	r0, r0, r2
 80128ea:	fa0b f000 	lsl.w	r0, fp, r0
 80128ee:	4318      	orrs	r0, r3
 80128f0:	9004      	str	r0, [sp, #16]
 80128f2:	463d      	mov	r5, r7
 80128f4:	e7d3      	b.n	801289e <_svfiprintf_r+0x92>
 80128f6:	9a03      	ldr	r2, [sp, #12]
 80128f8:	1d11      	adds	r1, r2, #4
 80128fa:	6812      	ldr	r2, [r2, #0]
 80128fc:	9103      	str	r1, [sp, #12]
 80128fe:	2a00      	cmp	r2, #0
 8012900:	db01      	blt.n	8012906 <_svfiprintf_r+0xfa>
 8012902:	9207      	str	r2, [sp, #28]
 8012904:	e004      	b.n	8012910 <_svfiprintf_r+0x104>
 8012906:	4252      	negs	r2, r2
 8012908:	f043 0302 	orr.w	r3, r3, #2
 801290c:	9207      	str	r2, [sp, #28]
 801290e:	9304      	str	r3, [sp, #16]
 8012910:	783b      	ldrb	r3, [r7, #0]
 8012912:	2b2e      	cmp	r3, #46	; 0x2e
 8012914:	d10c      	bne.n	8012930 <_svfiprintf_r+0x124>
 8012916:	787b      	ldrb	r3, [r7, #1]
 8012918:	2b2a      	cmp	r3, #42	; 0x2a
 801291a:	d133      	bne.n	8012984 <_svfiprintf_r+0x178>
 801291c:	9b03      	ldr	r3, [sp, #12]
 801291e:	1d1a      	adds	r2, r3, #4
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	9203      	str	r2, [sp, #12]
 8012924:	2b00      	cmp	r3, #0
 8012926:	bfb8      	it	lt
 8012928:	f04f 33ff 	movlt.w	r3, #4294967295
 801292c:	3702      	adds	r7, #2
 801292e:	9305      	str	r3, [sp, #20]
 8012930:	4d2e      	ldr	r5, [pc, #184]	; (80129ec <_svfiprintf_r+0x1e0>)
 8012932:	7839      	ldrb	r1, [r7, #0]
 8012934:	2203      	movs	r2, #3
 8012936:	4628      	mov	r0, r5
 8012938:	f7ed fc6a 	bl	8000210 <memchr>
 801293c:	b138      	cbz	r0, 801294e <_svfiprintf_r+0x142>
 801293e:	2340      	movs	r3, #64	; 0x40
 8012940:	1b40      	subs	r0, r0, r5
 8012942:	fa03 f000 	lsl.w	r0, r3, r0
 8012946:	9b04      	ldr	r3, [sp, #16]
 8012948:	4303      	orrs	r3, r0
 801294a:	3701      	adds	r7, #1
 801294c:	9304      	str	r3, [sp, #16]
 801294e:	7839      	ldrb	r1, [r7, #0]
 8012950:	4827      	ldr	r0, [pc, #156]	; (80129f0 <_svfiprintf_r+0x1e4>)
 8012952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012956:	2206      	movs	r2, #6
 8012958:	1c7e      	adds	r6, r7, #1
 801295a:	f7ed fc59 	bl	8000210 <memchr>
 801295e:	2800      	cmp	r0, #0
 8012960:	d038      	beq.n	80129d4 <_svfiprintf_r+0x1c8>
 8012962:	4b24      	ldr	r3, [pc, #144]	; (80129f4 <_svfiprintf_r+0x1e8>)
 8012964:	bb13      	cbnz	r3, 80129ac <_svfiprintf_r+0x1a0>
 8012966:	9b03      	ldr	r3, [sp, #12]
 8012968:	3307      	adds	r3, #7
 801296a:	f023 0307 	bic.w	r3, r3, #7
 801296e:	3308      	adds	r3, #8
 8012970:	9303      	str	r3, [sp, #12]
 8012972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012974:	444b      	add	r3, r9
 8012976:	9309      	str	r3, [sp, #36]	; 0x24
 8012978:	e76d      	b.n	8012856 <_svfiprintf_r+0x4a>
 801297a:	fb05 3202 	mla	r2, r5, r2, r3
 801297e:	2001      	movs	r0, #1
 8012980:	460f      	mov	r7, r1
 8012982:	e7a6      	b.n	80128d2 <_svfiprintf_r+0xc6>
 8012984:	2300      	movs	r3, #0
 8012986:	3701      	adds	r7, #1
 8012988:	9305      	str	r3, [sp, #20]
 801298a:	4619      	mov	r1, r3
 801298c:	250a      	movs	r5, #10
 801298e:	4638      	mov	r0, r7
 8012990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012994:	3a30      	subs	r2, #48	; 0x30
 8012996:	2a09      	cmp	r2, #9
 8012998:	d903      	bls.n	80129a2 <_svfiprintf_r+0x196>
 801299a:	2b00      	cmp	r3, #0
 801299c:	d0c8      	beq.n	8012930 <_svfiprintf_r+0x124>
 801299e:	9105      	str	r1, [sp, #20]
 80129a0:	e7c6      	b.n	8012930 <_svfiprintf_r+0x124>
 80129a2:	fb05 2101 	mla	r1, r5, r1, r2
 80129a6:	2301      	movs	r3, #1
 80129a8:	4607      	mov	r7, r0
 80129aa:	e7f0      	b.n	801298e <_svfiprintf_r+0x182>
 80129ac:	ab03      	add	r3, sp, #12
 80129ae:	9300      	str	r3, [sp, #0]
 80129b0:	4622      	mov	r2, r4
 80129b2:	4b11      	ldr	r3, [pc, #68]	; (80129f8 <_svfiprintf_r+0x1ec>)
 80129b4:	a904      	add	r1, sp, #16
 80129b6:	4640      	mov	r0, r8
 80129b8:	f3af 8000 	nop.w
 80129bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80129c0:	4681      	mov	r9, r0
 80129c2:	d1d6      	bne.n	8012972 <_svfiprintf_r+0x166>
 80129c4:	89a3      	ldrh	r3, [r4, #12]
 80129c6:	065b      	lsls	r3, r3, #25
 80129c8:	f53f af35 	bmi.w	8012836 <_svfiprintf_r+0x2a>
 80129cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129ce:	b01d      	add	sp, #116	; 0x74
 80129d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129d4:	ab03      	add	r3, sp, #12
 80129d6:	9300      	str	r3, [sp, #0]
 80129d8:	4622      	mov	r2, r4
 80129da:	4b07      	ldr	r3, [pc, #28]	; (80129f8 <_svfiprintf_r+0x1ec>)
 80129dc:	a904      	add	r1, sp, #16
 80129de:	4640      	mov	r0, r8
 80129e0:	f000 f882 	bl	8012ae8 <_printf_i>
 80129e4:	e7ea      	b.n	80129bc <_svfiprintf_r+0x1b0>
 80129e6:	bf00      	nop
 80129e8:	0801593b 	.word	0x0801593b
 80129ec:	08015941 	.word	0x08015941
 80129f0:	08015945 	.word	0x08015945
 80129f4:	00000000 	.word	0x00000000
 80129f8:	08012759 	.word	0x08012759

080129fc <_printf_common>:
 80129fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a00:	4691      	mov	r9, r2
 8012a02:	461f      	mov	r7, r3
 8012a04:	688a      	ldr	r2, [r1, #8]
 8012a06:	690b      	ldr	r3, [r1, #16]
 8012a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	bfb8      	it	lt
 8012a10:	4613      	movlt	r3, r2
 8012a12:	f8c9 3000 	str.w	r3, [r9]
 8012a16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012a1a:	4606      	mov	r6, r0
 8012a1c:	460c      	mov	r4, r1
 8012a1e:	b112      	cbz	r2, 8012a26 <_printf_common+0x2a>
 8012a20:	3301      	adds	r3, #1
 8012a22:	f8c9 3000 	str.w	r3, [r9]
 8012a26:	6823      	ldr	r3, [r4, #0]
 8012a28:	0699      	lsls	r1, r3, #26
 8012a2a:	bf42      	ittt	mi
 8012a2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012a30:	3302      	addmi	r3, #2
 8012a32:	f8c9 3000 	strmi.w	r3, [r9]
 8012a36:	6825      	ldr	r5, [r4, #0]
 8012a38:	f015 0506 	ands.w	r5, r5, #6
 8012a3c:	d107      	bne.n	8012a4e <_printf_common+0x52>
 8012a3e:	f104 0a19 	add.w	sl, r4, #25
 8012a42:	68e3      	ldr	r3, [r4, #12]
 8012a44:	f8d9 2000 	ldr.w	r2, [r9]
 8012a48:	1a9b      	subs	r3, r3, r2
 8012a4a:	42ab      	cmp	r3, r5
 8012a4c:	dc28      	bgt.n	8012aa0 <_printf_common+0xa4>
 8012a4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012a52:	6822      	ldr	r2, [r4, #0]
 8012a54:	3300      	adds	r3, #0
 8012a56:	bf18      	it	ne
 8012a58:	2301      	movne	r3, #1
 8012a5a:	0692      	lsls	r2, r2, #26
 8012a5c:	d42d      	bmi.n	8012aba <_printf_common+0xbe>
 8012a5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a62:	4639      	mov	r1, r7
 8012a64:	4630      	mov	r0, r6
 8012a66:	47c0      	blx	r8
 8012a68:	3001      	adds	r0, #1
 8012a6a:	d020      	beq.n	8012aae <_printf_common+0xb2>
 8012a6c:	6823      	ldr	r3, [r4, #0]
 8012a6e:	68e5      	ldr	r5, [r4, #12]
 8012a70:	f8d9 2000 	ldr.w	r2, [r9]
 8012a74:	f003 0306 	and.w	r3, r3, #6
 8012a78:	2b04      	cmp	r3, #4
 8012a7a:	bf08      	it	eq
 8012a7c:	1aad      	subeq	r5, r5, r2
 8012a7e:	68a3      	ldr	r3, [r4, #8]
 8012a80:	6922      	ldr	r2, [r4, #16]
 8012a82:	bf0c      	ite	eq
 8012a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a88:	2500      	movne	r5, #0
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	bfc4      	itt	gt
 8012a8e:	1a9b      	subgt	r3, r3, r2
 8012a90:	18ed      	addgt	r5, r5, r3
 8012a92:	f04f 0900 	mov.w	r9, #0
 8012a96:	341a      	adds	r4, #26
 8012a98:	454d      	cmp	r5, r9
 8012a9a:	d11a      	bne.n	8012ad2 <_printf_common+0xd6>
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	e008      	b.n	8012ab2 <_printf_common+0xb6>
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	4652      	mov	r2, sl
 8012aa4:	4639      	mov	r1, r7
 8012aa6:	4630      	mov	r0, r6
 8012aa8:	47c0      	blx	r8
 8012aaa:	3001      	adds	r0, #1
 8012aac:	d103      	bne.n	8012ab6 <_printf_common+0xba>
 8012aae:	f04f 30ff 	mov.w	r0, #4294967295
 8012ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ab6:	3501      	adds	r5, #1
 8012ab8:	e7c3      	b.n	8012a42 <_printf_common+0x46>
 8012aba:	18e1      	adds	r1, r4, r3
 8012abc:	1c5a      	adds	r2, r3, #1
 8012abe:	2030      	movs	r0, #48	; 0x30
 8012ac0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ac4:	4422      	add	r2, r4
 8012ac6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012aca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ace:	3302      	adds	r3, #2
 8012ad0:	e7c5      	b.n	8012a5e <_printf_common+0x62>
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	4622      	mov	r2, r4
 8012ad6:	4639      	mov	r1, r7
 8012ad8:	4630      	mov	r0, r6
 8012ada:	47c0      	blx	r8
 8012adc:	3001      	adds	r0, #1
 8012ade:	d0e6      	beq.n	8012aae <_printf_common+0xb2>
 8012ae0:	f109 0901 	add.w	r9, r9, #1
 8012ae4:	e7d8      	b.n	8012a98 <_printf_common+0x9c>
	...

08012ae8 <_printf_i>:
 8012ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012aec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012af0:	460c      	mov	r4, r1
 8012af2:	7e09      	ldrb	r1, [r1, #24]
 8012af4:	b085      	sub	sp, #20
 8012af6:	296e      	cmp	r1, #110	; 0x6e
 8012af8:	4617      	mov	r7, r2
 8012afa:	4606      	mov	r6, r0
 8012afc:	4698      	mov	r8, r3
 8012afe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b00:	f000 80b3 	beq.w	8012c6a <_printf_i+0x182>
 8012b04:	d822      	bhi.n	8012b4c <_printf_i+0x64>
 8012b06:	2963      	cmp	r1, #99	; 0x63
 8012b08:	d036      	beq.n	8012b78 <_printf_i+0x90>
 8012b0a:	d80a      	bhi.n	8012b22 <_printf_i+0x3a>
 8012b0c:	2900      	cmp	r1, #0
 8012b0e:	f000 80b9 	beq.w	8012c84 <_printf_i+0x19c>
 8012b12:	2958      	cmp	r1, #88	; 0x58
 8012b14:	f000 8083 	beq.w	8012c1e <_printf_i+0x136>
 8012b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012b20:	e032      	b.n	8012b88 <_printf_i+0xa0>
 8012b22:	2964      	cmp	r1, #100	; 0x64
 8012b24:	d001      	beq.n	8012b2a <_printf_i+0x42>
 8012b26:	2969      	cmp	r1, #105	; 0x69
 8012b28:	d1f6      	bne.n	8012b18 <_printf_i+0x30>
 8012b2a:	6820      	ldr	r0, [r4, #0]
 8012b2c:	6813      	ldr	r3, [r2, #0]
 8012b2e:	0605      	lsls	r5, r0, #24
 8012b30:	f103 0104 	add.w	r1, r3, #4
 8012b34:	d52a      	bpl.n	8012b8c <_printf_i+0xa4>
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	6011      	str	r1, [r2, #0]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	da03      	bge.n	8012b46 <_printf_i+0x5e>
 8012b3e:	222d      	movs	r2, #45	; 0x2d
 8012b40:	425b      	negs	r3, r3
 8012b42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012b46:	486f      	ldr	r0, [pc, #444]	; (8012d04 <_printf_i+0x21c>)
 8012b48:	220a      	movs	r2, #10
 8012b4a:	e039      	b.n	8012bc0 <_printf_i+0xd8>
 8012b4c:	2973      	cmp	r1, #115	; 0x73
 8012b4e:	f000 809d 	beq.w	8012c8c <_printf_i+0x1a4>
 8012b52:	d808      	bhi.n	8012b66 <_printf_i+0x7e>
 8012b54:	296f      	cmp	r1, #111	; 0x6f
 8012b56:	d020      	beq.n	8012b9a <_printf_i+0xb2>
 8012b58:	2970      	cmp	r1, #112	; 0x70
 8012b5a:	d1dd      	bne.n	8012b18 <_printf_i+0x30>
 8012b5c:	6823      	ldr	r3, [r4, #0]
 8012b5e:	f043 0320 	orr.w	r3, r3, #32
 8012b62:	6023      	str	r3, [r4, #0]
 8012b64:	e003      	b.n	8012b6e <_printf_i+0x86>
 8012b66:	2975      	cmp	r1, #117	; 0x75
 8012b68:	d017      	beq.n	8012b9a <_printf_i+0xb2>
 8012b6a:	2978      	cmp	r1, #120	; 0x78
 8012b6c:	d1d4      	bne.n	8012b18 <_printf_i+0x30>
 8012b6e:	2378      	movs	r3, #120	; 0x78
 8012b70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012b74:	4864      	ldr	r0, [pc, #400]	; (8012d08 <_printf_i+0x220>)
 8012b76:	e055      	b.n	8012c24 <_printf_i+0x13c>
 8012b78:	6813      	ldr	r3, [r2, #0]
 8012b7a:	1d19      	adds	r1, r3, #4
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	6011      	str	r1, [r2, #0]
 8012b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b88:	2301      	movs	r3, #1
 8012b8a:	e08c      	b.n	8012ca6 <_printf_i+0x1be>
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	6011      	str	r1, [r2, #0]
 8012b90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012b94:	bf18      	it	ne
 8012b96:	b21b      	sxthne	r3, r3
 8012b98:	e7cf      	b.n	8012b3a <_printf_i+0x52>
 8012b9a:	6813      	ldr	r3, [r2, #0]
 8012b9c:	6825      	ldr	r5, [r4, #0]
 8012b9e:	1d18      	adds	r0, r3, #4
 8012ba0:	6010      	str	r0, [r2, #0]
 8012ba2:	0628      	lsls	r0, r5, #24
 8012ba4:	d501      	bpl.n	8012baa <_printf_i+0xc2>
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	e002      	b.n	8012bb0 <_printf_i+0xc8>
 8012baa:	0668      	lsls	r0, r5, #25
 8012bac:	d5fb      	bpl.n	8012ba6 <_printf_i+0xbe>
 8012bae:	881b      	ldrh	r3, [r3, #0]
 8012bb0:	4854      	ldr	r0, [pc, #336]	; (8012d04 <_printf_i+0x21c>)
 8012bb2:	296f      	cmp	r1, #111	; 0x6f
 8012bb4:	bf14      	ite	ne
 8012bb6:	220a      	movne	r2, #10
 8012bb8:	2208      	moveq	r2, #8
 8012bba:	2100      	movs	r1, #0
 8012bbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012bc0:	6865      	ldr	r5, [r4, #4]
 8012bc2:	60a5      	str	r5, [r4, #8]
 8012bc4:	2d00      	cmp	r5, #0
 8012bc6:	f2c0 8095 	blt.w	8012cf4 <_printf_i+0x20c>
 8012bca:	6821      	ldr	r1, [r4, #0]
 8012bcc:	f021 0104 	bic.w	r1, r1, #4
 8012bd0:	6021      	str	r1, [r4, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d13d      	bne.n	8012c52 <_printf_i+0x16a>
 8012bd6:	2d00      	cmp	r5, #0
 8012bd8:	f040 808e 	bne.w	8012cf8 <_printf_i+0x210>
 8012bdc:	4665      	mov	r5, ip
 8012bde:	2a08      	cmp	r2, #8
 8012be0:	d10b      	bne.n	8012bfa <_printf_i+0x112>
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	07db      	lsls	r3, r3, #31
 8012be6:	d508      	bpl.n	8012bfa <_printf_i+0x112>
 8012be8:	6923      	ldr	r3, [r4, #16]
 8012bea:	6862      	ldr	r2, [r4, #4]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	bfde      	ittt	le
 8012bf0:	2330      	movle	r3, #48	; 0x30
 8012bf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012bf6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012bfa:	ebac 0305 	sub.w	r3, ip, r5
 8012bfe:	6123      	str	r3, [r4, #16]
 8012c00:	f8cd 8000 	str.w	r8, [sp]
 8012c04:	463b      	mov	r3, r7
 8012c06:	aa03      	add	r2, sp, #12
 8012c08:	4621      	mov	r1, r4
 8012c0a:	4630      	mov	r0, r6
 8012c0c:	f7ff fef6 	bl	80129fc <_printf_common>
 8012c10:	3001      	adds	r0, #1
 8012c12:	d14d      	bne.n	8012cb0 <_printf_i+0x1c8>
 8012c14:	f04f 30ff 	mov.w	r0, #4294967295
 8012c18:	b005      	add	sp, #20
 8012c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c1e:	4839      	ldr	r0, [pc, #228]	; (8012d04 <_printf_i+0x21c>)
 8012c20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012c24:	6813      	ldr	r3, [r2, #0]
 8012c26:	6821      	ldr	r1, [r4, #0]
 8012c28:	1d1d      	adds	r5, r3, #4
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	6015      	str	r5, [r2, #0]
 8012c2e:	060a      	lsls	r2, r1, #24
 8012c30:	d50b      	bpl.n	8012c4a <_printf_i+0x162>
 8012c32:	07ca      	lsls	r2, r1, #31
 8012c34:	bf44      	itt	mi
 8012c36:	f041 0120 	orrmi.w	r1, r1, #32
 8012c3a:	6021      	strmi	r1, [r4, #0]
 8012c3c:	b91b      	cbnz	r3, 8012c46 <_printf_i+0x15e>
 8012c3e:	6822      	ldr	r2, [r4, #0]
 8012c40:	f022 0220 	bic.w	r2, r2, #32
 8012c44:	6022      	str	r2, [r4, #0]
 8012c46:	2210      	movs	r2, #16
 8012c48:	e7b7      	b.n	8012bba <_printf_i+0xd2>
 8012c4a:	064d      	lsls	r5, r1, #25
 8012c4c:	bf48      	it	mi
 8012c4e:	b29b      	uxthmi	r3, r3
 8012c50:	e7ef      	b.n	8012c32 <_printf_i+0x14a>
 8012c52:	4665      	mov	r5, ip
 8012c54:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c58:	fb02 3311 	mls	r3, r2, r1, r3
 8012c5c:	5cc3      	ldrb	r3, [r0, r3]
 8012c5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012c62:	460b      	mov	r3, r1
 8012c64:	2900      	cmp	r1, #0
 8012c66:	d1f5      	bne.n	8012c54 <_printf_i+0x16c>
 8012c68:	e7b9      	b.n	8012bde <_printf_i+0xf6>
 8012c6a:	6813      	ldr	r3, [r2, #0]
 8012c6c:	6825      	ldr	r5, [r4, #0]
 8012c6e:	6961      	ldr	r1, [r4, #20]
 8012c70:	1d18      	adds	r0, r3, #4
 8012c72:	6010      	str	r0, [r2, #0]
 8012c74:	0628      	lsls	r0, r5, #24
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	d501      	bpl.n	8012c7e <_printf_i+0x196>
 8012c7a:	6019      	str	r1, [r3, #0]
 8012c7c:	e002      	b.n	8012c84 <_printf_i+0x19c>
 8012c7e:	066a      	lsls	r2, r5, #25
 8012c80:	d5fb      	bpl.n	8012c7a <_printf_i+0x192>
 8012c82:	8019      	strh	r1, [r3, #0]
 8012c84:	2300      	movs	r3, #0
 8012c86:	6123      	str	r3, [r4, #16]
 8012c88:	4665      	mov	r5, ip
 8012c8a:	e7b9      	b.n	8012c00 <_printf_i+0x118>
 8012c8c:	6813      	ldr	r3, [r2, #0]
 8012c8e:	1d19      	adds	r1, r3, #4
 8012c90:	6011      	str	r1, [r2, #0]
 8012c92:	681d      	ldr	r5, [r3, #0]
 8012c94:	6862      	ldr	r2, [r4, #4]
 8012c96:	2100      	movs	r1, #0
 8012c98:	4628      	mov	r0, r5
 8012c9a:	f7ed fab9 	bl	8000210 <memchr>
 8012c9e:	b108      	cbz	r0, 8012ca4 <_printf_i+0x1bc>
 8012ca0:	1b40      	subs	r0, r0, r5
 8012ca2:	6060      	str	r0, [r4, #4]
 8012ca4:	6863      	ldr	r3, [r4, #4]
 8012ca6:	6123      	str	r3, [r4, #16]
 8012ca8:	2300      	movs	r3, #0
 8012caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cae:	e7a7      	b.n	8012c00 <_printf_i+0x118>
 8012cb0:	6923      	ldr	r3, [r4, #16]
 8012cb2:	462a      	mov	r2, r5
 8012cb4:	4639      	mov	r1, r7
 8012cb6:	4630      	mov	r0, r6
 8012cb8:	47c0      	blx	r8
 8012cba:	3001      	adds	r0, #1
 8012cbc:	d0aa      	beq.n	8012c14 <_printf_i+0x12c>
 8012cbe:	6823      	ldr	r3, [r4, #0]
 8012cc0:	079b      	lsls	r3, r3, #30
 8012cc2:	d413      	bmi.n	8012cec <_printf_i+0x204>
 8012cc4:	68e0      	ldr	r0, [r4, #12]
 8012cc6:	9b03      	ldr	r3, [sp, #12]
 8012cc8:	4298      	cmp	r0, r3
 8012cca:	bfb8      	it	lt
 8012ccc:	4618      	movlt	r0, r3
 8012cce:	e7a3      	b.n	8012c18 <_printf_i+0x130>
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	464a      	mov	r2, r9
 8012cd4:	4639      	mov	r1, r7
 8012cd6:	4630      	mov	r0, r6
 8012cd8:	47c0      	blx	r8
 8012cda:	3001      	adds	r0, #1
 8012cdc:	d09a      	beq.n	8012c14 <_printf_i+0x12c>
 8012cde:	3501      	adds	r5, #1
 8012ce0:	68e3      	ldr	r3, [r4, #12]
 8012ce2:	9a03      	ldr	r2, [sp, #12]
 8012ce4:	1a9b      	subs	r3, r3, r2
 8012ce6:	42ab      	cmp	r3, r5
 8012ce8:	dcf2      	bgt.n	8012cd0 <_printf_i+0x1e8>
 8012cea:	e7eb      	b.n	8012cc4 <_printf_i+0x1dc>
 8012cec:	2500      	movs	r5, #0
 8012cee:	f104 0919 	add.w	r9, r4, #25
 8012cf2:	e7f5      	b.n	8012ce0 <_printf_i+0x1f8>
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d1ac      	bne.n	8012c52 <_printf_i+0x16a>
 8012cf8:	7803      	ldrb	r3, [r0, #0]
 8012cfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012cfe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d02:	e76c      	b.n	8012bde <_printf_i+0xf6>
 8012d04:	0801594c 	.word	0x0801594c
 8012d08:	0801595d 	.word	0x0801595d

08012d0c <_sbrk_r>:
 8012d0c:	b538      	push	{r3, r4, r5, lr}
 8012d0e:	4c06      	ldr	r4, [pc, #24]	; (8012d28 <_sbrk_r+0x1c>)
 8012d10:	2300      	movs	r3, #0
 8012d12:	4605      	mov	r5, r0
 8012d14:	4608      	mov	r0, r1
 8012d16:	6023      	str	r3, [r4, #0]
 8012d18:	f7f0 f8ca 	bl	8002eb0 <_sbrk>
 8012d1c:	1c43      	adds	r3, r0, #1
 8012d1e:	d102      	bne.n	8012d26 <_sbrk_r+0x1a>
 8012d20:	6823      	ldr	r3, [r4, #0]
 8012d22:	b103      	cbz	r3, 8012d26 <_sbrk_r+0x1a>
 8012d24:	602b      	str	r3, [r5, #0]
 8012d26:	bd38      	pop	{r3, r4, r5, pc}
 8012d28:	2000e32c 	.word	0x2000e32c

08012d2c <__malloc_lock>:
 8012d2c:	4770      	bx	lr

08012d2e <__malloc_unlock>:
 8012d2e:	4770      	bx	lr

08012d30 <_free_r>:
 8012d30:	b538      	push	{r3, r4, r5, lr}
 8012d32:	4605      	mov	r5, r0
 8012d34:	2900      	cmp	r1, #0
 8012d36:	d045      	beq.n	8012dc4 <_free_r+0x94>
 8012d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d3c:	1f0c      	subs	r4, r1, #4
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	bfb8      	it	lt
 8012d42:	18e4      	addlt	r4, r4, r3
 8012d44:	f7ff fff2 	bl	8012d2c <__malloc_lock>
 8012d48:	4a1f      	ldr	r2, [pc, #124]	; (8012dc8 <_free_r+0x98>)
 8012d4a:	6813      	ldr	r3, [r2, #0]
 8012d4c:	4610      	mov	r0, r2
 8012d4e:	b933      	cbnz	r3, 8012d5e <_free_r+0x2e>
 8012d50:	6063      	str	r3, [r4, #4]
 8012d52:	6014      	str	r4, [r2, #0]
 8012d54:	4628      	mov	r0, r5
 8012d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d5a:	f7ff bfe8 	b.w	8012d2e <__malloc_unlock>
 8012d5e:	42a3      	cmp	r3, r4
 8012d60:	d90c      	bls.n	8012d7c <_free_r+0x4c>
 8012d62:	6821      	ldr	r1, [r4, #0]
 8012d64:	1862      	adds	r2, r4, r1
 8012d66:	4293      	cmp	r3, r2
 8012d68:	bf04      	itt	eq
 8012d6a:	681a      	ldreq	r2, [r3, #0]
 8012d6c:	685b      	ldreq	r3, [r3, #4]
 8012d6e:	6063      	str	r3, [r4, #4]
 8012d70:	bf04      	itt	eq
 8012d72:	1852      	addeq	r2, r2, r1
 8012d74:	6022      	streq	r2, [r4, #0]
 8012d76:	6004      	str	r4, [r0, #0]
 8012d78:	e7ec      	b.n	8012d54 <_free_r+0x24>
 8012d7a:	4613      	mov	r3, r2
 8012d7c:	685a      	ldr	r2, [r3, #4]
 8012d7e:	b10a      	cbz	r2, 8012d84 <_free_r+0x54>
 8012d80:	42a2      	cmp	r2, r4
 8012d82:	d9fa      	bls.n	8012d7a <_free_r+0x4a>
 8012d84:	6819      	ldr	r1, [r3, #0]
 8012d86:	1858      	adds	r0, r3, r1
 8012d88:	42a0      	cmp	r0, r4
 8012d8a:	d10b      	bne.n	8012da4 <_free_r+0x74>
 8012d8c:	6820      	ldr	r0, [r4, #0]
 8012d8e:	4401      	add	r1, r0
 8012d90:	1858      	adds	r0, r3, r1
 8012d92:	4282      	cmp	r2, r0
 8012d94:	6019      	str	r1, [r3, #0]
 8012d96:	d1dd      	bne.n	8012d54 <_free_r+0x24>
 8012d98:	6810      	ldr	r0, [r2, #0]
 8012d9a:	6852      	ldr	r2, [r2, #4]
 8012d9c:	605a      	str	r2, [r3, #4]
 8012d9e:	4401      	add	r1, r0
 8012da0:	6019      	str	r1, [r3, #0]
 8012da2:	e7d7      	b.n	8012d54 <_free_r+0x24>
 8012da4:	d902      	bls.n	8012dac <_free_r+0x7c>
 8012da6:	230c      	movs	r3, #12
 8012da8:	602b      	str	r3, [r5, #0]
 8012daa:	e7d3      	b.n	8012d54 <_free_r+0x24>
 8012dac:	6820      	ldr	r0, [r4, #0]
 8012dae:	1821      	adds	r1, r4, r0
 8012db0:	428a      	cmp	r2, r1
 8012db2:	bf04      	itt	eq
 8012db4:	6811      	ldreq	r1, [r2, #0]
 8012db6:	6852      	ldreq	r2, [r2, #4]
 8012db8:	6062      	str	r2, [r4, #4]
 8012dba:	bf04      	itt	eq
 8012dbc:	1809      	addeq	r1, r1, r0
 8012dbe:	6021      	streq	r1, [r4, #0]
 8012dc0:	605c      	str	r4, [r3, #4]
 8012dc2:	e7c7      	b.n	8012d54 <_free_r+0x24>
 8012dc4:	bd38      	pop	{r3, r4, r5, pc}
 8012dc6:	bf00      	nop
 8012dc8:	20000468 	.word	0x20000468

08012dcc <_realloc_r>:
 8012dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dce:	4607      	mov	r7, r0
 8012dd0:	4614      	mov	r4, r2
 8012dd2:	460e      	mov	r6, r1
 8012dd4:	b921      	cbnz	r1, 8012de0 <_realloc_r+0x14>
 8012dd6:	4611      	mov	r1, r2
 8012dd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012ddc:	f7ff bc62 	b.w	80126a4 <_malloc_r>
 8012de0:	b922      	cbnz	r2, 8012dec <_realloc_r+0x20>
 8012de2:	f7ff ffa5 	bl	8012d30 <_free_r>
 8012de6:	4625      	mov	r5, r4
 8012de8:	4628      	mov	r0, r5
 8012dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dec:	f000 f814 	bl	8012e18 <_malloc_usable_size_r>
 8012df0:	42a0      	cmp	r0, r4
 8012df2:	d20f      	bcs.n	8012e14 <_realloc_r+0x48>
 8012df4:	4621      	mov	r1, r4
 8012df6:	4638      	mov	r0, r7
 8012df8:	f7ff fc54 	bl	80126a4 <_malloc_r>
 8012dfc:	4605      	mov	r5, r0
 8012dfe:	2800      	cmp	r0, #0
 8012e00:	d0f2      	beq.n	8012de8 <_realloc_r+0x1c>
 8012e02:	4631      	mov	r1, r6
 8012e04:	4622      	mov	r2, r4
 8012e06:	f7ff f8fd 	bl	8012004 <memcpy>
 8012e0a:	4631      	mov	r1, r6
 8012e0c:	4638      	mov	r0, r7
 8012e0e:	f7ff ff8f 	bl	8012d30 <_free_r>
 8012e12:	e7e9      	b.n	8012de8 <_realloc_r+0x1c>
 8012e14:	4635      	mov	r5, r6
 8012e16:	e7e7      	b.n	8012de8 <_realloc_r+0x1c>

08012e18 <_malloc_usable_size_r>:
 8012e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e1c:	1f18      	subs	r0, r3, #4
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	bfbc      	itt	lt
 8012e22:	580b      	ldrlt	r3, [r1, r0]
 8012e24:	18c0      	addlt	r0, r0, r3
 8012e26:	4770      	bx	lr

08012e28 <sin>:
 8012e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e2a:	ec51 0b10 	vmov	r0, r1, d0
 8012e2e:	4a20      	ldr	r2, [pc, #128]	; (8012eb0 <sin+0x88>)
 8012e30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012e34:	4293      	cmp	r3, r2
 8012e36:	dc07      	bgt.n	8012e48 <sin+0x20>
 8012e38:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012ea8 <sin+0x80>
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	f001 fd67 	bl	8014910 <__kernel_sin>
 8012e42:	ec51 0b10 	vmov	r0, r1, d0
 8012e46:	e007      	b.n	8012e58 <sin+0x30>
 8012e48:	4a1a      	ldr	r2, [pc, #104]	; (8012eb4 <sin+0x8c>)
 8012e4a:	4293      	cmp	r3, r2
 8012e4c:	dd09      	ble.n	8012e62 <sin+0x3a>
 8012e4e:	ee10 2a10 	vmov	r2, s0
 8012e52:	460b      	mov	r3, r1
 8012e54:	f7ed fa30 	bl	80002b8 <__aeabi_dsub>
 8012e58:	ec41 0b10 	vmov	d0, r0, r1
 8012e5c:	b005      	add	sp, #20
 8012e5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e62:	4668      	mov	r0, sp
 8012e64:	f000 fea8 	bl	8013bb8 <__ieee754_rem_pio2>
 8012e68:	f000 0003 	and.w	r0, r0, #3
 8012e6c:	2801      	cmp	r0, #1
 8012e6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e72:	ed9d 0b00 	vldr	d0, [sp]
 8012e76:	d004      	beq.n	8012e82 <sin+0x5a>
 8012e78:	2802      	cmp	r0, #2
 8012e7a:	d005      	beq.n	8012e88 <sin+0x60>
 8012e7c:	b970      	cbnz	r0, 8012e9c <sin+0x74>
 8012e7e:	2001      	movs	r0, #1
 8012e80:	e7dd      	b.n	8012e3e <sin+0x16>
 8012e82:	f001 f93d 	bl	8014100 <__kernel_cos>
 8012e86:	e7dc      	b.n	8012e42 <sin+0x1a>
 8012e88:	2001      	movs	r0, #1
 8012e8a:	f001 fd41 	bl	8014910 <__kernel_sin>
 8012e8e:	ec53 2b10 	vmov	r2, r3, d0
 8012e92:	ee10 0a10 	vmov	r0, s0
 8012e96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012e9a:	e7dd      	b.n	8012e58 <sin+0x30>
 8012e9c:	f001 f930 	bl	8014100 <__kernel_cos>
 8012ea0:	e7f5      	b.n	8012e8e <sin+0x66>
 8012ea2:	bf00      	nop
 8012ea4:	f3af 8000 	nop.w
	...
 8012eb0:	3fe921fb 	.word	0x3fe921fb
 8012eb4:	7fefffff 	.word	0x7fefffff

08012eb8 <pow>:
 8012eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ebc:	ed2d 8b04 	vpush	{d8-d9}
 8012ec0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013194 <pow+0x2dc>
 8012ec4:	b08d      	sub	sp, #52	; 0x34
 8012ec6:	ec57 6b10 	vmov	r6, r7, d0
 8012eca:	ec55 4b11 	vmov	r4, r5, d1
 8012ece:	f000 f963 	bl	8013198 <__ieee754_pow>
 8012ed2:	f999 3000 	ldrsb.w	r3, [r9]
 8012ed6:	9300      	str	r3, [sp, #0]
 8012ed8:	3301      	adds	r3, #1
 8012eda:	eeb0 8a40 	vmov.f32	s16, s0
 8012ede:	eef0 8a60 	vmov.f32	s17, s1
 8012ee2:	46c8      	mov	r8, r9
 8012ee4:	d05f      	beq.n	8012fa6 <pow+0xee>
 8012ee6:	4622      	mov	r2, r4
 8012ee8:	462b      	mov	r3, r5
 8012eea:	4620      	mov	r0, r4
 8012eec:	4629      	mov	r1, r5
 8012eee:	f7ed fe35 	bl	8000b5c <__aeabi_dcmpun>
 8012ef2:	4683      	mov	fp, r0
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	d156      	bne.n	8012fa6 <pow+0xee>
 8012ef8:	4632      	mov	r2, r6
 8012efa:	463b      	mov	r3, r7
 8012efc:	4630      	mov	r0, r6
 8012efe:	4639      	mov	r1, r7
 8012f00:	f7ed fe2c 	bl	8000b5c <__aeabi_dcmpun>
 8012f04:	9001      	str	r0, [sp, #4]
 8012f06:	b1e8      	cbz	r0, 8012f44 <pow+0x8c>
 8012f08:	2200      	movs	r2, #0
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	4629      	mov	r1, r5
 8012f10:	f7ed fdf2 	bl	8000af8 <__aeabi_dcmpeq>
 8012f14:	2800      	cmp	r0, #0
 8012f16:	d046      	beq.n	8012fa6 <pow+0xee>
 8012f18:	2301      	movs	r3, #1
 8012f1a:	9302      	str	r3, [sp, #8]
 8012f1c:	4b96      	ldr	r3, [pc, #600]	; (8013178 <pow+0x2c0>)
 8012f1e:	9303      	str	r3, [sp, #12]
 8012f20:	4b96      	ldr	r3, [pc, #600]	; (801317c <pow+0x2c4>)
 8012f22:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8012f26:	2200      	movs	r2, #0
 8012f28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012f2c:	9b00      	ldr	r3, [sp, #0]
 8012f2e:	2b02      	cmp	r3, #2
 8012f30:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012f34:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012f38:	d033      	beq.n	8012fa2 <pow+0xea>
 8012f3a:	a802      	add	r0, sp, #8
 8012f3c:	f001 fe38 	bl	8014bb0 <matherr>
 8012f40:	bb48      	cbnz	r0, 8012f96 <pow+0xde>
 8012f42:	e05d      	b.n	8013000 <pow+0x148>
 8012f44:	f04f 0a00 	mov.w	sl, #0
 8012f48:	f04f 0b00 	mov.w	fp, #0
 8012f4c:	4652      	mov	r2, sl
 8012f4e:	465b      	mov	r3, fp
 8012f50:	4630      	mov	r0, r6
 8012f52:	4639      	mov	r1, r7
 8012f54:	f7ed fdd0 	bl	8000af8 <__aeabi_dcmpeq>
 8012f58:	ec4b ab19 	vmov	d9, sl, fp
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	d054      	beq.n	801300a <pow+0x152>
 8012f60:	4652      	mov	r2, sl
 8012f62:	465b      	mov	r3, fp
 8012f64:	4620      	mov	r0, r4
 8012f66:	4629      	mov	r1, r5
 8012f68:	f7ed fdc6 	bl	8000af8 <__aeabi_dcmpeq>
 8012f6c:	4680      	mov	r8, r0
 8012f6e:	b318      	cbz	r0, 8012fb8 <pow+0x100>
 8012f70:	2301      	movs	r3, #1
 8012f72:	9302      	str	r3, [sp, #8]
 8012f74:	4b80      	ldr	r3, [pc, #512]	; (8013178 <pow+0x2c0>)
 8012f76:	9303      	str	r3, [sp, #12]
 8012f78:	9b01      	ldr	r3, [sp, #4]
 8012f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f7c:	9b00      	ldr	r3, [sp, #0]
 8012f7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012f82:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012f86:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d0d5      	beq.n	8012f3a <pow+0x82>
 8012f8e:	4b7b      	ldr	r3, [pc, #492]	; (801317c <pow+0x2c4>)
 8012f90:	2200      	movs	r2, #0
 8012f92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f98:	b11b      	cbz	r3, 8012fa2 <pow+0xea>
 8012f9a:	f7fe ffe5 	bl	8011f68 <__errno>
 8012f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fa0:	6003      	str	r3, [r0, #0]
 8012fa2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8012fa6:	eeb0 0a48 	vmov.f32	s0, s16
 8012faa:	eef0 0a68 	vmov.f32	s1, s17
 8012fae:	b00d      	add	sp, #52	; 0x34
 8012fb0:	ecbd 8b04 	vpop	{d8-d9}
 8012fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fb8:	ec45 4b10 	vmov	d0, r4, r5
 8012fbc:	f001 fd6b 	bl	8014a96 <finite>
 8012fc0:	2800      	cmp	r0, #0
 8012fc2:	d0f0      	beq.n	8012fa6 <pow+0xee>
 8012fc4:	4652      	mov	r2, sl
 8012fc6:	465b      	mov	r3, fp
 8012fc8:	4620      	mov	r0, r4
 8012fca:	4629      	mov	r1, r5
 8012fcc:	f7ed fd9e 	bl	8000b0c <__aeabi_dcmplt>
 8012fd0:	2800      	cmp	r0, #0
 8012fd2:	d0e8      	beq.n	8012fa6 <pow+0xee>
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	9302      	str	r3, [sp, #8]
 8012fd8:	4b67      	ldr	r3, [pc, #412]	; (8013178 <pow+0x2c0>)
 8012fda:	9303      	str	r3, [sp, #12]
 8012fdc:	f999 3000 	ldrsb.w	r3, [r9]
 8012fe0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8012fe4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012fe8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012fec:	b913      	cbnz	r3, 8012ff4 <pow+0x13c>
 8012fee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012ff2:	e7a2      	b.n	8012f3a <pow+0x82>
 8012ff4:	4962      	ldr	r1, [pc, #392]	; (8013180 <pow+0x2c8>)
 8012ff6:	2000      	movs	r0, #0
 8012ff8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012ffc:	2b02      	cmp	r3, #2
 8012ffe:	d19c      	bne.n	8012f3a <pow+0x82>
 8013000:	f7fe ffb2 	bl	8011f68 <__errno>
 8013004:	2321      	movs	r3, #33	; 0x21
 8013006:	6003      	str	r3, [r0, #0]
 8013008:	e7c5      	b.n	8012f96 <pow+0xde>
 801300a:	eeb0 0a48 	vmov.f32	s0, s16
 801300e:	eef0 0a68 	vmov.f32	s1, s17
 8013012:	f001 fd40 	bl	8014a96 <finite>
 8013016:	9000      	str	r0, [sp, #0]
 8013018:	2800      	cmp	r0, #0
 801301a:	f040 8081 	bne.w	8013120 <pow+0x268>
 801301e:	ec47 6b10 	vmov	d0, r6, r7
 8013022:	f001 fd38 	bl	8014a96 <finite>
 8013026:	2800      	cmp	r0, #0
 8013028:	d07a      	beq.n	8013120 <pow+0x268>
 801302a:	ec45 4b10 	vmov	d0, r4, r5
 801302e:	f001 fd32 	bl	8014a96 <finite>
 8013032:	2800      	cmp	r0, #0
 8013034:	d074      	beq.n	8013120 <pow+0x268>
 8013036:	ec53 2b18 	vmov	r2, r3, d8
 801303a:	ee18 0a10 	vmov	r0, s16
 801303e:	4619      	mov	r1, r3
 8013040:	f7ed fd8c 	bl	8000b5c <__aeabi_dcmpun>
 8013044:	f999 9000 	ldrsb.w	r9, [r9]
 8013048:	4b4b      	ldr	r3, [pc, #300]	; (8013178 <pow+0x2c0>)
 801304a:	b1b0      	cbz	r0, 801307a <pow+0x1c2>
 801304c:	2201      	movs	r2, #1
 801304e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013052:	9b00      	ldr	r3, [sp, #0]
 8013054:	930a      	str	r3, [sp, #40]	; 0x28
 8013056:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801305a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801305e:	f1b9 0f00 	cmp.w	r9, #0
 8013062:	d0c4      	beq.n	8012fee <pow+0x136>
 8013064:	4652      	mov	r2, sl
 8013066:	465b      	mov	r3, fp
 8013068:	4650      	mov	r0, sl
 801306a:	4659      	mov	r1, fp
 801306c:	f7ed fc06 	bl	800087c <__aeabi_ddiv>
 8013070:	f1b9 0f02 	cmp.w	r9, #2
 8013074:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013078:	e7c1      	b.n	8012ffe <pow+0x146>
 801307a:	2203      	movs	r2, #3
 801307c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013080:	900a      	str	r0, [sp, #40]	; 0x28
 8013082:	4629      	mov	r1, r5
 8013084:	4620      	mov	r0, r4
 8013086:	2200      	movs	r2, #0
 8013088:	4b3e      	ldr	r3, [pc, #248]	; (8013184 <pow+0x2cc>)
 801308a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801308e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013092:	f7ed fac9 	bl	8000628 <__aeabi_dmul>
 8013096:	4604      	mov	r4, r0
 8013098:	460d      	mov	r5, r1
 801309a:	f1b9 0f00 	cmp.w	r9, #0
 801309e:	d124      	bne.n	80130ea <pow+0x232>
 80130a0:	4b39      	ldr	r3, [pc, #228]	; (8013188 <pow+0x2d0>)
 80130a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80130a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80130aa:	4630      	mov	r0, r6
 80130ac:	4652      	mov	r2, sl
 80130ae:	465b      	mov	r3, fp
 80130b0:	4639      	mov	r1, r7
 80130b2:	f7ed fd2b 	bl	8000b0c <__aeabi_dcmplt>
 80130b6:	2800      	cmp	r0, #0
 80130b8:	d056      	beq.n	8013168 <pow+0x2b0>
 80130ba:	ec45 4b10 	vmov	d0, r4, r5
 80130be:	f001 fd83 	bl	8014bc8 <rint>
 80130c2:	4622      	mov	r2, r4
 80130c4:	462b      	mov	r3, r5
 80130c6:	ec51 0b10 	vmov	r0, r1, d0
 80130ca:	f7ed fd15 	bl	8000af8 <__aeabi_dcmpeq>
 80130ce:	b920      	cbnz	r0, 80130da <pow+0x222>
 80130d0:	4b2e      	ldr	r3, [pc, #184]	; (801318c <pow+0x2d4>)
 80130d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80130d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80130da:	f998 3000 	ldrsb.w	r3, [r8]
 80130de:	2b02      	cmp	r3, #2
 80130e0:	d142      	bne.n	8013168 <pow+0x2b0>
 80130e2:	f7fe ff41 	bl	8011f68 <__errno>
 80130e6:	2322      	movs	r3, #34	; 0x22
 80130e8:	e78d      	b.n	8013006 <pow+0x14e>
 80130ea:	4b29      	ldr	r3, [pc, #164]	; (8013190 <pow+0x2d8>)
 80130ec:	2200      	movs	r2, #0
 80130ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80130f2:	4630      	mov	r0, r6
 80130f4:	4652      	mov	r2, sl
 80130f6:	465b      	mov	r3, fp
 80130f8:	4639      	mov	r1, r7
 80130fa:	f7ed fd07 	bl	8000b0c <__aeabi_dcmplt>
 80130fe:	2800      	cmp	r0, #0
 8013100:	d0eb      	beq.n	80130da <pow+0x222>
 8013102:	ec45 4b10 	vmov	d0, r4, r5
 8013106:	f001 fd5f 	bl	8014bc8 <rint>
 801310a:	4622      	mov	r2, r4
 801310c:	462b      	mov	r3, r5
 801310e:	ec51 0b10 	vmov	r0, r1, d0
 8013112:	f7ed fcf1 	bl	8000af8 <__aeabi_dcmpeq>
 8013116:	2800      	cmp	r0, #0
 8013118:	d1df      	bne.n	80130da <pow+0x222>
 801311a:	2200      	movs	r2, #0
 801311c:	4b18      	ldr	r3, [pc, #96]	; (8013180 <pow+0x2c8>)
 801311e:	e7da      	b.n	80130d6 <pow+0x21e>
 8013120:	2200      	movs	r2, #0
 8013122:	2300      	movs	r3, #0
 8013124:	ec51 0b18 	vmov	r0, r1, d8
 8013128:	f7ed fce6 	bl	8000af8 <__aeabi_dcmpeq>
 801312c:	2800      	cmp	r0, #0
 801312e:	f43f af3a 	beq.w	8012fa6 <pow+0xee>
 8013132:	ec47 6b10 	vmov	d0, r6, r7
 8013136:	f001 fcae 	bl	8014a96 <finite>
 801313a:	2800      	cmp	r0, #0
 801313c:	f43f af33 	beq.w	8012fa6 <pow+0xee>
 8013140:	ec45 4b10 	vmov	d0, r4, r5
 8013144:	f001 fca7 	bl	8014a96 <finite>
 8013148:	2800      	cmp	r0, #0
 801314a:	f43f af2c 	beq.w	8012fa6 <pow+0xee>
 801314e:	2304      	movs	r3, #4
 8013150:	9302      	str	r3, [sp, #8]
 8013152:	4b09      	ldr	r3, [pc, #36]	; (8013178 <pow+0x2c0>)
 8013154:	9303      	str	r3, [sp, #12]
 8013156:	2300      	movs	r3, #0
 8013158:	930a      	str	r3, [sp, #40]	; 0x28
 801315a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801315e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013162:	ed8d 9b08 	vstr	d9, [sp, #32]
 8013166:	e7b8      	b.n	80130da <pow+0x222>
 8013168:	a802      	add	r0, sp, #8
 801316a:	f001 fd21 	bl	8014bb0 <matherr>
 801316e:	2800      	cmp	r0, #0
 8013170:	f47f af11 	bne.w	8012f96 <pow+0xde>
 8013174:	e7b5      	b.n	80130e2 <pow+0x22a>
 8013176:	bf00      	nop
 8013178:	0801596e 	.word	0x0801596e
 801317c:	3ff00000 	.word	0x3ff00000
 8013180:	fff00000 	.word	0xfff00000
 8013184:	3fe00000 	.word	0x3fe00000
 8013188:	47efffff 	.word	0x47efffff
 801318c:	c7efffff 	.word	0xc7efffff
 8013190:	7ff00000 	.word	0x7ff00000
 8013194:	200001f4 	.word	0x200001f4

08013198 <__ieee754_pow>:
 8013198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319c:	b091      	sub	sp, #68	; 0x44
 801319e:	ed8d 1b00 	vstr	d1, [sp]
 80131a2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80131a6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80131aa:	ea58 0302 	orrs.w	r3, r8, r2
 80131ae:	ec57 6b10 	vmov	r6, r7, d0
 80131b2:	f000 84be 	beq.w	8013b32 <__ieee754_pow+0x99a>
 80131b6:	4b7a      	ldr	r3, [pc, #488]	; (80133a0 <__ieee754_pow+0x208>)
 80131b8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80131bc:	429c      	cmp	r4, r3
 80131be:	463d      	mov	r5, r7
 80131c0:	ee10 aa10 	vmov	sl, s0
 80131c4:	dc09      	bgt.n	80131da <__ieee754_pow+0x42>
 80131c6:	d103      	bne.n	80131d0 <__ieee754_pow+0x38>
 80131c8:	b93e      	cbnz	r6, 80131da <__ieee754_pow+0x42>
 80131ca:	45a0      	cmp	r8, r4
 80131cc:	dc0d      	bgt.n	80131ea <__ieee754_pow+0x52>
 80131ce:	e001      	b.n	80131d4 <__ieee754_pow+0x3c>
 80131d0:	4598      	cmp	r8, r3
 80131d2:	dc02      	bgt.n	80131da <__ieee754_pow+0x42>
 80131d4:	4598      	cmp	r8, r3
 80131d6:	d10e      	bne.n	80131f6 <__ieee754_pow+0x5e>
 80131d8:	b16a      	cbz	r2, 80131f6 <__ieee754_pow+0x5e>
 80131da:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80131de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80131e2:	ea54 030a 	orrs.w	r3, r4, sl
 80131e6:	f000 84a4 	beq.w	8013b32 <__ieee754_pow+0x99a>
 80131ea:	486e      	ldr	r0, [pc, #440]	; (80133a4 <__ieee754_pow+0x20c>)
 80131ec:	b011      	add	sp, #68	; 0x44
 80131ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131f2:	f001 bce1 	b.w	8014bb8 <nan>
 80131f6:	2d00      	cmp	r5, #0
 80131f8:	da53      	bge.n	80132a2 <__ieee754_pow+0x10a>
 80131fa:	4b6b      	ldr	r3, [pc, #428]	; (80133a8 <__ieee754_pow+0x210>)
 80131fc:	4598      	cmp	r8, r3
 80131fe:	dc4d      	bgt.n	801329c <__ieee754_pow+0x104>
 8013200:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013204:	4598      	cmp	r8, r3
 8013206:	dd4c      	ble.n	80132a2 <__ieee754_pow+0x10a>
 8013208:	ea4f 5328 	mov.w	r3, r8, asr #20
 801320c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013210:	2b14      	cmp	r3, #20
 8013212:	dd26      	ble.n	8013262 <__ieee754_pow+0xca>
 8013214:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013218:	fa22 f103 	lsr.w	r1, r2, r3
 801321c:	fa01 f303 	lsl.w	r3, r1, r3
 8013220:	4293      	cmp	r3, r2
 8013222:	d13e      	bne.n	80132a2 <__ieee754_pow+0x10a>
 8013224:	f001 0101 	and.w	r1, r1, #1
 8013228:	f1c1 0b02 	rsb	fp, r1, #2
 801322c:	2a00      	cmp	r2, #0
 801322e:	d15b      	bne.n	80132e8 <__ieee754_pow+0x150>
 8013230:	4b5b      	ldr	r3, [pc, #364]	; (80133a0 <__ieee754_pow+0x208>)
 8013232:	4598      	cmp	r8, r3
 8013234:	d124      	bne.n	8013280 <__ieee754_pow+0xe8>
 8013236:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801323a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801323e:	ea53 030a 	orrs.w	r3, r3, sl
 8013242:	f000 8476 	beq.w	8013b32 <__ieee754_pow+0x99a>
 8013246:	4b59      	ldr	r3, [pc, #356]	; (80133ac <__ieee754_pow+0x214>)
 8013248:	429c      	cmp	r4, r3
 801324a:	dd2d      	ble.n	80132a8 <__ieee754_pow+0x110>
 801324c:	f1b9 0f00 	cmp.w	r9, #0
 8013250:	f280 8473 	bge.w	8013b3a <__ieee754_pow+0x9a2>
 8013254:	2000      	movs	r0, #0
 8013256:	2100      	movs	r1, #0
 8013258:	ec41 0b10 	vmov	d0, r0, r1
 801325c:	b011      	add	sp, #68	; 0x44
 801325e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013262:	2a00      	cmp	r2, #0
 8013264:	d13e      	bne.n	80132e4 <__ieee754_pow+0x14c>
 8013266:	f1c3 0314 	rsb	r3, r3, #20
 801326a:	fa48 f103 	asr.w	r1, r8, r3
 801326e:	fa01 f303 	lsl.w	r3, r1, r3
 8013272:	4543      	cmp	r3, r8
 8013274:	f040 8469 	bne.w	8013b4a <__ieee754_pow+0x9b2>
 8013278:	f001 0101 	and.w	r1, r1, #1
 801327c:	f1c1 0b02 	rsb	fp, r1, #2
 8013280:	4b4b      	ldr	r3, [pc, #300]	; (80133b0 <__ieee754_pow+0x218>)
 8013282:	4598      	cmp	r8, r3
 8013284:	d118      	bne.n	80132b8 <__ieee754_pow+0x120>
 8013286:	f1b9 0f00 	cmp.w	r9, #0
 801328a:	f280 845a 	bge.w	8013b42 <__ieee754_pow+0x9aa>
 801328e:	4948      	ldr	r1, [pc, #288]	; (80133b0 <__ieee754_pow+0x218>)
 8013290:	4632      	mov	r2, r6
 8013292:	463b      	mov	r3, r7
 8013294:	2000      	movs	r0, #0
 8013296:	f7ed faf1 	bl	800087c <__aeabi_ddiv>
 801329a:	e7dd      	b.n	8013258 <__ieee754_pow+0xc0>
 801329c:	f04f 0b02 	mov.w	fp, #2
 80132a0:	e7c4      	b.n	801322c <__ieee754_pow+0x94>
 80132a2:	f04f 0b00 	mov.w	fp, #0
 80132a6:	e7c1      	b.n	801322c <__ieee754_pow+0x94>
 80132a8:	f1b9 0f00 	cmp.w	r9, #0
 80132ac:	dad2      	bge.n	8013254 <__ieee754_pow+0xbc>
 80132ae:	e9dd 0300 	ldrd	r0, r3, [sp]
 80132b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80132b6:	e7cf      	b.n	8013258 <__ieee754_pow+0xc0>
 80132b8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80132bc:	d106      	bne.n	80132cc <__ieee754_pow+0x134>
 80132be:	4632      	mov	r2, r6
 80132c0:	463b      	mov	r3, r7
 80132c2:	4610      	mov	r0, r2
 80132c4:	4619      	mov	r1, r3
 80132c6:	f7ed f9af 	bl	8000628 <__aeabi_dmul>
 80132ca:	e7c5      	b.n	8013258 <__ieee754_pow+0xc0>
 80132cc:	4b39      	ldr	r3, [pc, #228]	; (80133b4 <__ieee754_pow+0x21c>)
 80132ce:	4599      	cmp	r9, r3
 80132d0:	d10a      	bne.n	80132e8 <__ieee754_pow+0x150>
 80132d2:	2d00      	cmp	r5, #0
 80132d4:	db08      	blt.n	80132e8 <__ieee754_pow+0x150>
 80132d6:	ec47 6b10 	vmov	d0, r6, r7
 80132da:	b011      	add	sp, #68	; 0x44
 80132dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e0:	f000 be5c 	b.w	8013f9c <__ieee754_sqrt>
 80132e4:	f04f 0b00 	mov.w	fp, #0
 80132e8:	ec47 6b10 	vmov	d0, r6, r7
 80132ec:	f001 fbca 	bl	8014a84 <fabs>
 80132f0:	ec51 0b10 	vmov	r0, r1, d0
 80132f4:	f1ba 0f00 	cmp.w	sl, #0
 80132f8:	d127      	bne.n	801334a <__ieee754_pow+0x1b2>
 80132fa:	b124      	cbz	r4, 8013306 <__ieee754_pow+0x16e>
 80132fc:	4b2c      	ldr	r3, [pc, #176]	; (80133b0 <__ieee754_pow+0x218>)
 80132fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013302:	429a      	cmp	r2, r3
 8013304:	d121      	bne.n	801334a <__ieee754_pow+0x1b2>
 8013306:	f1b9 0f00 	cmp.w	r9, #0
 801330a:	da05      	bge.n	8013318 <__ieee754_pow+0x180>
 801330c:	4602      	mov	r2, r0
 801330e:	460b      	mov	r3, r1
 8013310:	2000      	movs	r0, #0
 8013312:	4927      	ldr	r1, [pc, #156]	; (80133b0 <__ieee754_pow+0x218>)
 8013314:	f7ed fab2 	bl	800087c <__aeabi_ddiv>
 8013318:	2d00      	cmp	r5, #0
 801331a:	da9d      	bge.n	8013258 <__ieee754_pow+0xc0>
 801331c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013320:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013324:	ea54 030b 	orrs.w	r3, r4, fp
 8013328:	d108      	bne.n	801333c <__ieee754_pow+0x1a4>
 801332a:	4602      	mov	r2, r0
 801332c:	460b      	mov	r3, r1
 801332e:	4610      	mov	r0, r2
 8013330:	4619      	mov	r1, r3
 8013332:	f7ec ffc1 	bl	80002b8 <__aeabi_dsub>
 8013336:	4602      	mov	r2, r0
 8013338:	460b      	mov	r3, r1
 801333a:	e7ac      	b.n	8013296 <__ieee754_pow+0xfe>
 801333c:	f1bb 0f01 	cmp.w	fp, #1
 8013340:	d18a      	bne.n	8013258 <__ieee754_pow+0xc0>
 8013342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013346:	4619      	mov	r1, r3
 8013348:	e786      	b.n	8013258 <__ieee754_pow+0xc0>
 801334a:	0fed      	lsrs	r5, r5, #31
 801334c:	1e6b      	subs	r3, r5, #1
 801334e:	930d      	str	r3, [sp, #52]	; 0x34
 8013350:	ea5b 0303 	orrs.w	r3, fp, r3
 8013354:	d102      	bne.n	801335c <__ieee754_pow+0x1c4>
 8013356:	4632      	mov	r2, r6
 8013358:	463b      	mov	r3, r7
 801335a:	e7e8      	b.n	801332e <__ieee754_pow+0x196>
 801335c:	4b16      	ldr	r3, [pc, #88]	; (80133b8 <__ieee754_pow+0x220>)
 801335e:	4598      	cmp	r8, r3
 8013360:	f340 80fe 	ble.w	8013560 <__ieee754_pow+0x3c8>
 8013364:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013368:	4598      	cmp	r8, r3
 801336a:	dd0a      	ble.n	8013382 <__ieee754_pow+0x1ea>
 801336c:	4b0f      	ldr	r3, [pc, #60]	; (80133ac <__ieee754_pow+0x214>)
 801336e:	429c      	cmp	r4, r3
 8013370:	dc0d      	bgt.n	801338e <__ieee754_pow+0x1f6>
 8013372:	f1b9 0f00 	cmp.w	r9, #0
 8013376:	f6bf af6d 	bge.w	8013254 <__ieee754_pow+0xbc>
 801337a:	a307      	add	r3, pc, #28	; (adr r3, 8013398 <__ieee754_pow+0x200>)
 801337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013380:	e79f      	b.n	80132c2 <__ieee754_pow+0x12a>
 8013382:	4b0e      	ldr	r3, [pc, #56]	; (80133bc <__ieee754_pow+0x224>)
 8013384:	429c      	cmp	r4, r3
 8013386:	ddf4      	ble.n	8013372 <__ieee754_pow+0x1da>
 8013388:	4b09      	ldr	r3, [pc, #36]	; (80133b0 <__ieee754_pow+0x218>)
 801338a:	429c      	cmp	r4, r3
 801338c:	dd18      	ble.n	80133c0 <__ieee754_pow+0x228>
 801338e:	f1b9 0f00 	cmp.w	r9, #0
 8013392:	dcf2      	bgt.n	801337a <__ieee754_pow+0x1e2>
 8013394:	e75e      	b.n	8013254 <__ieee754_pow+0xbc>
 8013396:	bf00      	nop
 8013398:	8800759c 	.word	0x8800759c
 801339c:	7e37e43c 	.word	0x7e37e43c
 80133a0:	7ff00000 	.word	0x7ff00000
 80133a4:	08015940 	.word	0x08015940
 80133a8:	433fffff 	.word	0x433fffff
 80133ac:	3fefffff 	.word	0x3fefffff
 80133b0:	3ff00000 	.word	0x3ff00000
 80133b4:	3fe00000 	.word	0x3fe00000
 80133b8:	41e00000 	.word	0x41e00000
 80133bc:	3feffffe 	.word	0x3feffffe
 80133c0:	2200      	movs	r2, #0
 80133c2:	4b63      	ldr	r3, [pc, #396]	; (8013550 <__ieee754_pow+0x3b8>)
 80133c4:	f7ec ff78 	bl	80002b8 <__aeabi_dsub>
 80133c8:	a355      	add	r3, pc, #340	; (adr r3, 8013520 <__ieee754_pow+0x388>)
 80133ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ce:	4604      	mov	r4, r0
 80133d0:	460d      	mov	r5, r1
 80133d2:	f7ed f929 	bl	8000628 <__aeabi_dmul>
 80133d6:	a354      	add	r3, pc, #336	; (adr r3, 8013528 <__ieee754_pow+0x390>)
 80133d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133dc:	4606      	mov	r6, r0
 80133de:	460f      	mov	r7, r1
 80133e0:	4620      	mov	r0, r4
 80133e2:	4629      	mov	r1, r5
 80133e4:	f7ed f920 	bl	8000628 <__aeabi_dmul>
 80133e8:	2200      	movs	r2, #0
 80133ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133ee:	4b59      	ldr	r3, [pc, #356]	; (8013554 <__ieee754_pow+0x3bc>)
 80133f0:	4620      	mov	r0, r4
 80133f2:	4629      	mov	r1, r5
 80133f4:	f7ed f918 	bl	8000628 <__aeabi_dmul>
 80133f8:	4602      	mov	r2, r0
 80133fa:	460b      	mov	r3, r1
 80133fc:	a14c      	add	r1, pc, #304	; (adr r1, 8013530 <__ieee754_pow+0x398>)
 80133fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013402:	f7ec ff59 	bl	80002b8 <__aeabi_dsub>
 8013406:	4622      	mov	r2, r4
 8013408:	462b      	mov	r3, r5
 801340a:	f7ed f90d 	bl	8000628 <__aeabi_dmul>
 801340e:	4602      	mov	r2, r0
 8013410:	460b      	mov	r3, r1
 8013412:	2000      	movs	r0, #0
 8013414:	4950      	ldr	r1, [pc, #320]	; (8013558 <__ieee754_pow+0x3c0>)
 8013416:	f7ec ff4f 	bl	80002b8 <__aeabi_dsub>
 801341a:	4622      	mov	r2, r4
 801341c:	462b      	mov	r3, r5
 801341e:	4680      	mov	r8, r0
 8013420:	4689      	mov	r9, r1
 8013422:	4620      	mov	r0, r4
 8013424:	4629      	mov	r1, r5
 8013426:	f7ed f8ff 	bl	8000628 <__aeabi_dmul>
 801342a:	4602      	mov	r2, r0
 801342c:	460b      	mov	r3, r1
 801342e:	4640      	mov	r0, r8
 8013430:	4649      	mov	r1, r9
 8013432:	f7ed f8f9 	bl	8000628 <__aeabi_dmul>
 8013436:	a340      	add	r3, pc, #256	; (adr r3, 8013538 <__ieee754_pow+0x3a0>)
 8013438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801343c:	f7ed f8f4 	bl	8000628 <__aeabi_dmul>
 8013440:	4602      	mov	r2, r0
 8013442:	460b      	mov	r3, r1
 8013444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013448:	f7ec ff36 	bl	80002b8 <__aeabi_dsub>
 801344c:	4602      	mov	r2, r0
 801344e:	460b      	mov	r3, r1
 8013450:	4604      	mov	r4, r0
 8013452:	460d      	mov	r5, r1
 8013454:	4630      	mov	r0, r6
 8013456:	4639      	mov	r1, r7
 8013458:	f7ec ff30 	bl	80002bc <__adddf3>
 801345c:	2000      	movs	r0, #0
 801345e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013462:	4632      	mov	r2, r6
 8013464:	463b      	mov	r3, r7
 8013466:	f7ec ff27 	bl	80002b8 <__aeabi_dsub>
 801346a:	4602      	mov	r2, r0
 801346c:	460b      	mov	r3, r1
 801346e:	4620      	mov	r0, r4
 8013470:	4629      	mov	r1, r5
 8013472:	f7ec ff21 	bl	80002b8 <__aeabi_dsub>
 8013476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013478:	f10b 33ff 	add.w	r3, fp, #4294967295
 801347c:	4313      	orrs	r3, r2
 801347e:	4606      	mov	r6, r0
 8013480:	460f      	mov	r7, r1
 8013482:	f040 81eb 	bne.w	801385c <__ieee754_pow+0x6c4>
 8013486:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013540 <__ieee754_pow+0x3a8>
 801348a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801348e:	2400      	movs	r4, #0
 8013490:	4622      	mov	r2, r4
 8013492:	462b      	mov	r3, r5
 8013494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013498:	ed8d 7b02 	vstr	d7, [sp, #8]
 801349c:	f7ec ff0c 	bl	80002b8 <__aeabi_dsub>
 80134a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80134a4:	f7ed f8c0 	bl	8000628 <__aeabi_dmul>
 80134a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134ac:	4680      	mov	r8, r0
 80134ae:	4689      	mov	r9, r1
 80134b0:	4630      	mov	r0, r6
 80134b2:	4639      	mov	r1, r7
 80134b4:	f7ed f8b8 	bl	8000628 <__aeabi_dmul>
 80134b8:	4602      	mov	r2, r0
 80134ba:	460b      	mov	r3, r1
 80134bc:	4640      	mov	r0, r8
 80134be:	4649      	mov	r1, r9
 80134c0:	f7ec fefc 	bl	80002bc <__adddf3>
 80134c4:	4622      	mov	r2, r4
 80134c6:	462b      	mov	r3, r5
 80134c8:	4680      	mov	r8, r0
 80134ca:	4689      	mov	r9, r1
 80134cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80134d0:	f7ed f8aa 	bl	8000628 <__aeabi_dmul>
 80134d4:	460b      	mov	r3, r1
 80134d6:	4604      	mov	r4, r0
 80134d8:	460d      	mov	r5, r1
 80134da:	4602      	mov	r2, r0
 80134dc:	4649      	mov	r1, r9
 80134de:	4640      	mov	r0, r8
 80134e0:	e9cd 4500 	strd	r4, r5, [sp]
 80134e4:	f7ec feea 	bl	80002bc <__adddf3>
 80134e8:	4b1c      	ldr	r3, [pc, #112]	; (801355c <__ieee754_pow+0x3c4>)
 80134ea:	4299      	cmp	r1, r3
 80134ec:	4606      	mov	r6, r0
 80134ee:	460f      	mov	r7, r1
 80134f0:	468b      	mov	fp, r1
 80134f2:	f340 82f7 	ble.w	8013ae4 <__ieee754_pow+0x94c>
 80134f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80134fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80134fe:	4303      	orrs	r3, r0
 8013500:	f000 81ea 	beq.w	80138d8 <__ieee754_pow+0x740>
 8013504:	a310      	add	r3, pc, #64	; (adr r3, 8013548 <__ieee754_pow+0x3b0>)
 8013506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801350a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801350e:	f7ed f88b 	bl	8000628 <__aeabi_dmul>
 8013512:	a30d      	add	r3, pc, #52	; (adr r3, 8013548 <__ieee754_pow+0x3b0>)
 8013514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013518:	e6d5      	b.n	80132c6 <__ieee754_pow+0x12e>
 801351a:	bf00      	nop
 801351c:	f3af 8000 	nop.w
 8013520:	60000000 	.word	0x60000000
 8013524:	3ff71547 	.word	0x3ff71547
 8013528:	f85ddf44 	.word	0xf85ddf44
 801352c:	3e54ae0b 	.word	0x3e54ae0b
 8013530:	55555555 	.word	0x55555555
 8013534:	3fd55555 	.word	0x3fd55555
 8013538:	652b82fe 	.word	0x652b82fe
 801353c:	3ff71547 	.word	0x3ff71547
 8013540:	00000000 	.word	0x00000000
 8013544:	bff00000 	.word	0xbff00000
 8013548:	8800759c 	.word	0x8800759c
 801354c:	7e37e43c 	.word	0x7e37e43c
 8013550:	3ff00000 	.word	0x3ff00000
 8013554:	3fd00000 	.word	0x3fd00000
 8013558:	3fe00000 	.word	0x3fe00000
 801355c:	408fffff 	.word	0x408fffff
 8013560:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013564:	f04f 0200 	mov.w	r2, #0
 8013568:	da05      	bge.n	8013576 <__ieee754_pow+0x3de>
 801356a:	4bd3      	ldr	r3, [pc, #844]	; (80138b8 <__ieee754_pow+0x720>)
 801356c:	f7ed f85c 	bl	8000628 <__aeabi_dmul>
 8013570:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013574:	460c      	mov	r4, r1
 8013576:	1523      	asrs	r3, r4, #20
 8013578:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801357c:	4413      	add	r3, r2
 801357e:	9309      	str	r3, [sp, #36]	; 0x24
 8013580:	4bce      	ldr	r3, [pc, #824]	; (80138bc <__ieee754_pow+0x724>)
 8013582:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013586:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801358a:	429c      	cmp	r4, r3
 801358c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013590:	dd08      	ble.n	80135a4 <__ieee754_pow+0x40c>
 8013592:	4bcb      	ldr	r3, [pc, #812]	; (80138c0 <__ieee754_pow+0x728>)
 8013594:	429c      	cmp	r4, r3
 8013596:	f340 815e 	ble.w	8013856 <__ieee754_pow+0x6be>
 801359a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801359c:	3301      	adds	r3, #1
 801359e:	9309      	str	r3, [sp, #36]	; 0x24
 80135a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80135a4:	f04f 0a00 	mov.w	sl, #0
 80135a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80135ac:	930c      	str	r3, [sp, #48]	; 0x30
 80135ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80135b0:	4bc4      	ldr	r3, [pc, #784]	; (80138c4 <__ieee754_pow+0x72c>)
 80135b2:	4413      	add	r3, r2
 80135b4:	ed93 7b00 	vldr	d7, [r3]
 80135b8:	4629      	mov	r1, r5
 80135ba:	ec53 2b17 	vmov	r2, r3, d7
 80135be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80135c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80135c6:	f7ec fe77 	bl	80002b8 <__aeabi_dsub>
 80135ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80135ce:	4606      	mov	r6, r0
 80135d0:	460f      	mov	r7, r1
 80135d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135d6:	f7ec fe71 	bl	80002bc <__adddf3>
 80135da:	4602      	mov	r2, r0
 80135dc:	460b      	mov	r3, r1
 80135de:	2000      	movs	r0, #0
 80135e0:	49b9      	ldr	r1, [pc, #740]	; (80138c8 <__ieee754_pow+0x730>)
 80135e2:	f7ed f94b 	bl	800087c <__aeabi_ddiv>
 80135e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80135ea:	4602      	mov	r2, r0
 80135ec:	460b      	mov	r3, r1
 80135ee:	4630      	mov	r0, r6
 80135f0:	4639      	mov	r1, r7
 80135f2:	f7ed f819 	bl	8000628 <__aeabi_dmul>
 80135f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80135fa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80135fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013602:	2300      	movs	r3, #0
 8013604:	9302      	str	r3, [sp, #8]
 8013606:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801360a:	106d      	asrs	r5, r5, #1
 801360c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013610:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013614:	2200      	movs	r2, #0
 8013616:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801361a:	4640      	mov	r0, r8
 801361c:	4649      	mov	r1, r9
 801361e:	4614      	mov	r4, r2
 8013620:	461d      	mov	r5, r3
 8013622:	f7ed f801 	bl	8000628 <__aeabi_dmul>
 8013626:	4602      	mov	r2, r0
 8013628:	460b      	mov	r3, r1
 801362a:	4630      	mov	r0, r6
 801362c:	4639      	mov	r1, r7
 801362e:	f7ec fe43 	bl	80002b8 <__aeabi_dsub>
 8013632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013636:	4606      	mov	r6, r0
 8013638:	460f      	mov	r7, r1
 801363a:	4620      	mov	r0, r4
 801363c:	4629      	mov	r1, r5
 801363e:	f7ec fe3b 	bl	80002b8 <__aeabi_dsub>
 8013642:	4602      	mov	r2, r0
 8013644:	460b      	mov	r3, r1
 8013646:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801364a:	f7ec fe35 	bl	80002b8 <__aeabi_dsub>
 801364e:	4642      	mov	r2, r8
 8013650:	464b      	mov	r3, r9
 8013652:	f7ec ffe9 	bl	8000628 <__aeabi_dmul>
 8013656:	4602      	mov	r2, r0
 8013658:	460b      	mov	r3, r1
 801365a:	4630      	mov	r0, r6
 801365c:	4639      	mov	r1, r7
 801365e:	f7ec fe2b 	bl	80002b8 <__aeabi_dsub>
 8013662:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013666:	f7ec ffdf 	bl	8000628 <__aeabi_dmul>
 801366a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801366e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013672:	4610      	mov	r0, r2
 8013674:	4619      	mov	r1, r3
 8013676:	f7ec ffd7 	bl	8000628 <__aeabi_dmul>
 801367a:	a37b      	add	r3, pc, #492	; (adr r3, 8013868 <__ieee754_pow+0x6d0>)
 801367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013680:	4604      	mov	r4, r0
 8013682:	460d      	mov	r5, r1
 8013684:	f7ec ffd0 	bl	8000628 <__aeabi_dmul>
 8013688:	a379      	add	r3, pc, #484	; (adr r3, 8013870 <__ieee754_pow+0x6d8>)
 801368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801368e:	f7ec fe15 	bl	80002bc <__adddf3>
 8013692:	4622      	mov	r2, r4
 8013694:	462b      	mov	r3, r5
 8013696:	f7ec ffc7 	bl	8000628 <__aeabi_dmul>
 801369a:	a377      	add	r3, pc, #476	; (adr r3, 8013878 <__ieee754_pow+0x6e0>)
 801369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a0:	f7ec fe0c 	bl	80002bc <__adddf3>
 80136a4:	4622      	mov	r2, r4
 80136a6:	462b      	mov	r3, r5
 80136a8:	f7ec ffbe 	bl	8000628 <__aeabi_dmul>
 80136ac:	a374      	add	r3, pc, #464	; (adr r3, 8013880 <__ieee754_pow+0x6e8>)
 80136ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b2:	f7ec fe03 	bl	80002bc <__adddf3>
 80136b6:	4622      	mov	r2, r4
 80136b8:	462b      	mov	r3, r5
 80136ba:	f7ec ffb5 	bl	8000628 <__aeabi_dmul>
 80136be:	a372      	add	r3, pc, #456	; (adr r3, 8013888 <__ieee754_pow+0x6f0>)
 80136c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c4:	f7ec fdfa 	bl	80002bc <__adddf3>
 80136c8:	4622      	mov	r2, r4
 80136ca:	462b      	mov	r3, r5
 80136cc:	f7ec ffac 	bl	8000628 <__aeabi_dmul>
 80136d0:	a36f      	add	r3, pc, #444	; (adr r3, 8013890 <__ieee754_pow+0x6f8>)
 80136d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d6:	f7ec fdf1 	bl	80002bc <__adddf3>
 80136da:	4622      	mov	r2, r4
 80136dc:	4606      	mov	r6, r0
 80136de:	460f      	mov	r7, r1
 80136e0:	462b      	mov	r3, r5
 80136e2:	4620      	mov	r0, r4
 80136e4:	4629      	mov	r1, r5
 80136e6:	f7ec ff9f 	bl	8000628 <__aeabi_dmul>
 80136ea:	4602      	mov	r2, r0
 80136ec:	460b      	mov	r3, r1
 80136ee:	4630      	mov	r0, r6
 80136f0:	4639      	mov	r1, r7
 80136f2:	f7ec ff99 	bl	8000628 <__aeabi_dmul>
 80136f6:	4642      	mov	r2, r8
 80136f8:	4604      	mov	r4, r0
 80136fa:	460d      	mov	r5, r1
 80136fc:	464b      	mov	r3, r9
 80136fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013702:	f7ec fddb 	bl	80002bc <__adddf3>
 8013706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801370a:	f7ec ff8d 	bl	8000628 <__aeabi_dmul>
 801370e:	4622      	mov	r2, r4
 8013710:	462b      	mov	r3, r5
 8013712:	f7ec fdd3 	bl	80002bc <__adddf3>
 8013716:	4642      	mov	r2, r8
 8013718:	4606      	mov	r6, r0
 801371a:	460f      	mov	r7, r1
 801371c:	464b      	mov	r3, r9
 801371e:	4640      	mov	r0, r8
 8013720:	4649      	mov	r1, r9
 8013722:	f7ec ff81 	bl	8000628 <__aeabi_dmul>
 8013726:	2200      	movs	r2, #0
 8013728:	4b68      	ldr	r3, [pc, #416]	; (80138cc <__ieee754_pow+0x734>)
 801372a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801372e:	f7ec fdc5 	bl	80002bc <__adddf3>
 8013732:	4632      	mov	r2, r6
 8013734:	463b      	mov	r3, r7
 8013736:	f7ec fdc1 	bl	80002bc <__adddf3>
 801373a:	9802      	ldr	r0, [sp, #8]
 801373c:	460d      	mov	r5, r1
 801373e:	4604      	mov	r4, r0
 8013740:	4602      	mov	r2, r0
 8013742:	460b      	mov	r3, r1
 8013744:	4640      	mov	r0, r8
 8013746:	4649      	mov	r1, r9
 8013748:	f7ec ff6e 	bl	8000628 <__aeabi_dmul>
 801374c:	2200      	movs	r2, #0
 801374e:	4680      	mov	r8, r0
 8013750:	4689      	mov	r9, r1
 8013752:	4b5e      	ldr	r3, [pc, #376]	; (80138cc <__ieee754_pow+0x734>)
 8013754:	4620      	mov	r0, r4
 8013756:	4629      	mov	r1, r5
 8013758:	f7ec fdae 	bl	80002b8 <__aeabi_dsub>
 801375c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013760:	f7ec fdaa 	bl	80002b8 <__aeabi_dsub>
 8013764:	4602      	mov	r2, r0
 8013766:	460b      	mov	r3, r1
 8013768:	4630      	mov	r0, r6
 801376a:	4639      	mov	r1, r7
 801376c:	f7ec fda4 	bl	80002b8 <__aeabi_dsub>
 8013770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013774:	f7ec ff58 	bl	8000628 <__aeabi_dmul>
 8013778:	4622      	mov	r2, r4
 801377a:	4606      	mov	r6, r0
 801377c:	460f      	mov	r7, r1
 801377e:	462b      	mov	r3, r5
 8013780:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013784:	f7ec ff50 	bl	8000628 <__aeabi_dmul>
 8013788:	4602      	mov	r2, r0
 801378a:	460b      	mov	r3, r1
 801378c:	4630      	mov	r0, r6
 801378e:	4639      	mov	r1, r7
 8013790:	f7ec fd94 	bl	80002bc <__adddf3>
 8013794:	4606      	mov	r6, r0
 8013796:	460f      	mov	r7, r1
 8013798:	4602      	mov	r2, r0
 801379a:	460b      	mov	r3, r1
 801379c:	4640      	mov	r0, r8
 801379e:	4649      	mov	r1, r9
 80137a0:	f7ec fd8c 	bl	80002bc <__adddf3>
 80137a4:	9802      	ldr	r0, [sp, #8]
 80137a6:	a33c      	add	r3, pc, #240	; (adr r3, 8013898 <__ieee754_pow+0x700>)
 80137a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ac:	4604      	mov	r4, r0
 80137ae:	460d      	mov	r5, r1
 80137b0:	f7ec ff3a 	bl	8000628 <__aeabi_dmul>
 80137b4:	4642      	mov	r2, r8
 80137b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80137ba:	464b      	mov	r3, r9
 80137bc:	4620      	mov	r0, r4
 80137be:	4629      	mov	r1, r5
 80137c0:	f7ec fd7a 	bl	80002b8 <__aeabi_dsub>
 80137c4:	4602      	mov	r2, r0
 80137c6:	460b      	mov	r3, r1
 80137c8:	4630      	mov	r0, r6
 80137ca:	4639      	mov	r1, r7
 80137cc:	f7ec fd74 	bl	80002b8 <__aeabi_dsub>
 80137d0:	a333      	add	r3, pc, #204	; (adr r3, 80138a0 <__ieee754_pow+0x708>)
 80137d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137d6:	f7ec ff27 	bl	8000628 <__aeabi_dmul>
 80137da:	a333      	add	r3, pc, #204	; (adr r3, 80138a8 <__ieee754_pow+0x710>)
 80137dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e0:	4606      	mov	r6, r0
 80137e2:	460f      	mov	r7, r1
 80137e4:	4620      	mov	r0, r4
 80137e6:	4629      	mov	r1, r5
 80137e8:	f7ec ff1e 	bl	8000628 <__aeabi_dmul>
 80137ec:	4602      	mov	r2, r0
 80137ee:	460b      	mov	r3, r1
 80137f0:	4630      	mov	r0, r6
 80137f2:	4639      	mov	r1, r7
 80137f4:	f7ec fd62 	bl	80002bc <__adddf3>
 80137f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137fa:	4b35      	ldr	r3, [pc, #212]	; (80138d0 <__ieee754_pow+0x738>)
 80137fc:	4413      	add	r3, r2
 80137fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013802:	f7ec fd5b 	bl	80002bc <__adddf3>
 8013806:	4604      	mov	r4, r0
 8013808:	9809      	ldr	r0, [sp, #36]	; 0x24
 801380a:	460d      	mov	r5, r1
 801380c:	f7ec fea2 	bl	8000554 <__aeabi_i2d>
 8013810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013812:	4b30      	ldr	r3, [pc, #192]	; (80138d4 <__ieee754_pow+0x73c>)
 8013814:	4413      	add	r3, r2
 8013816:	e9d3 8900 	ldrd	r8, r9, [r3]
 801381a:	4606      	mov	r6, r0
 801381c:	460f      	mov	r7, r1
 801381e:	4622      	mov	r2, r4
 8013820:	462b      	mov	r3, r5
 8013822:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013826:	f7ec fd49 	bl	80002bc <__adddf3>
 801382a:	4642      	mov	r2, r8
 801382c:	464b      	mov	r3, r9
 801382e:	f7ec fd45 	bl	80002bc <__adddf3>
 8013832:	4632      	mov	r2, r6
 8013834:	463b      	mov	r3, r7
 8013836:	f7ec fd41 	bl	80002bc <__adddf3>
 801383a:	9802      	ldr	r0, [sp, #8]
 801383c:	4632      	mov	r2, r6
 801383e:	463b      	mov	r3, r7
 8013840:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013844:	f7ec fd38 	bl	80002b8 <__aeabi_dsub>
 8013848:	4642      	mov	r2, r8
 801384a:	464b      	mov	r3, r9
 801384c:	f7ec fd34 	bl	80002b8 <__aeabi_dsub>
 8013850:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013854:	e607      	b.n	8013466 <__ieee754_pow+0x2ce>
 8013856:	f04f 0a01 	mov.w	sl, #1
 801385a:	e6a5      	b.n	80135a8 <__ieee754_pow+0x410>
 801385c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80138b0 <__ieee754_pow+0x718>
 8013860:	e613      	b.n	801348a <__ieee754_pow+0x2f2>
 8013862:	bf00      	nop
 8013864:	f3af 8000 	nop.w
 8013868:	4a454eef 	.word	0x4a454eef
 801386c:	3fca7e28 	.word	0x3fca7e28
 8013870:	93c9db65 	.word	0x93c9db65
 8013874:	3fcd864a 	.word	0x3fcd864a
 8013878:	a91d4101 	.word	0xa91d4101
 801387c:	3fd17460 	.word	0x3fd17460
 8013880:	518f264d 	.word	0x518f264d
 8013884:	3fd55555 	.word	0x3fd55555
 8013888:	db6fabff 	.word	0xdb6fabff
 801388c:	3fdb6db6 	.word	0x3fdb6db6
 8013890:	33333303 	.word	0x33333303
 8013894:	3fe33333 	.word	0x3fe33333
 8013898:	e0000000 	.word	0xe0000000
 801389c:	3feec709 	.word	0x3feec709
 80138a0:	dc3a03fd 	.word	0xdc3a03fd
 80138a4:	3feec709 	.word	0x3feec709
 80138a8:	145b01f5 	.word	0x145b01f5
 80138ac:	be3e2fe0 	.word	0xbe3e2fe0
 80138b0:	00000000 	.word	0x00000000
 80138b4:	3ff00000 	.word	0x3ff00000
 80138b8:	43400000 	.word	0x43400000
 80138bc:	0003988e 	.word	0x0003988e
 80138c0:	000bb679 	.word	0x000bb679
 80138c4:	08015978 	.word	0x08015978
 80138c8:	3ff00000 	.word	0x3ff00000
 80138cc:	40080000 	.word	0x40080000
 80138d0:	08015998 	.word	0x08015998
 80138d4:	08015988 	.word	0x08015988
 80138d8:	a3b4      	add	r3, pc, #720	; (adr r3, 8013bac <__ieee754_pow+0xa14>)
 80138da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138de:	4640      	mov	r0, r8
 80138e0:	4649      	mov	r1, r9
 80138e2:	f7ec fceb 	bl	80002bc <__adddf3>
 80138e6:	4622      	mov	r2, r4
 80138e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138ec:	462b      	mov	r3, r5
 80138ee:	4630      	mov	r0, r6
 80138f0:	4639      	mov	r1, r7
 80138f2:	f7ec fce1 	bl	80002b8 <__aeabi_dsub>
 80138f6:	4602      	mov	r2, r0
 80138f8:	460b      	mov	r3, r1
 80138fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80138fe:	f7ed f923 	bl	8000b48 <__aeabi_dcmpgt>
 8013902:	2800      	cmp	r0, #0
 8013904:	f47f adfe 	bne.w	8013504 <__ieee754_pow+0x36c>
 8013908:	4aa3      	ldr	r2, [pc, #652]	; (8013b98 <__ieee754_pow+0xa00>)
 801390a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801390e:	4293      	cmp	r3, r2
 8013910:	f340 810a 	ble.w	8013b28 <__ieee754_pow+0x990>
 8013914:	151b      	asrs	r3, r3, #20
 8013916:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801391a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801391e:	fa4a f303 	asr.w	r3, sl, r3
 8013922:	445b      	add	r3, fp
 8013924:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013928:	4e9c      	ldr	r6, [pc, #624]	; (8013b9c <__ieee754_pow+0xa04>)
 801392a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801392e:	4116      	asrs	r6, r2
 8013930:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013934:	2000      	movs	r0, #0
 8013936:	ea23 0106 	bic.w	r1, r3, r6
 801393a:	f1c2 0214 	rsb	r2, r2, #20
 801393e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013942:	fa4a fa02 	asr.w	sl, sl, r2
 8013946:	f1bb 0f00 	cmp.w	fp, #0
 801394a:	4602      	mov	r2, r0
 801394c:	460b      	mov	r3, r1
 801394e:	4620      	mov	r0, r4
 8013950:	4629      	mov	r1, r5
 8013952:	bfb8      	it	lt
 8013954:	f1ca 0a00 	rsblt	sl, sl, #0
 8013958:	f7ec fcae 	bl	80002b8 <__aeabi_dsub>
 801395c:	e9cd 0100 	strd	r0, r1, [sp]
 8013960:	4642      	mov	r2, r8
 8013962:	464b      	mov	r3, r9
 8013964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013968:	f7ec fca8 	bl	80002bc <__adddf3>
 801396c:	2000      	movs	r0, #0
 801396e:	a378      	add	r3, pc, #480	; (adr r3, 8013b50 <__ieee754_pow+0x9b8>)
 8013970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013974:	4604      	mov	r4, r0
 8013976:	460d      	mov	r5, r1
 8013978:	f7ec fe56 	bl	8000628 <__aeabi_dmul>
 801397c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013980:	4606      	mov	r6, r0
 8013982:	460f      	mov	r7, r1
 8013984:	4620      	mov	r0, r4
 8013986:	4629      	mov	r1, r5
 8013988:	f7ec fc96 	bl	80002b8 <__aeabi_dsub>
 801398c:	4602      	mov	r2, r0
 801398e:	460b      	mov	r3, r1
 8013990:	4640      	mov	r0, r8
 8013992:	4649      	mov	r1, r9
 8013994:	f7ec fc90 	bl	80002b8 <__aeabi_dsub>
 8013998:	a36f      	add	r3, pc, #444	; (adr r3, 8013b58 <__ieee754_pow+0x9c0>)
 801399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801399e:	f7ec fe43 	bl	8000628 <__aeabi_dmul>
 80139a2:	a36f      	add	r3, pc, #444	; (adr r3, 8013b60 <__ieee754_pow+0x9c8>)
 80139a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a8:	4680      	mov	r8, r0
 80139aa:	4689      	mov	r9, r1
 80139ac:	4620      	mov	r0, r4
 80139ae:	4629      	mov	r1, r5
 80139b0:	f7ec fe3a 	bl	8000628 <__aeabi_dmul>
 80139b4:	4602      	mov	r2, r0
 80139b6:	460b      	mov	r3, r1
 80139b8:	4640      	mov	r0, r8
 80139ba:	4649      	mov	r1, r9
 80139bc:	f7ec fc7e 	bl	80002bc <__adddf3>
 80139c0:	4604      	mov	r4, r0
 80139c2:	460d      	mov	r5, r1
 80139c4:	4602      	mov	r2, r0
 80139c6:	460b      	mov	r3, r1
 80139c8:	4630      	mov	r0, r6
 80139ca:	4639      	mov	r1, r7
 80139cc:	f7ec fc76 	bl	80002bc <__adddf3>
 80139d0:	4632      	mov	r2, r6
 80139d2:	463b      	mov	r3, r7
 80139d4:	4680      	mov	r8, r0
 80139d6:	4689      	mov	r9, r1
 80139d8:	f7ec fc6e 	bl	80002b8 <__aeabi_dsub>
 80139dc:	4602      	mov	r2, r0
 80139de:	460b      	mov	r3, r1
 80139e0:	4620      	mov	r0, r4
 80139e2:	4629      	mov	r1, r5
 80139e4:	f7ec fc68 	bl	80002b8 <__aeabi_dsub>
 80139e8:	4642      	mov	r2, r8
 80139ea:	4606      	mov	r6, r0
 80139ec:	460f      	mov	r7, r1
 80139ee:	464b      	mov	r3, r9
 80139f0:	4640      	mov	r0, r8
 80139f2:	4649      	mov	r1, r9
 80139f4:	f7ec fe18 	bl	8000628 <__aeabi_dmul>
 80139f8:	a35b      	add	r3, pc, #364	; (adr r3, 8013b68 <__ieee754_pow+0x9d0>)
 80139fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139fe:	4604      	mov	r4, r0
 8013a00:	460d      	mov	r5, r1
 8013a02:	f7ec fe11 	bl	8000628 <__aeabi_dmul>
 8013a06:	a35a      	add	r3, pc, #360	; (adr r3, 8013b70 <__ieee754_pow+0x9d8>)
 8013a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a0c:	f7ec fc54 	bl	80002b8 <__aeabi_dsub>
 8013a10:	4622      	mov	r2, r4
 8013a12:	462b      	mov	r3, r5
 8013a14:	f7ec fe08 	bl	8000628 <__aeabi_dmul>
 8013a18:	a357      	add	r3, pc, #348	; (adr r3, 8013b78 <__ieee754_pow+0x9e0>)
 8013a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a1e:	f7ec fc4d 	bl	80002bc <__adddf3>
 8013a22:	4622      	mov	r2, r4
 8013a24:	462b      	mov	r3, r5
 8013a26:	f7ec fdff 	bl	8000628 <__aeabi_dmul>
 8013a2a:	a355      	add	r3, pc, #340	; (adr r3, 8013b80 <__ieee754_pow+0x9e8>)
 8013a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a30:	f7ec fc42 	bl	80002b8 <__aeabi_dsub>
 8013a34:	4622      	mov	r2, r4
 8013a36:	462b      	mov	r3, r5
 8013a38:	f7ec fdf6 	bl	8000628 <__aeabi_dmul>
 8013a3c:	a352      	add	r3, pc, #328	; (adr r3, 8013b88 <__ieee754_pow+0x9f0>)
 8013a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a42:	f7ec fc3b 	bl	80002bc <__adddf3>
 8013a46:	4622      	mov	r2, r4
 8013a48:	462b      	mov	r3, r5
 8013a4a:	f7ec fded 	bl	8000628 <__aeabi_dmul>
 8013a4e:	4602      	mov	r2, r0
 8013a50:	460b      	mov	r3, r1
 8013a52:	4640      	mov	r0, r8
 8013a54:	4649      	mov	r1, r9
 8013a56:	f7ec fc2f 	bl	80002b8 <__aeabi_dsub>
 8013a5a:	4604      	mov	r4, r0
 8013a5c:	460d      	mov	r5, r1
 8013a5e:	4602      	mov	r2, r0
 8013a60:	460b      	mov	r3, r1
 8013a62:	4640      	mov	r0, r8
 8013a64:	4649      	mov	r1, r9
 8013a66:	f7ec fddf 	bl	8000628 <__aeabi_dmul>
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	e9cd 0100 	strd	r0, r1, [sp]
 8013a70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013a74:	4620      	mov	r0, r4
 8013a76:	4629      	mov	r1, r5
 8013a78:	f7ec fc1e 	bl	80002b8 <__aeabi_dsub>
 8013a7c:	4602      	mov	r2, r0
 8013a7e:	460b      	mov	r3, r1
 8013a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a84:	f7ec fefa 	bl	800087c <__aeabi_ddiv>
 8013a88:	4632      	mov	r2, r6
 8013a8a:	4604      	mov	r4, r0
 8013a8c:	460d      	mov	r5, r1
 8013a8e:	463b      	mov	r3, r7
 8013a90:	4640      	mov	r0, r8
 8013a92:	4649      	mov	r1, r9
 8013a94:	f7ec fdc8 	bl	8000628 <__aeabi_dmul>
 8013a98:	4632      	mov	r2, r6
 8013a9a:	463b      	mov	r3, r7
 8013a9c:	f7ec fc0e 	bl	80002bc <__adddf3>
 8013aa0:	4602      	mov	r2, r0
 8013aa2:	460b      	mov	r3, r1
 8013aa4:	4620      	mov	r0, r4
 8013aa6:	4629      	mov	r1, r5
 8013aa8:	f7ec fc06 	bl	80002b8 <__aeabi_dsub>
 8013aac:	4642      	mov	r2, r8
 8013aae:	464b      	mov	r3, r9
 8013ab0:	f7ec fc02 	bl	80002b8 <__aeabi_dsub>
 8013ab4:	4602      	mov	r2, r0
 8013ab6:	460b      	mov	r3, r1
 8013ab8:	2000      	movs	r0, #0
 8013aba:	4939      	ldr	r1, [pc, #228]	; (8013ba0 <__ieee754_pow+0xa08>)
 8013abc:	f7ec fbfc 	bl	80002b8 <__aeabi_dsub>
 8013ac0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8013ac4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013ac8:	4602      	mov	r2, r0
 8013aca:	460b      	mov	r3, r1
 8013acc:	da2f      	bge.n	8013b2e <__ieee754_pow+0x996>
 8013ace:	4650      	mov	r0, sl
 8013ad0:	ec43 2b10 	vmov	d0, r2, r3
 8013ad4:	f001 f8fc 	bl	8014cd0 <scalbn>
 8013ad8:	ec51 0b10 	vmov	r0, r1, d0
 8013adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ae0:	f7ff bbf1 	b.w	80132c6 <__ieee754_pow+0x12e>
 8013ae4:	4b2f      	ldr	r3, [pc, #188]	; (8013ba4 <__ieee754_pow+0xa0c>)
 8013ae6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013aea:	429e      	cmp	r6, r3
 8013aec:	f77f af0c 	ble.w	8013908 <__ieee754_pow+0x770>
 8013af0:	4b2d      	ldr	r3, [pc, #180]	; (8013ba8 <__ieee754_pow+0xa10>)
 8013af2:	440b      	add	r3, r1
 8013af4:	4303      	orrs	r3, r0
 8013af6:	d00b      	beq.n	8013b10 <__ieee754_pow+0x978>
 8013af8:	a325      	add	r3, pc, #148	; (adr r3, 8013b90 <__ieee754_pow+0x9f8>)
 8013afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b02:	f7ec fd91 	bl	8000628 <__aeabi_dmul>
 8013b06:	a322      	add	r3, pc, #136	; (adr r3, 8013b90 <__ieee754_pow+0x9f8>)
 8013b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b0c:	f7ff bbdb 	b.w	80132c6 <__ieee754_pow+0x12e>
 8013b10:	4622      	mov	r2, r4
 8013b12:	462b      	mov	r3, r5
 8013b14:	f7ec fbd0 	bl	80002b8 <__aeabi_dsub>
 8013b18:	4642      	mov	r2, r8
 8013b1a:	464b      	mov	r3, r9
 8013b1c:	f7ed f80a 	bl	8000b34 <__aeabi_dcmpge>
 8013b20:	2800      	cmp	r0, #0
 8013b22:	f43f aef1 	beq.w	8013908 <__ieee754_pow+0x770>
 8013b26:	e7e7      	b.n	8013af8 <__ieee754_pow+0x960>
 8013b28:	f04f 0a00 	mov.w	sl, #0
 8013b2c:	e718      	b.n	8013960 <__ieee754_pow+0x7c8>
 8013b2e:	4621      	mov	r1, r4
 8013b30:	e7d4      	b.n	8013adc <__ieee754_pow+0x944>
 8013b32:	2000      	movs	r0, #0
 8013b34:	491a      	ldr	r1, [pc, #104]	; (8013ba0 <__ieee754_pow+0xa08>)
 8013b36:	f7ff bb8f 	b.w	8013258 <__ieee754_pow+0xc0>
 8013b3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b3e:	f7ff bb8b 	b.w	8013258 <__ieee754_pow+0xc0>
 8013b42:	4630      	mov	r0, r6
 8013b44:	4639      	mov	r1, r7
 8013b46:	f7ff bb87 	b.w	8013258 <__ieee754_pow+0xc0>
 8013b4a:	4693      	mov	fp, r2
 8013b4c:	f7ff bb98 	b.w	8013280 <__ieee754_pow+0xe8>
 8013b50:	00000000 	.word	0x00000000
 8013b54:	3fe62e43 	.word	0x3fe62e43
 8013b58:	fefa39ef 	.word	0xfefa39ef
 8013b5c:	3fe62e42 	.word	0x3fe62e42
 8013b60:	0ca86c39 	.word	0x0ca86c39
 8013b64:	be205c61 	.word	0xbe205c61
 8013b68:	72bea4d0 	.word	0x72bea4d0
 8013b6c:	3e663769 	.word	0x3e663769
 8013b70:	c5d26bf1 	.word	0xc5d26bf1
 8013b74:	3ebbbd41 	.word	0x3ebbbd41
 8013b78:	af25de2c 	.word	0xaf25de2c
 8013b7c:	3f11566a 	.word	0x3f11566a
 8013b80:	16bebd93 	.word	0x16bebd93
 8013b84:	3f66c16c 	.word	0x3f66c16c
 8013b88:	5555553e 	.word	0x5555553e
 8013b8c:	3fc55555 	.word	0x3fc55555
 8013b90:	c2f8f359 	.word	0xc2f8f359
 8013b94:	01a56e1f 	.word	0x01a56e1f
 8013b98:	3fe00000 	.word	0x3fe00000
 8013b9c:	000fffff 	.word	0x000fffff
 8013ba0:	3ff00000 	.word	0x3ff00000
 8013ba4:	4090cbff 	.word	0x4090cbff
 8013ba8:	3f6f3400 	.word	0x3f6f3400
 8013bac:	652b82fe 	.word	0x652b82fe
 8013bb0:	3c971547 	.word	0x3c971547
 8013bb4:	00000000 	.word	0x00000000

08013bb8 <__ieee754_rem_pio2>:
 8013bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bbc:	ec57 6b10 	vmov	r6, r7, d0
 8013bc0:	4bc3      	ldr	r3, [pc, #780]	; (8013ed0 <__ieee754_rem_pio2+0x318>)
 8013bc2:	b08d      	sub	sp, #52	; 0x34
 8013bc4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013bc8:	4598      	cmp	r8, r3
 8013bca:	4604      	mov	r4, r0
 8013bcc:	9704      	str	r7, [sp, #16]
 8013bce:	dc07      	bgt.n	8013be0 <__ieee754_rem_pio2+0x28>
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	ed84 0b00 	vstr	d0, [r4]
 8013bd8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013bdc:	2500      	movs	r5, #0
 8013bde:	e027      	b.n	8013c30 <__ieee754_rem_pio2+0x78>
 8013be0:	4bbc      	ldr	r3, [pc, #752]	; (8013ed4 <__ieee754_rem_pio2+0x31c>)
 8013be2:	4598      	cmp	r8, r3
 8013be4:	dc75      	bgt.n	8013cd2 <__ieee754_rem_pio2+0x11a>
 8013be6:	9b04      	ldr	r3, [sp, #16]
 8013be8:	4dbb      	ldr	r5, [pc, #748]	; (8013ed8 <__ieee754_rem_pio2+0x320>)
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	ee10 0a10 	vmov	r0, s0
 8013bf0:	a3a9      	add	r3, pc, #676	; (adr r3, 8013e98 <__ieee754_rem_pio2+0x2e0>)
 8013bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf6:	4639      	mov	r1, r7
 8013bf8:	dd36      	ble.n	8013c68 <__ieee754_rem_pio2+0xb0>
 8013bfa:	f7ec fb5d 	bl	80002b8 <__aeabi_dsub>
 8013bfe:	45a8      	cmp	r8, r5
 8013c00:	4606      	mov	r6, r0
 8013c02:	460f      	mov	r7, r1
 8013c04:	d018      	beq.n	8013c38 <__ieee754_rem_pio2+0x80>
 8013c06:	a3a6      	add	r3, pc, #664	; (adr r3, 8013ea0 <__ieee754_rem_pio2+0x2e8>)
 8013c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c0c:	f7ec fb54 	bl	80002b8 <__aeabi_dsub>
 8013c10:	4602      	mov	r2, r0
 8013c12:	460b      	mov	r3, r1
 8013c14:	e9c4 2300 	strd	r2, r3, [r4]
 8013c18:	4630      	mov	r0, r6
 8013c1a:	4639      	mov	r1, r7
 8013c1c:	f7ec fb4c 	bl	80002b8 <__aeabi_dsub>
 8013c20:	a39f      	add	r3, pc, #636	; (adr r3, 8013ea0 <__ieee754_rem_pio2+0x2e8>)
 8013c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c26:	f7ec fb47 	bl	80002b8 <__aeabi_dsub>
 8013c2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013c2e:	2501      	movs	r5, #1
 8013c30:	4628      	mov	r0, r5
 8013c32:	b00d      	add	sp, #52	; 0x34
 8013c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c38:	a39b      	add	r3, pc, #620	; (adr r3, 8013ea8 <__ieee754_rem_pio2+0x2f0>)
 8013c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c3e:	f7ec fb3b 	bl	80002b8 <__aeabi_dsub>
 8013c42:	a39b      	add	r3, pc, #620	; (adr r3, 8013eb0 <__ieee754_rem_pio2+0x2f8>)
 8013c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c48:	4606      	mov	r6, r0
 8013c4a:	460f      	mov	r7, r1
 8013c4c:	f7ec fb34 	bl	80002b8 <__aeabi_dsub>
 8013c50:	4602      	mov	r2, r0
 8013c52:	460b      	mov	r3, r1
 8013c54:	e9c4 2300 	strd	r2, r3, [r4]
 8013c58:	4630      	mov	r0, r6
 8013c5a:	4639      	mov	r1, r7
 8013c5c:	f7ec fb2c 	bl	80002b8 <__aeabi_dsub>
 8013c60:	a393      	add	r3, pc, #588	; (adr r3, 8013eb0 <__ieee754_rem_pio2+0x2f8>)
 8013c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c66:	e7de      	b.n	8013c26 <__ieee754_rem_pio2+0x6e>
 8013c68:	f7ec fb28 	bl	80002bc <__adddf3>
 8013c6c:	45a8      	cmp	r8, r5
 8013c6e:	4606      	mov	r6, r0
 8013c70:	460f      	mov	r7, r1
 8013c72:	d016      	beq.n	8013ca2 <__ieee754_rem_pio2+0xea>
 8013c74:	a38a      	add	r3, pc, #552	; (adr r3, 8013ea0 <__ieee754_rem_pio2+0x2e8>)
 8013c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7a:	f7ec fb1f 	bl	80002bc <__adddf3>
 8013c7e:	4602      	mov	r2, r0
 8013c80:	460b      	mov	r3, r1
 8013c82:	e9c4 2300 	strd	r2, r3, [r4]
 8013c86:	4630      	mov	r0, r6
 8013c88:	4639      	mov	r1, r7
 8013c8a:	f7ec fb15 	bl	80002b8 <__aeabi_dsub>
 8013c8e:	a384      	add	r3, pc, #528	; (adr r3, 8013ea0 <__ieee754_rem_pio2+0x2e8>)
 8013c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c94:	f7ec fb12 	bl	80002bc <__adddf3>
 8013c98:	f04f 35ff 	mov.w	r5, #4294967295
 8013c9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013ca0:	e7c6      	b.n	8013c30 <__ieee754_rem_pio2+0x78>
 8013ca2:	a381      	add	r3, pc, #516	; (adr r3, 8013ea8 <__ieee754_rem_pio2+0x2f0>)
 8013ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca8:	f7ec fb08 	bl	80002bc <__adddf3>
 8013cac:	a380      	add	r3, pc, #512	; (adr r3, 8013eb0 <__ieee754_rem_pio2+0x2f8>)
 8013cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cb2:	4606      	mov	r6, r0
 8013cb4:	460f      	mov	r7, r1
 8013cb6:	f7ec fb01 	bl	80002bc <__adddf3>
 8013cba:	4602      	mov	r2, r0
 8013cbc:	460b      	mov	r3, r1
 8013cbe:	e9c4 2300 	strd	r2, r3, [r4]
 8013cc2:	4630      	mov	r0, r6
 8013cc4:	4639      	mov	r1, r7
 8013cc6:	f7ec faf7 	bl	80002b8 <__aeabi_dsub>
 8013cca:	a379      	add	r3, pc, #484	; (adr r3, 8013eb0 <__ieee754_rem_pio2+0x2f8>)
 8013ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd0:	e7e0      	b.n	8013c94 <__ieee754_rem_pio2+0xdc>
 8013cd2:	4b82      	ldr	r3, [pc, #520]	; (8013edc <__ieee754_rem_pio2+0x324>)
 8013cd4:	4598      	cmp	r8, r3
 8013cd6:	f300 80d0 	bgt.w	8013e7a <__ieee754_rem_pio2+0x2c2>
 8013cda:	f000 fed3 	bl	8014a84 <fabs>
 8013cde:	ec57 6b10 	vmov	r6, r7, d0
 8013ce2:	ee10 0a10 	vmov	r0, s0
 8013ce6:	a374      	add	r3, pc, #464	; (adr r3, 8013eb8 <__ieee754_rem_pio2+0x300>)
 8013ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cec:	4639      	mov	r1, r7
 8013cee:	f7ec fc9b 	bl	8000628 <__aeabi_dmul>
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	4b7a      	ldr	r3, [pc, #488]	; (8013ee0 <__ieee754_rem_pio2+0x328>)
 8013cf6:	f7ec fae1 	bl	80002bc <__adddf3>
 8013cfa:	f7ec ff45 	bl	8000b88 <__aeabi_d2iz>
 8013cfe:	4605      	mov	r5, r0
 8013d00:	f7ec fc28 	bl	8000554 <__aeabi_i2d>
 8013d04:	a364      	add	r3, pc, #400	; (adr r3, 8013e98 <__ieee754_rem_pio2+0x2e0>)
 8013d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d0e:	f7ec fc8b 	bl	8000628 <__aeabi_dmul>
 8013d12:	4602      	mov	r2, r0
 8013d14:	460b      	mov	r3, r1
 8013d16:	4630      	mov	r0, r6
 8013d18:	4639      	mov	r1, r7
 8013d1a:	f7ec facd 	bl	80002b8 <__aeabi_dsub>
 8013d1e:	a360      	add	r3, pc, #384	; (adr r3, 8013ea0 <__ieee754_rem_pio2+0x2e8>)
 8013d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d24:	4682      	mov	sl, r0
 8013d26:	468b      	mov	fp, r1
 8013d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d2c:	f7ec fc7c 	bl	8000628 <__aeabi_dmul>
 8013d30:	2d1f      	cmp	r5, #31
 8013d32:	4606      	mov	r6, r0
 8013d34:	460f      	mov	r7, r1
 8013d36:	dc0c      	bgt.n	8013d52 <__ieee754_rem_pio2+0x19a>
 8013d38:	1e6a      	subs	r2, r5, #1
 8013d3a:	4b6a      	ldr	r3, [pc, #424]	; (8013ee4 <__ieee754_rem_pio2+0x32c>)
 8013d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d40:	4543      	cmp	r3, r8
 8013d42:	d006      	beq.n	8013d52 <__ieee754_rem_pio2+0x19a>
 8013d44:	4632      	mov	r2, r6
 8013d46:	463b      	mov	r3, r7
 8013d48:	4650      	mov	r0, sl
 8013d4a:	4659      	mov	r1, fp
 8013d4c:	f7ec fab4 	bl	80002b8 <__aeabi_dsub>
 8013d50:	e00e      	b.n	8013d70 <__ieee754_rem_pio2+0x1b8>
 8013d52:	4632      	mov	r2, r6
 8013d54:	463b      	mov	r3, r7
 8013d56:	4650      	mov	r0, sl
 8013d58:	4659      	mov	r1, fp
 8013d5a:	f7ec faad 	bl	80002b8 <__aeabi_dsub>
 8013d5e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013d62:	9305      	str	r3, [sp, #20]
 8013d64:	9a05      	ldr	r2, [sp, #20]
 8013d66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013d6a:	1ad3      	subs	r3, r2, r3
 8013d6c:	2b10      	cmp	r3, #16
 8013d6e:	dc02      	bgt.n	8013d76 <__ieee754_rem_pio2+0x1be>
 8013d70:	e9c4 0100 	strd	r0, r1, [r4]
 8013d74:	e039      	b.n	8013dea <__ieee754_rem_pio2+0x232>
 8013d76:	a34c      	add	r3, pc, #304	; (adr r3, 8013ea8 <__ieee754_rem_pio2+0x2f0>)
 8013d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d80:	f7ec fc52 	bl	8000628 <__aeabi_dmul>
 8013d84:	4606      	mov	r6, r0
 8013d86:	460f      	mov	r7, r1
 8013d88:	4602      	mov	r2, r0
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	4650      	mov	r0, sl
 8013d8e:	4659      	mov	r1, fp
 8013d90:	f7ec fa92 	bl	80002b8 <__aeabi_dsub>
 8013d94:	4602      	mov	r2, r0
 8013d96:	460b      	mov	r3, r1
 8013d98:	4680      	mov	r8, r0
 8013d9a:	4689      	mov	r9, r1
 8013d9c:	4650      	mov	r0, sl
 8013d9e:	4659      	mov	r1, fp
 8013da0:	f7ec fa8a 	bl	80002b8 <__aeabi_dsub>
 8013da4:	4632      	mov	r2, r6
 8013da6:	463b      	mov	r3, r7
 8013da8:	f7ec fa86 	bl	80002b8 <__aeabi_dsub>
 8013dac:	a340      	add	r3, pc, #256	; (adr r3, 8013eb0 <__ieee754_rem_pio2+0x2f8>)
 8013dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db2:	4606      	mov	r6, r0
 8013db4:	460f      	mov	r7, r1
 8013db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dba:	f7ec fc35 	bl	8000628 <__aeabi_dmul>
 8013dbe:	4632      	mov	r2, r6
 8013dc0:	463b      	mov	r3, r7
 8013dc2:	f7ec fa79 	bl	80002b8 <__aeabi_dsub>
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	460b      	mov	r3, r1
 8013dca:	4606      	mov	r6, r0
 8013dcc:	460f      	mov	r7, r1
 8013dce:	4640      	mov	r0, r8
 8013dd0:	4649      	mov	r1, r9
 8013dd2:	f7ec fa71 	bl	80002b8 <__aeabi_dsub>
 8013dd6:	9a05      	ldr	r2, [sp, #20]
 8013dd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013ddc:	1ad3      	subs	r3, r2, r3
 8013dde:	2b31      	cmp	r3, #49	; 0x31
 8013de0:	dc20      	bgt.n	8013e24 <__ieee754_rem_pio2+0x26c>
 8013de2:	e9c4 0100 	strd	r0, r1, [r4]
 8013de6:	46c2      	mov	sl, r8
 8013de8:	46cb      	mov	fp, r9
 8013dea:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013dee:	4650      	mov	r0, sl
 8013df0:	4642      	mov	r2, r8
 8013df2:	464b      	mov	r3, r9
 8013df4:	4659      	mov	r1, fp
 8013df6:	f7ec fa5f 	bl	80002b8 <__aeabi_dsub>
 8013dfa:	463b      	mov	r3, r7
 8013dfc:	4632      	mov	r2, r6
 8013dfe:	f7ec fa5b 	bl	80002b8 <__aeabi_dsub>
 8013e02:	9b04      	ldr	r3, [sp, #16]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013e0a:	f6bf af11 	bge.w	8013c30 <__ieee754_rem_pio2+0x78>
 8013e0e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013e12:	6063      	str	r3, [r4, #4]
 8013e14:	f8c4 8000 	str.w	r8, [r4]
 8013e18:	60a0      	str	r0, [r4, #8]
 8013e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e1e:	60e3      	str	r3, [r4, #12]
 8013e20:	426d      	negs	r5, r5
 8013e22:	e705      	b.n	8013c30 <__ieee754_rem_pio2+0x78>
 8013e24:	a326      	add	r3, pc, #152	; (adr r3, 8013ec0 <__ieee754_rem_pio2+0x308>)
 8013e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e2e:	f7ec fbfb 	bl	8000628 <__aeabi_dmul>
 8013e32:	4606      	mov	r6, r0
 8013e34:	460f      	mov	r7, r1
 8013e36:	4602      	mov	r2, r0
 8013e38:	460b      	mov	r3, r1
 8013e3a:	4640      	mov	r0, r8
 8013e3c:	4649      	mov	r1, r9
 8013e3e:	f7ec fa3b 	bl	80002b8 <__aeabi_dsub>
 8013e42:	4602      	mov	r2, r0
 8013e44:	460b      	mov	r3, r1
 8013e46:	4682      	mov	sl, r0
 8013e48:	468b      	mov	fp, r1
 8013e4a:	4640      	mov	r0, r8
 8013e4c:	4649      	mov	r1, r9
 8013e4e:	f7ec fa33 	bl	80002b8 <__aeabi_dsub>
 8013e52:	4632      	mov	r2, r6
 8013e54:	463b      	mov	r3, r7
 8013e56:	f7ec fa2f 	bl	80002b8 <__aeabi_dsub>
 8013e5a:	a31b      	add	r3, pc, #108	; (adr r3, 8013ec8 <__ieee754_rem_pio2+0x310>)
 8013e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e60:	4606      	mov	r6, r0
 8013e62:	460f      	mov	r7, r1
 8013e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e68:	f7ec fbde 	bl	8000628 <__aeabi_dmul>
 8013e6c:	4632      	mov	r2, r6
 8013e6e:	463b      	mov	r3, r7
 8013e70:	f7ec fa22 	bl	80002b8 <__aeabi_dsub>
 8013e74:	4606      	mov	r6, r0
 8013e76:	460f      	mov	r7, r1
 8013e78:	e764      	b.n	8013d44 <__ieee754_rem_pio2+0x18c>
 8013e7a:	4b1b      	ldr	r3, [pc, #108]	; (8013ee8 <__ieee754_rem_pio2+0x330>)
 8013e7c:	4598      	cmp	r8, r3
 8013e7e:	dd35      	ble.n	8013eec <__ieee754_rem_pio2+0x334>
 8013e80:	ee10 2a10 	vmov	r2, s0
 8013e84:	463b      	mov	r3, r7
 8013e86:	4630      	mov	r0, r6
 8013e88:	4639      	mov	r1, r7
 8013e8a:	f7ec fa15 	bl	80002b8 <__aeabi_dsub>
 8013e8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013e92:	e9c4 0100 	strd	r0, r1, [r4]
 8013e96:	e6a1      	b.n	8013bdc <__ieee754_rem_pio2+0x24>
 8013e98:	54400000 	.word	0x54400000
 8013e9c:	3ff921fb 	.word	0x3ff921fb
 8013ea0:	1a626331 	.word	0x1a626331
 8013ea4:	3dd0b461 	.word	0x3dd0b461
 8013ea8:	1a600000 	.word	0x1a600000
 8013eac:	3dd0b461 	.word	0x3dd0b461
 8013eb0:	2e037073 	.word	0x2e037073
 8013eb4:	3ba3198a 	.word	0x3ba3198a
 8013eb8:	6dc9c883 	.word	0x6dc9c883
 8013ebc:	3fe45f30 	.word	0x3fe45f30
 8013ec0:	2e000000 	.word	0x2e000000
 8013ec4:	3ba3198a 	.word	0x3ba3198a
 8013ec8:	252049c1 	.word	0x252049c1
 8013ecc:	397b839a 	.word	0x397b839a
 8013ed0:	3fe921fb 	.word	0x3fe921fb
 8013ed4:	4002d97b 	.word	0x4002d97b
 8013ed8:	3ff921fb 	.word	0x3ff921fb
 8013edc:	413921fb 	.word	0x413921fb
 8013ee0:	3fe00000 	.word	0x3fe00000
 8013ee4:	080159a8 	.word	0x080159a8
 8013ee8:	7fefffff 	.word	0x7fefffff
 8013eec:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013ef0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8013ef4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013ef8:	4630      	mov	r0, r6
 8013efa:	460f      	mov	r7, r1
 8013efc:	f7ec fe44 	bl	8000b88 <__aeabi_d2iz>
 8013f00:	f7ec fb28 	bl	8000554 <__aeabi_i2d>
 8013f04:	4602      	mov	r2, r0
 8013f06:	460b      	mov	r3, r1
 8013f08:	4630      	mov	r0, r6
 8013f0a:	4639      	mov	r1, r7
 8013f0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013f10:	f7ec f9d2 	bl	80002b8 <__aeabi_dsub>
 8013f14:	2200      	movs	r2, #0
 8013f16:	4b1f      	ldr	r3, [pc, #124]	; (8013f94 <__ieee754_rem_pio2+0x3dc>)
 8013f18:	f7ec fb86 	bl	8000628 <__aeabi_dmul>
 8013f1c:	460f      	mov	r7, r1
 8013f1e:	4606      	mov	r6, r0
 8013f20:	f7ec fe32 	bl	8000b88 <__aeabi_d2iz>
 8013f24:	f7ec fb16 	bl	8000554 <__aeabi_i2d>
 8013f28:	4602      	mov	r2, r0
 8013f2a:	460b      	mov	r3, r1
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	4639      	mov	r1, r7
 8013f30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013f34:	f7ec f9c0 	bl	80002b8 <__aeabi_dsub>
 8013f38:	2200      	movs	r2, #0
 8013f3a:	4b16      	ldr	r3, [pc, #88]	; (8013f94 <__ieee754_rem_pio2+0x3dc>)
 8013f3c:	f7ec fb74 	bl	8000628 <__aeabi_dmul>
 8013f40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013f44:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8013f48:	f04f 0803 	mov.w	r8, #3
 8013f4c:	2600      	movs	r6, #0
 8013f4e:	2700      	movs	r7, #0
 8013f50:	4632      	mov	r2, r6
 8013f52:	463b      	mov	r3, r7
 8013f54:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8013f5c:	f7ec fdcc 	bl	8000af8 <__aeabi_dcmpeq>
 8013f60:	b9b0      	cbnz	r0, 8013f90 <__ieee754_rem_pio2+0x3d8>
 8013f62:	4b0d      	ldr	r3, [pc, #52]	; (8013f98 <__ieee754_rem_pio2+0x3e0>)
 8013f64:	9301      	str	r3, [sp, #4]
 8013f66:	2302      	movs	r3, #2
 8013f68:	9300      	str	r3, [sp, #0]
 8013f6a:	462a      	mov	r2, r5
 8013f6c:	4643      	mov	r3, r8
 8013f6e:	4621      	mov	r1, r4
 8013f70:	a806      	add	r0, sp, #24
 8013f72:	f000 f98d 	bl	8014290 <__kernel_rem_pio2>
 8013f76:	9b04      	ldr	r3, [sp, #16]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	4605      	mov	r5, r0
 8013f7c:	f6bf ae58 	bge.w	8013c30 <__ieee754_rem_pio2+0x78>
 8013f80:	6863      	ldr	r3, [r4, #4]
 8013f82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013f86:	6063      	str	r3, [r4, #4]
 8013f88:	68e3      	ldr	r3, [r4, #12]
 8013f8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013f8e:	e746      	b.n	8013e1e <__ieee754_rem_pio2+0x266>
 8013f90:	46d0      	mov	r8, sl
 8013f92:	e7dd      	b.n	8013f50 <__ieee754_rem_pio2+0x398>
 8013f94:	41700000 	.word	0x41700000
 8013f98:	08015a28 	.word	0x08015a28

08013f9c <__ieee754_sqrt>:
 8013f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa0:	4955      	ldr	r1, [pc, #340]	; (80140f8 <__ieee754_sqrt+0x15c>)
 8013fa2:	ec55 4b10 	vmov	r4, r5, d0
 8013fa6:	43a9      	bics	r1, r5
 8013fa8:	462b      	mov	r3, r5
 8013faa:	462a      	mov	r2, r5
 8013fac:	d112      	bne.n	8013fd4 <__ieee754_sqrt+0x38>
 8013fae:	ee10 2a10 	vmov	r2, s0
 8013fb2:	ee10 0a10 	vmov	r0, s0
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	f7ec fb36 	bl	8000628 <__aeabi_dmul>
 8013fbc:	4602      	mov	r2, r0
 8013fbe:	460b      	mov	r3, r1
 8013fc0:	4620      	mov	r0, r4
 8013fc2:	4629      	mov	r1, r5
 8013fc4:	f7ec f97a 	bl	80002bc <__adddf3>
 8013fc8:	4604      	mov	r4, r0
 8013fca:	460d      	mov	r5, r1
 8013fcc:	ec45 4b10 	vmov	d0, r4, r5
 8013fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fd4:	2d00      	cmp	r5, #0
 8013fd6:	ee10 0a10 	vmov	r0, s0
 8013fda:	4621      	mov	r1, r4
 8013fdc:	dc0f      	bgt.n	8013ffe <__ieee754_sqrt+0x62>
 8013fde:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013fe2:	4330      	orrs	r0, r6
 8013fe4:	d0f2      	beq.n	8013fcc <__ieee754_sqrt+0x30>
 8013fe6:	b155      	cbz	r5, 8013ffe <__ieee754_sqrt+0x62>
 8013fe8:	ee10 2a10 	vmov	r2, s0
 8013fec:	4620      	mov	r0, r4
 8013fee:	4629      	mov	r1, r5
 8013ff0:	f7ec f962 	bl	80002b8 <__aeabi_dsub>
 8013ff4:	4602      	mov	r2, r0
 8013ff6:	460b      	mov	r3, r1
 8013ff8:	f7ec fc40 	bl	800087c <__aeabi_ddiv>
 8013ffc:	e7e4      	b.n	8013fc8 <__ieee754_sqrt+0x2c>
 8013ffe:	151b      	asrs	r3, r3, #20
 8014000:	d073      	beq.n	80140ea <__ieee754_sqrt+0x14e>
 8014002:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014006:	07dd      	lsls	r5, r3, #31
 8014008:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801400c:	bf48      	it	mi
 801400e:	0fc8      	lsrmi	r0, r1, #31
 8014010:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014014:	bf44      	itt	mi
 8014016:	0049      	lslmi	r1, r1, #1
 8014018:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801401c:	2500      	movs	r5, #0
 801401e:	1058      	asrs	r0, r3, #1
 8014020:	0fcb      	lsrs	r3, r1, #31
 8014022:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8014026:	0049      	lsls	r1, r1, #1
 8014028:	2316      	movs	r3, #22
 801402a:	462c      	mov	r4, r5
 801402c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014030:	19a7      	adds	r7, r4, r6
 8014032:	4297      	cmp	r7, r2
 8014034:	bfde      	ittt	le
 8014036:	19bc      	addle	r4, r7, r6
 8014038:	1bd2      	suble	r2, r2, r7
 801403a:	19ad      	addle	r5, r5, r6
 801403c:	0fcf      	lsrs	r7, r1, #31
 801403e:	3b01      	subs	r3, #1
 8014040:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8014044:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014048:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801404c:	d1f0      	bne.n	8014030 <__ieee754_sqrt+0x94>
 801404e:	f04f 0c20 	mov.w	ip, #32
 8014052:	469e      	mov	lr, r3
 8014054:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014058:	42a2      	cmp	r2, r4
 801405a:	eb06 070e 	add.w	r7, r6, lr
 801405e:	dc02      	bgt.n	8014066 <__ieee754_sqrt+0xca>
 8014060:	d112      	bne.n	8014088 <__ieee754_sqrt+0xec>
 8014062:	428f      	cmp	r7, r1
 8014064:	d810      	bhi.n	8014088 <__ieee754_sqrt+0xec>
 8014066:	2f00      	cmp	r7, #0
 8014068:	eb07 0e06 	add.w	lr, r7, r6
 801406c:	da42      	bge.n	80140f4 <__ieee754_sqrt+0x158>
 801406e:	f1be 0f00 	cmp.w	lr, #0
 8014072:	db3f      	blt.n	80140f4 <__ieee754_sqrt+0x158>
 8014074:	f104 0801 	add.w	r8, r4, #1
 8014078:	1b12      	subs	r2, r2, r4
 801407a:	428f      	cmp	r7, r1
 801407c:	bf88      	it	hi
 801407e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014082:	1bc9      	subs	r1, r1, r7
 8014084:	4433      	add	r3, r6
 8014086:	4644      	mov	r4, r8
 8014088:	0052      	lsls	r2, r2, #1
 801408a:	f1bc 0c01 	subs.w	ip, ip, #1
 801408e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8014092:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014096:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801409a:	d1dd      	bne.n	8014058 <__ieee754_sqrt+0xbc>
 801409c:	430a      	orrs	r2, r1
 801409e:	d006      	beq.n	80140ae <__ieee754_sqrt+0x112>
 80140a0:	1c5c      	adds	r4, r3, #1
 80140a2:	bf13      	iteet	ne
 80140a4:	3301      	addne	r3, #1
 80140a6:	3501      	addeq	r5, #1
 80140a8:	4663      	moveq	r3, ip
 80140aa:	f023 0301 	bicne.w	r3, r3, #1
 80140ae:	106a      	asrs	r2, r5, #1
 80140b0:	085b      	lsrs	r3, r3, #1
 80140b2:	07e9      	lsls	r1, r5, #31
 80140b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80140b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80140bc:	bf48      	it	mi
 80140be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80140c2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80140c6:	461c      	mov	r4, r3
 80140c8:	e780      	b.n	8013fcc <__ieee754_sqrt+0x30>
 80140ca:	0aca      	lsrs	r2, r1, #11
 80140cc:	3815      	subs	r0, #21
 80140ce:	0549      	lsls	r1, r1, #21
 80140d0:	2a00      	cmp	r2, #0
 80140d2:	d0fa      	beq.n	80140ca <__ieee754_sqrt+0x12e>
 80140d4:	02d6      	lsls	r6, r2, #11
 80140d6:	d50a      	bpl.n	80140ee <__ieee754_sqrt+0x152>
 80140d8:	f1c3 0420 	rsb	r4, r3, #32
 80140dc:	fa21 f404 	lsr.w	r4, r1, r4
 80140e0:	1e5d      	subs	r5, r3, #1
 80140e2:	4099      	lsls	r1, r3
 80140e4:	4322      	orrs	r2, r4
 80140e6:	1b43      	subs	r3, r0, r5
 80140e8:	e78b      	b.n	8014002 <__ieee754_sqrt+0x66>
 80140ea:	4618      	mov	r0, r3
 80140ec:	e7f0      	b.n	80140d0 <__ieee754_sqrt+0x134>
 80140ee:	0052      	lsls	r2, r2, #1
 80140f0:	3301      	adds	r3, #1
 80140f2:	e7ef      	b.n	80140d4 <__ieee754_sqrt+0x138>
 80140f4:	46a0      	mov	r8, r4
 80140f6:	e7bf      	b.n	8014078 <__ieee754_sqrt+0xdc>
 80140f8:	7ff00000 	.word	0x7ff00000
 80140fc:	00000000 	.word	0x00000000

08014100 <__kernel_cos>:
 8014100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014104:	ec59 8b10 	vmov	r8, r9, d0
 8014108:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801410c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014110:	ed2d 8b02 	vpush	{d8}
 8014114:	eeb0 8a41 	vmov.f32	s16, s2
 8014118:	eef0 8a61 	vmov.f32	s17, s3
 801411c:	da07      	bge.n	801412e <__kernel_cos+0x2e>
 801411e:	ee10 0a10 	vmov	r0, s0
 8014122:	4649      	mov	r1, r9
 8014124:	f7ec fd30 	bl	8000b88 <__aeabi_d2iz>
 8014128:	2800      	cmp	r0, #0
 801412a:	f000 8089 	beq.w	8014240 <__kernel_cos+0x140>
 801412e:	4642      	mov	r2, r8
 8014130:	464b      	mov	r3, r9
 8014132:	4640      	mov	r0, r8
 8014134:	4649      	mov	r1, r9
 8014136:	f7ec fa77 	bl	8000628 <__aeabi_dmul>
 801413a:	2200      	movs	r2, #0
 801413c:	4b4e      	ldr	r3, [pc, #312]	; (8014278 <__kernel_cos+0x178>)
 801413e:	4604      	mov	r4, r0
 8014140:	460d      	mov	r5, r1
 8014142:	f7ec fa71 	bl	8000628 <__aeabi_dmul>
 8014146:	a340      	add	r3, pc, #256	; (adr r3, 8014248 <__kernel_cos+0x148>)
 8014148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801414c:	4682      	mov	sl, r0
 801414e:	468b      	mov	fp, r1
 8014150:	4620      	mov	r0, r4
 8014152:	4629      	mov	r1, r5
 8014154:	f7ec fa68 	bl	8000628 <__aeabi_dmul>
 8014158:	a33d      	add	r3, pc, #244	; (adr r3, 8014250 <__kernel_cos+0x150>)
 801415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801415e:	f7ec f8ad 	bl	80002bc <__adddf3>
 8014162:	4622      	mov	r2, r4
 8014164:	462b      	mov	r3, r5
 8014166:	f7ec fa5f 	bl	8000628 <__aeabi_dmul>
 801416a:	a33b      	add	r3, pc, #236	; (adr r3, 8014258 <__kernel_cos+0x158>)
 801416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014170:	f7ec f8a2 	bl	80002b8 <__aeabi_dsub>
 8014174:	4622      	mov	r2, r4
 8014176:	462b      	mov	r3, r5
 8014178:	f7ec fa56 	bl	8000628 <__aeabi_dmul>
 801417c:	a338      	add	r3, pc, #224	; (adr r3, 8014260 <__kernel_cos+0x160>)
 801417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014182:	f7ec f89b 	bl	80002bc <__adddf3>
 8014186:	4622      	mov	r2, r4
 8014188:	462b      	mov	r3, r5
 801418a:	f7ec fa4d 	bl	8000628 <__aeabi_dmul>
 801418e:	a336      	add	r3, pc, #216	; (adr r3, 8014268 <__kernel_cos+0x168>)
 8014190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014194:	f7ec f890 	bl	80002b8 <__aeabi_dsub>
 8014198:	4622      	mov	r2, r4
 801419a:	462b      	mov	r3, r5
 801419c:	f7ec fa44 	bl	8000628 <__aeabi_dmul>
 80141a0:	a333      	add	r3, pc, #204	; (adr r3, 8014270 <__kernel_cos+0x170>)
 80141a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141a6:	f7ec f889 	bl	80002bc <__adddf3>
 80141aa:	4622      	mov	r2, r4
 80141ac:	462b      	mov	r3, r5
 80141ae:	f7ec fa3b 	bl	8000628 <__aeabi_dmul>
 80141b2:	4622      	mov	r2, r4
 80141b4:	462b      	mov	r3, r5
 80141b6:	f7ec fa37 	bl	8000628 <__aeabi_dmul>
 80141ba:	ec53 2b18 	vmov	r2, r3, d8
 80141be:	4604      	mov	r4, r0
 80141c0:	460d      	mov	r5, r1
 80141c2:	4640      	mov	r0, r8
 80141c4:	4649      	mov	r1, r9
 80141c6:	f7ec fa2f 	bl	8000628 <__aeabi_dmul>
 80141ca:	460b      	mov	r3, r1
 80141cc:	4602      	mov	r2, r0
 80141ce:	4629      	mov	r1, r5
 80141d0:	4620      	mov	r0, r4
 80141d2:	f7ec f871 	bl	80002b8 <__aeabi_dsub>
 80141d6:	4b29      	ldr	r3, [pc, #164]	; (801427c <__kernel_cos+0x17c>)
 80141d8:	429e      	cmp	r6, r3
 80141da:	4680      	mov	r8, r0
 80141dc:	4689      	mov	r9, r1
 80141de:	dc11      	bgt.n	8014204 <__kernel_cos+0x104>
 80141e0:	4602      	mov	r2, r0
 80141e2:	460b      	mov	r3, r1
 80141e4:	4650      	mov	r0, sl
 80141e6:	4659      	mov	r1, fp
 80141e8:	f7ec f866 	bl	80002b8 <__aeabi_dsub>
 80141ec:	460b      	mov	r3, r1
 80141ee:	4924      	ldr	r1, [pc, #144]	; (8014280 <__kernel_cos+0x180>)
 80141f0:	4602      	mov	r2, r0
 80141f2:	2000      	movs	r0, #0
 80141f4:	f7ec f860 	bl	80002b8 <__aeabi_dsub>
 80141f8:	ecbd 8b02 	vpop	{d8}
 80141fc:	ec41 0b10 	vmov	d0, r0, r1
 8014200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014204:	4b1f      	ldr	r3, [pc, #124]	; (8014284 <__kernel_cos+0x184>)
 8014206:	491e      	ldr	r1, [pc, #120]	; (8014280 <__kernel_cos+0x180>)
 8014208:	429e      	cmp	r6, r3
 801420a:	bfcc      	ite	gt
 801420c:	4d1e      	ldrgt	r5, [pc, #120]	; (8014288 <__kernel_cos+0x188>)
 801420e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014212:	2400      	movs	r4, #0
 8014214:	4622      	mov	r2, r4
 8014216:	462b      	mov	r3, r5
 8014218:	2000      	movs	r0, #0
 801421a:	f7ec f84d 	bl	80002b8 <__aeabi_dsub>
 801421e:	4622      	mov	r2, r4
 8014220:	4606      	mov	r6, r0
 8014222:	460f      	mov	r7, r1
 8014224:	462b      	mov	r3, r5
 8014226:	4650      	mov	r0, sl
 8014228:	4659      	mov	r1, fp
 801422a:	f7ec f845 	bl	80002b8 <__aeabi_dsub>
 801422e:	4642      	mov	r2, r8
 8014230:	464b      	mov	r3, r9
 8014232:	f7ec f841 	bl	80002b8 <__aeabi_dsub>
 8014236:	4602      	mov	r2, r0
 8014238:	460b      	mov	r3, r1
 801423a:	4630      	mov	r0, r6
 801423c:	4639      	mov	r1, r7
 801423e:	e7d9      	b.n	80141f4 <__kernel_cos+0xf4>
 8014240:	2000      	movs	r0, #0
 8014242:	490f      	ldr	r1, [pc, #60]	; (8014280 <__kernel_cos+0x180>)
 8014244:	e7d8      	b.n	80141f8 <__kernel_cos+0xf8>
 8014246:	bf00      	nop
 8014248:	be8838d4 	.word	0xbe8838d4
 801424c:	bda8fae9 	.word	0xbda8fae9
 8014250:	bdb4b1c4 	.word	0xbdb4b1c4
 8014254:	3e21ee9e 	.word	0x3e21ee9e
 8014258:	809c52ad 	.word	0x809c52ad
 801425c:	3e927e4f 	.word	0x3e927e4f
 8014260:	19cb1590 	.word	0x19cb1590
 8014264:	3efa01a0 	.word	0x3efa01a0
 8014268:	16c15177 	.word	0x16c15177
 801426c:	3f56c16c 	.word	0x3f56c16c
 8014270:	5555554c 	.word	0x5555554c
 8014274:	3fa55555 	.word	0x3fa55555
 8014278:	3fe00000 	.word	0x3fe00000
 801427c:	3fd33332 	.word	0x3fd33332
 8014280:	3ff00000 	.word	0x3ff00000
 8014284:	3fe90000 	.word	0x3fe90000
 8014288:	3fd20000 	.word	0x3fd20000
 801428c:	00000000 	.word	0x00000000

08014290 <__kernel_rem_pio2>:
 8014290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014294:	ed2d 8b02 	vpush	{d8}
 8014298:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801429c:	1ed4      	subs	r4, r2, #3
 801429e:	9308      	str	r3, [sp, #32]
 80142a0:	9101      	str	r1, [sp, #4]
 80142a2:	4bc5      	ldr	r3, [pc, #788]	; (80145b8 <__kernel_rem_pio2+0x328>)
 80142a4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80142a6:	9009      	str	r0, [sp, #36]	; 0x24
 80142a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80142ac:	9304      	str	r3, [sp, #16]
 80142ae:	9b08      	ldr	r3, [sp, #32]
 80142b0:	3b01      	subs	r3, #1
 80142b2:	9307      	str	r3, [sp, #28]
 80142b4:	2318      	movs	r3, #24
 80142b6:	fb94 f4f3 	sdiv	r4, r4, r3
 80142ba:	f06f 0317 	mvn.w	r3, #23
 80142be:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80142c2:	fb04 3303 	mla	r3, r4, r3, r3
 80142c6:	eb03 0a02 	add.w	sl, r3, r2
 80142ca:	9b04      	ldr	r3, [sp, #16]
 80142cc:	9a07      	ldr	r2, [sp, #28]
 80142ce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80145a8 <__kernel_rem_pio2+0x318>
 80142d2:	eb03 0802 	add.w	r8, r3, r2
 80142d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80142d8:	1aa7      	subs	r7, r4, r2
 80142da:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80142de:	ae22      	add	r6, sp, #136	; 0x88
 80142e0:	2500      	movs	r5, #0
 80142e2:	4545      	cmp	r5, r8
 80142e4:	dd13      	ble.n	801430e <__kernel_rem_pio2+0x7e>
 80142e6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80145a8 <__kernel_rem_pio2+0x318>
 80142ea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80142ee:	2600      	movs	r6, #0
 80142f0:	9b04      	ldr	r3, [sp, #16]
 80142f2:	429e      	cmp	r6, r3
 80142f4:	dc32      	bgt.n	801435c <__kernel_rem_pio2+0xcc>
 80142f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142f8:	9302      	str	r3, [sp, #8]
 80142fa:	9b08      	ldr	r3, [sp, #32]
 80142fc:	199d      	adds	r5, r3, r6
 80142fe:	ab22      	add	r3, sp, #136	; 0x88
 8014300:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014304:	9306      	str	r3, [sp, #24]
 8014306:	ec59 8b18 	vmov	r8, r9, d8
 801430a:	2700      	movs	r7, #0
 801430c:	e01f      	b.n	801434e <__kernel_rem_pio2+0xbe>
 801430e:	42ef      	cmn	r7, r5
 8014310:	d407      	bmi.n	8014322 <__kernel_rem_pio2+0x92>
 8014312:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014316:	f7ec f91d 	bl	8000554 <__aeabi_i2d>
 801431a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801431e:	3501      	adds	r5, #1
 8014320:	e7df      	b.n	80142e2 <__kernel_rem_pio2+0x52>
 8014322:	ec51 0b18 	vmov	r0, r1, d8
 8014326:	e7f8      	b.n	801431a <__kernel_rem_pio2+0x8a>
 8014328:	9906      	ldr	r1, [sp, #24]
 801432a:	9d02      	ldr	r5, [sp, #8]
 801432c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014330:	9106      	str	r1, [sp, #24]
 8014332:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014336:	9502      	str	r5, [sp, #8]
 8014338:	f7ec f976 	bl	8000628 <__aeabi_dmul>
 801433c:	4602      	mov	r2, r0
 801433e:	460b      	mov	r3, r1
 8014340:	4640      	mov	r0, r8
 8014342:	4649      	mov	r1, r9
 8014344:	f7eb ffba 	bl	80002bc <__adddf3>
 8014348:	3701      	adds	r7, #1
 801434a:	4680      	mov	r8, r0
 801434c:	4689      	mov	r9, r1
 801434e:	9b07      	ldr	r3, [sp, #28]
 8014350:	429f      	cmp	r7, r3
 8014352:	dde9      	ble.n	8014328 <__kernel_rem_pio2+0x98>
 8014354:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014358:	3601      	adds	r6, #1
 801435a:	e7c9      	b.n	80142f0 <__kernel_rem_pio2+0x60>
 801435c:	9b04      	ldr	r3, [sp, #16]
 801435e:	aa0e      	add	r2, sp, #56	; 0x38
 8014360:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014364:	930c      	str	r3, [sp, #48]	; 0x30
 8014366:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014368:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801436c:	9c04      	ldr	r4, [sp, #16]
 801436e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014370:	ab9a      	add	r3, sp, #616	; 0x268
 8014372:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014376:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801437a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801437e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014382:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014386:	ab9a      	add	r3, sp, #616	; 0x268
 8014388:	445b      	add	r3, fp
 801438a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801438e:	2500      	movs	r5, #0
 8014390:	1b63      	subs	r3, r4, r5
 8014392:	2b00      	cmp	r3, #0
 8014394:	dc78      	bgt.n	8014488 <__kernel_rem_pio2+0x1f8>
 8014396:	4650      	mov	r0, sl
 8014398:	ec49 8b10 	vmov	d0, r8, r9
 801439c:	f000 fc98 	bl	8014cd0 <scalbn>
 80143a0:	ec57 6b10 	vmov	r6, r7, d0
 80143a4:	2200      	movs	r2, #0
 80143a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80143aa:	ee10 0a10 	vmov	r0, s0
 80143ae:	4639      	mov	r1, r7
 80143b0:	f7ec f93a 	bl	8000628 <__aeabi_dmul>
 80143b4:	ec41 0b10 	vmov	d0, r0, r1
 80143b8:	f000 fb76 	bl	8014aa8 <floor>
 80143bc:	2200      	movs	r2, #0
 80143be:	ec51 0b10 	vmov	r0, r1, d0
 80143c2:	4b7e      	ldr	r3, [pc, #504]	; (80145bc <__kernel_rem_pio2+0x32c>)
 80143c4:	f7ec f930 	bl	8000628 <__aeabi_dmul>
 80143c8:	4602      	mov	r2, r0
 80143ca:	460b      	mov	r3, r1
 80143cc:	4630      	mov	r0, r6
 80143ce:	4639      	mov	r1, r7
 80143d0:	f7eb ff72 	bl	80002b8 <__aeabi_dsub>
 80143d4:	460f      	mov	r7, r1
 80143d6:	4606      	mov	r6, r0
 80143d8:	f7ec fbd6 	bl	8000b88 <__aeabi_d2iz>
 80143dc:	9006      	str	r0, [sp, #24]
 80143de:	f7ec f8b9 	bl	8000554 <__aeabi_i2d>
 80143e2:	4602      	mov	r2, r0
 80143e4:	460b      	mov	r3, r1
 80143e6:	4630      	mov	r0, r6
 80143e8:	4639      	mov	r1, r7
 80143ea:	f7eb ff65 	bl	80002b8 <__aeabi_dsub>
 80143ee:	f1ba 0f00 	cmp.w	sl, #0
 80143f2:	4606      	mov	r6, r0
 80143f4:	460f      	mov	r7, r1
 80143f6:	dd6c      	ble.n	80144d2 <__kernel_rem_pio2+0x242>
 80143f8:	1e62      	subs	r2, r4, #1
 80143fa:	ab0e      	add	r3, sp, #56	; 0x38
 80143fc:	f1ca 0118 	rsb	r1, sl, #24
 8014400:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014404:	9d06      	ldr	r5, [sp, #24]
 8014406:	fa40 f301 	asr.w	r3, r0, r1
 801440a:	441d      	add	r5, r3
 801440c:	408b      	lsls	r3, r1
 801440e:	1ac0      	subs	r0, r0, r3
 8014410:	ab0e      	add	r3, sp, #56	; 0x38
 8014412:	9506      	str	r5, [sp, #24]
 8014414:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014418:	f1ca 0317 	rsb	r3, sl, #23
 801441c:	fa40 f303 	asr.w	r3, r0, r3
 8014420:	9302      	str	r3, [sp, #8]
 8014422:	9b02      	ldr	r3, [sp, #8]
 8014424:	2b00      	cmp	r3, #0
 8014426:	dd62      	ble.n	80144ee <__kernel_rem_pio2+0x25e>
 8014428:	9b06      	ldr	r3, [sp, #24]
 801442a:	2200      	movs	r2, #0
 801442c:	3301      	adds	r3, #1
 801442e:	9306      	str	r3, [sp, #24]
 8014430:	4615      	mov	r5, r2
 8014432:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014436:	4294      	cmp	r4, r2
 8014438:	f300 8095 	bgt.w	8014566 <__kernel_rem_pio2+0x2d6>
 801443c:	f1ba 0f00 	cmp.w	sl, #0
 8014440:	dd07      	ble.n	8014452 <__kernel_rem_pio2+0x1c2>
 8014442:	f1ba 0f01 	cmp.w	sl, #1
 8014446:	f000 80a2 	beq.w	801458e <__kernel_rem_pio2+0x2fe>
 801444a:	f1ba 0f02 	cmp.w	sl, #2
 801444e:	f000 80c1 	beq.w	80145d4 <__kernel_rem_pio2+0x344>
 8014452:	9b02      	ldr	r3, [sp, #8]
 8014454:	2b02      	cmp	r3, #2
 8014456:	d14a      	bne.n	80144ee <__kernel_rem_pio2+0x25e>
 8014458:	4632      	mov	r2, r6
 801445a:	463b      	mov	r3, r7
 801445c:	2000      	movs	r0, #0
 801445e:	4958      	ldr	r1, [pc, #352]	; (80145c0 <__kernel_rem_pio2+0x330>)
 8014460:	f7eb ff2a 	bl	80002b8 <__aeabi_dsub>
 8014464:	4606      	mov	r6, r0
 8014466:	460f      	mov	r7, r1
 8014468:	2d00      	cmp	r5, #0
 801446a:	d040      	beq.n	80144ee <__kernel_rem_pio2+0x25e>
 801446c:	4650      	mov	r0, sl
 801446e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80145b0 <__kernel_rem_pio2+0x320>
 8014472:	f000 fc2d 	bl	8014cd0 <scalbn>
 8014476:	4630      	mov	r0, r6
 8014478:	4639      	mov	r1, r7
 801447a:	ec53 2b10 	vmov	r2, r3, d0
 801447e:	f7eb ff1b 	bl	80002b8 <__aeabi_dsub>
 8014482:	4606      	mov	r6, r0
 8014484:	460f      	mov	r7, r1
 8014486:	e032      	b.n	80144ee <__kernel_rem_pio2+0x25e>
 8014488:	2200      	movs	r2, #0
 801448a:	4b4e      	ldr	r3, [pc, #312]	; (80145c4 <__kernel_rem_pio2+0x334>)
 801448c:	4640      	mov	r0, r8
 801448e:	4649      	mov	r1, r9
 8014490:	f7ec f8ca 	bl	8000628 <__aeabi_dmul>
 8014494:	f7ec fb78 	bl	8000b88 <__aeabi_d2iz>
 8014498:	f7ec f85c 	bl	8000554 <__aeabi_i2d>
 801449c:	2200      	movs	r2, #0
 801449e:	4b4a      	ldr	r3, [pc, #296]	; (80145c8 <__kernel_rem_pio2+0x338>)
 80144a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144a4:	f7ec f8c0 	bl	8000628 <__aeabi_dmul>
 80144a8:	4602      	mov	r2, r0
 80144aa:	460b      	mov	r3, r1
 80144ac:	4640      	mov	r0, r8
 80144ae:	4649      	mov	r1, r9
 80144b0:	f7eb ff02 	bl	80002b8 <__aeabi_dsub>
 80144b4:	f7ec fb68 	bl	8000b88 <__aeabi_d2iz>
 80144b8:	ab0e      	add	r3, sp, #56	; 0x38
 80144ba:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80144be:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80144c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144c6:	f7eb fef9 	bl	80002bc <__adddf3>
 80144ca:	3501      	adds	r5, #1
 80144cc:	4680      	mov	r8, r0
 80144ce:	4689      	mov	r9, r1
 80144d0:	e75e      	b.n	8014390 <__kernel_rem_pio2+0x100>
 80144d2:	d105      	bne.n	80144e0 <__kernel_rem_pio2+0x250>
 80144d4:	1e63      	subs	r3, r4, #1
 80144d6:	aa0e      	add	r2, sp, #56	; 0x38
 80144d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80144dc:	15c3      	asrs	r3, r0, #23
 80144de:	e79f      	b.n	8014420 <__kernel_rem_pio2+0x190>
 80144e0:	2200      	movs	r2, #0
 80144e2:	4b3a      	ldr	r3, [pc, #232]	; (80145cc <__kernel_rem_pio2+0x33c>)
 80144e4:	f7ec fb26 	bl	8000b34 <__aeabi_dcmpge>
 80144e8:	2800      	cmp	r0, #0
 80144ea:	d139      	bne.n	8014560 <__kernel_rem_pio2+0x2d0>
 80144ec:	9002      	str	r0, [sp, #8]
 80144ee:	2200      	movs	r2, #0
 80144f0:	2300      	movs	r3, #0
 80144f2:	4630      	mov	r0, r6
 80144f4:	4639      	mov	r1, r7
 80144f6:	f7ec faff 	bl	8000af8 <__aeabi_dcmpeq>
 80144fa:	2800      	cmp	r0, #0
 80144fc:	f000 80c7 	beq.w	801468e <__kernel_rem_pio2+0x3fe>
 8014500:	1e65      	subs	r5, r4, #1
 8014502:	462b      	mov	r3, r5
 8014504:	2200      	movs	r2, #0
 8014506:	9904      	ldr	r1, [sp, #16]
 8014508:	428b      	cmp	r3, r1
 801450a:	da6a      	bge.n	80145e2 <__kernel_rem_pio2+0x352>
 801450c:	2a00      	cmp	r2, #0
 801450e:	f000 8088 	beq.w	8014622 <__kernel_rem_pio2+0x392>
 8014512:	ab0e      	add	r3, sp, #56	; 0x38
 8014514:	f1aa 0a18 	sub.w	sl, sl, #24
 8014518:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801451c:	2b00      	cmp	r3, #0
 801451e:	f000 80b4 	beq.w	801468a <__kernel_rem_pio2+0x3fa>
 8014522:	4650      	mov	r0, sl
 8014524:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80145b0 <__kernel_rem_pio2+0x320>
 8014528:	f000 fbd2 	bl	8014cd0 <scalbn>
 801452c:	00ec      	lsls	r4, r5, #3
 801452e:	ab72      	add	r3, sp, #456	; 0x1c8
 8014530:	191e      	adds	r6, r3, r4
 8014532:	ec59 8b10 	vmov	r8, r9, d0
 8014536:	f106 0a08 	add.w	sl, r6, #8
 801453a:	462f      	mov	r7, r5
 801453c:	2f00      	cmp	r7, #0
 801453e:	f280 80df 	bge.w	8014700 <__kernel_rem_pio2+0x470>
 8014542:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80145a8 <__kernel_rem_pio2+0x318>
 8014546:	f04f 0a00 	mov.w	sl, #0
 801454a:	eba5 030a 	sub.w	r3, r5, sl
 801454e:	2b00      	cmp	r3, #0
 8014550:	f2c0 810a 	blt.w	8014768 <__kernel_rem_pio2+0x4d8>
 8014554:	f8df b078 	ldr.w	fp, [pc, #120]	; 80145d0 <__kernel_rem_pio2+0x340>
 8014558:	ec59 8b18 	vmov	r8, r9, d8
 801455c:	2700      	movs	r7, #0
 801455e:	e0f5      	b.n	801474c <__kernel_rem_pio2+0x4bc>
 8014560:	2302      	movs	r3, #2
 8014562:	9302      	str	r3, [sp, #8]
 8014564:	e760      	b.n	8014428 <__kernel_rem_pio2+0x198>
 8014566:	ab0e      	add	r3, sp, #56	; 0x38
 8014568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801456c:	b94d      	cbnz	r5, 8014582 <__kernel_rem_pio2+0x2f2>
 801456e:	b12b      	cbz	r3, 801457c <__kernel_rem_pio2+0x2ec>
 8014570:	a80e      	add	r0, sp, #56	; 0x38
 8014572:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014576:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801457a:	2301      	movs	r3, #1
 801457c:	3201      	adds	r2, #1
 801457e:	461d      	mov	r5, r3
 8014580:	e759      	b.n	8014436 <__kernel_rem_pio2+0x1a6>
 8014582:	a80e      	add	r0, sp, #56	; 0x38
 8014584:	1acb      	subs	r3, r1, r3
 8014586:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801458a:	462b      	mov	r3, r5
 801458c:	e7f6      	b.n	801457c <__kernel_rem_pio2+0x2ec>
 801458e:	1e62      	subs	r2, r4, #1
 8014590:	ab0e      	add	r3, sp, #56	; 0x38
 8014592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014596:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801459a:	a90e      	add	r1, sp, #56	; 0x38
 801459c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80145a0:	e757      	b.n	8014452 <__kernel_rem_pio2+0x1c2>
 80145a2:	bf00      	nop
 80145a4:	f3af 8000 	nop.w
	...
 80145b4:	3ff00000 	.word	0x3ff00000
 80145b8:	08015b70 	.word	0x08015b70
 80145bc:	40200000 	.word	0x40200000
 80145c0:	3ff00000 	.word	0x3ff00000
 80145c4:	3e700000 	.word	0x3e700000
 80145c8:	41700000 	.word	0x41700000
 80145cc:	3fe00000 	.word	0x3fe00000
 80145d0:	08015b30 	.word	0x08015b30
 80145d4:	1e62      	subs	r2, r4, #1
 80145d6:	ab0e      	add	r3, sp, #56	; 0x38
 80145d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80145e0:	e7db      	b.n	801459a <__kernel_rem_pio2+0x30a>
 80145e2:	a90e      	add	r1, sp, #56	; 0x38
 80145e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80145e8:	3b01      	subs	r3, #1
 80145ea:	430a      	orrs	r2, r1
 80145ec:	e78b      	b.n	8014506 <__kernel_rem_pio2+0x276>
 80145ee:	3301      	adds	r3, #1
 80145f0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80145f4:	2900      	cmp	r1, #0
 80145f6:	d0fa      	beq.n	80145ee <__kernel_rem_pio2+0x35e>
 80145f8:	9a08      	ldr	r2, [sp, #32]
 80145fa:	4422      	add	r2, r4
 80145fc:	00d2      	lsls	r2, r2, #3
 80145fe:	a922      	add	r1, sp, #136	; 0x88
 8014600:	18e3      	adds	r3, r4, r3
 8014602:	9206      	str	r2, [sp, #24]
 8014604:	440a      	add	r2, r1
 8014606:	9302      	str	r3, [sp, #8]
 8014608:	f10b 0108 	add.w	r1, fp, #8
 801460c:	f102 0308 	add.w	r3, r2, #8
 8014610:	1c66      	adds	r6, r4, #1
 8014612:	910a      	str	r1, [sp, #40]	; 0x28
 8014614:	2500      	movs	r5, #0
 8014616:	930d      	str	r3, [sp, #52]	; 0x34
 8014618:	9b02      	ldr	r3, [sp, #8]
 801461a:	42b3      	cmp	r3, r6
 801461c:	da04      	bge.n	8014628 <__kernel_rem_pio2+0x398>
 801461e:	461c      	mov	r4, r3
 8014620:	e6a6      	b.n	8014370 <__kernel_rem_pio2+0xe0>
 8014622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014624:	2301      	movs	r3, #1
 8014626:	e7e3      	b.n	80145f0 <__kernel_rem_pio2+0x360>
 8014628:	9b06      	ldr	r3, [sp, #24]
 801462a:	18ef      	adds	r7, r5, r3
 801462c:	ab22      	add	r3, sp, #136	; 0x88
 801462e:	441f      	add	r7, r3
 8014630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014632:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014636:	f7eb ff8d 	bl	8000554 <__aeabi_i2d>
 801463a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801463c:	461c      	mov	r4, r3
 801463e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014640:	e9c7 0100 	strd	r0, r1, [r7]
 8014644:	eb03 0b05 	add.w	fp, r3, r5
 8014648:	2700      	movs	r7, #0
 801464a:	f04f 0800 	mov.w	r8, #0
 801464e:	f04f 0900 	mov.w	r9, #0
 8014652:	9b07      	ldr	r3, [sp, #28]
 8014654:	429f      	cmp	r7, r3
 8014656:	dd08      	ble.n	801466a <__kernel_rem_pio2+0x3da>
 8014658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801465a:	aa72      	add	r2, sp, #456	; 0x1c8
 801465c:	18eb      	adds	r3, r5, r3
 801465e:	4413      	add	r3, r2
 8014660:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014664:	3601      	adds	r6, #1
 8014666:	3508      	adds	r5, #8
 8014668:	e7d6      	b.n	8014618 <__kernel_rem_pio2+0x388>
 801466a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801466e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014672:	f7eb ffd9 	bl	8000628 <__aeabi_dmul>
 8014676:	4602      	mov	r2, r0
 8014678:	460b      	mov	r3, r1
 801467a:	4640      	mov	r0, r8
 801467c:	4649      	mov	r1, r9
 801467e:	f7eb fe1d 	bl	80002bc <__adddf3>
 8014682:	3701      	adds	r7, #1
 8014684:	4680      	mov	r8, r0
 8014686:	4689      	mov	r9, r1
 8014688:	e7e3      	b.n	8014652 <__kernel_rem_pio2+0x3c2>
 801468a:	3d01      	subs	r5, #1
 801468c:	e741      	b.n	8014512 <__kernel_rem_pio2+0x282>
 801468e:	f1ca 0000 	rsb	r0, sl, #0
 8014692:	ec47 6b10 	vmov	d0, r6, r7
 8014696:	f000 fb1b 	bl	8014cd0 <scalbn>
 801469a:	ec57 6b10 	vmov	r6, r7, d0
 801469e:	2200      	movs	r2, #0
 80146a0:	4b99      	ldr	r3, [pc, #612]	; (8014908 <__kernel_rem_pio2+0x678>)
 80146a2:	ee10 0a10 	vmov	r0, s0
 80146a6:	4639      	mov	r1, r7
 80146a8:	f7ec fa44 	bl	8000b34 <__aeabi_dcmpge>
 80146ac:	b1f8      	cbz	r0, 80146ee <__kernel_rem_pio2+0x45e>
 80146ae:	2200      	movs	r2, #0
 80146b0:	4b96      	ldr	r3, [pc, #600]	; (801490c <__kernel_rem_pio2+0x67c>)
 80146b2:	4630      	mov	r0, r6
 80146b4:	4639      	mov	r1, r7
 80146b6:	f7eb ffb7 	bl	8000628 <__aeabi_dmul>
 80146ba:	f7ec fa65 	bl	8000b88 <__aeabi_d2iz>
 80146be:	4680      	mov	r8, r0
 80146c0:	f7eb ff48 	bl	8000554 <__aeabi_i2d>
 80146c4:	2200      	movs	r2, #0
 80146c6:	4b90      	ldr	r3, [pc, #576]	; (8014908 <__kernel_rem_pio2+0x678>)
 80146c8:	f7eb ffae 	bl	8000628 <__aeabi_dmul>
 80146cc:	460b      	mov	r3, r1
 80146ce:	4602      	mov	r2, r0
 80146d0:	4639      	mov	r1, r7
 80146d2:	4630      	mov	r0, r6
 80146d4:	f7eb fdf0 	bl	80002b8 <__aeabi_dsub>
 80146d8:	f7ec fa56 	bl	8000b88 <__aeabi_d2iz>
 80146dc:	1c65      	adds	r5, r4, #1
 80146de:	ab0e      	add	r3, sp, #56	; 0x38
 80146e0:	f10a 0a18 	add.w	sl, sl, #24
 80146e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80146e8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80146ec:	e719      	b.n	8014522 <__kernel_rem_pio2+0x292>
 80146ee:	4630      	mov	r0, r6
 80146f0:	4639      	mov	r1, r7
 80146f2:	f7ec fa49 	bl	8000b88 <__aeabi_d2iz>
 80146f6:	ab0e      	add	r3, sp, #56	; 0x38
 80146f8:	4625      	mov	r5, r4
 80146fa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80146fe:	e710      	b.n	8014522 <__kernel_rem_pio2+0x292>
 8014700:	ab0e      	add	r3, sp, #56	; 0x38
 8014702:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014706:	f7eb ff25 	bl	8000554 <__aeabi_i2d>
 801470a:	4642      	mov	r2, r8
 801470c:	464b      	mov	r3, r9
 801470e:	f7eb ff8b 	bl	8000628 <__aeabi_dmul>
 8014712:	2200      	movs	r2, #0
 8014714:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014718:	4b7c      	ldr	r3, [pc, #496]	; (801490c <__kernel_rem_pio2+0x67c>)
 801471a:	4640      	mov	r0, r8
 801471c:	4649      	mov	r1, r9
 801471e:	f7eb ff83 	bl	8000628 <__aeabi_dmul>
 8014722:	3f01      	subs	r7, #1
 8014724:	4680      	mov	r8, r0
 8014726:	4689      	mov	r9, r1
 8014728:	e708      	b.n	801453c <__kernel_rem_pio2+0x2ac>
 801472a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014732:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014736:	f7eb ff77 	bl	8000628 <__aeabi_dmul>
 801473a:	4602      	mov	r2, r0
 801473c:	460b      	mov	r3, r1
 801473e:	4640      	mov	r0, r8
 8014740:	4649      	mov	r1, r9
 8014742:	f7eb fdbb 	bl	80002bc <__adddf3>
 8014746:	3701      	adds	r7, #1
 8014748:	4680      	mov	r8, r0
 801474a:	4689      	mov	r9, r1
 801474c:	9b04      	ldr	r3, [sp, #16]
 801474e:	429f      	cmp	r7, r3
 8014750:	dc01      	bgt.n	8014756 <__kernel_rem_pio2+0x4c6>
 8014752:	45ba      	cmp	sl, r7
 8014754:	dae9      	bge.n	801472a <__kernel_rem_pio2+0x49a>
 8014756:	ab4a      	add	r3, sp, #296	; 0x128
 8014758:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801475c:	e9c3 8900 	strd	r8, r9, [r3]
 8014760:	f10a 0a01 	add.w	sl, sl, #1
 8014764:	3e08      	subs	r6, #8
 8014766:	e6f0      	b.n	801454a <__kernel_rem_pio2+0x2ba>
 8014768:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801476a:	2b03      	cmp	r3, #3
 801476c:	d85b      	bhi.n	8014826 <__kernel_rem_pio2+0x596>
 801476e:	e8df f003 	tbb	[pc, r3]
 8014772:	264a      	.short	0x264a
 8014774:	0226      	.short	0x0226
 8014776:	ab9a      	add	r3, sp, #616	; 0x268
 8014778:	441c      	add	r4, r3
 801477a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801477e:	46a2      	mov	sl, r4
 8014780:	46ab      	mov	fp, r5
 8014782:	f1bb 0f00 	cmp.w	fp, #0
 8014786:	dc6c      	bgt.n	8014862 <__kernel_rem_pio2+0x5d2>
 8014788:	46a2      	mov	sl, r4
 801478a:	46ab      	mov	fp, r5
 801478c:	f1bb 0f01 	cmp.w	fp, #1
 8014790:	f300 8086 	bgt.w	80148a0 <__kernel_rem_pio2+0x610>
 8014794:	2000      	movs	r0, #0
 8014796:	2100      	movs	r1, #0
 8014798:	2d01      	cmp	r5, #1
 801479a:	f300 80a0 	bgt.w	80148de <__kernel_rem_pio2+0x64e>
 801479e:	9b02      	ldr	r3, [sp, #8]
 80147a0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80147a4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	f040 809e 	bne.w	80148ea <__kernel_rem_pio2+0x65a>
 80147ae:	9b01      	ldr	r3, [sp, #4]
 80147b0:	e9c3 7800 	strd	r7, r8, [r3]
 80147b4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80147b8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80147bc:	e033      	b.n	8014826 <__kernel_rem_pio2+0x596>
 80147be:	3408      	adds	r4, #8
 80147c0:	ab4a      	add	r3, sp, #296	; 0x128
 80147c2:	441c      	add	r4, r3
 80147c4:	462e      	mov	r6, r5
 80147c6:	2000      	movs	r0, #0
 80147c8:	2100      	movs	r1, #0
 80147ca:	2e00      	cmp	r6, #0
 80147cc:	da3a      	bge.n	8014844 <__kernel_rem_pio2+0x5b4>
 80147ce:	9b02      	ldr	r3, [sp, #8]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d03d      	beq.n	8014850 <__kernel_rem_pio2+0x5c0>
 80147d4:	4602      	mov	r2, r0
 80147d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80147da:	9c01      	ldr	r4, [sp, #4]
 80147dc:	e9c4 2300 	strd	r2, r3, [r4]
 80147e0:	4602      	mov	r2, r0
 80147e2:	460b      	mov	r3, r1
 80147e4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80147e8:	f7eb fd66 	bl	80002b8 <__aeabi_dsub>
 80147ec:	ae4c      	add	r6, sp, #304	; 0x130
 80147ee:	2401      	movs	r4, #1
 80147f0:	42a5      	cmp	r5, r4
 80147f2:	da30      	bge.n	8014856 <__kernel_rem_pio2+0x5c6>
 80147f4:	9b02      	ldr	r3, [sp, #8]
 80147f6:	b113      	cbz	r3, 80147fe <__kernel_rem_pio2+0x56e>
 80147f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80147fc:	4619      	mov	r1, r3
 80147fe:	9b01      	ldr	r3, [sp, #4]
 8014800:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014804:	e00f      	b.n	8014826 <__kernel_rem_pio2+0x596>
 8014806:	ab9a      	add	r3, sp, #616	; 0x268
 8014808:	441c      	add	r4, r3
 801480a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801480e:	2000      	movs	r0, #0
 8014810:	2100      	movs	r1, #0
 8014812:	2d00      	cmp	r5, #0
 8014814:	da10      	bge.n	8014838 <__kernel_rem_pio2+0x5a8>
 8014816:	9b02      	ldr	r3, [sp, #8]
 8014818:	b113      	cbz	r3, 8014820 <__kernel_rem_pio2+0x590>
 801481a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801481e:	4619      	mov	r1, r3
 8014820:	9b01      	ldr	r3, [sp, #4]
 8014822:	e9c3 0100 	strd	r0, r1, [r3]
 8014826:	9b06      	ldr	r3, [sp, #24]
 8014828:	f003 0007 	and.w	r0, r3, #7
 801482c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014830:	ecbd 8b02 	vpop	{d8}
 8014834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014838:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801483c:	f7eb fd3e 	bl	80002bc <__adddf3>
 8014840:	3d01      	subs	r5, #1
 8014842:	e7e6      	b.n	8014812 <__kernel_rem_pio2+0x582>
 8014844:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014848:	f7eb fd38 	bl	80002bc <__adddf3>
 801484c:	3e01      	subs	r6, #1
 801484e:	e7bc      	b.n	80147ca <__kernel_rem_pio2+0x53a>
 8014850:	4602      	mov	r2, r0
 8014852:	460b      	mov	r3, r1
 8014854:	e7c1      	b.n	80147da <__kernel_rem_pio2+0x54a>
 8014856:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801485a:	f7eb fd2f 	bl	80002bc <__adddf3>
 801485e:	3401      	adds	r4, #1
 8014860:	e7c6      	b.n	80147f0 <__kernel_rem_pio2+0x560>
 8014862:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014866:	ed3a 7b02 	vldmdb	sl!, {d7}
 801486a:	4640      	mov	r0, r8
 801486c:	ec53 2b17 	vmov	r2, r3, d7
 8014870:	4649      	mov	r1, r9
 8014872:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014876:	f7eb fd21 	bl	80002bc <__adddf3>
 801487a:	4602      	mov	r2, r0
 801487c:	460b      	mov	r3, r1
 801487e:	4606      	mov	r6, r0
 8014880:	460f      	mov	r7, r1
 8014882:	4640      	mov	r0, r8
 8014884:	4649      	mov	r1, r9
 8014886:	f7eb fd17 	bl	80002b8 <__aeabi_dsub>
 801488a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801488e:	f7eb fd15 	bl	80002bc <__adddf3>
 8014892:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014896:	e9ca 0100 	strd	r0, r1, [sl]
 801489a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801489e:	e770      	b.n	8014782 <__kernel_rem_pio2+0x4f2>
 80148a0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80148a4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80148a8:	4630      	mov	r0, r6
 80148aa:	ec53 2b17 	vmov	r2, r3, d7
 80148ae:	4639      	mov	r1, r7
 80148b0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80148b4:	f7eb fd02 	bl	80002bc <__adddf3>
 80148b8:	4602      	mov	r2, r0
 80148ba:	460b      	mov	r3, r1
 80148bc:	4680      	mov	r8, r0
 80148be:	4689      	mov	r9, r1
 80148c0:	4630      	mov	r0, r6
 80148c2:	4639      	mov	r1, r7
 80148c4:	f7eb fcf8 	bl	80002b8 <__aeabi_dsub>
 80148c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80148cc:	f7eb fcf6 	bl	80002bc <__adddf3>
 80148d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80148d4:	e9ca 0100 	strd	r0, r1, [sl]
 80148d8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80148dc:	e756      	b.n	801478c <__kernel_rem_pio2+0x4fc>
 80148de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80148e2:	f7eb fceb 	bl	80002bc <__adddf3>
 80148e6:	3d01      	subs	r5, #1
 80148e8:	e756      	b.n	8014798 <__kernel_rem_pio2+0x508>
 80148ea:	9b01      	ldr	r3, [sp, #4]
 80148ec:	9a01      	ldr	r2, [sp, #4]
 80148ee:	601f      	str	r7, [r3, #0]
 80148f0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80148f4:	605c      	str	r4, [r3, #4]
 80148f6:	609d      	str	r5, [r3, #8]
 80148f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80148fc:	60d3      	str	r3, [r2, #12]
 80148fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014902:	6110      	str	r0, [r2, #16]
 8014904:	6153      	str	r3, [r2, #20]
 8014906:	e78e      	b.n	8014826 <__kernel_rem_pio2+0x596>
 8014908:	41700000 	.word	0x41700000
 801490c:	3e700000 	.word	0x3e700000

08014910 <__kernel_sin>:
 8014910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014914:	ec55 4b10 	vmov	r4, r5, d0
 8014918:	b085      	sub	sp, #20
 801491a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801491e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014922:	ed8d 1b00 	vstr	d1, [sp]
 8014926:	9002      	str	r0, [sp, #8]
 8014928:	da06      	bge.n	8014938 <__kernel_sin+0x28>
 801492a:	ee10 0a10 	vmov	r0, s0
 801492e:	4629      	mov	r1, r5
 8014930:	f7ec f92a 	bl	8000b88 <__aeabi_d2iz>
 8014934:	2800      	cmp	r0, #0
 8014936:	d051      	beq.n	80149dc <__kernel_sin+0xcc>
 8014938:	4622      	mov	r2, r4
 801493a:	462b      	mov	r3, r5
 801493c:	4620      	mov	r0, r4
 801493e:	4629      	mov	r1, r5
 8014940:	f7eb fe72 	bl	8000628 <__aeabi_dmul>
 8014944:	4682      	mov	sl, r0
 8014946:	468b      	mov	fp, r1
 8014948:	4602      	mov	r2, r0
 801494a:	460b      	mov	r3, r1
 801494c:	4620      	mov	r0, r4
 801494e:	4629      	mov	r1, r5
 8014950:	f7eb fe6a 	bl	8000628 <__aeabi_dmul>
 8014954:	a341      	add	r3, pc, #260	; (adr r3, 8014a5c <__kernel_sin+0x14c>)
 8014956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801495a:	4680      	mov	r8, r0
 801495c:	4689      	mov	r9, r1
 801495e:	4650      	mov	r0, sl
 8014960:	4659      	mov	r1, fp
 8014962:	f7eb fe61 	bl	8000628 <__aeabi_dmul>
 8014966:	a33f      	add	r3, pc, #252	; (adr r3, 8014a64 <__kernel_sin+0x154>)
 8014968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801496c:	f7eb fca4 	bl	80002b8 <__aeabi_dsub>
 8014970:	4652      	mov	r2, sl
 8014972:	465b      	mov	r3, fp
 8014974:	f7eb fe58 	bl	8000628 <__aeabi_dmul>
 8014978:	a33c      	add	r3, pc, #240	; (adr r3, 8014a6c <__kernel_sin+0x15c>)
 801497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801497e:	f7eb fc9d 	bl	80002bc <__adddf3>
 8014982:	4652      	mov	r2, sl
 8014984:	465b      	mov	r3, fp
 8014986:	f7eb fe4f 	bl	8000628 <__aeabi_dmul>
 801498a:	a33a      	add	r3, pc, #232	; (adr r3, 8014a74 <__kernel_sin+0x164>)
 801498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014990:	f7eb fc92 	bl	80002b8 <__aeabi_dsub>
 8014994:	4652      	mov	r2, sl
 8014996:	465b      	mov	r3, fp
 8014998:	f7eb fe46 	bl	8000628 <__aeabi_dmul>
 801499c:	a337      	add	r3, pc, #220	; (adr r3, 8014a7c <__kernel_sin+0x16c>)
 801499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a2:	f7eb fc8b 	bl	80002bc <__adddf3>
 80149a6:	9b02      	ldr	r3, [sp, #8]
 80149a8:	4606      	mov	r6, r0
 80149aa:	460f      	mov	r7, r1
 80149ac:	b9db      	cbnz	r3, 80149e6 <__kernel_sin+0xd6>
 80149ae:	4602      	mov	r2, r0
 80149b0:	460b      	mov	r3, r1
 80149b2:	4650      	mov	r0, sl
 80149b4:	4659      	mov	r1, fp
 80149b6:	f7eb fe37 	bl	8000628 <__aeabi_dmul>
 80149ba:	a325      	add	r3, pc, #148	; (adr r3, 8014a50 <__kernel_sin+0x140>)
 80149bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c0:	f7eb fc7a 	bl	80002b8 <__aeabi_dsub>
 80149c4:	4642      	mov	r2, r8
 80149c6:	464b      	mov	r3, r9
 80149c8:	f7eb fe2e 	bl	8000628 <__aeabi_dmul>
 80149cc:	4602      	mov	r2, r0
 80149ce:	460b      	mov	r3, r1
 80149d0:	4620      	mov	r0, r4
 80149d2:	4629      	mov	r1, r5
 80149d4:	f7eb fc72 	bl	80002bc <__adddf3>
 80149d8:	4604      	mov	r4, r0
 80149da:	460d      	mov	r5, r1
 80149dc:	ec45 4b10 	vmov	d0, r4, r5
 80149e0:	b005      	add	sp, #20
 80149e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149e6:	2200      	movs	r2, #0
 80149e8:	4b1b      	ldr	r3, [pc, #108]	; (8014a58 <__kernel_sin+0x148>)
 80149ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80149ee:	f7eb fe1b 	bl	8000628 <__aeabi_dmul>
 80149f2:	4632      	mov	r2, r6
 80149f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149f8:	463b      	mov	r3, r7
 80149fa:	4640      	mov	r0, r8
 80149fc:	4649      	mov	r1, r9
 80149fe:	f7eb fe13 	bl	8000628 <__aeabi_dmul>
 8014a02:	4602      	mov	r2, r0
 8014a04:	460b      	mov	r3, r1
 8014a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a0a:	f7eb fc55 	bl	80002b8 <__aeabi_dsub>
 8014a0e:	4652      	mov	r2, sl
 8014a10:	465b      	mov	r3, fp
 8014a12:	f7eb fe09 	bl	8000628 <__aeabi_dmul>
 8014a16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a1a:	f7eb fc4d 	bl	80002b8 <__aeabi_dsub>
 8014a1e:	a30c      	add	r3, pc, #48	; (adr r3, 8014a50 <__kernel_sin+0x140>)
 8014a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a24:	4606      	mov	r6, r0
 8014a26:	460f      	mov	r7, r1
 8014a28:	4640      	mov	r0, r8
 8014a2a:	4649      	mov	r1, r9
 8014a2c:	f7eb fdfc 	bl	8000628 <__aeabi_dmul>
 8014a30:	4602      	mov	r2, r0
 8014a32:	460b      	mov	r3, r1
 8014a34:	4630      	mov	r0, r6
 8014a36:	4639      	mov	r1, r7
 8014a38:	f7eb fc40 	bl	80002bc <__adddf3>
 8014a3c:	4602      	mov	r2, r0
 8014a3e:	460b      	mov	r3, r1
 8014a40:	4620      	mov	r0, r4
 8014a42:	4629      	mov	r1, r5
 8014a44:	f7eb fc38 	bl	80002b8 <__aeabi_dsub>
 8014a48:	e7c6      	b.n	80149d8 <__kernel_sin+0xc8>
 8014a4a:	bf00      	nop
 8014a4c:	f3af 8000 	nop.w
 8014a50:	55555549 	.word	0x55555549
 8014a54:	3fc55555 	.word	0x3fc55555
 8014a58:	3fe00000 	.word	0x3fe00000
 8014a5c:	5acfd57c 	.word	0x5acfd57c
 8014a60:	3de5d93a 	.word	0x3de5d93a
 8014a64:	8a2b9ceb 	.word	0x8a2b9ceb
 8014a68:	3e5ae5e6 	.word	0x3e5ae5e6
 8014a6c:	57b1fe7d 	.word	0x57b1fe7d
 8014a70:	3ec71de3 	.word	0x3ec71de3
 8014a74:	19c161d5 	.word	0x19c161d5
 8014a78:	3f2a01a0 	.word	0x3f2a01a0
 8014a7c:	1110f8a6 	.word	0x1110f8a6
 8014a80:	3f811111 	.word	0x3f811111

08014a84 <fabs>:
 8014a84:	ec51 0b10 	vmov	r0, r1, d0
 8014a88:	ee10 2a10 	vmov	r2, s0
 8014a8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014a90:	ec43 2b10 	vmov	d0, r2, r3
 8014a94:	4770      	bx	lr

08014a96 <finite>:
 8014a96:	ee10 3a90 	vmov	r3, s1
 8014a9a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8014a9e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014aa2:	0fc0      	lsrs	r0, r0, #31
 8014aa4:	4770      	bx	lr
	...

08014aa8 <floor>:
 8014aa8:	ec51 0b10 	vmov	r0, r1, d0
 8014aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ab0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014ab4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014ab8:	2e13      	cmp	r6, #19
 8014aba:	460c      	mov	r4, r1
 8014abc:	ee10 5a10 	vmov	r5, s0
 8014ac0:	4680      	mov	r8, r0
 8014ac2:	dc34      	bgt.n	8014b2e <floor+0x86>
 8014ac4:	2e00      	cmp	r6, #0
 8014ac6:	da16      	bge.n	8014af6 <floor+0x4e>
 8014ac8:	a335      	add	r3, pc, #212	; (adr r3, 8014ba0 <floor+0xf8>)
 8014aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ace:	f7eb fbf5 	bl	80002bc <__adddf3>
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	f7ec f837 	bl	8000b48 <__aeabi_dcmpgt>
 8014ada:	b148      	cbz	r0, 8014af0 <floor+0x48>
 8014adc:	2c00      	cmp	r4, #0
 8014ade:	da59      	bge.n	8014b94 <floor+0xec>
 8014ae0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014ae4:	4a30      	ldr	r2, [pc, #192]	; (8014ba8 <floor+0x100>)
 8014ae6:	432b      	orrs	r3, r5
 8014ae8:	2500      	movs	r5, #0
 8014aea:	42ab      	cmp	r3, r5
 8014aec:	bf18      	it	ne
 8014aee:	4614      	movne	r4, r2
 8014af0:	4621      	mov	r1, r4
 8014af2:	4628      	mov	r0, r5
 8014af4:	e025      	b.n	8014b42 <floor+0x9a>
 8014af6:	4f2d      	ldr	r7, [pc, #180]	; (8014bac <floor+0x104>)
 8014af8:	4137      	asrs	r7, r6
 8014afa:	ea01 0307 	and.w	r3, r1, r7
 8014afe:	4303      	orrs	r3, r0
 8014b00:	d01f      	beq.n	8014b42 <floor+0x9a>
 8014b02:	a327      	add	r3, pc, #156	; (adr r3, 8014ba0 <floor+0xf8>)
 8014b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b08:	f7eb fbd8 	bl	80002bc <__adddf3>
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	2300      	movs	r3, #0
 8014b10:	f7ec f81a 	bl	8000b48 <__aeabi_dcmpgt>
 8014b14:	2800      	cmp	r0, #0
 8014b16:	d0eb      	beq.n	8014af0 <floor+0x48>
 8014b18:	2c00      	cmp	r4, #0
 8014b1a:	bfbe      	ittt	lt
 8014b1c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014b20:	fa43 f606 	asrlt.w	r6, r3, r6
 8014b24:	19a4      	addlt	r4, r4, r6
 8014b26:	ea24 0407 	bic.w	r4, r4, r7
 8014b2a:	2500      	movs	r5, #0
 8014b2c:	e7e0      	b.n	8014af0 <floor+0x48>
 8014b2e:	2e33      	cmp	r6, #51	; 0x33
 8014b30:	dd0b      	ble.n	8014b4a <floor+0xa2>
 8014b32:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014b36:	d104      	bne.n	8014b42 <floor+0x9a>
 8014b38:	ee10 2a10 	vmov	r2, s0
 8014b3c:	460b      	mov	r3, r1
 8014b3e:	f7eb fbbd 	bl	80002bc <__adddf3>
 8014b42:	ec41 0b10 	vmov	d0, r0, r1
 8014b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b4a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8014b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b52:	fa23 f707 	lsr.w	r7, r3, r7
 8014b56:	4207      	tst	r7, r0
 8014b58:	d0f3      	beq.n	8014b42 <floor+0x9a>
 8014b5a:	a311      	add	r3, pc, #68	; (adr r3, 8014ba0 <floor+0xf8>)
 8014b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b60:	f7eb fbac 	bl	80002bc <__adddf3>
 8014b64:	2200      	movs	r2, #0
 8014b66:	2300      	movs	r3, #0
 8014b68:	f7eb ffee 	bl	8000b48 <__aeabi_dcmpgt>
 8014b6c:	2800      	cmp	r0, #0
 8014b6e:	d0bf      	beq.n	8014af0 <floor+0x48>
 8014b70:	2c00      	cmp	r4, #0
 8014b72:	da02      	bge.n	8014b7a <floor+0xd2>
 8014b74:	2e14      	cmp	r6, #20
 8014b76:	d103      	bne.n	8014b80 <floor+0xd8>
 8014b78:	3401      	adds	r4, #1
 8014b7a:	ea25 0507 	bic.w	r5, r5, r7
 8014b7e:	e7b7      	b.n	8014af0 <floor+0x48>
 8014b80:	2301      	movs	r3, #1
 8014b82:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014b86:	fa03 f606 	lsl.w	r6, r3, r6
 8014b8a:	4435      	add	r5, r6
 8014b8c:	4545      	cmp	r5, r8
 8014b8e:	bf38      	it	cc
 8014b90:	18e4      	addcc	r4, r4, r3
 8014b92:	e7f2      	b.n	8014b7a <floor+0xd2>
 8014b94:	2500      	movs	r5, #0
 8014b96:	462c      	mov	r4, r5
 8014b98:	e7aa      	b.n	8014af0 <floor+0x48>
 8014b9a:	bf00      	nop
 8014b9c:	f3af 8000 	nop.w
 8014ba0:	8800759c 	.word	0x8800759c
 8014ba4:	7e37e43c 	.word	0x7e37e43c
 8014ba8:	bff00000 	.word	0xbff00000
 8014bac:	000fffff 	.word	0x000fffff

08014bb0 <matherr>:
 8014bb0:	2000      	movs	r0, #0
 8014bb2:	4770      	bx	lr
 8014bb4:	0000      	movs	r0, r0
	...

08014bb8 <nan>:
 8014bb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014bc0 <nan+0x8>
 8014bbc:	4770      	bx	lr
 8014bbe:	bf00      	nop
 8014bc0:	00000000 	.word	0x00000000
 8014bc4:	7ff80000 	.word	0x7ff80000

08014bc8 <rint>:
 8014bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014bca:	ec51 0b10 	vmov	r0, r1, d0
 8014bce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014bd2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014bd6:	2e13      	cmp	r6, #19
 8014bd8:	460b      	mov	r3, r1
 8014bda:	ee10 4a10 	vmov	r4, s0
 8014bde:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014be2:	dc56      	bgt.n	8014c92 <rint+0xca>
 8014be4:	2e00      	cmp	r6, #0
 8014be6:	da2b      	bge.n	8014c40 <rint+0x78>
 8014be8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014bec:	4302      	orrs	r2, r0
 8014bee:	d023      	beq.n	8014c38 <rint+0x70>
 8014bf0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014bf4:	4302      	orrs	r2, r0
 8014bf6:	4254      	negs	r4, r2
 8014bf8:	4314      	orrs	r4, r2
 8014bfa:	0c4b      	lsrs	r3, r1, #17
 8014bfc:	0b24      	lsrs	r4, r4, #12
 8014bfe:	045b      	lsls	r3, r3, #17
 8014c00:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014c04:	ea44 0103 	orr.w	r1, r4, r3
 8014c08:	460b      	mov	r3, r1
 8014c0a:	492f      	ldr	r1, [pc, #188]	; (8014cc8 <rint+0x100>)
 8014c0c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8014c10:	e9d1 6700 	ldrd	r6, r7, [r1]
 8014c14:	4602      	mov	r2, r0
 8014c16:	4639      	mov	r1, r7
 8014c18:	4630      	mov	r0, r6
 8014c1a:	f7eb fb4f 	bl	80002bc <__adddf3>
 8014c1e:	e9cd 0100 	strd	r0, r1, [sp]
 8014c22:	463b      	mov	r3, r7
 8014c24:	4632      	mov	r2, r6
 8014c26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c2a:	f7eb fb45 	bl	80002b8 <__aeabi_dsub>
 8014c2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014c32:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8014c36:	4639      	mov	r1, r7
 8014c38:	ec41 0b10 	vmov	d0, r0, r1
 8014c3c:	b003      	add	sp, #12
 8014c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c40:	4a22      	ldr	r2, [pc, #136]	; (8014ccc <rint+0x104>)
 8014c42:	4132      	asrs	r2, r6
 8014c44:	ea01 0702 	and.w	r7, r1, r2
 8014c48:	4307      	orrs	r7, r0
 8014c4a:	d0f5      	beq.n	8014c38 <rint+0x70>
 8014c4c:	0852      	lsrs	r2, r2, #1
 8014c4e:	4011      	ands	r1, r2
 8014c50:	430c      	orrs	r4, r1
 8014c52:	d00b      	beq.n	8014c6c <rint+0xa4>
 8014c54:	ea23 0202 	bic.w	r2, r3, r2
 8014c58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014c5c:	2e13      	cmp	r6, #19
 8014c5e:	fa43 f306 	asr.w	r3, r3, r6
 8014c62:	bf0c      	ite	eq
 8014c64:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014c68:	2400      	movne	r4, #0
 8014c6a:	4313      	orrs	r3, r2
 8014c6c:	4916      	ldr	r1, [pc, #88]	; (8014cc8 <rint+0x100>)
 8014c6e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014c72:	4622      	mov	r2, r4
 8014c74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014c78:	4620      	mov	r0, r4
 8014c7a:	4629      	mov	r1, r5
 8014c7c:	f7eb fb1e 	bl	80002bc <__adddf3>
 8014c80:	e9cd 0100 	strd	r0, r1, [sp]
 8014c84:	4622      	mov	r2, r4
 8014c86:	462b      	mov	r3, r5
 8014c88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c8c:	f7eb fb14 	bl	80002b8 <__aeabi_dsub>
 8014c90:	e7d2      	b.n	8014c38 <rint+0x70>
 8014c92:	2e33      	cmp	r6, #51	; 0x33
 8014c94:	dd07      	ble.n	8014ca6 <rint+0xde>
 8014c96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014c9a:	d1cd      	bne.n	8014c38 <rint+0x70>
 8014c9c:	ee10 2a10 	vmov	r2, s0
 8014ca0:	f7eb fb0c 	bl	80002bc <__adddf3>
 8014ca4:	e7c8      	b.n	8014c38 <rint+0x70>
 8014ca6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8014caa:	f04f 32ff 	mov.w	r2, #4294967295
 8014cae:	40f2      	lsrs	r2, r6
 8014cb0:	4210      	tst	r0, r2
 8014cb2:	d0c1      	beq.n	8014c38 <rint+0x70>
 8014cb4:	0852      	lsrs	r2, r2, #1
 8014cb6:	4210      	tst	r0, r2
 8014cb8:	bf1f      	itttt	ne
 8014cba:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8014cbe:	ea20 0202 	bicne.w	r2, r0, r2
 8014cc2:	4134      	asrne	r4, r6
 8014cc4:	4314      	orrne	r4, r2
 8014cc6:	e7d1      	b.n	8014c6c <rint+0xa4>
 8014cc8:	08015b80 	.word	0x08015b80
 8014ccc:	000fffff 	.word	0x000fffff

08014cd0 <scalbn>:
 8014cd0:	b570      	push	{r4, r5, r6, lr}
 8014cd2:	ec55 4b10 	vmov	r4, r5, d0
 8014cd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014cda:	4606      	mov	r6, r0
 8014cdc:	462b      	mov	r3, r5
 8014cde:	b9aa      	cbnz	r2, 8014d0c <scalbn+0x3c>
 8014ce0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014ce4:	4323      	orrs	r3, r4
 8014ce6:	d03b      	beq.n	8014d60 <scalbn+0x90>
 8014ce8:	4b31      	ldr	r3, [pc, #196]	; (8014db0 <scalbn+0xe0>)
 8014cea:	4629      	mov	r1, r5
 8014cec:	2200      	movs	r2, #0
 8014cee:	ee10 0a10 	vmov	r0, s0
 8014cf2:	f7eb fc99 	bl	8000628 <__aeabi_dmul>
 8014cf6:	4b2f      	ldr	r3, [pc, #188]	; (8014db4 <scalbn+0xe4>)
 8014cf8:	429e      	cmp	r6, r3
 8014cfa:	4604      	mov	r4, r0
 8014cfc:	460d      	mov	r5, r1
 8014cfe:	da12      	bge.n	8014d26 <scalbn+0x56>
 8014d00:	a327      	add	r3, pc, #156	; (adr r3, 8014da0 <scalbn+0xd0>)
 8014d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d06:	f7eb fc8f 	bl	8000628 <__aeabi_dmul>
 8014d0a:	e009      	b.n	8014d20 <scalbn+0x50>
 8014d0c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014d10:	428a      	cmp	r2, r1
 8014d12:	d10c      	bne.n	8014d2e <scalbn+0x5e>
 8014d14:	ee10 2a10 	vmov	r2, s0
 8014d18:	4620      	mov	r0, r4
 8014d1a:	4629      	mov	r1, r5
 8014d1c:	f7eb face 	bl	80002bc <__adddf3>
 8014d20:	4604      	mov	r4, r0
 8014d22:	460d      	mov	r5, r1
 8014d24:	e01c      	b.n	8014d60 <scalbn+0x90>
 8014d26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014d2a:	460b      	mov	r3, r1
 8014d2c:	3a36      	subs	r2, #54	; 0x36
 8014d2e:	4432      	add	r2, r6
 8014d30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014d34:	428a      	cmp	r2, r1
 8014d36:	dd0b      	ble.n	8014d50 <scalbn+0x80>
 8014d38:	ec45 4b11 	vmov	d1, r4, r5
 8014d3c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014da8 <scalbn+0xd8>
 8014d40:	f000 f83c 	bl	8014dbc <copysign>
 8014d44:	a318      	add	r3, pc, #96	; (adr r3, 8014da8 <scalbn+0xd8>)
 8014d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d4a:	ec51 0b10 	vmov	r0, r1, d0
 8014d4e:	e7da      	b.n	8014d06 <scalbn+0x36>
 8014d50:	2a00      	cmp	r2, #0
 8014d52:	dd08      	ble.n	8014d66 <scalbn+0x96>
 8014d54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014d58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014d5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014d60:	ec45 4b10 	vmov	d0, r4, r5
 8014d64:	bd70      	pop	{r4, r5, r6, pc}
 8014d66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014d6a:	da0d      	bge.n	8014d88 <scalbn+0xb8>
 8014d6c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014d70:	429e      	cmp	r6, r3
 8014d72:	ec45 4b11 	vmov	d1, r4, r5
 8014d76:	dce1      	bgt.n	8014d3c <scalbn+0x6c>
 8014d78:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014da0 <scalbn+0xd0>
 8014d7c:	f000 f81e 	bl	8014dbc <copysign>
 8014d80:	a307      	add	r3, pc, #28	; (adr r3, 8014da0 <scalbn+0xd0>)
 8014d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d86:	e7e0      	b.n	8014d4a <scalbn+0x7a>
 8014d88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014d8c:	3236      	adds	r2, #54	; 0x36
 8014d8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014d92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014d96:	4620      	mov	r0, r4
 8014d98:	4629      	mov	r1, r5
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	4b06      	ldr	r3, [pc, #24]	; (8014db8 <scalbn+0xe8>)
 8014d9e:	e7b2      	b.n	8014d06 <scalbn+0x36>
 8014da0:	c2f8f359 	.word	0xc2f8f359
 8014da4:	01a56e1f 	.word	0x01a56e1f
 8014da8:	8800759c 	.word	0x8800759c
 8014dac:	7e37e43c 	.word	0x7e37e43c
 8014db0:	43500000 	.word	0x43500000
 8014db4:	ffff3cb0 	.word	0xffff3cb0
 8014db8:	3c900000 	.word	0x3c900000

08014dbc <copysign>:
 8014dbc:	ec51 0b10 	vmov	r0, r1, d0
 8014dc0:	ee11 0a90 	vmov	r0, s3
 8014dc4:	ee10 2a10 	vmov	r2, s0
 8014dc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014dcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014dd0:	ea41 0300 	orr.w	r3, r1, r0
 8014dd4:	ec43 2b10 	vmov	d0, r2, r3
 8014dd8:	4770      	bx	lr
	...

08014ddc <_init>:
 8014ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dde:	bf00      	nop
 8014de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014de2:	bc08      	pop	{r3}
 8014de4:	469e      	mov	lr, r3
 8014de6:	4770      	bx	lr

08014de8 <_fini>:
 8014de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dea:	bf00      	nop
 8014dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dee:	bc08      	pop	{r3}
 8014df0:	469e      	mov	lr, r3
 8014df2:	4770      	bx	lr
