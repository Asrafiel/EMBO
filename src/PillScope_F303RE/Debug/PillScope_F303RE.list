
PillScope_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000133ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  08013590  08013590  00023590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014128  08014128  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08014128  08014128  00024128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014130  08014130  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014130  08014130  00024130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014134  08014134  00024134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08014138  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cd9c  200001f8  08014330  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cf94  08014330  0003cf94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032876  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006106  00000000  00000000  00062a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022f8  00000000  00000000  00068ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002060  00000000  00000000  0006aea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cacc  00000000  00000000  0006cf00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f4f9  00000000  00000000  000999cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6f76  00000000  00000000  000b8ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001afe3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ed4  00000000  00000000  001afeb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013574 	.word	0x08013574

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08013574 	.word	0x08013574

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	609a      	str	r2, [r3, #8]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_ADC_REG_SetTriggerEdge>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	60da      	str	r2, [r3, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3330      	adds	r3, #48	; 0x30
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000fdc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fe0:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	fa92 f2a2 	rbit	r2, r2
 8000fe8:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	fab2 f282 	clz	r2, r2
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	40d3      	lsrs	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f003 031f 	and.w	r3, r3, #31
 8001004:	211f      	movs	r1, #31
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	401a      	ands	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0e9b      	lsrs	r3, r3, #26
 8001012:	f003 011f 	and.w	r1, r3, #31
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	431a      	orrs	r2, r3
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001026:	bf00      	nop
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001032:	b480      	push	{r7}
 8001034:	b08d      	sub	sp, #52	; 0x34
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3314      	adds	r3, #20
 8001042:	4619      	mov	r1, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800104e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	fa92 f2a2 	rbit	r2, r2
 8001056:	617a      	str	r2, [r7, #20]
  return result;
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	fab2 f282 	clz	r2, r2
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	40d3      	lsrs	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8001068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001072:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001076:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	6a39      	ldr	r1, [r7, #32]
 800107a:	fa91 f1a1 	rbit	r1, r1
 800107e:	61f9      	str	r1, [r7, #28]
  return result;
 8001080:	69f9      	ldr	r1, [r7, #28]
 8001082:	fab1 f181 	clz	r1, r1
 8001086:	b2c9      	uxtb	r1, r1
 8001088:	40cb      	lsrs	r3, r1
 800108a:	2107      	movs	r1, #7
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	401a      	ands	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800109a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800109e:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010a2:	fa91 f1a1 	rbit	r1, r1
 80010a6:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80010a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010aa:	fab1 f181 	clz	r1, r1
 80010ae:	b2c9      	uxtb	r1, r1
 80010b0:	40cb      	lsrs	r3, r1
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	431a      	orrs	r2, r3
 80010ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80010be:	bf00      	nop
 80010c0:	3734      	adds	r7, #52	; 0x34
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010e2:	400b      	ands	r3, r1
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0318 	and.w	r3, r3, #24
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010f0:	40d9      	lsrs	r1, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	4019      	ands	r1, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010f8:	400b      	ands	r3, r1
 80010fa:	431a      	orrs	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	0007fffe 	.word	0x0007fffe

08001114 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, __ADC_MASK_SHIFT(AWDy, ADC_AWD_CRX_REGOFFSET_MASK)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	330c      	adds	r3, #12
 8001124:	4618      	mov	r0, r3
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800112c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001130:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	fa92 f2a2 	rbit	r2, r2
 8001138:	617a      	str	r2, [r7, #20]
  return result;
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	fab2 f282 	clz	r2, r2
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	fa23 f102 	lsr.w	r1, r3, r2
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f003 0202 	and.w	r2, r3, #2
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4403      	add	r3, r0
 800115a:	61fb      	str	r3, [r7, #28]
                                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));
  
  MODIFY_REG(*preg,
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <LL_ADC_SetAnalogWDMonitChannels+0x70>)
 8001164:	400b      	ands	r3, r1
 8001166:	43db      	mvns	r3, r3
 8001168:	401a      	ands	r2, r3
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	400b      	ands	r3, r1
 8001170:	431a      	orrs	r2, r3
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8001176:	bf00      	nop
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	7dc7fffe 	.word	0x7dc7fffe

08001188 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, __ADC_MASK_SHIFT(AWDy, ADC_AWD_TRX_REGOFFSET_MASK));
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3320      	adds	r3, #32
 800119a:	4619      	mov	r1, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80011a2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80011a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	fa92 f2a2 	rbit	r2, r2
 80011ae:	617a      	str	r2, [r7, #20]
  return result;
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	fab2 f282 	clz	r2, r2
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	40d3      	lsrs	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	0419      	lsls	r1, r3, #16
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	430b      	orrs	r3, r1
 80011d0:	431a      	orrs	r2, r3
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80011d6:	bf00      	nop
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* 1. Set the intermediate state before moving the ADC voltage regulator    */
  /*    to state enable.                                                      */
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	609a      	str	r2, [r3, #8]
  /* 2. Set the final state of ADC voltage regulator enable                   */
  /*    (ADVREGEN bits set to 0x01).                                          */
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001202:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN_0);
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	605a      	str	r2, [r3, #4]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_DAC_EnableTrigger>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2104      	movs	r1, #4
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	601a      	str	r2, [r3, #0]
          DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	3b01      	subs	r3, #1
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <LL_DMA_SetDataTransferDirection+0x48>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	461a      	mov	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4413      	add	r3, r2
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001284:	f023 0310 	bic.w	r3, r3, #16
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	3a01      	subs	r2, #1
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <LL_DMA_SetDataTransferDirection+0x48>)
 800128e:	5c8a      	ldrb	r2, [r1, r2]
 8001290:	4611      	mov	r1, r2
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	440a      	add	r2, r1
 8001296:	4611      	mov	r1, r2
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	08013ce4 	.word	0x08013ce4

080012b0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3b01      	subs	r3, #1
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <LL_DMA_SetMode+0x44>)
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	461a      	mov	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f023 0220 	bic.w	r2, r3, #32
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <LL_DMA_SetMode+0x44>)
 80012d6:	5ccb      	ldrb	r3, [r1, r3]
 80012d8:	4619      	mov	r1, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	440b      	add	r3, r1
 80012de:	4619      	mov	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
             Mode);
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	08013ce4 	.word	0x08013ce4

080012f8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	3b01      	subs	r3, #1
 8001308:	4a0c      	ldr	r2, [pc, #48]	; (800133c <LL_DMA_SetPeriphIncMode+0x44>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	3b01      	subs	r3, #1
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <LL_DMA_SetPeriphIncMode+0x44>)
 800131e:	5ccb      	ldrb	r3, [r1, r3]
 8001320:	4619      	mov	r1, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	440b      	add	r3, r1
 8001326:	4619      	mov	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	08013ce4 	.word	0x08013ce4

08001340 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	3b01      	subs	r3, #1
 8001350:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <LL_DMA_SetMemoryIncMode+0x44>)
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	461a      	mov	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	3b01      	subs	r3, #1
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <LL_DMA_SetMemoryIncMode+0x44>)
 8001366:	5ccb      	ldrb	r3, [r1, r3]
 8001368:	4619      	mov	r1, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	440b      	add	r3, r1
 800136e:	4619      	mov	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	08013ce4 	.word	0x08013ce4

08001388 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	3b01      	subs	r3, #1
 8001398:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <LL_DMA_SetPeriphSize+0x44>)
 800139a:	5cd3      	ldrb	r3, [r2, r3]
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <LL_DMA_SetPeriphSize+0x44>)
 80013ae:	5ccb      	ldrb	r3, [r1, r3]
 80013b0:	4619      	mov	r1, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	440b      	add	r3, r1
 80013b6:	4619      	mov	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	08013ce4 	.word	0x08013ce4

080013d0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	3b01      	subs	r3, #1
 80013e0:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <LL_DMA_SetMemorySize+0x44>)
 80013e2:	5cd3      	ldrb	r3, [r2, r3]
 80013e4:	461a      	mov	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4413      	add	r3, r2
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <LL_DMA_SetMemorySize+0x44>)
 80013f6:	5ccb      	ldrb	r3, [r1, r3]
 80013f8:	4619      	mov	r1, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	440b      	add	r3, r1
 80013fe:	4619      	mov	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	08013ce4 	.word	0x08013ce4

08001418 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	3b01      	subs	r3, #1
 8001428:	4a0c      	ldr	r2, [pc, #48]	; (800145c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800142a:	5cd3      	ldrb	r3, [r2, r3]
 800142c:	461a      	mov	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3b01      	subs	r3, #1
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800143e:	5ccb      	ldrb	r3, [r1, r3]
 8001440:	4619      	mov	r1, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	440b      	add	r3, r1
 8001446:	4619      	mov	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	08013ce4 	.word	0x08013ce4

08001460 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <LL_RCC_HSI_Enable+0x1c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <LL_RCC_HSI_Enable+0x1c>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <LL_RCC_HSI_IsReady+0x20>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b02      	cmp	r3, #2
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40021000 	.word	0x40021000

080014a4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4904      	ldr	r1, [pc, #16]	; (80014cc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <LL_RCC_SetSysClkSource+0x24>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f023 0203 	bic.w	r2, r3, #3
 80014e0:	4904      	ldr	r1, [pc, #16]	; (80014f4 <LL_RCC_SetSysClkSource+0x24>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000

080014f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <LL_RCC_GetSysClkSource+0x18>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 030c 	and.w	r3, r3, #12
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <LL_RCC_SetAHBPrescaler+0x24>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001524:	4904      	ldr	r1, [pc, #16]	; (8001538 <LL_RCC_SetAHBPrescaler+0x24>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000

0800153c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800154c:	4904      	ldr	r1, [pc, #16]	; (8001560 <LL_RCC_SetAPB1Prescaler+0x24>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000

08001564 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <LL_RCC_SetAPB2Prescaler+0x24>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001574:	4904      	ldr	r1, [pc, #16]	; (8001588 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000

0800158c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <LL_RCC_SetUSARTClockSource+0x34>)
 8001596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	0e1b      	lsrs	r3, r3, #24
 800159c:	2103      	movs	r1, #3
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	401a      	ands	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80015ac:	4904      	ldr	r1, [pc, #16]	; (80015c0 <LL_RCC_SetUSARTClockSource+0x34>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000

080015c4 <LL_RCC_SetTIMClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMClockSource(uint32_t TIMxSource)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_TIM1SW << (TIMxSource >> 27U)), (TIMxSource & 0x03FFFFFFU));
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <LL_RCC_SetTIMClockSource+0x34>)
 80015ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	0edb      	lsrs	r3, r3, #27
 80015d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	401a      	ands	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80015e6:	4904      	ldr	r1, [pc, #16]	; (80015f8 <LL_RCC_SetTIMClockSource+0x34>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	630b      	str	r3, [r1, #48]	; 0x30
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40021000 	.word	0x40021000

080015fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <LL_RCC_PLL_Enable+0x1c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <LL_RCC_PLL_Enable+0x1c>)
 8001606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000

0800161c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <LL_RCC_PLL_IsReady+0x24>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800162c:	bf0c      	ite	eq
 800162e:	2301      	moveq	r3, #1
 8001630:	2300      	movne	r3, #0
 8001632:	b2db      	uxtb	r3, r3
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001658:	68f9      	ldr	r1, [r7, #12]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	430b      	orrs	r3, r1
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	f023 020f 	bic.w	r2, r3, #15
 800166c:	4904      	ldr	r1, [pc, #16]	; (8001680 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4313      	orrs	r3, r2
 8001672:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40021000 	.word	0x40021000

08001684 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800168e:	695a      	ldr	r2, [r3, #20]
 8001690:	4907      	ldr	r1, [pc, #28]	; (80016b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4313      	orrs	r3, r2
 8001696:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4013      	ands	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000

080016b4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016be:	69da      	ldr	r2, [r3, #28]
 80016c0:	4907      	ldr	r1, [pc, #28]	; (80016e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016ca:	69da      	ldr	r2, [r3, #28]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40021000 	.word	0x40021000

080016e4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016ee:	699a      	ldr	r2, [r3, #24]
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016fa:	699a      	ldr	r2, [r3, #24]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4013      	ands	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000

08001714 <LL_SYSCFG_SetRemapDMA_ADC>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_ADC(uint32_t Remap)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(SYSCFG_BASE + (Remap >> 24U)); 
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	0e1b      	lsrs	r3, r3, #24
 8001720:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001724:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, (Remap & 0x00FF0000U) >> 8U, (Remap & 0x0000FFFFU));
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001736:	43db      	mvns	r3, r3
 8001738:	401a      	ands	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	b29b      	uxth	r3, r3
 800173e:	431a      	orrs	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	601a      	str	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_SYSCFG_SetRemapDMA_DAC>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_DAC(uint32_t Remap)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR1, (Remap & 0x00FF0000U) >> 8U, (Remap & 0x0000FF00U));
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001764:	43db      	mvns	r3, r3
 8001766:	401a      	ands	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800176e:	4904      	ldr	r1, [pc, #16]	; (8001780 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	40010000 	.word	0x40010000

08001784 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <LL_SYSCFG_SetEXTISource+0x58>)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	3302      	adds	r3, #2
 8001796:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	43db      	mvns	r3, r3
 80017a0:	ea02 0103 	and.w	r1, r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	0c1b      	lsrs	r3, r3, #16
 80017a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	fa93 f3a3 	rbit	r3, r3
 80017b0:	60bb      	str	r3, [r7, #8]
  return result;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	fa03 f202 	lsl.w	r2, r3, r2
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <LL_SYSCFG_SetEXTISource+0x58>)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	430a      	orrs	r2, r1
 80017ca:	3302      	adds	r3, #2
 80017cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40010000 	.word	0x40010000

080017e0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <LL_FLASH_SetLatency+0x24>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 0207 	bic.w	r2, r3, #7
 80017f0:	4904      	ldr	r1, [pc, #16]	; (8001804 <LL_FLASH_SetLatency+0x24>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40022000 	.word	0x40022000

08001808 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <LL_FLASH_GetLatency+0x18>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40022000 	.word	0x40022000

08001824 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	601a      	str	r2, [r3, #0]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	601a      	str	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_TIM_OC_DisableFast>:
  * @note   OC5FE and OC6FE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d028      	beq.n	80018c6 <LL_TIM_OC_DisableFast+0x62>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2b04      	cmp	r3, #4
 8001878:	d023      	beq.n	80018c2 <LL_TIM_OC_DisableFast+0x5e>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b10      	cmp	r3, #16
 800187e:	d01e      	beq.n	80018be <LL_TIM_OC_DisableFast+0x5a>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b40      	cmp	r3, #64	; 0x40
 8001884:	d019      	beq.n	80018ba <LL_TIM_OC_DisableFast+0x56>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800188c:	d013      	beq.n	80018b6 <LL_TIM_OC_DisableFast+0x52>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001894:	d00d      	beq.n	80018b2 <LL_TIM_OC_DisableFast+0x4e>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800189c:	d007      	beq.n	80018ae <LL_TIM_OC_DisableFast+0x4a>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a4:	d101      	bne.n	80018aa <LL_TIM_OC_DisableFast+0x46>
 80018a6:	2307      	movs	r3, #7
 80018a8:	e00e      	b.n	80018c8 <LL_TIM_OC_DisableFast+0x64>
 80018aa:	2308      	movs	r3, #8
 80018ac:	e00c      	b.n	80018c8 <LL_TIM_OC_DisableFast+0x64>
 80018ae:	2306      	movs	r3, #6
 80018b0:	e00a      	b.n	80018c8 <LL_TIM_OC_DisableFast+0x64>
 80018b2:	2305      	movs	r3, #5
 80018b4:	e008      	b.n	80018c8 <LL_TIM_OC_DisableFast+0x64>
 80018b6:	2304      	movs	r3, #4
 80018b8:	e006      	b.n	80018c8 <LL_TIM_OC_DisableFast+0x64>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e004      	b.n	80018c8 <LL_TIM_OC_DisableFast+0x64>
 80018be:	2302      	movs	r3, #2
 80018c0:	e002      	b.n	80018c8 <LL_TIM_OC_DisableFast+0x64>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <LL_TIM_OC_DisableFast+0x64>
 80018c6:	2300      	movs	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3318      	adds	r3, #24
 80018ce:	4619      	mov	r1, r3
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <LL_TIM_OC_DisableFast+0x9c>)
 80018d4:	5cd3      	ldrb	r3, [r2, r3]
 80018d6:	440b      	add	r3, r1
 80018d8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	4908      	ldr	r1, [pc, #32]	; (8001904 <LL_TIM_OC_DisableFast+0xa0>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	4619      	mov	r1, r3
 80018e6:	2304      	movs	r3, #4
 80018e8:	408b      	lsls	r3, r1
 80018ea:	43db      	mvns	r3, r3
 80018ec:	401a      	ands	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	601a      	str	r2, [r3, #0]

}
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	08013cec 	.word	0x08013cec
 8001904:	08013cf8 	.word	0x08013cf8

08001908 <LL_TIM_OC_EnablePreload>:
  * @note   OC5PE and OC6PE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d028      	beq.n	800196a <LL_TIM_OC_EnablePreload+0x62>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b04      	cmp	r3, #4
 800191c:	d023      	beq.n	8001966 <LL_TIM_OC_EnablePreload+0x5e>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b10      	cmp	r3, #16
 8001922:	d01e      	beq.n	8001962 <LL_TIM_OC_EnablePreload+0x5a>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b40      	cmp	r3, #64	; 0x40
 8001928:	d019      	beq.n	800195e <LL_TIM_OC_EnablePreload+0x56>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001930:	d013      	beq.n	800195a <LL_TIM_OC_EnablePreload+0x52>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001938:	d00d      	beq.n	8001956 <LL_TIM_OC_EnablePreload+0x4e>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001940:	d007      	beq.n	8001952 <LL_TIM_OC_EnablePreload+0x4a>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d101      	bne.n	800194e <LL_TIM_OC_EnablePreload+0x46>
 800194a:	2307      	movs	r3, #7
 800194c:	e00e      	b.n	800196c <LL_TIM_OC_EnablePreload+0x64>
 800194e:	2308      	movs	r3, #8
 8001950:	e00c      	b.n	800196c <LL_TIM_OC_EnablePreload+0x64>
 8001952:	2306      	movs	r3, #6
 8001954:	e00a      	b.n	800196c <LL_TIM_OC_EnablePreload+0x64>
 8001956:	2305      	movs	r3, #5
 8001958:	e008      	b.n	800196c <LL_TIM_OC_EnablePreload+0x64>
 800195a:	2304      	movs	r3, #4
 800195c:	e006      	b.n	800196c <LL_TIM_OC_EnablePreload+0x64>
 800195e:	2303      	movs	r3, #3
 8001960:	e004      	b.n	800196c <LL_TIM_OC_EnablePreload+0x64>
 8001962:	2302      	movs	r3, #2
 8001964:	e002      	b.n	800196c <LL_TIM_OC_EnablePreload+0x64>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <LL_TIM_OC_EnablePreload+0x64>
 800196a:	2300      	movs	r3, #0
 800196c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3318      	adds	r3, #24
 8001972:	4619      	mov	r1, r3
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <LL_TIM_OC_EnablePreload+0x98>)
 8001978:	5cd3      	ldrb	r3, [r2, r3]
 800197a:	440b      	add	r3, r1
 800197c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	4907      	ldr	r1, [pc, #28]	; (80019a4 <LL_TIM_OC_EnablePreload+0x9c>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	4619      	mov	r1, r3
 800198a:	2308      	movs	r3, #8
 800198c:	408b      	lsls	r3, r1
 800198e:	431a      	orrs	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	601a      	str	r2, [r3, #0]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	08013cec 	.word	0x08013cec
 80019a4:	08013cf8 	.word	0x08013cf8

080019a8 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d028      	beq.n	8001a0c <LL_TIM_IC_SetActiveInput+0x64>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d023      	beq.n	8001a08 <LL_TIM_IC_SetActiveInput+0x60>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b10      	cmp	r3, #16
 80019c4:	d01e      	beq.n	8001a04 <LL_TIM_IC_SetActiveInput+0x5c>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b40      	cmp	r3, #64	; 0x40
 80019ca:	d019      	beq.n	8001a00 <LL_TIM_IC_SetActiveInput+0x58>
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d2:	d013      	beq.n	80019fc <LL_TIM_IC_SetActiveInput+0x54>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019da:	d00d      	beq.n	80019f8 <LL_TIM_IC_SetActiveInput+0x50>
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e2:	d007      	beq.n	80019f4 <LL_TIM_IC_SetActiveInput+0x4c>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ea:	d101      	bne.n	80019f0 <LL_TIM_IC_SetActiveInput+0x48>
 80019ec:	2307      	movs	r3, #7
 80019ee:	e00e      	b.n	8001a0e <LL_TIM_IC_SetActiveInput+0x66>
 80019f0:	2308      	movs	r3, #8
 80019f2:	e00c      	b.n	8001a0e <LL_TIM_IC_SetActiveInput+0x66>
 80019f4:	2306      	movs	r3, #6
 80019f6:	e00a      	b.n	8001a0e <LL_TIM_IC_SetActiveInput+0x66>
 80019f8:	2305      	movs	r3, #5
 80019fa:	e008      	b.n	8001a0e <LL_TIM_IC_SetActiveInput+0x66>
 80019fc:	2304      	movs	r3, #4
 80019fe:	e006      	b.n	8001a0e <LL_TIM_IC_SetActiveInput+0x66>
 8001a00:	2303      	movs	r3, #3
 8001a02:	e004      	b.n	8001a0e <LL_TIM_IC_SetActiveInput+0x66>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e002      	b.n	8001a0e <LL_TIM_IC_SetActiveInput+0x66>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <LL_TIM_IC_SetActiveInput+0x66>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3318      	adds	r3, #24
 8001a14:	4619      	mov	r1, r3
 8001a16:	7dfb      	ldrb	r3, [r7, #23]
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <LL_TIM_IC_SetActiveInput+0xac>)
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	440b      	add	r3, r1
 8001a1e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	490c      	ldr	r1, [pc, #48]	; (8001a58 <LL_TIM_IC_SetActiveInput+0xb0>)
 8001a28:	5ccb      	ldrb	r3, [r1, r3]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	408b      	lsls	r3, r1
 8001a30:	43db      	mvns	r3, r3
 8001a32:	401a      	ands	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	7df9      	ldrb	r1, [r7, #23]
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <LL_TIM_IC_SetActiveInput+0xb0>)
 8001a3c:	5c41      	ldrb	r1, [r0, r1]
 8001a3e:	408b      	lsls	r3, r1
 8001a40:	431a      	orrs	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	08013cec 	.word	0x08013cec
 8001a58:	08013d04 	.word	0x08013d04

08001a5c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d028      	beq.n	8001ac0 <LL_TIM_IC_SetPrescaler+0x64>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d023      	beq.n	8001abc <LL_TIM_IC_SetPrescaler+0x60>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d01e      	beq.n	8001ab8 <LL_TIM_IC_SetPrescaler+0x5c>
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2b40      	cmp	r3, #64	; 0x40
 8001a7e:	d019      	beq.n	8001ab4 <LL_TIM_IC_SetPrescaler+0x58>
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a86:	d013      	beq.n	8001ab0 <LL_TIM_IC_SetPrescaler+0x54>
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8e:	d00d      	beq.n	8001aac <LL_TIM_IC_SetPrescaler+0x50>
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a96:	d007      	beq.n	8001aa8 <LL_TIM_IC_SetPrescaler+0x4c>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9e:	d101      	bne.n	8001aa4 <LL_TIM_IC_SetPrescaler+0x48>
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	e00e      	b.n	8001ac2 <LL_TIM_IC_SetPrescaler+0x66>
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	e00c      	b.n	8001ac2 <LL_TIM_IC_SetPrescaler+0x66>
 8001aa8:	2306      	movs	r3, #6
 8001aaa:	e00a      	b.n	8001ac2 <LL_TIM_IC_SetPrescaler+0x66>
 8001aac:	2305      	movs	r3, #5
 8001aae:	e008      	b.n	8001ac2 <LL_TIM_IC_SetPrescaler+0x66>
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	e006      	b.n	8001ac2 <LL_TIM_IC_SetPrescaler+0x66>
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e004      	b.n	8001ac2 <LL_TIM_IC_SetPrescaler+0x66>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e002      	b.n	8001ac2 <LL_TIM_IC_SetPrescaler+0x66>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <LL_TIM_IC_SetPrescaler+0x66>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3318      	adds	r3, #24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <LL_TIM_IC_SetPrescaler+0xac>)
 8001ace:	5cd3      	ldrb	r3, [r2, r3]
 8001ad0:	440b      	add	r3, r1
 8001ad2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	7dfb      	ldrb	r3, [r7, #23]
 8001ada:	490c      	ldr	r1, [pc, #48]	; (8001b0c <LL_TIM_IC_SetPrescaler+0xb0>)
 8001adc:	5ccb      	ldrb	r3, [r1, r3]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	408b      	lsls	r3, r1
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	0c1b      	lsrs	r3, r3, #16
 8001aec:	7df9      	ldrb	r1, [r7, #23]
 8001aee:	4807      	ldr	r0, [pc, #28]	; (8001b0c <LL_TIM_IC_SetPrescaler+0xb0>)
 8001af0:	5c41      	ldrb	r1, [r0, r1]
 8001af2:	408b      	lsls	r3, r1
 8001af4:	431a      	orrs	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	601a      	str	r2, [r3, #0]
}
 8001afa:	bf00      	nop
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	08013cec 	.word	0x08013cec
 8001b0c:	08013d04 	.word	0x08013d04

08001b10 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d028      	beq.n	8001b74 <LL_TIM_IC_SetFilter+0x64>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d023      	beq.n	8001b70 <LL_TIM_IC_SetFilter+0x60>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d01e      	beq.n	8001b6c <LL_TIM_IC_SetFilter+0x5c>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b40      	cmp	r3, #64	; 0x40
 8001b32:	d019      	beq.n	8001b68 <LL_TIM_IC_SetFilter+0x58>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3a:	d013      	beq.n	8001b64 <LL_TIM_IC_SetFilter+0x54>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b42:	d00d      	beq.n	8001b60 <LL_TIM_IC_SetFilter+0x50>
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b4a:	d007      	beq.n	8001b5c <LL_TIM_IC_SetFilter+0x4c>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b52:	d101      	bne.n	8001b58 <LL_TIM_IC_SetFilter+0x48>
 8001b54:	2307      	movs	r3, #7
 8001b56:	e00e      	b.n	8001b76 <LL_TIM_IC_SetFilter+0x66>
 8001b58:	2308      	movs	r3, #8
 8001b5a:	e00c      	b.n	8001b76 <LL_TIM_IC_SetFilter+0x66>
 8001b5c:	2306      	movs	r3, #6
 8001b5e:	e00a      	b.n	8001b76 <LL_TIM_IC_SetFilter+0x66>
 8001b60:	2305      	movs	r3, #5
 8001b62:	e008      	b.n	8001b76 <LL_TIM_IC_SetFilter+0x66>
 8001b64:	2304      	movs	r3, #4
 8001b66:	e006      	b.n	8001b76 <LL_TIM_IC_SetFilter+0x66>
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e004      	b.n	8001b76 <LL_TIM_IC_SetFilter+0x66>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e002      	b.n	8001b76 <LL_TIM_IC_SetFilter+0x66>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <LL_TIM_IC_SetFilter+0x66>
 8001b74:	2300      	movs	r3, #0
 8001b76:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3318      	adds	r3, #24
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <LL_TIM_IC_SetFilter+0xac>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	440b      	add	r3, r1
 8001b86:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <LL_TIM_IC_SetFilter+0xb0>)
 8001b90:	5ccb      	ldrb	r3, [r1, r3]
 8001b92:	4619      	mov	r1, r3
 8001b94:	23f0      	movs	r3, #240	; 0xf0
 8001b96:	408b      	lsls	r3, r1
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	0c1b      	lsrs	r3, r3, #16
 8001ba0:	7df9      	ldrb	r1, [r7, #23]
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <LL_TIM_IC_SetFilter+0xb0>)
 8001ba4:	5c41      	ldrb	r1, [r0, r1]
 8001ba6:	408b      	lsls	r3, r1
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	601a      	str	r2, [r3, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	08013cec 	.word	0x08013cec
 8001bc0:	08013d04 	.word	0x08013d04

08001bc4 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d028      	beq.n	8001c28 <LL_TIM_IC_SetPolarity+0x64>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d023      	beq.n	8001c24 <LL_TIM_IC_SetPolarity+0x60>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d01e      	beq.n	8001c20 <LL_TIM_IC_SetPolarity+0x5c>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b40      	cmp	r3, #64	; 0x40
 8001be6:	d019      	beq.n	8001c1c <LL_TIM_IC_SetPolarity+0x58>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bee:	d013      	beq.n	8001c18 <LL_TIM_IC_SetPolarity+0x54>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d00d      	beq.n	8001c14 <LL_TIM_IC_SetPolarity+0x50>
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bfe:	d007      	beq.n	8001c10 <LL_TIM_IC_SetPolarity+0x4c>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c06:	d101      	bne.n	8001c0c <LL_TIM_IC_SetPolarity+0x48>
 8001c08:	2307      	movs	r3, #7
 8001c0a:	e00e      	b.n	8001c2a <LL_TIM_IC_SetPolarity+0x66>
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	e00c      	b.n	8001c2a <LL_TIM_IC_SetPolarity+0x66>
 8001c10:	2306      	movs	r3, #6
 8001c12:	e00a      	b.n	8001c2a <LL_TIM_IC_SetPolarity+0x66>
 8001c14:	2305      	movs	r3, #5
 8001c16:	e008      	b.n	8001c2a <LL_TIM_IC_SetPolarity+0x66>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e006      	b.n	8001c2a <LL_TIM_IC_SetPolarity+0x66>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e004      	b.n	8001c2a <LL_TIM_IC_SetPolarity+0x66>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <LL_TIM_IC_SetPolarity+0x66>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <LL_TIM_IC_SetPolarity+0x66>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a1a      	ldr	r2, [r3, #32]
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	490b      	ldr	r1, [pc, #44]	; (8001c60 <LL_TIM_IC_SetPolarity+0x9c>)
 8001c34:	5ccb      	ldrb	r3, [r1, r3]
 8001c36:	4619      	mov	r1, r3
 8001c38:	230a      	movs	r3, #10
 8001c3a:	408b      	lsls	r3, r1
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	401a      	ands	r2, r3
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	4907      	ldr	r1, [pc, #28]	; (8001c60 <LL_TIM_IC_SetPolarity+0x9c>)
 8001c44:	5ccb      	ldrb	r3, [r1, r3]
 8001c46:	4619      	mov	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	408b      	lsls	r3, r1
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001c52:	bf00      	nop
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	08013d10 	.word	0x08013d10

08001c64 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001c76:	f023 0307 	bic.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	609a      	str	r2, [r3, #8]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	605a      	str	r2, [r3, #4]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @note   OC5 and OC6 are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	605a      	str	r2, [r3, #4]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_TIM_SetSlaveMode>:
  *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
  *         @arg @ref LL_TIM_SLAVEMODE_COMBINED_RESETTRIGGER
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cec:	f023 0307 	bic.w	r3, r3, #7
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_TIM_SetTriggerInput>:
  *         @arg @ref LL_TIM_TS_TI2FP2
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_TIM_EnableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_TIM_DisableIT_TRIG>:
  * @rmtoll DIER         TIE           LL_TIM_DisableIT_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	60da      	str	r2, [r3, #12]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_TIM_DisableDMAReq_TRIG>:
  * @rmtoll DIER         TDE           LL_TIM_DisableDMAReq_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60da      	str	r2, [r3, #12]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	601a      	str	r2, [r3, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	609a      	str	r2, [r3, #8]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	609a      	str	r2, [r3, #8]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b089      	sub	sp, #36	; 0x24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	613b      	str	r3, [r7, #16]
  return result;
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	401a      	ands	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	61bb      	str	r3, [r7, #24]
  return result;
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	431a      	orrs	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	3724      	adds	r7, #36	; 0x24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	613b      	str	r3, [r7, #16]
  return result;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2103      	movs	r1, #3
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	61bb      	str	r3, [r7, #24]
  return result;
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	60da      	str	r2, [r3, #12]
}
 8001ec6:	bf00      	nop
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef2:	f001 f82f 	bl	8002f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef6:	f000 f81f 	bl	8001f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001efa:	f000 feed 	bl	8002cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001efe:	f000 fee1 	bl	8002cc4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f02:	f000 fe8b 	bl	8002c1c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001f06:	f000 f86f 	bl	8001fe8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f0a:	f000 f969 	bl	80021e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001f0e:	f000 fa35 	bl	800237c <MX_ADC3_Init>
  MX_ADC4_Init();
 8001f12:	f000 fb0f 	bl	8002534 <MX_ADC4_Init>
  MX_TIM3_Init();
 8001f16:	f000 fcbf 	bl	8002898 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001f1a:	f000 fc43 	bl	80027a4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001f1e:	f000 fd2f 	bl	8002980 <MX_TIM4_Init>
  MX_DAC1_Init();
 8001f22:	f000 fbd3 	bl	80026cc <MX_DAC1_Init>
  MX_TIM8_Init();
 8001f26:	f000 fde3 	bl	8002af0 <MX_TIM8_Init>
  MX_TIM6_Init();
 8001f2a:	f000 fdab 	bl	8002a84 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 8001f2e:	f002 ff9f 	bl	8004e70 <app_main>
 8001f32:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001f3c:	2002      	movs	r0, #2
 8001f3e:	f7ff fc4f 	bl	80017e0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001f42:	bf00      	nop
 8001f44:	f7ff fc60 	bl	8001808 <LL_FLASH_GetLatency>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d1fa      	bne.n	8001f44 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001f4e:	f7ff fa87 	bl	8001460 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001f52:	bf00      	nop
 8001f54:	f7ff fa94 	bl	8001480 <LL_RCC_HSI_IsReady>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d1fa      	bne.n	8001f54 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001f5e:	2010      	movs	r0, #16
 8001f60:	f7ff faa0 	bl	80014a4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_9, LL_RCC_PREDIV_DIV_1);
 8001f64:	2200      	movs	r2, #0
 8001f66:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8001f6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f6e:	f7ff fb69 	bl	8001644 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001f72:	f7ff fb43 	bl	80015fc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001f76:	bf00      	nop
 8001f78:	f7ff fb50 	bl	800161c <LL_RCC_PLL_IsReady>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d1fa      	bne.n	8001f78 <SystemClock_Config+0x40>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7ff fac6 	bl	8001514 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001f88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f8c:	f7ff fad6 	bl	800153c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff fae7 	bl	8001564 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001f96:	2002      	movs	r0, #2
 8001f98:	f7ff fa9a 	bl	80014d0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001f9c:	bf00      	nop
 8001f9e:	f7ff faab 	bl	80014f8 <LL_RCC_GetSysClkSource>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d1fa      	bne.n	8001f9e <SystemClock_Config+0x66>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8001fa8:	480e      	ldr	r0, [pc, #56]	; (8001fe4 <SystemClock_Config+0xac>)
 8001faa:	f002 ff43 	bl	8004e34 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001fae:	200f      	movs	r0, #15
 8001fb0:	f000 ffe6 	bl	8002f80 <HAL_InitTick>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001fba:	f000 feef 	bl	8002d9c <Error_Handler>
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001fbe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001fc2:	f7ff fae3 	bl	800158c <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM8_CLKSOURCE_PCLK2);
 8001fc6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001fca:	f7ff fafb 	bl	80015c4 <LL_RCC_SetTIMClockSource>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM2_CLKSOURCE_PCLK1);
 8001fce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001fd2:	f7ff faf7 	bl	80015c4 <LL_RCC_SetTIMClockSource>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM34_CLKSOURCE_PCLK1);
 8001fd6:	f04f 4008 	mov.w	r0, #2281701376	; 0x88000000
 8001fda:	f7ff faf3 	bl	80015c4 <LL_RCC_SetTIMClockSource>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	044aa200 	.word	0x044aa200

08001fe8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b094      	sub	sp, #80	; 0x50
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001fee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]
 800200a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800200c:	f107 0318 	add.w	r3, r7, #24
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	463b      	mov	r3, r7
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
 8002028:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 800202a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800202e:	f7ff fb29 	bl	8001684 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002032:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002036:	f7ff fb25 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC0   ------> ADC1_IN6
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800203a:	2301      	movs	r3, #1
 800203c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800203e:	2303      	movs	r3, #3
 8002040:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002046:	463b      	mov	r3, r7
 8002048:	4619      	mov	r1, r3
 800204a:	485b      	ldr	r0, [pc, #364]	; (80021b8 <MX_ADC1_Init+0x1d0>)
 800204c:	f001 feaf 	bl	8003dae <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002050:	2200      	movs	r2, #0
 8002052:	2101      	movs	r1, #1
 8002054:	4859      	ldr	r0, [pc, #356]	; (80021bc <MX_ADC1_Init+0x1d4>)
 8002056:	f7ff f905 	bl	8001264 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_VERYHIGH);
 800205a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800205e:	2101      	movs	r1, #1
 8002060:	4856      	ldr	r0, [pc, #344]	; (80021bc <MX_ADC1_Init+0x1d4>)
 8002062:	f7ff f9d9 	bl	8001418 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8002066:	2220      	movs	r2, #32
 8002068:	2101      	movs	r1, #1
 800206a:	4854      	ldr	r0, [pc, #336]	; (80021bc <MX_ADC1_Init+0x1d4>)
 800206c:	f7ff f920 	bl	80012b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8002070:	2200      	movs	r2, #0
 8002072:	2101      	movs	r1, #1
 8002074:	4851      	ldr	r0, [pc, #324]	; (80021bc <MX_ADC1_Init+0x1d4>)
 8002076:	f7ff f93f 	bl	80012f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	2101      	movs	r1, #1
 800207e:	484f      	ldr	r0, [pc, #316]	; (80021bc <MX_ADC1_Init+0x1d4>)
 8002080:	f7ff f95e 	bl	8001340 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8002084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002088:	2101      	movs	r1, #1
 800208a:	484c      	ldr	r0, [pc, #304]	; (80021bc <MX_ADC1_Init+0x1d4>)
 800208c:	f7ff f97c 	bl	8001388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8002090:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002094:	2101      	movs	r1, #1
 8002096:	4849      	ldr	r0, [pc, #292]	; (80021bc <MX_ADC1_Init+0x1d4>)
 8002098:	f7ff f99a 	bl	80013d0 <LL_DMA_SetMemorySize>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800209c:	2300      	movs	r3, #0
 800209e:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80020a0:	2300      	movs	r3, #0
 80020a2:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80020a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ac:	4619      	mov	r1, r3
 80020ae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020b2:	f001 fa7f 	bl	80035b4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO_ADC12;
 80020b6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80020bc:	2301      	movs	r3, #1
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80020c8:	2303      	movs	r3, #3
 80020ca:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 80020cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80020d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d6:	4619      	mov	r1, r3
 80020d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020dc:	f001 fa90 	bl	8003600 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 80020e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020e4:	f7ff f87d 	bl	80011e2 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80020e8:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <MX_ADC1_Init+0x1d8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	4a35      	ldr	r2, [pc, #212]	; (80021c4 <MX_ADC1_Init+0x1dc>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	099a      	lsrs	r2, r3, #6
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	461a      	mov	r2, r3
 8002100:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <MX_ADC1_Init+0x1e0>)
 8002102:	fba3 2302 	umull	r2, r3, r3, r2
 8002106:	08db      	lsrs	r3, r3, #3
 8002108:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(wait_loop_index != 0)
 800210a:	e002      	b.n	8002112 <MX_ADC1_Init+0x12a>
     {
   wait_loop_index--;
 800210c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800210e:	3b01      	subs	r3, #1
 8002110:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(wait_loop_index != 0)
 8002112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f9      	bne.n	800210c <MX_ADC1_Init+0x124>
     }
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8002118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800211c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002122:	f107 0318 	add.w	r3, r7, #24
 8002126:	4619      	mov	r1, r3
 8002128:	4828      	ldr	r0, [pc, #160]	; (80021cc <MX_ADC1_Init+0x1e4>)
 800212a:	f001 f9e5 	bl	80034f8 <LL_ADC_CommonInit>
  LL_ADC_REG_SetTriggerEdge(ADC1, LL_ADC_REG_TRIG_EXT_RISING);
 800212e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002132:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002136:	f7fe ff32 	bl	8000f9e <LL_ADC_REG_SetTriggerEdge>
  /** Configure Analog WatchDog 1
  */
  LL_ADC_SetAnalogWDMonitChannels(ADC1, LL_ADC_AWD1, LL_ADC_AWD_CH_VREFINT_REG);
 800213a:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <MX_ADC1_Init+0x1e8>)
 800213c:	4925      	ldr	r1, [pc, #148]	; (80021d4 <MX_ADC1_Init+0x1ec>)
 800213e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002142:	f7fe ffe7 	bl	8001114 <LL_ADC_SetAnalogWDMonitChannels>
  LL_ADC_ConfigAnalogWDThresholds(ADC1, LL_ADC_AWD1, 4095, 0);
 8002146:	2300      	movs	r3, #0
 8002148:	f640 72ff 	movw	r2, #4095	; 0xfff
 800214c:	4921      	ldr	r1, [pc, #132]	; (80021d4 <MX_ADC1_Init+0x1ec>)
 800214e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002152:	f7ff f819 	bl	8001188 <LL_ADC_ConfigAnalogWDThresholds>
  LL_ADC_EnableIT_AWD1(ADC1);
 8002156:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800215a:	f7ff f85c 	bl	8001216 <LL_ADC_EnableIT_AWD1>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_VREFINT);
 800215e:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <MX_ADC1_Init+0x1f0>)
 8002160:	2106      	movs	r1, #6
 8002162:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002166:	f7fe ff2d 	bl	8000fc4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800216a:	2200      	movs	r2, #0
 800216c:	491a      	ldr	r1, [pc, #104]	; (80021d8 <MX_ADC1_Init+0x1f0>)
 800216e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002172:	f7fe ff5e 	bl	8001032 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SINGLE_ENDED);
 8002176:	227f      	movs	r2, #127	; 0x7f
 8002178:	4917      	ldr	r1, [pc, #92]	; (80021d8 <MX_ADC1_Init+0x1f0>)
 800217a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800217e:	f7fe ffa5 	bl	80010cc <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8002182:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002186:	4811      	ldr	r0, [pc, #68]	; (80021cc <MX_ADC1_Init+0x1e4>)
 8002188:	f7fe fef6 	bl	8000f78 <LL_ADC_SetCommonPathInternalCh>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_6);
 800218c:	4a13      	ldr	r2, [pc, #76]	; (80021dc <MX_ADC1_Init+0x1f4>)
 800218e:	210c      	movs	r1, #12
 8002190:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002194:	f7fe ff16 	bl	8000fc4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002198:	2200      	movs	r2, #0
 800219a:	4910      	ldr	r1, [pc, #64]	; (80021dc <MX_ADC1_Init+0x1f4>)
 800219c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021a0:	f7fe ff47 	bl	8001032 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SINGLE_ENDED);
 80021a4:	227f      	movs	r2, #127	; 0x7f
 80021a6:	490d      	ldr	r1, [pc, #52]	; (80021dc <MX_ADC1_Init+0x1f4>)
 80021a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021ac:	f7fe ff8e 	bl	80010cc <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021b0:	bf00      	nop
 80021b2:	3750      	adds	r7, #80	; 0x50
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	48000800 	.word	0x48000800
 80021bc:	40020000 	.word	0x40020000
 80021c0:	20000000 	.word	0x20000000
 80021c4:	053e2d63 	.word	0x053e2d63
 80021c8:	cccccccd 	.word	0xcccccccd
 80021cc:	50000300 	.word	0x50000300
 80021d0:	c8c40000 	.word	0xc8c40000
 80021d4:	7dc00000 	.word	0x7dc00000
 80021d8:	cb840000 	.word	0xcb840000
 80021dc:	19200040 	.word	0x19200040

080021e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b090      	sub	sp, #64	; 0x40
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80021e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80021f2:	f107 0318 	add.w	r3, r7, #24
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]
 8002202:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	463b      	mov	r3, r7
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	611a      	str	r2, [r3, #16]
 8002212:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8002214:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002218:	f7ff fa34 	bl	8001684 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800221c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002220:	f7ff fa30 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC1   ------> ADC2_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002224:	2302      	movs	r3, #2
 8002226:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002228:	2303      	movs	r3, #3
 800222a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002230:	463b      	mov	r3, r7
 8002232:	4619      	mov	r1, r3
 8002234:	4847      	ldr	r0, [pc, #284]	; (8002354 <MX_ADC2_Init+0x174>)
 8002236:	f001 fdba 	bl	8003dae <LL_GPIO_Init>

  /* ADC2 DMA Init */

  /* ADC2 Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800223a:	2200      	movs	r2, #0
 800223c:	2103      	movs	r1, #3
 800223e:	4846      	ldr	r0, [pc, #280]	; (8002358 <MX_ADC2_Init+0x178>)
 8002240:	f7ff f810 	bl	8001264 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_VERYHIGH);
 8002244:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002248:	2103      	movs	r1, #3
 800224a:	4843      	ldr	r0, [pc, #268]	; (8002358 <MX_ADC2_Init+0x178>)
 800224c:	f7ff f8e4 	bl	8001418 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 8002250:	2220      	movs	r2, #32
 8002252:	2103      	movs	r1, #3
 8002254:	4840      	ldr	r0, [pc, #256]	; (8002358 <MX_ADC2_Init+0x178>)
 8002256:	f7ff f82b 	bl	80012b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 800225a:	2200      	movs	r2, #0
 800225c:	2103      	movs	r1, #3
 800225e:	483e      	ldr	r0, [pc, #248]	; (8002358 <MX_ADC2_Init+0x178>)
 8002260:	f7ff f84a 	bl	80012f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	2103      	movs	r1, #3
 8002268:	483b      	ldr	r0, [pc, #236]	; (8002358 <MX_ADC2_Init+0x178>)
 800226a:	f7ff f869 	bl	8001340 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 800226e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002272:	2103      	movs	r1, #3
 8002274:	4838      	ldr	r0, [pc, #224]	; (8002358 <MX_ADC2_Init+0x178>)
 8002276:	f7ff f887 	bl	8001388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 800227a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800227e:	2103      	movs	r1, #3
 8002280:	4835      	ldr	r0, [pc, #212]	; (8002358 <MX_ADC2_Init+0x178>)
 8002282:	f7ff f8a5 	bl	80013d0 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_ADC(LL_SYSCFG_ADC24_RMP_DMA2_CH34);
 8002286:	4835      	ldr	r0, [pc, #212]	; (800235c <MX_ADC2_Init+0x17c>)
 8002288:	f7ff fa44 	bl	8001714 <LL_SYSCFG_SetRemapDMA_ADC>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800228c:	2300      	movs	r3, #0
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002290:	2300      	movs	r3, #0
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8002294:	2300      	movs	r3, #0
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8002298:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800229c:	4619      	mov	r1, r3
 800229e:	4830      	ldr	r0, [pc, #192]	; (8002360 <MX_ADC2_Init+0x180>)
 80022a0:	f001 f988 	bl	80035b4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO_ADC12;
 80022a4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80022a8:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80022b6:	2303      	movs	r3, #3
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 80022ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 80022c0:	f107 0318 	add.w	r3, r7, #24
 80022c4:	4619      	mov	r1, r3
 80022c6:	4826      	ldr	r0, [pc, #152]	; (8002360 <MX_ADC2_Init+0x180>)
 80022c8:	f001 f99a 	bl	8003600 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 80022cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80022d0:	f7fe ff87 	bl	80011e2 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80022d4:	4b23      	ldr	r3, [pc, #140]	; (8002364 <MX_ADC2_Init+0x184>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	099b      	lsrs	r3, r3, #6
 80022da:	4a23      	ldr	r2, [pc, #140]	; (8002368 <MX_ADC2_Init+0x188>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	099a      	lsrs	r2, r3, #6
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <MX_ADC2_Init+0x18c>)
 80022ee:	fba3 2302 	umull	r2, r3, r3, r2
 80022f2:	08db      	lsrs	r3, r3, #3
 80022f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 80022f6:	e002      	b.n	80022fe <MX_ADC2_Init+0x11e>
     {
   wait_loop_index--;
 80022f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fa:	3b01      	subs	r3, #1
 80022fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 80022fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f9      	bne.n	80022f8 <MX_ADC2_Init+0x118>
     }
  LL_ADC_REG_SetTriggerEdge(ADC2, LL_ADC_REG_TRIG_EXT_RISING);
 8002304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002308:	4815      	ldr	r0, [pc, #84]	; (8002360 <MX_ADC2_Init+0x180>)
 800230a:	f7fe fe48 	bl	8000f9e <LL_ADC_REG_SetTriggerEdge>
  /** Configure Analog WatchDog 1
  */
  LL_ADC_SetAnalogWDMonitChannels(ADC2, LL_ADC_AWD1, LL_ADC_AWD_CHANNEL_7_REG);
 800230e:	4a18      	ldr	r2, [pc, #96]	; (8002370 <MX_ADC2_Init+0x190>)
 8002310:	4918      	ldr	r1, [pc, #96]	; (8002374 <MX_ADC2_Init+0x194>)
 8002312:	4813      	ldr	r0, [pc, #76]	; (8002360 <MX_ADC2_Init+0x180>)
 8002314:	f7fe fefe 	bl	8001114 <LL_ADC_SetAnalogWDMonitChannels>
  LL_ADC_ConfigAnalogWDThresholds(ADC2, LL_ADC_AWD1, 4095, 0);
 8002318:	2300      	movs	r3, #0
 800231a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800231e:	4915      	ldr	r1, [pc, #84]	; (8002374 <MX_ADC2_Init+0x194>)
 8002320:	480f      	ldr	r0, [pc, #60]	; (8002360 <MX_ADC2_Init+0x180>)
 8002322:	f7fe ff31 	bl	8001188 <LL_ADC_ConfigAnalogWDThresholds>
  LL_ADC_EnableIT_AWD1(ADC2);
 8002326:	480e      	ldr	r0, [pc, #56]	; (8002360 <MX_ADC2_Init+0x180>)
 8002328:	f7fe ff75 	bl	8001216 <LL_ADC_EnableIT_AWD1>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 800232c:	4a12      	ldr	r2, [pc, #72]	; (8002378 <MX_ADC2_Init+0x198>)
 800232e:	2106      	movs	r1, #6
 8002330:	480b      	ldr	r0, [pc, #44]	; (8002360 <MX_ADC2_Init+0x180>)
 8002332:	f7fe fe47 	bl	8000fc4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002336:	2200      	movs	r2, #0
 8002338:	490f      	ldr	r1, [pc, #60]	; (8002378 <MX_ADC2_Init+0x198>)
 800233a:	4809      	ldr	r0, [pc, #36]	; (8002360 <MX_ADC2_Init+0x180>)
 800233c:	f7fe fe79 	bl	8001032 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_7, LL_ADC_SINGLE_ENDED);
 8002340:	227f      	movs	r2, #127	; 0x7f
 8002342:	490d      	ldr	r1, [pc, #52]	; (8002378 <MX_ADC2_Init+0x198>)
 8002344:	4806      	ldr	r0, [pc, #24]	; (8002360 <MX_ADC2_Init+0x180>)
 8002346:	f7fe fec1 	bl	80010cc <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	3740      	adds	r7, #64	; 0x40
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	48000800 	.word	0x48000800
 8002358:	40020400 	.word	0x40020400
 800235c:	00010100 	.word	0x00010100
 8002360:	50000100 	.word	0x50000100
 8002364:	20000000 	.word	0x20000000
 8002368:	053e2d63 	.word	0x053e2d63
 800236c:	cccccccd 	.word	0xcccccccd
 8002370:	1cc00080 	.word	0x1cc00080
 8002374:	7dc00000 	.word	0x7dc00000
 8002378:	1d500080 	.word	0x1d500080

0800237c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b094      	sub	sp, #80	; 0x50
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002382:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800238e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	611a      	str	r2, [r3, #16]
 800239e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80023a0:	f107 0318 	add.w	r3, r7, #24
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ae:	463b      	mov	r3, r7
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
 80023bc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC34);
 80023be:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80023c2:	f7ff f95f 	bl	8001684 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80023c6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80023ca:	f7ff f95b 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  /**ADC3 GPIO Configuration
  PB0   ------> ADC3_IN12
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80023ce:	2301      	movs	r3, #1
 80023d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80023d2:	2303      	movs	r3, #3
 80023d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023da:	463b      	mov	r3, r7
 80023dc:	4619      	mov	r1, r3
 80023de:	484b      	ldr	r0, [pc, #300]	; (800250c <MX_ADC3_Init+0x190>)
 80023e0:	f001 fce5 	bl	8003dae <LL_GPIO_Init>

  /* ADC3 DMA Init */

  /* ADC3 Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2105      	movs	r1, #5
 80023e8:	4849      	ldr	r0, [pc, #292]	; (8002510 <MX_ADC3_Init+0x194>)
 80023ea:	f7fe ff3b 	bl	8001264 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_VERYHIGH);
 80023ee:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80023f2:	2105      	movs	r1, #5
 80023f4:	4846      	ldr	r0, [pc, #280]	; (8002510 <MX_ADC3_Init+0x194>)
 80023f6:	f7ff f80f 	bl	8001418 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2105      	movs	r1, #5
 80023fe:	4844      	ldr	r0, [pc, #272]	; (8002510 <MX_ADC3_Init+0x194>)
 8002400:	f7fe ff56 	bl	80012b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8002404:	2200      	movs	r2, #0
 8002406:	2105      	movs	r1, #5
 8002408:	4841      	ldr	r0, [pc, #260]	; (8002510 <MX_ADC3_Init+0x194>)
 800240a:	f7fe ff75 	bl	80012f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	2105      	movs	r1, #5
 8002412:	483f      	ldr	r0, [pc, #252]	; (8002510 <MX_ADC3_Init+0x194>)
 8002414:	f7fe ff94 	bl	8001340 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_HALFWORD);
 8002418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800241c:	2105      	movs	r1, #5
 800241e:	483c      	ldr	r0, [pc, #240]	; (8002510 <MX_ADC3_Init+0x194>)
 8002420:	f7fe ffb2 	bl	8001388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_HALFWORD);
 8002424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002428:	2105      	movs	r1, #5
 800242a:	4839      	ldr	r0, [pc, #228]	; (8002510 <MX_ADC3_Init+0x194>)
 800242c:	f7fe ffd0 	bl	80013d0 <LL_DMA_SetMemorySize>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002430:	2300      	movs	r3, #0
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002434:	2300      	movs	r3, #0
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8002438:	2300      	movs	r3, #0
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 800243c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002440:	4619      	mov	r1, r3
 8002442:	4834      	ldr	r0, [pc, #208]	; (8002514 <MX_ADC3_Init+0x198>)
 8002444:	f001 f8b6 	bl	80035b4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO__ADC34;
 8002448:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002456:	2300      	movs	r3, #0
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800245a:	2303      	movs	r3, #3
 800245c:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800245e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002462:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 8002464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002468:	4619      	mov	r1, r3
 800246a:	482a      	ldr	r0, [pc, #168]	; (8002514 <MX_ADC3_Init+0x198>)
 800246c:	f001 f8c8 	bl	8003600 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8002470:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002474:	f7fe feb5 	bl	80011e2 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <MX_ADC3_Init+0x19c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	4a27      	ldr	r2, [pc, #156]	; (800251c <MX_ADC3_Init+0x1a0>)
 8002480:	fba2 2303 	umull	r2, r3, r2, r3
 8002484:	099a      	lsrs	r2, r3, #6
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	461a      	mov	r2, r3
 8002490:	4b23      	ldr	r3, [pc, #140]	; (8002520 <MX_ADC3_Init+0x1a4>)
 8002492:	fba3 2302 	umull	r2, r3, r3, r2
 8002496:	08db      	lsrs	r3, r3, #3
 8002498:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(wait_loop_index != 0)
 800249a:	e002      	b.n	80024a2 <MX_ADC3_Init+0x126>
     {
   wait_loop_index--;
 800249c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249e:	3b01      	subs	r3, #1
 80024a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(wait_loop_index != 0)
 80024a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f9      	bne.n	800249c <MX_ADC3_Init+0x120>
     }
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80024a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ac:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 80024b2:	f107 0318 	add.w	r3, r7, #24
 80024b6:	4619      	mov	r1, r3
 80024b8:	481a      	ldr	r0, [pc, #104]	; (8002524 <MX_ADC3_Init+0x1a8>)
 80024ba:	f001 f81d 	bl	80034f8 <LL_ADC_CommonInit>
  LL_ADC_REG_SetTriggerEdge(ADC3, LL_ADC_REG_TRIG_EXT_RISING);
 80024be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024c2:	4814      	ldr	r0, [pc, #80]	; (8002514 <MX_ADC3_Init+0x198>)
 80024c4:	f7fe fd6b 	bl	8000f9e <LL_ADC_REG_SetTriggerEdge>
  /** Configure Analog WatchDog 1
  */
  LL_ADC_SetAnalogWDMonitChannels(ADC3, LL_ADC_AWD1, LL_ADC_AWD_CHANNEL_12_REG);
 80024c8:	4a17      	ldr	r2, [pc, #92]	; (8002528 <MX_ADC3_Init+0x1ac>)
 80024ca:	4918      	ldr	r1, [pc, #96]	; (800252c <MX_ADC3_Init+0x1b0>)
 80024cc:	4811      	ldr	r0, [pc, #68]	; (8002514 <MX_ADC3_Init+0x198>)
 80024ce:	f7fe fe21 	bl	8001114 <LL_ADC_SetAnalogWDMonitChannels>
  LL_ADC_ConfigAnalogWDThresholds(ADC3, LL_ADC_AWD1, 4095, 0);
 80024d2:	2300      	movs	r3, #0
 80024d4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80024d8:	4914      	ldr	r1, [pc, #80]	; (800252c <MX_ADC3_Init+0x1b0>)
 80024da:	480e      	ldr	r0, [pc, #56]	; (8002514 <MX_ADC3_Init+0x198>)
 80024dc:	f7fe fe54 	bl	8001188 <LL_ADC_ConfigAnalogWDThresholds>
  LL_ADC_EnableIT_AWD1(ADC3);
 80024e0:	480c      	ldr	r0, [pc, #48]	; (8002514 <MX_ADC3_Init+0x198>)
 80024e2:	f7fe fe98 	bl	8001216 <LL_ADC_EnableIT_AWD1>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_12);
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <MX_ADC3_Init+0x1b4>)
 80024e8:	2106      	movs	r1, #6
 80024ea:	480a      	ldr	r0, [pc, #40]	; (8002514 <MX_ADC3_Init+0x198>)
 80024ec:	f7fe fd6a 	bl	8000fc4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80024f0:	2200      	movs	r2, #0
 80024f2:	490f      	ldr	r1, [pc, #60]	; (8002530 <MX_ADC3_Init+0x1b4>)
 80024f4:	4807      	ldr	r0, [pc, #28]	; (8002514 <MX_ADC3_Init+0x198>)
 80024f6:	f7fe fd9c 	bl	8001032 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_12, LL_ADC_SINGLE_ENDED);
 80024fa:	227f      	movs	r2, #127	; 0x7f
 80024fc:	490c      	ldr	r1, [pc, #48]	; (8002530 <MX_ADC3_Init+0x1b4>)
 80024fe:	4805      	ldr	r0, [pc, #20]	; (8002514 <MX_ADC3_Init+0x198>)
 8002500:	f7fe fde4 	bl	80010cc <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	3750      	adds	r7, #80	; 0x50
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	48000400 	.word	0x48000400
 8002510:	40020400 	.word	0x40020400
 8002514:	50000400 	.word	0x50000400
 8002518:	20000000 	.word	0x20000000
 800251c:	053e2d63 	.word	0x053e2d63
 8002520:	cccccccd 	.word	0xcccccccd
 8002524:	50000700 	.word	0x50000700
 8002528:	30c01000 	.word	0x30c01000
 800252c:	7dc00000 	.word	0x7dc00000
 8002530:	32601000 	.word	0x32601000

08002534 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b090      	sub	sp, #64	; 0x40
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800253a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002546:	f107 0318 	add.w	r3, r7, #24
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
 8002554:	611a      	str	r2, [r3, #16]
 8002556:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	463b      	mov	r3, r7
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]
 8002566:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC34);
 8002568:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800256c:	f7ff f88a 	bl	8001684 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002570:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002574:	f7ff f886 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  /**ADC4 GPIO Configuration
  PB14   ------> ADC4_IN4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8002578:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800257c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800257e:	2303      	movs	r3, #3
 8002580:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002586:	463b      	mov	r3, r7
 8002588:	4619      	mov	r1, r3
 800258a:	4847      	ldr	r0, [pc, #284]	; (80026a8 <MX_ADC4_Init+0x174>)
 800258c:	f001 fc0f 	bl	8003dae <LL_GPIO_Init>

  /* ADC4 DMA Init */

  /* ADC4 Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002590:	2200      	movs	r2, #0
 8002592:	2104      	movs	r1, #4
 8002594:	4845      	ldr	r0, [pc, #276]	; (80026ac <MX_ADC4_Init+0x178>)
 8002596:	f7fe fe65 	bl	8001264 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_VERYHIGH);
 800259a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800259e:	2104      	movs	r1, #4
 80025a0:	4842      	ldr	r0, [pc, #264]	; (80026ac <MX_ADC4_Init+0x178>)
 80025a2:	f7fe ff39 	bl	8001418 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_4, LL_DMA_MODE_CIRCULAR);
 80025a6:	2220      	movs	r2, #32
 80025a8:	2104      	movs	r1, #4
 80025aa:	4840      	ldr	r0, [pc, #256]	; (80026ac <MX_ADC4_Init+0x178>)
 80025ac:	f7fe fe80 	bl	80012b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2104      	movs	r1, #4
 80025b4:	483d      	ldr	r0, [pc, #244]	; (80026ac <MX_ADC4_Init+0x178>)
 80025b6:	f7fe fe9f 	bl	80012f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	2104      	movs	r1, #4
 80025be:	483b      	ldr	r0, [pc, #236]	; (80026ac <MX_ADC4_Init+0x178>)
 80025c0:	f7fe febe 	bl	8001340 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_HALFWORD);
 80025c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025c8:	2104      	movs	r1, #4
 80025ca:	4838      	ldr	r0, [pc, #224]	; (80026ac <MX_ADC4_Init+0x178>)
 80025cc:	f7fe fedc 	bl	8001388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_HALFWORD);
 80025d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d4:	2104      	movs	r1, #4
 80025d6:	4835      	ldr	r0, [pc, #212]	; (80026ac <MX_ADC4_Init+0x178>)
 80025d8:	f7fe fefa 	bl	80013d0 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_ADC(LL_SYSCFG_ADC24_RMP_DMA2_CH34);
 80025dc:	4834      	ldr	r0, [pc, #208]	; (80026b0 <MX_ADC4_Init+0x17c>)
 80025de:	f7ff f899 	bl	8001714 <LL_SYSCFG_SetRemapDMA_ADC>
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80025e2:	2300      	movs	r3, #0
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80025e6:	2300      	movs	r3, #0
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_Init(ADC4, &ADC_InitStruct);
 80025ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025f2:	4619      	mov	r1, r3
 80025f4:	482f      	ldr	r0, [pc, #188]	; (80026b4 <MX_ADC4_Init+0x180>)
 80025f6:	f000 ffdd 	bl	80035b4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO__ADC34;
 80025fa:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 80025fe:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800260c:	2303      	movs	r3, #3
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8002610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_Init(ADC4, &ADC_REG_InitStruct);
 8002616:	f107 0318 	add.w	r3, r7, #24
 800261a:	4619      	mov	r1, r3
 800261c:	4825      	ldr	r0, [pc, #148]	; (80026b4 <MX_ADC4_Init+0x180>)
 800261e:	f000 ffef 	bl	8003600 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8002622:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002626:	f7fe fddc 	bl	80011e2 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800262a:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <MX_ADC4_Init+0x184>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	099b      	lsrs	r3, r3, #6
 8002630:	4a22      	ldr	r2, [pc, #136]	; (80026bc <MX_ADC4_Init+0x188>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	099a      	lsrs	r2, r3, #6
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	461a      	mov	r2, r3
 8002642:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <MX_ADC4_Init+0x18c>)
 8002644:	fba3 2302 	umull	r2, r3, r3, r2
 8002648:	08db      	lsrs	r3, r3, #3
 800264a:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 800264c:	e002      	b.n	8002654 <MX_ADC4_Init+0x120>
     {
   wait_loop_index--;
 800264e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002650:	3b01      	subs	r3, #1
 8002652:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 8002654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <MX_ADC4_Init+0x11a>
     }
  LL_ADC_REG_SetTriggerEdge(ADC4, LL_ADC_REG_TRIG_EXT_RISING);
 800265a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800265e:	4815      	ldr	r0, [pc, #84]	; (80026b4 <MX_ADC4_Init+0x180>)
 8002660:	f7fe fc9d 	bl	8000f9e <LL_ADC_REG_SetTriggerEdge>
  /** Configure Analog WatchDog 1
  */
  LL_ADC_SetAnalogWDMonitChannels(ADC4, LL_ADC_AWD1, LL_ADC_AWD_CHANNEL_4_REG);
 8002664:	4a17      	ldr	r2, [pc, #92]	; (80026c4 <MX_ADC4_Init+0x190>)
 8002666:	4918      	ldr	r1, [pc, #96]	; (80026c8 <MX_ADC4_Init+0x194>)
 8002668:	4812      	ldr	r0, [pc, #72]	; (80026b4 <MX_ADC4_Init+0x180>)
 800266a:	f7fe fd53 	bl	8001114 <LL_ADC_SetAnalogWDMonitChannels>
  LL_ADC_ConfigAnalogWDThresholds(ADC4, LL_ADC_AWD1, 4095, 0);
 800266e:	2300      	movs	r3, #0
 8002670:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002674:	4914      	ldr	r1, [pc, #80]	; (80026c8 <MX_ADC4_Init+0x194>)
 8002676:	480f      	ldr	r0, [pc, #60]	; (80026b4 <MX_ADC4_Init+0x180>)
 8002678:	f7fe fd86 	bl	8001188 <LL_ADC_ConfigAnalogWDThresholds>
  LL_ADC_EnableIT_AWD1(ADC4);
 800267c:	480d      	ldr	r0, [pc, #52]	; (80026b4 <MX_ADC4_Init+0x180>)
 800267e:	f7fe fdca 	bl	8001216 <LL_ADC_EnableIT_AWD1>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC4, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8002682:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <MX_ADC4_Init+0x190>)
 8002684:	2106      	movs	r1, #6
 8002686:	480b      	ldr	r0, [pc, #44]	; (80026b4 <MX_ADC4_Init+0x180>)
 8002688:	f7fe fc9c 	bl	8000fc4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC4, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800268c:	2200      	movs	r2, #0
 800268e:	490d      	ldr	r1, [pc, #52]	; (80026c4 <MX_ADC4_Init+0x190>)
 8002690:	4808      	ldr	r0, [pc, #32]	; (80026b4 <MX_ADC4_Init+0x180>)
 8002692:	f7fe fcce 	bl	8001032 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC4, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8002696:	227f      	movs	r2, #127	; 0x7f
 8002698:	490a      	ldr	r1, [pc, #40]	; (80026c4 <MX_ADC4_Init+0x190>)
 800269a:	4806      	ldr	r0, [pc, #24]	; (80026b4 <MX_ADC4_Init+0x180>)
 800269c:	f7fe fd16 	bl	80010cc <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80026a0:	bf00      	nop
 80026a2:	3740      	adds	r7, #64	; 0x40
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	48000400 	.word	0x48000400
 80026ac:	40020400 	.word	0x40020400
 80026b0:	00010100 	.word	0x00010100
 80026b4:	50000500 	.word	0x50000500
 80026b8:	20000000 	.word	0x20000000
 80026bc:	053e2d63 	.word	0x053e2d63
 80026c0:	cccccccd 	.word	0xcccccccd
 80026c4:	10c00010 	.word	0x10c00010
 80026c8:	7dc00000 	.word	0x7dc00000

080026cc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 80026d2:	f107 0318 	add.w	r3, r7, #24
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	463b      	mov	r3, r7
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
 80026ec:	611a      	str	r2, [r3, #16]
 80026ee:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 80026f0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80026f4:	f7fe ffde 	bl	80016b4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80026f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80026fc:	f7fe ffc2 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration
  PA4   ------> DAC1_OUT1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002700:	2310      	movs	r3, #16
 8002702:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002704:	2303      	movs	r3, #3
 8002706:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270c:	463b      	mov	r3, r7
 800270e:	4619      	mov	r1, r3
 8002710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002714:	f001 fb4b 	bl	8003dae <LL_GPIO_Init>

  /* DAC1 DMA Init */

  /* DAC1_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002718:	2210      	movs	r2, #16
 800271a:	2103      	movs	r1, #3
 800271c:	481d      	ldr	r0, [pc, #116]	; (8002794 <MX_DAC1_Init+0xc8>)
 800271e:	f7fe fda1 	bl	8001264 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_HIGH);
 8002722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002726:	2103      	movs	r1, #3
 8002728:	481a      	ldr	r0, [pc, #104]	; (8002794 <MX_DAC1_Init+0xc8>)
 800272a:	f7fe fe75 	bl	8001418 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 800272e:	2220      	movs	r2, #32
 8002730:	2103      	movs	r1, #3
 8002732:	4818      	ldr	r0, [pc, #96]	; (8002794 <MX_DAC1_Init+0xc8>)
 8002734:	f7fe fdbc 	bl	80012b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8002738:	2200      	movs	r2, #0
 800273a:	2103      	movs	r1, #3
 800273c:	4815      	ldr	r0, [pc, #84]	; (8002794 <MX_DAC1_Init+0xc8>)
 800273e:	f7fe fddb 	bl	80012f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8002742:	2280      	movs	r2, #128	; 0x80
 8002744:	2103      	movs	r1, #3
 8002746:	4813      	ldr	r0, [pc, #76]	; (8002794 <MX_DAC1_Init+0xc8>)
 8002748:	f7fe fdfa 	bl	8001340 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 800274c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002750:	2103      	movs	r1, #3
 8002752:	4810      	ldr	r0, [pc, #64]	; (8002794 <MX_DAC1_Init+0xc8>)
 8002754:	f7fe fe18 	bl	8001388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 8002758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800275c:	2103      	movs	r1, #3
 800275e:	480d      	ldr	r0, [pc, #52]	; (8002794 <MX_DAC1_Init+0xc8>)
 8002760:	f7fe fe36 	bl	80013d0 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_DAC(LL_SYSCFG_DAC1_CH1_RMP_DMA1_CH3);
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <MX_DAC1_Init+0xcc>)
 8002766:	f7fe fff3 	bl	8001750 <LL_SYSCFG_SetRemapDMA_DAC>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC channel OUT1 config
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_EXT_TIM6_TRGO;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8002776:	f107 0318 	add.w	r3, r7, #24
 800277a:	461a      	mov	r2, r3
 800277c:	4907      	ldr	r1, [pc, #28]	; (800279c <MX_DAC1_Init+0xd0>)
 800277e:	4808      	ldr	r0, [pc, #32]	; (80027a0 <MX_DAC1_Init+0xd4>)
 8002780:	f000 ffa7 	bl	80036d2 <LL_DAC_Init>
  LL_DAC_EnableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8002784:	4905      	ldr	r1, [pc, #20]	; (800279c <MX_DAC1_Init+0xd0>)
 8002786:	4806      	ldr	r0, [pc, #24]	; (80027a0 <MX_DAC1_Init+0xd4>)
 8002788:	f7fe fd55 	bl	8001236 <LL_DAC_EnableTrigger>
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	3728      	adds	r7, #40	; 0x28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40020000 	.word	0x40020000
 8002798:	00202000 	.word	0x00202000
 800279c:	02100001 	.word	0x02100001
 80027a0:	40007400 	.word	0x40007400

080027a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b094      	sub	sp, #80	; 0x50
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80027aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
 80027b8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80027ba:	f107 031c 	add.w	r3, r7, #28
 80027be:	2220      	movs	r2, #32
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f00e ff92 	bl	80116ec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	611a      	str	r2, [r3, #16]
 80027d6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80027d8:	2001      	movs	r0, #1
 80027da:	f7fe ff6b 	bl	80016b4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80027e2:	2300      	movs	r3, #0
 80027e4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000;
 80027e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ea:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80027f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027f4:	4619      	mov	r1, r3
 80027f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027fa:	f001 fe67 	bl	80044cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80027fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002802:	f7ff f81f 	bl	8001844 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002806:	2100      	movs	r1, #0
 8002808:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800280c:	f7ff fa2a 	bl	8001c64 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8002810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002814:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002818:	f7ff f876 	bl	8001908 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800281c:	2360      	movs	r3, #96	; 0x60
 800281e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	461a      	mov	r2, r3
 8002836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800283a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800283e:	f001 fedd 	bl	80045fc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8002842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002846:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800284a:	f7ff f80b 	bl	8001864 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_ENABLE);
 800284e:	2110      	movs	r1, #16
 8002850:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002854:	f7ff fa1b 	bl	8001c8e <LL_TIM_SetTriggerOutput>
  LL_TIM_EnableMasterSlaveMode(TIM2);
 8002858:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800285c:	f7ff fa65 	bl	8001d2a <LL_TIM_EnableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002860:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002864:	f7fe ff0e 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PB10   ------> TIM2_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800286c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800286e:	2302      	movs	r3, #2
 8002870:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800287e:	2301      	movs	r3, #1
 8002880:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4803      	ldr	r0, [pc, #12]	; (8002894 <MX_TIM2_Init+0xf0>)
 8002888:	f001 fa91 	bl	8003dae <LL_GPIO_Init>

}
 800288c:	bf00      	nop
 800288e:	3750      	adds	r7, #80	; 0x50
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	48000400 	.word	0x48000400

08002898 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08e      	sub	sp, #56	; 0x38
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800289e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	2220      	movs	r2, #32
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f00e ff19 	bl	80116ec <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80028ba:	2002      	movs	r0, #2
 80028bc:	f7fe fefa 	bl	80016b4 <LL_APB1_GRP1_EnableClock>

  /* TIM3 DMA Init */

  /* TIM3_CH1_TRIG Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80028c0:	2200      	movs	r2, #0
 80028c2:	2106      	movs	r1, #6
 80028c4:	482c      	ldr	r0, [pc, #176]	; (8002978 <MX_TIM3_Init+0xe0>)
 80028c6:	f7fe fccd 	bl	8001264 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_VERYHIGH);
 80028ca:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80028ce:	2106      	movs	r1, #6
 80028d0:	4829      	ldr	r0, [pc, #164]	; (8002978 <MX_TIM3_Init+0xe0>)
 80028d2:	f7fe fda1 	bl	8001418 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 80028d6:	2220      	movs	r2, #32
 80028d8:	2106      	movs	r1, #6
 80028da:	4827      	ldr	r0, [pc, #156]	; (8002978 <MX_TIM3_Init+0xe0>)
 80028dc:	f7fe fce8 	bl	80012b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80028e0:	2200      	movs	r2, #0
 80028e2:	2106      	movs	r1, #6
 80028e4:	4824      	ldr	r0, [pc, #144]	; (8002978 <MX_TIM3_Init+0xe0>)
 80028e6:	f7fe fd07 	bl	80012f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	2106      	movs	r1, #6
 80028ee:	4822      	ldr	r0, [pc, #136]	; (8002978 <MX_TIM3_Init+0xe0>)
 80028f0:	f7fe fd26 	bl	8001340 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_HALFWORD);
 80028f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f8:	2106      	movs	r1, #6
 80028fa:	481f      	ldr	r0, [pc, #124]	; (8002978 <MX_TIM3_Init+0xe0>)
 80028fc:	f7fe fd44 	bl	8001388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_HALFWORD);
 8002900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002904:	2106      	movs	r1, #6
 8002906:	481c      	ldr	r0, [pc, #112]	; (8002978 <MX_TIM3_Init+0xe0>)
 8002908:	f7fe fd62 	bl	80013d0 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1000;
 800290c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002910:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002912:	2300      	movs	r3, #0
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 72;
 8002916:	2348      	movs	r3, #72	; 0x48
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800291a:	2300      	movs	r3, #0
 800291c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800291e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002922:	4619      	mov	r1, r3
 8002924:	4815      	ldr	r0, [pc, #84]	; (800297c <MX_TIM3_Init+0xe4>)
 8002926:	f001 fdd1 	bl	80044cc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800292a:	4814      	ldr	r0, [pc, #80]	; (800297c <MX_TIM3_Init+0xe4>)
 800292c:	f7fe ff7a 	bl	8001824 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002930:	2100      	movs	r1, #0
 8002932:	4812      	ldr	r0, [pc, #72]	; (800297c <MX_TIM3_Init+0xe4>)
 8002934:	f7ff f996 	bl	8001c64 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002938:	2300      	movs	r3, #0
 800293a:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	461a      	mov	r2, r3
 8002950:	2101      	movs	r1, #1
 8002952:	480a      	ldr	r0, [pc, #40]	; (800297c <MX_TIM3_Init+0xe4>)
 8002954:	f001 fe52 	bl	80045fc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002958:	2101      	movs	r1, #1
 800295a:	4808      	ldr	r0, [pc, #32]	; (800297c <MX_TIM3_Init+0xe4>)
 800295c:	f7fe ff82 	bl	8001864 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_UPDATE);
 8002960:	2120      	movs	r1, #32
 8002962:	4806      	ldr	r0, [pc, #24]	; (800297c <MX_TIM3_Init+0xe4>)
 8002964:	f7ff f993 	bl	8001c8e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002968:	4804      	ldr	r0, [pc, #16]	; (800297c <MX_TIM3_Init+0xe4>)
 800296a:	f7ff f9ee 	bl	8001d4a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800296e:	bf00      	nop
 8002970:	3738      	adds	r7, #56	; 0x38
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40020000 	.word	0x40020000
 800297c:	40000400 	.word	0x40000400

08002980 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b094      	sub	sp, #80	; 0x50
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002986:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	60da      	str	r2, [r3, #12]
 8002994:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002996:	f107 031c 	add.w	r3, r7, #28
 800299a:	2220      	movs	r2, #32
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f00e fea4 	bl	80116ec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]
 80029b0:	611a      	str	r2, [r3, #16]
 80029b2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80029b4:	2004      	movs	r0, #4
 80029b6:	f7fe fe7d 	bl	80016b4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 1000;
 80029ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029be:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80029c0:	2300      	movs	r3, #0
 80029c2:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 73;
 80029c4:	2349      	movs	r3, #73	; 0x49
 80029c6:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80029c8:	2300      	movs	r3, #0
 80029ca:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80029cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029d0:	4619      	mov	r1, r3
 80029d2:	482a      	ldr	r0, [pc, #168]	; (8002a7c <MX_TIM4_Init+0xfc>)
 80029d4:	f001 fd7a 	bl	80044cc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 80029d8:	4828      	ldr	r0, [pc, #160]	; (8002a7c <MX_TIM4_Init+0xfc>)
 80029da:	f7fe ff23 	bl	8001824 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80029de:	2100      	movs	r1, #0
 80029e0:	4826      	ldr	r0, [pc, #152]	; (8002a7c <MX_TIM4_Init+0xfc>)
 80029e2:	f7ff f93f 	bl	8001c64 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 80029e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ea:	4824      	ldr	r0, [pc, #144]	; (8002a7c <MX_TIM4_Init+0xfc>)
 80029ec:	f7fe ff8c 	bl	8001908 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80029f0:	2360      	movs	r3, #96	; 0x60
 80029f2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a0e:	481b      	ldr	r0, [pc, #108]	; (8002a7c <MX_TIM4_Init+0xfc>)
 8002a10:	f001 fdf4 	bl	80045fc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8002a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a18:	4818      	ldr	r0, [pc, #96]	; (8002a7c <MX_TIM4_Init+0xfc>)
 8002a1a:	f7fe ff23 	bl	8001864 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM4, LL_TIM_TS_ITR1);
 8002a1e:	2110      	movs	r1, #16
 8002a20:	4816      	ldr	r0, [pc, #88]	; (8002a7c <MX_TIM4_Init+0xfc>)
 8002a22:	f7ff f96f 	bl	8001d04 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM4, LL_TIM_SLAVEMODE_TRIGGER);
 8002a26:	2106      	movs	r1, #6
 8002a28:	4814      	ldr	r0, [pc, #80]	; (8002a7c <MX_TIM4_Init+0xfc>)
 8002a2a:	f7ff f956 	bl	8001cda <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM4);
 8002a2e:	4813      	ldr	r0, [pc, #76]	; (8002a7c <MX_TIM4_Init+0xfc>)
 8002a30:	f7ff f99b 	bl	8001d6a <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM4);
 8002a34:	4811      	ldr	r0, [pc, #68]	; (8002a7c <MX_TIM4_Init+0xfc>)
 8002a36:	f7ff f9a8 	bl	8001d8a <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_UPDATE);
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	480f      	ldr	r0, [pc, #60]	; (8002a7c <MX_TIM4_Init+0xfc>)
 8002a3e:	f7ff f926 	bl	8001c8e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002a42:	480e      	ldr	r0, [pc, #56]	; (8002a7c <MX_TIM4_Init+0xfc>)
 8002a44:	f7ff f981 	bl	8001d4a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002a48:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002a4c:	f7fe fe1a 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB8   ------> TIM4_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a56:	2302      	movs	r3, #2
 8002a58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4804      	ldr	r0, [pc, #16]	; (8002a80 <MX_TIM4_Init+0x100>)
 8002a70:	f001 f99d 	bl	8003dae <LL_GPIO_Init>

}
 8002a74:	bf00      	nop
 8002a76:	3750      	adds	r7, #80	; 0x50
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40000800 	.word	0x40000800
 8002a80:	48000400 	.word	0x48000400

08002a84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <MX_TIM6_Init+0x64>)
 8002a96:	4a15      	ldr	r2, [pc, #84]	; (8002aec <MX_TIM6_Init+0x68>)
 8002a98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <MX_TIM6_Init+0x64>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <MX_TIM6_Init+0x64>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <MX_TIM6_Init+0x64>)
 8002aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <MX_TIM6_Init+0x64>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ab4:	480c      	ldr	r0, [pc, #48]	; (8002ae8 <MX_TIM6_Init+0x64>)
 8002ab6:	f000 fb78 	bl	80031aa <HAL_TIM_Base_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002ac0:	f000 f96c 	bl	8002d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <MX_TIM6_Init+0x64>)
 8002ad2:	f000 fc5f 	bl	8003394 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002adc:	f000 f95e 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000470 	.word	0x20000470
 8002aec:	40001000 	.word	0x40001000

08002af0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	; 0x30
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
 8002b14:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8002b16:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b1a:	f7fe fde3 	bl	80016e4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002b1e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b22:	f7fe fdaf 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  /**TIM8 GPIO Configuration
  PC9   ------> TIM8_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	4619      	mov	r1, r3
 8002b44:	4832      	ldr	r0, [pc, #200]	; (8002c10 <MX_TIM8_Init+0x120>)
 8002b46:	f001 f932 	bl	8003dae <LL_GPIO_Init>

  /* TIM8 DMA Init */

  /* TIM8_CH4_TRIG_COM Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	4831      	ldr	r0, [pc, #196]	; (8002c14 <MX_TIM8_Init+0x124>)
 8002b50:	f7fe fb88 	bl	8001264 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH);
 8002b54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b58:	2102      	movs	r1, #2
 8002b5a:	482e      	ldr	r0, [pc, #184]	; (8002c14 <MX_TIM8_Init+0x124>)
 8002b5c:	f7fe fc5c 	bl	8001418 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8002b60:	2200      	movs	r2, #0
 8002b62:	2102      	movs	r1, #2
 8002b64:	482b      	ldr	r0, [pc, #172]	; (8002c14 <MX_TIM8_Init+0x124>)
 8002b66:	f7fe fba3 	bl	80012b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4829      	ldr	r0, [pc, #164]	; (8002c14 <MX_TIM8_Init+0x124>)
 8002b70:	f7fe fbc2 	bl	80012f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	2102      	movs	r1, #2
 8002b78:	4826      	ldr	r0, [pc, #152]	; (8002c14 <MX_TIM8_Init+0x124>)
 8002b7a:	f7fe fbe1 	bl	8001340 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_HALFWORD);
 8002b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b82:	2102      	movs	r1, #2
 8002b84:	4823      	ldr	r0, [pc, #140]	; (8002c14 <MX_TIM8_Init+0x124>)
 8002b86:	f7fe fbff 	bl	8001388 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_HALFWORD);
 8002b8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b8e:	2102      	movs	r1, #2
 8002b90:	4820      	ldr	r0, [pc, #128]	; (8002c14 <MX_TIM8_Init+0x124>)
 8002b92:	f7fe fc1d 	bl	80013d0 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 65535;
 8002b9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.RepetitionCounter = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4819      	ldr	r0, [pc, #100]	; (8002c18 <MX_TIM8_Init+0x128>)
 8002bb4:	f001 fc8a 	bl	80044cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8002bb8:	4817      	ldr	r0, [pc, #92]	; (8002c18 <MX_TIM8_Init+0x128>)
 8002bba:	f7fe fe43 	bl	8001844 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4815      	ldr	r0, [pc, #84]	; (8002c18 <MX_TIM8_Init+0x128>)
 8002bc2:	f7ff f864 	bl	8001c8e <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM8, LL_TIM_TRGO2_RESET);
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4813      	ldr	r0, [pc, #76]	; (8002c18 <MX_TIM8_Init+0x128>)
 8002bca:	f7ff f873 	bl	8001cb4 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8002bce:	4812      	ldr	r0, [pc, #72]	; (8002c18 <MX_TIM8_Init+0x128>)
 8002bd0:	f7ff f8bb 	bl	8001d4a <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH4, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002bd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bdc:	480e      	ldr	r0, [pc, #56]	; (8002c18 <MX_TIM8_Init+0x128>)
 8002bde:	f7fe fee3 	bl	80019a8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH4, LL_TIM_ICPSC_DIV1);
 8002be2:	2200      	movs	r2, #0
 8002be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002be8:	480b      	ldr	r0, [pc, #44]	; (8002c18 <MX_TIM8_Init+0x128>)
 8002bea:	f7fe ff37 	bl	8001a5c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH4, LL_TIM_IC_FILTER_FDIV1);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bf4:	4808      	ldr	r0, [pc, #32]	; (8002c18 <MX_TIM8_Init+0x128>)
 8002bf6:	f7fe ff8b 	bl	8001b10 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH4, LL_TIM_IC_POLARITY_RISING);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c00:	4805      	ldr	r0, [pc, #20]	; (8002c18 <MX_TIM8_Init+0x128>)
 8002c02:	f7fe ffdf 	bl	8001bc4 <LL_TIM_IC_SetPolarity>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002c06:	bf00      	nop
 8002c08:	3730      	adds	r7, #48	; 0x30
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	48000800 	.word	0x48000800
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40013400 	.word	0x40013400

08002c1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08e      	sub	sp, #56	; 0x38
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002c22:	f107 031c 	add.w	r3, r7, #28
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	611a      	str	r2, [r3, #16]
 8002c32:	615a      	str	r2, [r3, #20]
 8002c34:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
 8002c44:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002c46:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c4a:	f7fe fd33 	bl	80016b4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002c4e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c52:	f7fe fd17 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c56:	230c      	movs	r3, #12
 8002c58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c76:	f001 f89a 	bl	8003dae <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002c7a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c7e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002c80:	2300      	movs	r3, #0
 8002c82:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002c84:	2300      	movs	r3, #0
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002c8c:	230c      	movs	r3, #12
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002c94:	2300      	movs	r3, #0
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002c98:	f107 031c 	add.w	r3, r7, #28
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4808      	ldr	r0, [pc, #32]	; (8002cc0 <MX_USART2_UART_Init+0xa4>)
 8002ca0:	f002 f84a 	bl	8004d38 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8002ca4:	4806      	ldr	r0, [pc, #24]	; (8002cc0 <MX_USART2_UART_Init+0xa4>)
 8002ca6:	f7ff f8a6 	bl	8001df6 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8002caa:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <MX_USART2_UART_Init+0xa4>)
 8002cac:	f7ff f88d 	bl	8001dca <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002cb0:	4803      	ldr	r0, [pc, #12]	; (8002cc0 <MX_USART2_UART_Init+0xa4>)
 8002cb2:	f7ff f87a 	bl	8001daa <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cb6:	bf00      	nop
 8002cb8:	3738      	adds	r7, #56	; 0x38
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40004400 	.word	0x40004400

08002cc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f7fe fcdb 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8002cce:	2002      	movs	r0, #2
 8002cd0:	f7fe fcd8 	bl	8001684 <LL_AHB1_GRP1_EnableClock>

}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002cde:	f107 031c 	add.w	r3, r7, #28
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
 8002cf8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002cfa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002cfe:	f7fe fcc1 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8002d02:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002d06:	f7fe fcbd 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002d0a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002d0e:	f7fe fcb9 	bl	8001684 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002d12:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002d16:	f7fe fcb5 	bl	8001684 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8002d1a:	2120      	movs	r1, #32
 8002d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d20:	f7ff f8d7 	bl	8001ed2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8002d24:	491b      	ldr	r1, [pc, #108]	; (8002d94 <MX_GPIO_Init+0xbc>)
 8002d26:	2002      	movs	r0, #2
 8002d28:	f7fe fd2c 	bl	8001784 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d32:	4819      	ldr	r0, [pc, #100]	; (8002d98 <MX_GPIO_Init+0xc0>)
 8002d34:	f7ff f89e 	bl	8001e74 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d3e:	4816      	ldr	r0, [pc, #88]	; (8002d98 <MX_GPIO_Init+0xc0>)
 8002d40:	f7ff f869 	bl	8001e16 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8002d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d48:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8002d60:	f107 031c 	add.w	r3, r7, #28
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fe35 	bl	80039d4 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	4619      	mov	r1, r3
 8002d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d86:	f001 f812 	bl	8003dae <LL_GPIO_Init>

}
 8002d8a:	bf00      	nop
 8002d8c:	3728      	adds	r7, #40	; 0x28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	00f00003 	.word	0x00f00003
 8002d98:	48000800 	.word	0x48000800

08002d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <HAL_MspInit+0x4c>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_MspInit+0x4c>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6193      	str	r3, [r2, #24]
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <HAL_MspInit+0x4c>)
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_MspInit+0x4c>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <HAL_MspInit+0x4c>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	61d3      	str	r3, [r2, #28]
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <HAL_MspInit+0x4c>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	210f      	movs	r1, #15
 8002de6:	f06f 0001 	mvn.w	r0, #1
 8002dea:	f000 f9b6 	bl	800315a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <HAL_TIM_Base_MspInit+0x38>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d10b      	bne.n	8002e26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <HAL_TIM_Base_MspInit+0x3c>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	4a09      	ldr	r2, [pc, #36]	; (8002e38 <HAL_TIM_Base_MspInit+0x3c>)
 8002e14:	f043 0310 	orr.w	r3, r3, #16
 8002e18:	61d3      	str	r3, [r2, #28]
 8002e1a:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <HAL_TIM_Base_MspInit+0x3c>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40001000 	.word	0x40001000
 8002e38:	40021000 	.word	0x40021000

08002e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e4e:	e7fe      	b.n	8002e4e <HardFault_Handler+0x4>

08002e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e54:	e7fe      	b.n	8002e54 <MemManage_Handler+0x4>

08002e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e5a:	e7fe      	b.n	8002e5a <BusFault_Handler+0x4>

08002e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e60:	e7fe      	b.n	8002e60 <UsageFault_Handler+0x4>

08002e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e78:	4a14      	ldr	r2, [pc, #80]	; (8002ecc <_sbrk+0x5c>)
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <_sbrk+0x60>)
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <_sbrk+0x64>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <_sbrk+0x64>)
 8002e8e:	4a12      	ldr	r2, [pc, #72]	; (8002ed8 <_sbrk+0x68>)
 8002e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d207      	bcs.n	8002eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ea0:	f00e fbb2 	bl	8011608 <__errno>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002eae:	e009      	b.n	8002ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <_sbrk+0x64>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <_sbrk+0x64>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <_sbrk+0x64>)
 8002ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20010000 	.word	0x20010000
 8002ed0:	00000400 	.word	0x00000400
 8002ed4:	20000214 	.word	0x20000214
 8002ed8:	2000cf98 	.word	0x2000cf98

08002edc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <SystemInit+0x20>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <SystemInit+0x20>)
 8002ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f04:	480d      	ldr	r0, [pc, #52]	; (8002f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f06:	490e      	ldr	r1, [pc, #56]	; (8002f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f08:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <LoopForever+0xe>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f0c:	e002      	b.n	8002f14 <LoopCopyDataInit>

08002f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f12:	3304      	adds	r3, #4

08002f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f18:	d3f9      	bcc.n	8002f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f1c:	4c0b      	ldr	r4, [pc, #44]	; (8002f4c <LoopForever+0x16>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f20:	e001      	b.n	8002f26 <LoopFillZerobss>

08002f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f24:	3204      	adds	r2, #4

08002f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f28:	d3fb      	bcc.n	8002f22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f2a:	f7ff ffd7 	bl	8002edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2e:	f00e fb71 	bl	8011614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f32:	f7fe ffdc 	bl	8001eee <main>

08002f36 <LoopForever>:

LoopForever:
    b LoopForever
 8002f36:	e7fe      	b.n	8002f36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f40:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002f44:	08014138 	.word	0x08014138
  ldr r2, =_sbss
 8002f48:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002f4c:	2000cf94 	.word	0x2000cf94

08002f50 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f50:	e7fe      	b.n	8002f50 <CAN_RX1_IRQHandler>
	...

08002f54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_Init+0x28>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_Init+0x28>)
 8002f5e:	f043 0310 	orr.w	r3, r3, #16
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f64:	2003      	movs	r0, #3
 8002f66:	f000 f8ed 	bl	8003144 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f6a:	200f      	movs	r0, #15
 8002f6c:	f000 f808 	bl	8002f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f70:	f7ff ff1c 	bl	8002dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40022000 	.word	0x40022000

08002f80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_InitTick+0x54>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_InitTick+0x58>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4619      	mov	r1, r3
 8002f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f8f7 	bl	8003192 <HAL_SYSTICK_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00e      	b.n	8002fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b0f      	cmp	r3, #15
 8002fb2:	d80a      	bhi.n	8002fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	f000 f8cd 	bl	800315a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc0:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <HAL_InitTick+0x5c>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	20000008 	.word	0x20000008
 8002fdc:	20000004 	.word	0x20000004

08002fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800300c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <__NVIC_GetPriorityGrouping+0x18>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 0307 	and.w	r3, r3, #7
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	6039      	str	r1, [r7, #0]
 800304e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003054:	2b00      	cmp	r3, #0
 8003056:	db0a      	blt.n	800306e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	490c      	ldr	r1, [pc, #48]	; (8003090 <__NVIC_SetPriority+0x4c>)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	440b      	add	r3, r1
 8003068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800306c:	e00a      	b.n	8003084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	4908      	ldr	r1, [pc, #32]	; (8003094 <__NVIC_SetPriority+0x50>)
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	3b04      	subs	r3, #4
 800307c:	0112      	lsls	r2, r2, #4
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	440b      	add	r3, r1
 8003082:	761a      	strb	r2, [r3, #24]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000e100 	.word	0xe000e100
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003098:	b480      	push	{r7}
 800309a:	b089      	sub	sp, #36	; 0x24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f1c3 0307 	rsb	r3, r3, #7
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	bf28      	it	cs
 80030b6:	2304      	movcs	r3, #4
 80030b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3304      	adds	r3, #4
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d902      	bls.n	80030c8 <NVIC_EncodePriority+0x30>
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3b03      	subs	r3, #3
 80030c6:	e000      	b.n	80030ca <NVIC_EncodePriority+0x32>
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	f04f 32ff 	mov.w	r2, #4294967295
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43da      	mvns	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	401a      	ands	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e0:	f04f 31ff 	mov.w	r1, #4294967295
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	43d9      	mvns	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	4313      	orrs	r3, r2
         );
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3724      	adds	r7, #36	; 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003110:	d301      	bcc.n	8003116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003112:	2301      	movs	r3, #1
 8003114:	e00f      	b.n	8003136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <SysTick_Config+0x40>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800311e:	210f      	movs	r1, #15
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f7ff ff8e 	bl	8003044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <SysTick_Config+0x40>)
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <SysTick_Config+0x40>)
 8003130:	2207      	movs	r2, #7
 8003132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	e000e010 	.word	0xe000e010

08003144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ff47 	bl	8002fe0 <__NVIC_SetPriorityGrouping>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800316c:	f7ff ff5c 	bl	8003028 <__NVIC_GetPriorityGrouping>
 8003170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	6978      	ldr	r0, [r7, #20]
 8003178:	f7ff ff8e 	bl	8003098 <NVIC_EncodePriority>
 800317c:	4602      	mov	r2, r0
 800317e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff5d 	bl	8003044 <__NVIC_SetPriority>
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ffb0 	bl	8003100 <SysTick_Config>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e049      	b.n	8003250 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff fe13 	bl	8002dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f000 f835 	bl	8003258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a42      	ldr	r2, [pc, #264]	; (8003374 <TIM_Base_SetConfig+0x11c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003276:	d00f      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a3f      	ldr	r2, [pc, #252]	; (8003378 <TIM_Base_SetConfig+0x120>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00b      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a3e      	ldr	r2, [pc, #248]	; (800337c <TIM_Base_SetConfig+0x124>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d007      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a3d      	ldr	r2, [pc, #244]	; (8003380 <TIM_Base_SetConfig+0x128>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3c      	ldr	r2, [pc, #240]	; (8003384 <TIM_Base_SetConfig+0x12c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d108      	bne.n	80032aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a31      	ldr	r2, [pc, #196]	; (8003374 <TIM_Base_SetConfig+0x11c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01f      	beq.n	80032f2 <TIM_Base_SetConfig+0x9a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d01b      	beq.n	80032f2 <TIM_Base_SetConfig+0x9a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2e      	ldr	r2, [pc, #184]	; (8003378 <TIM_Base_SetConfig+0x120>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d017      	beq.n	80032f2 <TIM_Base_SetConfig+0x9a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2d      	ldr	r2, [pc, #180]	; (800337c <TIM_Base_SetConfig+0x124>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <TIM_Base_SetConfig+0x9a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2c      	ldr	r2, [pc, #176]	; (8003380 <TIM_Base_SetConfig+0x128>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00f      	beq.n	80032f2 <TIM_Base_SetConfig+0x9a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a2c      	ldr	r2, [pc, #176]	; (8003388 <TIM_Base_SetConfig+0x130>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_Base_SetConfig+0x9a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2b      	ldr	r2, [pc, #172]	; (800338c <TIM_Base_SetConfig+0x134>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_Base_SetConfig+0x9a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2a      	ldr	r2, [pc, #168]	; (8003390 <TIM_Base_SetConfig+0x138>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_Base_SetConfig+0x9a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a25      	ldr	r2, [pc, #148]	; (8003384 <TIM_Base_SetConfig+0x12c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d108      	bne.n	8003304 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a12      	ldr	r2, [pc, #72]	; (8003374 <TIM_Base_SetConfig+0x11c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d013      	beq.n	8003358 <TIM_Base_SetConfig+0x100>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a13      	ldr	r2, [pc, #76]	; (8003380 <TIM_Base_SetConfig+0x128>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00f      	beq.n	8003358 <TIM_Base_SetConfig+0x100>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <TIM_Base_SetConfig+0x130>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00b      	beq.n	8003358 <TIM_Base_SetConfig+0x100>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <TIM_Base_SetConfig+0x134>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d007      	beq.n	8003358 <TIM_Base_SetConfig+0x100>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a11      	ldr	r2, [pc, #68]	; (8003390 <TIM_Base_SetConfig+0x138>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_Base_SetConfig+0x100>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a0c      	ldr	r2, [pc, #48]	; (8003384 <TIM_Base_SetConfig+0x12c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d103      	bne.n	8003360 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	615a      	str	r2, [r3, #20]
}
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40013400 	.word	0x40013400
 8003384:	40015000 	.word	0x40015000
 8003388:	40014000 	.word	0x40014000
 800338c:	40014400 	.word	0x40014400
 8003390:	40014800 	.word	0x40014800

08003394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e06d      	b.n	8003488 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a30      	ldr	r2, [pc, #192]	; (8003494 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d009      	beq.n	80033ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a2f      	ldr	r2, [pc, #188]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d004      	beq.n	80033ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2d      	ldr	r2, [pc, #180]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d108      	bne.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d01d      	beq.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003428:	d018      	beq.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1a      	ldr	r2, [pc, #104]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00e      	beq.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a15      	ldr	r2, [pc, #84]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d009      	beq.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a11      	ldr	r2, [pc, #68]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d10c      	bne.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003462:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	4313      	orrs	r3, r2
 800346c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40013400 	.word	0x40013400
 800349c:	40015000 	.word	0x40015000
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40014000 	.word	0x40014000

080034ac <LL_ADC_REG_SetSequencerLength>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f023 020f 	bic.w	r2, r3, #15
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_ADC_IsEnabled>:
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	bf0c      	ite	eq
 80034e6:	2301      	moveq	r3, #1
 80034e8:	2300      	movne	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <LL_ADC_CommonInit+0xa8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10f      	bne.n	800352e <LL_ADC_CommonInit+0x36>
 800350e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003512:	f7ff ffde 	bl	80034d2 <LL_ADC_IsEnabled>
 8003516:	4604      	mov	r4, r0
 8003518:	4822      	ldr	r0, [pc, #136]	; (80035a4 <LL_ADC_CommonInit+0xac>)
 800351a:	f7ff ffda 	bl	80034d2 <LL_ADC_IsEnabled>
 800351e:	4603      	mov	r3, r0
 8003520:	4323      	orrs	r3, r4
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf0c      	ite	eq
 8003526:	2301      	moveq	r3, #1
 8003528:	2300      	movne	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e00d      	b.n	800354a <LL_ADC_CommonInit+0x52>
 800352e:	481e      	ldr	r0, [pc, #120]	; (80035a8 <LL_ADC_CommonInit+0xb0>)
 8003530:	f7ff ffcf 	bl	80034d2 <LL_ADC_IsEnabled>
 8003534:	4604      	mov	r4, r0
 8003536:	481d      	ldr	r0, [pc, #116]	; (80035ac <LL_ADC_CommonInit+0xb4>)
 8003538:	f7ff ffcb 	bl	80034d2 <LL_ADC_IsEnabled>
 800353c:	4603      	mov	r3, r0
 800353e:	4323      	orrs	r3, r4
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d020      	beq.n	8003590 <LL_ADC_CommonInit+0x98>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d012      	beq.n	800357c <LL_ADC_CommonInit+0x84>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <LL_ADC_CommonInit+0xb8>)
 800355c:	4013      	ands	r3, r2
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	6811      	ldr	r1, [r2, #0]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	6852      	ldr	r2, [r2, #4]
 8003566:	4311      	orrs	r1, r2
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	6892      	ldr	r2, [r2, #8]
 800356c:	4311      	orrs	r1, r2
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	68d2      	ldr	r2, [r2, #12]
 8003572:	430a      	orrs	r2, r1
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	e00b      	b.n	8003594 <LL_ADC_CommonInit+0x9c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <LL_ADC_CommonInit+0xb8>)
 8003582:	4013      	ands	r3, r2
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	e001      	b.n	8003594 <LL_ADC_CommonInit+0x9c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bd90      	pop	{r4, r7, pc}
 800359e:	bf00      	nop
 80035a0:	50000300 	.word	0x50000300
 80035a4:	50000100 	.word	0x50000100
 80035a8:	50000400 	.word	0x50000400
 80035ac:	50000500 	.word	0x50000500
 80035b0:	fffc30e0 	.word	0xfffc30e0

080035b4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ff85 	bl	80034d2 <LL_ADC_IsEnabled>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d111      	bne.n	80035f2 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035d6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	6811      	ldr	r1, [r2, #0]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	6852      	ldr	r2, [r2, #4]
 80035e2:	4311      	orrs	r1, r2
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	6892      	ldr	r2, [r2, #8]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	e001      	b.n	80035f6 <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ff5f 	bl	80034d2 <LL_ADC_IsEnabled>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d132      	bne.n	8003680 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d015      	beq.n	800364e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <LL_ADC_REG_Init+0x90>)
 8003628:	4013      	ands	r3, r2
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	6811      	ldr	r1, [r2, #0]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	6892      	ldr	r2, [r2, #8]
 8003632:	4311      	orrs	r1, r2
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	68d2      	ldr	r2, [r2, #12]
 8003638:	4311      	orrs	r1, r2
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	6912      	ldr	r2, [r2, #16]
 800363e:	4311      	orrs	r1, r2
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	6952      	ldr	r2, [r2, #20]
 8003644:	430a      	orrs	r2, r1
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]
 800364c:	e011      	b.n	8003672 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <LL_ADC_REG_Init+0x90>)
 8003654:	4013      	ands	r3, r2
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	6811      	ldr	r1, [r2, #0]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	68d2      	ldr	r2, [r2, #12]
 800365e:	4311      	orrs	r1, r2
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	6912      	ldr	r2, [r2, #16]
 8003664:	4311      	orrs	r1, r2
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	6952      	ldr	r2, [r2, #20]
 800366a:	430a      	orrs	r2, r1
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff17 	bl	80034ac <LL_ADC_REG_SetSequencerLength>
 800367e:	e001      	b.n	8003684 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	fff0c03c 	.word	0xfff0c03c

08003694 <LL_DAC_IsEnabled>:
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2101      	movs	r1, #1
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	429a      	cmp	r2, r3
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff ffd5 	bl	8003694 <LL_DAC_IsEnabled>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d13a      	bne.n	8003766 <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01e      	beq.n	8003736 <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	f640 71fa 	movw	r1, #4090	; 0xffa
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	401a      	ands	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6819      	ldr	r1, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4319      	orrs	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4319      	orrs	r1, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	4319      	orrs	r1, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	431a      	orrs	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e019      	b.n	800376a <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	21fa      	movs	r1, #250	; 0xfa
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	401a      	ands	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6819      	ldr	r1, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4319      	orrs	r1, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	fa01 f303 	lsl.w	r3, r1, r3
 800375e:	431a      	orrs	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e001      	b.n	800376a <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800376a:	7dfb      	ldrb	r3, [r7, #23]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <LL_EXTI_EnableIT_0_31+0x20>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4904      	ldr	r1, [pc, #16]	; (8003794 <LL_EXTI_EnableIT_0_31+0x20>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4313      	orrs	r3, r2
 8003786:	600b      	str	r3, [r1, #0]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40010400 	.word	0x40010400

08003798 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <LL_EXTI_EnableIT_32_63+0x20>)
 80037a2:	6a1a      	ldr	r2, [r3, #32]
 80037a4:	4904      	ldr	r1, [pc, #16]	; (80037b8 <LL_EXTI_EnableIT_32_63+0x20>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	620b      	str	r3, [r1, #32]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40010400 	.word	0x40010400

080037bc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	4904      	ldr	r1, [pc, #16]	; (80037e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40010400 	.word	0x40010400

080037e4 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <LL_EXTI_DisableIT_32_63+0x24>)
 80037ee:	6a1a      	ldr	r2, [r3, #32]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	43db      	mvns	r3, r3
 80037f4:	4904      	ldr	r1, [pc, #16]	; (8003808 <LL_EXTI_DisableIT_32_63+0x24>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	620b      	str	r3, [r1, #32]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40010400 	.word	0x40010400

0800380c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4904      	ldr	r1, [pc, #16]	; (800382c <LL_EXTI_EnableEvent_0_31+0x20>)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]

}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	40010400 	.word	0x40010400

08003830 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <LL_EXTI_EnableEvent_32_63+0x20>)
 800383a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800383c:	4904      	ldr	r1, [pc, #16]	; (8003850 <LL_EXTI_EnableEvent_32_63+0x20>)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4313      	orrs	r3, r2
 8003842:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40010400 	.word	0x40010400

08003854 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <LL_EXTI_DisableEvent_0_31+0x24>)
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	43db      	mvns	r3, r3
 8003864:	4904      	ldr	r1, [pc, #16]	; (8003878 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003866:	4013      	ands	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40010400 	.word	0x40010400

0800387c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	43db      	mvns	r3, r3
 800388c:	4904      	ldr	r1, [pc, #16]	; (80038a0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800388e:	4013      	ands	r3, r2
 8003890:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40010400 	.word	0x40010400

080038a4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	4904      	ldr	r1, [pc, #16]	; (80038c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	608b      	str	r3, [r1, #8]

}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40010400 	.word	0x40010400

080038c8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80038d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038d4:	4904      	ldr	r1, [pc, #16]	; (80038e8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4313      	orrs	r3, r2
 80038da:	628b      	str	r3, [r1, #40]	; 0x28
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	40010400 	.word	0x40010400

080038ec <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	4904      	ldr	r1, [pc, #16]	; (8003910 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80038fe:	4013      	ands	r3, r2
 8003900:	608b      	str	r3, [r1, #8]

}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40010400 	.word	0x40010400

08003914 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800391e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	43db      	mvns	r3, r3
 8003924:	4904      	ldr	r1, [pc, #16]	; (8003938 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003926:	4013      	ands	r3, r2
 8003928:	628b      	str	r3, [r1, #40]	; 0x28
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010400 	.word	0x40010400

0800393c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	4904      	ldr	r1, [pc, #16]	; (800395c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4313      	orrs	r3, r2
 800394e:	60cb      	str	r3, [r1, #12]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	40010400 	.word	0x40010400

08003960 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800396a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396c:	4904      	ldr	r1, [pc, #16]	; (8003980 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4313      	orrs	r3, r2
 8003972:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40010400 	.word	0x40010400

08003984 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	43db      	mvns	r3, r3
 8003994:	4904      	ldr	r1, [pc, #16]	; (80039a8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003996:	4013      	ands	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40010400 	.word	0x40010400

080039ac <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80039b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	43db      	mvns	r3, r3
 80039bc:	4904      	ldr	r1, [pc, #16]	; (80039d0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80039be:	4013      	ands	r3, r2
 80039c0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40010400 	.word	0x40010400

080039d4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7a1b      	ldrb	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80c2 	beq.w	8003b6e <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d05b      	beq.n	8003aaa <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	7a5b      	ldrb	r3, [r3, #9]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d00e      	beq.n	8003a18 <LL_EXTI_Init+0x44>
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d017      	beq.n	8003a2e <LL_EXTI_Init+0x5a>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d120      	bne.n	8003a44 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff ff24 	bl	8003854 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff feaf 	bl	8003774 <LL_EXTI_EnableIT_0_31>
          break;
 8003a16:	e018      	b.n	8003a4a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fecd 	bl	80037bc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fef0 	bl	800380c <LL_EXTI_EnableEvent_0_31>
          break;
 8003a2c:	e00d      	b.n	8003a4a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fe9e 	bl	8003774 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fee5 	bl	800380c <LL_EXTI_EnableEvent_0_31>
          break;
 8003a42:	e002      	b.n	8003a4a <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
          break;
 8003a48:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	7a9b      	ldrb	r3, [r3, #10]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d02b      	beq.n	8003aaa <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	7a9b      	ldrb	r3, [r3, #10]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d00e      	beq.n	8003a78 <LL_EXTI_Init+0xa4>
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d017      	beq.n	8003a8e <LL_EXTI_Init+0xba>
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d120      	bne.n	8003aa4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ff8c 	bl	8003984 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff ff17 	bl	80038a4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003a76:	e019      	b.n	8003aac <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ff35 	bl	80038ec <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff ff58 	bl	800393c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003a8c:	e00e      	b.n	8003aac <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff ff06 	bl	80038a4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff4d 	bl	800393c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003aa2:	e003      	b.n	8003aac <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
            break;
 8003aa8:	e000      	b.n	8003aac <LL_EXTI_Init+0xd8>
        }
      }
 8003aaa:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d071      	beq.n	8003b98 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	7a5b      	ldrb	r3, [r3, #9]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d00e      	beq.n	8003ada <LL_EXTI_Init+0x106>
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d017      	beq.n	8003af0 <LL_EXTI_Init+0x11c>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d120      	bne.n	8003b06 <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff fed7 	bl	800387c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fe60 	bl	8003798 <LL_EXTI_EnableIT_32_63>
          break;
 8003ad8:	e018      	b.n	8003b0c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fe80 	bl	80037e4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fea1 	bl	8003830 <LL_EXTI_EnableEvent_32_63>
          break;
 8003aee:	e00d      	b.n	8003b0c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fe4f 	bl	8003798 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fe96 	bl	8003830 <LL_EXTI_EnableEvent_32_63>
          break;
 8003b04:	e002      	b.n	8003b0c <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
          break;
 8003b0a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	7a9b      	ldrb	r3, [r3, #10]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d041      	beq.n	8003b98 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7a9b      	ldrb	r3, [r3, #10]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d00e      	beq.n	8003b3a <LL_EXTI_Init+0x166>
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d017      	beq.n	8003b50 <LL_EXTI_Init+0x17c>
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d120      	bne.n	8003b66 <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff3f 	bl	80039ac <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fec8 	bl	80038c8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8003b38:	e02f      	b.n	8003b9a <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fee8 	bl	8003914 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff ff09 	bl	8003960 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003b4e:	e024      	b.n	8003b9a <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff feb7 	bl	80038c8 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fefe 	bl	8003960 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003b64:	e019      	b.n	8003b9a <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
            break;
 8003b6a:	bf00      	nop
 8003b6c:	e015      	b.n	8003b9a <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fe22 	bl	80037bc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fe69 	bl	8003854 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff fe2c 	bl	80037e4 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fe73 	bl	800387c <LL_EXTI_DisableEvent_32_63>
 8003b96:	e000      	b.n	8003b9a <LL_EXTI_Init+0x1c6>
      }
 8003b98:	bf00      	nop
#endif
  }
  return status;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <LL_GPIO_SetPinMode>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b089      	sub	sp, #36	; 0x24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	613b      	str	r3, [r7, #16]
  return result;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2103      	movs	r1, #3
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	61bb      	str	r3, [r7, #24]
  return result;
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	3724      	adds	r7, #36	; 0x24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LL_GPIO_SetPinOutputType>:
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	401a      	ands	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	431a      	orrs	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	605a      	str	r2, [r3, #4]
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <LL_GPIO_SetPinSpeed>:
{
 8003c32:	b480      	push	{r7}
 8003c34:	b089      	sub	sp, #36	; 0x24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	613b      	str	r3, [r7, #16]
  return result;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	2103      	movs	r1, #3
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	401a      	ands	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	61bb      	str	r3, [r7, #24]
  return result;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	609a      	str	r2, [r3, #8]
}
 8003c84:	bf00      	nop
 8003c86:	3724      	adds	r7, #36	; 0x24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <LL_GPIO_SetPinPull>:
{
 8003c90:	b480      	push	{r7}
 8003c92:	b089      	sub	sp, #36	; 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	613b      	str	r3, [r7, #16]
  return result;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	fab3 f383 	clz	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	2103      	movs	r1, #3
 8003cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	61bb      	str	r3, [r7, #24]
  return result;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	fab3 f383 	clz	r3, r3
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	60da      	str	r2, [r3, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	3724      	adds	r7, #36	; 0x24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_GPIO_SetAFPin_0_7>:
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b089      	sub	sp, #36	; 0x24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	fa93 f3a3 	rbit	r3, r3
 8003d08:	613b      	str	r3, [r7, #16]
  return result;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	fab3 f383 	clz	r3, r3
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	210f      	movs	r1, #15
 8003d16:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	401a      	ands	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	61bb      	str	r3, [r7, #24]
  return result;
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	fab3 f383 	clz	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	621a      	str	r2, [r3, #32]
}
 8003d40:	bf00      	nop
 8003d42:	3724      	adds	r7, #36	; 0x24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_GPIO_SetAFPin_8_15>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b089      	sub	sp, #36	; 0x24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	613b      	str	r3, [r7, #16]
  return result;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	fab3 f383 	clz	r3, r3
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	210f      	movs	r1, #15
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	401a      	ands	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	0a1b      	lsrs	r3, r3, #8
 8003d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	61bb      	str	r3, [r7, #24]
  return result;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003da2:	bf00      	nop
 8003da4:	3724      	adds	r7, #36	; 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b088      	sub	sp, #32
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	613b      	str	r3, [r7, #16]
  return result;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003dd0:	e051      	b.n	8003e76 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d043      	beq.n	8003e70 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d003      	beq.n	8003df8 <LL_GPIO_Init+0x4a>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d10e      	bne.n	8003e16 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	69b9      	ldr	r1, [r7, #24]
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff16 	bl	8003c32 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6819      	ldr	r1, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff fef6 	bl	8003c02 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	69b9      	ldr	r1, [r7, #24]
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ff36 	bl	8003c90 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d11a      	bne.n	8003e62 <LL_GPIO_Init+0xb4>
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	60bb      	str	r3, [r7, #8]
  return result;
 8003e38:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b07      	cmp	r3, #7
 8003e42:	d807      	bhi.n	8003e54 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	69b9      	ldr	r1, [r7, #24]
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff4e 	bl	8003cee <LL_GPIO_SetAFPin_0_7>
 8003e52:	e006      	b.n	8003e62 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff75 	bl	8003d4c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	461a      	mov	r2, r3
 8003e68:	69b9      	ldr	r1, [r7, #24]
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff fe9a 	bl	8003ba4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	3301      	adds	r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1a6      	bne.n	8003dd2 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <LL_RCC_HSI_IsReady>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <LL_RCC_HSI_IsReady+0x20>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40021000 	.word	0x40021000

08003eb4 <LL_RCC_LSE_IsReady>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003eb8:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <LL_RCC_LSE_IsReady+0x20>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	40021000 	.word	0x40021000

08003ed8 <LL_RCC_GetSysClkSource>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <LL_RCC_GetSysClkSource+0x18>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 030c 	and.w	r3, r3, #12
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <LL_RCC_GetAHBPrescaler>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003ef8:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <LL_RCC_GetAHBPrescaler+0x18>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000

08003f10 <LL_RCC_GetAPB1Prescaler>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40021000 	.word	0x40021000

08003f2c <LL_RCC_GetAPB2Prescaler>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000

08003f48 <LL_RCC_GetUSARTClockSource>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <LL_RCC_GetUSARTClockSource+0x28>)
 8003f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f54:	2103      	movs	r1, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5c:	401a      	ands	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	061b      	lsls	r3, r3, #24
 8003f62:	4313      	orrs	r3, r2
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40021000 	.word	0x40021000

08003f74 <LL_RCC_GetUARTClockSource>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, UARTx) | (UARTx >> 8U));
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <LL_RCC_GetUARTClockSource+0x24>)
 8003f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	401a      	ands	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	4313      	orrs	r3, r2
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000

08003f9c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <LL_RCC_PLL_GetMainSource+0x18>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000

08003fb8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8003fbc:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000

08003fd4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <LL_RCC_PLL_GetPrediv+0x18>)
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	f003 030f 	and.w	r3, r3, #15
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40021000 	.word	0x40021000

08003ff0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d12a      	bne.n	8004058 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff ffa0 	bl	8003f48 <LL_RCC_GetUSARTClockSource>
 8004008:	4603      	mov	r3, r0
 800400a:	2b02      	cmp	r3, #2
 800400c:	d00f      	beq.n	800402e <LL_RCC_GetUSARTClockFreq+0x3e>
 800400e:	2b03      	cmp	r3, #3
 8004010:	d005      	beq.n	800401e <LL_RCC_GetUSARTClockFreq+0x2e>
 8004012:	2b01      	cmp	r3, #1
 8004014:	d114      	bne.n	8004040 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004016:	f000 f92b 	bl	8004270 <RCC_GetSystemClockFreq>
 800401a:	60f8      	str	r0, [r7, #12]
        break;
 800401c:	e021      	b.n	8004062 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800401e:	f7ff ff37 	bl	8003e90 <LL_RCC_HSI_IsReady>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d019      	beq.n	800405c <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8004028:	4b46      	ldr	r3, [pc, #280]	; (8004144 <LL_RCC_GetUSARTClockFreq+0x154>)
 800402a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800402c:	e016      	b.n	800405c <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800402e:	f7ff ff41 	bl	8003eb4 <LL_RCC_LSE_IsReady>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8004038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800403e:	e00f      	b.n	8004060 <LL_RCC_GetUSARTClockFreq+0x70>
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004040:	f000 f916 	bl	8004270 <RCC_GetSystemClockFreq>
 8004044:	4603      	mov	r3, r0
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f934 	bl	80042b4 <RCC_GetHCLKClockFreq>
 800404c:	4603      	mov	r3, r0
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f95a 	bl	8004308 <RCC_GetPCLK2ClockFreq>
 8004054:	60f8      	str	r0, [r7, #12]
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8004056:	e004      	b.n	8004062 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8004058:	bf00      	nop
 800405a:	e002      	b.n	8004062 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 800405c:	bf00      	nop
 800405e:	e000      	b.n	8004062 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8004060:	bf00      	nop
#endif /* RCC_CFGR3_USART1SW  */

#if defined(RCC_CFGR3_USART2SW)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b10      	cmp	r3, #16
 8004066:	d12d      	bne.n	80040c4 <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff ff6d 	bl	8003f48 <LL_RCC_GetUSARTClockSource>
 800406e:	4603      	mov	r3, r0
 8004070:	4a35      	ldr	r2, [pc, #212]	; (8004148 <LL_RCC_GetUSARTClockFreq+0x158>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d011      	beq.n	800409a <LL_RCC_GetUSARTClockFreq+0xaa>
 8004076:	4a35      	ldr	r2, [pc, #212]	; (800414c <LL_RCC_GetUSARTClockFreq+0x15c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d006      	beq.n	800408a <LL_RCC_GetUSARTClockFreq+0x9a>
 800407c:	4a34      	ldr	r2, [pc, #208]	; (8004150 <LL_RCC_GetUSARTClockFreq+0x160>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d114      	bne.n	80040ac <LL_RCC_GetUSARTClockFreq+0xbc>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004082:	f000 f8f5 	bl	8004270 <RCC_GetSystemClockFreq>
 8004086:	60f8      	str	r0, [r7, #12]
        break;
 8004088:	e021      	b.n	80040ce <LL_RCC_GetUSARTClockFreq+0xde>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800408a:	f7ff ff01 	bl	8003e90 <LL_RCC_HSI_IsReady>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d019      	beq.n	80040c8 <LL_RCC_GetUSARTClockFreq+0xd8>
        {
          usart_frequency = HSI_VALUE;
 8004094:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <LL_RCC_GetUSARTClockFreq+0x154>)
 8004096:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004098:	e016      	b.n	80040c8 <LL_RCC_GetUSARTClockFreq+0xd8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800409a:	f7ff ff0b 	bl	8003eb4 <LL_RCC_LSE_IsReady>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <LL_RCC_GetUSARTClockFreq+0xdc>
        {
          usart_frequency = LSE_VALUE;
 80040a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80040aa:	e00f      	b.n	80040cc <LL_RCC_GetUSARTClockFreq+0xdc>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80040ac:	f000 f8e0 	bl	8004270 <RCC_GetSystemClockFreq>
 80040b0:	4603      	mov	r3, r0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f8fe 	bl	80042b4 <RCC_GetHCLKClockFreq>
 80040b8:	4603      	mov	r3, r0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f910 	bl	80042e0 <RCC_GetPCLK1ClockFreq>
 80040c0:	60f8      	str	r0, [r7, #12]
        break;
 80040c2:	e004      	b.n	80040ce <LL_RCC_GetUSARTClockFreq+0xde>
    }
  }
 80040c4:	bf00      	nop
 80040c6:	e002      	b.n	80040ce <LL_RCC_GetUSARTClockFreq+0xde>
        break;
 80040c8:	bf00      	nop
 80040ca:	e000      	b.n	80040ce <LL_RCC_GetUSARTClockFreq+0xde>
        break;
 80040cc:	bf00      	nop
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b12      	cmp	r3, #18
 80040d2:	d12d      	bne.n	8004130 <LL_RCC_GetUSARTClockFreq+0x140>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ff37 	bl	8003f48 <LL_RCC_GetUSARTClockSource>
 80040da:	4603      	mov	r3, r0
 80040dc:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <LL_RCC_GetUSARTClockFreq+0x164>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d011      	beq.n	8004106 <LL_RCC_GetUSARTClockFreq+0x116>
 80040e2:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <LL_RCC_GetUSARTClockFreq+0x168>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d006      	beq.n	80040f6 <LL_RCC_GetUSARTClockFreq+0x106>
 80040e8:	4a1c      	ldr	r2, [pc, #112]	; (800415c <LL_RCC_GetUSARTClockFreq+0x16c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d114      	bne.n	8004118 <LL_RCC_GetUSARTClockFreq+0x128>
    {
      case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80040ee:	f000 f8bf 	bl	8004270 <RCC_GetSystemClockFreq>
 80040f2:	60f8      	str	r0, [r7, #12]
        break;
 80040f4:	e021      	b.n	800413a <LL_RCC_GetUSARTClockFreq+0x14a>

      case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80040f6:	f7ff fecb 	bl	8003e90 <LL_RCC_HSI_IsReady>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d019      	beq.n	8004134 <LL_RCC_GetUSARTClockFreq+0x144>
        {
          usart_frequency = HSI_VALUE;
 8004100:	4b10      	ldr	r3, [pc, #64]	; (8004144 <LL_RCC_GetUSARTClockFreq+0x154>)
 8004102:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004104:	e016      	b.n	8004134 <LL_RCC_GetUSARTClockFreq+0x144>

      case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004106:	f7ff fed5 	bl	8003eb4 <LL_RCC_LSE_IsReady>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d013      	beq.n	8004138 <LL_RCC_GetUSARTClockFreq+0x148>
        {
          usart_frequency = LSE_VALUE;
 8004110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004114:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004116:	e00f      	b.n	8004138 <LL_RCC_GetUSARTClockFreq+0x148>

      case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004118:	f000 f8aa 	bl	8004270 <RCC_GetSystemClockFreq>
 800411c:	4603      	mov	r3, r0
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f8c8 	bl	80042b4 <RCC_GetHCLKClockFreq>
 8004124:	4603      	mov	r3, r0
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f8da 	bl	80042e0 <RCC_GetPCLK1ClockFreq>
 800412c:	60f8      	str	r0, [r7, #12]
        break;
 800412e:	e004      	b.n	800413a <LL_RCC_GetUSARTClockFreq+0x14a>
    }
  }
 8004130:	bf00      	nop
 8004132:	e002      	b.n	800413a <LL_RCC_GetUSARTClockFreq+0x14a>
        break;
 8004134:	bf00      	nop
 8004136:	e000      	b.n	800413a <LL_RCC_GetUSARTClockFreq+0x14a>
        break;
 8004138:	bf00      	nop

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800413a:	68fb      	ldr	r3, [r7, #12]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	007a1200 	.word	0x007a1200
 8004148:	10020000 	.word	0x10020000
 800414c:	10030000 	.word	0x10030000
 8004150:	10010000 	.word	0x10010000
 8004154:	12080000 	.word	0x12080000
 8004158:	120c0000 	.word	0x120c0000
 800415c:	12040000 	.word	0x12040000

08004160 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(UART4)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004172:	d12d      	bne.n	80041d0 <LL_RCC_GetUARTClockFreq+0x70>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff fefd 	bl	8003f74 <LL_RCC_GetUARTClockSource>
 800417a:	4603      	mov	r3, r0
 800417c:	4a35      	ldr	r2, [pc, #212]	; (8004254 <LL_RCC_GetUARTClockFreq+0xf4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d011      	beq.n	80041a6 <LL_RCC_GetUARTClockFreq+0x46>
 8004182:	4a35      	ldr	r2, [pc, #212]	; (8004258 <LL_RCC_GetUARTClockFreq+0xf8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d006      	beq.n	8004196 <LL_RCC_GetUARTClockFreq+0x36>
 8004188:	4a34      	ldr	r2, [pc, #208]	; (800425c <LL_RCC_GetUARTClockFreq+0xfc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d114      	bne.n	80041b8 <LL_RCC_GetUARTClockFreq+0x58>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800418e:	f000 f86f 	bl	8004270 <RCC_GetSystemClockFreq>
 8004192:	60f8      	str	r0, [r7, #12]
        break;
 8004194:	e021      	b.n	80041da <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004196:	f7ff fe7b 	bl	8003e90 <LL_RCC_HSI_IsReady>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d019      	beq.n	80041d4 <LL_RCC_GetUARTClockFreq+0x74>
        {
          uart_frequency = HSI_VALUE;
 80041a0:	4b2f      	ldr	r3, [pc, #188]	; (8004260 <LL_RCC_GetUARTClockFreq+0x100>)
 80041a2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80041a4:	e016      	b.n	80041d4 <LL_RCC_GetUARTClockFreq+0x74>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80041a6:	f7ff fe85 	bl	8003eb4 <LL_RCC_LSE_IsReady>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <LL_RCC_GetUARTClockFreq+0x78>
        {
          uart_frequency = LSE_VALUE;
 80041b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80041b6:	e00f      	b.n	80041d8 <LL_RCC_GetUARTClockFreq+0x78>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80041b8:	f000 f85a 	bl	8004270 <RCC_GetSystemClockFreq>
 80041bc:	4603      	mov	r3, r0
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f878 	bl	80042b4 <RCC_GetHCLKClockFreq>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f88a 	bl	80042e0 <RCC_GetPCLK1ClockFreq>
 80041cc:	60f8      	str	r0, [r7, #12]
        break;
 80041ce:	e004      	b.n	80041da <LL_RCC_GetUARTClockFreq+0x7a>
    }
  }
 80041d0:	bf00      	nop
 80041d2:	e002      	b.n	80041da <LL_RCC_GetUARTClockFreq+0x7a>
        break;
 80041d4:	bf00      	nop
 80041d6:	e000      	b.n	80041da <LL_RCC_GetUARTClockFreq+0x7a>
        break;
 80041d8:	bf00      	nop
#endif /* UART4 */

#if defined(UART5)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041e0:	d12d      	bne.n	800423e <LL_RCC_GetUARTClockFreq+0xde>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff fec6 	bl	8003f74 <LL_RCC_GetUARTClockSource>
 80041e8:	4603      	mov	r3, r0
 80041ea:	4a1e      	ldr	r2, [pc, #120]	; (8004264 <LL_RCC_GetUARTClockFreq+0x104>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d011      	beq.n	8004214 <LL_RCC_GetUARTClockFreq+0xb4>
 80041f0:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <LL_RCC_GetUARTClockFreq+0x108>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d006      	beq.n	8004204 <LL_RCC_GetUARTClockFreq+0xa4>
 80041f6:	4a1d      	ldr	r2, [pc, #116]	; (800426c <LL_RCC_GetUARTClockFreq+0x10c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d114      	bne.n	8004226 <LL_RCC_GetUARTClockFreq+0xc6>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80041fc:	f000 f838 	bl	8004270 <RCC_GetSystemClockFreq>
 8004200:	60f8      	str	r0, [r7, #12]
        break;
 8004202:	e021      	b.n	8004248 <LL_RCC_GetUARTClockFreq+0xe8>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004204:	f7ff fe44 	bl	8003e90 <LL_RCC_HSI_IsReady>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d019      	beq.n	8004242 <LL_RCC_GetUARTClockFreq+0xe2>
        {
          uart_frequency = HSI_VALUE;
 800420e:	4b14      	ldr	r3, [pc, #80]	; (8004260 <LL_RCC_GetUARTClockFreq+0x100>)
 8004210:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004212:	e016      	b.n	8004242 <LL_RCC_GetUARTClockFreq+0xe2>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004214:	f7ff fe4e 	bl	8003eb4 <LL_RCC_LSE_IsReady>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d013      	beq.n	8004246 <LL_RCC_GetUARTClockFreq+0xe6>
        {
          uart_frequency = LSE_VALUE;
 800421e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004222:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004224:	e00f      	b.n	8004246 <LL_RCC_GetUARTClockFreq+0xe6>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004226:	f000 f823 	bl	8004270 <RCC_GetSystemClockFreq>
 800422a:	4603      	mov	r3, r0
 800422c:	4618      	mov	r0, r3
 800422e:	f000 f841 	bl	80042b4 <RCC_GetHCLKClockFreq>
 8004232:	4603      	mov	r3, r0
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f853 	bl	80042e0 <RCC_GetPCLK1ClockFreq>
 800423a:	60f8      	str	r0, [r7, #12]
        break;
 800423c:	e004      	b.n	8004248 <LL_RCC_GetUARTClockFreq+0xe8>
    }
  }
 800423e:	bf00      	nop
 8004240:	e002      	b.n	8004248 <LL_RCC_GetUARTClockFreq+0xe8>
        break;
 8004242:	bf00      	nop
 8004244:	e000      	b.n	8004248 <LL_RCC_GetUARTClockFreq+0xe8>
        break;
 8004246:	bf00      	nop
#endif /* UART5 */

  return uart_frequency;
 8004248:	68fb      	ldr	r3, [r7, #12]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	00203000 	.word	0x00203000
 8004258:	00303000 	.word	0x00303000
 800425c:	00103000 	.word	0x00103000
 8004260:	007a1200 	.word	0x007a1200
 8004264:	0080c000 	.word	0x0080c000
 8004268:	00c0c000 	.word	0x00c0c000
 800426c:	0040c000 	.word	0x0040c000

08004270 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800427a:	f7ff fe2d 	bl	8003ed8 <LL_RCC_GetSysClkSource>
 800427e:	4603      	mov	r3, r0
 8004280:	2b04      	cmp	r3, #4
 8004282:	d006      	beq.n	8004292 <RCC_GetSystemClockFreq+0x22>
 8004284:	2b08      	cmp	r3, #8
 8004286:	d007      	beq.n	8004298 <RCC_GetSystemClockFreq+0x28>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800428c:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <RCC_GetSystemClockFreq+0x40>)
 800428e:	607b      	str	r3, [r7, #4]
      break;
 8004290:	e009      	b.n	80042a6 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <RCC_GetSystemClockFreq+0x40>)
 8004294:	607b      	str	r3, [r7, #4]
      break;
 8004296:	e006      	b.n	80042a6 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004298:	f000 f84a 	bl	8004330 <RCC_PLL_GetFreqDomain_SYS>
 800429c:	6078      	str	r0, [r7, #4]
      break;
 800429e:	e002      	b.n	80042a6 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <RCC_GetSystemClockFreq+0x40>)
 80042a2:	607b      	str	r3, [r7, #4]
      break;
 80042a4:	bf00      	nop
  }

  return frequency;
 80042a6:	687b      	ldr	r3, [r7, #4]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	007a1200 	.word	0x007a1200

080042b4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80042bc:	f7ff fe1a 	bl	8003ef4 <LL_RCC_GetAHBPrescaler>
 80042c0:	4603      	mov	r3, r0
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	4a04      	ldr	r2, [pc, #16]	; (80042dc <RCC_GetHCLKClockFreq+0x28>)
 80042ca:	5cd3      	ldrb	r3, [r2, r3]
 80042cc:	461a      	mov	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	40d3      	lsrs	r3, r2
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	08013d1c 	.word	0x08013d1c

080042e0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80042e8:	f7ff fe12 	bl	8003f10 <LL_RCC_GetAPB1Prescaler>
 80042ec:	4603      	mov	r3, r0
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	4a04      	ldr	r2, [pc, #16]	; (8004304 <RCC_GetPCLK1ClockFreq+0x24>)
 80042f2:	5cd3      	ldrb	r3, [r2, r3]
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	40d3      	lsrs	r3, r2
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	08013d2c 	.word	0x08013d2c

08004308 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004310:	f7ff fe0c 	bl	8003f2c <LL_RCC_GetAPB2Prescaler>
 8004314:	4603      	mov	r3, r0
 8004316:	0adb      	lsrs	r3, r3, #11
 8004318:	4a04      	ldr	r2, [pc, #16]	; (800432c <RCC_GetPCLK2ClockFreq+0x24>)
 800431a:	5cd3      	ldrb	r3, [r2, r3]
 800431c:	461a      	mov	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	40d3      	lsrs	r3, r2
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	08013d2c 	.word	0x08013d2c

08004330 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004330:	b590      	push	{r4, r7, lr}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800433e:	f7ff fe2d 	bl	8003f9c <LL_RCC_PLL_GetMainSource>
 8004342:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434a:	d003      	beq.n	8004354 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800434c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004350:	d003      	beq.n	800435a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004352:	e005      	b.n	8004360 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004354:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004356:	60fb      	str	r3, [r7, #12]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8004358:	e005      	b.n	8004366 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800435c:	60fb      	str	r3, [r7, #12]
      break;
 800435e:	e002      	b.n	8004366 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004362:	60fb      	str	r3, [r7, #12]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8004364:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 8004366:	f7ff fe35 	bl	8003fd4 <LL_RCC_PLL_GetPrediv>
 800436a:	4603      	mov	r3, r0
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	3301      	adds	r3, #1
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	fbb2 f4f3 	udiv	r4, r2, r3
 8004378:	f7ff fe1e 	bl	8003fb8 <LL_RCC_PLL_GetMultiplicator>
 800437c:	4603      	mov	r3, r0
 800437e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004382:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004386:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	fa92 f2a2 	rbit	r2, r2
 800438e:	603a      	str	r2, [r7, #0]
  return result;
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	fab2 f282 	clz	r2, r2
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	40d3      	lsrs	r3, r2
 800439a:	3302      	adds	r3, #2
 800439c:	fb03 f304 	mul.w	r3, r3, r4
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd90      	pop	{r4, r7, pc}
 80043a8:	007a1200 	.word	0x007a1200

080043ac <LL_TIM_SetPrescaler>:
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <LL_TIM_SetAutoReload>:
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <LL_TIM_SetRepetitionCounter>:
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_TIM_OC_SetCompareCH1>:
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_TIM_OC_SetCompareCH2>:
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <LL_TIM_OC_SetCompareCH3>:
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <LL_TIM_OC_SetCompareCH4>:
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_TIM_OC_SetCompareCH5>:
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_TIM_OC_SetCompareCH6>:
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f043 0201 	orr.w	r2, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	615a      	str	r2, [r3, #20]
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a3f      	ldr	r2, [pc, #252]	; (80045dc <LL_TIM_Init+0x110>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d013      	beq.n	800450c <LL_TIM_Init+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ea:	d00f      	beq.n	800450c <LL_TIM_Init+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a3c      	ldr	r2, [pc, #240]	; (80045e0 <LL_TIM_Init+0x114>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00b      	beq.n	800450c <LL_TIM_Init+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a3b      	ldr	r2, [pc, #236]	; (80045e4 <LL_TIM_Init+0x118>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <LL_TIM_Init+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a3a      	ldr	r2, [pc, #232]	; (80045e8 <LL_TIM_Init+0x11c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <LL_TIM_Init+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a39      	ldr	r2, [pc, #228]	; (80045ec <LL_TIM_Init+0x120>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d106      	bne.n	800451a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2f      	ldr	r2, [pc, #188]	; (80045dc <LL_TIM_Init+0x110>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <LL_TIM_Init+0x96>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004528:	d01b      	beq.n	8004562 <LL_TIM_Init+0x96>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a2c      	ldr	r2, [pc, #176]	; (80045e0 <LL_TIM_Init+0x114>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d017      	beq.n	8004562 <LL_TIM_Init+0x96>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a2b      	ldr	r2, [pc, #172]	; (80045e4 <LL_TIM_Init+0x118>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <LL_TIM_Init+0x96>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2a      	ldr	r2, [pc, #168]	; (80045e8 <LL_TIM_Init+0x11c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00f      	beq.n	8004562 <LL_TIM_Init+0x96>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2a      	ldr	r2, [pc, #168]	; (80045f0 <LL_TIM_Init+0x124>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00b      	beq.n	8004562 <LL_TIM_Init+0x96>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a29      	ldr	r2, [pc, #164]	; (80045f4 <LL_TIM_Init+0x128>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <LL_TIM_Init+0x96>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a28      	ldr	r2, [pc, #160]	; (80045f8 <LL_TIM_Init+0x12c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <LL_TIM_Init+0x96>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a23      	ldr	r2, [pc, #140]	; (80045ec <LL_TIM_Init+0x120>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d106      	bne.n	8004570 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff ff23 	bl	80043c8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	4619      	mov	r1, r3
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff ff0f 	bl	80043ac <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a12      	ldr	r2, [pc, #72]	; (80045dc <LL_TIM_Init+0x110>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <LL_TIM_Init+0xf2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <LL_TIM_Init+0x11c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00f      	beq.n	80045be <LL_TIM_Init+0xf2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <LL_TIM_Init+0x124>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00b      	beq.n	80045be <LL_TIM_Init+0xf2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <LL_TIM_Init+0x128>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <LL_TIM_Init+0xf2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a11      	ldr	r2, [pc, #68]	; (80045f8 <LL_TIM_Init+0x12c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <LL_TIM_Init+0xf2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a0c      	ldr	r2, [pc, #48]	; (80045ec <LL_TIM_Init+0x120>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d105      	bne.n	80045ca <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ff0d 	bl	80043e4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff ff6e 	bl	80044ac <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40013400 	.word	0x40013400
 80045ec:	40015000 	.word	0x40015000
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40014400 	.word	0x40014400
 80045f8:	40014800 	.word	0x40014800

080045fc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004612:	d01f      	beq.n	8004654 <LL_TIM_OC_Init+0x58>
 8004614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004618:	d804      	bhi.n	8004624 <LL_TIM_OC_Init+0x28>
 800461a:	2b01      	cmp	r3, #1
 800461c:	d00c      	beq.n	8004638 <LL_TIM_OC_Init+0x3c>
 800461e:	2b10      	cmp	r3, #16
 8004620:	d011      	beq.n	8004646 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8004622:	e033      	b.n	800468c <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d022      	beq.n	8004670 <LL_TIM_OC_Init+0x74>
 800462a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462e:	d026      	beq.n	800467e <LL_TIM_OC_Init+0x82>
 8004630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004634:	d015      	beq.n	8004662 <LL_TIM_OC_Init+0x66>
      break;
 8004636:	e029      	b.n	800468c <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f82c 	bl	8004698 <OC1Config>
 8004640:	4603      	mov	r3, r0
 8004642:	75fb      	strb	r3, [r7, #23]
      break;
 8004644:	e022      	b.n	800468c <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f8ab 	bl	80047a4 <OC2Config>
 800464e:	4603      	mov	r3, r0
 8004650:	75fb      	strb	r3, [r7, #23]
      break;
 8004652:	e01b      	b.n	800468c <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f92e 	bl	80048b8 <OC3Config>
 800465c:	4603      	mov	r3, r0
 800465e:	75fb      	strb	r3, [r7, #23]
      break;
 8004660:	e014      	b.n	800468c <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f9b1 	bl	80049cc <OC4Config>
 800466a:	4603      	mov	r3, r0
 800466c:	75fb      	strb	r3, [r7, #23]
      break;
 800466e:	e00d      	b.n	800468c <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fa1c 	bl	8004ab0 <OC5Config>
 8004678:	4603      	mov	r3, r0
 800467a:	75fb      	strb	r3, [r7, #23]
      break;
 800467c:	e006      	b.n	800468c <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 fa7f 	bl	8004b84 <OC6Config>
 8004686:	4603      	mov	r3, r0
 8004688:	75fb      	strb	r3, [r7, #23]
      break;
 800468a:	bf00      	nop
  }

  return result;
 800468c:	7dfb      	ldrb	r3, [r7, #23]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f023 0201 	bic.w	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0303 	bic.w	r3, r3, #3
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f023 0202 	bic.w	r2, r3, #2
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f023 0201 	bic.w	r2, r3, #1
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a24      	ldr	r2, [pc, #144]	; (800478c <OC1Config+0xf4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <OC1Config+0x8e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a23      	ldr	r2, [pc, #140]	; (8004790 <OC1Config+0xf8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <OC1Config+0x8e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a22      	ldr	r2, [pc, #136]	; (8004794 <OC1Config+0xfc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <OC1Config+0x8e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a21      	ldr	r2, [pc, #132]	; (8004798 <OC1Config+0x100>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <OC1Config+0x8e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <OC1Config+0x104>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <OC1Config+0x8e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <OC1Config+0x108>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d11e      	bne.n	8004764 <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f023 0208 	bic.w	r2, r3, #8
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f023 0204 	bic.w	r2, r3, #4
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff fe42 	bl	8004400 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40013400 	.word	0x40013400
 8004794:	40014000 	.word	0x40014000
 8004798:	40014400 	.word	0x40014400
 800479c:	40014800 	.word	0x40014800
 80047a0:	40015000 	.word	0x40015000

080047a4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f023 0210 	bic.w	r2, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	0212      	lsls	r2, r2, #8
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f023 0220 	bic.w	r2, r3, #32
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0210 	bic.w	r2, r3, #16
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a25      	ldr	r2, [pc, #148]	; (80048a0 <OC2Config+0xfc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <OC2Config+0x94>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a24      	ldr	r2, [pc, #144]	; (80048a4 <OC2Config+0x100>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00f      	beq.n	8004838 <OC2Config+0x94>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a23      	ldr	r2, [pc, #140]	; (80048a8 <OC2Config+0x104>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00b      	beq.n	8004838 <OC2Config+0x94>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a22      	ldr	r2, [pc, #136]	; (80048ac <OC2Config+0x108>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <OC2Config+0x94>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a21      	ldr	r2, [pc, #132]	; (80048b0 <OC2Config+0x10c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <OC2Config+0x94>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a20      	ldr	r2, [pc, #128]	; (80048b4 <OC2Config+0x110>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d11f      	bne.n	8004878 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	019b      	lsls	r3, r3, #6
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	019b      	lsls	r3, r3, #6
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff fdc6 	bl	800441c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	40013400 	.word	0x40013400
 80048a8:	40014000 	.word	0x40014000
 80048ac:	40014400 	.word	0x40014400
 80048b0:	40014800 	.word	0x40014800
 80048b4:	40015000 	.word	0x40015000

080048b8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0303 	bic.w	r3, r3, #3
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a25      	ldr	r2, [pc, #148]	; (80049b4 <OC3Config+0xfc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d013      	beq.n	800494a <OC3Config+0x92>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a24      	ldr	r2, [pc, #144]	; (80049b8 <OC3Config+0x100>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00f      	beq.n	800494a <OC3Config+0x92>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a23      	ldr	r2, [pc, #140]	; (80049bc <OC3Config+0x104>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00b      	beq.n	800494a <OC3Config+0x92>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a22      	ldr	r2, [pc, #136]	; (80049c0 <OC3Config+0x108>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d007      	beq.n	800494a <OC3Config+0x92>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a21      	ldr	r2, [pc, #132]	; (80049c4 <OC3Config+0x10c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <OC3Config+0x92>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a20      	ldr	r2, [pc, #128]	; (80049c8 <OC3Config+0x110>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d11f      	bne.n	800498a <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	029b      	lsls	r3, r3, #10
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	029b      	lsls	r3, r3, #10
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	015b      	lsls	r3, r3, #5
 8004986:	4313      	orrs	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff fd4b 	bl	8004438 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40013400 	.word	0x40013400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40015000 	.word	0x40015000

080049cc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	0212      	lsls	r2, r2, #8
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	031b      	lsls	r3, r3, #12
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	031b      	lsls	r3, r3, #12
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <OC4Config+0xcc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d013      	beq.n	8004a60 <OC4Config+0x94>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <OC4Config+0xd0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00f      	beq.n	8004a60 <OC4Config+0x94>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <OC4Config+0xd4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00b      	beq.n	8004a60 <OC4Config+0x94>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a16      	ldr	r2, [pc, #88]	; (8004aa4 <OC4Config+0xd8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d007      	beq.n	8004a60 <OC4Config+0x94>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <OC4Config+0xdc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <OC4Config+0x94>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a14      	ldr	r2, [pc, #80]	; (8004aac <OC4Config+0xe0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d107      	bne.n	8004a70 <OC4Config+0xa4>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	019b      	lsls	r3, r3, #6
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fce6 	bl	8004454 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40013400 	.word	0x40013400
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40014400 	.word	0x40014400
 8004aa8:	40014800 	.word	0x40014800
 8004aac:	40015000 	.word	0x40015000

08004ab0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	041b      	lsls	r3, r3, #16
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	041b      	lsls	r3, r3, #16
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a19      	ldr	r2, [pc, #100]	; (8004b6c <OC5Config+0xbc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d013      	beq.n	8004b34 <OC5Config+0x84>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a18      	ldr	r2, [pc, #96]	; (8004b70 <OC5Config+0xc0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00f      	beq.n	8004b34 <OC5Config+0x84>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a17      	ldr	r2, [pc, #92]	; (8004b74 <OC5Config+0xc4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00b      	beq.n	8004b34 <OC5Config+0x84>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <OC5Config+0xc8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d007      	beq.n	8004b34 <OC5Config+0x84>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a15      	ldr	r2, [pc, #84]	; (8004b7c <OC5Config+0xcc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <OC5Config+0x84>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a14      	ldr	r2, [pc, #80]	; (8004b80 <OC5Config+0xd0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d109      	bne.n	8004b48 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff fc8b 	bl	8004470 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40013400 	.word	0x40013400
 8004b74:	40014000 	.word	0x40014000
 8004b78:	40014400 	.word	0x40014400
 8004b7c:	40014800 	.word	0x40014800
 8004b80:	40015000 	.word	0x40015000

08004b84 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	0212      	lsls	r2, r2, #8
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	051b      	lsls	r3, r3, #20
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	051b      	lsls	r3, r3, #20
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a18      	ldr	r2, [pc, #96]	; (8004c40 <OC6Config+0xbc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <OC6Config+0x86>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a17      	ldr	r2, [pc, #92]	; (8004c44 <OC6Config+0xc0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00f      	beq.n	8004c0a <OC6Config+0x86>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a16      	ldr	r2, [pc, #88]	; (8004c48 <OC6Config+0xc4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00b      	beq.n	8004c0a <OC6Config+0x86>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <OC6Config+0xc8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d007      	beq.n	8004c0a <OC6Config+0x86>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a14      	ldr	r2, [pc, #80]	; (8004c50 <OC6Config+0xcc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d003      	beq.n	8004c0a <OC6Config+0x86>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a13      	ldr	r2, [pc, #76]	; (8004c54 <OC6Config+0xd0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d109      	bne.n	8004c1e <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	029b      	lsls	r3, r3, #10
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff fc30 	bl	8004490 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40013400 	.word	0x40013400
 8004c48:	40014000 	.word	0x40014000
 8004c4c:	40014400 	.word	0x40014400
 8004c50:	40014800 	.word	0x40014800
 8004c54:	40015000 	.word	0x40015000

08004c58 <LL_USART_IsEnabled>:
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <LL_USART_IsEnabled+0x18>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <LL_USART_IsEnabled+0x1a>
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <LL_USART_SetStopBitsLength>:
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	605a      	str	r2, [r3, #4]
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <LL_USART_SetHWFlowCtrl>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_USART_SetBaudRate>:
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b087      	sub	sp, #28
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cde:	d11a      	bne.n	8004d16 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	005a      	lsls	r2, r3, #1
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	441a      	add	r2, r3
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	60da      	str	r2, [r3, #12]
}
 8004d14:	e00a      	b.n	8004d2c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	085a      	lsrs	r2, r3, #1
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	441a      	add	r2, r3
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	60da      	str	r2, [r3, #12]
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff ff84 	bl	8004c58 <LL_USART_IsEnabled>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d15c      	bne.n	8004e10 <LL_USART_Init+0xd8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b30      	ldr	r3, [pc, #192]	; (8004e1c <LL_USART_Init+0xe4>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	6851      	ldr	r1, [r2, #4]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	68d2      	ldr	r2, [r2, #12]
 8004d66:	4311      	orrs	r1, r2
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	6912      	ldr	r2, [r2, #16]
 8004d6c:	4311      	orrs	r1, r2
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	6992      	ldr	r2, [r2, #24]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff ff7c 	bl	8004c7e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff ff89 	bl	8004ca4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a22      	ldr	r2, [pc, #136]	; (8004e20 <LL_USART_Init+0xe8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d104      	bne.n	8004da4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	f7ff f928 	bl	8003ff0 <LL_RCC_GetUSARTClockFreq>
 8004da0:	60b8      	str	r0, [r7, #8]
 8004da2:	e024      	b.n	8004dee <LL_USART_Init+0xb6>
    }
    else if (USARTx == USART2)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <LL_USART_Init+0xec>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d104      	bne.n	8004db6 <LL_USART_Init+0x7e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004dac:	2010      	movs	r0, #16
 8004dae:	f7ff f91f 	bl	8003ff0 <LL_RCC_GetUSARTClockFreq>
 8004db2:	60b8      	str	r0, [r7, #8]
 8004db4:	e01b      	b.n	8004dee <LL_USART_Init+0xb6>
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
    else if (USARTx == USART3)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <LL_USART_Init+0xf0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d104      	bne.n	8004dc8 <LL_USART_Init+0x90>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8004dbe:	2012      	movs	r0, #18
 8004dc0:	f7ff f916 	bl	8003ff0 <LL_RCC_GetUSARTClockFreq>
 8004dc4:	60b8      	str	r0, [r7, #8]
 8004dc6:	e012      	b.n	8004dee <LL_USART_Init+0xb6>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <LL_USART_Init+0xf4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d105      	bne.n	8004ddc <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8004dd0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004dd4:	f7ff f9c4 	bl	8004160 <LL_RCC_GetUARTClockFreq>
 8004dd8:	60b8      	str	r0, [r7, #8]
 8004dda:	e008      	b.n	8004dee <LL_USART_Init+0xb6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a14      	ldr	r2, [pc, #80]	; (8004e30 <LL_USART_Init+0xf8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d104      	bne.n	8004dee <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8004de4:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8004de8:	f7ff f9ba 	bl	8004160 <LL_RCC_GetUARTClockFreq>
 8004dec:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00d      	beq.n	8004e10 <LL_USART_Init+0xd8>
        && (USART_InitStruct->BaudRate != 0U))
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d009      	beq.n	8004e10 <LL_USART_Init+0xd8>
    {
      status = SUCCESS;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	699a      	ldr	r2, [r3, #24]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff ff5d 	bl	8004cca <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	efff69f3 	.word	0xefff69f3
 8004e20:	40013800 	.word	0x40013800
 8004e24:	40004400 	.word	0x40004400
 8004e28:	40004800 	.word	0x40004800
 8004e2c:	40004c00 	.word	0x40004c00
 8004e30:	40005000 	.word	0x40005000

08004e34 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004e3c:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <LL_SetSystemCoreClock+0x1c>)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6013      	str	r3, [r2, #0]
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000000 	.word	0x20000000

08004e54 <iwdg_feed>:

#ifndef INC_PERIPH_H_
#define INC_PERIPH_H_

static inline void iwdg_feed()
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
    PS_IWDG_RST;
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <iwdg_feed+0x18>)
 8004e5a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004e5e:	601a      	str	r2, [r3, #0]
};
 8004e60:	bf00      	nop
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40003000 	.word	0x40003000

08004e70 <app_main>:

volatile uint8_t init_done = 0;   // system initialized


void app_main(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af04      	add	r7, sp, #16
  __ASM volatile ("cpsid i" : : : "memory");
 8004e76:	b672      	cpsid	i
    __disable_irq();

    sem1_comm = xSemaphoreCreateBinaryStatic(&buff_sem1_comm);
 8004e78:	2303      	movs	r3, #3
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	4b44      	ldr	r3, [pc, #272]	; (8004f90 <app_main+0x120>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2100      	movs	r1, #0
 8004e82:	2001      	movs	r0, #1
 8004e84:	f00a ffea 	bl	800fe5c <xQueueGenericCreateStatic>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b42      	ldr	r3, [pc, #264]	; (8004f94 <app_main+0x124>)
 8004e8c:	601a      	str	r2, [r3, #0]
    sem2_trig = xSemaphoreCreateBinaryStatic(&buff_sem2_trig);
 8004e8e:	2303      	movs	r3, #3
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	4b41      	ldr	r3, [pc, #260]	; (8004f98 <app_main+0x128>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	2100      	movs	r1, #0
 8004e98:	2001      	movs	r0, #1
 8004e9a:	f00a ffdf 	bl	800fe5c <xQueueGenericCreateStatic>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	4b3e      	ldr	r3, [pc, #248]	; (8004f9c <app_main+0x12c>)
 8004ea2:	601a      	str	r2, [r3, #0]
    mtx1 = xSemaphoreCreateMutexStatic(&buff_mtx1);
 8004ea4:	493e      	ldr	r1, [pc, #248]	; (8004fa0 <app_main+0x130>)
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	f00b f87f 	bl	800ffaa <xQueueCreateMutexStatic>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b3d      	ldr	r3, [pc, #244]	; (8004fa4 <app_main+0x134>)
 8004eb0:	601a      	str	r2, [r3, #0]

    ASSERT(sem1_comm != NULL);
 8004eb2:	4b38      	ldr	r3, [pc, #224]	; (8004f94 <app_main+0x124>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d103      	bne.n	8004ec2 <app_main+0x52>
 8004eba:	213b      	movs	r1, #59	; 0x3b
 8004ebc:	483a      	ldr	r0, [pc, #232]	; (8004fa8 <app_main+0x138>)
 8004ebe:	f006 fc03 	bl	800b6c8 <assert2>
    ASSERT(sem2_trig != NULL);
 8004ec2:	4b36      	ldr	r3, [pc, #216]	; (8004f9c <app_main+0x12c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <app_main+0x62>
 8004eca:	213c      	movs	r1, #60	; 0x3c
 8004ecc:	4836      	ldr	r0, [pc, #216]	; (8004fa8 <app_main+0x138>)
 8004ece:	f006 fbfb 	bl	800b6c8 <assert2>
    ASSERT(mtx1 != NULL);
 8004ed2:	4b34      	ldr	r3, [pc, #208]	; (8004fa4 <app_main+0x134>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <app_main+0x72>
 8004eda:	213d      	movs	r1, #61	; 0x3d
 8004edc:	4832      	ldr	r0, [pc, #200]	; (8004fa8 <app_main+0x138>)
 8004ede:	f006 fbf3 	bl	800b6c8 <assert2>

    ASSERT(xTaskCreateStatic(t1_wd, "T1", PS_STACK_T1, NULL, PS_PRI_T1, stack_t1, &buff_t1) != NULL);
 8004ee2:	4b32      	ldr	r3, [pc, #200]	; (8004fac <app_main+0x13c>)
 8004ee4:	9302      	str	r3, [sp, #8]
 8004ee6:	4b32      	ldr	r3, [pc, #200]	; (8004fb0 <app_main+0x140>)
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	2303      	movs	r3, #3
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	2240      	movs	r2, #64	; 0x40
 8004ef2:	4930      	ldr	r1, [pc, #192]	; (8004fb4 <app_main+0x144>)
 8004ef4:	4830      	ldr	r0, [pc, #192]	; (8004fb8 <app_main+0x148>)
 8004ef6:	f00b fc08 	bl	801070a <xTaskCreateStatic>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <app_main+0x98>
 8004f00:	213f      	movs	r1, #63	; 0x3f
 8004f02:	4829      	ldr	r0, [pc, #164]	; (8004fa8 <app_main+0x138>)
 8004f04:	f006 fbe0 	bl	800b6c8 <assert2>
    ASSERT(xTaskCreateStatic(t2_trig_check, "T2", PS_STACK_T2, NULL, PS_PRI_T2, stack_t2, &buff_t2) != NULL);
 8004f08:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <app_main+0x14c>)
 8004f0a:	9302      	str	r3, [sp, #8]
 8004f0c:	4b2c      	ldr	r3, [pc, #176]	; (8004fc0 <app_main+0x150>)
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	2301      	movs	r3, #1
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	2300      	movs	r3, #0
 8004f16:	2240      	movs	r2, #64	; 0x40
 8004f18:	492a      	ldr	r1, [pc, #168]	; (8004fc4 <app_main+0x154>)
 8004f1a:	482b      	ldr	r0, [pc, #172]	; (8004fc8 <app_main+0x158>)
 8004f1c:	f00b fbf5 	bl	801070a <xTaskCreateStatic>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d103      	bne.n	8004f2e <app_main+0xbe>
 8004f26:	2140      	movs	r1, #64	; 0x40
 8004f28:	481f      	ldr	r0, [pc, #124]	; (8004fa8 <app_main+0x138>)
 8004f2a:	f006 fbcd 	bl	800b6c8 <assert2>
    ASSERT(xTaskCreateStatic(t3_trig_post_count, "T3", PS_STACK_T3, NULL, PS_PRI_T3, stack_t3, &buff_t3) != NULL);
 8004f2e:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <app_main+0x15c>)
 8004f30:	9302      	str	r3, [sp, #8]
 8004f32:	4b27      	ldr	r3, [pc, #156]	; (8004fd0 <app_main+0x160>)
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	2304      	movs	r3, #4
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2240      	movs	r2, #64	; 0x40
 8004f3e:	4925      	ldr	r1, [pc, #148]	; (8004fd4 <app_main+0x164>)
 8004f40:	4825      	ldr	r0, [pc, #148]	; (8004fd8 <app_main+0x168>)
 8004f42:	f00b fbe2 	bl	801070a <xTaskCreateStatic>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d103      	bne.n	8004f54 <app_main+0xe4>
 8004f4c:	2141      	movs	r1, #65	; 0x41
 8004f4e:	4816      	ldr	r0, [pc, #88]	; (8004fa8 <app_main+0x138>)
 8004f50:	f006 fbba 	bl	800b6c8 <assert2>
    ASSERT(xTaskCreateStatic(t4_comm_and_init, "T4", PS_STACK_T4, NULL, PS_PRI_T4, stack_t4, &buff_t4) != NULL);
 8004f54:	4b21      	ldr	r3, [pc, #132]	; (8004fdc <app_main+0x16c>)
 8004f56:	9302      	str	r3, [sp, #8]
 8004f58:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <app_main+0x170>)
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	2300      	movs	r3, #0
 8004f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f66:	491f      	ldr	r1, [pc, #124]	; (8004fe4 <app_main+0x174>)
 8004f68:	481f      	ldr	r0, [pc, #124]	; (8004fe8 <app_main+0x178>)
 8004f6a:	f00b fbce 	bl	801070a <xTaskCreateStatic>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <app_main+0x10c>
 8004f74:	2142      	movs	r1, #66	; 0x42
 8004f76:	480c      	ldr	r0, [pc, #48]	; (8004fa8 <app_main+0x138>)
 8004f78:	f006 fba6 	bl	800b6c8 <assert2>
  __ASM volatile ("cpsie i" : : : "memory");
 8004f7c:	b662      	cpsie	i

    __enable_irq();

    vTaskStartScheduler();
 8004f7e:	f00b fd57 	bl	8010a30 <vTaskStartScheduler>

    ASSERT(0);
 8004f82:	2148      	movs	r1, #72	; 0x48
 8004f84:	4808      	ldr	r0, [pc, #32]	; (8004fa8 <app_main+0x138>)
 8004f86:	f006 fb9f 	bl	800b6c8 <assert2>
}
 8004f8a:	bf00      	nop
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	200004bc 	.word	0x200004bc
 8004f94:	2000c2b4 	.word	0x2000c2b4
 8004f98:	2000c2b8 	.word	0x2000c2b8
 8004f9c:	2000c300 	.word	0x2000c300
 8004fa0:	2000cd4c 	.word	0x2000cd4c
 8004fa4:	2000b948 	.word	0x2000b948
 8004fa8:	08013590 	.word	0x08013590
 8004fac:	200007a4 	.word	0x200007a4
 8004fb0:	2000cc4c 	.word	0x2000cc4c
 8004fb4:	080135bc 	.word	0x080135bc
 8004fb8:	08004fed 	.word	0x08004fed
 8004fbc:	2000cc04 	.word	0x2000cc04
 8004fc0:	20000504 	.word	0x20000504
 8004fc4:	080135c0 	.word	0x080135c0
 8004fc8:	08005031 	.word	0x08005031
 8004fcc:	2000c220 	.word	0x2000c220
 8004fd0:	2000b94c 	.word	0x2000b94c
 8004fd4:	080135c4 	.word	0x080135c4
 8004fd8:	080050a1 	.word	0x080050a1
 8004fdc:	2000c26c 	.word	0x2000c26c
 8004fe0:	2000c404 	.word	0x2000c404
 8004fe4:	080135c8 	.word	0x080135c8
 8004fe8:	0800512d 	.word	0x0800512d

08004fec <t1_wd>:

void t1_wd(void* p)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
    while (!init_done)
 8004ff4:	e002      	b.n	8004ffc <t1_wd+0x10>
        vTaskDelay(2);
 8004ff6:	2002      	movs	r0, #2
 8004ff8:	f00b fccc 	bl	8010994 <vTaskDelay>
    while (!init_done)
 8004ffc:	4b09      	ldr	r3, [pc, #36]	; (8005024 <t1_wd+0x38>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f7      	beq.n	8004ff6 <t1_wd+0xa>

    while(1)
    {
        iwdg_feed();
 8005006:	f7ff ff25 	bl	8004e54 <iwdg_feed>
        led_blink_do(&led, daq.uwTick);
 800500a:	4b07      	ldr	r3, [pc, #28]	; (8005028 <t1_wd+0x3c>)
 800500c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8005010:	33a8      	adds	r3, #168	; 0xa8
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4619      	mov	r1, r3
 8005016:	4805      	ldr	r0, [pc, #20]	; (800502c <t1_wd+0x40>)
 8005018:	f004 f90a 	bl	8009230 <led_blink_do>

        vTaskDelay(10);
 800501c:	200a      	movs	r0, #10
 800501e:	f00b fcb9 	bl	8010994 <vTaskDelay>
        iwdg_feed();
 8005022:	e7f0      	b.n	8005006 <t1_wd+0x1a>
 8005024:	20000218 	.word	0x20000218
 8005028:	200007ec 	.word	0x200007ec
 800502c:	2000b938 	.word	0x2000b938

08005030 <t2_trig_check>:
    }
}

void t2_trig_check(void* p)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
    while (!init_done)
 8005038:	e002      	b.n	8005040 <t2_trig_check+0x10>
        vTaskDelay(2);
 800503a:	2002      	movs	r0, #2
 800503c:	f00b fcaa 	bl	8010994 <vTaskDelay>
    while (!init_done)
 8005040:	4b13      	ldr	r3, [pc, #76]	; (8005090 <t2_trig_check+0x60>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f7      	beq.n	800503a <t2_trig_check+0xa>

    while(1)
    {
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <t2_trig_check+0x64>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f04f 31ff 	mov.w	r1, #4294967295
 8005052:	4618      	mov	r0, r3
 8005054:	f00b f948 	bl	80102e8 <xQueueSemaphoreTake>
 8005058:	4603      	mov	r3, r0
 800505a:	2b01      	cmp	r3, #1
 800505c:	d003      	beq.n	8005066 <t2_trig_check+0x36>
 800505e:	2160      	movs	r1, #96	; 0x60
 8005060:	480d      	ldr	r0, [pc, #52]	; (8005098 <t2_trig_check+0x68>)
 8005062:	f006 fb31 	bl	800b6c8 <assert2>

        daq_trig_check(&daq);
 8005066:	480d      	ldr	r0, [pc, #52]	; (800509c <t2_trig_check+0x6c>)
 8005068:	f002 fc02 	bl	8007870 <daq_trig_check>

        ASSERT(xSemaphoreGive(mtx1) == pdPASS);
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <t2_trig_check+0x64>)
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	2300      	movs	r3, #0
 8005072:	2200      	movs	r2, #0
 8005074:	2100      	movs	r1, #0
 8005076:	f00a ffb3 	bl	800ffe0 <xQueueGenericSend>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d003      	beq.n	8005088 <t2_trig_check+0x58>
 8005080:	2164      	movs	r1, #100	; 0x64
 8005082:	4805      	ldr	r0, [pc, #20]	; (8005098 <t2_trig_check+0x68>)
 8005084:	f006 fb20 	bl	800b6c8 <assert2>

        vTaskDelay(5);
 8005088:	2005      	movs	r0, #5
 800508a:	f00b fc83 	bl	8010994 <vTaskDelay>
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 800508e:	e7dc      	b.n	800504a <t2_trig_check+0x1a>
 8005090:	20000218 	.word	0x20000218
 8005094:	2000b948 	.word	0x2000b948
 8005098:	08013590 	.word	0x08013590
 800509c:	200007ec 	.word	0x200007ec

080050a0 <t3_trig_post_count>:
    }
}

void t3_trig_post_count(void* p)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
    while (!init_done)
 80050a8:	e002      	b.n	80050b0 <t3_trig_post_count+0x10>
        vTaskDelay(2);
 80050aa:	2002      	movs	r0, #2
 80050ac:	f00b fc72 	bl	8010994 <vTaskDelay>
    while (!init_done)
 80050b0:	4b19      	ldr	r3, [pc, #100]	; (8005118 <t3_trig_post_count+0x78>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f7      	beq.n	80050aa <t3_trig_post_count+0xa>

    while(1)
    {
        ASSERT(xSemaphoreTake(sem2_trig, portMAX_DELAY) == pdPASS);
 80050ba:	4b18      	ldr	r3, [pc, #96]	; (800511c <t3_trig_post_count+0x7c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f04f 31ff 	mov.w	r1, #4294967295
 80050c2:	4618      	mov	r0, r3
 80050c4:	f00b f910 	bl	80102e8 <xQueueSemaphoreTake>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d003      	beq.n	80050d6 <t3_trig_post_count+0x36>
 80050ce:	2171      	movs	r1, #113	; 0x71
 80050d0:	4813      	ldr	r0, [pc, #76]	; (8005120 <t3_trig_post_count+0x80>)
 80050d2:	f006 faf9 	bl	800b6c8 <assert2>
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 80050d6:	4b13      	ldr	r3, [pc, #76]	; (8005124 <t3_trig_post_count+0x84>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f04f 31ff 	mov.w	r1, #4294967295
 80050de:	4618      	mov	r0, r3
 80050e0:	f00b f902 	bl	80102e8 <xQueueSemaphoreTake>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d003      	beq.n	80050f2 <t3_trig_post_count+0x52>
 80050ea:	2172      	movs	r1, #114	; 0x72
 80050ec:	480c      	ldr	r0, [pc, #48]	; (8005120 <t3_trig_post_count+0x80>)
 80050ee:	f006 faeb 	bl	800b6c8 <assert2>

        daq_trig_postcount(&daq);
 80050f2:	480d      	ldr	r0, [pc, #52]	; (8005128 <t3_trig_post_count+0x88>)
 80050f4:	f002 ff36 	bl	8007f64 <daq_trig_postcount>

        ASSERT(xSemaphoreGive(mtx1) == pdPASS);
 80050f8:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <t3_trig_post_count+0x84>)
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	2300      	movs	r3, #0
 80050fe:	2200      	movs	r2, #0
 8005100:	2100      	movs	r1, #0
 8005102:	f00a ff6d 	bl	800ffe0 <xQueueGenericSend>
 8005106:	4603      	mov	r3, r0
 8005108:	2b01      	cmp	r3, #1
 800510a:	d0d6      	beq.n	80050ba <t3_trig_post_count+0x1a>
 800510c:	2176      	movs	r1, #118	; 0x76
 800510e:	4804      	ldr	r0, [pc, #16]	; (8005120 <t3_trig_post_count+0x80>)
 8005110:	f006 fada 	bl	800b6c8 <assert2>
        ASSERT(xSemaphoreTake(sem2_trig, portMAX_DELAY) == pdPASS);
 8005114:	e7d1      	b.n	80050ba <t3_trig_post_count+0x1a>
 8005116:	bf00      	nop
 8005118:	20000218 	.word	0x20000218
 800511c:	2000c300 	.word	0x2000c300
 8005120:	08013590 	.word	0x08013590
 8005124:	2000b948 	.word	0x2000b948
 8005128:	200007ec 	.word	0x200007ec

0800512c <t4_comm_and_init>:
    }
}

void t4_comm_and_init(void* p)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af04      	add	r7, sp, #16
 8005132:	6078      	str	r0, [r7, #4]
    pwm_init(&pwm);
 8005134:	4839      	ldr	r0, [pc, #228]	; (800521c <t4_comm_and_init+0xf0>)
 8005136:	f006 f879 	bl	800b22c <pwm_init>
    led_init(&led);
 800513a:	4839      	ldr	r0, [pc, #228]	; (8005220 <t4_comm_and_init+0xf4>)
 800513c:	f003 fffb 	bl	8009136 <led_init>
    cntr_init(&cntr);
 8005140:	4838      	ldr	r0, [pc, #224]	; (8005224 <t4_comm_and_init+0xf8>)
 8005142:	f000 f9c5 	bl	80054d0 <cntr_init>
    sgen_init(&sgen);
 8005146:	4838      	ldr	r0, [pc, #224]	; (8005228 <t4_comm_and_init+0xfc>)
 8005148:	f006 fa5a 	bl	800b600 <sgen_init>
    comm_init(&comm);
 800514c:	4837      	ldr	r0, [pc, #220]	; (800522c <t4_comm_and_init+0x100>)
 800514e:	f000 fcd9 	bl	8005b04 <comm_init>
    daq_init(&daq);
 8005152:	4837      	ldr	r0, [pc, #220]	; (8005230 <t4_comm_and_init+0x104>)
 8005154:	f000 ff34 	bl	8005fc0 <daq_init>
    daq_mode_set(&daq, VM);
 8005158:	2101      	movs	r1, #1
 800515a:	4835      	ldr	r0, [pc, #212]	; (8005230 <t4_comm_and_init+0x104>)
 800515c:	f001 ff6c 	bl	8007038 <daq_mode_set>
    led_blink_set(&led, 3, PS_BLINK_LONG_MS, daq.uwTick);
 8005160:	4b33      	ldr	r3, [pc, #204]	; (8005230 <t4_comm_and_init+0x104>)
 8005162:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8005166:	33a8      	adds	r3, #168	; 0xa8
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800516e:	2103      	movs	r1, #3
 8005170:	482b      	ldr	r0, [pc, #172]	; (8005220 <t4_comm_and_init+0xf4>)
 8005172:	f004 f843 	bl	80091fc <led_blink_set>

#ifdef PS_DEBUG
    pwm_set(&pwm, 1000, 25, 25, 50, 1, 1);
 8005176:	2301      	movs	r3, #1
 8005178:	9302      	str	r3, [sp, #8]
 800517a:	2301      	movs	r3, #1
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	2332      	movs	r3, #50	; 0x32
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	2319      	movs	r3, #25
 8005184:	2219      	movs	r2, #25
 8005186:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800518a:	4824      	ldr	r0, [pc, #144]	; (800521c <t4_comm_and_init+0xf0>)
 800518c:	f006 f86e 	bl	800b26c <pwm_set>
    //LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_256);
    //LL_IWDG_SetReloadCounter(IWDG, 0x0FFF);
#endif

    while (PS_VM_ReadQ(NULL) == SCPI_RES_ERR); // read vcc
 8005190:	bf00      	nop
 8005192:	2000      	movs	r0, #0
 8005194:	f004 fd28 	bl	8009be8 <PS_VM_ReadQ>
 8005198:	4603      	mov	r3, r0
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d0f8      	beq.n	8005192 <t4_comm_and_init+0x66>
    init_done = 1;
 80051a0:	4b24      	ldr	r3, [pc, #144]	; (8005234 <t4_comm_and_init+0x108>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	701a      	strb	r2, [r3, #0]

    while(1)
    {
        ASSERT(xSemaphoreTake(sem1_comm, portMAX_DELAY) == pdPASS);
 80051a6:	4b24      	ldr	r3, [pc, #144]	; (8005238 <t4_comm_and_init+0x10c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f04f 31ff 	mov.w	r1, #4294967295
 80051ae:	4618      	mov	r0, r3
 80051b0:	f00b f89a 	bl	80102e8 <xQueueSemaphoreTake>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d003      	beq.n	80051c2 <t4_comm_and_init+0x96>
 80051ba:	2190      	movs	r1, #144	; 0x90
 80051bc:	481f      	ldr	r0, [pc, #124]	; (800523c <t4_comm_and_init+0x110>)
 80051be:	f006 fa83 	bl	800b6c8 <assert2>
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 80051c2:	4b1f      	ldr	r3, [pc, #124]	; (8005240 <t4_comm_and_init+0x114>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f04f 31ff 	mov.w	r1, #4294967295
 80051ca:	4618      	mov	r0, r3
 80051cc:	f00b f88c 	bl	80102e8 <xQueueSemaphoreTake>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d003      	beq.n	80051de <t4_comm_and_init+0xb2>
 80051d6:	2191      	movs	r1, #145	; 0x91
 80051d8:	4818      	ldr	r0, [pc, #96]	; (800523c <t4_comm_and_init+0x110>)
 80051da:	f006 fa75 	bl	800b6c8 <assert2>

        //iwdg_feed();
        if (comm_main(&comm))
 80051de:	4813      	ldr	r0, [pc, #76]	; (800522c <t4_comm_and_init+0x100>)
 80051e0:	f000 fcfc 	bl	8005bdc <comm_main>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <t4_comm_and_init+0xd2>
            led_blink_set(&led, 1, PS_BLINK_SHORT_MS, daq.uwTick);
 80051ea:	4b11      	ldr	r3, [pc, #68]	; (8005230 <t4_comm_and_init+0x104>)
 80051ec:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80051f0:	33a8      	adds	r3, #168	; 0xa8
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2232      	movs	r2, #50	; 0x32
 80051f6:	2101      	movs	r1, #1
 80051f8:	4809      	ldr	r0, [pc, #36]	; (8005220 <t4_comm_and_init+0xf4>)
 80051fa:	f003 ffff 	bl	80091fc <led_blink_set>

        ASSERT(xSemaphoreGive(mtx1) == pdPASS);
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <t4_comm_and_init+0x114>)
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	2300      	movs	r3, #0
 8005204:	2200      	movs	r2, #0
 8005206:	2100      	movs	r1, #0
 8005208:	f00a feea 	bl	800ffe0 <xQueueGenericSend>
 800520c:	4603      	mov	r3, r0
 800520e:	2b01      	cmp	r3, #1
 8005210:	d0c9      	beq.n	80051a6 <t4_comm_and_init+0x7a>
 8005212:	2197      	movs	r1, #151	; 0x97
 8005214:	4809      	ldr	r0, [pc, #36]	; (800523c <t4_comm_and_init+0x110>)
 8005216:	f006 fa57 	bl	800b6c8 <assert2>
        ASSERT(xSemaphoreTake(sem1_comm, portMAX_DELAY) == pdPASS);
 800521a:	e7c4      	b.n	80051a6 <t4_comm_and_init+0x7a>
 800521c:	2000c304 	.word	0x2000c304
 8005220:	2000b938 	.word	0x2000b938
 8005224:	20000604 	.word	0x20000604
 8005228:	2000ba4c 	.word	0x2000ba4c
 800522c:	2000c334 	.word	0x2000c334
 8005230:	200007ec 	.word	0x200007ec
 8005234:	20000218 	.word	0x20000218
 8005238:	2000c2b4 	.word	0x2000c2b4
 800523c:	08013590 	.word	0x08013590
 8005240:	2000b948 	.word	0x2000b948

08005244 <__NVIC_GetPriorityGrouping>:
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005248:	4b04      	ldr	r3, [pc, #16]	; (800525c <__NVIC_GetPriorityGrouping+0x18>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	0a1b      	lsrs	r3, r3, #8
 800524e:	f003 0307 	and.w	r3, r3, #7
}
 8005252:	4618      	mov	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	e000ed00 	.word	0xe000ed00

08005260 <__NVIC_EnableIRQ>:
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526e:	2b00      	cmp	r3, #0
 8005270:	db0b      	blt.n	800528a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	f003 021f 	and.w	r2, r3, #31
 8005278:	4907      	ldr	r1, [pc, #28]	; (8005298 <__NVIC_EnableIRQ+0x38>)
 800527a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	2001      	movs	r0, #1
 8005282:	fa00 f202 	lsl.w	r2, r0, r2
 8005286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	e000e100 	.word	0xe000e100

0800529c <__NVIC_DisableIRQ>:
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	db10      	blt.n	80052d0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	f003 021f 	and.w	r2, r3, #31
 80052b4:	4909      	ldr	r1, [pc, #36]	; (80052dc <__NVIC_DisableIRQ+0x40>)
 80052b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	2001      	movs	r0, #1
 80052be:	fa00 f202 	lsl.w	r2, r0, r2
 80052c2:	3320      	adds	r3, #32
 80052c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80052c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80052cc:	f3bf 8f6f 	isb	sy
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	e000e100 	.word	0xe000e100

080052e0 <__NVIC_SetPriority>:
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	6039      	str	r1, [r7, #0]
 80052ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	db0a      	blt.n	800530a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	490c      	ldr	r1, [pc, #48]	; (800532c <__NVIC_SetPriority+0x4c>)
 80052fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fe:	0112      	lsls	r2, r2, #4
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	440b      	add	r3, r1
 8005304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005308:	e00a      	b.n	8005320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	4908      	ldr	r1, [pc, #32]	; (8005330 <__NVIC_SetPriority+0x50>)
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	3b04      	subs	r3, #4
 8005318:	0112      	lsls	r2, r2, #4
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	440b      	add	r3, r1
 800531e:	761a      	strb	r2, [r3, #24]
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	e000e100 	.word	0xe000e100
 8005330:	e000ed00 	.word	0xe000ed00

08005334 <NVIC_EncodePriority>:
{
 8005334:	b480      	push	{r7}
 8005336:	b089      	sub	sp, #36	; 0x24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f1c3 0307 	rsb	r3, r3, #7
 800534e:	2b04      	cmp	r3, #4
 8005350:	bf28      	it	cs
 8005352:	2304      	movcs	r3, #4
 8005354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	3304      	adds	r3, #4
 800535a:	2b06      	cmp	r3, #6
 800535c:	d902      	bls.n	8005364 <NVIC_EncodePriority+0x30>
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	3b03      	subs	r3, #3
 8005362:	e000      	b.n	8005366 <NVIC_EncodePriority+0x32>
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005368:	f04f 32ff 	mov.w	r2, #4294967295
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	43da      	mvns	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	401a      	ands	r2, r3
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800537c:	f04f 31ff 	mov.w	r1, #4294967295
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	fa01 f303 	lsl.w	r3, r1, r3
 8005386:	43d9      	mvns	r1, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800538c:	4313      	orrs	r3, r2
}
 800538e:	4618      	mov	r0, r3
 8005390:	3724      	adds	r7, #36	; 0x24
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	4a06      	ldr	r2, [pc, #24]	; (80053c4 <LL_DMA_GetDataLength+0x28>)
 80053ac:	5cd3      	ldrb	r3, [r2, r3]
 80053ae:	461a      	mov	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4413      	add	r3, r2
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	08013d74 	.word	0x08013d74

080053c8 <LL_TIM_EnableCounter>:
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f043 0201 	orr.w	r2, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <LL_TIM_DisableCounter>:
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f023 0201 	bic.w	r2, r3, #1
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	601a      	str	r2, [r3, #0]
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <LL_TIM_CC_EnableChannel>:
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1a      	ldr	r2, [r3, #32]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <LL_TIM_CC_DisableChannel>:
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	43db      	mvns	r3, r3
 800543c:	401a      	ands	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	621a      	str	r2, [r3, #32]
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <LL_TIM_EnableIT_UPDATE>:
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f043 0201 	orr.w	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60da      	str	r2, [r3, #12]
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <LL_TIM_EnableIT_CC4>:
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC4IE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f043 0210 	orr.w	r2, r3, #16
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60da      	str	r2, [r3, #12]
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <LL_TIM_EnableDMAReq_CC4>:
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60da      	str	r2, [r3, #12]
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <LL_TIM_DisableDMAReq_CC4>:
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60da      	str	r2, [r3, #12]
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <cntr_init>:
#include "main.h"
#include "periph.h"


void cntr_init(cntr_data_t* self)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af04      	add	r7, sp, #16
 80054d6:	6078      	str	r0, [r7, #4]
    self->freq = 0;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    self->ovf = 0;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    self->enabled = 0;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    self->data_ovf_it = 0;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    memset(self->data_ccr, 0, PS_CNTR_BUFF_SZ * sizeof(uint16_t));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	22c8      	movs	r2, #200	; 0xc8
 80054fe:	2100      	movs	r1, #0
 8005500:	4618      	mov	r0, r3
 8005502:	f00c f8f3 	bl	80116ec <memset>
    memset(self->data_ovf, 0, PS_CNTR_BUFF_SZ * sizeof(uint16_t));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	33c8      	adds	r3, #200	; 0xc8
 800550a:	22c8      	movs	r2, #200	; 0xc8
 800550c:	2100      	movs	r1, #0
 800550e:	4618      	mov	r0, r3
 8005510:	f00c f8ec 	bl	80116ec <memset>
    dma_set((uint32_t)&PS_TIM_CNTR->PS_TIM_CNTR_CCR, PS_DMA_CNTR, PS_DMA_CH_CNTR, (uint32_t)&self->data_ccr, PS_CNTR_BUFF_SZ,
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	461a      	mov	r2, r3
 8005518:	2300      	movs	r3, #0
 800551a:	9303      	str	r3, [sp, #12]
 800551c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005520:	9302      	str	r3, [sp, #8]
 8005522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	2364      	movs	r3, #100	; 0x64
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	2202      	movs	r2, #2
 8005530:	4913      	ldr	r1, [pc, #76]	; (8005580 <cntr_init+0xb0>)
 8005532:	4814      	ldr	r0, [pc, #80]	; (8005584 <cntr_init+0xb4>)
 8005534:	f004 f8c6 	bl	80096c4 <dma_set>
            LL_DMA_PDATAALIGN_HALFWORD, LL_DMA_MDATAALIGN_HALFWORD, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

    NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8005538:	f7ff fe84 	bl	8005244 <__NVIC_GetPriorityGrouping>
 800553c:	4603      	mov	r3, r0
 800553e:	2200      	movs	r2, #0
 8005540:	2101      	movs	r1, #1
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff fef6 	bl	8005334 <NVIC_EncodePriority>
 8005548:	4603      	mov	r3, r0
 800554a:	4619      	mov	r1, r3
 800554c:	2019      	movs	r0, #25
 800554e:	f7ff fec7 	bl	80052e0 <__NVIC_SetPriority>
    NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8005552:	f7ff fe77 	bl	8005244 <__NVIC_GetPriorityGrouping>
 8005556:	4603      	mov	r3, r0
 8005558:	2200      	movs	r2, #0
 800555a:	2101      	movs	r1, #1
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff fee9 	bl	8005334 <NVIC_EncodePriority>
 8005562:	4603      	mov	r3, r0
 8005564:	4619      	mov	r1, r3
 8005566:	201b      	movs	r0, #27
 8005568:	f7ff feba 	bl	80052e0 <__NVIC_SetPriority>
    PS_TIM_CNTR_CC(LL_TIM_EnableIT_)(PS_TIM_CNTR);
 800556c:	4806      	ldr	r0, [pc, #24]	; (8005588 <cntr_init+0xb8>)
 800556e:	f7ff ff7e 	bl	800546e <LL_TIM_EnableIT_CC4>
    LL_TIM_EnableIT_UPDATE(PS_TIM_CNTR);
 8005572:	4805      	ldr	r0, [pc, #20]	; (8005588 <cntr_init+0xb8>)
 8005574:	f7ff ff6b 	bl	800544e <LL_TIM_EnableIT_UPDATE>
}
 8005578:	bf00      	nop
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40020400 	.word	0x40020400
 8005584:	40013440 	.word	0x40013440
 8005588:	40013400 	.word	0x40013400

0800558c <cntr_enable>:

void cntr_enable(cntr_data_t* self, uint8_t enable)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	70fb      	strb	r3, [r7, #3]
    if (enable)
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d014      	beq.n	80055c8 <cntr_enable+0x3c>
    {
        cntr_init(self);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ff96 	bl	80054d0 <cntr_init>

        PS_TIM_CNTR_CC(LL_TIM_EnableDMAReq_)(PS_TIM_CNTR);
 80055a4:	4815      	ldr	r0, [pc, #84]	; (80055fc <cntr_enable+0x70>)
 80055a6:	f7ff ff72 	bl	800548e <LL_TIM_EnableDMAReq_CC4>
        NVIC_EnableIRQ(TIM1_CC_IRQn);
 80055aa:	201b      	movs	r0, #27
 80055ac:	f7ff fe58 	bl	8005260 <__NVIC_EnableIRQ>
        NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80055b0:	2019      	movs	r0, #25
 80055b2:	f7ff fe55 	bl	8005260 <__NVIC_EnableIRQ>
        LL_TIM_EnableCounter(PS_TIM_CNTR);
 80055b6:	4811      	ldr	r0, [pc, #68]	; (80055fc <cntr_enable+0x70>)
 80055b8:	f7ff ff06 	bl	80053c8 <LL_TIM_EnableCounter>
        LL_TIM_CC_EnableChannel(PS_TIM_CNTR, PS_TIM_CNTR_CH);
 80055bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055c0:	480e      	ldr	r0, [pc, #56]	; (80055fc <cntr_enable+0x70>)
 80055c2:	f7ff ff21 	bl	8005408 <LL_TIM_CC_EnableChannel>
 80055c6:	e010      	b.n	80055ea <cntr_enable+0x5e>
    }
    else
    {
        LL_TIM_DisableCounter(PS_TIM_CNTR);
 80055c8:	480c      	ldr	r0, [pc, #48]	; (80055fc <cntr_enable+0x70>)
 80055ca:	f7ff ff0d 	bl	80053e8 <LL_TIM_DisableCounter>
        LL_TIM_CC_DisableChannel(PS_TIM_CNTR, PS_TIM_CNTR_CH);
 80055ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055d2:	480a      	ldr	r0, [pc, #40]	; (80055fc <cntr_enable+0x70>)
 80055d4:	f7ff ff29 	bl	800542a <LL_TIM_CC_DisableChannel>
        NVIC_DisableIRQ(TIM1_CC_IRQn);
 80055d8:	201b      	movs	r0, #27
 80055da:	f7ff fe5f 	bl	800529c <__NVIC_DisableIRQ>
        NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 80055de:	2019      	movs	r0, #25
 80055e0:	f7ff fe5c 	bl	800529c <__NVIC_DisableIRQ>
        PS_TIM_CNTR_CC(LL_TIM_DisableDMAReq_)(PS_TIM_CNTR);
 80055e4:	4805      	ldr	r0, [pc, #20]	; (80055fc <cntr_enable+0x70>)
 80055e6:	f7ff ff62 	bl	80054ae <LL_TIM_DisableDMAReq_CC4>
    }
    self->enabled = enable;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40013400 	.word	0x40013400

08005600 <cntr_read>:

float cntr_read(cntr_data_t* self, daq_data_t* daq)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08a      	sub	sp, #40	; 0x28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
    int uwTick_start = daq->uwTick;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8005610:	33a8      	adds	r3, #168	; 0xa8
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	61fb      	str	r3, [r7, #28]
    int sz = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	61bb      	str	r3, [r7, #24]

    cntr_enable(self, 1);
 800561a:	2101      	movs	r1, #1
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff ffb5 	bl	800558c <cntr_enable>

    while (1)
    {
        sz = LL_DMA_GetDataLength(PS_DMA_CNTR, PS_DMA_CH_CNTR);
 8005622:	2102      	movs	r1, #2
 8005624:	4843      	ldr	r0, [pc, #268]	; (8005734 <cntr_read+0x134>)
 8005626:	f7ff feb9 	bl	800539c <LL_DMA_GetDataLength>
 800562a:	4603      	mov	r3, r0
 800562c:	61bb      	str	r3, [r7, #24]

        uint32_t timeout = daq->uwTick - uwTick_start;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8005634:	33a8      	adds	r3, #168	; 0xa8
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	617b      	str	r3, [r7, #20]
        if (timeout < 0)
            timeout += PS_UWTICK_MAX;

        if (timeout > PS_CNTR_MEAS_MS || sz == 0)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005644:	d803      	bhi.n	800564e <cntr_read+0x4e>
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d000      	beq.n	800564e <cntr_read+0x4e>
    {
 800564c:	e7e9      	b.n	8005622 <cntr_read+0x22>
            break;
    }

    cntr_enable(self, 0);
 800564e:	2100      	movs	r1, #0
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff ff9b 	bl	800558c <cntr_enable>

    sz = PS_CNTR_BUFF_SZ - sz;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800565c:	61bb      	str	r3, [r7, #24]

    if (sz >= 2)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b01      	cmp	r3, #1
 8005662:	dd5f      	ble.n	8005724 <cntr_read+0x124>
    {
        uint32_t ovf = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t ccr_sum = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	623b      	str	r3, [r7, #32]

        if (self->data_ovf_it > 1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8005672:	2b01      	cmp	r3, #1
 8005674:	dd0e      	ble.n	8005694 <cntr_read+0x94>
            ovf = self->data_ovf[self->data_ovf_it - 1] - self->data_ovf[0] - 1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800567c:	1e5a      	subs	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3264      	adds	r2, #100	; 0x64
 8005682:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005686:	461a      	mov	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	627b      	str	r3, [r7, #36]	; 0x24

        if (self->data_ovf_it > 0)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800569a:	2b00      	cmp	r3, #0
 800569c:	dd0f      	ble.n	80056be <cntr_read+0xbe>
            ccr_sum += (PS_TIM_CNTR_MAX - self->data_ccr[0]) + self->data_ccr[sz - 1];
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80056a6:	33ff      	adds	r3, #255	; 0xff
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	1e51      	subs	r1, r2, #1
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80056b2:	4413      	add	r3, r2
 80056b4:	461a      	mov	r2, r3
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	4413      	add	r3, r2
 80056ba:	623b      	str	r3, [r7, #32]
 80056bc:	e00c      	b.n	80056d8 <cntr_read+0xd8>
        else
            ccr_sum += self->data_ccr[sz - 1] - self->data_ccr[0];
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	1e5a      	subs	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80056c8:	461a      	mov	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	4413      	add	r3, r2
 80056d6:	623b      	str	r3, [r7, #32]

        float total = (ovf * PS_TIM_CNTR_MAX) + ccr_sum;
 80056d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056da:	4613      	mov	r3, r2
 80056dc:	041b      	lsls	r3, r3, #16
 80056de:	1a9a      	subs	r2, r3, r2
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	4413      	add	r3, r2
 80056e4:	ee07 3a90 	vmov	s15, r3
 80056e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ec:	edc7 7a04 	vstr	s15, [r7, #16]
        total /= (float)(sz - 1);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	ee07 3a90 	vmov	s15, r3
 80056f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056fc:	edd7 6a04 	vldr	s13, [r7, #16]
 8005700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005704:	edc7 7a04 	vstr	s15, [r7, #16]
        float f = (float)PS_TIM_CNTR_FREQ / total;
 8005708:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005738 <cntr_read+0x138>
 800570c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005714:	edc7 7a03 	vstr	s15, [r7, #12]
        self->freq = f;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
        return f;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	e000      	b.n	8005726 <cntr_read+0x126>
    }
    else
    {
        return -1; // timeout
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <cntr_read+0x13c>)
 8005726:	ee07 3a90 	vmov	s15, r3
    }
}
 800572a:	eeb0 0a67 	vmov.f32	s0, s15
 800572e:	3728      	adds	r7, #40	; 0x28
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40020400 	.word	0x40020400
 8005738:	4c895440 	.word	0x4c895440
 800573c:	bf800000 	.word	0xbf800000

08005740 <__NVIC_GetPriorityGrouping>:
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <__NVIC_GetPriorityGrouping+0x18>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	0a1b      	lsrs	r3, r3, #8
 800574a:	f003 0307 	and.w	r3, r3, #7
}
 800574e:	4618      	mov	r0, r3
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	e000ed00 	.word	0xe000ed00

0800575c <__NVIC_EnableIRQ>:
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576a:	2b00      	cmp	r3, #0
 800576c:	db0b      	blt.n	8005786 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	f003 021f 	and.w	r2, r3, #31
 8005774:	4907      	ldr	r1, [pc, #28]	; (8005794 <__NVIC_EnableIRQ+0x38>)
 8005776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	2001      	movs	r0, #1
 800577e:	fa00 f202 	lsl.w	r2, r0, r2
 8005782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	e000e100 	.word	0xe000e100

08005798 <__NVIC_SetPriority>:
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	6039      	str	r1, [r7, #0]
 80057a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	db0a      	blt.n	80057c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	490c      	ldr	r1, [pc, #48]	; (80057e4 <__NVIC_SetPriority+0x4c>)
 80057b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b6:	0112      	lsls	r2, r2, #4
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	440b      	add	r3, r1
 80057bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80057c0:	e00a      	b.n	80057d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	4908      	ldr	r1, [pc, #32]	; (80057e8 <__NVIC_SetPriority+0x50>)
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	3b04      	subs	r3, #4
 80057d0:	0112      	lsls	r2, r2, #4
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	440b      	add	r3, r1
 80057d6:	761a      	strb	r2, [r3, #24]
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	e000e100 	.word	0xe000e100
 80057e8:	e000ed00 	.word	0xe000ed00

080057ec <NVIC_EncodePriority>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	b089      	sub	sp, #36	; 0x24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f1c3 0307 	rsb	r3, r3, #7
 8005806:	2b04      	cmp	r3, #4
 8005808:	bf28      	it	cs
 800580a:	2304      	movcs	r3, #4
 800580c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	3304      	adds	r3, #4
 8005812:	2b06      	cmp	r3, #6
 8005814:	d902      	bls.n	800581c <NVIC_EncodePriority+0x30>
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	3b03      	subs	r3, #3
 800581a:	e000      	b.n	800581e <NVIC_EncodePriority+0x32>
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005820:	f04f 32ff 	mov.w	r2, #4294967295
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43da      	mvns	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	401a      	ands	r2, r3
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005834:	f04f 31ff 	mov.w	r1, #4294967295
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	fa01 f303 	lsl.w	r3, r1, r3
 800583e:	43d9      	mvns	r1, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005844:	4313      	orrs	r3, r2
}
 8005846:	4618      	mov	r0, r3
 8005848:	3724      	adds	r7, #36	; 0x24
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <LL_USART_IsActiveFlag_TXE>:
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d101      	bne.n	800586a <LL_USART_IsActiveFlag_TXE+0x18>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <LL_USART_IsActiveFlag_TXE+0x1a>
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <LL_USART_EnableIT_RXNE>:
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f043 0220 	orr.w	r2, r3, #32
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	601a      	str	r2, [r3, #0]
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <SCPI_Write>:


/************************* SCPI Core *************************/

size_t SCPI_Write(scpi_t * context, const char * data, size_t len)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
    (void) context;

    return comm_respond((comm_data_t*)context->comm, data, len);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f9b0 	bl	8005c34 <comm_respond>
 80058d4:	4603      	mov	r3, r0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
    (void) context;

    return SCPI_RES_OK;
 80058e6:	2301      	movs	r3, #1
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err)
{
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b09d      	sub	sp, #116	; 0x74
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
    (void) context;

    char buff[100];
    int len = sprintf(buff, "**ERROR: %d, \"%s\"\r\n", (int16_t) err, SCPI_ErrorTranslate(err));
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	b21b      	sxth	r3, r3
 8005902:	461c      	mov	r4, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	b21b      	sxth	r3, r3
 8005908:	4618      	mov	r0, r3
 800590a:	f006 fb9d 	bl	800c048 <SCPI_ErrorTranslate>
 800590e:	4603      	mov	r3, r0
 8005910:	f107 0008 	add.w	r0, r7, #8
 8005914:	4622      	mov	r2, r4
 8005916:	4909      	ldr	r1, [pc, #36]	; (800593c <SCPI_Error+0x48>)
 8005918:	f00b fef0 	bl	80116fc <siprintf>
 800591c:	66f8      	str	r0, [r7, #108]	; 0x6c
    comm_respond((comm_data_t*)context->comm, buff, len);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005924:	f107 0108 	add.w	r1, r7, #8
 8005928:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f982 	bl	8005c34 <comm_respond>
    return 0;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3774      	adds	r7, #116	; 0x74
 8005936:	46bd      	mov	sp, r7
 8005938:	bd90      	pop	{r4, r7, pc}
 800593a:	bf00      	nop
 800593c:	0801370c 	.word	0x0801370c

08005940 <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b09e      	sub	sp, #120	; 0x78
 8005944:	af02      	add	r7, sp, #8
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
 800594c:	4613      	mov	r3, r2
 800594e:	803b      	strh	r3, [r7, #0]
    (void) context;

    char buff[100];
    int len = 0;
 8005950:	2300      	movs	r3, #0
 8005952:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (SCPI_CTRL_SRQ == ctrl)
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d108      	bne.n	800596c <SCPI_Control+0x2c>
        len = sprintf(buff, "**SRQ: 0x%X (%d)\r\n", val, val);
 800595a:	883a      	ldrh	r2, [r7, #0]
 800595c:	883b      	ldrh	r3, [r7, #0]
 800595e:	f107 0008 	add.w	r0, r7, #8
 8005962:	490f      	ldr	r1, [pc, #60]	; (80059a0 <SCPI_Control+0x60>)
 8005964:	f00b feca 	bl	80116fc <siprintf>
 8005968:	66f8      	str	r0, [r7, #108]	; 0x6c
 800596a:	e00a      	b.n	8005982 <SCPI_Control+0x42>
    else
        len = sprintf(buff, "**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
 800596c:	78fa      	ldrb	r2, [r7, #3]
 800596e:	8839      	ldrh	r1, [r7, #0]
 8005970:	883b      	ldrh	r3, [r7, #0]
 8005972:	f107 0008 	add.w	r0, r7, #8
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	460b      	mov	r3, r1
 800597a:	490a      	ldr	r1, [pc, #40]	; (80059a4 <SCPI_Control+0x64>)
 800597c:	f00b febe 	bl	80116fc <siprintf>
 8005980:	66f8      	str	r0, [r7, #108]	; 0x6c

    comm_respond((comm_data_t*)context->comm, buff, len);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005988:	f107 0108 	add.w	r1, r7, #8
 800598c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f950 	bl	8005c34 <comm_respond>
    return SCPI_RES_OK;
 8005994:	2301      	movs	r3, #1
}
 8005996:	4618      	mov	r0, r3
 8005998:	3770      	adds	r7, #112	; 0x70
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	08013720 	.word	0x08013720
 80059a4:	08013734 	.word	0x08013734

080059a8 <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
    (void) context;

    comm_respond((comm_data_t*)context->comm, "**Reset\r\n", 9);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80059b6:	2209      	movs	r2, #9
 80059b8:	4904      	ldr	r1, [pc, #16]	; (80059cc <SCPI_Reset+0x24>)
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f93a 	bl	8005c34 <comm_respond>
    return SCPI_RES_OK;
 80059c0:	2301      	movs	r3, #1
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	08013750 	.word	0x08013750

080059d0 <SCPI_CoreIdnQ>:

scpi_result_t SCPI_CoreIdnQ(scpi_t * context)
{
 80059d0:	b590      	push	{r4, r7, lr}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < 4; i++) {
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	e039      	b.n	8005a52 <SCPI_CoreIdnQ+0x82>
        if (context->idn[i])
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3320      	adds	r3, #32
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d029      	beq.n	8005a42 <SCPI_CoreIdnQ+0x72>
        {
            int j = i;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	60bb      	str	r3, [r7, #8]
            if (i == 1 && ((comm_data_t*)(context->comm))->uart.available)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d109      	bne.n	8005a0c <SCPI_CoreIdnQ+0x3c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80059fe:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <SCPI_CoreIdnQ+0x3c>
                j = 4;
 8005a06:	2304      	movs	r3, #4
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	e004      	b.n	8005a16 <SCPI_CoreIdnQ+0x46>
            else if (i == 1) // comm_data_usb.available
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <SCPI_CoreIdnQ+0x46>
                j = 5;
 8005a12:	2305      	movs	r3, #5
 8005a14:	60bb      	str	r3, [r7, #8]

            SCPI_ResultMnemonic(context, context->idn[j]);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	3320      	adds	r3, #32
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	685c      	ldr	r4, [r3, #4]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	3320      	adds	r3, #32
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fa fbe0 	bl	80001f4 <strlen>
 8005a34:	4603      	mov	r3, r0
 8005a36:	461a      	mov	r2, r3
 8005a38:	4621      	mov	r1, r4
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f008 fa70 	bl	800df20 <SCPI_ResultCharacters>
 8005a40:	e004      	b.n	8005a4c <SCPI_CoreIdnQ+0x7c>
        } else {
            SCPI_ResultMnemonic(context, "0");
 8005a42:	2201      	movs	r2, #1
 8005a44:	4907      	ldr	r1, [pc, #28]	; (8005a64 <SCPI_CoreIdnQ+0x94>)
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f008 fa6a 	bl	800df20 <SCPI_ResultCharacters>
    for (i = 0; i < 4; i++) {
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	ddc2      	ble.n	80059de <SCPI_CoreIdnQ+0xe>
        }
    }
    return SCPI_RES_OK;
 8005a58:	2301      	movs	r3, #1
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd90      	pop	{r4, r7, pc}
 8005a62:	bf00      	nop
 8005a64:	0801375c 	.word	0x0801375c

08005a68 <uart_put_text>:

/************************* Write Respond *************************/

void uart_put_text(const char* data)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < strlen(data); i++)
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e009      	b.n	8005a8a <uart_put_text+0x22>
        uart_put_char(data[i]);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 f80e 	bl	8005aa0 <uart_put_char>
    for (int i = 0; i < strlen(data); i++)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fa fbb2 	bl	80001f4 <strlen>
 8005a90:	4602      	mov	r2, r0
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d8ee      	bhi.n	8005a76 <uart_put_text+0xe>
}
 8005a98:	bf00      	nop
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <uart_put_char>:

static void uart_put_char(const char data)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	71fb      	strb	r3, [r7, #7]
    while(!LL_USART_IsActiveFlag_TXE(PS_UART));
 8005aaa:	bf00      	nop
 8005aac:	4807      	ldr	r0, [pc, #28]	; (8005acc <uart_put_char+0x2c>)
 8005aae:	f7ff fed0 	bl	8005852 <LL_USART_IsActiveFlag_TXE>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0f9      	beq.n	8005aac <uart_put_char+0xc>
    LL_USART_TransmitData8(PS_UART, data);
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	4619      	mov	r1, r3
 8005abc:	4803      	ldr	r0, [pc, #12]	; (8005acc <uart_put_char+0x2c>)
 8005abe:	f7ff feeb 	bl	8005898 <LL_USART_TransmitData8>
}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40004400 	.word	0x40004400

08005ad0 <uart_put_str>:

static void uart_put_str(const char* data, int len)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < len; i++)
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e009      	b.n	8005af4 <uart_put_str+0x24>
        uart_put_char(data[i]);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff ffd9 	bl	8005aa0 <uart_put_char>
    for (int i = 0; i < len; i++)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3301      	adds	r3, #1
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	dbf1      	blt.n	8005ae0 <uart_put_str+0x10>
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <comm_init>:

/************************* Main Comm *************************/

void comm_init(comm_data_t* self)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08c      	sub	sp, #48	; 0x30
 8005b08:	af0a      	add	r7, sp, #40	; 0x28
 8005b0a:	6078      	str	r0, [r7, #4]
    self->uart.last = 0;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
    self->uart.available = 0;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    self->uart.rx_index = 0;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    self->usb.last = 0;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    self->usb.available = 0;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    self->usb.rx_index = 0;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    comm_ptr = self;
 8005b3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ba8 <comm_init+0xa4>)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6013      	str	r3, [r2, #0]

    SCPI_Init(&scpi_context,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	9308      	str	r3, [sp, #32]
 8005b46:	2311      	movs	r3, #17
 8005b48:	9307      	str	r3, [sp, #28]
 8005b4a:	4b18      	ldr	r3, [pc, #96]	; (8005bac <comm_init+0xa8>)
 8005b4c:	9306      	str	r3, [sp, #24]
 8005b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b52:	9305      	str	r3, [sp, #20]
 8005b54:	4b16      	ldr	r3, [pc, #88]	; (8005bb0 <comm_init+0xac>)
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <comm_init+0xb0>)
 8005b5a:	9303      	str	r3, [sp, #12]
 8005b5c:	4b16      	ldr	r3, [pc, #88]	; (8005bb8 <comm_init+0xb4>)
 8005b5e:	9302      	str	r3, [sp, #8]
 8005b60:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <comm_init+0xb8>)
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <comm_init+0xbc>)
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4b16      	ldr	r3, [pc, #88]	; (8005bc4 <comm_init+0xc0>)
 8005b6a:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <comm_init+0xc4>)
 8005b6c:	4917      	ldr	r1, [pc, #92]	; (8005bcc <comm_init+0xc8>)
 8005b6e:	4818      	ldr	r0, [pc, #96]	; (8005bd0 <comm_init+0xcc>)
 8005b70:	f008 f8d0 	bl	800dd14 <SCPI_Init>
              SCPI_IDN1, SCPI_IDN2, SCPI_IDN3, SCPI_IDN4,
              scpi_input_buffer, SCPI_INPUT_BUFFER_LENGTH,
              scpi_error_queue_data, SCPI_ERROR_QUEUE_SIZE,
              self);

    LL_USART_EnableIT_RXNE(PS_UART);
 8005b74:	4817      	ldr	r0, [pc, #92]	; (8005bd4 <comm_init+0xd0>)
 8005b76:	f7ff fe7f 	bl	8005878 <LL_USART_EnableIT_RXNE>
    uart_put_text(WELCOME_STR);
 8005b7a:	4817      	ldr	r0, [pc, #92]	; (8005bd8 <comm_init+0xd4>)
 8005b7c:	f7ff ff74 	bl	8005a68 <uart_put_text>

    NVIC_SetPriority(PS_IRQN_UART, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_UART, 0));
 8005b80:	f7ff fdde 	bl	8005740 <__NVIC_GetPriorityGrouping>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2200      	movs	r2, #0
 8005b88:	2106      	movs	r1, #6
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fe2e 	bl	80057ec <NVIC_EncodePriority>
 8005b90:	4603      	mov	r3, r0
 8005b92:	4619      	mov	r1, r3
 8005b94:	2026      	movs	r0, #38	; 0x26
 8005b96:	f7ff fdff 	bl	8005798 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PS_IRQN_UART);
 8005b9a:	2026      	movs	r0, #38	; 0x26
 8005b9c:	f7ff fdde 	bl	800575c <__NVIC_EnableIRQ>
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	2000c268 	.word	0x2000c268
 8005bac:	2000cf6c 	.word	0x2000cf6c
 8005bb0:	2000ce6c 	.word	0x2000ce6c
 8005bb4:	0801375c 	.word	0x0801375c
 8005bb8:	08013760 	.word	0x08013760
 8005bbc:	08013768 	.word	0x08013768
 8005bc0:	0801377c 	.word	0x0801377c
 8005bc4:	08013f40 	.word	0x08013f40
 8005bc8:	2000000c 	.word	0x2000000c
 8005bcc:	08013d7c 	.word	0x08013d7c
 8005bd0:	2000cd94 	.word	0x2000cd94
 8005bd4:	40004400 	.word	0x40004400
 8005bd8:	0801378c 	.word	0x0801378c

08005bdc <comm_main>:

uint8_t comm_main(comm_data_t* self)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
    if (self->uart.available)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01a      	beq.n	8005c24 <comm_main+0x48>
    {
        SCPI_Input(&scpi_context, self->uart.rx_buffer, self->uart.rx_index);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f103 0167 	add.w	r1, r3, #103	; 0x67
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	480c      	ldr	r0, [pc, #48]	; (8005c30 <comm_main+0x54>)
 8005bfe:	f008 f8e9 	bl	800ddd4 <SCPI_Input>

        memset(self->uart.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3367      	adds	r3, #103	; 0x67
 8005c06:	2264      	movs	r2, #100	; 0x64
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f00b fd6e 	bl	80116ec <memset>
        self->uart.rx_index = 0;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        self->uart.available = 0;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
        return 1;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <comm_main+0x4a>
        self->usb.rx_index = 0;
        self->usb.available = 0;
        return 1;
    }
#endif
    return 0;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	2000cd94 	.word	0x2000cd94

08005c34 <comm_respond>:

int comm_respond(comm_data_t* self, const char* data, int len)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
    if (self->uart.last)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <comm_respond+0x22>
    {
        uart_put_str(data, len);
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	68b8      	ldr	r0, [r7, #8]
 8005c4e:	f7ff ff3f 	bl	8005ad0 <uart_put_str>
        return len;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	e000      	b.n	8005c58 <comm_respond+0x24>
        }

        return len;
    }
#endif
    return 0;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <__NVIC_GetPriorityGrouping>:
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c64:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <__NVIC_GetPriorityGrouping+0x18>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	0a1b      	lsrs	r3, r3, #8
 8005c6a:	f003 0307 	and.w	r3, r3, #7
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	e000ed00 	.word	0xe000ed00

08005c7c <__NVIC_EnableIRQ>:
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	db0b      	blt.n	8005ca6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	f003 021f 	and.w	r2, r3, #31
 8005c94:	4907      	ldr	r1, [pc, #28]	; (8005cb4 <__NVIC_EnableIRQ+0x38>)
 8005c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8005ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	e000e100 	.word	0xe000e100

08005cb8 <__NVIC_DisableIRQ>:
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	db10      	blt.n	8005cec <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	f003 021f 	and.w	r2, r3, #31
 8005cd0:	4909      	ldr	r1, [pc, #36]	; (8005cf8 <__NVIC_DisableIRQ+0x40>)
 8005cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	2001      	movs	r0, #1
 8005cda:	fa00 f202 	lsl.w	r2, r0, r2
 8005cde:	3320      	adds	r3, #32
 8005ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ce4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005ce8:	f3bf 8f6f 	isb	sy
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	e000e100 	.word	0xe000e100

08005cfc <__NVIC_ClearPendingIRQ>:
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	4603      	mov	r3, r0
 8005d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	db0c      	blt.n	8005d28 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	f003 021f 	and.w	r2, r3, #31
 8005d14:	4907      	ldr	r1, [pc, #28]	; (8005d34 <__NVIC_ClearPendingIRQ+0x38>)
 8005d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d22:	3360      	adds	r3, #96	; 0x60
 8005d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	e000e100 	.word	0xe000e100

08005d38 <__NVIC_SetPriority>:
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	6039      	str	r1, [r7, #0]
 8005d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	db0a      	blt.n	8005d62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	490c      	ldr	r1, [pc, #48]	; (8005d84 <__NVIC_SetPriority+0x4c>)
 8005d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d56:	0112      	lsls	r2, r2, #4
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	440b      	add	r3, r1
 8005d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d60:	e00a      	b.n	8005d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	4908      	ldr	r1, [pc, #32]	; (8005d88 <__NVIC_SetPriority+0x50>)
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	3b04      	subs	r3, #4
 8005d70:	0112      	lsls	r2, r2, #4
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	440b      	add	r3, r1
 8005d76:	761a      	strb	r2, [r3, #24]
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	e000e100 	.word	0xe000e100
 8005d88:	e000ed00 	.word	0xe000ed00

08005d8c <NVIC_EncodePriority>:
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b089      	sub	sp, #36	; 0x24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f1c3 0307 	rsb	r3, r3, #7
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	bf28      	it	cs
 8005daa:	2304      	movcs	r3, #4
 8005dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	3304      	adds	r3, #4
 8005db2:	2b06      	cmp	r3, #6
 8005db4:	d902      	bls.n	8005dbc <NVIC_EncodePriority+0x30>
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	3b03      	subs	r3, #3
 8005dba:	e000      	b.n	8005dbe <NVIC_EncodePriority+0x32>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	43da      	mvns	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	401a      	ands	r2, r3
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	fa01 f303 	lsl.w	r3, r1, r3
 8005dde:	43d9      	mvns	r1, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005de4:	4313      	orrs	r3, r2
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3724      	adds	r7, #36	; 0x24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <LL_ADC_DMA_GetRegAddr>:
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d103      	bne.n	8005e10 <LL_ADC_DMA_GetRegAddr+0x1c>
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3340      	adds	r3, #64	; 0x40
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	e00c      	b.n	8005e2a <LL_ADC_DMA_GetRegAddr+0x36>
    data_reg_addr = (uint32_t)&((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e16:	d003      	beq.n	8005e20 <LL_ADC_DMA_GetRegAddr+0x2c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a07      	ldr	r2, [pc, #28]	; (8005e38 <LL_ADC_DMA_GetRegAddr+0x44>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d101      	bne.n	8005e24 <LL_ADC_DMA_GetRegAddr+0x30>
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <LL_ADC_DMA_GetRegAddr+0x48>)
 8005e22:	e000      	b.n	8005e26 <LL_ADC_DMA_GetRegAddr+0x32>
 8005e24:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <LL_ADC_DMA_GetRegAddr+0x4c>)
 8005e26:	330c      	adds	r3, #12
 8005e28:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	50000100 	.word	0x50000100
 8005e3c:	50000300 	.word	0x50000300
 8005e40:	50000700 	.word	0x50000700

08005e44 <LL_ADC_SetAnalogWDMonitChannels>:
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	; 0x24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, __ADC_MASK_SHIFT(AWDy, ADC_AWD_CRX_REGOFFSET_MASK)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	330c      	adds	r3, #12
 8005e54:	4618      	mov	r0, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e5c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005e60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	fa92 f2a2 	rbit	r2, r2
 8005e68:	617a      	str	r2, [r7, #20]
  return result;
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	fab2 f282 	clz	r2, r2
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	fa23 f102 	lsr.w	r1, r3, r2
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f003 0202 	and.w	r2, r3, #2
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	440b      	add	r3, r1
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4403      	add	r3, r0
 8005e8a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <LL_ADC_SetAnalogWDMonitChannels+0x70>)
 8005e94:	400b      	ands	r3, r1
 8005e96:	43db      	mvns	r3, r3
 8005e98:	401a      	ands	r2, r3
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	400b      	ands	r3, r1
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	601a      	str	r2, [r3, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	3724      	adds	r7, #36	; 0x24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	7dc7fffe 	.word	0x7dc7fffe

08005eb8 <LL_ADC_REG_StartConversion>:
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ec8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ecc:	f043 0204 	orr.w	r2, r3, #4
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	609a      	str	r2, [r3, #8]
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <LL_ADC_REG_StopConversion>:
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ef0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ef4:	f043 0210 	orr.w	r2, r3, #16
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	609a      	str	r2, [r3, #8]
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <LL_TIM_EnableCounter>:
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f043 0201 	orr.w	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <LL_TIM_DisableCounter>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f023 0201 	bic.w	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	601a      	str	r2, [r3, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <LL_TIM_SetPrescaler>:
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <LL_TIM_SetAutoReload>:
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <LL_TIM_EnableDMAReq_CC1>:
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60da      	str	r2, [r3, #12]
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <LL_TIM_DisableDMAReq_CC1>:
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60da      	str	r2, [r3, #12]
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <daq_init>:
                       DMA_TypeDef* dma, enum daq_bits bits);
static void daq_clear_buff(daq_buff_t* buff);


void daq_init(daq_data_t* self)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
    daq_trig_init(self);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 fba9 	bl	8007720 <daq_trig_init>
    daq_settings_init(self);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f914 	bl	80061fc <daq_settings_init>
    daq_settings_save(&self->save_s, &self->trig.save_s, &self->set, &self->trig.set);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f503 4030 	add.w	r0, r3, #45056	; 0xb000
 8005fda:	3080      	adds	r0, #128	; 0x80
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f503 4130 	add.w	r1, r3, #45056	; 0xb000
 8005fe2:	31c8      	adds	r1, #200	; 0xc8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f503 4230 	add.w	r2, r3, #45056	; 0xb000
 8005fea:	3274      	adds	r2, #116	; 0x74
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8005ff2:	33b4      	adds	r3, #180	; 0xb4
 8005ff4:	f000 f8c1 	bl	800617a <daq_settings_save>
    self->mode = SCOPE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8005ffe:	33ac      	adds	r3, #172	; 0xac
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]

    daq_clear_buff(&self->buff1);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fc3b 	bl	8006882 <daq_clear_buff>
    daq_clear_buff(&self->buff2);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	330c      	adds	r3, #12
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fc36 	bl	8006882 <daq_clear_buff>
    daq_clear_buff(&self->buff3);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3318      	adds	r3, #24
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fc31 	bl	8006882 <daq_clear_buff>
    daq_clear_buff(&self->buff4);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3324      	adds	r3, #36	; 0x24
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fc2c 	bl	8006882 <daq_clear_buff>
    daq_clear_buff(&self->buff_out);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3330      	adds	r3, #48	; 0x30
 800602e:	4618      	mov	r0, r3
 8006030:	f000 fc27 	bl	8006882 <daq_clear_buff>
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	333c      	adds	r3, #60	; 0x3c
 8006038:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 800603c:	2100      	movs	r1, #0
 800603e:	4618      	mov	r0, r3
 8006040:	f00b fb54 	bl	80116ec <memset>
    self->buff_raw_ptr = 0;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800604a:	3372      	adds	r3, #114	; 0x72
 800604c:	2200      	movs	r2, #0
 800604e:	801a      	strh	r2, [r3, #0]

    self->trig.buff_trig = NULL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8006056:	3328      	adds	r3, #40	; 0x28
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
    self->buff_out.reserve = 0;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	871a      	strh	r2, [r3, #56]	; 0x38
    self->enabled = 0;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006068:	33ae      	adds	r3, #174	; 0xae
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]
    self->dis_hold = 0;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006074:	33ad      	adds	r3, #173	; 0xad
 8006076:	2200      	movs	r2, #0
 8006078:	701a      	strb	r2, [r3, #0]
    self->vref = 0;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006080:	3398      	adds	r3, #152	; 0x98
 8006082:	f04f 0200 	mov.w	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
    self->vcc_mv = 0;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800608e:	339c      	adds	r3, #156	; 0x9c
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
    self->adc_max_val = 0;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800609c:	33a4      	adds	r3, #164	; 0xa4
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
    self->smpl_time = 0;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80060aa:	33a0      	adds	r3, #160	; 0xa0
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]
    self->interleaved = 0;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80060b8:	33af      	adds	r3, #175	; 0xaf
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]
    self->dualmode = 0;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80060c4:	33b0      	adds	r3, #176	; 0xb0
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
    self->uwTick = 0;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80060d0:	33a8      	adds	r3, #168	; 0xa8
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]

    NVIC_SetPriority(PS_IRQN_DAQ_TIM, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_TIM3, 0));
 80060d6:	f7ff fdc3 	bl	8005c60 <__NVIC_GetPriorityGrouping>
 80060da:	4603      	mov	r3, r0
 80060dc:	2200      	movs	r2, #0
 80060de:	2101      	movs	r1, #1
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fe53 	bl	8005d8c <NVIC_EncodePriority>
 80060e6:	4603      	mov	r3, r0
 80060e8:	4619      	mov	r1, r3
 80060ea:	201d      	movs	r0, #29
 80060ec:	f7ff fe24 	bl	8005d38 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PS_IRQN_DAQ_TIM);
 80060f0:	201d      	movs	r0, #29
 80060f2:	f7ff fdc3 	bl	8005c7c <__NVIC_EnableIRQ>

#if defined(PS_ADC_MODE_ADC1) || defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
    NVIC_SetPriority(PS_IRQN_ADC12, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_ADC, 0));
 80060f6:	f7ff fdb3 	bl	8005c60 <__NVIC_GetPriorityGrouping>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2200      	movs	r2, #0
 80060fe:	2105      	movs	r1, #5
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff fe43 	bl	8005d8c <NVIC_EncodePriority>
 8006106:	4603      	mov	r3, r0
 8006108:	4619      	mov	r1, r3
 800610a:	2012      	movs	r0, #18
 800610c:	f7ff fe14 	bl	8005d38 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PS_IRQN_ADC12);
 8006110:	2012      	movs	r0, #18
 8006112:	f7ff fdb3 	bl	8005c7c <__NVIC_EnableIRQ>
#endif

#if defined(PS_ADC_MODE_ADC1234)
    NVIC_SetPriority(PS_IRQN_ADC3, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_ADC, 0));
 8006116:	f7ff fda3 	bl	8005c60 <__NVIC_GetPriorityGrouping>
 800611a:	4603      	mov	r3, r0
 800611c:	2200      	movs	r2, #0
 800611e:	2105      	movs	r1, #5
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff fe33 	bl	8005d8c <NVIC_EncodePriority>
 8006126:	4603      	mov	r3, r0
 8006128:	4619      	mov	r1, r3
 800612a:	202f      	movs	r0, #47	; 0x2f
 800612c:	f7ff fe04 	bl	8005d38 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PS_IRQN_ADC3);
 8006130:	202f      	movs	r0, #47	; 0x2f
 8006132:	f7ff fda3 	bl	8005c7c <__NVIC_EnableIRQ>

    NVIC_SetPriority(PS_IRQN_ADC4, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_ADC, 0));
 8006136:	f7ff fd93 	bl	8005c60 <__NVIC_GetPriorityGrouping>
 800613a:	4603      	mov	r3, r0
 800613c:	2200      	movs	r2, #0
 800613e:	2105      	movs	r1, #5
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fe23 	bl	8005d8c <NVIC_EncodePriority>
 8006146:	4603      	mov	r3, r0
 8006148:	4619      	mov	r1, r3
 800614a:	203d      	movs	r0, #61	; 0x3d
 800614c:	f7ff fdf4 	bl	8005d38 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PS_IRQN_ADC4);
 8006150:	203d      	movs	r0, #61	; 0x3d
 8006152:	f7ff fd93 	bl	8005c7c <__NVIC_EnableIRQ>
#endif

    NVIC_DisableIRQ(PS_LA_IRQ_EXTI1);
 8006156:	2006      	movs	r0, #6
 8006158:	f7ff fdae 	bl	8005cb8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(PS_LA_IRQ_EXTI2);
 800615c:	2007      	movs	r0, #7
 800615e:	f7ff fdab 	bl	8005cb8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(PS_LA_IRQ_EXTI3);
 8006162:	2008      	movs	r0, #8
 8006164:	f7ff fda8 	bl	8005cb8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(PS_LA_IRQ_EXTI4);
 8006168:	2009      	movs	r0, #9
 800616a:	f7ff fda5 	bl	8005cb8 <__NVIC_DisableIRQ>

    adc_init();
 800616e:	f003 fad3 	bl	8009718 <adc_init>
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <daq_settings_save>:

void daq_settings_save(daq_settings_t* src1, trig_settings_t* src2, daq_settings_t* dst1, trig_settings_t* dst2)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	603b      	str	r3, [r7, #0]
    dst1->fs = src1->fs;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	605a      	str	r2, [r3, #4]
    dst1->mem = src1->mem;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	891a      	ldrh	r2, [r3, #8]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	811a      	strh	r2, [r3, #8]
    dst1->bits = src1->bits;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	7a9a      	ldrb	r2, [r3, #10]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	729a      	strb	r2, [r3, #10]

    dst1->ch1_en = src1->ch1_en;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	781a      	ldrb	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	701a      	strb	r2, [r3, #0]
    dst1->ch2_en = src1->ch2_en;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	785a      	ldrb	r2, [r3, #1]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	705a      	strb	r2, [r3, #1]
    dst1->ch3_en = src1->ch3_en;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	789a      	ldrb	r2, [r3, #2]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	709a      	strb	r2, [r3, #2]
    dst1->ch4_en = src1->ch4_en;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	78da      	ldrb	r2, [r3, #3]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	70da      	strb	r2, [r3, #3]

    dst2->val_percent = src2->val_percent;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	611a      	str	r2, [r3, #16]
    dst2->val = src2->val;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	60da      	str	r2, [r3, #12]
    dst2->ch = src2->ch;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	609a      	str	r2, [r3, #8]
    dst2->edge = src2->edge;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	795a      	ldrb	r2, [r3, #5]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	715a      	strb	r2, [r3, #5]
    dst2->mode = src2->mode;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	791a      	ldrb	r2, [r3, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	711a      	strb	r2, [r3, #4]
    dst2->pretrigger = src2->pretrigger;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	601a      	str	r2, [r3, #0]
}
 80061f0:	bf00      	nop
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <daq_settings_init>:

void daq_settings_init(daq_data_t* self)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
    // SCOPE
    self->save_s.fs = 100000; //TODO defaults from CFG macros
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800620a:	3384      	adds	r3, #132	; 0x84
 800620c:	4a50      	ldr	r2, [pc, #320]	; (8006350 <daq_settings_init+0x154>)
 800620e:	601a      	str	r2, [r3, #0]
    self->save_s.mem = 500;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006216:	3388      	adds	r3, #136	; 0x88
 8006218:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800621c:	801a      	strh	r2, [r3, #0]
    self->save_s.bits = B12;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006224:	338a      	adds	r3, #138	; 0x8a
 8006226:	220c      	movs	r2, #12
 8006228:	701a      	strb	r2, [r3, #0]

    self->save_s.ch1_en = 1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006230:	3380      	adds	r3, #128	; 0x80
 8006232:	2201      	movs	r2, #1
 8006234:	701a      	strb	r2, [r3, #0]
    self->save_s.ch2_en = 1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800623c:	3381      	adds	r3, #129	; 0x81
 800623e:	2201      	movs	r2, #1
 8006240:	701a      	strb	r2, [r3, #0]
    self->save_s.ch3_en = 0;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006248:	3382      	adds	r3, #130	; 0x82
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
    self->save_s.ch4_en = 0;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006254:	3383      	adds	r3, #131	; 0x83
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]

    self->trig.save_s.val_percent = 50;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006260:	33d8      	adds	r3, #216	; 0xd8
 8006262:	2232      	movs	r2, #50	; 0x32
 8006264:	601a      	str	r2, [r3, #0]
    self->trig.save_s.val = 2047;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800626c:	33d4      	adds	r3, #212	; 0xd4
 800626e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006272:	601a      	str	r2, [r3, #0]
    self->trig.save_s.ch = 1;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800627a:	33d0      	adds	r3, #208	; 0xd0
 800627c:	2201      	movs	r2, #1
 800627e:	601a      	str	r2, [r3, #0]
    self->trig.save_s.edge = RISING;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006286:	33cd      	adds	r3, #205	; 0xcd
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
    self->trig.save_s.mode = DISABLED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006292:	33cc      	adds	r3, #204	; 0xcc
 8006294:	2203      	movs	r2, #3
 8006296:	701a      	strb	r2, [r3, #0]
    self->trig.save_s.pretrigger = 50;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800629e:	33c8      	adds	r3, #200	; 0xc8
 80062a0:	2232      	movs	r2, #50	; 0x32
 80062a2:	601a      	str	r2, [r3, #0]

    // LA
    self->save_l.fs = 100000;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80062aa:	3390      	adds	r3, #144	; 0x90
 80062ac:	4a28      	ldr	r2, [pc, #160]	; (8006350 <daq_settings_init+0x154>)
 80062ae:	601a      	str	r2, [r3, #0]
    self->save_l.mem = 1000;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80062b6:	3394      	adds	r3, #148	; 0x94
 80062b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062bc:	801a      	strh	r2, [r3, #0]
    self->save_l.bits = B1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80062c4:	3396      	adds	r3, #150	; 0x96
 80062c6:	2201      	movs	r2, #1
 80062c8:	701a      	strb	r2, [r3, #0]

    self->save_l.ch1_en = 1;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80062d0:	338c      	adds	r3, #140	; 0x8c
 80062d2:	2201      	movs	r2, #1
 80062d4:	701a      	strb	r2, [r3, #0]
    self->save_l.ch2_en = 1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80062dc:	338d      	adds	r3, #141	; 0x8d
 80062de:	2201      	movs	r2, #1
 80062e0:	701a      	strb	r2, [r3, #0]
    self->save_l.ch3_en = 1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80062e8:	338e      	adds	r3, #142	; 0x8e
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
    self->save_l.ch4_en = 1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80062f4:	338f      	adds	r3, #143	; 0x8f
 80062f6:	2201      	movs	r2, #1
 80062f8:	701a      	strb	r2, [r3, #0]

    self->trig.save_s.val_percent = 0;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006300:	33d8      	adds	r3, #216	; 0xd8
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
    self->trig.save_l.val = 0;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800630c:	33e8      	adds	r3, #232	; 0xe8
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
    self->trig.save_l.ch = 1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006318:	33e4      	adds	r3, #228	; 0xe4
 800631a:	2201      	movs	r2, #1
 800631c:	601a      	str	r2, [r3, #0]
    self->trig.save_l.edge = RISING;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006324:	33e1      	adds	r3, #225	; 0xe1
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
    self->trig.save_l.mode = DISABLED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006330:	33e0      	adds	r3, #224	; 0xe0
 8006332:	2203      	movs	r2, #3
 8006334:	701a      	strb	r2, [r3, #0]
    self->trig.save_l.pretrigger = 50;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800633c:	33dc      	adds	r3, #220	; 0xdc
 800633e:	2232      	movs	r2, #50	; 0x32
 8006340:	601a      	str	r2, [r3, #0]
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	47c35000 	.word	0x47c35000

08006354 <daq_mem_set>:

int daq_mem_set(daq_data_t* self, uint16_t mem_per_ch)
{
 8006354:	b5b0      	push	{r4, r5, r7, lr}
 8006356:	b090      	sub	sp, #64	; 0x40
 8006358:	af06      	add	r7, sp, #24
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	807b      	strh	r3, [r7, #2]
    daq_enable(self, 0);
 8006360:	2100      	movs	r1, #0
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fd7e 	bl	8006e64 <daq_enable>
    daq_reset(self);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fd0d 	bl	8006d88 <daq_reset>

    self->buff_out.reserve = 0;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	871a      	strh	r2, [r3, #56]	; 0x38
    daq_clear_buff(&self->buff1);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fa83 	bl	8006882 <daq_clear_buff>
    daq_clear_buff(&self->buff2);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	330c      	adds	r3, #12
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fa7e 	bl	8006882 <daq_clear_buff>
    daq_clear_buff(&self->buff3);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3318      	adds	r3, #24
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fa79 	bl	8006882 <daq_clear_buff>
    daq_clear_buff(&self->buff4);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3324      	adds	r3, #36	; 0x24
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fa74 	bl	8006882 <daq_clear_buff>
    daq_clear_buff(&self->buff_out);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3330      	adds	r3, #48	; 0x30
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fa6f 	bl	8006882 <daq_clear_buff>
    self->buff_raw_ptr = 0;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80063aa:	3372      	adds	r3, #114	; 0x72
 80063ac:	2200      	movs	r2, #0
 80063ae:	801a      	strh	r2, [r3, #0]
    memset(self->buff_raw, 0, PS_DAQ_MAX_MEM * sizeof(uint8_t));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	333c      	adds	r3, #60	; 0x3c
 80063b4:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 80063b8:	2100      	movs	r1, #0
 80063ba:	4618      	mov	r0, r3
 80063bc:	f00b f996 	bl	80116ec <memset>

    int max_len = PS_DAQ_MAX_MEM;
 80063c0:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
    int out_per_ch = mem_per_ch;
 80063c6:	887b      	ldrh	r3, [r7, #2]
 80063c8:	623b      	str	r3, [r7, #32]
    if (self->set.bits == B12)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80063d0:	337e      	adds	r3, #126	; 0x7e
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b0c      	cmp	r3, #12
 80063d6:	d107      	bne.n	80063e8 <daq_mem_set+0x94>
    {
        max_len /= 2;
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	0fda      	lsrs	r2, r3, #31
 80063dc:	4413      	add	r3, r2
 80063de:	105b      	asrs	r3, r3, #1
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
        out_per_ch *= 2;
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	623b      	str	r3, [r7, #32]
    }

    if (self->mode != LA)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80063ee:	33ac      	adds	r3, #172	; 0xac
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	f000 80f0 	beq.w	80065d8 <daq_mem_set+0x284>
    {
        uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80063fe:	33ac      	adds	r3, #172	; 0xac
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b01      	cmp	r3, #1
 8006404:	bf0c      	ite	eq
 8006406:	2301      	moveq	r3, #1
 8006408:	2300      	movne	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	77fb      	strb	r3, [r7, #31]
        self->buff_out.chans = total - is_vcc;
        self->buff_out.len = out_per_ch * (total - is_vcc);

#elif defined(PS_ADC_MODE_ADC1234)

        int len1 = self->set.ch1_en + is_vcc;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006414:	3374      	adds	r3, #116	; 0x74
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	7ffb      	ldrb	r3, [r7, #31]
 800641c:	4413      	add	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
        int len2 = self->set.ch3_en;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006426:	3376      	adds	r3, #118	; 0x76
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	617b      	str	r3, [r7, #20]
        int len3 = self->set.ch3_en;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006432:	3376      	adds	r3, #118	; 0x76
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	613b      	str	r3, [r7, #16]
        int len4 = self->set.ch3_en;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800643e:	3376      	adds	r3, #118	; 0x76
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	60fb      	str	r3, [r7, #12]
        int total = len1 + len2 + len3 + len4;
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	441a      	add	r2, r3
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4413      	add	r3, r2
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	60bb      	str	r3, [r7, #8]
            len3 = 1;
            len4 = 0;
            total = 2; // TODO size??
        }
#endif
        if (mem_per_ch < 0 || (mem_per_ch * total) + (mem_per_ch * (total - is_vcc)) > max_len)
 8006454:	7ffb      	ldrb	r3, [r7, #31]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	1ad2      	subs	r2, r2, r3
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4413      	add	r3, r2
 800645e:	887a      	ldrh	r2, [r7, #2]
 8006460:	fb02 f303 	mul.w	r3, r2, r3
 8006464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006466:	429a      	cmp	r2, r3
 8006468:	da02      	bge.n	8006470 <daq_mem_set+0x11c>
            return -2;
 800646a:	f06f 0301 	mvn.w	r3, #1
 800646e:	e0fd      	b.n	800666c <daq_mem_set+0x318>

        if (len1 > 0)
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	dd1d      	ble.n	80064b2 <daq_mem_set+0x15e>
            daq_malloc(self, &self->buff1, mem_per_ch * len1, PS_MEM_RESERVE, len1, PS_ADC_ADDR(ADC1), PS_DMA_CH_ADC1, PS_DMA_ADC1, self->set.bits);
 8006476:	687c      	ldr	r4, [r7, #4]
 8006478:	887b      	ldrh	r3, [r7, #2]
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	fb02 f503 	mul.w	r5, r2, r3
 8006480:	2100      	movs	r1, #0
 8006482:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006486:	f7ff fcb5 	bl	8005df4 <LL_ADC_DMA_GetRegAddr>
 800648a:	4602      	mov	r2, r0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006492:	337e      	adds	r3, #126	; 0x7e
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	9304      	str	r3, [sp, #16]
 8006498:	4b76      	ldr	r3, [pc, #472]	; (8006674 <daq_mem_set+0x320>)
 800649a:	9303      	str	r3, [sp, #12]
 800649c:	2301      	movs	r3, #1
 800649e:	9302      	str	r3, [sp, #8]
 80064a0:	9201      	str	r2, [sp, #4]
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	230a      	movs	r3, #10
 80064a8:	462a      	mov	r2, r5
 80064aa:	4621      	mov	r1, r4
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f8ed 	bl	800668c <daq_malloc>
        if (len2 > 0)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	dd1e      	ble.n	80064f6 <daq_mem_set+0x1a2>
            daq_malloc(self, &self->buff2, mem_per_ch * len2, PS_MEM_RESERVE, len2, PS_ADC_ADDR(ADC2), PS_DMA_CH_ADC2, PS_DMA_ADC2, self->set.bits);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f103 040c 	add.w	r4, r3, #12
 80064be:	887b      	ldrh	r3, [r7, #2]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	fb02 f503 	mul.w	r5, r2, r3
 80064c6:	2100      	movs	r1, #0
 80064c8:	486b      	ldr	r0, [pc, #428]	; (8006678 <daq_mem_set+0x324>)
 80064ca:	f7ff fc93 	bl	8005df4 <LL_ADC_DMA_GetRegAddr>
 80064ce:	4602      	mov	r2, r0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80064d6:	337e      	adds	r3, #126	; 0x7e
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	4b67      	ldr	r3, [pc, #412]	; (800667c <daq_mem_set+0x328>)
 80064de:	9303      	str	r3, [sp, #12]
 80064e0:	2301      	movs	r3, #1
 80064e2:	9302      	str	r3, [sp, #8]
 80064e4:	9201      	str	r2, [sp, #4]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	230a      	movs	r3, #10
 80064ec:	462a      	mov	r2, r5
 80064ee:	4621      	mov	r1, r4
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f8cb 	bl	800668c <daq_malloc>
        if (len3 > 0)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dd1e      	ble.n	800653a <daq_mem_set+0x1e6>
            daq_malloc(self, &self->buff3, mem_per_ch * len3, PS_MEM_RESERVE, len3, PS_ADC_ADDR(ADC3), PS_DMA_CH_ADC3, PS_DMA_ADC3, self->set.bits);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f103 0418 	add.w	r4, r3, #24
 8006502:	887b      	ldrh	r3, [r7, #2]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	fb02 f503 	mul.w	r5, r2, r3
 800650a:	2100      	movs	r1, #0
 800650c:	485c      	ldr	r0, [pc, #368]	; (8006680 <daq_mem_set+0x32c>)
 800650e:	f7ff fc71 	bl	8005df4 <LL_ADC_DMA_GetRegAddr>
 8006512:	4602      	mov	r2, r0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800651a:	337e      	adds	r3, #126	; 0x7e
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	9304      	str	r3, [sp, #16]
 8006520:	4b56      	ldr	r3, [pc, #344]	; (800667c <daq_mem_set+0x328>)
 8006522:	9303      	str	r3, [sp, #12]
 8006524:	2305      	movs	r3, #5
 8006526:	9302      	str	r3, [sp, #8]
 8006528:	9201      	str	r2, [sp, #4]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	230a      	movs	r3, #10
 8006530:	462a      	mov	r2, r5
 8006532:	4621      	mov	r1, r4
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f8a9 	bl	800668c <daq_malloc>
        if (len4 > 0)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	dd1e      	ble.n	800657e <daq_mem_set+0x22a>
            daq_malloc(self, &self->buff4, mem_per_ch * len4, PS_MEM_RESERVE, len4, PS_ADC_ADDR(ADC4), PS_DMA_CH_ADC4, PS_DMA_ADC4, self->set.bits);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8006546:	887b      	ldrh	r3, [r7, #2]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	fb02 f503 	mul.w	r5, r2, r3
 800654e:	2100      	movs	r1, #0
 8006550:	484c      	ldr	r0, [pc, #304]	; (8006684 <daq_mem_set+0x330>)
 8006552:	f7ff fc4f 	bl	8005df4 <LL_ADC_DMA_GetRegAddr>
 8006556:	4602      	mov	r2, r0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800655e:	337e      	adds	r3, #126	; 0x7e
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	4b45      	ldr	r3, [pc, #276]	; (800667c <daq_mem_set+0x328>)
 8006566:	9303      	str	r3, [sp, #12]
 8006568:	2302      	movs	r3, #2
 800656a:	9302      	str	r3, [sp, #8]
 800656c:	9201      	str	r2, [sp, #4]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	230a      	movs	r3, #10
 8006574:	462a      	mov	r2, r5
 8006576:	4621      	mov	r1, r4
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f887 	bl	800668c <daq_malloc>

        self->buff_out.chans = total - is_vcc;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	b29a      	uxth	r2, r3
 8006582:	7ffb      	ldrb	r3, [r7, #31]
 8006584:	b29b      	uxth	r3, r3
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	b29a      	uxth	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	869a      	strh	r2, [r3, #52]	; 0x34
        self->buff_out.len = out_per_ch * (total - is_vcc);
 800658e:	7ffb      	ldrb	r3, [r7, #31]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	b29a      	uxth	r2, r3
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	b29b      	uxth	r3, r3
 800659a:	fb12 f303 	smulbb	r3, r2, r3
 800659e:	b29a      	uxth	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	86da      	strh	r2, [r3, #54]	; 0x36

#endif

        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80065b0:	3372      	adds	r3, #114	; 0x72
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	441a      	add	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	631a      	str	r2, [r3, #48]	; 0x30
        self->buff_raw_ptr += self->buff_out.len;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80065c0:	3372      	adds	r3, #114	; 0x72
 80065c2:	881a      	ldrh	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c8:	4413      	add	r3, r2
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80065d2:	3372      	adds	r3, #114	; 0x72
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	e03b      	b.n	8006650 <daq_mem_set+0x2fc>
    }
    else // mode == LA
    {
        if (mem_per_ch < 0 || (mem_per_ch * 2) > PS_DAQ_MAX_MEM)
 80065d8:	887b      	ldrh	r3, [r7, #2]
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 80065e0:	4293      	cmp	r3, r2
 80065e2:	dd02      	ble.n	80065ea <daq_mem_set+0x296>
            return -2;
 80065e4:	f06f 0301 	mvn.w	r3, #1
 80065e8:	e040      	b.n	800666c <daq_mem_set+0x318>

        daq_malloc(self, &self->buff1, mem_per_ch, PS_MEM_RESERVE, 4, (uint32_t)&PS_GPIO_LA_PORT->IDR, PS_DMA_CH_LA, PS_DMA_LA, self->set.bits);
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	887a      	ldrh	r2, [r7, #2]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80065f4:	337e      	adds	r3, #126	; 0x7e
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	9304      	str	r3, [sp, #16]
 80065fa:	4b1e      	ldr	r3, [pc, #120]	; (8006674 <daq_mem_set+0x320>)
 80065fc:	9303      	str	r3, [sp, #12]
 80065fe:	2306      	movs	r3, #6
 8006600:	9302      	str	r3, [sp, #8]
 8006602:	4b21      	ldr	r3, [pc, #132]	; (8006688 <daq_mem_set+0x334>)
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	2304      	movs	r3, #4
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	230a      	movs	r3, #10
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f83d 	bl	800668c <daq_malloc>

        self->buff_out.chans = 4;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2204      	movs	r2, #4
 8006616:	869a      	strh	r2, [r3, #52]	; 0x34
        self->buff_out.len = mem_per_ch;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	887a      	ldrh	r2, [r7, #2]
 800661c:	86da      	strh	r2, [r3, #54]	; 0x36
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800662a:	3372      	adds	r3, #114	; 0x72
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	441a      	add	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
        self->buff_raw_ptr += self->buff_out.len;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800663a:	3372      	adds	r3, #114	; 0x72
 800663c:	881a      	ldrh	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006642:	4413      	add	r3, r2
 8006644:	b29a      	uxth	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800664c:	3372      	adds	r3, #114	; 0x72
 800664e:	801a      	strh	r2, [r3, #0]
    }

    self->set.mem = mem_per_ch;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006656:	337c      	adds	r3, #124	; 0x7c
 8006658:	887a      	ldrh	r2, [r7, #2]
 800665a:	801a      	strh	r2, [r3, #0]

    daq_trig_update(self);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 fea1 	bl	80083a4 <daq_trig_update>
    daq_enable(self, 1);
 8006662:	2101      	movs	r1, #1
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fbfd 	bl	8006e64 <daq_enable>
    return 0;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3728      	adds	r7, #40	; 0x28
 8006670:	46bd      	mov	sp, r7
 8006672:	bdb0      	pop	{r4, r5, r7, pc}
 8006674:	40020000 	.word	0x40020000
 8006678:	50000100 	.word	0x50000100
 800667c:	40020400 	.word	0x40020400
 8006680:	50000400 	.word	0x50000400
 8006684:	50000500 	.word	0x50000500
 8006688:	48000810 	.word	0x48000810

0800668c <daq_malloc>:

static void daq_malloc(daq_data_t* self, daq_buff_t* buff, int mem, int reserve, int chans, uint32_t src,
                       uint32_t dma_ch, DMA_TypeDef* dma, enum daq_bits bits)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b090      	sub	sp, #64	; 0x40
 8006690:	af04      	add	r7, sp, #16
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
    if (bits == B12)
 800669a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800669e:	2b0c      	cmp	r3, #12
 80066a0:	d154      	bne.n	800674c <daq_malloc+0xc0>
    {
        mem += reserve * chans;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	4413      	add	r3, r2
 80066ae:	607b      	str	r3, [r7, #4]
        buff->reserve = reserve * chans;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	fb12 f303 	smulbb	r3, r2, r3
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	811a      	strh	r2, [r3, #8]

        size_t ln = mem * sizeof(uint16_t);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	61fb      	str	r3, [r7, #28]
        buff->data = (uint16_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80066d4:	3372      	adds	r3, #114	; 0x72
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	441a      	add	r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	601a      	str	r2, [r3, #0]
        self->buff_raw_ptr += mem * 2;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80066e4:	3372      	adds	r3, #114	; 0x72
 80066e6:	881a      	ldrh	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	4413      	add	r3, r2
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80066fa:	3372      	adds	r3, #114	; 0x72
 80066fc:	801a      	strh	r2, [r3, #0]
        buff->chans = chans;
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	b29a      	uxth	r2, r3
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	809a      	strh	r2, [r3, #4]
        buff->len = mem;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	b29a      	uxth	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	80da      	strh	r2, [r3, #6]
        memset(buff->data, 0, ln);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	2100      	movs	r1, #0
 8006716:	4618      	mov	r0, r3
 8006718:	f00a ffe8 	bl	80116ec <memset>
        uint32_t dma_p_sz = LL_DMA_PDATAALIGN_HALFWORD;
 800671c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006720:	61bb      	str	r3, [r7, #24]
        uint32_t dma_m_sz = LL_DMA_MDATAALIGN_HALFWORD;
 8006722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006726:	617b      	str	r3, [r7, #20]
        {
            dma_p_sz = LL_DMA_PDATAALIGN_WORD;
            dma_m_sz = LL_DMA_MDATAALIGN_WORD;
        }
#endif
        dma_set(src, dma, dma_ch, (uint32_t)((uint16_t*)((uint8_t*)buff->data)), mem,
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4619      	mov	r1, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	9203      	str	r2, [sp, #12]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	9202      	str	r2, [sp, #8]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	9201      	str	r2, [sp, #4]
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	460b      	mov	r3, r1
 8006740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006744:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006746:	f002 ffbd 	bl	80096c4 <dma_set>
        buff->len = mem;
        memset(buff->data, 0, ln);
        dma_set(src, dma, PS_DMA_CH_LA, (uint32_t)((uint8_t*)buff->data), mem,
                LL_DMA_PDATAALIGN_BYTE, LL_DMA_MDATAALIGN_BYTE, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
    }
}
 800674a:	e096      	b.n	800687a <daq_malloc+0x1ee>
    else if (bits == B8)
 800674c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006750:	2b08      	cmp	r3, #8
 8006752:	d14f      	bne.n	80067f4 <daq_malloc+0x168>
        mem += reserve * chans;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006758:	fb02 f303 	mul.w	r3, r2, r3
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	4413      	add	r3, r2
 8006760:	607b      	str	r3, [r7, #4]
        buff->reserve = reserve * chans;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	b29a      	uxth	r2, r3
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	b29b      	uxth	r3, r3
 800676a:	fb12 f303 	smulbb	r3, r2, r3
 800676e:	b29a      	uxth	r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	811a      	strh	r2, [r3, #8]
        size_t ln = mem * sizeof(uint8_t);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006784:	3372      	adds	r3, #114	; 0x72
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	441a      	add	r2, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	601a      	str	r2, [r3, #0]
        self->buff_raw_ptr += mem;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006794:	3372      	adds	r3, #114	; 0x72
 8006796:	881a      	ldrh	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	b29b      	uxth	r3, r3
 800679c:	4413      	add	r3, r2
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80067a6:	3372      	adds	r3, #114	; 0x72
 80067a8:	801a      	strh	r2, [r3, #0]
        buff->chans = chans;
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	809a      	strh	r2, [r3, #4]
        buff->len = mem;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	80da      	strh	r2, [r3, #6]
        memset(buff->data, 0, ln);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067c0:	2100      	movs	r1, #0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f00a ff92 	bl	80116ec <memset>
        uint32_t dma_p_sz = LL_DMA_PDATAALIGN_BYTE;
 80067c8:	2300      	movs	r3, #0
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t dma_m_sz = LL_DMA_MDATAALIGN_BYTE;
 80067cc:	2300      	movs	r3, #0
 80067ce:	623b      	str	r3, [r7, #32]
        dma_set(src, dma, dma_ch, (uint32_t)((uint8_t*)buff->data), mem,
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4619      	mov	r1, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	9203      	str	r2, [sp, #12]
 80067dc:	6a3a      	ldr	r2, [r7, #32]
 80067de:	9202      	str	r2, [sp, #8]
 80067e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e2:	9201      	str	r2, [sp, #4]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	460b      	mov	r3, r1
 80067e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80067ee:	f002 ff69 	bl	80096c4 <dma_set>
}
 80067f2:	e042      	b.n	800687a <daq_malloc+0x1ee>
        mem += reserve * 1;
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	4413      	add	r3, r2
 80067fa:	607b      	str	r3, [r7, #4]
        buff->reserve = reserve * 1;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	811a      	strh	r2, [r3, #8]
        size_t ln = mem * sizeof(uint8_t);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	62fb      	str	r3, [r7, #44]	; 0x2c
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006814:	3372      	adds	r3, #114	; 0x72
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	441a      	add	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	601a      	str	r2, [r3, #0]
        self->buff_raw_ptr += mem;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006824:	3372      	adds	r3, #114	; 0x72
 8006826:	881a      	ldrh	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	b29b      	uxth	r3, r3
 800682c:	4413      	add	r3, r2
 800682e:	b29a      	uxth	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006836:	3372      	adds	r3, #114	; 0x72
 8006838:	801a      	strh	r2, [r3, #0]
        buff->chans = chans;
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	b29a      	uxth	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	809a      	strh	r2, [r3, #4]
        buff->len = mem;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	b29a      	uxth	r2, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	80da      	strh	r2, [r3, #6]
        memset(buff->data, 0, ln);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006850:	2100      	movs	r1, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f00a ff4a 	bl	80116ec <memset>
        dma_set(src, dma, PS_DMA_CH_LA, (uint32_t)((uint8_t*)buff->data), mem,
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4619      	mov	r1, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	9203      	str	r2, [sp, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	9202      	str	r2, [sp, #8]
 8006868:	2200      	movs	r2, #0
 800686a:	9201      	str	r2, [sp, #4]
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	460b      	mov	r3, r1
 8006870:	2206      	movs	r2, #6
 8006872:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006874:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006876:	f002 ff25 	bl	80096c4 <dma_set>
}
 800687a:	bf00      	nop
 800687c:	3730      	adds	r7, #48	; 0x30
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <daq_clear_buff>:

static void daq_clear_buff(daq_buff_t* buff)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
    buff->data = NULL;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]
    buff->chans = 0;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	809a      	strh	r2, [r3, #4]
    buff->len = 0;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	80da      	strh	r2, [r3, #6]
    buff->reserve = 0;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	811a      	strh	r2, [r3, #8]
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
	...

080068b0 <daq_bit_set>:

int daq_bit_set(daq_data_t* self, enum daq_bits bits)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	70fb      	strb	r3, [r7, #3]
    if (bits != B12 && bits != B8 && bits != B1)
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	2b0c      	cmp	r3, #12
 80068c0:	d008      	beq.n	80068d4 <daq_bit_set+0x24>
 80068c2:	78fb      	ldrb	r3, [r7, #3]
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d005      	beq.n	80068d4 <daq_bit_set+0x24>
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d002      	beq.n	80068d4 <daq_bit_set+0x24>
        return -1;
 80068ce:	f04f 33ff 	mov.w	r3, #4294967295
 80068d2:	e05e      	b.n	8006992 <daq_bit_set+0xe2>

    self->set.bits = bits;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80068da:	337e      	adds	r3, #126	; 0x7e
 80068dc:	78fa      	ldrb	r2, [r7, #3]
 80068de:	701a      	strb	r2, [r3, #0]
    if (bits == B12)
 80068e0:	78fb      	ldrb	r3, [r7, #3]
 80068e2:	2b0c      	cmp	r3, #12
 80068e4:	d106      	bne.n	80068f4 <daq_bit_set+0x44>
        self->adc_max_val = 4095;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80068ec:	33a4      	adds	r3, #164	; 0xa4
 80068ee:	4a2b      	ldr	r2, [pc, #172]	; (800699c <daq_bit_set+0xec>)
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e010      	b.n	8006916 <daq_bit_set+0x66>
    else if (bits == B8)
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	2b08      	cmp	r3, #8
 80068f8:	d106      	bne.n	8006908 <daq_bit_set+0x58>
        self->adc_max_val = 255;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006900:	33a4      	adds	r3, #164	; 0xa4
 8006902:	4a27      	ldr	r2, [pc, #156]	; (80069a0 <daq_bit_set+0xf0>)
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e006      	b.n	8006916 <daq_bit_set+0x66>
    else
        self->adc_max_val = 1;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800690e:	33a4      	adds	r3, #164	; 0xa4
 8006910:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006914:	601a      	str	r2, [r3, #0]

    if (self->mode == SCOPE || self->mode == VM)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800691c:	33ac      	adds	r3, #172	; 0xac
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d006      	beq.n	8006932 <daq_bit_set+0x82>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800692a:	33ac      	adds	r3, #172	; 0xac
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d12e      	bne.n	8006990 <daq_bit_set+0xe0>
    {
        daq_enable(self, 0);
 8006932:	2100      	movs	r1, #0
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fa95 	bl	8006e64 <daq_enable>
        daq_reset(self);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fa24 	bl	8006d88 <daq_reset>
#ifndef PS_ADC_BIT8
            return -2;
#endif
        }

        uint32_t bits_raw = LL_ADC_RESOLUTION_12B;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]
#ifdef PS_ADC_BIT8
        if (bits == B8)
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	2b08      	cmp	r3, #8
 8006948:	d101      	bne.n	800694e <daq_bit_set+0x9e>
            bits_raw = LL_ADC_RESOLUTION_8B;
 800694a:	2310      	movs	r3, #16
 800694c:	60fb      	str	r3, [r7, #12]
#endif

#if defined(PS_ADC_MODE_ADC1) || defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
        adc_set_res(ADC1, bits_raw);
 800694e:	68f9      	ldr	r1, [r7, #12]
 8006950:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006954:	f003 f817 	bl	8009986 <adc_set_res>
#endif

#if defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
        adc_set_res(ADC2, bits_raw);
 8006958:	68f9      	ldr	r1, [r7, #12]
 800695a:	4812      	ldr	r0, [pc, #72]	; (80069a4 <daq_bit_set+0xf4>)
 800695c:	f003 f813 	bl	8009986 <adc_set_res>
#endif

#if defined(PS_ADC_MODE_ADC1234)
        adc_set_res(ADC3, bits_raw);
 8006960:	68f9      	ldr	r1, [r7, #12]
 8006962:	4811      	ldr	r0, [pc, #68]	; (80069a8 <daq_bit_set+0xf8>)
 8006964:	f003 f80f 	bl	8009986 <adc_set_res>
        adc_set_res(ADC4, bits_raw);
 8006968:	68f9      	ldr	r1, [r7, #12]
 800696a:	4810      	ldr	r0, [pc, #64]	; (80069ac <daq_bit_set+0xfc>)
 800696c:	f003 f80b 	bl	8009986 <adc_set_res>
#endif
        int ret = daq_mem_set(self, self->set.mem);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006976:	337c      	adds	r3, #124	; 0x7c
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff fce9 	bl	8006354 <daq_mem_set>
 8006982:	60b8      	str	r0, [r7, #8]

        daq_enable(self, 1);
 8006984:	2101      	movs	r1, #1
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fa6c 	bl	8006e64 <daq_enable>

        return ret;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	e000      	b.n	8006992 <daq_bit_set+0xe2>
    }
    return 0;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	457ff000 	.word	0x457ff000
 80069a0:	437f0000 	.word	0x437f0000
 80069a4:	50000100 	.word	0x50000100
 80069a8:	50000400 	.word	0x50000400
 80069ac:	50000500 	.word	0x50000500

080069b0 <daq_fs_set>:

int daq_fs_set(daq_data_t* self, float fs)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08a      	sub	sp, #40	; 0x28
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	ed87 0a00 	vstr	s0, [r7]
    uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80069c2:	33ac      	adds	r3, #172	; 0xac
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	bf0c      	ite	eq
 80069ca:	2301      	moveq	r3, #1
 80069cc:	2300      	movne	r3, #0
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	77fb      	strb	r3, [r7, #31]
    float fs2 = fs;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	61bb      	str	r3, [r7, #24]
    if (channs == 1)
        fs2 /= 2.0;
#endif

#elif defined(PS_ADC_MODE_ADC1234)
    float scope_max_fs = (self->set.bits == B12 ? PS_DAQ_MAX_B12_FS : PS_DAQ_MAX_B8_FS) / (float)(self->set.ch1_en ? 1 + is_vcc : 1);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80069dc:	337e      	adds	r3, #126	; 0x7e
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b0c      	cmp	r3, #12
 80069e2:	d102      	bne.n	80069ea <daq_fs_set+0x3a>
 80069e4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8006ad0 <daq_fs_set+0x120>
 80069e8:	e001      	b.n	80069ee <daq_fs_set+0x3e>
 80069ea:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8006ad4 <daq_fs_set+0x124>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80069f4:	3374      	adds	r3, #116	; 0x74
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d006      	beq.n	8006a0a <daq_fs_set+0x5a>
 80069fc:	7ffb      	ldrb	r3, [r7, #31]
 80069fe:	3301      	adds	r3, #1
 8006a00:	ee07 3a90 	vmov	s15, r3
 8006a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a08:	e001      	b.n	8006a0e <daq_fs_set+0x5e>
 8006a0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a12:	ed87 7a05 	vstr	s14, [r7, #20]
        fs2 /= 4.0;
#endif

#endif

    if (fs2 <= 0 || fs2 > (self->mode == LA ? PS_LA_MAX_FS : scope_max_fs))
 8006a16:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a22:	d912      	bls.n	8006a4a <daq_fs_set+0x9a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006a2a:	33ac      	adds	r3, #172	; 0xac
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d002      	beq.n	8006a38 <daq_fs_set+0x88>
 8006a32:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a36:	e001      	b.n	8006a3c <daq_fs_set+0x8c>
 8006a38:	eddf 7a27 	vldr	s15, [pc, #156]	; 8006ad8 <daq_fs_set+0x128>
 8006a3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8006a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a48:	d502      	bpl.n	8006a50 <daq_fs_set+0xa0>
        return -1;
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4e:	e03a      	b.n	8006ac6 <daq_fs_set+0x116>

    self->set.fs = fs;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006a56:	3378      	adds	r3, #120	; 0x78
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	601a      	str	r2, [r3, #0]

    daq_enable(self, 0);
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa00 	bl	8006e64 <daq_enable>
    daq_reset(self);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f98f 	bl	8006d88 <daq_reset>

    int prescaler = 1;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	613b      	str	r3, [r7, #16]
    int reload = 1;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
    self->set.fs = get_freq(&prescaler, &reload, PS_TIM_DAQ_MAX, PS_TIM_DAQ_FREQ, fs2);
 8006a72:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a7a:	ee17 3a90 	vmov	r3, s15
 8006a7e:	f107 010c 	add.w	r1, r7, #12
 8006a82:	f107 0010 	add.w	r0, r7, #16
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	4b14      	ldr	r3, [pc, #80]	; (8006adc <daq_fs_set+0x12c>)
 8006a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a8e:	f004 ffd3 	bl	800ba38 <get_freq>
 8006a92:	eef0 7a40 	vmov.f32	s15, s0
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006a9c:	3378      	adds	r3, #120	; 0x78
 8006a9e:	edc3 7a00 	vstr	s15, [r3]

    LL_TIM_SetPrescaler(PS_TIM_DAQ, prescaler);
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	480e      	ldr	r0, [pc, #56]	; (8006ae0 <daq_fs_set+0x130>)
 8006aa8:	f7ff fa4e 	bl	8005f48 <LL_TIM_SetPrescaler>
    LL_TIM_SetAutoReload(PS_TIM_DAQ, reload);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	480b      	ldr	r0, [pc, #44]	; (8006ae0 <daq_fs_set+0x130>)
 8006ab2:	f7ff fa57 	bl	8005f64 <LL_TIM_SetAutoReload>

    daq_trig_update(self);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 fc74 	bl	80083a4 <daq_trig_update>
    daq_enable(self, 1);
 8006abc:	2101      	movs	r1, #1
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f9d0 	bl	8006e64 <daq_enable>
    return 0;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	48c35000 	.word	0x48c35000
 8006ad4:	48f42400 	.word	0x48f42400
 8006ad8:	4a989680 	.word	0x4a989680
 8006adc:	044aa200 	.word	0x044aa200
 8006ae0:	40000400 	.word	0x40000400
 8006ae4:	00000000 	.word	0x00000000

08006ae8 <daq_ch_set>:

int daq_ch_set(daq_data_t* self, uint8_t ch1, uint8_t ch2, uint8_t ch3, uint8_t ch4, float fs)
{
 8006ae8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006aec:	b090      	sub	sp, #64	; 0x40
 8006aee:	af04      	add	r7, sp, #16
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	4608      	mov	r0, r1
 8006af4:	4611      	mov	r1, r2
 8006af6:	461a      	mov	r2, r3
 8006af8:	ed87 0a01 	vstr	s0, [r7, #4]
 8006afc:	4603      	mov	r3, r0
 8006afe:	72fb      	strb	r3, [r7, #11]
 8006b00:	460b      	mov	r3, r1
 8006b02:	72bb      	strb	r3, [r7, #10]
 8006b04:	4613      	mov	r3, r2
 8006b06:	727b      	strb	r3, [r7, #9]
    self->set.ch1_en = ch1;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006b0e:	3374      	adds	r3, #116	; 0x74
 8006b10:	7afa      	ldrb	r2, [r7, #11]
 8006b12:	701a      	strb	r2, [r3, #0]
    self->set.ch2_en = ch2;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006b1a:	3375      	adds	r3, #117	; 0x75
 8006b1c:	7aba      	ldrb	r2, [r7, #10]
 8006b1e:	701a      	strb	r2, [r3, #0]
    self->set.ch3_en = ch3;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006b26:	3376      	adds	r3, #118	; 0x76
 8006b28:	7a7a      	ldrb	r2, [r7, #9]
 8006b2a:	701a      	strb	r2, [r3, #0]
    self->set.ch4_en = ch4;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006b32:	3377      	adds	r3, #119	; 0x77
 8006b34:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8006b38:	701a      	strb	r2, [r3, #0]

    if (self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en == 0)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006b40:	3374      	adds	r3, #116	; 0x74
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006b4c:	3375      	adds	r3, #117	; 0x75
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	441a      	add	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006b58:	3376      	adds	r3, #118	; 0x76
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	441a      	add	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006b64:	3377      	adds	r3, #119	; 0x77
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	4413      	add	r3, r2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d102      	bne.n	8006b74 <daq_ch_set+0x8c>
        return -1;
 8006b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b72:	e0f3      	b.n	8006d5c <daq_ch_set+0x274>

    int reen = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (self->enabled)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006b7e:	33ae      	adds	r3, #174	; 0xae
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d008      	beq.n	8006b98 <daq_ch_set+0xb0>
    {
        reen = 1;
 8006b86:	2301      	movs	r3, #1
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        daq_enable(self, 0);
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 f969 	bl	8006e64 <daq_enable>
        daq_reset(self);
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f8f8 	bl	8006d88 <daq_reset>
    }

    if (self->mode != LA)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006b9e:	33ac      	adds	r3, #172	; 0xac
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	f000 80c8 	beq.w	8006d38 <daq_ch_set+0x250>
    {
        if (fs <= 0)
 8006ba8:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb4:	d802      	bhi.n	8006bbc <daq_ch_set+0xd4>
            return -1;
 8006bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bba:	e0cf      	b.n	8006d5c <daq_ch_set+0x274>

        uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006bc2:	33ac      	adds	r3, #172	; 0xac
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	77fb      	strb	r3, [r7, #31]
        uint32_t smpl_time = PS_ADC_SMPLT[0];
 8006bd2:	4b67      	ldr	r3, [pc, #412]	; (8006d70 <daq_ch_set+0x288>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28
        float smpl_time_n = PS_ADC_SMPLT_N[0];
 8006bd8:	4b66      	ldr	r3, [pc, #408]	; (8006d74 <daq_ch_set+0x28c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
        int channs = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	61bb      	str	r3, [r7, #24]
#elif defined(PS_ADC_MODE_ADC12)
        int len1 = self->set.ch1_en + self->set.ch2_en + is_vcc;
        int len2 = self->set.ch3_en + self->set.ch4_en;
        channs = len1 > len2 ? len1 : len2;
#elif defined(PS_ADC_MODE_ADC1234)
        channs = is_vcc ? 2 : 1;
 8006be2:	7ffb      	ldrb	r3, [r7, #31]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <daq_ch_set+0x104>
 8006be8:	2302      	movs	r3, #2
 8006bea:	e000      	b.n	8006bee <daq_ch_set+0x106>
 8006bec:	2301      	movs	r3, #1
 8006bee:	61bb      	str	r3, [r7, #24]
#endif

        float T = 1.0 / fs;
 8006bf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf4:	ed97 7a01 	vldr	s14, [r7, #4]
 8006bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bfc:	edc7 7a05 	vstr	s15, [r7, #20]
        for (int i = 0; i < PS_ADC_SMPLT_CNT; i++) // find best sample time
 8006c00:	2300      	movs	r3, #0
 8006c02:	623b      	str	r3, [r7, #32]
 8006c04:	e05b      	b.n	8006cbe <daq_ch_set+0x1d6>
        {
            if (((float)channs * PS_ADC_1CH_SMPL_TM(PS_ADC_SMPLT_N[i] + 0.5, (self->set.bits == B12 ? PS_ADC_TCONV12 : PS_ADC_TCONV8))) < T)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c10:	ee17 0a90 	vmov	r0, s15
 8006c14:	f7f9 fcb0 	bl	8000578 <__aeabi_f2d>
 8006c18:	4604      	mov	r4, r0
 8006c1a:	460d      	mov	r5, r1
 8006c1c:	4a55      	ldr	r2, [pc, #340]	; (8006d74 <daq_ch_set+0x28c>)
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7f9 fca6 	bl	8000578 <__aeabi_f2d>
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	4b51      	ldr	r3, [pc, #324]	; (8006d78 <daq_ch_set+0x290>)
 8006c32:	f7f9 fb43 	bl	80002bc <__adddf3>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4690      	mov	r8, r2
 8006c3c:	4699      	mov	r9, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006c44:	337e      	adds	r3, #126	; 0x7e
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b0c      	cmp	r3, #12
 8006c4a:	d103      	bne.n	8006c54 <daq_ch_set+0x16c>
 8006c4c:	f04f 0000 	mov.w	r0, #0
 8006c50:	494a      	ldr	r1, [pc, #296]	; (8006d7c <daq_ch_set+0x294>)
 8006c52:	e002      	b.n	8006c5a <daq_ch_set+0x172>
 8006c54:	f04f 0000 	mov.w	r0, #0
 8006c58:	4949      	ldr	r1, [pc, #292]	; (8006d80 <daq_ch_set+0x298>)
 8006c5a:	4642      	mov	r2, r8
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	f7f9 fb2d 	bl	80002bc <__adddf3>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4610      	mov	r0, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	a33f      	add	r3, pc, #252	; (adr r3, 8006d68 <daq_ch_set+0x280>)
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	f7f9 fcda 	bl	8000628 <__aeabi_dmul>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4620      	mov	r0, r4
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	f7f9 fcd4 	bl	8000628 <__aeabi_dmul>
 8006c80:	4603      	mov	r3, r0
 8006c82:	460c      	mov	r4, r1
 8006c84:	4625      	mov	r5, r4
 8006c86:	461c      	mov	r4, r3
 8006c88:	6978      	ldr	r0, [r7, #20]
 8006c8a:	f7f9 fc75 	bl	8000578 <__aeabi_f2d>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4620      	mov	r0, r4
 8006c94:	4629      	mov	r1, r5
 8006c96:	f7f9 ff39 	bl	8000b0c <__aeabi_dcmplt>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d100      	bne.n	8006ca2 <daq_ch_set+0x1ba>
                smpl_time = PS_ADC_SMPLT[i];
                smpl_time_n = PS_ADC_SMPLT_N[i];
            }
            else
            {
                break;
 8006ca0:	e010      	b.n	8006cc4 <daq_ch_set+0x1dc>
                smpl_time = PS_ADC_SMPLT[i];
 8006ca2:	4a33      	ldr	r2, [pc, #204]	; (8006d70 <daq_ch_set+0x288>)
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
                smpl_time_n = PS_ADC_SMPLT_N[i];
 8006cac:	4a31      	ldr	r2, [pc, #196]	; (8006d74 <daq_ch_set+0x28c>)
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
        for (int i = 0; i < PS_ADC_SMPLT_CNT; i++) // find best sample time
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	623b      	str	r3, [r7, #32]
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	2b07      	cmp	r3, #7
 8006cc2:	dda0      	ble.n	8006c06 <daq_ch_set+0x11e>
            }
        }
        self->smpl_time = smpl_time_n;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006cca:	33a0      	adds	r3, #160	; 0xa0
 8006ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cce:	601a      	str	r2, [r3, #0]
        else
            self->interleaved = 0;
#endif

#elif defined(PS_ADC_MODE_ADC1234) /* --------------------------------------------------------------------------*/
        adc_set_ch(ADC1, ch1, 0, 0, 0, smpl_time, is_vcc);
 8006cd0:	7af9      	ldrb	r1, [r7, #11]
 8006cd2:	7ffb      	ldrb	r3, [r7, #31]
 8006cd4:	9302      	str	r3, [sp, #8]
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006ce6:	f002 fd67 	bl	80097b8 <adc_set_ch>
        adc_set_ch(ADC2, 0, ch2, 0, 0, smpl_time, 0);
 8006cea:	7aba      	ldrb	r2, [r7, #10]
 8006cec:	2300      	movs	r3, #0
 8006cee:	9302      	str	r3, [sp, #8]
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	9301      	str	r3, [sp, #4]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	4821      	ldr	r0, [pc, #132]	; (8006d84 <daq_ch_set+0x29c>)
 8006cfe:	f002 fd5b 	bl	80097b8 <adc_set_ch>
        adc_set_ch(ADC1, 0, 0, ch3, 0, smpl_time, 0);
 8006d02:	7a7a      	ldrb	r2, [r7, #9]
 8006d04:	2300      	movs	r3, #0
 8006d06:	9302      	str	r3, [sp, #8]
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	4613      	mov	r3, r2
 8006d12:	2200      	movs	r2, #0
 8006d14:	2100      	movs	r1, #0
 8006d16:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006d1a:	f002 fd4d 	bl	80097b8 <adc_set_ch>
        adc_set_ch(ADC2, 0, 0, 0, ch4, smpl_time, 0);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	9302      	str	r3, [sp, #8]
 8006d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	2200      	movs	r2, #0
 8006d30:	2100      	movs	r1, #0
 8006d32:	4814      	ldr	r0, [pc, #80]	; (8006d84 <daq_ch_set+0x29c>)
 8006d34:	f002 fd40 	bl	80097b8 <adc_set_ch>
#endif

#endif
    }

    int ret = daq_mem_set(self, self->set.mem);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006d3e:	337c      	adds	r3, #124	; 0x7c
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	4619      	mov	r1, r3
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff fb05 	bl	8006354 <daq_mem_set>
 8006d4a:	6138      	str	r0, [r7, #16]

    if (reen)
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <daq_ch_set+0x272>
        daq_enable(self, 1);
 8006d52:	2101      	movs	r1, #1
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 f885 	bl	8006e64 <daq_enable>
    return ret;
 8006d5a:	693b      	ldr	r3, [r7, #16]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3730      	adds	r7, #48	; 0x30
 8006d60:	46bd      	mov	sp, r7
 8006d62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006d66:	bf00      	nop
 8006d68:	5698c2c2 	.word	0x5698c2c2
 8006d6c:	3e4dd37f 	.word	0x3e4dd37f
 8006d70:	08013d34 	.word	0x08013d34
 8006d74:	08013d54 	.word	0x08013d54
 8006d78:	3fe00000 	.word	0x3fe00000
 8006d7c:	40290000 	.word	0x40290000
 8006d80:	40210000 	.word	0x40210000
 8006d84:	50000100 	.word	0x50000100

08006d88 <daq_reset>:

void daq_reset(daq_data_t* self)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
    self->trig.uwtick_first = 0;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8006d96:	330c      	adds	r3, #12
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
    self->trig.pretrig_cntr = 0;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8006da2:	3310      	adds	r3, #16
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]
    self->trig.posttrig_size = 0;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8006dae:	331c      	adds	r3, #28
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
    self->trig.ready_last = 0;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006dba:	33f3      	adds	r3, #243	; 0xf3
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
    self->trig.ready = 0;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006dc6:	33f2      	adds	r3, #242	; 0xf2
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
    self->trig.cntr = 0;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006dd2:	33f4      	adds	r3, #244	; 0xf4
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]
    self->trig.all_cntr = 0;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006dde:	33f8      	adds	r3, #248	; 0xf8
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
    //self->trig.pos_frst = 0;
    //self->trig.pos_trig = 0;
    //self->trig.pos_last = 0;
    //self->trig.pos_diff = 0;
    self->trig.pretrig_cntr = 0;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8006dea:	3310      	adds	r3, #16
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
    self->trig.is_post = 0;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006df6:	33f0      	adds	r3, #240	; 0xf0
 8006df8:	2200      	movs	r2, #0
 8006dfa:	701a      	strb	r2, [r3, #0]

    if (self->buff1.len > 0)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	88db      	ldrh	r3, [r3, #6]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <daq_reset+0x8c>
        memset(self->buff1.data, 0, self->buff1.len);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	88db      	ldrh	r3, [r3, #6]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	2100      	movs	r1, #0
 8006e10:	f00a fc6c 	bl	80116ec <memset>
    if (self->buff2.len > 0)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	8a5b      	ldrh	r3, [r3, #18]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d007      	beq.n	8006e2c <daq_reset+0xa4>
        memset(self->buff2.data, 0, self->buff2.len);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68d8      	ldr	r0, [r3, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	8a5b      	ldrh	r3, [r3, #18]
 8006e24:	461a      	mov	r2, r3
 8006e26:	2100      	movs	r1, #0
 8006e28:	f00a fc60 	bl	80116ec <memset>
    if (self->buff3.len > 0)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	8bdb      	ldrh	r3, [r3, #30]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d007      	beq.n	8006e44 <daq_reset+0xbc>
        memset(self->buff3.data, 0, self->buff3.len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6998      	ldr	r0, [r3, #24]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8bdb      	ldrh	r3, [r3, #30]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	2100      	movs	r1, #0
 8006e40:	f00a fc54 	bl	80116ec <memset>
    if (self->buff4.len > 0)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d007      	beq.n	8006e5c <daq_reset+0xd4>
        memset(self->buff4.data, 0, self->buff4.len);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e54:	461a      	mov	r2, r3
 8006e56:	2100      	movs	r1, #0
 8006e58:	f00a fc48 	bl	80116ec <memset>
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <daq_enable>:

void daq_enable(daq_data_t* self, uint8_t enable)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
    if (!enable)
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d102      	bne.n	8006e7c <daq_enable+0x18>
    {
        LL_TIM_DisableCounter(PS_TIM_DAQ);
 8006e76:	485c      	ldr	r0, [pc, #368]	; (8006fe8 <daq_enable+0x184>)
 8006e78:	f7ff f856 	bl	8005f28 <LL_TIM_DisableCounter>
        //for (int i = 0; i < 1000; i++) __asm("nop");
    }

    if (self->enabled && self->dis_hold)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006e82:	33ae      	adds	r3, #174	; 0xae
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d007      	beq.n	8006e9a <daq_enable+0x36>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006e90:	33ad      	adds	r3, #173	; 0xad
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f040 80a3 	bne.w	8006fe0 <daq_enable+0x17c>
        return;

    self->trig.pretrig_cntr = 0;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8006ea0:	3310      	adds	r3, #16
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
    self->trig.all_cntr = 0;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006eac:	33f8      	adds	r3, #248	; 0xf8
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]
    self->trig.cntr = 0;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006eb8:	33f4      	adds	r3, #244	; 0xf4
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]
    self->trig.ignore = 0;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006ec4:	33f1      	adds	r3, #241	; 0xf1
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	701a      	strb	r2, [r3, #0]

    if (self->mode == SCOPE || self->mode == VM)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006ed0:	33ac      	adds	r3, #172	; 0xac
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d006      	beq.n	8006ee6 <daq_enable+0x82>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006ede:	33ac      	adds	r3, #172	; 0xac
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d120      	bne.n	8006f28 <daq_enable+0xc4>
    {

#if defined(PS_ADC_MODE_ADC1) || defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
        daq_enable_adc(self, ADC1, enable, PS_DMA_CH_ADC1);
 8006ee6:	78fa      	ldrb	r2, [r7, #3]
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f884 	bl	8006ffc <daq_enable_adc>
#endif

        if (!self->interleaved)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006efa:	33af      	adds	r3, #175	; 0xaf
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d14a      	bne.n	8006f98 <daq_enable+0x134>
        {
#if defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
        daq_enable_adc(self, ADC2, enable, PS_DMA_CH_ADC2);
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	2301      	movs	r3, #1
 8006f06:	4939      	ldr	r1, [pc, #228]	; (8006fec <daq_enable+0x188>)
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f877 	bl	8006ffc <daq_enable_adc>
#endif

#if defined(PS_ADC_MODE_ADC1234)
        daq_enable_adc(self, ADC3, enable, PS_DMA_CH_ADC3);
 8006f0e:	78fa      	ldrb	r2, [r7, #3]
 8006f10:	2305      	movs	r3, #5
 8006f12:	4937      	ldr	r1, [pc, #220]	; (8006ff0 <daq_enable+0x18c>)
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f871 	bl	8006ffc <daq_enable_adc>
        daq_enable_adc(self, ADC4, enable, PS_DMA_CH_ADC4);
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	4935      	ldr	r1, [pc, #212]	; (8006ff4 <daq_enable+0x190>)
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f86b 	bl	8006ffc <daq_enable_adc>
        if (!self->interleaved)
 8006f26:	e037      	b.n	8006f98 <daq_enable+0x134>
        }

    }
    else //if(self->mode == LA)
    {
        ASSERT(self->trig.exti_trig != 0);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8006f2e:	3334      	adds	r3, #52	; 0x34
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d104      	bne.n	8006f40 <daq_enable+0xdc>
 8006f36:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8006f3a:	482f      	ldr	r0, [pc, #188]	; (8006ff8 <daq_enable+0x194>)
 8006f3c:	f004 fbc4 	bl	800b6c8 <assert2>

        if (enable)
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01c      	beq.n	8006f80 <daq_enable+0x11c>
        {
            LL_TIM_EnableDMAReq_CC1(PS_TIM_DAQ);
 8006f46:	4828      	ldr	r0, [pc, #160]	; (8006fe8 <daq_enable+0x184>)
 8006f48:	f7ff f81a 	bl	8005f80 <LL_TIM_EnableDMAReq_CC1>
            NVIC_ClearPendingIRQ(self->trig.exti_trig);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8006f52:	3334      	adds	r3, #52	; 0x34
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	b25b      	sxtb	r3, r3
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe fecf 	bl	8005cfc <__NVIC_ClearPendingIRQ>
            if (self->trig.set.mode != DISABLED)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006f64:	33b8      	adds	r3, #184	; 0xb8
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d015      	beq.n	8006f98 <daq_enable+0x134>
                NVIC_EnableIRQ(self->trig.exti_trig);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8006f72:	3334      	adds	r3, #52	; 0x34
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	b25b      	sxtb	r3, r3
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe fe7f 	bl	8005c7c <__NVIC_EnableIRQ>
 8006f7e:	e00b      	b.n	8006f98 <daq_enable+0x134>
            //LL_EXTI_EnableIT_0_31(PS_LA_EXTI1);
        }
        else
        {
            LL_TIM_DisableDMAReq_CC1(PS_TIM_DAQ);
 8006f80:	4819      	ldr	r0, [pc, #100]	; (8006fe8 <daq_enable+0x184>)
 8006f82:	f7ff f80d 	bl	8005fa0 <LL_TIM_DisableDMAReq_CC1>
            NVIC_DisableIRQ(self->trig.exti_trig);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8006f8c:	3334      	adds	r3, #52	; 0x34
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	b25b      	sxtb	r3, r3
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe fe90 	bl	8005cb8 <__NVIC_DisableIRQ>
        }
    }
    if (enable)
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <daq_enable+0x142>
        LL_TIM_EnableCounter(PS_TIM_DAQ);
 8006f9e:	4812      	ldr	r0, [pc, #72]	; (8006fe8 <daq_enable+0x184>)
 8006fa0:	f7fe ffb2 	bl	8005f08 <LL_TIM_EnableCounter>
 8006fa4:	e00b      	b.n	8006fbe <daq_enable+0x15a>
    else
        for (int i = 0; i < 10000; i++) __asm("nop"); // let DMA and ADC finish their jobs
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	e003      	b.n	8006fb4 <daq_enable+0x150>
 8006fac:	bf00      	nop
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f242 720f 	movw	r2, #9999	; 0x270f
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	ddf6      	ble.n	8006fac <daq_enable+0x148>

    self->enabled = enable;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006fc4:	33ae      	adds	r3, #174	; 0xae
 8006fc6:	78fa      	ldrb	r2, [r7, #3]
 8006fc8:	701a      	strb	r2, [r3, #0]
    self->trig.uwtick_first = self->uwTick;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8006fd0:	33a8      	adds	r3, #168	; 0xa8
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8006fda:	330c      	adds	r3, #12
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e000      	b.n	8006fe2 <daq_enable+0x17e>
        return;
 8006fe0:	bf00      	nop
}
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	40000400 	.word	0x40000400
 8006fec:	50000100 	.word	0x50000100
 8006ff0:	50000400 	.word	0x50000400
 8006ff4:	50000500 	.word	0x50000500
 8006ff8:	080138d0 	.word	0x080138d0

08006ffc <daq_enable_adc>:

static void daq_enable_adc(daq_data_t* self, ADC_TypeDef* adc, uint8_t enable, uint32_t dma_ch)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	4613      	mov	r3, r2
 800700a:	71fb      	strb	r3, [r7, #7]
    if (enable)
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <daq_enable_adc+0x1e>
    {
#ifdef LL_ADC_SPEC_START
        LL_ADC_REG_StartConversionExtTrig(adc, LL_ADC_REG_TRIG_EXT_RISING);
#else
        LL_ADC_REG_StartConversion(adc);
 8007012:	68b8      	ldr	r0, [r7, #8]
 8007014:	f7fe ff50 	bl	8005eb8 <LL_ADC_REG_StartConversion>
#else
        LL_ADC_REG_StopConversion(adc);
#endif
        LL_ADC_SetAnalogWDMonitChannels(adc, PS_ADC_AWD LL_ADC_AWD_DISABLE);
    }
}
 8007018:	e007      	b.n	800702a <daq_enable_adc+0x2e>
        LL_ADC_REG_StopConversion(adc);
 800701a:	68b8      	ldr	r0, [r7, #8]
 800701c:	f7fe ff60 	bl	8005ee0 <LL_ADC_REG_StopConversion>
        LL_ADC_SetAnalogWDMonitChannels(adc, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 8007020:	2200      	movs	r2, #0
 8007022:	4904      	ldr	r1, [pc, #16]	; (8007034 <daq_enable_adc+0x38>)
 8007024:	68b8      	ldr	r0, [r7, #8]
 8007026:	f7fe ff0d 	bl	8005e44 <LL_ADC_SetAnalogWDMonitChannels>
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	7dc00000 	.word	0x7dc00000

08007038 <daq_mode_set>:

void daq_mode_set(daq_data_t* self, enum daq_mode mode)
{
 8007038:	b590      	push	{r4, r7, lr}
 800703a:	b091      	sub	sp, #68	; 0x44
 800703c:	af02      	add	r7, sp, #8
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
    if (self->mode == SCOPE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800704a:	33ac      	adds	r3, #172	; 0xac
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d112      	bne.n	8007078 <daq_mode_set+0x40>
        daq_settings_save(&self->set, &self->trig.set, &self->save_s, &self->trig.save_s);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f503 4030 	add.w	r0, r3, #45056	; 0xb000
 8007058:	3074      	adds	r0, #116	; 0x74
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f503 4130 	add.w	r1, r3, #45056	; 0xb000
 8007060:	31b4      	adds	r1, #180	; 0xb4
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f503 4230 	add.w	r2, r3, #45056	; 0xb000
 8007068:	3280      	adds	r2, #128	; 0x80
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007070:	33c8      	adds	r3, #200	; 0xc8
 8007072:	f7ff f882 	bl	800617a <daq_settings_save>
 8007076:	e018      	b.n	80070aa <daq_mode_set+0x72>
    else if (self->mode == LA)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800707e:	33ac      	adds	r3, #172	; 0xac
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2b02      	cmp	r3, #2
 8007084:	d111      	bne.n	80070aa <daq_mode_set+0x72>
        daq_settings_save(&self->set, &self->trig.set, &self->save_l, &self->trig.save_l);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f503 4030 	add.w	r0, r3, #45056	; 0xb000
 800708c:	3074      	adds	r0, #116	; 0x74
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f503 4130 	add.w	r1, r3, #45056	; 0xb000
 8007094:	31b4      	adds	r1, #180	; 0xb4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f503 4230 	add.w	r2, r3, #45056	; 0xb000
 800709c:	328c      	adds	r2, #140	; 0x8c
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80070a4:	33dc      	adds	r3, #220	; 0xdc
 80070a6:	f7ff f868 	bl	800617a <daq_settings_save>

    daq_enable(self, 0);
 80070aa:	2100      	movs	r1, #0
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff fed9 	bl	8006e64 <daq_enable>
    daq_reset(self);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff fe68 	bl	8006d88 <daq_reset>
    self->dis_hold = 1;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80070be:	33ad      	adds	r3, #173	; 0xad
 80070c0:	2201      	movs	r2, #1
 80070c2:	701a      	strb	r2, [r3, #0]
    self->mode = mode;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80070ca:	33ac      	adds	r3, #172	; 0xac
 80070cc:	78fa      	ldrb	r2, [r7, #3]
 80070ce:	701a      	strb	r2, [r3, #0]

    // GPIO init
    if (mode == SCOPE || mode == VM)
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <daq_mode_set+0xa4>
 80070d6:	78fb      	ldrb	r3, [r7, #3]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d12e      	bne.n	800713a <daq_mode_set+0x102>
    {
        LL_GPIO_InitTypeDef GPIO_InitStruct =
 80070dc:	f107 0320 	add.w	r3, r7, #32
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	605a      	str	r2, [r3, #4]
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	60da      	str	r2, [r3, #12]
 80070ea:	611a      	str	r2, [r3, #16]
 80070ec:	615a      	str	r2, [r3, #20]
 80070ee:	2301      	movs	r3, #1
 80070f0:	623b      	str	r3, [r7, #32]
 80070f2:	2303      	movs	r3, #3
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
 80070f6:	2303      	movs	r3, #3
 80070f8:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            .Pin = PS_GPIO_ADC_CH1,
            .Speed = LL_GPIO_SPEED_FREQ_HIGH,
            .Mode = LL_GPIO_MODE_ANALOG
        };
        LL_GPIO_Init(PS_GPIO_ADC_PORT1, &GPIO_InitStruct);
 80070fa:	f107 0320 	add.w	r3, r7, #32
 80070fe:	4619      	mov	r1, r3
 8007100:	489b      	ldr	r0, [pc, #620]	; (8007370 <daq_mode_set+0x338>)
 8007102:	f7fc fe54 	bl	8003dae <LL_GPIO_Init>
        GPIO_InitStruct.Pin = PS_GPIO_ADC_CH2;
 8007106:	2302      	movs	r3, #2
 8007108:	623b      	str	r3, [r7, #32]
        LL_GPIO_Init(PS_GPIO_ADC_PORT2, &GPIO_InitStruct);
 800710a:	f107 0320 	add.w	r3, r7, #32
 800710e:	4619      	mov	r1, r3
 8007110:	4897      	ldr	r0, [pc, #604]	; (8007370 <daq_mode_set+0x338>)
 8007112:	f7fc fe4c 	bl	8003dae <LL_GPIO_Init>
        GPIO_InitStruct.Pin = PS_GPIO_ADC_CH3;
 8007116:	2301      	movs	r3, #1
 8007118:	623b      	str	r3, [r7, #32]
        LL_GPIO_Init(PS_GPIO_ADC_PORT3, &GPIO_InitStruct);
 800711a:	f107 0320 	add.w	r3, r7, #32
 800711e:	4619      	mov	r1, r3
 8007120:	4894      	ldr	r0, [pc, #592]	; (8007374 <daq_mode_set+0x33c>)
 8007122:	f7fc fe44 	bl	8003dae <LL_GPIO_Init>
        GPIO_InitStruct.Pin = PS_GPIO_ADC_CH4;
 8007126:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800712a:	623b      	str	r3, [r7, #32]
        LL_GPIO_Init(PS_GPIO_ADC_PORT4, &GPIO_InitStruct);
 800712c:	f107 0320 	add.w	r3, r7, #32
 8007130:	4619      	mov	r1, r3
 8007132:	4890      	ldr	r0, [pc, #576]	; (8007374 <daq_mode_set+0x33c>)
 8007134:	f7fc fe3b 	bl	8003dae <LL_GPIO_Init>
    {
 8007138:	e012      	b.n	8007160 <daq_mode_set+0x128>
    }
    else // if (mode == LA)
    {
        LL_GPIO_InitTypeDef GPIO_InitStruct =
 800713a:	f107 0308 	add.w	r3, r7, #8
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	605a      	str	r2, [r3, #4]
 8007144:	609a      	str	r2, [r3, #8]
 8007146:	60da      	str	r2, [r3, #12]
 8007148:	611a      	str	r2, [r3, #16]
 800714a:	615a      	str	r2, [r3, #20]
 800714c:	230f      	movs	r3, #15
 800714e:	60bb      	str	r3, [r7, #8]
 8007150:	2303      	movs	r3, #3
 8007152:	613b      	str	r3, [r7, #16]
        {
            .Pin = PS_GPIO_LA_CH1 | PS_GPIO_LA_CH2 | PS_GPIO_LA_CH3 | PS_GPIO_LA_CH4,
            .Speed = LL_GPIO_SPEED_FREQ_HIGH,
            .Mode = LL_GPIO_MODE_INPUT //LL_GPIO_MODE_FLOATING;
        };
        LL_GPIO_Init(PS_GPIO_LA_PORT, &GPIO_InitStruct);
 8007154:	f107 0308 	add.w	r3, r7, #8
 8007158:	4619      	mov	r1, r3
 800715a:	4885      	ldr	r0, [pc, #532]	; (8007370 <daq_mode_set+0x338>)
 800715c:	f7fc fe27 	bl	8003dae <LL_GPIO_Init>
    }

    // DAQ init
    if (mode == SCOPE)
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d166      	bne.n	8007234 <daq_mode_set+0x1fc>
    {
        daq_mem_set(self, 3); // safety guard
 8007166:	2103      	movs	r1, #3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff f8f3 	bl	8006354 <daq_mem_set>
        daq_bit_set(self, self->save_s.bits);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007174:	338a      	adds	r3, #138	; 0x8a
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff fb98 	bl	80068b0 <daq_bit_set>
        daq_ch_set(self, self->save_s.ch1_en, self->save_s.ch2_en, self->save_s.ch3_en, self->save_s.ch4_en, self->save_s.fs);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007186:	3380      	adds	r3, #128	; 0x80
 8007188:	7819      	ldrb	r1, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007190:	3381      	adds	r3, #129	; 0x81
 8007192:	7818      	ldrb	r0, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800719a:	3382      	adds	r3, #130	; 0x82
 800719c:	781c      	ldrb	r4, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80071a4:	3383      	adds	r3, #131	; 0x83
 80071a6:	781a      	ldrb	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80071ae:	3384      	adds	r3, #132	; 0x84
 80071b0:	edd3 7a00 	vldr	s15, [r3]
 80071b4:	9200      	str	r2, [sp, #0]
 80071b6:	eeb0 0a67 	vmov.f32	s0, s15
 80071ba:	4623      	mov	r3, r4
 80071bc:	4602      	mov	r2, r0
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7ff fc92 	bl	8006ae8 <daq_ch_set>
        daq_fs_set(self, self->save_s.fs);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80071ca:	3384      	adds	r3, #132	; 0x84
 80071cc:	edd3 7a00 	vldr	s15, [r3]
 80071d0:	eeb0 0a67 	vmov.f32	s0, s15
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff fbeb 	bl	80069b0 <daq_fs_set>
        daq_mem_set(self, self->save_s.mem);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80071e0:	3388      	adds	r3, #136	; 0x88
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff f8b4 	bl	8006354 <daq_mem_set>
        daq_trig_set(self, self->trig.save_s.ch, self->trig.save_s.val, self->trig.save_s.edge,
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80071f2:	33d0      	adds	r3, #208	; 0xd0
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461c      	mov	r4, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80071fe:	33d4      	adds	r3, #212	; 0xd4
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	b2d9      	uxtb	r1, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800720a:	33cd      	adds	r3, #205	; 0xcd
 800720c:	7818      	ldrb	r0, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007214:	33cc      	adds	r3, #204	; 0xcc
 8007216:	781a      	ldrb	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800721e:	33c8      	adds	r3, #200	; 0xc8
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	9200      	str	r2, [sp, #0]
 8007226:	4603      	mov	r3, r0
 8007228:	460a      	mov	r2, r1
 800722a:	4621      	mov	r1, r4
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 f8e5 	bl	80083fc <daq_trig_set>
 8007232:	e08e      	b.n	8007352 <daq_mode_set+0x31a>
                     self->trig.save_s.mode, self->trig.save_s.pretrigger);
    }
    else if (mode == VM)
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d125      	bne.n	8007286 <daq_mode_set+0x24e>
    {
        daq_mem_set(self, 3); // safety guard
 800723a:	2103      	movs	r1, #3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff f889 	bl	8006354 <daq_mem_set>
        daq_bit_set(self, B12);
 8007242:	210c      	movs	r1, #12
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff fb33 	bl	80068b0 <daq_bit_set>
        daq_ch_set(self, 1, 1, 1, 1, PS_VM_FS);
 800724a:	2301      	movs	r3, #1
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8007378 <daq_mode_set+0x340>
 8007252:	2301      	movs	r3, #1
 8007254:	2201      	movs	r2, #1
 8007256:	2101      	movs	r1, #1
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff fc45 	bl	8006ae8 <daq_ch_set>
        daq_mem_set(self, PS_VM_MEM);
 800725e:	21c8      	movs	r1, #200	; 0xc8
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff f877 	bl	8006354 <daq_mem_set>
        daq_fs_set(self, PS_VM_FS);
 8007266:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8007378 <daq_mode_set+0x340>
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff fba0 	bl	80069b0 <daq_fs_set>
        daq_trig_set(self, 0, 0, RISING, DISABLED, 50);
 8007270:	2332      	movs	r3, #50	; 0x32
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	2303      	movs	r3, #3
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	2300      	movs	r3, #0
 800727a:	2200      	movs	r2, #0
 800727c:	2100      	movs	r1, #0
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 f8bc 	bl	80083fc <daq_trig_set>
 8007284:	e065      	b.n	8007352 <daq_mode_set+0x31a>
    }
    else // if (mode == LA)
    {
        daq_mem_set(self, 3); // safety guard
 8007286:	2103      	movs	r1, #3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff f863 	bl	8006354 <daq_mem_set>
        daq_bit_set(self, self->save_l.bits);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007294:	3396      	adds	r3, #150	; 0x96
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff fb08 	bl	80068b0 <daq_bit_set>
        daq_ch_set(self, self->save_l.ch1_en, self->save_l.ch2_en, self->save_l.ch3_en, self->save_l.ch4_en, self->save_l.fs);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80072a6:	338c      	adds	r3, #140	; 0x8c
 80072a8:	7819      	ldrb	r1, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80072b0:	338d      	adds	r3, #141	; 0x8d
 80072b2:	7818      	ldrb	r0, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80072ba:	338e      	adds	r3, #142	; 0x8e
 80072bc:	781c      	ldrb	r4, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80072c4:	338f      	adds	r3, #143	; 0x8f
 80072c6:	781a      	ldrb	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80072ce:	3390      	adds	r3, #144	; 0x90
 80072d0:	edd3 7a00 	vldr	s15, [r3]
 80072d4:	9200      	str	r2, [sp, #0]
 80072d6:	eeb0 0a67 	vmov.f32	s0, s15
 80072da:	4623      	mov	r3, r4
 80072dc:	4602      	mov	r2, r0
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff fc02 	bl	8006ae8 <daq_ch_set>
        daq_fs_set(self, self->save_l.fs);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80072ea:	3390      	adds	r3, #144	; 0x90
 80072ec:	edd3 7a00 	vldr	s15, [r3]
 80072f0:	eeb0 0a67 	vmov.f32	s0, s15
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff fb5b 	bl	80069b0 <daq_fs_set>
        daq_mem_set(self, self->save_l.mem);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007300:	3394      	adds	r3, #148	; 0x94
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7ff f824 	bl	8006354 <daq_mem_set>
        daq_trig_set(self, self->trig.save_l.ch, self->trig.save_l.val, self->trig.save_l.edge,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007312:	33e4      	adds	r3, #228	; 0xe4
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461c      	mov	r4, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800731e:	33e8      	adds	r3, #232	; 0xe8
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	b2d9      	uxtb	r1, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800732a:	33e1      	adds	r3, #225	; 0xe1
 800732c:	7818      	ldrb	r0, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007334:	33e0      	adds	r3, #224	; 0xe0
 8007336:	781a      	ldrb	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800733e:	33dc      	adds	r3, #220	; 0xdc
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	9301      	str	r3, [sp, #4]
 8007344:	9200      	str	r2, [sp, #0]
 8007346:	4603      	mov	r3, r0
 8007348:	460a      	mov	r2, r1
 800734a:	4621      	mov	r1, r4
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 f855 	bl	80083fc <daq_trig_set>
                     self->trig.save_l.mode, self->trig.save_l.pretrigger);
    }

    self->dis_hold = 0;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007358:	33ad      	adds	r3, #173	; 0xad
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
    daq_enable(self, 1);
 800735e:	2101      	movs	r1, #1
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff fd7f 	bl	8006e64 <daq_enable>
}
 8007366:	bf00      	nop
 8007368:	373c      	adds	r7, #60	; 0x3c
 800736a:	46bd      	mov	sp, r7
 800736c:	bd90      	pop	{r4, r7, pc}
 800736e:	bf00      	nop
 8007370:	48000800 	.word	0x48000800
 8007374:	48000400 	.word	0x48000400
 8007378:	42c80000 	.word	0x42c80000

0800737c <get_last_circ_idx>:
void get_avg_from_circ(int last_idx, int ch_num, int avg_num, void* buff, int daq_bits, float* v1, float* v2, float* v3, float* v4, float* v5);
int get_vcc_from_circ(int from, int total, int bufflen, int ch_num, int daq_bits, void* buff);
int get_1ch_from_circ(int from, int total, int bufflen, int ch, int ch_num, int daq_bits, float vcc, float vref_cal, void* buff, uint8_t* out, int* idx);

static inline int get_last_circ_idx(int pos, int len)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
    int last_idx = pos - 1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3b01      	subs	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]
    if (last_idx < 0)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	da02      	bge.n	8007398 <get_last_circ_idx+0x1c>
        last_idx = len - 1;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	3b01      	subs	r3, #1
 8007396:	60fb      	str	r3, [r7, #12]
    return last_idx;
 8007398:	68fb      	ldr	r3, [r7, #12]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
	...

080073a8 <__NVIC_GetPriorityGrouping>:
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073ac:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <__NVIC_GetPriorityGrouping+0x18>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	0a1b      	lsrs	r3, r3, #8
 80073b2:	f003 0307 	and.w	r3, r3, #7
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	e000ed00 	.word	0xe000ed00

080073c4 <__NVIC_DisableIRQ>:
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	db10      	blt.n	80073f8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	f003 021f 	and.w	r2, r3, #31
 80073dc:	4909      	ldr	r1, [pc, #36]	; (8007404 <__NVIC_DisableIRQ+0x40>)
 80073de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	2001      	movs	r0, #1
 80073e6:	fa00 f202 	lsl.w	r2, r0, r2
 80073ea:	3320      	adds	r3, #32
 80073ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80073f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80073f4:	f3bf 8f6f 	isb	sy
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	e000e100 	.word	0xe000e100

08007408 <__NVIC_SetPriority>:
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	6039      	str	r1, [r7, #0]
 8007412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007418:	2b00      	cmp	r3, #0
 800741a:	db0a      	blt.n	8007432 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	b2da      	uxtb	r2, r3
 8007420:	490c      	ldr	r1, [pc, #48]	; (8007454 <__NVIC_SetPriority+0x4c>)
 8007422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007426:	0112      	lsls	r2, r2, #4
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	440b      	add	r3, r1
 800742c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007430:	e00a      	b.n	8007448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	b2da      	uxtb	r2, r3
 8007436:	4908      	ldr	r1, [pc, #32]	; (8007458 <__NVIC_SetPriority+0x50>)
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	f003 030f 	and.w	r3, r3, #15
 800743e:	3b04      	subs	r3, #4
 8007440:	0112      	lsls	r2, r2, #4
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	440b      	add	r3, r1
 8007446:	761a      	strb	r2, [r3, #24]
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	e000e100 	.word	0xe000e100
 8007458:	e000ed00 	.word	0xe000ed00

0800745c <NVIC_EncodePriority>:
{
 800745c:	b480      	push	{r7}
 800745e:	b089      	sub	sp, #36	; 0x24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f1c3 0307 	rsb	r3, r3, #7
 8007476:	2b04      	cmp	r3, #4
 8007478:	bf28      	it	cs
 800747a:	2304      	movcs	r3, #4
 800747c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	3304      	adds	r3, #4
 8007482:	2b06      	cmp	r3, #6
 8007484:	d902      	bls.n	800748c <NVIC_EncodePriority+0x30>
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	3b03      	subs	r3, #3
 800748a:	e000      	b.n	800748e <NVIC_EncodePriority+0x32>
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007490:	f04f 32ff 	mov.w	r2, #4294967295
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	43da      	mvns	r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	401a      	ands	r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074a4:	f04f 31ff 	mov.w	r1, #4294967295
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	fa01 f303 	lsl.w	r3, r1, r3
 80074ae:	43d9      	mvns	r1, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074b4:	4313      	orrs	r3, r2
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3724      	adds	r7, #36	; 0x24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
	...

080074c4 <iwdg_feed>:
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
    PS_IWDG_RST;
 80074c8:	4b04      	ldr	r3, [pc, #16]	; (80074dc <iwdg_feed+0x18>)
 80074ca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80074ce:	601a      	str	r2, [r3, #0]
};
 80074d0:	bf00      	nop
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	40003000 	.word	0x40003000

080074e0 <LL_ADC_SetAnalogWDMonitChannels>:
{
 80074e0:	b480      	push	{r7}
 80074e2:	b089      	sub	sp, #36	; 0x24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, __ADC_MASK_SHIFT(AWDy, ADC_AWD_CRX_REGOFFSET_MASK)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	330c      	adds	r3, #12
 80074f0:	4618      	mov	r0, r3
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80074f8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80074fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	fa92 f2a2 	rbit	r2, r2
 8007504:	617a      	str	r2, [r7, #20]
  return result;
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	fab2 f282 	clz	r2, r2
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	fa23 f102 	lsr.w	r1, r3, r2
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f003 0202 	and.w	r2, r3, #2
 8007518:	4613      	mov	r3, r2
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4403      	add	r3, r0
 8007526:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	68b9      	ldr	r1, [r7, #8]
 800752e:	4b08      	ldr	r3, [pc, #32]	; (8007550 <LL_ADC_SetAnalogWDMonitChannels+0x70>)
 8007530:	400b      	ands	r3, r1
 8007532:	43db      	mvns	r3, r3
 8007534:	401a      	ands	r2, r3
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	400b      	ands	r3, r1
 800753c:	431a      	orrs	r2, r3
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	601a      	str	r2, [r3, #0]
}
 8007542:	bf00      	nop
 8007544:	3724      	adds	r7, #36	; 0x24
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	7dc7fffe 	.word	0x7dc7fffe

08007554 <LL_ADC_SetAnalogWDThresholds>:
{
 8007554:	b480      	push	{r7}
 8007556:	b08b      	sub	sp, #44	; 0x2c
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, __ADC_MASK_SHIFT(AWDy, ADC_AWD_TRX_REGOFFSET_MASK));
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3320      	adds	r3, #32
 8007566:	4619      	mov	r1, r3
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800756e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8007572:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	fa92 f2a2 	rbit	r2, r2
 800757a:	617a      	str	r2, [r7, #20]
  return result;
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	fab2 f282 	clz	r2, r2
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	40d3      	lsrs	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(*preg,
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	43db      	mvns	r3, r3
 8007594:	401a      	ands	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	fa93 f3a3 	rbit	r3, r3
 80075a0:	61fb      	str	r3, [r7, #28]
  return result;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	fab3 f383 	clz	r3, r3
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	4619      	mov	r1, r3
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	408b      	lsls	r3, r1
 80075b0:	431a      	orrs	r2, r3
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	601a      	str	r2, [r3, #0]
}
 80075b6:	bf00      	nop
 80075b8:	372c      	adds	r7, #44	; 0x2c
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <LL_ADC_GetAnalogWDThresholds>:
{
 80075c2:	b480      	push	{r7}
 80075c4:	b08b      	sub	sp, #44	; 0x2c
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, __ADC_MASK_SHIFT(AWDy, ADC_AWD_TRX_REGOFFSET_MASK));
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3320      	adds	r3, #32
 80075d2:	4619      	mov	r1, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80075da:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80075de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	fa92 f2a2 	rbit	r2, r2
 80075e6:	617a      	str	r2, [r7, #20]
  return result;
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	fab2 f282 	clz	r2, r2
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	40d3      	lsrs	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	440b      	add	r3, r1
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
  return (uint32_t)(READ_BIT(*preg,
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8007602:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8007606:	4013      	ands	r3, r2
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800760c:	6a3a      	ldr	r2, [r7, #32]
 800760e:	fa92 f2a2 	rbit	r2, r2
 8007612:	61fa      	str	r2, [r7, #28]
  return result;
 8007614:	69fa      	ldr	r2, [r7, #28]
                    >> POSITION_VAL(AWDThresholdsHighLow)
 8007616:	fab2 f282 	clz	r2, r2
 800761a:	b2d2      	uxtb	r2, r2
  return (uint32_t)(READ_BIT(*preg,
 800761c:	40d3      	lsrs	r3, r2
}
 800761e:	4618      	mov	r0, r3
 8007620:	372c      	adds	r7, #44	; 0x2c
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
	...

0800762c <LL_DMA_GetDataLength>:
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	3b01      	subs	r3, #1
 800763a:	4a06      	ldr	r2, [pc, #24]	; (8007654 <LL_DMA_GetDataLength+0x28>)
 800763c:	5cd3      	ldrb	r3, [r2, r3]
 800763e:	461a      	mov	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	b29b      	uxth	r3, r3
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	08013ee4 	.word	0x08013ee4

08007658 <LL_SYSCFG_SetEXTISource>:
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8007662:	4a13      	ldr	r2, [pc, #76]	; (80076b0 <LL_SYSCFG_SetEXTISource+0x58>)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	b2db      	uxtb	r3, r3
 8007668:	3302      	adds	r3, #2
 800766a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	0c1b      	lsrs	r3, r3, #16
 8007672:	43db      	mvns	r3, r3
 8007674:	ea02 0103 	and.w	r1, r2, r3
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	0c1b      	lsrs	r3, r3, #16
 800767c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	fa93 f3a3 	rbit	r3, r3
 8007684:	60bb      	str	r3, [r7, #8]
  return result;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	fab3 f383 	clz	r3, r3
 800768c:	b2db      	uxtb	r3, r3
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	fa03 f202 	lsl.w	r2, r3, r2
 8007696:	4806      	ldr	r0, [pc, #24]	; (80076b0 <LL_SYSCFG_SetEXTISource+0x58>)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	430a      	orrs	r2, r1
 800769e:	3302      	adds	r3, #2
 80076a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	40010000 	.word	0x40010000

080076b4 <LL_EXTI_EnableIT_0_31>:
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	4904      	ldr	r1, [pc, #16]	; (80076d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	600b      	str	r3, [r1, #0]
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	40010400 	.word	0x40010400

080076d8 <LL_EXTI_DisableIT_0_31>:
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80076e0:	4b06      	ldr	r3, [pc, #24]	; (80076fc <LL_EXTI_DisableIT_0_31+0x24>)
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	43db      	mvns	r3, r3
 80076e8:	4904      	ldr	r1, [pc, #16]	; (80076fc <LL_EXTI_DisableIT_0_31+0x24>)
 80076ea:	4013      	ands	r3, r2
 80076ec:	600b      	str	r3, [r1, #0]
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	40010400 	.word	0x40010400

08007700 <LL_TIM_DisableCounter>:
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f023 0201 	bic.w	r2, r3, #1
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <daq_trig_init>:
#include "FreeRTOS.h"
#include "semphr.h"


void daq_trig_init(daq_data_t* self)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
    self->trig.ignore = 0;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800772e:	33f1      	adds	r3, #241	; 0xf1
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
    self->trig.ready = 0;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800773a:	33f2      	adds	r3, #242	; 0xf2
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
    self->trig.cntr = 0;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007746:	33f4      	adds	r3, #244	; 0xf4
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
    self->trig.awd_trig = 0;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007752:	3324      	adds	r3, #36	; 0x24
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]
    self->trig.all_cntr = 0;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800775e:	33f8      	adds	r3, #248	; 0xf8
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]
    self->trig.pos_frst = 0;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800776a:	33fc      	adds	r3, #252	; 0xfc
 800776c:	2200      	movs	r2, #0
 800776e:	601a      	str	r2, [r3, #0]
    self->trig.pos_trig = 0;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
    self->trig.pos_last = 0;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007780:	3304      	adds	r3, #4
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
    self->trig.pos_diff = 0;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800778c:	3308      	adds	r3, #8
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]
    self->trig.uwtick_first = 0;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007798:	330c      	adds	r3, #12
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]
    self->trig.pretrig_cntr = 0;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80077a4:	3310      	adds	r3, #16
 80077a6:	2200      	movs	r2, #0
 80077a8:	601a      	str	r2, [r3, #0]
    self->trig.is_post = 0;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80077b0:	33f0      	adds	r3, #240	; 0xf0
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
    self->trig.posttrig_size = 0;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80077bc:	331c      	adds	r3, #28
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]
    self->trig.auttrig_val = 0;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80077c8:	3318      	adds	r3, #24
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
    self->trig.pretrig_val = 0;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80077d4:	3314      	adds	r3, #20
 80077d6:	2200      	movs	r2, #0
 80077d8:	601a      	str	r2, [r3, #0]
    self->trig.fullmem_val = 0;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80077e0:	3320      	adds	r3, #32
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]
    self->trig.buff_trig = NULL;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80077ec:	3328      	adds	r3, #40	; 0x28
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
    self->trig.dma_ch_trig = PS_DMA_CH_ADC1;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80077f8:	332c      	adds	r3, #44	; 0x2c
 80077fa:	2201      	movs	r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
    self->trig.exti_trig = PS_LA_IRQ_EXTI1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007804:	3334      	adds	r3, #52	; 0x34
 8007806:	2206      	movs	r2, #6
 8007808:	601a      	str	r2, [r3, #0]
    self->trig.adc_trig = ADC1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007810:	3338      	adds	r3, #56	; 0x38
 8007812:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007816:	601a      	str	r2, [r3, #0]
    self->trig.dma_trig = PS_DMA_ADC1;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800781e:	3330      	adds	r3, #48	; 0x30
 8007820:	4a12      	ldr	r2, [pc, #72]	; (800786c <daq_trig_init+0x14c>)
 8007822:	601a      	str	r2, [r3, #0]
    self->trig.order = 0;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800782a:	333c      	adds	r3, #60	; 0x3c
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]
    self->trig.ready_last = 0;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007836:	33f3      	adds	r3, #243	; 0xf3
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
    self->trig.post_start = 0;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007842:	3340      	adds	r3, #64	; 0x40
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
    self->trig.post_from = 0;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800784e:	3344      	adds	r3, #68	; 0x44
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]
    self->trig.dma_pos_catched = 0;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800785a:	3348      	adds	r3, #72	; 0x48
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	40020000 	.word	0x40020000

08007870 <daq_trig_check>:

void daq_trig_check(daq_data_t* self)
{
 8007870:	b590      	push	{r4, r7, lr}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
    if (self->enabled) // check pre trigger
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800787e:	33ae      	adds	r3, #174	; 0xae
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d057      	beq.n	8007936 <daq_trig_check+0xc6>
    {
        self->trig.pretrig_cntr = self->uwTick - self->trig.uwtick_first;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800788c:	33a8      	adds	r3, #168	; 0xa8
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007896:	330c      	adds	r3, #12
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80078a4:	3310      	adds	r3, #16
 80078a6:	601a      	str	r2, [r3, #0]
        if (self->trig.pretrig_cntr < 0)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80078ae:	3310      	adds	r3, #16
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	da0b      	bge.n	80078ce <daq_trig_check+0x5e>
            self->trig.pretrig_cntr += PS_UWTICK_MAX;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80078bc:	3310      	adds	r3, #16
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	461a      	mov	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80078ca:	3310      	adds	r3, #16
 80078cc:	601a      	str	r2, [r3, #0]

        if (self->trig.pretrig_cntr > self->trig.pretrig_val && self->trig.set.mode != DISABLED)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80078d4:	3310      	adds	r3, #16
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80078de:	3314      	adds	r3, #20
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	dd2d      	ble.n	8007942 <daq_trig_check+0xd2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80078ec:	33b8      	adds	r3, #184	; 0xb8
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d026      	beq.n	8007942 <daq_trig_check+0xd2>
        {
            if (self->mode == SCOPE)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80078fa:	33ac      	adds	r3, #172	; 0xac
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d11f      	bne.n	8007942 <daq_trig_check+0xd2>
            {
                ASSERT(self->trig.awd_trig != 0);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007908:	3324      	adds	r3, #36	; 0x24
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d103      	bne.n	8007918 <daq_trig_check+0xa8>
 8007910:	2142      	movs	r1, #66	; 0x42
 8007912:	485e      	ldr	r0, [pc, #376]	; (8007a8c <daq_trig_check+0x21c>)
 8007914:	f003 fed8 	bl	800b6c8 <assert2>
                LL_ADC_SetAnalogWDMonitChannels(self->trig.adc_trig, PS_ADC_AWD self->trig.awd_trig);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800791e:	3338      	adds	r3, #56	; 0x38
 8007920:	6818      	ldr	r0, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007928:	3324      	adds	r3, #36	; 0x24
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	4958      	ldr	r1, [pc, #352]	; (8007a90 <daq_trig_check+0x220>)
 8007930:	f7ff fdd6 	bl	80074e0 <LL_ADC_SetAnalogWDMonitChannels>
 8007934:	e005      	b.n	8007942 <daq_trig_check+0xd2>
            */
        }
    }
    else
    {
        self->trig.pretrig_cntr = 0;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800793c:	3310      	adds	r3, #16
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]
    }

    if (self->mode != VM) // auto trigger
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007948:	33ac      	adds	r3, #172	; 0xac
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b01      	cmp	r3, #1
 800794e:	f000 808f 	beq.w	8007a70 <daq_trig_check+0x200>
    {
        if (self->enabled &&
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007958:	33ae      	adds	r3, #174	; 0xae
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d060      	beq.n	8007a22 <daq_trig_check+0x1b2>
            self->trig.set.mode == AUTO &&
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007966:	33b8      	adds	r3, #184	; 0xb8
 8007968:	781b      	ldrb	r3, [r3, #0]
        if (self->enabled &&
 800796a:	2b00      	cmp	r3, #0
 800796c:	d159      	bne.n	8007a22 <daq_trig_check+0x1b2>
            self->trig.is_post == 0 &&
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007974:	33f0      	adds	r3, #240	; 0xf0
 8007976:	781b      	ldrb	r3, [r3, #0]
            self->trig.set.mode == AUTO &&
 8007978:	2b00      	cmp	r3, #0
 800797a:	d152      	bne.n	8007a22 <daq_trig_check+0x1b2>
            self->trig.ready == 0 &&
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007982:	33f2      	adds	r3, #242	; 0xf2
 8007984:	781b      	ldrb	r3, [r3, #0]
            self->trig.is_post == 0 &&
 8007986:	2b00      	cmp	r3, #0
 8007988:	d14b      	bne.n	8007a22 <daq_trig_check+0x1b2>
            self->trig.pretrig_cntr > self->trig.auttrig_val)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007990:	3310      	adds	r3, #16
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800799a:	3318      	adds	r3, #24
 800799c:	681b      	ldr	r3, [r3, #0]
            self->trig.ready == 0 &&
 800799e:	429a      	cmp	r2, r3
 80079a0:	dd3f      	ble.n	8007a22 <daq_trig_check+0x1b2>
        {
            daq_enable(self, 0);
 80079a2:	2100      	movs	r1, #0
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff fa5d 	bl	8006e64 <daq_enable>
            self->trig.pos_frst = PS_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_ch_trig, self->trig.dma_trig);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80079b0:	3328      	adds	r3, #40	; 0x28
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	88db      	ldrh	r3, [r3, #6]
 80079b6:	461c      	mov	r4, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80079be:	3330      	adds	r3, #48	; 0x30
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80079c8:	332c      	adds	r3, #44	; 0x2c
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4619      	mov	r1, r3
 80079ce:	4610      	mov	r0, r2
 80079d0:	f7ff fe2c 	bl	800762c <LL_DMA_GetDataLength>
 80079d4:	4603      	mov	r3, r0
 80079d6:	1ae3      	subs	r3, r4, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80079e0:	3328      	adds	r3, #40	; 0x28
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	88db      	ldrh	r3, [r3, #6]
 80079e6:	4619      	mov	r1, r3
 80079e8:	4610      	mov	r0, r2
 80079ea:	f7ff fcc7 	bl	800737c <get_last_circ_idx>
 80079ee:	4602      	mov	r2, r0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80079f6:	33fc      	adds	r3, #252	; 0xfc
 80079f8:	601a      	str	r2, [r3, #0]

            self->trig.ready = 1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007a00:	33f2      	adds	r3, #242	; 0xf2
 8007a02:	2201      	movs	r2, #1
 8007a04:	701a      	strb	r2, [r3, #0]
            self->trig.is_post = 0;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007a0c:	33f0      	adds	r3, #240	; 0xf0
 8007a0e:	2200      	movs	r2, #0
 8007a10:	701a      	strb	r2, [r3, #0]

            comm_respond(comm_ptr, PS_RESP_RDY_A, 10);
 8007a12:	4b20      	ldr	r3, [pc, #128]	; (8007a94 <daq_trig_check+0x224>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	220a      	movs	r2, #10
 8007a18:	491f      	ldr	r1, [pc, #124]	; (8007a98 <daq_trig_check+0x228>)
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe f90a 	bl	8005c34 <comm_respond>
 8007a20:	e026      	b.n	8007a70 <daq_trig_check+0x200>
        }
        else if (self->trig.set.mode == DISABLED &&  // trigger is disabled
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007a28:	33b8      	adds	r3, #184	; 0xb8
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d11f      	bne.n	8007a70 <daq_trig_check+0x200>
                 self->trig.pretrig_cntr > self->trig.fullmem_val)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007a36:	3310      	adds	r3, #16
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007a40:	3320      	adds	r3, #32
 8007a42:	681b      	ldr	r3, [r3, #0]
        else if (self->trig.set.mode == DISABLED &&  // trigger is disabled
 8007a44:	429a      	cmp	r2, r3
 8007a46:	dd13      	ble.n	8007a70 <daq_trig_check+0x200>
        {
            self->trig.ready = 1;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007a4e:	33f2      	adds	r3, #242	; 0xf2
 8007a50:	2201      	movs	r2, #1
 8007a52:	701a      	strb	r2, [r3, #0]
            if (self->trig.ready_last == 0)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007a5a:	33f3      	adds	r3, #243	; 0xf3
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d106      	bne.n	8007a70 <daq_trig_check+0x200>
                comm_respond(comm_ptr, PS_RESP_RDY_D, 10);
 8007a62:	4b0c      	ldr	r3, [pc, #48]	; (8007a94 <daq_trig_check+0x224>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	220a      	movs	r2, #10
 8007a68:	490c      	ldr	r1, [pc, #48]	; (8007a9c <daq_trig_check+0x22c>)
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe f8e2 	bl	8005c34 <comm_respond>
        }
    }
    self->trig.ready_last = self->trig.ready;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007a76:	33f2      	adds	r3, #242	; 0xf2
 8007a78:	781a      	ldrb	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007a80:	33f3      	adds	r3, #243	; 0xf3
 8007a82:	701a      	strb	r2, [r3, #0]
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd90      	pop	{r4, r7, pc}
 8007a8c:	080138fc 	.word	0x080138fc
 8007a90:	7dc00000 	.word	0x7dc00000
 8007a94:	2000c268 	.word	0x2000c268
 8007a98:	0801392c 	.word	0x0801392c
 8007a9c:	08013938 	.word	0x08013938

08007aa0 <daq_trig_trigger_scope>:

void daq_trig_trigger_scope(daq_data_t* self)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08c      	sub	sp, #48	; 0x30
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
    ASSERT(self->trig.buff_trig != NULL);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007aae:	3328      	adds	r3, #40	; 0x28
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d103      	bne.n	8007abe <daq_trig_trigger_scope+0x1e>
 8007ab6:	2172      	movs	r1, #114	; 0x72
 8007ab8:	48b0      	ldr	r0, [pc, #704]	; (8007d7c <daq_trig_trigger_scope+0x2dc>)
 8007aba:	f003 fe05 	bl	800b6c8 <assert2>
    ASSERT(self->trig.dma_ch_trig != 0);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007ac4:	332c      	adds	r3, #44	; 0x2c
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d103      	bne.n	8007ad4 <daq_trig_trigger_scope+0x34>
 8007acc:	2173      	movs	r1, #115	; 0x73
 8007ace:	48ab      	ldr	r0, [pc, #684]	; (8007d7c <daq_trig_trigger_scope+0x2dc>)
 8007ad0:	f003 fdfa 	bl	800b6c8 <assert2>

    if (self->trig.ready || self->trig.post_start)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007ada:	33f2      	adds	r3, #242	; 0xf2
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f040 8185 	bne.w	8007dee <daq_trig_trigger_scope+0x34e>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007aea:	3340      	adds	r3, #64	; 0x40
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f040 817d 	bne.w	8007dee <daq_trig_trigger_scope+0x34e>
        return;

    int ch_cnt = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007afa:	3374      	adds	r3, #116	; 0x74
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007b06:	3375      	adds	r3, #117	; 0x75
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	441a      	add	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007b12:	3376      	adds	r3, #118	; 0x76
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	441a      	add	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007b1e:	3377      	adds	r3, #119	; 0x77
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	4413      	add	r3, r2
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
    int ch_pos_trig = self->trig.dma_pos_catched % ch_cnt;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007b2c:	3348      	adds	r3, #72	; 0x48
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b32:	fb93 f2f2 	sdiv	r2, r3, r2
 8007b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b38:	fb01 f202 	mul.w	r2, r1, r2
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	623b      	str	r3, [r7, #32]
    int ch_pos_want = ch_cnt - self->trig.order - 1;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007b46:	333c      	adds	r3, #60	; 0x3c
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	61fb      	str	r3, [r7, #28]

    if (ch_pos_want < ch_pos_trig)
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	da0e      	bge.n	8007b78 <daq_trig_trigger_scope+0xd8>
        self->trig.dma_pos_catched -= ch_pos_trig - ch_pos_want;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007b60:	3348      	adds	r3, #72	; 0x48
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	6a39      	ldr	r1, [r7, #32]
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	1acb      	subs	r3, r1, r3
 8007b6a:	1ad2      	subs	r2, r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007b72:	3348      	adds	r3, #72	; 0x48
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	e013      	b.n	8007ba0 <daq_trig_trigger_scope+0x100>
    else if (ch_pos_want > ch_pos_trig)
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	dd0f      	ble.n	8007ba0 <daq_trig_trigger_scope+0x100>
        self->trig.dma_pos_catched -= ch_cnt - (ch_pos_want - ch_pos_trig);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007b86:	3348      	adds	r3, #72	; 0x48
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	69f9      	ldr	r1, [r7, #28]
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	1acb      	subs	r3, r1, r3
 8007b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b92:	1acb      	subs	r3, r1, r3
 8007b94:	1ad2      	subs	r2, r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007b9c:	3348      	adds	r3, #72	; 0x48
 8007b9e:	601a      	str	r2, [r3, #0]


    if (self->trig.dma_pos_catched < 0)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007ba6:	3348      	adds	r3, #72	; 0x48
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da10      	bge.n	8007bd0 <daq_trig_trigger_scope+0x130>
        self->trig.dma_pos_catched += self->trig.buff_trig->len;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007bb4:	3348      	adds	r3, #72	; 0x48
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007bbe:	3328      	adds	r3, #40	; 0x28
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	88db      	ldrh	r3, [r3, #6]
 8007bc4:	441a      	add	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007bcc:	3348      	adds	r3, #72	; 0x48
 8007bce:	601a      	str	r2, [r3, #0]

    int prev_last_idx = self->trig.dma_pos_catched - self->trig.buff_trig->chans;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007bd6:	3348      	adds	r3, #72	; 0x48
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007be0:	3328      	adds	r3, #40	; 0x28
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	889b      	ldrh	r3, [r3, #4]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (prev_last_idx < 0)
 8007bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	da09      	bge.n	8007c04 <daq_trig_trigger_scope+0x164>
        prev_last_idx += self->trig.buff_trig->len;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007bf6:	3328      	adds	r3, #40	; 0x28
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	88db      	ldrh	r3, [r3, #6]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	4413      	add	r3, r2
 8007c02:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint16_t last_val = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t prev_last_val = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	853b      	strh	r3, [r7, #40]	; 0x28

    if (self->set.bits == B8)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007c12:	337e      	adds	r3, #126	; 0x7e
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b08      	cmp	r3, #8
 8007c18:	d118      	bne.n	8007c4c <daq_trig_trigger_scope+0x1ac>
    {
        last_val = (uint16_t)(((uint8_t*)(self->trig.buff_trig->data))[self->trig.dma_pos_catched]);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007c20:	3328      	adds	r3, #40	; 0x28
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007c2c:	3348      	adds	r3, #72	; 0x48
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4413      	add	r3, r2
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	857b      	strh	r3, [r7, #42]	; 0x2a
        prev_last_val = (uint16_t)(((uint8_t*)(self->trig.buff_trig->data))[prev_last_idx]);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007c3c:	3328      	adds	r3, #40	; 0x28
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	4413      	add	r3, r2
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	853b      	strh	r3, [r7, #40]	; 0x28
 8007c4a:	e019      	b.n	8007c80 <daq_trig_trigger_scope+0x1e0>
    }
    else //(self->set.bits == B12)
    {
        last_val = (*((uint16_t*)(((uint8_t*)self->trig.buff_trig->data)+(self->trig.dma_pos_catched * 2))));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007c52:	3328      	adds	r3, #40	; 0x28
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007c5e:	3348      	adds	r3, #72	; 0x48
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	4413      	add	r3, r2
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	857b      	strh	r3, [r7, #42]	; 0x2a
        prev_last_val = (*((uint16_t*)(((uint8_t*)self->trig.buff_trig->data)+(prev_last_idx * 2))));
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007c70:	3328      	adds	r3, #40	; 0x28
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c78:	0052      	lsls	r2, r2, #1
 8007c7a:	4413      	add	r3, r2
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    self->trig.all_cntr++;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007c86:	33f8      	adds	r3, #248	; 0xf8
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007c92:	33f8      	adds	r3, #248	; 0xf8
 8007c94:	601a      	str	r2, [r3, #0]

    if (self->trig.ignore)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007c9c:	33f1      	adds	r3, #241	; 0xf1
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d032      	beq.n	8007d0a <daq_trig_trigger_scope+0x26a>
    {
        self->trig.ignore = 0;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007caa:	33f1      	adds	r3, #241	; 0xf1
 8007cac:	2200      	movs	r2, #0
 8007cae:	701a      	strb	r2, [r3, #0]

        uint32_t h = LL_ADC_GetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007cb6:	3338      	adds	r3, #56	; 0x38
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a31      	ldr	r2, [pc, #196]	; (8007d80 <daq_trig_trigger_scope+0x2e0>)
 8007cbc:	4931      	ldr	r1, [pc, #196]	; (8007d84 <daq_trig_trigger_scope+0x2e4>)
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff fc7f 	bl	80075c2 <LL_ADC_GetAnalogWDThresholds>
 8007cc4:	6138      	str	r0, [r7, #16]
        uint32_t l = LL_ADC_GetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007ccc:	3338      	adds	r3, #56	; 0x38
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007cd4:	492b      	ldr	r1, [pc, #172]	; (8007d84 <daq_trig_trigger_scope+0x2e4>)
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7ff fc73 	bl	80075c2 <LL_ADC_GetAnalogWDThresholds>
 8007cdc:	60f8      	str	r0, [r7, #12]

        LL_ADC_SetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH, l);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007ce4:	3338      	adds	r3, #56	; 0x38
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4a25      	ldr	r2, [pc, #148]	; (8007d80 <daq_trig_trigger_scope+0x2e0>)
 8007cec:	4925      	ldr	r1, [pc, #148]	; (8007d84 <daq_trig_trigger_scope+0x2e4>)
 8007cee:	f7ff fc31 	bl	8007554 <LL_ADC_SetAnalogWDThresholds>
        LL_ADC_SetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW, h);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007cf8:	3338      	adds	r3, #56	; 0x38
 8007cfa:	6818      	ldr	r0, [r3, #0]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007d02:	4920      	ldr	r1, [pc, #128]	; (8007d84 <daq_trig_trigger_scope+0x2e4>)
 8007d04:	f7ff fc26 	bl	8007554 <LL_ADC_SetAnalogWDThresholds>
 8007d08:	e072      	b.n	8007df0 <daq_trig_trigger_scope+0x350>
    }
    else
    {
        // trigger condition
        if ((self->trig.set.edge == RISING && last_val > self->trig.set.val && prev_last_val <= self->trig.set.val) ||
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007d10:	33b9      	adds	r3, #185	; 0xb9
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10f      	bne.n	8007d38 <daq_trig_trigger_scope+0x298>
 8007d18:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007d20:	33c0      	adds	r3, #192	; 0xc0
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	dd07      	ble.n	8007d38 <daq_trig_trigger_scope+0x298>
 8007d28:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007d30:	33c0      	adds	r3, #192	; 0xc0
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	dd16      	ble.n	8007d66 <daq_trig_trigger_scope+0x2c6>
            (self->trig.set.edge == FALLING && last_val < self->trig.set.val && prev_last_val >= self->trig.set.val))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007d3e:	33b9      	adds	r3, #185	; 0xb9
 8007d40:	781b      	ldrb	r3, [r3, #0]
        if ((self->trig.set.edge == RISING && last_val > self->trig.set.val && prev_last_val <= self->trig.set.val) ||
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d120      	bne.n	8007d88 <daq_trig_trigger_scope+0x2e8>
            (self->trig.set.edge == FALLING && last_val < self->trig.set.val && prev_last_val >= self->trig.set.val))
 8007d46:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007d4e:	33c0      	adds	r3, #192	; 0xc0
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	da18      	bge.n	8007d88 <daq_trig_trigger_scope+0x2e8>
 8007d56:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007d5e:	33c0      	adds	r3, #192	; 0xc0
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	db10      	blt.n	8007d88 <daq_trig_trigger_scope+0x2e8>
        {
            daq_trig_poststart(self, self->trig.dma_pos_catched);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007d6c:	3348      	adds	r3, #72	; 0x48
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f888 	bl	8007e88 <daq_trig_poststart>
 8007d78:	e03a      	b.n	8007df0 <daq_trig_trigger_scope+0x350>
 8007d7a:	bf00      	nop
 8007d7c:	080138fc 	.word	0x080138fc
 8007d80:	0fff0000 	.word	0x0fff0000
 8007d84:	7dc00000 	.word	0x7dc00000
        }
        else // false trig, switch edges and wait for another window
        {
            self->trig.ignore = 1;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007d8e:	33f1      	adds	r3, #241	; 0xf1
 8007d90:	2201      	movs	r2, #1
 8007d92:	701a      	strb	r2, [r3, #0]

            uint32_t h = LL_ADC_GetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007d9a:	3338      	adds	r3, #56	; 0x38
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a16      	ldr	r2, [pc, #88]	; (8007df8 <daq_trig_trigger_scope+0x358>)
 8007da0:	4916      	ldr	r1, [pc, #88]	; (8007dfc <daq_trig_trigger_scope+0x35c>)
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff fc0d 	bl	80075c2 <LL_ADC_GetAnalogWDThresholds>
 8007da8:	61b8      	str	r0, [r7, #24]
            uint32_t l = LL_ADC_GetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007db0:	3338      	adds	r3, #56	; 0x38
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007db8:	4910      	ldr	r1, [pc, #64]	; (8007dfc <daq_trig_trigger_scope+0x35c>)
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff fc01 	bl	80075c2 <LL_ADC_GetAnalogWDThresholds>
 8007dc0:	6178      	str	r0, [r7, #20]

            LL_ADC_SetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH, l);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007dc8:	3338      	adds	r3, #56	; 0x38
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	4a0a      	ldr	r2, [pc, #40]	; (8007df8 <daq_trig_trigger_scope+0x358>)
 8007dd0:	490a      	ldr	r1, [pc, #40]	; (8007dfc <daq_trig_trigger_scope+0x35c>)
 8007dd2:	f7ff fbbf 	bl	8007554 <LL_ADC_SetAnalogWDThresholds>
            LL_ADC_SetAnalogWDThresholds(self->trig.adc_trig, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW, h);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007ddc:	3338      	adds	r3, #56	; 0x38
 8007dde:	6818      	ldr	r0, [r3, #0]
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007de6:	4905      	ldr	r1, [pc, #20]	; (8007dfc <daq_trig_trigger_scope+0x35c>)
 8007de8:	f7ff fbb4 	bl	8007554 <LL_ADC_SetAnalogWDThresholds>
 8007dec:	e000      	b.n	8007df0 <daq_trig_trigger_scope+0x350>
        return;
 8007dee:	bf00      	nop
        }
    }
}
 8007df0:	3730      	adds	r7, #48	; 0x30
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	0fff0000 	.word	0x0fff0000
 8007dfc:	7dc00000 	.word	0x7dc00000

08007e00 <daq_trig_trigger_la>:

void daq_trig_trigger_la(daq_data_t* self)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
    ASSERT(self->trig.buff_trig != NULL);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007e0e:	3328      	adds	r3, #40	; 0x28
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d103      	bne.n	8007e1e <daq_trig_trigger_la+0x1e>
 8007e16:	21ba      	movs	r1, #186	; 0xba
 8007e18:	481a      	ldr	r0, [pc, #104]	; (8007e84 <daq_trig_trigger_la+0x84>)
 8007e1a:	f003 fc55 	bl	800b6c8 <assert2>
    ASSERT(self->trig.dma_ch_trig != 0);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007e24:	332c      	adds	r3, #44	; 0x2c
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d103      	bne.n	8007e34 <daq_trig_trigger_la+0x34>
 8007e2c:	21bb      	movs	r1, #187	; 0xbb
 8007e2e:	4815      	ldr	r0, [pc, #84]	; (8007e84 <daq_trig_trigger_la+0x84>)
 8007e30:	f003 fc4a 	bl	800b6c8 <assert2>

    if (self->trig.ready || self->trig.post_start)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007e3a:	33f2      	adds	r3, #242	; 0xf2
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d11c      	bne.n	8007e7c <daq_trig_trigger_la+0x7c>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007e48:	3340      	adds	r3, #64	; 0x40
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d115      	bne.n	8007e7c <daq_trig_trigger_la+0x7c>
        return;

    if (self->trig.pretrig_cntr > self->trig.pretrig_val)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007e56:	3310      	adds	r3, #16
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007e60:	3314      	adds	r3, #20
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	dd0a      	ble.n	8007e7e <daq_trig_trigger_la+0x7e>
    {
        //self->trig.pretrig_cntr = 0;
        daq_trig_poststart(self, self->trig.dma_pos_catched);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007e6e:	3348      	adds	r3, #72	; 0x48
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f807 	bl	8007e88 <daq_trig_poststart>
 8007e7a:	e000      	b.n	8007e7e <daq_trig_trigger_la+0x7e>
        return;
 8007e7c:	bf00      	nop
    }
}
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	080138fc 	.word	0x080138fc

08007e88 <daq_trig_poststart>:

void daq_trig_poststart(daq_data_t* self, int pos)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
    self->trig.post_start = 1;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007e98:	3340      	adds	r3, #64	; 0x40
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]
    self->trig.post_from = pos;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007ea4:	3344      	adds	r3, #68	; 0x44
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	601a      	str	r2, [r3, #0]

    if (self->mode != LA)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007eb0:	33ac      	adds	r3, #172	; 0xac
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d015      	beq.n	8007ee4 <daq_trig_poststart+0x5c>
    {
#if defined(PS_ADC_MODE_ADC1) || defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
        LL_ADC_SetAnalogWDMonitChannels(ADC1, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 8007eb8:	2200      	movs	r2, #0
 8007eba:	4923      	ldr	r1, [pc, #140]	; (8007f48 <daq_trig_poststart+0xc0>)
 8007ebc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007ec0:	f7ff fb0e 	bl	80074e0 <LL_ADC_SetAnalogWDMonitChannels>
#endif

#if defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
        LL_ADC_SetAnalogWDMonitChannels(ADC2, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	4920      	ldr	r1, [pc, #128]	; (8007f48 <daq_trig_poststart+0xc0>)
 8007ec8:	4820      	ldr	r0, [pc, #128]	; (8007f4c <daq_trig_poststart+0xc4>)
 8007eca:	f7ff fb09 	bl	80074e0 <LL_ADC_SetAnalogWDMonitChannels>
#endif

#if defined(PS_ADC_MODE_ADC1234)
        LL_ADC_SetAnalogWDMonitChannels(ADC3, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 8007ece:	2200      	movs	r2, #0
 8007ed0:	491d      	ldr	r1, [pc, #116]	; (8007f48 <daq_trig_poststart+0xc0>)
 8007ed2:	481f      	ldr	r0, [pc, #124]	; (8007f50 <daq_trig_poststart+0xc8>)
 8007ed4:	f7ff fb04 	bl	80074e0 <LL_ADC_SetAnalogWDMonitChannels>
        LL_ADC_SetAnalogWDMonitChannels(ADC4, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 8007ed8:	2200      	movs	r2, #0
 8007eda:	491b      	ldr	r1, [pc, #108]	; (8007f48 <daq_trig_poststart+0xc0>)
 8007edc:	481d      	ldr	r0, [pc, #116]	; (8007f54 <daq_trig_poststart+0xcc>)
 8007ede:	f7ff faff 	bl	80074e0 <LL_ADC_SetAnalogWDMonitChannels>
 8007ee2:	e008      	b.n	8007ef6 <daq_trig_poststart+0x6e>
#endif
    }
    else
    {
        NVIC_DisableIRQ(self->trig.exti_trig);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007eea:	3334      	adds	r3, #52	; 0x34
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	b25b      	sxtb	r3, r3
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7ff fa67 	bl	80073c4 <__NVIC_DisableIRQ>
    }

    self->trig.pretrig_cntr = 0;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007efc:	3310      	adds	r3, #16
 8007efe:	2200      	movs	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]

    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]
    ASSERT(xSemaphoreGiveFromISR(sem2_trig, &xHigherPriorityTaskWoken) == pdPASS);
 8007f06:	4b14      	ldr	r3, [pc, #80]	; (8007f58 <daq_trig_poststart+0xd0>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f107 020c 	add.w	r2, r7, #12
 8007f0e:	4611      	mov	r1, r2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f008 f95f 	bl	80101d4 <xQueueGiveFromISR>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d003      	beq.n	8007f24 <daq_trig_poststart+0x9c>
 8007f1c:	21e3      	movs	r1, #227	; 0xe3
 8007f1e:	480f      	ldr	r0, [pc, #60]	; (8007f5c <daq_trig_poststart+0xd4>)
 8007f20:	f003 fbd2 	bl	800b6c8 <assert2>
    if (xHigherPriorityTaskWoken != pdFALSE)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <daq_trig_poststart+0xb8>
        portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <daq_trig_poststart+0xb8>
 8007f30:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <daq_trig_poststart+0xd8>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	f3bf 8f6f 	isb	sy
}
 8007f40:	bf00      	nop
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	7dc00000 	.word	0x7dc00000
 8007f4c:	50000100 	.word	0x50000100
 8007f50:	50000400 	.word	0x50000400
 8007f54:	50000500 	.word	0x50000500
 8007f58:	2000c300 	.word	0x2000c300
 8007f5c:	080138fc 	.word	0x080138fc
 8007f60:	e000ed04 	.word	0xe000ed04

08007f64 <daq_trig_postcount>:

volatile int timeout;

void daq_trig_postcount(daq_data_t* self)
{
 8007f64:	b5b0      	push	{r4, r5, r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
    int last_idx = self->trig.post_from;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007f72:	3344      	adds	r3, #68	; 0x44
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	617b      	str	r3, [r7, #20]

    ASSERT(self->trig.buff_trig != NULL);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007f7e:	3328      	adds	r3, #40	; 0x28
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d103      	bne.n	8007f8e <daq_trig_postcount+0x2a>
 8007f86:	21ee      	movs	r1, #238	; 0xee
 8007f88:	4872      	ldr	r0, [pc, #456]	; (8008154 <daq_trig_postcount+0x1f0>)
 8007f8a:	f003 fb9d 	bl	800b6c8 <assert2>

    self->trig.is_post = 1;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007f94:	33f0      	adds	r3, #240	; 0xf0
 8007f96:	2201      	movs	r2, #1
 8007f98:	701a      	strb	r2, [r3, #0]
    self->trig.cntr++;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007fa0:	33f4      	adds	r3, #244	; 0xf4
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007fac:	33f4      	adds	r3, #244	; 0xf4
 8007fae:	601a      	str	r2, [r3, #0]

    if (self->mode == SCOPE)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8007fb6:	33ac      	adds	r3, #172	; 0xac
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f040 80ce 	bne.w	800815c <daq_trig_postcount+0x1f8>
    {
        self->trig.pos_trig = last_idx + self->trig.order;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007fc6:	333c      	adds	r3, #60	; 0x3c
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	441a      	add	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007fd4:	601a      	str	r2, [r3, #0]
        if (self->trig.pos_trig >= self->trig.buff_trig->len)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007fe4:	3328      	adds	r3, #40	; 0x28
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	db0e      	blt.n	800800c <daq_trig_postcount+0xa8>
            self->trig.pos_trig -= self->trig.buff_trig->len;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8007ffc:	3328      	adds	r3, #40	; 0x28
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	88db      	ldrh	r3, [r3, #6]
 8008002:	1ad2      	subs	r2, r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800800a:	601a      	str	r2, [r3, #0]

        int post = (int)((float)self->set.mem * ((float)(100 - self->trig.set.pretrigger) / 100.0));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008012:	337c      	adds	r3, #124	; 0x7c
 8008014:	881b      	ldrh	r3, [r3, #0]
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801e:	ee17 0a90 	vmov	r0, s15
 8008022:	f7f8 faa9 	bl	8000578 <__aeabi_f2d>
 8008026:	4604      	mov	r4, r0
 8008028:	460d      	mov	r5, r1
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008030:	33b4      	adds	r3, #180	; 0xb4
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8008038:	ee07 3a90 	vmov	s15, r3
 800803c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008040:	ee17 0a90 	vmov	r0, s15
 8008044:	f7f8 fa98 	bl	8000578 <__aeabi_f2d>
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	4b42      	ldr	r3, [pc, #264]	; (8008158 <daq_trig_postcount+0x1f4>)
 800804e:	f7f8 fc15 	bl	800087c <__aeabi_ddiv>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	4620      	mov	r0, r4
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 fae5 	bl	8000628 <__aeabi_dmul>
 800805e:	4603      	mov	r3, r0
 8008060:	460c      	mov	r4, r1
 8008062:	4618      	mov	r0, r3
 8008064:	4621      	mov	r1, r4
 8008066:	f7f8 fd8f 	bl	8000b88 <__aeabi_d2iz>
 800806a:	4603      	mov	r3, r0
 800806c:	613b      	str	r3, [r7, #16]
        self->trig.posttrig_size = post * self->trig.buff_trig->chans;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008074:	3328      	adds	r3, #40	; 0x28
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	889b      	ldrh	r3, [r3, #4]
 800807a:	461a      	mov	r2, r3
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	fb03 f202 	mul.w	r2, r3, r2
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008088:	331c      	adds	r3, #28
 800808a:	601a      	str	r2, [r3, #0]

        self->trig.pos_last = self->trig.pos_trig + self->trig.posttrig_size;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800809a:	331c      	adds	r3, #28
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	441a      	add	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80080a6:	3304      	adds	r3, #4
 80080a8:	601a      	str	r2, [r3, #0]
        if (self->trig.pos_last >= self->trig.buff_trig->len)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80080b0:	3304      	adds	r3, #4
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80080ba:	3328      	adds	r3, #40	; 0x28
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	88db      	ldrh	r3, [r3, #6]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	db10      	blt.n	80080e6 <daq_trig_postcount+0x182>
            self->trig.pos_last -= self->trig.buff_trig->len;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80080ca:	3304      	adds	r3, #4
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80080d4:	3328      	adds	r3, #40	; 0x28
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	88db      	ldrh	r3, [r3, #6]
 80080da:	1ad2      	subs	r2, r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80080e2:	3304      	adds	r3, #4
 80080e4:	601a      	str	r2, [r3, #0]

        self->trig.pos_frst = self->trig.pos_trig - ((self->set.mem - post + 1) * self->trig.buff_trig->chans) + 1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80080f4:	337c      	adds	r3, #124	; 0x7c
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	4619      	mov	r1, r3
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1acb      	subs	r3, r1, r3
 80080fe:	1c59      	adds	r1, r3, #1
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008106:	3328      	adds	r3, #40	; 0x28
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	889b      	ldrh	r3, [r3, #4]
 800810c:	fb03 f301 	mul.w	r3, r3, r1
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800811a:	33fc      	adds	r3, #252	; 0xfc
 800811c:	601a      	str	r2, [r3, #0]
        //if (self->trig.pos_frst >= self->trig.buff_trig->len)
        //    self->trig.pos_frst -= self->trig.buff_trig->len;
        if (self->trig.pos_frst < 0)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008124:	33fc      	adds	r3, #252	; 0xfc
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f280 80ad 	bge.w	8008288 <daq_trig_postcount+0x324>
            self->trig.pos_frst += self->trig.buff_trig->len;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008134:	33fc      	adds	r3, #252	; 0xfc
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800813e:	3328      	adds	r3, #40	; 0x28
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	88db      	ldrh	r3, [r3, #6]
 8008144:	441a      	add	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800814c:	33fc      	adds	r3, #252	; 0xfc
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	e09a      	b.n	8008288 <daq_trig_postcount+0x324>
 8008152:	bf00      	nop
 8008154:	080138fc 	.word	0x080138fc
 8008158:	40590000 	.word	0x40590000
    }
    else // mode == LA
    {
        self->trig.pos_trig = last_idx;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	601a      	str	r2, [r3, #0]
        self->trig.posttrig_size = (int)((float)self->set.mem * ((float)(100 - self->trig.set.pretrigger) / 100.0));
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800816c:	337c      	adds	r3, #124	; 0x7c
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	ee07 3a90 	vmov	s15, r3
 8008174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008178:	ee17 0a90 	vmov	r0, s15
 800817c:	f7f8 f9fc 	bl	8000578 <__aeabi_f2d>
 8008180:	4604      	mov	r4, r0
 8008182:	460d      	mov	r5, r1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800818a:	33b4      	adds	r3, #180	; 0xb4
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800819a:	ee17 0a90 	vmov	r0, s15
 800819e:	f7f8 f9eb 	bl	8000578 <__aeabi_f2d>
 80081a2:	f04f 0200 	mov.w	r2, #0
 80081a6:	4b7b      	ldr	r3, [pc, #492]	; (8008394 <daq_trig_postcount+0x430>)
 80081a8:	f7f8 fb68 	bl	800087c <__aeabi_ddiv>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4620      	mov	r0, r4
 80081b2:	4629      	mov	r1, r5
 80081b4:	f7f8 fa38 	bl	8000628 <__aeabi_dmul>
 80081b8:	4603      	mov	r3, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	4618      	mov	r0, r3
 80081be:	4621      	mov	r1, r4
 80081c0:	f7f8 fce2 	bl	8000b88 <__aeabi_d2iz>
 80081c4:	4602      	mov	r2, r0
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80081cc:	331c      	adds	r3, #28
 80081ce:	601a      	str	r2, [r3, #0]

        self->trig.pos_last = self->trig.pos_trig + self->trig.posttrig_size;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80081de:	331c      	adds	r3, #28
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	441a      	add	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80081ea:	3304      	adds	r3, #4
 80081ec:	601a      	str	r2, [r3, #0]
        if (self->trig.pos_last >= self->trig.buff_trig->len)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80081f4:	3304      	adds	r3, #4
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80081fe:	3328      	adds	r3, #40	; 0x28
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	88db      	ldrh	r3, [r3, #6]
 8008204:	429a      	cmp	r2, r3
 8008206:	db10      	blt.n	800822a <daq_trig_postcount+0x2c6>
            self->trig.pos_last -= self->trig.buff_trig->len;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800820e:	3304      	adds	r3, #4
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008218:	3328      	adds	r3, #40	; 0x28
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	88db      	ldrh	r3, [r3, #6]
 800821e:	1ad2      	subs	r2, r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008226:	3304      	adds	r3, #4
 8008228:	601a      	str	r2, [r3, #0]

        self->trig.pos_frst = self->trig.pos_trig - (self->set.mem - self->trig.posttrig_size) + 1; // +1 ??
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008238:	337c      	adds	r3, #124	; 0x7c
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	4619      	mov	r1, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008244:	331c      	adds	r3, #28
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	1acb      	subs	r3, r1, r3
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008254:	33fc      	adds	r3, #252	; 0xfc
 8008256:	601a      	str	r2, [r3, #0]
        if (self->trig.pos_frst < 0)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800825e:	33fc      	adds	r3, #252	; 0xfc
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	da10      	bge.n	8008288 <daq_trig_postcount+0x324>
            self->trig.pos_frst += self->trig.buff_trig->len;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800826c:	33fc      	adds	r3, #252	; 0xfc
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008276:	3328      	adds	r3, #40	; 0x28
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	88db      	ldrh	r3, [r3, #6]
 800827c:	441a      	add	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008284:	33fc      	adds	r3, #252	; 0xfc
 8008286:	601a      	str	r2, [r3, #0]
    }

    int pos_last_len = self->trig.buff_trig->len - self->trig.pos_last;  // DMA len of last valid point to compare
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800828e:	3328      	adds	r3, #40	; 0x28
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	88db      	ldrh	r3, [r3, #6]
 8008294:	461a      	mov	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800829c:	3304      	adds	r3, #4
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	60fb      	str	r3, [r7, #12]
    //int uwTick_frist = uwTick;
    //timeout = (int)(((float)self->trig.posttrig_size + PS_MEM_RESERVE) * (1.0 / self->set.fs) * 1000.0);
    //if (timeout < 1)
    //    timeout = 1;

    int target_prev = -1;
 80082a4:	f04f 33ff 	mov.w	r3, #4294967295
 80082a8:	61fb      	str	r3, [r7, #28]
    int dma_changes = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61bb      	str	r3, [r7, #24]
    while(1)
    {
        iwdg_feed(); // 1
 80082ae:	f7ff f909 	bl	80074c4 <iwdg_feed>
        //if (uwTick_diff < 0)
        //    uwTick_diff += PS_UWTICK_MAX;

        // 15 instructions worst case
        // Cortex M3 - 1.25 IPC per core -> 72/(15/1.25) = 6 MHz max
        int target = LL_DMA_GetDataLength(self->trig.dma_trig, self->trig.dma_ch_trig); // 6
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80082b8:	3330      	adds	r3, #48	; 0x30
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80082c2:	332c      	adds	r3, #44	; 0x2c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f7ff f9af 	bl	800762c <LL_DMA_GetDataLength>
 80082ce:	4603      	mov	r3, r0
 80082d0:	60bb      	str	r3, [r7, #8]
        if (target != target_prev)
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d002      	beq.n	80082e0 <daq_trig_postcount+0x37c>
            dma_changes++;
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	3301      	adds	r3, #1
 80082de:	61bb      	str	r3, [r7, #24]
        target_prev = target;
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	61fb      	str	r3, [r7, #28]

        if (target == pos_last_len || dma_changes == self->trig.posttrig_size)// || uwTick_diff > timeout) // 5
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d007      	beq.n	80082fc <daq_trig_postcount+0x398>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80082f2:	331c      	adds	r3, #28
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d1d8      	bne.n	80082ae <daq_trig_postcount+0x34a>
        {
            LL_TIM_DisableCounter(PS_TIM_DAQ);
 80082fc:	4826      	ldr	r0, [pc, #152]	; (8008398 <daq_trig_postcount+0x434>)
 80082fe:	f7ff f9ff 	bl	8007700 <LL_TIM_DisableCounter>

            daq_enable(self, 0);
 8008302:	2100      	movs	r1, #0
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7fe fdad 	bl	8006e64 <daq_enable>
            self->trig.ready = 1;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008310:	33f2      	adds	r3, #242	; 0xf2
 8008312:	2201      	movs	r2, #1
 8008314:	701a      	strb	r2, [r3, #0]
            self->trig.is_post = 0;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800831c:	33f0      	adds	r3, #240	; 0xf0
 800831e:	2200      	movs	r2, #0
 8008320:	701a      	strb	r2, [r3, #0]

            self->trig.pos_diff = self->trig.pos_last - self->trig.pos_trig;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008328:	3304      	adds	r3, #4
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	1ad2      	subs	r2, r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800833c:	3308      	adds	r3, #8
 800833e:	601a      	str	r2, [r3, #0]
            if (self->trig.pos_diff < 0)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008346:	3308      	adds	r3, #8
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	da10      	bge.n	8008370 <daq_trig_postcount+0x40c>
                self->trig.pos_diff += self->trig.buff_trig->len;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008354:	3308      	adds	r3, #8
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800835e:	3328      	adds	r3, #40	; 0x28
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	88db      	ldrh	r3, [r3, #6]
 8008364:	441a      	add	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800836c:	3308      	adds	r3, #8
 800836e:	601a      	str	r2, [r3, #0]

            comm_respond(comm_ptr, PS_RESP_RDY_N, 10); // data ready
 8008370:	4b0a      	ldr	r3, [pc, #40]	; (800839c <daq_trig_postcount+0x438>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	220a      	movs	r2, #10
 8008376:	490a      	ldr	r1, [pc, #40]	; (80083a0 <daq_trig_postcount+0x43c>)
 8008378:	4618      	mov	r0, r3
 800837a:	f7fd fc5b 	bl	8005c34 <comm_respond>

            break;
 800837e:	bf00      	nop
        }
    }
    self->trig.post_start = 0;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008386:	3340      	adds	r3, #64	; 0x40
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
}
 800838c:	bf00      	nop
 800838e:	3720      	adds	r7, #32
 8008390:	46bd      	mov	sp, r7
 8008392:	bdb0      	pop	{r4, r5, r7, pc}
 8008394:	40590000 	.word	0x40590000
 8008398:	40000400 	.word	0x40000400
 800839c:	2000c268 	.word	0x2000c268
 80083a0:	08013944 	.word	0x08013944

080083a4 <daq_trig_update>:

void daq_trig_update(daq_data_t* self)
{
 80083a4:	b590      	push	{r4, r7, lr}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	6078      	str	r0, [r7, #4]
    daq_trig_set(self, self->trig.set.ch, self->trig.set.val_percent,
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80083b2:	33bc      	adds	r3, #188	; 0xbc
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461c      	mov	r4, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80083be:	33c4      	adds	r3, #196	; 0xc4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	b2d9      	uxtb	r1, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80083ca:	33b9      	adds	r3, #185	; 0xb9
 80083cc:	7818      	ldrb	r0, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80083d4:	33b8      	adds	r3, #184	; 0xb8
 80083d6:	781a      	ldrb	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80083de:	33b4      	adds	r3, #180	; 0xb4
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	9200      	str	r2, [sp, #0]
 80083e6:	4603      	mov	r3, r0
 80083e8:	460a      	mov	r2, r1
 80083ea:	4621      	mov	r1, r4
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f805 	bl	80083fc <daq_trig_set>
                 self->trig.set.edge, self->trig.set.mode, self->trig.set.pretrigger);
}
 80083f2:	bf00      	nop
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd90      	pop	{r4, r7, pc}
	...

080083fc <daq_trig_set>:
{
    daq_trig_set(self, 0, self->trig.set.val_percent, self->trig.set.edge, DISABLED, self->trig.set.pretrigger);
}

int daq_trig_set(daq_data_t* self, uint32_t ch, uint8_t level, enum trig_edge edge, enum trig_mode mode, int pretrigger)
{
 80083fc:	b5b0      	push	{r4, r5, r7, lr}
 80083fe:	b08c      	sub	sp, #48	; 0x30
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	4611      	mov	r1, r2
 8008408:	461a      	mov	r2, r3
 800840a:	460b      	mov	r3, r1
 800840c:	71fb      	strb	r3, [r7, #7]
 800840e:	4613      	mov	r3, r2
 8008410:	71bb      	strb	r3, [r7, #6]
    if((level < 0 || level > 100) ||
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	2b64      	cmp	r3, #100	; 0x64
 8008416:	d808      	bhi.n	800842a <daq_trig_set+0x2e>
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d805      	bhi.n	800842a <daq_trig_set+0x2e>
       (ch < 0 || ch > 4) ||
 800841e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008420:	2b63      	cmp	r3, #99	; 0x63
 8008422:	dc02      	bgt.n	800842a <daq_trig_set+0x2e>
       (pretrigger > 99 || pretrigger < 1))
 8008424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008426:	2b00      	cmp	r3, #0
 8008428:	dc02      	bgt.n	8008430 <daq_trig_set+0x34>
    {
        return -1;
 800842a:	f04f 33ff 	mov.w	r3, #4294967295
 800842e:	e316      	b.n	8008a5e <daq_trig_set+0x662>
    }

    daq_enable(self, 0);
 8008430:	2100      	movs	r1, #0
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f7fe fd16 	bl	8006e64 <daq_enable>
    daq_reset(self);
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f7fe fca5 	bl	8006d88 <daq_reset>
    ADC_TypeDef* adc = ADC1;
 800843e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008442:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (self->mode == LA)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800844a:	33ac      	adds	r3, #172	; 0xac
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d112      	bne.n	8008478 <daq_trig_set+0x7c>
    {
        self->trig.buff_trig = &self->buff1;
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800845a:	3328      	adds	r3, #40	; 0x28
 800845c:	601a      	str	r2, [r3, #0]
        self->trig.dma_ch_trig = PS_DMA_CH_LA;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008464:	332c      	adds	r3, #44	; 0x2c
 8008466:	2206      	movs	r2, #6
 8008468:	601a      	str	r2, [r3, #0]
        self->trig.dma_trig = PS_DMA_LA;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008470:	3330      	adds	r3, #48	; 0x30
 8008472:	4ab5      	ldr	r2, [pc, #724]	; (8008748 <daq_trig_set+0x34c>)
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	e097      	b.n	80085a8 <daq_trig_set+0x1ac>
    }
    else
    {
        int ch2 = ch;
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (ch == 0 || mode == DISABLED)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <daq_trig_set+0x8e>
 8008482:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008486:	2b03      	cmp	r3, #3
 8008488:	d126      	bne.n	80084d8 <daq_trig_set+0xdc>
        {
            if (self->set.ch1_en) ch2 = 1;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008490:	3374      	adds	r3, #116	; 0x74
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <daq_trig_set+0xa2>
 8008498:	2301      	movs	r3, #1
 800849a:	62bb      	str	r3, [r7, #40]	; 0x28
 800849c:	e01c      	b.n	80084d8 <daq_trig_set+0xdc>
            else if (self->set.ch2_en) ch2 = 2;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80084a4:	3375      	adds	r3, #117	; 0x75
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <daq_trig_set+0xb6>
 80084ac:	2302      	movs	r3, #2
 80084ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80084b0:	e012      	b.n	80084d8 <daq_trig_set+0xdc>
            else if (self->set.ch3_en) ch2 = 3;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80084b8:	3376      	adds	r3, #118	; 0x76
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <daq_trig_set+0xca>
 80084c0:	2303      	movs	r3, #3
 80084c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80084c4:	e008      	b.n	80084d8 <daq_trig_set+0xdc>
            else if (self->set.ch4_en) ch2 = 4;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80084cc:	3377      	adds	r3, #119	; 0x77
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <daq_trig_set+0xdc>
 80084d4:	2304      	movs	r3, #4
 80084d6:	62bb      	str	r3, [r7, #40]	; 0x28
                if (ch2 == 4) self->trig.order = ch_cnt - it;
        }

#elif defined(PS_ADC_MODE_ADC1234)

        self->trig.order = 0;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80084de:	333c      	adds	r3, #60	; 0x3c
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
        if (ch2 == 1)
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d114      	bne.n	8008514 <daq_trig_set+0x118>
        {
            adc = ADC1;
 80084ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80084ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            self->trig.buff_trig = &self->buff1;
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80084f8:	3328      	adds	r3, #40	; 0x28
 80084fa:	601a      	str	r2, [r3, #0]
            self->trig.dma_ch_trig = PS_DMA_CH_ADC1;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008502:	332c      	adds	r3, #44	; 0x2c
 8008504:	2201      	movs	r2, #1
 8008506:	601a      	str	r2, [r3, #0]
            self->trig.dma_trig = PS_DMA_ADC1;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800850e:	3330      	adds	r3, #48	; 0x30
 8008510:	4a8d      	ldr	r2, [pc, #564]	; (8008748 <daq_trig_set+0x34c>)
 8008512:	601a      	str	r2, [r3, #0]
        }
        if (ch2 == 2)
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	2b02      	cmp	r3, #2
 8008518:	d116      	bne.n	8008548 <daq_trig_set+0x14c>
        {
            adc = ADC2;
 800851a:	4b8c      	ldr	r3, [pc, #560]	; (800874c <daq_trig_set+0x350>)
 800851c:	62fb      	str	r3, [r7, #44]	; 0x2c
            self->trig.buff_trig = &self->buff2;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f103 020c 	add.w	r2, r3, #12
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800852a:	3328      	adds	r3, #40	; 0x28
 800852c:	601a      	str	r2, [r3, #0]
            self->trig.dma_ch_trig = PS_DMA_CH_ADC2;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008534:	332c      	adds	r3, #44	; 0x2c
 8008536:	2201      	movs	r2, #1
 8008538:	601a      	str	r2, [r3, #0]
            self->trig.dma_trig = PS_DMA_ADC2;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008540:	3330      	adds	r3, #48	; 0x30
 8008542:	4a83      	ldr	r2, [pc, #524]	; (8008750 <daq_trig_set+0x354>)
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	e02f      	b.n	80085a8 <daq_trig_set+0x1ac>
        }
        else if (ch2 == 3)
 8008548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854a:	2b03      	cmp	r3, #3
 800854c:	d116      	bne.n	800857c <daq_trig_set+0x180>
        {
            adc = ADC3;
 800854e:	4b81      	ldr	r3, [pc, #516]	; (8008754 <daq_trig_set+0x358>)
 8008550:	62fb      	str	r3, [r7, #44]	; 0x2c
            self->trig.buff_trig = &self->buff3;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f103 0218 	add.w	r2, r3, #24
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800855e:	3328      	adds	r3, #40	; 0x28
 8008560:	601a      	str	r2, [r3, #0]
            self->trig.dma_ch_trig = PS_DMA_CH_ADC3;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008568:	332c      	adds	r3, #44	; 0x2c
 800856a:	2205      	movs	r2, #5
 800856c:	601a      	str	r2, [r3, #0]
            self->trig.dma_trig = PS_DMA_ADC3;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008574:	3330      	adds	r3, #48	; 0x30
 8008576:	4a76      	ldr	r2, [pc, #472]	; (8008750 <daq_trig_set+0x354>)
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	e015      	b.n	80085a8 <daq_trig_set+0x1ac>
        }
        else // if (ch2 == 4)
        {
            adc = ADC4;
 800857c:	4b76      	ldr	r3, [pc, #472]	; (8008758 <daq_trig_set+0x35c>)
 800857e:	62fb      	str	r3, [r7, #44]	; 0x2c
            self->trig.buff_trig = &self->buff4;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800858c:	3328      	adds	r3, #40	; 0x28
 800858e:	601a      	str	r2, [r3, #0]
            self->trig.dma_ch_trig = PS_DMA_CH_ADC4;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008596:	332c      	adds	r3, #44	; 0x2c
 8008598:	2202      	movs	r2, #2
 800859a:	601a      	str	r2, [r3, #0]
            self->trig.dma_trig = PS_DMA_ADC4;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80085a2:	3330      	adds	r3, #48	; 0x30
 80085a4:	4a6a      	ldr	r2, [pc, #424]	; (8008750 <daq_trig_set+0x354>)
 80085a6:	601a      	str	r2, [r3, #0]
        }

#endif
    }

    self->trig.fullmem_val = (int)(((1.0 / (float)self->set.fs) * (float)self->set.mem) * (float)PS_SYSTICK_FREQ) + 1;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80085ae:	3378      	adds	r3, #120	; 0x78
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7f7 ffe0 	bl	8000578 <__aeabi_f2d>
 80085b8:	4603      	mov	r3, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	461a      	mov	r2, r3
 80085be:	4623      	mov	r3, r4
 80085c0:	f04f 0000 	mov.w	r0, #0
 80085c4:	4965      	ldr	r1, [pc, #404]	; (800875c <daq_trig_set+0x360>)
 80085c6:	f7f8 f959 	bl	800087c <__aeabi_ddiv>
 80085ca:	4603      	mov	r3, r0
 80085cc:	460c      	mov	r4, r1
 80085ce:	4625      	mov	r5, r4
 80085d0:	461c      	mov	r4, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80085d8:	337c      	adds	r3, #124	; 0x7c
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	ee07 3a90 	vmov	s15, r3
 80085e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e4:	ee17 0a90 	vmov	r0, s15
 80085e8:	f7f7 ffc6 	bl	8000578 <__aeabi_f2d>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4620      	mov	r0, r4
 80085f2:	4629      	mov	r1, r5
 80085f4:	f7f8 f818 	bl	8000628 <__aeabi_dmul>
 80085f8:	4603      	mov	r3, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	4618      	mov	r0, r3
 80085fe:	4621      	mov	r1, r4
 8008600:	f04f 0200 	mov.w	r2, #0
 8008604:	4b56      	ldr	r3, [pc, #344]	; (8008760 <daq_trig_set+0x364>)
 8008606:	f7f8 f80f 	bl	8000628 <__aeabi_dmul>
 800860a:	4603      	mov	r3, r0
 800860c:	460c      	mov	r4, r1
 800860e:	4618      	mov	r0, r3
 8008610:	4621      	mov	r1, r4
 8008612:	f7f8 fab9 	bl	8000b88 <__aeabi_d2iz>
 8008616:	4603      	mov	r3, r0
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008620:	3320      	adds	r3, #32
 8008622:	601a      	str	r2, [r3, #0]
    self->trig.auttrig_val = PS_AUTRIG_MIN_MS + (int)((float)self->trig.fullmem_val * 1.0);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800862a:	3320      	adds	r3, #32
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	ee07 3a90 	vmov	s15, r3
 8008632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800863a:	ee17 3a90 	vmov	r3, s15
 800863e:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008648:	3318      	adds	r3, #24
 800864a:	601a      	str	r2, [r3, #0]
    self->trig.adc_trig = adc;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008652:	3338      	adds	r3, #56	; 0x38
 8008654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008656:	601a      	str	r2, [r3, #0]

    if (ch == 0 || mode == DISABLED)
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <daq_trig_set+0x26a>
 800865e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008662:	2b03      	cmp	r3, #3
 8008664:	d12b      	bne.n	80086be <daq_trig_set+0x2c2>
    {
        ASSERT(self->trig.exti_trig != 0);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800866c:	3334      	adds	r3, #52	; 0x34
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d104      	bne.n	800867e <daq_trig_set+0x282>
 8008674:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8008678:	483a      	ldr	r0, [pc, #232]	; (8008764 <daq_trig_set+0x368>)
 800867a:	f003 f825 	bl	800b6c8 <assert2>

        NVIC_DisableIRQ(self->trig.exti_trig);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008684:	3334      	adds	r3, #52	; 0x34
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	b25b      	sxtb	r3, r3
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fe9a 	bl	80073c4 <__NVIC_DisableIRQ>
        LL_ADC_SetAnalogWDMonitChannels(adc, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 8008690:	2200      	movs	r2, #0
 8008692:	4935      	ldr	r1, [pc, #212]	; (8008768 <daq_trig_set+0x36c>)
 8008694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008696:	f7fe ff23 	bl	80074e0 <LL_ADC_SetAnalogWDMonitChannels>

        self->trig.set.ch = 0;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80086a0:	33bc      	adds	r3, #188	; 0xbc
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]
        self->trig.set.mode = DISABLED;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80086ac:	33b8      	adds	r3, #184	; 0xb8
 80086ae:	2203      	movs	r2, #3
 80086b0:	701a      	strb	r2, [r3, #0]

        daq_enable(self, 1);
 80086b2:	2101      	movs	r1, #1
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f7fe fbd5 	bl	8006e64 <daq_enable>
        return 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	e1cf      	b.n	8008a5e <daq_trig_set+0x662>
    }

    if (self->mode == LA)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80086c4:	33ac      	adds	r3, #172	; 0xac
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	f040 80a8 	bne.w	800881e <daq_trig_set+0x422>
    {

        LL_ADC_SetAnalogWDMonitChannels(adc, PS_ADC_AWD LL_ADC_AWD_DISABLE);
 80086ce:	2200      	movs	r2, #0
 80086d0:	4925      	ldr	r1, [pc, #148]	; (8008768 <daq_trig_set+0x36c>)
 80086d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086d4:	f7fe ff04 	bl	80074e0 <LL_ADC_SetAnalogWDMonitChannels>

        LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80086d8:	f107 0310 	add.w	r3, r7, #16
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	609a      	str	r2, [r3, #8]
        uint32_t extiline = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t exti = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	623b      	str	r3, [r7, #32]

        if (ch == 1)
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d10b      	bne.n	800870a <daq_trig_set+0x30e>
        {
            self->trig.exti_trig = PS_LA_IRQ_EXTI1;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80086f8:	3334      	adds	r3, #52	; 0x34
 80086fa:	2206      	movs	r2, #6
 80086fc:	601a      	str	r2, [r3, #0]
            extiline = PS_LA_EXTILINE1;
 80086fe:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
            exti = PS_LA_EXTI1;
 8008704:	2301      	movs	r3, #1
 8008706:	623b      	str	r3, [r7, #32]
 8008708:	e03b      	b.n	8008782 <daq_trig_set+0x386>
        }
        else if (ch == 2)
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b02      	cmp	r3, #2
 800870e:	d10b      	bne.n	8008728 <daq_trig_set+0x32c>
        {
            self->trig.exti_trig = PS_LA_IRQ_EXTI2;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008716:	3334      	adds	r3, #52	; 0x34
 8008718:	2207      	movs	r2, #7
 800871a:	601a      	str	r2, [r3, #0]
            extiline = PS_LA_EXTILINE2;
 800871c:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
            exti = PS_LA_EXTI2;
 8008722:	2302      	movs	r3, #2
 8008724:	623b      	str	r3, [r7, #32]
 8008726:	e02c      	b.n	8008782 <daq_trig_set+0x386>
        }
        else if (ch == 3)
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2b03      	cmp	r3, #3
 800872c:	d11e      	bne.n	800876c <daq_trig_set+0x370>
        {
            self->trig.exti_trig = PS_LA_IRQ_EXTI3;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008734:	3334      	adds	r3, #52	; 0x34
 8008736:	2208      	movs	r2, #8
 8008738:	601a      	str	r2, [r3, #0]
            extiline = PS_LA_EXTILINE3;
 800873a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
            exti = PS_LA_EXTI3;
 8008740:	2304      	movs	r3, #4
 8008742:	623b      	str	r3, [r7, #32]
 8008744:	e01d      	b.n	8008782 <daq_trig_set+0x386>
 8008746:	bf00      	nop
 8008748:	40020000 	.word	0x40020000
 800874c:	50000100 	.word	0x50000100
 8008750:	40020400 	.word	0x40020400
 8008754:	50000400 	.word	0x50000400
 8008758:	50000500 	.word	0x50000500
 800875c:	3ff00000 	.word	0x3ff00000
 8008760:	408f4000 	.word	0x408f4000
 8008764:	080138fc 	.word	0x080138fc
 8008768:	7dc00000 	.word	0x7dc00000
        }
        else // if (ch == 4)
        {
            self->trig.exti_trig = PS_LA_IRQ_EXTI4;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008772:	3334      	adds	r3, #52	; 0x34
 8008774:	2209      	movs	r2, #9
 8008776:	601a      	str	r2, [r3, #0]
            extiline = PS_LA_EXTILINE4;
 8008778:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
            exti = PS_LA_EXTI4;
 800877e:	2308      	movs	r3, #8
 8008780:	623b      	str	r3, [r7, #32]
        }

        LL_EXTI_DisableIT_0_31(PS_LA_EXTI1);
 8008782:	2001      	movs	r0, #1
 8008784:	f7fe ffa8 	bl	80076d8 <LL_EXTI_DisableIT_0_31>
        LL_EXTI_DisableIT_0_31(PS_LA_EXTI2);
 8008788:	2002      	movs	r0, #2
 800878a:	f7fe ffa5 	bl	80076d8 <LL_EXTI_DisableIT_0_31>
        LL_EXTI_DisableIT_0_31(PS_LA_EXTI3);
 800878e:	2004      	movs	r0, #4
 8008790:	f7fe ffa2 	bl	80076d8 <LL_EXTI_DisableIT_0_31>
        LL_EXTI_DisableIT_0_31(PS_LA_EXTI4);
 8008794:	2008      	movs	r0, #8
 8008796:	f7fe ff9f 	bl	80076d8 <LL_EXTI_DisableIT_0_31>

        PS_GPIO_EXTI_SRC(PS_LA_EXTI_PORT, extiline);
 800879a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800879c:	2002      	movs	r0, #2
 800879e:	f7fe ff5b 	bl	8007658 <LL_SYSCFG_SetEXTISource>

        EXTI_InitStruct.Line_0_31 = exti;
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	613b      	str	r3, [r7, #16]
        EXTI_InitStruct.LineCommand = ENABLE;
 80087a6:	2301      	movs	r3, #1
 80087a8:	763b      	strb	r3, [r7, #24]
        EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80087aa:	2300      	movs	r3, #0
 80087ac:	767b      	strb	r3, [r7, #25]
        EXTI_InitStruct.Trigger = (edge == RISING ? LL_EXTI_TRIGGER_RISING : LL_EXTI_TRIGGER_FALLING);
 80087ae:	79bb      	ldrb	r3, [r7, #6]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <daq_trig_set+0x3bc>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e000      	b.n	80087ba <daq_trig_set+0x3be>
 80087b8:	2302      	movs	r3, #2
 80087ba:	76bb      	strb	r3, [r7, #26]
        LL_EXTI_Init(&EXTI_InitStruct);
 80087bc:	f107 0310 	add.w	r3, r7, #16
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fb f907 	bl	80039d4 <LL_EXTI_Init>
        LL_EXTI_EnableIT_0_31(exti);
 80087c6:	6a38      	ldr	r0, [r7, #32]
 80087c8:	f7fe ff74 	bl	80076b4 <LL_EXTI_EnableIT_0_31>

        NVIC_SetPriority(self->trig.exti_trig, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PS_IT_PRI_EXTI, 0));
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80087d2:	3334      	adds	r3, #52	; 0x34
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	b25c      	sxtb	r4, r3
 80087d8:	f7fe fde6 	bl	80073a8 <__NVIC_GetPriorityGrouping>
 80087dc:	4603      	mov	r3, r0
 80087de:	2200      	movs	r2, #0
 80087e0:	2105      	movs	r1, #5
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe fe3a 	bl	800745c <NVIC_EncodePriority>
 80087e8:	4603      	mov	r3, r0
 80087ea:	4619      	mov	r1, r3
 80087ec:	4620      	mov	r0, r4
 80087ee:	f7fe fe0b 	bl	8007408 <__NVIC_SetPriority>
        NVIC_DisableIRQ(self->trig.exti_trig);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80087f8:	3334      	adds	r3, #52	; 0x34
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	b25b      	sxtb	r3, r3
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe fde0 	bl	80073c4 <__NVIC_DisableIRQ>

        self->trig.set.val = 0;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800880a:	33c0      	adds	r3, #192	; 0xc0
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
        self->trig.set.val_percent = 0;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008816:	33c4      	adds	r3, #196	; 0xc4
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	e0c4      	b.n	80089a8 <daq_trig_set+0x5ac>
    }
    else // SCOPE
    {
        ASSERT(self->trig.exti_trig != 0);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008824:	3334      	adds	r3, #52	; 0x34
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <daq_trig_set+0x43a>
 800882c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8008830:	488d      	ldr	r0, [pc, #564]	; (8008a68 <daq_trig_set+0x66c>)
 8008832:	f002 ff49 	bl	800b6c8 <assert2>
        NVIC_DisableIRQ(self->trig.exti_trig);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800883c:	3334      	adds	r3, #52	; 0x34
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	b25b      	sxtb	r3, r3
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fdbe 	bl	80073c4 <__NVIC_DisableIRQ>

        if ((ch == 1 && self->set.ch1_en) ||
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d106      	bne.n	800885c <daq_trig_set+0x460>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008854:	3374      	adds	r3, #116	; 0x74
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d11f      	bne.n	800889c <daq_trig_set+0x4a0>
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d106      	bne.n	8008870 <daq_trig_set+0x474>
            (ch == 2 && self->set.ch2_en) ||
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008868:	3375      	adds	r3, #117	; 0x75
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d115      	bne.n	800889c <daq_trig_set+0x4a0>
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	2b03      	cmp	r3, #3
 8008874:	d106      	bne.n	8008884 <daq_trig_set+0x488>
            (ch == 3 && self->set.ch3_en) ||
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800887c:	3376      	adds	r3, #118	; 0x76
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10b      	bne.n	800889c <daq_trig_set+0x4a0>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b04      	cmp	r3, #4
 8008888:	f040 808b 	bne.w	80089a2 <daq_trig_set+0x5a6>
            (ch == 4 && self->set.ch4_en))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008892:	3377      	adds	r3, #119	; 0x77
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 8083 	beq.w	80089a2 <daq_trig_set+0x5a6>
        {
            if (ch == 1)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d106      	bne.n	80088b0 <daq_trig_set+0x4b4>
                self->trig.awd_trig = PS_ADC_AWD1;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80088a8:	3324      	adds	r3, #36	; 0x24
 80088aa:	4a70      	ldr	r2, [pc, #448]	; (8008a6c <daq_trig_set+0x670>)
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	e01c      	b.n	80088ea <daq_trig_set+0x4ee>
            else if (ch == 2)
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d106      	bne.n	80088c4 <daq_trig_set+0x4c8>
                self->trig.awd_trig = PS_ADC_AWD2;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80088bc:	3324      	adds	r3, #36	; 0x24
 80088be:	4a6c      	ldr	r2, [pc, #432]	; (8008a70 <daq_trig_set+0x674>)
 80088c0:	601a      	str	r2, [r3, #0]
 80088c2:	e012      	b.n	80088ea <daq_trig_set+0x4ee>
            else if (ch == 3)
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d106      	bne.n	80088d8 <daq_trig_set+0x4dc>
                self->trig.awd_trig = PS_ADC_AWD3;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80088d0:	3324      	adds	r3, #36	; 0x24
 80088d2:	4a68      	ldr	r2, [pc, #416]	; (8008a74 <daq_trig_set+0x678>)
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	e008      	b.n	80088ea <daq_trig_set+0x4ee>
            else if (ch == 4)
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d105      	bne.n	80088ea <daq_trig_set+0x4ee>
                self->trig.awd_trig = PS_ADC_AWD4;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80088e4:	3324      	adds	r3, #36	; 0x24
 80088e6:	4a64      	ldr	r2, [pc, #400]	; (8008a78 <daq_trig_set+0x67c>)
 80088e8:	601a      	str	r2, [r3, #0]

            uint32_t level_raw = (int)(self->adc_max_val / 100.0 * (float)level);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 80088f0:	33a4      	adds	r3, #164	; 0xa4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7f7 fe3f 	bl	8000578 <__aeabi_f2d>
 80088fa:	f04f 0200 	mov.w	r2, #0
 80088fe:	4b5f      	ldr	r3, [pc, #380]	; (8008a7c <daq_trig_set+0x680>)
 8008900:	f7f7 ffbc 	bl	800087c <__aeabi_ddiv>
 8008904:	4603      	mov	r3, r0
 8008906:	460c      	mov	r4, r1
 8008908:	4625      	mov	r5, r4
 800890a:	461c      	mov	r4, r3
 800890c:	79fb      	ldrb	r3, [r7, #7]
 800890e:	ee07 3a90 	vmov	s15, r3
 8008912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008916:	ee17 0a90 	vmov	r0, s15
 800891a:	f7f7 fe2d 	bl	8000578 <__aeabi_f2d>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4620      	mov	r0, r4
 8008924:	4629      	mov	r1, r5
 8008926:	f7f7 fe7f 	bl	8000628 <__aeabi_dmul>
 800892a:	4603      	mov	r3, r0
 800892c:	460c      	mov	r4, r1
 800892e:	4618      	mov	r0, r3
 8008930:	4621      	mov	r1, r4
 8008932:	f7f8 f929 	bl	8000b88 <__aeabi_d2iz>
 8008936:	4603      	mov	r3, r0
 8008938:	61fb      	str	r3, [r7, #28]

            if (edge == RISING)
 800893a:	79bb      	ldrb	r3, [r7, #6]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10d      	bne.n	800895c <daq_trig_set+0x560>
            {
                LL_ADC_SetAnalogWDThresholds(adc, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH, level);
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	4a4f      	ldr	r2, [pc, #316]	; (8008a80 <daq_trig_set+0x684>)
 8008944:	494f      	ldr	r1, [pc, #316]	; (8008a84 <daq_trig_set+0x688>)
 8008946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008948:	f7fe fe04 	bl	8007554 <LL_ADC_SetAnalogWDThresholds>
                LL_ADC_SetAnalogWDThresholds(adc, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW, 0);
 800894c:	2300      	movs	r3, #0
 800894e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008952:	494c      	ldr	r1, [pc, #304]	; (8008a84 <daq_trig_set+0x688>)
 8008954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008956:	f7fe fdfd 	bl	8007554 <LL_ADC_SetAnalogWDThresholds>
 800895a:	e015      	b.n	8008988 <daq_trig_set+0x58c>
            }
            else // (edge == FALLING)
            {
                LL_ADC_SetAnalogWDThresholds(adc, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH, (int)self->adc_max_val);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008962:	33a4      	adds	r3, #164	; 0xa4
 8008964:	edd3 7a00 	vldr	s15, [r3]
 8008968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800896c:	ee17 3a90 	vmov	r3, s15
 8008970:	4a43      	ldr	r2, [pc, #268]	; (8008a80 <daq_trig_set+0x684>)
 8008972:	4944      	ldr	r1, [pc, #272]	; (8008a84 <daq_trig_set+0x688>)
 8008974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008976:	f7fe fded 	bl	8007554 <LL_ADC_SetAnalogWDThresholds>
                LL_ADC_SetAnalogWDThresholds(adc, PS_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW, level);
 800897a:	79fb      	ldrb	r3, [r7, #7]
 800897c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008980:	4940      	ldr	r1, [pc, #256]	; (8008a84 <daq_trig_set+0x688>)
 8008982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008984:	f7fe fde6 	bl	8007554 <LL_ADC_SetAnalogWDThresholds>
            }

            self->trig.set.val = level_raw;
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008990:	33c0      	adds	r3, #192	; 0xc0
 8008992:	601a      	str	r2, [r3, #0]
            self->trig.set.val_percent = level;
 8008994:	79fa      	ldrb	r2, [r7, #7]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800899c:	33c4      	adds	r3, #196	; 0xc4
 800899e:	601a      	str	r2, [r3, #0]
        {
 80089a0:	e002      	b.n	80089a8 <daq_trig_set+0x5ac>
        }
        else return -1;
 80089a2:	f04f 33ff 	mov.w	r3, #4294967295
 80089a6:	e05a      	b.n	8008a5e <daq_trig_set+0x662>
    }

    self->trig.pretrig_val = (int)((float)self->trig.fullmem_val * ((float)pretrigger / 100.0)) + 1;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80089ae:	3320      	adds	r3, #32
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089ba:	ee17 0a90 	vmov	r0, s15
 80089be:	f7f7 fddb 	bl	8000578 <__aeabi_f2d>
 80089c2:	4604      	mov	r4, r0
 80089c4:	460d      	mov	r5, r1
 80089c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089c8:	ee07 3a90 	vmov	s15, r3
 80089cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089d0:	ee17 0a90 	vmov	r0, s15
 80089d4:	f7f7 fdd0 	bl	8000578 <__aeabi_f2d>
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	4b27      	ldr	r3, [pc, #156]	; (8008a7c <daq_trig_set+0x680>)
 80089de:	f7f7 ff4d 	bl	800087c <__aeabi_ddiv>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4620      	mov	r0, r4
 80089e8:	4629      	mov	r1, r5
 80089ea:	f7f7 fe1d 	bl	8000628 <__aeabi_dmul>
 80089ee:	4603      	mov	r3, r0
 80089f0:	460c      	mov	r4, r1
 80089f2:	4618      	mov	r0, r3
 80089f4:	4621      	mov	r1, r4
 80089f6:	f7f8 f8c7 	bl	8000b88 <__aeabi_d2iz>
 80089fa:	4603      	mov	r3, r0
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008a04:	3314      	adds	r3, #20
 8008a06:	601a      	str	r2, [r3, #0]
    self->trig.set.pretrigger = pretrigger;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008a0e:	33b4      	adds	r3, #180	; 0xb4
 8008a10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a12:	601a      	str	r2, [r3, #0]
    self->trig.set.mode = mode;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008a1a:	33b8      	adds	r3, #184	; 0xb8
 8008a1c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008a20:	701a      	strb	r2, [r3, #0]
    self->trig.set.edge = edge;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008a28:	33b9      	adds	r3, #185	; 0xb9
 8008a2a:	79ba      	ldrb	r2, [r7, #6]
 8008a2c:	701a      	strb	r2, [r3, #0]
    self->trig.set.ch = ch;
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008a36:	33bc      	adds	r3, #188	; 0xbc
 8008a38:	601a      	str	r2, [r3, #0]

    if (self->trig.pretrig_val < PS_PRETRIG_MIN_MS)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008a40:	3314      	adds	r3, #20
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	dc05      	bgt.n	8008a54 <daq_trig_set+0x658>
        self->trig.pretrig_val = PS_PRETRIG_MIN_MS;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008a4e:	3314      	adds	r3, #20
 8008a50:	220a      	movs	r2, #10
 8008a52:	601a      	str	r2, [r3, #0]

    daq_enable(self, 1);
 8008a54:	2101      	movs	r1, #1
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f7fe fa04 	bl	8006e64 <daq_enable>
    return 0;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3730      	adds	r7, #48	; 0x30
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bdb0      	pop	{r4, r5, r7, pc}
 8008a66:	bf00      	nop
 8008a68:	080138fc 	.word	0x080138fc
 8008a6c:	18c00040 	.word	0x18c00040
 8008a70:	1cc00080 	.word	0x1cc00080
 8008a74:	30c01000 	.word	0x30c01000
 8008a78:	10c00010 	.word	0x10c00010
 8008a7c:	40590000 	.word	0x40590000
 8008a80:	0fff0000 	.word	0x0fff0000
 8008a84:	7dc00000 	.word	0x7dc00000

08008a88 <get_last_circ_idx>:
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
    int last_idx = pos - 1;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	60fb      	str	r3, [r7, #12]
    if (last_idx < 0)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	da02      	bge.n	8008aa4 <get_last_circ_idx+0x1c>
        last_idx = len - 1;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	60fb      	str	r3, [r7, #12]
    return last_idx;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <LL_ADC_IsActiveFlag_AWD1>:
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b083      	sub	sp, #12
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac2:	2b80      	cmp	r3, #128	; 0x80
 8008ac4:	bf0c      	ite	eq
 8008ac6:	2301      	moveq	r3, #1
 8008ac8:	2300      	movne	r3, #0
 8008aca:	b2db      	uxtb	r3, r3
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <LL_ADC_ClearFlag_AWD1>:
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2280      	movs	r2, #128	; 0x80
 8008ae4:	601a      	str	r2, [r3, #0]
}
 8008ae6:	bf00      	nop
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
	...

08008af4 <LL_DMA_GetDataLength>:
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	3b01      	subs	r3, #1
 8008b02:	4a06      	ldr	r2, [pc, #24]	; (8008b1c <LL_DMA_GetDataLength+0x28>)
 8008b04:	5cd3      	ldrb	r3, [r2, r3]
 8008b06:	461a      	mov	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	b29b      	uxth	r3, r3
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	08013eec 	.word	0x08013eec

08008b20 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8008b28:	4b07      	ldr	r3, [pc, #28]	; (8008b48 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8008b2a:	695a      	ldr	r2, [r3, #20]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4013      	ands	r3, r2
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	bf0c      	ite	eq
 8008b36:	2301      	moveq	r3, #1
 8008b38:	2300      	movne	r3, #0
 8008b3a:	b2db      	uxtb	r3, r3
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr
 8008b48:	40010400 	.word	0x40010400

08008b4c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8008b54:	4a04      	ldr	r2, [pc, #16]	; (8008b68 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6153      	str	r3, [r2, #20]
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	40010400 	.word	0x40010400

08008b6c <LL_TIM_ClearFlag_UPDATE>:
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f06f 0201 	mvn.w	r2, #1
 8008b7a:	611a      	str	r2, [r3, #16]
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d101      	bne.n	8008ba0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e000      	b.n	8008ba2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <LL_TIM_ClearFlag_CC4>:
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f06f 0210 	mvn.w	r2, #16
 8008bbc:	611a      	str	r2, [r3, #16]
}
 8008bbe:	bf00      	nop
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <LL_TIM_IsActiveFlag_CC4>:
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b083      	sub	sp, #12
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f003 0310 	and.w	r3, r3, #16
 8008bda:	2b10      	cmp	r3, #16
 8008bdc:	d101      	bne.n	8008be2 <LL_TIM_IsActiveFlag_CC4+0x18>
 8008bde:	2301      	movs	r3, #1
 8008be0:	e000      	b.n	8008be4 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <LL_USART_IsActiveFlag_RXNE>:
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	f003 0320 	and.w	r3, r3, #32
 8008c00:	2b20      	cmp	r3, #32
 8008c02:	d101      	bne.n	8008c08 <LL_USART_IsActiveFlag_RXNE+0x18>
 8008c04:	2301      	movs	r3, #1
 8008c06:	e000      	b.n	8008c0a <LL_USART_IsActiveFlag_RXNE+0x1a>
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <LL_USART_ClearFlag_RTO>:
{
 8008c16:	b480      	push	{r7}
 8008c18:	b083      	sub	sp, #12
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c24:	621a      	str	r2, [r3, #32]
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <LL_USART_ReceiveData8>:
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	b2db      	uxtb	r3, r3
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
	...

08008c50 <SysTick_Handler>:
    return USBD_OK;
}
*/

void SysTick_Handler(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
    if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8008c54:	f008 faaa 	bl	80111ac <xTaskGetSchedulerState>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d001      	beq.n	8008c62 <SysTick_Handler+0x12>
        xPortSysTickHandler();
 8008c5e:	f007 f81b 	bl	800fc98 <xPortSysTickHandler>
#ifdef PS_HAL_SYSTICK
    HAL_IncTick();
#endif
    daq.uwTick++;
 8008c62:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <SysTick_Handler+0x2c>)
 8008c64:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008c68:	33a8      	adds	r3, #168	; 0xa8
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	4b03      	ldr	r3, [pc, #12]	; (8008c7c <SysTick_Handler+0x2c>)
 8008c70:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8008c74:	33a8      	adds	r3, #168	; 0xa8
 8008c76:	601a      	str	r2, [r3, #0]
}
 8008c78:	bf00      	nop
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	200007ec 	.word	0x200007ec

08008c80 <SVC_Handler>:

void SVC_Handler(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0
    vPortSVCHandler();
 8008c84:	f006 fee4 	bl	800fa50 <vPortSVCHandler>
}
 8008c88:	bf00      	nop
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <PendSV_Handler>:

void PendSV_Handler(void)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0
    xPortPendSVHandler();
 8008c90:	f006 ffde 	bl	800fc50 <xPortPendSVHandler>
}
 8008c94:	bf00      	nop
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
    if (LL_USART_IsActiveFlag_RXNE(PS_UART) == 1)
 8008c9e:	482b      	ldr	r0, [pc, #172]	; (8008d4c <USART1_IRQHandler+0xb4>)
 8008ca0:	f7ff ffa6 	bl	8008bf0 <LL_USART_IsActiveFlag_RXNE>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d14c      	bne.n	8008d44 <USART1_IRQHandler+0xac>
    {
        char rx = LL_USART_ReceiveData8(PS_UART);
 8008caa:	4828      	ldr	r0, [pc, #160]	; (8008d4c <USART1_IRQHandler+0xb4>)
 8008cac:	f7ff ffc1 	bl	8008c32 <LL_USART_ReceiveData8>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	71fb      	strb	r3, [r7, #7]

        comm.uart.rx_buffer[comm.uart.rx_index++] = rx;
 8008cb4:	4b26      	ldr	r3, [pc, #152]	; (8008d50 <USART1_IRQHandler+0xb8>)
 8008cb6:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	b2d1      	uxtb	r1, r2
 8008cbe:	4a24      	ldr	r2, [pc, #144]	; (8008d50 <USART1_IRQHandler+0xb8>)
 8008cc0:	f882 10cd 	strb.w	r1, [r2, #205]	; 0xcd
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	4b22      	ldr	r3, [pc, #136]	; (8008d50 <USART1_IRQHandler+0xb8>)
 8008cc8:	4413      	add	r3, r2
 8008cca:	79fa      	ldrb	r2, [r7, #7]
 8008ccc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67

        if (comm.uart.rx_index >= RX_BUFF_LAST)
 8008cd0:	4b1f      	ldr	r3, [pc, #124]	; (8008d50 <USART1_IRQHandler+0xb8>)
 8008cd2:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8008cd6:	2b62      	cmp	r3, #98	; 0x62
 8008cd8:	d903      	bls.n	8008ce2 <USART1_IRQHandler+0x4a>
            comm.uart.rx_index = 0;
 8008cda:	4b1d      	ldr	r3, [pc, #116]	; (8008d50 <USART1_IRQHandler+0xb8>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

        comm.uart.last = 1;
 8008ce2:	4b1b      	ldr	r3, [pc, #108]	; (8008d50 <USART1_IRQHandler+0xb8>)
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        comm.usb.last = 0;
 8008cea:	4b19      	ldr	r3, [pc, #100]	; (8008d50 <USART1_IRQHandler+0xb8>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

        if (rx == '\n')
 8008cf2:	79fb      	ldrb	r3, [r7, #7]
 8008cf4:	2b0a      	cmp	r3, #10
 8008cf6:	d122      	bne.n	8008d3e <USART1_IRQHandler+0xa6>
        {
            portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	603b      	str	r3, [r7, #0]
            if(xSemaphoreGiveFromISR(sem1_comm, &xHigherPriorityTaskWoken) != pdPASS)
 8008cfc:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <USART1_IRQHandler+0xbc>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	463a      	mov	r2, r7
 8008d02:	4611      	mov	r1, r2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f007 fa65 	bl	80101d4 <xQueueGiveFromISR>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d004      	beq.n	8008d1a <USART1_IRQHandler+0x82>
            {
                comm.uart.rx_index = 0;
 8008d10:	4b0f      	ldr	r3, [pc, #60]	; (8008d50 <USART1_IRQHandler+0xb8>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8008d18:	e011      	b.n	8008d3e <USART1_IRQHandler+0xa6>
            }
            else
            {
                comm.uart.available = 1;
 8008d1a:	4b0d      	ldr	r3, [pc, #52]	; (8008d50 <USART1_IRQHandler+0xb8>)
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
                if (xHigherPriorityTaskWoken != pdFALSE)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <USART1_IRQHandler+0xa6>
                    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d007      	beq.n	8008d3e <USART1_IRQHandler+0xa6>
 8008d2e:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <USART1_IRQHandler+0xc0>)
 8008d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	f3bf 8f6f 	isb	sy
            }
        }
        PS_UART_CLEAR_FLAG(PS_UART);
 8008d3e:	4803      	ldr	r0, [pc, #12]	; (8008d4c <USART1_IRQHandler+0xb4>)
 8008d40:	f7ff ff69 	bl	8008c16 <LL_USART_ClearFlag_RTO>
    }
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	40004400 	.word	0x40004400
 8008d50:	2000c334 	.word	0x2000c334
 8008d54:	2000c2b4 	.word	0x2000c2b4
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 8008d5c:	b598      	push	{r3, r4, r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, daq.trig.dma_trig); // critical
 8008d60:	4b21      	ldr	r3, [pc, #132]	; (8008de8 <ADC1_2_IRQHandler+0x8c>)
 8008d62:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008d66:	3328      	adds	r3, #40	; 0x28
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	88db      	ldrh	r3, [r3, #6]
 8008d6c:	461c      	mov	r4, r3
 8008d6e:	4b1e      	ldr	r3, [pc, #120]	; (8008de8 <ADC1_2_IRQHandler+0x8c>)
 8008d70:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008d74:	3330      	adds	r3, #48	; 0x30
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	4b1b      	ldr	r3, [pc, #108]	; (8008de8 <ADC1_2_IRQHandler+0x8c>)
 8008d7a:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008d7e:	332c      	adds	r3, #44	; 0x2c
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4619      	mov	r1, r3
 8008d84:	4610      	mov	r0, r2
 8008d86:	f7ff feb5 	bl	8008af4 <LL_DMA_GetDataLength>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	1ae3      	subs	r3, r4, r3
 8008d8e:	461a      	mov	r2, r3
 8008d90:	4b15      	ldr	r3, [pc, #84]	; (8008de8 <ADC1_2_IRQHandler+0x8c>)
 8008d92:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008d96:	3328      	adds	r3, #40	; 0x28
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	88db      	ldrh	r3, [r3, #6]
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4610      	mov	r0, r2
 8008da0:	f7ff fe72 	bl	8008a88 <get_last_circ_idx>
 8008da4:	4602      	mov	r2, r0
 8008da6:	4b10      	ldr	r3, [pc, #64]	; (8008de8 <ADC1_2_IRQHandler+0x8c>)
 8008da8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008dac:	3348      	adds	r3, #72	; 0x48
 8008dae:	601a      	str	r2, [r3, #0]

#if defined(PS_ADC_MODE_ADC1) || defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
    if (LL_ADC_IsActiveFlag_AWD1(ADC1) == 1)
 8008db0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008db4:	f7ff fe7d 	bl	8008ab2 <LL_ADC_IsActiveFlag_AWD1>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d106      	bne.n	8008dcc <ADC1_2_IRQHandler+0x70>
    {
        daq_trig_trigger_scope(&daq);
 8008dbe:	480a      	ldr	r0, [pc, #40]	; (8008de8 <ADC1_2_IRQHandler+0x8c>)
 8008dc0:	f7fe fe6e 	bl	8007aa0 <daq_trig_trigger_scope>
        LL_ADC_ClearFlag_AWD1(ADC1);
 8008dc4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008dc8:	f7ff fe86 	bl	8008ad8 <LL_ADC_ClearFlag_AWD1>
    }

    if (LL_ADC_IsActiveFlag_AWD1(ADC2) == 1)
 8008dcc:	4807      	ldr	r0, [pc, #28]	; (8008dec <ADC1_2_IRQHandler+0x90>)
 8008dce:	f7ff fe70 	bl	8008ab2 <LL_ADC_IsActiveFlag_AWD1>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d105      	bne.n	8008de4 <ADC1_2_IRQHandler+0x88>
    {
        daq_trig_trigger_scope(&daq);
 8008dd8:	4803      	ldr	r0, [pc, #12]	; (8008de8 <ADC1_2_IRQHandler+0x8c>)
 8008dda:	f7fe fe61 	bl	8007aa0 <daq_trig_trigger_scope>
        LL_ADC_ClearFlag_AWD1(ADC2);
 8008dde:	4803      	ldr	r0, [pc, #12]	; (8008dec <ADC1_2_IRQHandler+0x90>)
 8008de0:	f7ff fe7a 	bl	8008ad8 <LL_ADC_ClearFlag_AWD1>
    }
#endif
}
 8008de4:	bf00      	nop
 8008de6:	bd98      	pop	{r3, r4, r7, pc}
 8008de8:	200007ec 	.word	0x200007ec
 8008dec:	50000100 	.word	0x50000100

08008df0 <ADC3_IRQHandler>:

#if defined(PS_ADC_MODE_ADC1234)
void ADC3_IRQHandler(void)
{
 8008df0:	b598      	push	{r3, r4, r7, lr}
 8008df2:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, daq.trig.dma_trig); // critical
 8008df4:	4b1a      	ldr	r3, [pc, #104]	; (8008e60 <ADC3_IRQHandler+0x70>)
 8008df6:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008dfa:	3328      	adds	r3, #40	; 0x28
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	88db      	ldrh	r3, [r3, #6]
 8008e00:	461c      	mov	r4, r3
 8008e02:	4b17      	ldr	r3, [pc, #92]	; (8008e60 <ADC3_IRQHandler+0x70>)
 8008e04:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008e08:	3330      	adds	r3, #48	; 0x30
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	4b14      	ldr	r3, [pc, #80]	; (8008e60 <ADC3_IRQHandler+0x70>)
 8008e0e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008e12:	332c      	adds	r3, #44	; 0x2c
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4619      	mov	r1, r3
 8008e18:	4610      	mov	r0, r2
 8008e1a:	f7ff fe6b 	bl	8008af4 <LL_DMA_GetDataLength>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	1ae3      	subs	r3, r4, r3
 8008e22:	461a      	mov	r2, r3
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <ADC3_IRQHandler+0x70>)
 8008e26:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008e2a:	3328      	adds	r3, #40	; 0x28
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	88db      	ldrh	r3, [r3, #6]
 8008e30:	4619      	mov	r1, r3
 8008e32:	4610      	mov	r0, r2
 8008e34:	f7ff fe28 	bl	8008a88 <get_last_circ_idx>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <ADC3_IRQHandler+0x70>)
 8008e3c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008e40:	3348      	adds	r3, #72	; 0x48
 8008e42:	601a      	str	r2, [r3, #0]

    if (LL_ADC_IsActiveFlag_AWD1(ADC3) == 1)
 8008e44:	4807      	ldr	r0, [pc, #28]	; (8008e64 <ADC3_IRQHandler+0x74>)
 8008e46:	f7ff fe34 	bl	8008ab2 <LL_ADC_IsActiveFlag_AWD1>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d105      	bne.n	8008e5c <ADC3_IRQHandler+0x6c>
    {
        daq_trig_trigger_scope(&daq);
 8008e50:	4803      	ldr	r0, [pc, #12]	; (8008e60 <ADC3_IRQHandler+0x70>)
 8008e52:	f7fe fe25 	bl	8007aa0 <daq_trig_trigger_scope>
        LL_ADC_ClearFlag_AWD1(ADC3);
 8008e56:	4803      	ldr	r0, [pc, #12]	; (8008e64 <ADC3_IRQHandler+0x74>)
 8008e58:	f7ff fe3e 	bl	8008ad8 <LL_ADC_ClearFlag_AWD1>
    }
}
 8008e5c:	bf00      	nop
 8008e5e:	bd98      	pop	{r3, r4, r7, pc}
 8008e60:	200007ec 	.word	0x200007ec
 8008e64:	50000400 	.word	0x50000400

08008e68 <ADC4_IRQHandler>:

void ADC4_IRQHandler(void)
{
 8008e68:	b598      	push	{r3, r4, r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, daq.trig.dma_trig); // critical
 8008e6c:	4b1a      	ldr	r3, [pc, #104]	; (8008ed8 <ADC4_IRQHandler+0x70>)
 8008e6e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008e72:	3328      	adds	r3, #40	; 0x28
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	88db      	ldrh	r3, [r3, #6]
 8008e78:	461c      	mov	r4, r3
 8008e7a:	4b17      	ldr	r3, [pc, #92]	; (8008ed8 <ADC4_IRQHandler+0x70>)
 8008e7c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008e80:	3330      	adds	r3, #48	; 0x30
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <ADC4_IRQHandler+0x70>)
 8008e86:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008e8a:	332c      	adds	r3, #44	; 0x2c
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4610      	mov	r0, r2
 8008e92:	f7ff fe2f 	bl	8008af4 <LL_DMA_GetDataLength>
 8008e96:	4603      	mov	r3, r0
 8008e98:	1ae3      	subs	r3, r4, r3
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	4b0e      	ldr	r3, [pc, #56]	; (8008ed8 <ADC4_IRQHandler+0x70>)
 8008e9e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008ea2:	3328      	adds	r3, #40	; 0x28
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	88db      	ldrh	r3, [r3, #6]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4610      	mov	r0, r2
 8008eac:	f7ff fdec 	bl	8008a88 <get_last_circ_idx>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <ADC4_IRQHandler+0x70>)
 8008eb4:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008eb8:	3348      	adds	r3, #72	; 0x48
 8008eba:	601a      	str	r2, [r3, #0]

    if (LL_ADC_IsActiveFlag_AWD1(ADC4) == 1)
 8008ebc:	4807      	ldr	r0, [pc, #28]	; (8008edc <ADC4_IRQHandler+0x74>)
 8008ebe:	f7ff fdf8 	bl	8008ab2 <LL_ADC_IsActiveFlag_AWD1>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d105      	bne.n	8008ed4 <ADC4_IRQHandler+0x6c>
    {
        daq_trig_trigger_scope(&daq);
 8008ec8:	4803      	ldr	r0, [pc, #12]	; (8008ed8 <ADC4_IRQHandler+0x70>)
 8008eca:	f7fe fde9 	bl	8007aa0 <daq_trig_trigger_scope>
        LL_ADC_ClearFlag_AWD1(ADC4);
 8008ece:	4803      	ldr	r0, [pc, #12]	; (8008edc <ADC4_IRQHandler+0x74>)
 8008ed0:	f7ff fe02 	bl	8008ad8 <LL_ADC_ClearFlag_AWD1>
    }
}
 8008ed4:	bf00      	nop
 8008ed6:	bd98      	pop	{r3, r4, r7, pc}
 8008ed8:	200007ec 	.word	0x200007ec
 8008edc:	50000500 	.word	0x50000500

08008ee0 <TIM8_UP_IRQHandler>:
#endif

void PS_TIM_CNTR_UP_IRQh(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
    if(LL_TIM_IsActiveFlag_UPDATE(PS_TIM_CNTR) == 1)
 8008ee4:	4808      	ldr	r0, [pc, #32]	; (8008f08 <TIM8_UP_IRQHandler+0x28>)
 8008ee6:	f7ff fe4f 	bl	8008b88 <LL_TIM_IsActiveFlag_UPDATE>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d109      	bne.n	8008f04 <TIM8_UP_IRQHandler+0x24>
    {
        LL_TIM_ClearFlag_UPDATE(PS_TIM_CNTR);
 8008ef0:	4805      	ldr	r0, [pc, #20]	; (8008f08 <TIM8_UP_IRQHandler+0x28>)
 8008ef2:	f7ff fe3b 	bl	8008b6c <LL_TIM_ClearFlag_UPDATE>
        cntr.ovf++;
 8008ef6:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <TIM8_UP_IRQHandler+0x2c>)
 8008ef8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8008efc:	3301      	adds	r3, #1
 8008efe:	4a03      	ldr	r2, [pc, #12]	; (8008f0c <TIM8_UP_IRQHandler+0x2c>)
 8008f00:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
    }
}
 8008f04:	bf00      	nop
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	40013400 	.word	0x40013400
 8008f0c:	20000604 	.word	0x20000604

08008f10 <TIM8_CC_IRQHandler>:

void PS_TIM_CNTR_CCR_IRQh(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	af00      	add	r7, sp, #0
    if (cntr.data_ovf_it < PS_CNTR_BUFF_SZ)
 8008f14:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <TIM8_CC_IRQHandler+0x44>)
 8008f16:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8008f1a:	2b63      	cmp	r3, #99	; 0x63
 8008f1c:	dc0e      	bgt.n	8008f3c <TIM8_CC_IRQHandler+0x2c>
        cntr.data_ovf[cntr.data_ovf_it++] = cntr.ovf; // BUG
 8008f1e:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <TIM8_CC_IRQHandler+0x44>)
 8008f20:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8008f24:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <TIM8_CC_IRQHandler+0x44>)
 8008f26:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	4909      	ldr	r1, [pc, #36]	; (8008f54 <TIM8_CC_IRQHandler+0x44>)
 8008f2e:	f8c1 2190 	str.w	r2, [r1, #400]	; 0x190
 8008f32:	b281      	uxth	r1, r0
 8008f34:	4a07      	ldr	r2, [pc, #28]	; (8008f54 <TIM8_CC_IRQHandler+0x44>)
 8008f36:	3364      	adds	r3, #100	; 0x64
 8008f38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    if(PS_TIM_CNTR_CC(LL_TIM_IsActiveFlag_)(PS_TIM_CNTR) == 1)
 8008f3c:	4806      	ldr	r0, [pc, #24]	; (8008f58 <TIM8_CC_IRQHandler+0x48>)
 8008f3e:	f7ff fe44 	bl	8008bca <LL_TIM_IsActiveFlag_CC4>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d102      	bne.n	8008f4e <TIM8_CC_IRQHandler+0x3e>
    {
        PS_TIM_CNTR_CC(LL_TIM_ClearFlag_)(PS_TIM_CNTR);
 8008f48:	4803      	ldr	r0, [pc, #12]	; (8008f58 <TIM8_CC_IRQHandler+0x48>)
 8008f4a:	f7ff fe30 	bl	8008bae <LL_TIM_ClearFlag_CC4>
    }
}
 8008f4e:	bf00      	nop
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20000604 	.word	0x20000604
 8008f58:	40013400 	.word	0x40013400

08008f5c <EXTI0_IRQHandler>:

void PS_LA_CH1_IRQh(void)
{
 8008f5c:	b598      	push	{r3, r4, r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, PS_DMA_LA); // critical
 8008f60:	4b18      	ldr	r3, [pc, #96]	; (8008fc4 <EXTI0_IRQHandler+0x68>)
 8008f62:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008f66:	3328      	adds	r3, #40	; 0x28
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	88db      	ldrh	r3, [r3, #6]
 8008f6c:	461c      	mov	r4, r3
 8008f6e:	4b15      	ldr	r3, [pc, #84]	; (8008fc4 <EXTI0_IRQHandler+0x68>)
 8008f70:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008f74:	332c      	adds	r3, #44	; 0x2c
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	4813      	ldr	r0, [pc, #76]	; (8008fc8 <EXTI0_IRQHandler+0x6c>)
 8008f7c:	f7ff fdba 	bl	8008af4 <LL_DMA_GetDataLength>
 8008f80:	4603      	mov	r3, r0
 8008f82:	1ae3      	subs	r3, r4, r3
 8008f84:	461a      	mov	r2, r3
 8008f86:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <EXTI0_IRQHandler+0x68>)
 8008f88:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008f8c:	3328      	adds	r3, #40	; 0x28
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	88db      	ldrh	r3, [r3, #6]
 8008f92:	4619      	mov	r1, r3
 8008f94:	4610      	mov	r0, r2
 8008f96:	f7ff fd77 	bl	8008a88 <get_last_circ_idx>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <EXTI0_IRQHandler+0x68>)
 8008f9e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008fa2:	3348      	adds	r3, #72	; 0x48
 8008fa4:	601a      	str	r2, [r3, #0]

    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI1) == 1)
 8008fa6:	2001      	movs	r0, #1
 8008fa8:	f7ff fdba 	bl	8008b20 <LL_EXTI_IsActiveFlag_0_31>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d105      	bne.n	8008fbe <EXTI0_IRQHandler+0x62>
    {
        daq_trig_trigger_la(&daq);
 8008fb2:	4804      	ldr	r0, [pc, #16]	; (8008fc4 <EXTI0_IRQHandler+0x68>)
 8008fb4:	f7fe ff24 	bl	8007e00 <daq_trig_trigger_la>
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI1);
 8008fb8:	2001      	movs	r0, #1
 8008fba:	f7ff fdc7 	bl	8008b4c <LL_EXTI_ClearFlag_0_31>
    }
}
 8008fbe:	bf00      	nop
 8008fc0:	bd98      	pop	{r3, r4, r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	200007ec 	.word	0x200007ec
 8008fc8:	40020000 	.word	0x40020000

08008fcc <EXTI1_IRQHandler>:

void PS_LA_CH2_IRQh(void)
{
 8008fcc:	b598      	push	{r3, r4, r7, lr}
 8008fce:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, PS_DMA_LA); // critical
 8008fd0:	4b18      	ldr	r3, [pc, #96]	; (8009034 <EXTI1_IRQHandler+0x68>)
 8008fd2:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008fd6:	3328      	adds	r3, #40	; 0x28
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	88db      	ldrh	r3, [r3, #6]
 8008fdc:	461c      	mov	r4, r3
 8008fde:	4b15      	ldr	r3, [pc, #84]	; (8009034 <EXTI1_IRQHandler+0x68>)
 8008fe0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008fe4:	332c      	adds	r3, #44	; 0x2c
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4813      	ldr	r0, [pc, #76]	; (8009038 <EXTI1_IRQHandler+0x6c>)
 8008fec:	f7ff fd82 	bl	8008af4 <LL_DMA_GetDataLength>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	1ae3      	subs	r3, r4, r3
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <EXTI1_IRQHandler+0x68>)
 8008ff8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8008ffc:	3328      	adds	r3, #40	; 0x28
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	88db      	ldrh	r3, [r3, #6]
 8009002:	4619      	mov	r1, r3
 8009004:	4610      	mov	r0, r2
 8009006:	f7ff fd3f 	bl	8008a88 <get_last_circ_idx>
 800900a:	4602      	mov	r2, r0
 800900c:	4b09      	ldr	r3, [pc, #36]	; (8009034 <EXTI1_IRQHandler+0x68>)
 800900e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8009012:	3348      	adds	r3, #72	; 0x48
 8009014:	601a      	str	r2, [r3, #0]

    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI2) == 1)
 8009016:	2002      	movs	r0, #2
 8009018:	f7ff fd82 	bl	8008b20 <LL_EXTI_IsActiveFlag_0_31>
 800901c:	4603      	mov	r3, r0
 800901e:	2b01      	cmp	r3, #1
 8009020:	d105      	bne.n	800902e <EXTI1_IRQHandler+0x62>
    {
        daq_trig_trigger_la(&daq);
 8009022:	4804      	ldr	r0, [pc, #16]	; (8009034 <EXTI1_IRQHandler+0x68>)
 8009024:	f7fe feec 	bl	8007e00 <daq_trig_trigger_la>
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI2);
 8009028:	2002      	movs	r0, #2
 800902a:	f7ff fd8f 	bl	8008b4c <LL_EXTI_ClearFlag_0_31>
    }
}
 800902e:	bf00      	nop
 8009030:	bd98      	pop	{r3, r4, r7, pc}
 8009032:	bf00      	nop
 8009034:	200007ec 	.word	0x200007ec
 8009038:	40020000 	.word	0x40020000

0800903c <EXTI2_TSC_IRQHandler>:

void PS_LA_CH3_IRQh(void)
{
 800903c:	b598      	push	{r3, r4, r7, lr}
 800903e:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, PS_DMA_LA); // critical
 8009040:	4b18      	ldr	r3, [pc, #96]	; (80090a4 <EXTI2_TSC_IRQHandler+0x68>)
 8009042:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8009046:	3328      	adds	r3, #40	; 0x28
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	88db      	ldrh	r3, [r3, #6]
 800904c:	461c      	mov	r4, r3
 800904e:	4b15      	ldr	r3, [pc, #84]	; (80090a4 <EXTI2_TSC_IRQHandler+0x68>)
 8009050:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8009054:	332c      	adds	r3, #44	; 0x2c
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4619      	mov	r1, r3
 800905a:	4813      	ldr	r0, [pc, #76]	; (80090a8 <EXTI2_TSC_IRQHandler+0x6c>)
 800905c:	f7ff fd4a 	bl	8008af4 <LL_DMA_GetDataLength>
 8009060:	4603      	mov	r3, r0
 8009062:	1ae3      	subs	r3, r4, r3
 8009064:	461a      	mov	r2, r3
 8009066:	4b0f      	ldr	r3, [pc, #60]	; (80090a4 <EXTI2_TSC_IRQHandler+0x68>)
 8009068:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800906c:	3328      	adds	r3, #40	; 0x28
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	88db      	ldrh	r3, [r3, #6]
 8009072:	4619      	mov	r1, r3
 8009074:	4610      	mov	r0, r2
 8009076:	f7ff fd07 	bl	8008a88 <get_last_circ_idx>
 800907a:	4602      	mov	r2, r0
 800907c:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <EXTI2_TSC_IRQHandler+0x68>)
 800907e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8009082:	3348      	adds	r3, #72	; 0x48
 8009084:	601a      	str	r2, [r3, #0]

    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI3) == 1)
 8009086:	2004      	movs	r0, #4
 8009088:	f7ff fd4a 	bl	8008b20 <LL_EXTI_IsActiveFlag_0_31>
 800908c:	4603      	mov	r3, r0
 800908e:	2b01      	cmp	r3, #1
 8009090:	d105      	bne.n	800909e <EXTI2_TSC_IRQHandler+0x62>
    {
        daq_trig_trigger_la(&daq);
 8009092:	4804      	ldr	r0, [pc, #16]	; (80090a4 <EXTI2_TSC_IRQHandler+0x68>)
 8009094:	f7fe feb4 	bl	8007e00 <daq_trig_trigger_la>
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI3);
 8009098:	2004      	movs	r0, #4
 800909a:	f7ff fd57 	bl	8008b4c <LL_EXTI_ClearFlag_0_31>
    }
}
 800909e:	bf00      	nop
 80090a0:	bd98      	pop	{r3, r4, r7, pc}
 80090a2:	bf00      	nop
 80090a4:	200007ec 	.word	0x200007ec
 80090a8:	40020000 	.word	0x40020000

080090ac <EXTI3_IRQHandler>:

void PS_LA_CH4_IRQh(void)
{
 80090ac:	b598      	push	{r3, r4, r7, lr}
 80090ae:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = PS_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, PS_DMA_LA); // critical
 80090b0:	4b18      	ldr	r3, [pc, #96]	; (8009114 <EXTI3_IRQHandler+0x68>)
 80090b2:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80090b6:	3328      	adds	r3, #40	; 0x28
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	88db      	ldrh	r3, [r3, #6]
 80090bc:	461c      	mov	r4, r3
 80090be:	4b15      	ldr	r3, [pc, #84]	; (8009114 <EXTI3_IRQHandler+0x68>)
 80090c0:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80090c4:	332c      	adds	r3, #44	; 0x2c
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4619      	mov	r1, r3
 80090ca:	4813      	ldr	r0, [pc, #76]	; (8009118 <EXTI3_IRQHandler+0x6c>)
 80090cc:	f7ff fd12 	bl	8008af4 <LL_DMA_GetDataLength>
 80090d0:	4603      	mov	r3, r0
 80090d2:	1ae3      	subs	r3, r4, r3
 80090d4:	461a      	mov	r2, r3
 80090d6:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <EXTI3_IRQHandler+0x68>)
 80090d8:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80090dc:	3328      	adds	r3, #40	; 0x28
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	88db      	ldrh	r3, [r3, #6]
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f7ff fccf 	bl	8008a88 <get_last_circ_idx>
 80090ea:	4602      	mov	r2, r0
 80090ec:	4b09      	ldr	r3, [pc, #36]	; (8009114 <EXTI3_IRQHandler+0x68>)
 80090ee:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 80090f2:	3348      	adds	r3, #72	; 0x48
 80090f4:	601a      	str	r2, [r3, #0]

    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI4) == 1)
 80090f6:	2008      	movs	r0, #8
 80090f8:	f7ff fd12 	bl	8008b20 <LL_EXTI_IsActiveFlag_0_31>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d105      	bne.n	800910e <EXTI3_IRQHandler+0x62>
    {
        daq_trig_trigger_la(&daq);
 8009102:	4804      	ldr	r0, [pc, #16]	; (8009114 <EXTI3_IRQHandler+0x68>)
 8009104:	f7fe fe7c 	bl	8007e00 <daq_trig_trigger_la>
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI4);
 8009108:	2008      	movs	r0, #8
 800910a:	f7ff fd1f 	bl	8008b4c <LL_EXTI_ClearFlag_0_31>
    }
}
 800910e:	bf00      	nop
 8009110:	bd98      	pop	{r3, r4, r7, pc}
 8009112:	bf00      	nop
 8009114:	200007ec 	.word	0x200007ec
 8009118:	40020000 	.word	0x40020000

0800911c <EXTI4_IRQHandler>:

void PS_LA_UNUSED_IRQh(void)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	af00      	add	r7, sp, #0
    if (LL_EXTI_IsActiveFlag_0_31(PS_LA_EXTI_UNUSED) == 1)
 8009120:	2010      	movs	r0, #16
 8009122:	f7ff fcfd 	bl	8008b20 <LL_EXTI_IsActiveFlag_0_31>
 8009126:	4603      	mov	r3, r0
 8009128:	2b01      	cmp	r3, #1
 800912a:	d102      	bne.n	8009132 <EXTI4_IRQHandler+0x16>
    {
        LL_EXTI_ClearFlag_0_31(PS_LA_EXTI_UNUSED);
 800912c:	2010      	movs	r0, #16
 800912e:	f7ff fd0d 	bl	8008b4c <LL_EXTI_ClearFlag_0_31>
    }
}
 8009132:	bf00      	nop
 8009134:	bd80      	pop	{r7, pc}

08009136 <led_init>:
#include "led.h"
#include "main.h"


void led_init(led_data_t* self)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
    self->ms = 0;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	605a      	str	r2, [r3, #4]
    self->num = 0;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]
    self->enabled = 0;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	60da      	str	r2, [r3, #12]
    self->uwtick_first = 0;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	609a      	str	r2, [r3, #8]
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <led_set>:

void led_set(led_data_t* self, uint8_t enable)
{
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	460b      	mov	r3, r1
 800916c:	70fb      	strb	r3, [r7, #3]
    self->enabled = enable;
 800916e:	78fa      	ldrb	r2, [r7, #3]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	60da      	str	r2, [r3, #12]
    if (!self->enabled)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d108      	bne.n	800918e <led_set+0x2c>
        PS_LED_PORT->BSRR |= (1 << PS_LED_PIN);  // 1
 800917c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8009186:	f043 0320 	orr.w	r3, r3, #32
 800918a:	6193      	str	r3, [r2, #24]
    else
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
}
 800918c:	e007      	b.n	800919e <led_set+0x3c>
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
 800918e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009194:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8009198:	f043 0320 	orr.w	r3, r3, #32
 800919c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800919e:	bf00      	nop
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <led_toggle>:

void led_toggle(led_data_t* self)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
    if (self->enabled)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d008      	beq.n	80091cc <led_toggle+0x22>
        PS_LED_PORT->BSRR |= (1 << PS_LED_PIN);  // 1
 80091ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80091c4:	f043 0320 	orr.w	r3, r3, #32
 80091c8:	6193      	str	r3, [r2, #24]
 80091ca:	e007      	b.n	80091dc <led_toggle+0x32>
    else
        PS_LED_PORT->BRR |= (1 << PS_LED_PIN);   // 0
 80091cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80091d6:	f043 0320 	orr.w	r3, r3, #32
 80091da:	6293      	str	r3, [r2, #40]	; 0x28
    self->enabled = !self->enabled;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	bf0c      	ite	eq
 80091e4:	2301      	moveq	r3, #1
 80091e6:	2300      	movne	r3, #0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	461a      	mov	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	60da      	str	r2, [r3, #12]
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <led_blink_set>:

void led_blink_set(led_data_t* self, int num, int ms, uint32_t _uwTick)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
 8009208:	603b      	str	r3, [r7, #0]
    self->num = (num * 2) - 1;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	1e5a      	subs	r2, r3, #1
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	601a      	str	r2, [r3, #0]
    self->ms = ms;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	605a      	str	r2, [r3, #4]
    self->uwtick_first = _uwTick;
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	609a      	str	r2, [r3, #8]
    led_set(self, 1);
 8009220:	2101      	movs	r1, #1
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f7ff ff9d 	bl	8009162 <led_set>
}
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <led_blink_do>:

void led_blink_do(led_data_t* self, uint32_t _uwTick)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
    if (self->num > 0)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	dd23      	ble.n	800928a <led_blink_do+0x5a>
    {
        int diff;
        if (_uwTick >= self->uwtick_first)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	461a      	mov	r2, r3
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	4293      	cmp	r3, r2
 800924c:	d306      	bcc.n	800925c <led_blink_do+0x2c>
            diff = _uwTick - self->uwtick_first;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	461a      	mov	r2, r3
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	1a9b      	subs	r3, r3, r2
 8009258:	60fb      	str	r3, [r7, #12]
 800925a:	e006      	b.n	800926a <led_blink_do+0x3a>
        else
            diff = (_uwTick - self->uwtick_first) + 4294967295;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	461a      	mov	r2, r3
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	1a9b      	subs	r3, r3, r2
 8009266:	3b01      	subs	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]

        if (diff >= self->ms)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	429a      	cmp	r2, r3
 8009272:	db0a      	blt.n	800928a <led_blink_do+0x5a>
        {
            self->uwtick_first = _uwTick;
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	609a      	str	r2, [r3, #8]
            self->num--;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	1e5a      	subs	r2, r3, #1
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	601a      	str	r2, [r3, #0]
            led_toggle(self);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff ff90 	bl	80091aa <led_toggle>
        }
    }
}
 800928a:	bf00      	nop
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <LL_ADC_SetResolution>:
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f023 0218 	bic.w	r2, r3, #24
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	60da      	str	r2, [r3, #12]
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <LL_ADC_REG_SetTriggerSource>:
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f423 627c 	bic.w	r2, r3, #4032	; 0xfc0
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	431a      	orrs	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	60da      	str	r2, [r3, #12]
}
 80092d2:	bf00      	nop
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <LL_ADC_REG_SetSequencerLength>:
{
 80092de:	b480      	push	{r7}
 80092e0:	b083      	sub	sp, #12
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ec:	f023 020f 	bic.w	r2, r3, #15
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	431a      	orrs	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <LL_ADC_REG_SetSequencerRanks>:
{
 8009304:	b480      	push	{r7}
 8009306:	b089      	sub	sp, #36	; 0x24
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	3330      	adds	r3, #48	; 0x30
 8009314:	4619      	mov	r1, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800931c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009320:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009322:	69ba      	ldr	r2, [r7, #24]
 8009324:	fa92 f2a2 	rbit	r2, r2
 8009328:	617a      	str	r2, [r7, #20]
  return result;
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	fab2 f282 	clz	r2, r2
 8009330:	b2d2      	uxtb	r2, r2
 8009332:	40d3      	lsrs	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	440b      	add	r3, r1
 8009338:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f003 031f 	and.w	r3, r3, #31
 8009344:	211f      	movs	r1, #31
 8009346:	fa01 f303 	lsl.w	r3, r1, r3
 800934a:	43db      	mvns	r3, r3
 800934c:	401a      	ands	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	0e9b      	lsrs	r3, r3, #26
 8009352:	f003 011f 	and.w	r1, r3, #31
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	f003 031f 	and.w	r3, r3, #31
 800935c:	fa01 f303 	lsl.w	r3, r1, r3
 8009360:	431a      	orrs	r2, r3
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	601a      	str	r2, [r3, #0]
}
 8009366:	bf00      	nop
 8009368:	3724      	adds	r7, #36	; 0x24
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <LL_ADC_REG_SetDMATransfer>:
{
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG, DMATransfer);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	f023 0203 	bic.w	r2, r3, #3
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	431a      	orrs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	60da      	str	r2, [r3, #12]
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <LL_ADC_REG_GetDMATransfer>:
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f003 0303 	and.w	r3, r3, #3
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <LL_ADC_SetChannelSamplingTime>:
{
 80093b4:	b480      	push	{r7}
 80093b6:	b08d      	sub	sp, #52	; 0x34
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3314      	adds	r3, #20
 80093c4:	4619      	mov	r1, r3
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80093d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	fa92 f2a2 	rbit	r2, r2
 80093d8:	617a      	str	r2, [r7, #20]
  return result;
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	fab2 f282 	clz	r2, r2
 80093e0:	b2d2      	uxtb	r2, r2
 80093e2:	40d3      	lsrs	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	440b      	add	r3, r1
 80093e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80093f4:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80093f8:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093fa:	6a39      	ldr	r1, [r7, #32]
 80093fc:	fa91 f1a1 	rbit	r1, r1
 8009400:	61f9      	str	r1, [r7, #28]
  return result;
 8009402:	69f9      	ldr	r1, [r7, #28]
 8009404:	fab1 f181 	clz	r1, r1
 8009408:	b2c9      	uxtb	r1, r1
 800940a:	40cb      	lsrs	r3, r1
 800940c:	2107      	movs	r1, #7
 800940e:	fa01 f303 	lsl.w	r3, r1, r3
 8009412:	43db      	mvns	r3, r3
 8009414:	401a      	ands	r2, r3
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800941c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8009420:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009424:	fa91 f1a1 	rbit	r1, r1
 8009428:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800942a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800942c:	fab1 f181 	clz	r1, r1
 8009430:	b2c9      	uxtb	r1, r1
 8009432:	40cb      	lsrs	r3, r1
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	fa01 f303 	lsl.w	r3, r1, r3
 800943a:	431a      	orrs	r2, r3
 800943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943e:	601a      	str	r2, [r3, #0]
}
 8009440:	bf00      	nop
 8009442:	3734      	adds	r7, #52	; 0x34
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <LL_ADC_SetMultimode>:
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DUAL, Multimode);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f023 021f 	bic.w	r2, r3, #31
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	431a      	orrs	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	609a      	str	r2, [r3, #8]
}
 8009466:	bf00      	nop
 8009468:	370c      	adds	r7, #12
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <LL_ADC_Enable>:
{
 8009472:	b480      	push	{r7}
 8009474:	b083      	sub	sp, #12
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009482:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009486:	f043 0201 	orr.w	r2, r3, #1
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	609a      	str	r2, [r3, #8]
}
 800948e:	bf00      	nop
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <LL_ADC_StartCalibration>:
{
 800949a:	b480      	push	{r7}
 800949c:	b083      	sub	sp, #12
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80094ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80094b6:	4313      	orrs	r3, r2
 80094b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	609a      	str	r2, [r3, #8]
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <LL_ADC_IsCalibrationOnGoing>:
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094e0:	bf0c      	ite	eq
 80094e2:	2301      	moveq	r3, #1
 80094e4:	2300      	movne	r3, #0
 80094e6:	b2db      	uxtb	r3, r3
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <LL_DMA_EnableChannel>:
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	3b01      	subs	r3, #1
 8009502:	4a0b      	ldr	r2, [pc, #44]	; (8009530 <LL_DMA_EnableChannel+0x3c>)
 8009504:	5cd3      	ldrb	r3, [r2, r3]
 8009506:	461a      	mov	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4413      	add	r3, r2
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	3a01      	subs	r2, #1
 8009512:	4907      	ldr	r1, [pc, #28]	; (8009530 <LL_DMA_EnableChannel+0x3c>)
 8009514:	5c8a      	ldrb	r2, [r1, r2]
 8009516:	4611      	mov	r1, r2
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	440a      	add	r2, r1
 800951c:	f043 0301 	orr.w	r3, r3, #1
 8009520:	6013      	str	r3, [r2, #0]
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	08013ef4 	.word	0x08013ef4

08009534 <LL_DMA_DisableChannel>:
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	3b01      	subs	r3, #1
 8009542:	4a0b      	ldr	r2, [pc, #44]	; (8009570 <LL_DMA_DisableChannel+0x3c>)
 8009544:	5cd3      	ldrb	r3, [r2, r3]
 8009546:	461a      	mov	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4413      	add	r3, r2
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	3a01      	subs	r2, #1
 8009552:	4907      	ldr	r1, [pc, #28]	; (8009570 <LL_DMA_DisableChannel+0x3c>)
 8009554:	5c8a      	ldrb	r2, [r1, r2]
 8009556:	4611      	mov	r1, r2
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	440a      	add	r2, r1
 800955c:	f023 0301 	bic.w	r3, r3, #1
 8009560:	6013      	str	r3, [r2, #0]
}
 8009562:	bf00      	nop
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	08013ef4 	.word	0x08013ef4

08009574 <LL_DMA_SetPeriphSize>:
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	3b01      	subs	r3, #1
 8009584:	4a0c      	ldr	r2, [pc, #48]	; (80095b8 <LL_DMA_SetPeriphSize+0x44>)
 8009586:	5cd3      	ldrb	r3, [r2, r3]
 8009588:	461a      	mov	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	4413      	add	r3, r2
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	3b01      	subs	r3, #1
 8009598:	4907      	ldr	r1, [pc, #28]	; (80095b8 <LL_DMA_SetPeriphSize+0x44>)
 800959a:	5ccb      	ldrb	r3, [r1, r3]
 800959c:	4619      	mov	r1, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	440b      	add	r3, r1
 80095a2:	4619      	mov	r1, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	600b      	str	r3, [r1, #0]
}
 80095aa:	bf00      	nop
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	08013ef4 	.word	0x08013ef4

080095bc <LL_DMA_SetMemorySize>:
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	4a0c      	ldr	r2, [pc, #48]	; (8009600 <LL_DMA_SetMemorySize+0x44>)
 80095ce:	5cd3      	ldrb	r3, [r2, r3]
 80095d0:	461a      	mov	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	4413      	add	r3, r2
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	3b01      	subs	r3, #1
 80095e0:	4907      	ldr	r1, [pc, #28]	; (8009600 <LL_DMA_SetMemorySize+0x44>)
 80095e2:	5ccb      	ldrb	r3, [r1, r3]
 80095e4:	4619      	mov	r1, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	440b      	add	r3, r1
 80095ea:	4619      	mov	r1, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	600b      	str	r3, [r1, #0]
}
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	08013ef4 	.word	0x08013ef4

08009604 <LL_DMA_SetDataLength>:
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	3b01      	subs	r3, #1
 8009614:	4a0c      	ldr	r2, [pc, #48]	; (8009648 <LL_DMA_SetDataLength+0x44>)
 8009616:	5cd3      	ldrb	r3, [r2, r3]
 8009618:	461a      	mov	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4413      	add	r3, r2
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	0c1b      	lsrs	r3, r3, #16
 8009622:	041b      	lsls	r3, r3, #16
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	3a01      	subs	r2, #1
 8009628:	4907      	ldr	r1, [pc, #28]	; (8009648 <LL_DMA_SetDataLength+0x44>)
 800962a:	5c8a      	ldrb	r2, [r1, r2]
 800962c:	4611      	mov	r1, r2
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	440a      	add	r2, r1
 8009632:	4611      	mov	r1, r2
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	4313      	orrs	r3, r2
 8009638:	604b      	str	r3, [r1, #4]
}
 800963a:	bf00      	nop
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	08013ef4 	.word	0x08013ef4

0800964c <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	2b10      	cmp	r3, #16
 800965e:	d114      	bne.n	800968a <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	3b01      	subs	r3, #1
 8009664:	4a16      	ldr	r2, [pc, #88]	; (80096c0 <LL_DMA_ConfigAddresses+0x74>)
 8009666:	5cd3      	ldrb	r3, [r2, r3]
 8009668:	461a      	mov	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	4413      	add	r3, r2
 800966e:	461a      	mov	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	3b01      	subs	r3, #1
 8009678:	4a11      	ldr	r2, [pc, #68]	; (80096c0 <LL_DMA_ConfigAddresses+0x74>)
 800967a:	5cd3      	ldrb	r3, [r2, r3]
 800967c:	461a      	mov	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4413      	add	r3, r2
 8009682:	461a      	mov	r2, r3
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8009688:	e013      	b.n	80096b2 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	3b01      	subs	r3, #1
 800968e:	4a0c      	ldr	r2, [pc, #48]	; (80096c0 <LL_DMA_ConfigAddresses+0x74>)
 8009690:	5cd3      	ldrb	r3, [r2, r3]
 8009692:	461a      	mov	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	4413      	add	r3, r2
 8009698:	461a      	mov	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	4a07      	ldr	r2, [pc, #28]	; (80096c0 <LL_DMA_ConfigAddresses+0x74>)
 80096a4:	5cd3      	ldrb	r3, [r2, r3]
 80096a6:	461a      	mov	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4413      	add	r3, r2
 80096ac:	461a      	mov	r2, r3
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	60d3      	str	r3, [r2, #12]
}
 80096b2:	bf00      	nop
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	08013ef4 	.word	0x08013ef4

080096c4 <dma_set>:
#include "comm.h"
#include "main.h"


void dma_set(uint32_t src, DMA_TypeDef* dma, uint32_t dma_ch, uint32_t dst, uint32_t buff_size, uint32_t p_sz, uint32_t m_sz, uint32_t dir)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
 80096d0:	603b      	str	r3, [r7, #0]
    LL_DMA_DisableChannel(dma, dma_ch);
 80096d2:	6879      	ldr	r1, [r7, #4]
 80096d4:	68b8      	ldr	r0, [r7, #8]
 80096d6:	f7ff ff2d 	bl	8009534 <LL_DMA_DisableChannel>
    // Select ADC as DMA transfer request.
    //LL_DMAMUX_SetRequestID(DMAMUX1, LL_DMAMUX_CHANNEL_0, LL_DMAMUX_REQ_ADC1);

    // DMA transfer addresses and size.
    LL_DMA_ConfigAddresses(dma, dma_ch, src, dst, dir);
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	68b8      	ldr	r0, [r7, #8]
 80096e6:	f7ff ffb1 	bl	800964c <LL_DMA_ConfigAddresses>
    LL_DMA_SetPeriphSize(dma, dma_ch, p_sz);
 80096ea:	69fa      	ldr	r2, [r7, #28]
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	68b8      	ldr	r0, [r7, #8]
 80096f0:	f7ff ff40 	bl	8009574 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(dma, dma_ch, m_sz);
 80096f4:	6a3a      	ldr	r2, [r7, #32]
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	68b8      	ldr	r0, [r7, #8]
 80096fa:	f7ff ff5f 	bl	80095bc <LL_DMA_SetMemorySize>
    LL_DMA_SetDataLength(dma, dma_ch, buff_size);
 80096fe:	69ba      	ldr	r2, [r7, #24]
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	68b8      	ldr	r0, [r7, #8]
 8009704:	f7ff ff7e 	bl	8009604 <LL_DMA_SetDataLength>
    //LL_DMA_EnableIT_TC(dma, dma_ch); // Enable transfer complete interrupt.
    //LL_DMA_EnableIT_HT(dma, dma_ch); // Enable half transfer interrupt.
    //LL_DMA_EnableIT_TE(dma, dma_ch); // Enable transfer error interrupt.

    // Enable
    LL_DMA_EnableChannel(dma, dma_ch);
 8009708:	6879      	ldr	r1, [r7, #4]
 800970a:	68b8      	ldr	r0, [r7, #8]
 800970c:	f7ff fef2 	bl	80094f4 <LL_DMA_EnableChannel>
}
 8009710:	bf00      	nop
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <adc_init>:
    return LL_ADC_REG_ReadConversionData12(ADC2);
}
*/

void adc_init()
{
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
#if defined(PS_ADC_MODE_ADC1) || defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
    adc_init_calib(ADC1);
 800971c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009720:	f000 f812 	bl	8009748 <adc_init_calib>
#endif

#endif

#if defined(PS_ADC_MODE_ADC12) || defined(PS_ADC_MODE_ADC1234)
    adc_init_calib(ADC2);
 8009724:	4805      	ldr	r0, [pc, #20]	; (800973c <adc_init+0x24>)
 8009726:	f000 f80f 	bl	8009748 <adc_init_calib>
#endif

#if defined(PS_ADC_MODE_ADC1234)
    adc_init_calib(ADC3);
 800972a:	4805      	ldr	r0, [pc, #20]	; (8009740 <adc_init+0x28>)
 800972c:	f000 f80c 	bl	8009748 <adc_init_calib>
    adc_init_calib(ADC4);
 8009730:	4804      	ldr	r0, [pc, #16]	; (8009744 <adc_init+0x2c>)
 8009732:	f000 f809 	bl	8009748 <adc_init_calib>
#endif
}
 8009736:	bf00      	nop
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	50000100 	.word	0x50000100
 8009740:	50000400 	.word	0x50000400
 8009744:	50000500 	.word	0x50000500

08009748 <adc_init_calib>:

void adc_init_calib(ADC_TypeDef* adc)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
#if defined(PS_ADC_CAL_EN)
    LL_ADC_Enable(adc);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff fe8e 	bl	8009472 <LL_ADC_Enable>
#endif
#if defined(ADC_CR2_TSVREFE)
    adc->CR2 |= ADC_CR2_TSVREFE;
#endif
    uint32_t  wait_loop_index = ((PS_ADC_EN_TICKS * 32) >> 1);
 8009756:	2340      	movs	r3, #64	; 0x40
 8009758:	617b      	str	r3, [r7, #20]
    while(wait_loop_index != 0)
 800975a:	e002      	b.n	8009762 <adc_init_calib+0x1a>
    {
      wait_loop_index--;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	3b01      	subs	r3, #1
 8009760:	617b      	str	r3, [r7, #20]
    while(wait_loop_index != 0)
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1f9      	bne.n	800975c <adc_init_calib+0x14>
    //LL_ADC_EnableInternalRegulator(adc);
    //LL_ADC_DisableDeepPowerDown(adc);
    //for (int i = 0; i <  1000; ++i) asm("nop");

    //LL_ADC_Disable(adc);
    const uint32_t dma_tx_mode = LL_ADC_REG_GetDMATransfer(adc);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff fe15 	bl	8009398 <LL_ADC_REG_GetDMATransfer>
 800976e:	60f8      	str	r0, [r7, #12]
    LL_ADC_REG_SetDMATransfer(adc, LL_ADC_REG_DMA_TRANSFER_NONE);
 8009770:	2100      	movs	r1, #0
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7ff fdfd 	bl	8009372 <LL_ADC_REG_SetDMATransfer>

#ifdef LL_ADC_DIFFERENTIAL_ENDED
    LL_ADC_StartCalibration(adc, LL_ADC_SINGLE_ENDED);
 8009778:	217f      	movs	r1, #127	; 0x7f
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff fe8d 	bl	800949a <LL_ADC_StartCalibration>
#else
    LL_ADC_StartCalibration(adc);
#endif
    while (LL_ADC_IsCalibrationOnGoing(adc) != 0);
 8009780:	bf00      	nop
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7ff fea2 	bl	80094cc <LL_ADC_IsCalibrationOnGoing>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1f9      	bne.n	8009782 <adc_init_calib+0x3a>

    for (int i = 0; i <  10000; ++i) asm("nop");
 800978e:	2300      	movs	r3, #0
 8009790:	613b      	str	r3, [r7, #16]
 8009792:	e003      	b.n	800979c <adc_init_calib+0x54>
 8009794:	bf00      	nop
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	3301      	adds	r3, #1
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f242 720f 	movw	r2, #9999	; 0x270f
 80097a2:	4293      	cmp	r3, r2
 80097a4:	ddf6      	ble.n	8009794 <adc_init_calib+0x4c>

    LL_ADC_REG_SetDMATransfer(adc, dma_tx_mode);
 80097a6:	68f9      	ldr	r1, [r7, #12]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff fde2 	bl	8009372 <LL_ADC_REG_SetDMATransfer>
#if !defined(PS_ADC_CAL_EN)
    LL_ADC_Enable(adc);
#endif
}
 80097ae:	bf00      	nop
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <adc_set_ch>:

void adc_set_ch(ADC_TypeDef* adc, uint8_t ch1, uint8_t ch2, uint8_t ch3, uint8_t ch4, uint32_t smpl_time, uint8_t vrefint)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	4608      	mov	r0, r1
 80097c2:	4611      	mov	r1, r2
 80097c4:	461a      	mov	r2, r3
 80097c6:	4603      	mov	r3, r0
 80097c8:	70fb      	strb	r3, [r7, #3]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70bb      	strb	r3, [r7, #2]
 80097ce:	4613      	mov	r3, r2
 80097d0:	707b      	strb	r3, [r7, #1]
#ifdef PS_ADC_TRIG_34
    if (ch1 == 1 || ch2 == 2)
 80097d2:	78fb      	ldrb	r3, [r7, #3]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d002      	beq.n	80097de <adc_set_ch+0x26>
 80097d8:	78bb      	ldrb	r3, [r7, #2]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d105      	bne.n	80097ea <adc_set_ch+0x32>
        LL_ADC_REG_SetTriggerSource(adc, PS_ADC_TRIG_12);
 80097de:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff fd68 	bl	80092b8 <LL_ADC_REG_SetTriggerSource>
 80097e8:	e004      	b.n	80097f4 <adc_set_ch+0x3c>
    else
        LL_ADC_REG_SetTriggerSource(adc, PS_ADC_TRIG_34);
 80097ea:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff fd62 	bl	80092b8 <LL_ADC_REG_SetTriggerSource>
#else
    LL_ADC_REG_SetTriggerSource(adc, PS_ADC_TRIG_12);
#endif
    LL_ADC_SetMultimode(__LL_ADC_COMMON_INSTANCE(adc), LL_ADC_MULTI_INDEPENDENT);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097fa:	d003      	beq.n	8009804 <adc_set_ch+0x4c>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a49      	ldr	r2, [pc, #292]	; (8009924 <adc_set_ch+0x16c>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d101      	bne.n	8009808 <adc_set_ch+0x50>
 8009804:	4b48      	ldr	r3, [pc, #288]	; (8009928 <adc_set_ch+0x170>)
 8009806:	e000      	b.n	800980a <adc_set_ch+0x52>
 8009808:	4b48      	ldr	r3, [pc, #288]	; (800992c <adc_set_ch+0x174>)
 800980a:	2100      	movs	r1, #0
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff fe1d 	bl	800944c <LL_ADC_SetMultimode>
    LL_ADC_REG_SetDMATransfer(adc, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8009812:	2103      	movs	r1, #3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7ff fdac 	bl	8009372 <LL_ADC_REG_SetDMATransfer>

    //LL_ADC_Disable(adc);
    int len = ch1 + ch2 + ch3 + ch4 + vrefint;
 800981a:	78fa      	ldrb	r2, [r7, #3]
 800981c:	78bb      	ldrb	r3, [r7, #2]
 800981e:	441a      	add	r2, r3
 8009820:	787b      	ldrb	r3, [r7, #1]
 8009822:	441a      	add	r2, r3
 8009824:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009828:	441a      	add	r2, r3
 800982a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800982e:	4413      	add	r3, r2
 8009830:	60fb      	str	r3, [r7, #12]

    uint32_t len_raw = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8009832:	2300      	movs	r3, #0
 8009834:	617b      	str	r3, [r7, #20]
    if (len == 2)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2b02      	cmp	r3, #2
 800983a:	d101      	bne.n	8009840 <adc_set_ch+0x88>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 800983c:	2301      	movs	r3, #1
 800983e:	617b      	str	r3, [r7, #20]
    if (len == 3)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2b03      	cmp	r3, #3
 8009844:	d102      	bne.n	800984c <adc_set_ch+0x94>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 8009846:	2302      	movs	r3, #2
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	e00a      	b.n	8009862 <adc_set_ch+0xaa>
    else if (len == 4)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b04      	cmp	r3, #4
 8009850:	d102      	bne.n	8009858 <adc_set_ch+0xa0>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
 8009852:	2303      	movs	r3, #3
 8009854:	617b      	str	r3, [r7, #20]
 8009856:	e004      	b.n	8009862 <adc_set_ch+0xaa>
    else if (len == 5)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b05      	cmp	r3, #5
 800985c:	d101      	bne.n	8009862 <adc_set_ch+0xaa>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS;
 800985e:	2304      	movs	r3, #4
 8009860:	617b      	str	r3, [r7, #20]

    LL_ADC_REG_SetSequencerLength(adc, len_raw);
 8009862:	6979      	ldr	r1, [r7, #20]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7ff fd3a 	bl	80092de <LL_ADC_REG_SetSequencerLength>

    uint32_t next_rank = LL_ADC_REG_RANK_1;
 800986a:	2306      	movs	r3, #6
 800986c:	613b      	str	r3, [r7, #16]

    if (vrefint)
 800986e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00d      	beq.n	8009892 <adc_set_ch+0xda>
    {
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, LL_ADC_CHANNEL_VREFINT);
 8009876:	4a2e      	ldr	r2, [pc, #184]	; (8009930 <adc_set_ch+0x178>)
 8009878:	6939      	ldr	r1, [r7, #16]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7ff fd42 	bl	8009304 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, LL_ADC_CHANNEL_VREFINT, smpl_time);
 8009880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009882:	492b      	ldr	r1, [pc, #172]	; (8009930 <adc_set_ch+0x178>)
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff fd95 	bl	80093b4 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 800988a:	6938      	ldr	r0, [r7, #16]
 800988c:	f000 f85a 	bl	8009944 <adc_get_next_rank>
 8009890:	6138      	str	r0, [r7, #16]
    }
    if (ch1) {
 8009892:	78fb      	ldrb	r3, [r7, #3]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00d      	beq.n	80098b4 <adc_set_ch+0xfc>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH1);
 8009898:	4a26      	ldr	r2, [pc, #152]	; (8009934 <adc_set_ch+0x17c>)
 800989a:	6939      	ldr	r1, [r7, #16]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7ff fd31 	bl	8009304 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH1, smpl_time);
 80098a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a4:	4923      	ldr	r1, [pc, #140]	; (8009934 <adc_set_ch+0x17c>)
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7ff fd84 	bl	80093b4 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 80098ac:	6938      	ldr	r0, [r7, #16]
 80098ae:	f000 f849 	bl	8009944 <adc_get_next_rank>
 80098b2:	6138      	str	r0, [r7, #16]
    }
    if (ch2) {
 80098b4:	78bb      	ldrb	r3, [r7, #2]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00d      	beq.n	80098d6 <adc_set_ch+0x11e>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH2);
 80098ba:	4a1f      	ldr	r2, [pc, #124]	; (8009938 <adc_set_ch+0x180>)
 80098bc:	6939      	ldr	r1, [r7, #16]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7ff fd20 	bl	8009304 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH2, smpl_time);
 80098c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c6:	491c      	ldr	r1, [pc, #112]	; (8009938 <adc_set_ch+0x180>)
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff fd73 	bl	80093b4 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 80098ce:	6938      	ldr	r0, [r7, #16]
 80098d0:	f000 f838 	bl	8009944 <adc_get_next_rank>
 80098d4:	6138      	str	r0, [r7, #16]
    }
    if (ch3) {
 80098d6:	787b      	ldrb	r3, [r7, #1]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00d      	beq.n	80098f8 <adc_set_ch+0x140>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH3);
 80098dc:	4a17      	ldr	r2, [pc, #92]	; (800993c <adc_set_ch+0x184>)
 80098de:	6939      	ldr	r1, [r7, #16]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff fd0f 	bl	8009304 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH3, smpl_time);
 80098e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e8:	4914      	ldr	r1, [pc, #80]	; (800993c <adc_set_ch+0x184>)
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff fd62 	bl	80093b4 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 80098f0:	6938      	ldr	r0, [r7, #16]
 80098f2:	f000 f827 	bl	8009944 <adc_get_next_rank>
 80098f6:	6138      	str	r0, [r7, #16]
    }
    if (ch4) {
 80098f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00d      	beq.n	800991c <adc_set_ch+0x164>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, PS_ADC_CH4);
 8009900:	4a0f      	ldr	r2, [pc, #60]	; (8009940 <adc_set_ch+0x188>)
 8009902:	6939      	ldr	r1, [r7, #16]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7ff fcfd 	bl	8009304 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, PS_ADC_CH4, smpl_time);
 800990a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800990c:	490c      	ldr	r1, [pc, #48]	; (8009940 <adc_set_ch+0x188>)
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7ff fd50 	bl	80093b4 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 8009914:	6938      	ldr	r0, [r7, #16]
 8009916:	f000 f815 	bl	8009944 <adc_get_next_rank>
 800991a:	6138      	str	r0, [r7, #16]
    }

    //LL_ADC_Enable(adc);
}
 800991c:	bf00      	nop
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	50000100 	.word	0x50000100
 8009928:	50000300 	.word	0x50000300
 800992c:	50000700 	.word	0x50000700
 8009930:	cb840000 	.word	0xcb840000
 8009934:	19200040 	.word	0x19200040
 8009938:	1d500080 	.word	0x1d500080
 800993c:	32601000 	.word	0x32601000
 8009940:	10c00010 	.word	0x10c00010

08009944 <adc_get_next_rank>:

uint32_t adc_get_next_rank(uint32_t rank)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
    if (rank == LL_ADC_REG_RANK_1)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b06      	cmp	r3, #6
 8009950:	d101      	bne.n	8009956 <adc_get_next_rank+0x12>
        return LL_ADC_REG_RANK_2;
 8009952:	230c      	movs	r3, #12
 8009954:	e011      	b.n	800997a <adc_get_next_rank+0x36>
    if (rank == LL_ADC_REG_RANK_2)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b0c      	cmp	r3, #12
 800995a:	d101      	bne.n	8009960 <adc_get_next_rank+0x1c>
        return LL_ADC_REG_RANK_3;
 800995c:	2312      	movs	r3, #18
 800995e:	e00c      	b.n	800997a <adc_get_next_rank+0x36>
    else if (rank == LL_ADC_REG_RANK_3)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b12      	cmp	r3, #18
 8009964:	d101      	bne.n	800996a <adc_get_next_rank+0x26>
        return LL_ADC_REG_RANK_4;
 8009966:	2318      	movs	r3, #24
 8009968:	e007      	b.n	800997a <adc_get_next_rank+0x36>
    else if (rank == LL_ADC_REG_RANK_4)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b18      	cmp	r3, #24
 800996e:	d102      	bne.n	8009976 <adc_get_next_rank+0x32>
        return LL_ADC_REG_RANK_5;
 8009970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009974:	e001      	b.n	800997a <adc_get_next_rank+0x36>
    else
        return LL_ADC_REG_RANK_6;
 8009976:	f44f 7383 	mov.w	r3, #262	; 0x106
}
 800997a:	4618      	mov	r0, r3
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <adc_set_res>:

void adc_set_res(ADC_TypeDef* adc, uint32_t resolution) // LL_ADC_RESOLUTION_12B, LL_ADC_RESOLUTION_8B
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b082      	sub	sp, #8
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
    //LL_ADC_Disable(adc);
#ifdef PS_ADC_BIT8
    LL_ADC_SetResolution(adc, resolution);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7ff fc7d 	bl	8009292 <LL_ADC_SetResolution>
#endif
    //LL_ADC_Enable(adc);
}
 8009998:	bf00      	nop
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <get_last_circ_idx>:
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
    int last_idx = pos - 1;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	60fb      	str	r3, [r7, #12]
    if (last_idx < 0)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	da02      	bge.n	80099bc <get_last_circ_idx+0x1c>
        last_idx = len - 1;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	60fb      	str	r3, [r7, #12]
    return last_idx;
 80099bc:	68fb      	ldr	r3, [r7, #12]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
	...

080099cc <LL_DMA_GetDataLength>:
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	3b01      	subs	r3, #1
 80099da:	4a06      	ldr	r2, [pc, #24]	; (80099f4 <LL_DMA_GetDataLength+0x28>)
 80099dc:	5cd3      	ldrb	r3, [r2, r3]
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4413      	add	r3, r2
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	b29b      	uxth	r3, r3
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	08013efc 	.word	0x08013efc

080099f8 <PS_Reset>:


/************************* [IEEE 488] *************************/

scpi_result_t PS_Reset(scpi_t * context)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
    daq_enable(&daq, 0);
 8009a00:	2100      	movs	r1, #0
 8009a02:	480b      	ldr	r0, [pc, #44]	; (8009a30 <PS_Reset+0x38>)
 8009a04:	f7fd fa2e 	bl	8006e64 <daq_enable>
    daq_settings_init(&daq);
 8009a08:	4809      	ldr	r0, [pc, #36]	; (8009a30 <PS_Reset+0x38>)
 8009a0a:	f7fc fbf7 	bl	80061fc <daq_settings_init>
    daq_mode_set(&daq, VM);
 8009a0e:	2101      	movs	r1, #1
 8009a10:	4807      	ldr	r0, [pc, #28]	; (8009a30 <PS_Reset+0x38>)
 8009a12:	f7fd fb11 	bl	8007038 <daq_mode_set>
    daq_enable(&daq, 1);
 8009a16:	2101      	movs	r1, #1
 8009a18:	4805      	ldr	r0, [pc, #20]	; (8009a30 <PS_Reset+0x38>)
 8009a1a:	f7fd fa23 	bl	8006e64 <daq_enable>
    // TODO reset pwm?

    SCPI_ResultText(context, SCPI_OK);
 8009a1e:	4905      	ldr	r1, [pc, #20]	; (8009a34 <PS_Reset+0x3c>)
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f004 fb17 	bl	800e054 <SCPI_ResultText>
    return SCPI_RES_OK;
 8009a26:	2301      	movs	r3, #1
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	200007ec 	.word	0x200007ec
 8009a34:	08013950 	.word	0x08013950

08009a38 <PS_System_Mode>:

/************************* [System Actions] *************************/

scpi_result_t PS_System_Mode(scpi_t * context)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
    const char* p1;
    size_t p1l;

    if (!SCPI_ParamCharacters(context, &p1, &p1l, TRUE))
 8009a40:	f107 0208 	add.w	r2, r7, #8
 8009a44:	f107 010c 	add.w	r1, r7, #12
 8009a48:	2301      	movs	r3, #1
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f004 ffc2 	bl	800e9d4 <SCPI_ParamCharacters>
 8009a50:	4603      	mov	r3, r0
 8009a52:	f083 0301 	eor.w	r3, r3, #1
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <PS_System_Mode+0x2a>
        return SCPI_RES_ERR;
 8009a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a60:	e033      	b.n	8009aca <PS_System_Mode+0x92>

    if (strcmp(p1, "SCOPE\r\n") == 0)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	491b      	ldr	r1, [pc, #108]	; (8009ad4 <PS_System_Mode+0x9c>)
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7f6 fbba 	bl	80001e0 <strcmp>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d104      	bne.n	8009a7c <PS_System_Mode+0x44>
        daq_mode_set(&daq, SCOPE);
 8009a72:	2100      	movs	r1, #0
 8009a74:	4818      	ldr	r0, [pc, #96]	; (8009ad8 <PS_System_Mode+0xa0>)
 8009a76:	f7fd fadf 	bl	8007038 <daq_mode_set>
 8009a7a:	e021      	b.n	8009ac0 <PS_System_Mode+0x88>
    else if (strcmp(p1, "VM\r\n") == 0)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4917      	ldr	r1, [pc, #92]	; (8009adc <PS_System_Mode+0xa4>)
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7f6 fbad 	bl	80001e0 <strcmp>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d104      	bne.n	8009a96 <PS_System_Mode+0x5e>
        daq_mode_set(&daq, VM);
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	4812      	ldr	r0, [pc, #72]	; (8009ad8 <PS_System_Mode+0xa0>)
 8009a90:	f7fd fad2 	bl	8007038 <daq_mode_set>
 8009a94:	e014      	b.n	8009ac0 <PS_System_Mode+0x88>
    else if (strcmp(p1, "LA\r\n") == 0)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	4911      	ldr	r1, [pc, #68]	; (8009ae0 <PS_System_Mode+0xa8>)
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f6 fba0 	bl	80001e0 <strcmp>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d104      	bne.n	8009ab0 <PS_System_Mode+0x78>
        daq_mode_set(&daq, LA);
 8009aa6:	2102      	movs	r1, #2
 8009aa8:	480b      	ldr	r0, [pc, #44]	; (8009ad8 <PS_System_Mode+0xa0>)
 8009aaa:	f7fd fac5 	bl	8007038 <daq_mode_set>
 8009aae:	e007      	b.n	8009ac0 <PS_System_Mode+0x88>
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8009ab0:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f002 fab5 	bl	800c024 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8009aba:	f04f 33ff 	mov.w	r3, #4294967295
 8009abe:	e004      	b.n	8009aca <PS_System_Mode+0x92>
    }

    SCPI_ResultText(context, SCPI_OK);
 8009ac0:	4908      	ldr	r1, [pc, #32]	; (8009ae4 <PS_System_Mode+0xac>)
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f004 fac6 	bl	800e054 <SCPI_ResultText>
    return SCPI_RES_OK;
 8009ac8:	2301      	movs	r3, #1
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	08013954 	.word	0x08013954
 8009ad8:	200007ec 	.word	0x200007ec
 8009adc:	0801395c 	.word	0x0801395c
 8009ae0:	08013964 	.word	0x08013964
 8009ae4:	08013950 	.word	0x08013950

08009ae8 <PS_System_ModeQ>:

scpi_result_t PS_System_ModeQ(scpi_t * context)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
    if (daq.mode == SCOPE)
 8009af0:	4b10      	ldr	r3, [pc, #64]	; (8009b34 <PS_System_ModeQ+0x4c>)
 8009af2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009af6:	33ac      	adds	r3, #172	; 0xac
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d104      	bne.n	8009b08 <PS_System_ModeQ+0x20>
        SCPI_ResultText(context, "SCOPE");
 8009afe:	490e      	ldr	r1, [pc, #56]	; (8009b38 <PS_System_ModeQ+0x50>)
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f004 faa7 	bl	800e054 <SCPI_ResultText>
 8009b06:	e00f      	b.n	8009b28 <PS_System_ModeQ+0x40>
    else if (daq.mode == VM)
 8009b08:	4b0a      	ldr	r3, [pc, #40]	; (8009b34 <PS_System_ModeQ+0x4c>)
 8009b0a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009b0e:	33ac      	adds	r3, #172	; 0xac
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d104      	bne.n	8009b20 <PS_System_ModeQ+0x38>
        SCPI_ResultText(context, "VM");
 8009b16:	4909      	ldr	r1, [pc, #36]	; (8009b3c <PS_System_ModeQ+0x54>)
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f004 fa9b 	bl	800e054 <SCPI_ResultText>
 8009b1e:	e003      	b.n	8009b28 <PS_System_ModeQ+0x40>
    else
        SCPI_ResultText(context, "LA");
 8009b20:	4907      	ldr	r1, [pc, #28]	; (8009b40 <PS_System_ModeQ+0x58>)
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f004 fa96 	bl	800e054 <SCPI_ResultText>

    return SCPI_RES_OK;
 8009b28:	2301      	movs	r3, #1
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	200007ec 	.word	0x200007ec
 8009b38:	0801396c 	.word	0x0801396c
 8009b3c:	08013974 	.word	0x08013974
 8009b40:	08013978 	.word	0x08013978

08009b44 <PS_System_LimitsQ>:

scpi_result_t PS_System_LimitsQ(scpi_t * context)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b0a4      	sub	sp, #144	; 0x90
 8009b48:	af08      	add	r7, sp, #32
 8009b4a:	6078      	str	r0, [r7, #4]
    char buff[80];
    char dual[2] = {'\0'};
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	823b      	strh	r3, [r7, #16]
    char inter[2] = {'\0'};
 8009b50:	2300      	movs	r3, #0
 8009b52:	81bb      	strh	r3, [r7, #12]
    uint8_t dac = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t bit8 = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    uint8_t adcs = 0;
 8009b60:	2300      	movs	r3, #0
 8009b62:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
#ifdef PS_DAC
    dac = 1;
 8009b66:	2301      	movs	r3, #1
 8009b68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
#endif
#ifdef PS_ADC_BIT8
    bit8 = 1;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
#if defined(PS_ADC_MODE_ADC1)
    adcs = 1;
#elif defined(PS_ADC_MODE_ADC12)
    adcs = 2;
#elif defined(PS_ADC_MODE_ADC1234)
    adcs = 4;
 8009b72:	2304      	movs	r3, #4
 8009b74:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    //char smplt12_s[15];
    //char smplt8_s[15];
    //sprint_fast(smplt12_s, "%s", PS_ADC_1CH_SMPL_TM(PS_ADC_SMPLT_MAX_N, PS_ADC_TCONV12), 8);
    //sprint_fast(smplt8_s, "%s", PS_ADC_1CH_SMPL_TM(PS_ADC_SMPLT_MAX_N, PS_ADC_TCONV8), 8);

    int pwm_max_f = PS_TIM_PWM1_FREQ / 2;
 8009b78:	4b15      	ldr	r3, [pc, #84]	; (8009bd0 <PS_System_LimitsQ+0x8c>)
 8009b7a:	66bb      	str	r3, [r7, #104]	; 0x68

    int len = sprintf(buff, "%d,%d,%d,%d,%d,%d%s%s,%d,%d", PS_DAQ_MAX_B12_FS, PS_DAQ_MAX_B8_FS, PS_DAQ_MAX_MEM,
 8009b7c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8009b80:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8009b84:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8009b88:	f107 0014 	add.w	r0, r7, #20
 8009b8c:	9107      	str	r1, [sp, #28]
 8009b8e:	9206      	str	r2, [sp, #24]
 8009b90:	f107 020c 	add.w	r2, r7, #12
 8009b94:	9205      	str	r2, [sp, #20]
 8009b96:	f107 0210 	add.w	r2, r7, #16
 8009b9a:	9204      	str	r2, [sp, #16]
 8009b9c:	9303      	str	r3, [sp, #12]
 8009b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ba0:	9302      	str	r3, [sp, #8]
 8009ba2:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <PS_System_LimitsQ+0x90>)
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	4b0a      	ldr	r3, [pc, #40]	; (8009bd8 <PS_System_LimitsQ+0x94>)
 8009bae:	4a0b      	ldr	r2, [pc, #44]	; (8009bdc <PS_System_LimitsQ+0x98>)
 8009bb0:	490b      	ldr	r1, [pc, #44]	; (8009be0 <PS_System_LimitsQ+0x9c>)
 8009bb2:	f007 fda3 	bl	80116fc <siprintf>
 8009bb6:	6678      	str	r0, [r7, #100]	; 0x64
                      PS_LA_MAX_FS, pwm_max_f, adcs, dual, inter, bit8, dac);

    SCPI_ResultCharacters(context, buff, len);
 8009bb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009bba:	f107 0314 	add.w	r3, r7, #20
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f004 f9ad 	bl	800df20 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 8009bc6:	2301      	movs	r3, #1
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3770      	adds	r7, #112	; 0x70
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	02255100 	.word	0x02255100
 8009bd4:	004c4b40 	.word	0x004c4b40
 8009bd8:	0007a120 	.word	0x0007a120
 8009bdc:	00061a80 	.word	0x00061a80
 8009be0:	0801397c 	.word	0x0801397c
 8009be4:	00000000 	.word	0x00000000

08009be8 <PS_VM_ReadQ>:

/************************* [VM Actions] *************************/

scpi_result_t PS_VM_ReadQ(scpi_t * context)
{
 8009be8:	b5b0      	push	{r4, r5, r7, lr}
 8009bea:	b0c2      	sub	sp, #264	; 0x108
 8009bec:	af06      	add	r7, sp, #24
 8009bee:	6078      	str	r0, [r7, #4]
    if (daq.mode == VM)
 8009bf0:	4bc9      	ldr	r3, [pc, #804]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009bf2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009bf6:	33ac      	adds	r3, #172	; 0xac
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	f040 81e6 	bne.w	8009fcc <PS_VM_ReadQ+0x3e4>
    {
        daq_enable(&daq, 0);
 8009c00:	2100      	movs	r1, #0
 8009c02:	48c5      	ldr	r0, [pc, #788]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009c04:	f7fd f92e 	bl	8006e64 <daq_enable>

        uint32_t p1 = 0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (context != NULL)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d007      	beq.n	8009c24 <PS_VM_ReadQ+0x3c>
            SCPI_ParamUInt32(context, &p1, FALSE);
 8009c14:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009c18:	2200      	movs	r2, #0
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f004 fec7 	bl	800e9b0 <SCPI_ParamUInt32>
 8009c22:	e002      	b.n	8009c2a <PS_VM_ReadQ+0x42>
        else
            p1 = 1;
 8009c24:	2301      	movs	r3, #1
 8009c26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

        float vref_raw = 0;
 8009c2a:	f04f 0300 	mov.w	r3, #0
 8009c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        float ch1_raw = 0;
 8009c32:	f04f 0300 	mov.w	r3, #0
 8009c36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        float ch2_raw = 0;
 8009c3a:	f04f 0300 	mov.w	r3, #0
 8009c3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        float ch3_raw = 0;
 8009c42:	f04f 0300 	mov.w	r3, #0
 8009c46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        float ch4_raw = 0;
 8009c4a:	f04f 0300 	mov.w	r3, #0
 8009c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        int avg_num = 1;
 8009c52:	2301      	movs	r3, #1
 8009c54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        if (p1 > 0)
 8009c58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d003      	beq.n	8009c68 <PS_VM_ReadQ+0x80>
            avg_num = (int)p1;
 8009c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

        if (avg_num > daq.set.mem)
 8009c68:	4bab      	ldr	r3, [pc, #684]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009c6a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009c6e:	337c      	adds	r3, #124	; 0x7c
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	dd07      	ble.n	8009c8c <PS_VM_ReadQ+0xa4>
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 8009c7c:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f002 f9cf 	bl	800c024 <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 8009c86:	f04f 33ff 	mov.w	r3, #4294967295
 8009c8a:	e1a5      	b.n	8009fd8 <PS_VM_ReadQ+0x3f0>

        get_avg_from_circ(last1, 3, avg_num, daq.buff1.data, daq.set.bits, &vref_raw, &ch1_raw, &ch2_raw, NULL, NULL);
        get_avg_from_circ(last2, 2, avg_num, daq.buff2.data, daq.set.bits, &ch3_raw, &ch4_raw, NULL, NULL, NULL);

#elif defined(PS_ADC_MODE_ADC1234)
        int last1 = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_CH_ADC1, PS_DMA_ADC1);
 8009c8c:	4ba2      	ldr	r3, [pc, #648]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009c8e:	88db      	ldrh	r3, [r3, #6]
 8009c90:	461c      	mov	r4, r3
 8009c92:	2101      	movs	r1, #1
 8009c94:	48a1      	ldr	r0, [pc, #644]	; (8009f1c <PS_VM_ReadQ+0x334>)
 8009c96:	f7ff fe99 	bl	80099cc <LL_DMA_GetDataLength>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	1ae3      	subs	r3, r4, r3
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	4b9d      	ldr	r3, [pc, #628]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009ca2:	88db      	ldrh	r3, [r3, #6]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	f7ff fe7a 	bl	80099a0 <get_last_circ_idx>
 8009cac:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        int last2 = PS_DMA_LAST_IDX(daq.buff2.len, PS_DMA_CH_ADC2, PS_DMA_ADC2);
 8009cb0:	4b99      	ldr	r3, [pc, #612]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009cb2:	8a5b      	ldrh	r3, [r3, #18]
 8009cb4:	461c      	mov	r4, r3
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	4899      	ldr	r0, [pc, #612]	; (8009f20 <PS_VM_ReadQ+0x338>)
 8009cba:	f7ff fe87 	bl	80099cc <LL_DMA_GetDataLength>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	1ae3      	subs	r3, r4, r3
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	4b94      	ldr	r3, [pc, #592]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009cc6:	8a5b      	ldrh	r3, [r3, #18]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4610      	mov	r0, r2
 8009ccc:	f7ff fe68 	bl	80099a0 <get_last_circ_idx>
 8009cd0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
        int last3 = PS_DMA_LAST_IDX(daq.buff3.len, PS_DMA_CH_ADC3, PS_DMA_ADC3);
 8009cd4:	4b90      	ldr	r3, [pc, #576]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009cd6:	8bdb      	ldrh	r3, [r3, #30]
 8009cd8:	461c      	mov	r4, r3
 8009cda:	2105      	movs	r1, #5
 8009cdc:	4890      	ldr	r0, [pc, #576]	; (8009f20 <PS_VM_ReadQ+0x338>)
 8009cde:	f7ff fe75 	bl	80099cc <LL_DMA_GetDataLength>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	1ae3      	subs	r3, r4, r3
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	4b8b      	ldr	r3, [pc, #556]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009cea:	8bdb      	ldrh	r3, [r3, #30]
 8009cec:	4619      	mov	r1, r3
 8009cee:	4610      	mov	r0, r2
 8009cf0:	f7ff fe56 	bl	80099a0 <get_last_circ_idx>
 8009cf4:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
        int last4 = PS_DMA_LAST_IDX(daq.buff4.len, PS_DMA_CH_ADC4, PS_DMA_ADC4);
 8009cf8:	4b87      	ldr	r3, [pc, #540]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cfc:	461c      	mov	r4, r3
 8009cfe:	2102      	movs	r1, #2
 8009d00:	4887      	ldr	r0, [pc, #540]	; (8009f20 <PS_VM_ReadQ+0x338>)
 8009d02:	f7ff fe63 	bl	80099cc <LL_DMA_GetDataLength>
 8009d06:	4603      	mov	r3, r0
 8009d08:	1ae3      	subs	r3, r4, r3
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	4b82      	ldr	r3, [pc, #520]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d10:	4619      	mov	r1, r3
 8009d12:	4610      	mov	r0, r2
 8009d14:	f7ff fe44 	bl	80099a0 <get_last_circ_idx>
 8009d18:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        get_avg_from_circ(last1, 2, avg_num, daq.buff1.data, daq.set.bits, &vref_raw, &ch1_raw, NULL, NULL, NULL);
 8009d1c:	4b7e      	ldr	r3, [pc, #504]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	4b7d      	ldr	r3, [pc, #500]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009d22:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009d26:	337e      	adds	r3, #126	; 0x7e
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	9305      	str	r3, [sp, #20]
 8009d30:	2300      	movs	r3, #0
 8009d32:	9304      	str	r3, [sp, #16]
 8009d34:	2300      	movs	r3, #0
 8009d36:	9303      	str	r3, [sp, #12]
 8009d38:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009d3c:	9302      	str	r3, [sp, #8]
 8009d3e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009d42:	9301      	str	r3, [sp, #4]
 8009d44:	9100      	str	r1, [sp, #0]
 8009d46:	4613      	mov	r3, r2
 8009d48:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009d4c:	2102      	movs	r1, #2
 8009d4e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8009d52:	f001 fcbf 	bl	800b6d4 <get_avg_from_circ>
        get_avg_from_circ(last2, 1, avg_num, daq.buff2.data, daq.set.bits, &ch2_raw, NULL, NULL, NULL, NULL);
 8009d56:	4b70      	ldr	r3, [pc, #448]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009d58:	68da      	ldr	r2, [r3, #12]
 8009d5a:	4b6f      	ldr	r3, [pc, #444]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009d5c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009d60:	337e      	adds	r3, #126	; 0x7e
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	4619      	mov	r1, r3
 8009d66:	2300      	movs	r3, #0
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	9304      	str	r3, [sp, #16]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	9303      	str	r3, [sp, #12]
 8009d72:	2300      	movs	r3, #0
 8009d74:	9302      	str	r3, [sp, #8]
 8009d76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009d7a:	9301      	str	r3, [sp, #4]
 8009d7c:	9100      	str	r1, [sp, #0]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009d84:	2101      	movs	r1, #1
 8009d86:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8009d8a:	f001 fca3 	bl	800b6d4 <get_avg_from_circ>
        get_avg_from_circ(last3, 1, avg_num, daq.buff3.data, daq.set.bits, &ch3_raw, NULL, NULL, NULL, NULL);
 8009d8e:	4b62      	ldr	r3, [pc, #392]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009d90:	699a      	ldr	r2, [r3, #24]
 8009d92:	4b61      	ldr	r3, [pc, #388]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009d94:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009d98:	337e      	adds	r3, #126	; 0x7e
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	2300      	movs	r3, #0
 8009da0:	9305      	str	r3, [sp, #20]
 8009da2:	2300      	movs	r3, #0
 8009da4:	9304      	str	r3, [sp, #16]
 8009da6:	2300      	movs	r3, #0
 8009da8:	9303      	str	r3, [sp, #12]
 8009daa:	2300      	movs	r3, #0
 8009dac:	9302      	str	r3, [sp, #8]
 8009dae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009db2:	9301      	str	r3, [sp, #4]
 8009db4:	9100      	str	r1, [sp, #0]
 8009db6:	4613      	mov	r3, r2
 8009db8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8009dc2:	f001 fc87 	bl	800b6d4 <get_avg_from_circ>
        get_avg_from_circ(last4, 1, avg_num, daq.buff4.data, daq.set.bits, &ch4_raw, NULL, NULL, NULL, NULL);
 8009dc6:	4b54      	ldr	r3, [pc, #336]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dca:	4b53      	ldr	r3, [pc, #332]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009dcc:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009dd0:	337e      	adds	r3, #126	; 0x7e
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	9305      	str	r3, [sp, #20]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	2300      	movs	r3, #0
 8009de0:	9303      	str	r3, [sp, #12]
 8009de2:	2300      	movs	r3, #0
 8009de4:	9302      	str	r3, [sp, #8]
 8009de6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	9100      	str	r1, [sp, #0]
 8009dee:	4613      	mov	r3, r2
 8009df0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009df4:	2101      	movs	r1, #1
 8009df6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8009dfa:	f001 fc6b 	bl	800b6d4 <get_avg_from_circ>
        char ch2_s[10];
        char ch3_s[10];
        char ch4_s[10];

#ifdef VREFINT_CAL_ADDR
        float vcc = 3.3 * PS_ADC_VREF_CAL / vref_raw;
 8009dfe:	4b49      	ldr	r3, [pc, #292]	; (8009f24 <PS_VM_ReadQ+0x33c>)
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7f6 fba6 	bl	8000554 <__aeabi_i2d>
 8009e08:	a341      	add	r3, pc, #260	; (adr r3, 8009f10 <PS_VM_ReadQ+0x328>)
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	f7f6 fc0b 	bl	8000628 <__aeabi_dmul>
 8009e12:	4603      	mov	r3, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	4625      	mov	r5, r4
 8009e18:	461c      	mov	r4, r3
 8009e1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7f6 fbaa 	bl	8000578 <__aeabi_f2d>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4620      	mov	r0, r4
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	f7f6 fd26 	bl	800087c <__aeabi_ddiv>
 8009e30:	4603      	mov	r3, r0
 8009e32:	460c      	mov	r4, r1
 8009e34:	4618      	mov	r0, r3
 8009e36:	4621      	mov	r1, r4
 8009e38:	f7f6 fece 	bl	8000bd8 <__aeabi_d2f>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
#else
        float vcc = daq.adc_max_val * PS_ADC_VREF_CAL / vref_raw / 1000;
#endif
        float ch1 = vcc * ch1_raw / daq.adc_max_val;
 8009e42:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009e46:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8009e4a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009e4e:	4b32      	ldr	r3, [pc, #200]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009e50:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009e54:	33a4      	adds	r3, #164	; 0xa4
 8009e56:	ed93 7a00 	vldr	s14, [r3]
 8009e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e5e:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
        float ch2 = vcc * ch2_raw / daq.adc_max_val;
 8009e62:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009e66:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8009e6a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009e6e:	4b2a      	ldr	r3, [pc, #168]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009e70:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009e74:	33a4      	adds	r3, #164	; 0xa4
 8009e76:	ed93 7a00 	vldr	s14, [r3]
 8009e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e7e:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
        float ch3 = vcc * ch3_raw / daq.adc_max_val;
 8009e82:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009e86:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8009e8a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009e8e:	4b22      	ldr	r3, [pc, #136]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009e90:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009e94:	33a4      	adds	r3, #164	; 0xa4
 8009e96:	ed93 7a00 	vldr	s14, [r3]
 8009e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e9e:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
        float ch4 = vcc * ch4_raw / daq.adc_max_val;
 8009ea2:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8009ea6:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8009eaa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009eae:	4b1a      	ldr	r3, [pc, #104]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009eb0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009eb4:	33a4      	adds	r3, #164	; 0xa4
 8009eb6:	ed93 7a00 	vldr	s14, [r3]
 8009eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ebe:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

        daq.vref = vref_raw;
 8009ec2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009ec6:	4b14      	ldr	r3, [pc, #80]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009ec8:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009ecc:	3398      	adds	r3, #152	; 0x98
 8009ece:	601a      	str	r2, [r3, #0]
        daq.vcc_mv = vcc * 1000;
 8009ed0:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8009ed4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009f28 <PS_VM_ReadQ+0x340>
 8009ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009edc:	4b0e      	ldr	r3, [pc, #56]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009ede:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009ee2:	339c      	adds	r3, #156	; 0x9c
 8009ee4:	edc3 7a00 	vstr	s15, [r3]

        if (context == NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d11e      	bne.n	8009f2c <PS_VM_ReadQ+0x344>
        {
            if (daq.vcc_mv > 0)
 8009eee:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <PS_VM_ReadQ+0x330>)
 8009ef0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009ef4:	339c      	adds	r3, #156	; 0x9c
 8009ef6:	edd3 7a00 	vldr	s15, [r3]
 8009efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f02:	dd01      	ble.n	8009f08 <PS_VM_ReadQ+0x320>
                return SCPI_RES_OK;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e067      	b.n	8009fd8 <PS_VM_ReadQ+0x3f0>
            else
                return SCPI_RES_ERR;
 8009f08:	f04f 33ff 	mov.w	r3, #4294967295
 8009f0c:	e064      	b.n	8009fd8 <PS_VM_ReadQ+0x3f0>
 8009f0e:	bf00      	nop
 8009f10:	66666666 	.word	0x66666666
 8009f14:	400a6666 	.word	0x400a6666
 8009f18:	200007ec 	.word	0x200007ec
 8009f1c:	40020000 	.word	0x40020000
 8009f20:	40020400 	.word	0x40020400
 8009f24:	1ffff7ba 	.word	0x1ffff7ba
 8009f28:	447a0000 	.word	0x447a0000
        }

        sprint_fast(vcc_s, "%s", vcc, 4);
 8009f2c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009f30:	2204      	movs	r2, #4
 8009f32:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 8009f36:	492a      	ldr	r1, [pc, #168]	; (8009fe0 <PS_VM_ReadQ+0x3f8>)
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f001 fde9 	bl	800bb10 <sprint_fast>
        sprint_fast(ch1_s, "%s", ch1, 4);
 8009f3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009f42:	2204      	movs	r2, #4
 8009f44:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 8009f48:	4925      	ldr	r1, [pc, #148]	; (8009fe0 <PS_VM_ReadQ+0x3f8>)
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f001 fde0 	bl	800bb10 <sprint_fast>
        sprint_fast(ch2_s, "%s", ch2, 4);
 8009f50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009f54:	2204      	movs	r2, #4
 8009f56:	ed97 0a34 	vldr	s0, [r7, #208]	; 0xd0
 8009f5a:	4921      	ldr	r1, [pc, #132]	; (8009fe0 <PS_VM_ReadQ+0x3f8>)
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f001 fdd7 	bl	800bb10 <sprint_fast>
        sprint_fast(ch3_s, "%s", ch3, 4);
 8009f62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009f66:	2204      	movs	r2, #4
 8009f68:	ed97 0a33 	vldr	s0, [r7, #204]	; 0xcc
 8009f6c:	491c      	ldr	r1, [pc, #112]	; (8009fe0 <PS_VM_ReadQ+0x3f8>)
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f001 fdce 	bl	800bb10 <sprint_fast>
        sprint_fast(ch4_s, "%s", ch4, 4);
 8009f74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009f78:	2204      	movs	r2, #4
 8009f7a:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 8009f7e:	4918      	ldr	r1, [pc, #96]	; (8009fe0 <PS_VM_ReadQ+0x3f8>)
 8009f80:	4618      	mov	r0, r3
 8009f82:	f001 fdc5 	bl	800bb10 <sprint_fast>

        char buff[100];
        int len = sprintf(buff, "%s,%s,%s,%s,%s", ch1_s, ch2_s, ch3_s, ch4_s, vcc_s);
 8009f86:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8009f8a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8009f8e:	f107 000c 	add.w	r0, r7, #12
 8009f92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009f96:	9302      	str	r3, [sp, #8]
 8009f98:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009f9c:	9301      	str	r3, [sp, #4]
 8009f9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	490f      	ldr	r1, [pc, #60]	; (8009fe4 <PS_VM_ReadQ+0x3fc>)
 8009fa8:	f007 fba8 	bl	80116fc <siprintf>
 8009fac:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        daq_enable(&daq, 1);
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	480d      	ldr	r0, [pc, #52]	; (8009fe8 <PS_VM_ReadQ+0x400>)
 8009fb4:	f7fc ff56 	bl	8006e64 <daq_enable>

        SCPI_ResultCharacters(context, buff, len);
 8009fb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009fbc:	f107 030c 	add.w	r3, r7, #12
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f003 ffac 	bl	800df20 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e005      	b.n	8009fd8 <PS_VM_ReadQ+0x3f0>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 8009fcc:	2101      	movs	r1, #1
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f002 f828 	bl	800c024 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 8009fd4:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	37f0      	adds	r7, #240	; 0xf0
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bdb0      	pop	{r4, r5, r7, pc}
 8009fe0:	08013998 	.word	0x08013998
 8009fe4:	0801399c 	.word	0x0801399c
 8009fe8:	200007ec 	.word	0x200007ec

08009fec <PS_SCOPE_ReadQ>:

/************************* [SCOPE Actions] *************************/

scpi_result_t PS_SCOPE_ReadQ(scpi_t * context)
{
 8009fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fee:	b091      	sub	sp, #68	; 0x44
 8009ff0:	af06      	add	r7, sp, #24
 8009ff2:	6078      	str	r0, [r7, #4]
    if (daq.mode == SCOPE)
 8009ff4:	4b31      	ldr	r3, [pc, #196]	; (800a0bc <PS_SCOPE_ReadQ+0xd0>)
 8009ff6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 8009ffa:	33ac      	adds	r3, #172	; 0xac
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f040 8197 	bne.w	800a332 <PS_SCOPE_ReadQ+0x346>
    {
        if (daq.trig.ready == 0)
 800a004:	4b2d      	ldr	r3, [pc, #180]	; (800a0bc <PS_SCOPE_ReadQ+0xd0>)
 800a006:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a00a:	33f2      	adds	r3, #242	; 0xf2
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d105      	bne.n	800a01e <PS_SCOPE_ReadQ+0x32>
        {
            SCPI_ResultText(context, PS_RESP_NRDY);
 800a012:	492b      	ldr	r1, [pc, #172]	; (800a0c0 <PS_SCOPE_ReadQ+0xd4>)
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f004 f81d 	bl	800e054 <SCPI_ResultText>
            return SCPI_RES_OK;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e18f      	b.n	800a33e <PS_SCOPE_ReadQ+0x352>
        }

        if (daq.trig.set.mode == DISABLED)
 800a01e:	4b27      	ldr	r3, [pc, #156]	; (800a0bc <PS_SCOPE_ReadQ+0xd0>)
 800a020:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a024:	33b8      	adds	r3, #184	; 0xb8
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d123      	bne.n	800a074 <PS_SCOPE_ReadQ+0x88>
        {
            daq_enable(&daq, 0);
 800a02c:	2100      	movs	r1, #0
 800a02e:	4823      	ldr	r0, [pc, #140]	; (800a0bc <PS_SCOPE_ReadQ+0xd0>)
 800a030:	f7fc ff18 	bl	8006e64 <daq_enable>
            daq.trig.pos_frst = PS_DMA_LAST_IDX(daq.buff1.len, daq.trig.dma_ch_trig, daq.trig.dma_trig);
 800a034:	4b21      	ldr	r3, [pc, #132]	; (800a0bc <PS_SCOPE_ReadQ+0xd0>)
 800a036:	88db      	ldrh	r3, [r3, #6]
 800a038:	461c      	mov	r4, r3
 800a03a:	4b20      	ldr	r3, [pc, #128]	; (800a0bc <PS_SCOPE_ReadQ+0xd0>)
 800a03c:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800a040:	3330      	adds	r3, #48	; 0x30
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	4b1d      	ldr	r3, [pc, #116]	; (800a0bc <PS_SCOPE_ReadQ+0xd0>)
 800a046:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800a04a:	332c      	adds	r3, #44	; 0x2c
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4619      	mov	r1, r3
 800a050:	4610      	mov	r0, r2
 800a052:	f7ff fcbb 	bl	80099cc <LL_DMA_GetDataLength>
 800a056:	4603      	mov	r3, r0
 800a058:	1ae3      	subs	r3, r4, r3
 800a05a:	461a      	mov	r2, r3
 800a05c:	4b17      	ldr	r3, [pc, #92]	; (800a0bc <PS_SCOPE_ReadQ+0xd0>)
 800a05e:	88db      	ldrh	r3, [r3, #6]
 800a060:	4619      	mov	r1, r3
 800a062:	4610      	mov	r0, r2
 800a064:	f7ff fc9c 	bl	80099a0 <get_last_circ_idx>
 800a068:	4602      	mov	r2, r0
 800a06a:	4b14      	ldr	r3, [pc, #80]	; (800a0bc <PS_SCOPE_ReadQ+0xd0>)
 800a06c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a070:	33fc      	adds	r3, #252	; 0xfc
 800a072:	601a      	str	r2, [r3, #0]
        }

#ifdef VREFINT_CAL_ADDR
        float cal = PS_ADC_VREF_CAL / daq.adc_max_val * 3300;
 800a074:	4b13      	ldr	r3, [pc, #76]	; (800a0c4 <PS_SCOPE_ReadQ+0xd8>)
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	ee07 3a90 	vmov	s15, r3
 800a07c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a080:	4b0e      	ldr	r3, [pc, #56]	; (800a0bc <PS_SCOPE_ReadQ+0xd0>)
 800a082:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a086:	33a4      	adds	r3, #164	; 0xa4
 800a088:	ed93 7a00 	vldr	s14, [r3]
 800a08c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a090:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800a0c8 <PS_SCOPE_ReadQ+0xdc>
 800a094:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a098:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
#else
        float cal = PS_ADC_VREF_CAL;
#endif

        if (daq.set.bits == B8) // compressing
 800a09c:	4b07      	ldr	r3, [pc, #28]	; (800a0bc <PS_SCOPE_ReadQ+0xd0>)
 800a09e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a0a2:	337e      	adds	r3, #126	; 0x7e
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	2b08      	cmp	r3, #8
 800a0a8:	d110      	bne.n	800a0cc <PS_SCOPE_ReadQ+0xe0>
            cal /= 10.0;
 800a0aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a0ae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800a0b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a0b6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800a0ba:	e00f      	b.n	800a0dc <PS_SCOPE_ReadQ+0xf0>
 800a0bc:	200007ec 	.word	0x200007ec
 800a0c0:	080139ac 	.word	0x080139ac
 800a0c4:	1ffff7ba 	.word	0x1ffff7ba
 800a0c8:	454e4000 	.word	0x454e4000
        else
            cal *= 10.0;
 800a0cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a0d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a0d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            added += get_1ch_from_circ(daq.trig.pos_frst, buff2_mem, daq.buff2.len, ch_it++, daq.buff2.chans,
                                       daq.set.bits, daq.vref, cal, daq.buff2.data, daq.buff_out.data, &idx);

#elif defined(PS_ADC_MODE_ADC1234)

        int buff1_mem = daq.buff1.len - daq.buff1.reserve;
 800a0dc:	4b9a      	ldr	r3, [pc, #616]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a0de:	88db      	ldrh	r3, [r3, #6]
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	4b99      	ldr	r3, [pc, #612]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a0e4:	891b      	ldrh	r3, [r3, #8]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	61fb      	str	r3, [r7, #28]
        int buff2_mem = daq.buff2.len - daq.buff2.reserve;
 800a0ea:	4b97      	ldr	r3, [pc, #604]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a0ec:	8a5b      	ldrh	r3, [r3, #18]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	4b95      	ldr	r3, [pc, #596]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a0f2:	8a9b      	ldrh	r3, [r3, #20]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	61bb      	str	r3, [r7, #24]
        int buff3_mem = daq.buff3.len - daq.buff3.reserve;
 800a0f8:	4b93      	ldr	r3, [pc, #588]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a0fa:	8bdb      	ldrh	r3, [r3, #30]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	4b92      	ldr	r3, [pc, #584]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a100:	8c1b      	ldrh	r3, [r3, #32]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	617b      	str	r3, [r7, #20]
        int buff4_mem = daq.buff4.len - daq.buff4.reserve;
 800a106:	4b90      	ldr	r3, [pc, #576]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a10a:	461a      	mov	r2, r3
 800a10c:	4b8e      	ldr	r3, [pc, #568]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a10e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	613b      	str	r3, [r7, #16]

        int added = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	623b      	str	r3, [r7, #32]
        int idx = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	60fb      	str	r3, [r7, #12]

        if (daq.set.ch1_en)
 800a11c:	4b8a      	ldr	r3, [pc, #552]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a11e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a122:	3374      	adds	r3, #116	; 0x74
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d02e      	beq.n	800a188 <PS_SCOPE_ReadQ+0x19c>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, 1, daq.buff1.chans,
 800a12a:	4b87      	ldr	r3, [pc, #540]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a12c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a130:	33fc      	adds	r3, #252	; 0xfc
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	4b84      	ldr	r3, [pc, #528]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a136:	88db      	ldrh	r3, [r3, #6]
 800a138:	461e      	mov	r6, r3
 800a13a:	4b83      	ldr	r3, [pc, #524]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a13c:	889b      	ldrh	r3, [r3, #4]
 800a13e:	461c      	mov	r4, r3
                                       daq.set.bits, daq.vref, cal, daq.buff1.data, daq.buff_out.data, &idx);
 800a140:	4b81      	ldr	r3, [pc, #516]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a142:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a146:	337e      	adds	r3, #126	; 0x7e
 800a148:	781b      	ldrb	r3, [r3, #0]
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, 1, daq.buff1.chans,
 800a14a:	461d      	mov	r5, r3
 800a14c:	4b7e      	ldr	r3, [pc, #504]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a14e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a152:	3398      	adds	r3, #152	; 0x98
 800a154:	edd3 7a00 	vldr	s15, [r3]
 800a158:	4b7b      	ldr	r3, [pc, #492]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a15a:	681b      	ldr	r3, [r3, #0]
                                       daq.set.bits, daq.vref, cal, daq.buff1.data, daq.buff_out.data, &idx);
 800a15c:	4a7a      	ldr	r2, [pc, #488]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a15e:	6b12      	ldr	r2, [r2, #48]	; 0x30
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, 1, daq.buff1.chans,
 800a160:	f107 010c 	add.w	r1, r7, #12
 800a164:	9104      	str	r1, [sp, #16]
 800a166:	9203      	str	r2, [sp, #12]
 800a168:	9302      	str	r3, [sp, #8]
 800a16a:	9501      	str	r5, [sp, #4]
 800a16c:	9400      	str	r4, [sp, #0]
 800a16e:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800a172:	eeb0 0a67 	vmov.f32	s0, s15
 800a176:	2301      	movs	r3, #1
 800a178:	4632      	mov	r2, r6
 800a17a:	69f9      	ldr	r1, [r7, #28]
 800a17c:	f001 fbb0 	bl	800b8e0 <get_1ch_from_circ>
 800a180:	4602      	mov	r2, r0
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	4413      	add	r3, r2
 800a186:	623b      	str	r3, [r7, #32]
        if (daq.set.ch2_en)
 800a188:	4b6f      	ldr	r3, [pc, #444]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a18a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a18e:	3375      	adds	r3, #117	; 0x75
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d02e      	beq.n	800a1f4 <PS_SCOPE_ReadQ+0x208>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff2_mem, daq.buff2.len, 1, daq.buff2.chans,
 800a196:	4b6c      	ldr	r3, [pc, #432]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a198:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a19c:	33fc      	adds	r3, #252	; 0xfc
 800a19e:	6818      	ldr	r0, [r3, #0]
 800a1a0:	4b69      	ldr	r3, [pc, #420]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a1a2:	8a5b      	ldrh	r3, [r3, #18]
 800a1a4:	461e      	mov	r6, r3
 800a1a6:	4b68      	ldr	r3, [pc, #416]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a1a8:	8a1b      	ldrh	r3, [r3, #16]
 800a1aa:	461c      	mov	r4, r3
                                       daq.set.bits, daq.vref, cal, daq.buff2.data, daq.buff_out.data, &idx);
 800a1ac:	4b66      	ldr	r3, [pc, #408]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a1ae:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a1b2:	337e      	adds	r3, #126	; 0x7e
 800a1b4:	781b      	ldrb	r3, [r3, #0]
            added += get_1ch_from_circ(daq.trig.pos_frst, buff2_mem, daq.buff2.len, 1, daq.buff2.chans,
 800a1b6:	461d      	mov	r5, r3
 800a1b8:	4b63      	ldr	r3, [pc, #396]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a1ba:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a1be:	3398      	adds	r3, #152	; 0x98
 800a1c0:	edd3 7a00 	vldr	s15, [r3]
 800a1c4:	4b60      	ldr	r3, [pc, #384]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a1c6:	68db      	ldr	r3, [r3, #12]
                                       daq.set.bits, daq.vref, cal, daq.buff2.data, daq.buff_out.data, &idx);
 800a1c8:	4a5f      	ldr	r2, [pc, #380]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a1ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
            added += get_1ch_from_circ(daq.trig.pos_frst, buff2_mem, daq.buff2.len, 1, daq.buff2.chans,
 800a1cc:	f107 010c 	add.w	r1, r7, #12
 800a1d0:	9104      	str	r1, [sp, #16]
 800a1d2:	9203      	str	r2, [sp, #12]
 800a1d4:	9302      	str	r3, [sp, #8]
 800a1d6:	9501      	str	r5, [sp, #4]
 800a1d8:	9400      	str	r4, [sp, #0]
 800a1da:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800a1de:	eeb0 0a67 	vmov.f32	s0, s15
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	69b9      	ldr	r1, [r7, #24]
 800a1e8:	f001 fb7a 	bl	800b8e0 <get_1ch_from_circ>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	623b      	str	r3, [r7, #32]
        if (daq.set.ch3_en)
 800a1f4:	4b54      	ldr	r3, [pc, #336]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a1f6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a1fa:	3376      	adds	r3, #118	; 0x76
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d02e      	beq.n	800a260 <PS_SCOPE_ReadQ+0x274>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff3_mem, daq.buff3.len, 1, daq.buff3.chans,
 800a202:	4b51      	ldr	r3, [pc, #324]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a204:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a208:	33fc      	adds	r3, #252	; 0xfc
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	4b4e      	ldr	r3, [pc, #312]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a20e:	8bdb      	ldrh	r3, [r3, #30]
 800a210:	461e      	mov	r6, r3
 800a212:	4b4d      	ldr	r3, [pc, #308]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a214:	8b9b      	ldrh	r3, [r3, #28]
 800a216:	461c      	mov	r4, r3
                                       daq.set.bits, daq.vref, cal, daq.buff3.data, daq.buff_out.data, &idx);
 800a218:	4b4b      	ldr	r3, [pc, #300]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a21a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a21e:	337e      	adds	r3, #126	; 0x7e
 800a220:	781b      	ldrb	r3, [r3, #0]
            added += get_1ch_from_circ(daq.trig.pos_frst, buff3_mem, daq.buff3.len, 1, daq.buff3.chans,
 800a222:	461d      	mov	r5, r3
 800a224:	4b48      	ldr	r3, [pc, #288]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a226:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a22a:	3398      	adds	r3, #152	; 0x98
 800a22c:	edd3 7a00 	vldr	s15, [r3]
 800a230:	4b45      	ldr	r3, [pc, #276]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a232:	699b      	ldr	r3, [r3, #24]
                                       daq.set.bits, daq.vref, cal, daq.buff3.data, daq.buff_out.data, &idx);
 800a234:	4a44      	ldr	r2, [pc, #272]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a236:	6b12      	ldr	r2, [r2, #48]	; 0x30
            added += get_1ch_from_circ(daq.trig.pos_frst, buff3_mem, daq.buff3.len, 1, daq.buff3.chans,
 800a238:	f107 010c 	add.w	r1, r7, #12
 800a23c:	9104      	str	r1, [sp, #16]
 800a23e:	9203      	str	r2, [sp, #12]
 800a240:	9302      	str	r3, [sp, #8]
 800a242:	9501      	str	r5, [sp, #4]
 800a244:	9400      	str	r4, [sp, #0]
 800a246:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800a24a:	eeb0 0a67 	vmov.f32	s0, s15
 800a24e:	2301      	movs	r3, #1
 800a250:	4632      	mov	r2, r6
 800a252:	6979      	ldr	r1, [r7, #20]
 800a254:	f001 fb44 	bl	800b8e0 <get_1ch_from_circ>
 800a258:	4602      	mov	r2, r0
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	4413      	add	r3, r2
 800a25e:	623b      	str	r3, [r7, #32]
        if (daq.set.ch4_en)
 800a260:	4b39      	ldr	r3, [pc, #228]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a262:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a266:	3377      	adds	r3, #119	; 0x77
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d02e      	beq.n	800a2cc <PS_SCOPE_ReadQ+0x2e0>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff4_mem, daq.buff4.len, 1, daq.buff4.chans,
 800a26e:	4b36      	ldr	r3, [pc, #216]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a270:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a274:	33fc      	adds	r3, #252	; 0xfc
 800a276:	6818      	ldr	r0, [r3, #0]
 800a278:	4b33      	ldr	r3, [pc, #204]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a27a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a27c:	461e      	mov	r6, r3
 800a27e:	4b32      	ldr	r3, [pc, #200]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a282:	461c      	mov	r4, r3
                                       daq.set.bits, daq.vref, cal, daq.buff4.data, daq.buff_out.data, &idx);
 800a284:	4b30      	ldr	r3, [pc, #192]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a286:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a28a:	337e      	adds	r3, #126	; 0x7e
 800a28c:	781b      	ldrb	r3, [r3, #0]
            added += get_1ch_from_circ(daq.trig.pos_frst, buff4_mem, daq.buff4.len, 1, daq.buff4.chans,
 800a28e:	461d      	mov	r5, r3
 800a290:	4b2d      	ldr	r3, [pc, #180]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a292:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a296:	3398      	adds	r3, #152	; 0x98
 800a298:	edd3 7a00 	vldr	s15, [r3]
 800a29c:	4b2a      	ldr	r3, [pc, #168]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                       daq.set.bits, daq.vref, cal, daq.buff4.data, daq.buff_out.data, &idx);
 800a2a0:	4a29      	ldr	r2, [pc, #164]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a2a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
            added += get_1ch_from_circ(daq.trig.pos_frst, buff4_mem, daq.buff4.len, 1, daq.buff4.chans,
 800a2a4:	f107 010c 	add.w	r1, r7, #12
 800a2a8:	9104      	str	r1, [sp, #16]
 800a2aa:	9203      	str	r2, [sp, #12]
 800a2ac:	9302      	str	r3, [sp, #8]
 800a2ae:	9501      	str	r5, [sp, #4]
 800a2b0:	9400      	str	r4, [sp, #0]
 800a2b2:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800a2b6:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4632      	mov	r2, r6
 800a2be:	6939      	ldr	r1, [r7, #16]
 800a2c0:	f001 fb0e 	bl	800b8e0 <get_1ch_from_circ>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	623b      	str	r3, [r7, #32]
#endif

        daq.trig.pretrig_cntr = 0;
 800a2cc:	4b1e      	ldr	r3, [pc, #120]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a2ce:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800a2d2:	3310      	adds	r3, #16
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	601a      	str	r2, [r3, #0]
        daq.trig.ready = 0;
 800a2d8:	4b1b      	ldr	r3, [pc, #108]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a2da:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a2de:	33f2      	adds	r3, #242	; 0xf2
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	701a      	strb	r2, [r3, #0]
        daq.trig.ready_last = 0;
 800a2e4:	4b18      	ldr	r3, [pc, #96]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a2e6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a2ea:	33f3      	adds	r3, #243	; 0xf3
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	701a      	strb	r2, [r3, #0]

        if (daq.trig.set.mode != SINGLE)
 800a2f0:	4b15      	ldr	r3, [pc, #84]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a2f2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a2f6:	33b8      	adds	r3, #184	; 0xb8
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d003      	beq.n	800a306 <PS_SCOPE_ReadQ+0x31a>
        {
            daq_enable(&daq, 1);
 800a2fe:	2101      	movs	r1, #1
 800a300:	4811      	ldr	r0, [pc, #68]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a302:	f7fc fdaf 	bl	8006e64 <daq_enable>
        }

        //ASSERT(added == daq.buff_out.len);
        if (added != daq.buff_out.len)
 800a306:	4b10      	ldr	r3, [pc, #64]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a30a:	461a      	mov	r2, r3
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	4293      	cmp	r3, r2
 800a310:	d005      	beq.n	800a31e <PS_SCOPE_ReadQ+0x332>
        {
            SCPI_ResultText(context, "ERROR: invalid buffer size"); // TODO DEBUG
 800a312:	490e      	ldr	r1, [pc, #56]	; (800a34c <PS_SCOPE_ReadQ+0x360>)
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f003 fe9d 	bl	800e054 <SCPI_ResultText>
            return SCPI_RES_OK;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e00f      	b.n	800a33e <PS_SCOPE_ReadQ+0x352>
        }

        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
 800a31e:	4b0a      	ldr	r3, [pc, #40]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a320:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a322:	4b09      	ldr	r3, [pc, #36]	; (800a348 <PS_SCOPE_ReadQ+0x35c>)
 800a324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a326:	461a      	mov	r2, r3
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f004 f86f 	bl	800e40c <SCPI_ResultArbitraryBlock>
        return SCPI_RES_OK;
 800a32e:	2301      	movs	r3, #1
 800a330:	e005      	b.n	800a33e <PS_SCOPE_ReadQ+0x352>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800a332:	2101      	movs	r1, #1
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f001 fe75 	bl	800c024 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800a33a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a33e:	4618      	mov	r0, r3
 800a340:	372c      	adds	r7, #44	; 0x2c
 800a342:	46bd      	mov	sp, r7
 800a344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a346:	bf00      	nop
 800a348:	200007ec 	.word	0x200007ec
 800a34c:	080139b8 	.word	0x080139b8

0800a350 <PS_SCOPE_Set>:

scpi_result_t PS_SCOPE_Set(scpi_t * context)
{
 800a350:	b590      	push	{r4, r7, lr}
 800a352:	b097      	sub	sp, #92	; 0x5c
 800a354:	af02      	add	r7, sp, #8
 800a356:	6078      	str	r0, [r7, #4]
    if (daq.mode == SCOPE)
 800a358:	4ba7      	ldr	r3, [pc, #668]	; (800a5f8 <PS_SCOPE_Set+0x2a8>)
 800a35a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a35e:	33ac      	adds	r3, #172	; 0xac
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	f040 8192 	bne.w	800a68c <PS_SCOPE_Set+0x33c>
        const char* p4;
        const char* p7;
        const char* p8;
        size_t p4l, p7l, p8l;

        if (!SCPI_ParamUInt32(context, &p1, TRUE) ||
 800a368:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a36c:	2201      	movs	r2, #1
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f004 fb1d 	bl	800e9b0 <SCPI_ParamUInt32>
 800a376:	4603      	mov	r3, r0
 800a378:	f083 0301 	eor.w	r3, r3, #1
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d16a      	bne.n	800a458 <PS_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p2, TRUE) ||
 800a382:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a386:	2201      	movs	r2, #1
 800a388:	4619      	mov	r1, r3
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f004 fb10 	bl	800e9b0 <SCPI_ParamUInt32>
 800a390:	4603      	mov	r3, r0
 800a392:	f083 0301 	eor.w	r3, r3, #1
 800a396:	b2db      	uxtb	r3, r3
        if (!SCPI_ParamUInt32(context, &p1, TRUE) ||
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d15d      	bne.n	800a458 <PS_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800a39c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f004 fb03 	bl	800e9b0 <SCPI_ParamUInt32>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	f083 0301 	eor.w	r3, r3, #1
 800a3b0:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p2, TRUE) ||
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d150      	bne.n	800a458 <PS_SCOPE_Set+0x108>
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 800a3b6:	f107 0214 	add.w	r2, r7, #20
 800a3ba:	f107 0120 	add.w	r1, r7, #32
 800a3be:	2301      	movs	r3, #1
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f004 fb07 	bl	800e9d4 <SCPI_ParamCharacters>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	f083 0301 	eor.w	r3, r3, #1
 800a3cc:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d142      	bne.n	800a458 <PS_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800a3d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f004 fae8 	bl	800e9b0 <SCPI_ParamUInt32>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	f083 0301 	eor.w	r3, r3, #1
 800a3e6:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d135      	bne.n	800a458 <PS_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
 800a3ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f004 fadb 	bl	800e9b0 <SCPI_ParamUInt32>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	f083 0301 	eor.w	r3, r3, #1
 800a400:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800a402:	2b00      	cmp	r3, #0
 800a404:	d128      	bne.n	800a458 <PS_SCOPE_Set+0x108>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800a406:	f107 0210 	add.w	r2, r7, #16
 800a40a:	f107 011c 	add.w	r1, r7, #28
 800a40e:	2301      	movs	r3, #1
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f004 fadf 	bl	800e9d4 <SCPI_ParamCharacters>
 800a416:	4603      	mov	r3, r0
 800a418:	f083 0301 	eor.w	r3, r3, #1
 800a41c:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d11a      	bne.n	800a458 <PS_SCOPE_Set+0x108>
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
 800a422:	f107 020c 	add.w	r2, r7, #12
 800a426:	f107 0118 	add.w	r1, r7, #24
 800a42a:	2301      	movs	r3, #1
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f004 fad1 	bl	800e9d4 <SCPI_ParamCharacters>
 800a432:	4603      	mov	r3, r0
 800a434:	f083 0301 	eor.w	r3, r3, #1
 800a438:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10c      	bne.n	800a458 <PS_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p9, TRUE))
 800a43e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a442:	2201      	movs	r2, #1
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f004 fab2 	bl	800e9b0 <SCPI_ParamUInt32>
 800a44c:	4603      	mov	r3, r0
 800a44e:	f083 0301 	eor.w	r3, r3, #1
 800a452:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <PS_SCOPE_Set+0x10e>
        {
            return SCPI_RES_ERR;
 800a458:	f04f 33ff 	mov.w	r3, #4294967295
 800a45c:	e11c      	b.n	800a698 <PS_SCOPE_Set+0x348>
        }

        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2b04      	cmp	r3, #4
 800a462:	d143      	bne.n	800a4ec <PS_SCOPE_Set+0x19c>
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d140      	bne.n	800a4ec <PS_SCOPE_Set+0x19c>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d13d      	bne.n	800a4ec <PS_SCOPE_Set+0x19c>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 800a470:	6a3b      	ldr	r3, [r7, #32]
 800a472:	781b      	ldrb	r3, [r3, #0]
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 800a474:	2b54      	cmp	r3, #84	; 0x54
 800a476:	d003      	beq.n	800a480 <PS_SCOPE_Set+0x130>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	2b46      	cmp	r3, #70	; 0x46
 800a47e:	d135      	bne.n	800a4ec <PS_SCOPE_Set+0x19c>
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	3301      	adds	r3, #1
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	2b54      	cmp	r3, #84	; 0x54
 800a488:	d004      	beq.n	800a494 <PS_SCOPE_Set+0x144>
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	3301      	adds	r3, #1
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2b46      	cmp	r3, #70	; 0x46
 800a492:	d12b      	bne.n	800a4ec <PS_SCOPE_Set+0x19c>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	3302      	adds	r3, #2
 800a498:	781b      	ldrb	r3, [r3, #0]
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 800a49a:	2b54      	cmp	r3, #84	; 0x54
 800a49c:	d004      	beq.n	800a4a8 <PS_SCOPE_Set+0x158>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 800a49e:	6a3b      	ldr	r3, [r7, #32]
 800a4a0:	3302      	adds	r3, #2
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b46      	cmp	r3, #70	; 0x46
 800a4a6:	d121      	bne.n	800a4ec <PS_SCOPE_Set+0x19c>
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	3303      	adds	r3, #3
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	2b54      	cmp	r3, #84	; 0x54
 800a4b0:	d004      	beq.n	800a4bc <PS_SCOPE_Set+0x16c>
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	3303      	adds	r3, #3
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	2b46      	cmp	r3, #70	; 0x46
 800a4ba:	d117      	bne.n	800a4ec <PS_SCOPE_Set+0x19c>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	781b      	ldrb	r3, [r3, #0]
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 800a4c0:	2b52      	cmp	r3, #82	; 0x52
 800a4c2:	d003      	beq.n	800a4cc <PS_SCOPE_Set+0x17c>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	2b46      	cmp	r3, #70	; 0x46
 800a4ca:	d10f      	bne.n	800a4ec <PS_SCOPE_Set+0x19c>
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	2b41      	cmp	r3, #65	; 0x41
 800a4d2:	d013      	beq.n	800a4fc <PS_SCOPE_Set+0x1ac>
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b4e      	cmp	r3, #78	; 0x4e
 800a4da:	d00f      	beq.n	800a4fc <PS_SCOPE_Set+0x1ac>
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	2b53      	cmp	r3, #83	; 0x53
 800a4e2:	d00b      	beq.n	800a4fc <PS_SCOPE_Set+0x1ac>
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	2b44      	cmp	r3, #68	; 0x44
 800a4ea:	d007      	beq.n	800a4fc <PS_SCOPE_Set+0x1ac>
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800a4ec:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f001 fd97 	bl	800c024 <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800a4f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4fa:	e0cd      	b.n	800a698 <PS_SCOPE_Set+0x348>
        }

        daq_settings_save(&daq.set, &daq.trig.set, &daq.save_s, &daq.trig.save_s);
 800a4fc:	4b3f      	ldr	r3, [pc, #252]	; (800a5fc <PS_SCOPE_Set+0x2ac>)
 800a4fe:	4a40      	ldr	r2, [pc, #256]	; (800a600 <PS_SCOPE_Set+0x2b0>)
 800a500:	4940      	ldr	r1, [pc, #256]	; (800a604 <PS_SCOPE_Set+0x2b4>)
 800a502:	4841      	ldr	r0, [pc, #260]	; (800a608 <PS_SCOPE_Set+0x2b8>)
 800a504:	f7fb fe39 	bl	800617a <daq_settings_save>
        daq_enable(&daq, 0);
 800a508:	2100      	movs	r1, #0
 800a50a:	483b      	ldr	r0, [pc, #236]	; (800a5f8 <PS_SCOPE_Set+0x2a8>)
 800a50c:	f7fc fcaa 	bl	8006e64 <daq_enable>
        daq_reset(&daq);
 800a510:	4839      	ldr	r0, [pc, #228]	; (800a5f8 <PS_SCOPE_Set+0x2a8>)
 800a512:	f7fc fc39 	bl	8006d88 <daq_reset>
        daq.dis_hold = 1;
 800a516:	4b38      	ldr	r3, [pc, #224]	; (800a5f8 <PS_SCOPE_Set+0x2a8>)
 800a518:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a51c:	33ad      	adds	r3, #173	; 0xad
 800a51e:	2201      	movs	r2, #1
 800a520:	701a      	strb	r2, [r3, #0]

        daq_mem_set(&daq, 3); // safety guard
 800a522:	2103      	movs	r1, #3
 800a524:	4834      	ldr	r0, [pc, #208]	; (800a5f8 <PS_SCOPE_Set+0x2a8>)
 800a526:	f7fb ff15 	bl	8006354 <daq_mem_set>
        int ret2 = daq_bit_set(&daq, (int)p1);
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	4619      	mov	r1, r3
 800a530:	4831      	ldr	r0, [pc, #196]	; (800a5f8 <PS_SCOPE_Set+0x2a8>)
 800a532:	f7fc f9bd 	bl	80068b0 <daq_bit_set>
 800a536:	64f8      	str	r0, [r7, #76]	; 0x4c
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	2b54      	cmp	r3, #84	; 0x54
 800a53e:	bf0c      	ite	eq
 800a540:	2301      	moveq	r3, #1
 800a542:	2300      	movne	r3, #0
 800a544:	b2db      	uxtb	r3, r3
 800a546:	4619      	mov	r1, r3
 800a548:	6a3b      	ldr	r3, [r7, #32]
 800a54a:	3301      	adds	r3, #1
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	2b54      	cmp	r3, #84	; 0x54
 800a550:	bf0c      	ite	eq
 800a552:	2301      	moveq	r3, #1
 800a554:	2300      	movne	r3, #0
 800a556:	b2db      	uxtb	r3, r3
 800a558:	4618      	mov	r0, r3
                                    p4[2] == 'T' ? 1 : 0, p4[3] == 'T' ? 1 : 0, (int)p3);
 800a55a:	6a3b      	ldr	r3, [r7, #32]
 800a55c:	3302      	adds	r3, #2
 800a55e:	781b      	ldrb	r3, [r3, #0]
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800a560:	2b54      	cmp	r3, #84	; 0x54
 800a562:	bf0c      	ite	eq
 800a564:	2301      	moveq	r3, #1
 800a566:	2300      	movne	r3, #0
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	461c      	mov	r4, r3
                                    p4[2] == 'T' ? 1 : 0, p4[3] == 'T' ? 1 : 0, (int)p3);
 800a56c:	6a3b      	ldr	r3, [r7, #32]
 800a56e:	3303      	adds	r3, #3
 800a570:	781b      	ldrb	r3, [r3, #0]
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800a572:	2b54      	cmp	r3, #84	; 0x54
 800a574:	bf0c      	ite	eq
 800a576:	2301      	moveq	r3, #1
 800a578:	2300      	movne	r3, #0
 800a57a:	b2db      	uxtb	r3, r3
                                    p4[2] == 'T' ? 1 : 0, p4[3] == 'T' ? 1 : 0, (int)p3);
 800a57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a57e:	ee07 2a90 	vmov	s15, r2
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800a582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	eeb0 0a67 	vmov.f32	s0, s15
 800a58c:	4623      	mov	r3, r4
 800a58e:	4602      	mov	r2, r0
 800a590:	4819      	ldr	r0, [pc, #100]	; (800a5f8 <PS_SCOPE_Set+0x2a8>)
 800a592:	f7fc faa9 	bl	8006ae8 <daq_ch_set>
 800a596:	64b8      	str	r0, [r7, #72]	; 0x48
        int ret3 = daq_fs_set(&daq, (int)p3);
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5a2:	eeb0 0a67 	vmov.f32	s0, s15
 800a5a6:	4814      	ldr	r0, [pc, #80]	; (800a5f8 <PS_SCOPE_Set+0x2a8>)
 800a5a8:	f7fc fa02 	bl	80069b0 <daq_fs_set>
 800a5ac:	6478      	str	r0, [r7, #68]	; 0x44
        int ret1 = daq_mem_set(&daq, (int)p2);
 800a5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4810      	ldr	r0, [pc, #64]	; (800a5f8 <PS_SCOPE_Set+0x2a8>)
 800a5b6:	f7fb fecd 	bl	8006354 <daq_mem_set>
 800a5ba:	6438      	str	r0, [r7, #64]	; 0x40
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 800a5bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	2b52      	cmp	r3, #82	; 0x52
 800a5c8:	bf14      	ite	ne
 800a5ca:	2301      	movne	r3, #1
 800a5cc:	2300      	moveq	r3, #0
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	461c      	mov	r4, r3
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 800a5d6:	2b41      	cmp	r3, #65	; 0x41
 800a5d8:	d018      	beq.n	800a60c <PS_SCOPE_Set+0x2bc>
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	2b4e      	cmp	r3, #78	; 0x4e
 800a5e0:	d007      	beq.n	800a5f2 <PS_SCOPE_Set+0x2a2>
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	2b53      	cmp	r3, #83	; 0x53
 800a5e8:	d101      	bne.n	800a5ee <PS_SCOPE_Set+0x29e>
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	e00f      	b.n	800a60e <PS_SCOPE_Set+0x2be>
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e00d      	b.n	800a60e <PS_SCOPE_Set+0x2be>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e00b      	b.n	800a60e <PS_SCOPE_Set+0x2be>
 800a5f6:	bf00      	nop
 800a5f8:	200007ec 	.word	0x200007ec
 800a5fc:	2000b8b4 	.word	0x2000b8b4
 800a600:	2000b86c 	.word	0x2000b86c
 800a604:	2000b8a0 	.word	0x2000b8a0
 800a608:	2000b860 	.word	0x2000b860
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 800a60c:	2300      	movs	r3, #0
 800a60e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a610:	9001      	str	r0, [sp, #4]
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	4623      	mov	r3, r4
 800a616:	4822      	ldr	r0, [pc, #136]	; (800a6a0 <PS_SCOPE_Set+0x350>)
 800a618:	f7fd fef0 	bl	80083fc <daq_trig_set>
 800a61c:	63f8      	str	r0, [r7, #60]	; 0x3c

        if (ret1 + ret2 + ret3 + ret4 + ret5 == 0)
 800a61e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a622:	441a      	add	r2, r3
 800a624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a626:	441a      	add	r2, r3
 800a628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a62a:	441a      	add	r2, r3
 800a62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a62e:	4413      	add	r3, r2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10f      	bne.n	800a654 <PS_SCOPE_Set+0x304>
        {
            daq.dis_hold = 0;
 800a634:	4b1a      	ldr	r3, [pc, #104]	; (800a6a0 <PS_SCOPE_Set+0x350>)
 800a636:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a63a:	33ad      	adds	r3, #173	; 0xad
 800a63c:	2200      	movs	r2, #0
 800a63e:	701a      	strb	r2, [r3, #0]
            daq_enable(&daq, 1);
 800a640:	2101      	movs	r1, #1
 800a642:	4817      	ldr	r0, [pc, #92]	; (800a6a0 <PS_SCOPE_Set+0x350>)
 800a644:	f7fc fc0e 	bl	8006e64 <daq_enable>

            SCPI_ResultText(context, SCPI_OK);
 800a648:	4916      	ldr	r1, [pc, #88]	; (800a6a4 <PS_SCOPE_Set+0x354>)
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f003 fd02 	bl	800e054 <SCPI_ResultText>
            return SCPI_RES_OK;
 800a650:	2301      	movs	r3, #1
 800a652:	e021      	b.n	800a698 <PS_SCOPE_Set+0x348>
        }
        else
        {
            daq.mode = VM;
 800a654:	4b12      	ldr	r3, [pc, #72]	; (800a6a0 <PS_SCOPE_Set+0x350>)
 800a656:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a65a:	33ac      	adds	r3, #172	; 0xac
 800a65c:	2201      	movs	r2, #1
 800a65e:	701a      	strb	r2, [r3, #0]
            daq_mode_set(&daq, SCOPE);  // reload saved settings
 800a660:	2100      	movs	r1, #0
 800a662:	480f      	ldr	r0, [pc, #60]	; (800a6a0 <PS_SCOPE_Set+0x350>)
 800a664:	f7fc fce8 	bl	8007038 <daq_mode_set>
            daq.dis_hold = 0;
 800a668:	4b0d      	ldr	r3, [pc, #52]	; (800a6a0 <PS_SCOPE_Set+0x350>)
 800a66a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a66e:	33ad      	adds	r3, #173	; 0xad
 800a670:	2200      	movs	r2, #0
 800a672:	701a      	strb	r2, [r3, #0]
            daq_enable(&daq, 1);
 800a674:	2101      	movs	r1, #1
 800a676:	480a      	ldr	r0, [pc, #40]	; (800a6a0 <PS_SCOPE_Set+0x350>)
 800a678:	f7fc fbf4 	bl	8006e64 <daq_enable>

            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800a67c:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 fccf 	bl	800c024 <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800a686:	f04f 33ff 	mov.w	r3, #4294967295
 800a68a:	e005      	b.n	800a698 <PS_SCOPE_Set+0x348>
        }
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800a68c:	2101      	movs	r1, #1
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f001 fcc8 	bl	800c024 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800a694:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3754      	adds	r7, #84	; 0x54
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd90      	pop	{r4, r7, pc}
 800a6a0:	200007ec 	.word	0x200007ec
 800a6a4:	08013950 	.word	0x08013950

0800a6a8 <PS_SCOPE_SetQ>:

scpi_result_t PS_SCOPE_SetQ(scpi_t * context)
{
 800a6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6aa:	b0b1      	sub	sp, #196	; 0xc4
 800a6ac:	af08      	add	r7, sp, #32
 800a6ae:	6078      	str	r0, [r7, #4]
    if (daq.mode == SCOPE)
 800a6b0:	4b81      	ldr	r3, [pc, #516]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a6b2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a6b6:	33ac      	adds	r3, #172	; 0xac
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f040 80e8 	bne.w	800a890 <PS_SCOPE_SetQ+0x1e8>
        char freq_s[30];
        char chans_en[5];
        char edge_s[2];
        char mode_s[2];

        sprint_fast(freq_s, "%s", daq.set.fs, 3);
 800a6c0:	4b7d      	ldr	r3, [pc, #500]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a6c2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a6c6:	3378      	adds	r3, #120	; 0x78
 800a6c8:	edd3 7a00 	vldr	s15, [r3]
 800a6cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a6d0:	2203      	movs	r2, #3
 800a6d2:	eeb0 0a67 	vmov.f32	s0, s15
 800a6d6:	4979      	ldr	r1, [pc, #484]	; (800a8bc <PS_SCOPE_SetQ+0x214>)
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f001 fa19 	bl	800bb10 <sprint_fast>
        chans_en[0] = daq.set.ch1_en ? 'T' : 'F';
 800a6de:	4b76      	ldr	r3, [pc, #472]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a6e0:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a6e4:	3374      	adds	r3, #116	; 0x74
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <PS_SCOPE_SetQ+0x48>
 800a6ec:	2354      	movs	r3, #84	; 0x54
 800a6ee:	e000      	b.n	800a6f2 <PS_SCOPE_SetQ+0x4a>
 800a6f0:	2346      	movs	r3, #70	; 0x46
 800a6f2:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        chans_en[1] = daq.set.ch2_en ? 'T' : 'F';
 800a6f6:	4b70      	ldr	r3, [pc, #448]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a6f8:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a6fc:	3375      	adds	r3, #117	; 0x75
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <PS_SCOPE_SetQ+0x60>
 800a704:	2354      	movs	r3, #84	; 0x54
 800a706:	e000      	b.n	800a70a <PS_SCOPE_SetQ+0x62>
 800a708:	2346      	movs	r3, #70	; 0x46
 800a70a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        chans_en[2] = daq.set.ch3_en ? 'T' : 'F';
 800a70e:	4b6a      	ldr	r3, [pc, #424]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a710:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a714:	3376      	adds	r3, #118	; 0x76
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <PS_SCOPE_SetQ+0x78>
 800a71c:	2354      	movs	r3, #84	; 0x54
 800a71e:	e000      	b.n	800a722 <PS_SCOPE_SetQ+0x7a>
 800a720:	2346      	movs	r3, #70	; 0x46
 800a722:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        chans_en[3] = daq.set.ch4_en ? 'T' : 'F';
 800a726:	4b64      	ldr	r3, [pc, #400]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a728:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a72c:	3377      	adds	r3, #119	; 0x77
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <PS_SCOPE_SetQ+0x90>
 800a734:	2354      	movs	r3, #84	; 0x54
 800a736:	e000      	b.n	800a73a <PS_SCOPE_SetQ+0x92>
 800a738:	2346      	movs	r3, #70	; 0x46
 800a73a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        edge_s[0] = daq.trig.set.edge == RISING ? 'R' : 'F';
 800a73e:	4b5e      	ldr	r3, [pc, #376]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a740:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a744:	33b9      	adds	r3, #185	; 0xb9
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d101      	bne.n	800a750 <PS_SCOPE_SetQ+0xa8>
 800a74c:	2352      	movs	r3, #82	; 0x52
 800a74e:	e000      	b.n	800a752 <PS_SCOPE_SetQ+0xaa>
 800a750:	2346      	movs	r3, #70	; 0x46
 800a752:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 800a756:	4b58      	ldr	r3, [pc, #352]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a758:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a75c:	33b8      	adds	r3, #184	; 0xb8
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d013      	beq.n	800a78c <PS_SCOPE_SetQ+0xe4>
 800a764:	4b54      	ldr	r3, [pc, #336]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a766:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a76a:	33b8      	adds	r3, #184	; 0xb8
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d00a      	beq.n	800a788 <PS_SCOPE_SetQ+0xe0>
            (daq.trig.set.mode == SINGLE ? 'S' : 'D'));
 800a772:	4b51      	ldr	r3, [pc, #324]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a774:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a778:	33b8      	adds	r3, #184	; 0xb8
 800a77a:	781b      	ldrb	r3, [r3, #0]
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d101      	bne.n	800a784 <PS_SCOPE_SetQ+0xdc>
 800a780:	2353      	movs	r3, #83	; 0x53
 800a782:	e004      	b.n	800a78e <PS_SCOPE_SetQ+0xe6>
 800a784:	2344      	movs	r3, #68	; 0x44
 800a786:	e002      	b.n	800a78e <PS_SCOPE_SetQ+0xe6>
 800a788:	234e      	movs	r3, #78	; 0x4e
 800a78a:	e000      	b.n	800a78e <PS_SCOPE_SetQ+0xe6>
 800a78c:	2341      	movs	r3, #65	; 0x41
 800a78e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        chans_en[4] = '\0';
 800a792:	2300      	movs	r3, #0
 800a794:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        edge_s[1] = '\0';
 800a798:	2300      	movs	r3, #0
 800a79a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
        mode_s[1] = '\0';
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

        char maxZ_s[15];
        float max_Z = PS_ADC_MAXZ(daq.smpl_time, daq.set.bits == B12 ? PS_LN2POW14 : PS_LN2POW10);
 800a7a4:	4b44      	ldr	r3, [pc, #272]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a7a6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a7aa:	33a0      	adds	r3, #160	; 0xa0
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7f5 fee2 	bl	8000578 <__aeabi_f2d>
 800a7b4:	4b40      	ldr	r3, [pc, #256]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a7b6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a7ba:	337e      	adds	r3, #126	; 0x7e
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	2b0c      	cmp	r3, #12
 800a7c0:	d103      	bne.n	800a7ca <PS_SCOPE_SetQ+0x122>
 800a7c2:	a439      	add	r4, pc, #228	; (adr r4, 800a8a8 <PS_SCOPE_SetQ+0x200>)
 800a7c4:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a7c8:	e002      	b.n	800a7d0 <PS_SCOPE_SetQ+0x128>
 800a7ca:	a439      	add	r4, pc, #228	; (adr r4, 800a8b0 <PS_SCOPE_SetQ+0x208>)
 800a7cc:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4623      	mov	r3, r4
 800a7d4:	f7f6 f852 	bl	800087c <__aeabi_ddiv>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	460c      	mov	r4, r1
 800a7dc:	4618      	mov	r0, r3
 800a7de:	4621      	mov	r1, r4
 800a7e0:	f04f 0200 	mov.w	r2, #0
 800a7e4:	4b36      	ldr	r3, [pc, #216]	; (800a8c0 <PS_SCOPE_SetQ+0x218>)
 800a7e6:	f7f5 fd67 	bl	80002b8 <__aeabi_dsub>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	f7f6 f9f1 	bl	8000bd8 <__aeabi_d2f>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        sprint_fast(maxZ_s, "%skOhm", max_Z, 1);
 800a7fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a800:	2201      	movs	r2, #1
 800a802:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 800a806:	492f      	ldr	r1, [pc, #188]	; (800a8c4 <PS_SCOPE_SetQ+0x21c>)
 800a808:	4618      	mov	r0, r3
 800a80a:	f001 f981 	bl	800bb10 <sprint_fast>

        int len = sprintf(buff, "\"%d,%d,%s,%s,%d,%d,%s,%s,%d,%s\"", daq.set.bits, daq.set.mem, freq_s, chans_en,
 800a80e:	4b2a      	ldr	r3, [pc, #168]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a810:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a814:	337e      	adds	r3, #126	; 0x7e
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	461d      	mov	r5, r3
 800a81a:	4b27      	ldr	r3, [pc, #156]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a81c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a820:	337c      	adds	r3, #124	; 0x7c
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	461e      	mov	r6, r3
 800a826:	4b24      	ldr	r3, [pc, #144]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a828:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a82c:	33bc      	adds	r3, #188	; 0xbc
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	4b21      	ldr	r3, [pc, #132]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a832:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a836:	33c4      	adds	r3, #196	; 0xc4
 800a838:	6819      	ldr	r1, [r3, #0]
 800a83a:	4b1f      	ldr	r3, [pc, #124]	; (800a8b8 <PS_SCOPE_SetQ+0x210>)
 800a83c:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a840:	33b4      	adds	r3, #180	; 0xb4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f107 0408 	add.w	r4, r7, #8
 800a848:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800a84c:	9007      	str	r0, [sp, #28]
 800a84e:	9306      	str	r3, [sp, #24]
 800a850:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a854:	9305      	str	r3, [sp, #20]
 800a856:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a85a:	9304      	str	r3, [sp, #16]
 800a85c:	9103      	str	r1, [sp, #12]
 800a85e:	9202      	str	r2, [sp, #8]
 800a860:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a864:	9301      	str	r3, [sp, #4]
 800a866:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	4633      	mov	r3, r6
 800a86e:	462a      	mov	r2, r5
 800a870:	4915      	ldr	r1, [pc, #84]	; (800a8c8 <PS_SCOPE_SetQ+0x220>)
 800a872:	4620      	mov	r0, r4
 800a874:	f006 ff42 	bl	80116fc <siprintf>
 800a878:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                          daq.trig.set.ch, daq.trig.set.val_percent, edge_s, mode_s, daq.trig.set.pretrigger, maxZ_s);

        SCPI_ResultCharacters(context, buff, len);
 800a87c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a880:	f107 0308 	add.w	r3, r7, #8
 800a884:	4619      	mov	r1, r3
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f003 fb4a 	bl	800df20 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 800a88c:	2301      	movs	r3, #1
 800a88e:	e005      	b.n	800a89c <PS_SCOPE_SetQ+0x1f4>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800a890:	2101      	movs	r1, #1
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f001 fbc6 	bl	800c024 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800a898:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	37a4      	adds	r7, #164	; 0xa4
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a4:	f3af 8000 	nop.w
 800a8a8:	ff0bb948 	.word	0xff0bb948
 800a8ac:	40165baf 	.word	0x40165baf
 800a8b0:	d95672ff 	.word	0xd95672ff
 800a8b4:	400ff0b1 	.word	0x400ff0b1
 800a8b8:	200007ec 	.word	0x200007ec
 800a8bc:	08013998 	.word	0x08013998
 800a8c0:	3ff00000 	.word	0x3ff00000
 800a8c4:	080139d4 	.word	0x080139d4
 800a8c8:	080139dc 	.word	0x080139dc

0800a8cc <PS_LA_ReadQ>:

/************************* [LA Actions] *************************/

scpi_result_t PS_LA_ReadQ(scpi_t * context)
{
 800a8cc:	b590      	push	{r4, r7, lr}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
    if (daq.mode == LA)
 800a8d4:	4b46      	ldr	r3, [pc, #280]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a8d6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a8da:	33ac      	adds	r3, #172	; 0xac
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d17b      	bne.n	800a9da <PS_LA_ReadQ+0x10e>
    {
        if (daq.trig.ready == 0)
 800a8e2:	4b43      	ldr	r3, [pc, #268]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a8e4:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a8e8:	33f2      	adds	r3, #242	; 0xf2
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d105      	bne.n	800a8fc <PS_LA_ReadQ+0x30>
        {
            SCPI_ResultText(context, PS_RESP_NRDY);
 800a8f0:	4940      	ldr	r1, [pc, #256]	; (800a9f4 <PS_LA_ReadQ+0x128>)
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f003 fbae 	bl	800e054 <SCPI_ResultText>
            return SCPI_RES_OK;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e074      	b.n	800a9e6 <PS_LA_ReadQ+0x11a>
        }

        if (daq.trig.set.mode == DISABLED)
 800a8fc:	4b3c      	ldr	r3, [pc, #240]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a8fe:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a902:	33b8      	adds	r3, #184	; 0xb8
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b03      	cmp	r3, #3
 800a908:	d119      	bne.n	800a93e <PS_LA_ReadQ+0x72>
        {
            daq_enable(&daq, 0);
 800a90a:	2100      	movs	r1, #0
 800a90c:	4838      	ldr	r0, [pc, #224]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a90e:	f7fc faa9 	bl	8006e64 <daq_enable>
            daq.trig.pos_frst = PS_DMA_LAST_IDX(daq.buff1.len, PS_DMA_CH_LA, PS_DMA_LA);
 800a912:	4b37      	ldr	r3, [pc, #220]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a914:	88db      	ldrh	r3, [r3, #6]
 800a916:	461c      	mov	r4, r3
 800a918:	2106      	movs	r1, #6
 800a91a:	4837      	ldr	r0, [pc, #220]	; (800a9f8 <PS_LA_ReadQ+0x12c>)
 800a91c:	f7ff f856 	bl	80099cc <LL_DMA_GetDataLength>
 800a920:	4603      	mov	r3, r0
 800a922:	1ae3      	subs	r3, r4, r3
 800a924:	461a      	mov	r2, r3
 800a926:	4b32      	ldr	r3, [pc, #200]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a928:	88db      	ldrh	r3, [r3, #6]
 800a92a:	4619      	mov	r1, r3
 800a92c:	4610      	mov	r0, r2
 800a92e:	f7ff f837 	bl	80099a0 <get_last_circ_idx>
 800a932:	4602      	mov	r2, r0
 800a934:	4b2e      	ldr	r3, [pc, #184]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a936:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a93a:	33fc      	adds	r3, #252	; 0xfc
 800a93c:	601a      	str	r2, [r3, #0]
        }

        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 800a93e:	2300      	movs	r3, #0
 800a940:	60fb      	str	r3, [r7, #12]
 800a942:	4b2b      	ldr	r3, [pc, #172]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a944:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a948:	33fc      	adds	r3, #252	; 0xfc
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	60bb      	str	r3, [r7, #8]
 800a94e:	e017      	b.n	800a980 <PS_LA_ReadQ+0xb4>
        {
            if (i >= daq.buff1.len)
 800a950:	4b27      	ldr	r3, [pc, #156]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a952:	88db      	ldrh	r3, [r3, #6]
 800a954:	461a      	mov	r2, r3
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	4293      	cmp	r3, r2
 800a95a:	db01      	blt.n	800a960 <PS_LA_ReadQ+0x94>
                i = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	60bb      	str	r3, [r7, #8]

            ((uint8_t*)daq.buff_out.data)[k] = (uint8_t)(((uint8_t*)daq.buff1.data)[i]);
 800a960:	4b23      	ldr	r3, [pc, #140]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	441a      	add	r2, r3
 800a968:	4b21      	ldr	r3, [pc, #132]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a96a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	440b      	add	r3, r1
 800a970:	7812      	ldrb	r2, [r2, #0]
 800a972:	701a      	strb	r2, [r3, #0]
        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3301      	adds	r3, #1
 800a978:	60fb      	str	r3, [r7, #12]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	3301      	adds	r3, #1
 800a97e:	60bb      	str	r3, [r7, #8]
 800a980:	4b1b      	ldr	r3, [pc, #108]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a982:	88db      	ldrh	r3, [r3, #6]
 800a984:	461a      	mov	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4293      	cmp	r3, r2
 800a98a:	dbe1      	blt.n	800a950 <PS_LA_ReadQ+0x84>
        }

        daq.trig.pretrig_cntr = 0;
 800a98c:	4b18      	ldr	r3, [pc, #96]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a98e:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 800a992:	3310      	adds	r3, #16
 800a994:	2200      	movs	r2, #0
 800a996:	601a      	str	r2, [r3, #0]
        daq.trig.ready = 0;
 800a998:	4b15      	ldr	r3, [pc, #84]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a99a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a99e:	33f2      	adds	r3, #242	; 0xf2
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	701a      	strb	r2, [r3, #0]
        daq.trig.ready_last = 0;
 800a9a4:	4b12      	ldr	r3, [pc, #72]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a9a6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a9aa:	33f3      	adds	r3, #243	; 0xf3
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	701a      	strb	r2, [r3, #0]

        if (daq.trig.set.mode != SINGLE)
 800a9b0:	4b0f      	ldr	r3, [pc, #60]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a9b2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800a9b6:	33b8      	adds	r3, #184	; 0xb8
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d003      	beq.n	800a9c6 <PS_LA_ReadQ+0xfa>
        {
            daq_enable(&daq, 1);
 800a9be:	2101      	movs	r1, #1
 800a9c0:	480b      	ldr	r0, [pc, #44]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a9c2:	f7fc fa4f 	bl	8006e64 <daq_enable>
        }

        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
 800a9c6:	4b0a      	ldr	r3, [pc, #40]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a9c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a9ca:	4b09      	ldr	r3, [pc, #36]	; (800a9f0 <PS_LA_ReadQ+0x124>)
 800a9cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f003 fd1b 	bl	800e40c <SCPI_ResultArbitraryBlock>
        return SCPI_RES_OK;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e005      	b.n	800a9e6 <PS_LA_ReadQ+0x11a>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800a9da:	2101      	movs	r1, #1
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 fb21 	bl	800c024 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800a9e2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd90      	pop	{r4, r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	200007ec 	.word	0x200007ec
 800a9f4:	080139ac 	.word	0x080139ac
 800a9f8:	40020000 	.word	0x40020000

0800a9fc <PS_LA_Set>:

scpi_result_t PS_LA_Set(scpi_t * context)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b092      	sub	sp, #72	; 0x48
 800aa00:	af02      	add	r7, sp, #8
 800aa02:	6078      	str	r0, [r7, #4]
    if (daq.mode == LA)
 800aa04:	4b92      	ldr	r3, [pc, #584]	; (800ac50 <PS_LA_Set+0x254>)
 800aa06:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800aa0a:	33ac      	adds	r3, #172	; 0xac
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	f040 8113 	bne.w	800ac3a <PS_LA_Set+0x23e>
        uint32_t p2, p3, p5, p9;
        const char* p7;
        const char* p8;
        size_t p7l, p8l;

        if (!SCPI_ParamUInt32(context, &p2, TRUE) ||
 800aa14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa18:	2201      	movs	r2, #1
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f003 ffc7 	bl	800e9b0 <SCPI_ParamUInt32>
 800aa22:	4603      	mov	r3, r0
 800aa24:	f083 0301 	eor.w	r3, r3, #1
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d142      	bne.n	800aab4 <PS_LA_Set+0xb8>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800aa2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa32:	2201      	movs	r2, #1
 800aa34:	4619      	mov	r1, r3
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f003 ffba 	bl	800e9b0 <SCPI_ParamUInt32>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f083 0301 	eor.w	r3, r3, #1
 800aa42:	b2db      	uxtb	r3, r3
        if (!SCPI_ParamUInt32(context, &p2, TRUE) ||
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d135      	bne.n	800aab4 <PS_LA_Set+0xb8>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800aa48:	f107 0320 	add.w	r3, r7, #32
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f003 ffad 	bl	800e9b0 <SCPI_ParamUInt32>
 800aa56:	4603      	mov	r3, r0
 800aa58:	f083 0301 	eor.w	r3, r3, #1
 800aa5c:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d128      	bne.n	800aab4 <PS_LA_Set+0xb8>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800aa62:	f107 0210 	add.w	r2, r7, #16
 800aa66:	f107 0118 	add.w	r1, r7, #24
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f003 ffb1 	bl	800e9d4 <SCPI_ParamCharacters>
 800aa72:	4603      	mov	r3, r0
 800aa74:	f083 0301 	eor.w	r3, r3, #1
 800aa78:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d11a      	bne.n	800aab4 <PS_LA_Set+0xb8>
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
 800aa7e:	f107 020c 	add.w	r2, r7, #12
 800aa82:	f107 0114 	add.w	r1, r7, #20
 800aa86:	2301      	movs	r3, #1
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f003 ffa3 	bl	800e9d4 <SCPI_ParamCharacters>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	f083 0301 	eor.w	r3, r3, #1
 800aa94:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10c      	bne.n	800aab4 <PS_LA_Set+0xb8>
            !SCPI_ParamUInt32(context, &p9, TRUE))
 800aa9a:	f107 031c 	add.w	r3, r7, #28
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f003 ff84 	bl	800e9b0 <SCPI_ParamUInt32>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	f083 0301 	eor.w	r3, r3, #1
 800aaae:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d002      	beq.n	800aaba <PS_LA_Set+0xbe>
        {
            return SCPI_RES_ERR;
 800aab4:	f04f 33ff 	mov.w	r3, #4294967295
 800aab8:	e0c5      	b.n	800ac46 <PS_LA_Set+0x24a>
        }

        if (p7l != 1 || p8l != 1 ||
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d11a      	bne.n	800aaf6 <PS_LA_Set+0xfa>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d117      	bne.n	800aaf6 <PS_LA_Set+0xfa>
            (p7[0] != 'R' && p7[0] != 'F') ||
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	781b      	ldrb	r3, [r3, #0]
        if (p7l != 1 || p8l != 1 ||
 800aaca:	2b52      	cmp	r3, #82	; 0x52
 800aacc:	d003      	beq.n	800aad6 <PS_LA_Set+0xda>
            (p7[0] != 'R' && p7[0] != 'F') ||
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	2b46      	cmp	r3, #70	; 0x46
 800aad4:	d10f      	bne.n	800aaf6 <PS_LA_Set+0xfa>
            (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	781b      	ldrb	r3, [r3, #0]
            (p7[0] != 'R' && p7[0] != 'F') ||
 800aada:	2b41      	cmp	r3, #65	; 0x41
 800aadc:	d013      	beq.n	800ab06 <PS_LA_Set+0x10a>
            (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	2b4e      	cmp	r3, #78	; 0x4e
 800aae4:	d00f      	beq.n	800ab06 <PS_LA_Set+0x10a>
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	2b53      	cmp	r3, #83	; 0x53
 800aaec:	d00b      	beq.n	800ab06 <PS_LA_Set+0x10a>
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	2b44      	cmp	r3, #68	; 0x44
 800aaf4:	d007      	beq.n	800ab06 <PS_LA_Set+0x10a>
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800aaf6:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f001 fa92 	bl	800c024 <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800ab00:	f04f 33ff 	mov.w	r3, #4294967295
 800ab04:	e09f      	b.n	800ac46 <PS_LA_Set+0x24a>
        }

        daq_settings_save(&daq.set, &daq.trig.set, &daq.save_l, &daq.trig.save_l);
 800ab06:	4b53      	ldr	r3, [pc, #332]	; (800ac54 <PS_LA_Set+0x258>)
 800ab08:	4a53      	ldr	r2, [pc, #332]	; (800ac58 <PS_LA_Set+0x25c>)
 800ab0a:	4954      	ldr	r1, [pc, #336]	; (800ac5c <PS_LA_Set+0x260>)
 800ab0c:	4854      	ldr	r0, [pc, #336]	; (800ac60 <PS_LA_Set+0x264>)
 800ab0e:	f7fb fb34 	bl	800617a <daq_settings_save>
        daq_enable(&daq, 0);
 800ab12:	2100      	movs	r1, #0
 800ab14:	484e      	ldr	r0, [pc, #312]	; (800ac50 <PS_LA_Set+0x254>)
 800ab16:	f7fc f9a5 	bl	8006e64 <daq_enable>
        daq_reset(&daq);
 800ab1a:	484d      	ldr	r0, [pc, #308]	; (800ac50 <PS_LA_Set+0x254>)
 800ab1c:	f7fc f934 	bl	8006d88 <daq_reset>
        daq.dis_hold = 1;
 800ab20:	4b4b      	ldr	r3, [pc, #300]	; (800ac50 <PS_LA_Set+0x254>)
 800ab22:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800ab26:	33ad      	adds	r3, #173	; 0xad
 800ab28:	2201      	movs	r2, #1
 800ab2a:	701a      	strb	r2, [r3, #0]

        daq_mem_set(&daq, 3); // safety guard
 800ab2c:	2103      	movs	r1, #3
 800ab2e:	4848      	ldr	r0, [pc, #288]	; (800ac50 <PS_LA_Set+0x254>)
 800ab30:	f7fb fc10 	bl	8006354 <daq_mem_set>
        int ret2 = daq_bit_set(&daq, B1);
 800ab34:	2101      	movs	r1, #1
 800ab36:	4846      	ldr	r0, [pc, #280]	; (800ac50 <PS_LA_Set+0x254>)
 800ab38:	f7fb feba 	bl	80068b0 <daq_bit_set>
 800ab3c:	63f8      	str	r0, [r7, #60]	; 0x3c
        int ret4 = daq_ch_set(&daq, 1, 1, 1, 1, (int)p3);
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	ee07 3a90 	vmov	s15, r3
 800ab44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab48:	2301      	movs	r3, #1
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	eeb0 0a67 	vmov.f32	s0, s15
 800ab50:	2301      	movs	r3, #1
 800ab52:	2201      	movs	r2, #1
 800ab54:	2101      	movs	r1, #1
 800ab56:	483e      	ldr	r0, [pc, #248]	; (800ac50 <PS_LA_Set+0x254>)
 800ab58:	f7fb ffc6 	bl	8006ae8 <daq_ch_set>
 800ab5c:	63b8      	str	r0, [r7, #56]	; 0x38
        int ret3 = daq_fs_set(&daq, (int)p3);
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	ee07 3a90 	vmov	s15, r3
 800ab64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab68:	eeb0 0a67 	vmov.f32	s0, s15
 800ab6c:	4838      	ldr	r0, [pc, #224]	; (800ac50 <PS_LA_Set+0x254>)
 800ab6e:	f7fb ff1f 	bl	80069b0 <daq_fs_set>
 800ab72:	6378      	str	r0, [r7, #52]	; 0x34
        int ret1 = daq_mem_set(&daq, (int)p2);
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4835      	ldr	r0, [pc, #212]	; (800ac50 <PS_LA_Set+0x254>)
 800ab7c:	f7fb fbea 	bl	8006354 <daq_mem_set>
 800ab80:	6338      	str	r0, [r7, #48]	; 0x30
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800ab82:	6a39      	ldr	r1, [r7, #32]
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b52      	cmp	r3, #82	; 0x52
 800ab8a:	bf14      	ite	ne
 800ab8c:	2301      	movne	r3, #1
 800ab8e:	2300      	moveq	r3, #0
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	4618      	mov	r0, r3
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	781b      	ldrb	r3, [r3, #0]
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800ab98:	2b41      	cmp	r3, #65	; 0x41
 800ab9a:	d00d      	beq.n	800abb8 <PS_LA_Set+0x1bc>
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	2b4e      	cmp	r3, #78	; 0x4e
 800aba2:	d007      	beq.n	800abb4 <PS_LA_Set+0x1b8>
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2b53      	cmp	r3, #83	; 0x53
 800abaa:	d101      	bne.n	800abb0 <PS_LA_Set+0x1b4>
 800abac:	2302      	movs	r3, #2
 800abae:	e004      	b.n	800abba <PS_LA_Set+0x1be>
 800abb0:	2303      	movs	r3, #3
 800abb2:	e002      	b.n	800abba <PS_LA_Set+0x1be>
 800abb4:	2301      	movs	r3, #1
 800abb6:	e000      	b.n	800abba <PS_LA_Set+0x1be>
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800abb8:	2300      	movs	r3, #0
 800abba:	69fa      	ldr	r2, [r7, #28]
 800abbc:	9201      	str	r2, [sp, #4]
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	4603      	mov	r3, r0
 800abc2:	2200      	movs	r2, #0
 800abc4:	4822      	ldr	r0, [pc, #136]	; (800ac50 <PS_LA_Set+0x254>)
 800abc6:	f7fd fc19 	bl	80083fc <daq_trig_set>
 800abca:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (ret1 + ret2 + ret3 + ret4 + ret5 == 0)
 800abcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd0:	441a      	add	r2, r3
 800abd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd4:	441a      	add	r2, r3
 800abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd8:	441a      	add	r2, r3
 800abda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abdc:	4413      	add	r3, r2
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10f      	bne.n	800ac02 <PS_LA_Set+0x206>
        {
            daq.dis_hold = 0;
 800abe2:	4b1b      	ldr	r3, [pc, #108]	; (800ac50 <PS_LA_Set+0x254>)
 800abe4:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800abe8:	33ad      	adds	r3, #173	; 0xad
 800abea:	2200      	movs	r2, #0
 800abec:	701a      	strb	r2, [r3, #0]
            daq_enable(&daq, 1);
 800abee:	2101      	movs	r1, #1
 800abf0:	4817      	ldr	r0, [pc, #92]	; (800ac50 <PS_LA_Set+0x254>)
 800abf2:	f7fc f937 	bl	8006e64 <daq_enable>

            SCPI_ResultText(context, SCPI_OK);
 800abf6:	491b      	ldr	r1, [pc, #108]	; (800ac64 <PS_LA_Set+0x268>)
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f003 fa2b 	bl	800e054 <SCPI_ResultText>
            return SCPI_RES_OK;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e021      	b.n	800ac46 <PS_LA_Set+0x24a>
        }
        else
        {
            daq.mode = VM;
 800ac02:	4b13      	ldr	r3, [pc, #76]	; (800ac50 <PS_LA_Set+0x254>)
 800ac04:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800ac08:	33ac      	adds	r3, #172	; 0xac
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	701a      	strb	r2, [r3, #0]
            daq_mode_set(&daq, LA); // reload saved settings
 800ac0e:	2102      	movs	r1, #2
 800ac10:	480f      	ldr	r0, [pc, #60]	; (800ac50 <PS_LA_Set+0x254>)
 800ac12:	f7fc fa11 	bl	8007038 <daq_mode_set>
            daq.dis_hold = 0;
 800ac16:	4b0e      	ldr	r3, [pc, #56]	; (800ac50 <PS_LA_Set+0x254>)
 800ac18:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800ac1c:	33ad      	adds	r3, #173	; 0xad
 800ac1e:	2200      	movs	r2, #0
 800ac20:	701a      	strb	r2, [r3, #0]
            daq_enable(&daq, 1);
 800ac22:	2101      	movs	r1, #1
 800ac24:	480a      	ldr	r0, [pc, #40]	; (800ac50 <PS_LA_Set+0x254>)
 800ac26:	f7fc f91d 	bl	8006e64 <daq_enable>

            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800ac2a:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f001 f9f8 	bl	800c024 <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800ac34:	f04f 33ff 	mov.w	r3, #4294967295
 800ac38:	e005      	b.n	800ac46 <PS_LA_Set+0x24a>
        }
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f001 f9f1 	bl	800c024 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800ac42:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3740      	adds	r7, #64	; 0x40
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	200007ec 	.word	0x200007ec
 800ac54:	2000b8c8 	.word	0x2000b8c8
 800ac58:	2000b878 	.word	0x2000b878
 800ac5c:	2000b8a0 	.word	0x2000b8a0
 800ac60:	2000b860 	.word	0x2000b860
 800ac64:	08013950 	.word	0x08013950

0800ac68 <PS_LA_SetQ>:

scpi_result_t PS_LA_SetQ(scpi_t * context)
{
 800ac68:	b590      	push	{r4, r7, lr}
 800ac6a:	b0a7      	sub	sp, #156	; 0x9c
 800ac6c:	af04      	add	r7, sp, #16
 800ac6e:	6078      	str	r0, [r7, #4]
    if (daq.mode == LA)
 800ac70:	4b3e      	ldr	r3, [pc, #248]	; (800ad6c <PS_LA_SetQ+0x104>)
 800ac72:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800ac76:	33ac      	adds	r3, #172	; 0xac
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d16b      	bne.n	800ad56 <PS_LA_SetQ+0xee>
        char buff[80];
        char freq_s[30];
        char edge_s[2];
        char mode_s[2];

        sprint_fast(freq_s, "%s", daq.set.fs, 3);
 800ac7e:	4b3b      	ldr	r3, [pc, #236]	; (800ad6c <PS_LA_SetQ+0x104>)
 800ac80:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800ac84:	3378      	adds	r3, #120	; 0x78
 800ac86:	edd3 7a00 	vldr	s15, [r3]
 800ac8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ac8e:	2203      	movs	r2, #3
 800ac90:	eeb0 0a67 	vmov.f32	s0, s15
 800ac94:	4936      	ldr	r1, [pc, #216]	; (800ad70 <PS_LA_SetQ+0x108>)
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 ff3a 	bl	800bb10 <sprint_fast>
        edge_s[0] = daq.trig.set.edge == RISING ? 'R' : 'F';
 800ac9c:	4b33      	ldr	r3, [pc, #204]	; (800ad6c <PS_LA_SetQ+0x104>)
 800ac9e:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800aca2:	33b9      	adds	r3, #185	; 0xb9
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <PS_LA_SetQ+0x46>
 800acaa:	2352      	movs	r3, #82	; 0x52
 800acac:	e000      	b.n	800acb0 <PS_LA_SetQ+0x48>
 800acae:	2346      	movs	r3, #70	; 0x46
 800acb0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 800acb4:	4b2d      	ldr	r3, [pc, #180]	; (800ad6c <PS_LA_SetQ+0x104>)
 800acb6:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800acba:	33b8      	adds	r3, #184	; 0xb8
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d013      	beq.n	800acea <PS_LA_SetQ+0x82>
 800acc2:	4b2a      	ldr	r3, [pc, #168]	; (800ad6c <PS_LA_SetQ+0x104>)
 800acc4:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800acc8:	33b8      	adds	r3, #184	; 0xb8
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d00a      	beq.n	800ace6 <PS_LA_SetQ+0x7e>
            (daq.trig.set.mode == SINGLE ? 'S' : 'D'));
 800acd0:	4b26      	ldr	r3, [pc, #152]	; (800ad6c <PS_LA_SetQ+0x104>)
 800acd2:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800acd6:	33b8      	adds	r3, #184	; 0xb8
 800acd8:	781b      	ldrb	r3, [r3, #0]
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d101      	bne.n	800ace2 <PS_LA_SetQ+0x7a>
 800acde:	2353      	movs	r3, #83	; 0x53
 800ace0:	e004      	b.n	800acec <PS_LA_SetQ+0x84>
 800ace2:	2344      	movs	r3, #68	; 0x44
 800ace4:	e002      	b.n	800acec <PS_LA_SetQ+0x84>
 800ace6:	234e      	movs	r3, #78	; 0x4e
 800ace8:	e000      	b.n	800acec <PS_LA_SetQ+0x84>
 800acea:	2341      	movs	r3, #65	; 0x41
 800acec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        edge_s[1] = '\0';
 800acf0:	2300      	movs	r3, #0
 800acf2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
        mode_s[1] = '\0';
 800acf6:	2300      	movs	r3, #0
 800acf8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        int len = sprintf(buff, "\"%d,%s,%d,%s,%s,%d\"", daq.set.mem, freq_s,
 800acfc:	4b1b      	ldr	r3, [pc, #108]	; (800ad6c <PS_LA_SetQ+0x104>)
 800acfe:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800ad02:	337c      	adds	r3, #124	; 0x7c
 800ad04:	881b      	ldrh	r3, [r3, #0]
 800ad06:	461c      	mov	r4, r3
 800ad08:	4b18      	ldr	r3, [pc, #96]	; (800ad6c <PS_LA_SetQ+0x104>)
 800ad0a:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800ad0e:	33bc      	adds	r3, #188	; 0xbc
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	4b16      	ldr	r3, [pc, #88]	; (800ad6c <PS_LA_SetQ+0x104>)
 800ad14:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
 800ad18:	33b4      	adds	r3, #180	; 0xb4
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800ad20:	f107 000c 	add.w	r0, r7, #12
 800ad24:	9303      	str	r3, [sp, #12]
 800ad26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ad2a:	9302      	str	r3, [sp, #8]
 800ad2c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	9200      	str	r2, [sp, #0]
 800ad34:	460b      	mov	r3, r1
 800ad36:	4622      	mov	r2, r4
 800ad38:	490e      	ldr	r1, [pc, #56]	; (800ad74 <PS_LA_SetQ+0x10c>)
 800ad3a:	f006 fcdf 	bl	80116fc <siprintf>
 800ad3e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                          daq.trig.set.ch, edge_s, mode_s, daq.trig.set.pretrigger);

        SCPI_ResultCharacters(context, buff, len);
 800ad42:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ad46:	f107 030c 	add.w	r3, r7, #12
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f003 f8e7 	bl	800df20 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e005      	b.n	800ad62 <PS_LA_SetQ+0xfa>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800ad56:	2101      	movs	r1, #1
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f001 f963 	bl	800c024 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800ad5e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	378c      	adds	r7, #140	; 0x8c
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd90      	pop	{r4, r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	200007ec 	.word	0x200007ec
 800ad70:	08013998 	.word	0x08013998
 800ad74:	080139fc 	.word	0x080139fc

0800ad78 <PS_CNTR_ReadQ>:

/************************* [CNTR Actions] *************************/

scpi_result_t PS_CNTR_ReadQ(scpi_t * context)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b0a8      	sub	sp, #160	; 0xa0
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
    float f = cntr_read(&cntr, &daq);
 800ad80:	495b      	ldr	r1, [pc, #364]	; (800aef0 <PS_CNTR_ReadQ+0x178>)
 800ad82:	485c      	ldr	r0, [pc, #368]	; (800aef4 <PS_CNTR_ReadQ+0x17c>)
 800ad84:	f7fa fc3c 	bl	8005600 <cntr_read>
 800ad88:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c

    if (f > -1)
 800ad8c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ad90:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ad94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9c:	f340 8096 	ble.w	800aecc <PS_CNTR_ReadQ+0x154>
    {
        char f_s[20];
        char T_s[20];

        float T = 1.0 / f;
 800ada0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ada4:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800ada8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adac:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

        if (f < 1000)
 800adb0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800adb4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800aef8 <PS_CNTR_ReadQ+0x180>
 800adb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc0:	d509      	bpl.n	800add6 <PS_CNTR_ReadQ+0x5e>
            sprint_fast(f_s, "%s Hz", f, 3);
 800adc2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800adc6:	2203      	movs	r2, #3
 800adc8:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 800adcc:	494b      	ldr	r1, [pc, #300]	; (800aefc <PS_CNTR_ReadQ+0x184>)
 800adce:	4618      	mov	r0, r3
 800add0:	f000 fe9e 	bl	800bb10 <sprint_fast>
 800add4:	e027      	b.n	800ae26 <PS_CNTR_ReadQ+0xae>
        else if (f < 1000000)
 800add6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800adda:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800af00 <PS_CNTR_ReadQ+0x188>
 800adde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ade2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade6:	d50f      	bpl.n	800ae08 <PS_CNTR_ReadQ+0x90>
            sprint_fast(f_s, "%s kHz", f / 1000.0, 3);
 800ade8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800adec:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800aef8 <PS_CNTR_ReadQ+0x180>
 800adf0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800adf4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800adf8:	2203      	movs	r2, #3
 800adfa:	eeb0 0a66 	vmov.f32	s0, s13
 800adfe:	4941      	ldr	r1, [pc, #260]	; (800af04 <PS_CNTR_ReadQ+0x18c>)
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 fe85 	bl	800bb10 <sprint_fast>
 800ae06:	e00e      	b.n	800ae26 <PS_CNTR_ReadQ+0xae>
        else //if (f < 1000000000)
            sprint_fast(f_s, "%s MHz", f / 1000000.0, 3);
 800ae08:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ae0c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800af00 <PS_CNTR_ReadQ+0x188>
 800ae10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ae14:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ae18:	2203      	movs	r2, #3
 800ae1a:	eeb0 0a66 	vmov.f32	s0, s13
 800ae1e:	493a      	ldr	r1, [pc, #232]	; (800af08 <PS_CNTR_ReadQ+0x190>)
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 fe75 	bl	800bb10 <sprint_fast>

        if (T >= 1)
 800ae26:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800ae2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae36:	db09      	blt.n	800ae4c <PS_CNTR_ReadQ+0xd4>
            sprint_fast(T_s, "%s s", T, 3);
 800ae38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ae3c:	2203      	movs	r2, #3
 800ae3e:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800ae42:	4932      	ldr	r1, [pc, #200]	; (800af0c <PS_CNTR_ReadQ+0x194>)
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fe63 	bl	800bb10 <sprint_fast>
 800ae4a:	e02a      	b.n	800aea2 <PS_CNTR_ReadQ+0x12a>
        else if (T >= 0.001)
 800ae4c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ae50:	f7f5 fb92 	bl	8000578 <__aeabi_f2d>
 800ae54:	a324      	add	r3, pc, #144	; (adr r3, 800aee8 <PS_CNTR_ReadQ+0x170>)
 800ae56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5a:	f7f5 fe6b 	bl	8000b34 <__aeabi_dcmpge>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00f      	beq.n	800ae84 <PS_CNTR_ReadQ+0x10c>
            sprint_fast(T_s, "%s ms", T * 1000.0, 3);
 800ae64:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800ae68:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800aef8 <PS_CNTR_ReadQ+0x180>
 800ae6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ae74:	2203      	movs	r2, #3
 800ae76:	eeb0 0a67 	vmov.f32	s0, s15
 800ae7a:	4925      	ldr	r1, [pc, #148]	; (800af10 <PS_CNTR_ReadQ+0x198>)
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 fe47 	bl	800bb10 <sprint_fast>
 800ae82:	e00e      	b.n	800aea2 <PS_CNTR_ReadQ+0x12a>
        else //if (T >= 0.000001)
            sprint_fast(T_s, "%s us", T * 1000000.0, 3);
 800ae84:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800ae88:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800af00 <PS_CNTR_ReadQ+0x188>
 800ae8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ae94:	2203      	movs	r2, #3
 800ae96:	eeb0 0a67 	vmov.f32	s0, s15
 800ae9a:	491e      	ldr	r1, [pc, #120]	; (800af14 <PS_CNTR_ReadQ+0x19c>)
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fe37 	bl	800bb10 <sprint_fast>

        char buff[100];
        int len = sprintf(buff, "%s,%s", f_s, T_s);
 800aea2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800aea6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800aeaa:	f107 0008 	add.w	r0, r7, #8
 800aeae:	491a      	ldr	r1, [pc, #104]	; (800af18 <PS_CNTR_ReadQ+0x1a0>)
 800aeb0:	f006 fc24 	bl	80116fc <siprintf>
 800aeb4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

        SCPI_ResultCharacters(context, buff, len);
 800aeb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aebc:	f107 0308 	add.w	r3, r7, #8
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f003 f82c 	bl	800df20 <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e006      	b.n	800aeda <PS_CNTR_ReadQ+0x162>
    }
    else // if (f == -1)
    {
        SCPI_ErrorPush(context, SCPI_ERROR_TIME_OUT);
 800aecc:	f46f 71b6 	mvn.w	r1, #364	; 0x16c
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f001 f8a7 	bl	800c024 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800aed6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	37a0      	adds	r7, #160	; 0xa0
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	f3af 8000 	nop.w
 800aee8:	d2f1a9fc 	.word	0xd2f1a9fc
 800aeec:	3f50624d 	.word	0x3f50624d
 800aef0:	200007ec 	.word	0x200007ec
 800aef4:	20000604 	.word	0x20000604
 800aef8:	447a0000 	.word	0x447a0000
 800aefc:	08013a10 	.word	0x08013a10
 800af00:	49742400 	.word	0x49742400
 800af04:	08013a18 	.word	0x08013a18
 800af08:	08013a20 	.word	0x08013a20
 800af0c:	08013a28 	.word	0x08013a28
 800af10:	08013a30 	.word	0x08013a30
 800af14:	08013a38 	.word	0x08013a38
 800af18:	08013a40 	.word	0x08013a40

0800af1c <PS_SGEN_Set>:

/************************* [SGEN Actions] *************************/
scpi_result_t PS_SGEN_Set(scpi_t * context)
{
 800af1c:	b590      	push	{r4, r7, lr}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
#ifdef PS_DAC
    double p1;
    if (!SCPI_ParamDouble(context, &p1, TRUE))
 800af24:	f107 0308 	add.w	r3, r7, #8
 800af28:	2201      	movs	r2, #1
 800af2a:	4619      	mov	r1, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f003 fc8f 	bl	800e850 <SCPI_ParamDouble>
 800af32:	4603      	mov	r3, r0
 800af34:	f083 0301 	eor.w	r3, r3, #1
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d007      	beq.n	800af4e <PS_SGEN_Set+0x32>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800af3e:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f001 f86e 	bl	800c024 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800af48:	f04f 33ff 	mov.w	r3, #4294967295
 800af4c:	e017      	b.n	800af7e <PS_SGEN_Set+0x62>
    }

    sgen_enable(&sgen, p1 == 1);
 800af4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af52:	2301      	movs	r3, #1
 800af54:	461c      	mov	r4, r3
 800af56:	f04f 0200 	mov.w	r2, #0
 800af5a:	4b0b      	ldr	r3, [pc, #44]	; (800af88 <PS_SGEN_Set+0x6c>)
 800af5c:	f7f5 fdcc 	bl	8000af8 <__aeabi_dcmpeq>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <PS_SGEN_Set+0x4e>
 800af66:	2300      	movs	r3, #0
 800af68:	461c      	mov	r4, r3
 800af6a:	b2e3      	uxtb	r3, r4
 800af6c:	4619      	mov	r1, r3
 800af6e:	4807      	ldr	r0, [pc, #28]	; (800af8c <PS_SGEN_Set+0x70>)
 800af70:	f000 fb7a 	bl	800b668 <sgen_enable>

    SCPI_ResultText(context, SCPI_OK);
 800af74:	4906      	ldr	r1, [pc, #24]	; (800af90 <PS_SGEN_Set+0x74>)
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f003 f86c 	bl	800e054 <SCPI_ResultText>
    return SCPI_RES_OK;
 800af7c:	2301      	movs	r3, #1
#else
    SCPI_ErrorPush(context, SCPI_ERROR_DAC_NA);
    return SCPI_RES_ERR;
#endif
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	bd90      	pop	{r4, r7, pc}
 800af86:	bf00      	nop
 800af88:	3ff00000 	.word	0x3ff00000
 800af8c:	2000ba4c 	.word	0x2000ba4c
 800af90:	08013950 	.word	0x08013950

0800af94 <PS_PWM_SetQ>:

/************************* [PWM Actions] *************************/

scpi_result_t PS_PWM_SetQ(scpi_t * context)
{
 800af94:	b590      	push	{r4, r7, lr}
 800af96:	b0a5      	sub	sp, #148	; 0x94
 800af98:	af04      	add	r7, sp, #16
 800af9a:	6078      	str	r0, [r7, #4]
    char buff[60];
    char buff_freq[10];
    char buff_duty1[10];
    char buff_duty2[10];

    float freq = pwm.ch1.freq;
 800af9c:	4b28      	ldr	r3, [pc, #160]	; (800b040 <PS_PWM_SetQ+0xac>)
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	67fb      	str	r3, [r7, #124]	; 0x7c
    float duty1 = pwm.ch1.duty;
 800afa2:	4b27      	ldr	r3, [pc, #156]	; (800b040 <PS_PWM_SetQ+0xac>)
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	67bb      	str	r3, [r7, #120]	; 0x78
    float duty2 = pwm.ch2.duty;
 800afa8:	4b25      	ldr	r3, [pc, #148]	; (800b040 <PS_PWM_SetQ+0xac>)
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	677b      	str	r3, [r7, #116]	; 0x74
    int offset2 = pwm.ch2.offset;
 800afae:	4b24      	ldr	r3, [pc, #144]	; (800b040 <PS_PWM_SetQ+0xac>)
 800afb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb2:	673b      	str	r3, [r7, #112]	; 0x70
    uint8_t en1 = pwm.ch1.enabled;
 800afb4:	4b22      	ldr	r3, [pc, #136]	; (800b040 <PS_PWM_SetQ+0xac>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t en2 = pwm.ch2.enabled;
 800afbc:	4b20      	ldr	r3, [pc, #128]	; (800b040 <PS_PWM_SetQ+0xac>)
 800afbe:	7e1b      	ldrb	r3, [r3, #24]
 800afc0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

    sprint_fast(buff_freq, "%s", freq, 4);
 800afc4:	f107 0320 	add.w	r3, r7, #32
 800afc8:	2204      	movs	r2, #4
 800afca:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 800afce:	491d      	ldr	r1, [pc, #116]	; (800b044 <PS_PWM_SetQ+0xb0>)
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 fd9d 	bl	800bb10 <sprint_fast>
    sprint_fast(buff_duty1, "%s", duty1, 4);
 800afd6:	f107 0314 	add.w	r3, r7, #20
 800afda:	2204      	movs	r2, #4
 800afdc:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 800afe0:	4918      	ldr	r1, [pc, #96]	; (800b044 <PS_PWM_SetQ+0xb0>)
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 fd94 	bl	800bb10 <sprint_fast>
    sprint_fast(buff_duty2, "%s", duty2, 4);
 800afe8:	f107 0308 	add.w	r3, r7, #8
 800afec:	2204      	movs	r2, #4
 800afee:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800aff2:	4914      	ldr	r1, [pc, #80]	; (800b044 <PS_PWM_SetQ+0xb0>)
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 fd8b 	bl	800bb10 <sprint_fast>
    int len = sprintf(buff, "%s,%s,%s,%d,%d,%d", buff_freq, buff_duty1, buff_duty2, offset2, en1, en2);
 800affa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800affe:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800b002:	f107 0414 	add.w	r4, r7, #20
 800b006:	f107 0120 	add.w	r1, r7, #32
 800b00a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800b00e:	9203      	str	r2, [sp, #12]
 800b010:	9302      	str	r3, [sp, #8]
 800b012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	f107 0308 	add.w	r3, r7, #8
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	4623      	mov	r3, r4
 800b01e:	460a      	mov	r2, r1
 800b020:	4909      	ldr	r1, [pc, #36]	; (800b048 <PS_PWM_SetQ+0xb4>)
 800b022:	f006 fb6b 	bl	80116fc <siprintf>
 800b026:	66b8      	str	r0, [r7, #104]	; 0x68

    SCPI_ResultCharacters(context, buff, len);
 800b028:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b02a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f002 ff75 	bl	800df20 <SCPI_ResultCharacters>

    return SCPI_RES_OK;
 800b036:	2301      	movs	r3, #1
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3784      	adds	r7, #132	; 0x84
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd90      	pop	{r4, r7, pc}
 800b040:	2000c304 	.word	0x2000c304
 800b044:	08013998 	.word	0x08013998
 800b048:	08013a48 	.word	0x08013a48

0800b04c <PS_PWM_Set>:

scpi_result_t PS_PWM_Set(scpi_t * context)
{
 800b04c:	b5b0      	push	{r4, r5, r7, lr}
 800b04e:	b08e      	sub	sp, #56	; 0x38
 800b050:	af04      	add	r7, sp, #16
 800b052:	6078      	str	r0, [r7, #4]
    uint32_t param1, param2, param3, param4, param5, param6;

    if (!SCPI_ParamUInt32(context, &param1, TRUE) ||
 800b054:	f107 0320 	add.w	r3, r7, #32
 800b058:	2201      	movs	r2, #1
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f003 fca7 	bl	800e9b0 <SCPI_ParamUInt32>
 800b062:	4603      	mov	r3, r0
 800b064:	f083 0301 	eor.w	r3, r3, #1
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d140      	bne.n	800b0f0 <PS_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
 800b06e:	f107 031c 	add.w	r3, r7, #28
 800b072:	2201      	movs	r2, #1
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f003 fc9a 	bl	800e9b0 <SCPI_ParamUInt32>
 800b07c:	4603      	mov	r3, r0
 800b07e:	f083 0301 	eor.w	r3, r3, #1
 800b082:	b2db      	uxtb	r3, r3
    if (!SCPI_ParamUInt32(context, &param1, TRUE) ||
 800b084:	2b00      	cmp	r3, #0
 800b086:	d133      	bne.n	800b0f0 <PS_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param3, TRUE) ||
 800b088:	f107 0318 	add.w	r3, r7, #24
 800b08c:	2201      	movs	r2, #1
 800b08e:	4619      	mov	r1, r3
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f003 fc8d 	bl	800e9b0 <SCPI_ParamUInt32>
 800b096:	4603      	mov	r3, r0
 800b098:	f083 0301 	eor.w	r3, r3, #1
 800b09c:	b2db      	uxtb	r3, r3
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d126      	bne.n	800b0f0 <PS_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param4, TRUE) ||
 800b0a2:	f107 0314 	add.w	r3, r7, #20
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f003 fc80 	bl	800e9b0 <SCPI_ParamUInt32>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	f083 0301 	eor.w	r3, r3, #1
 800b0b6:	b2db      	uxtb	r3, r3
        !SCPI_ParamUInt32(context, &param3, TRUE) ||
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d119      	bne.n	800b0f0 <PS_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param5, TRUE) ||
 800b0bc:	f107 0310 	add.w	r3, r7, #16
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f003 fc73 	bl	800e9b0 <SCPI_ParamUInt32>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	f083 0301 	eor.w	r3, r3, #1
 800b0d0:	b2db      	uxtb	r3, r3
        !SCPI_ParamUInt32(context, &param4, TRUE) ||
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10c      	bne.n	800b0f0 <PS_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param6, TRUE))
 800b0d6:	f107 030c 	add.w	r3, r7, #12
 800b0da:	2201      	movs	r2, #1
 800b0dc:	4619      	mov	r1, r3
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f003 fc66 	bl	800e9b0 <SCPI_ParamUInt32>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	f083 0301 	eor.w	r3, r3, #1
 800b0ea:	b2db      	uxtb	r3, r3
        !SCPI_ParamUInt32(context, &param5, TRUE) ||
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d007      	beq.n	800b100 <PS_PWM_Set+0xb4>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800b0f0:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 ff95 	bl	800c024 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b0fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b0fe:	e022      	b.n	800b146 <PS_PWM_Set+0xfa>
    }

    int ret = pwm_set(&pwm, param1, param2, param3, param4, param5, param6);
 800b100:	6a3b      	ldr	r3, [r7, #32]
 800b102:	4618      	mov	r0, r3
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	461c      	mov	r4, r3
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	461d      	mov	r5, r3
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	68f9      	ldr	r1, [r7, #12]
 800b112:	9102      	str	r1, [sp, #8]
 800b114:	9201      	str	r2, [sp, #4]
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	462b      	mov	r3, r5
 800b11a:	4622      	mov	r2, r4
 800b11c:	4601      	mov	r1, r0
 800b11e:	480c      	ldr	r0, [pc, #48]	; (800b150 <PS_PWM_Set+0x104>)
 800b120:	f000 f8a4 	bl	800b26c <pwm_set>
 800b124:	6278      	str	r0, [r7, #36]	; 0x24

    if (ret != 0)
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d007      	beq.n	800b13c <PS_PWM_Set+0xf0>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800b12c:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 ff77 	bl	800c024 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b136:	f04f 33ff 	mov.w	r3, #4294967295
 800b13a:	e004      	b.n	800b146 <PS_PWM_Set+0xfa>
    }

    SCPI_ResultText(context, SCPI_OK);
 800b13c:	4905      	ldr	r1, [pc, #20]	; (800b154 <PS_PWM_Set+0x108>)
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f002 ff88 	bl	800e054 <SCPI_ResultText>
    return SCPI_RES_OK;
 800b144:	2301      	movs	r3, #1
}
 800b146:	4618      	mov	r0, r3
 800b148:	3728      	adds	r7, #40	; 0x28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bdb0      	pop	{r4, r5, r7, pc}
 800b14e:	bf00      	nop
 800b150:	2000c304 	.word	0x2000c304
 800b154:	08013950 	.word	0x08013950

0800b158 <LL_TIM_EnableCounter>:
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f043 0201 	orr.w	r2, r3, #1
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	601a      	str	r2, [r3, #0]
}
 800b16c:	bf00      	nop
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <LL_TIM_DisableCounter>:
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f023 0201 	bic.w	r2, r3, #1
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	601a      	str	r2, [r3, #0]
}
 800b18c:	bf00      	nop
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <LL_TIM_SetCounter>:
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <LL_TIM_SetPrescaler>:
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <LL_TIM_SetAutoReload>:
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <LL_TIM_CC_EnableChannel>:
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a1a      	ldr	r2, [r3, #32]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	431a      	orrs	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	621a      	str	r2, [r3, #32]
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <LL_TIM_OC_SetCompareCH1>:
{
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	683a      	ldr	r2, [r7, #0]
 800b21c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b21e:	bf00      	nop
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
	...

0800b22c <pwm_init>:
#include "pwm.h"
#include "main.h"


void pwm_init(pwm_data_t* self)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
    self->ch1.enabled = 0;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	701a      	strb	r2, [r3, #0]
    self->ch2.enabled = 0;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	761a      	strb	r2, [r3, #24]
    self->ch1.freq = 1000;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a08      	ldr	r2, [pc, #32]	; (800b264 <pwm_init+0x38>)
 800b244:	605a      	str	r2, [r3, #4]
    self->ch2.freq = 1000;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a06      	ldr	r2, [pc, #24]	; (800b264 <pwm_init+0x38>)
 800b24a:	61da      	str	r2, [r3, #28]
    self->ch1.duty = 50;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a06      	ldr	r2, [pc, #24]	; (800b268 <pwm_init+0x3c>)
 800b250:	609a      	str	r2, [r3, #8]
    self->ch2.duty = 50;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4a04      	ldr	r2, [pc, #16]	; (800b268 <pwm_init+0x3c>)
 800b256:	621a      	str	r2, [r3, #32]
}
 800b258:	bf00      	nop
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	447a0000 	.word	0x447a0000
 800b268:	42480000 	.word	0x42480000

0800b26c <pwm_set>:

int pwm_set(pwm_data_t* self, int freq, int duty1, int duty2, int offset2, int enable1, int enable2)
{
 800b26c:	b5b0      	push	{r4, r5, r7, lr}
 800b26e:	b08c      	sub	sp, #48	; 0x30
 800b270:	af02      	add	r7, sp, #8
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
 800b278:	603b      	str	r3, [r7, #0]
    if (freq <= 0 || freq > PS_PWM_MAX_F || duty1 < 0 || duty1 > 100 ||
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	dd15      	ble.n	800b2ac <pwm_set+0x40>
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	4a8c      	ldr	r2, [pc, #560]	; (800b4b4 <pwm_set+0x248>)
 800b284:	4293      	cmp	r3, r2
 800b286:	dc11      	bgt.n	800b2ac <pwm_set+0x40>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	db0e      	blt.n	800b2ac <pwm_set+0x40>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b64      	cmp	r3, #100	; 0x64
 800b292:	dc0b      	bgt.n	800b2ac <pwm_set+0x40>
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	db08      	blt.n	800b2ac <pwm_set+0x40>
        duty2 < 0 || duty2 > 100 || offset2 < 0 || offset2 > 100)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b64      	cmp	r3, #100	; 0x64
 800b29e:	dc05      	bgt.n	800b2ac <pwm_set+0x40>
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	db02      	blt.n	800b2ac <pwm_set+0x40>
 800b2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a8:	2b64      	cmp	r3, #100	; 0x64
 800b2aa:	dd02      	ble.n	800b2b2 <pwm_set+0x46>
    {
        return -1;
 800b2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b2b0:	e0fb      	b.n	800b4aa <pwm_set+0x23e>
    }

    LL_TIM_DisableCounter(PS_TIM_PWM1);
 800b2b2:	4881      	ldr	r0, [pc, #516]	; (800b4b8 <pwm_set+0x24c>)
 800b2b4:	f7ff ff60 	bl	800b178 <LL_TIM_DisableCounter>
    LL_TIM_DisableCounter(PS_TIM_PWM2);
 800b2b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b2bc:	f7ff ff5c 	bl	800b178 <LL_TIM_DisableCounter>

    if (!enable1)
 800b2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d101      	bne.n	800b2ca <pwm_set+0x5e>
        return 0;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e0ef      	b.n	800b4aa <pwm_set+0x23e>

    int prescaler = 1;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	617b      	str	r3, [r7, #20]
    int reload = 0;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	613b      	str	r3, [r7, #16]

    self->ch1.enabled = enable1;
 800b2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d4:	b2da      	uxtb	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	701a      	strb	r2, [r3, #0]
    self->ch1.freq = get_freq(&prescaler, &reload, PS_TIM_PWM1_MAX, PS_TIM_PWM1_FREQ, freq);
 800b2da:	f107 0110 	add.w	r1, r7, #16
 800b2de:	f107 0014 	add.w	r0, r7, #20
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	4b75      	ldr	r3, [pc, #468]	; (800b4bc <pwm_set+0x250>)
 800b2e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2ec:	f000 fba4 	bl	800ba38 <get_freq>
 800b2f0:	eef0 7a40 	vmov.f32	s15, s0
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	edc3 7a01 	vstr	s15, [r3, #4]
    self->ch1.prescaler = prescaler;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	60da      	str	r2, [r3, #12]
    self->ch1.reload = reload;
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	461a      	mov	r2, r3
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	611a      	str	r2, [r3, #16]
    self->ch1.offset = 0;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	615a      	str	r2, [r3, #20]

    self->ch2.enabled = enable2;
 800b310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b312:	b2da      	uxtb	r2, r3
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	761a      	strb	r2, [r3, #24]
    self->ch2.freq = self->ch1.freq;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	61da      	str	r2, [r3, #28]
    self->ch2.prescaler = prescaler;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	461a      	mov	r2, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	625a      	str	r2, [r3, #36]	; 0x24
    self->ch2.reload = reload;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	461a      	mov	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	629a      	str	r2, [r3, #40]	; 0x28
    self->ch2.offset = offset2;
 800b330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	62da      	str	r2, [r3, #44]	; 0x2c

    LL_TIM_SetAutoReload(PS_TIM_PWM1, reload);
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	4619      	mov	r1, r3
 800b33a:	485f      	ldr	r0, [pc, #380]	; (800b4b8 <pwm_set+0x24c>)
 800b33c:	f7ff ff48 	bl	800b1d0 <LL_TIM_SetAutoReload>
    LL_TIM_SetAutoReload(PS_TIM_PWM2, reload);
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	4619      	mov	r1, r3
 800b344:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b348:	f7ff ff42 	bl	800b1d0 <LL_TIM_SetAutoReload>
    LL_TIM_SetPrescaler(PS_TIM_PWM1, prescaler);
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	4619      	mov	r1, r3
 800b350:	4859      	ldr	r0, [pc, #356]	; (800b4b8 <pwm_set+0x24c>)
 800b352:	f7ff ff2f 	bl	800b1b4 <LL_TIM_SetPrescaler>
    LL_TIM_SetPrescaler(PS_TIM_PWM2, prescaler);
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	4619      	mov	r1, r3
 800b35a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b35e:	f7ff ff29 	bl	800b1b4 <LL_TIM_SetPrescaler>

    int compare1 = (duty1 / (float)100) * reload;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	ee07 3a90 	vmov	s15, r3
 800b368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b36c:	eddf 6a54 	vldr	s13, [pc, #336]	; 800b4c0 <pwm_set+0x254>
 800b370:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	ee07 3a90 	vmov	s15, r3
 800b37a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b386:	ee17 3a90 	vmov	r3, s15
 800b38a:	627b      	str	r3, [r7, #36]	; 0x24
    float real_duty1 = ((float)compare1 / (float)reload) * (float)100;
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	ee07 3a90 	vmov	s15, r3
 800b39c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3a4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b4c0 <pwm_set+0x254>
 800b3a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3ac:	edc7 7a08 	vstr	s15, [r7, #32]

    int compare2 = (duty2 / (float)100) * reload;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	ee07 3a90 	vmov	s15, r3
 800b3b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3ba:	eddf 6a41 	vldr	s13, [pc, #260]	; 800b4c0 <pwm_set+0x254>
 800b3be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	ee07 3a90 	vmov	s15, r3
 800b3c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3d4:	ee17 3a90 	vmov	r3, s15
 800b3d8:	61fb      	str	r3, [r7, #28]
    float real_duty2 = ((float)compare2 / (float)reload) * (float)100;
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	ee07 3a90 	vmov	s15, r3
 800b3e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	ee07 3a90 	vmov	s15, r3
 800b3ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3f2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800b4c0 <pwm_set+0x254>
 800b3f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3fa:	edc7 7a06 	vstr	s15, [r7, #24]

    self->ch1.duty = real_duty1;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6a3a      	ldr	r2, [r7, #32]
 800b402:	609a      	str	r2, [r3, #8]
    self->ch2.duty = real_duty2;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	69ba      	ldr	r2, [r7, #24]
 800b408:	621a      	str	r2, [r3, #32]

    LL_TIM_OC_SetCompareCH1(PS_TIM_PWM1, compare1);
 800b40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40c:	4619      	mov	r1, r3
 800b40e:	482a      	ldr	r0, [pc, #168]	; (800b4b8 <pwm_set+0x24c>)
 800b410:	f7ff fefd 	bl	800b20e <LL_TIM_OC_SetCompareCH1>
    LL_TIM_OC_SetCompareCH1(PS_TIM_PWM2, compare2);
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	4619      	mov	r1, r3
 800b418:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b41c:	f7ff fef7 	bl	800b20e <LL_TIM_OC_SetCompareCH1>
    
    LL_TIM_SetCounter(PS_TIM_PWM1, 0);
 800b420:	2100      	movs	r1, #0
 800b422:	4825      	ldr	r0, [pc, #148]	; (800b4b8 <pwm_set+0x24c>)
 800b424:	f7ff feb8 	bl	800b198 <LL_TIM_SetCounter>
    LL_TIM_SetCounter(PS_TIM_PWM2, 0);
 800b428:	2100      	movs	r1, #0
 800b42a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b42e:	f7ff feb3 	bl	800b198 <LL_TIM_SetCounter>

    // http://www.micromouseonline.com/2016/02/05/clock-pulses-with-variable-phase-stm32/
    if (offset2 > 0)
 800b432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b434:	2b00      	cmp	r3, #0
 800b436:	dd2c      	ble.n	800b492 <pwm_set+0x226>
        LL_TIM_SetCounter(PS_TIM_PWM2, (int)((float)offset2 / 100.0 * (float)reload));
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	ee07 3a90 	vmov	s15, r3
 800b43e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b442:	ee17 0a90 	vmov	r0, s15
 800b446:	f7f5 f897 	bl	8000578 <__aeabi_f2d>
 800b44a:	f04f 0200 	mov.w	r2, #0
 800b44e:	4b1d      	ldr	r3, [pc, #116]	; (800b4c4 <pwm_set+0x258>)
 800b450:	f7f5 fa14 	bl	800087c <__aeabi_ddiv>
 800b454:	4603      	mov	r3, r0
 800b456:	460c      	mov	r4, r1
 800b458:	4625      	mov	r5, r4
 800b45a:	461c      	mov	r4, r3
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	ee07 3a90 	vmov	s15, r3
 800b462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b466:	ee17 0a90 	vmov	r0, s15
 800b46a:	f7f5 f885 	bl	8000578 <__aeabi_f2d>
 800b46e:	4602      	mov	r2, r0
 800b470:	460b      	mov	r3, r1
 800b472:	4620      	mov	r0, r4
 800b474:	4629      	mov	r1, r5
 800b476:	f7f5 f8d7 	bl	8000628 <__aeabi_dmul>
 800b47a:	4603      	mov	r3, r0
 800b47c:	460c      	mov	r4, r1
 800b47e:	4618      	mov	r0, r3
 800b480:	4621      	mov	r1, r4
 800b482:	f7f5 fb81 	bl	8000b88 <__aeabi_d2iz>
 800b486:	4603      	mov	r3, r0
 800b488:	4619      	mov	r1, r3
 800b48a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b48e:	f7ff fe83 	bl	800b198 <LL_TIM_SetCounter>

    if (enable1)
 800b492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b494:	2b00      	cmp	r3, #0
 800b496:	d004      	beq.n	800b4a2 <pwm_set+0x236>
        LL_TIM_CC_EnableChannel(PS_TIM_PWM1, PS_TIM_PWM1_CH);
 800b498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b49c:	4806      	ldr	r0, [pc, #24]	; (800b4b8 <pwm_set+0x24c>)
 800b49e:	f7ff fea5 	bl	800b1ec <LL_TIM_CC_EnableChannel>

    //if (enable2)
    //    LL_TIM_CC_EnableChannel(PS_TIM_PWM2, PS_TIM_PWM2_CH);

    LL_TIM_EnableCounter(PS_TIM_PWM1);
 800b4a2:	4805      	ldr	r0, [pc, #20]	; (800b4b8 <pwm_set+0x24c>)
 800b4a4:	f7ff fe58 	bl	800b158 <LL_TIM_EnableCounter>

    return 0;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3728      	adds	r7, #40	; 0x28
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bdb0      	pop	{r4, r5, r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	000f4240 	.word	0x000f4240
 800b4b8:	40000800 	.word	0x40000800
 800b4bc:	044aa200 	.word	0x044aa200
 800b4c0:	42c80000 	.word	0x42c80000
 800b4c4:	40590000 	.word	0x40590000

0800b4c8 <LL_DAC_EnableDMAReq>:
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	f003 0310 	and.w	r3, r3, #16
 800b4dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b4e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b4e4:	431a      	orrs	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	601a      	str	r2, [r3, #0]
}
 800b4ea:	bf00      	nop
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <LL_DAC_DisableDMAReq>:
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b083      	sub	sp, #12
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(DACx->CR,
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	f003 0310 	and.w	r3, r3, #16
 800b50a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b50e:	fa01 f303 	lsl.w	r3, r1, r3
 800b512:	43db      	mvns	r3, r3
 800b514:	401a      	ands	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	601a      	str	r2, [r3, #0]
}
 800b51a:	bf00      	nop
 800b51c:	370c      	adds	r7, #12
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <LL_DAC_DMA_GetRegAddr>:
{
 800b526:	b480      	push	{r7}
 800b528:	b087      	sub	sp, #28
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	60f8      	str	r0, [r7, #12]
 800b52e:	60b9      	str	r1, [r7, #8]
 800b530:	607a      	str	r2, [r7, #4]
  return ((uint32_t)(__DAC_PTR_REG_OFFSET((DACx)->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, Register))));
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	3308      	adds	r3, #8
 800b536:	4619      	mov	r1, r3
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4013      	ands	r3, r2
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	fa92 f2a2 	rbit	r2, r2
 800b548:	613a      	str	r2, [r7, #16]
  return result;
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	fab2 f282 	clz	r2, r2
 800b550:	b2d2      	uxtb	r2, r2
 800b552:	40d3      	lsrs	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	440b      	add	r3, r1
}
 800b558:	4618      	mov	r0, r3
 800b55a:	371c      	adds	r7, #28
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <LL_DAC_EnableTrigger>:
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	f003 0310 	and.w	r3, r3, #16
 800b578:	2104      	movs	r1, #4
 800b57a:	fa01 f303 	lsl.w	r3, r1, r3
 800b57e:	431a      	orrs	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	601a      	str	r2, [r3, #0]
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <LL_DAC_DisableTrigger>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_DisableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(DACx->CR,
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	f003 0310 	and.w	r3, r3, #16
 800b5a4:	2104      	movs	r1, #4
 800b5a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5aa:	43db      	mvns	r3, r3
 800b5ac:	401a      	ands	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	601a      	str	r2, [r3, #0]
            DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 800b5b2:	bf00      	nop
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <LL_TIM_EnableCounter>:
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f043 0201 	orr.w	r2, r3, #1
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	601a      	str	r2, [r3, #0]
}
 800b5d2:	bf00      	nop
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <LL_TIM_DisableCounter>:
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b083      	sub	sp, #12
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f023 0201 	bic.w	r2, r3, #1
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	601a      	str	r2, [r3, #0]
}
 800b5f2:	bf00      	nop
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
	...

0800b600 <sgen_init>:


#ifdef PS_DAC

void sgen_init(sgen_data_t* self)
{
 800b600:	b590      	push	{r4, r7, lr}
 800b602:	b087      	sub	sp, #28
 800b604:	af04      	add	r7, sp, #16
 800b606:	6078      	str	r0, [r7, #4]
    self->enabled = 0;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	701a      	strb	r2, [r3, #0]
    memset(self->data, 0xFF, PS_DAC_BUFF_LEN * sizeof(uint16_t));
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	3302      	adds	r3, #2
 800b612:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b616:	21ff      	movs	r1, #255	; 0xff
 800b618:	4618      	mov	r0, r3
 800b61a:	f006 f867 	bl	80116ec <memset>
    dma_set((uint32_t)&self->data, PS_DMA_SGEN, PS_DMA_CH_SGEN,
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3302      	adds	r3, #2
 800b622:	461c      	mov	r4, r3
 800b624:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 800b628:	490c      	ldr	r1, [pc, #48]	; (800b65c <sgen_init+0x5c>)
 800b62a:	480d      	ldr	r0, [pc, #52]	; (800b660 <sgen_init+0x60>)
 800b62c:	f7ff ff7b 	bl	800b526 <LL_DAC_DMA_GetRegAddr>
 800b630:	4602      	mov	r2, r0
 800b632:	2310      	movs	r3, #16
 800b634:	9303      	str	r3, [sp, #12]
 800b636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b63a:	9302      	str	r3, [sp, #8]
 800b63c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b640:	9301      	str	r3, [sp, #4]
 800b642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	4613      	mov	r3, r2
 800b64a:	2203      	movs	r2, #3
 800b64c:	4905      	ldr	r1, [pc, #20]	; (800b664 <sgen_init+0x64>)
 800b64e:	4620      	mov	r0, r4
 800b650:	f7fe f838 	bl	80096c4 <dma_set>
            LL_DAC_DMA_GetRegAddr(PS_DAC, PS_DAC_CH, LL_DAC_DMA_REG_DATA_12BITS_RIGHT_ALIGNED), PS_DAC_BUFF_LEN, // TODO LEN
            LL_DMA_PDATAALIGN_HALFWORD, LL_DMA_MDATAALIGN_HALFWORD, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd90      	pop	{r4, r7, pc}
 800b65c:	02100001 	.word	0x02100001
 800b660:	40007400 	.word	0x40007400
 800b664:	40020000 	.word	0x40020000

0800b668 <sgen_enable>:

void sgen_enable(sgen_data_t* self, uint8_t enable)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	70fb      	strb	r3, [r7, #3]
    if (enable)
 800b674:	78fb      	ldrb	r3, [r7, #3]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00e      	beq.n	800b698 <sgen_enable+0x30>
    {
        sgen_init(self);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff ffc0 	bl	800b600 <sgen_init>

        LL_DAC_EnableDMAReq(PS_DAC, PS_DAC_CH);
 800b680:	490e      	ldr	r1, [pc, #56]	; (800b6bc <sgen_enable+0x54>)
 800b682:	480f      	ldr	r0, [pc, #60]	; (800b6c0 <sgen_enable+0x58>)
 800b684:	f7ff ff20 	bl	800b4c8 <LL_DAC_EnableDMAReq>
        LL_DAC_EnableTrigger(PS_DAC, PS_DAC_CH);
 800b688:	490c      	ldr	r1, [pc, #48]	; (800b6bc <sgen_enable+0x54>)
 800b68a:	480d      	ldr	r0, [pc, #52]	; (800b6c0 <sgen_enable+0x58>)
 800b68c:	f7ff ff6a 	bl	800b564 <LL_DAC_EnableTrigger>
        LL_TIM_EnableCounter(PS_TIM_SGEN);
 800b690:	480c      	ldr	r0, [pc, #48]	; (800b6c4 <sgen_enable+0x5c>)
 800b692:	f7ff ff94 	bl	800b5be <LL_TIM_EnableCounter>
 800b696:	e00a      	b.n	800b6ae <sgen_enable+0x46>
    }
    else
    {
        LL_TIM_DisableCounter(PS_TIM_SGEN);
 800b698:	480a      	ldr	r0, [pc, #40]	; (800b6c4 <sgen_enable+0x5c>)
 800b69a:	f7ff ffa0 	bl	800b5de <LL_TIM_DisableCounter>
        LL_DAC_DisableDMAReq(PS_DAC, PS_DAC_CH);
 800b69e:	4907      	ldr	r1, [pc, #28]	; (800b6bc <sgen_enable+0x54>)
 800b6a0:	4807      	ldr	r0, [pc, #28]	; (800b6c0 <sgen_enable+0x58>)
 800b6a2:	f7ff ff28 	bl	800b4f6 <LL_DAC_DisableDMAReq>
        LL_DAC_DisableTrigger(PS_DAC, PS_DAC_CH);
 800b6a6:	4905      	ldr	r1, [pc, #20]	; (800b6bc <sgen_enable+0x54>)
 800b6a8:	4805      	ldr	r0, [pc, #20]	; (800b6c0 <sgen_enable+0x58>)
 800b6aa:	f7ff ff71 	bl	800b590 <LL_DAC_DisableTrigger>
    }
    self->enabled = enable;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	78fa      	ldrb	r2, [r7, #3]
 800b6b2:	701a      	strb	r2, [r3, #0]
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	02100001 	.word	0x02100001
 800b6c0:	40007400 	.word	0x40007400
 800b6c4:	40001000 	.word	0x40001000

0800b6c8 <assert2>:

#include "utility.h"
#include "cfg.h"

void assert2(const char *file, uint32_t line)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
    while(1);
 800b6d2:	e7fe      	b.n	800b6d2 <assert2+0xa>

0800b6d4 <get_avg_from_circ>:
    //__asm("bkpt 3");
}

void get_avg_from_circ(int last_idx, int ch_num, int avg_num, void* buff, int daq_bits, float* v1, float* v2, float* v3, float* v4, float* v5)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b088      	sub	sp, #32
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
 800b6e0:	603b      	str	r3, [r7, #0]
    int total = ch_num * avg_num;
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	fb02 f303 	mul.w	r3, r2, r3
 800b6ea:	613b      	str	r3, [r7, #16]
    ASSERT(v1 != NULL && total > 0 && buff != NULL);
 800b6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d005      	beq.n	800b6fe <get_avg_from_circ+0x2a>
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dd02      	ble.n	800b6fe <get_avg_from_circ+0x2a>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d103      	bne.n	800b706 <get_avg_from_circ+0x32>
 800b6fe:	2117      	movs	r1, #23
 800b700:	4876      	ldr	r0, [pc, #472]	; (800b8dc <get_avg_from_circ+0x208>)
 800b702:	f7ff ffe1 	bl	800b6c8 <assert2>

    for (int i = last_idx, j = 0; j < total; j++, i++)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	61fb      	str	r3, [r7, #28]
 800b70a:	2300      	movs	r3, #0
 800b70c:	61bb      	str	r3, [r7, #24]
 800b70e:	e08f      	b.n	800b830 <get_avg_from_circ+0x15c>
    {
        if (i >= total)
 800b710:	69fa      	ldr	r2, [r7, #28]
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	429a      	cmp	r2, r3
 800b716:	db01      	blt.n	800b71c <get_avg_from_circ+0x48>
            i = 0;
 800b718:	2300      	movs	r3, #0
 800b71a:	61fb      	str	r3, [r7, #28]

        float val;
        if (daq_bits == 12)
 800b71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71e:	2b0c      	cmp	r3, #12
 800b720:	d10c      	bne.n	800b73c <get_avg_from_circ+0x68>
            val = (float)(*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	461a      	mov	r2, r3
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	4413      	add	r3, r2
 800b72c:	881b      	ldrh	r3, [r3, #0]
 800b72e:	ee07 3a90 	vmov	s15, r3
 800b732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b736:	edc7 7a05 	vstr	s15, [r7, #20]
 800b73a:	e009      	b.n	800b750 <get_avg_from_circ+0x7c>
        else
            val = (float)(((uint8_t*)buff)[i]);
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	4413      	add	r3, r2
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	ee07 3a90 	vmov	s15, r3
 800b748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b74c:	edc7 7a05 	vstr	s15, [r7, #20]

        if (i % ch_num == 0)
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	fb93 f2f2 	sdiv	r2, r3, r2
 800b758:	68b9      	ldr	r1, [r7, #8]
 800b75a:	fb01 f202 	mul.w	r2, r1, r2
 800b75e:	1a9b      	subs	r3, r3, r2
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10a      	bne.n	800b77a <get_avg_from_circ+0xa6>
            *v1 += val;
 800b764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b766:	ed93 7a00 	vldr	s14, [r3]
 800b76a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b76e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b774:	edc3 7a00 	vstr	s15, [r3]
 800b778:	e054      	b.n	800b824 <get_avg_from_circ+0x150>
        else if (ch_num > 1 && i % ch_num == 1)
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	dd14      	ble.n	800b7aa <get_avg_from_circ+0xd6>
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	68ba      	ldr	r2, [r7, #8]
 800b784:	fb93 f2f2 	sdiv	r2, r3, r2
 800b788:	68b9      	ldr	r1, [r7, #8]
 800b78a:	fb01 f202 	mul.w	r2, r1, r2
 800b78e:	1a9b      	subs	r3, r3, r2
 800b790:	2b01      	cmp	r3, #1
 800b792:	d10a      	bne.n	800b7aa <get_avg_from_circ+0xd6>
            *v2 += val;
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	ed93 7a00 	vldr	s14, [r3]
 800b79a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b79e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	edc3 7a00 	vstr	s15, [r3]
 800b7a8:	e03c      	b.n	800b824 <get_avg_from_circ+0x150>
        else if (ch_num > 2 && i % ch_num == 2)
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	dd14      	ble.n	800b7da <get_avg_from_circ+0x106>
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	fb93 f2f2 	sdiv	r2, r3, r2
 800b7b8:	68b9      	ldr	r1, [r7, #8]
 800b7ba:	fb01 f202 	mul.w	r2, r1, r2
 800b7be:	1a9b      	subs	r3, r3, r2
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d10a      	bne.n	800b7da <get_avg_from_circ+0x106>
            *v3 += val;
 800b7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c6:	ed93 7a00 	vldr	s14, [r3]
 800b7ca:	edd7 7a05 	vldr	s15, [r7, #20]
 800b7ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d4:	edc3 7a00 	vstr	s15, [r3]
 800b7d8:	e024      	b.n	800b824 <get_avg_from_circ+0x150>
        else if (ch_num > 3 && i % ch_num == 3)
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	2b03      	cmp	r3, #3
 800b7de:	dd14      	ble.n	800b80a <get_avg_from_circ+0x136>
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	fb93 f2f2 	sdiv	r2, r3, r2
 800b7e8:	68b9      	ldr	r1, [r7, #8]
 800b7ea:	fb01 f202 	mul.w	r2, r1, r2
 800b7ee:	1a9b      	subs	r3, r3, r2
 800b7f0:	2b03      	cmp	r3, #3
 800b7f2:	d10a      	bne.n	800b80a <get_avg_from_circ+0x136>
            *v4 += val;
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f6:	ed93 7a00 	vldr	s14, [r3]
 800b7fa:	edd7 7a05 	vldr	s15, [r7, #20]
 800b7fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b804:	edc3 7a00 	vstr	s15, [r3]
 800b808:	e00c      	b.n	800b824 <get_avg_from_circ+0x150>
        else if (ch_num > 4)  // && i % ch_num == 4)
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	2b04      	cmp	r3, #4
 800b80e:	dd09      	ble.n	800b824 <get_avg_from_circ+0x150>
            *v5 += val;
 800b810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b812:	ed93 7a00 	vldr	s14, [r3]
 800b816:	edd7 7a05 	vldr	s15, [r7, #20]
 800b81a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b820:	edc3 7a00 	vstr	s15, [r3]
    for (int i = last_idx, j = 0; j < total; j++, i++)
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	3301      	adds	r3, #1
 800b828:	61bb      	str	r3, [r7, #24]
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	3301      	adds	r3, #1
 800b82e:	61fb      	str	r3, [r7, #28]
 800b830:	69ba      	ldr	r2, [r7, #24]
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	429a      	cmp	r2, r3
 800b836:	f6ff af6b 	blt.w	800b710 <get_avg_from_circ+0x3c>
    }
    *v1 /= avg_num;
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83c:	edd3 6a00 	vldr	s13, [r3]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	ee07 3a90 	vmov	s15, r3
 800b846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b84a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b850:	edc3 7a00 	vstr	s15, [r3]
    if (v2 != NULL) *v2 /= avg_num;
 800b854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00c      	beq.n	800b874 <get_avg_from_circ+0x1a0>
 800b85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85c:	edd3 6a00 	vldr	s13, [r3]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	ee07 3a90 	vmov	s15, r3
 800b866:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b86a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b870:	edc3 7a00 	vstr	s15, [r3]
    if (v3 != NULL) *v3 /= avg_num;
 800b874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00c      	beq.n	800b894 <get_avg_from_circ+0x1c0>
 800b87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b87c:	edd3 6a00 	vldr	s13, [r3]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	ee07 3a90 	vmov	s15, r3
 800b886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b88a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b890:	edc3 7a00 	vstr	s15, [r3]
    if (v4 != NULL) *v4 /= avg_num;
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00c      	beq.n	800b8b4 <get_avg_from_circ+0x1e0>
 800b89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89c:	edd3 6a00 	vldr	s13, [r3]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	ee07 3a90 	vmov	s15, r3
 800b8a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b8aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b0:	edc3 7a00 	vstr	s15, [r3]
    if (v5 != NULL) *v5 /= avg_num;
 800b8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00c      	beq.n	800b8d4 <get_avg_from_circ+0x200>
 800b8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8bc:	edd3 6a00 	vldr	s13, [r3]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	ee07 3a90 	vmov	s15, r3
 800b8c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b8ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8d0:	edc3 7a00 	vstr	s15, [r3]
}
 800b8d4:	bf00      	nop
 800b8d6:	3720      	adds	r7, #32
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	08013a5c 	.word	0x08013a5c

0800b8e0 <get_1ch_from_circ>:
    }
    return ret /= avg_num;
}

int get_1ch_from_circ(int from, int total, int bufflen, int ch, int ch_num, int daq_bits, float vcc, float vref_cal, void* buff, uint8_t* out, int* idx)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b08e      	sub	sp, #56	; 0x38
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	61f8      	str	r0, [r7, #28]
 800b8e8:	61b9      	str	r1, [r7, #24]
 800b8ea:	617a      	str	r2, [r7, #20]
 800b8ec:	613b      	str	r3, [r7, #16]
 800b8ee:	ed87 0a03 	vstr	s0, [r7, #12]
 800b8f2:	edc7 0a02 	vstr	s1, [r7, #8]
    ASSERT(ch > 0 && ch_num > 0 && total > 0 && buff != NULL);
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	dd08      	ble.n	800b90e <get_1ch_from_circ+0x2e>
 800b8fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	dd05      	ble.n	800b90e <get_1ch_from_circ+0x2e>
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	2b00      	cmp	r3, #0
 800b906:	dd02      	ble.n	800b90e <get_1ch_from_circ+0x2e>
 800b908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d103      	bne.n	800b916 <get_1ch_from_circ+0x36>
 800b90e:	2162      	movs	r1, #98	; 0x62
 800b910:	4848      	ldr	r0, [pc, #288]	; (800ba34 <get_1ch_from_circ+0x154>)
 800b912:	f7ff fed9 	bl	800b6c8 <assert2>

    int found = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	637b      	str	r3, [r7, #52]	; 0x34

    for (int k = 0, i = from; k < total; k++, i++)
 800b91a:	2300      	movs	r3, #0
 800b91c:	633b      	str	r3, [r7, #48]	; 0x30
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b922:	e07d      	b.n	800ba20 <get_1ch_from_circ+0x140>
    {
        if (i >= bufflen)
 800b924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	429a      	cmp	r2, r3
 800b92a:	db01      	blt.n	800b930 <get_1ch_from_circ+0x50>
            i = 0;
 800b92c:	2300      	movs	r3, #0
 800b92e:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (i % ch_num == ch - 1)
 800b930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b934:	fb93 f2f2 	sdiv	r2, r3, r2
 800b938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b93a:	fb01 f202 	mul.w	r2, r1, r2
 800b93e:	1a9a      	subs	r2, r3, r2
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	3b01      	subs	r3, #1
 800b944:	429a      	cmp	r2, r3
 800b946:	d165      	bne.n	800ba14 <get_1ch_from_circ+0x134>
        {
            found++;
 800b948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b94a:	3301      	adds	r3, #1
 800b94c:	637b      	str	r3, [r7, #52]	; 0x34
            float val = 0;
 800b94e:	f04f 0300 	mov.w	r3, #0
 800b952:	62bb      	str	r3, [r7, #40]	; 0x28
            if (daq_bits == 12)
 800b954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b956:	2b0c      	cmp	r3, #12
 800b958:	d136      	bne.n	800b9c8 <get_1ch_from_circ+0xe8>
            {
                val = (float) (*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 800b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95c:	005b      	lsls	r3, r3, #1
 800b95e:	461a      	mov	r2, r3
 800b960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b962:	4413      	add	r3, r2
 800b964:	881b      	ldrh	r3, [r3, #0]
 800b966:	ee07 3a90 	vmov	s15, r3
 800b96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                uint16_t ret = (uint16_t)(vref_cal * (val / vcc)); // 0.8 mV precision rounded (output in mV*10)
 800b972:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b976:	edd7 7a03 	vldr	s15, [r7, #12]
 800b97a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b97e:	edd7 7a02 	vldr	s15, [r7, #8]
 800b982:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b98a:	ee17 3a90 	vmov	r3, s15
 800b98e:	84bb      	strh	r3, [r7, #36]	; 0x24
                out[(*idx)++] = LO_BYTE16(ret);
 800b990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	1c59      	adds	r1, r3, #1
 800b996:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b998:	6011      	str	r1, [r2, #0]
 800b99a:	461a      	mov	r2, r3
 800b99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b99e:	4413      	add	r3, r2
 800b9a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9a2:	b2d2      	uxtb	r2, r2
 800b9a4:	701a      	strb	r2, [r3, #0]
                out[(*idx)++] = HI_BYTE16(ret);
 800b9a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9a8:	0a1b      	lsrs	r3, r3, #8
 800b9aa:	b298      	uxth	r0, r3
 800b9ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	1c59      	adds	r1, r3, #1
 800b9b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9b4:	6011      	str	r1, [r2, #0]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ba:	4413      	add	r3, r2
 800b9bc:	b2c2      	uxtb	r2, r0
 800b9be:	701a      	strb	r2, [r3, #0]
                found++;
 800b9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b9c6:	e025      	b.n	800ba14 <get_1ch_from_circ+0x134>
            }
            else // (daq_bits == 8)
            {
                val = (float)(((uint8_t*)buff)[i]);
 800b9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9cc:	4413      	add	r3, r2
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	ee07 3a90 	vmov	s15, r3
 800b9d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                uint8_t ret = (uint8_t)(vref_cal * (val / vcc));   // 13 mV precision rounded (output in mV/10)
 800b9dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b9e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9e8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b9ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9f4:	edc7 7a01 	vstr	s15, [r7, #4]
 800b9f8:	793b      	ldrb	r3, [r7, #4]
 800b9fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                out[(*idx)++] = ret;
 800b9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	1c59      	adds	r1, r3, #1
 800ba04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba06:	6011      	str	r1, [r2, #0]
 800ba08:	461a      	mov	r2, r3
 800ba0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba0c:	4413      	add	r3, r2
 800ba0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba12:	701a      	strb	r2, [r3, #0]
    for (int k = 0, i = from; k < total; k++, i++)
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	3301      	adds	r3, #1
 800ba18:	633b      	str	r3, [r7, #48]	; 0x30
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	f6ff af7d 	blt.w	800b924 <get_1ch_from_circ+0x44>
            }
        }
    }
    return found;
 800ba2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3738      	adds	r7, #56	; 0x38
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	08013a5c 	.word	0x08013a5c

0800ba38 <get_freq>:

// freq_want = freq_osc/((prescaler+1)*(reload+1))
// (prescaler+1)*(reload+1) = freq_osc/freq_want
float get_freq(int* prescaler, int* reload, int max_reload, int freq_osc, int freq_want)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
 800ba44:	603b      	str	r3, [r7, #0]
    ASSERT(freq_osc >= freq_want && freq_want > 0 && freq_osc > 0 && max_reload > 0);
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	6a3b      	ldr	r3, [r7, #32]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	db08      	blt.n	800ba60 <get_freq+0x28>
 800ba4e:	6a3b      	ldr	r3, [r7, #32]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	dd05      	ble.n	800ba60 <get_freq+0x28>
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	dd02      	ble.n	800ba60 <get_freq+0x28>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	dc03      	bgt.n	800ba68 <get_freq+0x30>
 800ba60:	2186      	movs	r1, #134	; 0x86
 800ba62:	4829      	ldr	r0, [pc, #164]	; (800bb08 <get_freq+0xd0>)
 800ba64:	f7ff fe30 	bl	800b6c8 <assert2>
    *prescaler = 0;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]

    do
    {
        *reload = (int)((float)freq_osc / (float)(*prescaler + 1) / (float)freq_want) - 1; // TODO check negative reload?
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	ee07 3a90 	vmov	s15, r3
 800ba74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	ee07 3a90 	vmov	s15, r3
 800ba82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ba8a:	6a3b      	ldr	r3, [r7, #32]
 800ba8c:	ee07 3a90 	vmov	s15, r3
 800ba90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba9c:	ee17 3a90 	vmov	r3, s15
 800baa0:	1e5a      	subs	r2, r3, #1
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	601a      	str	r2, [r3, #0]
        if (*reload > max_reload)
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	429a      	cmp	r2, r3
 800baae:	da04      	bge.n	800baba <get_freq+0x82>
            (*prescaler)++;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	601a      	str	r2, [r3, #0]
    }
    while (*reload > max_reload);
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	dbd4      	blt.n	800ba6e <get_freq+0x36>

    float ret  = (float)freq_osc / ((float)(*prescaler + 1) * (float)(*reload + 1));
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	ee07 3a90 	vmov	s15, r3
 800baca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3301      	adds	r3, #1
 800bad4:	ee07 3a90 	vmov	s15, r3
 800bad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	3301      	adds	r3, #1
 800bae2:	ee07 3a90 	vmov	s15, r3
 800bae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800baea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800baee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baf2:	edc7 7a05 	vstr	s15, [r7, #20]
    return ret;
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	ee07 3a90 	vmov	s15, r3
}
 800bafc:	eeb0 0a67 	vmov.f32	s0, s15
 800bb00:	3718      	adds	r7, #24
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	08013a5c 	.word	0x08013a5c
 800bb0c:	00000000 	.word	0x00000000

0800bb10 <sprint_fast>:

/* Author: Jakub Parez
 * Descr:  ultra fast float sprintf
 */
void sprint_fast(char* s, const char* format, float fVal, int prec)
{
 800bb10:	b5b0      	push	{r4, r5, r7, lr}
 800bb12:	b0bc      	sub	sp, #240	; 0xf0
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	ed87 0a01 	vstr	s0, [r7, #4]
 800bb1e:	603a      	str	r2, [r7, #0]
    char result[100] = { '\0' };
 800bb20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bb24:	2264      	movs	r2, #100	; 0x64
 800bb26:	2100      	movs	r1, #0
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f005 fddf 	bl	80116ec <memset>
    char result_rev[100] = { '\0' };
 800bb2e:	f107 0314 	add.w	r3, r7, #20
 800bb32:	2264      	movs	r2, #100	; 0x64
 800bb34:	2100      	movs	r1, #0
 800bb36:	4618      	mov	r0, r3
 800bb38:	f005 fdd8 	bl	80116ec <memset>
    int dVal, dec, i, j, k;

    if (prec <= 0)
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	dc13      	bgt.n	800bb6a <sprint_fast+0x5a>
    {
        sprintf(result, "%d", (int)fVal);
 800bb42:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb4a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bb4e:	ee17 2a90 	vmov	r2, s15
 800bb52:	4989      	ldr	r1, [pc, #548]	; (800bd78 <sprint_fast+0x268>)
 800bb54:	4618      	mov	r0, r3
 800bb56:	f005 fdd1 	bl	80116fc <siprintf>
        sprintf(s, format, result);
 800bb5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bb5e:	461a      	mov	r2, r3
 800bb60:	68b9      	ldr	r1, [r7, #8]
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f005 fdca 	bl	80116fc <siprintf>
 800bb68:	e0f8      	b.n	800bd5c <sprint_fast+0x24c>
        return;
    }

    fVal += 0.5 * pow(0.1, prec);
 800bb6a:	6838      	ldr	r0, [r7, #0]
 800bb6c:	f7f4 fcf2 	bl	8000554 <__aeabi_i2d>
 800bb70:	4603      	mov	r3, r0
 800bb72:	460c      	mov	r4, r1
 800bb74:	ec44 3b11 	vmov	d1, r3, r4
 800bb78:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 800bd68 <sprint_fast+0x258>
 800bb7c:	f006 fca4 	bl	80124c8 <pow>
 800bb80:	ec51 0b10 	vmov	r0, r1, d0
 800bb84:	f04f 0200 	mov.w	r2, #0
 800bb88:	4b7c      	ldr	r3, [pc, #496]	; (800bd7c <sprint_fast+0x26c>)
 800bb8a:	f7f4 fd4d 	bl	8000628 <__aeabi_dmul>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	460c      	mov	r4, r1
 800bb92:	4625      	mov	r5, r4
 800bb94:	461c      	mov	r4, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7f4 fcee 	bl	8000578 <__aeabi_f2d>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4620      	mov	r0, r4
 800bba2:	4629      	mov	r1, r5
 800bba4:	f7f4 fb8a 	bl	80002bc <__adddf3>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	460c      	mov	r4, r1
 800bbac:	4618      	mov	r0, r3
 800bbae:	4621      	mov	r1, r4
 800bbb0:	f7f5 f812 	bl	8000bd8 <__aeabi_d2f>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	607b      	str	r3, [r7, #4]
    k = pow(10, prec);
 800bbb8:	6838      	ldr	r0, [r7, #0]
 800bbba:	f7f4 fccb 	bl	8000554 <__aeabi_i2d>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	ec44 3b11 	vmov	d1, r3, r4
 800bbc6:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 800bd70 <sprint_fast+0x260>
 800bbca:	f006 fc7d 	bl	80124c8 <pow>
 800bbce:	ec54 3b10 	vmov	r3, r4, d0
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	f7f4 ffd7 	bl	8000b88 <__aeabi_d2iz>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    dVal = fVal;
 800bbe0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bbe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbe8:	ee17 3a90 	vmov	r3, s15
 800bbec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    dec = ((int)(fVal * k)) % k;
 800bbf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbf4:	ee07 3a90 	vmov	s15, r3
 800bbf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bbfc:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc08:	ee17 1a90 	vmov	r1, s15
 800bc0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc10:	fb91 f3f3 	sdiv	r3, r1, r3
 800bc14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc18:	fb02 f303 	mul.w	r3, r2, r3
 800bc1c:	1acb      	subs	r3, r1, r3
 800bc1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    for (i = 0; i < prec; i++)
 800bc22:	2300      	movs	r3, #0
 800bc24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc28:	e025      	b.n	800bc76 <sprint_fast+0x166>
    {
        result[i] = (dec % 10) + '0';
 800bc2a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800bc2e:	4b54      	ldr	r3, [pc, #336]	; (800bd80 <sprint_fast+0x270>)
 800bc30:	fb83 1302 	smull	r1, r3, r3, r2
 800bc34:	1099      	asrs	r1, r3, #2
 800bc36:	17d3      	asrs	r3, r2, #31
 800bc38:	1ac9      	subs	r1, r1, r3
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	440b      	add	r3, r1
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	1ad1      	subs	r1, r2, r3
 800bc44:	b2cb      	uxtb	r3, r1
 800bc46:	3330      	adds	r3, #48	; 0x30
 800bc48:	b2d9      	uxtb	r1, r3
 800bc4a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bc4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc52:	4413      	add	r3, r2
 800bc54:	460a      	mov	r2, r1
 800bc56:	701a      	strb	r2, [r3, #0]
        dec /= 10;
 800bc58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc5c:	4a48      	ldr	r2, [pc, #288]	; (800bd80 <sprint_fast+0x270>)
 800bc5e:	fb82 1203 	smull	r1, r2, r2, r3
 800bc62:	1092      	asrs	r2, r2, #2
 800bc64:	17db      	asrs	r3, r3, #31
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    for (i = 0; i < prec; i++)
 800bc6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc70:	3301      	adds	r3, #1
 800bc72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	dbd4      	blt.n	800bc2a <sprint_fast+0x11a>
    }

    result[i] = '.';
 800bc80:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bc84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc88:	4413      	add	r3, r2
 800bc8a:	222e      	movs	r2, #46	; 0x2e
 800bc8c:	701a      	strb	r2, [r3, #0]
    i++;
 800bc8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc92:	3301      	adds	r3, #1
 800bc94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    if (dVal > 0)
 800bc98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dd30      	ble.n	800bd02 <sprint_fast+0x1f2>
    {
        while (dVal > 0)
 800bca0:	e025      	b.n	800bcee <sprint_fast+0x1de>
        {
            result[i] = (dVal % 10) + '0';
 800bca2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800bca6:	4b36      	ldr	r3, [pc, #216]	; (800bd80 <sprint_fast+0x270>)
 800bca8:	fb83 1302 	smull	r1, r3, r3, r2
 800bcac:	1099      	asrs	r1, r3, #2
 800bcae:	17d3      	asrs	r3, r2, #31
 800bcb0:	1ac9      	subs	r1, r1, r3
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	440b      	add	r3, r1
 800bcb8:	005b      	lsls	r3, r3, #1
 800bcba:	1ad1      	subs	r1, r2, r3
 800bcbc:	b2cb      	uxtb	r3, r1
 800bcbe:	3330      	adds	r3, #48	; 0x30
 800bcc0:	b2d9      	uxtb	r1, r3
 800bcc2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bcc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcca:	4413      	add	r3, r2
 800bccc:	460a      	mov	r2, r1
 800bcce:	701a      	strb	r2, [r3, #0]
            dVal /= 10;
 800bcd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bcd4:	4a2a      	ldr	r2, [pc, #168]	; (800bd80 <sprint_fast+0x270>)
 800bcd6:	fb82 1203 	smull	r1, r2, r2, r3
 800bcda:	1092      	asrs	r2, r2, #2
 800bcdc:	17db      	asrs	r3, r3, #31
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            i++;
 800bce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce8:	3301      	adds	r3, #1
 800bcea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        while (dVal > 0)
 800bcee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	dcd5      	bgt.n	800bca2 <sprint_fast+0x192>
        }
        i--;
 800bcf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd00:	e006      	b.n	800bd10 <sprint_fast+0x200>
    }
    else
        result[i] = '0';
 800bd02:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bd06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd0a:	4413      	add	r3, r2
 800bd0c:	2230      	movs	r2, #48	; 0x30
 800bd0e:	701a      	strb	r2, [r3, #0]

    for (j = 0; i >= 0; i--, j++)
 800bd10:	2300      	movs	r3, #0
 800bd12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd16:	e016      	b.n	800bd46 <sprint_fast+0x236>
        result_rev[j] = result[i];
 800bd18:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800bd1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd20:	4413      	add	r3, r2
 800bd22:	7819      	ldrb	r1, [r3, #0]
 800bd24:	f107 0214 	add.w	r2, r7, #20
 800bd28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd2c:	4413      	add	r3, r2
 800bd2e:	460a      	mov	r2, r1
 800bd30:	701a      	strb	r2, [r3, #0]
    for (j = 0; i >= 0; i--, j++)
 800bd32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd36:	3b01      	subs	r3, #1
 800bd38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd40:	3301      	adds	r3, #1
 800bd42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	dae4      	bge.n	800bd18 <sprint_fast+0x208>

    sprintf(s, format, result_rev);
 800bd4e:	f107 0314 	add.w	r3, r7, #20
 800bd52:	461a      	mov	r2, r3
 800bd54:	68b9      	ldr	r1, [r7, #8]
 800bd56:	68f8      	ldr	r0, [r7, #12]
 800bd58:	f005 fcd0 	bl	80116fc <siprintf>
}
 800bd5c:	37f0      	adds	r7, #240	; 0xf0
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bdb0      	pop	{r4, r5, r7, pc}
 800bd62:	bf00      	nop
 800bd64:	f3af 8000 	nop.w
 800bd68:	9999999a 	.word	0x9999999a
 800bd6c:	3fb99999 	.word	0x3fb99999
 800bd70:	00000000 	.word	0x00000000
 800bd74:	40240000 	.word	0x40240000
 800bd78:	08013a8c 	.word	0x08013a8c
 800bd7c:	3fe00000 	.word	0x3fe00000
 800bd80:	66666667 	.word	0x66666667

0800bd84 <SCPI_ErrorInit>:

/**
 * Initialize error queue
 * @param context - scpi context
 */
void SCPI_ErrorInit(scpi_t * context, scpi_error_t * data, int16_t size) {
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	80fb      	strh	r3, [r7, #6]
    fifo_init(&context->error_queue, data, size);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	333c      	adds	r3, #60	; 0x3c
 800bd96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bd9a:	68b9      	ldr	r1, [r7, #8]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f000 fa05 	bl	800c1ac <fifo_init>
}
 800bda2:	bf00      	nop
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <SCPI_ErrorEmitEmpty>:

/**
 * Emit no error
 * @param context scpi context
 */
static void SCPI_ErrorEmitEmpty(scpi_t * context) {
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b082      	sub	sp, #8
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
    if ((SCPI_ErrorCount(context) == 0) && (SCPI_RegGet(context, SCPI_REG_STB) & STB_QMA)) {
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f872 	bl	800be9c <SCPI_ErrorCount>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d11c      	bne.n	800bdf8 <SCPI_ErrorEmitEmpty+0x4e>
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fb6a 	bl	800c49a <SCPI_RegGet>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	f003 0304 	and.w	r3, r3, #4
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d013      	beq.n	800bdf8 <SCPI_ErrorEmitEmpty+0x4e>
        SCPI_RegClearBits(context, SCPI_REG_STB, STB_QMA);
 800bdd0:	2204      	movs	r2, #4
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fc60 	bl	800c69a <SCPI_RegClearBits>

        if (context->interface && context->interface->error) {
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00a      	beq.n	800bdf8 <SCPI_ErrorEmitEmpty+0x4e>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d005      	beq.n	800bdf8 <SCPI_ErrorEmitEmpty+0x4e>
            context->interface->error(context, 0);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	4798      	blx	r3
        }
    }
}
 800bdf8:	bf00      	nop
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <SCPI_ErrorEmit>:
/**
 * Emit error
 * @param context scpi context
 * @param err Error to emit
 */
static void SCPI_ErrorEmit(scpi_t * context, int16_t err) {
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	460b      	mov	r3, r1
 800be0a:	807b      	strh	r3, [r7, #2]
    SCPI_RegSetBits(context, SCPI_REG_STB, STB_QMA);
 800be0c:	2204      	movs	r2, #4
 800be0e:	2100      	movs	r1, #0
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fc27 	bl	800c664 <SCPI_RegSetBits>

    if (context->interface && context->interface->error) {
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00c      	beq.n	800be38 <SCPI_ErrorEmit+0x38>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d007      	beq.n	800be38 <SCPI_ErrorEmit+0x38>
        context->interface->error(context, err);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800be32:	4611      	mov	r1, r2
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	4798      	blx	r3
    }
}
 800be38:	bf00      	nop
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    while (fifo_remove(&context->error_queue, &error)) {
        SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
    }
#endif
    fifo_clear(&context->error_queue);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	333c      	adds	r3, #60	; 0x3c
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 f9c9 	bl	800c1e4 <fifo_clear>

    SCPI_ErrorEmitEmpty(context);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7ff ffa9 	bl	800bdaa <SCPI_ErrorEmitEmpty>
}
 800be58:	bf00      	nop
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <SCPI_ErrorPop>:
 * Pop error from queue
 * @param context - scpi context
 * @param error
 * @return
 */
scpi_bool_t SCPI_ErrorPop(scpi_t * context, scpi_error_t * error) {
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
    if (!error || !context) return FALSE;
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <SCPI_ErrorPop+0x16>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <SCPI_ErrorPop+0x1a>
 800be76:	2300      	movs	r3, #0
 800be78:	e00c      	b.n	800be94 <SCPI_ErrorPop+0x34>
    SCPI_ERROR_SETVAL(error, 0, NULL);
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	2200      	movs	r2, #0
 800be7e:	801a      	strh	r2, [r3, #0]
    fifo_remove(&context->error_queue, error);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	333c      	adds	r3, #60	; 0x3c
 800be84:	6839      	ldr	r1, [r7, #0]
 800be86:	4618      	mov	r0, r3
 800be88:	f000 fa1f 	bl	800c2ca <fifo_remove>

    SCPI_ErrorEmitEmpty(context);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7ff ff8c 	bl	800bdaa <SCPI_ErrorEmitEmpty>

    return TRUE;
 800be92:	2301      	movs	r3, #1
}
 800be94:	4618      	mov	r0, r3
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
    int16_t result = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	81fb      	strh	r3, [r7, #14]

    fifo_count(&context->error_queue, &result);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	333c      	adds	r3, #60	; 0x3c
 800beac:	f107 020e 	add.w	r2, r7, #14
 800beb0:	4611      	mov	r1, r2
 800beb2:	4618      	mov	r0, r3
 800beb4:	f000 fa7c 	bl	800c3b0 <fifo_count>

    return result;
 800beb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <SCPI_ErrorAddInternal>:

static scpi_bool_t SCPI_ErrorAddInternal(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	607a      	str	r2, [r7, #4]
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	460b      	mov	r3, r1
 800bed2:	817b      	strh	r3, [r7, #10]
    scpi_error_t error_value;
    /* SCPIDEFINE_strndup is sometimes a dumy that does not reference it's arguments. 
       Since info_len is not referenced elsewhere caoing to void prevents unusd argument warnings */
    (void) info_len;
    char * info_ptr = info ? SCPIDEFINE_strndup(&context->error_info_heap, info, info_len) : NULL;
 800bed4:	2300      	movs	r3, #0
 800bed6:	617b      	str	r3, [r7, #20]
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
 800bed8:	897b      	ldrh	r3, [r7, #10]
 800beda:	823b      	strh	r3, [r7, #16]
    if (!fifo_add(&context->error_queue, &error_value)) {
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	333c      	adds	r3, #60	; 0x3c
 800bee0:	f107 0210 	add.w	r2, r7, #16
 800bee4:	4611      	mov	r1, r2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 f9b6 	bl	800c258 <fifo_add>
 800beec:	4603      	mov	r3, r0
 800beee:	f083 0301 	eor.w	r3, r3, #1
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d014      	beq.n	800bf22 <SCPI_ErrorAddInternal+0x5e>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        fifo_remove_last(&context->error_queue, &error_value);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	333c      	adds	r3, #60	; 0x3c
 800befc:	f107 0210 	add.w	r2, r7, #16
 800bf00:	4611      	mov	r1, r2
 800bf02:	4618      	mov	r0, r3
 800bf04:	f000 fa18 	bl	800c338 <fifo_remove_last>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 800bf08:	f64f 63a2 	movw	r3, #65186	; 0xfea2
 800bf0c:	823b      	strh	r3, [r7, #16]
        fifo_add(&context->error_queue, &error_value);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	333c      	adds	r3, #60	; 0x3c
 800bf12:	f107 0210 	add.w	r2, r7, #16
 800bf16:	4611      	mov	r1, r2
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f000 f99d 	bl	800c258 <fifo_add>
        return FALSE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	e000      	b.n	800bf24 <SCPI_ErrorAddInternal+0x60>
    }
    return TRUE;
 800bf22:	2301      	movs	r3, #1
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3718      	adds	r7, #24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	607a      	str	r2, [r7, #4]
 800bf36:	603b      	str	r3, [r7, #0]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	817b      	strh	r3, [r7, #10]
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d007      	beq.n	800bf52 <SCPI_ErrorPushEx+0x26>
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d104      	bne.n	800bf52 <SCPI_ErrorPushEx+0x26>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
 800bf48:	21ff      	movs	r1, #255	; 0xff
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f005 fc28 	bl	80117a0 <strnlen>
 800bf50:	6038      	str	r0, [r7, #0]
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);
 800bf52:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f7ff ffb2 	bl	800bec4 <SCPI_ErrorAddInternal>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	bf14      	ite	ne
 800bf66:	2301      	movne	r3, #1
 800bf68:	2300      	moveq	r3, #0
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	f083 0301 	eor.w	r3, r3, #1
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	74fb      	strb	r3, [r7, #19]
 800bf74:	7cfb      	ldrb	r3, [r7, #19]
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	74fb      	strb	r3, [r7, #19]

    for (i = 0; i < ERROR_DEFS_N; i++) {
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	617b      	str	r3, [r7, #20]
 800bf80:	e02b      	b.n	800bfda <SCPI_ErrorPushEx+0xae>
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 800bf82:	4926      	ldr	r1, [pc, #152]	; (800c01c <SCPI_ErrorPushEx+0xf0>)
 800bf84:	697a      	ldr	r2, [r7, #20]
 800bf86:	4613      	mov	r3, r2
 800bf88:	005b      	lsls	r3, r3, #1
 800bf8a:	4413      	add	r3, r2
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	440b      	add	r3, r1
 800bf90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf94:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	dc1b      	bgt.n	800bfd4 <SCPI_ErrorPushEx+0xa8>
 800bf9c:	491f      	ldr	r1, [pc, #124]	; (800c01c <SCPI_ErrorPushEx+0xf0>)
 800bf9e:	697a      	ldr	r2, [r7, #20]
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	4413      	add	r3, r2
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	440b      	add	r3, r1
 800bfaa:	3302      	adds	r3, #2
 800bfac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfb0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	db0d      	blt.n	800bfd4 <SCPI_ErrorPushEx+0xa8>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
 800bfb8:	4918      	ldr	r1, [pc, #96]	; (800c01c <SCPI_ErrorPushEx+0xf0>)
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	005b      	lsls	r3, r3, #1
 800bfc0:	4413      	add	r3, r2
 800bfc2:	005b      	lsls	r3, r3, #1
 800bfc4:	440b      	add	r3, r1
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	881b      	ldrh	r3, [r3, #0]
 800bfca:	461a      	mov	r2, r3
 800bfcc:	2102      	movs	r1, #2
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f000 fb48 	bl	800c664 <SCPI_RegSetBits>
    for (i = 0; i < ERROR_DEFS_N; i++) {
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	617b      	str	r3, [r7, #20]
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	2b08      	cmp	r3, #8
 800bfde:	ddd0      	ble.n	800bf82 <SCPI_ErrorPushEx+0x56>
        }
    }

    SCPI_ErrorEmit(context, err);
 800bfe0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f7ff ff0a 	bl	800be00 <SCPI_ErrorEmit>
    if (queue_overflow) {
 800bfec:	7cfb      	ldrb	r3, [r7, #19]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d003      	beq.n	800bffa <SCPI_ErrorPushEx+0xce>
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
 800bff2:	490b      	ldr	r1, [pc, #44]	; (800c020 <SCPI_ErrorPushEx+0xf4>)
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f7ff ff03 	bl	800be00 <SCPI_ErrorEmit>
    }

    if (context) {
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d003      	beq.n	800c008 <SCPI_ErrorPushEx+0xdc>
        context->cmd_error = TRUE;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    fifo_clear(&context->error_queue); // EDIT
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	333c      	adds	r3, #60	; 0x3c
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 f8e9 	bl	800c1e4 <fifo_clear>
}
 800c012:	bf00      	nop
 800c014:	3718      	adds	r7, #24
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	08013f04 	.word	0x08013f04
 800c020:	fffffea2 	.word	0xfffffea2

0800c024 <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	807b      	strh	r3, [r7, #2]
    SCPI_ErrorPushEx(context, err, NULL, 0);
 800c030:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800c034:	2300      	movs	r3, #0
 800c036:	2200      	movs	r2, #0
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7ff ff77 	bl	800bf2c <SCPI_ErrorPushEx>
    return;
 800c03e:	bf00      	nop
}
 800c040:	3708      	adds	r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <SCPI_ErrorTranslate>:
/**
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	4603      	mov	r3, r0
 800c050:	80fb      	strh	r3, [r7, #6]
    switch (err) {
 800c052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c056:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 800c05a:	d062      	beq.n	800c122 <SCPI_ErrorTranslate+0xda>
 800c05c:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 800c060:	dc29      	bgt.n	800c0b6 <SCPI_ErrorTranslate+0x6e>
 800c062:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 800c066:	d066      	beq.n	800c136 <SCPI_ErrorTranslate+0xee>
 800c068:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 800c06c:	dc12      	bgt.n	800c094 <SCPI_ErrorTranslate+0x4c>
 800c06e:	f46f 72b6 	mvn.w	r2, #364	; 0x16c
 800c072:	4293      	cmp	r3, r2
 800c074:	d065      	beq.n	800c142 <SCPI_ErrorTranslate+0xfa>
 800c076:	f513 7fb6 	cmn.w	r3, #364	; 0x16c
 800c07a:	da03      	bge.n	800c084 <SCPI_ErrorTranslate+0x3c>
 800c07c:	f513 7fb9 	cmn.w	r3, #370	; 0x172
 800c080:	d061      	beq.n	800c146 <SCPI_ErrorTranslate+0xfe>
 800c082:	e064      	b.n	800c14e <SCPI_ErrorTranslate+0x106>
 800c084:	f46f 72b5 	mvn.w	r2, #362	; 0x16a
 800c088:	4293      	cmp	r3, r2
 800c08a:	d058      	beq.n	800c13e <SCPI_ErrorTranslate+0xf6>
 800c08c:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 800c090:	d053      	beq.n	800c13a <SCPI_ErrorTranslate+0xf2>
 800c092:	e05c      	b.n	800c14e <SCPI_ErrorTranslate+0x106>
 800c094:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 800c098:	d049      	beq.n	800c12e <SCPI_ErrorTranslate+0xe6>
 800c09a:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 800c09e:	dc03      	bgt.n	800c0a8 <SCPI_ErrorTranslate+0x60>
 800c0a0:	f113 0fe0 	cmn.w	r3, #224	; 0xe0
 800c0a4:	d045      	beq.n	800c132 <SCPI_ErrorTranslate+0xea>
 800c0a6:	e052      	b.n	800c14e <SCPI_ErrorTranslate+0x106>
 800c0a8:	f113 0faa 	cmn.w	r3, #170	; 0xaa
 800c0ac:	d03d      	beq.n	800c12a <SCPI_ErrorTranslate+0xe2>
 800c0ae:	f113 0f97 	cmn.w	r3, #151	; 0x97
 800c0b2:	d038      	beq.n	800c126 <SCPI_ErrorTranslate+0xde>
 800c0b4:	e04b      	b.n	800c14e <SCPI_ErrorTranslate+0x106>
 800c0b6:	f113 0f68 	cmn.w	r3, #104	; 0x68
 800c0ba:	d028      	beq.n	800c10e <SCPI_ErrorTranslate+0xc6>
 800c0bc:	f113 0f68 	cmn.w	r3, #104	; 0x68
 800c0c0:	dc10      	bgt.n	800c0e4 <SCPI_ErrorTranslate+0x9c>
 800c0c2:	f113 0f71 	cmn.w	r3, #113	; 0x71
 800c0c6:	d028      	beq.n	800c11a <SCPI_ErrorTranslate+0xd2>
 800c0c8:	f113 0f71 	cmn.w	r3, #113	; 0x71
 800c0cc:	dc03      	bgt.n	800c0d6 <SCPI_ErrorTranslate+0x8e>
 800c0ce:	f113 0f83 	cmn.w	r3, #131	; 0x83
 800c0d2:	d024      	beq.n	800c11e <SCPI_ErrorTranslate+0xd6>
 800c0d4:	e03b      	b.n	800c14e <SCPI_ErrorTranslate+0x106>
 800c0d6:	f113 0f6d 	cmn.w	r3, #109	; 0x6d
 800c0da:	d01c      	beq.n	800c116 <SCPI_ErrorTranslate+0xce>
 800c0dc:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 800c0e0:	d017      	beq.n	800c112 <SCPI_ErrorTranslate+0xca>
 800c0e2:	e034      	b.n	800c14e <SCPI_ErrorTranslate+0x106>
 800c0e4:	f113 0f65 	cmn.w	r3, #101	; 0x65
 800c0e8:	d00d      	beq.n	800c106 <SCPI_ErrorTranslate+0xbe>
 800c0ea:	f113 0f65 	cmn.w	r3, #101	; 0x65
 800c0ee:	dc03      	bgt.n	800c0f8 <SCPI_ErrorTranslate+0xb0>
 800c0f0:	f113 0f67 	cmn.w	r3, #103	; 0x67
 800c0f4:	d009      	beq.n	800c10a <SCPI_ErrorTranslate+0xc2>
 800c0f6:	e02a      	b.n	800c14e <SCPI_ErrorTranslate+0x106>
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <SCPI_ErrorTranslate+0xba>
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d024      	beq.n	800c14a <SCPI_ErrorTranslate+0x102>
 800c100:	e025      	b.n	800c14e <SCPI_ErrorTranslate+0x106>
#if USE_FULL_ERROR_LIST
#define XE X
#else
#define XE(def, val, str)
#endif
        LIST_OF_ERRORS
 800c102:	4b16      	ldr	r3, [pc, #88]	; (800c15c <SCPI_ErrorTranslate+0x114>)
 800c104:	e024      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c106:	4b16      	ldr	r3, [pc, #88]	; (800c160 <SCPI_ErrorTranslate+0x118>)
 800c108:	e022      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c10a:	4b16      	ldr	r3, [pc, #88]	; (800c164 <SCPI_ErrorTranslate+0x11c>)
 800c10c:	e020      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c10e:	4b16      	ldr	r3, [pc, #88]	; (800c168 <SCPI_ErrorTranslate+0x120>)
 800c110:	e01e      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c112:	4b16      	ldr	r3, [pc, #88]	; (800c16c <SCPI_ErrorTranslate+0x124>)
 800c114:	e01c      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c116:	4b16      	ldr	r3, [pc, #88]	; (800c170 <SCPI_ErrorTranslate+0x128>)
 800c118:	e01a      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c11a:	4b16      	ldr	r3, [pc, #88]	; (800c174 <SCPI_ErrorTranslate+0x12c>)
 800c11c:	e018      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c11e:	4b16      	ldr	r3, [pc, #88]	; (800c178 <SCPI_ErrorTranslate+0x130>)
 800c120:	e016      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c122:	4b16      	ldr	r3, [pc, #88]	; (800c17c <SCPI_ErrorTranslate+0x134>)
 800c124:	e014      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c126:	4b16      	ldr	r3, [pc, #88]	; (800c180 <SCPI_ErrorTranslate+0x138>)
 800c128:	e012      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c12a:	4b16      	ldr	r3, [pc, #88]	; (800c184 <SCPI_ErrorTranslate+0x13c>)
 800c12c:	e010      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c12e:	4b16      	ldr	r3, [pc, #88]	; (800c188 <SCPI_ErrorTranslate+0x140>)
 800c130:	e00e      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c132:	4b16      	ldr	r3, [pc, #88]	; (800c18c <SCPI_ErrorTranslate+0x144>)
 800c134:	e00c      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c136:	4b16      	ldr	r3, [pc, #88]	; (800c190 <SCPI_ErrorTranslate+0x148>)
 800c138:	e00a      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c13a:	4b16      	ldr	r3, [pc, #88]	; (800c194 <SCPI_ErrorTranslate+0x14c>)
 800c13c:	e008      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c13e:	4b16      	ldr	r3, [pc, #88]	; (800c198 <SCPI_ErrorTranslate+0x150>)
 800c140:	e006      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c142:	4b16      	ldr	r3, [pc, #88]	; (800c19c <SCPI_ErrorTranslate+0x154>)
 800c144:	e004      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c146:	4b16      	ldr	r3, [pc, #88]	; (800c1a0 <SCPI_ErrorTranslate+0x158>)
 800c148:	e002      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
 800c14a:	4b16      	ldr	r3, [pc, #88]	; (800c1a4 <SCPI_ErrorTranslate+0x15c>)
 800c14c:	e000      	b.n	800c150 <SCPI_ErrorTranslate+0x108>
#if USE_USER_ERROR_LIST
        LIST_OF_USER_ERRORS
#endif
#undef X
#undef XE
        default: return "Unknown error";
 800c14e:	4b16      	ldr	r3, [pc, #88]	; (800c1a8 <SCPI_ErrorTranslate+0x160>)
    }
}
 800c150:	4618      	mov	r0, r3
 800c152:	370c      	adds	r7, #12
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr
 800c15c:	08013a90 	.word	0x08013a90
 800c160:	08013a9c 	.word	0x08013a9c
 800c164:	08013ab0 	.word	0x08013ab0
 800c168:	08013ac4 	.word	0x08013ac4
 800c16c:	08013ad4 	.word	0x08013ad4
 800c170:	08013aec 	.word	0x08013aec
 800c174:	08013b00 	.word	0x08013b00
 800c178:	08013b14 	.word	0x08013b14
 800c17c:	08013b24 	.word	0x08013b24
 800c180:	08013b38 	.word	0x08013b38
 800c184:	08013b4c 	.word	0x08013b4c
 800c188:	08013b60 	.word	0x08013b60
 800c18c:	08013b70 	.word	0x08013b70
 800c190:	08013b88 	.word	0x08013b88
 800c194:	08013b98 	.word	0x08013b98
 800c198:	08013ba8 	.word	0x08013ba8
 800c19c:	08013bc0 	.word	0x08013bc0
 800c1a0:	08013bd0 	.word	0x08013bd0
 800c1a4:	08013be4 	.word	0x08013be4
 800c1a8:	08013bf4 	.word	0x08013bf4

0800c1ac <fifo_init>:

/**
 * Initialize fifo
 * @param fifo
 */
void fifo_init(scpi_fifo_t * fifo, scpi_error_t * data, int16_t size) {
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	80fb      	strh	r3, [r7, #6]
    fifo->wr = 0;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	809a      	strh	r2, [r3, #4]
    fifo->data = data;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	68ba      	ldr	r2, [r7, #8]
 800c1d0:	609a      	str	r2, [r3, #8]
    fifo->size = size;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	88fa      	ldrh	r2, [r7, #6]
 800c1d6:	80da      	strh	r2, [r3, #6]
}
 800c1d8:	bf00      	nop
 800c1da:	3714      	adds	r7, #20
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <fifo_clear>:

/**
 * Empty fifo
 * @param fifo
 */
void fifo_clear(scpi_fifo_t * fifo) {
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
    fifo->wr = 0;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	809a      	strh	r2, [r3, #4]
}
 800c1fe:	bf00      	nop
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <fifo_is_empty>:
/**
 * Test if fifo is empty
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_empty(scpi_fifo_t * fifo) {
 800c20a:	b480      	push	{r7}
 800c20c:	b083      	sub	sp, #12
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
    return fifo->count == 0;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	bf0c      	ite	eq
 800c21c:	2301      	moveq	r3, #1
 800c21e:	2300      	movne	r3, #0
 800c220:	b2db      	uxtb	r3, r3
}
 800c222:	4618      	mov	r0, r3
 800c224:	370c      	adds	r7, #12
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <fifo_is_full>:
/**
 * Test if fifo is full
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_full(scpi_fifo_t * fifo) {
 800c22e:	b480      	push	{r7}
 800c230:	b083      	sub	sp, #12
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
    return fifo->count == fifo->size;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c242:	429a      	cmp	r2, r3
 800c244:	bf0c      	ite	eq
 800c246:	2301      	moveq	r3, #1
 800c248:	2300      	movne	r3, #0
 800c24a:	b2db      	uxtb	r3, r3
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <fifo_add>:
 * @param fifo
 * @param err
 * @param info
 * @return
 */
scpi_bool_t fifo_add(scpi_fifo_t * fifo, const scpi_error_t * value) {
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
    /* FIFO full? */
    if (fifo_is_full(fifo)) {
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7ff ffe3 	bl	800c22e <fifo_is_full>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <fifo_add+0x1a>
        return FALSE;
 800c26e:	2300      	movs	r3, #0
 800c270:	e027      	b.n	800c2c2 <fifo_add+0x6a>
    }
    if (!value) {
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d101      	bne.n	800c27c <fifo_add+0x24>
        return FALSE;
 800c278:	2300      	movs	r3, #0
 800c27a:	e022      	b.n	800c2c2 <fifo_add+0x6a>
    }

    fifo->data[fifo->wr] = *value;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	689a      	ldr	r2, [r3, #8]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c286:	005b      	lsls	r3, r3, #1
 800c288:	4413      	add	r3, r2
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	8812      	ldrh	r2, [r2, #0]
 800c28e:	801a      	strh	r2, [r3, #0]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c296:	3301      	adds	r3, #1
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c29e:	fb93 f1f2 	sdiv	r1, r3, r2
 800c2a2:	fb02 f201 	mul.w	r2, r2, r1
 800c2a6:	1a9b      	subs	r3, r3, r2
 800c2a8:	b21a      	sxth	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	801a      	strh	r2, [r3, #0]
    fifo->count += 1;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	b21a      	sxth	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	809a      	strh	r2, [r3, #4]
    return TRUE;
 800c2c0:	2301      	movs	r3, #1
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <fifo_remove>:
 * Remove element form fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove(scpi_fifo_t * fifo, scpi_error_t * value) {
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b082      	sub	sp, #8
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff ff98 	bl	800c20a <fifo_is_empty>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d001      	beq.n	800c2e4 <fifo_remove+0x1a>
        return FALSE;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	e025      	b.n	800c330 <fifo_remove+0x66>
    }

    if (value) {
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d009      	beq.n	800c2fe <fifo_remove+0x34>
        *value = fifo->data[fifo->rd];
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	689a      	ldr	r2, [r3, #8]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c2f4:	005b      	lsls	r3, r3, #1
 800c2f6:	441a      	add	r2, r3
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	8812      	ldrh	r2, [r2, #0]
 800c2fc:	801a      	strh	r2, [r3, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c304:	3301      	adds	r3, #1
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c30c:	fb93 f1f2 	sdiv	r1, r3, r2
 800c310:	fb02 f201 	mul.w	r2, r2, r1
 800c314:	1a9b      	subs	r3, r3, r2
 800c316:	b21a      	sxth	r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	805a      	strh	r2, [r3, #2]
    fifo->count -= 1;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c322:	b29b      	uxth	r3, r3
 800c324:	3b01      	subs	r3, #1
 800c326:	b29b      	uxth	r3, r3
 800c328:	b21a      	sxth	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	809a      	strh	r2, [r3, #4]

    return TRUE;
 800c32e:	2301      	movs	r3, #1
}
 800c330:	4618      	mov	r0, r3
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <fifo_remove_last>:
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff ff61 	bl	800c20a <fifo_is_empty>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <fifo_remove_last+0x1a>
        return FALSE;
 800c34e:	2300      	movs	r3, #0
 800c350:	e02a      	b.n	800c3a8 <fifo_remove_last+0x70>
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c358:	461a      	mov	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c360:	4413      	add	r3, r2
 800c362:	3b01      	subs	r3, #1
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c36a:	fb93 f1f2 	sdiv	r1, r3, r2
 800c36e:	fb02 f201 	mul.w	r2, r2, r1
 800c372:	1a9b      	subs	r3, r3, r2
 800c374:	b21a      	sxth	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	801a      	strh	r2, [r3, #0]

    if (value) {
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d009      	beq.n	800c394 <fifo_remove_last+0x5c>
        *value = fifo->data[fifo->wr];
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	689a      	ldr	r2, [r3, #8]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c38a:	005b      	lsls	r3, r3, #1
 800c38c:	441a      	add	r2, r3
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	8812      	ldrh	r2, [r2, #0]
 800c392:	801a      	strh	r2, [r3, #0]
    }
    fifo->count -= 1;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	3b01      	subs	r3, #1
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	b21a      	sxth	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	809a      	strh	r2, [r3, #4]

    return TRUE;
 800c3a6:	2301      	movs	r3, #1
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <fifo_count>:
 * Retrive number of elements in fifo
 * @param fifo
 * @param value
 * @return
 */
scpi_bool_t fifo_count(scpi_fifo_t * fifo, int16_t * value) {
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
    *value = fifo->count;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	801a      	strh	r2, [r3, #0]
    return TRUE;
 800c3c4:	2301      	movs	r3, #1
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	370c      	adds	r7, #12
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	460b      	mov	r3, r1
 800c3dc:	70fb      	strb	r3, [r7, #3]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 800c3de:	78fb      	ldrb	r3, [r7, #3]
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f859 	bl	800c49a <SCPI_RegGet>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	78fb      	ldrb	r3, [r7, #3]
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f88d 	bl	800c510 <SCPI_RegSet>
}
 800c3f6:	bf00      	nop
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <regUpdateEvent>:
 * in the condition register
 * @param context
 * @param condReg - condition register name
 * @param eventReg - event register name
 */
static void regUpdateEvent(scpi_t * context, scpi_reg_val_t oldCondVal, scpi_reg_val_t newCondVal, scpi_reg_name_t eventReg) {
 800c3fe:	b590      	push	{r4, r7, lr}
 800c400:	b085      	sub	sp, #20
 800c402:	af00      	add	r7, sp, #0
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	4608      	mov	r0, r1
 800c408:	4611      	mov	r1, r2
 800c40a:	461a      	mov	r2, r3
 800c40c:	4603      	mov	r3, r0
 800c40e:	817b      	strh	r3, [r7, #10]
 800c410:	460b      	mov	r3, r1
 800c412:	813b      	strh	r3, [r7, #8]
 800c414:	4613      	mov	r3, r2
 800c416:	71fb      	strb	r3, [r7, #7]
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 800c418:	897b      	ldrh	r3, [r7, #10]
 800c41a:	43db      	mvns	r3, r3
 800c41c:	b29a      	uxth	r2, r3
 800c41e:	893b      	ldrh	r3, [r7, #8]
 800c420:	4013      	ands	r3, r2
 800c422:	b29c      	uxth	r4, r3
 800c424:	79fb      	ldrb	r3, [r7, #7]
 800c426:	4619      	mov	r1, r3
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f000 f836 	bl	800c49a <SCPI_RegGet>
 800c42e:	4603      	mov	r3, r0
 800c430:	4323      	orrs	r3, r4
 800c432:	b29a      	uxth	r2, r3
 800c434:	79fb      	ldrb	r3, [r7, #7]
 800c436:	4619      	mov	r1, r3
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f000 f869 	bl	800c510 <SCPI_RegSet>
}
 800c43e:	bf00      	nop
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	bd90      	pop	{r4, r7, pc}

0800c446 <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 800c446:	b580      	push	{r7, lr}
 800c448:	b084      	sub	sp, #16
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	60f8      	str	r0, [r7, #12]
 800c44e:	4608      	mov	r0, r1
 800c450:	4611      	mov	r1, r2
 800c452:	461a      	mov	r2, r3
 800c454:	4603      	mov	r3, r0
 800c456:	817b      	strh	r3, [r7, #10]
 800c458:	460b      	mov	r3, r1
 800c45a:	727b      	strb	r3, [r7, #9]
 800c45c:	4613      	mov	r3, r2
 800c45e:	80fb      	strh	r3, [r7, #6]
    if (val & SCPI_RegGet(context, mask)) {
 800c460:	7a7b      	ldrb	r3, [r7, #9]
 800c462:	4619      	mov	r1, r3
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f000 f818 	bl	800c49a <SCPI_RegGet>
 800c46a:	4603      	mov	r3, r0
 800c46c:	461a      	mov	r2, r3
 800c46e:	897b      	ldrh	r3, [r7, #10]
 800c470:	4013      	ands	r3, r2
 800c472:	b29b      	uxth	r3, r3
 800c474:	2b00      	cmp	r3, #0
 800c476:	d006      	beq.n	800c486 <regUpdateSTB+0x40>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 800c478:	88fb      	ldrh	r3, [r7, #6]
 800c47a:	461a      	mov	r2, r3
 800c47c:	2100      	movs	r1, #0
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f000 f8f0 	bl	800c664 <SCPI_RegSetBits>
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
    }
}
 800c484:	e005      	b.n	800c492 <regUpdateSTB+0x4c>
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 800c486:	88fb      	ldrh	r3, [r7, #6]
 800c488:	461a      	mov	r2, r3
 800c48a:	2100      	movs	r1, #0
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f000 f904 	bl	800c69a <SCPI_RegClearBits>
}
 800c492:	bf00      	nop
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <SCPI_RegGet>:
/**
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
 800c49a:	b480      	push	{r7}
 800c49c:	b083      	sub	sp, #12
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	70fb      	strb	r3, [r7, #3]
    if ((name < SCPI_REG_COUNT) && context) {
 800c4a6:	78fb      	ldrb	r3, [r7, #3]
 800c4a8:	2b09      	cmp	r3, #9
 800c4aa:	d808      	bhi.n	800c4be <SCPI_RegGet+0x24>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d005      	beq.n	800c4be <SCPI_RegGet+0x24>
        return context->registers[name];
 800c4b2:	78fa      	ldrb	r2, [r7, #3]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	3224      	adds	r2, #36	; 0x24
 800c4b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c4bc:	e000      	b.n	800c4c0 <SCPI_RegGet+0x26>
    } else {
        return 0;
 800c4be:	2300      	movs	r3, #0
    }
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <writeControl>:
 * Wrapper function to control interface from context
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	70fb      	strb	r3, [r7, #3]
 800c4d8:	4613      	mov	r3, r2
 800c4da:	803b      	strh	r3, [r7, #0]
    if (context && context->interface && context->interface->control) {
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d011      	beq.n	800c506 <writeControl+0x3a>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00d      	beq.n	800c506 <writeControl+0x3a>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d008      	beq.n	800c506 <writeControl+0x3a>
        return context->interface->control(context, ctrl, val);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	883a      	ldrh	r2, [r7, #0]
 800c4fc:	78f9      	ldrb	r1, [r7, #3]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	4798      	blx	r3
 800c502:	4603      	mov	r3, r0
 800c504:	e000      	b.n	800c508 <writeControl+0x3c>
    } else {
        return 0;
 800c506:	2300      	movs	r3, #0
    }
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	460b      	mov	r3, r1
 800c51a:	70fb      	strb	r3, [r7, #3]
 800c51c:	4613      	mov	r3, r2
 800c51e:	803b      	strh	r3, [r7, #0]
    scpi_bool_t srq = FALSE;
 800c520:	2300      	movs	r3, #0
 800c522:	73fb      	strb	r3, [r7, #15]
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 800c524:	78fb      	ldrb	r3, [r7, #3]
 800c526:	2b09      	cmp	r3, #9
 800c528:	f200 8098 	bhi.w	800c65c <SCPI_RegSet+0x14c>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f000 8094 	beq.w	800c65c <SCPI_RegSet+0x14c>
        return;
    }

    /* store old register value */
    old_val = context->registers[name];
 800c534:	78fa      	ldrb	r2, [r7, #3]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	3224      	adds	r2, #36	; 0x24
 800c53a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c53e:	81bb      	strh	r3, [r7, #12]

    /* set register value */
    context->registers[name] = val;
 800c540:	78fa      	ldrb	r2, [r7, #3]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3224      	adds	r2, #36	; 0x24
 800c546:	8839      	ldrh	r1, [r7, #0]
 800c548:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
 800c54c:	78fb      	ldrb	r3, [r7, #3]
 800c54e:	2b0a      	cmp	r3, #10
 800c550:	d870      	bhi.n	800c634 <SCPI_RegSet+0x124>
 800c552:	a201      	add	r2, pc, #4	; (adr r2, 800c558 <SCPI_RegSet+0x48>)
 800c554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c558:	0800c585 	.word	0x0800c585
 800c55c:	0800c5c5 	.word	0x0800c5c5
 800c560:	0800c5cf 	.word	0x0800c5cf
 800c564:	0800c5dd 	.word	0x0800c5dd
 800c568:	0800c60d 	.word	0x0800c60d
 800c56c:	0800c61b 	.word	0x0800c61b
 800c570:	0800c625 	.word	0x0800c625
 800c574:	0800c5e7 	.word	0x0800c5e7
 800c578:	0800c5f5 	.word	0x0800c5f5
 800c57c:	0800c5ff 	.word	0x0800c5ff
 800c580:	0800c635 	.word	0x0800c635
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
 800c584:	2101      	movs	r1, #1
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7ff ff87 	bl	800c49a <SCPI_RegGet>
 800c58c:	4603      	mov	r3, r0
 800c58e:	817b      	strh	r3, [r7, #10]
            mask &= ~STB_SRQ;
 800c590:	897b      	ldrh	r3, [r7, #10]
 800c592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c596:	817b      	strh	r3, [r7, #10]
            if (val & mask) {
 800c598:	883a      	ldrh	r2, [r7, #0]
 800c59a:	897b      	ldrh	r3, [r7, #10]
 800c59c:	4013      	ands	r3, r2
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00a      	beq.n	800c5ba <SCPI_RegSet+0xaa>
                val |= STB_SRQ;
 800c5a4:	883b      	ldrh	r3, [r7, #0]
 800c5a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5aa:	803b      	strh	r3, [r7, #0]
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
 800c5ac:	89ba      	ldrh	r2, [r7, #12]
 800c5ae:	883b      	ldrh	r3, [r7, #0]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d03e      	beq.n	800c632 <SCPI_RegSet+0x122>
                    srq = TRUE;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	73fb      	strb	r3, [r7, #15]
                }
            } else {
                val &= ~STB_SRQ;
            }
            break;
 800c5b8:	e03b      	b.n	800c632 <SCPI_RegSet+0x122>
                val &= ~STB_SRQ;
 800c5ba:	883b      	ldrh	r3, [r7, #0]
 800c5bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5c0:	803b      	strh	r3, [r7, #0]
            break;
 800c5c2:	e036      	b.n	800c632 <SCPI_RegSet+0x122>
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7ff ff03 	bl	800c3d2 <regUpdate>
            break;
 800c5cc:	e032      	b.n	800c634 <SCPI_RegSet+0x124>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
 800c5ce:	8839      	ldrh	r1, [r7, #0]
 800c5d0:	2320      	movs	r3, #32
 800c5d2:	2203      	movs	r2, #3
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f7ff ff36 	bl	800c446 <regUpdateSTB>
            break;
 800c5da:	e02b      	b.n	800c634 <SCPI_RegSet+0x124>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
 800c5dc:	2102      	movs	r1, #2
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7ff fef7 	bl	800c3d2 <regUpdate>
            break;
 800c5e4:	e026      	b.n	800c634 <SCPI_RegSet+0x124>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
 800c5e6:	8839      	ldrh	r1, [r7, #0]
 800c5e8:	2308      	movs	r3, #8
 800c5ea:	2208      	movs	r2, #8
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff ff2a 	bl	800c446 <regUpdateSTB>
            break;
 800c5f2:	e01f      	b.n	800c634 <SCPI_RegSet+0x124>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
 800c5f4:	2107      	movs	r1, #7
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f7ff feeb 	bl	800c3d2 <regUpdate>
            break;
 800c5fc:	e01a      	b.n	800c634 <SCPI_RegSet+0x124>
        case SCPI_REG_QUESC:
            regUpdateEvent(context, old_val, val, SCPI_REG_QUES);
 800c5fe:	883a      	ldrh	r2, [r7, #0]
 800c600:	89b9      	ldrh	r1, [r7, #12]
 800c602:	2307      	movs	r3, #7
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f7ff fefa 	bl	800c3fe <regUpdateEvent>
            break;
 800c60a:	e013      	b.n	800c634 <SCPI_RegSet+0x124>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 800c60c:	8839      	ldrh	r1, [r7, #0]
 800c60e:	2380      	movs	r3, #128	; 0x80
 800c610:	2205      	movs	r2, #5
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7ff ff17 	bl	800c446 <regUpdateSTB>
            break;
 800c618:	e00c      	b.n	800c634 <SCPI_RegSet+0x124>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
 800c61a:	2104      	movs	r1, #4
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f7ff fed8 	bl	800c3d2 <regUpdate>
            break;
 800c622:	e007      	b.n	800c634 <SCPI_RegSet+0x124>
        case SCPI_REG_OPERC:
            regUpdateEvent(context, old_val, val, SCPI_REG_OPER);
 800c624:	883a      	ldrh	r2, [r7, #0]
 800c626:	89b9      	ldrh	r1, [r7, #12]
 800c628:	2304      	movs	r3, #4
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff fee7 	bl	800c3fe <regUpdateEvent>
            break;
 800c630:	e000      	b.n	800c634 <SCPI_RegSet+0x124>
            break;
 800c632:	bf00      	nop
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
 800c634:	78fa      	ldrb	r2, [r7, #3]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	3224      	adds	r2, #36	; 0x24
 800c63a:	8839      	ldrh	r1, [r7, #0]
 800c63c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (srq) {
 800c640:	7bfb      	ldrb	r3, [r7, #15]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00b      	beq.n	800c65e <SCPI_RegSet+0x14e>
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
 800c646:	2100      	movs	r1, #0
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7ff ff26 	bl	800c49a <SCPI_RegGet>
 800c64e:	4603      	mov	r3, r0
 800c650:	461a      	mov	r2, r3
 800c652:	2101      	movs	r1, #1
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f7ff ff39 	bl	800c4cc <writeControl>
 800c65a:	e000      	b.n	800c65e <SCPI_RegSet+0x14e>
        return;
 800c65c:	bf00      	nop
    }
}
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	70fb      	strb	r3, [r7, #3]
 800c670:	4613      	mov	r3, r2
 800c672:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 800c674:	78fb      	ldrb	r3, [r7, #3]
 800c676:	4619      	mov	r1, r3
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff ff0e 	bl	800c49a <SCPI_RegGet>
 800c67e:	4603      	mov	r3, r0
 800c680:	461a      	mov	r2, r3
 800c682:	883b      	ldrh	r3, [r7, #0]
 800c684:	4313      	orrs	r3, r2
 800c686:	b29a      	uxth	r2, r3
 800c688:	78fb      	ldrb	r3, [r7, #3]
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff ff3f 	bl	800c510 <SCPI_RegSet>
}
 800c692:	bf00      	nop
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b082      	sub	sp, #8
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	70fb      	strb	r3, [r7, #3]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 800c6aa:	78fb      	ldrb	r3, [r7, #3]
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f7ff fef3 	bl	800c49a <SCPI_RegGet>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	b21a      	sxth	r2, r3
 800c6b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800c6bc:	43db      	mvns	r3, r3
 800c6be:	b21b      	sxth	r3, r3
 800c6c0:	4013      	ands	r3, r2
 800c6c2:	b21b      	sxth	r3, r3
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	78fb      	ldrb	r3, [r7, #3]
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff ff20 	bl	800c510 <SCPI_RegSet>
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	2102      	movs	r1, #2
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7ff ff13 	bl	800c510 <SCPI_RegSet>
}
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b082      	sub	sp, #8
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
    SCPI_EventClear(context);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7ff ffec 	bl	800c6d8 <SCPI_EventClear>
    SCPI_ErrorClear(context);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f7ff fb9d 	bl	800be40 <SCPI_ErrorClear>
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
 800c706:	2200      	movs	r2, #0
 800c708:	2104      	movs	r1, #4
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7ff ff00 	bl	800c510 <SCPI_RegSet>
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 800c710:	2200      	movs	r2, #0
 800c712:	2107      	movs	r1, #7
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f7ff fefb 	bl	800c510 <SCPI_RegSet>
    return SCPI_RES_OK;
 800c71a:	2301      	movs	r3, #1
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
    int32_t new_ESE;
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 800c72c:	f107 030c 	add.w	r3, r7, #12
 800c730:	2201      	movs	r2, #1
 800c732:	4619      	mov	r1, r3
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f002 f929 	bl	800e98c <SCPI_ParamInt32>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d008      	beq.n	800c752 <SCPI_CoreEse+0x2e>
        SCPI_RegSet(context, SCPI_REG_ESE, (scpi_reg_val_t) new_ESE);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	b29b      	uxth	r3, r3
 800c744:	461a      	mov	r2, r3
 800c746:	2103      	movs	r1, #3
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7ff fee1 	bl	800c510 <SCPI_RegSet>
        return SCPI_RES_OK;
 800c74e:	2301      	movs	r3, #1
 800c750:	e001      	b.n	800c756 <SCPI_CoreEse+0x32>
    }
    return SCPI_RES_ERR;
 800c752:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESE));
 800c766:	2103      	movs	r1, #3
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f7ff fe96 	bl	800c49a <SCPI_RegGet>
 800c76e:	4603      	mov	r3, r0
 800c770:	4619      	mov	r1, r3
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f001 fc5d 	bl	800e032 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800c778:	2301      	movs	r3, #1
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
 800c782:	b580      	push	{r7, lr}
 800c784:	b082      	sub	sp, #8
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESR));
 800c78a:	2102      	movs	r1, #2
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f7ff fe84 	bl	800c49a <SCPI_RegGet>
 800c792:	4603      	mov	r3, r0
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f001 fc4b 	bl	800e032 <SCPI_ResultInt32>
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 800c79c:	2200      	movs	r2, #0
 800c79e:	2102      	movs	r1, #2
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff feb5 	bl	800c510 <SCPI_RegSet>
    return SCPI_RES_OK;
 800c7a6:	2301      	movs	r3, #1
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	2102      	movs	r1, #2
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7ff ff51 	bl	800c664 <SCPI_RegSetBits>
    return SCPI_RES_OK;
 800c7c2:	2301      	movs	r3, #1
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3708      	adds	r7, #8
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
    /* Operation is always completed */
    SCPI_ResultInt32(context, 1);
 800c7d4:	2101      	movs	r1, #1
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f001 fc2b 	bl	800e032 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800c7dc:	2301      	movs	r3, #1
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b084      	sub	sp, #16
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
    int32_t new_SRE;
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 800c7ee:	f107 030c 	add.w	r3, r7, #12
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f002 f8c8 	bl	800e98c <SCPI_ParamInt32>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d008      	beq.n	800c814 <SCPI_CoreSre+0x2e>
        SCPI_RegSet(context, SCPI_REG_SRE, (scpi_reg_val_t) new_SRE);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	b29b      	uxth	r3, r3
 800c806:	461a      	mov	r2, r3
 800c808:	2101      	movs	r1, #1
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7ff fe80 	bl	800c510 <SCPI_RegSet>
        return SCPI_RES_OK;
 800c810:	2301      	movs	r3, #1
 800c812:	e001      	b.n	800c818 <SCPI_CoreSre+0x32>
    }
    return SCPI_RES_ERR;
 800c814:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_SRE));
 800c828:	2101      	movs	r1, #1
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f7ff fe35 	bl	800c49a <SCPI_RegGet>
 800c830:	4603      	mov	r3, r0
 800c832:	4619      	mov	r1, r3
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f001 fbfc 	bl	800e032 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800c83a:	2301      	movs	r3, #1
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_STB));
 800c84c:	2100      	movs	r1, #0
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f7ff fe23 	bl	800c49a <SCPI_RegGet>
 800c854:	4603      	mov	r3, r0
 800c856:	4619      	mov	r1, r3
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f001 fbea 	bl	800e032 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800c85e:	2301      	movs	r3, #1
}
 800c860:	4618      	mov	r0, r3
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <SCPI_CoreWai>:
/**
 * *WAI
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
 800c870:	2301      	movs	r3, #1
}
 800c872:	4618      	mov	r0, r3
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr

0800c87e <isws>:
/**
 * Is white space
 * @param c
 * @return 
 */
static int isws(int c) {
 800c87e:	b480      	push	{r7}
 800c880:	b083      	sub	sp, #12
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
    if ((c == ' ') || (c == '\t')) {
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2b20      	cmp	r3, #32
 800c88a:	d002      	beq.n	800c892 <isws+0x14>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2b09      	cmp	r3, #9
 800c890:	d101      	bne.n	800c896 <isws+0x18>
        return 1;
 800c892:	2301      	movs	r3, #1
 800c894:	e000      	b.n	800c898 <isws+0x1a>
    }
    return 0;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <isbdigit>:
/**
 * Is binary digit
 * @param c
 * @return 
 */
static int isbdigit(int c) {
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1')) {
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b30      	cmp	r3, #48	; 0x30
 800c8b0:	d002      	beq.n	800c8b8 <isbdigit+0x14>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2b31      	cmp	r3, #49	; 0x31
 800c8b6:	d101      	bne.n	800c8bc <isbdigit+0x18>
        return 1;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e000      	b.n	800c8be <isbdigit+0x1a>
    }
    return 0;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	370c      	adds	r7, #12
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <isqdigit>:
/**
 * Is hexadecimal digit
 * @param c
 * @return 
 */
static int isqdigit(int c) {
 800c8ca:	b480      	push	{r7}
 800c8cc:	b083      	sub	sp, #12
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7')) {
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2b30      	cmp	r3, #48	; 0x30
 800c8d6:	d014      	beq.n	800c902 <isqdigit+0x38>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2b31      	cmp	r3, #49	; 0x31
 800c8dc:	d011      	beq.n	800c902 <isqdigit+0x38>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b32      	cmp	r3, #50	; 0x32
 800c8e2:	d00e      	beq.n	800c902 <isqdigit+0x38>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b33      	cmp	r3, #51	; 0x33
 800c8e8:	d00b      	beq.n	800c902 <isqdigit+0x38>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b34      	cmp	r3, #52	; 0x34
 800c8ee:	d008      	beq.n	800c902 <isqdigit+0x38>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2b35      	cmp	r3, #53	; 0x35
 800c8f4:	d005      	beq.n	800c902 <isqdigit+0x38>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b36      	cmp	r3, #54	; 0x36
 800c8fa:	d002      	beq.n	800c902 <isqdigit+0x38>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2b37      	cmp	r3, #55	; 0x37
 800c900:	d101      	bne.n	800c906 <isqdigit+0x3c>
        return 1;
 800c902:	2301      	movs	r3, #1
 800c904:	e000      	b.n	800c908 <isqdigit+0x3e>
    }
    return 0;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <iseos>:
/**
 * Is end of string
 * @param state
 * @return 
 */
static int iseos(lex_state_t * state) {
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
    if ((state->buffer + state->len) <= (state->pos)) {
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	6892      	ldr	r2, [r2, #8]
 800c924:	441a      	add	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d801      	bhi.n	800c932 <iseos+0x1e>
        return 1;
 800c92e:	2301      	movs	r3, #1
 800c930:	e000      	b.n	800c934 <iseos+0x20>
    } else {
        return 0;
 800c932:	2300      	movs	r3, #0
    }
}
 800c934:	4618      	mov	r0, r3
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <scpiLex_IsEos>:
/**
 * Private export of iseos
 * @param state
 * @return 
 */
int scpiLex_IsEos(lex_state_t * state) {
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
    return iseos(state);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7ff ffe3 	bl	800c914 <iseos>
 800c94e:	4603      	mov	r3, r0
}
 800c950:	4618      	mov	r0, r3
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <ischr>:
 * Test current character
 * @param state
 * @param chr
 * @return 
 */
static int ischr(lex_state_t * state, char chr) {
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	460b      	mov	r3, r1
 800c962:	70fb      	strb	r3, [r7, #3]
    return (state->pos[0] == chr);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	78fa      	ldrb	r2, [r7, #3]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	bf0c      	ite	eq
 800c970:	2301      	moveq	r3, #1
 800c972:	2300      	movne	r3, #0
 800c974:	b2db      	uxtb	r3, r3
}
 800c976:	4618      	mov	r0, r3
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <isplusmn>:
/**
 * Is plus or minus
 * @param c
 * @return 
 */
static int isplusmn(int c) {
 800c982:	b480      	push	{r7}
 800c984:	b083      	sub	sp, #12
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
    return c == '+' || c == '-';
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b2b      	cmp	r3, #43	; 0x2b
 800c98e:	d002      	beq.n	800c996 <isplusmn+0x14>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b2d      	cmp	r3, #45	; 0x2d
 800c994:	d101      	bne.n	800c99a <isplusmn+0x18>
 800c996:	2301      	movs	r3, #1
 800c998:	e000      	b.n	800c99c <isplusmn+0x1a>
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <isH>:
/**
 * Is letter H
 * @param c
 * @return 
 */
static int isH(int c) {
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
    return c == 'h' || c == 'H';
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b68      	cmp	r3, #104	; 0x68
 800c9b4:	d002      	beq.n	800c9bc <isH+0x14>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2b48      	cmp	r3, #72	; 0x48
 800c9ba:	d101      	bne.n	800c9c0 <isH+0x18>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e000      	b.n	800c9c2 <isH+0x1a>
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <isB>:
/**
 * Is letter B
 * @param c
 * @return 
 */
static int isB(int c) {
 800c9ce:	b480      	push	{r7}
 800c9d0:	b083      	sub	sp, #12
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
    return c == 'b' || c == 'B';
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b62      	cmp	r3, #98	; 0x62
 800c9da:	d002      	beq.n	800c9e2 <isB+0x14>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b42      	cmp	r3, #66	; 0x42
 800c9e0:	d101      	bne.n	800c9e6 <isB+0x18>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e000      	b.n	800c9e8 <isB+0x1a>
 800c9e6:	2300      	movs	r3, #0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <isQ>:
/**
 * Is letter Q
 * @param c
 * @return 
 */
static int isQ(int c) {
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
    return c == 'q' || c == 'Q';
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b71      	cmp	r3, #113	; 0x71
 800ca00:	d002      	beq.n	800ca08 <isQ+0x14>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2b51      	cmp	r3, #81	; 0x51
 800ca06:	d101      	bne.n	800ca0c <isQ+0x18>
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e000      	b.n	800ca0e <isQ+0x1a>
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <isE>:
/**
 * Is letter E
 * @param c
 * @return 
 */
static int isE(int c) {
 800ca1a:	b480      	push	{r7}
 800ca1c:	b083      	sub	sp, #12
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
    return c == 'e' || c == 'E';
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b65      	cmp	r3, #101	; 0x65
 800ca26:	d002      	beq.n	800ca2e <isE+0x14>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b45      	cmp	r3, #69	; 0x45
 800ca2c:	d101      	bne.n	800ca32 <isE+0x18>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e000      	b.n	800ca34 <isE+0x1a>
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <skipWs>:
/**
 * Skip all whitespaces
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
    int someSpace = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 800ca4c:	e007      	b.n	800ca5e <skipWs+0x1e>
        state->pos++;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	1c5a      	adds	r2, r3, #1
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	605a      	str	r2, [r3, #4]
        someSpace++;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7ff ff58 	bl	800c914 <iseos>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d108      	bne.n	800ca7c <skipWs+0x3c>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7ff ff04 	bl	800c87e <isws>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1e8      	bne.n	800ca4e <skipWs+0xe>
    }

    return someSpace;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <skipDigit>:
/**
 * Skip decimal digit
 * @param state
 * @return 
 */
static int skipDigit(lex_state_t * state) {
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b082      	sub	sp, #8
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f7ff ff40 	bl	800c914 <iseos>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d113      	bne.n	800cac2 <skipDigit+0x3c>
 800ca9a:	f004 fde3 	bl	8011664 <__locale_ctype_ptr>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	3301      	adds	r3, #1
 800caa8:	4413      	add	r3, r2
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	f003 0304 	and.w	r3, r3, #4
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d006      	beq.n	800cac2 <skipDigit+0x3c>
        state->pos++;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	1c5a      	adds	r2, r3, #1
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e000      	b.n	800cac4 <skipDigit+0x3e>
    } else {
        return SKIP_NONE;
 800cac2:	2300      	movs	r3, #0
    }
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <skipNumbers>:
/**
 * Skip multiple decimal digits
 * @param state
 * @return 
 */
static int skipNumbers(lex_state_t * state) {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800cad4:	2300      	movs	r3, #0
 800cad6:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 800cad8:	e007      	b.n	800caea <skipNumbers+0x1e>
        state->pos++;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	1c5a      	adds	r2, r3, #1
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	605a      	str	r2, [r3, #4]
        someNumbers++;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	3301      	adds	r3, #1
 800cae8:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7ff ff12 	bl	800c914 <iseos>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10c      	bne.n	800cb10 <skipNumbers+0x44>
 800caf6:	f004 fdb5 	bl	8011664 <__locale_ctype_ptr>
 800cafa:	4602      	mov	r2, r0
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	3301      	adds	r3, #1
 800cb04:	4413      	add	r3, r2
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	f003 0304 	and.w	r3, r3, #4
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d1e4      	bne.n	800cada <skipNumbers+0xe>
    }
    return someNumbers;
 800cb10:	68fb      	ldr	r3, [r7, #12]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <skipPlusmn>:
/**
 * Skip plus or minus
 * @param state
 * @return 
 */
static int skipPlusmn(lex_state_t * state) {
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isplusmn(state->pos[0])) {
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7ff fef6 	bl	800c914 <iseos>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d10f      	bne.n	800cb4e <skipPlusmn+0x34>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7ff ff24 	bl	800c982 <isplusmn>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d006      	beq.n	800cb4e <skipPlusmn+0x34>
        state->pos++;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	1c5a      	adds	r2, r3, #1
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e000      	b.n	800cb50 <skipPlusmn+0x36>
    } else {
        return SKIP_NONE;
 800cb4e:	2300      	movs	r3, #0
    }
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <skipAlpha>:
/**
 * Skip any character from 'a'-'Z'
 * @param state
 * @return 
 */
static int skipAlpha(lex_state_t * state) {
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
    int someLetters = 0;
 800cb60:	2300      	movs	r3, #0
 800cb62:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800cb64:	e007      	b.n	800cb76 <skipAlpha+0x1e>
        state->pos++;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	1c5a      	adds	r2, r3, #1
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	605a      	str	r2, [r3, #4]
        someLetters++;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	3301      	adds	r3, #1
 800cb74:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff fecc 	bl	800c914 <iseos>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10c      	bne.n	800cb9c <skipAlpha+0x44>
 800cb82:	f004 fd6f 	bl	8011664 <__locale_ctype_ptr>
 800cb86:	4602      	mov	r2, r0
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	4413      	add	r3, r2
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	f003 0303 	and.w	r3, r3, #3
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1e4      	bne.n	800cb66 <skipAlpha+0xe>
    }
    return someLetters;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <skipChr>:
 * Skip exact character chr or nothing
 * @param state
 * @param chr
 * @return 
 */
static int skipChr(lex_state_t * state, char chr) {
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b082      	sub	sp, #8
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
 800cbae:	460b      	mov	r3, r1
 800cbb0:	70fb      	strb	r3, [r7, #3]
    if (!iseos(state) && ischr(state, chr)) {
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7ff feae 	bl	800c914 <iseos>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d10e      	bne.n	800cbdc <skipChr+0x36>
 800cbbe:	78fb      	ldrb	r3, [r7, #3]
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff fec8 	bl	800c958 <ischr>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d006      	beq.n	800cbdc <skipChr+0x36>
        state->pos++;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	1c5a      	adds	r2, r3, #1
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e000      	b.n	800cbde <skipChr+0x38>
    } else {
        return SKIP_NONE;
 800cbdc:	2300      	movs	r3, #0
    }
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <skipSlashDot>:
/**
 * Skip slash or dot
 * @param state
 * @return 
 */
static int skipSlashDot(lex_state_t * state) {
 800cbe6:	b590      	push	{r4, r7, lr}
 800cbe8:	b083      	sub	sp, #12
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7ff fe90 	bl	800c914 <iseos>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d113      	bne.n	800cc22 <skipSlashDot+0x3c>
 800cbfa:	212f      	movs	r1, #47	; 0x2f
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff feab 	bl	800c958 <ischr>
 800cc02:	4604      	mov	r4, r0
 800cc04:	212e      	movs	r1, #46	; 0x2e
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f7ff fea6 	bl	800c958 <ischr>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	4323      	orrs	r3, r4
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d006      	beq.n	800cc22 <skipSlashDot+0x3c>
        state->pos++;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	1c5a      	adds	r2, r3, #1
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e000      	b.n	800cc24 <skipSlashDot+0x3e>
    } else {
        return SKIP_NONE;
 800cc22:	2300      	movs	r3, #0
    }
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd90      	pop	{r4, r7, pc}

0800cc2c <skipStar>:
/**
 * Skip star
 * @param state
 * @return 
 */
static int skipStar(lex_state_t * state) {
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, '*')) {
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f7ff fe6d 	bl	800c914 <iseos>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10d      	bne.n	800cc5c <skipStar+0x30>
 800cc40:	212a      	movs	r1, #42	; 0x2a
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7ff fe88 	bl	800c958 <ischr>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d006      	beq.n	800cc5c <skipStar+0x30>
        state->pos++;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	e000      	b.n	800cc5e <skipStar+0x32>
    } else {
        return SKIP_NONE;
 800cc5c:	2300      	movs	r3, #0
    }
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3708      	adds	r7, #8
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <skipColon>:
/**
 * Skip colon
 * @param state
 * @return 
 */
static int skipColon(lex_state_t * state) {
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b082      	sub	sp, #8
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, ':')) {
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7ff fe50 	bl	800c914 <iseos>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10d      	bne.n	800cc96 <skipColon+0x30>
 800cc7a:	213a      	movs	r1, #58	; 0x3a
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7ff fe6b 	bl	800c958 <ischr>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d006      	beq.n	800cc96 <skipColon+0x30>
        state->pos++;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	1c5a      	adds	r2, r3, #1
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800cc92:	2301      	movs	r3, #1
 800cc94:	e000      	b.n	800cc98 <skipColon+0x32>
    } else {
        return SKIP_NONE;
 800cc96:	2300      	movs	r3, #0
    }
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <skipProgramMnemonic>:
/**
 * Skip program mnemonic [a-z][a-z0-9_]*
 * @param state
 * @return 
 */
static int skipProgramMnemonic(lex_state_t * state) {
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
    const char * startPos = state->pos;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	60fb      	str	r3, [r7, #12]
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f7ff fe30 	bl	800c914 <iseos>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d131      	bne.n	800cd1e <skipProgramMnemonic+0x7e>
 800ccba:	f004 fcd3 	bl	8011664 <__locale_ctype_ptr>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	4413      	add	r3, r2
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	f003 0303 	and.w	r3, r3, #3
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d024      	beq.n	800cd1e <skipProgramMnemonic+0x7e>
        state->pos++;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	1c5a      	adds	r2, r3, #1
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800ccde:	e004      	b.n	800ccea <skipProgramMnemonic+0x4a>
            state->pos++;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	1c5a      	adds	r2, r3, #1
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff fe12 	bl	800c914 <iseos>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d113      	bne.n	800cd1e <skipProgramMnemonic+0x7e>
 800ccf6:	f004 fcb5 	bl	8011664 <__locale_ctype_ptr>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	3301      	adds	r3, #1
 800cd04:	4413      	add	r3, r2
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	f003 0307 	and.w	r3, r3, #7
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d1e7      	bne.n	800cce0 <skipProgramMnemonic+0x40>
 800cd10:	215f      	movs	r1, #95	; 0x5f
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7ff fe20 	bl	800c958 <ischr>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1e0      	bne.n	800cce0 <skipProgramMnemonic+0x40>
        }
    }

    if (iseos(state)) {
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7ff fdf8 	bl	800c914 <iseos>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d004      	beq.n	800cd34 <skipProgramMnemonic+0x94>
        return (state->pos - startPos) * SKIP_INCOMPLETE;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	6852      	ldr	r2, [r2, #4]
 800cd30:	1a9b      	subs	r3, r3, r2
 800cd32:	e004      	b.n	800cd3e <skipProgramMnemonic+0x9e>
    } else {
        return (state->pos - startPos) * SKIP_OK;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	461a      	mov	r2, r3
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	1ad3      	subs	r3, r2, r3
    }
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <scpiLex_WhiteSpace>:
 * Detect token white space
 * @param state
 * @param token
 * @return 
 */
int scpiLex_WhiteSpace(lex_state_t * state, scpi_token_t * token) {
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b082      	sub	sp, #8
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	685a      	ldr	r2, [r3, #4]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	605a      	str	r2, [r3, #4]

    skipWs(state);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7ff fe71 	bl	800ca40 <skipWs>

    token->len = state->pos - token->ptr;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	461a      	mov	r2, r3
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	1ad2      	subs	r2, r2, r3
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	609a      	str	r2, [r3, #8]

    if (token->len > 0) {
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	dd03      	ble.n	800cd7e <scpiLex_WhiteSpace+0x38>
        token->type = SCPI_TOKEN_WS;
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	2217      	movs	r2, #23
 800cd7a:	701a      	strb	r2, [r3, #0]
 800cd7c:	e002      	b.n	800cd84 <scpiLex_WhiteSpace+0x3e>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	221a      	movs	r2, #26
 800cd82:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	689b      	ldr	r3, [r3, #8]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <skipCommonProgramHeader>:
/**
 * Skip command program header \*<PROGRAM MNEMONIC>
 * @param state
 * @return 
 */
static int skipCommonProgramHeader(lex_state_t * state) {
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
    int res;
    if (skipStar(state)) {
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f7ff ff47 	bl	800cc2c <skipStar>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d01c      	beq.n	800cdde <skipCommonProgramHeader+0x4e>
        res = skipProgramMnemonic(state);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f7ff ff7b 	bl	800cca0 <skipProgramMnemonic>
 800cdaa:	60f8      	str	r0, [r7, #12]
        if (res == SKIP_NONE && iseos(state)) {
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d108      	bne.n	800cdc4 <skipCommonProgramHeader+0x34>
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f7ff fdae 	bl	800c914 <iseos>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d002      	beq.n	800cdc4 <skipCommonProgramHeader+0x34>
            return SKIP_INCOMPLETE;
 800cdbe:	f04f 33ff 	mov.w	r3, #4294967295
 800cdc2:	e00d      	b.n	800cde0 <skipCommonProgramHeader+0x50>
        } else if (res <= SKIP_INCOMPLETE) {
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	da01      	bge.n	800cdce <skipCommonProgramHeader+0x3e>
            return SKIP_OK;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e008      	b.n	800cde0 <skipCommonProgramHeader+0x50>
        } else if (res >= SKIP_OK) {
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	dd01      	ble.n	800cdd8 <skipCommonProgramHeader+0x48>
            return SKIP_OK;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	e003      	b.n	800cde0 <skipCommonProgramHeader+0x50>
        } else {
            return SKIP_INCOMPLETE;
 800cdd8:	f04f 33ff 	mov.w	r3, #4294967295
 800cddc:	e000      	b.n	800cde0 <skipCommonProgramHeader+0x50>
        }
    }
    return SKIP_NONE;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3710      	adds	r7, #16
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <skipCompoundProgramHeader>:
/**
 * Skip compound program header :<PROGRAM MNEMONIC>:<PROGRAM MNEMONIC>...
 * @param state
 * @return 
 */
static int skipCompoundProgramHeader(lex_state_t * state) {
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
    int res;
    int firstColon = skipColon(state);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7ff ff38 	bl	800cc66 <skipColon>
 800cdf6:	60f8      	str	r0, [r7, #12]

    res = skipProgramMnemonic(state);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7ff ff51 	bl	800cca0 <skipProgramMnemonic>
 800cdfe:	60b8      	str	r0, [r7, #8]
    if (res >= SKIP_OK) {
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	dd17      	ble.n	800ce36 <skipCompoundProgramHeader+0x4e>
        while (skipColon(state)) {
 800ce06:	e00e      	b.n	800ce26 <skipCompoundProgramHeader+0x3e>
            res = skipProgramMnemonic(state);
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff ff49 	bl	800cca0 <skipProgramMnemonic>
 800ce0e:	60b8      	str	r0, [r7, #8]
            if (res <= SKIP_INCOMPLETE) {
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	da01      	bge.n	800ce1a <skipCompoundProgramHeader+0x32>
                return SKIP_OK;
 800ce16:	2301      	movs	r3, #1
 800ce18:	e019      	b.n	800ce4e <skipCompoundProgramHeader+0x66>
            } else if (res == SKIP_NONE) {
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <skipCompoundProgramHeader+0x3e>
                return SKIP_INCOMPLETE;
 800ce20:	f04f 33ff 	mov.w	r3, #4294967295
 800ce24:	e013      	b.n	800ce4e <skipCompoundProgramHeader+0x66>
        while (skipColon(state)) {
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7ff ff1d 	bl	800cc66 <skipColon>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1ea      	bne.n	800ce08 <skipCompoundProgramHeader+0x20>
            }
        }
        return SKIP_OK;
 800ce32:	2301      	movs	r3, #1
 800ce34:	e00b      	b.n	800ce4e <skipCompoundProgramHeader+0x66>
    } else if (res <= SKIP_INCOMPLETE) {
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	da01      	bge.n	800ce40 <skipCompoundProgramHeader+0x58>
        return SKIP_OK;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e006      	b.n	800ce4e <skipCompoundProgramHeader+0x66>
    } else if (firstColon) {
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d002      	beq.n	800ce4c <skipCompoundProgramHeader+0x64>
        return SKIP_INCOMPLETE;
 800ce46:	f04f 33ff 	mov.w	r3, #4294967295
 800ce4a:	e000      	b.n	800ce4e <skipCompoundProgramHeader+0x66>
    } else {
        return SKIP_NONE;
 800ce4c:	2300      	movs	r3, #0
    }
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <scpiLex_ProgramHeader>:
 * Detect token command or compound program header
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b084      	sub	sp, #16
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	6039      	str	r1, [r7, #0]
    int res;
    token->ptr = state->pos;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	685a      	ldr	r2, [r3, #4]
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	221a      	movs	r2, #26
 800ce6c:	701a      	strb	r2, [r3, #0]

    res = skipCommonProgramHeader(state);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7ff ff8e 	bl	800cd90 <skipCommonProgramHeader>
 800ce74:	60f8      	str	r0, [r7, #12]
    if (res >= SKIP_OK) {
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	dd0e      	ble.n	800ce9a <scpiLex_ProgramHeader+0x44>
        if (skipChr(state, '?') >= SKIP_OK) {
 800ce7c:	213f      	movs	r1, #63	; 0x3f
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7ff fe91 	bl	800cba6 <skipChr>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	dd03      	ble.n	800ce92 <scpiLex_ProgramHeader+0x3c>
            token->type = SCPI_TOKEN_COMMON_QUERY_PROGRAM_HEADER;
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	2216      	movs	r2, #22
 800ce8e:	701a      	strb	r2, [r3, #0]
 800ce90:	e029      	b.n	800cee6 <scpiLex_ProgramHeader+0x90>
        } else {
            token->type = SCPI_TOKEN_COMMON_PROGRAM_HEADER;
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	2213      	movs	r2, #19
 800ce96:	701a      	strb	r2, [r3, #0]
 800ce98:	e025      	b.n	800cee6 <scpiLex_ProgramHeader+0x90>
        }
    } else if (res <= SKIP_INCOMPLETE) {
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	da03      	bge.n	800cea8 <scpiLex_ProgramHeader+0x52>
        token->type = SCPI_TOKEN_INCOMPLETE_COMMON_PROGRAM_HEADER;
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	2214      	movs	r2, #20
 800cea4:	701a      	strb	r2, [r3, #0]
 800cea6:	e01e      	b.n	800cee6 <scpiLex_ProgramHeader+0x90>
    } else if (res == SKIP_NONE) {
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d11b      	bne.n	800cee6 <scpiLex_ProgramHeader+0x90>
        res = skipCompoundProgramHeader(state);
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7ff ff9a 	bl	800cde8 <skipCompoundProgramHeader>
 800ceb4:	60f8      	str	r0, [r7, #12]

        if (res >= SKIP_OK) {
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	dd0e      	ble.n	800ceda <scpiLex_ProgramHeader+0x84>
            if (skipChr(state, '?') >= SKIP_OK) {
 800cebc:	213f      	movs	r1, #63	; 0x3f
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7ff fe71 	bl	800cba6 <skipChr>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	dd03      	ble.n	800ced2 <scpiLex_ProgramHeader+0x7c>
                token->type = SCPI_TOKEN_COMPOUND_QUERY_PROGRAM_HEADER;
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	2215      	movs	r2, #21
 800cece:	701a      	strb	r2, [r3, #0]
 800ced0:	e009      	b.n	800cee6 <scpiLex_ProgramHeader+0x90>
            } else {
                token->type = SCPI_TOKEN_COMPOUND_PROGRAM_HEADER;
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2211      	movs	r2, #17
 800ced6:	701a      	strb	r2, [r3, #0]
 800ced8:	e005      	b.n	800cee6 <scpiLex_ProgramHeader+0x90>
            }
        } else if (res <= SKIP_INCOMPLETE) {
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	da02      	bge.n	800cee6 <scpiLex_ProgramHeader+0x90>
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	2212      	movs	r2, #18
 800cee4:	701a      	strb	r2, [r3, #0]
        }
    }

    if (token->type != SCPI_TOKEN_UNKNOWN) {
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	2b1a      	cmp	r3, #26
 800ceec:	d008      	beq.n	800cf00 <scpiLex_ProgramHeader+0xaa>
        token->len = state->pos - token->ptr;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	461a      	mov	r2, r3
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	1ad2      	subs	r2, r2, r3
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	609a      	str	r2, [r3, #8]
 800cefe:	e006      	b.n	800cf0e <scpiLex_ProgramHeader+0xb8>
    } else {
        token->len = 0;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	2200      	movs	r2, #0
 800cf04:	609a      	str	r2, [r3, #8]
        state->pos = token->ptr;
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	685a      	ldr	r2, [r3, #4]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	605a      	str	r2, [r3, #4]
    }

    return token->len;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	689b      	ldr	r3, [r3, #8]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <scpiLex_CharacterProgramData>:
 * Detect token "Character program data"
 * @param state
 * @param token
 * @return 
 */
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b082      	sub	sp, #8
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685a      	ldr	r2, [r3, #4]
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f7ff fcf1 	bl	800c914 <iseos>
 800cf32:	4603      	mov	r3, r0
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d131      	bne.n	800cf9c <scpiLex_CharacterProgramData+0x82>
 800cf38:	f004 fb94 	bl	8011664 <__locale_ctype_ptr>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	3301      	adds	r3, #1
 800cf46:	4413      	add	r3, r2
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	f003 0303 	and.w	r3, r3, #3
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d024      	beq.n	800cf9c <scpiLex_CharacterProgramData+0x82>
        state->pos++;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	1c5a      	adds	r2, r3, #1
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800cf5c:	e004      	b.n	800cf68 <scpiLex_CharacterProgramData+0x4e>
            state->pos++;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	1c5a      	adds	r2, r3, #1
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7ff fcd3 	bl	800c914 <iseos>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d113      	bne.n	800cf9c <scpiLex_CharacterProgramData+0x82>
 800cf74:	f004 fb76 	bl	8011664 <__locale_ctype_ptr>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	3301      	adds	r3, #1
 800cf82:	4413      	add	r3, r2
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	f003 0307 	and.w	r3, r3, #7
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1e7      	bne.n	800cf5e <scpiLex_CharacterProgramData+0x44>
 800cf8e:	215f      	movs	r1, #95	; 0x5f
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f7ff fce1 	bl	800c958 <ischr>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1e0      	bne.n	800cf5e <scpiLex_CharacterProgramData+0x44>
        }
    }

    token->len = state->pos - token->ptr;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	1ad2      	subs	r2, r2, r3
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	dd03      	ble.n	800cfbc <scpiLex_CharacterProgramData+0xa2>
        token->type = SCPI_TOKEN_PROGRAM_MNEMONIC;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2209      	movs	r2, #9
 800cfb8:	701a      	strb	r2, [r3, #0]
 800cfba:	e002      	b.n	800cfc2 <scpiLex_CharacterProgramData+0xa8>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	221a      	movs	r2, #26
 800cfc0:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	689b      	ldr	r3, [r3, #8]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <skipMantisa>:

/* 7.7.2 <DECIMAL NUMERIC PROGRAM DATA> */
static int skipMantisa(lex_state_t * state) {
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b084      	sub	sp, #16
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60fb      	str	r3, [r7, #12]

    skipPlusmn(state);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7ff fd9d 	bl	800cb1a <skipPlusmn>

    someNumbers += skipNumbers(state);
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7ff fd73 	bl	800cacc <skipNumbers>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	4413      	add	r3, r2
 800cfec:	60fb      	str	r3, [r7, #12]

    if (skipChr(state, '.')) {
 800cfee:	212e      	movs	r1, #46	; 0x2e
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f7ff fdd8 	bl	800cba6 <skipChr>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d006      	beq.n	800d00a <skipMantisa+0x3c>
        someNumbers += skipNumbers(state);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f7ff fd65 	bl	800cacc <skipNumbers>
 800d002:	4602      	mov	r2, r0
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	4413      	add	r3, r2
 800d008:	60fb      	str	r3, [r7, #12]
    }

    return someNumbers;
 800d00a:	68fb      	ldr	r3, [r7, #12]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <skipExponent>:

static int skipExponent(lex_state_t * state) {
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	60fb      	str	r3, [r7, #12]

    if (!iseos(state) && isE(state->pos[0])) {
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7ff fc77 	bl	800c914 <iseos>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d117      	bne.n	800d05c <skipExponent+0x48>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	4618      	mov	r0, r3
 800d034:	f7ff fcf1 	bl	800ca1a <isE>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00e      	beq.n	800d05c <skipExponent+0x48>
        state->pos++;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	1c5a      	adds	r2, r3, #1
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	605a      	str	r2, [r3, #4]

        skipWs(state);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7ff fcf9 	bl	800ca40 <skipWs>

        skipPlusmn(state);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f7ff fd63 	bl	800cb1a <skipPlusmn>

        someNumbers = skipNumbers(state);
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f7ff fd39 	bl	800cacc <skipNumbers>
 800d05a:	60f8      	str	r0, [r7, #12]
    }

    return someNumbers;
 800d05c:	68fb      	ldr	r3, [r7, #12]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <scpiLex_DecimalNumericProgramData>:
 * Detect token Decimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 800d066:	b580      	push	{r7, lr}
 800d068:	b084      	sub	sp, #16
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
    char * rollback;
    token->ptr = state->pos;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	685a      	ldr	r2, [r3, #4]
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	605a      	str	r2, [r3, #4]

    if (skipMantisa(state)) {
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f7ff ffa8 	bl	800cfce <skipMantisa>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d00f      	beq.n	800d0a4 <scpiLex_DecimalNumericProgramData+0x3e>
        rollback = state->pos;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	60fb      	str	r3, [r7, #12]
        skipWs(state);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7ff fcd8 	bl	800ca40 <skipWs>
        if (!skipExponent(state)) {
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff ffbf 	bl	800d014 <skipExponent>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d107      	bne.n	800d0ac <scpiLex_DecimalNumericProgramData+0x46>
            state->pos = rollback;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	605a      	str	r2, [r3, #4]
 800d0a2:	e003      	b.n	800d0ac <scpiLex_DecimalNumericProgramData+0x46>
        }
    } else {
        state->pos = token->ptr;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	605a      	str	r2, [r3, #4]
    }

    token->len = state->pos - token->ptr;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	1ad2      	subs	r2, r2, r3
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	dd03      	ble.n	800d0cc <scpiLex_DecimalNumericProgramData+0x66>
        token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA;
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	220a      	movs	r2, #10
 800d0c8:	701a      	strb	r2, [r3, #0]
 800d0ca:	e002      	b.n	800d0d2 <scpiLex_DecimalNumericProgramData+0x6c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	221a      	movs	r2, #26
 800d0d0:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	689b      	ldr	r3, [r3, #8]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <scpiLex_SuffixProgramData>:

/* 7.7.3 <SUFFIX PROGRAM DATA> */
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b082      	sub	sp, #8
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	685a      	ldr	r2, [r3, #4]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	605a      	str	r2, [r3, #4]

    skipChr(state, '/');
 800d0f0:	212f      	movs	r1, #47	; 0x2f
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fd57 	bl	800cba6 <skipChr>

    /* TODO: strict parsing  : SLASH? (ALPHA+ (MINUS? DIGIT)?) ((SLASH | DOT) (ALPHA+ (MINUS? DIGIT)?))* */
    if (skipAlpha(state)) {
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7ff fd2d 	bl	800cb58 <skipAlpha>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d017      	beq.n	800d134 <scpiLex_SuffixProgramData+0x56>
        skipChr(state, '-');
 800d104:	212d      	movs	r1, #45	; 0x2d
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7ff fd4d 	bl	800cba6 <skipChr>
        skipDigit(state);
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f7ff fcba 	bl	800ca86 <skipDigit>

        while (skipSlashDot(state)) {
 800d112:	e009      	b.n	800d128 <scpiLex_SuffixProgramData+0x4a>
            skipAlpha(state);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7ff fd1f 	bl	800cb58 <skipAlpha>
            skipChr(state, '-');
 800d11a:	212d      	movs	r1, #45	; 0x2d
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7ff fd42 	bl	800cba6 <skipChr>
            skipDigit(state);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7ff fcaf 	bl	800ca86 <skipDigit>
        while (skipSlashDot(state)) {
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7ff fd5c 	bl	800cbe6 <skipSlashDot>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1ef      	bne.n	800d114 <scpiLex_SuffixProgramData+0x36>
        }
    }

    token->len = state->pos - token->ptr;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	461a      	mov	r2, r3
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	1ad2      	subs	r2, r2, r3
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	609a      	str	r2, [r3, #8]
    if ((token->len > 0)) {
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	dd03      	ble.n	800d154 <scpiLex_SuffixProgramData+0x76>
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	220c      	movs	r2, #12
 800d150:	701a      	strb	r2, [r3, #0]
 800d152:	e009      	b.n	800d168 <scpiLex_SuffixProgramData+0x8a>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	221a      	movs	r2, #26
 800d158:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	685a      	ldr	r2, [r3, #4]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	2200      	movs	r2, #0
 800d166:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	689b      	ldr	r3, [r3, #8]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <skipHexNum>:

/* 7.7.4 <NONDECIMAL NUMERIC PROGRAM DATA> */
static int skipHexNum(lex_state_t * state) {
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800d17c:	2300      	movs	r3, #0
 800d17e:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 800d180:	e007      	b.n	800d192 <skipHexNum+0x1e>
        state->pos++;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	1c5a      	adds	r2, r3, #1
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	605a      	str	r2, [r3, #4]
        someNumbers++;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	3301      	adds	r3, #1
 800d190:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f7ff fbbe 	bl	800c914 <iseos>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d10c      	bne.n	800d1b8 <skipHexNum+0x44>
 800d19e:	f004 fa61 	bl	8011664 <__locale_ctype_ptr>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	4413      	add	r3, r2
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d1e4      	bne.n	800d182 <skipHexNum+0xe>
    }
    return someNumbers;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <skipOctNum>:

static int skipOctNum(lex_state_t * state) {
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b084      	sub	sp, #16
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 800d1ce:	e007      	b.n	800d1e0 <skipOctNum+0x1e>
        state->pos++;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	1c5a      	adds	r2, r3, #1
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	605a      	str	r2, [r3, #4]
        someNumbers++;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7ff fb97 	bl	800c914 <iseos>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d108      	bne.n	800d1fe <skipOctNum+0x3c>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7ff fb69 	bl	800c8ca <isqdigit>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1e8      	bne.n	800d1d0 <skipOctNum+0xe>
    }
    return someNumbers;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <skipBinNum>:

static int skipBinNum(lex_state_t * state) {
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800d210:	2300      	movs	r3, #0
 800d212:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 800d214:	e007      	b.n	800d226 <skipBinNum+0x1e>
        state->pos++;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	1c5a      	adds	r2, r3, #1
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	605a      	str	r2, [r3, #4]
        someNumbers++;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	3301      	adds	r3, #1
 800d224:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff fb74 	bl	800c914 <iseos>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d108      	bne.n	800d244 <skipBinNum+0x3c>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	4618      	mov	r0, r3
 800d23a:	f7ff fb33 	bl	800c8a4 <isbdigit>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1e8      	bne.n	800d216 <skipBinNum+0xe>
    }
    return someNumbers;
 800d244:	68fb      	ldr	r3, [r7, #12]
}
 800d246:	4618      	mov	r0, r3
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <scpiLex_NondecimalNumericData>:
 * Detect token nondecimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 800d24e:	b580      	push	{r7, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	6039      	str	r1, [r7, #0]
    int someNumbers = 0;
 800d258:	2300      	movs	r3, #0
 800d25a:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685a      	ldr	r2, [r3, #4]
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	605a      	str	r2, [r3, #4]
    if (skipChr(state, '#')) {
 800d264:	2123      	movs	r1, #35	; 0x23
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7ff fc9d 	bl	800cba6 <skipChr>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d046      	beq.n	800d300 <scpiLex_NondecimalNumericData+0xb2>
        if (!iseos(state)) {
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7ff fb4e 	bl	800c914 <iseos>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d140      	bne.n	800d300 <scpiLex_NondecimalNumericData+0xb2>
            if (isH(state->pos[0])) {
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	4618      	mov	r0, r3
 800d286:	f7ff fb8f 	bl	800c9a8 <isH>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00c      	beq.n	800d2aa <scpiLex_NondecimalNumericData+0x5c>
                state->pos++;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	1c5a      	adds	r2, r3, #1
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	605a      	str	r2, [r3, #4]
                someNumbers = skipHexNum(state);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7ff ff6a 	bl	800d174 <skipHexNum>
 800d2a0:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_HEXNUM;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2206      	movs	r2, #6
 800d2a6:	701a      	strb	r2, [r3, #0]
 800d2a8:	e02a      	b.n	800d300 <scpiLex_NondecimalNumericData+0xb2>
            } else if (isQ(state->pos[0])) {
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7ff fb9f 	bl	800c9f4 <isQ>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00c      	beq.n	800d2d6 <scpiLex_NondecimalNumericData+0x88>
                state->pos++;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	1c5a      	adds	r2, r3, #1
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	605a      	str	r2, [r3, #4]
                someNumbers = skipOctNum(state);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f7ff ff7b 	bl	800d1c2 <skipOctNum>
 800d2cc:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_OCTNUM;
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	2207      	movs	r2, #7
 800d2d2:	701a      	strb	r2, [r3, #0]
 800d2d4:	e014      	b.n	800d300 <scpiLex_NondecimalNumericData+0xb2>
            } else if (isB(state->pos[0])) {
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff fb76 	bl	800c9ce <isB>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00b      	beq.n	800d300 <scpiLex_NondecimalNumericData+0xb2>
                state->pos++;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	1c5a      	adds	r2, r3, #1
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	605a      	str	r2, [r3, #4]
                someNumbers = skipBinNum(state);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7ff ff88 	bl	800d208 <skipBinNum>
 800d2f8:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_BINNUM;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	2208      	movs	r2, #8
 800d2fe:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (someNumbers) {
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00d      	beq.n	800d322 <scpiLex_NondecimalNumericData+0xd4>
        token->ptr += 2; /* ignore number prefix */
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	1c9a      	adds	r2, r3, #2
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	605a      	str	r2, [r3, #4]
        token->len = state->pos - token->ptr;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	461a      	mov	r2, r3
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	1ad2      	subs	r2, r2, r3
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	609a      	str	r2, [r3, #8]
 800d320:	e009      	b.n	800d336 <scpiLex_NondecimalNumericData+0xe8>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	221a      	movs	r2, #26
 800d326:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	685a      	ldr	r2, [r3, #4]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	2200      	movs	r2, #0
 800d334:	609a      	str	r2, [r3, #8]
    }
    return token->len > 0 ? token->len + 2 : 0;
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	dd03      	ble.n	800d346 <scpiLex_NondecimalNumericData+0xf8>
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	3302      	adds	r3, #2
 800d344:	e000      	b.n	800d348 <scpiLex_NondecimalNumericData+0xfa>
 800d346:	2300      	movs	r3, #0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <isascii7bit>:

/* 7.7.5 <STRING PROGRAM DATA> */
static int isascii7bit(int c) {
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
    return (c >= 0) && (c <= 0x7f);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	db04      	blt.n	800d368 <isascii7bit+0x18>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b7f      	cmp	r3, #127	; 0x7f
 800d362:	dc01      	bgt.n	800d368 <isascii7bit+0x18>
 800d364:	2301      	movs	r3, #1
 800d366:	e000      	b.n	800d36a <isascii7bit+0x1a>
 800d368:	2300      	movs	r3, #0
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr

0800d376 <skipQuoteProgramData>:

static void skipQuoteProgramData(lex_state_t * state, char quote) {
 800d376:	b580      	push	{r7, lr}
 800d378:	b082      	sub	sp, #8
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	460b      	mov	r3, r1
 800d380:	70fb      	strb	r3, [r7, #3]
    while (!iseos(state)) {
 800d382:	e03d      	b.n	800d400 <skipQuoteProgramData+0x8a>
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff ffe0 	bl	800d350 <isascii7bit>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00d      	beq.n	800d3b2 <skipQuoteProgramData+0x3c>
 800d396:	78fb      	ldrb	r3, [r7, #3]
 800d398:	4619      	mov	r1, r3
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f7ff fadc 	bl	800c958 <ischr>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d105      	bne.n	800d3b2 <skipQuoteProgramData+0x3c>
            state->pos++;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	605a      	str	r2, [r3, #4]
 800d3b0:	e026      	b.n	800d400 <skipQuoteProgramData+0x8a>
        } else if (ischr(state, quote)) {
 800d3b2:	78fb      	ldrb	r3, [r7, #3]
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7ff face 	bl	800c958 <ischr>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d025      	beq.n	800d40e <skipQuoteProgramData+0x98>
            state->pos++;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	1c5a      	adds	r2, r3, #1
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	605a      	str	r2, [r3, #4]
            if (!iseos(state) && ischr(state, quote)) {
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff faa1 	bl	800c914 <iseos>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d10d      	bne.n	800d3f4 <skipQuoteProgramData+0x7e>
 800d3d8:	78fb      	ldrb	r3, [r7, #3]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f7ff fabb 	bl	800c958 <ischr>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d005      	beq.n	800d3f4 <skipQuoteProgramData+0x7e>
                state->pos++;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	1c5a      	adds	r2, r3, #1
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	605a      	str	r2, [r3, #4]
 800d3f2:	e005      	b.n	800d400 <skipQuoteProgramData+0x8a>
            } else {
                state->pos--;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	1e5a      	subs	r2, r3, #1
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	605a      	str	r2, [r3, #4]
                break;
 800d3fe:	e007      	b.n	800d410 <skipQuoteProgramData+0x9a>
    while (!iseos(state)) {
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7ff fa87 	bl	800c914 <iseos>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d0bb      	beq.n	800d384 <skipQuoteProgramData+0xe>
            }
        } else {
            break;
        }
    }
}
 800d40c:	e000      	b.n	800d410 <skipQuoteProgramData+0x9a>
            break;
 800d40e:	bf00      	nop
}
 800d410:	bf00      	nop
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <skipDoubleQuoteProgramData>:

static void skipDoubleQuoteProgramData(lex_state_t * state) {
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '"');
 800d420:	2122      	movs	r1, #34	; 0x22
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7ff ffa7 	bl	800d376 <skipQuoteProgramData>
}
 800d428:	bf00      	nop
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <skipSingleQuoteProgramData>:

static void skipSingleQuoteProgramData(lex_state_t * state) {
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '\'');
 800d438:	2127      	movs	r1, #39	; 0x27
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7ff ff9b 	bl	800d376 <skipQuoteProgramData>
}
 800d440:	bf00      	nop
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <scpiLex_StringProgramData>:
 * Detect token String data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	685a      	ldr	r2, [r3, #4]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	605a      	str	r2, [r3, #4]

    if (!iseos(state)) {
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f7ff fa5a 	bl	800c914 <iseos>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d162      	bne.n	800d52c <scpiLex_StringProgramData+0xe4>
        if (ischr(state, '"')) {
 800d466:	2122      	movs	r1, #34	; 0x22
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f7ff fa75 	bl	800c958 <ischr>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d02a      	beq.n	800d4ca <scpiLex_StringProgramData+0x82>
            state->pos++;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	1c5a      	adds	r2, r3, #1
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	220f      	movs	r2, #15
 800d482:	701a      	strb	r2, [r3, #0]
            skipDoubleQuoteProgramData(state);
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff ffc7 	bl	800d418 <skipDoubleQuoteProgramData>
            if (!iseos(state) && ischr(state, '"')) {
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f7ff fa42 	bl	800c914 <iseos>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d114      	bne.n	800d4c0 <scpiLex_StringProgramData+0x78>
 800d496:	2122      	movs	r1, #34	; 0x22
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7ff fa5d 	bl	800c958 <ischr>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00d      	beq.n	800d4c0 <scpiLex_StringProgramData+0x78>
                state->pos++;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	1c5a      	adds	r2, r3, #1
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	1ad2      	subs	r2, r2, r3
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	609a      	str	r2, [r3, #8]
 800d4be:	e035      	b.n	800d52c <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	605a      	str	r2, [r3, #4]
 800d4c8:	e030      	b.n	800d52c <scpiLex_StringProgramData+0xe4>
            }
        } else if (ischr(state, '\'')) {
 800d4ca:	2127      	movs	r1, #39	; 0x27
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f7ff fa43 	bl	800c958 <ischr>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d029      	beq.n	800d52c <scpiLex_StringProgramData+0xe4>
            state->pos++;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	1c5a      	adds	r2, r3, #1
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	220e      	movs	r2, #14
 800d4e6:	701a      	strb	r2, [r3, #0]
            skipSingleQuoteProgramData(state);
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f7ff ffa1 	bl	800d430 <skipSingleQuoteProgramData>
            if (!iseos(state) && ischr(state, '\'')) {
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7ff fa10 	bl	800c914 <iseos>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d114      	bne.n	800d524 <scpiLex_StringProgramData+0xdc>
 800d4fa:	2127      	movs	r1, #39	; 0x27
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f7ff fa2b 	bl	800c958 <ischr>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00d      	beq.n	800d524 <scpiLex_StringProgramData+0xdc>
                state->pos++;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	1c5a      	adds	r2, r3, #1
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	461a      	mov	r2, r3
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	1ad2      	subs	r2, r2, r3
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	609a      	str	r2, [r3, #8]
 800d522:	e003      	b.n	800d52c <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	685a      	ldr	r2, [r3, #4]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	605a      	str	r2, [r3, #4]
            }
        }
    }

    token->len = state->pos - token->ptr;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	461a      	mov	r2, r3
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	1ad2      	subs	r2, r2, r3
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	689b      	ldr	r3, [r3, #8]
 800d540:	2b00      	cmp	r3, #0
 800d542:	dc09      	bgt.n	800d558 <scpiLex_StringProgramData+0x110>
        /* token->ptr++;
         * token->len -= 2; */
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	221a      	movs	r2, #26
 800d548:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	685a      	ldr	r2, [r3, #4]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	2200      	movs	r2, #0
 800d556:	609a      	str	r2, [r3, #8]
    }

    return token->len > 0 ? token->len : 0;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800d560:	4618      	mov	r0, r3
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <isNonzeroDigit>:

/* 7.7.6 <ARBITRARY BLOCK PROGRAM DATA> */
static int isNonzeroDigit(int c) {
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
    return isdigit(c) && (c != '0');
 800d570:	f004 f878 	bl	8011664 <__locale_ctype_ptr>
 800d574:	4602      	mov	r2, r0
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	3301      	adds	r3, #1
 800d57a:	4413      	add	r3, r2
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	f003 0304 	and.w	r3, r3, #4
 800d582:	2b00      	cmp	r3, #0
 800d584:	d004      	beq.n	800d590 <isNonzeroDigit+0x28>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2b30      	cmp	r3, #48	; 0x30
 800d58a:	d001      	beq.n	800d590 <isNonzeroDigit+0x28>
 800d58c:	2301      	movs	r3, #1
 800d58e:	e000      	b.n	800d592 <isNonzeroDigit+0x2a>
 800d590:	2300      	movs	r3, #0
}
 800d592:	4618      	mov	r0, r3
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <scpiLex_ArbitraryBlockProgramData>:
 * Detect token Block Data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b086      	sub	sp, #24
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
 800d5a2:	6039      	str	r1, [r7, #0]
    int i;
    int arbitraryBlockLength = 0;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	613b      	str	r3, [r7, #16]
    const char * ptr = state->pos;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	60bb      	str	r3, [r7, #8]
    int validData = -1;
 800d5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d5b2:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	685a      	ldr	r2, [r3, #4]
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	605a      	str	r2, [r3, #4]

    if (skipChr(state, '#')) {
 800d5bc:	2123      	movs	r1, #35	; 0x23
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7ff faf1 	bl	800cba6 <skipChr>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d079      	beq.n	800d6be <scpiLex_ArbitraryBlockProgramData+0x124>
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f7ff f9a2 	bl	800c914 <iseos>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d169      	bne.n	800d6aa <scpiLex_ArbitraryBlockProgramData+0x110>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7ff ffc3 	bl	800d568 <isNonzeroDigit>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d060      	beq.n	800d6aa <scpiLex_ArbitraryBlockProgramData+0x110>
            /* Get number of digits */
            i = state->pos[0] - '0';
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	3b30      	subs	r3, #48	; 0x30
 800d5f0:	617b      	str	r3, [r7, #20]
            state->pos++;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	1c5a      	adds	r2, r3, #1
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	605a      	str	r2, [r3, #4]

            for (; i > 0; i--) {
 800d5fc:	e027      	b.n	800d64e <scpiLex_ArbitraryBlockProgramData+0xb4>
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f7ff f988 	bl	800c914 <iseos>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d124      	bne.n	800d654 <scpiLex_ArbitraryBlockProgramData+0xba>
 800d60a:	f004 f82b 	bl	8011664 <__locale_ctype_ptr>
 800d60e:	4602      	mov	r2, r0
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	3301      	adds	r3, #1
 800d618:	4413      	add	r3, r2
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	f003 0304 	and.w	r3, r3, #4
 800d620:	2b00      	cmp	r3, #0
 800d622:	d017      	beq.n	800d654 <scpiLex_ArbitraryBlockProgramData+0xba>
                    arbitraryBlockLength *= 10;
 800d624:	693a      	ldr	r2, [r7, #16]
 800d626:	4613      	mov	r3, r2
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	4413      	add	r3, r2
 800d62c:	005b      	lsls	r3, r3, #1
 800d62e:	613b      	str	r3, [r7, #16]
                    arbitraryBlockLength += (state->pos[0] - '0');
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	3b30      	subs	r3, #48	; 0x30
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	4413      	add	r3, r2
 800d63c:	613b      	str	r3, [r7, #16]
                    state->pos++;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	1c5a      	adds	r2, r3, #1
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	605a      	str	r2, [r3, #4]
            for (; i > 0; i--) {
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	3b01      	subs	r3, #1
 800d64c:	617b      	str	r3, [r7, #20]
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2b00      	cmp	r3, #0
 800d652:	dcd4      	bgt.n	800d5fe <scpiLex_ArbitraryBlockProgramData+0x64>
                } else {
                    break;
                }
            }

            if (i == 0) {
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d11e      	bne.n	800d698 <scpiLex_ArbitraryBlockProgramData+0xfe>
                state->pos += arbitraryBlockLength;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	685a      	ldr	r2, [r3, #4]
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	441a      	add	r2, r3
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	605a      	str	r2, [r3, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	6892      	ldr	r2, [r2, #8]
 800d66e:	441a      	add	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	429a      	cmp	r2, r3
 800d676:	d30c      	bcc.n	800d692 <scpiLex_ArbitraryBlockProgramData+0xf8>
                    token->ptr = state->pos - arbitraryBlockLength;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	685a      	ldr	r2, [r3, #4]
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	425b      	negs	r3, r3
 800d680:	441a      	add	r2, r3
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	605a      	str	r2, [r3, #4]
                    token->len = arbitraryBlockLength;
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	693a      	ldr	r2, [r7, #16]
 800d68a:	609a      	str	r2, [r3, #8]
                    validData = 1;
 800d68c:	2301      	movs	r3, #1
 800d68e:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 800d690:	e014      	b.n	800d6bc <scpiLex_ArbitraryBlockProgramData+0x122>
                } else {
                    validData = 0;
 800d692:	2300      	movs	r3, #0
 800d694:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 800d696:	e011      	b.n	800d6bc <scpiLex_ArbitraryBlockProgramData+0x122>
                }
            } else if (iseos(state)) {
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f7ff f93b 	bl	800c914 <iseos>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00b      	beq.n	800d6bc <scpiLex_ArbitraryBlockProgramData+0x122>
                validData = 0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 800d6a8:	e008      	b.n	800d6bc <scpiLex_ArbitraryBlockProgramData+0x122>
            }
        } else if (iseos(state)) {
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7ff f932 	bl	800c914 <iseos>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d003      	beq.n	800d6be <scpiLex_ArbitraryBlockProgramData+0x124>
            validData = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	60fb      	str	r3, [r7, #12]
 800d6ba:	e000      	b.n	800d6be <scpiLex_ArbitraryBlockProgramData+0x124>
            if (i == 0) {
 800d6bc:	bf00      	nop
        }
    }

    if (validData == 1) {
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d103      	bne.n	800d6cc <scpiLex_ArbitraryBlockProgramData+0x132>
        /* valid */
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	220d      	movs	r2, #13
 800d6c8:	701a      	strb	r2, [r3, #0]
 800d6ca:	e01a      	b.n	800d702 <scpiLex_ArbitraryBlockProgramData+0x168>
    } else if (validData == 0) {
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d10d      	bne.n	800d6ee <scpiLex_ArbitraryBlockProgramData+0x154>
        /* incomplete */
        token->type = SCPI_TOKEN_UNKNOWN;
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	221a      	movs	r2, #26
 800d6d6:	701a      	strb	r2, [r3, #0]
        token->len = 0;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	609a      	str	r2, [r3, #8]
        state->pos = state->buffer + state->len;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	6892      	ldr	r2, [r2, #8]
 800d6e6:	441a      	add	r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	605a      	str	r2, [r3, #4]
 800d6ec:	e009      	b.n	800d702 <scpiLex_ArbitraryBlockProgramData+0x168>
    } else {
        /* invalid */
        token->type = SCPI_TOKEN_UNKNOWN;
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	221a      	movs	r2, #26
 800d6f2:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	685a      	ldr	r2, [r3, #4]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	2200      	movs	r2, #0
 800d700:	609a      	str	r2, [r3, #8]
    }

    return token->len + (token->ptr - ptr);
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	689a      	ldr	r2, [r3, #8]
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	685b      	ldr	r3, [r3, #4]
 800d70a:	4619      	mov	r1, r3
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	1acb      	subs	r3, r1, r3
 800d710:	4413      	add	r3, r2
}
 800d712:	4618      	mov	r0, r3
 800d714:	3718      	adds	r7, #24
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <isProgramExpression>:

/* 7.7.7 <EXPRESSION PROGRAM DATA> */
static int isProgramExpression(int c) {
 800d71a:	b480      	push	{r7}
 800d71c:	b083      	sub	sp, #12
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
    if ((c >= 0x20) && (c <= 0x7e)) {
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2b1f      	cmp	r3, #31
 800d726:	dd16      	ble.n	800d756 <isProgramExpression+0x3c>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b7e      	cmp	r3, #126	; 0x7e
 800d72c:	dc13      	bgt.n	800d756 <isProgramExpression+0x3c>
        if ((c != '"')
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2b22      	cmp	r3, #34	; 0x22
 800d732:	d010      	beq.n	800d756 <isProgramExpression+0x3c>
                && (c != '#')
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b23      	cmp	r3, #35	; 0x23
 800d738:	d00d      	beq.n	800d756 <isProgramExpression+0x3c>
                && (c != '\'')
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2b27      	cmp	r3, #39	; 0x27
 800d73e:	d00a      	beq.n	800d756 <isProgramExpression+0x3c>
                && (c != '(')
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2b28      	cmp	r3, #40	; 0x28
 800d744:	d007      	beq.n	800d756 <isProgramExpression+0x3c>
                && (c != ')')
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2b29      	cmp	r3, #41	; 0x29
 800d74a:	d004      	beq.n	800d756 <isProgramExpression+0x3c>
                && (c != ';')) {
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b3b      	cmp	r3, #59	; 0x3b
 800d750:	d001      	beq.n	800d756 <isProgramExpression+0x3c>
            return 1;
 800d752:	2301      	movs	r3, #1
 800d754:	e000      	b.n	800d758 <isProgramExpression+0x3e>
        }
    }

    return 0;
 800d756:	2300      	movs	r3, #0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <skipProgramExpression>:

static void skipProgramExpression(lex_state_t * state) {
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 800d76c:	e004      	b.n	800d778 <skipProgramExpression+0x14>
        state->pos++;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	1c5a      	adds	r2, r3, #1
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	605a      	str	r2, [r3, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7ff f8cb 	bl	800c914 <iseos>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d108      	bne.n	800d796 <skipProgramExpression+0x32>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7ff ffc5 	bl	800d71a <isProgramExpression>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d1eb      	bne.n	800d76e <skipProgramExpression+0xa>
    }
}
 800d796:	bf00      	nop
 800d798:	3708      	adds	r7, #8
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}

0800d79e <scpiLex_ProgramExpression>:
 * Detect token Expression
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 800d79e:	b580      	push	{r7, lr}
 800d7a0:	b082      	sub	sp, #8
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
 800d7a6:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	685a      	ldr	r2, [r3, #4]
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && ischr(state, '(')) {
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f7ff f8af 	bl	800c914 <iseos>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d12c      	bne.n	800d816 <scpiLex_ProgramExpression+0x78>
 800d7bc:	2128      	movs	r1, #40	; 0x28
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7ff f8ca 	bl	800c958 <ischr>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d025      	beq.n	800d816 <scpiLex_ProgramExpression+0x78>
        state->pos++;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	1c5a      	adds	r2, r3, #1
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	605a      	str	r2, [r3, #4]
        skipProgramExpression(state);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f7ff ffc5 	bl	800d764 <skipProgramExpression>

        if (!iseos(state) && ischr(state, ')')) {
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7ff f89a 	bl	800c914 <iseos>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d114      	bne.n	800d810 <scpiLex_ProgramExpression+0x72>
 800d7e6:	2129      	movs	r1, #41	; 0x29
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f7ff f8b5 	bl	800c958 <ischr>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00d      	beq.n	800d810 <scpiLex_ProgramExpression+0x72>
            state->pos++;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	605a      	str	r2, [r3, #4]
            token->len = state->pos - token->ptr;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	461a      	mov	r2, r3
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	1ad2      	subs	r2, r2, r3
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	609a      	str	r2, [r3, #8]
 800d80e:	e002      	b.n	800d816 <scpiLex_ProgramExpression+0x78>
        } else {
            token->len = 0;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	2200      	movs	r2, #0
 800d814:	609a      	str	r2, [r3, #8]
        }
    }

    if ((token->len > 0)) {
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	689b      	ldr	r3, [r3, #8]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	dd03      	ble.n	800d826 <scpiLex_ProgramExpression+0x88>
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	2210      	movs	r2, #16
 800d822:	701a      	strb	r2, [r3, #0]
 800d824:	e009      	b.n	800d83a <scpiLex_ProgramExpression+0x9c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	221a      	movs	r2, #26
 800d82a:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	685a      	ldr	r2, [r3, #4]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	2200      	movs	r2, #0
 800d838:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	689b      	ldr	r3, [r3, #8]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <scpiLex_Comma>:
 * Detect token comma
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
 800d846:	b580      	push	{r7, lr}
 800d848:	b082      	sub	sp, #8
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	685a      	ldr	r2, [r3, #4]
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ',')) {
 800d858:	212c      	movs	r1, #44	; 0x2c
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f7ff f9a3 	bl	800cba6 <skipChr>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d006      	beq.n	800d874 <scpiLex_Comma+0x2e>
        token->len = 1;
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	2201      	movs	r2, #1
 800d86a:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_COMMA;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	2200      	movs	r2, #0
 800d870:	701a      	strb	r2, [r3, #0]
 800d872:	e005      	b.n	800d880 <scpiLex_Comma+0x3a>
    } else {
        token->len = 0;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	2200      	movs	r2, #0
 800d878:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	221a      	movs	r2, #26
 800d87e:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	689b      	ldr	r3, [r3, #8]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <scpiLex_Semicolon>:
 * Detect token semicolon
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	685a      	ldr	r2, [r3, #4]
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ';')) {
 800d89e:	213b      	movs	r1, #59	; 0x3b
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7ff f980 	bl	800cba6 <skipChr>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d006      	beq.n	800d8ba <scpiLex_Semicolon+0x2e>
        token->len = 1;
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_SEMICOLON;
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	701a      	strb	r2, [r3, #0]
 800d8b8:	e005      	b.n	800d8c6 <scpiLex_Semicolon+0x3a>
    } else {
        token->len = 0;
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	221a      	movs	r2, #26
 800d8c4:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	689b      	ldr	r3, [r3, #8]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3708      	adds	r7, #8
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b082      	sub	sp, #8
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
 800d8da:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	685a      	ldr	r2, [r3, #4]
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	605a      	str	r2, [r3, #4]

    skipChr(state, '\r');
 800d8e4:	210d      	movs	r1, #13
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff f95d 	bl	800cba6 <skipChr>
    skipChr(state, '\n');
 800d8ec:	210a      	movs	r1, #10
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7ff f959 	bl	800cba6 <skipChr>

    token->len = state->pos - token->ptr;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	1ad2      	subs	r2, r2, r3
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	dd03      	ble.n	800d914 <scpiLex_NewLine+0x42>
        token->type = SCPI_TOKEN_NL;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	2205      	movs	r2, #5
 800d910:	701a      	strb	r2, [r3, #0]
 800d912:	e009      	b.n	800d928 <scpiLex_NewLine+0x56>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	221a      	movs	r2, #26
 800d918:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	685a      	ldr	r2, [r3, #4]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	2200      	movs	r2, #0
 800d926:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	689b      	ldr	r3, [r3, #8]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
    SCPI_ResultMnemonic(context, SCPI_STD_VERSION_REVISION);
 800d93c:	2206      	movs	r2, #6
 800d93e:	4904      	ldr	r1, [pc, #16]	; (800d950 <SCPI_SystemVersionQ+0x1c>)
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 faed 	bl	800df20 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 800d946:	2301      	movs	r3, #1
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	08013c04 	.word	0x08013c04

0800d954 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    SCPI_ErrorPop(context, &error);
 800d95c:	f107 030c 	add.w	r3, r7, #12
 800d960:	4619      	mov	r1, r3
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7fe fa7c 	bl	800be60 <SCPI_ErrorPop>
    SCPI_ResultError(context, &error);
 800d968:	f107 030c 	add.w	r3, r7, #12
 800d96c:	4619      	mov	r1, r3
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f000 fbd4 	bl	800e11c <SCPI_ResultError>
#if USE_DEVICE_DEPENDENT_ERROR_INFORMATION
    SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
#endif
    return SCPI_RES_OK;
 800d974:	2301      	movs	r3, #1
}
 800d976:	4618      	mov	r0, r3
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}

0800d97e <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 800d97e:	b580      	push	{r7, lr}
 800d980:	b082      	sub	sp, #8
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_ErrorCount(context));
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f7fe fa88 	bl	800be9c <SCPI_ErrorCount>
 800d98c:	4603      	mov	r3, r0
 800d98e:	4619      	mov	r1, r3
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 fb4e 	bl	800e032 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 800d996:	2301      	movs	r3, #1
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	60b9      	str	r1, [r7, #8]
 800d9aa:	607a      	str	r2, [r7, #4]
    if (len > 0) {
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d008      	beq.n	800d9c4 <writeData+0x24>
        return context->interface->write(context, data, len);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	68b9      	ldr	r1, [r7, #8]
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	4798      	blx	r3
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	e000      	b.n	800d9c6 <writeData+0x26>
    } else {
        return 0;
 800d9c4:	2300      	movs	r3, #0
    }
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3710      	adds	r7, #16
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <flushData>:
/**
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b082      	sub	sp, #8
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->flush) {
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00f      	beq.n	800d9fc <flushData+0x2e>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <flushData+0x2e>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d006      	beq.n	800d9fc <flushData+0x2e>
        return context->interface->flush(context);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	4798      	blx	r3
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	e000      	b.n	800d9fe <flushData+0x30>
    } else {
        return SCPI_RES_OK;
 800d9fc:	2301      	movs	r3, #1
    }
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
	...

0800da08 <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da14:	2b00      	cmp	r3, #0
 800da16:	dd06      	ble.n	800da26 <writeDelimiter+0x1e>
        return writeData(context, ",", 1);
 800da18:	2201      	movs	r2, #1
 800da1a:	4905      	ldr	r1, [pc, #20]	; (800da30 <writeDelimiter+0x28>)
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f7ff ffbf 	bl	800d9a0 <writeData>
 800da22:	4603      	mov	r3, r0
 800da24:	e000      	b.n	800da28 <writeDelimiter+0x20>
    } else {
        return 0;
 800da26:	2300      	movs	r3, #0
    }
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3708      	adds	r7, #8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	08013c0c 	.word	0x08013c0c

0800da34 <writeNewLine>:
/**
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da40:	2b00      	cmp	r3, #0
 800da42:	dd0a      	ble.n	800da5a <writeNewLine+0x26>
        size_t len;
#ifndef SCPI_LINE_ENDING
#error no termination character defined
#endif
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
 800da44:	2202      	movs	r2, #2
 800da46:	4907      	ldr	r1, [pc, #28]	; (800da64 <writeNewLine+0x30>)
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7ff ffa9 	bl	800d9a0 <writeData>
 800da4e:	60f8      	str	r0, [r7, #12]
        flushData(context);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff ffbc 	bl	800d9ce <flushData>
        return len;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	e000      	b.n	800da5c <writeNewLine+0x28>
    } else {
        return 0;
 800da5a:	2300      	movs	r3, #0
    }
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	08013c10 	.word	0x08013c10

0800da68 <writeSemicolon>:
/**
 * Conditionaly write ";"
 * @param context
 * @return number of characters written
 */
static size_t writeSemicolon(scpi_t * context) {
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da74:	2b00      	cmp	r3, #0
 800da76:	dd06      	ble.n	800da86 <writeSemicolon+0x1e>
        return writeData(context, ";", 1);
 800da78:	2201      	movs	r2, #1
 800da7a:	4905      	ldr	r1, [pc, #20]	; (800da90 <writeSemicolon+0x28>)
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f7ff ff8f 	bl	800d9a0 <writeData>
 800da82:	4603      	mov	r3, r0
 800da84:	e000      	b.n	800da88 <writeSemicolon+0x20>
    } else {
        return 0;
 800da86:	2300      	movs	r3, #0
    }
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	08013c14 	.word	0x08013c14

0800da94 <processCommand>:

/**
 * Process command
 * @param context
 */
static scpi_bool_t processCommand(scpi_t * context) {
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
    const scpi_command_t * cmd = context->param_list.cmd;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	691b      	ldr	r3, [r3, #16]
 800daa0:	613b      	str	r3, [r7, #16]
    lex_state_t * state = &context->param_list.lex_state;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	3314      	adds	r3, #20
 800daa6:	60fb      	str	r3, [r7, #12]
    scpi_bool_t result = TRUE;
 800daa8:	2301      	movs	r3, #1
 800daaa:	75fb      	strb	r3, [r7, #23]

    /* conditionaly write ; */
    writeSemicolon(context);
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f7ff ffdb 	bl	800da68 <writeSemicolon>

    context->cmd_error = FALSE;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    context->output_count = 0;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	631a      	str	r2, [r3, #48]	; 0x30
    context->input_count = 0;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2200      	movs	r2, #0
 800dac4:	635a      	str	r2, [r3, #52]	; 0x34
    context->arbitrary_reminding = 0;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d01d      	beq.n	800db12 <processCommand+0x7e>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	4798      	blx	r3
 800dade:	4603      	mov	r3, r0
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d00f      	beq.n	800db04 <processCommand+0x70>
            if (!context->cmd_error) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800daea:	f083 0301 	eor.w	r3, r3, #1
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d004      	beq.n	800dafe <processCommand+0x6a>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 800daf4:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f7fe fa93 	bl	800c024 <SCPI_ErrorPush>
            }
            result = FALSE;
 800dafe:	2300      	movs	r3, #0
 800db00:	75fb      	strb	r3, [r7, #23]
 800db02:	e006      	b.n	800db12 <processCommand+0x7e>
        } else {
            if (context->cmd_error) {
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d001      	beq.n	800db12 <processCommand+0x7e>
                result = FALSE;
 800db0e:	2300      	movs	r3, #0
 800db10:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    /* set error if command callback did not read all parameters */
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	685a      	ldr	r2, [r3, #4]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68f9      	ldr	r1, [r7, #12]
 800db1c:	6889      	ldr	r1, [r1, #8]
 800db1e:	440b      	add	r3, r1
 800db20:	429a      	cmp	r2, r3
 800db22:	d20e      	bcs.n	800db42 <processCommand+0xae>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800db2a:	f083 0301 	eor.w	r3, r3, #1
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	2b00      	cmp	r3, #0
 800db32:	d006      	beq.n	800db42 <processCommand+0xae>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 800db34:	f06f 016b 	mvn.w	r1, #107	; 0x6b
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f7fe fa73 	bl	800c024 <SCPI_ErrorPush>
        result = FALSE;
 800db3e:	2300      	movs	r3, #0
 800db40:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 800db42:	7dfb      	ldrb	r3, [r7, #23]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3718      	adds	r7, #24
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <findCommandHeader>:
/**
 * Cycle all patterns and search matching pattern. Execute command callback.
 * @param context
 * @result TRUE if context->paramlist is filled with correct values
 */
static scpi_bool_t findCommandHeader(scpi_t * context, const char * header, int len) {
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b088      	sub	sp, #32
 800db50:	af02      	add	r7, sp, #8
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	607a      	str	r2, [r7, #4]
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 800db58:	2300      	movs	r3, #0
 800db5a:	617b      	str	r3, [r7, #20]
 800db5c:	e01e      	b.n	800db9c <findCommandHeader+0x50>
        cmd = &context->cmdlist[i];
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6819      	ldr	r1, [r3, #0]
 800db62:	697a      	ldr	r2, [r7, #20]
 800db64:	4613      	mov	r3, r2
 800db66:	005b      	lsls	r3, r3, #1
 800db68:	4413      	add	r3, r2
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	440b      	add	r3, r1
 800db6e:	613b      	str	r3, [r7, #16]
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	6818      	ldr	r0, [r3, #0]
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	2300      	movs	r3, #0
 800db78:	9301      	str	r3, [sp, #4]
 800db7a:	2300      	movs	r3, #0
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	2300      	movs	r3, #0
 800db80:	68b9      	ldr	r1, [r7, #8]
 800db82:	f001 fc26 	bl	800f3d2 <matchCommand>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d004      	beq.n	800db96 <findCommandHeader+0x4a>
            context->param_list.cmd = cmd;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	693a      	ldr	r2, [r7, #16]
 800db90:	611a      	str	r2, [r3, #16]
            return TRUE;
 800db92:	2301      	movs	r3, #1
 800db94:	e00e      	b.n	800dbb4 <findCommandHeader+0x68>
    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	3301      	adds	r3, #1
 800db9a:	617b      	str	r3, [r7, #20]
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6819      	ldr	r1, [r3, #0]
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	4613      	mov	r3, r2
 800dba4:	005b      	lsls	r3, r3, #1
 800dba6:	4413      	add	r3, r2
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	440b      	add	r3, r1
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d1d5      	bne.n	800db5e <findCommandHeader+0x12>
        }
    }
    return FALSE;
 800dbb2:	2300      	movs	r3, #0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3718      	adds	r7, #24
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return FALSE if there was some error during evaluation of commands
 */
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b08c      	sub	sp, #48	; 0x30
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    scpi_parser_state_t * state;
    int r;
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 800dbce:	231a      	movs	r3, #26
 800dbd0:	753b      	strb	r3, [r7, #20]
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	61bb      	str	r3, [r7, #24]
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	61fb      	str	r3, [r7, #28]

    if (context == NULL) {
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d101      	bne.n	800dbe4 <SCPI_Parse+0x28>
        return FALSE;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	e093      	b.n	800dd0c <SCPI_Parse+0x150>
    }

    state = &context->parser_state;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	3364      	adds	r3, #100	; 0x64
 800dbe8:	627b      	str	r3, [r7, #36]	; 0x24
    context->output_count = 0;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2200      	movs	r2, #0
 800dbee:	631a      	str	r2, [r3, #48]	; 0x30

    while (1) {
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 800dbf0:	687a      	ldr	r2, [r7, #4]
 800dbf2:	68b9      	ldr	r1, [r7, #8]
 800dbf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbf6:	f001 f806 	bl	800ec06 <scpiParser_detectProgramMessageUnit>
 800dbfa:	6238      	str	r0, [r7, #32]

        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	2b19      	cmp	r3, #25
 800dc02:	d10c      	bne.n	800dc1e <SCPI_Parse+0x62>
            if (result != FALSE)
 800dc04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d004      	beq.n	800dc16 <SCPI_Parse+0x5a>
                SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER); // EDIT
 800dc0c:	f06f 0164 	mvn.w	r1, #100	; 0x64
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f7fe fa07 	bl	800c024 <SCPI_ErrorPush>
            result = FALSE;
 800dc16:	2300      	movs	r3, #0
 800dc18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dc1c:	e063      	b.n	800dce6 <SCPI_Parse+0x12a>
        } else if (state->programHeader.len > 0) {
 800dc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	dd5f      	ble.n	800dce6 <SCPI_Parse+0x12a>

            composeCompoundCommand(&cmd_prev, &state->programHeader);
 800dc26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc28:	f107 0314 	add.w	r3, r7, #20
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f001 fd98 	bl	800f764 <composeCompoundCommand>

            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc36:	6859      	ldr	r1, [r3, #4]
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f7ff ff84 	bl	800db4c <findCommandHeader>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d02c      	beq.n	800dca4 <SCPI_Parse+0xe8>

                context->param_list.lex_state.buffer = state->programData.ptr;
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4c:	691a      	ldr	r2, [r3, #16]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	615a      	str	r2, [r3, #20]
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	695a      	ldr	r2, [r3, #20]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	619a      	str	r2, [r3, #24]
                context->param_list.lex_state.len = state->programData.len;
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	695a      	ldr	r2, [r3, #20]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	61da      	str	r2, [r3, #28]
                context->param_list.cmd_raw.data = state->programHeader.ptr;
 800dc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc64:	685a      	ldr	r2, [r3, #4]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	629a      	str	r2, [r3, #40]	; 0x28
                context->param_list.cmd_raw.position = 0;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	625a      	str	r2, [r3, #36]	; 0x24
                context->param_list.cmd_raw.length = state->programHeader.len;
 800dc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	461a      	mov	r2, r3
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	621a      	str	r2, [r3, #32]

                result &= processCommand(context);
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f7ff ff0a 	bl	800da94 <processCommand>
 800dc80:	4603      	mov	r3, r0
 800dc82:	461a      	mov	r2, r3
 800dc84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc88:	4013      	ands	r3, r2
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	bf14      	ite	ne
 800dc8e:	2301      	movne	r3, #1
 800dc90:	2300      	moveq	r3, #0
 800dc92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                cmd_prev = state->programHeader;
 800dc96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc98:	f107 0314 	add.w	r3, r7, #20
 800dc9c:	ca07      	ldmia	r2, {r0, r1, r2}
 800dc9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dca2:	e020      	b.n	800dce6 <SCPI_Parse+0x12a>
            } else {
                /* place undefined header with error */
                /* calculate length of errornouse header and trim \r\n */
                size_t r2 = r;
 800dca4:	6a3b      	ldr	r3, [r7, #32]
 800dca6:	62bb      	str	r3, [r7, #40]	; 0x28
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
 800dca8:	e002      	b.n	800dcb0 <SCPI_Parse+0xf4>
 800dcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcac:	3b01      	subs	r3, #1
 800dcae:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00d      	beq.n	800dcd2 <SCPI_Parse+0x116>
 800dcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	68ba      	ldr	r2, [r7, #8]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	2b0d      	cmp	r3, #13
 800dcc2:	d0f2      	beq.n	800dcaa <SCPI_Parse+0xee>
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	3b01      	subs	r3, #1
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	4413      	add	r3, r2
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	2b0a      	cmp	r3, #10
 800dcd0:	d0eb      	beq.n	800dcaa <SCPI_Parse+0xee>
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
 800dcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	f06f 0170 	mvn.w	r1, #112	; 0x70
 800dcda:	68f8      	ldr	r0, [r7, #12]
 800dcdc:	f7fe f926 	bl	800bf2c <SCPI_ErrorPushEx>
                result = FALSE;
 800dce0:	2300      	movs	r3, #0
 800dce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        if (r < len) {
 800dce6:	6a3a      	ldr	r2, [r7, #32]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	da08      	bge.n	800dd00 <SCPI_Parse+0x144>
            data += r;
 800dcee:	6a3b      	ldr	r3, [r7, #32]
 800dcf0:	68ba      	ldr	r2, [r7, #8]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	60bb      	str	r3, [r7, #8]
            len -= r;
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	6a3b      	ldr	r3, [r7, #32]
 800dcfa:	1ad3      	subs	r3, r2, r3
 800dcfc:	607b      	str	r3, [r7, #4]
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 800dcfe:	e777      	b.n	800dbf0 <SCPI_Parse+0x34>
        } else {
            break;
 800dd00:	bf00      	nop
        }

    }

    /* conditionaly write new line */
    writeNewLine(context);
 800dd02:	68f8      	ldr	r0, [r7, #12]
 800dd04:	f7ff fe96 	bl	800da34 <writeNewLine>

    return result;
 800dd08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3730      	adds	r7, #48	; 0x30
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <SCPI_Init>:
        const scpi_command_t * commands,
        scpi_interface_t * interface,
        const scpi_unit_def_t * units,
        const char * idn1, const char * idn2, const char * idn3, const char * idn4,
        char * input_buffer, size_t input_buffer_length,
        scpi_error_t * error_queue_data, int16_t error_queue_size, void* comm) {
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
 800dd20:	603b      	str	r3, [r7, #0]
    memset(context, 0, sizeof (*context));
 800dd22:	22d8      	movs	r2, #216	; 0xd8
 800dd24:	2100      	movs	r1, #0
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f003 fce0 	bl	80116ec <memset>
    context->cmdlist = commands;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	68ba      	ldr	r2, [r7, #8]
 800dd30:	601a      	str	r2, [r3, #0]
    context->interface = interface;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	687a      	ldr	r2, [r7, #4]
 800dd36:	62da      	str	r2, [r3, #44]	; 0x2c
    context->units = units;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	65da      	str	r2, [r3, #92]	; 0x5c
    context->idn[0] = idn1;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	69ba      	ldr	r2, [r7, #24]
 800dd42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    context->idn[1] = idn2;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	69fa      	ldr	r2, [r7, #28]
 800dd4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    context->idn[2] = idn3;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6a3a      	ldr	r2, [r7, #32]
 800dd52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    context->idn[3] = idn4;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 800dd64:	4b18      	ldr	r3, [pc, #96]	; (800ddc8 <SCPI_Init+0xb4>)
 800dd66:	69fa      	ldr	r2, [r7, #28]
 800dd68:	4918      	ldr	r1, [pc, #96]	; (800ddcc <SCPI_Init+0xb8>)
 800dd6a:	f003 fcc7 	bl	80116fc <siprintf>
    sprintf(context->idn5, "%s-%s", idn2, "USB");
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	f103 00b5 	add.w	r0, r3, #181	; 0xb5
 800dd74:	4b16      	ldr	r3, [pc, #88]	; (800ddd0 <SCPI_Init+0xbc>)
 800dd76:	69fa      	ldr	r2, [r7, #28]
 800dd78:	4914      	ldr	r1, [pc, #80]	; (800ddcc <SCPI_Init+0xb8>)
 800dd7a:	f003 fcbf 	bl	80116fc <siprintf>
    context->idn[4] = context->idn4;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    context->idn[5] = context->idn5;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    context->buffer.data = input_buffer;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd9a:	60da      	str	r2, [r3, #12]
    context->buffer.length = input_buffer_length;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dda0:	605a      	str	r2, [r3, #4]
    context->buffer.position = 0;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2200      	movs	r2, #0
 800dda6:	609a      	str	r2, [r3, #8]
    context->comm = comm;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddac:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 800ddb0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f7fd ffe3 	bl	800bd84 <SCPI_ErrorInit>
}
 800ddbe:	bf00      	nop
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	08013c18 	.word	0x08013c18
 800ddcc:	08013c20 	.word	0x08013c20
 800ddd0:	08013c28 	.word	0x08013c28

0800ddd4 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return
 */
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b088      	sub	sp, #32
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 800dde0:	2301      	movs	r3, #1
 800dde2:	77fb      	strb	r3, [r7, #31]
    size_t totcmdlen = 0;
 800dde4:	2300      	movs	r3, #0
 800dde6:	61bb      	str	r3, [r7, #24]
    int cmdlen = 0;
 800dde8:	2300      	movs	r3, #0
 800ddea:	617b      	str	r3, [r7, #20]

    if (len == 0) {
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d114      	bne.n	800de1c <SCPI_Input+0x48>
        context->buffer.data[context->buffer.position] = 0;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	68da      	ldr	r2, [r3, #12]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	689b      	ldr	r3, [r3, #8]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	701a      	strb	r2, [r3, #0]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	68d9      	ldr	r1, [r3, #12]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	461a      	mov	r2, r3
 800de0a:	68f8      	ldr	r0, [r7, #12]
 800de0c:	f7ff fed6 	bl	800dbbc <SCPI_Parse>
 800de10:	4603      	mov	r3, r0
 800de12:	77fb      	strb	r3, [r7, #31]
        context->buffer.position = 0;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2200      	movs	r2, #0
 800de18:	609a      	str	r2, [r3, #8]
 800de1a:	e07c      	b.n	800df16 <SCPI_Input+0x142>
    } else {
        int buffer_free;

        buffer_free = context->buffer.length - context->buffer.position;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	685a      	ldr	r2, [r3, #4]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	1ad3      	subs	r3, r2, r3
 800de26:	613b      	str	r3, [r7, #16]
        if (len > (buffer_free - 1)) {
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	3b01      	subs	r3, #1
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	429a      	cmp	r2, r3
 800de30:	dd10      	ble.n	800de54 <SCPI_Input+0x80>
            /* Input buffer overrun - invalidate buffer */
            context->buffer.position = 0;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	609a      	str	r2, [r3, #8]
            context->buffer.data[context->buffer.position] = 0;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	68da      	ldr	r2, [r3, #12]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	689b      	ldr	r3, [r3, #8]
 800de40:	4413      	add	r3, r2
 800de42:	2200      	movs	r2, #0
 800de44:	701a      	strb	r2, [r3, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 800de46:	f46f 71b5 	mvn.w	r1, #362	; 0x16a
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f7fe f8ea 	bl	800c024 <SCPI_ErrorPush>
            return FALSE;
 800de50:	2300      	movs	r3, #0
 800de52:	e061      	b.n	800df18 <SCPI_Input+0x144>
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	68da      	ldr	r2, [r3, #12]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	689b      	ldr	r3, [r3, #8]
 800de5c:	4413      	add	r3, r2
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	68b9      	ldr	r1, [r7, #8]
 800de62:	4618      	mov	r0, r3
 800de64:	f003 fc1e 	bl	80116a4 <memcpy>
        context->buffer.position += len;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	689a      	ldr	r2, [r3, #8]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	441a      	add	r2, r3
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	609a      	str	r2, [r3, #8]
        context->buffer.data[context->buffer.position] = 0;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	68da      	ldr	r2, [r3, #12]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	4413      	add	r3, r2
 800de7e:	2200      	movs	r2, #0
 800de80:	701a      	strb	r2, [r3, #0]


        while (1) {
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	68da      	ldr	r2, [r3, #12]
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	18d1      	adds	r1, r2, r3
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	689a      	ldr	r2, [r3, #8]
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	1ad3      	subs	r3, r2, r3
 800de98:	461a      	mov	r2, r3
 800de9a:	f000 feb4 	bl	800ec06 <scpiParser_detectProgramMessageUnit>
 800de9e:	6178      	str	r0, [r7, #20]
            totcmdlen += cmdlen;
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	69ba      	ldr	r2, [r7, #24]
 800dea4:	4413      	add	r3, r2
 800dea6:	61bb      	str	r3, [r7, #24]

            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d11e      	bne.n	800def0 <SCPI_Input+0x11c>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	69ba      	ldr	r2, [r7, #24]
 800deb8:	4619      	mov	r1, r3
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f7ff fe7e 	bl	800dbbc <SCPI_Parse>
 800dec0:	4603      	mov	r3, r0
 800dec2:	77fb      	strb	r3, [r7, #31]
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	68d8      	ldr	r0, [r3, #12]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	68da      	ldr	r2, [r3, #12]
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	18d1      	adds	r1, r2, r3
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	689a      	ldr	r2, [r3, #8]
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	1ad3      	subs	r3, r2, r3
 800ded8:	461a      	mov	r2, r3
 800deda:	f003 fbee 	bl	80116ba <memmove>
                context->buffer.position -= totcmdlen;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	689a      	ldr	r2, [r3, #8]
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	1ad2      	subs	r2, r2, r3
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	609a      	str	r2, [r3, #8]
                totcmdlen = 0;
 800deea:	2300      	movs	r3, #0
 800deec:	61bb      	str	r3, [r7, #24]
 800deee:	e7c8      	b.n	800de82 <SCPI_Input+0xae>
            } else {
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800def6:	2b1a      	cmp	r3, #26
 800def8:	d104      	bne.n	800df04 <SCPI_Input+0x130>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df00:	2b00      	cmp	r3, #0
 800df02:	d005      	beq.n	800df10 <SCPI_Input+0x13c>
                if (totcmdlen >= context->buffer.position) break;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	69ba      	ldr	r2, [r7, #24]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d202      	bcs.n	800df14 <SCPI_Input+0x140>
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800df0e:	e7b8      	b.n	800de82 <SCPI_Input+0xae>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 800df10:	bf00      	nop
 800df12:	e000      	b.n	800df16 <SCPI_Input+0x142>
                if (totcmdlen >= context->buffer.position) break;
 800df14:	bf00      	nop
            }
        }
    }

    return result;
 800df16:	7ffb      	ldrb	r3, [r7, #31]
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3720      	adds	r7, #32
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <SCPI_ResultCharacters>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return
 */
size_t SCPI_ResultCharacters(scpi_t * context, const char * data, size_t len) {
 800df20:	b580      	push	{r7, lr}
 800df22:	b086      	sub	sp, #24
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 800df2c:	2300      	movs	r3, #0
 800df2e:	617b      	str	r3, [r7, #20]
    result += writeDelimiter(context);
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	f7ff fd69 	bl	800da08 <writeDelimiter>
 800df36:	4602      	mov	r2, r0
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	4413      	add	r3, r2
 800df3c:	617b      	str	r3, [r7, #20]
    result += writeData(context, data, len);
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	68b9      	ldr	r1, [r7, #8]
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f7ff fd2c 	bl	800d9a0 <writeData>
 800df48:	4602      	mov	r2, r0
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	4413      	add	r3, r2
 800df4e:	617b      	str	r3, [r7, #20]
    context->output_count++;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df54:	1c5a      	adds	r2, r3, #1
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 800df5a:	697b      	ldr	r3, [r7, #20]
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3718      	adds	r7, #24
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <getBasePrefix>:
/**
 * Return prefix of nondecimal base
 * @param base
 * @return
 */
static const char * getBasePrefix(int8_t base) {
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	4603      	mov	r3, r0
 800df6c:	71fb      	strb	r3, [r7, #7]
    switch (base) {
 800df6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df72:	2b08      	cmp	r3, #8
 800df74:	d005      	beq.n	800df82 <getBasePrefix+0x1e>
 800df76:	2b10      	cmp	r3, #16
 800df78:	d005      	beq.n	800df86 <getBasePrefix+0x22>
 800df7a:	2b02      	cmp	r3, #2
 800df7c:	d105      	bne.n	800df8a <getBasePrefix+0x26>
        case 2: return "#B";
 800df7e:	4b06      	ldr	r3, [pc, #24]	; (800df98 <getBasePrefix+0x34>)
 800df80:	e004      	b.n	800df8c <getBasePrefix+0x28>
        case 8: return "#Q";
 800df82:	4b06      	ldr	r3, [pc, #24]	; (800df9c <getBasePrefix+0x38>)
 800df84:	e002      	b.n	800df8c <getBasePrefix+0x28>
        case 16: return "#H";
 800df86:	4b06      	ldr	r3, [pc, #24]	; (800dfa0 <getBasePrefix+0x3c>)
 800df88:	e000      	b.n	800df8c <getBasePrefix+0x28>
        default: return NULL;
 800df8a:	2300      	movs	r3, #0
    }
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr
 800df98:	08013c2c 	.word	0x08013c2c
 800df9c:	08013c30 	.word	0x08013c30
 800dfa0:	08013c34 	.word	0x08013c34

0800dfa4 <resultUInt32BaseSign>:
 * @param val
 * @param base
 * @param sign
 * @return
 */
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b092      	sub	sp, #72	; 0x48
 800dfa8:	af02      	add	r7, sp, #8
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	4611      	mov	r1, r2
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	71fb      	strb	r3, [r7, #7]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	71bb      	strb	r3, [r7, #6]
    char buffer[32 + 1];
    const char * basePrefix;
    size_t result = 0;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t len;

    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 800dfbe:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800dfc2:	f107 0110 	add.w	r1, r7, #16
 800dfc6:	79bb      	ldrb	r3, [r7, #6]
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	2221      	movs	r2, #33	; 0x21
 800dfce:	68b8      	ldr	r0, [r7, #8]
 800dfd0:	f000 fee4 	bl	800ed9c <UInt32ToStrBaseSign>
 800dfd4:	63b8      	str	r0, [r7, #56]	; 0x38
    basePrefix = getBasePrefix(base);
 800dfd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7ff ffc2 	bl	800df64 <getBasePrefix>
 800dfe0:	6378      	str	r0, [r7, #52]	; 0x34

    result += writeDelimiter(context);
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7ff fd10 	bl	800da08 <writeDelimiter>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfec:	4413      	add	r3, r2
 800dfee:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (basePrefix != NULL) {
 800dff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d008      	beq.n	800e008 <resultUInt32BaseSign+0x64>
        result += writeData(context, basePrefix, 2);
 800dff6:	2202      	movs	r2, #2
 800dff8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f7ff fcd0 	bl	800d9a0 <writeData>
 800e000:	4602      	mov	r2, r0
 800e002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e004:	4413      	add	r3, r2
 800e006:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    result += writeData(context, buffer, len);
 800e008:	f107 0310 	add.w	r3, r7, #16
 800e00c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e00e:	4619      	mov	r1, r3
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	f7ff fcc5 	bl	800d9a0 <writeData>
 800e016:	4602      	mov	r2, r0
 800e018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e01a:	4413      	add	r3, r2
 800e01c:	63fb      	str	r3, [r7, #60]	; 0x3c
    context->output_count++;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e022:	1c5a      	adds	r2, r3, #1
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 800e028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3740      	adds	r7, #64	; 0x40
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}

0800e032 <SCPI_ResultInt32>:
 * Write signed 32 bit integer value to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultInt32(scpi_t * context, int32_t val) {
 800e032:	b580      	push	{r7, lr}
 800e034:	b082      	sub	sp, #8
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
 800e03a:	6039      	str	r1, [r7, #0]
    return resultUInt32BaseSign(context, val, 10, TRUE);
 800e03c:	6839      	ldr	r1, [r7, #0]
 800e03e:	2301      	movs	r3, #1
 800e040:	220a      	movs	r2, #10
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f7ff ffae 	bl	800dfa4 <resultUInt32BaseSign>
 800e048:	4603      	mov	r3, r0
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3708      	adds	r7, #8
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
	...

0800e054 <SCPI_ResultText>:
 * Write string withn " to the result
 * @param context
 * @param data
 * @return
 */
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 800e054:	b580      	push	{r7, lr}
 800e056:	b086      	sub	sp, #24
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	617b      	str	r3, [r7, #20]
    size_t len = strlen(data);
 800e062:	6838      	ldr	r0, [r7, #0]
 800e064:	f7f2 f8c6 	bl	80001f4 <strlen>
 800e068:	6138      	str	r0, [r7, #16]
    const char * quote;
    result += writeDelimiter(context);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f7ff fccc 	bl	800da08 <writeDelimiter>
 800e070:	4602      	mov	r2, r0
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	4413      	add	r3, r2
 800e076:	617b      	str	r3, [r7, #20]
    result += writeData(context, "\"", 1);
 800e078:	2201      	movs	r2, #1
 800e07a:	4927      	ldr	r1, [pc, #156]	; (800e118 <SCPI_ResultText+0xc4>)
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f7ff fc8f 	bl	800d9a0 <writeData>
 800e082:	4602      	mov	r2, r0
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	4413      	add	r3, r2
 800e088:	617b      	str	r3, [r7, #20]
    while ((quote = strnpbrk(data, len, "\""))) {
 800e08a:	e020      	b.n	800e0ce <SCPI_ResultText+0x7a>
        result += writeData(context, data, quote - data + 1);
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	3301      	adds	r3, #1
 800e094:	461a      	mov	r2, r3
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7ff fc81 	bl	800d9a0 <writeData>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	617b      	str	r3, [r7, #20]
        result += writeData(context, "\"", 1);
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	491b      	ldr	r1, [pc, #108]	; (800e118 <SCPI_ResultText+0xc4>)
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f7ff fc78 	bl	800d9a0 <writeData>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	4413      	add	r3, r2
 800e0b6:	617b      	str	r3, [r7, #20]
        len -= quote - data + 1;
 800e0b8:	68fa      	ldr	r2, [r7, #12]
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	461a      	mov	r2, r3
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	1a9b      	subs	r3, r3, r2
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	613b      	str	r3, [r7, #16]
        data = quote + 1;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	603b      	str	r3, [r7, #0]
    while ((quote = strnpbrk(data, len, "\""))) {
 800e0ce:	4a12      	ldr	r2, [pc, #72]	; (800e118 <SCPI_ResultText+0xc4>)
 800e0d0:	6939      	ldr	r1, [r7, #16]
 800e0d2:	6838      	ldr	r0, [r7, #0]
 800e0d4:	f000 fe32 	bl	800ed3c <strnpbrk>
 800e0d8:	60f8      	str	r0, [r7, #12]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d1d5      	bne.n	800e08c <SCPI_ResultText+0x38>
    }
    result += writeData(context, data, len);
 800e0e0:	693a      	ldr	r2, [r7, #16]
 800e0e2:	6839      	ldr	r1, [r7, #0]
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f7ff fc5b 	bl	800d9a0 <writeData>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	617b      	str	r3, [r7, #20]
    result += writeData(context, "\"", 1);
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	4908      	ldr	r1, [pc, #32]	; (800e118 <SCPI_ResultText+0xc4>)
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f7ff fc52 	bl	800d9a0 <writeData>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	4413      	add	r3, r2
 800e102:	617b      	str	r3, [r7, #20]
    context->output_count++;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e108:	1c5a      	adds	r2, r3, #1
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 800e10e:	697b      	ldr	r3, [r7, #20]
}
 800e110:	4618      	mov	r0, r3
 800e112:	3718      	adds	r7, #24
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	08013c38 	.word	0x08013c38

0800e11c <SCPI_ResultError>:
 *
 * @param context
 * @param error
 * @return
 */
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b08a      	sub	sp, #40	; 0x28
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 800e126:	2300      	movs	r3, #0
 800e128:	627b      	str	r3, [r7, #36]	; 0x24
    size_t outputlimit = SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH;
 800e12a:	23ff      	movs	r3, #255	; 0xff
 800e12c:	623b      	str	r3, [r7, #32]
    size_t step = 0;
 800e12e:	2300      	movs	r3, #0
 800e130:	61bb      	str	r3, [r7, #24]

    const char * data[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t len[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t i;

    data[0] = SCPI_ErrorTranslate(error->error_code);
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fd ff85 	bl	800c048 <SCPI_ErrorTranslate>
 800e13e:	4603      	mov	r3, r0
 800e140:	613b      	str	r3, [r7, #16]
    len[0] = strlen(data[0]);
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	4618      	mov	r0, r3
 800e146:	f7f2 f855 	bl	80001f4 <strlen>
 800e14a:	4603      	mov	r3, r0
 800e14c:	60fb      	str	r3, [r7, #12]
#else
    SCPIDEFINE_get_parts(&context->error_info_heap, data[1], &len[1], &data[2], &len[2]);
#endif
#endif

    result += SCPI_ResultInt32(context, error->error_code);
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e154:	4619      	mov	r1, r3
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f7ff ff6b 	bl	800e032 <SCPI_ResultInt32>
 800e15c:	4602      	mov	r2, r0
 800e15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e160:	4413      	add	r3, r2
 800e162:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeDelimiter(context);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7ff fc4f 	bl	800da08 <writeDelimiter>
 800e16a:	4602      	mov	r2, r0
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	4413      	add	r3, r2
 800e170:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeData(context, "\"", 1);
 800e172:	2201      	movs	r2, #1
 800e174:	4976      	ldr	r1, [pc, #472]	; (800e350 <SCPI_ResultError+0x234>)
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7ff fc12 	bl	800d9a0 <writeData>
 800e17c:	4602      	mov	r2, r0
 800e17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e180:	4413      	add	r3, r2
 800e182:	627b      	str	r3, [r7, #36]	; 0x24

    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 800e184:	2300      	movs	r3, #0
 800e186:	61fb      	str	r3, [r7, #28]
 800e188:	e0c4      	b.n	800e314 <SCPI_ResultError+0x1f8>
        if (i == 1) {
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d109      	bne.n	800e1a4 <SCPI_ResultError+0x88>
            result += writeSemicolon(context);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7ff fc69 	bl	800da68 <writeSemicolon>
 800e196:	4602      	mov	r2, r0
 800e198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19a:	4413      	add	r3, r2
 800e19c:	627b      	str	r3, [r7, #36]	; 0x24
            outputlimit -= 1;
 800e19e:	6a3b      	ldr	r3, [r7, #32]
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	623b      	str	r3, [r7, #32]
        }
        if (len[i] > outputlimit) {
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e1ac:	4413      	add	r3, r2
 800e1ae:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800e1b2:	6a3a      	ldr	r2, [r7, #32]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d273      	bcs.n	800e2a0 <SCPI_ResultError+0x184>
            len[i] = outputlimit;
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e1c0:	4413      	add	r3, r2
 800e1c2:	6a3a      	ldr	r2, [r7, #32]
 800e1c4:	f843 2c1c 	str.w	r2, [r3, #-28]
        }

        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 800e1c8:	e06a      	b.n	800e2a0 <SCPI_ResultError+0x184>
            if ((step = quote - data[i] + 1) >= outputlimit) {
 800e1ca:	697a      	ldr	r2, [r7, #20]
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e1d4:	440b      	add	r3, r1
 800e1d6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800e1da:	1ad3      	subs	r3, r2, r3
 800e1dc:	3301      	adds	r3, #1
 800e1de:	61bb      	str	r3, [r7, #24]
 800e1e0:	69ba      	ldr	r2, [r7, #24]
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d312      	bcc.n	800e20e <SCPI_ResultError+0xf2>
                len[i] -= 1;
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e1f0:	4413      	add	r3, r2
 800e1f2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800e1f6:	1e5a      	subs	r2, r3, #1
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e200:	440b      	add	r3, r1
 800e202:	f843 2c1c 	str.w	r2, [r3, #-28]
                outputlimit -= 1;
 800e206:	6a3b      	ldr	r3, [r7, #32]
 800e208:	3b01      	subs	r3, #1
 800e20a:	623b      	str	r3, [r7, #32]
                break;
 800e20c:	e05f      	b.n	800e2ce <SCPI_ResultError+0x1b2>
            }
            result += writeData(context, data[i], step);
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e216:	4413      	add	r3, r2
 800e218:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800e21c:	69ba      	ldr	r2, [r7, #24]
 800e21e:	4619      	mov	r1, r3
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f7ff fbbd 	bl	800d9a0 <writeData>
 800e226:	4602      	mov	r2, r0
 800e228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22a:	4413      	add	r3, r2
 800e22c:	627b      	str	r3, [r7, #36]	; 0x24
            result += writeData(context, "\"", 1);
 800e22e:	2201      	movs	r2, #1
 800e230:	4947      	ldr	r1, [pc, #284]	; (800e350 <SCPI_ResultError+0x234>)
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7ff fbb4 	bl	800d9a0 <writeData>
 800e238:	4602      	mov	r2, r0
 800e23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23c:	4413      	add	r3, r2
 800e23e:	627b      	str	r3, [r7, #36]	; 0x24
            len[i] -= step;
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e248:	4413      	add	r3, r2
 800e24a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	1ad2      	subs	r2, r2, r3
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e25a:	440b      	add	r3, r1
 800e25c:	f843 2c1c 	str.w	r2, [r3, #-28]
            outputlimit -= step + 1;
 800e260:	6a3a      	ldr	r2, [r7, #32]
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	3b01      	subs	r3, #1
 800e268:	623b      	str	r3, [r7, #32]
            data[i] = quote + 1;
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	1c5a      	adds	r2, r3, #1
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e276:	440b      	add	r3, r1
 800e278:	f843 2c18 	str.w	r2, [r3, #-24]
            if (len[i] > outputlimit) {
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e284:	4413      	add	r3, r2
 800e286:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800e28a:	6a3a      	ldr	r2, [r7, #32]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d207      	bcs.n	800e2a0 <SCPI_ResultError+0x184>
                len[i] = outputlimit;
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e298:	4413      	add	r3, r2
 800e29a:	6a3a      	ldr	r2, [r7, #32]
 800e29c:	f843 2c1c 	str.w	r2, [r3, #-28]
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e2a8:	4413      	add	r3, r2
 800e2aa:	f853 0c18 	ldr.w	r0, [r3, #-24]
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e2b6:	4413      	add	r3, r2
 800e2b8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800e2bc:	4a24      	ldr	r2, [pc, #144]	; (800e350 <SCPI_ResultError+0x234>)
 800e2be:	4619      	mov	r1, r3
 800e2c0:	f000 fd3c 	bl	800ed3c <strnpbrk>
 800e2c4:	6178      	str	r0, [r7, #20]
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f47f af7e 	bne.w	800e1ca <SCPI_ResultError+0xae>
            }
        }

        result += writeData(context, data[i], len[i]);
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e2d6:	4413      	add	r3, r2
 800e2d8:	f853 1c18 	ldr.w	r1, [r3, #-24]
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e2e4:	4413      	add	r3, r2
 800e2e6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f7ff fb57 	bl	800d9a0 <writeData>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f6:	4413      	add	r3, r2
 800e2f8:	627b      	str	r3, [r7, #36]	; 0x24
        outputlimit -= len[i];
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e302:	4413      	add	r3, r2
 800e304:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800e308:	6a3a      	ldr	r2, [r7, #32]
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	623b      	str	r3, [r7, #32]
    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	3301      	adds	r3, #1
 800e312:	61fb      	str	r3, [r7, #28]
 800e314:	69fb      	ldr	r3, [r7, #28]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d10c      	bne.n	800e334 <SCPI_ResultError+0x218>
 800e31a:	69fb      	ldr	r3, [r7, #28]
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e322:	4413      	add	r3, r2
 800e324:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d003      	beq.n	800e334 <SCPI_ResultError+0x218>
 800e32c:	6a3b      	ldr	r3, [r7, #32]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	f47f af2b 	bne.w	800e18a <SCPI_ResultError+0x6e>
    }
    result += writeData(context, "\"", 1);
 800e334:	2201      	movs	r2, #1
 800e336:	4906      	ldr	r1, [pc, #24]	; (800e350 <SCPI_ResultError+0x234>)
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f7ff fb31 	bl	800d9a0 <writeData>
 800e33e:	4602      	mov	r2, r0
 800e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e342:	4413      	add	r3, r2
 800e344:	627b      	str	r3, [r7, #36]	; 0x24

    return result;
 800e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3728      	adds	r7, #40	; 0x28
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	08013c38 	.word	0x08013c38

0800e354 <SCPI_ResultArbitraryBlockHeader>:
 * Write arbitrary block header with length
 * @param context
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
    char block_header[12];
    size_t header_len;
    block_header[0] = '#';
 800e35e:	2323      	movs	r3, #35	; 0x23
 800e360:	723b      	strb	r3, [r7, #8]
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 800e362:	f107 0108 	add.w	r1, r7, #8
 800e366:	3102      	adds	r1, #2
 800e368:	230a      	movs	r3, #10
 800e36a:	220a      	movs	r2, #10
 800e36c:	6838      	ldr	r0, [r7, #0]
 800e36e:	f000 fdb5 	bl	800eedc <SCPI_UInt32ToStrBase>

    header_len = strlen(block_header + 2);
 800e372:	f107 0308 	add.w	r3, r7, #8
 800e376:	3302      	adds	r3, #2
 800e378:	4618      	mov	r0, r3
 800e37a:	f7f1 ff3b 	bl	80001f4 <strlen>
 800e37e:	6178      	str	r0, [r7, #20]
    block_header[1] = (char) (header_len + '0');
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	b2db      	uxtb	r3, r3
 800e384:	3330      	adds	r3, #48	; 0x30
 800e386:	b2db      	uxtb	r3, r3
 800e388:	727b      	strb	r3, [r7, #9]

    context->arbitrary_reminding = len;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	683a      	ldr	r2, [r7, #0]
 800e38e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    return writeData(context, block_header, header_len + 2);
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	1c9a      	adds	r2, r3, #2
 800e396:	f107 0308 	add.w	r3, r7, #8
 800e39a:	4619      	mov	r1, r3
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f7ff faff 	bl	800d9a0 <writeData>
 800e3a2:	4603      	mov	r3, r0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3718      	adds	r7, #24
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <SCPI_ResultArbitraryBlockData>:
 * @param context
 * @param data
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	607a      	str	r2, [r7, #4]

    if (context->arbitrary_reminding < len) {
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d905      	bls.n	800e3d0 <SCPI_ResultArbitraryBlockData+0x24>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800e3c4:	4910      	ldr	r1, [pc, #64]	; (800e408 <SCPI_ResultArbitraryBlockData+0x5c>)
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f7fd fe2c 	bl	800c024 <SCPI_ErrorPush>
        return 0;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	e017      	b.n	800e400 <SCPI_ResultArbitraryBlockData+0x54>
    }

    context->arbitrary_reminding -= len;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	1ad2      	subs	r2, r2, r3
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    if (context->arbitrary_reminding == 0) {
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d104      	bne.n	800e3f4 <SCPI_ResultArbitraryBlockData+0x48>
        context->output_count++;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ee:	1c5a      	adds	r2, r3, #1
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return writeData(context, (const char *) data, len);
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	68b9      	ldr	r1, [r7, #8]
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f7ff fad1 	bl	800d9a0 <writeData>
 800e3fe:	4603      	mov	r3, r0
}
 800e400:	4618      	mov	r0, r3
 800e402:	3710      	adds	r7, #16
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	fffffeca 	.word	0xfffffeca

0800e40c <SCPI_ResultArbitraryBlock>:
 * @param context
 * @param data
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b086      	sub	sp, #24
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 800e418:	2300      	movs	r3, #0
 800e41a:	617b      	str	r3, [r7, #20]
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 800e41c:	6879      	ldr	r1, [r7, #4]
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f7ff ff98 	bl	800e354 <SCPI_ResultArbitraryBlockHeader>
 800e424:	4602      	mov	r2, r0
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	4413      	add	r3, r2
 800e42a:	617b      	str	r3, [r7, #20]
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	68b9      	ldr	r1, [r7, #8]
 800e430:	68f8      	ldr	r0, [r7, #12]
 800e432:	f7ff ffbb 	bl	800e3ac <SCPI_ResultArbitraryBlockData>
 800e436:	4602      	mov	r2, r0
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	4413      	add	r3, r2
 800e43c:	617b      	str	r3, [r7, #20]
    return result;
 800e43e:	697b      	ldr	r3, [r7, #20]
}
 800e440:	4618      	mov	r0, r3
 800e442:	3718      	adds	r7, #24
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <invalidateToken>:
/**
 * Invalidate token
 * @param token
 * @param ptr
 */
static void invalidateToken(scpi_token_t * token, char * ptr) {
 800e448:	b480      	push	{r7}
 800e44a:	b083      	sub	sp, #12
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
    token->len = 0;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	609a      	str	r2, [r3, #8]
    token->ptr = ptr;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	683a      	ldr	r2, [r7, #0]
 800e45c:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	221a      	movs	r2, #26
 800e462:	701a      	strb	r2, [r3, #0]
}
 800e464:	bf00      	nop
 800e466:	370c      	adds	r7, #12
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr

0800e470 <SCPI_Parameter>:
 * @param context
 * @param parameter
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_Parameter(scpi_t * context, scpi_parameter_t * parameter, scpi_bool_t mandatory) {
 800e470:	b580      	push	{r7, lr}
 800e472:	b086      	sub	sp, #24
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	4613      	mov	r3, r2
 800e47c:	71fb      	strb	r3, [r7, #7]
    lex_state_t * state;

    if (!parameter) {
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d105      	bne.n	800e490 <SCPI_Parameter+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800e484:	4939      	ldr	r1, [pc, #228]	; (800e56c <SCPI_Parameter+0xfc>)
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f7fd fdcc 	bl	800c024 <SCPI_ErrorPush>
        return FALSE;
 800e48c:	2300      	movs	r3, #0
 800e48e:	e069      	b.n	800e564 <SCPI_Parameter+0xf4>
    }

    invalidateToken(parameter, NULL);
 800e490:	2100      	movs	r1, #0
 800e492:	68b8      	ldr	r0, [r7, #8]
 800e494:	f7ff ffd8 	bl	800e448 <invalidateToken>

    state = &context->param_list.lex_state;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	3314      	adds	r3, #20
 800e49c:	617b      	str	r3, [r7, #20]

    if (state->pos >= (state->buffer + state->len)) {
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	685a      	ldr	r2, [r3, #4]
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	6979      	ldr	r1, [r7, #20]
 800e4a8:	6889      	ldr	r1, [r1, #8]
 800e4aa:	440b      	add	r3, r1
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d30d      	bcc.n	800e4cc <SCPI_Parameter+0x5c>
        if (mandatory) {
 800e4b0:	79fb      	ldrb	r3, [r7, #7]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d005      	beq.n	800e4c2 <SCPI_Parameter+0x52>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 800e4b6:	f06f 016c 	mvn.w	r1, #108	; 0x6c
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f7fd fdb2 	bl	800c024 <SCPI_ErrorPush>
 800e4c0:	e002      	b.n	800e4c8 <SCPI_Parameter+0x58>
        } else {
            parameter->type = SCPI_TOKEN_PROGRAM_MNEMONIC; /* TODO: select something different */
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	2209      	movs	r2, #9
 800e4c6:	701a      	strb	r2, [r3, #0]
        }
        return FALSE;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	e04b      	b.n	800e564 <SCPI_Parameter+0xf4>
    }
    if (context->input_count != 0) {
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d012      	beq.n	800e4fa <SCPI_Parameter+0x8a>
        scpiLex_Comma(state, parameter);
 800e4d4:	68b9      	ldr	r1, [r7, #8]
 800e4d6:	6978      	ldr	r0, [r7, #20]
 800e4d8:	f7ff f9b5 	bl	800d846 <scpiLex_Comma>
        if (parameter->type != SCPI_TOKEN_COMMA) {
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d00a      	beq.n	800e4fa <SCPI_Parameter+0x8a>
            invalidateToken(parameter, NULL);
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	68b8      	ldr	r0, [r7, #8]
 800e4e8:	f7ff ffae 	bl	800e448 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 800e4ec:	f06f 0166 	mvn.w	r1, #102	; 0x66
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f7fd fd97 	bl	800c024 <SCPI_ErrorPush>
            return FALSE;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	e034      	b.n	800e564 <SCPI_Parameter+0xf4>
        }
    }

    context->input_count++;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4fe:	1c5a      	adds	r2, r3, #1
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	635a      	str	r2, [r3, #52]	; 0x34

    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	3314      	adds	r3, #20
 800e508:	68b9      	ldr	r1, [r7, #8]
 800e50a:	4618      	mov	r0, r3
 800e50c:	f000 faa0 	bl	800ea50 <scpiParser_parseProgramData>

    switch (parameter->type) {
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	3b06      	subs	r3, #6
 800e516:	2b0a      	cmp	r3, #10
 800e518:	d81a      	bhi.n	800e550 <SCPI_Parameter+0xe0>
 800e51a:	a201      	add	r2, pc, #4	; (adr r2, 800e520 <SCPI_Parameter+0xb0>)
 800e51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e520:	0800e54d 	.word	0x0800e54d
 800e524:	0800e54d 	.word	0x0800e54d
 800e528:	0800e54d 	.word	0x0800e54d
 800e52c:	0800e54d 	.word	0x0800e54d
 800e530:	0800e54d 	.word	0x0800e54d
 800e534:	0800e54d 	.word	0x0800e54d
 800e538:	0800e551 	.word	0x0800e551
 800e53c:	0800e54d 	.word	0x0800e54d
 800e540:	0800e54d 	.word	0x0800e54d
 800e544:	0800e54d 	.word	0x0800e54d
 800e548:	0800e54d 	.word	0x0800e54d
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
        case SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA:
        case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_PROGRAM_EXPRESSION:
            return TRUE;
 800e54c:	2301      	movs	r3, #1
 800e54e:	e009      	b.n	800e564 <SCPI_Parameter+0xf4>
        default:
            invalidateToken(parameter, NULL);
 800e550:	2100      	movs	r1, #0
 800e552:	68b8      	ldr	r0, [r7, #8]
 800e554:	f7ff ff78 	bl	800e448 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 800e558:	f06f 0196 	mvn.w	r1, #150	; 0x96
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f7fd fd61 	bl	800c024 <SCPI_ErrorPush>
            return FALSE;
 800e562:	2300      	movs	r3, #0
    }
}
 800e564:	4618      	mov	r0, r3
 800e566:	3718      	adds	r7, #24
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	fffffeca 	.word	0xfffffeca

0800e570 <SCPI_ParamIsNumber>:
 * Detect if parameter is number
 * @param parameter
 * @param suffixAllowed
 * @return
 */
scpi_bool_t SCPI_ParamIsNumber(scpi_parameter_t * parameter, scpi_bool_t suffixAllowed) {
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	460b      	mov	r3, r1
 800e57a:	70fb      	strb	r3, [r7, #3]
    switch (parameter->type) {
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	3b06      	subs	r3, #6
 800e582:	2b05      	cmp	r3, #5
 800e584:	d812      	bhi.n	800e5ac <SCPI_ParamIsNumber+0x3c>
 800e586:	a201      	add	r2, pc, #4	; (adr r2, 800e58c <SCPI_ParamIsNumber+0x1c>)
 800e588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e58c:	0800e5a5 	.word	0x0800e5a5
 800e590:	0800e5a5 	.word	0x0800e5a5
 800e594:	0800e5a5 	.word	0x0800e5a5
 800e598:	0800e5ad 	.word	0x0800e5ad
 800e59c:	0800e5a5 	.word	0x0800e5a5
 800e5a0:	0800e5a9 	.word	0x0800e5a9
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
            return TRUE;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	e002      	b.n	800e5ae <SCPI_ParamIsNumber+0x3e>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            return suffixAllowed;
 800e5a8:	78fb      	ldrb	r3, [r7, #3]
 800e5aa:	e000      	b.n	800e5ae <SCPI_ParamIsNumber+0x3e>
        default:
            return FALSE;
 800e5ac:	2300      	movs	r3, #0
    }
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	370c      	adds	r7, #12
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr
 800e5ba:	bf00      	nop

0800e5bc <ParamSignToUInt32>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt32(scpi_t * context, scpi_parameter_t * parameter, uint32_t * value, scpi_bool_t sign) {
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b084      	sub	sp, #16
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	607a      	str	r2, [r7, #4]
 800e5c8:	70fb      	strb	r3, [r7, #3]

    if (!value) {
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d105      	bne.n	800e5dc <ParamSignToUInt32+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800e5d0:	4933      	ldr	r1, [pc, #204]	; (800e6a0 <ParamSignToUInt32+0xe4>)
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	f7fd fd26 	bl	800c024 <SCPI_ErrorPush>
        return FALSE;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	e05d      	b.n	800e698 <ParamSignToUInt32+0xdc>
    }

    switch (parameter->type) {
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	3b06      	subs	r3, #6
 800e5e2:	2b05      	cmp	r3, #5
 800e5e4:	d857      	bhi.n	800e696 <ParamSignToUInt32+0xda>
 800e5e6:	a201      	add	r2, pc, #4	; (adr r2, 800e5ec <ParamSignToUInt32+0x30>)
 800e5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ec:	0800e605 	.word	0x0800e605
 800e5f0:	0800e621 	.word	0x0800e621
 800e5f4:	0800e63d 	.word	0x0800e63d
 800e5f8:	0800e697 	.word	0x0800e697
 800e5fc:	0800e659 	.word	0x0800e659
 800e600:	0800e659 	.word	0x0800e659
        case SCPI_TOKEN_HEXNUM:
            return strBaseToUInt32(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	2210      	movs	r2, #16
 800e60a:	6879      	ldr	r1, [r7, #4]
 800e60c:	4618      	mov	r0, r3
 800e60e:	f000 fc95 	bl	800ef3c <strBaseToUInt32>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	bf14      	ite	ne
 800e618:	2301      	movne	r3, #1
 800e61a:	2300      	moveq	r3, #0
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	e03b      	b.n	800e698 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_OCTNUM:
            return strBaseToUInt32(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	2208      	movs	r2, #8
 800e626:	6879      	ldr	r1, [r7, #4]
 800e628:	4618      	mov	r0, r3
 800e62a:	f000 fc87 	bl	800ef3c <strBaseToUInt32>
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	bf14      	ite	ne
 800e634:	2301      	movne	r3, #1
 800e636:	2300      	moveq	r3, #0
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	e02d      	b.n	800e698 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_BINNUM:
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	2202      	movs	r2, #2
 800e642:	6879      	ldr	r1, [r7, #4]
 800e644:	4618      	mov	r0, r3
 800e646:	f000 fc79 	bl	800ef3c <strBaseToUInt32>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	bf14      	ite	ne
 800e650:	2301      	movne	r3, #1
 800e652:	2300      	moveq	r3, #0
 800e654:	b2db      	uxtb	r3, r3
 800e656:	e01f      	b.n	800e698 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            if (sign) {
 800e658:	78fb      	ldrb	r3, [r7, #3]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00d      	beq.n	800e67a <ParamSignToUInt32+0xbe>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	220a      	movs	r2, #10
 800e664:	6879      	ldr	r1, [r7, #4]
 800e666:	4618      	mov	r0, r3
 800e668:	f000 fc4e 	bl	800ef08 <strBaseToInt32>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b00      	cmp	r3, #0
 800e670:	bf14      	ite	ne
 800e672:	2301      	movne	r3, #1
 800e674:	2300      	moveq	r3, #0
 800e676:	b2db      	uxtb	r3, r3
 800e678:	e00e      	b.n	800e698 <ParamSignToUInt32+0xdc>
            } else {
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	220a      	movs	r2, #10
 800e680:	6879      	ldr	r1, [r7, #4]
 800e682:	4618      	mov	r0, r3
 800e684:	f000 fc5a 	bl	800ef3c <strBaseToUInt32>
 800e688:	4603      	mov	r3, r0
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	bf14      	ite	ne
 800e68e:	2301      	movne	r3, #1
 800e690:	2300      	moveq	r3, #0
 800e692:	b2db      	uxtb	r3, r3
 800e694:	e000      	b.n	800e698 <ParamSignToUInt32+0xdc>
            }
        default:
            return FALSE;
 800e696:	2300      	movs	r3, #0
    }
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	fffffeca 	.word	0xfffffeca

0800e6a4 <ParamSignToUInt64>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt64(scpi_t * context, scpi_parameter_t * parameter, uint64_t * value, scpi_bool_t sign) {
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	60b9      	str	r1, [r7, #8]
 800e6ae:	607a      	str	r2, [r7, #4]
 800e6b0:	70fb      	strb	r3, [r7, #3]

    if (!value) {
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d105      	bne.n	800e6c4 <ParamSignToUInt64+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800e6b8:	4933      	ldr	r1, [pc, #204]	; (800e788 <ParamSignToUInt64+0xe4>)
 800e6ba:	68f8      	ldr	r0, [r7, #12]
 800e6bc:	f7fd fcb2 	bl	800c024 <SCPI_ErrorPush>
        return FALSE;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	e05d      	b.n	800e780 <ParamSignToUInt64+0xdc>
    }

    switch (parameter->type) {
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	3b06      	subs	r3, #6
 800e6ca:	2b05      	cmp	r3, #5
 800e6cc:	d857      	bhi.n	800e77e <ParamSignToUInt64+0xda>
 800e6ce:	a201      	add	r2, pc, #4	; (adr r2, 800e6d4 <ParamSignToUInt64+0x30>)
 800e6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d4:	0800e6ed 	.word	0x0800e6ed
 800e6d8:	0800e709 	.word	0x0800e709
 800e6dc:	0800e725 	.word	0x0800e725
 800e6e0:	0800e77f 	.word	0x0800e77f
 800e6e4:	0800e741 	.word	0x0800e741
 800e6e8:	0800e741 	.word	0x0800e741
        case SCPI_TOKEN_HEXNUM:
            return strBaseToUInt64(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	2210      	movs	r2, #16
 800e6f2:	6879      	ldr	r1, [r7, #4]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f000 fc57 	bl	800efa8 <strBaseToUInt64>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	bf14      	ite	ne
 800e700:	2301      	movne	r3, #1
 800e702:	2300      	moveq	r3, #0
 800e704:	b2db      	uxtb	r3, r3
 800e706:	e03b      	b.n	800e780 <ParamSignToUInt64+0xdc>
        case SCPI_TOKEN_OCTNUM:
            return strBaseToUInt64(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	2208      	movs	r2, #8
 800e70e:	6879      	ldr	r1, [r7, #4]
 800e710:	4618      	mov	r0, r3
 800e712:	f000 fc49 	bl	800efa8 <strBaseToUInt64>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	bf14      	ite	ne
 800e71c:	2301      	movne	r3, #1
 800e71e:	2300      	moveq	r3, #0
 800e720:	b2db      	uxtb	r3, r3
 800e722:	e02d      	b.n	800e780 <ParamSignToUInt64+0xdc>
        case SCPI_TOKEN_BINNUM:
            return strBaseToUInt64(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	2202      	movs	r2, #2
 800e72a:	6879      	ldr	r1, [r7, #4]
 800e72c:	4618      	mov	r0, r3
 800e72e:	f000 fc3b 	bl	800efa8 <strBaseToUInt64>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	bf14      	ite	ne
 800e738:	2301      	movne	r3, #1
 800e73a:	2300      	moveq	r3, #0
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	e01f      	b.n	800e780 <ParamSignToUInt64+0xdc>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            if (sign) {
 800e740:	78fb      	ldrb	r3, [r7, #3]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00d      	beq.n	800e762 <ParamSignToUInt64+0xbe>
                return strBaseToInt64(parameter->ptr, (int64_t *) value, 10) > 0 ? TRUE : FALSE;
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	220a      	movs	r2, #10
 800e74c:	6879      	ldr	r1, [r7, #4]
 800e74e:	4618      	mov	r0, r3
 800e750:	f000 fc0e 	bl	800ef70 <strBaseToInt64>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	bf14      	ite	ne
 800e75a:	2301      	movne	r3, #1
 800e75c:	2300      	moveq	r3, #0
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	e00e      	b.n	800e780 <ParamSignToUInt64+0xdc>
            } else {
                return strBaseToUInt64(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	220a      	movs	r2, #10
 800e768:	6879      	ldr	r1, [r7, #4]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f000 fc1c 	bl	800efa8 <strBaseToUInt64>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	bf14      	ite	ne
 800e776:	2301      	movne	r3, #1
 800e778:	2300      	moveq	r3, #0
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	e000      	b.n	800e780 <ParamSignToUInt64+0xdc>
            }
        default:
            return FALSE;
 800e77e:	2300      	movs	r3, #0
    }
}
 800e780:	4618      	mov	r0, r3
 800e782:	3710      	adds	r7, #16
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	fffffeca 	.word	0xfffffeca

0800e78c <SCPI_ParamToUInt64>:
 * @param context
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToUInt64(scpi_t * context, scpi_parameter_t * parameter, uint64_t * value) {
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
    return ParamSignToUInt64(context, parameter, value, FALSE);
 800e798:	2300      	movs	r3, #0
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	68b9      	ldr	r1, [r7, #8]
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f7ff ff80 	bl	800e6a4 <ParamSignToUInt64>
 800e7a4:	4603      	mov	r3, r0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
	...

0800e7b0 <SCPI_ParamToDouble>:
 * @param context
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToDouble(scpi_t * context, scpi_parameter_t * parameter, double * value) {
 800e7b0:	b590      	push	{r4, r7, lr}
 800e7b2:	b089      	sub	sp, #36	; 0x24
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	607a      	str	r2, [r7, #4]
    scpi_bool_t result;
    uint64_t valint;

    if (!value) {
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d105      	bne.n	800e7ce <SCPI_ParamToDouble+0x1e>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800e7c2:	4922      	ldr	r1, [pc, #136]	; (800e84c <SCPI_ParamToDouble+0x9c>)
 800e7c4:	68f8      	ldr	r0, [r7, #12]
 800e7c6:	f7fd fc2d 	bl	800c024 <SCPI_ErrorPush>
        return FALSE;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	e039      	b.n	800e842 <SCPI_ParamToDouble+0x92>
    }

    switch (parameter->type) {
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	3b06      	subs	r3, #6
 800e7d4:	2b05      	cmp	r3, #5
 800e7d6:	d831      	bhi.n	800e83c <SCPI_ParamToDouble+0x8c>
 800e7d8:	a201      	add	r2, pc, #4	; (adr r2, 800e7e0 <SCPI_ParamToDouble+0x30>)
 800e7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7de:	bf00      	nop
 800e7e0:	0800e7f9 	.word	0x0800e7f9
 800e7e4:	0800e7f9 	.word	0x0800e7f9
 800e7e8:	0800e7f9 	.word	0x0800e7f9
 800e7ec:	0800e83d 	.word	0x0800e83d
 800e7f0:	0800e823 	.word	0x0800e823
 800e7f4:	0800e823 	.word	0x0800e823
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
            result = SCPI_ParamToUInt64(context, parameter, &valint);
 800e7f8:	f107 0310 	add.w	r3, r7, #16
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	68b9      	ldr	r1, [r7, #8]
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f7ff ffc3 	bl	800e78c <SCPI_ParamToUInt64>
 800e806:	4603      	mov	r3, r0
 800e808:	77fb      	strb	r3, [r7, #31]
            *value = valint;
 800e80a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e80e:	4618      	mov	r0, r3
 800e810:	4621      	mov	r1, r4
 800e812:	f7f1 fed3 	bl	80005bc <__aeabi_ul2d>
 800e816:	4603      	mov	r3, r0
 800e818:	460c      	mov	r4, r1
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	e9c2 3400 	strd	r3, r4, [r2]
            break;
 800e820:	e00e      	b.n	800e840 <SCPI_ParamToDouble+0x90>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            result = strToDouble(parameter->ptr, value) > 0 ? TRUE : FALSE;
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	6879      	ldr	r1, [r7, #4]
 800e828:	4618      	mov	r0, r3
 800e82a:	f000 fbd9 	bl	800efe0 <strToDouble>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	bf14      	ite	ne
 800e834:	2301      	movne	r3, #1
 800e836:	2300      	moveq	r3, #0
 800e838:	77fb      	strb	r3, [r7, #31]
            break;
 800e83a:	e001      	b.n	800e840 <SCPI_ParamToDouble+0x90>
        default:
            result = FALSE;
 800e83c:	2300      	movs	r3, #0
 800e83e:	77fb      	strb	r3, [r7, #31]
    }
    return result;
 800e840:	7ffb      	ldrb	r3, [r7, #31]
}
 800e842:	4618      	mov	r0, r3
 800e844:	3724      	adds	r7, #36	; 0x24
 800e846:	46bd      	mov	sp, r7
 800e848:	bd90      	pop	{r4, r7, pc}
 800e84a:	bf00      	nop
 800e84c:	fffffeca 	.word	0xfffffeca

0800e850 <SCPI_ParamDouble>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamDouble(scpi_t * context, double * value, scpi_bool_t mandatory) {
 800e850:	b580      	push	{r7, lr}
 800e852:	b088      	sub	sp, #32
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	4613      	mov	r3, r2
 800e85c:	71fb      	strb	r3, [r7, #7]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value) {
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d105      	bne.n	800e870 <SCPI_ParamDouble+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800e864:	491f      	ldr	r1, [pc, #124]	; (800e8e4 <SCPI_ParamDouble+0x94>)
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	f7fd fbdc 	bl	800c024 <SCPI_ErrorPush>
        return FALSE;
 800e86c:	2300      	movs	r3, #0
 800e86e:	e035      	b.n	800e8dc <SCPI_ParamDouble+0x8c>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 800e870:	79fa      	ldrb	r2, [r7, #7]
 800e872:	f107 0310 	add.w	r3, r7, #16
 800e876:	4619      	mov	r1, r3
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f7ff fdf9 	bl	800e470 <SCPI_Parameter>
 800e87e:	4603      	mov	r3, r0
 800e880:	77fb      	strb	r3, [r7, #31]
    if (result) {
 800e882:	7ffb      	ldrb	r3, [r7, #31]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d028      	beq.n	800e8da <SCPI_ParamDouble+0x8a>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 800e888:	f107 0310 	add.w	r3, r7, #16
 800e88c:	2100      	movs	r1, #0
 800e88e:	4618      	mov	r0, r3
 800e890:	f7ff fe6e 	bl	800e570 <SCPI_ParamIsNumber>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d007      	beq.n	800e8aa <SCPI_ParamDouble+0x5a>
            SCPI_ParamToDouble(context, &param, value);
 800e89a:	f107 0310 	add.w	r3, r7, #16
 800e89e:	68ba      	ldr	r2, [r7, #8]
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	68f8      	ldr	r0, [r7, #12]
 800e8a4:	f7ff ff84 	bl	800e7b0 <SCPI_ParamToDouble>
 800e8a8:	e017      	b.n	800e8da <SCPI_ParamDouble+0x8a>
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 800e8aa:	f107 0310 	add.w	r3, r7, #16
 800e8ae:	2101      	movs	r1, #1
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7ff fe5d 	bl	800e570 <SCPI_ParamIsNumber>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d007      	beq.n	800e8cc <SCPI_ParamDouble+0x7c>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 800e8bc:	f06f 0189 	mvn.w	r1, #137	; 0x89
 800e8c0:	68f8      	ldr	r0, [r7, #12]
 800e8c2:	f7fd fbaf 	bl	800c024 <SCPI_ErrorPush>
            result = FALSE;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	77fb      	strb	r3, [r7, #31]
 800e8ca:	e006      	b.n	800e8da <SCPI_ParamDouble+0x8a>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 800e8cc:	f06f 0167 	mvn.w	r1, #103	; 0x67
 800e8d0:	68f8      	ldr	r0, [r7, #12]
 800e8d2:	f7fd fba7 	bl	800c024 <SCPI_ErrorPush>
            result = FALSE;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	77fb      	strb	r3, [r7, #31]
        }
    }
    return result;
 800e8da:	7ffb      	ldrb	r3, [r7, #31]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3720      	adds	r7, #32
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	fffffeca 	.word	0xfffffeca

0800e8e8 <ParamSignUInt32>:
 * @param value
 * @param mandatory
 * @param sign
 * @return
 */
static scpi_bool_t ParamSignUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory, scpi_bool_t sign) {
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b088      	sub	sp, #32
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	4611      	mov	r1, r2
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	71fb      	strb	r3, [r7, #7]
 800e8fa:	4613      	mov	r3, r2
 800e8fc:	71bb      	strb	r3, [r7, #6]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value) {
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d105      	bne.n	800e910 <ParamSignUInt32+0x28>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800e904:	4920      	ldr	r1, [pc, #128]	; (800e988 <ParamSignUInt32+0xa0>)
 800e906:	68f8      	ldr	r0, [r7, #12]
 800e908:	f7fd fb8c 	bl	800c024 <SCPI_ErrorPush>
        return FALSE;
 800e90c:	2300      	movs	r3, #0
 800e90e:	e037      	b.n	800e980 <ParamSignUInt32+0x98>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 800e910:	79fa      	ldrb	r2, [r7, #7]
 800e912:	f107 0310 	add.w	r3, r7, #16
 800e916:	4619      	mov	r1, r3
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f7ff fda9 	bl	800e470 <SCPI_Parameter>
 800e91e:	4603      	mov	r3, r0
 800e920:	77fb      	strb	r3, [r7, #31]
    if (result) {
 800e922:	7ffb      	ldrb	r3, [r7, #31]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d02a      	beq.n	800e97e <ParamSignUInt32+0x96>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 800e928:	f107 0310 	add.w	r3, r7, #16
 800e92c:	2100      	movs	r1, #0
 800e92e:	4618      	mov	r0, r3
 800e930:	f7ff fe1e 	bl	800e570 <SCPI_ParamIsNumber>
 800e934:	4603      	mov	r3, r0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d009      	beq.n	800e94e <ParamSignUInt32+0x66>
            result = ParamSignToUInt32(context, &param, value, sign);
 800e93a:	79bb      	ldrb	r3, [r7, #6]
 800e93c:	f107 0110 	add.w	r1, r7, #16
 800e940:	68ba      	ldr	r2, [r7, #8]
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	f7ff fe3a 	bl	800e5bc <ParamSignToUInt32>
 800e948:	4603      	mov	r3, r0
 800e94a:	77fb      	strb	r3, [r7, #31]
 800e94c:	e017      	b.n	800e97e <ParamSignUInt32+0x96>
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 800e94e:	f107 0310 	add.w	r3, r7, #16
 800e952:	2101      	movs	r1, #1
 800e954:	4618      	mov	r0, r3
 800e956:	f7ff fe0b 	bl	800e570 <SCPI_ParamIsNumber>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d007      	beq.n	800e970 <ParamSignUInt32+0x88>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 800e960:	f06f 0189 	mvn.w	r1, #137	; 0x89
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f7fd fb5d 	bl	800c024 <SCPI_ErrorPush>
            result = FALSE;
 800e96a:	2300      	movs	r3, #0
 800e96c:	77fb      	strb	r3, [r7, #31]
 800e96e:	e006      	b.n	800e97e <ParamSignUInt32+0x96>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 800e970:	f06f 0167 	mvn.w	r1, #103	; 0x67
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f7fd fb55 	bl	800c024 <SCPI_ErrorPush>
            result = FALSE;
 800e97a:	2300      	movs	r3, #0
 800e97c:	77fb      	strb	r3, [r7, #31]
        }
    }
    return result;
 800e97e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e980:	4618      	mov	r0, r3
 800e982:	3720      	adds	r7, #32
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	fffffeca 	.word	0xfffffeca

0800e98c <SCPI_ParamInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamInt32(scpi_t * context, int32_t * value, scpi_bool_t mandatory) {
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	60f8      	str	r0, [r7, #12]
 800e994:	60b9      	str	r1, [r7, #8]
 800e996:	4613      	mov	r3, r2
 800e998:	71fb      	strb	r3, [r7, #7]
    return ParamSignUInt32(context, (uint32_t *) value, mandatory, TRUE);
 800e99a:	79fa      	ldrb	r2, [r7, #7]
 800e99c:	2301      	movs	r3, #1
 800e99e:	68b9      	ldr	r1, [r7, #8]
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f7ff ffa1 	bl	800e8e8 <ParamSignUInt32>
 800e9a6:	4603      	mov	r3, r0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <SCPI_ParamUInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory) {
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	4613      	mov	r3, r2
 800e9bc:	71fb      	strb	r3, [r7, #7]
    return ParamSignUInt32(context, value, mandatory, FALSE);
 800e9be:	79fa      	ldrb	r2, [r7, #7]
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	68b9      	ldr	r1, [r7, #8]
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	f7ff ff8f 	bl	800e8e8 <ParamSignUInt32>
 800e9ca:	4603      	mov	r3, r0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3710      	adds	r7, #16
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <SCPI_ParamCharacters>:
 * @param value
 * @param len
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamCharacters(scpi_t * context, const char ** value, size_t * len, scpi_bool_t mandatory) {
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b088      	sub	sp, #32
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
 800e9e0:	70fb      	strb	r3, [r7, #3]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value || !len) {
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d002      	beq.n	800e9ee <SCPI_ParamCharacters+0x1a>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d105      	bne.n	800e9fa <SCPI_ParamCharacters+0x26>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800e9ee:	4917      	ldr	r1, [pc, #92]	; (800ea4c <SCPI_ParamCharacters+0x78>)
 800e9f0:	68f8      	ldr	r0, [r7, #12]
 800e9f2:	f7fd fb17 	bl	800c024 <SCPI_ErrorPush>
        return FALSE;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	e023      	b.n	800ea42 <SCPI_ParamCharacters+0x6e>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 800e9fa:	78fa      	ldrb	r2, [r7, #3]
 800e9fc:	f107 0310 	add.w	r3, r7, #16
 800ea00:	4619      	mov	r1, r3
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	f7ff fd34 	bl	800e470 <SCPI_Parameter>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	77fb      	strb	r3, [r7, #31]
    if (result) {
 800ea0c:	7ffb      	ldrb	r3, [r7, #31]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d015      	beq.n	800ea3e <SCPI_ParamCharacters+0x6a>
        switch (param.type) {
 800ea12:	7c3b      	ldrb	r3, [r7, #16]
 800ea14:	3b0e      	subs	r3, #14
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	d809      	bhi.n	800ea2e <SCPI_ParamCharacters+0x5a>
            case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
            case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
                *value = param.ptr + 1;
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	1c5a      	adds	r2, r3, #1
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	601a      	str	r2, [r3, #0]
                *len = param.len - 2;
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	3b02      	subs	r3, #2
 800ea26:	461a      	mov	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	601a      	str	r2, [r3, #0]
                break;
 800ea2c:	e008      	b.n	800ea40 <SCPI_ParamCharacters+0x6c>
            default:
                *value = param.ptr;
 800ea2e:	697a      	ldr	r2, [r7, #20]
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	601a      	str	r2, [r3, #0]
                *len = param.len;
 800ea34:	69bb      	ldr	r3, [r7, #24]
 800ea36:	461a      	mov	r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	601a      	str	r2, [r3, #0]
                break;
 800ea3c:	e000      	b.n	800ea40 <SCPI_ParamCharacters+0x6c>
        }

        /* TODO: return also parameter type (ProgramMnemonic, ArbitraryBlockProgramData, SingleQuoteProgramData, DoubleQuoteProgramData */
    }
 800ea3e:	bf00      	nop

    return result;
 800ea40:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3720      	adds	r7, #32
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	fffffeca 	.word	0xfffffeca

0800ea50 <scpiParser_parseProgramData>:
 * Parse one parameter and detect type
 * @param state
 * @param token
 * @return
 */
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b08a      	sub	sp, #40	; 0x28
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
    scpi_token_t tmp;
    int result = 0;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	627b      	str	r3, [r7, #36]	; 0x24
    int wsLen;
    int suffixLen;
    int realLen = 0;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	623b      	str	r3, [r7, #32]
    realLen += scpiLex_WhiteSpace(state, &tmp);
 800ea62:	f107 030c 	add.w	r3, r7, #12
 800ea66:	4619      	mov	r1, r3
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7fe f96c 	bl	800cd46 <scpiLex_WhiteSpace>
 800ea6e:	4602      	mov	r2, r0
 800ea70:	6a3b      	ldr	r3, [r7, #32]
 800ea72:	4413      	add	r3, r2
 800ea74:	623b      	str	r3, [r7, #32]

    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 800ea76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d104      	bne.n	800ea86 <scpiParser_parseProgramData+0x36>
 800ea7c:	6839      	ldr	r1, [r7, #0]
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f7fe fbe5 	bl	800d24e <scpiLex_NondecimalNumericData>
 800ea84:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_CharacterProgramData(state, token);
 800ea86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d104      	bne.n	800ea96 <scpiParser_parseProgramData+0x46>
 800ea8c:	6839      	ldr	r1, [r7, #0]
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f7fe fa43 	bl	800cf1a <scpiLex_CharacterProgramData>
 800ea94:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) {
 800ea96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d126      	bne.n	800eaea <scpiParser_parseProgramData+0x9a>
        result = scpiLex_DecimalNumericProgramData(state, token);
 800ea9c:	6839      	ldr	r1, [r7, #0]
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7fe fae1 	bl	800d066 <scpiLex_DecimalNumericProgramData>
 800eaa4:	6278      	str	r0, [r7, #36]	; 0x24
        if (result != 0) {
 800eaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d01e      	beq.n	800eaea <scpiParser_parseProgramData+0x9a>
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 800eaac:	f107 030c 	add.w	r3, r7, #12
 800eab0:	4619      	mov	r1, r3
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f7fe f947 	bl	800cd46 <scpiLex_WhiteSpace>
 800eab8:	61f8      	str	r0, [r7, #28]
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 800eaba:	f107 030c 	add.w	r3, r7, #12
 800eabe:	4619      	mov	r1, r3
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f7fe fb0c 	bl	800d0de <scpiLex_SuffixProgramData>
 800eac6:	61b8      	str	r0, [r7, #24]
            if (suffixLen > 0) {
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	dd0d      	ble.n	800eaea <scpiParser_parseProgramData+0x9a>
                token->len += wsLen + suffixLen;
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	689a      	ldr	r2, [r3, #8]
 800ead2:	69f9      	ldr	r1, [r7, #28]
 800ead4:	69bb      	ldr	r3, [r7, #24]
 800ead6:	440b      	add	r3, r1
 800ead8:	441a      	add	r2, r3
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	609a      	str	r2, [r3, #8]
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	220b      	movs	r2, #11
 800eae2:	701a      	strb	r2, [r3, #0]
                result = token->len;
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	689b      	ldr	r3, [r3, #8]
 800eae8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    if (result == 0) result = scpiLex_StringProgramData(state, token);
 800eaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d104      	bne.n	800eafa <scpiParser_parseProgramData+0xaa>
 800eaf0:	6839      	ldr	r1, [r7, #0]
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f7fe fca8 	bl	800d448 <scpiLex_StringProgramData>
 800eaf8:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 800eafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d104      	bne.n	800eb0a <scpiParser_parseProgramData+0xba>
 800eb00:	6839      	ldr	r1, [r7, #0]
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7fe fd49 	bl	800d59a <scpiLex_ArbitraryBlockProgramData>
 800eb08:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ProgramExpression(state, token);
 800eb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d104      	bne.n	800eb1a <scpiParser_parseProgramData+0xca>
 800eb10:	6839      	ldr	r1, [r7, #0]
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7fe fe43 	bl	800d79e <scpiLex_ProgramExpression>
 800eb18:	6278      	str	r0, [r7, #36]	; 0x24

    realLen += scpiLex_WhiteSpace(state, &tmp);
 800eb1a:	f107 030c 	add.w	r3, r7, #12
 800eb1e:	4619      	mov	r1, r3
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7fe f910 	bl	800cd46 <scpiLex_WhiteSpace>
 800eb26:	4602      	mov	r2, r0
 800eb28:	6a3b      	ldr	r3, [r7, #32]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	623b      	str	r3, [r7, #32]

    return result + realLen;
 800eb2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb30:	6a3b      	ldr	r3, [r7, #32]
 800eb32:	4413      	add	r3, r2
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3728      	adds	r7, #40	; 0x28
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <scpiParser_parseAllProgramData>:
 * @param state
 * @param token
 * @param numberOfParameters
 * @return
 */
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b08a      	sub	sp, #40	; 0x28
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	607a      	str	r2, [r7, #4]

    int result;
    scpi_token_t tmp;
    int paramCount = 0;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	623b      	str	r3, [r7, #32]

    token->len = -1;
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb52:	609a      	str	r2, [r3, #8]
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	2218      	movs	r2, #24
 800eb58:	701a      	strb	r2, [r3, #0]
    token->ptr = state->pos;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	685a      	ldr	r2, [r3, #4]
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	605a      	str	r2, [r3, #4]


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 800eb62:	2301      	movs	r3, #1
 800eb64:	627b      	str	r3, [r7, #36]	; 0x24
 800eb66:	e037      	b.n	800ebd8 <scpiParser_parseAllProgramData+0x9c>
        token->len += result;
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	689a      	ldr	r2, [r3, #8]
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6e:	441a      	add	r2, r3
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	609a      	str	r2, [r3, #8]

        if (result == 0) {
 800eb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d109      	bne.n	800eb8e <scpiParser_parseAllProgramData+0x52>
            token->type = SCPI_TOKEN_UNKNOWN;
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	221a      	movs	r2, #26
 800eb7e:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	2200      	movs	r2, #0
 800eb84:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 800eb86:	f04f 33ff 	mov.w	r3, #4294967295
 800eb8a:	623b      	str	r3, [r7, #32]
            break;
 800eb8c:	e027      	b.n	800ebde <scpiParser_parseAllProgramData+0xa2>
        }

        result = scpiParser_parseProgramData(state, &tmp);
 800eb8e:	f107 0314 	add.w	r3, r7, #20
 800eb92:	4619      	mov	r1, r3
 800eb94:	68f8      	ldr	r0, [r7, #12]
 800eb96:	f7ff ff5b 	bl	800ea50 <scpiParser_parseProgramData>
 800eb9a:	6278      	str	r0, [r7, #36]	; 0x24
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
 800eb9c:	7d3b      	ldrb	r3, [r7, #20]
 800eb9e:	2b1a      	cmp	r3, #26
 800eba0:	d006      	beq.n	800ebb0 <scpiParser_parseAllProgramData+0x74>
            token->len += result;
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	689a      	ldr	r2, [r3, #8]
 800eba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba8:	441a      	add	r2, r3
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	609a      	str	r2, [r3, #8]
 800ebae:	e009      	b.n	800ebc4 <scpiParser_parseAllProgramData+0x88>
        } else {
            token->type = SCPI_TOKEN_UNKNOWN;
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	221a      	movs	r2, #26
 800ebb4:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 800ebbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc0:	623b      	str	r3, [r7, #32]
            break;
 800ebc2:	e00c      	b.n	800ebde <scpiParser_parseAllProgramData+0xa2>
        }
        paramCount++;
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	623b      	str	r3, [r7, #32]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 800ebca:	f107 0314 	add.w	r3, r7, #20
 800ebce:	4619      	mov	r1, r3
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f7fe fe38 	bl	800d846 <scpiLex_Comma>
 800ebd6:	6278      	str	r0, [r7, #36]	; 0x24
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1c4      	bne.n	800eb68 <scpiParser_parseAllProgramData+0x2c>
    }

    if (token->len == -1) {
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe6:	d102      	bne.n	800ebee <scpiParser_parseAllProgramData+0xb2>
        token->len = 0;
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	2200      	movs	r2, #0
 800ebec:	609a      	str	r2, [r3, #8]
    }

    if (numberOfParameters != NULL) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d002      	beq.n	800ebfa <scpiParser_parseAllProgramData+0xbe>
        *numberOfParameters = paramCount;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6a3a      	ldr	r2, [r7, #32]
 800ebf8:	601a      	str	r2, [r3, #0]
    }
    return token->len;
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	689b      	ldr	r3, [r3, #8]
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3728      	adds	r7, #40	; 0x28
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b08c      	sub	sp, #48	; 0x30
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	60f8      	str	r0, [r7, #12]
 800ec0e:	60b9      	str	r1, [r7, #8]
 800ec10:	607a      	str	r2, [r7, #4]
    lex_state_t lex_state;
    scpi_token_t tmp;
    int result = 0;
 800ec12:	2300      	movs	r3, #0
 800ec14:	62fb      	str	r3, [r7, #44]	; 0x2c

    lex_state.buffer = lex_state.pos = buffer;
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	627b      	str	r3, [r7, #36]	; 0x24
 800ec1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1c:	623b      	str	r3, [r7, #32]
    lex_state.len = len;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	62bb      	str	r3, [r7, #40]	; 0x28
    state->numberOfParameters = 0;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2200      	movs	r2, #0
 800ec26:	619a      	str	r2, [r3, #24]

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
 800ec28:	f107 0214 	add.w	r2, r7, #20
 800ec2c:	f107 0320 	add.w	r3, r7, #32
 800ec30:	4611      	mov	r1, r2
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7fe f887 	bl	800cd46 <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
 800ec38:	68fa      	ldr	r2, [r7, #12]
 800ec3a:	f107 0320 	add.w	r3, r7, #32
 800ec3e:	4611      	mov	r1, r2
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fe f908 	bl	800ce56 <scpiLex_ProgramHeader>
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	db1e      	blt.n	800ec8a <scpiParser_detectProgramMessageUnit+0x84>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
 800ec4c:	f107 0214 	add.w	r2, r7, #20
 800ec50:	f107 0320 	add.w	r3, r7, #32
 800ec54:	4611      	mov	r1, r2
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7fe f875 	bl	800cd46 <scpiLex_WhiteSpace>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	dd0b      	ble.n	800ec7a <scpiParser_detectProgramMessageUnit+0x74>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f103 010c 	add.w	r1, r3, #12
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f103 0218 	add.w	r2, r3, #24
 800ec6e:	f107 0320 	add.w	r3, r7, #32
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7ff ff62 	bl	800eb3c <scpiParser_parseAllProgramData>
 800ec78:	e014      	b.n	800eca4 <scpiParser_detectProgramMessageUnit+0x9e>
        } else {
            invalidateToken(&state->programData, lex_state.pos);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	330c      	adds	r3, #12
 800ec7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec80:	4611      	mov	r1, r2
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7ff fbe0 	bl	800e448 <invalidateToken>
 800ec88:	e00c      	b.n	800eca4 <scpiParser_detectProgramMessageUnit+0x9e>
        }
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	6a3a      	ldr	r2, [r7, #32]
 800ec8e:	4611      	mov	r1, r2
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7ff fbd9 	bl	800e448 <invalidateToken>
        invalidateToken(&state->programData, lex_state.buffer);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	330c      	adds	r3, #12
 800ec9a:	6a3a      	ldr	r2, [r7, #32]
 800ec9c:	4611      	mov	r1, r2
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7ff fbd2 	bl	800e448 <invalidateToken>
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
 800eca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d108      	bne.n	800ecbc <scpiParser_detectProgramMessageUnit+0xb6>
 800ecaa:	f107 0214 	add.w	r2, r7, #20
 800ecae:	f107 0320 	add.w	r3, r7, #32
 800ecb2:	4611      	mov	r1, r2
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7fe fe0c 	bl	800d8d2 <scpiLex_NewLine>
 800ecba:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
 800ecbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d108      	bne.n	800ecd4 <scpiParser_detectProgramMessageUnit+0xce>
 800ecc2:	f107 0214 	add.w	r2, r7, #20
 800ecc6:	f107 0320 	add.w	r3, r7, #32
 800ecca:	4611      	mov	r1, r2
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7fe fddd 	bl	800d88c <scpiLex_Semicolon>
 800ecd2:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
 800ecd4:	f107 0320 	add.w	r3, r7, #32
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fd fe31 	bl	800c940 <scpiLex_IsEos>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d112      	bne.n	800ed0a <scpiParser_detectProgramMessageUnit+0x104>
 800ece4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10f      	bne.n	800ed0a <scpiParser_detectProgramMessageUnit+0x104>
        lex_state.pos++;
 800ecea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecec:	3301      	adds	r3, #1
 800ecee:	627b      	str	r3, [r7, #36]	; 0x24

        state->programHeader.len = 1;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	609a      	str	r2, [r3, #8]
        state->programHeader.type = SCPI_TOKEN_INVALID;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2219      	movs	r2, #25
 800ecfa:	701a      	strb	r2, [r3, #0]

        invalidateToken(&state->programData, lex_state.buffer);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	330c      	adds	r3, #12
 800ed00:	6a3a      	ldr	r2, [r7, #32]
 800ed02:	4611      	mov	r1, r2
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7ff fb9f 	bl	800e448 <invalidateToken>
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
 800ed0a:	7d3b      	ldrb	r3, [r7, #20]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d103      	bne.n	800ed18 <scpiParser_detectProgramMessageUnit+0x112>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2202      	movs	r2, #2
 800ed14:	771a      	strb	r2, [r3, #28]
 800ed16:	e009      	b.n	800ed2c <scpiParser_detectProgramMessageUnit+0x126>
    } else if (SCPI_TOKEN_NL == tmp.type) {
 800ed18:	7d3b      	ldrb	r3, [r7, #20]
 800ed1a:	2b05      	cmp	r3, #5
 800ed1c:	d103      	bne.n	800ed26 <scpiParser_detectProgramMessageUnit+0x120>
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2201      	movs	r2, #1
 800ed22:	771a      	strb	r2, [r3, #28]
 800ed24:	e002      	b.n	800ed2c <scpiParser_detectProgramMessageUnit+0x126>
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	771a      	strb	r2, [r3, #28]
    }

    return lex_state.pos - lex_state.buffer;
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2e:	461a      	mov	r2, r3
 800ed30:	6a3b      	ldr	r3, [r7, #32]
 800ed32:	1ad3      	subs	r3, r2, r3
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3730      	adds	r7, #48	; 0x30
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
 800ed3c:	b480      	push	{r7}
 800ed3e:	b089      	sub	sp, #36	; 0x24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	607a      	str	r2, [r7, #4]
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	61bb      	str	r3, [r7, #24]

    while ((strend != str) && ((c = *str++) != 0)) {
 800ed50:	e011      	b.n	800ed76 <strnpbrk+0x3a>
        for (scanp = set; (sc = *scanp++) != '\0';)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	61fb      	str	r3, [r7, #28]
 800ed56:	e006      	b.n	800ed66 <strnpbrk+0x2a>
            if (sc == c)
 800ed58:	693a      	ldr	r2, [r7, #16]
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d102      	bne.n	800ed66 <strnpbrk+0x2a>
                return ((char *) (str - 1));
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	3b01      	subs	r3, #1
 800ed64:	e014      	b.n	800ed90 <strnpbrk+0x54>
        for (scanp = set; (sc = *scanp++) != '\0';)
 800ed66:	69fb      	ldr	r3, [r7, #28]
 800ed68:	1c5a      	adds	r2, r3, #1
 800ed6a:	61fa      	str	r2, [r7, #28]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	613b      	str	r3, [r7, #16]
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1f0      	bne.n	800ed58 <strnpbrk+0x1c>
    while ((strend != str) && ((c = *str++) != 0)) {
 800ed76:	69ba      	ldr	r2, [r7, #24]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d007      	beq.n	800ed8e <strnpbrk+0x52>
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	1c5a      	adds	r2, r3, #1
 800ed82:	60fa      	str	r2, [r7, #12]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	617b      	str	r3, [r7, #20]
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d1e1      	bne.n	800ed52 <strnpbrk+0x16>
    }
    return (NULL);
 800ed8e:	2300      	movs	r3, #0
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3724      	adds	r7, #36	; 0x24
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr

0800ed9c <UInt32ToStrBaseSign>:
 * @param len   string buffer length
 * @param base  output base
 * @param sign
 * @return number of bytes written to str (without '\0')
 */
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 800ed9c:	b4b0      	push	{r4, r5, r7}
 800ed9e:	b08f      	sub	sp, #60	; 0x3c
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	607a      	str	r2, [r7, #4]
 800eda8:	70fb      	strb	r3, [r7, #3]
    const char digits[] = "0123456789ABCDEF";
 800edaa:	4b4a      	ldr	r3, [pc, #296]	; (800eed4 <UInt32ToStrBaseSign+0x138>)
 800edac:	f107 0414 	add.w	r4, r7, #20
 800edb0:	461d      	mov	r5, r3
 800edb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edb6:	682b      	ldr	r3, [r5, #0]
 800edb8:	7023      	strb	r3, [r4, #0]

#define ADD_CHAR(c) if (pos < len) str[pos++] = (c)
    uint32_t x = 0;
 800edba:	2300      	movs	r3, #0
 800edbc:	637b      	str	r3, [r7, #52]	; 0x34
    int_fast8_t digit;
    size_t pos = 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t uval = val;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (uval == 0) {
 800edc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d10b      	bne.n	800ede4 <UInt32ToStrBaseSign+0x48>
        ADD_CHAR('0');
 800edcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d26f      	bcs.n	800eeb4 <UInt32ToStrBaseSign+0x118>
 800edd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd6:	1c5a      	adds	r2, r3, #1
 800edd8:	633a      	str	r2, [r7, #48]	; 0x30
 800edda:	68ba      	ldr	r2, [r7, #8]
 800eddc:	4413      	add	r3, r2
 800edde:	2230      	movs	r2, #48	; 0x30
 800ede0:	701a      	strb	r2, [r3, #0]
 800ede2:	e067      	b.n	800eeb4 <UInt32ToStrBaseSign+0x118>
    } else {

        switch (base) {
 800ede4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ede8:	2b08      	cmp	r3, #8
 800edea:	d007      	beq.n	800edfc <UInt32ToStrBaseSign+0x60>
 800edec:	2b10      	cmp	r3, #16
 800edee:	d00e      	beq.n	800ee0e <UInt32ToStrBaseSign+0x72>
 800edf0:	2b02      	cmp	r3, #2
 800edf2:	d107      	bne.n	800ee04 <UInt32ToStrBaseSign+0x68>
            case 2:
                x = 0x80000000L;
 800edf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800edf8:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800edfa:	e00c      	b.n	800ee16 <UInt32ToStrBaseSign+0x7a>
            case 8:
                x = 0x40000000L;
 800edfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee00:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800ee02:	e008      	b.n	800ee16 <UInt32ToStrBaseSign+0x7a>
            default:
            case 10:
                base = 10;
 800ee04:	230a      	movs	r3, #10
 800ee06:	70fb      	strb	r3, [r7, #3]
                x = 1000000000L;
 800ee08:	4b33      	ldr	r3, [pc, #204]	; (800eed8 <UInt32ToStrBaseSign+0x13c>)
 800ee0a:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800ee0c:	e003      	b.n	800ee16 <UInt32ToStrBaseSign+0x7a>
            case 16:
                x = 0x10000000L;
 800ee0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ee12:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800ee14:	bf00      	nop
        }

        /* add sign for numbers in base 10 */
        if (sign && ((int32_t) val < 0) && (base == 10)) {
 800ee16:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d01b      	beq.n	800ee56 <UInt32ToStrBaseSign+0xba>
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	da18      	bge.n	800ee56 <UInt32ToStrBaseSign+0xba>
 800ee24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee28:	2b0a      	cmp	r3, #10
 800ee2a:	d114      	bne.n	800ee56 <UInt32ToStrBaseSign+0xba>
            uval = -val;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	425b      	negs	r3, r3
 800ee30:	62fb      	str	r3, [r7, #44]	; 0x2c
            ADD_CHAR('-');
 800ee32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d20d      	bcs.n	800ee56 <UInt32ToStrBaseSign+0xba>
 800ee3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3c:	1c5a      	adds	r2, r3, #1
 800ee3e:	633a      	str	r2, [r7, #48]	; 0x30
 800ee40:	68ba      	ldr	r2, [r7, #8]
 800ee42:	4413      	add	r3, r2
 800ee44:	222d      	movs	r2, #45	; 0x2d
 800ee46:	701a      	strb	r2, [r3, #0]
        }

        /* remove leading zeros */
        while ((uval / x) == 0) {
 800ee48:	e005      	b.n	800ee56 <UInt32ToStrBaseSign+0xba>
            x /= base;
 800ee4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee54:	637b      	str	r3, [r7, #52]	; 0x34
        while ((uval / x) == 0) {
 800ee56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d0f3      	beq.n	800ee4a <UInt32ToStrBaseSign+0xae>
        }

        do {
            digit = (uint8_t) (uval / x);
 800ee62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	62bb      	str	r3, [r7, #40]	; 0x28
            ADD_CHAR(digits[digit]);
 800ee6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d20a      	bcs.n	800ee8c <UInt32ToStrBaseSign+0xf0>
 800ee76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee78:	1c5a      	adds	r2, r3, #1
 800ee7a:	633a      	str	r2, [r7, #48]	; 0x30
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	4413      	add	r3, r2
 800ee80:	f107 0114 	add.w	r1, r7, #20
 800ee84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee86:	440a      	add	r2, r1
 800ee88:	7812      	ldrb	r2, [r2, #0]
 800ee8a:	701a      	strb	r2, [r3, #0]
            uval -= digit * x;
 800ee8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee90:	fb02 f303 	mul.w	r3, r2, r3
 800ee94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee96:	1ad3      	subs	r3, r2, r3
 800ee98:	62fb      	str	r3, [r7, #44]	; 0x2c
            x /= base;
 800ee9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eea0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eea4:	637b      	str	r3, [r7, #52]	; 0x34
        } while (x && (pos < len));
 800eea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d003      	beq.n	800eeb4 <UInt32ToStrBaseSign+0x118>
 800eeac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d3d6      	bcc.n	800ee62 <UInt32ToStrBaseSign+0xc6>
    }

    if (pos < len) str[pos] = 0;
 800eeb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d204      	bcs.n	800eec6 <UInt32ToStrBaseSign+0x12a>
 800eebc:	68ba      	ldr	r2, [r7, #8]
 800eebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec0:	4413      	add	r3, r2
 800eec2:	2200      	movs	r2, #0
 800eec4:	701a      	strb	r2, [r3, #0]
    return pos;
 800eec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
#undef ADD_CHAR
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	373c      	adds	r7, #60	; 0x3c
 800eecc:	46bd      	mov	sp, r7
 800eece:	bcb0      	pop	{r4, r5, r7}
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop
 800eed4:	08013ca0 	.word	0x08013ca0
 800eed8:	3b9aca00 	.word	0x3b9aca00

0800eedc <SCPI_UInt32ToStrBase>:
 * @param str   converted textual representation
 * @param len   string buffer length
 * @param base  output base
 * @return number of bytes written to str (without '\0')
 */
size_t SCPI_UInt32ToStrBase(uint32_t val, char * str, size_t len, int8_t base) {
 800eedc:	b580      	push	{r7, lr}
 800eede:	b086      	sub	sp, #24
 800eee0:	af02      	add	r7, sp, #8
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	607a      	str	r2, [r7, #4]
 800eee8:	70fb      	strb	r3, [r7, #3]
    return UInt32ToStrBaseSign(val, str, len, base, FALSE);
 800eeea:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800eeee:	2300      	movs	r3, #0
 800eef0:	9300      	str	r3, [sp, #0]
 800eef2:	4613      	mov	r3, r2
 800eef4:	687a      	ldr	r2, [r7, #4]
 800eef6:	68b9      	ldr	r1, [r7, #8]
 800eef8:	68f8      	ldr	r0, [r7, #12]
 800eefa:	f7ff ff4f 	bl	800ed9c <UInt32ToStrBaseSign>
 800eefe:	4603      	mov	r3, r0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3710      	adds	r7, #16
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <strBaseToInt32>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b086      	sub	sp, #24
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	4613      	mov	r3, r2
 800ef14:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtol(str, &endptr, base);
 800ef16:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ef1a:	f107 0314 	add.w	r3, r7, #20
 800ef1e:	4619      	mov	r1, r3
 800ef20:	68f8      	ldr	r0, [r7, #12]
 800ef22:	f002 fcc5 	bl	80118b0 <strtol>
 800ef26:	4602      	mov	r2, r0
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	601a      	str	r2, [r3, #0]
    return endptr - str;
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	1ad3      	subs	r3, r2, r3
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3718      	adds	r7, #24
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <strBaseToUInt32>:
 * Converts string to unsigned 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b086      	sub	sp, #24
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	4613      	mov	r3, r2
 800ef48:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtoul(str, &endptr, base);
 800ef4a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ef4e:	f107 0314 	add.w	r3, r7, #20
 800ef52:	4619      	mov	r1, r3
 800ef54:	68f8      	ldr	r0, [r7, #12]
 800ef56:	f002 fe05 	bl	8011b64 <strtoul>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	601a      	str	r2, [r3, #0]
    return endptr - str;
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	461a      	mov	r2, r3
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	1ad3      	subs	r3, r2, r3
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3718      	adds	r7, #24
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <strBaseToInt64>:
 * Converts string to signed 64bit integer representation
 * @param str   string value
 * @param val   64bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToInt64(const char * str, int64_t * val, int8_t base) {
 800ef70:	b590      	push	{r4, r7, lr}
 800ef72:	b087      	sub	sp, #28
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	60f8      	str	r0, [r7, #12]
 800ef78:	60b9      	str	r1, [r7, #8]
 800ef7a:	4613      	mov	r3, r2
 800ef7c:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = SCPIDEFINE_strtoll(str, &endptr, base);
 800ef7e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ef82:	f107 0314 	add.w	r3, r7, #20
 800ef86:	4619      	mov	r1, r3
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f002 fd5b 	bl	8011a44 <strtoll>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	460c      	mov	r4, r1
 800ef92:	68ba      	ldr	r2, [r7, #8]
 800ef94:	e9c2 3400 	strd	r3, r4, [r2]
    return endptr - str;
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	1ad3      	subs	r3, r2, r3
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	371c      	adds	r7, #28
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd90      	pop	{r4, r7, pc}

0800efa8 <strBaseToUInt64>:
 * Converts string to unsigned 64bit integer representation
 * @param str   string value
 * @param val   64bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToUInt64(const char * str, uint64_t * val, int8_t base) {
 800efa8:	b590      	push	{r4, r7, lr}
 800efaa:	b087      	sub	sp, #28
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	4613      	mov	r3, r2
 800efb4:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = SCPIDEFINE_strtoull(str, &endptr, base);
 800efb6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800efba:	f107 0314 	add.w	r3, r7, #20
 800efbe:	4619      	mov	r1, r3
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f002 fe9b 	bl	8011cfc <strtoull>
 800efc6:	4603      	mov	r3, r0
 800efc8:	460c      	mov	r4, r1
 800efca:	68ba      	ldr	r2, [r7, #8]
 800efcc:	e9c2 3400 	strd	r3, r4, [r2]
    return endptr - str;
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	461a      	mov	r2, r3
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	1ad3      	subs	r3, r2, r3
}
 800efd8:	4618      	mov	r0, r3
 800efda:	371c      	adds	r7, #28
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd90      	pop	{r4, r7, pc}

0800efe0 <strToDouble>:
 * @param val   double result
 * @return      number of bytes used in string
 */
double simple_strtod(const char* str, char** endptr);

size_t strToDouble(const char * str, double * val) {
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
    char * endptr;
    *val = simple_strtod(str, &endptr);
 800efea:	f107 030c 	add.w	r3, r7, #12
 800efee:	4619      	mov	r1, r3
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 f811 	bl	800f018 <simple_strtod>
 800eff6:	eeb0 7a40 	vmov.f32	s14, s0
 800effa:	eef0 7a60 	vmov.f32	s15, s1
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	ed83 7b00 	vstr	d7, [r3]
    return endptr - str;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	461a      	mov	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	1ad3      	subs	r3, r2, r3
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	0000      	movs	r0, r0
	...

0800f018 <simple_strtod>:

double simple_strtod(const char* str, char** endptr)
{
 800f018:	b5b0      	push	{r4, r5, r7, lr}
 800f01a:	b088      	sub	sp, #32
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
 int8_t inc;
 double result = 0.0;
 800f022:	f04f 0300 	mov.w	r3, #0
 800f026:	f04f 0400 	mov.w	r4, #0
 800f02a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 char * c_tmp;
 c_tmp = strchr(str, '.');
 800f02e:	212e      	movs	r1, #46	; 0x2e
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f002 fb83 	bl	801173c <strchr>
 800f036:	60f8      	str	r0, [r7, #12]
 *endptr = (char*)str;
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	687a      	ldr	r2, [r7, #4]
 800f03c:	601a      	str	r2, [r3, #0]
 if(c_tmp != NULL)
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2b00      	cmp	r3, #0
 800f042:	f000 8087 	beq.w	800f154 <simple_strtod+0x13c>
 {
    c_tmp++;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	3301      	adds	r3, #1
 800f04a:	60fb      	str	r3, [r7, #12]
    inc = -1;
 800f04c:	23ff      	movs	r3, #255	; 0xff
 800f04e:	77fb      	strb	r3, [r7, #31]
    while(*c_tmp != 0 && inc > -9)
 800f050:	e034      	b.n	800f0bc <simple_strtod+0xa4>
    {
        result += (*c_tmp - '0') * pow(10.0, inc);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	3b30      	subs	r3, #48	; 0x30
 800f058:	4618      	mov	r0, r3
 800f05a:	f7f1 fa7b 	bl	8000554 <__aeabi_i2d>
 800f05e:	4604      	mov	r4, r0
 800f060:	460d      	mov	r5, r1
 800f062:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f066:	4618      	mov	r0, r3
 800f068:	f7f1 fa74 	bl	8000554 <__aeabi_i2d>
 800f06c:	4602      	mov	r2, r0
 800f06e:	460b      	mov	r3, r1
 800f070:	ec43 2b11 	vmov	d1, r2, r3
 800f074:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 800f170 <simple_strtod+0x158>
 800f078:	f003 fa26 	bl	80124c8 <pow>
 800f07c:	ec53 2b10 	vmov	r2, r3, d0
 800f080:	4620      	mov	r0, r4
 800f082:	4629      	mov	r1, r5
 800f084:	f7f1 fad0 	bl	8000628 <__aeabi_dmul>
 800f088:	4603      	mov	r3, r0
 800f08a:	460c      	mov	r4, r1
 800f08c:	461a      	mov	r2, r3
 800f08e:	4623      	mov	r3, r4
 800f090:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f094:	f7f1 f912 	bl	80002bc <__adddf3>
 800f098:	4603      	mov	r3, r0
 800f09a:	460c      	mov	r4, r1
 800f09c:	e9c7 3404 	strd	r3, r4, [r7, #16]
        c_tmp++; inc--; (*endptr)++;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	60fb      	str	r3, [r7, #12]
 800f0a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	77fb      	strb	r3, [r7, #31]
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	1c5a      	adds	r2, r3, #1
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	601a      	str	r2, [r3, #0]
    while(*c_tmp != 0 && inc > -9)
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d004      	beq.n	800f0ce <simple_strtod+0xb6>
 800f0c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f0c8:	f113 0f08 	cmn.w	r3, #8
 800f0cc:	dac1      	bge.n	800f052 <simple_strtod+0x3a>
    }
    inc = 0;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	77fb      	strb	r3, [r7, #31]
    c_tmp = strchr(str, '.');
 800f0d2:	212e      	movs	r1, #46	; 0x2e
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f002 fb31 	bl	801173c <strchr>
 800f0da:	60f8      	str	r0, [r7, #12]
    c_tmp--;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	3b01      	subs	r3, #1
 800f0e0:	60fb      	str	r3, [r7, #12]
    do
    {
        result += (*c_tmp - '0') * pow(10.0,inc);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	3b30      	subs	r3, #48	; 0x30
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7f1 fa33 	bl	8000554 <__aeabi_i2d>
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	460d      	mov	r5, r1
 800f0f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7f1 fa2c 	bl	8000554 <__aeabi_i2d>
 800f0fc:	4602      	mov	r2, r0
 800f0fe:	460b      	mov	r3, r1
 800f100:	ec43 2b11 	vmov	d1, r2, r3
 800f104:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800f170 <simple_strtod+0x158>
 800f108:	f003 f9de 	bl	80124c8 <pow>
 800f10c:	ec53 2b10 	vmov	r2, r3, d0
 800f110:	4620      	mov	r0, r4
 800f112:	4629      	mov	r1, r5
 800f114:	f7f1 fa88 	bl	8000628 <__aeabi_dmul>
 800f118:	4603      	mov	r3, r0
 800f11a:	460c      	mov	r4, r1
 800f11c:	461a      	mov	r2, r3
 800f11e:	4623      	mov	r3, r4
 800f120:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f124:	f7f1 f8ca 	bl	80002bc <__adddf3>
 800f128:	4603      	mov	r3, r0
 800f12a:	460c      	mov	r4, r1
 800f12c:	e9c7 3404 	strd	r3, r4, [r7, #16]
        c_tmp--; inc++; (*endptr)++;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	3b01      	subs	r3, #1
 800f134:	60fb      	str	r3, [r7, #12]
 800f136:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	3301      	adds	r3, #1
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	77fb      	strb	r3, [r7, #31]
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	1c5a      	adds	r2, r3, #1
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	601a      	str	r2, [r3, #0]
    }while(c_tmp >= str);
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	429a      	cmp	r2, r3
 800f152:	d2c6      	bcs.n	800f0e2 <simple_strtod+0xca>
 }
 return result;
 800f154:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f158:	ec44 3b17 	vmov	d7, r3, r4
}
 800f15c:	eeb0 0a47 	vmov.f32	s0, s14
 800f160:	eef0 0a67 	vmov.f32	s1, s15
 800f164:	3720      	adds	r7, #32
 800f166:	46bd      	mov	sp, r7
 800f168:	bdb0      	pop	{r4, r5, r7, pc}
 800f16a:	bf00      	nop
 800f16c:	f3af 8000 	nop.w
 800f170:	00000000 	.word	0x00000000
 800f174:	40240000 	.word	0x40240000

0800f178 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	607a      	str	r2, [r7, #4]
 800f184:	603b      	str	r3, [r7, #0]
    if (len1 != len2) {
 800f186:	68ba      	ldr	r2, [r7, #8]
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d001      	beq.n	800f192 <compareStr+0x1a>
        return FALSE;
 800f18e:	2300      	movs	r3, #0
 800f190:	e00a      	b.n	800f1a8 <compareStr+0x30>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
 800f192:	683a      	ldr	r2, [r7, #0]
 800f194:	6879      	ldr	r1, [r7, #4]
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	f002 fadd 	bl	8011756 <strncasecmp>
 800f19c:	4603      	mov	r3, r0
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d101      	bne.n	800f1a6 <compareStr+0x2e>
        return TRUE;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	e000      	b.n	800f1a8 <compareStr+0x30>
    }

    return FALSE;
 800f1a6:	2300      	movs	r3, #0
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3710      	adds	r7, #16
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <compareStrAndNum>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if strings match
 */
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	607a      	str	r2, [r7, #4]
 800f1bc:	603b      	str	r3, [r7, #0]
    scpi_bool_t result = FALSE;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	77fb      	strb	r3, [r7, #31]
    size_t i;

    if (len2 < len1) {
 800f1c2:	683a      	ldr	r2, [r7, #0]
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d201      	bcs.n	800f1ce <compareStrAndNum+0x1e>
        return FALSE;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	e044      	b.n	800f258 <compareStrAndNum+0xa8>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
 800f1ce:	68ba      	ldr	r2, [r7, #8]
 800f1d0:	6879      	ldr	r1, [r7, #4]
 800f1d2:	68f8      	ldr	r0, [r7, #12]
 800f1d4:	f002 fabf 	bl	8011756 <strncasecmp>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d13b      	bne.n	800f256 <compareStrAndNum+0xa6>
        result = TRUE;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	77fb      	strb	r3, [r7, #31]

        if (num) {
 800f1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d01b      	beq.n	800f220 <compareStrAndNum+0x70>
            if (len1 == len2) {
 800f1e8:	68ba      	ldr	r2, [r7, #8]
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d032      	beq.n	800f256 <compareStrAndNum+0xa6>
                /* *num = 1; */
            } else {
                int32_t tmpNum;
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	f107 0114 	add.w	r1, r7, #20
 800f1fa:	220a      	movs	r2, #10
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7ff fe83 	bl	800ef08 <strBaseToInt32>
 800f202:	4602      	mov	r2, r0
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	4413      	add	r3, r2
 800f208:	61bb      	str	r3, [r7, #24]
                if (i != len2) {
 800f20a:	69ba      	ldr	r2, [r7, #24]
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d002      	beq.n	800f218 <compareStrAndNum+0x68>
                    result = FALSE;
 800f212:	2300      	movs	r3, #0
 800f214:	77fb      	strb	r3, [r7, #31]
 800f216:	e01e      	b.n	800f256 <compareStrAndNum+0xa6>
                } else {
                    *num = tmpNum;
 800f218:	697a      	ldr	r2, [r7, #20]
 800f21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21c:	601a      	str	r2, [r3, #0]
 800f21e:	e01a      	b.n	800f256 <compareStrAndNum+0xa6>
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	61bb      	str	r3, [r7, #24]
 800f224:	e013      	b.n	800f24e <compareStrAndNum+0x9e>
                if (!isdigit((int) str2[i])) {
 800f226:	f002 fa1d 	bl	8011664 <__locale_ctype_ptr>
 800f22a:	4601      	mov	r1, r0
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	69bb      	ldr	r3, [r7, #24]
 800f230:	4413      	add	r3, r2
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	3301      	adds	r3, #1
 800f236:	440b      	add	r3, r1
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	f003 0304 	and.w	r3, r3, #4
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d102      	bne.n	800f248 <compareStrAndNum+0x98>
                    result = FALSE;
 800f242:	2300      	movs	r3, #0
 800f244:	77fb      	strb	r3, [r7, #31]
                    break;
 800f246:	e006      	b.n	800f256 <compareStrAndNum+0xa6>
            for (i = len1; i < len2; i++) {
 800f248:	69bb      	ldr	r3, [r7, #24]
 800f24a:	3301      	adds	r3, #1
 800f24c:	61bb      	str	r3, [r7, #24]
 800f24e:	69ba      	ldr	r2, [r7, #24]
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	429a      	cmp	r2, r3
 800f254:	d3e7      	bcc.n	800f226 <compareStrAndNum+0x76>
                }
            }
        }
    }

    return result;
 800f256:	7ffb      	ldrb	r3, [r7, #31]
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3720      	adds	r7, #32
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 800f26a:	2300      	movs	r3, #0
 800f26c:	60fb      	str	r3, [r7, #12]
 800f26e:	e012      	b.n	800f296 <patternSeparatorShortPos+0x36>
        if (islower((unsigned char) pattern[i])) {
 800f270:	f002 f9f8 	bl	8011664 <__locale_ctype_ptr>
 800f274:	4601      	mov	r1, r0
 800f276:	687a      	ldr	r2, [r7, #4]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	4413      	add	r3, r2
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	3301      	adds	r3, #1
 800f280:	440b      	add	r3, r1
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	f003 0303 	and.w	r3, r3, #3
 800f288:	2b02      	cmp	r3, #2
 800f28a:	d101      	bne.n	800f290 <patternSeparatorShortPos+0x30>
            return i;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	e00d      	b.n	800f2ac <patternSeparatorShortPos+0x4c>
    for (i = 0; (i < len) && pattern[i]; i++) {
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	3301      	adds	r3, #1
 800f294:	60fb      	str	r3, [r7, #12]
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d205      	bcs.n	800f2aa <patternSeparatorShortPos+0x4a>
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1e2      	bne.n	800f270 <patternSeparatorShortPos+0x10>
        }
    }
    return i;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <patternSeparatorPos>:
 * Find pattern separator position
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorPos(const char * pattern, size_t len) {
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]

    char * separator = strnpbrk(pattern, len, "?:[]");
 800f2be:	4a09      	ldr	r2, [pc, #36]	; (800f2e4 <patternSeparatorPos+0x30>)
 800f2c0:	6839      	ldr	r1, [r7, #0]
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f7ff fd3a 	bl	800ed3c <strnpbrk>
 800f2c8:	60f8      	str	r0, [r7, #12]
    if (separator == NULL) {
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d101      	bne.n	800f2d4 <patternSeparatorPos+0x20>
        return len;
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	e002      	b.n	800f2da <patternSeparatorPos+0x26>
    } else {
        return separator - pattern;
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	1ad3      	subs	r3, r2, r3
    }
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3710      	adds	r7, #16
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	08013cc0 	.word	0x08013cc0

0800f2e8 <cmdSeparatorPos>:
 * Find command separator position
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
static size_t cmdSeparatorPos(const char * cmd, size_t len) {
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
    char * separator = strnpbrk(cmd, len, ":?");
 800f2f2:	4a0a      	ldr	r2, [pc, #40]	; (800f31c <cmdSeparatorPos+0x34>)
 800f2f4:	6839      	ldr	r1, [r7, #0]
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f7ff fd20 	bl	800ed3c <strnpbrk>
 800f2fc:	60b8      	str	r0, [r7, #8]
    size_t result;
    if (separator == NULL) {
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d102      	bne.n	800f30a <cmdSeparatorPos+0x22>
        result = len;
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	60fb      	str	r3, [r7, #12]
 800f308:	e003      	b.n	800f312 <cmdSeparatorPos+0x2a>
    } else {
        result = separator - cmd;
 800f30a:	68ba      	ldr	r2, [r7, #8]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	60fb      	str	r3, [r7, #12]
    }

    return result;
 800f312:	68fb      	ldr	r3, [r7, #12]
}
 800f314:	4618      	mov	r0, r3
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	08013cc8 	.word	0x08013cc8

0800f320 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
 800f320:	b580      	push	{r7, lr}
 800f322:	b088      	sub	sp, #32
 800f324:	af02      	add	r7, sp, #8
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	607a      	str	r2, [r7, #4]
 800f32c:	603b      	str	r3, [r7, #0]
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d02c      	beq.n	800f38e <matchPattern+0x6e>
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	3b01      	subs	r3, #1
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	4413      	add	r3, r2
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	2b23      	cmp	r3, #35	; 0x23
 800f340:	d125      	bne.n	800f38e <matchPattern+0x6e>
        size_t new_pattern_len = pattern_len - 1;
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	3b01      	subs	r3, #1
 800f346:	617b      	str	r3, [r7, #20]

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 800f348:	6979      	ldr	r1, [r7, #20]
 800f34a:	68f8      	ldr	r0, [r7, #12]
 800f34c:	f7ff ff88 	bl	800f260 <patternSeparatorShortPos>
 800f350:	4603      	mov	r3, r0
 800f352:	613b      	str	r3, [r7, #16]

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 800f354:	6a3b      	ldr	r3, [r7, #32]
 800f356:	9300      	str	r3, [sp, #0]
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	687a      	ldr	r2, [r7, #4]
 800f35c:	6979      	ldr	r1, [r7, #20]
 800f35e:	68f8      	ldr	r0, [r7, #12]
 800f360:	f7ff ff26 	bl	800f1b0 <compareStrAndNum>
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d10a      	bne.n	800f380 <matchPattern+0x60>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
 800f36a:	6939      	ldr	r1, [r7, #16]
 800f36c:	6a3b      	ldr	r3, [r7, #32]
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f7ff ff1b 	bl	800f1b0 <compareStrAndNum>
 800f37a:	4603      	mov	r3, r0
        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d001      	beq.n	800f384 <matchPattern+0x64>
 800f380:	2301      	movs	r3, #1
 800f382:	e000      	b.n	800f386 <matchPattern+0x66>
 800f384:	2300      	movs	r3, #0
 800f386:	f003 0301 	and.w	r3, r3, #1
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	e01d      	b.n	800f3ca <matchPattern+0xaa>
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 800f38e:	68b9      	ldr	r1, [r7, #8]
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	f7ff ff65 	bl	800f260 <patternSeparatorShortPos>
 800f396:	4603      	mov	r3, r0
 800f398:	613b      	str	r3, [r7, #16]

        return compareStr(pattern, pattern_len, str, str_len) ||
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	68b9      	ldr	r1, [r7, #8]
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f7ff fee9 	bl	800f178 <compareStr>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d108      	bne.n	800f3be <matchPattern+0x9e>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
 800f3ac:	6939      	ldr	r1, [r7, #16]
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f7ff fee0 	bl	800f178 <compareStr>
 800f3b8:	4603      	mov	r3, r0
        return compareStr(pattern, pattern_len, str, str_len) ||
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d001      	beq.n	800f3c2 <matchPattern+0xa2>
 800f3be:	2301      	movs	r3, #1
 800f3c0:	e000      	b.n	800f3c4 <matchPattern+0xa4>
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	f003 0301 	and.w	r3, r3, #1
 800f3c8:	b2db      	uxtb	r3, r3
    }
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3718      	adds	r7, #24
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
 800f3d2:	b580      	push	{r7, lr}
 800f3d4:	b090      	sub	sp, #64	; 0x40
 800f3d6:	af02      	add	r7, sp, #8
 800f3d8:	60f8      	str	r0, [r7, #12]
 800f3da:	60b9      	str	r1, [r7, #8]
 800f3dc:	607a      	str	r2, [r7, #4]
 800f3de:	603b      	str	r3, [r7, #0]
#define SKIP_PATTERN(n) do {pattern_ptr += (n);  pattern_len -= (n);} while(0)
#define SKIP_CMD(n) do {cmd_ptr += (n);  cmd_len -= (n);} while(0)

    scpi_bool_t result = FALSE;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int brackets = 0;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	633b      	str	r3, [r7, #48]	; 0x30
    int cmd_sep_pos = 0;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	617b      	str	r3, [r7, #20]

    size_t numbers_idx = 0;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t *number_ptr = NULL;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	62bb      	str	r3, [r7, #40]	; 0x28

    const char * pattern_ptr = pattern;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	627b      	str	r3, [r7, #36]	; 0x24
    int pattern_len = strlen(pattern);
 800f3fa:	68f8      	ldr	r0, [r7, #12]
 800f3fc:	f7f0 fefa 	bl	80001f4 <strlen>
 800f400:	4603      	mov	r3, r0
 800f402:	623b      	str	r3, [r7, #32]

    const char * cmd_ptr = cmd;
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	61fb      	str	r3, [r7, #28]
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 800f408:	6879      	ldr	r1, [r7, #4]
 800f40a:	68b8      	ldr	r0, [r7, #8]
 800f40c:	f002 f9c8 	bl	80117a0 <strnlen>
 800f410:	61b8      	str	r0, [r7, #24]

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
 800f412:	6a3b      	ldr	r3, [r7, #32]
 800f414:	3b01      	subs	r3, #1
 800f416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f418:	4413      	add	r3, r2
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	2b3f      	cmp	r3, #63	; 0x3f
 800f41e:	d10f      	bne.n	800f440 <matchCommand+0x6e>
        if (cmd_ptr[cmd_len - 1] == '?') {
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	3b01      	subs	r3, #1
 800f424:	69fa      	ldr	r2, [r7, #28]
 800f426:	4413      	add	r3, r2
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	2b3f      	cmp	r3, #63	; 0x3f
 800f42c:	d106      	bne.n	800f43c <matchCommand+0x6a>
            cmd_len -= 1;
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	3b01      	subs	r3, #1
 800f432:	61bb      	str	r3, [r7, #24]
            pattern_len -= 1;
 800f434:	6a3b      	ldr	r3, [r7, #32]
 800f436:	3b01      	subs	r3, #1
 800f438:	623b      	str	r3, [r7, #32]
 800f43a:	e001      	b.n	800f440 <matchCommand+0x6e>
        } else {
            return FALSE;
 800f43c:	2300      	movs	r3, #0
 800f43e:	e18d      	b.n	800f75c <matchCommand+0x38a>
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	2b5b      	cmp	r3, #91	; 0x5b
 800f446:	d108      	bne.n	800f45a <matchCommand+0x88>
        SKIP_PATTERN(1);
 800f448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44a:	3301      	adds	r3, #1
 800f44c:	627b      	str	r3, [r7, #36]	; 0x24
 800f44e:	6a3b      	ldr	r3, [r7, #32]
 800f450:	3b01      	subs	r3, #1
 800f452:	623b      	str	r3, [r7, #32]
        brackets++;
 800f454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f456:	3301      	adds	r3, #1
 800f458:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 800f45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	2b3a      	cmp	r3, #58	; 0x3a
 800f460:	d105      	bne.n	800f46e <matchCommand+0x9c>
        SKIP_PATTERN(1);
 800f462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f464:	3301      	adds	r3, #1
 800f466:	627b      	str	r3, [r7, #36]	; 0x24
 800f468:	6a3b      	ldr	r3, [r7, #32]
 800f46a:	3b01      	subs	r3, #1
 800f46c:	623b      	str	r3, [r7, #32]
    }

    if (cmd_ptr[0] == ':') {
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	2b3a      	cmp	r3, #58	; 0x3a
 800f474:	d110      	bne.n	800f498 <matchCommand+0xc6>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d90d      	bls.n	800f498 <matchCommand+0xc6>
            if (cmd_ptr[1] != '*') {
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	3301      	adds	r3, #1
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	2b2a      	cmp	r3, #42	; 0x2a
 800f484:	d006      	beq.n	800f494 <matchCommand+0xc2>
                SKIP_CMD(1);
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	3301      	adds	r3, #1
 800f48a:	61fb      	str	r3, [r7, #28]
 800f48c:	69bb      	ldr	r3, [r7, #24]
 800f48e:	3b01      	subs	r3, #1
 800f490:	61bb      	str	r3, [r7, #24]
 800f492:	e001      	b.n	800f498 <matchCommand+0xc6>
            } else {
                return FALSE;
 800f494:	2300      	movs	r3, #0
 800f496:	e161      	b.n	800f75c <matchCommand+0x38a>
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 800f498:	6a3b      	ldr	r3, [r7, #32]
 800f49a:	4619      	mov	r1, r3
 800f49c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f49e:	f7ff ff09 	bl	800f2b4 <patternSeparatorPos>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	613b      	str	r3, [r7, #16]

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);
 800f4a6:	69b9      	ldr	r1, [r7, #24]
 800f4a8:	69f8      	ldr	r0, [r7, #28]
 800f4aa:	f7ff ff1d 	bl	800f2e8 <cmdSeparatorPos>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	617b      	str	r3, [r7, #20]

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	dd1c      	ble.n	800f4f2 <matchCommand+0x120>
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	3b01      	subs	r3, #1
 800f4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4be:	4413      	add	r3, r2
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	2b23      	cmp	r3, #35	; 0x23
 800f4c4:	d115      	bne.n	800f4f2 <matchCommand+0x120>
            if (numbers && (numbers_idx < numbers_len)) {
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d00c      	beq.n	800f4e6 <matchCommand+0x114>
 800f4cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d208      	bcs.n	800f4e6 <matchCommand+0x114>
                number_ptr = numbers + numbers_idx;
 800f4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	683a      	ldr	r2, [r7, #0]
 800f4da:	4413      	add	r3, r2
 800f4dc:	62bb      	str	r3, [r7, #40]	; 0x28
                *number_ptr = default_value; /* default value */
 800f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4e2:	601a      	str	r2, [r3, #0]
 800f4e4:	e001      	b.n	800f4ea <matchCommand+0x118>
            } else {
                number_ptr = NULL;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            numbers_idx++;
 800f4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4f0:	e001      	b.n	800f4f6 <matchCommand+0x124>
        } else {
            number_ptr = NULL;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
 800f4f6:	6939      	ldr	r1, [r7, #16]
 800f4f8:	697a      	ldr	r2, [r7, #20]
 800f4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	4613      	mov	r3, r2
 800f500:	69fa      	ldr	r2, [r7, #28]
 800f502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f504:	f7ff ff0c 	bl	800f320 <matchPattern>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	f000 80e9 	beq.w	800f6e2 <matchCommand+0x310>
            SKIP_PATTERN(pattern_sep_pos);
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f514:	4413      	add	r3, r2
 800f516:	627b      	str	r3, [r7, #36]	; 0x24
 800f518:	6a3a      	ldr	r2, [r7, #32]
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	1ad3      	subs	r3, r2, r3
 800f51e:	623b      	str	r3, [r7, #32]
            SKIP_CMD(cmd_sep_pos);
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	69fa      	ldr	r2, [r7, #28]
 800f524:	4413      	add	r3, r2
 800f526:	61fb      	str	r3, [r7, #28]
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	69ba      	ldr	r2, [r7, #24]
 800f52c:	1ad3      	subs	r3, r2, r3
 800f52e:	61bb      	str	r3, [r7, #24]
            result = TRUE;
 800f530:	2301      	movs	r3, #1
 800f532:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
 800f536:	6a3b      	ldr	r3, [r7, #32]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d103      	bne.n	800f544 <matchCommand+0x172>
 800f53c:	69bb      	ldr	r3, [r7, #24]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f000 8107 	beq.w	800f752 <matchCommand+0x380>
                break;
            }

            /* pattern complete, but command not */
            if ((pattern_len == 0) && (cmd_len > 0)) {
 800f544:	6a3b      	ldr	r3, [r7, #32]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d106      	bne.n	800f558 <matchCommand+0x186>
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d003      	beq.n	800f558 <matchCommand+0x186>
                result = FALSE;
 800f550:	2300      	movs	r3, #0
 800f552:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f556:	e0ff      	b.n	800f758 <matchCommand+0x386>
            }

            /* command complete, but pattern not */
            if (cmd_len == 0) {
 800f558:	69bb      	ldr	r3, [r7, #24]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d138      	bne.n	800f5d0 <matchCommand+0x1fe>
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
 800f55e:	e02c      	b.n	800f5ba <matchCommand+0x1e8>
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 800f560:	6a3b      	ldr	r3, [r7, #32]
 800f562:	4619      	mov	r1, r3
 800f564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f566:	f7ff fea5 	bl	800f2b4 <patternSeparatorPos>
 800f56a:	4603      	mov	r3, r0
 800f56c:	613b      	str	r3, [r7, #16]
                    switch (pattern_ptr[pattern_sep_pos]) {
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f572:	4413      	add	r3, r2
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	2b5b      	cmp	r3, #91	; 0x5b
 800f578:	d002      	beq.n	800f580 <matchCommand+0x1ae>
 800f57a:	2b5d      	cmp	r3, #93	; 0x5d
 800f57c:	d004      	beq.n	800f588 <matchCommand+0x1b6>
                            break;
                        case ']':
                            brackets--;
                            break;
                        default:
                            break;
 800f57e:	e007      	b.n	800f590 <matchCommand+0x1be>
                            brackets++;
 800f580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f582:	3301      	adds	r3, #1
 800f584:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 800f586:	e003      	b.n	800f590 <matchCommand+0x1be>
                            brackets--;
 800f588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58a:	3b01      	subs	r3, #1
 800f58c:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 800f58e:	bf00      	nop
                    }
                    SKIP_PATTERN(pattern_sep_pos + 1);
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	3301      	adds	r3, #1
 800f594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f596:	4413      	add	r3, r2
 800f598:	627b      	str	r3, [r7, #36]	; 0x24
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	3301      	adds	r3, #1
 800f59e:	6a3a      	ldr	r2, [r7, #32]
 800f5a0:	1ad3      	subs	r3, r2, r3
 800f5a2:	623b      	str	r3, [r7, #32]
                    if (brackets == 0) {
 800f5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d107      	bne.n	800f5ba <matchCommand+0x1e8>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
 800f5aa:	6a3b      	ldr	r3, [r7, #32]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	dd07      	ble.n	800f5c0 <matchCommand+0x1ee>
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	2b5b      	cmp	r3, #91	; 0x5b
 800f5b6:	d103      	bne.n	800f5c0 <matchCommand+0x1ee>
                            continue;
 800f5b8:	bf00      	nop
                while (pattern_len) {
 800f5ba:	6a3b      	ldr	r3, [r7, #32]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d1cf      	bne.n	800f560 <matchCommand+0x18e>
                        } else {
                            break;
                        }
                    }
                }
                if (pattern_len != 0) {
 800f5c0:	6a3b      	ldr	r3, [r7, #32]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	f000 80c7 	beq.w	800f756 <matchCommand+0x384>
                    result = FALSE;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                }
                break; /* exist optional keyword, command is complete */
 800f5ce:	e0c2      	b.n	800f756 <matchCommand+0x384>
            }

            /* both command and patter contains command separator at this position */
            if ((pattern_len > 0)
 800f5d0:	6a3b      	ldr	r3, [r7, #32]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	dd16      	ble.n	800f604 <matchCommand+0x232>
                    && ((pattern_ptr[0] == cmd_ptr[0])
 800f5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d8:	781a      	ldrb	r2, [r3, #0]
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d110      	bne.n	800f604 <matchCommand+0x232>
                    && (pattern_ptr[0] == ':'))) {
 800f5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	2b3a      	cmp	r3, #58	; 0x3a
 800f5e8:	d10c      	bne.n	800f604 <matchCommand+0x232>
                SKIP_PATTERN(1);
 800f5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	627b      	str	r3, [r7, #36]	; 0x24
 800f5f0:	6a3b      	ldr	r3, [r7, #32]
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	61fb      	str	r3, [r7, #28]
 800f5fc:	69bb      	ldr	r3, [r7, #24]
 800f5fe:	3b01      	subs	r3, #1
 800f600:	61bb      	str	r3, [r7, #24]
 800f602:	e0a5      	b.n	800f750 <matchCommand+0x37e>
            } else if ((pattern_len > 1)
 800f604:	6a3b      	ldr	r3, [r7, #32]
 800f606:	2b01      	cmp	r3, #1
 800f608:	dd1f      	ble.n	800f64a <matchCommand+0x278>
                    && (pattern_ptr[1] == cmd_ptr[0])
 800f60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60c:	3301      	adds	r3, #1
 800f60e:	781a      	ldrb	r2, [r3, #0]
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	429a      	cmp	r2, r3
 800f616:	d118      	bne.n	800f64a <matchCommand+0x278>
                    && (pattern_ptr[0] == '[')
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	2b5b      	cmp	r3, #91	; 0x5b
 800f61e:	d114      	bne.n	800f64a <matchCommand+0x278>
                    && (pattern_ptr[1] == ':')) {
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	3301      	adds	r3, #1
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	2b3a      	cmp	r3, #58	; 0x3a
 800f628:	d10f      	bne.n	800f64a <matchCommand+0x278>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
 800f62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62c:	3302      	adds	r3, #2
 800f62e:	627b      	str	r3, [r7, #36]	; 0x24
 800f630:	6a3b      	ldr	r3, [r7, #32]
 800f632:	3b02      	subs	r3, #2
 800f634:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	3301      	adds	r3, #1
 800f63a:	61fb      	str	r3, [r7, #28]
 800f63c:	69bb      	ldr	r3, [r7, #24]
 800f63e:	3b01      	subs	r3, #1
 800f640:	61bb      	str	r3, [r7, #24]
                brackets++;
 800f642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f644:	3301      	adds	r3, #1
 800f646:	633b      	str	r3, [r7, #48]	; 0x30
 800f648:	e082      	b.n	800f750 <matchCommand+0x37e>
            } else if ((pattern_len > 1)
 800f64a:	6a3b      	ldr	r3, [r7, #32]
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	dd1f      	ble.n	800f690 <matchCommand+0x2be>
                    && (pattern_ptr[1] == cmd_ptr[0])
 800f650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f652:	3301      	adds	r3, #1
 800f654:	781a      	ldrb	r2, [r3, #0]
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d118      	bne.n	800f690 <matchCommand+0x2be>
                    && (pattern_ptr[0] == ']')
 800f65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	2b5d      	cmp	r3, #93	; 0x5d
 800f664:	d114      	bne.n	800f690 <matchCommand+0x2be>
                    && (pattern_ptr[1] == ':')) {
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	3301      	adds	r3, #1
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	2b3a      	cmp	r3, #58	; 0x3a
 800f66e:	d10f      	bne.n	800f690 <matchCommand+0x2be>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
 800f670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f672:	3302      	adds	r3, #2
 800f674:	627b      	str	r3, [r7, #36]	; 0x24
 800f676:	6a3b      	ldr	r3, [r7, #32]
 800f678:	3b02      	subs	r3, #2
 800f67a:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	3301      	adds	r3, #1
 800f680:	61fb      	str	r3, [r7, #28]
 800f682:	69bb      	ldr	r3, [r7, #24]
 800f684:	3b01      	subs	r3, #1
 800f686:	61bb      	str	r3, [r7, #24]
                brackets--;
 800f688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68a:	3b01      	subs	r3, #1
 800f68c:	633b      	str	r3, [r7, #48]	; 0x30
 800f68e:	e05f      	b.n	800f750 <matchCommand+0x37e>
            } else if ((pattern_len > 2)
 800f690:	6a3b      	ldr	r3, [r7, #32]
 800f692:	2b02      	cmp	r3, #2
 800f694:	dd21      	ble.n	800f6da <matchCommand+0x308>
                    && (pattern_ptr[2] == cmd_ptr[0])
 800f696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f698:	3302      	adds	r3, #2
 800f69a:	781a      	ldrb	r2, [r3, #0]
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d11a      	bne.n	800f6da <matchCommand+0x308>
                    && (pattern_ptr[0] == ']')
 800f6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	2b5d      	cmp	r3, #93	; 0x5d
 800f6aa:	d116      	bne.n	800f6da <matchCommand+0x308>
                    && (pattern_ptr[1] == '[')
 800f6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	2b5b      	cmp	r3, #91	; 0x5b
 800f6b4:	d111      	bne.n	800f6da <matchCommand+0x308>
                    && (pattern_ptr[2] == ':')) {
 800f6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b8:	3302      	adds	r3, #2
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	2b3a      	cmp	r3, #58	; 0x3a
 800f6be:	d10c      	bne.n	800f6da <matchCommand+0x308>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
 800f6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c2:	3303      	adds	r3, #3
 800f6c4:	627b      	str	r3, [r7, #36]	; 0x24
 800f6c6:	6a3b      	ldr	r3, [r7, #32]
 800f6c8:	3b03      	subs	r3, #3
 800f6ca:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	61fb      	str	r3, [r7, #28]
 800f6d2:	69bb      	ldr	r3, [r7, #24]
 800f6d4:	3b01      	subs	r3, #1
 800f6d6:	61bb      	str	r3, [r7, #24]
 800f6d8:	e03a      	b.n	800f750 <matchCommand+0x37e>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f6e0:	e03a      	b.n	800f758 <matchCommand+0x386>
            }
        } else {
            SKIP_PATTERN(pattern_sep_pos);
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6e6:	4413      	add	r3, r2
 800f6e8:	627b      	str	r3, [r7, #36]	; 0x24
 800f6ea:	6a3a      	ldr	r2, [r7, #32]
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	623b      	str	r3, [r7, #32]
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 800f6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	2b5d      	cmp	r3, #93	; 0x5d
 800f6f8:	d10e      	bne.n	800f718 <matchCommand+0x346>
 800f6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	2b3a      	cmp	r3, #58	; 0x3a
 800f702:	d109      	bne.n	800f718 <matchCommand+0x346>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 800f704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f706:	3302      	adds	r3, #2
 800f708:	627b      	str	r3, [r7, #36]	; 0x24
 800f70a:	6a3b      	ldr	r3, [r7, #32]
 800f70c:	3b02      	subs	r3, #2
 800f70e:	623b      	str	r3, [r7, #32]
                brackets--;
 800f710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f712:	3b01      	subs	r3, #1
 800f714:	633b      	str	r3, [r7, #48]	; 0x30
 800f716:	e01b      	b.n	800f750 <matchCommand+0x37e>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
 800f718:	6a3b      	ldr	r3, [r7, #32]
 800f71a:	2b02      	cmp	r3, #2
 800f71c:	dd14      	ble.n	800f748 <matchCommand+0x376>
 800f71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	2b5d      	cmp	r3, #93	; 0x5d
 800f724:	d110      	bne.n	800f748 <matchCommand+0x376>
                    && (pattern_ptr[1] == '[')
 800f726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f728:	3301      	adds	r3, #1
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	2b5b      	cmp	r3, #91	; 0x5b
 800f72e:	d10b      	bne.n	800f748 <matchCommand+0x376>
                    && (pattern_ptr[2] == ':')) {
 800f730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f732:	3302      	adds	r3, #2
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	2b3a      	cmp	r3, #58	; 0x3a
 800f738:	d106      	bne.n	800f748 <matchCommand+0x376>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 800f73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73c:	3303      	adds	r3, #3
 800f73e:	627b      	str	r3, [r7, #36]	; 0x24
 800f740:	6a3b      	ldr	r3, [r7, #32]
 800f742:	3b03      	subs	r3, #3
 800f744:	623b      	str	r3, [r7, #32]
 800f746:	e003      	b.n	800f750 <matchCommand+0x37e>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 800f748:	2300      	movs	r3, #0
 800f74a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f74e:	e003      	b.n	800f758 <matchCommand+0x386>
    while (1) {
 800f750:	e6a2      	b.n	800f498 <matchCommand+0xc6>
                break;
 800f752:	bf00      	nop
 800f754:	e000      	b.n	800f758 <matchCommand+0x386>
                break; /* exist optional keyword, command is complete */
 800f756:	bf00      	nop
            }
        }
    }

    return result;
 800f758:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
#undef SKIP_PATTERN
#undef SKIP_CMD
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3738      	adds	r7, #56	; 0x38
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	6039      	str	r1, [r7, #0]
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d007      	beq.n	800f784 <composeCompoundCommand+0x20>
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d003      	beq.n	800f784 <composeCompoundCommand+0x20>
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d101      	bne.n	800f788 <composeCompoundCommand+0x24>
        return FALSE;
 800f784:	2300      	movs	r3, #0
 800f786:	e04d      	b.n	800f824 <composeCompoundCommand+0xc0>

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d003      	beq.n	800f798 <composeCompoundCommand+0x34>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	689b      	ldr	r3, [r3, #8]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d101      	bne.n	800f79c <composeCompoundCommand+0x38>
        return TRUE;
 800f798:	2301      	movs	r3, #1
 800f79a:	e043      	b.n	800f824 <composeCompoundCommand+0xc0>

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	2b2a      	cmp	r3, #42	; 0x2a
 800f7a4:	d004      	beq.n	800f7b0 <composeCompoundCommand+0x4c>
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	2b3a      	cmp	r3, #58	; 0x3a
 800f7ae:	d101      	bne.n	800f7b4 <composeCompoundCommand+0x50>
        return TRUE;
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	e037      	b.n	800f824 <composeCompoundCommand+0xc0>

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	2b2a      	cmp	r3, #42	; 0x2a
 800f7bc:	d101      	bne.n	800f7c2 <composeCompoundCommand+0x5e>
        return TRUE;
 800f7be:	2301      	movs	r3, #1
 800f7c0:	e030      	b.n	800f824 <composeCompoundCommand+0xc0>

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	689b      	ldr	r3, [r3, #8]
 800f7c6:	60fb      	str	r3, [r7, #12]
 800f7c8:	e00a      	b.n	800f7e0 <composeCompoundCommand+0x7c>
        if (prev->ptr[i - 1] == ':') {
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	685a      	ldr	r2, [r3, #4]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	4413      	add	r3, r2
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	2b3a      	cmp	r3, #58	; 0x3a
 800f7d8:	d006      	beq.n	800f7e8 <composeCompoundCommand+0x84>
    for (i = prev->len; i > 0; i--) {
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	3b01      	subs	r3, #1
 800f7de:	60fb      	str	r3, [r7, #12]
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1f1      	bne.n	800f7ca <composeCompoundCommand+0x66>
 800f7e6:	e000      	b.n	800f7ea <composeCompoundCommand+0x86>
            break;
 800f7e8:	bf00      	nop
        }
    }

    /* Previous command was simple command - nothing to do*/
    if (i == 0)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d101      	bne.n	800f7f4 <composeCompoundCommand+0x90>
        return TRUE;
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	e017      	b.n	800f824 <composeCompoundCommand+0xc0>

    current->ptr -= i;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	685a      	ldr	r2, [r3, #4]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	425b      	negs	r3, r3
 800f7fc:	441a      	add	r2, r3
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	605a      	str	r2, [r3, #4]
    current->len += i;
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	689b      	ldr	r3, [r3, #8]
 800f806:	461a      	mov	r2, r3
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	4413      	add	r3, r2
 800f80c:	461a      	mov	r2, r3
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	609a      	str	r2, [r3, #8]
    memmove(current->ptr, prev->ptr, i);
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	6858      	ldr	r0, [r3, #4]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	68fa      	ldr	r2, [r7, #12]
 800f81c:	4619      	mov	r1, r3
 800f81e:	f001 ff4c 	bl	80116ba <memmove>
    return TRUE;
 800f822:	2301      	movs	r3, #1
}
 800f824:	4618      	mov	r0, r3
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f82c:	b480      	push	{r7}
 800f82e:	b083      	sub	sp, #12
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f103 0208 	add.w	r2, r3, #8
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f04f 32ff 	mov.w	r2, #4294967295
 800f844:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f103 0208 	add.w	r2, r3, #8
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f103 0208 	add.w	r2, r3, #8
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2200      	movs	r2, #0
 800f85e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f860:	bf00      	nop
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2200      	movs	r2, #0
 800f878:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f87a:	bf00      	nop
 800f87c:	370c      	adds	r7, #12
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr

0800f886 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f886:	b480      	push	{r7}
 800f888:	b085      	sub	sp, #20
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
 800f88e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	689a      	ldr	r2, [r3, #8]
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	683a      	ldr	r2, [r7, #0]
 800f8aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	683a      	ldr	r2, [r7, #0]
 800f8b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	1c5a      	adds	r2, r3, #1
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	601a      	str	r2, [r3, #0]
}
 800f8c2:	bf00      	nop
 800f8c4:	3714      	adds	r7, #20
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr

0800f8ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f8ce:	b480      	push	{r7}
 800f8d0:	b085      	sub	sp, #20
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
 800f8d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8e4:	d103      	bne.n	800f8ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	691b      	ldr	r3, [r3, #16]
 800f8ea:	60fb      	str	r3, [r7, #12]
 800f8ec:	e00c      	b.n	800f908 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	3308      	adds	r3, #8
 800f8f2:	60fb      	str	r3, [r7, #12]
 800f8f4:	e002      	b.n	800f8fc <vListInsert+0x2e>
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	60fb      	str	r3, [r7, #12]
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	68ba      	ldr	r2, [r7, #8]
 800f904:	429a      	cmp	r2, r3
 800f906:	d2f6      	bcs.n	800f8f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	685a      	ldr	r2, [r3, #4]
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	683a      	ldr	r2, [r7, #0]
 800f916:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	68fa      	ldr	r2, [r7, #12]
 800f91c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	1c5a      	adds	r2, r3, #1
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	601a      	str	r2, [r3, #0]
}
 800f934:	bf00      	nop
 800f936:	3714      	adds	r7, #20
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f940:	b480      	push	{r7}
 800f942:	b085      	sub	sp, #20
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	691b      	ldr	r3, [r3, #16]
 800f94c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	685b      	ldr	r3, [r3, #4]
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	6892      	ldr	r2, [r2, #8]
 800f956:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	689b      	ldr	r3, [r3, #8]
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	6852      	ldr	r2, [r2, #4]
 800f960:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d103      	bne.n	800f974 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	689a      	ldr	r2, [r3, #8]
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2200      	movs	r2, #0
 800f978:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	1e5a      	subs	r2, r3, #1
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3714      	adds	r7, #20
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f994:	b480      	push	{r7}
 800f996:	b085      	sub	sp, #20
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	3b04      	subs	r3, #4
 800f9a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f9ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	3b04      	subs	r3, #4
 800f9b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	f023 0201 	bic.w	r2, r3, #1
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	3b04      	subs	r3, #4
 800f9c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f9c4:	4a09      	ldr	r2, [pc, #36]	; (800f9ec <pxPortInitialiseStack+0x58>)
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	3b14      	subs	r3, #20
 800f9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	3b20      	subs	r3, #32
 800f9da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3714      	adds	r7, #20
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop
 800f9ec:	0800f9f1 	.word	0x0800f9f1

0800f9f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b085      	sub	sp, #20
 800f9f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f9fa:	4b11      	ldr	r3, [pc, #68]	; (800fa40 <prvTaskExitError+0x50>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa02:	d009      	beq.n	800fa18 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa08:	f383 8811 	msr	BASEPRI, r3
 800fa0c:	f3bf 8f6f 	isb	sy
 800fa10:	f3bf 8f4f 	dsb	sy
 800fa14:	60fb      	str	r3, [r7, #12]
 800fa16:	e7fe      	b.n	800fa16 <prvTaskExitError+0x26>
 800fa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1c:	f383 8811 	msr	BASEPRI, r3
 800fa20:	f3bf 8f6f 	isb	sy
 800fa24:	f3bf 8f4f 	dsb	sy
 800fa28:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fa2a:	bf00      	nop
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d0fc      	beq.n	800fa2c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fa32:	bf00      	nop
 800fa34:	3714      	adds	r7, #20
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr
 800fa3e:	bf00      	nop
 800fa40:	20000020 	.word	0x20000020
	...

0800fa50 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fa50:	4b07      	ldr	r3, [pc, #28]	; (800fa70 <pxCurrentTCBConst2>)
 800fa52:	6819      	ldr	r1, [r3, #0]
 800fa54:	6808      	ldr	r0, [r1, #0]
 800fa56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800fa5a:	f380 8809 	msr	PSP, r0
 800fa5e:	f3bf 8f6f 	isb	sy
 800fa62:	f04f 0000 	mov.w	r0, #0
 800fa66:	f380 8811 	msr	BASEPRI, r0
 800fa6a:	f04e 0e0d 	orr.w	lr, lr, #13
 800fa6e:	4770      	bx	lr

0800fa70 <pxCurrentTCBConst2>:
 800fa70:	20000220 	.word	0x20000220
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fa74:	bf00      	nop
 800fa76:	bf00      	nop

0800fa78 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800fa78:	4806      	ldr	r0, [pc, #24]	; (800fa94 <prvPortStartFirstTask+0x1c>)
 800fa7a:	6800      	ldr	r0, [r0, #0]
 800fa7c:	6800      	ldr	r0, [r0, #0]
 800fa7e:	f380 8808 	msr	MSP, r0
 800fa82:	b662      	cpsie	i
 800fa84:	b661      	cpsie	f
 800fa86:	f3bf 8f4f 	dsb	sy
 800fa8a:	f3bf 8f6f 	isb	sy
 800fa8e:	df00      	svc	0
 800fa90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fa92:	bf00      	nop
 800fa94:	e000ed08 	.word	0xe000ed08

0800fa98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b086      	sub	sp, #24
 800fa9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fa9e:	4b39      	ldr	r3, [pc, #228]	; (800fb84 <xPortStartScheduler+0xec>)
 800faa0:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	22ff      	movs	r2, #255	; 0xff
 800faae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fab8:	79fb      	ldrb	r3, [r7, #7]
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fac0:	b2da      	uxtb	r2, r3
 800fac2:	4b31      	ldr	r3, [pc, #196]	; (800fb88 <xPortStartScheduler+0xf0>)
 800fac4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fac6:	4b31      	ldr	r3, [pc, #196]	; (800fb8c <xPortStartScheduler+0xf4>)
 800fac8:	2207      	movs	r2, #7
 800faca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800facc:	e009      	b.n	800fae2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800face:	4b2f      	ldr	r3, [pc, #188]	; (800fb8c <xPortStartScheduler+0xf4>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	3b01      	subs	r3, #1
 800fad4:	4a2d      	ldr	r2, [pc, #180]	; (800fb8c <xPortStartScheduler+0xf4>)
 800fad6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fad8:	79fb      	ldrb	r3, [r7, #7]
 800fada:	b2db      	uxtb	r3, r3
 800fadc:	005b      	lsls	r3, r3, #1
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fae2:	79fb      	ldrb	r3, [r7, #7]
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faea:	2b80      	cmp	r3, #128	; 0x80
 800faec:	d0ef      	beq.n	800face <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800faee:	4b27      	ldr	r3, [pc, #156]	; (800fb8c <xPortStartScheduler+0xf4>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f1c3 0307 	rsb	r3, r3, #7
 800faf6:	2b04      	cmp	r3, #4
 800faf8:	d009      	beq.n	800fb0e <xPortStartScheduler+0x76>
 800fafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fafe:	f383 8811 	msr	BASEPRI, r3
 800fb02:	f3bf 8f6f 	isb	sy
 800fb06:	f3bf 8f4f 	dsb	sy
 800fb0a:	613b      	str	r3, [r7, #16]
 800fb0c:	e7fe      	b.n	800fb0c <xPortStartScheduler+0x74>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fb0e:	4b1f      	ldr	r3, [pc, #124]	; (800fb8c <xPortStartScheduler+0xf4>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f1c3 0307 	rsb	r3, r3, #7
 800fb16:	2b04      	cmp	r3, #4
 800fb18:	d009      	beq.n	800fb2e <xPortStartScheduler+0x96>
 800fb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb1e:	f383 8811 	msr	BASEPRI, r3
 800fb22:	f3bf 8f6f 	isb	sy
 800fb26:	f3bf 8f4f 	dsb	sy
 800fb2a:	60fb      	str	r3, [r7, #12]
 800fb2c:	e7fe      	b.n	800fb2c <xPortStartScheduler+0x94>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fb2e:	4b17      	ldr	r3, [pc, #92]	; (800fb8c <xPortStartScheduler+0xf4>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	021b      	lsls	r3, r3, #8
 800fb34:	4a15      	ldr	r2, [pc, #84]	; (800fb8c <xPortStartScheduler+0xf4>)
 800fb36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fb38:	4b14      	ldr	r3, [pc, #80]	; (800fb8c <xPortStartScheduler+0xf4>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fb40:	4a12      	ldr	r2, [pc, #72]	; (800fb8c <xPortStartScheduler+0xf4>)
 800fb42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	b2da      	uxtb	r2, r3
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fb4c:	4b10      	ldr	r3, [pc, #64]	; (800fb90 <xPortStartScheduler+0xf8>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4a0f      	ldr	r2, [pc, #60]	; (800fb90 <xPortStartScheduler+0xf8>)
 800fb52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fb56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fb58:	4b0d      	ldr	r3, [pc, #52]	; (800fb90 <xPortStartScheduler+0xf8>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	4a0c      	ldr	r2, [pc, #48]	; (800fb90 <xPortStartScheduler+0xf8>)
 800fb5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fb62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fb64:	f000 f8b8 	bl	800fcd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fb68:	4b0a      	ldr	r3, [pc, #40]	; (800fb94 <xPortStartScheduler+0xfc>)
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fb6e:	f7ff ff83 	bl	800fa78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fb72:	f001 f921 	bl	8010db8 <vTaskSwitchContext>
	prvTaskExitError();
 800fb76:	f7ff ff3b 	bl	800f9f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fb7a:	2300      	movs	r3, #0
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3718      	adds	r7, #24
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	e000e400 	.word	0xe000e400
 800fb88:	20000219 	.word	0x20000219
 800fb8c:	2000021c 	.word	0x2000021c
 800fb90:	e000ed20 	.word	0xe000ed20
 800fb94:	20000020 	.word	0x20000020

0800fb98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b083      	sub	sp, #12
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba2:	f383 8811 	msr	BASEPRI, r3
 800fba6:	f3bf 8f6f 	isb	sy
 800fbaa:	f3bf 8f4f 	dsb	sy
 800fbae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fbb0:	4b0e      	ldr	r3, [pc, #56]	; (800fbec <vPortEnterCritical+0x54>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	3301      	adds	r3, #1
 800fbb6:	4a0d      	ldr	r2, [pc, #52]	; (800fbec <vPortEnterCritical+0x54>)
 800fbb8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fbba:	4b0c      	ldr	r3, [pc, #48]	; (800fbec <vPortEnterCritical+0x54>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b01      	cmp	r3, #1
 800fbc0:	d10e      	bne.n	800fbe0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fbc2:	4b0b      	ldr	r3, [pc, #44]	; (800fbf0 <vPortEnterCritical+0x58>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d009      	beq.n	800fbe0 <vPortEnterCritical+0x48>
 800fbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd0:	f383 8811 	msr	BASEPRI, r3
 800fbd4:	f3bf 8f6f 	isb	sy
 800fbd8:	f3bf 8f4f 	dsb	sy
 800fbdc:	603b      	str	r3, [r7, #0]
 800fbde:	e7fe      	b.n	800fbde <vPortEnterCritical+0x46>
	}
}
 800fbe0:	bf00      	nop
 800fbe2:	370c      	adds	r7, #12
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr
 800fbec:	20000020 	.word	0x20000020
 800fbf0:	e000ed04 	.word	0xe000ed04

0800fbf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b083      	sub	sp, #12
 800fbf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fbfa:	4b11      	ldr	r3, [pc, #68]	; (800fc40 <vPortExitCritical+0x4c>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d109      	bne.n	800fc16 <vPortExitCritical+0x22>
 800fc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc06:	f383 8811 	msr	BASEPRI, r3
 800fc0a:	f3bf 8f6f 	isb	sy
 800fc0e:	f3bf 8f4f 	dsb	sy
 800fc12:	607b      	str	r3, [r7, #4]
 800fc14:	e7fe      	b.n	800fc14 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800fc16:	4b0a      	ldr	r3, [pc, #40]	; (800fc40 <vPortExitCritical+0x4c>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	3b01      	subs	r3, #1
 800fc1c:	4a08      	ldr	r2, [pc, #32]	; (800fc40 <vPortExitCritical+0x4c>)
 800fc1e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fc20:	4b07      	ldr	r3, [pc, #28]	; (800fc40 <vPortExitCritical+0x4c>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d104      	bne.n	800fc32 <vPortExitCritical+0x3e>
 800fc28:	2300      	movs	r3, #0
 800fc2a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fc32:	bf00      	nop
 800fc34:	370c      	adds	r7, #12
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	20000020 	.word	0x20000020
	...

0800fc50 <xPortPendSVHandler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler( void )
{
	__asm volatile
 800fc50:	f3ef 8009 	mrs	r0, PSP
 800fc54:	f3bf 8f6f 	isb	sy
 800fc58:	4b0d      	ldr	r3, [pc, #52]	; (800fc90 <pxCurrentTCBConst>)
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800fc60:	6010      	str	r0, [r2, #0]
 800fc62:	e92d 4008 	stmdb	sp!, {r3, lr}
 800fc66:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fc6a:	f380 8811 	msr	BASEPRI, r0
 800fc6e:	f001 f8a3 	bl	8010db8 <vTaskSwitchContext>
 800fc72:	f04f 0000 	mov.w	r0, #0
 800fc76:	f380 8811 	msr	BASEPRI, r0
 800fc7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fc7e:	6819      	ldr	r1, [r3, #0]
 800fc80:	6808      	ldr	r0, [r1, #0]
 800fc82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800fc86:	f380 8809 	msr	PSP, r0
 800fc8a:	f3bf 8f6f 	isb	sy
 800fc8e:	4770      	bx	lr

0800fc90 <pxCurrentTCBConst>:
 800fc90:	20000220 	.word	0x20000220
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fc94:	bf00      	nop
 800fc96:	bf00      	nop

0800fc98 <xPortSysTickHandler>:

/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
	__asm volatile
 800fc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca2:	f383 8811 	msr	BASEPRI, r3
 800fca6:	f3bf 8f6f 	isb	sy
 800fcaa:	f3bf 8f4f 	dsb	sy
 800fcae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fcb0:	f000 ffc6 	bl	8010c40 <xTaskIncrementTick>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d003      	beq.n	800fcc2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fcba:	4b06      	ldr	r3, [pc, #24]	; (800fcd4 <xPortSysTickHandler+0x3c>)
 800fcbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcc0:	601a      	str	r2, [r3, #0]
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fccc:	bf00      	nop
 800fcce:	3708      	adds	r7, #8
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	e000ed04 	.word	0xe000ed04

0800fcd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fcd8:	b480      	push	{r7}
 800fcda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fcdc:	4b08      	ldr	r3, [pc, #32]	; (800fd00 <vPortSetupTimerInterrupt+0x28>)
 800fcde:	2200      	movs	r2, #0
 800fce0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fce2:	4b08      	ldr	r3, [pc, #32]	; (800fd04 <vPortSetupTimerInterrupt+0x2c>)
 800fce4:	2200      	movs	r2, #0
 800fce6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fce8:	4b07      	ldr	r3, [pc, #28]	; (800fd08 <vPortSetupTimerInterrupt+0x30>)
 800fcea:	4a08      	ldr	r2, [pc, #32]	; (800fd0c <vPortSetupTimerInterrupt+0x34>)
 800fcec:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fcee:	4b04      	ldr	r3, [pc, #16]	; (800fd00 <vPortSetupTimerInterrupt+0x28>)
 800fcf0:	2207      	movs	r2, #7
 800fcf2:	601a      	str	r2, [r3, #0]
}
 800fcf4:	bf00      	nop
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	e000e010 	.word	0xe000e010
 800fd04:	e000e018 	.word	0xe000e018
 800fd08:	e000e014 	.word	0xe000e014
 800fd0c:	0001193f 	.word	0x0001193f

0800fd10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fd10:	b480      	push	{r7}
 800fd12:	b085      	sub	sp, #20
 800fd14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fd16:	f3ef 8305 	mrs	r3, IPSR
 800fd1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2b0f      	cmp	r3, #15
 800fd20:	d913      	bls.n	800fd4a <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fd22:	4a16      	ldr	r2, [pc, #88]	; (800fd7c <vPortValidateInterruptPriority+0x6c>)
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	4413      	add	r3, r2
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fd2c:	4b14      	ldr	r3, [pc, #80]	; (800fd80 <vPortValidateInterruptPriority+0x70>)
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	7afa      	ldrb	r2, [r7, #11]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d209      	bcs.n	800fd4a <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800fd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd3a:	f383 8811 	msr	BASEPRI, r3
 800fd3e:	f3bf 8f6f 	isb	sy
 800fd42:	f3bf 8f4f 	dsb	sy
 800fd46:	607b      	str	r3, [r7, #4]
 800fd48:	e7fe      	b.n	800fd48 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fd4a:	4b0e      	ldr	r3, [pc, #56]	; (800fd84 <vPortValidateInterruptPriority+0x74>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fd52:	4b0d      	ldr	r3, [pc, #52]	; (800fd88 <vPortValidateInterruptPriority+0x78>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d909      	bls.n	800fd6e <vPortValidateInterruptPriority+0x5e>
 800fd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd5e:	f383 8811 	msr	BASEPRI, r3
 800fd62:	f3bf 8f6f 	isb	sy
 800fd66:	f3bf 8f4f 	dsb	sy
 800fd6a:	603b      	str	r3, [r7, #0]
 800fd6c:	e7fe      	b.n	800fd6c <vPortValidateInterruptPriority+0x5c>
	}
 800fd6e:	bf00      	nop
 800fd70:	3714      	adds	r7, #20
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	e000e3f0 	.word	0xe000e3f0
 800fd80:	20000219 	.word	0x20000219
 800fd84:	e000ed0c 	.word	0xe000ed0c
 800fd88:	2000021c 	.word	0x2000021c

0800fd8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b084      	sub	sp, #16
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d109      	bne.n	800fdb4 <xQueueGenericReset+0x28>
 800fda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda4:	f383 8811 	msr	BASEPRI, r3
 800fda8:	f3bf 8f6f 	isb	sy
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	60bb      	str	r3, [r7, #8]
 800fdb2:	e7fe      	b.n	800fdb2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800fdb4:	f7ff fef0 	bl	800fb98 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdc0:	68f9      	ldr	r1, [r7, #12]
 800fdc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fdc4:	fb01 f303 	mul.w	r3, r1, r3
 800fdc8:	441a      	add	r2, r3
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fde4:	3b01      	subs	r3, #1
 800fde6:	68f9      	ldr	r1, [r7, #12]
 800fde8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fdea:	fb01 f303 	mul.w	r3, r1, r3
 800fdee:	441a      	add	r2, r3
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	22ff      	movs	r2, #255	; 0xff
 800fdf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	22ff      	movs	r2, #255	; 0xff
 800fe00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d114      	bne.n	800fe34 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	691b      	ldr	r3, [r3, #16]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d01a      	beq.n	800fe48 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	3310      	adds	r3, #16
 800fe16:	4618      	mov	r0, r3
 800fe18:	f001 f872 	bl	8010f00 <xTaskRemoveFromEventList>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d012      	beq.n	800fe48 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fe22:	4b0d      	ldr	r3, [pc, #52]	; (800fe58 <xQueueGenericReset+0xcc>)
 800fe24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	f3bf 8f4f 	dsb	sy
 800fe2e:	f3bf 8f6f 	isb	sy
 800fe32:	e009      	b.n	800fe48 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	3310      	adds	r3, #16
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7ff fcf7 	bl	800f82c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	3324      	adds	r3, #36	; 0x24
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7ff fcf2 	bl	800f82c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fe48:	f7ff fed4 	bl	800fbf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fe4c:	2301      	movs	r3, #1
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3710      	adds	r7, #16
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	e000ed04 	.word	0xe000ed04

0800fe5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b08e      	sub	sp, #56	; 0x38
 800fe60:	af02      	add	r7, sp, #8
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]
 800fe68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d109      	bne.n	800fe84 <xQueueGenericCreateStatic+0x28>
 800fe70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe74:	f383 8811 	msr	BASEPRI, r3
 800fe78:	f3bf 8f6f 	isb	sy
 800fe7c:	f3bf 8f4f 	dsb	sy
 800fe80:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe82:	e7fe      	b.n	800fe82 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d109      	bne.n	800fe9e <xQueueGenericCreateStatic+0x42>
 800fe8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8e:	f383 8811 	msr	BASEPRI, r3
 800fe92:	f3bf 8f6f 	isb	sy
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	627b      	str	r3, [r7, #36]	; 0x24
 800fe9c:	e7fe      	b.n	800fe9c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d002      	beq.n	800feaa <xQueueGenericCreateStatic+0x4e>
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d001      	beq.n	800feae <xQueueGenericCreateStatic+0x52>
 800feaa:	2301      	movs	r3, #1
 800feac:	e000      	b.n	800feb0 <xQueueGenericCreateStatic+0x54>
 800feae:	2300      	movs	r3, #0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d109      	bne.n	800fec8 <xQueueGenericCreateStatic+0x6c>
 800feb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb8:	f383 8811 	msr	BASEPRI, r3
 800febc:	f3bf 8f6f 	isb	sy
 800fec0:	f3bf 8f4f 	dsb	sy
 800fec4:	623b      	str	r3, [r7, #32]
 800fec6:	e7fe      	b.n	800fec6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d102      	bne.n	800fed4 <xQueueGenericCreateStatic+0x78>
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d101      	bne.n	800fed8 <xQueueGenericCreateStatic+0x7c>
 800fed4:	2301      	movs	r3, #1
 800fed6:	e000      	b.n	800feda <xQueueGenericCreateStatic+0x7e>
 800fed8:	2300      	movs	r3, #0
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d109      	bne.n	800fef2 <xQueueGenericCreateStatic+0x96>
 800fede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	61fb      	str	r3, [r7, #28]
 800fef0:	e7fe      	b.n	800fef0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fef2:	2348      	movs	r3, #72	; 0x48
 800fef4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	2b48      	cmp	r3, #72	; 0x48
 800fefa:	d009      	beq.n	800ff10 <xQueueGenericCreateStatic+0xb4>
 800fefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff00:	f383 8811 	msr	BASEPRI, r3
 800ff04:	f3bf 8f6f 	isb	sy
 800ff08:	f3bf 8f4f 	dsb	sy
 800ff0c:	61bb      	str	r3, [r7, #24]
 800ff0e:	e7fe      	b.n	800ff0e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ff14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d009      	beq.n	800ff2e <xQueueGenericCreateStatic+0xd2>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ff1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff20:	9300      	str	r3, [sp, #0]
 800ff22:	4613      	mov	r3, r2
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	68b9      	ldr	r1, [r7, #8]
 800ff28:	68f8      	ldr	r0, [r7, #12]
 800ff2a:	f000 f805 	bl	800ff38 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ff2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3730      	adds	r7, #48	; 0x30
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
 800ff44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d103      	bne.n	800ff54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ff4c:	69bb      	ldr	r3, [r7, #24]
 800ff4e:	69ba      	ldr	r2, [r7, #24]
 800ff50:	601a      	str	r2, [r3, #0]
 800ff52:	e002      	b.n	800ff5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ff5a:	69bb      	ldr	r3, [r7, #24]
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ff60:	69bb      	ldr	r3, [r7, #24]
 800ff62:	68ba      	ldr	r2, [r7, #8]
 800ff64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ff66:	2101      	movs	r1, #1
 800ff68:	69b8      	ldr	r0, [r7, #24]
 800ff6a:	f7ff ff0f 	bl	800fd8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ff6e:	bf00      	nop
 800ff70:	3710      	adds	r7, #16
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}

0800ff76 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ff76:	b580      	push	{r7, lr}
 800ff78:	b082      	sub	sp, #8
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d00e      	beq.n	800ffa2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2200      	movs	r2, #0
 800ff94:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ff96:	2300      	movs	r3, #0
 800ff98:	2200      	movs	r2, #0
 800ff9a:	2100      	movs	r1, #0
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f000 f81f 	bl	800ffe0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ffa2:	bf00      	nop
 800ffa4:	3708      	adds	r7, #8
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}

0800ffaa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ffaa:	b580      	push	{r7, lr}
 800ffac:	b088      	sub	sp, #32
 800ffae:	af02      	add	r7, sp, #8
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	6039      	str	r1, [r7, #0]
 800ffb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	617b      	str	r3, [r7, #20]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ffbe:	79fb      	ldrb	r3, [r7, #7]
 800ffc0:	9300      	str	r3, [sp, #0]
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	6939      	ldr	r1, [r7, #16]
 800ffc8:	6978      	ldr	r0, [r7, #20]
 800ffca:	f7ff ff47 	bl	800fe5c <xQueueGenericCreateStatic>
 800ffce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800ffd0:	68f8      	ldr	r0, [r7, #12]
 800ffd2:	f7ff ffd0 	bl	800ff76 <prvInitialiseMutex>

		return pxNewQueue;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
	}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3718      	adds	r7, #24
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b08e      	sub	sp, #56	; 0x38
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
 800ffec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ffee:	2300      	movs	r3, #0
 800fff0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d109      	bne.n	8010010 <xQueueGenericSend+0x30>
 800fffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010000:	f383 8811 	msr	BASEPRI, r3
 8010004:	f3bf 8f6f 	isb	sy
 8010008:	f3bf 8f4f 	dsb	sy
 801000c:	62bb      	str	r3, [r7, #40]	; 0x28
 801000e:	e7fe      	b.n	801000e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d103      	bne.n	801001e <xQueueGenericSend+0x3e>
 8010016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801001a:	2b00      	cmp	r3, #0
 801001c:	d101      	bne.n	8010022 <xQueueGenericSend+0x42>
 801001e:	2301      	movs	r3, #1
 8010020:	e000      	b.n	8010024 <xQueueGenericSend+0x44>
 8010022:	2300      	movs	r3, #0
 8010024:	2b00      	cmp	r3, #0
 8010026:	d109      	bne.n	801003c <xQueueGenericSend+0x5c>
 8010028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002c:	f383 8811 	msr	BASEPRI, r3
 8010030:	f3bf 8f6f 	isb	sy
 8010034:	f3bf 8f4f 	dsb	sy
 8010038:	627b      	str	r3, [r7, #36]	; 0x24
 801003a:	e7fe      	b.n	801003a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	2b02      	cmp	r3, #2
 8010040:	d103      	bne.n	801004a <xQueueGenericSend+0x6a>
 8010042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010046:	2b01      	cmp	r3, #1
 8010048:	d101      	bne.n	801004e <xQueueGenericSend+0x6e>
 801004a:	2301      	movs	r3, #1
 801004c:	e000      	b.n	8010050 <xQueueGenericSend+0x70>
 801004e:	2300      	movs	r3, #0
 8010050:	2b00      	cmp	r3, #0
 8010052:	d109      	bne.n	8010068 <xQueueGenericSend+0x88>
 8010054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010058:	f383 8811 	msr	BASEPRI, r3
 801005c:	f3bf 8f6f 	isb	sy
 8010060:	f3bf 8f4f 	dsb	sy
 8010064:	623b      	str	r3, [r7, #32]
 8010066:	e7fe      	b.n	8010066 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010068:	f001 f8a0 	bl	80111ac <xTaskGetSchedulerState>
 801006c:	4603      	mov	r3, r0
 801006e:	2b00      	cmp	r3, #0
 8010070:	d102      	bne.n	8010078 <xQueueGenericSend+0x98>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d101      	bne.n	801007c <xQueueGenericSend+0x9c>
 8010078:	2301      	movs	r3, #1
 801007a:	e000      	b.n	801007e <xQueueGenericSend+0x9e>
 801007c:	2300      	movs	r3, #0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d109      	bne.n	8010096 <xQueueGenericSend+0xb6>
 8010082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010086:	f383 8811 	msr	BASEPRI, r3
 801008a:	f3bf 8f6f 	isb	sy
 801008e:	f3bf 8f4f 	dsb	sy
 8010092:	61fb      	str	r3, [r7, #28]
 8010094:	e7fe      	b.n	8010094 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010096:	f7ff fd7f 	bl	800fb98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801009a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801009e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d302      	bcc.n	80100ac <xQueueGenericSend+0xcc>
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	2b02      	cmp	r3, #2
 80100aa:	d129      	bne.n	8010100 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80100ac:	683a      	ldr	r2, [r7, #0]
 80100ae:	68b9      	ldr	r1, [r7, #8]
 80100b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100b2:	f000 fa39 	bl	8010528 <prvCopyDataToQueue>
 80100b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d010      	beq.n	80100e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c2:	3324      	adds	r3, #36	; 0x24
 80100c4:	4618      	mov	r0, r3
 80100c6:	f000 ff1b 	bl	8010f00 <xTaskRemoveFromEventList>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d013      	beq.n	80100f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80100d0:	4b3f      	ldr	r3, [pc, #252]	; (80101d0 <xQueueGenericSend+0x1f0>)
 80100d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100d6:	601a      	str	r2, [r3, #0]
 80100d8:	f3bf 8f4f 	dsb	sy
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	e00a      	b.n	80100f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80100e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d007      	beq.n	80100f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80100e8:	4b39      	ldr	r3, [pc, #228]	; (80101d0 <xQueueGenericSend+0x1f0>)
 80100ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100ee:	601a      	str	r2, [r3, #0]
 80100f0:	f3bf 8f4f 	dsb	sy
 80100f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80100f8:	f7ff fd7c 	bl	800fbf4 <vPortExitCritical>
				return pdPASS;
 80100fc:	2301      	movs	r3, #1
 80100fe:	e063      	b.n	80101c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d103      	bne.n	801010e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010106:	f7ff fd75 	bl	800fbf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801010a:	2300      	movs	r3, #0
 801010c:	e05c      	b.n	80101c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801010e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010110:	2b00      	cmp	r3, #0
 8010112:	d106      	bne.n	8010122 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010114:	f107 0314 	add.w	r3, r7, #20
 8010118:	4618      	mov	r0, r3
 801011a:	f000 ff53 	bl	8010fc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801011e:	2301      	movs	r3, #1
 8010120:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010122:	f7ff fd67 	bl	800fbf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010126:	f000 fce1 	bl	8010aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801012a:	f7ff fd35 	bl	800fb98 <vPortEnterCritical>
 801012e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010134:	b25b      	sxtb	r3, r3
 8010136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801013a:	d103      	bne.n	8010144 <xQueueGenericSend+0x164>
 801013c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013e:	2200      	movs	r2, #0
 8010140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801014a:	b25b      	sxtb	r3, r3
 801014c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010150:	d103      	bne.n	801015a <xQueueGenericSend+0x17a>
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	2200      	movs	r2, #0
 8010156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801015a:	f7ff fd4b 	bl	800fbf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801015e:	1d3a      	adds	r2, r7, #4
 8010160:	f107 0314 	add.w	r3, r7, #20
 8010164:	4611      	mov	r1, r2
 8010166:	4618      	mov	r0, r3
 8010168:	f000 ff42 	bl	8010ff0 <xTaskCheckForTimeOut>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	d124      	bne.n	80101bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010174:	f000 faaa 	bl	80106cc <prvIsQueueFull>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d018      	beq.n	80101b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801017e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010180:	3310      	adds	r3, #16
 8010182:	687a      	ldr	r2, [r7, #4]
 8010184:	4611      	mov	r1, r2
 8010186:	4618      	mov	r0, r3
 8010188:	f000 fe96 	bl	8010eb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801018c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801018e:	f000 fa35 	bl	80105fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010192:	f000 fcb9 	bl	8010b08 <xTaskResumeAll>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	f47f af7c 	bne.w	8010096 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 801019e:	4b0c      	ldr	r3, [pc, #48]	; (80101d0 <xQueueGenericSend+0x1f0>)
 80101a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101a4:	601a      	str	r2, [r3, #0]
 80101a6:	f3bf 8f4f 	dsb	sy
 80101aa:	f3bf 8f6f 	isb	sy
 80101ae:	e772      	b.n	8010096 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80101b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101b2:	f000 fa23 	bl	80105fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80101b6:	f000 fca7 	bl	8010b08 <xTaskResumeAll>
 80101ba:	e76c      	b.n	8010096 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80101bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101be:	f000 fa1d 	bl	80105fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80101c2:	f000 fca1 	bl	8010b08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80101c6:	2300      	movs	r3, #0
		}
	}
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3738      	adds	r7, #56	; 0x38
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}
 80101d0:	e000ed04 	.word	0xe000ed04

080101d4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b08e      	sub	sp, #56	; 0x38
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80101e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d109      	bne.n	80101fc <xQueueGiveFromISR+0x28>
 80101e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ec:	f383 8811 	msr	BASEPRI, r3
 80101f0:	f3bf 8f6f 	isb	sy
 80101f4:	f3bf 8f4f 	dsb	sy
 80101f8:	623b      	str	r3, [r7, #32]
 80101fa:	e7fe      	b.n	80101fa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80101fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010200:	2b00      	cmp	r3, #0
 8010202:	d009      	beq.n	8010218 <xQueueGiveFromISR+0x44>
 8010204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010208:	f383 8811 	msr	BASEPRI, r3
 801020c:	f3bf 8f6f 	isb	sy
 8010210:	f3bf 8f4f 	dsb	sy
 8010214:	61fb      	str	r3, [r7, #28]
 8010216:	e7fe      	b.n	8010216 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d103      	bne.n	8010228 <xQueueGiveFromISR+0x54>
 8010220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d101      	bne.n	801022c <xQueueGiveFromISR+0x58>
 8010228:	2301      	movs	r3, #1
 801022a:	e000      	b.n	801022e <xQueueGiveFromISR+0x5a>
 801022c:	2300      	movs	r3, #0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d109      	bne.n	8010246 <xQueueGiveFromISR+0x72>
 8010232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010236:	f383 8811 	msr	BASEPRI, r3
 801023a:	f3bf 8f6f 	isb	sy
 801023e:	f3bf 8f4f 	dsb	sy
 8010242:	61bb      	str	r3, [r7, #24]
 8010244:	e7fe      	b.n	8010244 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010246:	f7ff fd63 	bl	800fd10 <vPortValidateInterruptPriority>
	__asm volatile
 801024a:	f3ef 8211 	mrs	r2, BASEPRI
 801024e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010252:	f383 8811 	msr	BASEPRI, r3
 8010256:	f3bf 8f6f 	isb	sy
 801025a:	f3bf 8f4f 	dsb	sy
 801025e:	617a      	str	r2, [r7, #20]
 8010260:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010262:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010264:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801026a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801026c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010272:	429a      	cmp	r2, r3
 8010274:	d22b      	bcs.n	80102ce <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801027c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010282:	1c5a      	adds	r2, r3, #1
 8010284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010286:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801028c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010290:	d112      	bne.n	80102b8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010296:	2b00      	cmp	r3, #0
 8010298:	d016      	beq.n	80102c8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801029a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029c:	3324      	adds	r3, #36	; 0x24
 801029e:	4618      	mov	r0, r3
 80102a0:	f000 fe2e 	bl	8010f00 <xTaskRemoveFromEventList>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00e      	beq.n	80102c8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d00b      	beq.n	80102c8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	2201      	movs	r2, #1
 80102b4:	601a      	str	r2, [r3, #0]
 80102b6:	e007      	b.n	80102c8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80102b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102bc:	3301      	adds	r3, #1
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	b25a      	sxtb	r2, r3
 80102c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80102c8:	2301      	movs	r3, #1
 80102ca:	637b      	str	r3, [r7, #52]	; 0x34
 80102cc:	e001      	b.n	80102d2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80102ce:	2300      	movs	r3, #0
 80102d0:	637b      	str	r3, [r7, #52]	; 0x34
 80102d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80102dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3738      	adds	r7, #56	; 0x38
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
	...

080102e8 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b08e      	sub	sp, #56	; 0x38
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80102f2:	2300      	movs	r3, #0
 80102f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80102fa:	2300      	movs	r3, #0
 80102fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80102fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010300:	2b00      	cmp	r3, #0
 8010302:	d109      	bne.n	8010318 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8010304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	623b      	str	r3, [r7, #32]
 8010316:	e7fe      	b.n	8010316 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801031c:	2b00      	cmp	r3, #0
 801031e:	d009      	beq.n	8010334 <xQueueSemaphoreTake+0x4c>
 8010320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010324:	f383 8811 	msr	BASEPRI, r3
 8010328:	f3bf 8f6f 	isb	sy
 801032c:	f3bf 8f4f 	dsb	sy
 8010330:	61fb      	str	r3, [r7, #28]
 8010332:	e7fe      	b.n	8010332 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010334:	f000 ff3a 	bl	80111ac <xTaskGetSchedulerState>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d102      	bne.n	8010344 <xQueueSemaphoreTake+0x5c>
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d101      	bne.n	8010348 <xQueueSemaphoreTake+0x60>
 8010344:	2301      	movs	r3, #1
 8010346:	e000      	b.n	801034a <xQueueSemaphoreTake+0x62>
 8010348:	2300      	movs	r3, #0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d109      	bne.n	8010362 <xQueueSemaphoreTake+0x7a>
 801034e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010352:	f383 8811 	msr	BASEPRI, r3
 8010356:	f3bf 8f6f 	isb	sy
 801035a:	f3bf 8f4f 	dsb	sy
 801035e:	61bb      	str	r3, [r7, #24]
 8010360:	e7fe      	b.n	8010360 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010362:	f7ff fc19 	bl	800fb98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801036a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801036c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036e:	2b00      	cmp	r3, #0
 8010370:	d024      	beq.n	80103bc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010374:	1e5a      	subs	r2, r3, #1
 8010376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010378:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801037a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d104      	bne.n	801038c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010382:	f001 f8d9 	bl	8011538 <pvTaskIncrementMutexHeldCount>
 8010386:	4602      	mov	r2, r0
 8010388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801038c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038e:	691b      	ldr	r3, [r3, #16]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d00f      	beq.n	80103b4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010396:	3310      	adds	r3, #16
 8010398:	4618      	mov	r0, r3
 801039a:	f000 fdb1 	bl	8010f00 <xTaskRemoveFromEventList>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d007      	beq.n	80103b4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80103a4:	4b53      	ldr	r3, [pc, #332]	; (80104f4 <xQueueSemaphoreTake+0x20c>)
 80103a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103aa:	601a      	str	r2, [r3, #0]
 80103ac:	f3bf 8f4f 	dsb	sy
 80103b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80103b4:	f7ff fc1e 	bl	800fbf4 <vPortExitCritical>
				return pdPASS;
 80103b8:	2301      	movs	r3, #1
 80103ba:	e096      	b.n	80104ea <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d110      	bne.n	80103e4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80103c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d009      	beq.n	80103dc <xQueueSemaphoreTake+0xf4>
 80103c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103cc:	f383 8811 	msr	BASEPRI, r3
 80103d0:	f3bf 8f6f 	isb	sy
 80103d4:	f3bf 8f4f 	dsb	sy
 80103d8:	617b      	str	r3, [r7, #20]
 80103da:	e7fe      	b.n	80103da <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80103dc:	f7ff fc0a 	bl	800fbf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80103e0:	2300      	movs	r3, #0
 80103e2:	e082      	b.n	80104ea <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80103e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d106      	bne.n	80103f8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80103ea:	f107 030c 	add.w	r3, r7, #12
 80103ee:	4618      	mov	r0, r3
 80103f0:	f000 fde8 	bl	8010fc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80103f4:	2301      	movs	r3, #1
 80103f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80103f8:	f7ff fbfc 	bl	800fbf4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80103fc:	f000 fb76 	bl	8010aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010400:	f7ff fbca 	bl	800fb98 <vPortEnterCritical>
 8010404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801040a:	b25b      	sxtb	r3, r3
 801040c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010410:	d103      	bne.n	801041a <xQueueSemaphoreTake+0x132>
 8010412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010414:	2200      	movs	r2, #0
 8010416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801041a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010420:	b25b      	sxtb	r3, r3
 8010422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010426:	d103      	bne.n	8010430 <xQueueSemaphoreTake+0x148>
 8010428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042a:	2200      	movs	r2, #0
 801042c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010430:	f7ff fbe0 	bl	800fbf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010434:	463a      	mov	r2, r7
 8010436:	f107 030c 	add.w	r3, r7, #12
 801043a:	4611      	mov	r1, r2
 801043c:	4618      	mov	r0, r3
 801043e:	f000 fdd7 	bl	8010ff0 <xTaskCheckForTimeOut>
 8010442:	4603      	mov	r3, r0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d132      	bne.n	80104ae <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010448:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801044a:	f000 f929 	bl	80106a0 <prvIsQueueEmpty>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d026      	beq.n	80104a2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d109      	bne.n	8010470 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 801045c:	f7ff fb9c 	bl	800fb98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	4618      	mov	r0, r3
 8010466:	f000 febf 	bl	80111e8 <xTaskPriorityInherit>
 801046a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801046c:	f7ff fbc2 	bl	800fbf4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010472:	3324      	adds	r3, #36	; 0x24
 8010474:	683a      	ldr	r2, [r7, #0]
 8010476:	4611      	mov	r1, r2
 8010478:	4618      	mov	r0, r3
 801047a:	f000 fd1d 	bl	8010eb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801047e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010480:	f000 f8bc 	bl	80105fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010484:	f000 fb40 	bl	8010b08 <xTaskResumeAll>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	f47f af69 	bne.w	8010362 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8010490:	4b18      	ldr	r3, [pc, #96]	; (80104f4 <xQueueSemaphoreTake+0x20c>)
 8010492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010496:	601a      	str	r2, [r3, #0]
 8010498:	f3bf 8f4f 	dsb	sy
 801049c:	f3bf 8f6f 	isb	sy
 80104a0:	e75f      	b.n	8010362 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80104a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104a4:	f000 f8aa 	bl	80105fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80104a8:	f000 fb2e 	bl	8010b08 <xTaskResumeAll>
 80104ac:	e759      	b.n	8010362 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80104ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104b0:	f000 f8a4 	bl	80105fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104b4:	f000 fb28 	bl	8010b08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104ba:	f000 f8f1 	bl	80106a0 <prvIsQueueEmpty>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f43f af4e 	beq.w	8010362 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80104c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d00d      	beq.n	80104e8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80104cc:	f7ff fb64 	bl	800fb98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80104d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104d2:	f000 f811 	bl	80104f8 <prvGetDisinheritPriorityAfterTimeout>
 80104d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80104d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80104de:	4618      	mov	r0, r3
 80104e0:	f000 ff8c 	bl	80113fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80104e4:	f7ff fb86 	bl	800fbf4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80104e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3738      	adds	r7, #56	; 0x38
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	e000ed04 	.word	0xe000ed04

080104f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80104f8:	b480      	push	{r7}
 80104fa:	b085      	sub	sp, #20
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010504:	2b00      	cmp	r3, #0
 8010506:	d006      	beq.n	8010516 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f1c3 0307 	rsb	r3, r3, #7
 8010512:	60fb      	str	r3, [r7, #12]
 8010514:	e001      	b.n	801051a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010516:	2300      	movs	r3, #0
 8010518:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801051a:	68fb      	ldr	r3, [r7, #12]
	}
 801051c:	4618      	mov	r0, r3
 801051e:	3714      	adds	r7, #20
 8010520:	46bd      	mov	sp, r7
 8010522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010526:	4770      	bx	lr

08010528 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b086      	sub	sp, #24
 801052c:	af00      	add	r7, sp, #0
 801052e:	60f8      	str	r0, [r7, #12]
 8010530:	60b9      	str	r1, [r7, #8]
 8010532:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010534:	2300      	movs	r3, #0
 8010536:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801053c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010542:	2b00      	cmp	r3, #0
 8010544:	d10d      	bne.n	8010562 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d14d      	bne.n	80105ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	4618      	mov	r0, r3
 8010554:	f000 fece 	bl	80112f4 <xTaskPriorityDisinherit>
 8010558:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2200      	movs	r2, #0
 801055e:	605a      	str	r2, [r3, #4]
 8010560:	e043      	b.n	80105ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d119      	bne.n	801059c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	6898      	ldr	r0, [r3, #8]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010570:	461a      	mov	r2, r3
 8010572:	68b9      	ldr	r1, [r7, #8]
 8010574:	f001 f896 	bl	80116a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	689a      	ldr	r2, [r3, #8]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010580:	441a      	add	r2, r3
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	689a      	ldr	r2, [r3, #8]
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	429a      	cmp	r2, r3
 8010590:	d32b      	bcc.n	80105ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	609a      	str	r2, [r3, #8]
 801059a:	e026      	b.n	80105ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	68d8      	ldr	r0, [r3, #12]
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105a4:	461a      	mov	r2, r3
 80105a6:	68b9      	ldr	r1, [r7, #8]
 80105a8:	f001 f87c 	bl	80116a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	68da      	ldr	r2, [r3, #12]
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105b4:	425b      	negs	r3, r3
 80105b6:	441a      	add	r2, r3
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	68da      	ldr	r2, [r3, #12]
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d207      	bcs.n	80105d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	685a      	ldr	r2, [r3, #4]
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105d0:	425b      	negs	r3, r3
 80105d2:	441a      	add	r2, r3
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2b02      	cmp	r3, #2
 80105dc:	d105      	bne.n	80105ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d002      	beq.n	80105ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	3b01      	subs	r3, #1
 80105e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	1c5a      	adds	r2, r3, #1
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80105f2:	697b      	ldr	r3, [r7, #20]
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3718      	adds	r7, #24
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010604:	f7ff fac8 	bl	800fb98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801060e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010610:	e011      	b.n	8010636 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010616:	2b00      	cmp	r3, #0
 8010618:	d012      	beq.n	8010640 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	3324      	adds	r3, #36	; 0x24
 801061e:	4618      	mov	r0, r3
 8010620:	f000 fc6e 	bl	8010f00 <xTaskRemoveFromEventList>
 8010624:	4603      	mov	r3, r0
 8010626:	2b00      	cmp	r3, #0
 8010628:	d001      	beq.n	801062e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801062a:	f000 fd37 	bl	801109c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801062e:	7bfb      	ldrb	r3, [r7, #15]
 8010630:	3b01      	subs	r3, #1
 8010632:	b2db      	uxtb	r3, r3
 8010634:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801063a:	2b00      	cmp	r3, #0
 801063c:	dce9      	bgt.n	8010612 <prvUnlockQueue+0x16>
 801063e:	e000      	b.n	8010642 <prvUnlockQueue+0x46>
					break;
 8010640:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	22ff      	movs	r2, #255	; 0xff
 8010646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801064a:	f7ff fad3 	bl	800fbf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801064e:	f7ff faa3 	bl	800fb98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010658:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801065a:	e011      	b.n	8010680 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	691b      	ldr	r3, [r3, #16]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d012      	beq.n	801068a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	3310      	adds	r3, #16
 8010668:	4618      	mov	r0, r3
 801066a:	f000 fc49 	bl	8010f00 <xTaskRemoveFromEventList>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d001      	beq.n	8010678 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010674:	f000 fd12 	bl	801109c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010678:	7bbb      	ldrb	r3, [r7, #14]
 801067a:	3b01      	subs	r3, #1
 801067c:	b2db      	uxtb	r3, r3
 801067e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010684:	2b00      	cmp	r3, #0
 8010686:	dce9      	bgt.n	801065c <prvUnlockQueue+0x60>
 8010688:	e000      	b.n	801068c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801068a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	22ff      	movs	r2, #255	; 0xff
 8010690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010694:	f7ff faae 	bl	800fbf4 <vPortExitCritical>
}
 8010698:	bf00      	nop
 801069a:	3710      	adds	r7, #16
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b084      	sub	sp, #16
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80106a8:	f7ff fa76 	bl	800fb98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d102      	bne.n	80106ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80106b4:	2301      	movs	r3, #1
 80106b6:	60fb      	str	r3, [r7, #12]
 80106b8:	e001      	b.n	80106be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80106ba:	2300      	movs	r3, #0
 80106bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80106be:	f7ff fa99 	bl	800fbf4 <vPortExitCritical>

	return xReturn;
 80106c2:	68fb      	ldr	r3, [r7, #12]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3710      	adds	r7, #16
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80106d4:	f7ff fa60 	bl	800fb98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d102      	bne.n	80106ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80106e4:	2301      	movs	r3, #1
 80106e6:	60fb      	str	r3, [r7, #12]
 80106e8:	e001      	b.n	80106ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80106ea:	2300      	movs	r3, #0
 80106ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80106ee:	f7ff fa81 	bl	800fbf4 <vPortExitCritical>

	return xReturn;
 80106f2:	68fb      	ldr	r3, [r7, #12]
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3710      	adds	r7, #16
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <vApplicationStackOverflowHook>:

/* Callback function prototypes. --------------------------*/
#if(  configCHECK_FOR_STACK_OVERFLOW > 0 )

	void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
	{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
	    while (1) {
	        __asm("nop");
 8010706:	bf00      	nop
 8010708:	e7fd      	b.n	8010706 <vApplicationStackOverflowHook+0xa>

0801070a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801070a:	b580      	push	{r7, lr}
 801070c:	b08e      	sub	sp, #56	; 0x38
 801070e:	af04      	add	r7, sp, #16
 8010710:	60f8      	str	r0, [r7, #12]
 8010712:	60b9      	str	r1, [r7, #8]
 8010714:	607a      	str	r2, [r7, #4]
 8010716:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801071a:	2b00      	cmp	r3, #0
 801071c:	d109      	bne.n	8010732 <xTaskCreateStatic+0x28>
 801071e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010722:	f383 8811 	msr	BASEPRI, r3
 8010726:	f3bf 8f6f 	isb	sy
 801072a:	f3bf 8f4f 	dsb	sy
 801072e:	623b      	str	r3, [r7, #32]
 8010730:	e7fe      	b.n	8010730 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010734:	2b00      	cmp	r3, #0
 8010736:	d109      	bne.n	801074c <xTaskCreateStatic+0x42>
 8010738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073c:	f383 8811 	msr	BASEPRI, r3
 8010740:	f3bf 8f6f 	isb	sy
 8010744:	f3bf 8f4f 	dsb	sy
 8010748:	61fb      	str	r3, [r7, #28]
 801074a:	e7fe      	b.n	801074a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801074c:	2348      	movs	r3, #72	; 0x48
 801074e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	2b48      	cmp	r3, #72	; 0x48
 8010754:	d009      	beq.n	801076a <xTaskCreateStatic+0x60>
 8010756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075a:	f383 8811 	msr	BASEPRI, r3
 801075e:	f3bf 8f6f 	isb	sy
 8010762:	f3bf 8f4f 	dsb	sy
 8010766:	61bb      	str	r3, [r7, #24]
 8010768:	e7fe      	b.n	8010768 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801076a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076c:	2b00      	cmp	r3, #0
 801076e:	d01a      	beq.n	80107a6 <xTaskCreateStatic+0x9c>
 8010770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010772:	2b00      	cmp	r3, #0
 8010774:	d017      	beq.n	80107a6 <xTaskCreateStatic+0x9c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010778:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801077e:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010780:	2300      	movs	r3, #0
 8010782:	9303      	str	r3, [sp, #12]
 8010784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010786:	9302      	str	r3, [sp, #8]
 8010788:	f107 0314 	add.w	r3, r7, #20
 801078c:	9301      	str	r3, [sp, #4]
 801078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010790:	9300      	str	r3, [sp, #0]
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	68b9      	ldr	r1, [r7, #8]
 8010798:	68f8      	ldr	r0, [r7, #12]
 801079a:	f000 f80b 	bl	80107b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801079e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107a0:	f000 f88e 	bl	80108c0 <prvAddNewTaskToReadyList>
 80107a4:	e001      	b.n	80107aa <xTaskCreateStatic+0xa0>
		}
		else
		{
			xReturn = NULL;
 80107a6:	2300      	movs	r3, #0
 80107a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80107aa:	697b      	ldr	r3, [r7, #20]
	}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3728      	adds	r7, #40	; 0x28
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b088      	sub	sp, #32
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	607a      	str	r2, [r7, #4]
 80107c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80107c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	009b      	lsls	r3, r3, #2
 80107ca:	461a      	mov	r2, r3
 80107cc:	21a5      	movs	r1, #165	; 0xa5
 80107ce:	f000 ff8d 	bl	80116ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80107d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80107dc:	3b01      	subs	r3, #1
 80107de:	009b      	lsls	r3, r3, #2
 80107e0:	4413      	add	r3, r2
 80107e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80107e4:	69bb      	ldr	r3, [r7, #24]
 80107e6:	f023 0307 	bic.w	r3, r3, #7
 80107ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	f003 0307 	and.w	r3, r3, #7
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d009      	beq.n	801080a <prvInitialiseNewTask+0x56>
 80107f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fa:	f383 8811 	msr	BASEPRI, r3
 80107fe:	f3bf 8f6f 	isb	sy
 8010802:	f3bf 8f4f 	dsb	sy
 8010806:	617b      	str	r3, [r7, #20]
 8010808:	e7fe      	b.n	8010808 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801080a:	2300      	movs	r3, #0
 801080c:	61fb      	str	r3, [r7, #28]
 801080e:	e012      	b.n	8010836 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010810:	68ba      	ldr	r2, [r7, #8]
 8010812:	69fb      	ldr	r3, [r7, #28]
 8010814:	4413      	add	r3, r2
 8010816:	7819      	ldrb	r1, [r3, #0]
 8010818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801081a:	69fb      	ldr	r3, [r7, #28]
 801081c:	4413      	add	r3, r2
 801081e:	3334      	adds	r3, #52	; 0x34
 8010820:	460a      	mov	r2, r1
 8010822:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010824:	68ba      	ldr	r2, [r7, #8]
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	4413      	add	r3, r2
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d006      	beq.n	801083e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010830:	69fb      	ldr	r3, [r7, #28]
 8010832:	3301      	adds	r3, #1
 8010834:	61fb      	str	r3, [r7, #28]
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	2b01      	cmp	r3, #1
 801083a:	d9e9      	bls.n	8010810 <prvInitialiseNewTask+0x5c>
 801083c:	e000      	b.n	8010840 <prvInitialiseNewTask+0x8c>
		{
			break;
 801083e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010842:	2200      	movs	r2, #0
 8010844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084a:	2b06      	cmp	r3, #6
 801084c:	d901      	bls.n	8010852 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801084e:	2306      	movs	r3, #6
 8010850:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010856:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801085c:	639a      	str	r2, [r3, #56]	; 0x38
		pxNewTCB->uxMutexesHeld = 0;
 801085e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010860:	2200      	movs	r2, #0
 8010862:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010866:	3304      	adds	r3, #4
 8010868:	4618      	mov	r0, r3
 801086a:	f7fe ffff 	bl	800f86c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801086e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010870:	3318      	adds	r3, #24
 8010872:	4618      	mov	r0, r3
 8010874:	f7fe fffa 	bl	800f86c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801087c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010880:	f1c3 0207 	rsb	r2, r3, #7
 8010884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010886:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801088c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010890:	2200      	movs	r2, #0
 8010892:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010896:	2200      	movs	r2, #0
 8010898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801089c:	683a      	ldr	r2, [r7, #0]
 801089e:	68f9      	ldr	r1, [r7, #12]
 80108a0:	69b8      	ldr	r0, [r7, #24]
 80108a2:	f7ff f877 	bl	800f994 <pxPortInitialiseStack>
 80108a6:	4602      	mov	r2, r0
 80108a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80108ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d002      	beq.n	80108b8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80108b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108b8:	bf00      	nop
 80108ba:	3720      	adds	r7, #32
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80108c8:	f7ff f966 	bl	800fb98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80108cc:	4b2a      	ldr	r3, [pc, #168]	; (8010978 <prvAddNewTaskToReadyList+0xb8>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	3301      	adds	r3, #1
 80108d2:	4a29      	ldr	r2, [pc, #164]	; (8010978 <prvAddNewTaskToReadyList+0xb8>)
 80108d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80108d6:	4b29      	ldr	r3, [pc, #164]	; (801097c <prvAddNewTaskToReadyList+0xbc>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d109      	bne.n	80108f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80108de:	4a27      	ldr	r2, [pc, #156]	; (801097c <prvAddNewTaskToReadyList+0xbc>)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80108e4:	4b24      	ldr	r3, [pc, #144]	; (8010978 <prvAddNewTaskToReadyList+0xb8>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d110      	bne.n	801090e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80108ec:	f000 fbfa 	bl	80110e4 <prvInitialiseTaskLists>
 80108f0:	e00d      	b.n	801090e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80108f2:	4b23      	ldr	r3, [pc, #140]	; (8010980 <prvAddNewTaskToReadyList+0xc0>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d109      	bne.n	801090e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80108fa:	4b20      	ldr	r3, [pc, #128]	; (801097c <prvAddNewTaskToReadyList+0xbc>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010904:	429a      	cmp	r2, r3
 8010906:	d802      	bhi.n	801090e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010908:	4a1c      	ldr	r2, [pc, #112]	; (801097c <prvAddNewTaskToReadyList+0xbc>)
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801090e:	4b1d      	ldr	r3, [pc, #116]	; (8010984 <prvAddNewTaskToReadyList+0xc4>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	3301      	adds	r3, #1
 8010914:	4a1b      	ldr	r2, [pc, #108]	; (8010984 <prvAddNewTaskToReadyList+0xc4>)
 8010916:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801091c:	2201      	movs	r2, #1
 801091e:	409a      	lsls	r2, r3
 8010920:	4b19      	ldr	r3, [pc, #100]	; (8010988 <prvAddNewTaskToReadyList+0xc8>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4313      	orrs	r3, r2
 8010926:	4a18      	ldr	r2, [pc, #96]	; (8010988 <prvAddNewTaskToReadyList+0xc8>)
 8010928:	6013      	str	r3, [r2, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801092e:	4613      	mov	r3, r2
 8010930:	009b      	lsls	r3, r3, #2
 8010932:	4413      	add	r3, r2
 8010934:	009b      	lsls	r3, r3, #2
 8010936:	4a15      	ldr	r2, [pc, #84]	; (801098c <prvAddNewTaskToReadyList+0xcc>)
 8010938:	441a      	add	r2, r3
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	3304      	adds	r3, #4
 801093e:	4619      	mov	r1, r3
 8010940:	4610      	mov	r0, r2
 8010942:	f7fe ffa0 	bl	800f886 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010946:	f7ff f955 	bl	800fbf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801094a:	4b0d      	ldr	r3, [pc, #52]	; (8010980 <prvAddNewTaskToReadyList+0xc0>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d00e      	beq.n	8010970 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010952:	4b0a      	ldr	r3, [pc, #40]	; (801097c <prvAddNewTaskToReadyList+0xbc>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801095c:	429a      	cmp	r2, r3
 801095e:	d207      	bcs.n	8010970 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010960:	4b0b      	ldr	r3, [pc, #44]	; (8010990 <prvAddNewTaskToReadyList+0xd0>)
 8010962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010966:	601a      	str	r2, [r3, #0]
 8010968:	f3bf 8f4f 	dsb	sy
 801096c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010970:	bf00      	nop
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	200002f4 	.word	0x200002f4
 801097c:	20000220 	.word	0x20000220
 8010980:	20000300 	.word	0x20000300
 8010984:	20000310 	.word	0x20000310
 8010988:	200002fc 	.word	0x200002fc
 801098c:	20000224 	.word	0x20000224
 8010990:	e000ed04 	.word	0xe000ed04

08010994 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801099c:	2300      	movs	r3, #0
 801099e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d016      	beq.n	80109d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80109a6:	4b13      	ldr	r3, [pc, #76]	; (80109f4 <vTaskDelay+0x60>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d009      	beq.n	80109c2 <vTaskDelay+0x2e>
 80109ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b2:	f383 8811 	msr	BASEPRI, r3
 80109b6:	f3bf 8f6f 	isb	sy
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	60bb      	str	r3, [r7, #8]
 80109c0:	e7fe      	b.n	80109c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80109c2:	f000 f893 	bl	8010aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80109c6:	2100      	movs	r1, #0
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f000 fdc9 	bl	8011560 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80109ce:	f000 f89b 	bl	8010b08 <xTaskResumeAll>
 80109d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d107      	bne.n	80109ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80109da:	4b07      	ldr	r3, [pc, #28]	; (80109f8 <vTaskDelay+0x64>)
 80109dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109e0:	601a      	str	r2, [r3, #0]
 80109e2:	f3bf 8f4f 	dsb	sy
 80109e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80109ea:	bf00      	nop
 80109ec:	3710      	adds	r7, #16
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	2000031c 	.word	0x2000031c
 80109f8:	e000ed04 	.word	0xe000ed04

080109fc <vApplicationGetIdleTaskMemory>:


void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 80109fc:	b480      	push	{r7}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	607a      	str	r2, [r7, #4]
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task’s
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	4a07      	ldr	r2, [pc, #28]	; (8010a28 <vApplicationGetIdleTaskMemory+0x2c>)
 8010a0c:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Idle task’s stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	4a06      	ldr	r2, [pc, #24]	; (8010a2c <vApplicationGetIdleTaskMemory+0x30>)
 8010a12:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2240      	movs	r2, #64	; 0x40
 8010a18:	601a      	str	r2, [r3, #0]
}
 8010a1a:	bf00      	nop
 8010a1c:	3714      	adds	r7, #20
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	20000320 	.word	0x20000320
 8010a2c:	20000368 	.word	0x20000368

08010a30 <vTaskStartScheduler>:

void vTaskStartScheduler( void )
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b08a      	sub	sp, #40	; 0x28
 8010a34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010a36:	2300      	movs	r3, #0
 8010a38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010a3e:	463a      	mov	r2, r7
 8010a40:	1d39      	adds	r1, r7, #4
 8010a42:	f107 0308 	add.w	r3, r7, #8
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7ff ffd8 	bl	80109fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010a4c:	6839      	ldr	r1, [r7, #0]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	68ba      	ldr	r2, [r7, #8]
 8010a52:	9202      	str	r2, [sp, #8]
 8010a54:	9301      	str	r3, [sp, #4]
 8010a56:	2300      	movs	r3, #0
 8010a58:	9300      	str	r3, [sp, #0]
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	460a      	mov	r2, r1
 8010a5e:	491d      	ldr	r1, [pc, #116]	; (8010ad4 <vTaskStartScheduler+0xa4>)
 8010a60:	481d      	ldr	r0, [pc, #116]	; (8010ad8 <vTaskStartScheduler+0xa8>)
 8010a62:	f7ff fe52 	bl	801070a <xTaskCreateStatic>
 8010a66:	4602      	mov	r2, r0
 8010a68:	4b1c      	ldr	r3, [pc, #112]	; (8010adc <vTaskStartScheduler+0xac>)
 8010a6a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010a6c:	4b1b      	ldr	r3, [pc, #108]	; (8010adc <vTaskStartScheduler+0xac>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d002      	beq.n	8010a7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010a74:	2301      	movs	r3, #1
 8010a76:	617b      	str	r3, [r7, #20]
 8010a78:	e001      	b.n	8010a7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d115      	bne.n	8010ab0 <vTaskStartScheduler+0x80>
 8010a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a88:	f383 8811 	msr	BASEPRI, r3
 8010a8c:	f3bf 8f6f 	isb	sy
 8010a90:	f3bf 8f4f 	dsb	sy
 8010a94:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010a96:	4b12      	ldr	r3, [pc, #72]	; (8010ae0 <vTaskStartScheduler+0xb0>)
 8010a98:	f04f 32ff 	mov.w	r2, #4294967295
 8010a9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010a9e:	4b11      	ldr	r3, [pc, #68]	; (8010ae4 <vTaskStartScheduler+0xb4>)
 8010aa0:	2201      	movs	r2, #1
 8010aa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010aa4:	4b10      	ldr	r3, [pc, #64]	; (8010ae8 <vTaskStartScheduler+0xb8>)
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010aaa:	f7fe fff5 	bl	800fa98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010aae:	e00d      	b.n	8010acc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ab6:	d109      	bne.n	8010acc <vTaskStartScheduler+0x9c>
 8010ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010abc:	f383 8811 	msr	BASEPRI, r3
 8010ac0:	f3bf 8f6f 	isb	sy
 8010ac4:	f3bf 8f4f 	dsb	sy
 8010ac8:	60fb      	str	r3, [r7, #12]
 8010aca:	e7fe      	b.n	8010aca <vTaskStartScheduler+0x9a>
}
 8010acc:	bf00      	nop
 8010ace:	3718      	adds	r7, #24
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}
 8010ad4:	08013cdc 	.word	0x08013cdc
 8010ad8:	080110b5 	.word	0x080110b5
 8010adc:	20000318 	.word	0x20000318
 8010ae0:	20000314 	.word	0x20000314
 8010ae4:	20000300 	.word	0x20000300
 8010ae8:	200002f8 	.word	0x200002f8

08010aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010aec:	b480      	push	{r7}
 8010aee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010af0:	4b04      	ldr	r3, [pc, #16]	; (8010b04 <vTaskSuspendAll+0x18>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	3301      	adds	r3, #1
 8010af6:	4a03      	ldr	r2, [pc, #12]	; (8010b04 <vTaskSuspendAll+0x18>)
 8010af8:	6013      	str	r3, [r2, #0]
}
 8010afa:	bf00      	nop
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr
 8010b04:	2000031c 	.word	0x2000031c

08010b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010b12:	2300      	movs	r3, #0
 8010b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010b16:	4b41      	ldr	r3, [pc, #260]	; (8010c1c <xTaskResumeAll+0x114>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d109      	bne.n	8010b32 <xTaskResumeAll+0x2a>
 8010b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b22:	f383 8811 	msr	BASEPRI, r3
 8010b26:	f3bf 8f6f 	isb	sy
 8010b2a:	f3bf 8f4f 	dsb	sy
 8010b2e:	603b      	str	r3, [r7, #0]
 8010b30:	e7fe      	b.n	8010b30 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010b32:	f7ff f831 	bl	800fb98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010b36:	4b39      	ldr	r3, [pc, #228]	; (8010c1c <xTaskResumeAll+0x114>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	3b01      	subs	r3, #1
 8010b3c:	4a37      	ldr	r2, [pc, #220]	; (8010c1c <xTaskResumeAll+0x114>)
 8010b3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b40:	4b36      	ldr	r3, [pc, #216]	; (8010c1c <xTaskResumeAll+0x114>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d161      	bne.n	8010c0c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010b48:	4b35      	ldr	r3, [pc, #212]	; (8010c20 <xTaskResumeAll+0x118>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d05d      	beq.n	8010c0c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010b50:	e02e      	b.n	8010bb0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010b52:	4b34      	ldr	r3, [pc, #208]	; (8010c24 <xTaskResumeAll+0x11c>)
 8010b54:	68db      	ldr	r3, [r3, #12]
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	3318      	adds	r3, #24
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fe feee 	bl	800f940 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	3304      	adds	r3, #4
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fe fee9 	bl	800f940 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b72:	2201      	movs	r2, #1
 8010b74:	409a      	lsls	r2, r3
 8010b76:	4b2c      	ldr	r3, [pc, #176]	; (8010c28 <xTaskResumeAll+0x120>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	4a2a      	ldr	r2, [pc, #168]	; (8010c28 <xTaskResumeAll+0x120>)
 8010b7e:	6013      	str	r3, [r2, #0]
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b84:	4613      	mov	r3, r2
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	4413      	add	r3, r2
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	4a27      	ldr	r2, [pc, #156]	; (8010c2c <xTaskResumeAll+0x124>)
 8010b8e:	441a      	add	r2, r3
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	3304      	adds	r3, #4
 8010b94:	4619      	mov	r1, r3
 8010b96:	4610      	mov	r0, r2
 8010b98:	f7fe fe75 	bl	800f886 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ba0:	4b23      	ldr	r3, [pc, #140]	; (8010c30 <xTaskResumeAll+0x128>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d302      	bcc.n	8010bb0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8010baa:	4b22      	ldr	r3, [pc, #136]	; (8010c34 <xTaskResumeAll+0x12c>)
 8010bac:	2201      	movs	r2, #1
 8010bae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010bb0:	4b1c      	ldr	r3, [pc, #112]	; (8010c24 <xTaskResumeAll+0x11c>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d1cc      	bne.n	8010b52 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d001      	beq.n	8010bc2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010bbe:	f000 facf 	bl	8011160 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010bc2:	4b1d      	ldr	r3, [pc, #116]	; (8010c38 <xTaskResumeAll+0x130>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d010      	beq.n	8010bf0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010bce:	f000 f837 	bl	8010c40 <xTaskIncrementTick>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d002      	beq.n	8010bde <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8010bd8:	4b16      	ldr	r3, [pc, #88]	; (8010c34 <xTaskResumeAll+0x12c>)
 8010bda:	2201      	movs	r2, #1
 8010bdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	3b01      	subs	r3, #1
 8010be2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d1f1      	bne.n	8010bce <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8010bea:	4b13      	ldr	r3, [pc, #76]	; (8010c38 <xTaskResumeAll+0x130>)
 8010bec:	2200      	movs	r2, #0
 8010bee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010bf0:	4b10      	ldr	r3, [pc, #64]	; (8010c34 <xTaskResumeAll+0x12c>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d009      	beq.n	8010c0c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010bfc:	4b0f      	ldr	r3, [pc, #60]	; (8010c3c <xTaskResumeAll+0x134>)
 8010bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c02:	601a      	str	r2, [r3, #0]
 8010c04:	f3bf 8f4f 	dsb	sy
 8010c08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010c0c:	f7fe fff2 	bl	800fbf4 <vPortExitCritical>

	return xAlreadyYielded;
 8010c10:	68bb      	ldr	r3, [r7, #8]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3710      	adds	r7, #16
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}
 8010c1a:	bf00      	nop
 8010c1c:	2000031c 	.word	0x2000031c
 8010c20:	200002f4 	.word	0x200002f4
 8010c24:	200002e0 	.word	0x200002e0
 8010c28:	200002fc 	.word	0x200002fc
 8010c2c:	20000224 	.word	0x20000224
 8010c30:	20000220 	.word	0x20000220
 8010c34:	20000308 	.word	0x20000308
 8010c38:	20000304 	.word	0x20000304
 8010c3c:	e000ed04 	.word	0xe000ed04

08010c40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b086      	sub	sp, #24
 8010c44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010c46:	2300      	movs	r3, #0
 8010c48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c4a:	4b50      	ldr	r3, [pc, #320]	; (8010d8c <xTaskIncrementTick+0x14c>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f040 808c 	bne.w	8010d6c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010c54:	4b4e      	ldr	r3, [pc, #312]	; (8010d90 <xTaskIncrementTick+0x150>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	3301      	adds	r3, #1
 8010c5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010c5c:	4a4c      	ldr	r2, [pc, #304]	; (8010d90 <xTaskIncrementTick+0x150>)
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d11f      	bne.n	8010ca8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010c68:	4b4a      	ldr	r3, [pc, #296]	; (8010d94 <xTaskIncrementTick+0x154>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d009      	beq.n	8010c86 <xTaskIncrementTick+0x46>
 8010c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c76:	f383 8811 	msr	BASEPRI, r3
 8010c7a:	f3bf 8f6f 	isb	sy
 8010c7e:	f3bf 8f4f 	dsb	sy
 8010c82:	603b      	str	r3, [r7, #0]
 8010c84:	e7fe      	b.n	8010c84 <xTaskIncrementTick+0x44>
 8010c86:	4b43      	ldr	r3, [pc, #268]	; (8010d94 <xTaskIncrementTick+0x154>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	60fb      	str	r3, [r7, #12]
 8010c8c:	4b42      	ldr	r3, [pc, #264]	; (8010d98 <xTaskIncrementTick+0x158>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a40      	ldr	r2, [pc, #256]	; (8010d94 <xTaskIncrementTick+0x154>)
 8010c92:	6013      	str	r3, [r2, #0]
 8010c94:	4a40      	ldr	r2, [pc, #256]	; (8010d98 <xTaskIncrementTick+0x158>)
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	6013      	str	r3, [r2, #0]
 8010c9a:	4b40      	ldr	r3, [pc, #256]	; (8010d9c <xTaskIncrementTick+0x15c>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	4a3e      	ldr	r2, [pc, #248]	; (8010d9c <xTaskIncrementTick+0x15c>)
 8010ca2:	6013      	str	r3, [r2, #0]
 8010ca4:	f000 fa5c 	bl	8011160 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010ca8:	4b3d      	ldr	r3, [pc, #244]	; (8010da0 <xTaskIncrementTick+0x160>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	693a      	ldr	r2, [r7, #16]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d34d      	bcc.n	8010d4e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010cb2:	4b38      	ldr	r3, [pc, #224]	; (8010d94 <xTaskIncrementTick+0x154>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d101      	bne.n	8010cc0 <xTaskIncrementTick+0x80>
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	e000      	b.n	8010cc2 <xTaskIncrementTick+0x82>
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d004      	beq.n	8010cd0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cc6:	4b36      	ldr	r3, [pc, #216]	; (8010da0 <xTaskIncrementTick+0x160>)
 8010cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8010ccc:	601a      	str	r2, [r3, #0]
					break;
 8010cce:	e03e      	b.n	8010d4e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010cd0:	4b30      	ldr	r3, [pc, #192]	; (8010d94 <xTaskIncrementTick+0x154>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	68db      	ldr	r3, [r3, #12]
 8010cd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010ce0:	693a      	ldr	r2, [r7, #16]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d203      	bcs.n	8010cf0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010ce8:	4a2d      	ldr	r2, [pc, #180]	; (8010da0 <xTaskIncrementTick+0x160>)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6013      	str	r3, [r2, #0]
						break;
 8010cee:	e02e      	b.n	8010d4e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	3304      	adds	r3, #4
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7fe fe23 	bl	800f940 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d004      	beq.n	8010d0c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	3318      	adds	r3, #24
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fe fe1a 	bl	800f940 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d10:	2201      	movs	r2, #1
 8010d12:	409a      	lsls	r2, r3
 8010d14:	4b23      	ldr	r3, [pc, #140]	; (8010da4 <xTaskIncrementTick+0x164>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	4313      	orrs	r3, r2
 8010d1a:	4a22      	ldr	r2, [pc, #136]	; (8010da4 <xTaskIncrementTick+0x164>)
 8010d1c:	6013      	str	r3, [r2, #0]
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d22:	4613      	mov	r3, r2
 8010d24:	009b      	lsls	r3, r3, #2
 8010d26:	4413      	add	r3, r2
 8010d28:	009b      	lsls	r3, r3, #2
 8010d2a:	4a1f      	ldr	r2, [pc, #124]	; (8010da8 <xTaskIncrementTick+0x168>)
 8010d2c:	441a      	add	r2, r3
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	3304      	adds	r3, #4
 8010d32:	4619      	mov	r1, r3
 8010d34:	4610      	mov	r0, r2
 8010d36:	f7fe fda6 	bl	800f886 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d3e:	4b1b      	ldr	r3, [pc, #108]	; (8010dac <xTaskIncrementTick+0x16c>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d3b4      	bcc.n	8010cb2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010d48:	2301      	movs	r3, #1
 8010d4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d4c:	e7b1      	b.n	8010cb2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010d4e:	4b17      	ldr	r3, [pc, #92]	; (8010dac <xTaskIncrementTick+0x16c>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d54:	4914      	ldr	r1, [pc, #80]	; (8010da8 <xTaskIncrementTick+0x168>)
 8010d56:	4613      	mov	r3, r2
 8010d58:	009b      	lsls	r3, r3, #2
 8010d5a:	4413      	add	r3, r2
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	440b      	add	r3, r1
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	d907      	bls.n	8010d76 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8010d66:	2301      	movs	r3, #1
 8010d68:	617b      	str	r3, [r7, #20]
 8010d6a:	e004      	b.n	8010d76 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010d6c:	4b10      	ldr	r3, [pc, #64]	; (8010db0 <xTaskIncrementTick+0x170>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	3301      	adds	r3, #1
 8010d72:	4a0f      	ldr	r2, [pc, #60]	; (8010db0 <xTaskIncrementTick+0x170>)
 8010d74:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010d76:	4b0f      	ldr	r3, [pc, #60]	; (8010db4 <xTaskIncrementTick+0x174>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d001      	beq.n	8010d82 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8010d7e:	2301      	movs	r3, #1
 8010d80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010d82:	697b      	ldr	r3, [r7, #20]
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3718      	adds	r7, #24
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}
 8010d8c:	2000031c 	.word	0x2000031c
 8010d90:	200002f8 	.word	0x200002f8
 8010d94:	200002d8 	.word	0x200002d8
 8010d98:	200002dc 	.word	0x200002dc
 8010d9c:	2000030c 	.word	0x2000030c
 8010da0:	20000314 	.word	0x20000314
 8010da4:	200002fc 	.word	0x200002fc
 8010da8:	20000224 	.word	0x20000224
 8010dac:	20000220 	.word	0x20000220
 8010db0:	20000304 	.word	0x20000304
 8010db4:	20000308 	.word	0x20000308

08010db8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b088      	sub	sp, #32
 8010dbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010dbe:	4b39      	ldr	r3, [pc, #228]	; (8010ea4 <vTaskSwitchContext+0xec>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d003      	beq.n	8010dce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010dc6:	4b38      	ldr	r3, [pc, #224]	; (8010ea8 <vTaskSwitchContext+0xf0>)
 8010dc8:	2201      	movs	r2, #1
 8010dca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010dcc:	e065      	b.n	8010e9a <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8010dce:	4b36      	ldr	r3, [pc, #216]	; (8010ea8 <vTaskSwitchContext+0xf0>)
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010dd4:	4b35      	ldr	r3, [pc, #212]	; (8010eac <vTaskSwitchContext+0xf4>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dda:	61fb      	str	r3, [r7, #28]
 8010ddc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8010de0:	61bb      	str	r3, [r7, #24]
 8010de2:	69fb      	ldr	r3, [r7, #28]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	69ba      	ldr	r2, [r7, #24]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d111      	bne.n	8010e10 <vTaskSwitchContext+0x58>
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	3304      	adds	r3, #4
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	69ba      	ldr	r2, [r7, #24]
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d10b      	bne.n	8010e10 <vTaskSwitchContext+0x58>
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	3308      	adds	r3, #8
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	69ba      	ldr	r2, [r7, #24]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d105      	bne.n	8010e10 <vTaskSwitchContext+0x58>
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	330c      	adds	r3, #12
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	69ba      	ldr	r2, [r7, #24]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d008      	beq.n	8010e22 <vTaskSwitchContext+0x6a>
 8010e10:	4b26      	ldr	r3, [pc, #152]	; (8010eac <vTaskSwitchContext+0xf4>)
 8010e12:	681a      	ldr	r2, [r3, #0]
 8010e14:	4b25      	ldr	r3, [pc, #148]	; (8010eac <vTaskSwitchContext+0xf4>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	3334      	adds	r3, #52	; 0x34
 8010e1a:	4619      	mov	r1, r3
 8010e1c:	4610      	mov	r0, r2
 8010e1e:	f7ff fc6d 	bl	80106fc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010e22:	4b23      	ldr	r3, [pc, #140]	; (8010eb0 <vTaskSwitchContext+0xf8>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	fab3 f383 	clz	r3, r3
 8010e2e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010e30:	7afb      	ldrb	r3, [r7, #11]
 8010e32:	f1c3 031f 	rsb	r3, r3, #31
 8010e36:	617b      	str	r3, [r7, #20]
 8010e38:	491e      	ldr	r1, [pc, #120]	; (8010eb4 <vTaskSwitchContext+0xfc>)
 8010e3a:	697a      	ldr	r2, [r7, #20]
 8010e3c:	4613      	mov	r3, r2
 8010e3e:	009b      	lsls	r3, r3, #2
 8010e40:	4413      	add	r3, r2
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	440b      	add	r3, r1
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d109      	bne.n	8010e60 <vTaskSwitchContext+0xa8>
	__asm volatile
 8010e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e50:	f383 8811 	msr	BASEPRI, r3
 8010e54:	f3bf 8f6f 	isb	sy
 8010e58:	f3bf 8f4f 	dsb	sy
 8010e5c:	607b      	str	r3, [r7, #4]
 8010e5e:	e7fe      	b.n	8010e5e <vTaskSwitchContext+0xa6>
 8010e60:	697a      	ldr	r2, [r7, #20]
 8010e62:	4613      	mov	r3, r2
 8010e64:	009b      	lsls	r3, r3, #2
 8010e66:	4413      	add	r3, r2
 8010e68:	009b      	lsls	r3, r3, #2
 8010e6a:	4a12      	ldr	r2, [pc, #72]	; (8010eb4 <vTaskSwitchContext+0xfc>)
 8010e6c:	4413      	add	r3, r2
 8010e6e:	613b      	str	r3, [r7, #16]
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	685a      	ldr	r2, [r3, #4]
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	605a      	str	r2, [r3, #4]
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	685a      	ldr	r2, [r3, #4]
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	3308      	adds	r3, #8
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d104      	bne.n	8010e90 <vTaskSwitchContext+0xd8>
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	685a      	ldr	r2, [r3, #4]
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	605a      	str	r2, [r3, #4]
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	68db      	ldr	r3, [r3, #12]
 8010e96:	4a05      	ldr	r2, [pc, #20]	; (8010eac <vTaskSwitchContext+0xf4>)
 8010e98:	6013      	str	r3, [r2, #0]
}
 8010e9a:	bf00      	nop
 8010e9c:	3720      	adds	r7, #32
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}
 8010ea2:	bf00      	nop
 8010ea4:	2000031c 	.word	0x2000031c
 8010ea8:	20000308 	.word	0x20000308
 8010eac:	20000220 	.word	0x20000220
 8010eb0:	200002fc 	.word	0x200002fc
 8010eb4:	20000224 	.word	0x20000224

08010eb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b084      	sub	sp, #16
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d109      	bne.n	8010edc <vTaskPlaceOnEventList+0x24>
 8010ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ecc:	f383 8811 	msr	BASEPRI, r3
 8010ed0:	f3bf 8f6f 	isb	sy
 8010ed4:	f3bf 8f4f 	dsb	sy
 8010ed8:	60fb      	str	r3, [r7, #12]
 8010eda:	e7fe      	b.n	8010eda <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010edc:	4b07      	ldr	r3, [pc, #28]	; (8010efc <vTaskPlaceOnEventList+0x44>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	3318      	adds	r3, #24
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f7fe fcf2 	bl	800f8ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010eea:	2101      	movs	r1, #1
 8010eec:	6838      	ldr	r0, [r7, #0]
 8010eee:	f000 fb37 	bl	8011560 <prvAddCurrentTaskToDelayedList>
}
 8010ef2:	bf00      	nop
 8010ef4:	3710      	adds	r7, #16
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}
 8010efa:	bf00      	nop
 8010efc:	20000220 	.word	0x20000220

08010f00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b086      	sub	sp, #24
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d109      	bne.n	8010f2a <xTaskRemoveFromEventList+0x2a>
 8010f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f1a:	f383 8811 	msr	BASEPRI, r3
 8010f1e:	f3bf 8f6f 	isb	sy
 8010f22:	f3bf 8f4f 	dsb	sy
 8010f26:	60fb      	str	r3, [r7, #12]
 8010f28:	e7fe      	b.n	8010f28 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	3318      	adds	r3, #24
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7fe fd06 	bl	800f940 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f34:	4b1d      	ldr	r3, [pc, #116]	; (8010fac <xTaskRemoveFromEventList+0xac>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d11c      	bne.n	8010f76 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	3304      	adds	r3, #4
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fe fcfd 	bl	800f940 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010f46:	693b      	ldr	r3, [r7, #16]
 8010f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	409a      	lsls	r2, r3
 8010f4e:	4b18      	ldr	r3, [pc, #96]	; (8010fb0 <xTaskRemoveFromEventList+0xb0>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	4313      	orrs	r3, r2
 8010f54:	4a16      	ldr	r2, [pc, #88]	; (8010fb0 <xTaskRemoveFromEventList+0xb0>)
 8010f56:	6013      	str	r3, [r2, #0]
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f5c:	4613      	mov	r3, r2
 8010f5e:	009b      	lsls	r3, r3, #2
 8010f60:	4413      	add	r3, r2
 8010f62:	009b      	lsls	r3, r3, #2
 8010f64:	4a13      	ldr	r2, [pc, #76]	; (8010fb4 <xTaskRemoveFromEventList+0xb4>)
 8010f66:	441a      	add	r2, r3
 8010f68:	693b      	ldr	r3, [r7, #16]
 8010f6a:	3304      	adds	r3, #4
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	4610      	mov	r0, r2
 8010f70:	f7fe fc89 	bl	800f886 <vListInsertEnd>
 8010f74:	e005      	b.n	8010f82 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	3318      	adds	r3, #24
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	480e      	ldr	r0, [pc, #56]	; (8010fb8 <xTaskRemoveFromEventList+0xb8>)
 8010f7e:	f7fe fc82 	bl	800f886 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f86:	4b0d      	ldr	r3, [pc, #52]	; (8010fbc <xTaskRemoveFromEventList+0xbc>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d905      	bls.n	8010f9c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010f90:	2301      	movs	r3, #1
 8010f92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010f94:	4b0a      	ldr	r3, [pc, #40]	; (8010fc0 <xTaskRemoveFromEventList+0xc0>)
 8010f96:	2201      	movs	r2, #1
 8010f98:	601a      	str	r2, [r3, #0]
 8010f9a:	e001      	b.n	8010fa0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8010fa0:	697b      	ldr	r3, [r7, #20]
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3718      	adds	r7, #24
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
 8010faa:	bf00      	nop
 8010fac:	2000031c 	.word	0x2000031c
 8010fb0:	200002fc 	.word	0x200002fc
 8010fb4:	20000224 	.word	0x20000224
 8010fb8:	200002e0 	.word	0x200002e0
 8010fbc:	20000220 	.word	0x20000220
 8010fc0:	20000308 	.word	0x20000308

08010fc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b083      	sub	sp, #12
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010fcc:	4b06      	ldr	r3, [pc, #24]	; (8010fe8 <vTaskInternalSetTimeOutState+0x24>)
 8010fce:	681a      	ldr	r2, [r3, #0]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010fd4:	4b05      	ldr	r3, [pc, #20]	; (8010fec <vTaskInternalSetTimeOutState+0x28>)
 8010fd6:	681a      	ldr	r2, [r3, #0]
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	605a      	str	r2, [r3, #4]
}
 8010fdc:	bf00      	nop
 8010fde:	370c      	adds	r7, #12
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr
 8010fe8:	2000030c 	.word	0x2000030c
 8010fec:	200002f8 	.word	0x200002f8

08010ff0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b088      	sub	sp, #32
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d109      	bne.n	8011014 <xTaskCheckForTimeOut+0x24>
 8011000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011004:	f383 8811 	msr	BASEPRI, r3
 8011008:	f3bf 8f6f 	isb	sy
 801100c:	f3bf 8f4f 	dsb	sy
 8011010:	613b      	str	r3, [r7, #16]
 8011012:	e7fe      	b.n	8011012 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d109      	bne.n	801102e <xTaskCheckForTimeOut+0x3e>
 801101a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801101e:	f383 8811 	msr	BASEPRI, r3
 8011022:	f3bf 8f6f 	isb	sy
 8011026:	f3bf 8f4f 	dsb	sy
 801102a:	60fb      	str	r3, [r7, #12]
 801102c:	e7fe      	b.n	801102c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801102e:	f7fe fdb3 	bl	800fb98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011032:	4b18      	ldr	r3, [pc, #96]	; (8011094 <xTaskCheckForTimeOut+0xa4>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	69ba      	ldr	r2, [r7, #24]
 801103e:	1ad3      	subs	r3, r2, r3
 8011040:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681a      	ldr	r2, [r3, #0]
 8011046:	4b14      	ldr	r3, [pc, #80]	; (8011098 <xTaskCheckForTimeOut+0xa8>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	429a      	cmp	r2, r3
 801104c:	d007      	beq.n	801105e <xTaskCheckForTimeOut+0x6e>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	69ba      	ldr	r2, [r7, #24]
 8011054:	429a      	cmp	r2, r3
 8011056:	d302      	bcc.n	801105e <xTaskCheckForTimeOut+0x6e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011058:	2301      	movs	r3, #1
 801105a:	61fb      	str	r3, [r7, #28]
 801105c:	e012      	b.n	8011084 <xTaskCheckForTimeOut+0x94>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	697a      	ldr	r2, [r7, #20]
 8011064:	429a      	cmp	r2, r3
 8011066:	d20b      	bcs.n	8011080 <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	1ad2      	subs	r2, r2, r3
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f7ff ffa5 	bl	8010fc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801107a:	2300      	movs	r3, #0
 801107c:	61fb      	str	r3, [r7, #28]
 801107e:	e001      	b.n	8011084 <xTaskCheckForTimeOut+0x94>
		}
		else
		{
			xReturn = pdTRUE;
 8011080:	2301      	movs	r3, #1
 8011082:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011084:	f7fe fdb6 	bl	800fbf4 <vPortExitCritical>

	return xReturn;
 8011088:	69fb      	ldr	r3, [r7, #28]
}
 801108a:	4618      	mov	r0, r3
 801108c:	3720      	adds	r7, #32
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
 8011092:	bf00      	nop
 8011094:	200002f8 	.word	0x200002f8
 8011098:	2000030c 	.word	0x2000030c

0801109c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801109c:	b480      	push	{r7}
 801109e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80110a0:	4b03      	ldr	r3, [pc, #12]	; (80110b0 <vTaskMissedYield+0x14>)
 80110a2:	2201      	movs	r2, #1
 80110a4:	601a      	str	r2, [r3, #0]
}
 80110a6:	bf00      	nop
 80110a8:	46bd      	mov	sp, r7
 80110aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ae:	4770      	bx	lr
 80110b0:	20000308 	.word	0x20000308

080110b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b082      	sub	sp, #8
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80110bc:	f000 f848 	bl	8011150 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80110c0:	4b06      	ldr	r3, [pc, #24]	; (80110dc <prvIdleTask+0x28>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	2b01      	cmp	r3, #1
 80110c6:	d9f9      	bls.n	80110bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80110c8:	4b05      	ldr	r3, [pc, #20]	; (80110e0 <prvIdleTask+0x2c>)
 80110ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110ce:	601a      	str	r2, [r3, #0]
 80110d0:	f3bf 8f4f 	dsb	sy
 80110d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80110d8:	e7f0      	b.n	80110bc <prvIdleTask+0x8>
 80110da:	bf00      	nop
 80110dc:	20000224 	.word	0x20000224
 80110e0:	e000ed04 	.word	0xe000ed04

080110e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80110ea:	2300      	movs	r3, #0
 80110ec:	607b      	str	r3, [r7, #4]
 80110ee:	e00c      	b.n	801110a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80110f0:	687a      	ldr	r2, [r7, #4]
 80110f2:	4613      	mov	r3, r2
 80110f4:	009b      	lsls	r3, r3, #2
 80110f6:	4413      	add	r3, r2
 80110f8:	009b      	lsls	r3, r3, #2
 80110fa:	4a0f      	ldr	r2, [pc, #60]	; (8011138 <prvInitialiseTaskLists+0x54>)
 80110fc:	4413      	add	r3, r2
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fe fb94 	bl	800f82c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	3301      	adds	r3, #1
 8011108:	607b      	str	r3, [r7, #4]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2b06      	cmp	r3, #6
 801110e:	d9ef      	bls.n	80110f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011110:	480a      	ldr	r0, [pc, #40]	; (801113c <prvInitialiseTaskLists+0x58>)
 8011112:	f7fe fb8b 	bl	800f82c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011116:	480a      	ldr	r0, [pc, #40]	; (8011140 <prvInitialiseTaskLists+0x5c>)
 8011118:	f7fe fb88 	bl	800f82c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801111c:	4809      	ldr	r0, [pc, #36]	; (8011144 <prvInitialiseTaskLists+0x60>)
 801111e:	f7fe fb85 	bl	800f82c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011122:	4b09      	ldr	r3, [pc, #36]	; (8011148 <prvInitialiseTaskLists+0x64>)
 8011124:	4a05      	ldr	r2, [pc, #20]	; (801113c <prvInitialiseTaskLists+0x58>)
 8011126:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011128:	4b08      	ldr	r3, [pc, #32]	; (801114c <prvInitialiseTaskLists+0x68>)
 801112a:	4a05      	ldr	r2, [pc, #20]	; (8011140 <prvInitialiseTaskLists+0x5c>)
 801112c:	601a      	str	r2, [r3, #0]
}
 801112e:	bf00      	nop
 8011130:	3708      	adds	r7, #8
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	20000224 	.word	0x20000224
 801113c:	200002b0 	.word	0x200002b0
 8011140:	200002c4 	.word	0x200002c4
 8011144:	200002e0 	.word	0x200002e0
 8011148:	200002d8 	.word	0x200002d8
 801114c:	200002dc 	.word	0x200002dc

08011150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011150:	b480      	push	{r7}
 8011152:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011154:	bf00      	nop
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
	...

08011160 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011160:	b480      	push	{r7}
 8011162:	b083      	sub	sp, #12
 8011164:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011166:	4b0f      	ldr	r3, [pc, #60]	; (80111a4 <prvResetNextTaskUnblockTime+0x44>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d101      	bne.n	8011174 <prvResetNextTaskUnblockTime+0x14>
 8011170:	2301      	movs	r3, #1
 8011172:	e000      	b.n	8011176 <prvResetNextTaskUnblockTime+0x16>
 8011174:	2300      	movs	r3, #0
 8011176:	2b00      	cmp	r3, #0
 8011178:	d004      	beq.n	8011184 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801117a:	4b0b      	ldr	r3, [pc, #44]	; (80111a8 <prvResetNextTaskUnblockTime+0x48>)
 801117c:	f04f 32ff 	mov.w	r2, #4294967295
 8011180:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011182:	e008      	b.n	8011196 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011184:	4b07      	ldr	r3, [pc, #28]	; (80111a4 <prvResetNextTaskUnblockTime+0x44>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	4a05      	ldr	r2, [pc, #20]	; (80111a8 <prvResetNextTaskUnblockTime+0x48>)
 8011194:	6013      	str	r3, [r2, #0]
}
 8011196:	bf00      	nop
 8011198:	370c      	adds	r7, #12
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	200002d8 	.word	0x200002d8
 80111a8:	20000314 	.word	0x20000314

080111ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80111b2:	4b0b      	ldr	r3, [pc, #44]	; (80111e0 <xTaskGetSchedulerState+0x34>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d102      	bne.n	80111c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80111ba:	2301      	movs	r3, #1
 80111bc:	607b      	str	r3, [r7, #4]
 80111be:	e008      	b.n	80111d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80111c0:	4b08      	ldr	r3, [pc, #32]	; (80111e4 <xTaskGetSchedulerState+0x38>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d102      	bne.n	80111ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80111c8:	2302      	movs	r3, #2
 80111ca:	607b      	str	r3, [r7, #4]
 80111cc:	e001      	b.n	80111d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80111ce:	2300      	movs	r3, #0
 80111d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80111d2:	687b      	ldr	r3, [r7, #4]
	}
 80111d4:	4618      	mov	r0, r3
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr
 80111e0:	20000300 	.word	0x20000300
 80111e4:	2000031c 	.word	0x2000031c

080111e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80111f4:	2300      	movs	r3, #0
 80111f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d06e      	beq.n	80112dc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011202:	4b39      	ldr	r3, [pc, #228]	; (80112e8 <xTaskPriorityInherit+0x100>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011208:	429a      	cmp	r2, r3
 801120a:	d25e      	bcs.n	80112ca <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	699b      	ldr	r3, [r3, #24]
 8011210:	2b00      	cmp	r3, #0
 8011212:	db06      	blt.n	8011222 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011214:	4b34      	ldr	r3, [pc, #208]	; (80112e8 <xTaskPriorityInherit+0x100>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801121a:	f1c3 0207 	rsb	r2, r3, #7
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	6959      	ldr	r1, [r3, #20]
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801122a:	4613      	mov	r3, r2
 801122c:	009b      	lsls	r3, r3, #2
 801122e:	4413      	add	r3, r2
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	4a2e      	ldr	r2, [pc, #184]	; (80112ec <xTaskPriorityInherit+0x104>)
 8011234:	4413      	add	r3, r2
 8011236:	4299      	cmp	r1, r3
 8011238:	d101      	bne.n	801123e <xTaskPriorityInherit+0x56>
 801123a:	2301      	movs	r3, #1
 801123c:	e000      	b.n	8011240 <xTaskPriorityInherit+0x58>
 801123e:	2300      	movs	r3, #0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d03a      	beq.n	80112ba <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	3304      	adds	r3, #4
 8011248:	4618      	mov	r0, r3
 801124a:	f7fe fb79 	bl	800f940 <uxListRemove>
 801124e:	4603      	mov	r3, r0
 8011250:	2b00      	cmp	r3, #0
 8011252:	d115      	bne.n	8011280 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011258:	4924      	ldr	r1, [pc, #144]	; (80112ec <xTaskPriorityInherit+0x104>)
 801125a:	4613      	mov	r3, r2
 801125c:	009b      	lsls	r3, r3, #2
 801125e:	4413      	add	r3, r2
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	440b      	add	r3, r1
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d10a      	bne.n	8011280 <xTaskPriorityInherit+0x98>
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801126e:	2201      	movs	r2, #1
 8011270:	fa02 f303 	lsl.w	r3, r2, r3
 8011274:	43da      	mvns	r2, r3
 8011276:	4b1e      	ldr	r3, [pc, #120]	; (80112f0 <xTaskPriorityInherit+0x108>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	4013      	ands	r3, r2
 801127c:	4a1c      	ldr	r2, [pc, #112]	; (80112f0 <xTaskPriorityInherit+0x108>)
 801127e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011280:	4b19      	ldr	r3, [pc, #100]	; (80112e8 <xTaskPriorityInherit+0x100>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801128e:	2201      	movs	r2, #1
 8011290:	409a      	lsls	r2, r3
 8011292:	4b17      	ldr	r3, [pc, #92]	; (80112f0 <xTaskPriorityInherit+0x108>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	4313      	orrs	r3, r2
 8011298:	4a15      	ldr	r2, [pc, #84]	; (80112f0 <xTaskPriorityInherit+0x108>)
 801129a:	6013      	str	r3, [r2, #0]
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112a0:	4613      	mov	r3, r2
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	4413      	add	r3, r2
 80112a6:	009b      	lsls	r3, r3, #2
 80112a8:	4a10      	ldr	r2, [pc, #64]	; (80112ec <xTaskPriorityInherit+0x104>)
 80112aa:	441a      	add	r2, r3
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	3304      	adds	r3, #4
 80112b0:	4619      	mov	r1, r3
 80112b2:	4610      	mov	r0, r2
 80112b4:	f7fe fae7 	bl	800f886 <vListInsertEnd>
 80112b8:	e004      	b.n	80112c4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80112ba:	4b0b      	ldr	r3, [pc, #44]	; (80112e8 <xTaskPriorityInherit+0x100>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80112c4:	2301      	movs	r3, #1
 80112c6:	60fb      	str	r3, [r7, #12]
 80112c8:	e008      	b.n	80112dc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112ce:	4b06      	ldr	r3, [pc, #24]	; (80112e8 <xTaskPriorityInherit+0x100>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d201      	bcs.n	80112dc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80112d8:	2301      	movs	r3, #1
 80112da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80112dc:	68fb      	ldr	r3, [r7, #12]
	}
 80112de:	4618      	mov	r0, r3
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
 80112e6:	bf00      	nop
 80112e8:	20000220 	.word	0x20000220
 80112ec:	20000224 	.word	0x20000224
 80112f0:	200002fc 	.word	0x200002fc

080112f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b086      	sub	sp, #24
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011300:	2300      	movs	r3, #0
 8011302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d06c      	beq.n	80113e4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801130a:	4b39      	ldr	r3, [pc, #228]	; (80113f0 <xTaskPriorityDisinherit+0xfc>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	693a      	ldr	r2, [r7, #16]
 8011310:	429a      	cmp	r2, r3
 8011312:	d009      	beq.n	8011328 <xTaskPriorityDisinherit+0x34>
 8011314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011318:	f383 8811 	msr	BASEPRI, r3
 801131c:	f3bf 8f6f 	isb	sy
 8011320:	f3bf 8f4f 	dsb	sy
 8011324:	60fb      	str	r3, [r7, #12]
 8011326:	e7fe      	b.n	8011326 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801132c:	2b00      	cmp	r3, #0
 801132e:	d109      	bne.n	8011344 <xTaskPriorityDisinherit+0x50>
 8011330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011334:	f383 8811 	msr	BASEPRI, r3
 8011338:	f3bf 8f6f 	isb	sy
 801133c:	f3bf 8f4f 	dsb	sy
 8011340:	60bb      	str	r3, [r7, #8]
 8011342:	e7fe      	b.n	8011342 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011348:	1e5a      	subs	r2, r3, #1
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	63da      	str	r2, [r3, #60]	; 0x3c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011356:	429a      	cmp	r2, r3
 8011358:	d044      	beq.n	80113e4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801135e:	2b00      	cmp	r3, #0
 8011360:	d140      	bne.n	80113e4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	3304      	adds	r3, #4
 8011366:	4618      	mov	r0, r3
 8011368:	f7fe faea 	bl	800f940 <uxListRemove>
 801136c:	4603      	mov	r3, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	d115      	bne.n	801139e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011376:	491f      	ldr	r1, [pc, #124]	; (80113f4 <xTaskPriorityDisinherit+0x100>)
 8011378:	4613      	mov	r3, r2
 801137a:	009b      	lsls	r3, r3, #2
 801137c:	4413      	add	r3, r2
 801137e:	009b      	lsls	r3, r3, #2
 8011380:	440b      	add	r3, r1
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d10a      	bne.n	801139e <xTaskPriorityDisinherit+0xaa>
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801138c:	2201      	movs	r2, #1
 801138e:	fa02 f303 	lsl.w	r3, r2, r3
 8011392:	43da      	mvns	r2, r3
 8011394:	4b18      	ldr	r3, [pc, #96]	; (80113f8 <xTaskPriorityDisinherit+0x104>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	4013      	ands	r3, r2
 801139a:	4a17      	ldr	r2, [pc, #92]	; (80113f8 <xTaskPriorityDisinherit+0x104>)
 801139c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113a6:	693b      	ldr	r3, [r7, #16]
 80113a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113aa:	f1c3 0207 	rsb	r2, r3, #7
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b6:	2201      	movs	r2, #1
 80113b8:	409a      	lsls	r2, r3
 80113ba:	4b0f      	ldr	r3, [pc, #60]	; (80113f8 <xTaskPriorityDisinherit+0x104>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	4313      	orrs	r3, r2
 80113c0:	4a0d      	ldr	r2, [pc, #52]	; (80113f8 <xTaskPriorityDisinherit+0x104>)
 80113c2:	6013      	str	r3, [r2, #0]
 80113c4:	693b      	ldr	r3, [r7, #16]
 80113c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113c8:	4613      	mov	r3, r2
 80113ca:	009b      	lsls	r3, r3, #2
 80113cc:	4413      	add	r3, r2
 80113ce:	009b      	lsls	r3, r3, #2
 80113d0:	4a08      	ldr	r2, [pc, #32]	; (80113f4 <xTaskPriorityDisinherit+0x100>)
 80113d2:	441a      	add	r2, r3
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	3304      	adds	r3, #4
 80113d8:	4619      	mov	r1, r3
 80113da:	4610      	mov	r0, r2
 80113dc:	f7fe fa53 	bl	800f886 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80113e0:	2301      	movs	r3, #1
 80113e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80113e4:	697b      	ldr	r3, [r7, #20]
	}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3718      	adds	r7, #24
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
 80113ee:	bf00      	nop
 80113f0:	20000220 	.word	0x20000220
 80113f4:	20000224 	.word	0x20000224
 80113f8:	200002fc 	.word	0x200002fc

080113fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b088      	sub	sp, #32
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801140a:	2301      	movs	r3, #1
 801140c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 8086 	beq.w	8011522 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011416:	69bb      	ldr	r3, [r7, #24]
 8011418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801141a:	2b00      	cmp	r3, #0
 801141c:	d109      	bne.n	8011432 <vTaskPriorityDisinheritAfterTimeout+0x36>
 801141e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011422:	f383 8811 	msr	BASEPRI, r3
 8011426:	f3bf 8f6f 	isb	sy
 801142a:	f3bf 8f4f 	dsb	sy
 801142e:	60fb      	str	r3, [r7, #12]
 8011430:	e7fe      	b.n	8011430 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011436:	683a      	ldr	r2, [r7, #0]
 8011438:	429a      	cmp	r2, r3
 801143a:	d902      	bls.n	8011442 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	61fb      	str	r3, [r7, #28]
 8011440:	e002      	b.n	8011448 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011442:	69bb      	ldr	r3, [r7, #24]
 8011444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011446:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011448:	69bb      	ldr	r3, [r7, #24]
 801144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801144c:	69fa      	ldr	r2, [r7, #28]
 801144e:	429a      	cmp	r2, r3
 8011450:	d067      	beq.n	8011522 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011452:	69bb      	ldr	r3, [r7, #24]
 8011454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011456:	697a      	ldr	r2, [r7, #20]
 8011458:	429a      	cmp	r2, r3
 801145a:	d162      	bne.n	8011522 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801145c:	4b33      	ldr	r3, [pc, #204]	; (801152c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	69ba      	ldr	r2, [r7, #24]
 8011462:	429a      	cmp	r2, r3
 8011464:	d109      	bne.n	801147a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8011466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801146a:	f383 8811 	msr	BASEPRI, r3
 801146e:	f3bf 8f6f 	isb	sy
 8011472:	f3bf 8f4f 	dsb	sy
 8011476:	60bb      	str	r3, [r7, #8]
 8011478:	e7fe      	b.n	8011478 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801147a:	69bb      	ldr	r3, [r7, #24]
 801147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801147e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011480:	69bb      	ldr	r3, [r7, #24]
 8011482:	69fa      	ldr	r2, [r7, #28]
 8011484:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011486:	69bb      	ldr	r3, [r7, #24]
 8011488:	699b      	ldr	r3, [r3, #24]
 801148a:	2b00      	cmp	r3, #0
 801148c:	db04      	blt.n	8011498 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801148e:	69fb      	ldr	r3, [r7, #28]
 8011490:	f1c3 0207 	rsb	r2, r3, #7
 8011494:	69bb      	ldr	r3, [r7, #24]
 8011496:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011498:	69bb      	ldr	r3, [r7, #24]
 801149a:	6959      	ldr	r1, [r3, #20]
 801149c:	693a      	ldr	r2, [r7, #16]
 801149e:	4613      	mov	r3, r2
 80114a0:	009b      	lsls	r3, r3, #2
 80114a2:	4413      	add	r3, r2
 80114a4:	009b      	lsls	r3, r3, #2
 80114a6:	4a22      	ldr	r2, [pc, #136]	; (8011530 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80114a8:	4413      	add	r3, r2
 80114aa:	4299      	cmp	r1, r3
 80114ac:	d101      	bne.n	80114b2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80114ae:	2301      	movs	r3, #1
 80114b0:	e000      	b.n	80114b4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80114b2:	2300      	movs	r3, #0
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d034      	beq.n	8011522 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114b8:	69bb      	ldr	r3, [r7, #24]
 80114ba:	3304      	adds	r3, #4
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fe fa3f 	bl	800f940 <uxListRemove>
 80114c2:	4603      	mov	r3, r0
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d115      	bne.n	80114f4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80114c8:	69bb      	ldr	r3, [r7, #24]
 80114ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114cc:	4918      	ldr	r1, [pc, #96]	; (8011530 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80114ce:	4613      	mov	r3, r2
 80114d0:	009b      	lsls	r3, r3, #2
 80114d2:	4413      	add	r3, r2
 80114d4:	009b      	lsls	r3, r3, #2
 80114d6:	440b      	add	r3, r1
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d10a      	bne.n	80114f4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80114de:	69bb      	ldr	r3, [r7, #24]
 80114e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114e2:	2201      	movs	r2, #1
 80114e4:	fa02 f303 	lsl.w	r3, r2, r3
 80114e8:	43da      	mvns	r2, r3
 80114ea:	4b12      	ldr	r3, [pc, #72]	; (8011534 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	4013      	ands	r3, r2
 80114f0:	4a10      	ldr	r2, [pc, #64]	; (8011534 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80114f2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f8:	2201      	movs	r2, #1
 80114fa:	409a      	lsls	r2, r3
 80114fc:	4b0d      	ldr	r3, [pc, #52]	; (8011534 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4313      	orrs	r3, r2
 8011502:	4a0c      	ldr	r2, [pc, #48]	; (8011534 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011504:	6013      	str	r3, [r2, #0]
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801150a:	4613      	mov	r3, r2
 801150c:	009b      	lsls	r3, r3, #2
 801150e:	4413      	add	r3, r2
 8011510:	009b      	lsls	r3, r3, #2
 8011512:	4a07      	ldr	r2, [pc, #28]	; (8011530 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011514:	441a      	add	r2, r3
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	3304      	adds	r3, #4
 801151a:	4619      	mov	r1, r3
 801151c:	4610      	mov	r0, r2
 801151e:	f7fe f9b2 	bl	800f886 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011522:	bf00      	nop
 8011524:	3720      	adds	r7, #32
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop
 801152c:	20000220 	.word	0x20000220
 8011530:	20000224 	.word	0x20000224
 8011534:	200002fc 	.word	0x200002fc

08011538 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011538:	b480      	push	{r7}
 801153a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801153c:	4b07      	ldr	r3, [pc, #28]	; (801155c <pvTaskIncrementMutexHeldCount+0x24>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d004      	beq.n	801154e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011544:	4b05      	ldr	r3, [pc, #20]	; (801155c <pvTaskIncrementMutexHeldCount+0x24>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801154a:	3201      	adds	r2, #1
 801154c:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		return pxCurrentTCB;
 801154e:	4b03      	ldr	r3, [pc, #12]	; (801155c <pvTaskIncrementMutexHeldCount+0x24>)
 8011550:	681b      	ldr	r3, [r3, #0]
	}
 8011552:	4618      	mov	r0, r3
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr
 801155c:	20000220 	.word	0x20000220

08011560 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b084      	sub	sp, #16
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801156a:	4b21      	ldr	r3, [pc, #132]	; (80115f0 <prvAddCurrentTaskToDelayedList+0x90>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011570:	4b20      	ldr	r3, [pc, #128]	; (80115f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	3304      	adds	r3, #4
 8011576:	4618      	mov	r0, r3
 8011578:	f7fe f9e2 	bl	800f940 <uxListRemove>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	d10b      	bne.n	801159a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8011582:	4b1c      	ldr	r3, [pc, #112]	; (80115f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011588:	2201      	movs	r2, #1
 801158a:	fa02 f303 	lsl.w	r3, r2, r3
 801158e:	43da      	mvns	r2, r3
 8011590:	4b19      	ldr	r3, [pc, #100]	; (80115f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	4013      	ands	r3, r2
 8011596:	4a18      	ldr	r2, [pc, #96]	; (80115f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8011598:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 801159a:	68fa      	ldr	r2, [r7, #12]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	4413      	add	r3, r2
 80115a0:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80115a2:	4b14      	ldr	r3, [pc, #80]	; (80115f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	68ba      	ldr	r2, [r7, #8]
 80115a8:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 80115aa:	68ba      	ldr	r2, [r7, #8]
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d209      	bcs.n	80115c6 <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115b2:	4b12      	ldr	r3, [pc, #72]	; (80115fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	4b0f      	ldr	r3, [pc, #60]	; (80115f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	3304      	adds	r3, #4
 80115bc:	4619      	mov	r1, r3
 80115be:	4610      	mov	r0, r2
 80115c0:	f7fe f985 	bl	800f8ce <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80115c4:	e010      	b.n	80115e8 <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115c6:	4b0e      	ldr	r3, [pc, #56]	; (8011600 <prvAddCurrentTaskToDelayedList+0xa0>)
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	4b0a      	ldr	r3, [pc, #40]	; (80115f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	3304      	adds	r3, #4
 80115d0:	4619      	mov	r1, r3
 80115d2:	4610      	mov	r0, r2
 80115d4:	f7fe f97b 	bl	800f8ce <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 80115d8:	4b0a      	ldr	r3, [pc, #40]	; (8011604 <prvAddCurrentTaskToDelayedList+0xa4>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	68ba      	ldr	r2, [r7, #8]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d202      	bcs.n	80115e8 <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 80115e2:	4a08      	ldr	r2, [pc, #32]	; (8011604 <prvAddCurrentTaskToDelayedList+0xa4>)
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	6013      	str	r3, [r2, #0]
}
 80115e8:	bf00      	nop
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}
 80115f0:	200002f8 	.word	0x200002f8
 80115f4:	20000220 	.word	0x20000220
 80115f8:	200002fc 	.word	0x200002fc
 80115fc:	200002dc 	.word	0x200002dc
 8011600:	200002d8 	.word	0x200002d8
 8011604:	20000314 	.word	0x20000314

08011608 <__errno>:
 8011608:	4b01      	ldr	r3, [pc, #4]	; (8011610 <__errno+0x8>)
 801160a:	6818      	ldr	r0, [r3, #0]
 801160c:	4770      	bx	lr
 801160e:	bf00      	nop
 8011610:	20000024 	.word	0x20000024

08011614 <__libc_init_array>:
 8011614:	b570      	push	{r4, r5, r6, lr}
 8011616:	4e0d      	ldr	r6, [pc, #52]	; (801164c <__libc_init_array+0x38>)
 8011618:	4c0d      	ldr	r4, [pc, #52]	; (8011650 <__libc_init_array+0x3c>)
 801161a:	1ba4      	subs	r4, r4, r6
 801161c:	10a4      	asrs	r4, r4, #2
 801161e:	2500      	movs	r5, #0
 8011620:	42a5      	cmp	r5, r4
 8011622:	d109      	bne.n	8011638 <__libc_init_array+0x24>
 8011624:	4e0b      	ldr	r6, [pc, #44]	; (8011654 <__libc_init_array+0x40>)
 8011626:	4c0c      	ldr	r4, [pc, #48]	; (8011658 <__libc_init_array+0x44>)
 8011628:	f001 ffa4 	bl	8013574 <_init>
 801162c:	1ba4      	subs	r4, r4, r6
 801162e:	10a4      	asrs	r4, r4, #2
 8011630:	2500      	movs	r5, #0
 8011632:	42a5      	cmp	r5, r4
 8011634:	d105      	bne.n	8011642 <__libc_init_array+0x2e>
 8011636:	bd70      	pop	{r4, r5, r6, pc}
 8011638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801163c:	4798      	blx	r3
 801163e:	3501      	adds	r5, #1
 8011640:	e7ee      	b.n	8011620 <__libc_init_array+0xc>
 8011642:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011646:	4798      	blx	r3
 8011648:	3501      	adds	r5, #1
 801164a:	e7f2      	b.n	8011632 <__libc_init_array+0x1e>
 801164c:	08014130 	.word	0x08014130
 8011650:	08014130 	.word	0x08014130
 8011654:	08014130 	.word	0x08014130
 8011658:	08014134 	.word	0x08014134

0801165c <__locale_ctype_ptr_l>:
 801165c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011660:	4770      	bx	lr
	...

08011664 <__locale_ctype_ptr>:
 8011664:	4b04      	ldr	r3, [pc, #16]	; (8011678 <__locale_ctype_ptr+0x14>)
 8011666:	4a05      	ldr	r2, [pc, #20]	; (801167c <__locale_ctype_ptr+0x18>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	6a1b      	ldr	r3, [r3, #32]
 801166c:	2b00      	cmp	r3, #0
 801166e:	bf08      	it	eq
 8011670:	4613      	moveq	r3, r2
 8011672:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8011676:	4770      	bx	lr
 8011678:	20000024 	.word	0x20000024
 801167c:	20000088 	.word	0x20000088

08011680 <__ascii_mbtowc>:
 8011680:	b082      	sub	sp, #8
 8011682:	b901      	cbnz	r1, 8011686 <__ascii_mbtowc+0x6>
 8011684:	a901      	add	r1, sp, #4
 8011686:	b142      	cbz	r2, 801169a <__ascii_mbtowc+0x1a>
 8011688:	b14b      	cbz	r3, 801169e <__ascii_mbtowc+0x1e>
 801168a:	7813      	ldrb	r3, [r2, #0]
 801168c:	600b      	str	r3, [r1, #0]
 801168e:	7812      	ldrb	r2, [r2, #0]
 8011690:	1c10      	adds	r0, r2, #0
 8011692:	bf18      	it	ne
 8011694:	2001      	movne	r0, #1
 8011696:	b002      	add	sp, #8
 8011698:	4770      	bx	lr
 801169a:	4610      	mov	r0, r2
 801169c:	e7fb      	b.n	8011696 <__ascii_mbtowc+0x16>
 801169e:	f06f 0001 	mvn.w	r0, #1
 80116a2:	e7f8      	b.n	8011696 <__ascii_mbtowc+0x16>

080116a4 <memcpy>:
 80116a4:	b510      	push	{r4, lr}
 80116a6:	1e43      	subs	r3, r0, #1
 80116a8:	440a      	add	r2, r1
 80116aa:	4291      	cmp	r1, r2
 80116ac:	d100      	bne.n	80116b0 <memcpy+0xc>
 80116ae:	bd10      	pop	{r4, pc}
 80116b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80116b8:	e7f7      	b.n	80116aa <memcpy+0x6>

080116ba <memmove>:
 80116ba:	4288      	cmp	r0, r1
 80116bc:	b510      	push	{r4, lr}
 80116be:	eb01 0302 	add.w	r3, r1, r2
 80116c2:	d807      	bhi.n	80116d4 <memmove+0x1a>
 80116c4:	1e42      	subs	r2, r0, #1
 80116c6:	4299      	cmp	r1, r3
 80116c8:	d00a      	beq.n	80116e0 <memmove+0x26>
 80116ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80116d2:	e7f8      	b.n	80116c6 <memmove+0xc>
 80116d4:	4283      	cmp	r3, r0
 80116d6:	d9f5      	bls.n	80116c4 <memmove+0xa>
 80116d8:	1881      	adds	r1, r0, r2
 80116da:	1ad2      	subs	r2, r2, r3
 80116dc:	42d3      	cmn	r3, r2
 80116de:	d100      	bne.n	80116e2 <memmove+0x28>
 80116e0:	bd10      	pop	{r4, pc}
 80116e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80116ea:	e7f7      	b.n	80116dc <memmove+0x22>

080116ec <memset>:
 80116ec:	4402      	add	r2, r0
 80116ee:	4603      	mov	r3, r0
 80116f0:	4293      	cmp	r3, r2
 80116f2:	d100      	bne.n	80116f6 <memset+0xa>
 80116f4:	4770      	bx	lr
 80116f6:	f803 1b01 	strb.w	r1, [r3], #1
 80116fa:	e7f9      	b.n	80116f0 <memset+0x4>

080116fc <siprintf>:
 80116fc:	b40e      	push	{r1, r2, r3}
 80116fe:	b500      	push	{lr}
 8011700:	b09c      	sub	sp, #112	; 0x70
 8011702:	ab1d      	add	r3, sp, #116	; 0x74
 8011704:	9002      	str	r0, [sp, #8]
 8011706:	9006      	str	r0, [sp, #24]
 8011708:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801170c:	4809      	ldr	r0, [pc, #36]	; (8011734 <siprintf+0x38>)
 801170e:	9107      	str	r1, [sp, #28]
 8011710:	9104      	str	r1, [sp, #16]
 8011712:	4909      	ldr	r1, [pc, #36]	; (8011738 <siprintf+0x3c>)
 8011714:	f853 2b04 	ldr.w	r2, [r3], #4
 8011718:	9105      	str	r1, [sp, #20]
 801171a:	6800      	ldr	r0, [r0, #0]
 801171c:	9301      	str	r3, [sp, #4]
 801171e:	a902      	add	r1, sp, #8
 8011720:	f000 fbc4 	bl	8011eac <_svfiprintf_r>
 8011724:	9b02      	ldr	r3, [sp, #8]
 8011726:	2200      	movs	r2, #0
 8011728:	701a      	strb	r2, [r3, #0]
 801172a:	b01c      	add	sp, #112	; 0x70
 801172c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011730:	b003      	add	sp, #12
 8011732:	4770      	bx	lr
 8011734:	20000024 	.word	0x20000024
 8011738:	ffff0208 	.word	0xffff0208

0801173c <strchr>:
 801173c:	b2c9      	uxtb	r1, r1
 801173e:	4603      	mov	r3, r0
 8011740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011744:	b11a      	cbz	r2, 801174e <strchr+0x12>
 8011746:	428a      	cmp	r2, r1
 8011748:	d1f9      	bne.n	801173e <strchr+0x2>
 801174a:	4618      	mov	r0, r3
 801174c:	4770      	bx	lr
 801174e:	2900      	cmp	r1, #0
 8011750:	bf18      	it	ne
 8011752:	2300      	movne	r3, #0
 8011754:	e7f9      	b.n	801174a <strchr+0xe>

08011756 <strncasecmp>:
 8011756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801175a:	4606      	mov	r6, r0
 801175c:	460f      	mov	r7, r1
 801175e:	eb00 0802 	add.w	r8, r0, r2
 8011762:	45b0      	cmp	r8, r6
 8011764:	d019      	beq.n	801179a <strncasecmp+0x44>
 8011766:	f816 4b01 	ldrb.w	r4, [r6], #1
 801176a:	f7ff ff7b 	bl	8011664 <__locale_ctype_ptr>
 801176e:	4420      	add	r0, r4
 8011770:	f817 5b01 	ldrb.w	r5, [r7], #1
 8011774:	7843      	ldrb	r3, [r0, #1]
 8011776:	f003 0303 	and.w	r3, r3, #3
 801177a:	2b01      	cmp	r3, #1
 801177c:	bf08      	it	eq
 801177e:	3420      	addeq	r4, #32
 8011780:	f7ff ff70 	bl	8011664 <__locale_ctype_ptr>
 8011784:	4428      	add	r0, r5
 8011786:	7842      	ldrb	r2, [r0, #1]
 8011788:	f002 0203 	and.w	r2, r2, #3
 801178c:	2a01      	cmp	r2, #1
 801178e:	bf08      	it	eq
 8011790:	3520      	addeq	r5, #32
 8011792:	1b60      	subs	r0, r4, r5
 8011794:	d102      	bne.n	801179c <strncasecmp+0x46>
 8011796:	2d00      	cmp	r5, #0
 8011798:	d1e3      	bne.n	8011762 <strncasecmp+0xc>
 801179a:	2000      	movs	r0, #0
 801179c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080117a0 <strnlen>:
 80117a0:	b510      	push	{r4, lr}
 80117a2:	4603      	mov	r3, r0
 80117a4:	4401      	add	r1, r0
 80117a6:	428b      	cmp	r3, r1
 80117a8:	d002      	beq.n	80117b0 <strnlen+0x10>
 80117aa:	781a      	ldrb	r2, [r3, #0]
 80117ac:	1c5c      	adds	r4, r3, #1
 80117ae:	b90a      	cbnz	r2, 80117b4 <strnlen+0x14>
 80117b0:	1a18      	subs	r0, r3, r0
 80117b2:	bd10      	pop	{r4, pc}
 80117b4:	4623      	mov	r3, r4
 80117b6:	e7f6      	b.n	80117a6 <strnlen+0x6>

080117b8 <_strtol_l.isra.0>:
 80117b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117bc:	4680      	mov	r8, r0
 80117be:	4689      	mov	r9, r1
 80117c0:	4692      	mov	sl, r2
 80117c2:	461e      	mov	r6, r3
 80117c4:	460f      	mov	r7, r1
 80117c6:	463d      	mov	r5, r7
 80117c8:	9808      	ldr	r0, [sp, #32]
 80117ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117ce:	f7ff ff45 	bl	801165c <__locale_ctype_ptr_l>
 80117d2:	4420      	add	r0, r4
 80117d4:	7843      	ldrb	r3, [r0, #1]
 80117d6:	f013 0308 	ands.w	r3, r3, #8
 80117da:	d132      	bne.n	8011842 <_strtol_l.isra.0+0x8a>
 80117dc:	2c2d      	cmp	r4, #45	; 0x2d
 80117de:	d132      	bne.n	8011846 <_strtol_l.isra.0+0x8e>
 80117e0:	787c      	ldrb	r4, [r7, #1]
 80117e2:	1cbd      	adds	r5, r7, #2
 80117e4:	2201      	movs	r2, #1
 80117e6:	2e00      	cmp	r6, #0
 80117e8:	d05d      	beq.n	80118a6 <_strtol_l.isra.0+0xee>
 80117ea:	2e10      	cmp	r6, #16
 80117ec:	d109      	bne.n	8011802 <_strtol_l.isra.0+0x4a>
 80117ee:	2c30      	cmp	r4, #48	; 0x30
 80117f0:	d107      	bne.n	8011802 <_strtol_l.isra.0+0x4a>
 80117f2:	782b      	ldrb	r3, [r5, #0]
 80117f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80117f8:	2b58      	cmp	r3, #88	; 0x58
 80117fa:	d14f      	bne.n	801189c <_strtol_l.isra.0+0xe4>
 80117fc:	786c      	ldrb	r4, [r5, #1]
 80117fe:	2610      	movs	r6, #16
 8011800:	3502      	adds	r5, #2
 8011802:	2a00      	cmp	r2, #0
 8011804:	bf14      	ite	ne
 8011806:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801180a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801180e:	2700      	movs	r7, #0
 8011810:	fbb1 fcf6 	udiv	ip, r1, r6
 8011814:	4638      	mov	r0, r7
 8011816:	fb06 1e1c 	mls	lr, r6, ip, r1
 801181a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801181e:	2b09      	cmp	r3, #9
 8011820:	d817      	bhi.n	8011852 <_strtol_l.isra.0+0x9a>
 8011822:	461c      	mov	r4, r3
 8011824:	42a6      	cmp	r6, r4
 8011826:	dd23      	ble.n	8011870 <_strtol_l.isra.0+0xb8>
 8011828:	1c7b      	adds	r3, r7, #1
 801182a:	d007      	beq.n	801183c <_strtol_l.isra.0+0x84>
 801182c:	4584      	cmp	ip, r0
 801182e:	d31c      	bcc.n	801186a <_strtol_l.isra.0+0xb2>
 8011830:	d101      	bne.n	8011836 <_strtol_l.isra.0+0x7e>
 8011832:	45a6      	cmp	lr, r4
 8011834:	db19      	blt.n	801186a <_strtol_l.isra.0+0xb2>
 8011836:	fb00 4006 	mla	r0, r0, r6, r4
 801183a:	2701      	movs	r7, #1
 801183c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011840:	e7eb      	b.n	801181a <_strtol_l.isra.0+0x62>
 8011842:	462f      	mov	r7, r5
 8011844:	e7bf      	b.n	80117c6 <_strtol_l.isra.0+0xe>
 8011846:	2c2b      	cmp	r4, #43	; 0x2b
 8011848:	bf04      	itt	eq
 801184a:	1cbd      	addeq	r5, r7, #2
 801184c:	787c      	ldrbeq	r4, [r7, #1]
 801184e:	461a      	mov	r2, r3
 8011850:	e7c9      	b.n	80117e6 <_strtol_l.isra.0+0x2e>
 8011852:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011856:	2b19      	cmp	r3, #25
 8011858:	d801      	bhi.n	801185e <_strtol_l.isra.0+0xa6>
 801185a:	3c37      	subs	r4, #55	; 0x37
 801185c:	e7e2      	b.n	8011824 <_strtol_l.isra.0+0x6c>
 801185e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011862:	2b19      	cmp	r3, #25
 8011864:	d804      	bhi.n	8011870 <_strtol_l.isra.0+0xb8>
 8011866:	3c57      	subs	r4, #87	; 0x57
 8011868:	e7dc      	b.n	8011824 <_strtol_l.isra.0+0x6c>
 801186a:	f04f 37ff 	mov.w	r7, #4294967295
 801186e:	e7e5      	b.n	801183c <_strtol_l.isra.0+0x84>
 8011870:	1c7b      	adds	r3, r7, #1
 8011872:	d108      	bne.n	8011886 <_strtol_l.isra.0+0xce>
 8011874:	2322      	movs	r3, #34	; 0x22
 8011876:	f8c8 3000 	str.w	r3, [r8]
 801187a:	4608      	mov	r0, r1
 801187c:	f1ba 0f00 	cmp.w	sl, #0
 8011880:	d107      	bne.n	8011892 <_strtol_l.isra.0+0xda>
 8011882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011886:	b102      	cbz	r2, 801188a <_strtol_l.isra.0+0xd2>
 8011888:	4240      	negs	r0, r0
 801188a:	f1ba 0f00 	cmp.w	sl, #0
 801188e:	d0f8      	beq.n	8011882 <_strtol_l.isra.0+0xca>
 8011890:	b10f      	cbz	r7, 8011896 <_strtol_l.isra.0+0xde>
 8011892:	f105 39ff 	add.w	r9, r5, #4294967295
 8011896:	f8ca 9000 	str.w	r9, [sl]
 801189a:	e7f2      	b.n	8011882 <_strtol_l.isra.0+0xca>
 801189c:	2430      	movs	r4, #48	; 0x30
 801189e:	2e00      	cmp	r6, #0
 80118a0:	d1af      	bne.n	8011802 <_strtol_l.isra.0+0x4a>
 80118a2:	2608      	movs	r6, #8
 80118a4:	e7ad      	b.n	8011802 <_strtol_l.isra.0+0x4a>
 80118a6:	2c30      	cmp	r4, #48	; 0x30
 80118a8:	d0a3      	beq.n	80117f2 <_strtol_l.isra.0+0x3a>
 80118aa:	260a      	movs	r6, #10
 80118ac:	e7a9      	b.n	8011802 <_strtol_l.isra.0+0x4a>
	...

080118b0 <strtol>:
 80118b0:	4b08      	ldr	r3, [pc, #32]	; (80118d4 <strtol+0x24>)
 80118b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118b4:	681c      	ldr	r4, [r3, #0]
 80118b6:	4d08      	ldr	r5, [pc, #32]	; (80118d8 <strtol+0x28>)
 80118b8:	6a23      	ldr	r3, [r4, #32]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	bf08      	it	eq
 80118be:	462b      	moveq	r3, r5
 80118c0:	9300      	str	r3, [sp, #0]
 80118c2:	4613      	mov	r3, r2
 80118c4:	460a      	mov	r2, r1
 80118c6:	4601      	mov	r1, r0
 80118c8:	4620      	mov	r0, r4
 80118ca:	f7ff ff75 	bl	80117b8 <_strtol_l.isra.0>
 80118ce:	b003      	add	sp, #12
 80118d0:	bd30      	pop	{r4, r5, pc}
 80118d2:	bf00      	nop
 80118d4:	20000024 	.word	0x20000024
 80118d8:	20000088 	.word	0x20000088

080118dc <_strtoll_l.isra.0>:
 80118dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118e0:	b089      	sub	sp, #36	; 0x24
 80118e2:	468a      	mov	sl, r1
 80118e4:	9007      	str	r0, [sp, #28]
 80118e6:	4693      	mov	fp, r2
 80118e8:	461f      	mov	r7, r3
 80118ea:	4688      	mov	r8, r1
 80118ec:	4645      	mov	r5, r8
 80118ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 80118f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118f4:	f7ff feb2 	bl	801165c <__locale_ctype_ptr_l>
 80118f8:	4420      	add	r0, r4
 80118fa:	7846      	ldrb	r6, [r0, #1]
 80118fc:	f016 0608 	ands.w	r6, r6, #8
 8011900:	d155      	bne.n	80119ae <_strtoll_l.isra.0+0xd2>
 8011902:	2c2d      	cmp	r4, #45	; 0x2d
 8011904:	d155      	bne.n	80119b2 <_strtoll_l.isra.0+0xd6>
 8011906:	f898 4001 	ldrb.w	r4, [r8, #1]
 801190a:	f108 0502 	add.w	r5, r8, #2
 801190e:	2601      	movs	r6, #1
 8011910:	2f00      	cmp	r7, #0
 8011912:	f000 8091 	beq.w	8011a38 <_strtoll_l.isra.0+0x15c>
 8011916:	2f10      	cmp	r7, #16
 8011918:	d10a      	bne.n	8011930 <_strtoll_l.isra.0+0x54>
 801191a:	2c30      	cmp	r4, #48	; 0x30
 801191c:	d108      	bne.n	8011930 <_strtoll_l.isra.0+0x54>
 801191e:	782b      	ldrb	r3, [r5, #0]
 8011920:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011924:	2b58      	cmp	r3, #88	; 0x58
 8011926:	f040 8081 	bne.w	8011a2c <_strtoll_l.isra.0+0x150>
 801192a:	786c      	ldrb	r4, [r5, #1]
 801192c:	2710      	movs	r7, #16
 801192e:	3502      	adds	r5, #2
 8011930:	2e00      	cmp	r6, #0
 8011932:	d145      	bne.n	80119c0 <_strtoll_l.isra.0+0xe4>
 8011934:	f04f 39ff 	mov.w	r9, #4294967295
 8011938:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 801193c:	463a      	mov	r2, r7
 801193e:	17fb      	asrs	r3, r7, #31
 8011940:	4648      	mov	r0, r9
 8011942:	4641      	mov	r1, r8
 8011944:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011948:	f7ef f996 	bl	8000c78 <__aeabi_uldivmod>
 801194c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011950:	4696      	mov	lr, r2
 8011952:	2100      	movs	r1, #0
 8011954:	2200      	movs	r2, #0
 8011956:	e9cd 1200 	strd	r1, r2, [sp]
 801195a:	2300      	movs	r3, #0
 801195c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011960:	f1bc 0f09 	cmp.w	ip, #9
 8011964:	d831      	bhi.n	80119ca <_strtoll_l.isra.0+0xee>
 8011966:	4664      	mov	r4, ip
 8011968:	42a7      	cmp	r7, r4
 801196a:	dd3f      	ble.n	80119ec <_strtoll_l.isra.0+0x110>
 801196c:	1c59      	adds	r1, r3, #1
 801196e:	d01b      	beq.n	80119a8 <_strtoll_l.isra.0+0xcc>
 8011970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011974:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011978:	4299      	cmp	r1, r3
 801197a:	bf08      	it	eq
 801197c:	4290      	cmpeq	r0, r2
 801197e:	d332      	bcc.n	80119e6 <_strtoll_l.isra.0+0x10a>
 8011980:	d101      	bne.n	8011986 <_strtoll_l.isra.0+0xaa>
 8011982:	45a6      	cmp	lr, r4
 8011984:	db2f      	blt.n	80119e6 <_strtoll_l.isra.0+0x10a>
 8011986:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 801198a:	9800      	ldr	r0, [sp, #0]
 801198c:	434b      	muls	r3, r1
 801198e:	9903      	ldr	r1, [sp, #12]
 8011990:	fb00 3301 	mla	r3, r0, r1, r3
 8011994:	9902      	ldr	r1, [sp, #8]
 8011996:	fba1 0100 	umull	r0, r1, r1, r0
 801199a:	1902      	adds	r2, r0, r4
 801199c:	4419      	add	r1, r3
 801199e:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
 80119a2:	e9cd 2300 	strd	r2, r3, [sp]
 80119a6:	2301      	movs	r3, #1
 80119a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80119ac:	e7d6      	b.n	801195c <_strtoll_l.isra.0+0x80>
 80119ae:	46a8      	mov	r8, r5
 80119b0:	e79c      	b.n	80118ec <_strtoll_l.isra.0+0x10>
 80119b2:	2c2b      	cmp	r4, #43	; 0x2b
 80119b4:	bf04      	itt	eq
 80119b6:	f108 0502 	addeq.w	r5, r8, #2
 80119ba:	f898 4001 	ldrbeq.w	r4, [r8, #1]
 80119be:	e7a7      	b.n	8011910 <_strtoll_l.isra.0+0x34>
 80119c0:	f04f 0900 	mov.w	r9, #0
 80119c4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80119c8:	e7b8      	b.n	801193c <_strtoll_l.isra.0+0x60>
 80119ca:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80119ce:	f1bc 0f19 	cmp.w	ip, #25
 80119d2:	d801      	bhi.n	80119d8 <_strtoll_l.isra.0+0xfc>
 80119d4:	3c37      	subs	r4, #55	; 0x37
 80119d6:	e7c7      	b.n	8011968 <_strtoll_l.isra.0+0x8c>
 80119d8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80119dc:	f1bc 0f19 	cmp.w	ip, #25
 80119e0:	d804      	bhi.n	80119ec <_strtoll_l.isra.0+0x110>
 80119e2:	3c57      	subs	r4, #87	; 0x57
 80119e4:	e7c0      	b.n	8011968 <_strtoll_l.isra.0+0x8c>
 80119e6:	f04f 33ff 	mov.w	r3, #4294967295
 80119ea:	e7dd      	b.n	80119a8 <_strtoll_l.isra.0+0xcc>
 80119ec:	1c5a      	adds	r2, r3, #1
 80119ee:	d10c      	bne.n	8011a0a <_strtoll_l.isra.0+0x12e>
 80119f0:	9a07      	ldr	r2, [sp, #28]
 80119f2:	2322      	movs	r3, #34	; 0x22
 80119f4:	6013      	str	r3, [r2, #0]
 80119f6:	e9cd 9800 	strd	r9, r8, [sp]
 80119fa:	f1bb 0f00 	cmp.w	fp, #0
 80119fe:	d110      	bne.n	8011a22 <_strtoll_l.isra.0+0x146>
 8011a00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a04:	b009      	add	sp, #36	; 0x24
 8011a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a0a:	b136      	cbz	r6, 8011a1a <_strtoll_l.isra.0+0x13e>
 8011a0c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011a10:	4249      	negs	r1, r1
 8011a12:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 8011a16:	e9cd 1200 	strd	r1, r2, [sp]
 8011a1a:	f1bb 0f00 	cmp.w	fp, #0
 8011a1e:	d0ef      	beq.n	8011a00 <_strtoll_l.isra.0+0x124>
 8011a20:	b10b      	cbz	r3, 8011a26 <_strtoll_l.isra.0+0x14a>
 8011a22:	f105 3aff 	add.w	sl, r5, #4294967295
 8011a26:	f8cb a000 	str.w	sl, [fp]
 8011a2a:	e7e9      	b.n	8011a00 <_strtoll_l.isra.0+0x124>
 8011a2c:	2430      	movs	r4, #48	; 0x30
 8011a2e:	2f00      	cmp	r7, #0
 8011a30:	f47f af7e 	bne.w	8011930 <_strtoll_l.isra.0+0x54>
 8011a34:	2708      	movs	r7, #8
 8011a36:	e77b      	b.n	8011930 <_strtoll_l.isra.0+0x54>
 8011a38:	2c30      	cmp	r4, #48	; 0x30
 8011a3a:	f43f af70 	beq.w	801191e <_strtoll_l.isra.0+0x42>
 8011a3e:	270a      	movs	r7, #10
 8011a40:	e776      	b.n	8011930 <_strtoll_l.isra.0+0x54>
	...

08011a44 <strtoll>:
 8011a44:	4b08      	ldr	r3, [pc, #32]	; (8011a68 <strtoll+0x24>)
 8011a46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a48:	681c      	ldr	r4, [r3, #0]
 8011a4a:	4d08      	ldr	r5, [pc, #32]	; (8011a6c <strtoll+0x28>)
 8011a4c:	6a23      	ldr	r3, [r4, #32]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	bf08      	it	eq
 8011a52:	462b      	moveq	r3, r5
 8011a54:	9300      	str	r3, [sp, #0]
 8011a56:	4613      	mov	r3, r2
 8011a58:	460a      	mov	r2, r1
 8011a5a:	4601      	mov	r1, r0
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f7ff ff3d 	bl	80118dc <_strtoll_l.isra.0>
 8011a62:	b003      	add	sp, #12
 8011a64:	bd30      	pop	{r4, r5, pc}
 8011a66:	bf00      	nop
 8011a68:	20000024 	.word	0x20000024
 8011a6c:	20000088 	.word	0x20000088

08011a70 <_strtoul_l.isra.0>:
 8011a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a74:	4680      	mov	r8, r0
 8011a76:	4689      	mov	r9, r1
 8011a78:	4692      	mov	sl, r2
 8011a7a:	461e      	mov	r6, r3
 8011a7c:	460f      	mov	r7, r1
 8011a7e:	463d      	mov	r5, r7
 8011a80:	9808      	ldr	r0, [sp, #32]
 8011a82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a86:	f7ff fde9 	bl	801165c <__locale_ctype_ptr_l>
 8011a8a:	4420      	add	r0, r4
 8011a8c:	7843      	ldrb	r3, [r0, #1]
 8011a8e:	f013 0308 	ands.w	r3, r3, #8
 8011a92:	d130      	bne.n	8011af6 <_strtoul_l.isra.0+0x86>
 8011a94:	2c2d      	cmp	r4, #45	; 0x2d
 8011a96:	d130      	bne.n	8011afa <_strtoul_l.isra.0+0x8a>
 8011a98:	787c      	ldrb	r4, [r7, #1]
 8011a9a:	1cbd      	adds	r5, r7, #2
 8011a9c:	2101      	movs	r1, #1
 8011a9e:	2e00      	cmp	r6, #0
 8011aa0:	d05c      	beq.n	8011b5c <_strtoul_l.isra.0+0xec>
 8011aa2:	2e10      	cmp	r6, #16
 8011aa4:	d109      	bne.n	8011aba <_strtoul_l.isra.0+0x4a>
 8011aa6:	2c30      	cmp	r4, #48	; 0x30
 8011aa8:	d107      	bne.n	8011aba <_strtoul_l.isra.0+0x4a>
 8011aaa:	782b      	ldrb	r3, [r5, #0]
 8011aac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011ab0:	2b58      	cmp	r3, #88	; 0x58
 8011ab2:	d14e      	bne.n	8011b52 <_strtoul_l.isra.0+0xe2>
 8011ab4:	786c      	ldrb	r4, [r5, #1]
 8011ab6:	2610      	movs	r6, #16
 8011ab8:	3502      	adds	r5, #2
 8011aba:	f04f 32ff 	mov.w	r2, #4294967295
 8011abe:	2300      	movs	r3, #0
 8011ac0:	fbb2 f2f6 	udiv	r2, r2, r6
 8011ac4:	fb06 fc02 	mul.w	ip, r6, r2
 8011ac8:	ea6f 0c0c 	mvn.w	ip, ip
 8011acc:	4618      	mov	r0, r3
 8011ace:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011ad2:	2f09      	cmp	r7, #9
 8011ad4:	d817      	bhi.n	8011b06 <_strtoul_l.isra.0+0x96>
 8011ad6:	463c      	mov	r4, r7
 8011ad8:	42a6      	cmp	r6, r4
 8011ada:	dd23      	ble.n	8011b24 <_strtoul_l.isra.0+0xb4>
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	db1e      	blt.n	8011b1e <_strtoul_l.isra.0+0xae>
 8011ae0:	4282      	cmp	r2, r0
 8011ae2:	d31c      	bcc.n	8011b1e <_strtoul_l.isra.0+0xae>
 8011ae4:	d101      	bne.n	8011aea <_strtoul_l.isra.0+0x7a>
 8011ae6:	45a4      	cmp	ip, r4
 8011ae8:	db19      	blt.n	8011b1e <_strtoul_l.isra.0+0xae>
 8011aea:	fb00 4006 	mla	r0, r0, r6, r4
 8011aee:	2301      	movs	r3, #1
 8011af0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011af4:	e7eb      	b.n	8011ace <_strtoul_l.isra.0+0x5e>
 8011af6:	462f      	mov	r7, r5
 8011af8:	e7c1      	b.n	8011a7e <_strtoul_l.isra.0+0xe>
 8011afa:	2c2b      	cmp	r4, #43	; 0x2b
 8011afc:	bf04      	itt	eq
 8011afe:	1cbd      	addeq	r5, r7, #2
 8011b00:	787c      	ldrbeq	r4, [r7, #1]
 8011b02:	4619      	mov	r1, r3
 8011b04:	e7cb      	b.n	8011a9e <_strtoul_l.isra.0+0x2e>
 8011b06:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011b0a:	2f19      	cmp	r7, #25
 8011b0c:	d801      	bhi.n	8011b12 <_strtoul_l.isra.0+0xa2>
 8011b0e:	3c37      	subs	r4, #55	; 0x37
 8011b10:	e7e2      	b.n	8011ad8 <_strtoul_l.isra.0+0x68>
 8011b12:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011b16:	2f19      	cmp	r7, #25
 8011b18:	d804      	bhi.n	8011b24 <_strtoul_l.isra.0+0xb4>
 8011b1a:	3c57      	subs	r4, #87	; 0x57
 8011b1c:	e7dc      	b.n	8011ad8 <_strtoul_l.isra.0+0x68>
 8011b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b22:	e7e5      	b.n	8011af0 <_strtoul_l.isra.0+0x80>
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	da09      	bge.n	8011b3c <_strtoul_l.isra.0+0xcc>
 8011b28:	2322      	movs	r3, #34	; 0x22
 8011b2a:	f8c8 3000 	str.w	r3, [r8]
 8011b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8011b32:	f1ba 0f00 	cmp.w	sl, #0
 8011b36:	d107      	bne.n	8011b48 <_strtoul_l.isra.0+0xd8>
 8011b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b3c:	b101      	cbz	r1, 8011b40 <_strtoul_l.isra.0+0xd0>
 8011b3e:	4240      	negs	r0, r0
 8011b40:	f1ba 0f00 	cmp.w	sl, #0
 8011b44:	d0f8      	beq.n	8011b38 <_strtoul_l.isra.0+0xc8>
 8011b46:	b10b      	cbz	r3, 8011b4c <_strtoul_l.isra.0+0xdc>
 8011b48:	f105 39ff 	add.w	r9, r5, #4294967295
 8011b4c:	f8ca 9000 	str.w	r9, [sl]
 8011b50:	e7f2      	b.n	8011b38 <_strtoul_l.isra.0+0xc8>
 8011b52:	2430      	movs	r4, #48	; 0x30
 8011b54:	2e00      	cmp	r6, #0
 8011b56:	d1b0      	bne.n	8011aba <_strtoul_l.isra.0+0x4a>
 8011b58:	2608      	movs	r6, #8
 8011b5a:	e7ae      	b.n	8011aba <_strtoul_l.isra.0+0x4a>
 8011b5c:	2c30      	cmp	r4, #48	; 0x30
 8011b5e:	d0a4      	beq.n	8011aaa <_strtoul_l.isra.0+0x3a>
 8011b60:	260a      	movs	r6, #10
 8011b62:	e7aa      	b.n	8011aba <_strtoul_l.isra.0+0x4a>

08011b64 <strtoul>:
 8011b64:	4b08      	ldr	r3, [pc, #32]	; (8011b88 <strtoul+0x24>)
 8011b66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b68:	681c      	ldr	r4, [r3, #0]
 8011b6a:	4d08      	ldr	r5, [pc, #32]	; (8011b8c <strtoul+0x28>)
 8011b6c:	6a23      	ldr	r3, [r4, #32]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	bf08      	it	eq
 8011b72:	462b      	moveq	r3, r5
 8011b74:	9300      	str	r3, [sp, #0]
 8011b76:	4613      	mov	r3, r2
 8011b78:	460a      	mov	r2, r1
 8011b7a:	4601      	mov	r1, r0
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	f7ff ff77 	bl	8011a70 <_strtoul_l.isra.0>
 8011b82:	b003      	add	sp, #12
 8011b84:	bd30      	pop	{r4, r5, pc}
 8011b86:	bf00      	nop
 8011b88:	20000024 	.word	0x20000024
 8011b8c:	20000088 	.word	0x20000088

08011b90 <_strtoull_l.isra.0>:
 8011b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b94:	b087      	sub	sp, #28
 8011b96:	4688      	mov	r8, r1
 8011b98:	9005      	str	r0, [sp, #20]
 8011b9a:	4691      	mov	r9, r2
 8011b9c:	461f      	mov	r7, r3
 8011b9e:	468b      	mov	fp, r1
 8011ba0:	465d      	mov	r5, fp
 8011ba2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011ba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ba8:	f7ff fd58 	bl	801165c <__locale_ctype_ptr_l>
 8011bac:	4420      	add	r0, r4
 8011bae:	7846      	ldrb	r6, [r0, #1]
 8011bb0:	f016 0608 	ands.w	r6, r6, #8
 8011bb4:	d158      	bne.n	8011c68 <_strtoull_l.isra.0+0xd8>
 8011bb6:	2c2d      	cmp	r4, #45	; 0x2d
 8011bb8:	d158      	bne.n	8011c6c <_strtoull_l.isra.0+0xdc>
 8011bba:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8011bbe:	f10b 0502 	add.w	r5, fp, #2
 8011bc2:	2601      	movs	r6, #1
 8011bc4:	2f00      	cmp	r7, #0
 8011bc6:	f000 8093 	beq.w	8011cf0 <_strtoull_l.isra.0+0x160>
 8011bca:	2f10      	cmp	r7, #16
 8011bcc:	d10a      	bne.n	8011be4 <_strtoull_l.isra.0+0x54>
 8011bce:	2c30      	cmp	r4, #48	; 0x30
 8011bd0:	d108      	bne.n	8011be4 <_strtoull_l.isra.0+0x54>
 8011bd2:	782b      	ldrb	r3, [r5, #0]
 8011bd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011bd8:	2b58      	cmp	r3, #88	; 0x58
 8011bda:	f040 8083 	bne.w	8011ce4 <_strtoull_l.isra.0+0x154>
 8011bde:	786c      	ldrb	r4, [r5, #1]
 8011be0:	2710      	movs	r7, #16
 8011be2:	3502      	adds	r5, #2
 8011be4:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8011be8:	463a      	mov	r2, r7
 8011bea:	465b      	mov	r3, fp
 8011bec:	f04f 30ff 	mov.w	r0, #4294967295
 8011bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8011bf4:	f7ef f840 	bl	8000c78 <__aeabi_uldivmod>
 8011bf8:	463a      	mov	r2, r7
 8011bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bfe:	465b      	mov	r3, fp
 8011c00:	f04f 30ff 	mov.w	r0, #4294967295
 8011c04:	f04f 31ff 	mov.w	r1, #4294967295
 8011c08:	f7ef f836 	bl	8000c78 <__aeabi_uldivmod>
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	4696      	mov	lr, r2
 8011c10:	2200      	movs	r2, #0
 8011c12:	e9cd 1200 	strd	r1, r2, [sp]
 8011c16:	46ba      	mov	sl, r7
 8011c18:	2300      	movs	r3, #0
 8011c1a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011c1e:	f1bc 0f09 	cmp.w	ip, #9
 8011c22:	d82a      	bhi.n	8011c7a <_strtoull_l.isra.0+0xea>
 8011c24:	4664      	mov	r4, ip
 8011c26:	42a7      	cmp	r7, r4
 8011c28:	dd38      	ble.n	8011c9c <_strtoull_l.isra.0+0x10c>
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	db33      	blt.n	8011c96 <_strtoull_l.isra.0+0x106>
 8011c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c36:	4299      	cmp	r1, r3
 8011c38:	bf08      	it	eq
 8011c3a:	4290      	cmpeq	r0, r2
 8011c3c:	d32b      	bcc.n	8011c96 <_strtoull_l.isra.0+0x106>
 8011c3e:	d101      	bne.n	8011c44 <_strtoull_l.isra.0+0xb4>
 8011c40:	45a6      	cmp	lr, r4
 8011c42:	db28      	blt.n	8011c96 <_strtoull_l.isra.0+0x106>
 8011c44:	9b01      	ldr	r3, [sp, #4]
 8011c46:	9900      	ldr	r1, [sp, #0]
 8011c48:	fb0a f303 	mul.w	r3, sl, r3
 8011c4c:	fb01 330b 	mla	r3, r1, fp, r3
 8011c50:	fbaa 0101 	umull	r0, r1, sl, r1
 8011c54:	1902      	adds	r2, r0, r4
 8011c56:	4419      	add	r1, r3
 8011c58:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
 8011c5c:	e9cd 2300 	strd	r2, r3, [sp]
 8011c60:	2301      	movs	r3, #1
 8011c62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c66:	e7d8      	b.n	8011c1a <_strtoull_l.isra.0+0x8a>
 8011c68:	46ab      	mov	fp, r5
 8011c6a:	e799      	b.n	8011ba0 <_strtoull_l.isra.0+0x10>
 8011c6c:	2c2b      	cmp	r4, #43	; 0x2b
 8011c6e:	bf04      	itt	eq
 8011c70:	f10b 0502 	addeq.w	r5, fp, #2
 8011c74:	f89b 4001 	ldrbeq.w	r4, [fp, #1]
 8011c78:	e7a4      	b.n	8011bc4 <_strtoull_l.isra.0+0x34>
 8011c7a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011c7e:	f1bc 0f19 	cmp.w	ip, #25
 8011c82:	d801      	bhi.n	8011c88 <_strtoull_l.isra.0+0xf8>
 8011c84:	3c37      	subs	r4, #55	; 0x37
 8011c86:	e7ce      	b.n	8011c26 <_strtoull_l.isra.0+0x96>
 8011c88:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011c8c:	f1bc 0f19 	cmp.w	ip, #25
 8011c90:	d804      	bhi.n	8011c9c <_strtoull_l.isra.0+0x10c>
 8011c92:	3c57      	subs	r4, #87	; 0x57
 8011c94:	e7c7      	b.n	8011c26 <_strtoull_l.isra.0+0x96>
 8011c96:	f04f 33ff 	mov.w	r3, #4294967295
 8011c9a:	e7e2      	b.n	8011c62 <_strtoull_l.isra.0+0xd2>
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	da10      	bge.n	8011cc2 <_strtoull_l.isra.0+0x132>
 8011ca0:	9a05      	ldr	r2, [sp, #20]
 8011ca2:	2322      	movs	r3, #34	; 0x22
 8011ca4:	6013      	str	r3, [r2, #0]
 8011ca6:	f04f 34ff 	mov.w	r4, #4294967295
 8011caa:	f04f 33ff 	mov.w	r3, #4294967295
 8011cae:	e9cd 3400 	strd	r3, r4, [sp]
 8011cb2:	f1b9 0f00 	cmp.w	r9, #0
 8011cb6:	d110      	bne.n	8011cda <_strtoull_l.isra.0+0x14a>
 8011cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011cbc:	b007      	add	sp, #28
 8011cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc2:	b136      	cbz	r6, 8011cd2 <_strtoull_l.isra.0+0x142>
 8011cc4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011cc8:	4249      	negs	r1, r1
 8011cca:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 8011cce:	e9cd 1200 	strd	r1, r2, [sp]
 8011cd2:	f1b9 0f00 	cmp.w	r9, #0
 8011cd6:	d0ef      	beq.n	8011cb8 <_strtoull_l.isra.0+0x128>
 8011cd8:	b10b      	cbz	r3, 8011cde <_strtoull_l.isra.0+0x14e>
 8011cda:	f105 38ff 	add.w	r8, r5, #4294967295
 8011cde:	f8c9 8000 	str.w	r8, [r9]
 8011ce2:	e7e9      	b.n	8011cb8 <_strtoull_l.isra.0+0x128>
 8011ce4:	2430      	movs	r4, #48	; 0x30
 8011ce6:	2f00      	cmp	r7, #0
 8011ce8:	f47f af7c 	bne.w	8011be4 <_strtoull_l.isra.0+0x54>
 8011cec:	2708      	movs	r7, #8
 8011cee:	e779      	b.n	8011be4 <_strtoull_l.isra.0+0x54>
 8011cf0:	2c30      	cmp	r4, #48	; 0x30
 8011cf2:	f43f af6e 	beq.w	8011bd2 <_strtoull_l.isra.0+0x42>
 8011cf6:	270a      	movs	r7, #10
 8011cf8:	e774      	b.n	8011be4 <_strtoull_l.isra.0+0x54>
	...

08011cfc <strtoull>:
 8011cfc:	4b08      	ldr	r3, [pc, #32]	; (8011d20 <strtoull+0x24>)
 8011cfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d00:	681c      	ldr	r4, [r3, #0]
 8011d02:	4d08      	ldr	r5, [pc, #32]	; (8011d24 <strtoull+0x28>)
 8011d04:	6a23      	ldr	r3, [r4, #32]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	bf08      	it	eq
 8011d0a:	462b      	moveq	r3, r5
 8011d0c:	9300      	str	r3, [sp, #0]
 8011d0e:	4613      	mov	r3, r2
 8011d10:	460a      	mov	r2, r1
 8011d12:	4601      	mov	r1, r0
 8011d14:	4620      	mov	r0, r4
 8011d16:	f7ff ff3b 	bl	8011b90 <_strtoull_l.isra.0>
 8011d1a:	b003      	add	sp, #12
 8011d1c:	bd30      	pop	{r4, r5, pc}
 8011d1e:	bf00      	nop
 8011d20:	20000024 	.word	0x20000024
 8011d24:	20000088 	.word	0x20000088

08011d28 <__ascii_wctomb>:
 8011d28:	b149      	cbz	r1, 8011d3e <__ascii_wctomb+0x16>
 8011d2a:	2aff      	cmp	r2, #255	; 0xff
 8011d2c:	bf85      	ittet	hi
 8011d2e:	238a      	movhi	r3, #138	; 0x8a
 8011d30:	6003      	strhi	r3, [r0, #0]
 8011d32:	700a      	strbls	r2, [r1, #0]
 8011d34:	f04f 30ff 	movhi.w	r0, #4294967295
 8011d38:	bf98      	it	ls
 8011d3a:	2001      	movls	r0, #1
 8011d3c:	4770      	bx	lr
 8011d3e:	4608      	mov	r0, r1
 8011d40:	4770      	bx	lr
	...

08011d44 <_malloc_r>:
 8011d44:	b570      	push	{r4, r5, r6, lr}
 8011d46:	1ccd      	adds	r5, r1, #3
 8011d48:	f025 0503 	bic.w	r5, r5, #3
 8011d4c:	3508      	adds	r5, #8
 8011d4e:	2d0c      	cmp	r5, #12
 8011d50:	bf38      	it	cc
 8011d52:	250c      	movcc	r5, #12
 8011d54:	2d00      	cmp	r5, #0
 8011d56:	4606      	mov	r6, r0
 8011d58:	db01      	blt.n	8011d5e <_malloc_r+0x1a>
 8011d5a:	42a9      	cmp	r1, r5
 8011d5c:	d903      	bls.n	8011d66 <_malloc_r+0x22>
 8011d5e:	230c      	movs	r3, #12
 8011d60:	6033      	str	r3, [r6, #0]
 8011d62:	2000      	movs	r0, #0
 8011d64:	bd70      	pop	{r4, r5, r6, pc}
 8011d66:	f000 fb31 	bl	80123cc <__malloc_lock>
 8011d6a:	4a21      	ldr	r2, [pc, #132]	; (8011df0 <_malloc_r+0xac>)
 8011d6c:	6814      	ldr	r4, [r2, #0]
 8011d6e:	4621      	mov	r1, r4
 8011d70:	b991      	cbnz	r1, 8011d98 <_malloc_r+0x54>
 8011d72:	4c20      	ldr	r4, [pc, #128]	; (8011df4 <_malloc_r+0xb0>)
 8011d74:	6823      	ldr	r3, [r4, #0]
 8011d76:	b91b      	cbnz	r3, 8011d80 <_malloc_r+0x3c>
 8011d78:	4630      	mov	r0, r6
 8011d7a:	f000 fb17 	bl	80123ac <_sbrk_r>
 8011d7e:	6020      	str	r0, [r4, #0]
 8011d80:	4629      	mov	r1, r5
 8011d82:	4630      	mov	r0, r6
 8011d84:	f000 fb12 	bl	80123ac <_sbrk_r>
 8011d88:	1c43      	adds	r3, r0, #1
 8011d8a:	d124      	bne.n	8011dd6 <_malloc_r+0x92>
 8011d8c:	230c      	movs	r3, #12
 8011d8e:	6033      	str	r3, [r6, #0]
 8011d90:	4630      	mov	r0, r6
 8011d92:	f000 fb1c 	bl	80123ce <__malloc_unlock>
 8011d96:	e7e4      	b.n	8011d62 <_malloc_r+0x1e>
 8011d98:	680b      	ldr	r3, [r1, #0]
 8011d9a:	1b5b      	subs	r3, r3, r5
 8011d9c:	d418      	bmi.n	8011dd0 <_malloc_r+0x8c>
 8011d9e:	2b0b      	cmp	r3, #11
 8011da0:	d90f      	bls.n	8011dc2 <_malloc_r+0x7e>
 8011da2:	600b      	str	r3, [r1, #0]
 8011da4:	50cd      	str	r5, [r1, r3]
 8011da6:	18cc      	adds	r4, r1, r3
 8011da8:	4630      	mov	r0, r6
 8011daa:	f000 fb10 	bl	80123ce <__malloc_unlock>
 8011dae:	f104 000b 	add.w	r0, r4, #11
 8011db2:	1d23      	adds	r3, r4, #4
 8011db4:	f020 0007 	bic.w	r0, r0, #7
 8011db8:	1ac3      	subs	r3, r0, r3
 8011dba:	d0d3      	beq.n	8011d64 <_malloc_r+0x20>
 8011dbc:	425a      	negs	r2, r3
 8011dbe:	50e2      	str	r2, [r4, r3]
 8011dc0:	e7d0      	b.n	8011d64 <_malloc_r+0x20>
 8011dc2:	428c      	cmp	r4, r1
 8011dc4:	684b      	ldr	r3, [r1, #4]
 8011dc6:	bf16      	itet	ne
 8011dc8:	6063      	strne	r3, [r4, #4]
 8011dca:	6013      	streq	r3, [r2, #0]
 8011dcc:	460c      	movne	r4, r1
 8011dce:	e7eb      	b.n	8011da8 <_malloc_r+0x64>
 8011dd0:	460c      	mov	r4, r1
 8011dd2:	6849      	ldr	r1, [r1, #4]
 8011dd4:	e7cc      	b.n	8011d70 <_malloc_r+0x2c>
 8011dd6:	1cc4      	adds	r4, r0, #3
 8011dd8:	f024 0403 	bic.w	r4, r4, #3
 8011ddc:	42a0      	cmp	r0, r4
 8011dde:	d005      	beq.n	8011dec <_malloc_r+0xa8>
 8011de0:	1a21      	subs	r1, r4, r0
 8011de2:	4630      	mov	r0, r6
 8011de4:	f000 fae2 	bl	80123ac <_sbrk_r>
 8011de8:	3001      	adds	r0, #1
 8011dea:	d0cf      	beq.n	8011d8c <_malloc_r+0x48>
 8011dec:	6025      	str	r5, [r4, #0]
 8011dee:	e7db      	b.n	8011da8 <_malloc_r+0x64>
 8011df0:	20000468 	.word	0x20000468
 8011df4:	2000046c 	.word	0x2000046c

08011df8 <__ssputs_r>:
 8011df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dfc:	688e      	ldr	r6, [r1, #8]
 8011dfe:	429e      	cmp	r6, r3
 8011e00:	4682      	mov	sl, r0
 8011e02:	460c      	mov	r4, r1
 8011e04:	4690      	mov	r8, r2
 8011e06:	4699      	mov	r9, r3
 8011e08:	d837      	bhi.n	8011e7a <__ssputs_r+0x82>
 8011e0a:	898a      	ldrh	r2, [r1, #12]
 8011e0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e10:	d031      	beq.n	8011e76 <__ssputs_r+0x7e>
 8011e12:	6825      	ldr	r5, [r4, #0]
 8011e14:	6909      	ldr	r1, [r1, #16]
 8011e16:	1a6f      	subs	r7, r5, r1
 8011e18:	6965      	ldr	r5, [r4, #20]
 8011e1a:	2302      	movs	r3, #2
 8011e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e20:	fb95 f5f3 	sdiv	r5, r5, r3
 8011e24:	f109 0301 	add.w	r3, r9, #1
 8011e28:	443b      	add	r3, r7
 8011e2a:	429d      	cmp	r5, r3
 8011e2c:	bf38      	it	cc
 8011e2e:	461d      	movcc	r5, r3
 8011e30:	0553      	lsls	r3, r2, #21
 8011e32:	d530      	bpl.n	8011e96 <__ssputs_r+0x9e>
 8011e34:	4629      	mov	r1, r5
 8011e36:	f7ff ff85 	bl	8011d44 <_malloc_r>
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	b950      	cbnz	r0, 8011e54 <__ssputs_r+0x5c>
 8011e3e:	230c      	movs	r3, #12
 8011e40:	f8ca 3000 	str.w	r3, [sl]
 8011e44:	89a3      	ldrh	r3, [r4, #12]
 8011e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e4a:	81a3      	strh	r3, [r4, #12]
 8011e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e54:	463a      	mov	r2, r7
 8011e56:	6921      	ldr	r1, [r4, #16]
 8011e58:	f7ff fc24 	bl	80116a4 <memcpy>
 8011e5c:	89a3      	ldrh	r3, [r4, #12]
 8011e5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e66:	81a3      	strh	r3, [r4, #12]
 8011e68:	6126      	str	r6, [r4, #16]
 8011e6a:	6165      	str	r5, [r4, #20]
 8011e6c:	443e      	add	r6, r7
 8011e6e:	1bed      	subs	r5, r5, r7
 8011e70:	6026      	str	r6, [r4, #0]
 8011e72:	60a5      	str	r5, [r4, #8]
 8011e74:	464e      	mov	r6, r9
 8011e76:	454e      	cmp	r6, r9
 8011e78:	d900      	bls.n	8011e7c <__ssputs_r+0x84>
 8011e7a:	464e      	mov	r6, r9
 8011e7c:	4632      	mov	r2, r6
 8011e7e:	4641      	mov	r1, r8
 8011e80:	6820      	ldr	r0, [r4, #0]
 8011e82:	f7ff fc1a 	bl	80116ba <memmove>
 8011e86:	68a3      	ldr	r3, [r4, #8]
 8011e88:	1b9b      	subs	r3, r3, r6
 8011e8a:	60a3      	str	r3, [r4, #8]
 8011e8c:	6823      	ldr	r3, [r4, #0]
 8011e8e:	441e      	add	r6, r3
 8011e90:	6026      	str	r6, [r4, #0]
 8011e92:	2000      	movs	r0, #0
 8011e94:	e7dc      	b.n	8011e50 <__ssputs_r+0x58>
 8011e96:	462a      	mov	r2, r5
 8011e98:	f000 fae8 	bl	801246c <_realloc_r>
 8011e9c:	4606      	mov	r6, r0
 8011e9e:	2800      	cmp	r0, #0
 8011ea0:	d1e2      	bne.n	8011e68 <__ssputs_r+0x70>
 8011ea2:	6921      	ldr	r1, [r4, #16]
 8011ea4:	4650      	mov	r0, sl
 8011ea6:	f000 fa93 	bl	80123d0 <_free_r>
 8011eaa:	e7c8      	b.n	8011e3e <__ssputs_r+0x46>

08011eac <_svfiprintf_r>:
 8011eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb0:	461d      	mov	r5, r3
 8011eb2:	898b      	ldrh	r3, [r1, #12]
 8011eb4:	061f      	lsls	r7, r3, #24
 8011eb6:	b09d      	sub	sp, #116	; 0x74
 8011eb8:	4680      	mov	r8, r0
 8011eba:	460c      	mov	r4, r1
 8011ebc:	4616      	mov	r6, r2
 8011ebe:	d50f      	bpl.n	8011ee0 <_svfiprintf_r+0x34>
 8011ec0:	690b      	ldr	r3, [r1, #16]
 8011ec2:	b96b      	cbnz	r3, 8011ee0 <_svfiprintf_r+0x34>
 8011ec4:	2140      	movs	r1, #64	; 0x40
 8011ec6:	f7ff ff3d 	bl	8011d44 <_malloc_r>
 8011eca:	6020      	str	r0, [r4, #0]
 8011ecc:	6120      	str	r0, [r4, #16]
 8011ece:	b928      	cbnz	r0, 8011edc <_svfiprintf_r+0x30>
 8011ed0:	230c      	movs	r3, #12
 8011ed2:	f8c8 3000 	str.w	r3, [r8]
 8011ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eda:	e0c8      	b.n	801206e <_svfiprintf_r+0x1c2>
 8011edc:	2340      	movs	r3, #64	; 0x40
 8011ede:	6163      	str	r3, [r4, #20]
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8011ee4:	2320      	movs	r3, #32
 8011ee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011eea:	2330      	movs	r3, #48	; 0x30
 8011eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ef0:	9503      	str	r5, [sp, #12]
 8011ef2:	f04f 0b01 	mov.w	fp, #1
 8011ef6:	4637      	mov	r7, r6
 8011ef8:	463d      	mov	r5, r7
 8011efa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011efe:	b10b      	cbz	r3, 8011f04 <_svfiprintf_r+0x58>
 8011f00:	2b25      	cmp	r3, #37	; 0x25
 8011f02:	d13e      	bne.n	8011f82 <_svfiprintf_r+0xd6>
 8011f04:	ebb7 0a06 	subs.w	sl, r7, r6
 8011f08:	d00b      	beq.n	8011f22 <_svfiprintf_r+0x76>
 8011f0a:	4653      	mov	r3, sl
 8011f0c:	4632      	mov	r2, r6
 8011f0e:	4621      	mov	r1, r4
 8011f10:	4640      	mov	r0, r8
 8011f12:	f7ff ff71 	bl	8011df8 <__ssputs_r>
 8011f16:	3001      	adds	r0, #1
 8011f18:	f000 80a4 	beq.w	8012064 <_svfiprintf_r+0x1b8>
 8011f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f1e:	4453      	add	r3, sl
 8011f20:	9309      	str	r3, [sp, #36]	; 0x24
 8011f22:	783b      	ldrb	r3, [r7, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	f000 809d 	beq.w	8012064 <_svfiprintf_r+0x1b8>
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f34:	9304      	str	r3, [sp, #16]
 8011f36:	9307      	str	r3, [sp, #28]
 8011f38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f3c:	931a      	str	r3, [sp, #104]	; 0x68
 8011f3e:	462f      	mov	r7, r5
 8011f40:	2205      	movs	r2, #5
 8011f42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011f46:	4850      	ldr	r0, [pc, #320]	; (8012088 <_svfiprintf_r+0x1dc>)
 8011f48:	f7ee f962 	bl	8000210 <memchr>
 8011f4c:	9b04      	ldr	r3, [sp, #16]
 8011f4e:	b9d0      	cbnz	r0, 8011f86 <_svfiprintf_r+0xda>
 8011f50:	06d9      	lsls	r1, r3, #27
 8011f52:	bf44      	itt	mi
 8011f54:	2220      	movmi	r2, #32
 8011f56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011f5a:	071a      	lsls	r2, r3, #28
 8011f5c:	bf44      	itt	mi
 8011f5e:	222b      	movmi	r2, #43	; 0x2b
 8011f60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011f64:	782a      	ldrb	r2, [r5, #0]
 8011f66:	2a2a      	cmp	r2, #42	; 0x2a
 8011f68:	d015      	beq.n	8011f96 <_svfiprintf_r+0xea>
 8011f6a:	9a07      	ldr	r2, [sp, #28]
 8011f6c:	462f      	mov	r7, r5
 8011f6e:	2000      	movs	r0, #0
 8011f70:	250a      	movs	r5, #10
 8011f72:	4639      	mov	r1, r7
 8011f74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f78:	3b30      	subs	r3, #48	; 0x30
 8011f7a:	2b09      	cmp	r3, #9
 8011f7c:	d94d      	bls.n	801201a <_svfiprintf_r+0x16e>
 8011f7e:	b1b8      	cbz	r0, 8011fb0 <_svfiprintf_r+0x104>
 8011f80:	e00f      	b.n	8011fa2 <_svfiprintf_r+0xf6>
 8011f82:	462f      	mov	r7, r5
 8011f84:	e7b8      	b.n	8011ef8 <_svfiprintf_r+0x4c>
 8011f86:	4a40      	ldr	r2, [pc, #256]	; (8012088 <_svfiprintf_r+0x1dc>)
 8011f88:	1a80      	subs	r0, r0, r2
 8011f8a:	fa0b f000 	lsl.w	r0, fp, r0
 8011f8e:	4318      	orrs	r0, r3
 8011f90:	9004      	str	r0, [sp, #16]
 8011f92:	463d      	mov	r5, r7
 8011f94:	e7d3      	b.n	8011f3e <_svfiprintf_r+0x92>
 8011f96:	9a03      	ldr	r2, [sp, #12]
 8011f98:	1d11      	adds	r1, r2, #4
 8011f9a:	6812      	ldr	r2, [r2, #0]
 8011f9c:	9103      	str	r1, [sp, #12]
 8011f9e:	2a00      	cmp	r2, #0
 8011fa0:	db01      	blt.n	8011fa6 <_svfiprintf_r+0xfa>
 8011fa2:	9207      	str	r2, [sp, #28]
 8011fa4:	e004      	b.n	8011fb0 <_svfiprintf_r+0x104>
 8011fa6:	4252      	negs	r2, r2
 8011fa8:	f043 0302 	orr.w	r3, r3, #2
 8011fac:	9207      	str	r2, [sp, #28]
 8011fae:	9304      	str	r3, [sp, #16]
 8011fb0:	783b      	ldrb	r3, [r7, #0]
 8011fb2:	2b2e      	cmp	r3, #46	; 0x2e
 8011fb4:	d10c      	bne.n	8011fd0 <_svfiprintf_r+0x124>
 8011fb6:	787b      	ldrb	r3, [r7, #1]
 8011fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8011fba:	d133      	bne.n	8012024 <_svfiprintf_r+0x178>
 8011fbc:	9b03      	ldr	r3, [sp, #12]
 8011fbe:	1d1a      	adds	r2, r3, #4
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	9203      	str	r2, [sp, #12]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	bfb8      	it	lt
 8011fc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8011fcc:	3702      	adds	r7, #2
 8011fce:	9305      	str	r3, [sp, #20]
 8011fd0:	4d2e      	ldr	r5, [pc, #184]	; (801208c <_svfiprintf_r+0x1e0>)
 8011fd2:	7839      	ldrb	r1, [r7, #0]
 8011fd4:	2203      	movs	r2, #3
 8011fd6:	4628      	mov	r0, r5
 8011fd8:	f7ee f91a 	bl	8000210 <memchr>
 8011fdc:	b138      	cbz	r0, 8011fee <_svfiprintf_r+0x142>
 8011fde:	2340      	movs	r3, #64	; 0x40
 8011fe0:	1b40      	subs	r0, r0, r5
 8011fe2:	fa03 f000 	lsl.w	r0, r3, r0
 8011fe6:	9b04      	ldr	r3, [sp, #16]
 8011fe8:	4303      	orrs	r3, r0
 8011fea:	3701      	adds	r7, #1
 8011fec:	9304      	str	r3, [sp, #16]
 8011fee:	7839      	ldrb	r1, [r7, #0]
 8011ff0:	4827      	ldr	r0, [pc, #156]	; (8012090 <_svfiprintf_r+0x1e4>)
 8011ff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ff6:	2206      	movs	r2, #6
 8011ff8:	1c7e      	adds	r6, r7, #1
 8011ffa:	f7ee f909 	bl	8000210 <memchr>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d038      	beq.n	8012074 <_svfiprintf_r+0x1c8>
 8012002:	4b24      	ldr	r3, [pc, #144]	; (8012094 <_svfiprintf_r+0x1e8>)
 8012004:	bb13      	cbnz	r3, 801204c <_svfiprintf_r+0x1a0>
 8012006:	9b03      	ldr	r3, [sp, #12]
 8012008:	3307      	adds	r3, #7
 801200a:	f023 0307 	bic.w	r3, r3, #7
 801200e:	3308      	adds	r3, #8
 8012010:	9303      	str	r3, [sp, #12]
 8012012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012014:	444b      	add	r3, r9
 8012016:	9309      	str	r3, [sp, #36]	; 0x24
 8012018:	e76d      	b.n	8011ef6 <_svfiprintf_r+0x4a>
 801201a:	fb05 3202 	mla	r2, r5, r2, r3
 801201e:	2001      	movs	r0, #1
 8012020:	460f      	mov	r7, r1
 8012022:	e7a6      	b.n	8011f72 <_svfiprintf_r+0xc6>
 8012024:	2300      	movs	r3, #0
 8012026:	3701      	adds	r7, #1
 8012028:	9305      	str	r3, [sp, #20]
 801202a:	4619      	mov	r1, r3
 801202c:	250a      	movs	r5, #10
 801202e:	4638      	mov	r0, r7
 8012030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012034:	3a30      	subs	r2, #48	; 0x30
 8012036:	2a09      	cmp	r2, #9
 8012038:	d903      	bls.n	8012042 <_svfiprintf_r+0x196>
 801203a:	2b00      	cmp	r3, #0
 801203c:	d0c8      	beq.n	8011fd0 <_svfiprintf_r+0x124>
 801203e:	9105      	str	r1, [sp, #20]
 8012040:	e7c6      	b.n	8011fd0 <_svfiprintf_r+0x124>
 8012042:	fb05 2101 	mla	r1, r5, r1, r2
 8012046:	2301      	movs	r3, #1
 8012048:	4607      	mov	r7, r0
 801204a:	e7f0      	b.n	801202e <_svfiprintf_r+0x182>
 801204c:	ab03      	add	r3, sp, #12
 801204e:	9300      	str	r3, [sp, #0]
 8012050:	4622      	mov	r2, r4
 8012052:	4b11      	ldr	r3, [pc, #68]	; (8012098 <_svfiprintf_r+0x1ec>)
 8012054:	a904      	add	r1, sp, #16
 8012056:	4640      	mov	r0, r8
 8012058:	f3af 8000 	nop.w
 801205c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012060:	4681      	mov	r9, r0
 8012062:	d1d6      	bne.n	8012012 <_svfiprintf_r+0x166>
 8012064:	89a3      	ldrh	r3, [r4, #12]
 8012066:	065b      	lsls	r3, r3, #25
 8012068:	f53f af35 	bmi.w	8011ed6 <_svfiprintf_r+0x2a>
 801206c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801206e:	b01d      	add	sp, #116	; 0x74
 8012070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012074:	ab03      	add	r3, sp, #12
 8012076:	9300      	str	r3, [sp, #0]
 8012078:	4622      	mov	r2, r4
 801207a:	4b07      	ldr	r3, [pc, #28]	; (8012098 <_svfiprintf_r+0x1ec>)
 801207c:	a904      	add	r1, sp, #16
 801207e:	4640      	mov	r0, r8
 8012080:	f000 f882 	bl	8012188 <_printf_i>
 8012084:	e7ea      	b.n	801205c <_svfiprintf_r+0x1b0>
 8012086:	bf00      	nop
 8012088:	080140ab 	.word	0x080140ab
 801208c:	080140b1 	.word	0x080140b1
 8012090:	080140b5 	.word	0x080140b5
 8012094:	00000000 	.word	0x00000000
 8012098:	08011df9 	.word	0x08011df9

0801209c <_printf_common>:
 801209c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120a0:	4691      	mov	r9, r2
 80120a2:	461f      	mov	r7, r3
 80120a4:	688a      	ldr	r2, [r1, #8]
 80120a6:	690b      	ldr	r3, [r1, #16]
 80120a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80120ac:	4293      	cmp	r3, r2
 80120ae:	bfb8      	it	lt
 80120b0:	4613      	movlt	r3, r2
 80120b2:	f8c9 3000 	str.w	r3, [r9]
 80120b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80120ba:	4606      	mov	r6, r0
 80120bc:	460c      	mov	r4, r1
 80120be:	b112      	cbz	r2, 80120c6 <_printf_common+0x2a>
 80120c0:	3301      	adds	r3, #1
 80120c2:	f8c9 3000 	str.w	r3, [r9]
 80120c6:	6823      	ldr	r3, [r4, #0]
 80120c8:	0699      	lsls	r1, r3, #26
 80120ca:	bf42      	ittt	mi
 80120cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80120d0:	3302      	addmi	r3, #2
 80120d2:	f8c9 3000 	strmi.w	r3, [r9]
 80120d6:	6825      	ldr	r5, [r4, #0]
 80120d8:	f015 0506 	ands.w	r5, r5, #6
 80120dc:	d107      	bne.n	80120ee <_printf_common+0x52>
 80120de:	f104 0a19 	add.w	sl, r4, #25
 80120e2:	68e3      	ldr	r3, [r4, #12]
 80120e4:	f8d9 2000 	ldr.w	r2, [r9]
 80120e8:	1a9b      	subs	r3, r3, r2
 80120ea:	42ab      	cmp	r3, r5
 80120ec:	dc28      	bgt.n	8012140 <_printf_common+0xa4>
 80120ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80120f2:	6822      	ldr	r2, [r4, #0]
 80120f4:	3300      	adds	r3, #0
 80120f6:	bf18      	it	ne
 80120f8:	2301      	movne	r3, #1
 80120fa:	0692      	lsls	r2, r2, #26
 80120fc:	d42d      	bmi.n	801215a <_printf_common+0xbe>
 80120fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012102:	4639      	mov	r1, r7
 8012104:	4630      	mov	r0, r6
 8012106:	47c0      	blx	r8
 8012108:	3001      	adds	r0, #1
 801210a:	d020      	beq.n	801214e <_printf_common+0xb2>
 801210c:	6823      	ldr	r3, [r4, #0]
 801210e:	68e5      	ldr	r5, [r4, #12]
 8012110:	f8d9 2000 	ldr.w	r2, [r9]
 8012114:	f003 0306 	and.w	r3, r3, #6
 8012118:	2b04      	cmp	r3, #4
 801211a:	bf08      	it	eq
 801211c:	1aad      	subeq	r5, r5, r2
 801211e:	68a3      	ldr	r3, [r4, #8]
 8012120:	6922      	ldr	r2, [r4, #16]
 8012122:	bf0c      	ite	eq
 8012124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012128:	2500      	movne	r5, #0
 801212a:	4293      	cmp	r3, r2
 801212c:	bfc4      	itt	gt
 801212e:	1a9b      	subgt	r3, r3, r2
 8012130:	18ed      	addgt	r5, r5, r3
 8012132:	f04f 0900 	mov.w	r9, #0
 8012136:	341a      	adds	r4, #26
 8012138:	454d      	cmp	r5, r9
 801213a:	d11a      	bne.n	8012172 <_printf_common+0xd6>
 801213c:	2000      	movs	r0, #0
 801213e:	e008      	b.n	8012152 <_printf_common+0xb6>
 8012140:	2301      	movs	r3, #1
 8012142:	4652      	mov	r2, sl
 8012144:	4639      	mov	r1, r7
 8012146:	4630      	mov	r0, r6
 8012148:	47c0      	blx	r8
 801214a:	3001      	adds	r0, #1
 801214c:	d103      	bne.n	8012156 <_printf_common+0xba>
 801214e:	f04f 30ff 	mov.w	r0, #4294967295
 8012152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012156:	3501      	adds	r5, #1
 8012158:	e7c3      	b.n	80120e2 <_printf_common+0x46>
 801215a:	18e1      	adds	r1, r4, r3
 801215c:	1c5a      	adds	r2, r3, #1
 801215e:	2030      	movs	r0, #48	; 0x30
 8012160:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012164:	4422      	add	r2, r4
 8012166:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801216a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801216e:	3302      	adds	r3, #2
 8012170:	e7c5      	b.n	80120fe <_printf_common+0x62>
 8012172:	2301      	movs	r3, #1
 8012174:	4622      	mov	r2, r4
 8012176:	4639      	mov	r1, r7
 8012178:	4630      	mov	r0, r6
 801217a:	47c0      	blx	r8
 801217c:	3001      	adds	r0, #1
 801217e:	d0e6      	beq.n	801214e <_printf_common+0xb2>
 8012180:	f109 0901 	add.w	r9, r9, #1
 8012184:	e7d8      	b.n	8012138 <_printf_common+0x9c>
	...

08012188 <_printf_i>:
 8012188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801218c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012190:	460c      	mov	r4, r1
 8012192:	7e09      	ldrb	r1, [r1, #24]
 8012194:	b085      	sub	sp, #20
 8012196:	296e      	cmp	r1, #110	; 0x6e
 8012198:	4617      	mov	r7, r2
 801219a:	4606      	mov	r6, r0
 801219c:	4698      	mov	r8, r3
 801219e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80121a0:	f000 80b3 	beq.w	801230a <_printf_i+0x182>
 80121a4:	d822      	bhi.n	80121ec <_printf_i+0x64>
 80121a6:	2963      	cmp	r1, #99	; 0x63
 80121a8:	d036      	beq.n	8012218 <_printf_i+0x90>
 80121aa:	d80a      	bhi.n	80121c2 <_printf_i+0x3a>
 80121ac:	2900      	cmp	r1, #0
 80121ae:	f000 80b9 	beq.w	8012324 <_printf_i+0x19c>
 80121b2:	2958      	cmp	r1, #88	; 0x58
 80121b4:	f000 8083 	beq.w	80122be <_printf_i+0x136>
 80121b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80121c0:	e032      	b.n	8012228 <_printf_i+0xa0>
 80121c2:	2964      	cmp	r1, #100	; 0x64
 80121c4:	d001      	beq.n	80121ca <_printf_i+0x42>
 80121c6:	2969      	cmp	r1, #105	; 0x69
 80121c8:	d1f6      	bne.n	80121b8 <_printf_i+0x30>
 80121ca:	6820      	ldr	r0, [r4, #0]
 80121cc:	6813      	ldr	r3, [r2, #0]
 80121ce:	0605      	lsls	r5, r0, #24
 80121d0:	f103 0104 	add.w	r1, r3, #4
 80121d4:	d52a      	bpl.n	801222c <_printf_i+0xa4>
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	6011      	str	r1, [r2, #0]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	da03      	bge.n	80121e6 <_printf_i+0x5e>
 80121de:	222d      	movs	r2, #45	; 0x2d
 80121e0:	425b      	negs	r3, r3
 80121e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80121e6:	486f      	ldr	r0, [pc, #444]	; (80123a4 <_printf_i+0x21c>)
 80121e8:	220a      	movs	r2, #10
 80121ea:	e039      	b.n	8012260 <_printf_i+0xd8>
 80121ec:	2973      	cmp	r1, #115	; 0x73
 80121ee:	f000 809d 	beq.w	801232c <_printf_i+0x1a4>
 80121f2:	d808      	bhi.n	8012206 <_printf_i+0x7e>
 80121f4:	296f      	cmp	r1, #111	; 0x6f
 80121f6:	d020      	beq.n	801223a <_printf_i+0xb2>
 80121f8:	2970      	cmp	r1, #112	; 0x70
 80121fa:	d1dd      	bne.n	80121b8 <_printf_i+0x30>
 80121fc:	6823      	ldr	r3, [r4, #0]
 80121fe:	f043 0320 	orr.w	r3, r3, #32
 8012202:	6023      	str	r3, [r4, #0]
 8012204:	e003      	b.n	801220e <_printf_i+0x86>
 8012206:	2975      	cmp	r1, #117	; 0x75
 8012208:	d017      	beq.n	801223a <_printf_i+0xb2>
 801220a:	2978      	cmp	r1, #120	; 0x78
 801220c:	d1d4      	bne.n	80121b8 <_printf_i+0x30>
 801220e:	2378      	movs	r3, #120	; 0x78
 8012210:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012214:	4864      	ldr	r0, [pc, #400]	; (80123a8 <_printf_i+0x220>)
 8012216:	e055      	b.n	80122c4 <_printf_i+0x13c>
 8012218:	6813      	ldr	r3, [r2, #0]
 801221a:	1d19      	adds	r1, r3, #4
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	6011      	str	r1, [r2, #0]
 8012220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012228:	2301      	movs	r3, #1
 801222a:	e08c      	b.n	8012346 <_printf_i+0x1be>
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	6011      	str	r1, [r2, #0]
 8012230:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012234:	bf18      	it	ne
 8012236:	b21b      	sxthne	r3, r3
 8012238:	e7cf      	b.n	80121da <_printf_i+0x52>
 801223a:	6813      	ldr	r3, [r2, #0]
 801223c:	6825      	ldr	r5, [r4, #0]
 801223e:	1d18      	adds	r0, r3, #4
 8012240:	6010      	str	r0, [r2, #0]
 8012242:	0628      	lsls	r0, r5, #24
 8012244:	d501      	bpl.n	801224a <_printf_i+0xc2>
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	e002      	b.n	8012250 <_printf_i+0xc8>
 801224a:	0668      	lsls	r0, r5, #25
 801224c:	d5fb      	bpl.n	8012246 <_printf_i+0xbe>
 801224e:	881b      	ldrh	r3, [r3, #0]
 8012250:	4854      	ldr	r0, [pc, #336]	; (80123a4 <_printf_i+0x21c>)
 8012252:	296f      	cmp	r1, #111	; 0x6f
 8012254:	bf14      	ite	ne
 8012256:	220a      	movne	r2, #10
 8012258:	2208      	moveq	r2, #8
 801225a:	2100      	movs	r1, #0
 801225c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012260:	6865      	ldr	r5, [r4, #4]
 8012262:	60a5      	str	r5, [r4, #8]
 8012264:	2d00      	cmp	r5, #0
 8012266:	f2c0 8095 	blt.w	8012394 <_printf_i+0x20c>
 801226a:	6821      	ldr	r1, [r4, #0]
 801226c:	f021 0104 	bic.w	r1, r1, #4
 8012270:	6021      	str	r1, [r4, #0]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d13d      	bne.n	80122f2 <_printf_i+0x16a>
 8012276:	2d00      	cmp	r5, #0
 8012278:	f040 808e 	bne.w	8012398 <_printf_i+0x210>
 801227c:	4665      	mov	r5, ip
 801227e:	2a08      	cmp	r2, #8
 8012280:	d10b      	bne.n	801229a <_printf_i+0x112>
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	07db      	lsls	r3, r3, #31
 8012286:	d508      	bpl.n	801229a <_printf_i+0x112>
 8012288:	6923      	ldr	r3, [r4, #16]
 801228a:	6862      	ldr	r2, [r4, #4]
 801228c:	429a      	cmp	r2, r3
 801228e:	bfde      	ittt	le
 8012290:	2330      	movle	r3, #48	; 0x30
 8012292:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012296:	f105 35ff 	addle.w	r5, r5, #4294967295
 801229a:	ebac 0305 	sub.w	r3, ip, r5
 801229e:	6123      	str	r3, [r4, #16]
 80122a0:	f8cd 8000 	str.w	r8, [sp]
 80122a4:	463b      	mov	r3, r7
 80122a6:	aa03      	add	r2, sp, #12
 80122a8:	4621      	mov	r1, r4
 80122aa:	4630      	mov	r0, r6
 80122ac:	f7ff fef6 	bl	801209c <_printf_common>
 80122b0:	3001      	adds	r0, #1
 80122b2:	d14d      	bne.n	8012350 <_printf_i+0x1c8>
 80122b4:	f04f 30ff 	mov.w	r0, #4294967295
 80122b8:	b005      	add	sp, #20
 80122ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122be:	4839      	ldr	r0, [pc, #228]	; (80123a4 <_printf_i+0x21c>)
 80122c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80122c4:	6813      	ldr	r3, [r2, #0]
 80122c6:	6821      	ldr	r1, [r4, #0]
 80122c8:	1d1d      	adds	r5, r3, #4
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	6015      	str	r5, [r2, #0]
 80122ce:	060a      	lsls	r2, r1, #24
 80122d0:	d50b      	bpl.n	80122ea <_printf_i+0x162>
 80122d2:	07ca      	lsls	r2, r1, #31
 80122d4:	bf44      	itt	mi
 80122d6:	f041 0120 	orrmi.w	r1, r1, #32
 80122da:	6021      	strmi	r1, [r4, #0]
 80122dc:	b91b      	cbnz	r3, 80122e6 <_printf_i+0x15e>
 80122de:	6822      	ldr	r2, [r4, #0]
 80122e0:	f022 0220 	bic.w	r2, r2, #32
 80122e4:	6022      	str	r2, [r4, #0]
 80122e6:	2210      	movs	r2, #16
 80122e8:	e7b7      	b.n	801225a <_printf_i+0xd2>
 80122ea:	064d      	lsls	r5, r1, #25
 80122ec:	bf48      	it	mi
 80122ee:	b29b      	uxthmi	r3, r3
 80122f0:	e7ef      	b.n	80122d2 <_printf_i+0x14a>
 80122f2:	4665      	mov	r5, ip
 80122f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80122f8:	fb02 3311 	mls	r3, r2, r1, r3
 80122fc:	5cc3      	ldrb	r3, [r0, r3]
 80122fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012302:	460b      	mov	r3, r1
 8012304:	2900      	cmp	r1, #0
 8012306:	d1f5      	bne.n	80122f4 <_printf_i+0x16c>
 8012308:	e7b9      	b.n	801227e <_printf_i+0xf6>
 801230a:	6813      	ldr	r3, [r2, #0]
 801230c:	6825      	ldr	r5, [r4, #0]
 801230e:	6961      	ldr	r1, [r4, #20]
 8012310:	1d18      	adds	r0, r3, #4
 8012312:	6010      	str	r0, [r2, #0]
 8012314:	0628      	lsls	r0, r5, #24
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	d501      	bpl.n	801231e <_printf_i+0x196>
 801231a:	6019      	str	r1, [r3, #0]
 801231c:	e002      	b.n	8012324 <_printf_i+0x19c>
 801231e:	066a      	lsls	r2, r5, #25
 8012320:	d5fb      	bpl.n	801231a <_printf_i+0x192>
 8012322:	8019      	strh	r1, [r3, #0]
 8012324:	2300      	movs	r3, #0
 8012326:	6123      	str	r3, [r4, #16]
 8012328:	4665      	mov	r5, ip
 801232a:	e7b9      	b.n	80122a0 <_printf_i+0x118>
 801232c:	6813      	ldr	r3, [r2, #0]
 801232e:	1d19      	adds	r1, r3, #4
 8012330:	6011      	str	r1, [r2, #0]
 8012332:	681d      	ldr	r5, [r3, #0]
 8012334:	6862      	ldr	r2, [r4, #4]
 8012336:	2100      	movs	r1, #0
 8012338:	4628      	mov	r0, r5
 801233a:	f7ed ff69 	bl	8000210 <memchr>
 801233e:	b108      	cbz	r0, 8012344 <_printf_i+0x1bc>
 8012340:	1b40      	subs	r0, r0, r5
 8012342:	6060      	str	r0, [r4, #4]
 8012344:	6863      	ldr	r3, [r4, #4]
 8012346:	6123      	str	r3, [r4, #16]
 8012348:	2300      	movs	r3, #0
 801234a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801234e:	e7a7      	b.n	80122a0 <_printf_i+0x118>
 8012350:	6923      	ldr	r3, [r4, #16]
 8012352:	462a      	mov	r2, r5
 8012354:	4639      	mov	r1, r7
 8012356:	4630      	mov	r0, r6
 8012358:	47c0      	blx	r8
 801235a:	3001      	adds	r0, #1
 801235c:	d0aa      	beq.n	80122b4 <_printf_i+0x12c>
 801235e:	6823      	ldr	r3, [r4, #0]
 8012360:	079b      	lsls	r3, r3, #30
 8012362:	d413      	bmi.n	801238c <_printf_i+0x204>
 8012364:	68e0      	ldr	r0, [r4, #12]
 8012366:	9b03      	ldr	r3, [sp, #12]
 8012368:	4298      	cmp	r0, r3
 801236a:	bfb8      	it	lt
 801236c:	4618      	movlt	r0, r3
 801236e:	e7a3      	b.n	80122b8 <_printf_i+0x130>
 8012370:	2301      	movs	r3, #1
 8012372:	464a      	mov	r2, r9
 8012374:	4639      	mov	r1, r7
 8012376:	4630      	mov	r0, r6
 8012378:	47c0      	blx	r8
 801237a:	3001      	adds	r0, #1
 801237c:	d09a      	beq.n	80122b4 <_printf_i+0x12c>
 801237e:	3501      	adds	r5, #1
 8012380:	68e3      	ldr	r3, [r4, #12]
 8012382:	9a03      	ldr	r2, [sp, #12]
 8012384:	1a9b      	subs	r3, r3, r2
 8012386:	42ab      	cmp	r3, r5
 8012388:	dcf2      	bgt.n	8012370 <_printf_i+0x1e8>
 801238a:	e7eb      	b.n	8012364 <_printf_i+0x1dc>
 801238c:	2500      	movs	r5, #0
 801238e:	f104 0919 	add.w	r9, r4, #25
 8012392:	e7f5      	b.n	8012380 <_printf_i+0x1f8>
 8012394:	2b00      	cmp	r3, #0
 8012396:	d1ac      	bne.n	80122f2 <_printf_i+0x16a>
 8012398:	7803      	ldrb	r3, [r0, #0]
 801239a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801239e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123a2:	e76c      	b.n	801227e <_printf_i+0xf6>
 80123a4:	080140bc 	.word	0x080140bc
 80123a8:	080140cd 	.word	0x080140cd

080123ac <_sbrk_r>:
 80123ac:	b538      	push	{r3, r4, r5, lr}
 80123ae:	4c06      	ldr	r4, [pc, #24]	; (80123c8 <_sbrk_r+0x1c>)
 80123b0:	2300      	movs	r3, #0
 80123b2:	4605      	mov	r5, r0
 80123b4:	4608      	mov	r0, r1
 80123b6:	6023      	str	r3, [r4, #0]
 80123b8:	f7f0 fd5a 	bl	8002e70 <_sbrk>
 80123bc:	1c43      	adds	r3, r0, #1
 80123be:	d102      	bne.n	80123c6 <_sbrk_r+0x1a>
 80123c0:	6823      	ldr	r3, [r4, #0]
 80123c2:	b103      	cbz	r3, 80123c6 <_sbrk_r+0x1a>
 80123c4:	602b      	str	r3, [r5, #0]
 80123c6:	bd38      	pop	{r3, r4, r5, pc}
 80123c8:	2000cf90 	.word	0x2000cf90

080123cc <__malloc_lock>:
 80123cc:	4770      	bx	lr

080123ce <__malloc_unlock>:
 80123ce:	4770      	bx	lr

080123d0 <_free_r>:
 80123d0:	b538      	push	{r3, r4, r5, lr}
 80123d2:	4605      	mov	r5, r0
 80123d4:	2900      	cmp	r1, #0
 80123d6:	d045      	beq.n	8012464 <_free_r+0x94>
 80123d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123dc:	1f0c      	subs	r4, r1, #4
 80123de:	2b00      	cmp	r3, #0
 80123e0:	bfb8      	it	lt
 80123e2:	18e4      	addlt	r4, r4, r3
 80123e4:	f7ff fff2 	bl	80123cc <__malloc_lock>
 80123e8:	4a1f      	ldr	r2, [pc, #124]	; (8012468 <_free_r+0x98>)
 80123ea:	6813      	ldr	r3, [r2, #0]
 80123ec:	4610      	mov	r0, r2
 80123ee:	b933      	cbnz	r3, 80123fe <_free_r+0x2e>
 80123f0:	6063      	str	r3, [r4, #4]
 80123f2:	6014      	str	r4, [r2, #0]
 80123f4:	4628      	mov	r0, r5
 80123f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123fa:	f7ff bfe8 	b.w	80123ce <__malloc_unlock>
 80123fe:	42a3      	cmp	r3, r4
 8012400:	d90c      	bls.n	801241c <_free_r+0x4c>
 8012402:	6821      	ldr	r1, [r4, #0]
 8012404:	1862      	adds	r2, r4, r1
 8012406:	4293      	cmp	r3, r2
 8012408:	bf04      	itt	eq
 801240a:	681a      	ldreq	r2, [r3, #0]
 801240c:	685b      	ldreq	r3, [r3, #4]
 801240e:	6063      	str	r3, [r4, #4]
 8012410:	bf04      	itt	eq
 8012412:	1852      	addeq	r2, r2, r1
 8012414:	6022      	streq	r2, [r4, #0]
 8012416:	6004      	str	r4, [r0, #0]
 8012418:	e7ec      	b.n	80123f4 <_free_r+0x24>
 801241a:	4613      	mov	r3, r2
 801241c:	685a      	ldr	r2, [r3, #4]
 801241e:	b10a      	cbz	r2, 8012424 <_free_r+0x54>
 8012420:	42a2      	cmp	r2, r4
 8012422:	d9fa      	bls.n	801241a <_free_r+0x4a>
 8012424:	6819      	ldr	r1, [r3, #0]
 8012426:	1858      	adds	r0, r3, r1
 8012428:	42a0      	cmp	r0, r4
 801242a:	d10b      	bne.n	8012444 <_free_r+0x74>
 801242c:	6820      	ldr	r0, [r4, #0]
 801242e:	4401      	add	r1, r0
 8012430:	1858      	adds	r0, r3, r1
 8012432:	4282      	cmp	r2, r0
 8012434:	6019      	str	r1, [r3, #0]
 8012436:	d1dd      	bne.n	80123f4 <_free_r+0x24>
 8012438:	6810      	ldr	r0, [r2, #0]
 801243a:	6852      	ldr	r2, [r2, #4]
 801243c:	605a      	str	r2, [r3, #4]
 801243e:	4401      	add	r1, r0
 8012440:	6019      	str	r1, [r3, #0]
 8012442:	e7d7      	b.n	80123f4 <_free_r+0x24>
 8012444:	d902      	bls.n	801244c <_free_r+0x7c>
 8012446:	230c      	movs	r3, #12
 8012448:	602b      	str	r3, [r5, #0]
 801244a:	e7d3      	b.n	80123f4 <_free_r+0x24>
 801244c:	6820      	ldr	r0, [r4, #0]
 801244e:	1821      	adds	r1, r4, r0
 8012450:	428a      	cmp	r2, r1
 8012452:	bf04      	itt	eq
 8012454:	6811      	ldreq	r1, [r2, #0]
 8012456:	6852      	ldreq	r2, [r2, #4]
 8012458:	6062      	str	r2, [r4, #4]
 801245a:	bf04      	itt	eq
 801245c:	1809      	addeq	r1, r1, r0
 801245e:	6021      	streq	r1, [r4, #0]
 8012460:	605c      	str	r4, [r3, #4]
 8012462:	e7c7      	b.n	80123f4 <_free_r+0x24>
 8012464:	bd38      	pop	{r3, r4, r5, pc}
 8012466:	bf00      	nop
 8012468:	20000468 	.word	0x20000468

0801246c <_realloc_r>:
 801246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801246e:	4607      	mov	r7, r0
 8012470:	4614      	mov	r4, r2
 8012472:	460e      	mov	r6, r1
 8012474:	b921      	cbnz	r1, 8012480 <_realloc_r+0x14>
 8012476:	4611      	mov	r1, r2
 8012478:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801247c:	f7ff bc62 	b.w	8011d44 <_malloc_r>
 8012480:	b922      	cbnz	r2, 801248c <_realloc_r+0x20>
 8012482:	f7ff ffa5 	bl	80123d0 <_free_r>
 8012486:	4625      	mov	r5, r4
 8012488:	4628      	mov	r0, r5
 801248a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801248c:	f000 f814 	bl	80124b8 <_malloc_usable_size_r>
 8012490:	42a0      	cmp	r0, r4
 8012492:	d20f      	bcs.n	80124b4 <_realloc_r+0x48>
 8012494:	4621      	mov	r1, r4
 8012496:	4638      	mov	r0, r7
 8012498:	f7ff fc54 	bl	8011d44 <_malloc_r>
 801249c:	4605      	mov	r5, r0
 801249e:	2800      	cmp	r0, #0
 80124a0:	d0f2      	beq.n	8012488 <_realloc_r+0x1c>
 80124a2:	4631      	mov	r1, r6
 80124a4:	4622      	mov	r2, r4
 80124a6:	f7ff f8fd 	bl	80116a4 <memcpy>
 80124aa:	4631      	mov	r1, r6
 80124ac:	4638      	mov	r0, r7
 80124ae:	f7ff ff8f 	bl	80123d0 <_free_r>
 80124b2:	e7e9      	b.n	8012488 <_realloc_r+0x1c>
 80124b4:	4635      	mov	r5, r6
 80124b6:	e7e7      	b.n	8012488 <_realloc_r+0x1c>

080124b8 <_malloc_usable_size_r>:
 80124b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124bc:	1f18      	subs	r0, r3, #4
 80124be:	2b00      	cmp	r3, #0
 80124c0:	bfbc      	itt	lt
 80124c2:	580b      	ldrlt	r3, [r1, r0]
 80124c4:	18c0      	addlt	r0, r0, r3
 80124c6:	4770      	bx	lr

080124c8 <pow>:
 80124c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124cc:	ed2d 8b04 	vpush	{d8-d9}
 80124d0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80127a4 <pow+0x2dc>
 80124d4:	b08d      	sub	sp, #52	; 0x34
 80124d6:	ec57 6b10 	vmov	r6, r7, d0
 80124da:	ec55 4b11 	vmov	r4, r5, d1
 80124de:	f000 f963 	bl	80127a8 <__ieee754_pow>
 80124e2:	f999 3000 	ldrsb.w	r3, [r9]
 80124e6:	9300      	str	r3, [sp, #0]
 80124e8:	3301      	adds	r3, #1
 80124ea:	eeb0 8a40 	vmov.f32	s16, s0
 80124ee:	eef0 8a60 	vmov.f32	s17, s1
 80124f2:	46c8      	mov	r8, r9
 80124f4:	d05f      	beq.n	80125b6 <pow+0xee>
 80124f6:	4622      	mov	r2, r4
 80124f8:	462b      	mov	r3, r5
 80124fa:	4620      	mov	r0, r4
 80124fc:	4629      	mov	r1, r5
 80124fe:	f7ee fb2d 	bl	8000b5c <__aeabi_dcmpun>
 8012502:	4683      	mov	fp, r0
 8012504:	2800      	cmp	r0, #0
 8012506:	d156      	bne.n	80125b6 <pow+0xee>
 8012508:	4632      	mov	r2, r6
 801250a:	463b      	mov	r3, r7
 801250c:	4630      	mov	r0, r6
 801250e:	4639      	mov	r1, r7
 8012510:	f7ee fb24 	bl	8000b5c <__aeabi_dcmpun>
 8012514:	9001      	str	r0, [sp, #4]
 8012516:	b1e8      	cbz	r0, 8012554 <pow+0x8c>
 8012518:	2200      	movs	r2, #0
 801251a:	2300      	movs	r3, #0
 801251c:	4620      	mov	r0, r4
 801251e:	4629      	mov	r1, r5
 8012520:	f7ee faea 	bl	8000af8 <__aeabi_dcmpeq>
 8012524:	2800      	cmp	r0, #0
 8012526:	d046      	beq.n	80125b6 <pow+0xee>
 8012528:	2301      	movs	r3, #1
 801252a:	9302      	str	r3, [sp, #8]
 801252c:	4b96      	ldr	r3, [pc, #600]	; (8012788 <pow+0x2c0>)
 801252e:	9303      	str	r3, [sp, #12]
 8012530:	4b96      	ldr	r3, [pc, #600]	; (801278c <pow+0x2c4>)
 8012532:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8012536:	2200      	movs	r2, #0
 8012538:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801253c:	9b00      	ldr	r3, [sp, #0]
 801253e:	2b02      	cmp	r3, #2
 8012540:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012544:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012548:	d033      	beq.n	80125b2 <pow+0xea>
 801254a:	a802      	add	r0, sp, #8
 801254c:	f000 fefb 	bl	8013346 <matherr>
 8012550:	bb48      	cbnz	r0, 80125a6 <pow+0xde>
 8012552:	e05d      	b.n	8012610 <pow+0x148>
 8012554:	f04f 0a00 	mov.w	sl, #0
 8012558:	f04f 0b00 	mov.w	fp, #0
 801255c:	4652      	mov	r2, sl
 801255e:	465b      	mov	r3, fp
 8012560:	4630      	mov	r0, r6
 8012562:	4639      	mov	r1, r7
 8012564:	f7ee fac8 	bl	8000af8 <__aeabi_dcmpeq>
 8012568:	ec4b ab19 	vmov	d9, sl, fp
 801256c:	2800      	cmp	r0, #0
 801256e:	d054      	beq.n	801261a <pow+0x152>
 8012570:	4652      	mov	r2, sl
 8012572:	465b      	mov	r3, fp
 8012574:	4620      	mov	r0, r4
 8012576:	4629      	mov	r1, r5
 8012578:	f7ee fabe 	bl	8000af8 <__aeabi_dcmpeq>
 801257c:	4680      	mov	r8, r0
 801257e:	b318      	cbz	r0, 80125c8 <pow+0x100>
 8012580:	2301      	movs	r3, #1
 8012582:	9302      	str	r3, [sp, #8]
 8012584:	4b80      	ldr	r3, [pc, #512]	; (8012788 <pow+0x2c0>)
 8012586:	9303      	str	r3, [sp, #12]
 8012588:	9b01      	ldr	r3, [sp, #4]
 801258a:	930a      	str	r3, [sp, #40]	; 0x28
 801258c:	9b00      	ldr	r3, [sp, #0]
 801258e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012592:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012596:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d0d5      	beq.n	801254a <pow+0x82>
 801259e:	4b7b      	ldr	r3, [pc, #492]	; (801278c <pow+0x2c4>)
 80125a0:	2200      	movs	r2, #0
 80125a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80125a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125a8:	b11b      	cbz	r3, 80125b2 <pow+0xea>
 80125aa:	f7ff f82d 	bl	8011608 <__errno>
 80125ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125b0:	6003      	str	r3, [r0, #0]
 80125b2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80125b6:	eeb0 0a48 	vmov.f32	s0, s16
 80125ba:	eef0 0a68 	vmov.f32	s1, s17
 80125be:	b00d      	add	sp, #52	; 0x34
 80125c0:	ecbd 8b04 	vpop	{d8-d9}
 80125c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125c8:	ec45 4b10 	vmov	d0, r4, r5
 80125cc:	f000 feb3 	bl	8013336 <finite>
 80125d0:	2800      	cmp	r0, #0
 80125d2:	d0f0      	beq.n	80125b6 <pow+0xee>
 80125d4:	4652      	mov	r2, sl
 80125d6:	465b      	mov	r3, fp
 80125d8:	4620      	mov	r0, r4
 80125da:	4629      	mov	r1, r5
 80125dc:	f7ee fa96 	bl	8000b0c <__aeabi_dcmplt>
 80125e0:	2800      	cmp	r0, #0
 80125e2:	d0e8      	beq.n	80125b6 <pow+0xee>
 80125e4:	2301      	movs	r3, #1
 80125e6:	9302      	str	r3, [sp, #8]
 80125e8:	4b67      	ldr	r3, [pc, #412]	; (8012788 <pow+0x2c0>)
 80125ea:	9303      	str	r3, [sp, #12]
 80125ec:	f999 3000 	ldrsb.w	r3, [r9]
 80125f0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80125f4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80125f8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80125fc:	b913      	cbnz	r3, 8012604 <pow+0x13c>
 80125fe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012602:	e7a2      	b.n	801254a <pow+0x82>
 8012604:	4962      	ldr	r1, [pc, #392]	; (8012790 <pow+0x2c8>)
 8012606:	2000      	movs	r0, #0
 8012608:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801260c:	2b02      	cmp	r3, #2
 801260e:	d19c      	bne.n	801254a <pow+0x82>
 8012610:	f7fe fffa 	bl	8011608 <__errno>
 8012614:	2321      	movs	r3, #33	; 0x21
 8012616:	6003      	str	r3, [r0, #0]
 8012618:	e7c5      	b.n	80125a6 <pow+0xde>
 801261a:	eeb0 0a48 	vmov.f32	s0, s16
 801261e:	eef0 0a68 	vmov.f32	s1, s17
 8012622:	f000 fe88 	bl	8013336 <finite>
 8012626:	9000      	str	r0, [sp, #0]
 8012628:	2800      	cmp	r0, #0
 801262a:	f040 8081 	bne.w	8012730 <pow+0x268>
 801262e:	ec47 6b10 	vmov	d0, r6, r7
 8012632:	f000 fe80 	bl	8013336 <finite>
 8012636:	2800      	cmp	r0, #0
 8012638:	d07a      	beq.n	8012730 <pow+0x268>
 801263a:	ec45 4b10 	vmov	d0, r4, r5
 801263e:	f000 fe7a 	bl	8013336 <finite>
 8012642:	2800      	cmp	r0, #0
 8012644:	d074      	beq.n	8012730 <pow+0x268>
 8012646:	ec53 2b18 	vmov	r2, r3, d8
 801264a:	ee18 0a10 	vmov	r0, s16
 801264e:	4619      	mov	r1, r3
 8012650:	f7ee fa84 	bl	8000b5c <__aeabi_dcmpun>
 8012654:	f999 9000 	ldrsb.w	r9, [r9]
 8012658:	4b4b      	ldr	r3, [pc, #300]	; (8012788 <pow+0x2c0>)
 801265a:	b1b0      	cbz	r0, 801268a <pow+0x1c2>
 801265c:	2201      	movs	r2, #1
 801265e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012662:	9b00      	ldr	r3, [sp, #0]
 8012664:	930a      	str	r3, [sp, #40]	; 0x28
 8012666:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801266a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801266e:	f1b9 0f00 	cmp.w	r9, #0
 8012672:	d0c4      	beq.n	80125fe <pow+0x136>
 8012674:	4652      	mov	r2, sl
 8012676:	465b      	mov	r3, fp
 8012678:	4650      	mov	r0, sl
 801267a:	4659      	mov	r1, fp
 801267c:	f7ee f8fe 	bl	800087c <__aeabi_ddiv>
 8012680:	f1b9 0f02 	cmp.w	r9, #2
 8012684:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012688:	e7c1      	b.n	801260e <pow+0x146>
 801268a:	2203      	movs	r2, #3
 801268c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012690:	900a      	str	r0, [sp, #40]	; 0x28
 8012692:	4629      	mov	r1, r5
 8012694:	4620      	mov	r0, r4
 8012696:	2200      	movs	r2, #0
 8012698:	4b3e      	ldr	r3, [pc, #248]	; (8012794 <pow+0x2cc>)
 801269a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801269e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80126a2:	f7ed ffc1 	bl	8000628 <__aeabi_dmul>
 80126a6:	4604      	mov	r4, r0
 80126a8:	460d      	mov	r5, r1
 80126aa:	f1b9 0f00 	cmp.w	r9, #0
 80126ae:	d124      	bne.n	80126fa <pow+0x232>
 80126b0:	4b39      	ldr	r3, [pc, #228]	; (8012798 <pow+0x2d0>)
 80126b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80126b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80126ba:	4630      	mov	r0, r6
 80126bc:	4652      	mov	r2, sl
 80126be:	465b      	mov	r3, fp
 80126c0:	4639      	mov	r1, r7
 80126c2:	f7ee fa23 	bl	8000b0c <__aeabi_dcmplt>
 80126c6:	2800      	cmp	r0, #0
 80126c8:	d056      	beq.n	8012778 <pow+0x2b0>
 80126ca:	ec45 4b10 	vmov	d0, r4, r5
 80126ce:	f000 fe47 	bl	8013360 <rint>
 80126d2:	4622      	mov	r2, r4
 80126d4:	462b      	mov	r3, r5
 80126d6:	ec51 0b10 	vmov	r0, r1, d0
 80126da:	f7ee fa0d 	bl	8000af8 <__aeabi_dcmpeq>
 80126de:	b920      	cbnz	r0, 80126ea <pow+0x222>
 80126e0:	4b2e      	ldr	r3, [pc, #184]	; (801279c <pow+0x2d4>)
 80126e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80126e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80126ea:	f998 3000 	ldrsb.w	r3, [r8]
 80126ee:	2b02      	cmp	r3, #2
 80126f0:	d142      	bne.n	8012778 <pow+0x2b0>
 80126f2:	f7fe ff89 	bl	8011608 <__errno>
 80126f6:	2322      	movs	r3, #34	; 0x22
 80126f8:	e78d      	b.n	8012616 <pow+0x14e>
 80126fa:	4b29      	ldr	r3, [pc, #164]	; (80127a0 <pow+0x2d8>)
 80126fc:	2200      	movs	r2, #0
 80126fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012702:	4630      	mov	r0, r6
 8012704:	4652      	mov	r2, sl
 8012706:	465b      	mov	r3, fp
 8012708:	4639      	mov	r1, r7
 801270a:	f7ee f9ff 	bl	8000b0c <__aeabi_dcmplt>
 801270e:	2800      	cmp	r0, #0
 8012710:	d0eb      	beq.n	80126ea <pow+0x222>
 8012712:	ec45 4b10 	vmov	d0, r4, r5
 8012716:	f000 fe23 	bl	8013360 <rint>
 801271a:	4622      	mov	r2, r4
 801271c:	462b      	mov	r3, r5
 801271e:	ec51 0b10 	vmov	r0, r1, d0
 8012722:	f7ee f9e9 	bl	8000af8 <__aeabi_dcmpeq>
 8012726:	2800      	cmp	r0, #0
 8012728:	d1df      	bne.n	80126ea <pow+0x222>
 801272a:	2200      	movs	r2, #0
 801272c:	4b18      	ldr	r3, [pc, #96]	; (8012790 <pow+0x2c8>)
 801272e:	e7da      	b.n	80126e6 <pow+0x21e>
 8012730:	2200      	movs	r2, #0
 8012732:	2300      	movs	r3, #0
 8012734:	ec51 0b18 	vmov	r0, r1, d8
 8012738:	f7ee f9de 	bl	8000af8 <__aeabi_dcmpeq>
 801273c:	2800      	cmp	r0, #0
 801273e:	f43f af3a 	beq.w	80125b6 <pow+0xee>
 8012742:	ec47 6b10 	vmov	d0, r6, r7
 8012746:	f000 fdf6 	bl	8013336 <finite>
 801274a:	2800      	cmp	r0, #0
 801274c:	f43f af33 	beq.w	80125b6 <pow+0xee>
 8012750:	ec45 4b10 	vmov	d0, r4, r5
 8012754:	f000 fdef 	bl	8013336 <finite>
 8012758:	2800      	cmp	r0, #0
 801275a:	f43f af2c 	beq.w	80125b6 <pow+0xee>
 801275e:	2304      	movs	r3, #4
 8012760:	9302      	str	r3, [sp, #8]
 8012762:	4b09      	ldr	r3, [pc, #36]	; (8012788 <pow+0x2c0>)
 8012764:	9303      	str	r3, [sp, #12]
 8012766:	2300      	movs	r3, #0
 8012768:	930a      	str	r3, [sp, #40]	; 0x28
 801276a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801276e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012772:	ed8d 9b08 	vstr	d9, [sp, #32]
 8012776:	e7b8      	b.n	80126ea <pow+0x222>
 8012778:	a802      	add	r0, sp, #8
 801277a:	f000 fde4 	bl	8013346 <matherr>
 801277e:	2800      	cmp	r0, #0
 8012780:	f47f af11 	bne.w	80125a6 <pow+0xde>
 8012784:	e7b5      	b.n	80126f2 <pow+0x22a>
 8012786:	bf00      	nop
 8012788:	080140de 	.word	0x080140de
 801278c:	3ff00000 	.word	0x3ff00000
 8012790:	fff00000 	.word	0xfff00000
 8012794:	3fe00000 	.word	0x3fe00000
 8012798:	47efffff 	.word	0x47efffff
 801279c:	c7efffff 	.word	0xc7efffff
 80127a0:	7ff00000 	.word	0x7ff00000
 80127a4:	200001f4 	.word	0x200001f4

080127a8 <__ieee754_pow>:
 80127a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ac:	b091      	sub	sp, #68	; 0x44
 80127ae:	ed8d 1b00 	vstr	d1, [sp]
 80127b2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80127b6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80127ba:	ea58 0302 	orrs.w	r3, r8, r2
 80127be:	ec57 6b10 	vmov	r6, r7, d0
 80127c2:	f000 84be 	beq.w	8013142 <__ieee754_pow+0x99a>
 80127c6:	4b7a      	ldr	r3, [pc, #488]	; (80129b0 <__ieee754_pow+0x208>)
 80127c8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80127cc:	429c      	cmp	r4, r3
 80127ce:	463d      	mov	r5, r7
 80127d0:	ee10 aa10 	vmov	sl, s0
 80127d4:	dc09      	bgt.n	80127ea <__ieee754_pow+0x42>
 80127d6:	d103      	bne.n	80127e0 <__ieee754_pow+0x38>
 80127d8:	b93e      	cbnz	r6, 80127ea <__ieee754_pow+0x42>
 80127da:	45a0      	cmp	r8, r4
 80127dc:	dc0d      	bgt.n	80127fa <__ieee754_pow+0x52>
 80127de:	e001      	b.n	80127e4 <__ieee754_pow+0x3c>
 80127e0:	4598      	cmp	r8, r3
 80127e2:	dc02      	bgt.n	80127ea <__ieee754_pow+0x42>
 80127e4:	4598      	cmp	r8, r3
 80127e6:	d10e      	bne.n	8012806 <__ieee754_pow+0x5e>
 80127e8:	b16a      	cbz	r2, 8012806 <__ieee754_pow+0x5e>
 80127ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80127ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80127f2:	ea54 030a 	orrs.w	r3, r4, sl
 80127f6:	f000 84a4 	beq.w	8013142 <__ieee754_pow+0x99a>
 80127fa:	486e      	ldr	r0, [pc, #440]	; (80129b4 <__ieee754_pow+0x20c>)
 80127fc:	b011      	add	sp, #68	; 0x44
 80127fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012802:	f000 bda5 	b.w	8013350 <nan>
 8012806:	2d00      	cmp	r5, #0
 8012808:	da53      	bge.n	80128b2 <__ieee754_pow+0x10a>
 801280a:	4b6b      	ldr	r3, [pc, #428]	; (80129b8 <__ieee754_pow+0x210>)
 801280c:	4598      	cmp	r8, r3
 801280e:	dc4d      	bgt.n	80128ac <__ieee754_pow+0x104>
 8012810:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012814:	4598      	cmp	r8, r3
 8012816:	dd4c      	ble.n	80128b2 <__ieee754_pow+0x10a>
 8012818:	ea4f 5328 	mov.w	r3, r8, asr #20
 801281c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012820:	2b14      	cmp	r3, #20
 8012822:	dd26      	ble.n	8012872 <__ieee754_pow+0xca>
 8012824:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012828:	fa22 f103 	lsr.w	r1, r2, r3
 801282c:	fa01 f303 	lsl.w	r3, r1, r3
 8012830:	4293      	cmp	r3, r2
 8012832:	d13e      	bne.n	80128b2 <__ieee754_pow+0x10a>
 8012834:	f001 0101 	and.w	r1, r1, #1
 8012838:	f1c1 0b02 	rsb	fp, r1, #2
 801283c:	2a00      	cmp	r2, #0
 801283e:	d15b      	bne.n	80128f8 <__ieee754_pow+0x150>
 8012840:	4b5b      	ldr	r3, [pc, #364]	; (80129b0 <__ieee754_pow+0x208>)
 8012842:	4598      	cmp	r8, r3
 8012844:	d124      	bne.n	8012890 <__ieee754_pow+0xe8>
 8012846:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801284a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801284e:	ea53 030a 	orrs.w	r3, r3, sl
 8012852:	f000 8476 	beq.w	8013142 <__ieee754_pow+0x99a>
 8012856:	4b59      	ldr	r3, [pc, #356]	; (80129bc <__ieee754_pow+0x214>)
 8012858:	429c      	cmp	r4, r3
 801285a:	dd2d      	ble.n	80128b8 <__ieee754_pow+0x110>
 801285c:	f1b9 0f00 	cmp.w	r9, #0
 8012860:	f280 8473 	bge.w	801314a <__ieee754_pow+0x9a2>
 8012864:	2000      	movs	r0, #0
 8012866:	2100      	movs	r1, #0
 8012868:	ec41 0b10 	vmov	d0, r0, r1
 801286c:	b011      	add	sp, #68	; 0x44
 801286e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012872:	2a00      	cmp	r2, #0
 8012874:	d13e      	bne.n	80128f4 <__ieee754_pow+0x14c>
 8012876:	f1c3 0314 	rsb	r3, r3, #20
 801287a:	fa48 f103 	asr.w	r1, r8, r3
 801287e:	fa01 f303 	lsl.w	r3, r1, r3
 8012882:	4543      	cmp	r3, r8
 8012884:	f040 8469 	bne.w	801315a <__ieee754_pow+0x9b2>
 8012888:	f001 0101 	and.w	r1, r1, #1
 801288c:	f1c1 0b02 	rsb	fp, r1, #2
 8012890:	4b4b      	ldr	r3, [pc, #300]	; (80129c0 <__ieee754_pow+0x218>)
 8012892:	4598      	cmp	r8, r3
 8012894:	d118      	bne.n	80128c8 <__ieee754_pow+0x120>
 8012896:	f1b9 0f00 	cmp.w	r9, #0
 801289a:	f280 845a 	bge.w	8013152 <__ieee754_pow+0x9aa>
 801289e:	4948      	ldr	r1, [pc, #288]	; (80129c0 <__ieee754_pow+0x218>)
 80128a0:	4632      	mov	r2, r6
 80128a2:	463b      	mov	r3, r7
 80128a4:	2000      	movs	r0, #0
 80128a6:	f7ed ffe9 	bl	800087c <__aeabi_ddiv>
 80128aa:	e7dd      	b.n	8012868 <__ieee754_pow+0xc0>
 80128ac:	f04f 0b02 	mov.w	fp, #2
 80128b0:	e7c4      	b.n	801283c <__ieee754_pow+0x94>
 80128b2:	f04f 0b00 	mov.w	fp, #0
 80128b6:	e7c1      	b.n	801283c <__ieee754_pow+0x94>
 80128b8:	f1b9 0f00 	cmp.w	r9, #0
 80128bc:	dad2      	bge.n	8012864 <__ieee754_pow+0xbc>
 80128be:	e9dd 0300 	ldrd	r0, r3, [sp]
 80128c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80128c6:	e7cf      	b.n	8012868 <__ieee754_pow+0xc0>
 80128c8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80128cc:	d106      	bne.n	80128dc <__ieee754_pow+0x134>
 80128ce:	4632      	mov	r2, r6
 80128d0:	463b      	mov	r3, r7
 80128d2:	4610      	mov	r0, r2
 80128d4:	4619      	mov	r1, r3
 80128d6:	f7ed fea7 	bl	8000628 <__aeabi_dmul>
 80128da:	e7c5      	b.n	8012868 <__ieee754_pow+0xc0>
 80128dc:	4b39      	ldr	r3, [pc, #228]	; (80129c4 <__ieee754_pow+0x21c>)
 80128de:	4599      	cmp	r9, r3
 80128e0:	d10a      	bne.n	80128f8 <__ieee754_pow+0x150>
 80128e2:	2d00      	cmp	r5, #0
 80128e4:	db08      	blt.n	80128f8 <__ieee754_pow+0x150>
 80128e6:	ec47 6b10 	vmov	d0, r6, r7
 80128ea:	b011      	add	sp, #68	; 0x44
 80128ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128f0:	f000 bc68 	b.w	80131c4 <__ieee754_sqrt>
 80128f4:	f04f 0b00 	mov.w	fp, #0
 80128f8:	ec47 6b10 	vmov	d0, r6, r7
 80128fc:	f000 fd12 	bl	8013324 <fabs>
 8012900:	ec51 0b10 	vmov	r0, r1, d0
 8012904:	f1ba 0f00 	cmp.w	sl, #0
 8012908:	d127      	bne.n	801295a <__ieee754_pow+0x1b2>
 801290a:	b124      	cbz	r4, 8012916 <__ieee754_pow+0x16e>
 801290c:	4b2c      	ldr	r3, [pc, #176]	; (80129c0 <__ieee754_pow+0x218>)
 801290e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012912:	429a      	cmp	r2, r3
 8012914:	d121      	bne.n	801295a <__ieee754_pow+0x1b2>
 8012916:	f1b9 0f00 	cmp.w	r9, #0
 801291a:	da05      	bge.n	8012928 <__ieee754_pow+0x180>
 801291c:	4602      	mov	r2, r0
 801291e:	460b      	mov	r3, r1
 8012920:	2000      	movs	r0, #0
 8012922:	4927      	ldr	r1, [pc, #156]	; (80129c0 <__ieee754_pow+0x218>)
 8012924:	f7ed ffaa 	bl	800087c <__aeabi_ddiv>
 8012928:	2d00      	cmp	r5, #0
 801292a:	da9d      	bge.n	8012868 <__ieee754_pow+0xc0>
 801292c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012930:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012934:	ea54 030b 	orrs.w	r3, r4, fp
 8012938:	d108      	bne.n	801294c <__ieee754_pow+0x1a4>
 801293a:	4602      	mov	r2, r0
 801293c:	460b      	mov	r3, r1
 801293e:	4610      	mov	r0, r2
 8012940:	4619      	mov	r1, r3
 8012942:	f7ed fcb9 	bl	80002b8 <__aeabi_dsub>
 8012946:	4602      	mov	r2, r0
 8012948:	460b      	mov	r3, r1
 801294a:	e7ac      	b.n	80128a6 <__ieee754_pow+0xfe>
 801294c:	f1bb 0f01 	cmp.w	fp, #1
 8012950:	d18a      	bne.n	8012868 <__ieee754_pow+0xc0>
 8012952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012956:	4619      	mov	r1, r3
 8012958:	e786      	b.n	8012868 <__ieee754_pow+0xc0>
 801295a:	0fed      	lsrs	r5, r5, #31
 801295c:	1e6b      	subs	r3, r5, #1
 801295e:	930d      	str	r3, [sp, #52]	; 0x34
 8012960:	ea5b 0303 	orrs.w	r3, fp, r3
 8012964:	d102      	bne.n	801296c <__ieee754_pow+0x1c4>
 8012966:	4632      	mov	r2, r6
 8012968:	463b      	mov	r3, r7
 801296a:	e7e8      	b.n	801293e <__ieee754_pow+0x196>
 801296c:	4b16      	ldr	r3, [pc, #88]	; (80129c8 <__ieee754_pow+0x220>)
 801296e:	4598      	cmp	r8, r3
 8012970:	f340 80fe 	ble.w	8012b70 <__ieee754_pow+0x3c8>
 8012974:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012978:	4598      	cmp	r8, r3
 801297a:	dd0a      	ble.n	8012992 <__ieee754_pow+0x1ea>
 801297c:	4b0f      	ldr	r3, [pc, #60]	; (80129bc <__ieee754_pow+0x214>)
 801297e:	429c      	cmp	r4, r3
 8012980:	dc0d      	bgt.n	801299e <__ieee754_pow+0x1f6>
 8012982:	f1b9 0f00 	cmp.w	r9, #0
 8012986:	f6bf af6d 	bge.w	8012864 <__ieee754_pow+0xbc>
 801298a:	a307      	add	r3, pc, #28	; (adr r3, 80129a8 <__ieee754_pow+0x200>)
 801298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012990:	e79f      	b.n	80128d2 <__ieee754_pow+0x12a>
 8012992:	4b0e      	ldr	r3, [pc, #56]	; (80129cc <__ieee754_pow+0x224>)
 8012994:	429c      	cmp	r4, r3
 8012996:	ddf4      	ble.n	8012982 <__ieee754_pow+0x1da>
 8012998:	4b09      	ldr	r3, [pc, #36]	; (80129c0 <__ieee754_pow+0x218>)
 801299a:	429c      	cmp	r4, r3
 801299c:	dd18      	ble.n	80129d0 <__ieee754_pow+0x228>
 801299e:	f1b9 0f00 	cmp.w	r9, #0
 80129a2:	dcf2      	bgt.n	801298a <__ieee754_pow+0x1e2>
 80129a4:	e75e      	b.n	8012864 <__ieee754_pow+0xbc>
 80129a6:	bf00      	nop
 80129a8:	8800759c 	.word	0x8800759c
 80129ac:	7e37e43c 	.word	0x7e37e43c
 80129b0:	7ff00000 	.word	0x7ff00000
 80129b4:	080140b0 	.word	0x080140b0
 80129b8:	433fffff 	.word	0x433fffff
 80129bc:	3fefffff 	.word	0x3fefffff
 80129c0:	3ff00000 	.word	0x3ff00000
 80129c4:	3fe00000 	.word	0x3fe00000
 80129c8:	41e00000 	.word	0x41e00000
 80129cc:	3feffffe 	.word	0x3feffffe
 80129d0:	2200      	movs	r2, #0
 80129d2:	4b63      	ldr	r3, [pc, #396]	; (8012b60 <__ieee754_pow+0x3b8>)
 80129d4:	f7ed fc70 	bl	80002b8 <__aeabi_dsub>
 80129d8:	a355      	add	r3, pc, #340	; (adr r3, 8012b30 <__ieee754_pow+0x388>)
 80129da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129de:	4604      	mov	r4, r0
 80129e0:	460d      	mov	r5, r1
 80129e2:	f7ed fe21 	bl	8000628 <__aeabi_dmul>
 80129e6:	a354      	add	r3, pc, #336	; (adr r3, 8012b38 <__ieee754_pow+0x390>)
 80129e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ec:	4606      	mov	r6, r0
 80129ee:	460f      	mov	r7, r1
 80129f0:	4620      	mov	r0, r4
 80129f2:	4629      	mov	r1, r5
 80129f4:	f7ed fe18 	bl	8000628 <__aeabi_dmul>
 80129f8:	2200      	movs	r2, #0
 80129fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129fe:	4b59      	ldr	r3, [pc, #356]	; (8012b64 <__ieee754_pow+0x3bc>)
 8012a00:	4620      	mov	r0, r4
 8012a02:	4629      	mov	r1, r5
 8012a04:	f7ed fe10 	bl	8000628 <__aeabi_dmul>
 8012a08:	4602      	mov	r2, r0
 8012a0a:	460b      	mov	r3, r1
 8012a0c:	a14c      	add	r1, pc, #304	; (adr r1, 8012b40 <__ieee754_pow+0x398>)
 8012a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a12:	f7ed fc51 	bl	80002b8 <__aeabi_dsub>
 8012a16:	4622      	mov	r2, r4
 8012a18:	462b      	mov	r3, r5
 8012a1a:	f7ed fe05 	bl	8000628 <__aeabi_dmul>
 8012a1e:	4602      	mov	r2, r0
 8012a20:	460b      	mov	r3, r1
 8012a22:	2000      	movs	r0, #0
 8012a24:	4950      	ldr	r1, [pc, #320]	; (8012b68 <__ieee754_pow+0x3c0>)
 8012a26:	f7ed fc47 	bl	80002b8 <__aeabi_dsub>
 8012a2a:	4622      	mov	r2, r4
 8012a2c:	462b      	mov	r3, r5
 8012a2e:	4680      	mov	r8, r0
 8012a30:	4689      	mov	r9, r1
 8012a32:	4620      	mov	r0, r4
 8012a34:	4629      	mov	r1, r5
 8012a36:	f7ed fdf7 	bl	8000628 <__aeabi_dmul>
 8012a3a:	4602      	mov	r2, r0
 8012a3c:	460b      	mov	r3, r1
 8012a3e:	4640      	mov	r0, r8
 8012a40:	4649      	mov	r1, r9
 8012a42:	f7ed fdf1 	bl	8000628 <__aeabi_dmul>
 8012a46:	a340      	add	r3, pc, #256	; (adr r3, 8012b48 <__ieee754_pow+0x3a0>)
 8012a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4c:	f7ed fdec 	bl	8000628 <__aeabi_dmul>
 8012a50:	4602      	mov	r2, r0
 8012a52:	460b      	mov	r3, r1
 8012a54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a58:	f7ed fc2e 	bl	80002b8 <__aeabi_dsub>
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	460b      	mov	r3, r1
 8012a60:	4604      	mov	r4, r0
 8012a62:	460d      	mov	r5, r1
 8012a64:	4630      	mov	r0, r6
 8012a66:	4639      	mov	r1, r7
 8012a68:	f7ed fc28 	bl	80002bc <__adddf3>
 8012a6c:	2000      	movs	r0, #0
 8012a6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a72:	4632      	mov	r2, r6
 8012a74:	463b      	mov	r3, r7
 8012a76:	f7ed fc1f 	bl	80002b8 <__aeabi_dsub>
 8012a7a:	4602      	mov	r2, r0
 8012a7c:	460b      	mov	r3, r1
 8012a7e:	4620      	mov	r0, r4
 8012a80:	4629      	mov	r1, r5
 8012a82:	f7ed fc19 	bl	80002b8 <__aeabi_dsub>
 8012a86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a88:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012a8c:	4313      	orrs	r3, r2
 8012a8e:	4606      	mov	r6, r0
 8012a90:	460f      	mov	r7, r1
 8012a92:	f040 81eb 	bne.w	8012e6c <__ieee754_pow+0x6c4>
 8012a96:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012b50 <__ieee754_pow+0x3a8>
 8012a9a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012a9e:	2400      	movs	r4, #0
 8012aa0:	4622      	mov	r2, r4
 8012aa2:	462b      	mov	r3, r5
 8012aa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012aa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012aac:	f7ed fc04 	bl	80002b8 <__aeabi_dsub>
 8012ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ab4:	f7ed fdb8 	bl	8000628 <__aeabi_dmul>
 8012ab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012abc:	4680      	mov	r8, r0
 8012abe:	4689      	mov	r9, r1
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	4639      	mov	r1, r7
 8012ac4:	f7ed fdb0 	bl	8000628 <__aeabi_dmul>
 8012ac8:	4602      	mov	r2, r0
 8012aca:	460b      	mov	r3, r1
 8012acc:	4640      	mov	r0, r8
 8012ace:	4649      	mov	r1, r9
 8012ad0:	f7ed fbf4 	bl	80002bc <__adddf3>
 8012ad4:	4622      	mov	r2, r4
 8012ad6:	462b      	mov	r3, r5
 8012ad8:	4680      	mov	r8, r0
 8012ada:	4689      	mov	r9, r1
 8012adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ae0:	f7ed fda2 	bl	8000628 <__aeabi_dmul>
 8012ae4:	460b      	mov	r3, r1
 8012ae6:	4604      	mov	r4, r0
 8012ae8:	460d      	mov	r5, r1
 8012aea:	4602      	mov	r2, r0
 8012aec:	4649      	mov	r1, r9
 8012aee:	4640      	mov	r0, r8
 8012af0:	e9cd 4500 	strd	r4, r5, [sp]
 8012af4:	f7ed fbe2 	bl	80002bc <__adddf3>
 8012af8:	4b1c      	ldr	r3, [pc, #112]	; (8012b6c <__ieee754_pow+0x3c4>)
 8012afa:	4299      	cmp	r1, r3
 8012afc:	4606      	mov	r6, r0
 8012afe:	460f      	mov	r7, r1
 8012b00:	468b      	mov	fp, r1
 8012b02:	f340 82f7 	ble.w	80130f4 <__ieee754_pow+0x94c>
 8012b06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012b0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012b0e:	4303      	orrs	r3, r0
 8012b10:	f000 81ea 	beq.w	8012ee8 <__ieee754_pow+0x740>
 8012b14:	a310      	add	r3, pc, #64	; (adr r3, 8012b58 <__ieee754_pow+0x3b0>)
 8012b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b1e:	f7ed fd83 	bl	8000628 <__aeabi_dmul>
 8012b22:	a30d      	add	r3, pc, #52	; (adr r3, 8012b58 <__ieee754_pow+0x3b0>)
 8012b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b28:	e6d5      	b.n	80128d6 <__ieee754_pow+0x12e>
 8012b2a:	bf00      	nop
 8012b2c:	f3af 8000 	nop.w
 8012b30:	60000000 	.word	0x60000000
 8012b34:	3ff71547 	.word	0x3ff71547
 8012b38:	f85ddf44 	.word	0xf85ddf44
 8012b3c:	3e54ae0b 	.word	0x3e54ae0b
 8012b40:	55555555 	.word	0x55555555
 8012b44:	3fd55555 	.word	0x3fd55555
 8012b48:	652b82fe 	.word	0x652b82fe
 8012b4c:	3ff71547 	.word	0x3ff71547
 8012b50:	00000000 	.word	0x00000000
 8012b54:	bff00000 	.word	0xbff00000
 8012b58:	8800759c 	.word	0x8800759c
 8012b5c:	7e37e43c 	.word	0x7e37e43c
 8012b60:	3ff00000 	.word	0x3ff00000
 8012b64:	3fd00000 	.word	0x3fd00000
 8012b68:	3fe00000 	.word	0x3fe00000
 8012b6c:	408fffff 	.word	0x408fffff
 8012b70:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012b74:	f04f 0200 	mov.w	r2, #0
 8012b78:	da05      	bge.n	8012b86 <__ieee754_pow+0x3de>
 8012b7a:	4bd3      	ldr	r3, [pc, #844]	; (8012ec8 <__ieee754_pow+0x720>)
 8012b7c:	f7ed fd54 	bl	8000628 <__aeabi_dmul>
 8012b80:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012b84:	460c      	mov	r4, r1
 8012b86:	1523      	asrs	r3, r4, #20
 8012b88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012b8c:	4413      	add	r3, r2
 8012b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8012b90:	4bce      	ldr	r3, [pc, #824]	; (8012ecc <__ieee754_pow+0x724>)
 8012b92:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012b96:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012b9a:	429c      	cmp	r4, r3
 8012b9c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012ba0:	dd08      	ble.n	8012bb4 <__ieee754_pow+0x40c>
 8012ba2:	4bcb      	ldr	r3, [pc, #812]	; (8012ed0 <__ieee754_pow+0x728>)
 8012ba4:	429c      	cmp	r4, r3
 8012ba6:	f340 815e 	ble.w	8012e66 <__ieee754_pow+0x6be>
 8012baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bac:	3301      	adds	r3, #1
 8012bae:	9309      	str	r3, [sp, #36]	; 0x24
 8012bb0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012bb4:	f04f 0a00 	mov.w	sl, #0
 8012bb8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012bbc:	930c      	str	r3, [sp, #48]	; 0x30
 8012bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012bc0:	4bc4      	ldr	r3, [pc, #784]	; (8012ed4 <__ieee754_pow+0x72c>)
 8012bc2:	4413      	add	r3, r2
 8012bc4:	ed93 7b00 	vldr	d7, [r3]
 8012bc8:	4629      	mov	r1, r5
 8012bca:	ec53 2b17 	vmov	r2, r3, d7
 8012bce:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012bd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012bd6:	f7ed fb6f 	bl	80002b8 <__aeabi_dsub>
 8012bda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012bde:	4606      	mov	r6, r0
 8012be0:	460f      	mov	r7, r1
 8012be2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012be6:	f7ed fb69 	bl	80002bc <__adddf3>
 8012bea:	4602      	mov	r2, r0
 8012bec:	460b      	mov	r3, r1
 8012bee:	2000      	movs	r0, #0
 8012bf0:	49b9      	ldr	r1, [pc, #740]	; (8012ed8 <__ieee754_pow+0x730>)
 8012bf2:	f7ed fe43 	bl	800087c <__aeabi_ddiv>
 8012bf6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012bfa:	4602      	mov	r2, r0
 8012bfc:	460b      	mov	r3, r1
 8012bfe:	4630      	mov	r0, r6
 8012c00:	4639      	mov	r1, r7
 8012c02:	f7ed fd11 	bl	8000628 <__aeabi_dmul>
 8012c06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c0a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012c0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012c12:	2300      	movs	r3, #0
 8012c14:	9302      	str	r3, [sp, #8]
 8012c16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012c1a:	106d      	asrs	r5, r5, #1
 8012c1c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012c20:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012c24:	2200      	movs	r2, #0
 8012c26:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8012c2a:	4640      	mov	r0, r8
 8012c2c:	4649      	mov	r1, r9
 8012c2e:	4614      	mov	r4, r2
 8012c30:	461d      	mov	r5, r3
 8012c32:	f7ed fcf9 	bl	8000628 <__aeabi_dmul>
 8012c36:	4602      	mov	r2, r0
 8012c38:	460b      	mov	r3, r1
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	4639      	mov	r1, r7
 8012c3e:	f7ed fb3b 	bl	80002b8 <__aeabi_dsub>
 8012c42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012c46:	4606      	mov	r6, r0
 8012c48:	460f      	mov	r7, r1
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	4629      	mov	r1, r5
 8012c4e:	f7ed fb33 	bl	80002b8 <__aeabi_dsub>
 8012c52:	4602      	mov	r2, r0
 8012c54:	460b      	mov	r3, r1
 8012c56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012c5a:	f7ed fb2d 	bl	80002b8 <__aeabi_dsub>
 8012c5e:	4642      	mov	r2, r8
 8012c60:	464b      	mov	r3, r9
 8012c62:	f7ed fce1 	bl	8000628 <__aeabi_dmul>
 8012c66:	4602      	mov	r2, r0
 8012c68:	460b      	mov	r3, r1
 8012c6a:	4630      	mov	r0, r6
 8012c6c:	4639      	mov	r1, r7
 8012c6e:	f7ed fb23 	bl	80002b8 <__aeabi_dsub>
 8012c72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012c76:	f7ed fcd7 	bl	8000628 <__aeabi_dmul>
 8012c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012c82:	4610      	mov	r0, r2
 8012c84:	4619      	mov	r1, r3
 8012c86:	f7ed fccf 	bl	8000628 <__aeabi_dmul>
 8012c8a:	a37b      	add	r3, pc, #492	; (adr r3, 8012e78 <__ieee754_pow+0x6d0>)
 8012c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c90:	4604      	mov	r4, r0
 8012c92:	460d      	mov	r5, r1
 8012c94:	f7ed fcc8 	bl	8000628 <__aeabi_dmul>
 8012c98:	a379      	add	r3, pc, #484	; (adr r3, 8012e80 <__ieee754_pow+0x6d8>)
 8012c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9e:	f7ed fb0d 	bl	80002bc <__adddf3>
 8012ca2:	4622      	mov	r2, r4
 8012ca4:	462b      	mov	r3, r5
 8012ca6:	f7ed fcbf 	bl	8000628 <__aeabi_dmul>
 8012caa:	a377      	add	r3, pc, #476	; (adr r3, 8012e88 <__ieee754_pow+0x6e0>)
 8012cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb0:	f7ed fb04 	bl	80002bc <__adddf3>
 8012cb4:	4622      	mov	r2, r4
 8012cb6:	462b      	mov	r3, r5
 8012cb8:	f7ed fcb6 	bl	8000628 <__aeabi_dmul>
 8012cbc:	a374      	add	r3, pc, #464	; (adr r3, 8012e90 <__ieee754_pow+0x6e8>)
 8012cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc2:	f7ed fafb 	bl	80002bc <__adddf3>
 8012cc6:	4622      	mov	r2, r4
 8012cc8:	462b      	mov	r3, r5
 8012cca:	f7ed fcad 	bl	8000628 <__aeabi_dmul>
 8012cce:	a372      	add	r3, pc, #456	; (adr r3, 8012e98 <__ieee754_pow+0x6f0>)
 8012cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd4:	f7ed faf2 	bl	80002bc <__adddf3>
 8012cd8:	4622      	mov	r2, r4
 8012cda:	462b      	mov	r3, r5
 8012cdc:	f7ed fca4 	bl	8000628 <__aeabi_dmul>
 8012ce0:	a36f      	add	r3, pc, #444	; (adr r3, 8012ea0 <__ieee754_pow+0x6f8>)
 8012ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce6:	f7ed fae9 	bl	80002bc <__adddf3>
 8012cea:	4622      	mov	r2, r4
 8012cec:	4606      	mov	r6, r0
 8012cee:	460f      	mov	r7, r1
 8012cf0:	462b      	mov	r3, r5
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	4629      	mov	r1, r5
 8012cf6:	f7ed fc97 	bl	8000628 <__aeabi_dmul>
 8012cfa:	4602      	mov	r2, r0
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	4630      	mov	r0, r6
 8012d00:	4639      	mov	r1, r7
 8012d02:	f7ed fc91 	bl	8000628 <__aeabi_dmul>
 8012d06:	4642      	mov	r2, r8
 8012d08:	4604      	mov	r4, r0
 8012d0a:	460d      	mov	r5, r1
 8012d0c:	464b      	mov	r3, r9
 8012d0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012d12:	f7ed fad3 	bl	80002bc <__adddf3>
 8012d16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012d1a:	f7ed fc85 	bl	8000628 <__aeabi_dmul>
 8012d1e:	4622      	mov	r2, r4
 8012d20:	462b      	mov	r3, r5
 8012d22:	f7ed facb 	bl	80002bc <__adddf3>
 8012d26:	4642      	mov	r2, r8
 8012d28:	4606      	mov	r6, r0
 8012d2a:	460f      	mov	r7, r1
 8012d2c:	464b      	mov	r3, r9
 8012d2e:	4640      	mov	r0, r8
 8012d30:	4649      	mov	r1, r9
 8012d32:	f7ed fc79 	bl	8000628 <__aeabi_dmul>
 8012d36:	2200      	movs	r2, #0
 8012d38:	4b68      	ldr	r3, [pc, #416]	; (8012edc <__ieee754_pow+0x734>)
 8012d3a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012d3e:	f7ed fabd 	bl	80002bc <__adddf3>
 8012d42:	4632      	mov	r2, r6
 8012d44:	463b      	mov	r3, r7
 8012d46:	f7ed fab9 	bl	80002bc <__adddf3>
 8012d4a:	9802      	ldr	r0, [sp, #8]
 8012d4c:	460d      	mov	r5, r1
 8012d4e:	4604      	mov	r4, r0
 8012d50:	4602      	mov	r2, r0
 8012d52:	460b      	mov	r3, r1
 8012d54:	4640      	mov	r0, r8
 8012d56:	4649      	mov	r1, r9
 8012d58:	f7ed fc66 	bl	8000628 <__aeabi_dmul>
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	4680      	mov	r8, r0
 8012d60:	4689      	mov	r9, r1
 8012d62:	4b5e      	ldr	r3, [pc, #376]	; (8012edc <__ieee754_pow+0x734>)
 8012d64:	4620      	mov	r0, r4
 8012d66:	4629      	mov	r1, r5
 8012d68:	f7ed faa6 	bl	80002b8 <__aeabi_dsub>
 8012d6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012d70:	f7ed faa2 	bl	80002b8 <__aeabi_dsub>
 8012d74:	4602      	mov	r2, r0
 8012d76:	460b      	mov	r3, r1
 8012d78:	4630      	mov	r0, r6
 8012d7a:	4639      	mov	r1, r7
 8012d7c:	f7ed fa9c 	bl	80002b8 <__aeabi_dsub>
 8012d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d84:	f7ed fc50 	bl	8000628 <__aeabi_dmul>
 8012d88:	4622      	mov	r2, r4
 8012d8a:	4606      	mov	r6, r0
 8012d8c:	460f      	mov	r7, r1
 8012d8e:	462b      	mov	r3, r5
 8012d90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d94:	f7ed fc48 	bl	8000628 <__aeabi_dmul>
 8012d98:	4602      	mov	r2, r0
 8012d9a:	460b      	mov	r3, r1
 8012d9c:	4630      	mov	r0, r6
 8012d9e:	4639      	mov	r1, r7
 8012da0:	f7ed fa8c 	bl	80002bc <__adddf3>
 8012da4:	4606      	mov	r6, r0
 8012da6:	460f      	mov	r7, r1
 8012da8:	4602      	mov	r2, r0
 8012daa:	460b      	mov	r3, r1
 8012dac:	4640      	mov	r0, r8
 8012dae:	4649      	mov	r1, r9
 8012db0:	f7ed fa84 	bl	80002bc <__adddf3>
 8012db4:	9802      	ldr	r0, [sp, #8]
 8012db6:	a33c      	add	r3, pc, #240	; (adr r3, 8012ea8 <__ieee754_pow+0x700>)
 8012db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dbc:	4604      	mov	r4, r0
 8012dbe:	460d      	mov	r5, r1
 8012dc0:	f7ed fc32 	bl	8000628 <__aeabi_dmul>
 8012dc4:	4642      	mov	r2, r8
 8012dc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012dca:	464b      	mov	r3, r9
 8012dcc:	4620      	mov	r0, r4
 8012dce:	4629      	mov	r1, r5
 8012dd0:	f7ed fa72 	bl	80002b8 <__aeabi_dsub>
 8012dd4:	4602      	mov	r2, r0
 8012dd6:	460b      	mov	r3, r1
 8012dd8:	4630      	mov	r0, r6
 8012dda:	4639      	mov	r1, r7
 8012ddc:	f7ed fa6c 	bl	80002b8 <__aeabi_dsub>
 8012de0:	a333      	add	r3, pc, #204	; (adr r3, 8012eb0 <__ieee754_pow+0x708>)
 8012de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de6:	f7ed fc1f 	bl	8000628 <__aeabi_dmul>
 8012dea:	a333      	add	r3, pc, #204	; (adr r3, 8012eb8 <__ieee754_pow+0x710>)
 8012dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df0:	4606      	mov	r6, r0
 8012df2:	460f      	mov	r7, r1
 8012df4:	4620      	mov	r0, r4
 8012df6:	4629      	mov	r1, r5
 8012df8:	f7ed fc16 	bl	8000628 <__aeabi_dmul>
 8012dfc:	4602      	mov	r2, r0
 8012dfe:	460b      	mov	r3, r1
 8012e00:	4630      	mov	r0, r6
 8012e02:	4639      	mov	r1, r7
 8012e04:	f7ed fa5a 	bl	80002bc <__adddf3>
 8012e08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e0a:	4b35      	ldr	r3, [pc, #212]	; (8012ee0 <__ieee754_pow+0x738>)
 8012e0c:	4413      	add	r3, r2
 8012e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e12:	f7ed fa53 	bl	80002bc <__adddf3>
 8012e16:	4604      	mov	r4, r0
 8012e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e1a:	460d      	mov	r5, r1
 8012e1c:	f7ed fb9a 	bl	8000554 <__aeabi_i2d>
 8012e20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e22:	4b30      	ldr	r3, [pc, #192]	; (8012ee4 <__ieee754_pow+0x73c>)
 8012e24:	4413      	add	r3, r2
 8012e26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e2a:	4606      	mov	r6, r0
 8012e2c:	460f      	mov	r7, r1
 8012e2e:	4622      	mov	r2, r4
 8012e30:	462b      	mov	r3, r5
 8012e32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e36:	f7ed fa41 	bl	80002bc <__adddf3>
 8012e3a:	4642      	mov	r2, r8
 8012e3c:	464b      	mov	r3, r9
 8012e3e:	f7ed fa3d 	bl	80002bc <__adddf3>
 8012e42:	4632      	mov	r2, r6
 8012e44:	463b      	mov	r3, r7
 8012e46:	f7ed fa39 	bl	80002bc <__adddf3>
 8012e4a:	9802      	ldr	r0, [sp, #8]
 8012e4c:	4632      	mov	r2, r6
 8012e4e:	463b      	mov	r3, r7
 8012e50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e54:	f7ed fa30 	bl	80002b8 <__aeabi_dsub>
 8012e58:	4642      	mov	r2, r8
 8012e5a:	464b      	mov	r3, r9
 8012e5c:	f7ed fa2c 	bl	80002b8 <__aeabi_dsub>
 8012e60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012e64:	e607      	b.n	8012a76 <__ieee754_pow+0x2ce>
 8012e66:	f04f 0a01 	mov.w	sl, #1
 8012e6a:	e6a5      	b.n	8012bb8 <__ieee754_pow+0x410>
 8012e6c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012ec0 <__ieee754_pow+0x718>
 8012e70:	e613      	b.n	8012a9a <__ieee754_pow+0x2f2>
 8012e72:	bf00      	nop
 8012e74:	f3af 8000 	nop.w
 8012e78:	4a454eef 	.word	0x4a454eef
 8012e7c:	3fca7e28 	.word	0x3fca7e28
 8012e80:	93c9db65 	.word	0x93c9db65
 8012e84:	3fcd864a 	.word	0x3fcd864a
 8012e88:	a91d4101 	.word	0xa91d4101
 8012e8c:	3fd17460 	.word	0x3fd17460
 8012e90:	518f264d 	.word	0x518f264d
 8012e94:	3fd55555 	.word	0x3fd55555
 8012e98:	db6fabff 	.word	0xdb6fabff
 8012e9c:	3fdb6db6 	.word	0x3fdb6db6
 8012ea0:	33333303 	.word	0x33333303
 8012ea4:	3fe33333 	.word	0x3fe33333
 8012ea8:	e0000000 	.word	0xe0000000
 8012eac:	3feec709 	.word	0x3feec709
 8012eb0:	dc3a03fd 	.word	0xdc3a03fd
 8012eb4:	3feec709 	.word	0x3feec709
 8012eb8:	145b01f5 	.word	0x145b01f5
 8012ebc:	be3e2fe0 	.word	0xbe3e2fe0
 8012ec0:	00000000 	.word	0x00000000
 8012ec4:	3ff00000 	.word	0x3ff00000
 8012ec8:	43400000 	.word	0x43400000
 8012ecc:	0003988e 	.word	0x0003988e
 8012ed0:	000bb679 	.word	0x000bb679
 8012ed4:	080140e8 	.word	0x080140e8
 8012ed8:	3ff00000 	.word	0x3ff00000
 8012edc:	40080000 	.word	0x40080000
 8012ee0:	08014108 	.word	0x08014108
 8012ee4:	080140f8 	.word	0x080140f8
 8012ee8:	a3b4      	add	r3, pc, #720	; (adr r3, 80131bc <__ieee754_pow+0xa14>)
 8012eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eee:	4640      	mov	r0, r8
 8012ef0:	4649      	mov	r1, r9
 8012ef2:	f7ed f9e3 	bl	80002bc <__adddf3>
 8012ef6:	4622      	mov	r2, r4
 8012ef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012efc:	462b      	mov	r3, r5
 8012efe:	4630      	mov	r0, r6
 8012f00:	4639      	mov	r1, r7
 8012f02:	f7ed f9d9 	bl	80002b8 <__aeabi_dsub>
 8012f06:	4602      	mov	r2, r0
 8012f08:	460b      	mov	r3, r1
 8012f0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012f0e:	f7ed fe1b 	bl	8000b48 <__aeabi_dcmpgt>
 8012f12:	2800      	cmp	r0, #0
 8012f14:	f47f adfe 	bne.w	8012b14 <__ieee754_pow+0x36c>
 8012f18:	4aa3      	ldr	r2, [pc, #652]	; (80131a8 <__ieee754_pow+0xa00>)
 8012f1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012f1e:	4293      	cmp	r3, r2
 8012f20:	f340 810a 	ble.w	8013138 <__ieee754_pow+0x990>
 8012f24:	151b      	asrs	r3, r3, #20
 8012f26:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012f2a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012f2e:	fa4a f303 	asr.w	r3, sl, r3
 8012f32:	445b      	add	r3, fp
 8012f34:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012f38:	4e9c      	ldr	r6, [pc, #624]	; (80131ac <__ieee754_pow+0xa04>)
 8012f3a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012f3e:	4116      	asrs	r6, r2
 8012f40:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012f44:	2000      	movs	r0, #0
 8012f46:	ea23 0106 	bic.w	r1, r3, r6
 8012f4a:	f1c2 0214 	rsb	r2, r2, #20
 8012f4e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012f52:	fa4a fa02 	asr.w	sl, sl, r2
 8012f56:	f1bb 0f00 	cmp.w	fp, #0
 8012f5a:	4602      	mov	r2, r0
 8012f5c:	460b      	mov	r3, r1
 8012f5e:	4620      	mov	r0, r4
 8012f60:	4629      	mov	r1, r5
 8012f62:	bfb8      	it	lt
 8012f64:	f1ca 0a00 	rsblt	sl, sl, #0
 8012f68:	f7ed f9a6 	bl	80002b8 <__aeabi_dsub>
 8012f6c:	e9cd 0100 	strd	r0, r1, [sp]
 8012f70:	4642      	mov	r2, r8
 8012f72:	464b      	mov	r3, r9
 8012f74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f78:	f7ed f9a0 	bl	80002bc <__adddf3>
 8012f7c:	2000      	movs	r0, #0
 8012f7e:	a378      	add	r3, pc, #480	; (adr r3, 8013160 <__ieee754_pow+0x9b8>)
 8012f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f84:	4604      	mov	r4, r0
 8012f86:	460d      	mov	r5, r1
 8012f88:	f7ed fb4e 	bl	8000628 <__aeabi_dmul>
 8012f8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f90:	4606      	mov	r6, r0
 8012f92:	460f      	mov	r7, r1
 8012f94:	4620      	mov	r0, r4
 8012f96:	4629      	mov	r1, r5
 8012f98:	f7ed f98e 	bl	80002b8 <__aeabi_dsub>
 8012f9c:	4602      	mov	r2, r0
 8012f9e:	460b      	mov	r3, r1
 8012fa0:	4640      	mov	r0, r8
 8012fa2:	4649      	mov	r1, r9
 8012fa4:	f7ed f988 	bl	80002b8 <__aeabi_dsub>
 8012fa8:	a36f      	add	r3, pc, #444	; (adr r3, 8013168 <__ieee754_pow+0x9c0>)
 8012faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fae:	f7ed fb3b 	bl	8000628 <__aeabi_dmul>
 8012fb2:	a36f      	add	r3, pc, #444	; (adr r3, 8013170 <__ieee754_pow+0x9c8>)
 8012fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb8:	4680      	mov	r8, r0
 8012fba:	4689      	mov	r9, r1
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	4629      	mov	r1, r5
 8012fc0:	f7ed fb32 	bl	8000628 <__aeabi_dmul>
 8012fc4:	4602      	mov	r2, r0
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	4640      	mov	r0, r8
 8012fca:	4649      	mov	r1, r9
 8012fcc:	f7ed f976 	bl	80002bc <__adddf3>
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	460d      	mov	r5, r1
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	4630      	mov	r0, r6
 8012fda:	4639      	mov	r1, r7
 8012fdc:	f7ed f96e 	bl	80002bc <__adddf3>
 8012fe0:	4632      	mov	r2, r6
 8012fe2:	463b      	mov	r3, r7
 8012fe4:	4680      	mov	r8, r0
 8012fe6:	4689      	mov	r9, r1
 8012fe8:	f7ed f966 	bl	80002b8 <__aeabi_dsub>
 8012fec:	4602      	mov	r2, r0
 8012fee:	460b      	mov	r3, r1
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	4629      	mov	r1, r5
 8012ff4:	f7ed f960 	bl	80002b8 <__aeabi_dsub>
 8012ff8:	4642      	mov	r2, r8
 8012ffa:	4606      	mov	r6, r0
 8012ffc:	460f      	mov	r7, r1
 8012ffe:	464b      	mov	r3, r9
 8013000:	4640      	mov	r0, r8
 8013002:	4649      	mov	r1, r9
 8013004:	f7ed fb10 	bl	8000628 <__aeabi_dmul>
 8013008:	a35b      	add	r3, pc, #364	; (adr r3, 8013178 <__ieee754_pow+0x9d0>)
 801300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300e:	4604      	mov	r4, r0
 8013010:	460d      	mov	r5, r1
 8013012:	f7ed fb09 	bl	8000628 <__aeabi_dmul>
 8013016:	a35a      	add	r3, pc, #360	; (adr r3, 8013180 <__ieee754_pow+0x9d8>)
 8013018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301c:	f7ed f94c 	bl	80002b8 <__aeabi_dsub>
 8013020:	4622      	mov	r2, r4
 8013022:	462b      	mov	r3, r5
 8013024:	f7ed fb00 	bl	8000628 <__aeabi_dmul>
 8013028:	a357      	add	r3, pc, #348	; (adr r3, 8013188 <__ieee754_pow+0x9e0>)
 801302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801302e:	f7ed f945 	bl	80002bc <__adddf3>
 8013032:	4622      	mov	r2, r4
 8013034:	462b      	mov	r3, r5
 8013036:	f7ed faf7 	bl	8000628 <__aeabi_dmul>
 801303a:	a355      	add	r3, pc, #340	; (adr r3, 8013190 <__ieee754_pow+0x9e8>)
 801303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013040:	f7ed f93a 	bl	80002b8 <__aeabi_dsub>
 8013044:	4622      	mov	r2, r4
 8013046:	462b      	mov	r3, r5
 8013048:	f7ed faee 	bl	8000628 <__aeabi_dmul>
 801304c:	a352      	add	r3, pc, #328	; (adr r3, 8013198 <__ieee754_pow+0x9f0>)
 801304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013052:	f7ed f933 	bl	80002bc <__adddf3>
 8013056:	4622      	mov	r2, r4
 8013058:	462b      	mov	r3, r5
 801305a:	f7ed fae5 	bl	8000628 <__aeabi_dmul>
 801305e:	4602      	mov	r2, r0
 8013060:	460b      	mov	r3, r1
 8013062:	4640      	mov	r0, r8
 8013064:	4649      	mov	r1, r9
 8013066:	f7ed f927 	bl	80002b8 <__aeabi_dsub>
 801306a:	4604      	mov	r4, r0
 801306c:	460d      	mov	r5, r1
 801306e:	4602      	mov	r2, r0
 8013070:	460b      	mov	r3, r1
 8013072:	4640      	mov	r0, r8
 8013074:	4649      	mov	r1, r9
 8013076:	f7ed fad7 	bl	8000628 <__aeabi_dmul>
 801307a:	2200      	movs	r2, #0
 801307c:	e9cd 0100 	strd	r0, r1, [sp]
 8013080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013084:	4620      	mov	r0, r4
 8013086:	4629      	mov	r1, r5
 8013088:	f7ed f916 	bl	80002b8 <__aeabi_dsub>
 801308c:	4602      	mov	r2, r0
 801308e:	460b      	mov	r3, r1
 8013090:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013094:	f7ed fbf2 	bl	800087c <__aeabi_ddiv>
 8013098:	4632      	mov	r2, r6
 801309a:	4604      	mov	r4, r0
 801309c:	460d      	mov	r5, r1
 801309e:	463b      	mov	r3, r7
 80130a0:	4640      	mov	r0, r8
 80130a2:	4649      	mov	r1, r9
 80130a4:	f7ed fac0 	bl	8000628 <__aeabi_dmul>
 80130a8:	4632      	mov	r2, r6
 80130aa:	463b      	mov	r3, r7
 80130ac:	f7ed f906 	bl	80002bc <__adddf3>
 80130b0:	4602      	mov	r2, r0
 80130b2:	460b      	mov	r3, r1
 80130b4:	4620      	mov	r0, r4
 80130b6:	4629      	mov	r1, r5
 80130b8:	f7ed f8fe 	bl	80002b8 <__aeabi_dsub>
 80130bc:	4642      	mov	r2, r8
 80130be:	464b      	mov	r3, r9
 80130c0:	f7ed f8fa 	bl	80002b8 <__aeabi_dsub>
 80130c4:	4602      	mov	r2, r0
 80130c6:	460b      	mov	r3, r1
 80130c8:	2000      	movs	r0, #0
 80130ca:	4939      	ldr	r1, [pc, #228]	; (80131b0 <__ieee754_pow+0xa08>)
 80130cc:	f7ed f8f4 	bl	80002b8 <__aeabi_dsub>
 80130d0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80130d4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80130d8:	4602      	mov	r2, r0
 80130da:	460b      	mov	r3, r1
 80130dc:	da2f      	bge.n	801313e <__ieee754_pow+0x996>
 80130de:	4650      	mov	r0, sl
 80130e0:	ec43 2b10 	vmov	d0, r2, r3
 80130e4:	f000 f9c0 	bl	8013468 <scalbn>
 80130e8:	ec51 0b10 	vmov	r0, r1, d0
 80130ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80130f0:	f7ff bbf1 	b.w	80128d6 <__ieee754_pow+0x12e>
 80130f4:	4b2f      	ldr	r3, [pc, #188]	; (80131b4 <__ieee754_pow+0xa0c>)
 80130f6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80130fa:	429e      	cmp	r6, r3
 80130fc:	f77f af0c 	ble.w	8012f18 <__ieee754_pow+0x770>
 8013100:	4b2d      	ldr	r3, [pc, #180]	; (80131b8 <__ieee754_pow+0xa10>)
 8013102:	440b      	add	r3, r1
 8013104:	4303      	orrs	r3, r0
 8013106:	d00b      	beq.n	8013120 <__ieee754_pow+0x978>
 8013108:	a325      	add	r3, pc, #148	; (adr r3, 80131a0 <__ieee754_pow+0x9f8>)
 801310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013112:	f7ed fa89 	bl	8000628 <__aeabi_dmul>
 8013116:	a322      	add	r3, pc, #136	; (adr r3, 80131a0 <__ieee754_pow+0x9f8>)
 8013118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801311c:	f7ff bbdb 	b.w	80128d6 <__ieee754_pow+0x12e>
 8013120:	4622      	mov	r2, r4
 8013122:	462b      	mov	r3, r5
 8013124:	f7ed f8c8 	bl	80002b8 <__aeabi_dsub>
 8013128:	4642      	mov	r2, r8
 801312a:	464b      	mov	r3, r9
 801312c:	f7ed fd02 	bl	8000b34 <__aeabi_dcmpge>
 8013130:	2800      	cmp	r0, #0
 8013132:	f43f aef1 	beq.w	8012f18 <__ieee754_pow+0x770>
 8013136:	e7e7      	b.n	8013108 <__ieee754_pow+0x960>
 8013138:	f04f 0a00 	mov.w	sl, #0
 801313c:	e718      	b.n	8012f70 <__ieee754_pow+0x7c8>
 801313e:	4621      	mov	r1, r4
 8013140:	e7d4      	b.n	80130ec <__ieee754_pow+0x944>
 8013142:	2000      	movs	r0, #0
 8013144:	491a      	ldr	r1, [pc, #104]	; (80131b0 <__ieee754_pow+0xa08>)
 8013146:	f7ff bb8f 	b.w	8012868 <__ieee754_pow+0xc0>
 801314a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801314e:	f7ff bb8b 	b.w	8012868 <__ieee754_pow+0xc0>
 8013152:	4630      	mov	r0, r6
 8013154:	4639      	mov	r1, r7
 8013156:	f7ff bb87 	b.w	8012868 <__ieee754_pow+0xc0>
 801315a:	4693      	mov	fp, r2
 801315c:	f7ff bb98 	b.w	8012890 <__ieee754_pow+0xe8>
 8013160:	00000000 	.word	0x00000000
 8013164:	3fe62e43 	.word	0x3fe62e43
 8013168:	fefa39ef 	.word	0xfefa39ef
 801316c:	3fe62e42 	.word	0x3fe62e42
 8013170:	0ca86c39 	.word	0x0ca86c39
 8013174:	be205c61 	.word	0xbe205c61
 8013178:	72bea4d0 	.word	0x72bea4d0
 801317c:	3e663769 	.word	0x3e663769
 8013180:	c5d26bf1 	.word	0xc5d26bf1
 8013184:	3ebbbd41 	.word	0x3ebbbd41
 8013188:	af25de2c 	.word	0xaf25de2c
 801318c:	3f11566a 	.word	0x3f11566a
 8013190:	16bebd93 	.word	0x16bebd93
 8013194:	3f66c16c 	.word	0x3f66c16c
 8013198:	5555553e 	.word	0x5555553e
 801319c:	3fc55555 	.word	0x3fc55555
 80131a0:	c2f8f359 	.word	0xc2f8f359
 80131a4:	01a56e1f 	.word	0x01a56e1f
 80131a8:	3fe00000 	.word	0x3fe00000
 80131ac:	000fffff 	.word	0x000fffff
 80131b0:	3ff00000 	.word	0x3ff00000
 80131b4:	4090cbff 	.word	0x4090cbff
 80131b8:	3f6f3400 	.word	0x3f6f3400
 80131bc:	652b82fe 	.word	0x652b82fe
 80131c0:	3c971547 	.word	0x3c971547

080131c4 <__ieee754_sqrt>:
 80131c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131c8:	4955      	ldr	r1, [pc, #340]	; (8013320 <__ieee754_sqrt+0x15c>)
 80131ca:	ec55 4b10 	vmov	r4, r5, d0
 80131ce:	43a9      	bics	r1, r5
 80131d0:	462b      	mov	r3, r5
 80131d2:	462a      	mov	r2, r5
 80131d4:	d112      	bne.n	80131fc <__ieee754_sqrt+0x38>
 80131d6:	ee10 2a10 	vmov	r2, s0
 80131da:	ee10 0a10 	vmov	r0, s0
 80131de:	4629      	mov	r1, r5
 80131e0:	f7ed fa22 	bl	8000628 <__aeabi_dmul>
 80131e4:	4602      	mov	r2, r0
 80131e6:	460b      	mov	r3, r1
 80131e8:	4620      	mov	r0, r4
 80131ea:	4629      	mov	r1, r5
 80131ec:	f7ed f866 	bl	80002bc <__adddf3>
 80131f0:	4604      	mov	r4, r0
 80131f2:	460d      	mov	r5, r1
 80131f4:	ec45 4b10 	vmov	d0, r4, r5
 80131f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131fc:	2d00      	cmp	r5, #0
 80131fe:	ee10 0a10 	vmov	r0, s0
 8013202:	4621      	mov	r1, r4
 8013204:	dc0f      	bgt.n	8013226 <__ieee754_sqrt+0x62>
 8013206:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801320a:	4330      	orrs	r0, r6
 801320c:	d0f2      	beq.n	80131f4 <__ieee754_sqrt+0x30>
 801320e:	b155      	cbz	r5, 8013226 <__ieee754_sqrt+0x62>
 8013210:	ee10 2a10 	vmov	r2, s0
 8013214:	4620      	mov	r0, r4
 8013216:	4629      	mov	r1, r5
 8013218:	f7ed f84e 	bl	80002b8 <__aeabi_dsub>
 801321c:	4602      	mov	r2, r0
 801321e:	460b      	mov	r3, r1
 8013220:	f7ed fb2c 	bl	800087c <__aeabi_ddiv>
 8013224:	e7e4      	b.n	80131f0 <__ieee754_sqrt+0x2c>
 8013226:	151b      	asrs	r3, r3, #20
 8013228:	d073      	beq.n	8013312 <__ieee754_sqrt+0x14e>
 801322a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801322e:	07dd      	lsls	r5, r3, #31
 8013230:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013234:	bf48      	it	mi
 8013236:	0fc8      	lsrmi	r0, r1, #31
 8013238:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801323c:	bf44      	itt	mi
 801323e:	0049      	lslmi	r1, r1, #1
 8013240:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8013244:	2500      	movs	r5, #0
 8013246:	1058      	asrs	r0, r3, #1
 8013248:	0fcb      	lsrs	r3, r1, #31
 801324a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801324e:	0049      	lsls	r1, r1, #1
 8013250:	2316      	movs	r3, #22
 8013252:	462c      	mov	r4, r5
 8013254:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013258:	19a7      	adds	r7, r4, r6
 801325a:	4297      	cmp	r7, r2
 801325c:	bfde      	ittt	le
 801325e:	19bc      	addle	r4, r7, r6
 8013260:	1bd2      	suble	r2, r2, r7
 8013262:	19ad      	addle	r5, r5, r6
 8013264:	0fcf      	lsrs	r7, r1, #31
 8013266:	3b01      	subs	r3, #1
 8013268:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801326c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013270:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013274:	d1f0      	bne.n	8013258 <__ieee754_sqrt+0x94>
 8013276:	f04f 0c20 	mov.w	ip, #32
 801327a:	469e      	mov	lr, r3
 801327c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013280:	42a2      	cmp	r2, r4
 8013282:	eb06 070e 	add.w	r7, r6, lr
 8013286:	dc02      	bgt.n	801328e <__ieee754_sqrt+0xca>
 8013288:	d112      	bne.n	80132b0 <__ieee754_sqrt+0xec>
 801328a:	428f      	cmp	r7, r1
 801328c:	d810      	bhi.n	80132b0 <__ieee754_sqrt+0xec>
 801328e:	2f00      	cmp	r7, #0
 8013290:	eb07 0e06 	add.w	lr, r7, r6
 8013294:	da42      	bge.n	801331c <__ieee754_sqrt+0x158>
 8013296:	f1be 0f00 	cmp.w	lr, #0
 801329a:	db3f      	blt.n	801331c <__ieee754_sqrt+0x158>
 801329c:	f104 0801 	add.w	r8, r4, #1
 80132a0:	1b12      	subs	r2, r2, r4
 80132a2:	428f      	cmp	r7, r1
 80132a4:	bf88      	it	hi
 80132a6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80132aa:	1bc9      	subs	r1, r1, r7
 80132ac:	4433      	add	r3, r6
 80132ae:	4644      	mov	r4, r8
 80132b0:	0052      	lsls	r2, r2, #1
 80132b2:	f1bc 0c01 	subs.w	ip, ip, #1
 80132b6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80132ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80132be:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80132c2:	d1dd      	bne.n	8013280 <__ieee754_sqrt+0xbc>
 80132c4:	430a      	orrs	r2, r1
 80132c6:	d006      	beq.n	80132d6 <__ieee754_sqrt+0x112>
 80132c8:	1c5c      	adds	r4, r3, #1
 80132ca:	bf13      	iteet	ne
 80132cc:	3301      	addne	r3, #1
 80132ce:	3501      	addeq	r5, #1
 80132d0:	4663      	moveq	r3, ip
 80132d2:	f023 0301 	bicne.w	r3, r3, #1
 80132d6:	106a      	asrs	r2, r5, #1
 80132d8:	085b      	lsrs	r3, r3, #1
 80132da:	07e9      	lsls	r1, r5, #31
 80132dc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80132e0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80132e4:	bf48      	it	mi
 80132e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80132ea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80132ee:	461c      	mov	r4, r3
 80132f0:	e780      	b.n	80131f4 <__ieee754_sqrt+0x30>
 80132f2:	0aca      	lsrs	r2, r1, #11
 80132f4:	3815      	subs	r0, #21
 80132f6:	0549      	lsls	r1, r1, #21
 80132f8:	2a00      	cmp	r2, #0
 80132fa:	d0fa      	beq.n	80132f2 <__ieee754_sqrt+0x12e>
 80132fc:	02d6      	lsls	r6, r2, #11
 80132fe:	d50a      	bpl.n	8013316 <__ieee754_sqrt+0x152>
 8013300:	f1c3 0420 	rsb	r4, r3, #32
 8013304:	fa21 f404 	lsr.w	r4, r1, r4
 8013308:	1e5d      	subs	r5, r3, #1
 801330a:	4099      	lsls	r1, r3
 801330c:	4322      	orrs	r2, r4
 801330e:	1b43      	subs	r3, r0, r5
 8013310:	e78b      	b.n	801322a <__ieee754_sqrt+0x66>
 8013312:	4618      	mov	r0, r3
 8013314:	e7f0      	b.n	80132f8 <__ieee754_sqrt+0x134>
 8013316:	0052      	lsls	r2, r2, #1
 8013318:	3301      	adds	r3, #1
 801331a:	e7ef      	b.n	80132fc <__ieee754_sqrt+0x138>
 801331c:	46a0      	mov	r8, r4
 801331e:	e7bf      	b.n	80132a0 <__ieee754_sqrt+0xdc>
 8013320:	7ff00000 	.word	0x7ff00000

08013324 <fabs>:
 8013324:	ec51 0b10 	vmov	r0, r1, d0
 8013328:	ee10 2a10 	vmov	r2, s0
 801332c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013330:	ec43 2b10 	vmov	d0, r2, r3
 8013334:	4770      	bx	lr

08013336 <finite>:
 8013336:	ee10 3a90 	vmov	r3, s1
 801333a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801333e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013342:	0fc0      	lsrs	r0, r0, #31
 8013344:	4770      	bx	lr

08013346 <matherr>:
 8013346:	2000      	movs	r0, #0
 8013348:	4770      	bx	lr
 801334a:	0000      	movs	r0, r0
 801334c:	0000      	movs	r0, r0
	...

08013350 <nan>:
 8013350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013358 <nan+0x8>
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop
 8013358:	00000000 	.word	0x00000000
 801335c:	7ff80000 	.word	0x7ff80000

08013360 <rint>:
 8013360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013362:	ec51 0b10 	vmov	r0, r1, d0
 8013366:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801336a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801336e:	2e13      	cmp	r6, #19
 8013370:	460b      	mov	r3, r1
 8013372:	ee10 4a10 	vmov	r4, s0
 8013376:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801337a:	dc56      	bgt.n	801342a <rint+0xca>
 801337c:	2e00      	cmp	r6, #0
 801337e:	da2b      	bge.n	80133d8 <rint+0x78>
 8013380:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8013384:	4302      	orrs	r2, r0
 8013386:	d023      	beq.n	80133d0 <rint+0x70>
 8013388:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801338c:	4302      	orrs	r2, r0
 801338e:	4254      	negs	r4, r2
 8013390:	4314      	orrs	r4, r2
 8013392:	0c4b      	lsrs	r3, r1, #17
 8013394:	0b24      	lsrs	r4, r4, #12
 8013396:	045b      	lsls	r3, r3, #17
 8013398:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801339c:	ea44 0103 	orr.w	r1, r4, r3
 80133a0:	460b      	mov	r3, r1
 80133a2:	492f      	ldr	r1, [pc, #188]	; (8013460 <rint+0x100>)
 80133a4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80133a8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80133ac:	4602      	mov	r2, r0
 80133ae:	4639      	mov	r1, r7
 80133b0:	4630      	mov	r0, r6
 80133b2:	f7ec ff83 	bl	80002bc <__adddf3>
 80133b6:	e9cd 0100 	strd	r0, r1, [sp]
 80133ba:	463b      	mov	r3, r7
 80133bc:	4632      	mov	r2, r6
 80133be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133c2:	f7ec ff79 	bl	80002b8 <__aeabi_dsub>
 80133c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80133ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80133ce:	4639      	mov	r1, r7
 80133d0:	ec41 0b10 	vmov	d0, r0, r1
 80133d4:	b003      	add	sp, #12
 80133d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133d8:	4a22      	ldr	r2, [pc, #136]	; (8013464 <rint+0x104>)
 80133da:	4132      	asrs	r2, r6
 80133dc:	ea01 0702 	and.w	r7, r1, r2
 80133e0:	4307      	orrs	r7, r0
 80133e2:	d0f5      	beq.n	80133d0 <rint+0x70>
 80133e4:	0852      	lsrs	r2, r2, #1
 80133e6:	4011      	ands	r1, r2
 80133e8:	430c      	orrs	r4, r1
 80133ea:	d00b      	beq.n	8013404 <rint+0xa4>
 80133ec:	ea23 0202 	bic.w	r2, r3, r2
 80133f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80133f4:	2e13      	cmp	r6, #19
 80133f6:	fa43 f306 	asr.w	r3, r3, r6
 80133fa:	bf0c      	ite	eq
 80133fc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8013400:	2400      	movne	r4, #0
 8013402:	4313      	orrs	r3, r2
 8013404:	4916      	ldr	r1, [pc, #88]	; (8013460 <rint+0x100>)
 8013406:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801340a:	4622      	mov	r2, r4
 801340c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013410:	4620      	mov	r0, r4
 8013412:	4629      	mov	r1, r5
 8013414:	f7ec ff52 	bl	80002bc <__adddf3>
 8013418:	e9cd 0100 	strd	r0, r1, [sp]
 801341c:	4622      	mov	r2, r4
 801341e:	462b      	mov	r3, r5
 8013420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013424:	f7ec ff48 	bl	80002b8 <__aeabi_dsub>
 8013428:	e7d2      	b.n	80133d0 <rint+0x70>
 801342a:	2e33      	cmp	r6, #51	; 0x33
 801342c:	dd07      	ble.n	801343e <rint+0xde>
 801342e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013432:	d1cd      	bne.n	80133d0 <rint+0x70>
 8013434:	ee10 2a10 	vmov	r2, s0
 8013438:	f7ec ff40 	bl	80002bc <__adddf3>
 801343c:	e7c8      	b.n	80133d0 <rint+0x70>
 801343e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8013442:	f04f 32ff 	mov.w	r2, #4294967295
 8013446:	40f2      	lsrs	r2, r6
 8013448:	4210      	tst	r0, r2
 801344a:	d0c1      	beq.n	80133d0 <rint+0x70>
 801344c:	0852      	lsrs	r2, r2, #1
 801344e:	4210      	tst	r0, r2
 8013450:	bf1f      	itttt	ne
 8013452:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8013456:	ea20 0202 	bicne.w	r2, r0, r2
 801345a:	4134      	asrne	r4, r6
 801345c:	4314      	orrne	r4, r2
 801345e:	e7d1      	b.n	8013404 <rint+0xa4>
 8013460:	08014118 	.word	0x08014118
 8013464:	000fffff 	.word	0x000fffff

08013468 <scalbn>:
 8013468:	b570      	push	{r4, r5, r6, lr}
 801346a:	ec55 4b10 	vmov	r4, r5, d0
 801346e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013472:	4606      	mov	r6, r0
 8013474:	462b      	mov	r3, r5
 8013476:	b9aa      	cbnz	r2, 80134a4 <scalbn+0x3c>
 8013478:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801347c:	4323      	orrs	r3, r4
 801347e:	d03b      	beq.n	80134f8 <scalbn+0x90>
 8013480:	4b31      	ldr	r3, [pc, #196]	; (8013548 <scalbn+0xe0>)
 8013482:	4629      	mov	r1, r5
 8013484:	2200      	movs	r2, #0
 8013486:	ee10 0a10 	vmov	r0, s0
 801348a:	f7ed f8cd 	bl	8000628 <__aeabi_dmul>
 801348e:	4b2f      	ldr	r3, [pc, #188]	; (801354c <scalbn+0xe4>)
 8013490:	429e      	cmp	r6, r3
 8013492:	4604      	mov	r4, r0
 8013494:	460d      	mov	r5, r1
 8013496:	da12      	bge.n	80134be <scalbn+0x56>
 8013498:	a327      	add	r3, pc, #156	; (adr r3, 8013538 <scalbn+0xd0>)
 801349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801349e:	f7ed f8c3 	bl	8000628 <__aeabi_dmul>
 80134a2:	e009      	b.n	80134b8 <scalbn+0x50>
 80134a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80134a8:	428a      	cmp	r2, r1
 80134aa:	d10c      	bne.n	80134c6 <scalbn+0x5e>
 80134ac:	ee10 2a10 	vmov	r2, s0
 80134b0:	4620      	mov	r0, r4
 80134b2:	4629      	mov	r1, r5
 80134b4:	f7ec ff02 	bl	80002bc <__adddf3>
 80134b8:	4604      	mov	r4, r0
 80134ba:	460d      	mov	r5, r1
 80134bc:	e01c      	b.n	80134f8 <scalbn+0x90>
 80134be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80134c2:	460b      	mov	r3, r1
 80134c4:	3a36      	subs	r2, #54	; 0x36
 80134c6:	4432      	add	r2, r6
 80134c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80134cc:	428a      	cmp	r2, r1
 80134ce:	dd0b      	ble.n	80134e8 <scalbn+0x80>
 80134d0:	ec45 4b11 	vmov	d1, r4, r5
 80134d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013540 <scalbn+0xd8>
 80134d8:	f000 f83c 	bl	8013554 <copysign>
 80134dc:	a318      	add	r3, pc, #96	; (adr r3, 8013540 <scalbn+0xd8>)
 80134de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e2:	ec51 0b10 	vmov	r0, r1, d0
 80134e6:	e7da      	b.n	801349e <scalbn+0x36>
 80134e8:	2a00      	cmp	r2, #0
 80134ea:	dd08      	ble.n	80134fe <scalbn+0x96>
 80134ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80134f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80134f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80134f8:	ec45 4b10 	vmov	d0, r4, r5
 80134fc:	bd70      	pop	{r4, r5, r6, pc}
 80134fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013502:	da0d      	bge.n	8013520 <scalbn+0xb8>
 8013504:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013508:	429e      	cmp	r6, r3
 801350a:	ec45 4b11 	vmov	d1, r4, r5
 801350e:	dce1      	bgt.n	80134d4 <scalbn+0x6c>
 8013510:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013538 <scalbn+0xd0>
 8013514:	f000 f81e 	bl	8013554 <copysign>
 8013518:	a307      	add	r3, pc, #28	; (adr r3, 8013538 <scalbn+0xd0>)
 801351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351e:	e7e0      	b.n	80134e2 <scalbn+0x7a>
 8013520:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013524:	3236      	adds	r2, #54	; 0x36
 8013526:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801352a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801352e:	4620      	mov	r0, r4
 8013530:	4629      	mov	r1, r5
 8013532:	2200      	movs	r2, #0
 8013534:	4b06      	ldr	r3, [pc, #24]	; (8013550 <scalbn+0xe8>)
 8013536:	e7b2      	b.n	801349e <scalbn+0x36>
 8013538:	c2f8f359 	.word	0xc2f8f359
 801353c:	01a56e1f 	.word	0x01a56e1f
 8013540:	8800759c 	.word	0x8800759c
 8013544:	7e37e43c 	.word	0x7e37e43c
 8013548:	43500000 	.word	0x43500000
 801354c:	ffff3cb0 	.word	0xffff3cb0
 8013550:	3c900000 	.word	0x3c900000

08013554 <copysign>:
 8013554:	ec51 0b10 	vmov	r0, r1, d0
 8013558:	ee11 0a90 	vmov	r0, s3
 801355c:	ee10 2a10 	vmov	r2, s0
 8013560:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013564:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013568:	ea41 0300 	orr.w	r3, r1, r0
 801356c:	ec43 2b10 	vmov	d0, r2, r3
 8013570:	4770      	bx	lr
	...

08013574 <_init>:
 8013574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013576:	bf00      	nop
 8013578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801357a:	bc08      	pop	{r3}
 801357c:	469e      	mov	lr, r3
 801357e:	4770      	bx	lr

08013580 <_fini>:
 8013580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013582:	bf00      	nop
 8013584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013586:	bc08      	pop	{r3}
 8013588:	469e      	mov	lr, r3
 801358a:	4770      	bx	lr
