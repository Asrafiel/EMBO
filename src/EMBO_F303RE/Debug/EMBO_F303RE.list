
EMBO_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000154a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e58  08015648  08015648  00025648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080164a0  080164a0  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  080164a0  080164a0  000264a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080164a8  080164a8  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080164a8  080164a8  000264a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080164ac  080164ac  000264ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080164b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e2c8  200001f8  080166a8  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e4c0  080166a8  0003e4c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038667  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000690e  00000000  00000000  0006888f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023e0  00000000  00000000  0006f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002130  00000000  00000000  00071580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002dcdb  00000000  00000000  000736b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021fac  00000000  00000000  000a138b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7288  00000000  00000000  000c3337  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ba5bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3c0  00000000  00000000  001ba63c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801562c 	.word	0x0801562c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0801562c 	.word	0x0801562c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_ADC_REG_SetTriggerEdge>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	60da      	str	r2, [r3, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3330      	adds	r3, #48	; 0x30
 8001014:	4619      	mov	r1, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800101c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001020:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	fa92 f2a2 	rbit	r2, r2
 8001028:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	fab2 f282 	clz	r2, r2
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	40d3      	lsrs	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	211f      	movs	r1, #31
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	401a      	ands	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	0e9b      	lsrs	r3, r3, #26
 8001052:	f003 011f 	and.w	r1, r3, #31
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	431a      	orrs	r2, r3
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001066:	bf00      	nop
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001072:	b480      	push	{r7}
 8001074:	b08d      	sub	sp, #52	; 0x34
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3314      	adds	r3, #20
 8001082:	4619      	mov	r1, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800108e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	fa92 f2a2 	rbit	r2, r2
 8001096:	617a      	str	r2, [r7, #20]
  return result;
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	fab2 f282 	clz	r2, r2
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	40d3      	lsrs	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80010b2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80010b6:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	6a39      	ldr	r1, [r7, #32]
 80010ba:	fa91 f1a1 	rbit	r1, r1
 80010be:	61f9      	str	r1, [r7, #28]
  return result;
 80010c0:	69f9      	ldr	r1, [r7, #28]
 80010c2:	fab1 f181 	clz	r1, r1
 80010c6:	b2c9      	uxtb	r1, r1
 80010c8:	40cb      	lsrs	r3, r1
 80010ca:	2107      	movs	r1, #7
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	401a      	ands	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80010da:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80010de:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010e2:	fa91 f1a1 	rbit	r1, r1
 80010e6:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80010e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010ea:	fab1 f181 	clz	r1, r1
 80010ee:	b2c9      	uxtb	r1, r1
 80010f0:	40cb      	lsrs	r3, r1
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	431a      	orrs	r2, r3
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80010fe:	bf00      	nop
 8001100:	3734      	adds	r7, #52	; 0x34
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001122:	400b      	ands	r3, r1
 8001124:	43db      	mvns	r3, r3
 8001126:	401a      	ands	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0318 	and.w	r3, r3, #24
 800112e:	4908      	ldr	r1, [pc, #32]	; (8001150 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001130:	40d9      	lsrs	r1, r3
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	4019      	ands	r1, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001138:	400b      	ands	r3, r1
 800113a:	431a      	orrs	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	0007fffe 	.word	0x0007fffe

08001154 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, __ADC_MASK_SHIFT(AWDy, ADC_AWD_CRX_REGOFFSET_MASK)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	330c      	adds	r3, #12
 8001164:	4618      	mov	r0, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800116c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001170:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	fa92 f2a2 	rbit	r2, r2
 8001178:	617a      	str	r2, [r7, #20]
  return result;
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	fab2 f282 	clz	r2, r2
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	fa23 f102 	lsr.w	r1, r3, r2
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	f003 0202 	and.w	r2, r3, #2
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4403      	add	r3, r0
 800119a:	61fb      	str	r3, [r7, #28]
                                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));
  
  MODIFY_REG(*preg,
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <LL_ADC_SetAnalogWDMonitChannels+0x70>)
 80011a4:	400b      	ands	r3, r1
 80011a6:	43db      	mvns	r3, r3
 80011a8:	401a      	ands	r2, r3
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	400b      	ands	r3, r1
 80011b0:	431a      	orrs	r2, r3
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80011b6:	bf00      	nop
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	7dc7fffe 	.word	0x7dc7fffe

080011c8 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, __ADC_MASK_SHIFT(AWDy, ADC_AWD_TRX_REGOFFSET_MASK));
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3320      	adds	r3, #32
 80011da:	4619      	mov	r1, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80011e2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80011e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	fa92 f2a2 	rbit	r2, r2
 80011ee:	617a      	str	r2, [r7, #20]
  return result;
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	fab2 f282 	clz	r2, r2
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	40d3      	lsrs	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	0419      	lsls	r1, r3, #16
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	430b      	orrs	r3, r1
 8001210:	431a      	orrs	r2, r3
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8001216:	bf00      	nop
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  /* 1. Set the intermediate state before moving the ADC voltage regulator    */
  /*    to state enable.                                                      */
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	609a      	str	r2, [r3, #8]
  /* 2. Set the final state of ADC voltage regulator enable                   */
  /*    (ADVREGEN bits set to 0x01).                                          */
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800123e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001242:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN_0);
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	605a      	str	r2, [r3, #4]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <LL_DAC_EnableTrigger>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2104      	movs	r1, #4
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	601a      	str	r2, [r3, #0]
          DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <LL_DMA_SetDataTransferDirection+0x48>)
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	461a      	mov	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012c4:	f023 0310 	bic.w	r3, r3, #16
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	3a01      	subs	r2, #1
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <LL_DMA_SetDataTransferDirection+0x48>)
 80012ce:	5c8a      	ldrb	r2, [r1, r2]
 80012d0:	4611      	mov	r1, r2
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	440a      	add	r2, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	08015e70 	.word	0x08015e70

080012f0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3b01      	subs	r3, #1
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <LL_DMA_SetMode+0x44>)
 8001302:	5cd3      	ldrb	r3, [r2, r3]
 8001304:	461a      	mov	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 0220 	bic.w	r2, r3, #32
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <LL_DMA_SetMode+0x44>)
 8001316:	5ccb      	ldrb	r3, [r1, r3]
 8001318:	4619      	mov	r1, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	440b      	add	r3, r1
 800131e:	4619      	mov	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	08015e70 	.word	0x08015e70

08001338 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	3b01      	subs	r3, #1
 8001348:	4a0c      	ldr	r2, [pc, #48]	; (800137c <LL_DMA_SetPeriphIncMode+0x44>)
 800134a:	5cd3      	ldrb	r3, [r2, r3]
 800134c:	461a      	mov	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4413      	add	r3, r2
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	3b01      	subs	r3, #1
 800135c:	4907      	ldr	r1, [pc, #28]	; (800137c <LL_DMA_SetPeriphIncMode+0x44>)
 800135e:	5ccb      	ldrb	r3, [r1, r3]
 8001360:	4619      	mov	r1, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	440b      	add	r3, r1
 8001366:	4619      	mov	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	08015e70 	.word	0x08015e70

08001380 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	3b01      	subs	r3, #1
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <LL_DMA_SetMemoryIncMode+0x44>)
 8001392:	5cd3      	ldrb	r3, [r2, r3]
 8001394:	461a      	mov	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4413      	add	r3, r2
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	4907      	ldr	r1, [pc, #28]	; (80013c4 <LL_DMA_SetMemoryIncMode+0x44>)
 80013a6:	5ccb      	ldrb	r3, [r1, r3]
 80013a8:	4619      	mov	r1, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	440b      	add	r3, r1
 80013ae:	4619      	mov	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	08015e70 	.word	0x08015e70

080013c8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	4a0c      	ldr	r2, [pc, #48]	; (800140c <LL_DMA_SetPeriphSize+0x44>)
 80013da:	5cd3      	ldrb	r3, [r2, r3]
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <LL_DMA_SetPeriphSize+0x44>)
 80013ee:	5ccb      	ldrb	r3, [r1, r3]
 80013f0:	4619      	mov	r1, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	440b      	add	r3, r1
 80013f6:	4619      	mov	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	08015e70 	.word	0x08015e70

08001410 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	3b01      	subs	r3, #1
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <LL_DMA_SetMemorySize+0x44>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	461a      	mov	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3b01      	subs	r3, #1
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <LL_DMA_SetMemorySize+0x44>)
 8001436:	5ccb      	ldrb	r3, [r1, r3]
 8001438:	4619      	mov	r1, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	440b      	add	r3, r1
 800143e:	4619      	mov	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	08015e70 	.word	0x08015e70

08001458 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	3b01      	subs	r3, #1
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800146a:	5cd3      	ldrb	r3, [r2, r3]
 800146c:	461a      	mov	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4413      	add	r3, r2
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	3b01      	subs	r3, #1
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	4619      	mov	r1, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	440b      	add	r3, r1
 8001486:	4619      	mov	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	08015e70 	.word	0x08015e70

080014a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <LL_RCC_HSI_Enable+0x1c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <LL_RCC_HSI_Enable+0x1c>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <LL_RCC_HSI_IsReady+0x20>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000

080014e4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4904      	ldr	r1, [pc, #16]	; (800150c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000

08001510 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <LL_RCC_SetSysClkSource+0x24>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 0203 	bic.w	r2, r3, #3
 8001520:	4904      	ldr	r1, [pc, #16]	; (8001534 <LL_RCC_SetSysClkSource+0x24>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40021000 	.word	0x40021000

08001538 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <LL_RCC_GetSysClkSource+0x18>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 030c 	and.w	r3, r3, #12
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000

08001554 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <LL_RCC_SetAHBPrescaler+0x24>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001564:	4904      	ldr	r1, [pc, #16]	; (8001578 <LL_RCC_SetAHBPrescaler+0x24>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40021000 	.word	0x40021000

0800157c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800158c:	4904      	ldr	r1, [pc, #16]	; (80015a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000

080015a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015b4:	4904      	ldr	r1, [pc, #16]	; (80015c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40021000 	.word	0x40021000

080015cc <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <LL_RCC_SetUSARTClockSource+0x34>)
 80015d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	0e1b      	lsrs	r3, r3, #24
 80015dc:	2103      	movs	r1, #3
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	401a      	ands	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80015ec:	4904      	ldr	r1, [pc, #16]	; (8001600 <LL_RCC_SetUSARTClockSource+0x34>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <LL_RCC_SetTIMClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMClockSource(uint32_t TIMxSource)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_TIM1SW << (TIMxSource >> 27U)), (TIMxSource & 0x03FFFFFFU));
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <LL_RCC_SetTIMClockSource+0x34>)
 800160e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	0edb      	lsrs	r3, r3, #27
 8001614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	401a      	ands	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8001626:	4904      	ldr	r1, [pc, #16]	; (8001638 <LL_RCC_SetTIMClockSource+0x34>)
 8001628:	4313      	orrs	r3, r2
 800162a:	630b      	str	r3, [r1, #48]	; 0x30
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	40021000 	.word	0x40021000

0800163c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <LL_RCC_PLL_Enable+0x1c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <LL_RCC_PLL_Enable+0x1c>)
 8001646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000

0800165c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <LL_RCC_PLL_IsReady+0x24>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800166c:	bf0c      	ite	eq
 800166e:	2301      	moveq	r3, #1
 8001670:	2300      	movne	r3, #0
 8001672:	b2db      	uxtb	r3, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000

08001684 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001698:	68f9      	ldr	r1, [r7, #12]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	430b      	orrs	r3, r1
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	f023 020f 	bic.w	r2, r3, #15
 80016ac:	4904      	ldr	r1, [pc, #16]	; (80016c0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40021000 	.word	0x40021000

080016c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4013      	ands	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40021000 	.word	0x40021000

080016f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016fe:	69da      	ldr	r2, [r3, #28]
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <LL_APB1_GRP1_EnableClock+0x2c>)
 800170a:	69da      	ldr	r2, [r3, #28]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4013      	ands	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40021000 	.word	0x40021000

08001724 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <LL_APB2_GRP1_EnableClock+0x2c>)
 800172e:	699a      	ldr	r2, [r3, #24]
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4313      	orrs	r3, r2
 8001736:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <LL_APB2_GRP1_EnableClock+0x2c>)
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4013      	ands	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40021000 	.word	0x40021000

08001754 <LL_SYSCFG_SetRemapDMA_ADC>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_ADC(uint32_t Remap)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(SYSCFG_BASE + (Remap >> 24U)); 
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0e1b      	lsrs	r3, r3, #24
 8001760:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001764:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, (Remap & 0x00FF0000U) >> 8U, (Remap & 0x0000FFFFU));
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001776:	43db      	mvns	r3, r3
 8001778:	401a      	ands	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	b29b      	uxth	r3, r3
 800177e:	431a      	orrs	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	601a      	str	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_SYSCFG_SetRemapDMA_DAC>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_DAC(uint32_t Remap)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR1, (Remap & 0x00FF0000U) >> 8U, (Remap & 0x0000FF00U));
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80017a4:	43db      	mvns	r3, r3
 80017a6:	401a      	ands	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80017ae:	4904      	ldr	r1, [pc, #16]	; (80017c0 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40010000 	.word	0x40010000

080017c4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <LL_SYSCFG_SetEXTISource+0x58>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	3302      	adds	r3, #2
 80017d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	0c1b      	lsrs	r3, r3, #16
 80017de:	43db      	mvns	r3, r3
 80017e0:	ea02 0103 	and.w	r1, r2, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	0c1b      	lsrs	r3, r3, #16
 80017e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	60bb      	str	r3, [r7, #8]
  return result;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	fab3 f383 	clz	r3, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	fa03 f202 	lsl.w	r2, r3, r2
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <LL_SYSCFG_SetEXTISource+0x58>)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	430a      	orrs	r2, r1
 800180a:	3302      	adds	r3, #2
 800180c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40010000 	.word	0x40010000

08001820 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <LL_FLASH_SetLatency+0x24>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 0207 	bic.w	r2, r3, #7
 8001830:	4904      	ldr	r1, [pc, #16]	; (8001844 <LL_FLASH_SetLatency+0x24>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40022000 	.word	0x40022000

08001848 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <LL_FLASH_GetLatency+0x18>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40022000 	.word	0x40022000

08001864 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	601a      	str	r2, [r3, #0]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	601a      	str	r2, [r3, #0]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_TIM_OC_DisableFast>:
  * @note   OC5FE and OC6FE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d028      	beq.n	8001906 <LL_TIM_OC_DisableFast+0x62>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d023      	beq.n	8001902 <LL_TIM_OC_DisableFast+0x5e>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b10      	cmp	r3, #16
 80018be:	d01e      	beq.n	80018fe <LL_TIM_OC_DisableFast+0x5a>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b40      	cmp	r3, #64	; 0x40
 80018c4:	d019      	beq.n	80018fa <LL_TIM_OC_DisableFast+0x56>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018cc:	d013      	beq.n	80018f6 <LL_TIM_OC_DisableFast+0x52>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d4:	d00d      	beq.n	80018f2 <LL_TIM_OC_DisableFast+0x4e>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018dc:	d007      	beq.n	80018ee <LL_TIM_OC_DisableFast+0x4a>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	d101      	bne.n	80018ea <LL_TIM_OC_DisableFast+0x46>
 80018e6:	2307      	movs	r3, #7
 80018e8:	e00e      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 80018ea:	2308      	movs	r3, #8
 80018ec:	e00c      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 80018ee:	2306      	movs	r3, #6
 80018f0:	e00a      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 80018f2:	2305      	movs	r3, #5
 80018f4:	e008      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e006      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 80018fa:	2303      	movs	r3, #3
 80018fc:	e004      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 80018fe:	2302      	movs	r3, #2
 8001900:	e002      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <LL_TIM_OC_DisableFast+0x64>
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3318      	adds	r3, #24
 800190e:	4619      	mov	r1, r3
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <LL_TIM_OC_DisableFast+0x9c>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	440b      	add	r3, r1
 8001918:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	4908      	ldr	r1, [pc, #32]	; (8001944 <LL_TIM_OC_DisableFast+0xa0>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	4619      	mov	r1, r3
 8001926:	2304      	movs	r3, #4
 8001928:	408b      	lsls	r3, r1
 800192a:	43db      	mvns	r3, r3
 800192c:	401a      	ands	r2, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	601a      	str	r2, [r3, #0]

}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	08015e78 	.word	0x08015e78
 8001944:	08015e84 	.word	0x08015e84

08001948 <LL_TIM_OC_EnablePreload>:
  * @note   OC5PE and OC6PE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d028      	beq.n	80019aa <LL_TIM_OC_EnablePreload+0x62>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b04      	cmp	r3, #4
 800195c:	d023      	beq.n	80019a6 <LL_TIM_OC_EnablePreload+0x5e>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b10      	cmp	r3, #16
 8001962:	d01e      	beq.n	80019a2 <LL_TIM_OC_EnablePreload+0x5a>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2b40      	cmp	r3, #64	; 0x40
 8001968:	d019      	beq.n	800199e <LL_TIM_OC_EnablePreload+0x56>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001970:	d013      	beq.n	800199a <LL_TIM_OC_EnablePreload+0x52>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001978:	d00d      	beq.n	8001996 <LL_TIM_OC_EnablePreload+0x4e>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001980:	d007      	beq.n	8001992 <LL_TIM_OC_EnablePreload+0x4a>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d101      	bne.n	800198e <LL_TIM_OC_EnablePreload+0x46>
 800198a:	2307      	movs	r3, #7
 800198c:	e00e      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 800198e:	2308      	movs	r3, #8
 8001990:	e00c      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 8001992:	2306      	movs	r3, #6
 8001994:	e00a      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 8001996:	2305      	movs	r3, #5
 8001998:	e008      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 800199a:	2304      	movs	r3, #4
 800199c:	e006      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 800199e:	2303      	movs	r3, #3
 80019a0:	e004      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e002      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_TIM_OC_EnablePreload+0x64>
 80019aa:	2300      	movs	r3, #0
 80019ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3318      	adds	r3, #24
 80019b2:	4619      	mov	r1, r3
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <LL_TIM_OC_EnablePreload+0x98>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	440b      	add	r3, r1
 80019bc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <LL_TIM_OC_EnablePreload+0x9c>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	4619      	mov	r1, r3
 80019ca:	2308      	movs	r3, #8
 80019cc:	408b      	lsls	r3, r1
 80019ce:	431a      	orrs	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	601a      	str	r2, [r3, #0]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	08015e78 	.word	0x08015e78
 80019e4:	08015e84 	.word	0x08015e84

080019e8 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d028      	beq.n	8001a4c <LL_TIM_IC_SetActiveInput+0x64>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d023      	beq.n	8001a48 <LL_TIM_IC_SetActiveInput+0x60>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b10      	cmp	r3, #16
 8001a04:	d01e      	beq.n	8001a44 <LL_TIM_IC_SetActiveInput+0x5c>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b40      	cmp	r3, #64	; 0x40
 8001a0a:	d019      	beq.n	8001a40 <LL_TIM_IC_SetActiveInput+0x58>
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a12:	d013      	beq.n	8001a3c <LL_TIM_IC_SetActiveInput+0x54>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1a:	d00d      	beq.n	8001a38 <LL_TIM_IC_SetActiveInput+0x50>
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a22:	d007      	beq.n	8001a34 <LL_TIM_IC_SetActiveInput+0x4c>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2a:	d101      	bne.n	8001a30 <LL_TIM_IC_SetActiveInput+0x48>
 8001a2c:	2307      	movs	r3, #7
 8001a2e:	e00e      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a30:	2308      	movs	r3, #8
 8001a32:	e00c      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a34:	2306      	movs	r3, #6
 8001a36:	e00a      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a38:	2305      	movs	r3, #5
 8001a3a:	e008      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	e006      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a40:	2303      	movs	r3, #3
 8001a42:	e004      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e002      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_TIM_IC_SetActiveInput+0x66>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3318      	adds	r3, #24
 8001a54:	4619      	mov	r1, r3
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <LL_TIM_IC_SetActiveInput+0xac>)
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	490c      	ldr	r1, [pc, #48]	; (8001a98 <LL_TIM_IC_SetActiveInput+0xb0>)
 8001a68:	5ccb      	ldrb	r3, [r1, r3]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	408b      	lsls	r3, r1
 8001a70:	43db      	mvns	r3, r3
 8001a72:	401a      	ands	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	0c1b      	lsrs	r3, r3, #16
 8001a78:	7df9      	ldrb	r1, [r7, #23]
 8001a7a:	4807      	ldr	r0, [pc, #28]	; (8001a98 <LL_TIM_IC_SetActiveInput+0xb0>)
 8001a7c:	5c41      	ldrb	r1, [r0, r1]
 8001a7e:	408b      	lsls	r3, r1
 8001a80:	431a      	orrs	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	601a      	str	r2, [r3, #0]
}
 8001a86:	bf00      	nop
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	08015e78 	.word	0x08015e78
 8001a98:	08015e90 	.word	0x08015e90

08001a9c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d028      	beq.n	8001b00 <LL_TIM_IC_SetPrescaler+0x64>
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d023      	beq.n	8001afc <LL_TIM_IC_SetPrescaler+0x60>
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d01e      	beq.n	8001af8 <LL_TIM_IC_SetPrescaler+0x5c>
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b40      	cmp	r3, #64	; 0x40
 8001abe:	d019      	beq.n	8001af4 <LL_TIM_IC_SetPrescaler+0x58>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac6:	d013      	beq.n	8001af0 <LL_TIM_IC_SetPrescaler+0x54>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ace:	d00d      	beq.n	8001aec <LL_TIM_IC_SetPrescaler+0x50>
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad6:	d007      	beq.n	8001ae8 <LL_TIM_IC_SetPrescaler+0x4c>
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ade:	d101      	bne.n	8001ae4 <LL_TIM_IC_SetPrescaler+0x48>
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	e00e      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	e00c      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001ae8:	2306      	movs	r3, #6
 8001aea:	e00a      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001aec:	2305      	movs	r3, #5
 8001aee:	e008      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e006      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001af4:	2303      	movs	r3, #3
 8001af6:	e004      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e002      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <LL_TIM_IC_SetPrescaler+0x66>
 8001b00:	2300      	movs	r3, #0
 8001b02:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3318      	adds	r3, #24
 8001b08:	4619      	mov	r1, r3
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <LL_TIM_IC_SetPrescaler+0xac>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	440b      	add	r3, r1
 8001b12:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	490c      	ldr	r1, [pc, #48]	; (8001b4c <LL_TIM_IC_SetPrescaler+0xb0>)
 8001b1c:	5ccb      	ldrb	r3, [r1, r3]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	230c      	movs	r3, #12
 8001b22:	408b      	lsls	r3, r1
 8001b24:	43db      	mvns	r3, r3
 8001b26:	401a      	ands	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0c1b      	lsrs	r3, r3, #16
 8001b2c:	7df9      	ldrb	r1, [r7, #23]
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <LL_TIM_IC_SetPrescaler+0xb0>)
 8001b30:	5c41      	ldrb	r1, [r0, r1]
 8001b32:	408b      	lsls	r3, r1
 8001b34:	431a      	orrs	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	601a      	str	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	08015e78 	.word	0x08015e78
 8001b4c:	08015e90 	.word	0x08015e90

08001b50 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d028      	beq.n	8001bb4 <LL_TIM_IC_SetFilter+0x64>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d023      	beq.n	8001bb0 <LL_TIM_IC_SetFilter+0x60>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d01e      	beq.n	8001bac <LL_TIM_IC_SetFilter+0x5c>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b40      	cmp	r3, #64	; 0x40
 8001b72:	d019      	beq.n	8001ba8 <LL_TIM_IC_SetFilter+0x58>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b7a:	d013      	beq.n	8001ba4 <LL_TIM_IC_SetFilter+0x54>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b82:	d00d      	beq.n	8001ba0 <LL_TIM_IC_SetFilter+0x50>
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8a:	d007      	beq.n	8001b9c <LL_TIM_IC_SetFilter+0x4c>
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b92:	d101      	bne.n	8001b98 <LL_TIM_IC_SetFilter+0x48>
 8001b94:	2307      	movs	r3, #7
 8001b96:	e00e      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001b98:	2308      	movs	r3, #8
 8001b9a:	e00c      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001b9c:	2306      	movs	r3, #6
 8001b9e:	e00a      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	e008      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	e006      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e004      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e002      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <LL_TIM_IC_SetFilter+0x66>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3318      	adds	r3, #24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <LL_TIM_IC_SetFilter+0xac>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	440b      	add	r3, r1
 8001bc6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	490c      	ldr	r1, [pc, #48]	; (8001c00 <LL_TIM_IC_SetFilter+0xb0>)
 8001bd0:	5ccb      	ldrb	r3, [r1, r3]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	23f0      	movs	r3, #240	; 0xf0
 8001bd6:	408b      	lsls	r3, r1
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	401a      	ands	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0c1b      	lsrs	r3, r3, #16
 8001be0:	7df9      	ldrb	r1, [r7, #23]
 8001be2:	4807      	ldr	r0, [pc, #28]	; (8001c00 <LL_TIM_IC_SetFilter+0xb0>)
 8001be4:	5c41      	ldrb	r1, [r0, r1]
 8001be6:	408b      	lsls	r3, r1
 8001be8:	431a      	orrs	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	371c      	adds	r7, #28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	08015e78 	.word	0x08015e78
 8001c00:	08015e90 	.word	0x08015e90

08001c04 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d028      	beq.n	8001c68 <LL_TIM_IC_SetPolarity+0x64>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d023      	beq.n	8001c64 <LL_TIM_IC_SetPolarity+0x60>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b10      	cmp	r3, #16
 8001c20:	d01e      	beq.n	8001c60 <LL_TIM_IC_SetPolarity+0x5c>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b40      	cmp	r3, #64	; 0x40
 8001c26:	d019      	beq.n	8001c5c <LL_TIM_IC_SetPolarity+0x58>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c2e:	d013      	beq.n	8001c58 <LL_TIM_IC_SetPolarity+0x54>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c36:	d00d      	beq.n	8001c54 <LL_TIM_IC_SetPolarity+0x50>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c3e:	d007      	beq.n	8001c50 <LL_TIM_IC_SetPolarity+0x4c>
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d101      	bne.n	8001c4c <LL_TIM_IC_SetPolarity+0x48>
 8001c48:	2307      	movs	r3, #7
 8001c4a:	e00e      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	e00c      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c50:	2306      	movs	r3, #6
 8001c52:	e00a      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c54:	2305      	movs	r3, #5
 8001c56:	e008      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e006      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e004      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e002      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <LL_TIM_IC_SetPolarity+0x66>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a1a      	ldr	r2, [r3, #32]
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	490b      	ldr	r1, [pc, #44]	; (8001ca0 <LL_TIM_IC_SetPolarity+0x9c>)
 8001c74:	5ccb      	ldrb	r3, [r1, r3]
 8001c76:	4619      	mov	r1, r3
 8001c78:	230a      	movs	r3, #10
 8001c7a:	408b      	lsls	r3, r1
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	401a      	ands	r2, r3
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <LL_TIM_IC_SetPolarity+0x9c>)
 8001c84:	5ccb      	ldrb	r3, [r1, r3]
 8001c86:	4619      	mov	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	408b      	lsls	r3, r1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	08015e9c 	.word	0x08015e9c

08001ca4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001cb6:	f023 0307 	bic.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	605a      	str	r2, [r3, #4]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @note   OC5 and OC6 are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	605a      	str	r2, [r3, #4]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_TIM_SetSlaveMode>:
  *         @arg @ref LL_TIM_SLAVEMODE_TRIGGER
  *         @arg @ref LL_TIM_SLAVEMODE_COMBINED_RESETTRIGGER
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2c:	f023 0307 	bic.w	r3, r3, #7
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	609a      	str	r2, [r3, #8]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_TIM_SetTriggerInput>:
  *         @arg @ref LL_TIM_TS_TI2FP2
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_TIM_EnableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_EnableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_TIM_DisableIT_TRIG>:
  * @rmtoll DIER         TIE           LL_TIM_DisableIT_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TIE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60da      	str	r2, [r3, #12]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_TIM_DisableDMAReq_TRIG>:
  * @rmtoll DIER         TDE           LL_TIM_DisableDMAReq_TRIG
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_TDE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60da      	str	r2, [r3, #12]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	609a      	str	r2, [r3, #8]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	609a      	str	r2, [r3, #8]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b089      	sub	sp, #36	; 0x24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	613b      	str	r3, [r7, #16]
  return result;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	401a      	ands	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	61bb      	str	r3, [r7, #24]
  return result;
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	3724      	adds	r7, #36	; 0x24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	613b      	str	r3, [r7, #16]
  return result;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2103      	movs	r1, #3
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	61bb      	str	r3, [r7, #24]
  return result;
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	431a      	orrs	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	60da      	str	r2, [r3, #12]
}
 8001f06:	bf00      	nop
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f32:	f001 f8cb 	bl	80030cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f36:	f000 f81f 	bl	8001f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f3a:	f000 ff89 	bl	8002e50 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f3e:	f000 ff7d 	bl	8002e3c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f42:	f000 ff27 	bl	8002d94 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001f46:	f000 f86f 	bl	8002028 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f4a:	f000 f969 	bl	8002220 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001f4e:	f000 fa35 	bl	80023bc <MX_ADC3_Init>
  MX_ADC4_Init();
 8001f52:	f000 fb0f 	bl	8002574 <MX_ADC4_Init>
  MX_TIM3_Init();
 8001f56:	f000 fcbf 	bl	80028d8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001f5a:	f000 fc43 	bl	80027e4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001f5e:	f000 fd2f 	bl	80029c0 <MX_TIM4_Init>
  MX_DAC1_Init();
 8001f62:	f000 fbd3 	bl	800270c <MX_DAC1_Init>
  MX_TIM8_Init();
 8001f66:	f000 fde3 	bl	8002b30 <MX_TIM8_Init>
  MX_TIM6_Init();
 8001f6a:	f000 fdab 	bl	8002ac4 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 8001f6e:	f003 f8bf 	bl	80050f0 <app_main>
 8001f72:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f7ff fc4f 	bl	8001820 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001f82:	bf00      	nop
 8001f84:	f7ff fc60 	bl	8001848 <LL_FLASH_GetLatency>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d1fa      	bne.n	8001f84 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001f8e:	f7ff fa87 	bl	80014a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001f92:	bf00      	nop
 8001f94:	f7ff fa94 	bl	80014c0 <LL_RCC_HSI_IsReady>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d1fa      	bne.n	8001f94 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001f9e:	2010      	movs	r0, #16
 8001fa0:	f7ff faa0 	bl	80014e4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_9, LL_RCC_PREDIV_DIV_1);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8001faa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fae:	f7ff fb69 	bl	8001684 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001fb2:	f7ff fb43 	bl	800163c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001fb6:	bf00      	nop
 8001fb8:	f7ff fb50 	bl	800165c <LL_RCC_PLL_IsReady>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d1fa      	bne.n	8001fb8 <SystemClock_Config+0x40>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff fac6 	bl	8001554 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001fc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001fcc:	f7ff fad6 	bl	800157c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff fae7 	bl	80015a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	f7ff fa9a 	bl	8001510 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001fdc:	bf00      	nop
 8001fde:	f7ff faab 	bl	8001538 <LL_RCC_GetSysClkSource>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d1fa      	bne.n	8001fde <SystemClock_Config+0x66>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8001fe8:	480e      	ldr	r0, [pc, #56]	; (8002024 <SystemClock_Config+0xac>)
 8001fea:	f003 f863 	bl	80050b4 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001fee:	200f      	movs	r0, #15
 8001ff0:	f001 f882 	bl	80030f8 <HAL_InitTick>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001ffa:	f000 ff8b 	bl	8002f14 <Error_Handler>
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001ffe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002002:	f7ff fae3 	bl	80015cc <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM8_CLKSOURCE_PCLK2);
 8002006:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800200a:	f7ff fafb 	bl	8001604 <LL_RCC_SetTIMClockSource>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM2_CLKSOURCE_PCLK1);
 800200e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002012:	f7ff faf7 	bl	8001604 <LL_RCC_SetTIMClockSource>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM34_CLKSOURCE_PCLK1);
 8002016:	f04f 4008 	mov.w	r0, #2281701376	; 0x88000000
 800201a:	f7ff faf3 	bl	8001604 <LL_RCC_SetTIMClockSource>
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	044aa200 	.word	0x044aa200

08002028 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b094      	sub	sp, #80	; 0x50
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800202e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800203a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	611a      	str	r2, [r3, #16]
 800204a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800204c:	f107 0318 	add.w	r3, r7, #24
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205a:	463b      	mov	r3, r7
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
 8002068:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 800206a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800206e:	f7ff fb29 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002072:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002076:	f7ff fb25 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC0   ------> ADC1_IN6
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800207a:	2301      	movs	r3, #1
 800207c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800207e:	2303      	movs	r3, #3
 8002080:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002086:	463b      	mov	r3, r7
 8002088:	4619      	mov	r1, r3
 800208a:	485b      	ldr	r0, [pc, #364]	; (80021f8 <MX_ADC1_Init+0x1d0>)
 800208c:	f001 ff4b 	bl	8003f26 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002090:	2200      	movs	r2, #0
 8002092:	2101      	movs	r1, #1
 8002094:	4859      	ldr	r0, [pc, #356]	; (80021fc <MX_ADC1_Init+0x1d4>)
 8002096:	f7ff f905 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_VERYHIGH);
 800209a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800209e:	2101      	movs	r1, #1
 80020a0:	4856      	ldr	r0, [pc, #344]	; (80021fc <MX_ADC1_Init+0x1d4>)
 80020a2:	f7ff f9d9 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 80020a6:	2220      	movs	r2, #32
 80020a8:	2101      	movs	r1, #1
 80020aa:	4854      	ldr	r0, [pc, #336]	; (80021fc <MX_ADC1_Init+0x1d4>)
 80020ac:	f7ff f920 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2101      	movs	r1, #1
 80020b4:	4851      	ldr	r0, [pc, #324]	; (80021fc <MX_ADC1_Init+0x1d4>)
 80020b6:	f7ff f93f 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80020ba:	2280      	movs	r2, #128	; 0x80
 80020bc:	2101      	movs	r1, #1
 80020be:	484f      	ldr	r0, [pc, #316]	; (80021fc <MX_ADC1_Init+0x1d4>)
 80020c0:	f7ff f95e 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80020c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c8:	2101      	movs	r1, #1
 80020ca:	484c      	ldr	r0, [pc, #304]	; (80021fc <MX_ADC1_Init+0x1d4>)
 80020cc:	f7ff f97c 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80020d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d4:	2101      	movs	r1, #1
 80020d6:	4849      	ldr	r0, [pc, #292]	; (80021fc <MX_ADC1_Init+0x1d4>)
 80020d8:	f7ff f99a 	bl	8001410 <LL_DMA_SetMemorySize>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80020dc:	2300      	movs	r3, #0
 80020de:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80020e0:	2300      	movs	r3, #0
 80020e2:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80020e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ec:	4619      	mov	r1, r3
 80020ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020f2:	f001 fb1b 	bl	800372c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO_ADC12;
 80020f6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80020fc:	2301      	movs	r3, #1
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002104:	2300      	movs	r3, #0
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002108:	2303      	movs	r3, #3
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800210c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002116:	4619      	mov	r1, r3
 8002118:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800211c:	f001 fb2c 	bl	8003778 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8002120:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002124:	f7ff f87d 	bl	8001222 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8002128:	4b35      	ldr	r3, [pc, #212]	; (8002200 <MX_ADC1_Init+0x1d8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	4a35      	ldr	r2, [pc, #212]	; (8002204 <MX_ADC1_Init+0x1dc>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	099a      	lsrs	r2, r3, #6
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	461a      	mov	r2, r3
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <MX_ADC1_Init+0x1e0>)
 8002142:	fba3 2302 	umull	r2, r3, r3, r2
 8002146:	08db      	lsrs	r3, r3, #3
 8002148:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(wait_loop_index != 0)
 800214a:	e002      	b.n	8002152 <MX_ADC1_Init+0x12a>
     {
   wait_loop_index--;
 800214c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800214e:	3b01      	subs	r3, #1
 8002150:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(wait_loop_index != 0)
 8002152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f9      	bne.n	800214c <MX_ADC1_Init+0x124>
     }
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8002158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002162:	f107 0318 	add.w	r3, r7, #24
 8002166:	4619      	mov	r1, r3
 8002168:	4828      	ldr	r0, [pc, #160]	; (800220c <MX_ADC1_Init+0x1e4>)
 800216a:	f001 fa81 	bl	8003670 <LL_ADC_CommonInit>
  LL_ADC_REG_SetTriggerEdge(ADC1, LL_ADC_REG_TRIG_EXT_RISING);
 800216e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002172:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002176:	f7fe ff32 	bl	8000fde <LL_ADC_REG_SetTriggerEdge>
  /** Configure Analog WatchDog 1
  */
  LL_ADC_SetAnalogWDMonitChannels(ADC1, LL_ADC_AWD1, LL_ADC_AWD_CH_VREFINT_REG);
 800217a:	4a25      	ldr	r2, [pc, #148]	; (8002210 <MX_ADC1_Init+0x1e8>)
 800217c:	4925      	ldr	r1, [pc, #148]	; (8002214 <MX_ADC1_Init+0x1ec>)
 800217e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002182:	f7fe ffe7 	bl	8001154 <LL_ADC_SetAnalogWDMonitChannels>
  LL_ADC_ConfigAnalogWDThresholds(ADC1, LL_ADC_AWD1, 4095, 0);
 8002186:	2300      	movs	r3, #0
 8002188:	f640 72ff 	movw	r2, #4095	; 0xfff
 800218c:	4921      	ldr	r1, [pc, #132]	; (8002214 <MX_ADC1_Init+0x1ec>)
 800218e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002192:	f7ff f819 	bl	80011c8 <LL_ADC_ConfigAnalogWDThresholds>
  LL_ADC_EnableIT_AWD1(ADC1);
 8002196:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800219a:	f7ff f85c 	bl	8001256 <LL_ADC_EnableIT_AWD1>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_VREFINT);
 800219e:	4a1e      	ldr	r2, [pc, #120]	; (8002218 <MX_ADC1_Init+0x1f0>)
 80021a0:	2106      	movs	r1, #6
 80021a2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021a6:	f7fe ff2d 	bl	8001004 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80021aa:	2200      	movs	r2, #0
 80021ac:	491a      	ldr	r1, [pc, #104]	; (8002218 <MX_ADC1_Init+0x1f0>)
 80021ae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021b2:	f7fe ff5e 	bl	8001072 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SINGLE_ENDED);
 80021b6:	227f      	movs	r2, #127	; 0x7f
 80021b8:	4917      	ldr	r1, [pc, #92]	; (8002218 <MX_ADC1_Init+0x1f0>)
 80021ba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021be:	f7fe ffa5 	bl	800110c <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 80021c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80021c6:	4811      	ldr	r0, [pc, #68]	; (800220c <MX_ADC1_Init+0x1e4>)
 80021c8:	f7fe fef6 	bl	8000fb8 <LL_ADC_SetCommonPathInternalCh>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_6);
 80021cc:	4a13      	ldr	r2, [pc, #76]	; (800221c <MX_ADC1_Init+0x1f4>)
 80021ce:	210c      	movs	r1, #12
 80021d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021d4:	f7fe ff16 	bl	8001004 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80021d8:	2200      	movs	r2, #0
 80021da:	4910      	ldr	r1, [pc, #64]	; (800221c <MX_ADC1_Init+0x1f4>)
 80021dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021e0:	f7fe ff47 	bl	8001072 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SINGLE_ENDED);
 80021e4:	227f      	movs	r2, #127	; 0x7f
 80021e6:	490d      	ldr	r1, [pc, #52]	; (800221c <MX_ADC1_Init+0x1f4>)
 80021e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021ec:	f7fe ff8e 	bl	800110c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	3750      	adds	r7, #80	; 0x50
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	48000800 	.word	0x48000800
 80021fc:	40020000 	.word	0x40020000
 8002200:	20000000 	.word	0x20000000
 8002204:	053e2d63 	.word	0x053e2d63
 8002208:	cccccccd 	.word	0xcccccccd
 800220c:	50000300 	.word	0x50000300
 8002210:	c8c40000 	.word	0xc8c40000
 8002214:	7dc00000 	.word	0x7dc00000
 8002218:	cb840000 	.word	0xcb840000
 800221c:	19200040 	.word	0x19200040

08002220 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b090      	sub	sp, #64	; 0x40
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002226:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002232:	f107 0318 	add.w	r3, r7, #24
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]
 8002242:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	463b      	mov	r3, r7
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	611a      	str	r2, [r3, #16]
 8002252:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8002254:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002258:	f7ff fa34 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800225c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002260:	f7ff fa30 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC1   ------> ADC2_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002264:	2302      	movs	r3, #2
 8002266:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002268:	2303      	movs	r3, #3
 800226a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002270:	463b      	mov	r3, r7
 8002272:	4619      	mov	r1, r3
 8002274:	4847      	ldr	r0, [pc, #284]	; (8002394 <MX_ADC2_Init+0x174>)
 8002276:	f001 fe56 	bl	8003f26 <LL_GPIO_Init>

  /* ADC2 DMA Init */

  /* ADC2 Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800227a:	2200      	movs	r2, #0
 800227c:	2103      	movs	r1, #3
 800227e:	4846      	ldr	r0, [pc, #280]	; (8002398 <MX_ADC2_Init+0x178>)
 8002280:	f7ff f810 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_VERYHIGH);
 8002284:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002288:	2103      	movs	r1, #3
 800228a:	4843      	ldr	r0, [pc, #268]	; (8002398 <MX_ADC2_Init+0x178>)
 800228c:	f7ff f8e4 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 8002290:	2220      	movs	r2, #32
 8002292:	2103      	movs	r1, #3
 8002294:	4840      	ldr	r0, [pc, #256]	; (8002398 <MX_ADC2_Init+0x178>)
 8002296:	f7ff f82b 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 800229a:	2200      	movs	r2, #0
 800229c:	2103      	movs	r1, #3
 800229e:	483e      	ldr	r0, [pc, #248]	; (8002398 <MX_ADC2_Init+0x178>)
 80022a0:	f7ff f84a 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	2103      	movs	r1, #3
 80022a8:	483b      	ldr	r0, [pc, #236]	; (8002398 <MX_ADC2_Init+0x178>)
 80022aa:	f7ff f869 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 80022ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b2:	2103      	movs	r1, #3
 80022b4:	4838      	ldr	r0, [pc, #224]	; (8002398 <MX_ADC2_Init+0x178>)
 80022b6:	f7ff f887 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 80022ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022be:	2103      	movs	r1, #3
 80022c0:	4835      	ldr	r0, [pc, #212]	; (8002398 <MX_ADC2_Init+0x178>)
 80022c2:	f7ff f8a5 	bl	8001410 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_ADC(LL_SYSCFG_ADC24_RMP_DMA2_CH34);
 80022c6:	4835      	ldr	r0, [pc, #212]	; (800239c <MX_ADC2_Init+0x17c>)
 80022c8:	f7ff fa44 	bl	8001754 <LL_SYSCFG_SetRemapDMA_ADC>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80022cc:	2300      	movs	r3, #0
 80022ce:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80022d0:	2300      	movs	r3, #0
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 80022d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022dc:	4619      	mov	r1, r3
 80022de:	4830      	ldr	r0, [pc, #192]	; (80023a0 <MX_ADC2_Init+0x180>)
 80022e0:	f001 fa24 	bl	800372c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO_ADC12;
 80022e4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80022e8:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80022f6:	2303      	movs	r3, #3
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 80022fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8002300:	f107 0318 	add.w	r3, r7, #24
 8002304:	4619      	mov	r1, r3
 8002306:	4826      	ldr	r0, [pc, #152]	; (80023a0 <MX_ADC2_Init+0x180>)
 8002308:	f001 fa36 	bl	8003778 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 800230c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002310:	f7fe ff87 	bl	8001222 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8002314:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <MX_ADC2_Init+0x184>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <MX_ADC2_Init+0x188>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	099a      	lsrs	r2, r3, #6
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	461a      	mov	r2, r3
 800232c:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <MX_ADC2_Init+0x18c>)
 800232e:	fba3 2302 	umull	r2, r3, r3, r2
 8002332:	08db      	lsrs	r3, r3, #3
 8002334:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 8002336:	e002      	b.n	800233e <MX_ADC2_Init+0x11e>
     {
   wait_loop_index--;
 8002338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800233a:	3b01      	subs	r3, #1
 800233c:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 800233e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f9      	bne.n	8002338 <MX_ADC2_Init+0x118>
     }
  LL_ADC_REG_SetTriggerEdge(ADC2, LL_ADC_REG_TRIG_EXT_RISING);
 8002344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002348:	4815      	ldr	r0, [pc, #84]	; (80023a0 <MX_ADC2_Init+0x180>)
 800234a:	f7fe fe48 	bl	8000fde <LL_ADC_REG_SetTriggerEdge>
  /** Configure Analog WatchDog 1
  */
  LL_ADC_SetAnalogWDMonitChannels(ADC2, LL_ADC_AWD1, LL_ADC_AWD_CHANNEL_7_REG);
 800234e:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <MX_ADC2_Init+0x190>)
 8002350:	4918      	ldr	r1, [pc, #96]	; (80023b4 <MX_ADC2_Init+0x194>)
 8002352:	4813      	ldr	r0, [pc, #76]	; (80023a0 <MX_ADC2_Init+0x180>)
 8002354:	f7fe fefe 	bl	8001154 <LL_ADC_SetAnalogWDMonitChannels>
  LL_ADC_ConfigAnalogWDThresholds(ADC2, LL_ADC_AWD1, 4095, 0);
 8002358:	2300      	movs	r3, #0
 800235a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800235e:	4915      	ldr	r1, [pc, #84]	; (80023b4 <MX_ADC2_Init+0x194>)
 8002360:	480f      	ldr	r0, [pc, #60]	; (80023a0 <MX_ADC2_Init+0x180>)
 8002362:	f7fe ff31 	bl	80011c8 <LL_ADC_ConfigAnalogWDThresholds>
  LL_ADC_EnableIT_AWD1(ADC2);
 8002366:	480e      	ldr	r0, [pc, #56]	; (80023a0 <MX_ADC2_Init+0x180>)
 8002368:	f7fe ff75 	bl	8001256 <LL_ADC_EnableIT_AWD1>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_7);
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <MX_ADC2_Init+0x198>)
 800236e:	2106      	movs	r1, #6
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <MX_ADC2_Init+0x180>)
 8002372:	f7fe fe47 	bl	8001004 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002376:	2200      	movs	r2, #0
 8002378:	490f      	ldr	r1, [pc, #60]	; (80023b8 <MX_ADC2_Init+0x198>)
 800237a:	4809      	ldr	r0, [pc, #36]	; (80023a0 <MX_ADC2_Init+0x180>)
 800237c:	f7fe fe79 	bl	8001072 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_7, LL_ADC_SINGLE_ENDED);
 8002380:	227f      	movs	r2, #127	; 0x7f
 8002382:	490d      	ldr	r1, [pc, #52]	; (80023b8 <MX_ADC2_Init+0x198>)
 8002384:	4806      	ldr	r0, [pc, #24]	; (80023a0 <MX_ADC2_Init+0x180>)
 8002386:	f7fe fec1 	bl	800110c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	3740      	adds	r7, #64	; 0x40
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	48000800 	.word	0x48000800
 8002398:	40020400 	.word	0x40020400
 800239c:	00010100 	.word	0x00010100
 80023a0:	50000100 	.word	0x50000100
 80023a4:	20000000 	.word	0x20000000
 80023a8:	053e2d63 	.word	0x053e2d63
 80023ac:	cccccccd 	.word	0xcccccccd
 80023b0:	1cc00080 	.word	0x1cc00080
 80023b4:	7dc00000 	.word	0x7dc00000
 80023b8:	1d500080 	.word	0x1d500080

080023bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b094      	sub	sp, #80	; 0x50
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80023c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80023ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	611a      	str	r2, [r3, #16]
 80023de:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80023e0:	f107 0318 	add.w	r3, r7, #24
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ee:	463b      	mov	r3, r7
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
 80023fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC34);
 80023fe:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002402:	f7ff f95f 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002406:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800240a:	f7ff f95b 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**ADC3 GPIO Configuration
  PB0   ------> ADC3_IN12
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800240e:	2301      	movs	r3, #1
 8002410:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002412:	2303      	movs	r3, #3
 8002414:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	463b      	mov	r3, r7
 800241c:	4619      	mov	r1, r3
 800241e:	484b      	ldr	r0, [pc, #300]	; (800254c <MX_ADC3_Init+0x190>)
 8002420:	f001 fd81 	bl	8003f26 <LL_GPIO_Init>

  /* ADC3 DMA Init */

  /* ADC3 Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002424:	2200      	movs	r2, #0
 8002426:	2105      	movs	r1, #5
 8002428:	4849      	ldr	r0, [pc, #292]	; (8002550 <MX_ADC3_Init+0x194>)
 800242a:	f7fe ff3b 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_VERYHIGH);
 800242e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002432:	2105      	movs	r1, #5
 8002434:	4846      	ldr	r0, [pc, #280]	; (8002550 <MX_ADC3_Init+0x194>)
 8002436:	f7ff f80f 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 800243a:	2200      	movs	r2, #0
 800243c:	2105      	movs	r1, #5
 800243e:	4844      	ldr	r0, [pc, #272]	; (8002550 <MX_ADC3_Init+0x194>)
 8002440:	f7fe ff56 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8002444:	2200      	movs	r2, #0
 8002446:	2105      	movs	r1, #5
 8002448:	4841      	ldr	r0, [pc, #260]	; (8002550 <MX_ADC3_Init+0x194>)
 800244a:	f7fe ff75 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	2105      	movs	r1, #5
 8002452:	483f      	ldr	r0, [pc, #252]	; (8002550 <MX_ADC3_Init+0x194>)
 8002454:	f7fe ff94 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_HALFWORD);
 8002458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800245c:	2105      	movs	r1, #5
 800245e:	483c      	ldr	r0, [pc, #240]	; (8002550 <MX_ADC3_Init+0x194>)
 8002460:	f7fe ffb2 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_HALFWORD);
 8002464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002468:	2105      	movs	r1, #5
 800246a:	4839      	ldr	r0, [pc, #228]	; (8002550 <MX_ADC3_Init+0x194>)
 800246c:	f7fe ffd0 	bl	8001410 <LL_DMA_SetMemorySize>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002470:	2300      	movs	r3, #0
 8002472:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002474:	2300      	movs	r3, #0
 8002476:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8002478:	2300      	movs	r3, #0
 800247a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 800247c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002480:	4619      	mov	r1, r3
 8002482:	4834      	ldr	r0, [pc, #208]	; (8002554 <MX_ADC3_Init+0x198>)
 8002484:	f001 f952 	bl	800372c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO__ADC34;
 8002488:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800249a:	2303      	movs	r3, #3
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800249e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 80024a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024a8:	4619      	mov	r1, r3
 80024aa:	482a      	ldr	r0, [pc, #168]	; (8002554 <MX_ADC3_Init+0x198>)
 80024ac:	f001 f964 	bl	8003778 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 80024b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024b4:	f7fe feb5 	bl	8001222 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80024b8:	4b27      	ldr	r3, [pc, #156]	; (8002558 <MX_ADC3_Init+0x19c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	4a27      	ldr	r2, [pc, #156]	; (800255c <MX_ADC3_Init+0x1a0>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	099a      	lsrs	r2, r3, #6
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b23      	ldr	r3, [pc, #140]	; (8002560 <MX_ADC3_Init+0x1a4>)
 80024d2:	fba3 2302 	umull	r2, r3, r3, r2
 80024d6:	08db      	lsrs	r3, r3, #3
 80024d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(wait_loop_index != 0)
 80024da:	e002      	b.n	80024e2 <MX_ADC3_Init+0x126>
     {
   wait_loop_index--;
 80024dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024de:	3b01      	subs	r3, #1
 80024e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(wait_loop_index != 0)
 80024e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f9      	bne.n	80024dc <MX_ADC3_Init+0x120>
     }
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80024e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ec:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 80024f2:	f107 0318 	add.w	r3, r7, #24
 80024f6:	4619      	mov	r1, r3
 80024f8:	481a      	ldr	r0, [pc, #104]	; (8002564 <MX_ADC3_Init+0x1a8>)
 80024fa:	f001 f8b9 	bl	8003670 <LL_ADC_CommonInit>
  LL_ADC_REG_SetTriggerEdge(ADC3, LL_ADC_REG_TRIG_EXT_RISING);
 80024fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002502:	4814      	ldr	r0, [pc, #80]	; (8002554 <MX_ADC3_Init+0x198>)
 8002504:	f7fe fd6b 	bl	8000fde <LL_ADC_REG_SetTriggerEdge>
  /** Configure Analog WatchDog 1
  */
  LL_ADC_SetAnalogWDMonitChannels(ADC3, LL_ADC_AWD1, LL_ADC_AWD_CHANNEL_12_REG);
 8002508:	4a17      	ldr	r2, [pc, #92]	; (8002568 <MX_ADC3_Init+0x1ac>)
 800250a:	4918      	ldr	r1, [pc, #96]	; (800256c <MX_ADC3_Init+0x1b0>)
 800250c:	4811      	ldr	r0, [pc, #68]	; (8002554 <MX_ADC3_Init+0x198>)
 800250e:	f7fe fe21 	bl	8001154 <LL_ADC_SetAnalogWDMonitChannels>
  LL_ADC_ConfigAnalogWDThresholds(ADC3, LL_ADC_AWD1, 4095, 0);
 8002512:	2300      	movs	r3, #0
 8002514:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002518:	4914      	ldr	r1, [pc, #80]	; (800256c <MX_ADC3_Init+0x1b0>)
 800251a:	480e      	ldr	r0, [pc, #56]	; (8002554 <MX_ADC3_Init+0x198>)
 800251c:	f7fe fe54 	bl	80011c8 <LL_ADC_ConfigAnalogWDThresholds>
  LL_ADC_EnableIT_AWD1(ADC3);
 8002520:	480c      	ldr	r0, [pc, #48]	; (8002554 <MX_ADC3_Init+0x198>)
 8002522:	f7fe fe98 	bl	8001256 <LL_ADC_EnableIT_AWD1>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_12);
 8002526:	4a12      	ldr	r2, [pc, #72]	; (8002570 <MX_ADC3_Init+0x1b4>)
 8002528:	2106      	movs	r1, #6
 800252a:	480a      	ldr	r0, [pc, #40]	; (8002554 <MX_ADC3_Init+0x198>)
 800252c:	f7fe fd6a 	bl	8001004 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002530:	2200      	movs	r2, #0
 8002532:	490f      	ldr	r1, [pc, #60]	; (8002570 <MX_ADC3_Init+0x1b4>)
 8002534:	4807      	ldr	r0, [pc, #28]	; (8002554 <MX_ADC3_Init+0x198>)
 8002536:	f7fe fd9c 	bl	8001072 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_12, LL_ADC_SINGLE_ENDED);
 800253a:	227f      	movs	r2, #127	; 0x7f
 800253c:	490c      	ldr	r1, [pc, #48]	; (8002570 <MX_ADC3_Init+0x1b4>)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_ADC3_Init+0x198>)
 8002540:	f7fe fde4 	bl	800110c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002544:	bf00      	nop
 8002546:	3750      	adds	r7, #80	; 0x50
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	48000400 	.word	0x48000400
 8002550:	40020400 	.word	0x40020400
 8002554:	50000400 	.word	0x50000400
 8002558:	20000000 	.word	0x20000000
 800255c:	053e2d63 	.word	0x053e2d63
 8002560:	cccccccd 	.word	0xcccccccd
 8002564:	50000700 	.word	0x50000700
 8002568:	30c01000 	.word	0x30c01000
 800256c:	7dc00000 	.word	0x7dc00000
 8002570:	32601000 	.word	0x32601000

08002574 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b090      	sub	sp, #64	; 0x40
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800257a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002586:	f107 0318 	add.w	r3, r7, #24
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	611a      	str	r2, [r3, #16]
 8002596:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	463b      	mov	r3, r7
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	611a      	str	r2, [r3, #16]
 80025a6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC34);
 80025a8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80025ac:	f7ff f88a 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80025b0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80025b4:	f7ff f886 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**ADC4 GPIO Configuration
  PB14   ------> ADC4_IN4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80025b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80025be:	2303      	movs	r3, #3
 80025c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c6:	463b      	mov	r3, r7
 80025c8:	4619      	mov	r1, r3
 80025ca:	4847      	ldr	r0, [pc, #284]	; (80026e8 <MX_ADC4_Init+0x174>)
 80025cc:	f001 fcab 	bl	8003f26 <LL_GPIO_Init>

  /* ADC4 DMA Init */

  /* ADC4 Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2104      	movs	r1, #4
 80025d4:	4845      	ldr	r0, [pc, #276]	; (80026ec <MX_ADC4_Init+0x178>)
 80025d6:	f7fe fe65 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_VERYHIGH);
 80025da:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80025de:	2104      	movs	r1, #4
 80025e0:	4842      	ldr	r0, [pc, #264]	; (80026ec <MX_ADC4_Init+0x178>)
 80025e2:	f7fe ff39 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_4, LL_DMA_MODE_CIRCULAR);
 80025e6:	2220      	movs	r2, #32
 80025e8:	2104      	movs	r1, #4
 80025ea:	4840      	ldr	r0, [pc, #256]	; (80026ec <MX_ADC4_Init+0x178>)
 80025ec:	f7fe fe80 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2104      	movs	r1, #4
 80025f4:	483d      	ldr	r0, [pc, #244]	; (80026ec <MX_ADC4_Init+0x178>)
 80025f6:	f7fe fe9f 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 80025fa:	2280      	movs	r2, #128	; 0x80
 80025fc:	2104      	movs	r1, #4
 80025fe:	483b      	ldr	r0, [pc, #236]	; (80026ec <MX_ADC4_Init+0x178>)
 8002600:	f7fe febe 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_HALFWORD);
 8002604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002608:	2104      	movs	r1, #4
 800260a:	4838      	ldr	r0, [pc, #224]	; (80026ec <MX_ADC4_Init+0x178>)
 800260c:	f7fe fedc 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_HALFWORD);
 8002610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002614:	2104      	movs	r1, #4
 8002616:	4835      	ldr	r0, [pc, #212]	; (80026ec <MX_ADC4_Init+0x178>)
 8002618:	f7fe fefa 	bl	8001410 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_ADC(LL_SYSCFG_ADC24_RMP_DMA2_CH34);
 800261c:	4834      	ldr	r0, [pc, #208]	; (80026f0 <MX_ADC4_Init+0x17c>)
 800261e:	f7ff f899 	bl	8001754 <LL_SYSCFG_SetRemapDMA_ADC>
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002622:	2300      	movs	r3, #0
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002626:	2300      	movs	r3, #0
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800262a:	2300      	movs	r3, #0
 800262c:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_Init(ADC4, &ADC_InitStruct);
 800262e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002632:	4619      	mov	r1, r3
 8002634:	482f      	ldr	r0, [pc, #188]	; (80026f4 <MX_ADC4_Init+0x180>)
 8002636:	f001 f879 	bl	800372c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO__ADC34;
 800263a:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 800263e:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002648:	2300      	movs	r3, #0
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800264c:	2303      	movs	r3, #3
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8002650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_Init(ADC4, &ADC_REG_InitStruct);
 8002656:	f107 0318 	add.w	r3, r7, #24
 800265a:	4619      	mov	r1, r3
 800265c:	4825      	ldr	r0, [pc, #148]	; (80026f4 <MX_ADC4_Init+0x180>)
 800265e:	f001 f88b 	bl	8003778 <LL_ADC_REG_Init>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8002662:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002666:	f7fe fddc 	bl	8001222 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <MX_ADC4_Init+0x184>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	099b      	lsrs	r3, r3, #6
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <MX_ADC4_Init+0x188>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	099a      	lsrs	r2, r3, #6
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	461a      	mov	r2, r3
 8002682:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <MX_ADC4_Init+0x18c>)
 8002684:	fba3 2302 	umull	r2, r3, r3, r2
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 800268c:	e002      	b.n	8002694 <MX_ADC4_Init+0x120>
     {
   wait_loop_index--;
 800268e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002690:	3b01      	subs	r3, #1
 8002692:	63fb      	str	r3, [r7, #60]	; 0x3c
   while(wait_loop_index != 0)
 8002694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f9      	bne.n	800268e <MX_ADC4_Init+0x11a>
     }
  LL_ADC_REG_SetTriggerEdge(ADC4, LL_ADC_REG_TRIG_EXT_RISING);
 800269a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800269e:	4815      	ldr	r0, [pc, #84]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026a0:	f7fe fc9d 	bl	8000fde <LL_ADC_REG_SetTriggerEdge>
  /** Configure Analog WatchDog 1
  */
  LL_ADC_SetAnalogWDMonitChannels(ADC4, LL_ADC_AWD1, LL_ADC_AWD_CHANNEL_4_REG);
 80026a4:	4a17      	ldr	r2, [pc, #92]	; (8002704 <MX_ADC4_Init+0x190>)
 80026a6:	4918      	ldr	r1, [pc, #96]	; (8002708 <MX_ADC4_Init+0x194>)
 80026a8:	4812      	ldr	r0, [pc, #72]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026aa:	f7fe fd53 	bl	8001154 <LL_ADC_SetAnalogWDMonitChannels>
  LL_ADC_ConfigAnalogWDThresholds(ADC4, LL_ADC_AWD1, 4095, 0);
 80026ae:	2300      	movs	r3, #0
 80026b0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80026b4:	4914      	ldr	r1, [pc, #80]	; (8002708 <MX_ADC4_Init+0x194>)
 80026b6:	480f      	ldr	r0, [pc, #60]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026b8:	f7fe fd86 	bl	80011c8 <LL_ADC_ConfigAnalogWDThresholds>
  LL_ADC_EnableIT_AWD1(ADC4);
 80026bc:	480d      	ldr	r0, [pc, #52]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026be:	f7fe fdca 	bl	8001256 <LL_ADC_EnableIT_AWD1>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC4, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 80026c2:	4a10      	ldr	r2, [pc, #64]	; (8002704 <MX_ADC4_Init+0x190>)
 80026c4:	2106      	movs	r1, #6
 80026c6:	480b      	ldr	r0, [pc, #44]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026c8:	f7fe fc9c 	bl	8001004 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC4, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80026cc:	2200      	movs	r2, #0
 80026ce:	490d      	ldr	r1, [pc, #52]	; (8002704 <MX_ADC4_Init+0x190>)
 80026d0:	4808      	ldr	r0, [pc, #32]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026d2:	f7fe fcce 	bl	8001072 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC4, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 80026d6:	227f      	movs	r2, #127	; 0x7f
 80026d8:	490a      	ldr	r1, [pc, #40]	; (8002704 <MX_ADC4_Init+0x190>)
 80026da:	4806      	ldr	r0, [pc, #24]	; (80026f4 <MX_ADC4_Init+0x180>)
 80026dc:	f7fe fd16 	bl	800110c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80026e0:	bf00      	nop
 80026e2:	3740      	adds	r7, #64	; 0x40
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	48000400 	.word	0x48000400
 80026ec:	40020400 	.word	0x40020400
 80026f0:	00010100 	.word	0x00010100
 80026f4:	50000500 	.word	0x50000500
 80026f8:	20000000 	.word	0x20000000
 80026fc:	053e2d63 	.word	0x053e2d63
 8002700:	cccccccd 	.word	0xcccccccd
 8002704:	10c00010 	.word	0x10c00010
 8002708:	7dc00000 	.word	0x7dc00000

0800270c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	; 0x28
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8002712:	f107 0318 	add.w	r3, r7, #24
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	463b      	mov	r3, r7
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 8002730:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002734:	f7fe ffde 	bl	80016f4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002738:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800273c:	f7fe ffc2 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration
  PA4   ------> DAC1_OUT1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002740:	2310      	movs	r3, #16
 8002742:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002744:	2303      	movs	r3, #3
 8002746:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002748:	2300      	movs	r3, #0
 800274a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274c:	463b      	mov	r3, r7
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002754:	f001 fbe7 	bl	8003f26 <LL_GPIO_Init>

  /* DAC1 DMA Init */

  /* DAC1_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002758:	2210      	movs	r2, #16
 800275a:	2103      	movs	r1, #3
 800275c:	481d      	ldr	r0, [pc, #116]	; (80027d4 <MX_DAC1_Init+0xc8>)
 800275e:	f7fe fda1 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_HIGH);
 8002762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002766:	2103      	movs	r1, #3
 8002768:	481a      	ldr	r0, [pc, #104]	; (80027d4 <MX_DAC1_Init+0xc8>)
 800276a:	f7fe fe75 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 800276e:	2220      	movs	r2, #32
 8002770:	2103      	movs	r1, #3
 8002772:	4818      	ldr	r0, [pc, #96]	; (80027d4 <MX_DAC1_Init+0xc8>)
 8002774:	f7fe fdbc 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8002778:	2200      	movs	r2, #0
 800277a:	2103      	movs	r1, #3
 800277c:	4815      	ldr	r0, [pc, #84]	; (80027d4 <MX_DAC1_Init+0xc8>)
 800277e:	f7fe fddb 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	2103      	movs	r1, #3
 8002786:	4813      	ldr	r0, [pc, #76]	; (80027d4 <MX_DAC1_Init+0xc8>)
 8002788:	f7fe fdfa 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 800278c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002790:	2103      	movs	r1, #3
 8002792:	4810      	ldr	r0, [pc, #64]	; (80027d4 <MX_DAC1_Init+0xc8>)
 8002794:	f7fe fe18 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 8002798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800279c:	2103      	movs	r1, #3
 800279e:	480d      	ldr	r0, [pc, #52]	; (80027d4 <MX_DAC1_Init+0xc8>)
 80027a0:	f7fe fe36 	bl	8001410 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_DAC(LL_SYSCFG_DAC1_CH1_RMP_DMA1_CH3);
 80027a4:	480c      	ldr	r0, [pc, #48]	; (80027d8 <MX_DAC1_Init+0xcc>)
 80027a6:	f7fe fff3 	bl	8001790 <LL_SYSCFG_SetRemapDMA_DAC>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC channel OUT1 config
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_EXT_TIM6_TRGO;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 80027b6:	f107 0318 	add.w	r3, r7, #24
 80027ba:	461a      	mov	r2, r3
 80027bc:	4907      	ldr	r1, [pc, #28]	; (80027dc <MX_DAC1_Init+0xd0>)
 80027be:	4808      	ldr	r0, [pc, #32]	; (80027e0 <MX_DAC1_Init+0xd4>)
 80027c0:	f001 f843 	bl	800384a <LL_DAC_Init>
  LL_DAC_EnableTrigger(DAC1, LL_DAC_CHANNEL_1);
 80027c4:	4905      	ldr	r1, [pc, #20]	; (80027dc <MX_DAC1_Init+0xd0>)
 80027c6:	4806      	ldr	r0, [pc, #24]	; (80027e0 <MX_DAC1_Init+0xd4>)
 80027c8:	f7fe fd55 	bl	8001276 <LL_DAC_EnableTrigger>
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80027cc:	bf00      	nop
 80027ce:	3728      	adds	r7, #40	; 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40020000 	.word	0x40020000
 80027d8:	00202000 	.word	0x00202000
 80027dc:	02100001 	.word	0x02100001
 80027e0:	40007400 	.word	0x40007400

080027e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b094      	sub	sp, #80	; 0x50
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80027ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]
 80027f8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	2220      	movs	r2, #32
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f010 f84a 	bl	801289c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]
 8002816:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002818:	2001      	movs	r0, #1
 800281a:	f7fe ff6b 	bl	80016f4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002822:	2300      	movs	r3, #0
 8002824:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 1000;
 8002826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800282c:	2300      	movs	r3, #0
 800282e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002830:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800283a:	f001 ff03 	bl	8004644 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800283e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002842:	f7ff f81f 	bl	8001884 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002846:	2100      	movs	r1, #0
 8002848:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800284c:	f7ff fa2a 	bl	8001ca4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH3);
 8002850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002854:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002858:	f7ff f876 	bl	8001948 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800285c:	2360      	movs	r3, #96	; 0x60
 800285e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800286c:	2300      	movs	r3, #0
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	461a      	mov	r2, r3
 8002876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800287a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800287e:	f001 ff79 	bl	8004774 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH3);
 8002882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002886:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800288a:	f7ff f80b 	bl	80018a4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_ENABLE);
 800288e:	2110      	movs	r1, #16
 8002890:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002894:	f7ff fa1b 	bl	8001cce <LL_TIM_SetTriggerOutput>
  LL_TIM_EnableMasterSlaveMode(TIM2);
 8002898:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800289c:	f7ff fa65 	bl	8001d6a <LL_TIM_EnableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80028a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80028a4:	f7fe ff0e 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PB10   ------> TIM2_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80028a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028ae:	2302      	movs	r3, #2
 80028b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80028be:	2301      	movs	r3, #1
 80028c0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4803      	ldr	r0, [pc, #12]	; (80028d4 <MX_TIM2_Init+0xf0>)
 80028c8:	f001 fb2d 	bl	8003f26 <LL_GPIO_Init>

}
 80028cc:	bf00      	nop
 80028ce:	3750      	adds	r7, #80	; 0x50
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	48000400 	.word	0x48000400

080028d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08e      	sub	sp, #56	; 0x38
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80028de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	2220      	movs	r2, #32
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f00f ffd1 	bl	801289c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80028fa:	2002      	movs	r0, #2
 80028fc:	f7fe fefa 	bl	80016f4 <LL_APB1_GRP1_EnableClock>

  /* TIM3 DMA Init */

  /* TIM3_CH1_TRIG Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002900:	2200      	movs	r2, #0
 8002902:	2106      	movs	r1, #6
 8002904:	482c      	ldr	r0, [pc, #176]	; (80029b8 <MX_TIM3_Init+0xe0>)
 8002906:	f7fe fccd 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_VERYHIGH);
 800290a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800290e:	2106      	movs	r1, #6
 8002910:	4829      	ldr	r0, [pc, #164]	; (80029b8 <MX_TIM3_Init+0xe0>)
 8002912:	f7fe fda1 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8002916:	2220      	movs	r2, #32
 8002918:	2106      	movs	r1, #6
 800291a:	4827      	ldr	r0, [pc, #156]	; (80029b8 <MX_TIM3_Init+0xe0>)
 800291c:	f7fe fce8 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002920:	2200      	movs	r2, #0
 8002922:	2106      	movs	r1, #6
 8002924:	4824      	ldr	r0, [pc, #144]	; (80029b8 <MX_TIM3_Init+0xe0>)
 8002926:	f7fe fd07 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	2106      	movs	r1, #6
 800292e:	4822      	ldr	r0, [pc, #136]	; (80029b8 <MX_TIM3_Init+0xe0>)
 8002930:	f7fe fd26 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_HALFWORD);
 8002934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002938:	2106      	movs	r1, #6
 800293a:	481f      	ldr	r0, [pc, #124]	; (80029b8 <MX_TIM3_Init+0xe0>)
 800293c:	f7fe fd44 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_HALFWORD);
 8002940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002944:	2106      	movs	r1, #6
 8002946:	481c      	ldr	r0, [pc, #112]	; (80029b8 <MX_TIM3_Init+0xe0>)
 8002948:	f7fe fd62 	bl	8001410 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1000;
 800294c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002950:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002952:	2300      	movs	r3, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 72;
 8002956:	2348      	movs	r3, #72	; 0x48
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800295a:	2300      	movs	r3, #0
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800295e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002962:	4619      	mov	r1, r3
 8002964:	4815      	ldr	r0, [pc, #84]	; (80029bc <MX_TIM3_Init+0xe4>)
 8002966:	f001 fe6d 	bl	8004644 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800296a:	4814      	ldr	r0, [pc, #80]	; (80029bc <MX_TIM3_Init+0xe4>)
 800296c:	f7fe ff7a 	bl	8001864 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002970:	2100      	movs	r1, #0
 8002972:	4812      	ldr	r0, [pc, #72]	; (80029bc <MX_TIM3_Init+0xe4>)
 8002974:	f7ff f996 	bl	8001ca4 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002978:	2300      	movs	r3, #0
 800297a:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	461a      	mov	r2, r3
 8002990:	2101      	movs	r1, #1
 8002992:	480a      	ldr	r0, [pc, #40]	; (80029bc <MX_TIM3_Init+0xe4>)
 8002994:	f001 feee 	bl	8004774 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002998:	2101      	movs	r1, #1
 800299a:	4808      	ldr	r0, [pc, #32]	; (80029bc <MX_TIM3_Init+0xe4>)
 800299c:	f7fe ff82 	bl	80018a4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_UPDATE);
 80029a0:	2120      	movs	r1, #32
 80029a2:	4806      	ldr	r0, [pc, #24]	; (80029bc <MX_TIM3_Init+0xe4>)
 80029a4:	f7ff f993 	bl	8001cce <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80029a8:	4804      	ldr	r0, [pc, #16]	; (80029bc <MX_TIM3_Init+0xe4>)
 80029aa:	f7ff f9ee 	bl	8001d8a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029ae:	bf00      	nop
 80029b0:	3738      	adds	r7, #56	; 0x38
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40000400 	.word	0x40000400

080029c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b094      	sub	sp, #80	; 0x50
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80029c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	60da      	str	r2, [r3, #12]
 80029d4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	2220      	movs	r2, #32
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f00f ff5c 	bl	801289c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	609a      	str	r2, [r3, #8]
 80029ee:	60da      	str	r2, [r3, #12]
 80029f0:	611a      	str	r2, [r3, #16]
 80029f2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80029f4:	2004      	movs	r0, #4
 80029f6:	f7fe fe7d 	bl	80016f4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 1000;
 80029fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002a00:	2300      	movs	r3, #0
 8002a02:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 73;
 8002a04:	2349      	movs	r3, #73	; 0x49
 8002a06:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002a0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a10:	4619      	mov	r1, r3
 8002a12:	482a      	ldr	r0, [pc, #168]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a14:	f001 fe16 	bl	8004644 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 8002a18:	4828      	ldr	r0, [pc, #160]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a1a:	f7fe ff23 	bl	8001864 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4826      	ldr	r0, [pc, #152]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a22:	f7ff f93f 	bl	8001ca4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8002a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a2a:	4824      	ldr	r0, [pc, #144]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a2c:	f7fe ff8c 	bl	8001948 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002a30:	2360      	movs	r3, #96	; 0x60
 8002a32:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a4e:	481b      	ldr	r0, [pc, #108]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a50:	f001 fe90 	bl	8004774 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 8002a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a58:	4818      	ldr	r0, [pc, #96]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a5a:	f7fe ff23 	bl	80018a4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerInput(TIM4, LL_TIM_TS_ITR1);
 8002a5e:	2110      	movs	r1, #16
 8002a60:	4816      	ldr	r0, [pc, #88]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a62:	f7ff f96f 	bl	8001d44 <LL_TIM_SetTriggerInput>
  LL_TIM_SetSlaveMode(TIM4, LL_TIM_SLAVEMODE_TRIGGER);
 8002a66:	2106      	movs	r1, #6
 8002a68:	4814      	ldr	r0, [pc, #80]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a6a:	f7ff f956 	bl	8001d1a <LL_TIM_SetSlaveMode>
  LL_TIM_DisableIT_TRIG(TIM4);
 8002a6e:	4813      	ldr	r0, [pc, #76]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a70:	f7ff f99b 	bl	8001daa <LL_TIM_DisableIT_TRIG>
  LL_TIM_DisableDMAReq_TRIG(TIM4);
 8002a74:	4811      	ldr	r0, [pc, #68]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a76:	f7ff f9a8 	bl	8001dca <LL_TIM_DisableDMAReq_TRIG>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_UPDATE);
 8002a7a:	2120      	movs	r1, #32
 8002a7c:	480f      	ldr	r0, [pc, #60]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a7e:	f7ff f926 	bl	8001cce <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002a82:	480e      	ldr	r0, [pc, #56]	; (8002abc <MX_TIM4_Init+0xfc>)
 8002a84:	f7ff f981 	bl	8001d8a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002a88:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002a8c:	f7fe fe1a 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PB8   ------> TIM4_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a96:	2302      	movs	r3, #2
 8002a98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	4804      	ldr	r0, [pc, #16]	; (8002ac0 <MX_TIM4_Init+0x100>)
 8002ab0:	f001 fa39 	bl	8003f26 <LL_GPIO_Init>

}
 8002ab4:	bf00      	nop
 8002ab6:	3750      	adds	r7, #80	; 0x50
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	48000400 	.word	0x48000400

08002ac4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002ad6:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <MX_TIM6_Init+0x68>)
 8002ad8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002af4:	480c      	ldr	r0, [pc, #48]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002af6:	f000 fc14 	bl	8003322 <HAL_TIM_Base_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002b00:	f000 fa08 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b04:	2320      	movs	r3, #32
 8002b06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4805      	ldr	r0, [pc, #20]	; (8002b28 <MX_TIM6_Init+0x64>)
 8002b12:	f000 fcfb 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002b1c:	f000 f9fa 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000470 	.word	0x20000470
 8002b2c:	40001000 	.word	0x40001000

08002b30 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b09e      	sub	sp, #120	; 0x78
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002b36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	609a      	str	r2, [r3, #8]
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002b46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f00f fea4 	bl	801289c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002b54:	f107 031c 	add.w	r3, r7, #28
 8002b58:	2228      	movs	r2, #40	; 0x28
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f00f fe9d 	bl	801289c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
 8002b70:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8002b72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b76:	f7fe fdd5 	bl	8001724 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002b7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b7e:	f7fe fda1 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**TIM8 GPIO Configuration
  PC6   ------> TIM8_CH1
  PC9   ------> TIM8_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_9;
 8002b82:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002b86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002b98:	2304      	movs	r3, #4
 8002b9a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4879      	ldr	r0, [pc, #484]	; (8002d88 <MX_TIM8_Init+0x258>)
 8002ba2:	f001 f9c0 	bl	8003f26 <LL_GPIO_Init>

  /* TIM8 DMA Init */

  /* TIM8_CH4_TRIG_COM Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2102      	movs	r1, #2
 8002baa:	4878      	ldr	r0, [pc, #480]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002bac:	f7fe fb7a 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH);
 8002bb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	4875      	ldr	r0, [pc, #468]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002bb8:	f7fe fc4e 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	4872      	ldr	r0, [pc, #456]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002bc2:	f7fe fb95 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2102      	movs	r1, #2
 8002bca:	4870      	ldr	r0, [pc, #448]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002bcc:	f7fe fbb4 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8002bd0:	2280      	movs	r2, #128	; 0x80
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	486d      	ldr	r0, [pc, #436]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002bd6:	f7fe fbd3 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_HALFWORD);
 8002bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bde:	2102      	movs	r1, #2
 8002be0:	486a      	ldr	r0, [pc, #424]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002be2:	f7fe fbf1 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_HALFWORD);
 8002be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bea:	2102      	movs	r1, #2
 8002bec:	4867      	ldr	r0, [pc, #412]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002bee:	f7fe fc0f 	bl	8001410 <LL_DMA_SetMemorySize>

  /* TIM8_CH3_UP Init */
  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4865      	ldr	r0, [pc, #404]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002bf8:	f7fe fb54 	bl	80012a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8002bfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c00:	2101      	movs	r1, #1
 8002c02:	4862      	ldr	r0, [pc, #392]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002c04:	f7fe fc28 	bl	8001458 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	485f      	ldr	r0, [pc, #380]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002c0e:	f7fe fb6f 	bl	80012f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2101      	movs	r1, #1
 8002c16:	485d      	ldr	r0, [pc, #372]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002c18:	f7fe fb8e 	bl	8001338 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	2101      	movs	r1, #1
 8002c20:	485a      	ldr	r0, [pc, #360]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002c22:	f7fe fbad 	bl	8001380 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8002c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4857      	ldr	r0, [pc, #348]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002c2e:	f7fe fbcb 	bl	80013c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8002c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c36:	2101      	movs	r1, #1
 8002c38:	4854      	ldr	r0, [pc, #336]	; (8002d8c <MX_TIM8_Init+0x25c>)
 8002c3a:	f7fe fbe9 	bl	8001410 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c44:	2300      	movs	r3, #0
 8002c46:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 65535;
 8002c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8002c56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	484c      	ldr	r0, [pc, #304]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002c5e:	f001 fcf1 	bl	8004644 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8002c62:	484b      	ldr	r0, [pc, #300]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002c64:	f7fe fe0e 	bl	8001884 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002c80:	2300      	movs	r3, #0
 8002c82:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002c84:	2300      	movs	r3, #0
 8002c86:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002c88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2110      	movs	r1, #16
 8002c90:	483f      	ldr	r0, [pc, #252]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002c92:	f001 fd6f 	bl	8004774 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH2);
 8002c96:	2110      	movs	r1, #16
 8002c98:	483d      	ldr	r0, [pc, #244]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002c9a:	f7fe fe03 	bl	80018a4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	483b      	ldr	r0, [pc, #236]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002ca2:	f7ff f814 	bl	8001cce <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM8, LL_TIM_TRGO2_RESET);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4839      	ldr	r0, [pc, #228]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002caa:	f7ff f823 	bl	8001cf4 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8002cae:	4838      	ldr	r0, [pc, #224]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002cb0:	f7ff f86b 	bl	8001d8a <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002cb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4835      	ldr	r0, [pc, #212]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002cbc:	f7fe fe94 	bl	80019e8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4832      	ldr	r0, [pc, #200]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002cc6:	f7fe fee9 	bl	8001a9c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2101      	movs	r1, #1
 8002cce:	4830      	ldr	r0, [pc, #192]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002cd0:	f7fe ff3e 	bl	8001b50 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	482d      	ldr	r0, [pc, #180]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002cda:	f7fe ff93 	bl	8001c04 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH3, LL_TIM_ACTIVEINPUT_INDIRECTTI);
 8002cde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ce6:	482a      	ldr	r0, [pc, #168]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002ce8:	f7fe fe7e 	bl	80019e8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH3, LL_TIM_ICPSC_DIV1);
 8002cec:	2200      	movs	r2, #0
 8002cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cf2:	4827      	ldr	r0, [pc, #156]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002cf4:	f7fe fed2 	bl	8001a9c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH3, LL_TIM_IC_FILTER_FDIV1);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cfe:	4824      	ldr	r0, [pc, #144]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002d00:	f7fe ff26 	bl	8001b50 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH3, LL_TIM_IC_POLARITY_RISING);
 8002d04:	2200      	movs	r2, #0
 8002d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d0a:	4821      	ldr	r0, [pc, #132]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002d0c:	f7fe ff7a 	bl	8001c04 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM8, LL_TIM_CHANNEL_CH4, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002d10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d18:	481d      	ldr	r0, [pc, #116]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002d1a:	f7fe fe65 	bl	80019e8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM8, LL_TIM_CHANNEL_CH4, LL_TIM_ICPSC_DIV1);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d24:	481a      	ldr	r0, [pc, #104]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002d26:	f7fe feb9 	bl	8001a9c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM8, LL_TIM_CHANNEL_CH4, LL_TIM_IC_FILTER_FDIV1);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d30:	4817      	ldr	r0, [pc, #92]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002d32:	f7fe ff0d 	bl	8001b50 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM8, LL_TIM_CHANNEL_CH4, LL_TIM_IC_POLARITY_RISING);
 8002d36:	2200      	movs	r2, #0
 8002d38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d3c:	4814      	ldr	r0, [pc, #80]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002d3e:	f7fe ff61 	bl	8001c04 <LL_TIM_IC_SetPolarity>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8002d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8002d74:	f107 031c 	add.w	r3, r7, #28
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4805      	ldr	r0, [pc, #20]	; (8002d90 <MX_TIM8_Init+0x260>)
 8002d7c:	f001 fd48 	bl	8004810 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002d80:	bf00      	nop
 8002d82:	3778      	adds	r7, #120	; 0x78
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	48000800 	.word	0x48000800
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	40013400 	.word	0x40013400

08002d94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08e      	sub	sp, #56	; 0x38
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002d9a:	f107 031c 	add.w	r3, r7, #28
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	611a      	str	r2, [r3, #16]
 8002daa:	615a      	str	r2, [r3, #20]
 8002dac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
 8002dbc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002dbe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002dc2:	f7fe fc97 	bl	80016f4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002dc6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002dca:	f7fe fc7b 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002dce:	230c      	movs	r3, #12
 8002dd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002de2:	2307      	movs	r3, #7
 8002de4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dee:	f001 f89a 	bl	8003f26 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002df2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002df6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002e04:	230c      	movs	r3, #12
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002e10:	f107 031c 	add.w	r3, r7, #28
 8002e14:	4619      	mov	r1, r3
 8002e16:	4808      	ldr	r0, [pc, #32]	; (8002e38 <MX_USART2_UART_Init+0xa4>)
 8002e18:	f002 f8ce 	bl	8004fb8 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8002e1c:	4806      	ldr	r0, [pc, #24]	; (8002e38 <MX_USART2_UART_Init+0xa4>)
 8002e1e:	f7ff f80a 	bl	8001e36 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8002e22:	4805      	ldr	r0, [pc, #20]	; (8002e38 <MX_USART2_UART_Init+0xa4>)
 8002e24:	f7fe fff1 	bl	8001e0a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002e28:	4803      	ldr	r0, [pc, #12]	; (8002e38 <MX_USART2_UART_Init+0xa4>)
 8002e2a:	f7fe ffde 	bl	8001dea <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e2e:	bf00      	nop
 8002e30:	3738      	adds	r7, #56	; 0x38
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40004400 	.word	0x40004400

08002e3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002e40:	2001      	movs	r0, #1
 8002e42:	f7fe fc3f 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8002e46:	2002      	movs	r0, #2
 8002e48:	f7fe fc3c 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>

}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002e56:	f107 031c 	add.w	r3, r7, #28
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e62:	1d3b      	adds	r3, r7, #4
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
 8002e70:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002e72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e76:	f7fe fc25 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8002e7a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002e7e:	f7fe fc21 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002e82:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e86:	f7fe fc1d 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002e8a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e8e:	f7fe fc19 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8002e92:	2120      	movs	r1, #32
 8002e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e98:	f7ff f83b 	bl	8001f12 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8002e9c:	491b      	ldr	r1, [pc, #108]	; (8002f0c <MX_GPIO_Init+0xbc>)
 8002e9e:	2002      	movs	r0, #2
 8002ea0:	f7fe fc90 	bl	80017c4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eaa:	4819      	ldr	r0, [pc, #100]	; (8002f10 <MX_GPIO_Init+0xc0>)
 8002eac:	f7ff f802 	bl	8001eb4 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eb6:	4816      	ldr	r0, [pc, #88]	; (8002f10 <MX_GPIO_Init+0xc0>)
 8002eb8:	f7fe ffcd 	bl	8001e56 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8002ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fe35 	bl	8003b4c <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8002ee2:	2320      	movs	r3, #32
 8002ee4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002efe:	f001 f812 	bl	8003f26 <LL_GPIO_Init>

}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	; 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	00f00003 	.word	0x00f00003
 8002f10:	48000800 	.word	0x48000800

08002f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6193      	str	r3, [r2, #24]
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	61d3      	str	r3, [r2, #28]
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	210f      	movs	r1, #15
 8002f5e:	f06f 0001 	mvn.w	r0, #1
 8002f62:	f000 f9b6 	bl	80032d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000

08002f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <HAL_TIM_Base_MspInit+0x38>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10b      	bne.n	8002f9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <HAL_TIM_Base_MspInit+0x3c>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <HAL_TIM_Base_MspInit+0x3c>)
 8002f8c:	f043 0310 	orr.w	r3, r3, #16
 8002f90:	61d3      	str	r3, [r2, #28]
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_TIM_Base_MspInit+0x3c>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40001000 	.word	0x40001000
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fc6:	e7fe      	b.n	8002fc6 <HardFault_Handler+0x4>

08002fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fcc:	e7fe      	b.n	8002fcc <MemManage_Handler+0x4>

08002fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fd2:	e7fe      	b.n	8002fd2 <BusFault_Handler+0x4>

08002fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <UsageFault_Handler+0x4>

08002fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ff0:	4a14      	ldr	r2, [pc, #80]	; (8003044 <_sbrk+0x5c>)
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <_sbrk+0x60>)
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ffc:	4b13      	ldr	r3, [pc, #76]	; (800304c <_sbrk+0x64>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <_sbrk+0x64>)
 8003006:	4a12      	ldr	r2, [pc, #72]	; (8003050 <_sbrk+0x68>)
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <_sbrk+0x64>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	429a      	cmp	r2, r3
 8003016:	d207      	bcs.n	8003028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003018:	f00f fbce 	bl	80127b8 <__errno>
 800301c:	4602      	mov	r2, r0
 800301e:	230c      	movs	r3, #12
 8003020:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	e009      	b.n	800303c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <_sbrk+0x64>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <_sbrk+0x64>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	4a05      	ldr	r2, [pc, #20]	; (800304c <_sbrk+0x64>)
 8003038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800303a:	68fb      	ldr	r3, [r7, #12]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20010000 	.word	0x20010000
 8003048:	00000400 	.word	0x00000400
 800304c:	20000214 	.word	0x20000214
 8003050:	2000e4c0 	.word	0x2000e4c0

08003054 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <SystemInit+0x20>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	4a05      	ldr	r2, [pc, #20]	; (8003074 <SystemInit+0x20>)
 8003060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800307c:	480d      	ldr	r0, [pc, #52]	; (80030b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800307e:	490e      	ldr	r1, [pc, #56]	; (80030b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003080:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <LoopForever+0xe>)
  movs r3, #0
 8003082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003084:	e002      	b.n	800308c <LoopCopyDataInit>

08003086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800308a:	3304      	adds	r3, #4

0800308c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800308c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800308e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003090:	d3f9      	bcc.n	8003086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003092:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003094:	4c0b      	ldr	r4, [pc, #44]	; (80030c4 <LoopForever+0x16>)
  movs r3, #0
 8003096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003098:	e001      	b.n	800309e <LoopFillZerobss>

0800309a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800309a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800309c:	3204      	adds	r2, #4

0800309e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800309e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030a0:	d3fb      	bcc.n	800309a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030a2:	f7ff ffd7 	bl	8003054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030a6:	f00f fb8d 	bl	80127c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030aa:	f7fe ff40 	bl	8001f2e <main>

080030ae <LoopForever>:

LoopForever:
    b LoopForever
 80030ae:	e7fe      	b.n	80030ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80030b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030b8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80030bc:	080164b0 	.word	0x080164b0
  ldr r2, =_sbss
 80030c0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80030c4:	2000e4c0 	.word	0x2000e4c0

080030c8 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030c8:	e7fe      	b.n	80030c8 <CAN_RX1_IRQHandler>
	...

080030cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_Init+0x28>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a07      	ldr	r2, [pc, #28]	; (80030f4 <HAL_Init+0x28>)
 80030d6:	f043 0310 	orr.w	r3, r3, #16
 80030da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030dc:	2003      	movs	r0, #3
 80030de:	f000 f8ed 	bl	80032bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030e2:	200f      	movs	r0, #15
 80030e4:	f000 f808 	bl	80030f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030e8:	f7ff ff1c 	bl	8002f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40022000 	.word	0x40022000

080030f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_InitTick+0x54>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b12      	ldr	r3, [pc, #72]	; (8003150 <HAL_InitTick+0x58>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	4619      	mov	r1, r3
 800310a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800310e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003112:	fbb2 f3f3 	udiv	r3, r2, r3
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f8f7 	bl	800330a <HAL_SYSTICK_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e00e      	b.n	8003144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b0f      	cmp	r3, #15
 800312a:	d80a      	bhi.n	8003142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800312c:	2200      	movs	r2, #0
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	f000 f8cd 	bl	80032d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003138:	4a06      	ldr	r2, [pc, #24]	; (8003154 <HAL_InitTick+0x5c>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	e000      	b.n	8003144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000000 	.word	0x20000000
 8003150:	20000008 	.word	0x20000008
 8003154:	20000004 	.word	0x20000004

08003158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <__NVIC_SetPriorityGrouping+0x44>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003174:	4013      	ands	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800318a:	4a04      	ldr	r2, [pc, #16]	; (800319c <__NVIC_SetPriorityGrouping+0x44>)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	60d3      	str	r3, [r2, #12]
}
 8003190:	bf00      	nop
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a4:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <__NVIC_GetPriorityGrouping+0x18>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	f003 0307 	and.w	r3, r3, #7
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	db0a      	blt.n	80031e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	490c      	ldr	r1, [pc, #48]	; (8003208 <__NVIC_SetPriority+0x4c>)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	440b      	add	r3, r1
 80031e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e4:	e00a      	b.n	80031fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4908      	ldr	r1, [pc, #32]	; (800320c <__NVIC_SetPriority+0x50>)
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	3b04      	subs	r3, #4
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	440b      	add	r3, r1
 80031fa:	761a      	strb	r2, [r3, #24]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000e100 	.word	0xe000e100
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f1c3 0307 	rsb	r3, r3, #7
 800322a:	2b04      	cmp	r3, #4
 800322c:	bf28      	it	cs
 800322e:	2304      	movcs	r3, #4
 8003230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3304      	adds	r3, #4
 8003236:	2b06      	cmp	r3, #6
 8003238:	d902      	bls.n	8003240 <NVIC_EncodePriority+0x30>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3b03      	subs	r3, #3
 800323e:	e000      	b.n	8003242 <NVIC_EncodePriority+0x32>
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	f04f 32ff 	mov.w	r2, #4294967295
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	401a      	ands	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003258:	f04f 31ff 	mov.w	r1, #4294967295
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43d9      	mvns	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	4313      	orrs	r3, r2
         );
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	; 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003288:	d301      	bcc.n	800328e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800328a:	2301      	movs	r3, #1
 800328c:	e00f      	b.n	80032ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <SysTick_Config+0x40>)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3b01      	subs	r3, #1
 8003294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003296:	210f      	movs	r1, #15
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	f7ff ff8e 	bl	80031bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <SysTick_Config+0x40>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032a6:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <SysTick_Config+0x40>)
 80032a8:	2207      	movs	r2, #7
 80032aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	e000e010 	.word	0xe000e010

080032bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ff47 	bl	8003158 <__NVIC_SetPriorityGrouping>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4603      	mov	r3, r0
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032e4:	f7ff ff5c 	bl	80031a0 <__NVIC_GetPriorityGrouping>
 80032e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	6978      	ldr	r0, [r7, #20]
 80032f0:	f7ff ff8e 	bl	8003210 <NVIC_EncodePriority>
 80032f4:	4602      	mov	r2, r0
 80032f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff5d 	bl	80031bc <__NVIC_SetPriority>
}
 8003302:	bf00      	nop
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ffb0 	bl	8003278 <SysTick_Config>
 8003318:	4603      	mov	r3, r0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e049      	b.n	80033c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d106      	bne.n	800334e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff fe13 	bl	8002f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3304      	adds	r3, #4
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f000 f835 	bl	80033d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a42      	ldr	r2, [pc, #264]	; (80034ec <TIM_Base_SetConfig+0x11c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d013      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d00f      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a3f      	ldr	r2, [pc, #252]	; (80034f0 <TIM_Base_SetConfig+0x120>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00b      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a3e      	ldr	r2, [pc, #248]	; (80034f4 <TIM_Base_SetConfig+0x124>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d007      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a3d      	ldr	r2, [pc, #244]	; (80034f8 <TIM_Base_SetConfig+0x128>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d003      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a3c      	ldr	r2, [pc, #240]	; (80034fc <TIM_Base_SetConfig+0x12c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d108      	bne.n	8003422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a31      	ldr	r2, [pc, #196]	; (80034ec <TIM_Base_SetConfig+0x11c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01f      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003430:	d01b      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2e      	ldr	r2, [pc, #184]	; (80034f0 <TIM_Base_SetConfig+0x120>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d017      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a2d      	ldr	r2, [pc, #180]	; (80034f4 <TIM_Base_SetConfig+0x124>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a2c      	ldr	r2, [pc, #176]	; (80034f8 <TIM_Base_SetConfig+0x128>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00f      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a2c      	ldr	r2, [pc, #176]	; (8003500 <TIM_Base_SetConfig+0x130>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00b      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <TIM_Base_SetConfig+0x134>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2a      	ldr	r2, [pc, #168]	; (8003508 <TIM_Base_SetConfig+0x138>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d003      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a25      	ldr	r2, [pc, #148]	; (80034fc <TIM_Base_SetConfig+0x12c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d108      	bne.n	800347c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <TIM_Base_SetConfig+0x11c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d013      	beq.n	80034d0 <TIM_Base_SetConfig+0x100>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <TIM_Base_SetConfig+0x128>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00f      	beq.n	80034d0 <TIM_Base_SetConfig+0x100>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a13      	ldr	r2, [pc, #76]	; (8003500 <TIM_Base_SetConfig+0x130>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <TIM_Base_SetConfig+0x100>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a12      	ldr	r2, [pc, #72]	; (8003504 <TIM_Base_SetConfig+0x134>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d007      	beq.n	80034d0 <TIM_Base_SetConfig+0x100>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a11      	ldr	r2, [pc, #68]	; (8003508 <TIM_Base_SetConfig+0x138>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d003      	beq.n	80034d0 <TIM_Base_SetConfig+0x100>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a0c      	ldr	r2, [pc, #48]	; (80034fc <TIM_Base_SetConfig+0x12c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d103      	bne.n	80034d8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	615a      	str	r2, [r3, #20]
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40012c00 	.word	0x40012c00
 80034f0:	40000400 	.word	0x40000400
 80034f4:	40000800 	.word	0x40000800
 80034f8:	40013400 	.word	0x40013400
 80034fc:	40015000 	.word	0x40015000
 8003500:	40014000 	.word	0x40014000
 8003504:	40014400 	.word	0x40014400
 8003508:	40014800 	.word	0x40014800

0800350c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003520:	2302      	movs	r3, #2
 8003522:	e06d      	b.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a30      	ldr	r2, [pc, #192]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d009      	beq.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2f      	ldr	r2, [pc, #188]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2d      	ldr	r2, [pc, #180]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d108      	bne.n	8003574 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003568:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1e      	ldr	r2, [pc, #120]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d01d      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a0:	d018      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d013      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1a      	ldr	r2, [pc, #104]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a15      	ldr	r2, [pc, #84]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a16      	ldr	r2, [pc, #88]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a11      	ldr	r2, [pc, #68]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10c      	bne.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	40012c00 	.word	0x40012c00
 8003610:	40013400 	.word	0x40013400
 8003614:	40015000 	.word	0x40015000
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800
 8003620:	40014000 	.word	0x40014000

08003624 <LL_ADC_REG_SetSequencerLength>:
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f023 020f 	bic.w	r2, r3, #15
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_ADC_IsEnabled>:
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	bf0c      	ite	eq
 800365e:	2301      	moveq	r3, #1
 8003660:	2300      	movne	r3, #0
 8003662:	b2db      	uxtb	r3, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a25      	ldr	r2, [pc, #148]	; (8003718 <LL_ADC_CommonInit+0xa8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d10f      	bne.n	80036a6 <LL_ADC_CommonInit+0x36>
 8003686:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800368a:	f7ff ffde 	bl	800364a <LL_ADC_IsEnabled>
 800368e:	4604      	mov	r4, r0
 8003690:	4822      	ldr	r0, [pc, #136]	; (800371c <LL_ADC_CommonInit+0xac>)
 8003692:	f7ff ffda 	bl	800364a <LL_ADC_IsEnabled>
 8003696:	4603      	mov	r3, r0
 8003698:	4323      	orrs	r3, r4
 800369a:	2b00      	cmp	r3, #0
 800369c:	bf0c      	ite	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	2300      	movne	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	e00d      	b.n	80036c2 <LL_ADC_CommonInit+0x52>
 80036a6:	481e      	ldr	r0, [pc, #120]	; (8003720 <LL_ADC_CommonInit+0xb0>)
 80036a8:	f7ff ffcf 	bl	800364a <LL_ADC_IsEnabled>
 80036ac:	4604      	mov	r4, r0
 80036ae:	481d      	ldr	r0, [pc, #116]	; (8003724 <LL_ADC_CommonInit+0xb4>)
 80036b0:	f7ff ffcb 	bl	800364a <LL_ADC_IsEnabled>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4323      	orrs	r3, r4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d020      	beq.n	8003708 <LL_ADC_CommonInit+0x98>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d012      	beq.n	80036f4 <LL_ADC_CommonInit+0x84>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	4b15      	ldr	r3, [pc, #84]	; (8003728 <LL_ADC_CommonInit+0xb8>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	6811      	ldr	r1, [r2, #0]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	6852      	ldr	r2, [r2, #4]
 80036de:	4311      	orrs	r1, r2
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	6892      	ldr	r2, [r2, #8]
 80036e4:	4311      	orrs	r1, r2
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	68d2      	ldr	r2, [r2, #12]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	e00b      	b.n	800370c <LL_ADC_CommonInit+0x9c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <LL_ADC_CommonInit+0xb8>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	e001      	b.n	800370c <LL_ADC_CommonInit+0x9c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	bd90      	pop	{r4, r7, pc}
 8003716:	bf00      	nop
 8003718:	50000300 	.word	0x50000300
 800371c:	50000100 	.word	0x50000100
 8003720:	50000400 	.word	0x50000400
 8003724:	50000500 	.word	0x50000500
 8003728:	fffc30e0 	.word	0xfffc30e0

0800372c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ff85 	bl	800364a <LL_ADC_IsEnabled>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d111      	bne.n	800376a <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800374e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	6811      	ldr	r1, [r2, #0]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	6852      	ldr	r2, [r2, #4]
 800375a:	4311      	orrs	r1, r2
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	6892      	ldr	r2, [r2, #8]
 8003760:	430a      	orrs	r2, r1
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	60da      	str	r2, [r3, #12]
 8003768:	e001      	b.n	800376e <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff ff5f 	bl	800364a <LL_ADC_IsEnabled>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d132      	bne.n	80037f8 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d015      	beq.n	80037c6 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <LL_ADC_REG_Init+0x90>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	6811      	ldr	r1, [r2, #0]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	6892      	ldr	r2, [r2, #8]
 80037aa:	4311      	orrs	r1, r2
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	68d2      	ldr	r2, [r2, #12]
 80037b0:	4311      	orrs	r1, r2
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	6912      	ldr	r2, [r2, #16]
 80037b6:	4311      	orrs	r1, r2
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	6952      	ldr	r2, [r2, #20]
 80037bc:	430a      	orrs	r2, r1
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	60da      	str	r2, [r3, #12]
 80037c4:	e011      	b.n	80037ea <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <LL_ADC_REG_Init+0x90>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	6811      	ldr	r1, [r2, #0]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	68d2      	ldr	r2, [r2, #12]
 80037d6:	4311      	orrs	r1, r2
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	6912      	ldr	r2, [r2, #16]
 80037dc:	4311      	orrs	r1, r2
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	6952      	ldr	r2, [r2, #20]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4619      	mov	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff17 	bl	8003624 <LL_ADC_REG_SetSequencerLength>
 80037f6:	e001      	b.n	80037fc <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	fff0c03c 	.word	0xfff0c03c

0800380c <LL_DAC_IsEnabled>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2101      	movs	r1, #1
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2101      	movs	r1, #1
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	429a      	cmp	r2, r3
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b086      	sub	sp, #24
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7ff ffd5 	bl	800380c <LL_DAC_IsEnabled>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d13a      	bne.n	80038de <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01e      	beq.n	80038ae <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	f640 71fa 	movw	r1, #4090	; 0xffa
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	401a      	ands	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4319      	orrs	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4319      	orrs	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	4319      	orrs	r1, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	fa01 f303 	lsl.w	r3, r1, r3
 80038a6:	431a      	orrs	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e019      	b.n	80038e2 <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	21fa      	movs	r1, #250	; 0xfa
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	401a      	ands	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	4319      	orrs	r1, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	431a      	orrs	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	e001      	b.n	80038e2 <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <LL_EXTI_EnableIT_0_31+0x20>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4904      	ldr	r1, [pc, #16]	; (800390c <LL_EXTI_EnableIT_0_31+0x20>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	600b      	str	r3, [r1, #0]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40010400 	.word	0x40010400

08003910 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <LL_EXTI_EnableIT_32_63+0x20>)
 800391a:	6a1a      	ldr	r2, [r3, #32]
 800391c:	4904      	ldr	r1, [pc, #16]	; (8003930 <LL_EXTI_EnableIT_32_63+0x20>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4313      	orrs	r3, r2
 8003922:	620b      	str	r3, [r1, #32]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	40010400 	.word	0x40010400

08003934 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <LL_EXTI_DisableIT_0_31+0x24>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	43db      	mvns	r3, r3
 8003944:	4904      	ldr	r1, [pc, #16]	; (8003958 <LL_EXTI_DisableIT_0_31+0x24>)
 8003946:	4013      	ands	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010400 	.word	0x40010400

0800395c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <LL_EXTI_DisableIT_32_63+0x24>)
 8003966:	6a1a      	ldr	r2, [r3, #32]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	43db      	mvns	r3, r3
 800396c:	4904      	ldr	r1, [pc, #16]	; (8003980 <LL_EXTI_DisableIT_32_63+0x24>)
 800396e:	4013      	ands	r3, r2
 8003970:	620b      	str	r3, [r1, #32]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40010400 	.word	0x40010400

08003984 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	4904      	ldr	r1, [pc, #16]	; (80039a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]

}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	40010400 	.word	0x40010400

080039a8 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80039b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039b4:	4904      	ldr	r1, [pc, #16]	; (80039c8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	40010400 	.word	0x40010400

080039cc <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	43db      	mvns	r3, r3
 80039dc:	4904      	ldr	r1, [pc, #16]	; (80039f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80039de:	4013      	ands	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40010400 	.word	0x40010400

080039f4 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <LL_EXTI_DisableEvent_32_63+0x24>)
 80039fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	4904      	ldr	r1, [pc, #16]	; (8003a18 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40010400 	.word	0x40010400

08003a1c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	4904      	ldr	r1, [pc, #16]	; (8003a3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	608b      	str	r3, [r1, #8]

}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	40010400 	.word	0x40010400

08003a40 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a4c:	4904      	ldr	r1, [pc, #16]	; (8003a60 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40010400 	.word	0x40010400

08003a64 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	4904      	ldr	r1, [pc, #16]	; (8003a88 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]

}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010400 	.word	0x40010400

08003a8c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	4904      	ldr	r1, [pc, #16]	; (8003ab0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40010400 	.word	0x40010400

08003ab4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	4904      	ldr	r1, [pc, #16]	; (8003ad4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60cb      	str	r3, [r1, #12]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40010400 	.word	0x40010400

08003ad8 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	4904      	ldr	r1, [pc, #16]	; (8003af8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	40010400 	.word	0x40010400

08003afc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	4904      	ldr	r1, [pc, #16]	; (8003b20 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	60cb      	str	r3, [r1, #12]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40010400 	.word	0x40010400

08003b24 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	4904      	ldr	r1, [pc, #16]	; (8003b48 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40010400 	.word	0x40010400

08003b4c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7a1b      	ldrb	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80c2 	beq.w	8003ce6 <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d05b      	beq.n	8003c22 <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	7a5b      	ldrb	r3, [r3, #9]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d00e      	beq.n	8003b90 <LL_EXTI_Init+0x44>
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d017      	beq.n	8003ba6 <LL_EXTI_Init+0x5a>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d120      	bne.n	8003bbc <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff ff24 	bl	80039cc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff feaf 	bl	80038ec <LL_EXTI_EnableIT_0_31>
          break;
 8003b8e:	e018      	b.n	8003bc2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fecd 	bl	8003934 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fef0 	bl	8003984 <LL_EXTI_EnableEvent_0_31>
          break;
 8003ba4:	e00d      	b.n	8003bc2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fe9e 	bl	80038ec <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fee5 	bl	8003984 <LL_EXTI_EnableEvent_0_31>
          break;
 8003bba:	e002      	b.n	8003bc2 <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
          break;
 8003bc0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	7a9b      	ldrb	r3, [r3, #10]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d02b      	beq.n	8003c22 <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	7a9b      	ldrb	r3, [r3, #10]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d00e      	beq.n	8003bf0 <LL_EXTI_Init+0xa4>
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d017      	beq.n	8003c06 <LL_EXTI_Init+0xba>
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d120      	bne.n	8003c1c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ff8c 	bl	8003afc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ff17 	bl	8003a1c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003bee:	e019      	b.n	8003c24 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff35 	bl	8003a64 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff ff58 	bl	8003ab4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003c04:	e00e      	b.n	8003c24 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff ff06 	bl	8003a1c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff4d 	bl	8003ab4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003c1a:	e003      	b.n	8003c24 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
            break;
 8003c20:	e000      	b.n	8003c24 <LL_EXTI_Init+0xd8>
        }
      }
 8003c22:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d071      	beq.n	8003d10 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7a5b      	ldrb	r3, [r3, #9]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d00e      	beq.n	8003c52 <LL_EXTI_Init+0x106>
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d017      	beq.n	8003c68 <LL_EXTI_Init+0x11c>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d120      	bne.n	8003c7e <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fed7 	bl	80039f4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fe60 	bl	8003910 <LL_EXTI_EnableIT_32_63>
          break;
 8003c50:	e018      	b.n	8003c84 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fe80 	bl	800395c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fea1 	bl	80039a8 <LL_EXTI_EnableEvent_32_63>
          break;
 8003c66:	e00d      	b.n	8003c84 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fe4f 	bl	8003910 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fe96 	bl	80039a8 <LL_EXTI_EnableEvent_32_63>
          break;
 8003c7c:	e002      	b.n	8003c84 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
          break;
 8003c82:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7a9b      	ldrb	r3, [r3, #10]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d041      	beq.n	8003d10 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	7a9b      	ldrb	r3, [r3, #10]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d00e      	beq.n	8003cb2 <LL_EXTI_Init+0x166>
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d017      	beq.n	8003cc8 <LL_EXTI_Init+0x17c>
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d120      	bne.n	8003cde <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff ff3f 	bl	8003b24 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fec8 	bl	8003a40 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8003cb0:	e02f      	b.n	8003d12 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fee8 	bl	8003a8c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff ff09 	bl	8003ad8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003cc6:	e024      	b.n	8003d12 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff feb7 	bl	8003a40 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fefe 	bl	8003ad8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003cdc:	e019      	b.n	8003d12 <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
            break;
 8003ce2:	bf00      	nop
 8003ce4:	e015      	b.n	8003d12 <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fe22 	bl	8003934 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fe69 	bl	80039cc <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff fe2c 	bl	800395c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fe73 	bl	80039f4 <LL_EXTI_DisableEvent_32_63>
 8003d0e:	e000      	b.n	8003d12 <LL_EXTI_Init+0x1c6>
      }
 8003d10:	bf00      	nop
#endif
  }
  return status;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <LL_GPIO_SetPinMode>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	613b      	str	r3, [r7, #16]
  return result;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2103      	movs	r1, #3
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	fa93 f3a3 	rbit	r3, r3
 8003d56:	61bb      	str	r3, [r7, #24]
  return result;
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]
}
 8003d6e:	bf00      	nop
 8003d70:	3724      	adds	r7, #36	; 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_GPIO_SetPinOutputType>:
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	401a      	ands	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	605a      	str	r2, [r3, #4]
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_GPIO_SetPinSpeed>:
{
 8003daa:	b480      	push	{r7}
 8003dac:	b089      	sub	sp, #36	; 0x24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	613b      	str	r3, [r7, #16]
  return result;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	2103      	movs	r1, #3
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	401a      	ands	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	61bb      	str	r3, [r7, #24]
  return result;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	609a      	str	r2, [r3, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	3724      	adds	r7, #36	; 0x24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_GPIO_SetPinPull>:
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	; 0x24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	613b      	str	r3, [r7, #16]
  return result;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	2103      	movs	r1, #3
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	61bb      	str	r3, [r7, #24]
  return result;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	60da      	str	r2, [r3, #12]
}
 8003e5a:	bf00      	nop
 8003e5c:	3724      	adds	r7, #36	; 0x24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <LL_GPIO_SetAFPin_0_7>:
{
 8003e66:	b480      	push	{r7}
 8003e68:	b089      	sub	sp, #36	; 0x24
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1a      	ldr	r2, [r3, #32]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	fa93 f3a3 	rbit	r3, r3
 8003e80:	613b      	str	r3, [r7, #16]
  return result;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	fab3 f383 	clz	r3, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	210f      	movs	r1, #15
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	401a      	ands	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	61bb      	str	r3, [r7, #24]
  return result;
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	fab3 f383 	clz	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]
}
 8003eb8:	bf00      	nop
 8003eba:	3724      	adds	r7, #36	; 0x24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_GPIO_SetAFPin_8_15>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b089      	sub	sp, #36	; 0x24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	613b      	str	r3, [r7, #16]
  return result;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	210f      	movs	r1, #15
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	401a      	ands	r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	0a1b      	lsrs	r3, r3, #8
 8003efa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	61bb      	str	r3, [r7, #24]
  return result;
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	fab3 f383 	clz	r3, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	fa01 f303 	lsl.w	r3, r1, r3
 8003f14:	431a      	orrs	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f1a:	bf00      	nop
 8003f1c:	3724      	adds	r7, #36	; 0x24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b088      	sub	sp, #32
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	fa93 f3a3 	rbit	r3, r3
 8003f3c:	613b      	str	r3, [r7, #16]
  return result;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	fab3 f383 	clz	r3, r3
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003f48:	e051      	b.n	8003fee <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	2101      	movs	r1, #1
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d043      	beq.n	8003fe8 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d003      	beq.n	8003f70 <LL_GPIO_Init+0x4a>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d10e      	bne.n	8003f8e <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	461a      	mov	r2, r3
 8003f76:	69b9      	ldr	r1, [r7, #24]
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ff16 	bl	8003daa <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6819      	ldr	r1, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	461a      	mov	r2, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff fef6 	bl	8003d7a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	461a      	mov	r2, r3
 8003f94:	69b9      	ldr	r1, [r7, #24]
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff ff36 	bl	8003e08 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d11a      	bne.n	8003fda <LL_GPIO_Init+0xb4>
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	fa93 f3a3 	rbit	r3, r3
 8003fae:	60bb      	str	r3, [r7, #8]
  return result;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b07      	cmp	r3, #7
 8003fba:	d807      	bhi.n	8003fcc <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	69b9      	ldr	r1, [r7, #24]
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ff4e 	bl	8003e66 <LL_GPIO_SetAFPin_0_7>
 8003fca:	e006      	b.n	8003fda <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	69b9      	ldr	r1, [r7, #24]
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ff75 	bl	8003ec4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	69b9      	ldr	r1, [r7, #24]
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff fe9a 	bl	8003d1c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	3301      	adds	r3, #1
 8003fec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1a6      	bne.n	8003f4a <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <LL_RCC_HSI_IsReady>:
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <LL_RCC_HSI_IsReady+0x20>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b02      	cmp	r3, #2
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
}
 800401e:	4618      	mov	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40021000 	.word	0x40021000

0800402c <LL_RCC_LSE_IsReady>:
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <LL_RCC_LSE_IsReady+0x20>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
}
 8004042:	4618      	mov	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40021000 	.word	0x40021000

08004050 <LL_RCC_GetSysClkSource>:
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <LL_RCC_GetSysClkSource+0x18>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 030c 	and.w	r3, r3, #12
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000

0800406c <LL_RCC_GetAHBPrescaler>:
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <LL_RCC_GetAHBPrescaler+0x18>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000

08004088 <LL_RCC_GetAPB1Prescaler>:
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000

080040a4 <LL_RCC_GetAPB2Prescaler>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <LL_RCC_GetAPB2Prescaler+0x18>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000

080040c0 <LL_RCC_GetUSARTClockSource>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80040c8:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <LL_RCC_GetUSARTClockSource+0x28>)
 80040ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040cc:	2103      	movs	r1, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	fa01 f303 	lsl.w	r3, r1, r3
 80040d4:	401a      	ands	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	4313      	orrs	r3, r2
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40021000 	.word	0x40021000

080040ec <LL_RCC_GetUARTClockSource>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, UARTx) | (UARTx >> 8U));
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <LL_RCC_GetUARTClockSource+0x24>)
 80040f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	401a      	ands	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	4313      	orrs	r3, r2
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000

08004114 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <LL_RCC_PLL_GetMainSource+0x18>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000

08004130 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000

0800414c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <LL_RCC_PLL_GetPrediv+0x18>)
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	f003 030f 	and.w	r3, r3, #15
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000

08004168 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d12a      	bne.n	80041d0 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff ffa0 	bl	80040c0 <LL_RCC_GetUSARTClockSource>
 8004180:	4603      	mov	r3, r0
 8004182:	2b02      	cmp	r3, #2
 8004184:	d00f      	beq.n	80041a6 <LL_RCC_GetUSARTClockFreq+0x3e>
 8004186:	2b03      	cmp	r3, #3
 8004188:	d005      	beq.n	8004196 <LL_RCC_GetUSARTClockFreq+0x2e>
 800418a:	2b01      	cmp	r3, #1
 800418c:	d114      	bne.n	80041b8 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800418e:	f000 f92b 	bl	80043e8 <RCC_GetSystemClockFreq>
 8004192:	60f8      	str	r0, [r7, #12]
        break;
 8004194:	e021      	b.n	80041da <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004196:	f7ff ff37 	bl	8004008 <LL_RCC_HSI_IsReady>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d019      	beq.n	80041d4 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 80041a0:	4b46      	ldr	r3, [pc, #280]	; (80042bc <LL_RCC_GetUSARTClockFreq+0x154>)
 80041a2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80041a4:	e016      	b.n	80041d4 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80041a6:	f7ff ff41 	bl	800402c <LL_RCC_LSE_IsReady>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 80041b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80041b6:	e00f      	b.n	80041d8 <LL_RCC_GetUSARTClockFreq+0x70>
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80041b8:	f000 f916 	bl	80043e8 <RCC_GetSystemClockFreq>
 80041bc:	4603      	mov	r3, r0
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f934 	bl	800442c <RCC_GetHCLKClockFreq>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f95a 	bl	8004480 <RCC_GetPCLK2ClockFreq>
 80041cc:	60f8      	str	r0, [r7, #12]
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80041ce:	e004      	b.n	80041da <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 80041d0:	bf00      	nop
 80041d2:	e002      	b.n	80041da <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 80041d4:	bf00      	nop
 80041d6:	e000      	b.n	80041da <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 80041d8:	bf00      	nop
#endif /* RCC_CFGR3_USART1SW  */

#if defined(RCC_CFGR3_USART2SW)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d12d      	bne.n	800423c <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff6d 	bl	80040c0 <LL_RCC_GetUSARTClockSource>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4a35      	ldr	r2, [pc, #212]	; (80042c0 <LL_RCC_GetUSARTClockFreq+0x158>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d011      	beq.n	8004212 <LL_RCC_GetUSARTClockFreq+0xaa>
 80041ee:	4a35      	ldr	r2, [pc, #212]	; (80042c4 <LL_RCC_GetUSARTClockFreq+0x15c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d006      	beq.n	8004202 <LL_RCC_GetUSARTClockFreq+0x9a>
 80041f4:	4a34      	ldr	r2, [pc, #208]	; (80042c8 <LL_RCC_GetUSARTClockFreq+0x160>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d114      	bne.n	8004224 <LL_RCC_GetUSARTClockFreq+0xbc>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80041fa:	f000 f8f5 	bl	80043e8 <RCC_GetSystemClockFreq>
 80041fe:	60f8      	str	r0, [r7, #12]
        break;
 8004200:	e021      	b.n	8004246 <LL_RCC_GetUSARTClockFreq+0xde>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004202:	f7ff ff01 	bl	8004008 <LL_RCC_HSI_IsReady>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d019      	beq.n	8004240 <LL_RCC_GetUSARTClockFreq+0xd8>
        {
          usart_frequency = HSI_VALUE;
 800420c:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <LL_RCC_GetUSARTClockFreq+0x154>)
 800420e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004210:	e016      	b.n	8004240 <LL_RCC_GetUSARTClockFreq+0xd8>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004212:	f7ff ff0b 	bl	800402c <LL_RCC_LSE_IsReady>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <LL_RCC_GetUSARTClockFreq+0xdc>
        {
          usart_frequency = LSE_VALUE;
 800421c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004220:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004222:	e00f      	b.n	8004244 <LL_RCC_GetUSARTClockFreq+0xdc>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004224:	f000 f8e0 	bl	80043e8 <RCC_GetSystemClockFreq>
 8004228:	4603      	mov	r3, r0
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f8fe 	bl	800442c <RCC_GetHCLKClockFreq>
 8004230:	4603      	mov	r3, r0
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f910 	bl	8004458 <RCC_GetPCLK1ClockFreq>
 8004238:	60f8      	str	r0, [r7, #12]
        break;
 800423a:	e004      	b.n	8004246 <LL_RCC_GetUSARTClockFreq+0xde>
    }
  }
 800423c:	bf00      	nop
 800423e:	e002      	b.n	8004246 <LL_RCC_GetUSARTClockFreq+0xde>
        break;
 8004240:	bf00      	nop
 8004242:	e000      	b.n	8004246 <LL_RCC_GetUSARTClockFreq+0xde>
        break;
 8004244:	bf00      	nop
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b12      	cmp	r3, #18
 800424a:	d12d      	bne.n	80042a8 <LL_RCC_GetUSARTClockFreq+0x140>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff37 	bl	80040c0 <LL_RCC_GetUSARTClockSource>
 8004252:	4603      	mov	r3, r0
 8004254:	4a1d      	ldr	r2, [pc, #116]	; (80042cc <LL_RCC_GetUSARTClockFreq+0x164>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d011      	beq.n	800427e <LL_RCC_GetUSARTClockFreq+0x116>
 800425a:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <LL_RCC_GetUSARTClockFreq+0x168>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d006      	beq.n	800426e <LL_RCC_GetUSARTClockFreq+0x106>
 8004260:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <LL_RCC_GetUSARTClockFreq+0x16c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d114      	bne.n	8004290 <LL_RCC_GetUSARTClockFreq+0x128>
    {
      case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004266:	f000 f8bf 	bl	80043e8 <RCC_GetSystemClockFreq>
 800426a:	60f8      	str	r0, [r7, #12]
        break;
 800426c:	e021      	b.n	80042b2 <LL_RCC_GetUSARTClockFreq+0x14a>

      case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800426e:	f7ff fecb 	bl	8004008 <LL_RCC_HSI_IsReady>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d019      	beq.n	80042ac <LL_RCC_GetUSARTClockFreq+0x144>
        {
          usart_frequency = HSI_VALUE;
 8004278:	4b10      	ldr	r3, [pc, #64]	; (80042bc <LL_RCC_GetUSARTClockFreq+0x154>)
 800427a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800427c:	e016      	b.n	80042ac <LL_RCC_GetUSARTClockFreq+0x144>

      case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800427e:	f7ff fed5 	bl	800402c <LL_RCC_LSE_IsReady>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d013      	beq.n	80042b0 <LL_RCC_GetUSARTClockFreq+0x148>
        {
          usart_frequency = LSE_VALUE;
 8004288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800428c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800428e:	e00f      	b.n	80042b0 <LL_RCC_GetUSARTClockFreq+0x148>

      case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004290:	f000 f8aa 	bl	80043e8 <RCC_GetSystemClockFreq>
 8004294:	4603      	mov	r3, r0
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f8c8 	bl	800442c <RCC_GetHCLKClockFreq>
 800429c:	4603      	mov	r3, r0
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f8da 	bl	8004458 <RCC_GetPCLK1ClockFreq>
 80042a4:	60f8      	str	r0, [r7, #12]
        break;
 80042a6:	e004      	b.n	80042b2 <LL_RCC_GetUSARTClockFreq+0x14a>
    }
  }
 80042a8:	bf00      	nop
 80042aa:	e002      	b.n	80042b2 <LL_RCC_GetUSARTClockFreq+0x14a>
        break;
 80042ac:	bf00      	nop
 80042ae:	e000      	b.n	80042b2 <LL_RCC_GetUSARTClockFreq+0x14a>
        break;
 80042b0:	bf00      	nop

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80042b2:	68fb      	ldr	r3, [r7, #12]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	007a1200 	.word	0x007a1200
 80042c0:	10020000 	.word	0x10020000
 80042c4:	10030000 	.word	0x10030000
 80042c8:	10010000 	.word	0x10010000
 80042cc:	12080000 	.word	0x12080000
 80042d0:	120c0000 	.word	0x120c0000
 80042d4:	12040000 	.word	0x12040000

080042d8 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(UART4)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042ea:	d12d      	bne.n	8004348 <LL_RCC_GetUARTClockFreq+0x70>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff fefd 	bl	80040ec <LL_RCC_GetUARTClockSource>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4a35      	ldr	r2, [pc, #212]	; (80043cc <LL_RCC_GetUARTClockFreq+0xf4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d011      	beq.n	800431e <LL_RCC_GetUARTClockFreq+0x46>
 80042fa:	4a35      	ldr	r2, [pc, #212]	; (80043d0 <LL_RCC_GetUARTClockFreq+0xf8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d006      	beq.n	800430e <LL_RCC_GetUARTClockFreq+0x36>
 8004300:	4a34      	ldr	r2, [pc, #208]	; (80043d4 <LL_RCC_GetUARTClockFreq+0xfc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d114      	bne.n	8004330 <LL_RCC_GetUARTClockFreq+0x58>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004306:	f000 f86f 	bl	80043e8 <RCC_GetSystemClockFreq>
 800430a:	60f8      	str	r0, [r7, #12]
        break;
 800430c:	e021      	b.n	8004352 <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800430e:	f7ff fe7b 	bl	8004008 <LL_RCC_HSI_IsReady>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d019      	beq.n	800434c <LL_RCC_GetUARTClockFreq+0x74>
        {
          uart_frequency = HSI_VALUE;
 8004318:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <LL_RCC_GetUARTClockFreq+0x100>)
 800431a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800431c:	e016      	b.n	800434c <LL_RCC_GetUARTClockFreq+0x74>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800431e:	f7ff fe85 	bl	800402c <LL_RCC_LSE_IsReady>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <LL_RCC_GetUARTClockFreq+0x78>
        {
          uart_frequency = LSE_VALUE;
 8004328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800432e:	e00f      	b.n	8004350 <LL_RCC_GetUARTClockFreq+0x78>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004330:	f000 f85a 	bl	80043e8 <RCC_GetSystemClockFreq>
 8004334:	4603      	mov	r3, r0
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f878 	bl	800442c <RCC_GetHCLKClockFreq>
 800433c:	4603      	mov	r3, r0
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f88a 	bl	8004458 <RCC_GetPCLK1ClockFreq>
 8004344:	60f8      	str	r0, [r7, #12]
        break;
 8004346:	e004      	b.n	8004352 <LL_RCC_GetUARTClockFreq+0x7a>
    }
  }
 8004348:	bf00      	nop
 800434a:	e002      	b.n	8004352 <LL_RCC_GetUARTClockFreq+0x7a>
        break;
 800434c:	bf00      	nop
 800434e:	e000      	b.n	8004352 <LL_RCC_GetUARTClockFreq+0x7a>
        break;
 8004350:	bf00      	nop
#endif /* UART4 */

#if defined(UART5)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004358:	d12d      	bne.n	80043b6 <LL_RCC_GetUARTClockFreq+0xde>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fec6 	bl	80040ec <LL_RCC_GetUARTClockSource>
 8004360:	4603      	mov	r3, r0
 8004362:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <LL_RCC_GetUARTClockFreq+0x104>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d011      	beq.n	800438c <LL_RCC_GetUARTClockFreq+0xb4>
 8004368:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <LL_RCC_GetUARTClockFreq+0x108>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d006      	beq.n	800437c <LL_RCC_GetUARTClockFreq+0xa4>
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <LL_RCC_GetUARTClockFreq+0x10c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d114      	bne.n	800439e <LL_RCC_GetUARTClockFreq+0xc6>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004374:	f000 f838 	bl	80043e8 <RCC_GetSystemClockFreq>
 8004378:	60f8      	str	r0, [r7, #12]
        break;
 800437a:	e021      	b.n	80043c0 <LL_RCC_GetUARTClockFreq+0xe8>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800437c:	f7ff fe44 	bl	8004008 <LL_RCC_HSI_IsReady>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d019      	beq.n	80043ba <LL_RCC_GetUARTClockFreq+0xe2>
        {
          uart_frequency = HSI_VALUE;
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <LL_RCC_GetUARTClockFreq+0x100>)
 8004388:	60fb      	str	r3, [r7, #12]
        }
        break;
 800438a:	e016      	b.n	80043ba <LL_RCC_GetUARTClockFreq+0xe2>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800438c:	f7ff fe4e 	bl	800402c <LL_RCC_LSE_IsReady>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d013      	beq.n	80043be <LL_RCC_GetUARTClockFreq+0xe6>
        {
          uart_frequency = LSE_VALUE;
 8004396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800439c:	e00f      	b.n	80043be <LL_RCC_GetUARTClockFreq+0xe6>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800439e:	f000 f823 	bl	80043e8 <RCC_GetSystemClockFreq>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f841 	bl	800442c <RCC_GetHCLKClockFreq>
 80043aa:	4603      	mov	r3, r0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 f853 	bl	8004458 <RCC_GetPCLK1ClockFreq>
 80043b2:	60f8      	str	r0, [r7, #12]
        break;
 80043b4:	e004      	b.n	80043c0 <LL_RCC_GetUARTClockFreq+0xe8>
    }
  }
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <LL_RCC_GetUARTClockFreq+0xe8>
        break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <LL_RCC_GetUARTClockFreq+0xe8>
        break;
 80043be:	bf00      	nop
#endif /* UART5 */

  return uart_frequency;
 80043c0:	68fb      	ldr	r3, [r7, #12]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	00203000 	.word	0x00203000
 80043d0:	00303000 	.word	0x00303000
 80043d4:	00103000 	.word	0x00103000
 80043d8:	007a1200 	.word	0x007a1200
 80043dc:	0080c000 	.word	0x0080c000
 80043e0:	00c0c000 	.word	0x00c0c000
 80043e4:	0040c000 	.word	0x0040c000

080043e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80043f2:	f7ff fe2d 	bl	8004050 <LL_RCC_GetSysClkSource>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d006      	beq.n	800440a <RCC_GetSystemClockFreq+0x22>
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d007      	beq.n	8004410 <RCC_GetSystemClockFreq+0x28>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004404:	4b08      	ldr	r3, [pc, #32]	; (8004428 <RCC_GetSystemClockFreq+0x40>)
 8004406:	607b      	str	r3, [r7, #4]
      break;
 8004408:	e009      	b.n	800441e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800440a:	4b07      	ldr	r3, [pc, #28]	; (8004428 <RCC_GetSystemClockFreq+0x40>)
 800440c:	607b      	str	r3, [r7, #4]
      break;
 800440e:	e006      	b.n	800441e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004410:	f000 f84a 	bl	80044a8 <RCC_PLL_GetFreqDomain_SYS>
 8004414:	6078      	str	r0, [r7, #4]
      break;
 8004416:	e002      	b.n	800441e <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8004418:	4b03      	ldr	r3, [pc, #12]	; (8004428 <RCC_GetSystemClockFreq+0x40>)
 800441a:	607b      	str	r3, [r7, #4]
      break;
 800441c:	bf00      	nop
  }

  return frequency;
 800441e:	687b      	ldr	r3, [r7, #4]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	007a1200 	.word	0x007a1200

0800442c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004434:	f7ff fe1a 	bl	800406c <LL_RCC_GetAHBPrescaler>
 8004438:	4603      	mov	r3, r0
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	4a04      	ldr	r2, [pc, #16]	; (8004454 <RCC_GetHCLKClockFreq+0x28>)
 8004442:	5cd3      	ldrb	r3, [r2, r3]
 8004444:	461a      	mov	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	40d3      	lsrs	r3, r2
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	08015ea8 	.word	0x08015ea8

08004458 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004460:	f7ff fe12 	bl	8004088 <LL_RCC_GetAPB1Prescaler>
 8004464:	4603      	mov	r3, r0
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	4a04      	ldr	r2, [pc, #16]	; (800447c <RCC_GetPCLK1ClockFreq+0x24>)
 800446a:	5cd3      	ldrb	r3, [r2, r3]
 800446c:	461a      	mov	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	40d3      	lsrs	r3, r2
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	08015eb8 	.word	0x08015eb8

08004480 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004488:	f7ff fe0c 	bl	80040a4 <LL_RCC_GetAPB2Prescaler>
 800448c:	4603      	mov	r3, r0
 800448e:	0adb      	lsrs	r3, r3, #11
 8004490:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <RCC_GetPCLK2ClockFreq+0x24>)
 8004492:	5cd3      	ldrb	r3, [r2, r3]
 8004494:	461a      	mov	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	40d3      	lsrs	r3, r2
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	08015eb8 	.word	0x08015eb8

080044a8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80044a8:	b590      	push	{r4, r7, lr}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80044b6:	f7ff fe2d 	bl	8004114 <LL_RCC_PLL_GetMainSource>
 80044ba:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c2:	d003      	beq.n	80044cc <RCC_PLL_GetFreqDomain_SYS+0x24>
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c8:	d003      	beq.n	80044d2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80044ca:	e005      	b.n	80044d8 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80044ce:	60fb      	str	r3, [r7, #12]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80044d0:	e005      	b.n	80044de <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80044d4:	60fb      	str	r3, [r7, #12]
      break;
 80044d6:	e002      	b.n	80044de <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 80044d8:	4b11      	ldr	r3, [pc, #68]	; (8004520 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80044da:	60fb      	str	r3, [r7, #12]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80044dc:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 80044de:	f7ff fe35 	bl	800414c <LL_RCC_PLL_GetPrediv>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	3301      	adds	r3, #1
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	fbb2 f4f3 	udiv	r4, r2, r3
 80044f0:	f7ff fe1e 	bl	8004130 <LL_RCC_PLL_GetMultiplicator>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044fa:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044fe:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	fa92 f2a2 	rbit	r2, r2
 8004506:	603a      	str	r2, [r7, #0]
  return result;
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	fab2 f282 	clz	r2, r2
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	40d3      	lsrs	r3, r2
 8004512:	3302      	adds	r3, #2
 8004514:	fb03 f304 	mul.w	r3, r3, r4
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	007a1200 	.word	0x007a1200

08004524 <LL_TIM_SetPrescaler>:
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <LL_TIM_SetAutoReload>:
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_TIM_SetRepetitionCounter>:
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_TIM_OC_SetCompareCH1>:
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_TIM_OC_SetCompareCH2>:
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <LL_TIM_OC_SetCompareCH3>:
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <LL_TIM_OC_SetCompareCH4>:
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <LL_TIM_OC_SetCompareCH5>:
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	659a      	str	r2, [r3, #88]	; 0x58
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <LL_TIM_OC_SetCompareCH6>:
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f043 0201 	orr.w	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	615a      	str	r2, [r3, #20]
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a3f      	ldr	r2, [pc, #252]	; (8004754 <LL_TIM_Init+0x110>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d013      	beq.n	8004684 <LL_TIM_Init+0x40>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d00f      	beq.n	8004684 <LL_TIM_Init+0x40>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a3c      	ldr	r2, [pc, #240]	; (8004758 <LL_TIM_Init+0x114>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00b      	beq.n	8004684 <LL_TIM_Init+0x40>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a3b      	ldr	r2, [pc, #236]	; (800475c <LL_TIM_Init+0x118>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <LL_TIM_Init+0x40>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a3a      	ldr	r2, [pc, #232]	; (8004760 <LL_TIM_Init+0x11c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <LL_TIM_Init+0x40>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a39      	ldr	r2, [pc, #228]	; (8004764 <LL_TIM_Init+0x120>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d106      	bne.n	8004692 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a2f      	ldr	r2, [pc, #188]	; (8004754 <LL_TIM_Init+0x110>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d01f      	beq.n	80046da <LL_TIM_Init+0x96>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a0:	d01b      	beq.n	80046da <LL_TIM_Init+0x96>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a2c      	ldr	r2, [pc, #176]	; (8004758 <LL_TIM_Init+0x114>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d017      	beq.n	80046da <LL_TIM_Init+0x96>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2b      	ldr	r2, [pc, #172]	; (800475c <LL_TIM_Init+0x118>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <LL_TIM_Init+0x96>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2a      	ldr	r2, [pc, #168]	; (8004760 <LL_TIM_Init+0x11c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00f      	beq.n	80046da <LL_TIM_Init+0x96>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2a      	ldr	r2, [pc, #168]	; (8004768 <LL_TIM_Init+0x124>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00b      	beq.n	80046da <LL_TIM_Init+0x96>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a29      	ldr	r2, [pc, #164]	; (800476c <LL_TIM_Init+0x128>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d007      	beq.n	80046da <LL_TIM_Init+0x96>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a28      	ldr	r2, [pc, #160]	; (8004770 <LL_TIM_Init+0x12c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d003      	beq.n	80046da <LL_TIM_Init+0x96>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a23      	ldr	r2, [pc, #140]	; (8004764 <LL_TIM_Init+0x120>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d106      	bne.n	80046e8 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	4619      	mov	r1, r3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff ff23 	bl	8004540 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	4619      	mov	r1, r3
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ff0f 	bl	8004524 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a12      	ldr	r2, [pc, #72]	; (8004754 <LL_TIM_Init+0x110>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <LL_TIM_Init+0xf2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a13      	ldr	r2, [pc, #76]	; (8004760 <LL_TIM_Init+0x11c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00f      	beq.n	8004736 <LL_TIM_Init+0xf2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a13      	ldr	r2, [pc, #76]	; (8004768 <LL_TIM_Init+0x124>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <LL_TIM_Init+0xf2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a12      	ldr	r2, [pc, #72]	; (800476c <LL_TIM_Init+0x128>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <LL_TIM_Init+0xf2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a11      	ldr	r2, [pc, #68]	; (8004770 <LL_TIM_Init+0x12c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <LL_TIM_Init+0xf2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a0c      	ldr	r2, [pc, #48]	; (8004764 <LL_TIM_Init+0x120>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d105      	bne.n	8004742 <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff ff0d 	bl	800455c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff ff6e 	bl	8004624 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40000400 	.word	0x40000400
 800475c:	40000800 	.word	0x40000800
 8004760:	40013400 	.word	0x40013400
 8004764:	40015000 	.word	0x40015000
 8004768:	40014000 	.word	0x40014000
 800476c:	40014400 	.word	0x40014400
 8004770:	40014800 	.word	0x40014800

08004774 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478a:	d01f      	beq.n	80047cc <LL_TIM_OC_Init+0x58>
 800478c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004790:	d804      	bhi.n	800479c <LL_TIM_OC_Init+0x28>
 8004792:	2b01      	cmp	r3, #1
 8004794:	d00c      	beq.n	80047b0 <LL_TIM_OC_Init+0x3c>
 8004796:	2b10      	cmp	r3, #16
 8004798:	d011      	beq.n	80047be <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800479a:	e033      	b.n	8004804 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a0:	d022      	beq.n	80047e8 <LL_TIM_OC_Init+0x74>
 80047a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a6:	d026      	beq.n	80047f6 <LL_TIM_OC_Init+0x82>
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ac:	d015      	beq.n	80047da <LL_TIM_OC_Init+0x66>
      break;
 80047ae:	e029      	b.n	8004804 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f8b0 	bl	8004918 <OC1Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	75fb      	strb	r3, [r7, #23]
      break;
 80047bc:	e022      	b.n	8004804 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f92f 	bl	8004a24 <OC2Config>
 80047c6:	4603      	mov	r3, r0
 80047c8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ca:	e01b      	b.n	8004804 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f9b2 	bl	8004b38 <OC3Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	75fb      	strb	r3, [r7, #23]
      break;
 80047d8:	e014      	b.n	8004804 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fa35 	bl	8004c4c <OC4Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	75fb      	strb	r3, [r7, #23]
      break;
 80047e6:	e00d      	b.n	8004804 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 faa0 	bl	8004d30 <OC5Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	75fb      	strb	r3, [r7, #23]
      break;
 80047f4:	e006      	b.n	8004804 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fb03 	bl	8004e04 <OC6Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	75fb      	strb	r3, [r7, #23]
      break;
 8004802:	bf00      	nop
  }

  return result;
 8004804:	7dfb      	ldrb	r3, [r7, #23]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	7b12      	ldrb	r2, [r2, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	89d2      	ldrh	r2, [r2, #14]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a1e      	ldr	r2, [pc, #120]	; (800490c <LL_TIM_BDTR_Init+0xfc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d007      	beq.n	80048a6 <LL_TIM_BDTR_Init+0x96>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <LL_TIM_BDTR_Init+0x100>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d003      	beq.n	80048a6 <LL_TIM_BDTR_Init+0x96>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <LL_TIM_BDTR_Init+0x104>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d106      	bne.n	80048b4 <LL_TIM_BDTR_Init+0xa4>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BKF */
#if defined(TIM_BDTR_BK2E)

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a15      	ldr	r2, [pc, #84]	; (800490c <LL_TIM_BDTR_Init+0xfc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <LL_TIM_BDTR_Init+0xbc>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a14      	ldr	r2, [pc, #80]	; (8004910 <LL_TIM_BDTR_Init+0x100>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <LL_TIM_BDTR_Init+0xbc>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a13      	ldr	r2, [pc, #76]	; (8004914 <LL_TIM_BDTR_Init+0x104>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d114      	bne.n	80048f6 <LL_TIM_BDTR_Init+0xe6>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40013400 	.word	0x40013400
 8004914:	40015000 	.word	0x40015000

08004918 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f023 0201 	bic.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f023 0202 	bic.w	r2, r3, #2
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0201 	bic.w	r2, r3, #1
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <OC1Config+0xf4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <OC1Config+0x8e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a23      	ldr	r2, [pc, #140]	; (8004a10 <OC1Config+0xf8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00f      	beq.n	80049a6 <OC1Config+0x8e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a22      	ldr	r2, [pc, #136]	; (8004a14 <OC1Config+0xfc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00b      	beq.n	80049a6 <OC1Config+0x8e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a21      	ldr	r2, [pc, #132]	; (8004a18 <OC1Config+0x100>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <OC1Config+0x8e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a20      	ldr	r2, [pc, #128]	; (8004a1c <OC1Config+0x104>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d003      	beq.n	80049a6 <OC1Config+0x8e>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1f      	ldr	r2, [pc, #124]	; (8004a20 <OC1Config+0x108>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d11e      	bne.n	80049e4 <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 0208 	bic.w	r2, r3, #8
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 0204 	bic.w	r2, r3, #4
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	4313      	orrs	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff fdbe 	bl	8004578 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40013400 	.word	0x40013400
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800
 8004a20:	40015000 	.word	0x40015000

08004a24 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f023 0210 	bic.w	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	0212      	lsls	r2, r2, #8
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 0220 	bic.w	r2, r3, #32
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0210 	bic.w	r2, r3, #16
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a25      	ldr	r2, [pc, #148]	; (8004b20 <OC2Config+0xfc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <OC2Config+0x94>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a24      	ldr	r2, [pc, #144]	; (8004b24 <OC2Config+0x100>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00f      	beq.n	8004ab8 <OC2Config+0x94>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <OC2Config+0x104>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00b      	beq.n	8004ab8 <OC2Config+0x94>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a22      	ldr	r2, [pc, #136]	; (8004b2c <OC2Config+0x108>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d007      	beq.n	8004ab8 <OC2Config+0x94>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a21      	ldr	r2, [pc, #132]	; (8004b30 <OC2Config+0x10c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <OC2Config+0x94>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a20      	ldr	r2, [pc, #128]	; (8004b34 <OC2Config+0x110>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d11f      	bne.n	8004af8 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	019b      	lsls	r3, r3, #6
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	019b      	lsls	r3, r3, #6
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fd42 	bl	8004594 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40013400 	.word	0x40013400
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800
 8004b34:	40015000 	.word	0x40015000

08004b38 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a25      	ldr	r2, [pc, #148]	; (8004c34 <OC3Config+0xfc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <OC3Config+0x92>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a24      	ldr	r2, [pc, #144]	; (8004c38 <OC3Config+0x100>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00f      	beq.n	8004bca <OC3Config+0x92>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a23      	ldr	r2, [pc, #140]	; (8004c3c <OC3Config+0x104>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00b      	beq.n	8004bca <OC3Config+0x92>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <OC3Config+0x108>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <OC3Config+0x92>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <OC3Config+0x10c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <OC3Config+0x92>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a20      	ldr	r2, [pc, #128]	; (8004c48 <OC3Config+0x110>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d11f      	bne.n	8004c0a <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	029b      	lsls	r3, r3, #10
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	029b      	lsls	r3, r3, #10
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	015b      	lsls	r3, r3, #5
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff fcc7 	bl	80045b0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40013400 	.word	0x40013400
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40014400 	.word	0x40014400
 8004c44:	40014800 	.word	0x40014800
 8004c48:	40015000 	.word	0x40015000

08004c4c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	0212      	lsls	r2, r2, #8
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	031b      	lsls	r3, r3, #12
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	031b      	lsls	r3, r3, #12
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <OC4Config+0xcc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <OC4Config+0x94>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a18      	ldr	r2, [pc, #96]	; (8004d1c <OC4Config+0xd0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00f      	beq.n	8004ce0 <OC4Config+0x94>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a17      	ldr	r2, [pc, #92]	; (8004d20 <OC4Config+0xd4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00b      	beq.n	8004ce0 <OC4Config+0x94>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a16      	ldr	r2, [pc, #88]	; (8004d24 <OC4Config+0xd8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d007      	beq.n	8004ce0 <OC4Config+0x94>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <OC4Config+0xdc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <OC4Config+0x94>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a14      	ldr	r2, [pc, #80]	; (8004d2c <OC4Config+0xe0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d107      	bne.n	8004cf0 <OC4Config+0xa4>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	019b      	lsls	r3, r3, #6
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fc62 	bl	80045cc <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40013400 	.word	0x40013400
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800
 8004d2c:	40015000 	.word	0x40015000

08004d30 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	6812      	ldr	r2, [r2, #0]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	041b      	lsls	r3, r3, #16
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	041b      	lsls	r3, r3, #16
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a19      	ldr	r2, [pc, #100]	; (8004dec <OC5Config+0xbc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <OC5Config+0x84>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <OC5Config+0xc0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00f      	beq.n	8004db4 <OC5Config+0x84>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <OC5Config+0xc4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00b      	beq.n	8004db4 <OC5Config+0x84>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a16      	ldr	r2, [pc, #88]	; (8004df8 <OC5Config+0xc8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d007      	beq.n	8004db4 <OC5Config+0x84>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <OC5Config+0xcc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <OC5Config+0x84>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <OC5Config+0xd0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d109      	bne.n	8004dc8 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff fc07 	bl	80045e8 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40013400 	.word	0x40013400
 8004df4:	40014000 	.word	0x40014000
 8004df8:	40014400 	.word	0x40014400
 8004dfc:	40014800 	.word	0x40014800
 8004e00:	40015000 	.word	0x40015000

08004e04 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	0212      	lsls	r2, r2, #8
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	051b      	lsls	r3, r3, #20
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	051b      	lsls	r3, r3, #20
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a18      	ldr	r2, [pc, #96]	; (8004ec0 <OC6Config+0xbc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <OC6Config+0x86>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <OC6Config+0xc0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00f      	beq.n	8004e8a <OC6Config+0x86>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <OC6Config+0xc4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <OC6Config+0x86>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <OC6Config+0xc8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <OC6Config+0x86>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a14      	ldr	r2, [pc, #80]	; (8004ed0 <OC6Config+0xcc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <OC6Config+0x86>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <OC6Config+0xd0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d109      	bne.n	8004e9e <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	029b      	lsls	r3, r3, #10
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff fbac 	bl	8004608 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40013400 	.word	0x40013400
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800
 8004ed4:	40015000 	.word	0x40015000

08004ed8 <LL_USART_IsEnabled>:
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <LL_USART_IsEnabled+0x18>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <LL_USART_IsEnabled+0x1a>
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <LL_USART_SetStopBitsLength>:
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	605a      	str	r2, [r3, #4]
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_USART_SetHWFlowCtrl>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	609a      	str	r2, [r3, #8]
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_USART_SetBaudRate>:
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b087      	sub	sp, #28
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f5e:	d11a      	bne.n	8004f96 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	005a      	lsls	r2, r3, #1
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	441a      	add	r2, r3
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	60da      	str	r2, [r3, #12]
}
 8004f94:	e00a      	b.n	8004fac <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	085a      	lsrs	r2, r3, #1
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	441a      	add	r2, r3
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	60da      	str	r2, [r3, #12]
}
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff84 	bl	8004ed8 <LL_USART_IsEnabled>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d15c      	bne.n	8005090 <LL_USART_Init+0xd8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b30      	ldr	r3, [pc, #192]	; (800509c <LL_USART_Init+0xe4>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	6851      	ldr	r1, [r2, #4]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	68d2      	ldr	r2, [r2, #12]
 8004fe6:	4311      	orrs	r1, r2
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	6912      	ldr	r2, [r2, #16]
 8004fec:	4311      	orrs	r1, r2
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	6992      	ldr	r2, [r2, #24]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4619      	mov	r1, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ff7c 	bl	8004efe <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff ff89 	bl	8004f24 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a22      	ldr	r2, [pc, #136]	; (80050a0 <LL_USART_Init+0xe8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d104      	bne.n	8005024 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800501a:	2000      	movs	r0, #0
 800501c:	f7ff f8a4 	bl	8004168 <LL_RCC_GetUSARTClockFreq>
 8005020:	60b8      	str	r0, [r7, #8]
 8005022:	e024      	b.n	800506e <LL_USART_Init+0xb6>
    }
    else if (USARTx == USART2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a1f      	ldr	r2, [pc, #124]	; (80050a4 <LL_USART_Init+0xec>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d104      	bne.n	8005036 <LL_USART_Init+0x7e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800502c:	2010      	movs	r0, #16
 800502e:	f7ff f89b 	bl	8004168 <LL_RCC_GetUSARTClockFreq>
 8005032:	60b8      	str	r0, [r7, #8]
 8005034:	e01b      	b.n	800506e <LL_USART_Init+0xb6>
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
    else if (USARTx == USART3)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1b      	ldr	r2, [pc, #108]	; (80050a8 <LL_USART_Init+0xf0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d104      	bne.n	8005048 <LL_USART_Init+0x90>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800503e:	2012      	movs	r0, #18
 8005040:	f7ff f892 	bl	8004168 <LL_RCC_GetUSARTClockFreq>
 8005044:	60b8      	str	r0, [r7, #8]
 8005046:	e012      	b.n	800506e <LL_USART_Init+0xb6>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a18      	ldr	r2, [pc, #96]	; (80050ac <LL_USART_Init+0xf4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d105      	bne.n	800505c <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8005050:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005054:	f7ff f940 	bl	80042d8 <LL_RCC_GetUARTClockFreq>
 8005058:	60b8      	str	r0, [r7, #8]
 800505a:	e008      	b.n	800506e <LL_USART_Init+0xb6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a14      	ldr	r2, [pc, #80]	; (80050b0 <LL_USART_Init+0xf8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d104      	bne.n	800506e <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8005064:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8005068:	f7ff f936 	bl	80042d8 <LL_RCC_GetUARTClockFreq>
 800506c:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00d      	beq.n	8005090 <LL_USART_Init+0xd8>
        && (USART_InitStruct->BaudRate != 0U))
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d009      	beq.n	8005090 <LL_USART_Init+0xd8>
    {
      status = SUCCESS;
 800507c:	2300      	movs	r3, #0
 800507e:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	699a      	ldr	r2, [r3, #24]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff ff5d 	bl	8004f4a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	efff69f3 	.word	0xefff69f3
 80050a0:	40013800 	.word	0x40013800
 80050a4:	40004400 	.word	0x40004400
 80050a8:	40004800 	.word	0x40004800
 80050ac:	40004c00 	.word	0x40004c00
 80050b0:	40005000 	.word	0x40005000

080050b4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80050bc:	4a04      	ldr	r2, [pc, #16]	; (80050d0 <LL_SetSystemCoreClock+0x1c>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6013      	str	r3, [r2, #0]
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000000 	.word	0x20000000

080050d4 <iwdg_feed>:

#ifndef INC_PERIPH_H_
#define INC_PERIPH_H_

static inline void iwdg_feed()
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
    EM_IWDG_RST;
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <iwdg_feed+0x18>)
 80050da:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80050de:	601a      	str	r2, [r3, #0]
};
 80050e0:	bf00      	nop
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40003000 	.word	0x40003000

080050f0 <app_main>:

volatile uint8_t init_done = 0;   // system initialized


void app_main(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af04      	add	r7, sp, #16
  __ASM volatile ("cpsid i" : : : "memory");
 80050f6:	b672      	cpsid	i
    __disable_irq();

    sem1_comm = xSemaphoreCreateBinaryStatic(&buff_sem1_comm);
 80050f8:	2303      	movs	r3, #3
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4b57      	ldr	r3, [pc, #348]	; (800525c <app_main+0x16c>)
 80050fe:	2200      	movs	r2, #0
 8005100:	2100      	movs	r1, #0
 8005102:	2001      	movs	r0, #1
 8005104:	f00b ff82 	bl	801100c <xQueueGenericCreateStatic>
 8005108:	4602      	mov	r2, r0
 800510a:	4b55      	ldr	r3, [pc, #340]	; (8005260 <app_main+0x170>)
 800510c:	601a      	str	r2, [r3, #0]
    sem2_trig = xSemaphoreCreateBinaryStatic(&buff_sem2_trig);
 800510e:	2303      	movs	r3, #3
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	4b54      	ldr	r3, [pc, #336]	; (8005264 <app_main+0x174>)
 8005114:	2200      	movs	r2, #0
 8005116:	2100      	movs	r1, #0
 8005118:	2001      	movs	r0, #1
 800511a:	f00b ff77 	bl	801100c <xQueueGenericCreateStatic>
 800511e:	4602      	mov	r2, r0
 8005120:	4b51      	ldr	r3, [pc, #324]	; (8005268 <app_main+0x178>)
 8005122:	601a      	str	r2, [r3, #0]
    sem3_cntr = xSemaphoreCreateBinaryStatic(&buff_sem3_cntr);
 8005124:	2303      	movs	r3, #3
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	4b50      	ldr	r3, [pc, #320]	; (800526c <app_main+0x17c>)
 800512a:	2200      	movs	r2, #0
 800512c:	2100      	movs	r1, #0
 800512e:	2001      	movs	r0, #1
 8005130:	f00b ff6c 	bl	801100c <xQueueGenericCreateStatic>
 8005134:	4602      	mov	r2, r0
 8005136:	4b4e      	ldr	r3, [pc, #312]	; (8005270 <app_main+0x180>)
 8005138:	601a      	str	r2, [r3, #0]
    mtx1 = xSemaphoreCreateMutexStatic(&buff_mtx1);
 800513a:	494e      	ldr	r1, [pc, #312]	; (8005274 <app_main+0x184>)
 800513c:	2001      	movs	r0, #1
 800513e:	f00c f80c 	bl	801115a <xQueueCreateMutexStatic>
 8005142:	4602      	mov	r2, r0
 8005144:	4b4c      	ldr	r3, [pc, #304]	; (8005278 <app_main+0x188>)
 8005146:	601a      	str	r2, [r3, #0]

    ASSERT(sem1_comm != NULL);
 8005148:	4b45      	ldr	r3, [pc, #276]	; (8005260 <app_main+0x170>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <app_main+0x68>
 8005150:	2144      	movs	r1, #68	; 0x44
 8005152:	484a      	ldr	r0, [pc, #296]	; (800527c <app_main+0x18c>)
 8005154:	f007 fb8b 	bl	800c86e <assert2>
    ASSERT(sem2_trig != NULL);
 8005158:	4b43      	ldr	r3, [pc, #268]	; (8005268 <app_main+0x178>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d103      	bne.n	8005168 <app_main+0x78>
 8005160:	2145      	movs	r1, #69	; 0x45
 8005162:	4846      	ldr	r0, [pc, #280]	; (800527c <app_main+0x18c>)
 8005164:	f007 fb83 	bl	800c86e <assert2>
    ASSERT(sem3_cntr != NULL);
 8005168:	4b41      	ldr	r3, [pc, #260]	; (8005270 <app_main+0x180>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d103      	bne.n	8005178 <app_main+0x88>
 8005170:	2146      	movs	r1, #70	; 0x46
 8005172:	4842      	ldr	r0, [pc, #264]	; (800527c <app_main+0x18c>)
 8005174:	f007 fb7b 	bl	800c86e <assert2>
    ASSERT(mtx1 != NULL);
 8005178:	4b3f      	ldr	r3, [pc, #252]	; (8005278 <app_main+0x188>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d103      	bne.n	8005188 <app_main+0x98>
 8005180:	2147      	movs	r1, #71	; 0x47
 8005182:	483e      	ldr	r0, [pc, #248]	; (800527c <app_main+0x18c>)
 8005184:	f007 fb73 	bl	800c86e <assert2>

    ASSERT(xTaskCreateStatic(t1_wd, "T1", EM_STACK_T1, NULL, EM_PRI_T1, stack_t1, &buff_t1) != NULL);
 8005188:	4b3d      	ldr	r3, [pc, #244]	; (8005280 <app_main+0x190>)
 800518a:	9302      	str	r3, [sp, #8]
 800518c:	4b3d      	ldr	r3, [pc, #244]	; (8005284 <app_main+0x194>)
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	2303      	movs	r3, #3
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	2240      	movs	r2, #64	; 0x40
 8005198:	493b      	ldr	r1, [pc, #236]	; (8005288 <app_main+0x198>)
 800519a:	483c      	ldr	r0, [pc, #240]	; (800528c <app_main+0x19c>)
 800519c:	f00c fb8d 	bl	80118ba <xTaskCreateStatic>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d103      	bne.n	80051ae <app_main+0xbe>
 80051a6:	2149      	movs	r1, #73	; 0x49
 80051a8:	4834      	ldr	r0, [pc, #208]	; (800527c <app_main+0x18c>)
 80051aa:	f007 fb60 	bl	800c86e <assert2>
    ASSERT(xTaskCreateStatic(t2_trig_check, "T2", EM_STACK_T2, NULL, EM_PRI_T2, stack_t2, &buff_t2) != NULL);
 80051ae:	4b38      	ldr	r3, [pc, #224]	; (8005290 <app_main+0x1a0>)
 80051b0:	9302      	str	r3, [sp, #8]
 80051b2:	4b38      	ldr	r3, [pc, #224]	; (8005294 <app_main+0x1a4>)
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	2301      	movs	r3, #1
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	2300      	movs	r3, #0
 80051bc:	2240      	movs	r2, #64	; 0x40
 80051be:	4936      	ldr	r1, [pc, #216]	; (8005298 <app_main+0x1a8>)
 80051c0:	4836      	ldr	r0, [pc, #216]	; (800529c <app_main+0x1ac>)
 80051c2:	f00c fb7a 	bl	80118ba <xTaskCreateStatic>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d103      	bne.n	80051d4 <app_main+0xe4>
 80051cc:	214a      	movs	r1, #74	; 0x4a
 80051ce:	482b      	ldr	r0, [pc, #172]	; (800527c <app_main+0x18c>)
 80051d0:	f007 fb4d 	bl	800c86e <assert2>
    ASSERT(xTaskCreateStatic(t3_trig_post_count, "T3", EM_STACK_T3, NULL, EM_PRI_T3, stack_t3, &buff_t3) != NULL);
 80051d4:	4b32      	ldr	r3, [pc, #200]	; (80052a0 <app_main+0x1b0>)
 80051d6:	9302      	str	r3, [sp, #8]
 80051d8:	4b32      	ldr	r3, [pc, #200]	; (80052a4 <app_main+0x1b4>)
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	2305      	movs	r3, #5
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	2300      	movs	r3, #0
 80051e2:	2240      	movs	r2, #64	; 0x40
 80051e4:	4930      	ldr	r1, [pc, #192]	; (80052a8 <app_main+0x1b8>)
 80051e6:	4831      	ldr	r0, [pc, #196]	; (80052ac <app_main+0x1bc>)
 80051e8:	f00c fb67 	bl	80118ba <xTaskCreateStatic>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <app_main+0x10a>
 80051f2:	214b      	movs	r1, #75	; 0x4b
 80051f4:	4821      	ldr	r0, [pc, #132]	; (800527c <app_main+0x18c>)
 80051f6:	f007 fb3a 	bl	800c86e <assert2>
    ASSERT(xTaskCreateStatic(t4_comm_and_init, "T4", EM_STACK_T4, NULL, EM_PRI_T4, stack_t4, &buff_t4) != NULL);
 80051fa:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <app_main+0x1c0>)
 80051fc:	9302      	str	r3, [sp, #8]
 80051fe:	4b2d      	ldr	r3, [pc, #180]	; (80052b4 <app_main+0x1c4>)
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	2302      	movs	r3, #2
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	2300      	movs	r3, #0
 8005208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800520c:	492a      	ldr	r1, [pc, #168]	; (80052b8 <app_main+0x1c8>)
 800520e:	482b      	ldr	r0, [pc, #172]	; (80052bc <app_main+0x1cc>)
 8005210:	f00c fb53 	bl	80118ba <xTaskCreateStatic>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d103      	bne.n	8005222 <app_main+0x132>
 800521a:	214c      	movs	r1, #76	; 0x4c
 800521c:	4817      	ldr	r0, [pc, #92]	; (800527c <app_main+0x18c>)
 800521e:	f007 fb26 	bl	800c86e <assert2>
    ASSERT(xTaskCreateStatic(t5_cntr, "T5", EM_STACK_T5, NULL, EM_PRI_T5, stack_t5, &buff_t5) != NULL);
 8005222:	4b27      	ldr	r3, [pc, #156]	; (80052c0 <app_main+0x1d0>)
 8005224:	9302      	str	r3, [sp, #8]
 8005226:	4b27      	ldr	r3, [pc, #156]	; (80052c4 <app_main+0x1d4>)
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	2304      	movs	r3, #4
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	2300      	movs	r3, #0
 8005230:	2240      	movs	r2, #64	; 0x40
 8005232:	4925      	ldr	r1, [pc, #148]	; (80052c8 <app_main+0x1d8>)
 8005234:	4825      	ldr	r0, [pc, #148]	; (80052cc <app_main+0x1dc>)
 8005236:	f00c fb40 	bl	80118ba <xTaskCreateStatic>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d103      	bne.n	8005248 <app_main+0x158>
 8005240:	214d      	movs	r1, #77	; 0x4d
 8005242:	480e      	ldr	r0, [pc, #56]	; (800527c <app_main+0x18c>)
 8005244:	f007 fb13 	bl	800c86e <assert2>
  __ASM volatile ("cpsie i" : : : "memory");
 8005248:	b662      	cpsie	i

    __enable_irq();

    vTaskStartScheduler();
 800524a:	f00c fcc9 	bl	8011be0 <vTaskStartScheduler>

    ASSERT(0);
 800524e:	2153      	movs	r1, #83	; 0x53
 8005250:	480a      	ldr	r0, [pc, #40]	; (800527c <app_main+0x18c>)
 8005252:	f007 fb0c 	bl	800c86e <assert2>
}
 8005256:	bf00      	nop
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000508 	.word	0x20000508
 8005260:	2000d7e0 	.word	0x2000d7e0
 8005264:	2000d7e4 	.word	0x2000d7e4
 8005268:	2000d82c 	.word	0x2000d82c
 800526c:	2000ce18 	.word	0x2000ce18
 8005270:	20000504 	.word	0x20000504
 8005274:	2000e278 	.word	0x2000e278
 8005278:	2000ce60 	.word	0x2000ce60
 800527c:	08015648 	.word	0x08015648
 8005280:	200008ec 	.word	0x200008ec
 8005284:	2000e178 	.word	0x2000e178
 8005288:	08015670 	.word	0x08015670
 800528c:	080052d1 	.word	0x080052d1
 8005290:	2000e130 	.word	0x2000e130
 8005294:	20000550 	.word	0x20000550
 8005298:	08015674 	.word	0x08015674
 800529c:	08005315 	.word	0x08005315
 80052a0:	2000d74c 	.word	0x2000d74c
 80052a4:	2000ce64 	.word	0x2000ce64
 80052a8:	08015678 	.word	0x08015678
 80052ac:	08005385 	.word	0x08005385
 80052b0:	2000d798 	.word	0x2000d798
 80052b4:	2000d930 	.word	0x2000d930
 80052b8:	0801567c 	.word	0x0801567c
 80052bc:	08005411 	.word	0x08005411
 80052c0:	200004bc 	.word	0x200004bc
 80052c4:	20000650 	.word	0x20000650
 80052c8:	08015680 	.word	0x08015680
 80052cc:	08005545 	.word	0x08005545

080052d0 <t1_wd>:

void t1_wd(void* p)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
    while (!init_done)
 80052d8:	e002      	b.n	80052e0 <t1_wd+0x10>
        vTaskDelay(2);
 80052da:	2002      	movs	r0, #2
 80052dc:	f00c fc32 	bl	8011b44 <vTaskDelay>
    while (!init_done)
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <t1_wd+0x38>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f7      	beq.n	80052da <t1_wd+0xa>

    while(1)
    {
        iwdg_feed();
 80052ea:	f7ff fef3 	bl	80050d4 <iwdg_feed>
        led_blink_do(&led, daq.uwTick);
 80052ee:	4b07      	ldr	r3, [pc, #28]	; (800530c <t1_wd+0x3c>)
 80052f0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80052f4:	3330      	adds	r3, #48	; 0x30
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4619      	mov	r1, r3
 80052fa:	4805      	ldr	r0, [pc, #20]	; (8005310 <t1_wd+0x40>)
 80052fc:	f004 faa7 	bl	800984e <led_blink_do>

        vTaskDelay(10);
 8005300:	200a      	movs	r0, #10
 8005302:	f00c fc1f 	bl	8011b44 <vTaskDelay>
        iwdg_feed();
 8005306:	e7f0      	b.n	80052ea <t1_wd+0x1a>
 8005308:	20000218 	.word	0x20000218
 800530c:	20000934 	.word	0x20000934
 8005310:	2000ce08 	.word	0x2000ce08

08005314 <t2_trig_check>:
    }
}

void t2_trig_check(void* p)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
    while (!init_done)
 800531c:	e002      	b.n	8005324 <t2_trig_check+0x10>
        vTaskDelay(2);
 800531e:	2002      	movs	r0, #2
 8005320:	f00c fc10 	bl	8011b44 <vTaskDelay>
    while (!init_done)
 8005324:	4b13      	ldr	r3, [pc, #76]	; (8005374 <t2_trig_check+0x60>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f7      	beq.n	800531e <t2_trig_check+0xa>

    while(1)
    {
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 800532e:	4b12      	ldr	r3, [pc, #72]	; (8005378 <t2_trig_check+0x64>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f04f 31ff 	mov.w	r1, #4294967295
 8005336:	4618      	mov	r0, r3
 8005338:	f00c f8ae 	bl	8011498 <xQueueSemaphoreTake>
 800533c:	4603      	mov	r3, r0
 800533e:	2b01      	cmp	r3, #1
 8005340:	d003      	beq.n	800534a <t2_trig_check+0x36>
 8005342:	216b      	movs	r1, #107	; 0x6b
 8005344:	480d      	ldr	r0, [pc, #52]	; (800537c <t2_trig_check+0x68>)
 8005346:	f007 fa92 	bl	800c86e <assert2>

        daq_trig_check(&daq);
 800534a:	480d      	ldr	r0, [pc, #52]	; (8005380 <t2_trig_check+0x6c>)
 800534c:	f003 f8d8 	bl	8008500 <daq_trig_check>

        ASSERT(xSemaphoreGive(mtx1) == pdPASS);
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <t2_trig_check+0x64>)
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	2200      	movs	r2, #0
 8005358:	2100      	movs	r1, #0
 800535a:	f00b ff19 	bl	8011190 <xQueueGenericSend>
 800535e:	4603      	mov	r3, r0
 8005360:	2b01      	cmp	r3, #1
 8005362:	d003      	beq.n	800536c <t2_trig_check+0x58>
 8005364:	216f      	movs	r1, #111	; 0x6f
 8005366:	4805      	ldr	r0, [pc, #20]	; (800537c <t2_trig_check+0x68>)
 8005368:	f007 fa81 	bl	800c86e <assert2>

        vTaskDelay(5);
 800536c:	2005      	movs	r0, #5
 800536e:	f00c fbe9 	bl	8011b44 <vTaskDelay>
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 8005372:	e7dc      	b.n	800532e <t2_trig_check+0x1a>
 8005374:	20000218 	.word	0x20000218
 8005378:	2000ce60 	.word	0x2000ce60
 800537c:	08015648 	.word	0x08015648
 8005380:	20000934 	.word	0x20000934

08005384 <t3_trig_post_count>:
    }
}

void t3_trig_post_count(void* p)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
    while (!init_done)
 800538c:	e002      	b.n	8005394 <t3_trig_post_count+0x10>
        vTaskDelay(2);
 800538e:	2002      	movs	r0, #2
 8005390:	f00c fbd8 	bl	8011b44 <vTaskDelay>
    while (!init_done)
 8005394:	4b19      	ldr	r3, [pc, #100]	; (80053fc <t3_trig_post_count+0x78>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f7      	beq.n	800538e <t3_trig_post_count+0xa>

    while(1)
    {
        ASSERT(xSemaphoreTake(sem2_trig, portMAX_DELAY) == pdPASS);
 800539e:	4b18      	ldr	r3, [pc, #96]	; (8005400 <t3_trig_post_count+0x7c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f04f 31ff 	mov.w	r1, #4294967295
 80053a6:	4618      	mov	r0, r3
 80053a8:	f00c f876 	bl	8011498 <xQueueSemaphoreTake>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d003      	beq.n	80053ba <t3_trig_post_count+0x36>
 80053b2:	217c      	movs	r1, #124	; 0x7c
 80053b4:	4813      	ldr	r0, [pc, #76]	; (8005404 <t3_trig_post_count+0x80>)
 80053b6:	f007 fa5a 	bl	800c86e <assert2>
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 80053ba:	4b13      	ldr	r3, [pc, #76]	; (8005408 <t3_trig_post_count+0x84>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f04f 31ff 	mov.w	r1, #4294967295
 80053c2:	4618      	mov	r0, r3
 80053c4:	f00c f868 	bl	8011498 <xQueueSemaphoreTake>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d003      	beq.n	80053d6 <t3_trig_post_count+0x52>
 80053ce:	217d      	movs	r1, #125	; 0x7d
 80053d0:	480c      	ldr	r0, [pc, #48]	; (8005404 <t3_trig_post_count+0x80>)
 80053d2:	f007 fa4c 	bl	800c86e <assert2>

        daq_trig_postcount(&daq);
 80053d6:	480d      	ldr	r0, [pc, #52]	; (800540c <t3_trig_post_count+0x88>)
 80053d8:	f003 fbae 	bl	8008b38 <daq_trig_postcount>

        ASSERT(xSemaphoreGive(mtx1) == pdPASS);
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <t3_trig_post_count+0x84>)
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	2300      	movs	r3, #0
 80053e2:	2200      	movs	r2, #0
 80053e4:	2100      	movs	r1, #0
 80053e6:	f00b fed3 	bl	8011190 <xQueueGenericSend>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d0d6      	beq.n	800539e <t3_trig_post_count+0x1a>
 80053f0:	2181      	movs	r1, #129	; 0x81
 80053f2:	4804      	ldr	r0, [pc, #16]	; (8005404 <t3_trig_post_count+0x80>)
 80053f4:	f007 fa3b 	bl	800c86e <assert2>
        ASSERT(xSemaphoreTake(sem2_trig, portMAX_DELAY) == pdPASS);
 80053f8:	e7d1      	b.n	800539e <t3_trig_post_count+0x1a>
 80053fa:	bf00      	nop
 80053fc:	20000218 	.word	0x20000218
 8005400:	2000d82c 	.word	0x2000d82c
 8005404:	08015648 	.word	0x08015648
 8005408:	2000ce60 	.word	0x2000ce60
 800540c:	20000934 	.word	0x20000934

08005410 <t4_comm_and_init>:
    }
}

void t4_comm_and_init(void* p)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af04      	add	r7, sp, #16
 8005416:	6078      	str	r0, [r7, #4]
    pwm_init(&pwm);
 8005418:	483e      	ldr	r0, [pc, #248]	; (8005514 <t4_comm_and_init+0x104>)
 800541a:	f006 fb3d 	bl	800ba98 <pwm_init>
    led_init(&led);
 800541e:	483e      	ldr	r0, [pc, #248]	; (8005518 <t4_comm_and_init+0x108>)
 8005420:	f004 f998 	bl	8009754 <led_init>
    cntr_init(&cntr);
 8005424:	483d      	ldr	r0, [pc, #244]	; (800551c <t4_comm_and_init+0x10c>)
 8005426:	f000 fa2f 	bl	8005888 <cntr_init>
    comm_init(&comm);
 800542a:	483d      	ldr	r0, [pc, #244]	; (8005520 <t4_comm_and_init+0x110>)
 800542c:	f000 fe0e 	bl	800604c <comm_init>
    daq_init(&daq);
 8005430:	483c      	ldr	r0, [pc, #240]	; (8005524 <t4_comm_and_init+0x114>)
 8005432:	f001 f8fb 	bl	800662c <daq_init>
    daq_mode_set(&daq, VM);
 8005436:	2101      	movs	r1, #1
 8005438:	483a      	ldr	r0, [pc, #232]	; (8005524 <t4_comm_and_init+0x114>)
 800543a:	f002 f929 	bl	8007690 <daq_mode_set>
    led_blink_set(&led, 3, EM_BLINK_LONG_MS, daq.uwTick);
 800543e:	4b39      	ldr	r3, [pc, #228]	; (8005524 <t4_comm_and_init+0x114>)
 8005440:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8005444:	3330      	adds	r3, #48	; 0x30
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800544c:	2103      	movs	r1, #3
 800544e:	4832      	ldr	r0, [pc, #200]	; (8005518 <t4_comm_and_init+0x108>)
 8005450:	f004 f9e3 	bl	800981a <led_blink_set>

#ifdef EM_DAC
    sgen_init(&sgen);
 8005454:	4834      	ldr	r0, [pc, #208]	; (8005528 <t4_comm_and_init+0x118>)
 8005456:	f006 fced 	bl	800be34 <sgen_init>
#endif

#ifdef EM_DEBUG
    pwm_set(&pwm, 1000, 25, 25, 50, 1, 1);
 800545a:	2301      	movs	r3, #1
 800545c:	9302      	str	r3, [sp, #8]
 800545e:	2301      	movs	r3, #1
 8005460:	9301      	str	r3, [sp, #4]
 8005462:	2332      	movs	r3, #50	; 0x32
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	2319      	movs	r3, #25
 8005468:	2219      	movs	r2, #25
 800546a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800546e:	4829      	ldr	r0, [pc, #164]	; (8005514 <t4_comm_and_init+0x104>)
 8005470:	f006 fb32 	bl	800bad8 <pwm_set>
    //LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_256);
    //LL_IWDG_SetReloadCounter(IWDG, 0x0FFF);
#ifdef EM_DAC
    sgen_enable(&sgen, SINE, 100, 1000, EM_DAC_BUFF_LEN);
 8005474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005478:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800552c <t4_comm_and_init+0x11c>
 800547c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8005530 <t4_comm_and_init+0x120>
 8005480:	2101      	movs	r1, #1
 8005482:	4829      	ldr	r0, [pc, #164]	; (8005528 <t4_comm_and_init+0x118>)
 8005484:	f006 fcf4 	bl	800be70 <sgen_enable>
#endif
#endif

    while (EM_VM_ReadQ(NULL) == SCPI_RES_ERR); // read vcc
 8005488:	bf00      	nop
 800548a:	2000      	movs	r0, #0
 800548c:	f004 fec0 	bl	800a210 <EM_VM_ReadQ>
 8005490:	4603      	mov	r3, r0
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	d0f8      	beq.n	800548a <t4_comm_and_init+0x7a>
    init_done = 1;
 8005498:	4b26      	ldr	r3, [pc, #152]	; (8005534 <t4_comm_and_init+0x124>)
 800549a:	2201      	movs	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]

    while(1)
    {
        ASSERT(xSemaphoreTake(sem1_comm, portMAX_DELAY) == pdPASS);
 800549e:	4b26      	ldr	r3, [pc, #152]	; (8005538 <t4_comm_and_init+0x128>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f04f 31ff 	mov.w	r1, #4294967295
 80054a6:	4618      	mov	r0, r3
 80054a8:	f00b fff6 	bl	8011498 <xQueueSemaphoreTake>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d003      	beq.n	80054ba <t4_comm_and_init+0xaa>
 80054b2:	21a1      	movs	r1, #161	; 0xa1
 80054b4:	4821      	ldr	r0, [pc, #132]	; (800553c <t4_comm_and_init+0x12c>)
 80054b6:	f007 f9da 	bl	800c86e <assert2>
        ASSERT(xSemaphoreTake(mtx1, portMAX_DELAY) == pdPASS);
 80054ba:	4b21      	ldr	r3, [pc, #132]	; (8005540 <t4_comm_and_init+0x130>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f04f 31ff 	mov.w	r1, #4294967295
 80054c2:	4618      	mov	r0, r3
 80054c4:	f00b ffe8 	bl	8011498 <xQueueSemaphoreTake>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d003      	beq.n	80054d6 <t4_comm_and_init+0xc6>
 80054ce:	21a2      	movs	r1, #162	; 0xa2
 80054d0:	481a      	ldr	r0, [pc, #104]	; (800553c <t4_comm_and_init+0x12c>)
 80054d2:	f007 f9cc 	bl	800c86e <assert2>

        //iwdg_feed();
        if (comm_main(&comm))
 80054d6:	4812      	ldr	r0, [pc, #72]	; (8005520 <t4_comm_and_init+0x110>)
 80054d8:	f000 fe24 	bl	8006124 <comm_main>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <t4_comm_and_init+0xe6>
            led_blink_set(&led, 1, EM_BLINK_SHORT_MS, daq.uwTick);
 80054e2:	4b10      	ldr	r3, [pc, #64]	; (8005524 <t4_comm_and_init+0x114>)
 80054e4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80054e8:	3330      	adds	r3, #48	; 0x30
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2232      	movs	r2, #50	; 0x32
 80054ee:	2101      	movs	r1, #1
 80054f0:	4809      	ldr	r0, [pc, #36]	; (8005518 <t4_comm_and_init+0x108>)
 80054f2:	f004 f992 	bl	800981a <led_blink_set>

        ASSERT(xSemaphoreGive(mtx1) == pdPASS);
 80054f6:	4b12      	ldr	r3, [pc, #72]	; (8005540 <t4_comm_and_init+0x130>)
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	2300      	movs	r3, #0
 80054fc:	2200      	movs	r2, #0
 80054fe:	2100      	movs	r1, #0
 8005500:	f00b fe46 	bl	8011190 <xQueueGenericSend>
 8005504:	4603      	mov	r3, r0
 8005506:	2b01      	cmp	r3, #1
 8005508:	d0c9      	beq.n	800549e <t4_comm_and_init+0x8e>
 800550a:	21a8      	movs	r1, #168	; 0xa8
 800550c:	480b      	ldr	r0, [pc, #44]	; (800553c <t4_comm_and_init+0x12c>)
 800550e:	f007 f9ae 	bl	800c86e <assert2>
        ASSERT(xSemaphoreTake(sem1_comm, portMAX_DELAY) == pdPASS);
 8005512:	e7c4      	b.n	800549e <t4_comm_and_init+0x8e>
 8005514:	2000d830 	.word	0x2000d830
 8005518:	2000ce08 	.word	0x2000ce08
 800551c:	20000750 	.word	0x20000750
 8005520:	2000d860 	.word	0x2000d860
 8005524:	20000934 	.word	0x20000934
 8005528:	2000cf64 	.word	0x2000cf64
 800552c:	447a0000 	.word	0x447a0000
 8005530:	42c80000 	.word	0x42c80000
 8005534:	20000218 	.word	0x20000218
 8005538:	2000d7e0 	.word	0x2000d7e0
 800553c:	08015648 	.word	0x08015648
 8005540:	2000ce60 	.word	0x2000ce60

08005544 <t5_cntr>:
    }
}

void t5_cntr(void* p)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
    while (!init_done)
 800554c:	e002      	b.n	8005554 <t5_cntr+0x10>
        vTaskDelay(2);
 800554e:	2002      	movs	r0, #2
 8005550:	f00c faf8 	bl	8011b44 <vTaskDelay>
    while (!init_done)
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <t5_cntr+0x50>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f7      	beq.n	800554e <t5_cntr+0xa>

    while(1)
    {
        ASSERT(xSemaphoreTake(sem3_cntr, portMAX_DELAY) == pdPASS);
 800555e:	4b0e      	ldr	r3, [pc, #56]	; (8005598 <t5_cntr+0x54>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f04f 31ff 	mov.w	r1, #4294967295
 8005566:	4618      	mov	r0, r3
 8005568:	f00b ff96 	bl	8011498 <xQueueSemaphoreTake>
 800556c:	4603      	mov	r3, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	d00a      	beq.n	8005588 <t5_cntr+0x44>
 8005572:	21b3      	movs	r1, #179	; 0xb3
 8005574:	4809      	ldr	r0, [pc, #36]	; (800559c <t5_cntr+0x58>)
 8005576:	f007 f97a 	bl	800c86e <assert2>

        while (cntr.enabled)
 800557a:	e005      	b.n	8005588 <t5_cntr+0x44>
        {
            cntr_meas(&cntr);
 800557c:	4808      	ldr	r0, [pc, #32]	; (80055a0 <t5_cntr+0x5c>)
 800557e:	f000 fa63 	bl	8005a48 <cntr_meas>
            vTaskDelay(50);
 8005582:	2032      	movs	r0, #50	; 0x32
 8005584:	f00c fade 	bl	8011b44 <vTaskDelay>
        while (cntr.enabled)
 8005588:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <t5_cntr+0x5c>)
 800558a:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f4      	bne.n	800557c <t5_cntr+0x38>
        ASSERT(xSemaphoreTake(sem3_cntr, portMAX_DELAY) == pdPASS);
 8005592:	e7e4      	b.n	800555e <t5_cntr+0x1a>
 8005594:	20000218 	.word	0x20000218
 8005598:	20000504 	.word	0x20000504
 800559c:	08015648 	.word	0x08015648
 80055a0:	20000750 	.word	0x20000750

080055a4 <__NVIC_GetPriorityGrouping>:
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <__NVIC_GetPriorityGrouping+0x18>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	f003 0307 	and.w	r3, r3, #7
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <__NVIC_EnableIRQ>:
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	db0b      	blt.n	80055ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	f003 021f 	and.w	r2, r3, #31
 80055d8:	4907      	ldr	r1, [pc, #28]	; (80055f8 <__NVIC_EnableIRQ+0x38>)
 80055da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	2001      	movs	r0, #1
 80055e2:	fa00 f202 	lsl.w	r2, r0, r2
 80055e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	e000e100 	.word	0xe000e100

080055fc <__NVIC_DisableIRQ>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560a:	2b00      	cmp	r3, #0
 800560c:	db10      	blt.n	8005630 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	f003 021f 	and.w	r2, r3, #31
 8005614:	4909      	ldr	r1, [pc, #36]	; (800563c <__NVIC_DisableIRQ+0x40>)
 8005616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	2001      	movs	r0, #1
 800561e:	fa00 f202 	lsl.w	r2, r0, r2
 8005622:	3320      	adds	r3, #32
 8005624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005628:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800562c:	f3bf 8f6f 	isb	sy
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	e000e100 	.word	0xe000e100

08005640 <__NVIC_SetPriority>:
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	6039      	str	r1, [r7, #0]
 800564a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800564c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005650:	2b00      	cmp	r3, #0
 8005652:	db0a      	blt.n	800566a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	b2da      	uxtb	r2, r3
 8005658:	490c      	ldr	r1, [pc, #48]	; (800568c <__NVIC_SetPriority+0x4c>)
 800565a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565e:	0112      	lsls	r2, r2, #4
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	440b      	add	r3, r1
 8005664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005668:	e00a      	b.n	8005680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	4908      	ldr	r1, [pc, #32]	; (8005690 <__NVIC_SetPriority+0x50>)
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	3b04      	subs	r3, #4
 8005678:	0112      	lsls	r2, r2, #4
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	440b      	add	r3, r1
 800567e:	761a      	strb	r2, [r3, #24]
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	e000e100 	.word	0xe000e100
 8005690:	e000ed00 	.word	0xe000ed00

08005694 <NVIC_EncodePriority>:
{
 8005694:	b480      	push	{r7}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f1c3 0307 	rsb	r3, r3, #7
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	bf28      	it	cs
 80056b2:	2304      	movcs	r3, #4
 80056b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	3304      	adds	r3, #4
 80056ba:	2b06      	cmp	r3, #6
 80056bc:	d902      	bls.n	80056c4 <NVIC_EncodePriority+0x30>
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3b03      	subs	r3, #3
 80056c2:	e000      	b.n	80056c6 <NVIC_EncodePriority+0x32>
 80056c4:	2300      	movs	r3, #0
 80056c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056c8:	f04f 32ff 	mov.w	r2, #4294967295
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43da      	mvns	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	401a      	ands	r2, r3
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056dc:	f04f 31ff 	mov.w	r1, #4294967295
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	fa01 f303 	lsl.w	r3, r1, r3
 80056e6:	43d9      	mvns	r1, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056ec:	4313      	orrs	r3, r2
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3724      	adds	r7, #36	; 0x24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	3b01      	subs	r3, #1
 800570a:	4a06      	ldr	r2, [pc, #24]	; (8005724 <LL_DMA_GetDataLength+0x28>)
 800570c:	5cd3      	ldrb	r3, [r2, r3]
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4413      	add	r3, r2
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	08015f00 	.word	0x08015f00

08005728 <LL_TIM_EnableCounter>:
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f043 0201 	orr.w	r2, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	601a      	str	r2, [r3, #0]
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <LL_TIM_DisableCounter>:
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f023 0201 	bic.w	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	601a      	str	r2, [r3, #0]
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <LL_TIM_SetCounter>:
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <LL_TIM_CC_EnableChannel>:
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1a      	ldr	r2, [r3, #32]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <LL_TIM_CC_DisableChannel>:
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1a      	ldr	r2, [r3, #32]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	43db      	mvns	r3, r3
 80057b8:	401a      	ands	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <LL_TIM_OC_SetCompareCH1>:
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <LL_TIM_EnableIT_UPDATE>:
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f043 0201 	orr.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60da      	str	r2, [r3, #12]
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <LL_TIM_EnableDMAReq_CC3>:
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC3DE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <LL_TIM_DisableDMAReq_CC3>:
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC3DE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60da      	str	r2, [r3, #12]
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <LL_TIM_EnableDMAReq_CC4>:
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60da      	str	r2, [r3, #12]
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <LL_TIM_DisableDMAReq_CC4>:
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60da      	str	r2, [r3, #12]
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
	...

08005888 <cntr_init>:

static void cntr_reset(cntr_data_t* self);


void cntr_init(cntr_data_t* self)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
    self->freq = -1;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a07      	ldr	r2, [pc, #28]	; (80058b0 <cntr_init+0x28>)
 8005894:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    self->enabled = 0;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
    cntr_reset(self);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f807 	bl	80058b4 <cntr_reset>
}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	bf800000 	.word	0xbf800000

080058b4 <cntr_reset>:

static void cntr_reset(cntr_data_t* self)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af04      	add	r7, sp, #16
 80058ba:	6078      	str	r0, [r7, #4]
    self->ovf = 0;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
    memset(self->data_ccr, 0, EM_CNTR_BUFF_SZ * sizeof(uint16_t));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	22c8      	movs	r2, #200	; 0xc8
 80058c8:	2100      	movs	r1, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f00c ffe6 	bl	801289c <memset>
    memset(self->data_ovf, 0, EM_CNTR_BUFF_SZ * sizeof(uint16_t));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	33c8      	adds	r3, #200	; 0xc8
 80058d4:	22c8      	movs	r2, #200	; 0xc8
 80058d6:	2100      	movs	r1, #0
 80058d8:	4618      	mov	r0, r3
 80058da:	f00c ffdf 	bl	801289c <memset>

    dma_set((uint32_t)&EM_TIM_CNTR->EM_TIM_CNTR_CCR, EM_DMA_CNTR, EM_DMA_CH_CNTR, (uint32_t)&self->data_ccr, EM_CNTR_BUFF_SZ,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	461a      	mov	r2, r3
 80058e2:	2300      	movs	r3, #0
 80058e4:	9303      	str	r3, [sp, #12]
 80058e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058ea:	9302      	str	r3, [sp, #8]
 80058ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	2364      	movs	r3, #100	; 0x64
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	4613      	mov	r3, r2
 80058f8:	2202      	movs	r2, #2
 80058fa:	4919      	ldr	r1, [pc, #100]	; (8005960 <cntr_reset+0xac>)
 80058fc:	4819      	ldr	r0, [pc, #100]	; (8005964 <cntr_reset+0xb0>)
 80058fe:	f004 f9f1 	bl	8009ce4 <dma_set>
            LL_DMA_PDATAALIGN_HALFWORD, LL_DMA_MDATAALIGN_HALFWORD, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

    dma_set((uint32_t)&EM_TIM_CNTR->EM_TIM_CNTR_CCR2, EM_DMA_CNTR2, EM_DMA_CH_CNTR2, (uint32_t)&self->data_ovf, EM_CNTR_BUFF_SZ,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	33c8      	adds	r3, #200	; 0xc8
 8005906:	461a      	mov	r2, r3
 8005908:	2300      	movs	r3, #0
 800590a:	9303      	str	r3, [sp, #12]
 800590c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005910:	9302      	str	r3, [sp, #8]
 8005912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	2364      	movs	r3, #100	; 0x64
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	2203      	movs	r2, #3
 8005920:	490f      	ldr	r1, [pc, #60]	; (8005960 <cntr_reset+0xac>)
 8005922:	4811      	ldr	r0, [pc, #68]	; (8005968 <cntr_reset+0xb4>)
 8005924:	f004 f9de 	bl	8009ce4 <dma_set>
            LL_DMA_PDATAALIGN_HALFWORD, LL_DMA_MDATAALIGN_HALFWORD, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

    NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8005928:	f7ff fe3c 	bl	80055a4 <__NVIC_GetPriorityGrouping>
 800592c:	4603      	mov	r3, r0
 800592e:	2200      	movs	r2, #0
 8005930:	2101      	movs	r1, #1
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff feae 	bl	8005694 <NVIC_EncodePriority>
 8005938:	4603      	mov	r3, r0
 800593a:	4619      	mov	r1, r3
 800593c:	2019      	movs	r0, #25
 800593e:	f7ff fe7f 	bl	8005640 <__NVIC_SetPriority>
    LL_TIM_EnableIT_UPDATE(EM_TIM_CNTR);
 8005942:	480a      	ldr	r0, [pc, #40]	; (800596c <cntr_reset+0xb8>)
 8005944:	f7ff ff4f 	bl	80057e6 <LL_TIM_EnableIT_UPDATE>
    EM_TIM_CNTR_OVF(LL_TIM_OC_SetCompare)(EM_TIM_CNTR, 0);
 8005948:	2100      	movs	r1, #0
 800594a:	4808      	ldr	r0, [pc, #32]	; (800596c <cntr_reset+0xb8>)
 800594c:	f7ff ff3d 	bl	80057ca <LL_TIM_OC_SetCompareCH1>
    LL_TIM_SetCounter(EM_TIM_CNTR, 0);
 8005950:	2100      	movs	r1, #0
 8005952:	4806      	ldr	r0, [pc, #24]	; (800596c <cntr_reset+0xb8>)
 8005954:	f7ff ff08 	bl	8005768 <LL_TIM_SetCounter>
}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	40020400 	.word	0x40020400
 8005964:	40013440 	.word	0x40013440
 8005968:	40013434 	.word	0x40013434
 800596c:	40013400 	.word	0x40013400

08005970 <cntr_enable>:

void cntr_enable(cntr_data_t* self, uint8_t enable)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
    uint8_t en = self->enabled;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8005982:	73fb      	strb	r3, [r7, #15]
    self->enabled = enable;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	78fa      	ldrb	r2, [r7, #3]
 8005988:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

    if (enable && !en)
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d010      	beq.n	80059b4 <cntr_enable+0x44>
 8005992:	7bfb      	ldrb	r3, [r7, #15]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10d      	bne.n	80059b4 <cntr_enable+0x44>
        ASSERT(xSemaphoreGive(sem3_cntr) == pdPASS);
 8005998:	4b08      	ldr	r3, [pc, #32]	; (80059bc <cntr_enable+0x4c>)
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	2300      	movs	r3, #0
 800599e:	2200      	movs	r2, #0
 80059a0:	2100      	movs	r1, #0
 80059a2:	f00b fbf5 	bl	8011190 <xQueueGenericSend>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d003      	beq.n	80059b4 <cntr_enable+0x44>
 80059ac:	2134      	movs	r1, #52	; 0x34
 80059ae:	4804      	ldr	r0, [pc, #16]	; (80059c0 <cntr_enable+0x50>)
 80059b0:	f006 ff5d 	bl	800c86e <assert2>
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20000504 	.word	0x20000504
 80059c0:	08015684 	.word	0x08015684

080059c4 <cntr_start>:

void cntr_start(cntr_data_t* self, uint8_t start)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	70fb      	strb	r3, [r7, #3]
    if (start)
 80059d0:	78fb      	ldrb	r3, [r7, #3]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d019      	beq.n	8005a0a <cntr_start+0x46>
    {
        cntr_reset(self);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7ff ff6c 	bl	80058b4 <cntr_reset>

        EM_TIM_CNTR_CC(LL_TIM_EnableDMAReq_)(EM_TIM_CNTR);
 80059dc:	4818      	ldr	r0, [pc, #96]	; (8005a40 <cntr_start+0x7c>)
 80059de:	f7ff ff32 	bl	8005846 <LL_TIM_EnableDMAReq_CC4>
        EM_TIM_CNTR_CC2(LL_TIM_EnableDMAReq_)(EM_TIM_CNTR);
 80059e2:	4817      	ldr	r0, [pc, #92]	; (8005a40 <cntr_start+0x7c>)
 80059e4:	f7ff ff0f 	bl	8005806 <LL_TIM_EnableDMAReq_CC3>
        NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80059e8:	2019      	movs	r0, #25
 80059ea:	f7ff fde9 	bl	80055c0 <__NVIC_EnableIRQ>
        LL_TIM_CC_EnableChannel(EM_TIM_CNTR, EM_TIM_CNTR_CH);
 80059ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059f2:	4813      	ldr	r0, [pc, #76]	; (8005a40 <cntr_start+0x7c>)
 80059f4:	f7ff fec6 	bl	8005784 <LL_TIM_CC_EnableChannel>
        LL_TIM_CC_EnableChannel(EM_TIM_CNTR, EM_TIM_CNTR_CH2);
 80059f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059fc:	4810      	ldr	r0, [pc, #64]	; (8005a40 <cntr_start+0x7c>)
 80059fe:	f7ff fec1 	bl	8005784 <LL_TIM_CC_EnableChannel>
        LL_TIM_EnableCounter(EM_TIM_CNTR);
 8005a02:	480f      	ldr	r0, [pc, #60]	; (8005a40 <cntr_start+0x7c>)
 8005a04:	f7ff fe90 	bl	8005728 <LL_TIM_EnableCounter>
        LL_TIM_CC_DisableChannel(EM_TIM_CNTR, EM_TIM_CNTR_CH2);
        NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
        EM_TIM_CNTR_CC(LL_TIM_DisableDMAReq_)(EM_TIM_CNTR);
        EM_TIM_CNTR_CC2(LL_TIM_DisableDMAReq_)(EM_TIM_CNTR);
    }
}
 8005a08:	e015      	b.n	8005a36 <cntr_start+0x72>
        LL_TIM_DisableCounter(EM_TIM_CNTR);
 8005a0a:	480d      	ldr	r0, [pc, #52]	; (8005a40 <cntr_start+0x7c>)
 8005a0c:	f7ff fe9c 	bl	8005748 <LL_TIM_DisableCounter>
        LL_TIM_CC_DisableChannel(EM_TIM_CNTR, EM_TIM_CNTR_CH);
 8005a10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a14:	480a      	ldr	r0, [pc, #40]	; (8005a40 <cntr_start+0x7c>)
 8005a16:	f7ff fec6 	bl	80057a6 <LL_TIM_CC_DisableChannel>
        LL_TIM_CC_DisableChannel(EM_TIM_CNTR, EM_TIM_CNTR_CH2);
 8005a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a1e:	4808      	ldr	r0, [pc, #32]	; (8005a40 <cntr_start+0x7c>)
 8005a20:	f7ff fec1 	bl	80057a6 <LL_TIM_CC_DisableChannel>
        NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 8005a24:	2019      	movs	r0, #25
 8005a26:	f7ff fde9 	bl	80055fc <__NVIC_DisableIRQ>
        EM_TIM_CNTR_CC(LL_TIM_DisableDMAReq_)(EM_TIM_CNTR);
 8005a2a:	4805      	ldr	r0, [pc, #20]	; (8005a40 <cntr_start+0x7c>)
 8005a2c:	f7ff ff1b 	bl	8005866 <LL_TIM_DisableDMAReq_CC4>
        EM_TIM_CNTR_CC2(LL_TIM_DisableDMAReq_)(EM_TIM_CNTR);
 8005a30:	4803      	ldr	r0, [pc, #12]	; (8005a40 <cntr_start+0x7c>)
 8005a32:	f7ff fef8 	bl	8005826 <LL_TIM_DisableDMAReq_CC3>
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40013400 	.word	0x40013400
 8005a44:	00000000 	.word	0x00000000

08005a48 <cntr_meas>:

void cntr_meas(cntr_data_t* self)
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b08b      	sub	sp, #44	; 0x2c
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
    int pre_timeout = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
    int cntr_timeout = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	623b      	str	r3, [r7, #32]
    uint32_t sz = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]

    cntr_start(self, 1); // start
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff ffb0 	bl	80059c4 <cntr_start>

    while (1)
    {
        sz = LL_DMA_GetDataLength(EM_DMA_CNTR, EM_DMA_CH_CNTR);
 8005a64:	2102      	movs	r1, #2
 8005a66:	485c      	ldr	r0, [pc, #368]	; (8005bd8 <cntr_meas+0x190>)
 8005a68:	f7ff fe48 	bl	80056fc <LL_DMA_GetDataLength>
 8005a6c:	6178      	str	r0, [r7, #20]

        if (pre_timeout > 1000)
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a74:	dd05      	ble.n	8005a82 <cntr_meas+0x3a>
        {
            vTaskDelay(EM_CNTR_INT_DELAY);
 8005a76:	200a      	movs	r0, #10
 8005a78:	f00c f864 	bl	8011b44 <vTaskDelay>
            cntr_timeout += EM_CNTR_INT_DELAY;
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	330a      	adds	r3, #10
 8005a80:	623b      	str	r3, [r7, #32]
        }

        pre_timeout++;
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	3301      	adds	r3, #1
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24

        if (cntr_timeout > EM_CNTR_MEAS_MS || sz == 0)
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005a8e:	dc03      	bgt.n	8005a98 <cntr_meas+0x50>
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d000      	beq.n	8005a98 <cntr_meas+0x50>
        sz = LL_DMA_GetDataLength(EM_DMA_CNTR, EM_DMA_CH_CNTR);
 8005a96:	e7e5      	b.n	8005a64 <cntr_meas+0x1c>
            break;
    }

    cntr_start(self, 0); // stop
 8005a98:	2100      	movs	r1, #0
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff ff92 	bl	80059c4 <cntr_start>

    sz = EM_CNTR_BUFF_SZ - sz;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005aa6:	617b      	str	r3, [r7, #20]

    if (sz >= 2)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	f240 8087 	bls.w	8005bbe <cntr_meas+0x176>
    {
        uint16_t ovf = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	83fb      	strh	r3, [r7, #30]
        uint32_t ccr_sum = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61bb      	str	r3, [r7, #24]

        ovf = self->data_ovf[sz - 1] - self->data_ovf[0];
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	1e5a      	subs	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3264      	adds	r2, #100	; 0x64
 8005ac0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	83fb      	strh	r3, [r7, #30]

        if (ovf > 0)
 8005ace:	8bfb      	ldrh	r3, [r7, #30]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d012      	beq.n	8005afa <cntr_meas+0xb2>
        {
            ccr_sum += (EM_TIM_CNTR_MAX - self->data_ccr[0]) + self->data_ccr[sz - 1];
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005adc:	33ff      	adds	r3, #255	; 0xff
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	1e51      	subs	r1, r2, #1
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005ae8:	4413      	add	r3, r2
 8005aea:	461a      	mov	r2, r3
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	4413      	add	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
            ovf -= 1;
 8005af2:	8bfb      	ldrh	r3, [r7, #30]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	83fb      	strh	r3, [r7, #30]
 8005af8:	e015      	b.n	8005b26 <cntr_meas+0xde>
        }
        else
        {
            if (self->data_ccr[sz - 1] > self->data_ccr[0])
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	1e5a      	subs	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d95d      	bls.n	8005bc8 <cntr_meas+0x180>
                ccr_sum += self->data_ccr[sz - 1] - self->data_ccr[0];
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	1e5a      	subs	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005b16:	461a      	mov	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	461a      	mov	r2, r3
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	4413      	add	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
            else
                return;
        }

        float total = (ovf * EM_TIM_CNTR_MAX) + ccr_sum;
 8005b26:	8bfa      	ldrh	r2, [r7, #30]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	461a      	mov	r2, r3
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	4413      	add	r3, r2
 8005b34:	ee07 3a90 	vmov	s15, r3
 8005b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3c:	edc7 7a04 	vstr	s15, [r7, #16]
        total /= (float)(sz - 1);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	ee07 3a90 	vmov	s15, r3
 8005b48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b4c:	edd7 6a04 	vldr	s13, [r7, #16]
 8005b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b54:	edc7 7a04 	vstr	s15, [r7, #16]
        float f = (float)EM_TIM_CNTR_FREQ / total;
 8005b58:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005bdc <cntr_meas+0x194>
 8005b5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b64:	edc7 7a03 	vstr	s15, [r7, #12]
        self->freq = f;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

        float diff = f - 1.6;
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7fa fd01 	bl	8000578 <__aeabi_f2d>
 8005b76:	a316      	add	r3, pc, #88	; (adr r3, 8005bd0 <cntr_meas+0x188>)
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f7fa fb9c 	bl	80002b8 <__aeabi_dsub>
 8005b80:	4603      	mov	r3, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	4618      	mov	r0, r3
 8005b86:	4621      	mov	r1, r4
 8005b88:	f7fb f846 	bl	8000c18 <__aeabi_d2f>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	60bb      	str	r3, [r7, #8]
        if (diff < 1 && diff > -1)
 8005b90:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba0:	d513      	bpl.n	8005bca <cntr_meas+0x182>
 8005ba2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ba6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb2:	dd0a      	ble.n	8005bca <cntr_meas+0x182>
            ASSERT(0);
 8005bb4:	2186      	movs	r1, #134	; 0x86
 8005bb6:	480a      	ldr	r0, [pc, #40]	; (8005be0 <cntr_meas+0x198>)
 8005bb8:	f006 fe59 	bl	800c86e <assert2>
 8005bbc:	e005      	b.n	8005bca <cntr_meas+0x182>
    }
    else
    {
        self->freq = -1; // timeout
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a08      	ldr	r2, [pc, #32]	; (8005be4 <cntr_meas+0x19c>)
 8005bc2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8005bc6:	e000      	b.n	8005bca <cntr_meas+0x182>
                return;
 8005bc8:	bf00      	nop
    }
}
 8005bca:	372c      	adds	r7, #44	; 0x2c
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd90      	pop	{r4, r7, pc}
 8005bd0:	9999999a 	.word	0x9999999a
 8005bd4:	3ff99999 	.word	0x3ff99999
 8005bd8:	40020400 	.word	0x40020400
 8005bdc:	4c895440 	.word	0x4c895440
 8005be0:	08015684 	.word	0x08015684
 8005be4:	bf800000 	.word	0xbf800000

08005be8 <LL_TIM_OC_SetCompareCH1>:
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <LL_TIM_ClearFlag_UPDATE>:
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f06f 0201 	mvn.w	r2, #1
 8005c12:	611a      	str	r2, [r3, #16]
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <TIM8_UP_IRQHandler>:
#include "app_data.h"
#include "main.h"


void EM_TIM_CNTR_UP_IRQh(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
    if(LL_TIM_IsActiveFlag_UPDATE(EM_TIM_CNTR) == 1)
 8005c4c:	480c      	ldr	r0, [pc, #48]	; (8005c80 <TIM8_UP_IRQHandler+0x38>)
 8005c4e:	f7ff ffe7 	bl	8005c20 <LL_TIM_IsActiveFlag_UPDATE>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d10e      	bne.n	8005c76 <TIM8_UP_IRQHandler+0x2e>
    {
        cntr.ovf++;
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <TIM8_UP_IRQHandler+0x3c>)
 8005c5a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8005c5e:	3301      	adds	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <TIM8_UP_IRQHandler+0x3c>)
 8005c64:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
        EM_TIM_CNTR_OVF(LL_TIM_OC_SetCompare)(EM_TIM_CNTR, cntr.ovf);
 8005c68:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <TIM8_UP_IRQHandler+0x3c>)
 8005c6a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4803      	ldr	r0, [pc, #12]	; (8005c80 <TIM8_UP_IRQHandler+0x38>)
 8005c72:	f7ff ffb9 	bl	8005be8 <LL_TIM_OC_SetCompareCH1>
    }
    LL_TIM_ClearFlag_UPDATE(EM_TIM_CNTR);
 8005c76:	4802      	ldr	r0, [pc, #8]	; (8005c80 <TIM8_UP_IRQHandler+0x38>)
 8005c78:	f7ff ffc4 	bl	8005c04 <LL_TIM_ClearFlag_UPDATE>
}
 8005c7c:	bf00      	nop
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40013400 	.word	0x40013400
 8005c84:	20000750 	.word	0x20000750

08005c88 <__NVIC_GetPriorityGrouping>:
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c8c:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	0a1b      	lsrs	r3, r3, #8
 8005c92:	f003 0307 	and.w	r3, r3, #7
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	e000ed00 	.word	0xe000ed00

08005ca4 <__NVIC_EnableIRQ>:
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	db0b      	blt.n	8005cce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	f003 021f 	and.w	r2, r3, #31
 8005cbc:	4907      	ldr	r1, [pc, #28]	; (8005cdc <__NVIC_EnableIRQ+0x38>)
 8005cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8005cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	e000e100 	.word	0xe000e100

08005ce0 <__NVIC_SetPriority>:
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	6039      	str	r1, [r7, #0]
 8005cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	db0a      	blt.n	8005d0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	490c      	ldr	r1, [pc, #48]	; (8005d2c <__NVIC_SetPriority+0x4c>)
 8005cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfe:	0112      	lsls	r2, r2, #4
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	440b      	add	r3, r1
 8005d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d08:	e00a      	b.n	8005d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4908      	ldr	r1, [pc, #32]	; (8005d30 <__NVIC_SetPriority+0x50>)
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	3b04      	subs	r3, #4
 8005d18:	0112      	lsls	r2, r2, #4
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	761a      	strb	r2, [r3, #24]
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	e000e100 	.word	0xe000e100
 8005d30:	e000ed00 	.word	0xe000ed00

08005d34 <NVIC_EncodePriority>:
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f1c3 0307 	rsb	r3, r3, #7
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	bf28      	it	cs
 8005d52:	2304      	movcs	r3, #4
 8005d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d902      	bls.n	8005d64 <NVIC_EncodePriority+0x30>
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	3b03      	subs	r3, #3
 8005d62:	e000      	b.n	8005d66 <NVIC_EncodePriority+0x32>
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d68:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43da      	mvns	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	401a      	ands	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	fa01 f303 	lsl.w	r3, r1, r3
 8005d86:	43d9      	mvns	r1, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d8c:	4313      	orrs	r3, r2
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3724      	adds	r7, #36	; 0x24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <LL_USART_IsActiveFlag_TXE>:
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005daa:	2b80      	cmp	r3, #128	; 0x80
 8005dac:	d101      	bne.n	8005db2 <LL_USART_IsActiveFlag_TXE+0x18>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <LL_USART_IsActiveFlag_TXE+0x1a>
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <LL_USART_EnableIT_RXNE>:
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	601a      	str	r2, [r3, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <SCPI_Write>:


/************************* SCPI Core *************************/

size_t SCPI_Write(scpi_t * context, const char * data, size_t len)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
    (void) context;

    return comm_respond((comm_data_t*)context->comm, data, len);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	68b9      	ldr	r1, [r7, #8]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 f9b0 	bl	800617c <comm_respond>
 8005e1c:	4603      	mov	r3, r0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
    (void) context;

    return SCPI_RES_OK;
 8005e2e:	2301      	movs	r3, #1
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err)
{
 8005e3c:	b590      	push	{r4, r7, lr}
 8005e3e:	b09d      	sub	sp, #116	; 0x74
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
    (void) context;

    char buff[100];
    int len = sprintf(buff, ";ERROR: %d, \"%s\";", (int16_t) err, SCPI_ErrorTranslate(err));
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	b21b      	sxth	r3, r3
 8005e4a:	461c      	mov	r4, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	b21b      	sxth	r3, r3
 8005e50:	4618      	mov	r0, r3
 8005e52:	f007 f9cd 	bl	800d1f0 <SCPI_ErrorTranslate>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f107 0008 	add.w	r0, r7, #8
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	4909      	ldr	r1, [pc, #36]	; (8005e84 <SCPI_Error+0x48>)
 8005e60:	f00c fd24 	bl	80128ac <siprintf>
 8005e64:	66f8      	str	r0, [r7, #108]	; 0x6c
    comm_respond((comm_data_t*)context->comm, buff, len);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005e6c:	f107 0108 	add.w	r1, r7, #8
 8005e70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f982 	bl	800617c <comm_respond>
    return 0;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3774      	adds	r7, #116	; 0x74
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd90      	pop	{r4, r7, pc}
 8005e82:	bf00      	nop
 8005e84:	0801580c 	.word	0x0801580c

08005e88 <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b09e      	sub	sp, #120	; 0x78
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
 8005e94:	4613      	mov	r3, r2
 8005e96:	803b      	strh	r3, [r7, #0]
    (void) context;

    char buff[100];
    int len = 0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (SCPI_CTRL_SRQ == ctrl)
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d108      	bne.n	8005eb4 <SCPI_Control+0x2c>
        len = sprintf(buff, "**SRQ: 0x%X (%d)\r\n", val, val);
 8005ea2:	883a      	ldrh	r2, [r7, #0]
 8005ea4:	883b      	ldrh	r3, [r7, #0]
 8005ea6:	f107 0008 	add.w	r0, r7, #8
 8005eaa:	490f      	ldr	r1, [pc, #60]	; (8005ee8 <SCPI_Control+0x60>)
 8005eac:	f00c fcfe 	bl	80128ac <siprintf>
 8005eb0:	66f8      	str	r0, [r7, #108]	; 0x6c
 8005eb2:	e00a      	b.n	8005eca <SCPI_Control+0x42>
    else
        len = sprintf(buff, "**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	8839      	ldrh	r1, [r7, #0]
 8005eb8:	883b      	ldrh	r3, [r7, #0]
 8005eba:	f107 0008 	add.w	r0, r7, #8
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	490a      	ldr	r1, [pc, #40]	; (8005eec <SCPI_Control+0x64>)
 8005ec4:	f00c fcf2 	bl	80128ac <siprintf>
 8005ec8:	66f8      	str	r0, [r7, #108]	; 0x6c

    comm_respond((comm_data_t*)context->comm, buff, len);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005ed0:	f107 0108 	add.w	r1, r7, #8
 8005ed4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 f950 	bl	800617c <comm_respond>
    return SCPI_RES_OK;
 8005edc:	2301      	movs	r3, #1
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3770      	adds	r7, #112	; 0x70
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	08015820 	.word	0x08015820
 8005eec:	08015834 	.word	0x08015834

08005ef0 <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
    (void) context;

    comm_respond((comm_data_t*)context->comm, "**Reset\r\n", 9);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005efe:	2209      	movs	r2, #9
 8005f00:	4904      	ldr	r1, [pc, #16]	; (8005f14 <SCPI_Reset+0x24>)
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f93a 	bl	800617c <comm_respond>
    return SCPI_RES_OK;
 8005f08:	2301      	movs	r3, #1
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	08015850 	.word	0x08015850

08005f18 <SCPI_CoreIdnQ>:

scpi_result_t SCPI_CoreIdnQ(scpi_t * context)
{
 8005f18:	b590      	push	{r4, r7, lr}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < 4; i++) {
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	e039      	b.n	8005f9a <SCPI_CoreIdnQ+0x82>
        if (context->idn[i])
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3320      	adds	r3, #32
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d029      	beq.n	8005f8a <SCPI_CoreIdnQ+0x72>
        {
            int j = i;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	60bb      	str	r3, [r7, #8]
            if (i == 1 && ((comm_data_t*)(context->comm))->uart.available)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d109      	bne.n	8005f54 <SCPI_CoreIdnQ+0x3c>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005f46:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <SCPI_CoreIdnQ+0x3c>
                j = 4;
 8005f4e:	2304      	movs	r3, #4
 8005f50:	60bb      	str	r3, [r7, #8]
 8005f52:	e004      	b.n	8005f5e <SCPI_CoreIdnQ+0x46>
            else if (i == 1) // comm_data_usb.available
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d101      	bne.n	8005f5e <SCPI_CoreIdnQ+0x46>
                j = 5;
 8005f5a:	2305      	movs	r3, #5
 8005f5c:	60bb      	str	r3, [r7, #8]

            SCPI_ResultMnemonic(context, context->idn[j]);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	3320      	adds	r3, #32
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	685c      	ldr	r4, [r3, #4]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	3320      	adds	r3, #32
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fa f93c 	bl	80001f4 <strlen>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	461a      	mov	r2, r3
 8005f80:	4621      	mov	r1, r4
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f009 f8aa 	bl	800f0dc <SCPI_ResultCharacters>
 8005f88:	e004      	b.n	8005f94 <SCPI_CoreIdnQ+0x7c>
        } else {
            SCPI_ResultMnemonic(context, "0");
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	4907      	ldr	r1, [pc, #28]	; (8005fac <SCPI_CoreIdnQ+0x94>)
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f009 f8a4 	bl	800f0dc <SCPI_ResultCharacters>
    for (i = 0; i < 4; i++) {
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3301      	adds	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	ddc2      	ble.n	8005f26 <SCPI_CoreIdnQ+0xe>
        }
    }
    return SCPI_RES_OK;
 8005fa0:	2301      	movs	r3, #1
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd90      	pop	{r4, r7, pc}
 8005faa:	bf00      	nop
 8005fac:	0801585c 	.word	0x0801585c

08005fb0 <uart_put_text>:

/************************* Write Respond *************************/

void uart_put_text(const char* data)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < strlen(data); i++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	e009      	b.n	8005fd2 <uart_put_text+0x22>
        uart_put_char(data[i]);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f80e 	bl	8005fe8 <uart_put_char>
    for (int i = 0; i < strlen(data); i++)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fa f90e 	bl	80001f4 <strlen>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d8ee      	bhi.n	8005fbe <uart_put_text+0xe>
}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <uart_put_char>:

static void uart_put_char(const char data)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	71fb      	strb	r3, [r7, #7]
    while(!LL_USART_IsActiveFlag_TXE(EM_UART));
 8005ff2:	bf00      	nop
 8005ff4:	4807      	ldr	r0, [pc, #28]	; (8006014 <uart_put_char+0x2c>)
 8005ff6:	f7ff fed0 	bl	8005d9a <LL_USART_IsActiveFlag_TXE>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0f9      	beq.n	8005ff4 <uart_put_char+0xc>
    LL_USART_TransmitData8(EM_UART, data);
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	4619      	mov	r1, r3
 8006004:	4803      	ldr	r0, [pc, #12]	; (8006014 <uart_put_char+0x2c>)
 8006006:	f7ff feeb 	bl	8005de0 <LL_USART_TransmitData8>
}
 800600a:	bf00      	nop
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40004400 	.word	0x40004400

08006018 <uart_put_str>:

static void uart_put_str(const char* data, int len)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < len; i++)
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	e009      	b.n	800603c <uart_put_str+0x24>
        uart_put_char(data[i]);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	4413      	add	r3, r2
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff ffd9 	bl	8005fe8 <uart_put_char>
    for (int i = 0; i < len; i++)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3301      	adds	r3, #1
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	dbf1      	blt.n	8006028 <uart_put_str+0x10>
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <comm_init>:

/************************* Main Comm *************************/

void comm_init(comm_data_t* self)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08c      	sub	sp, #48	; 0x30
 8006050:	af0a      	add	r7, sp, #40	; 0x28
 8006052:	6078      	str	r0, [r7, #4]
    self->uart.last = 0;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
    self->uart.available = 0;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    self->uart.rx_index = 0;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    self->usb.last = 0;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    self->usb.available = 0;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    self->usb.rx_index = 0;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    comm_ptr = self;
 8006084:	4a1a      	ldr	r2, [pc, #104]	; (80060f0 <comm_init+0xa4>)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6013      	str	r3, [r2, #0]

    SCPI_Init(&scpi_context,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	9308      	str	r3, [sp, #32]
 800608e:	2311      	movs	r3, #17
 8006090:	9307      	str	r3, [sp, #28]
 8006092:	4b18      	ldr	r3, [pc, #96]	; (80060f4 <comm_init+0xa8>)
 8006094:	9306      	str	r3, [sp, #24]
 8006096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800609a:	9305      	str	r3, [sp, #20]
 800609c:	4b16      	ldr	r3, [pc, #88]	; (80060f8 <comm_init+0xac>)
 800609e:	9304      	str	r3, [sp, #16]
 80060a0:	4b16      	ldr	r3, [pc, #88]	; (80060fc <comm_init+0xb0>)
 80060a2:	9303      	str	r3, [sp, #12]
 80060a4:	4b16      	ldr	r3, [pc, #88]	; (8006100 <comm_init+0xb4>)
 80060a6:	9302      	str	r3, [sp, #8]
 80060a8:	4b16      	ldr	r3, [pc, #88]	; (8006104 <comm_init+0xb8>)
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	4b16      	ldr	r3, [pc, #88]	; (8006108 <comm_init+0xbc>)
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	4b16      	ldr	r3, [pc, #88]	; (800610c <comm_init+0xc0>)
 80060b2:	4a17      	ldr	r2, [pc, #92]	; (8006110 <comm_init+0xc4>)
 80060b4:	4917      	ldr	r1, [pc, #92]	; (8006114 <comm_init+0xc8>)
 80060b6:	4818      	ldr	r0, [pc, #96]	; (8006118 <comm_init+0xcc>)
 80060b8:	f008 ff0a 	bl	800eed0 <SCPI_Init>
              SCPI_IDN1, SCPI_IDN2, SCPI_IDN3, SCPI_IDN4,
              scpi_input_buffer, SCPI_INPUT_BUFFER_LENGTH,
              scpi_error_queue_data, SCPI_ERROR_QUEUE_SIZE,
              self);

    LL_USART_EnableIT_RXNE(EM_UART);
 80060bc:	4817      	ldr	r0, [pc, #92]	; (800611c <comm_init+0xd0>)
 80060be:	f7ff fe7f 	bl	8005dc0 <LL_USART_EnableIT_RXNE>
    uart_put_text(WELCOME_STR);
 80060c2:	4817      	ldr	r0, [pc, #92]	; (8006120 <comm_init+0xd4>)
 80060c4:	f7ff ff74 	bl	8005fb0 <uart_put_text>

    NVIC_SetPriority(EM_IRQN_UART, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), EM_IT_PRI_UART, 0));
 80060c8:	f7ff fdde 	bl	8005c88 <__NVIC_GetPriorityGrouping>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2200      	movs	r2, #0
 80060d0:	2106      	movs	r1, #6
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fe2e 	bl	8005d34 <NVIC_EncodePriority>
 80060d8:	4603      	mov	r3, r0
 80060da:	4619      	mov	r1, r3
 80060dc:	2026      	movs	r0, #38	; 0x26
 80060de:	f7ff fdff 	bl	8005ce0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EM_IRQN_UART);
 80060e2:	2026      	movs	r0, #38	; 0x26
 80060e4:	f7ff fdde 	bl	8005ca4 <__NVIC_EnableIRQ>
}
 80060e8:	bf00      	nop
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	2000d794 	.word	0x2000d794
 80060f4:	2000e498 	.word	0x2000e498
 80060f8:	2000e398 	.word	0x2000e398
 80060fc:	0801585c 	.word	0x0801585c
 8006100:	08015860 	.word	0x08015860
 8006104:	08015868 	.word	0x08015868
 8006108:	0801587c 	.word	0x0801587c
 800610c:	080160e0 	.word	0x080160e0
 8006110:	2000000c 	.word	0x2000000c
 8006114:	08015f08 	.word	0x08015f08
 8006118:	2000e2c0 	.word	0x2000e2c0
 800611c:	40004400 	.word	0x40004400
 8006120:	0801588c 	.word	0x0801588c

08006124 <comm_main>:

uint8_t comm_main(comm_data_t* self)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
    if (self->uart.available)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01a      	beq.n	800616c <comm_main+0x48>
    {
        SCPI_Input(&scpi_context, self->uart.rx_buffer, self->uart.rx_index);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f103 0167 	add.w	r1, r3, #103	; 0x67
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8006142:	461a      	mov	r2, r3
 8006144:	480c      	ldr	r0, [pc, #48]	; (8006178 <comm_main+0x54>)
 8006146:	f008 ff23 	bl	800ef90 <SCPI_Input>

        memset(self->uart.rx_buffer, 0, RX_BUFF_LEN * sizeof(char));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3367      	adds	r3, #103	; 0x67
 800614e:	2264      	movs	r2, #100	; 0x64
 8006150:	2100      	movs	r1, #0
 8006152:	4618      	mov	r0, r3
 8006154:	f00c fba2 	bl	801289c <memset>
        self->uart.rx_index = 0;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
        self->uart.available = 0;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
        return 1;
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <comm_main+0x4a>
        self->usb.rx_index = 0;
        self->usb.available = 0;
        return 1;
    }
#endif
    return 0;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	2000e2c0 	.word	0x2000e2c0

0800617c <comm_respond>:

int comm_respond(comm_data_t* self, const char* data, int len)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
    if (self->uart.last)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <comm_respond+0x22>
    {
        uart_put_str(data, len);
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	68b8      	ldr	r0, [r7, #8]
 8006196:	f7ff ff3f 	bl	8006018 <uart_put_str>
        return len;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	e000      	b.n	80061a0 <comm_respond+0x24>
        }

        return len;
    }
#endif
    return 0;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <LL_USART_IsActiveFlag_RXNE>:
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f003 0320 	and.w	r3, r3, #32
 80061b8:	2b20      	cmp	r3, #32
 80061ba:	d101      	bne.n	80061c0 <LL_USART_IsActiveFlag_RXNE+0x18>
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <LL_USART_IsActiveFlag_RXNE+0x1a>
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_USART_ClearFlag_RTO>:
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <LL_USART_ReceiveData8>:
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	b2db      	uxtb	r3, r3
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
	...

08006208 <USART2_IRQHandler>:
#include "app_sync.h"
#include "main.h"


void EM_UART_RX_IRQHandler(void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
    if (LL_USART_IsActiveFlag_RXNE(EM_UART) == 1)
 800620e:	482b      	ldr	r0, [pc, #172]	; (80062bc <USART2_IRQHandler+0xb4>)
 8006210:	f7ff ffca 	bl	80061a8 <LL_USART_IsActiveFlag_RXNE>
 8006214:	4603      	mov	r3, r0
 8006216:	2b01      	cmp	r3, #1
 8006218:	d14c      	bne.n	80062b4 <USART2_IRQHandler+0xac>
    {
        char rx = LL_USART_ReceiveData8(EM_UART);
 800621a:	4828      	ldr	r0, [pc, #160]	; (80062bc <USART2_IRQHandler+0xb4>)
 800621c:	f7ff ffe5 	bl	80061ea <LL_USART_ReceiveData8>
 8006220:	4603      	mov	r3, r0
 8006222:	71fb      	strb	r3, [r7, #7]

        comm.uart.rx_buffer[comm.uart.rx_index++] = rx;
 8006224:	4b26      	ldr	r3, [pc, #152]	; (80062c0 <USART2_IRQHandler+0xb8>)
 8006226:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	b2d1      	uxtb	r1, r2
 800622e:	4a24      	ldr	r2, [pc, #144]	; (80062c0 <USART2_IRQHandler+0xb8>)
 8006230:	f882 10cd 	strb.w	r1, [r2, #205]	; 0xcd
 8006234:	461a      	mov	r2, r3
 8006236:	4b22      	ldr	r3, [pc, #136]	; (80062c0 <USART2_IRQHandler+0xb8>)
 8006238:	4413      	add	r3, r2
 800623a:	79fa      	ldrb	r2, [r7, #7]
 800623c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67

        if (comm.uart.rx_index >= RX_BUFF_LAST)
 8006240:	4b1f      	ldr	r3, [pc, #124]	; (80062c0 <USART2_IRQHandler+0xb8>)
 8006242:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8006246:	2b62      	cmp	r3, #98	; 0x62
 8006248:	d903      	bls.n	8006252 <USART2_IRQHandler+0x4a>
            comm.uart.rx_index = 0;
 800624a:	4b1d      	ldr	r3, [pc, #116]	; (80062c0 <USART2_IRQHandler+0xb8>)
 800624c:	2200      	movs	r2, #0
 800624e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

        comm.uart.last = 1;
 8006252:	4b1b      	ldr	r3, [pc, #108]	; (80062c0 <USART2_IRQHandler+0xb8>)
 8006254:	2201      	movs	r2, #1
 8006256:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        comm.usb.last = 0;
 800625a:	4b19      	ldr	r3, [pc, #100]	; (80062c0 <USART2_IRQHandler+0xb8>)
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

        if (rx == '\n')
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	2b0a      	cmp	r3, #10
 8006266:	d122      	bne.n	80062ae <USART2_IRQHandler+0xa6>
        {
            portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8006268:	2300      	movs	r3, #0
 800626a:	603b      	str	r3, [r7, #0]
            if(xSemaphoreGiveFromISR(sem1_comm, &xHigherPriorityTaskWoken) != pdPASS)
 800626c:	4b15      	ldr	r3, [pc, #84]	; (80062c4 <USART2_IRQHandler+0xbc>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	463a      	mov	r2, r7
 8006272:	4611      	mov	r1, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f00b f885 	bl	8011384 <xQueueGiveFromISR>
 800627a:	4603      	mov	r3, r0
 800627c:	2b01      	cmp	r3, #1
 800627e:	d004      	beq.n	800628a <USART2_IRQHandler+0x82>
            {
                comm.uart.rx_index = 0;
 8006280:	4b0f      	ldr	r3, [pc, #60]	; (80062c0 <USART2_IRQHandler+0xb8>)
 8006282:	2200      	movs	r2, #0
 8006284:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8006288:	e011      	b.n	80062ae <USART2_IRQHandler+0xa6>
            }
            else
            {
                comm.uart.available = 1;
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <USART2_IRQHandler+0xb8>)
 800628c:	2201      	movs	r2, #1
 800628e:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
                if (xHigherPriorityTaskWoken != pdFALSE)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <USART2_IRQHandler+0xa6>
                    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <USART2_IRQHandler+0xa6>
 800629e:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <USART2_IRQHandler+0xc0>)
 80062a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	f3bf 8f6f 	isb	sy
            }
        }
        EM_UART_CLEAR_FLAG(EM_UART);
 80062ae:	4803      	ldr	r0, [pc, #12]	; (80062bc <USART2_IRQHandler+0xb4>)
 80062b0:	f7ff ff8d 	bl	80061ce <LL_USART_ClearFlag_RTO>
    }
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40004400 	.word	0x40004400
 80062c0:	2000d860 	.word	0x2000d860
 80062c4:	2000d7e0 	.word	0x2000d7e0
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <__NVIC_GetPriorityGrouping>:
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <__NVIC_GetPriorityGrouping+0x18>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	0a1b      	lsrs	r3, r3, #8
 80062d6:	f003 0307 	and.w	r3, r3, #7
}
 80062da:	4618      	mov	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	e000ed00 	.word	0xe000ed00

080062e8 <__NVIC_EnableIRQ>:
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	db0b      	blt.n	8006312 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	f003 021f 	and.w	r2, r3, #31
 8006300:	4907      	ldr	r1, [pc, #28]	; (8006320 <__NVIC_EnableIRQ+0x38>)
 8006302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	2001      	movs	r0, #1
 800630a:	fa00 f202 	lsl.w	r2, r0, r2
 800630e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	e000e100 	.word	0xe000e100

08006324 <__NVIC_DisableIRQ>:
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800632e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006332:	2b00      	cmp	r3, #0
 8006334:	db10      	blt.n	8006358 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	f003 021f 	and.w	r2, r3, #31
 800633c:	4909      	ldr	r1, [pc, #36]	; (8006364 <__NVIC_DisableIRQ+0x40>)
 800633e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	2001      	movs	r0, #1
 8006346:	fa00 f202 	lsl.w	r2, r0, r2
 800634a:	3320      	adds	r3, #32
 800634c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006354:	f3bf 8f6f 	isb	sy
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	e000e100 	.word	0xe000e100

08006368 <__NVIC_ClearPendingIRQ>:
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006376:	2b00      	cmp	r3, #0
 8006378:	db0c      	blt.n	8006394 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	f003 021f 	and.w	r2, r3, #31
 8006380:	4907      	ldr	r1, [pc, #28]	; (80063a0 <__NVIC_ClearPendingIRQ+0x38>)
 8006382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	2001      	movs	r0, #1
 800638a:	fa00 f202 	lsl.w	r2, r0, r2
 800638e:	3360      	adds	r3, #96	; 0x60
 8006390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	e000e100 	.word	0xe000e100

080063a4 <__NVIC_SetPriority>:
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	4603      	mov	r3, r0
 80063ac:	6039      	str	r1, [r7, #0]
 80063ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	db0a      	blt.n	80063ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	490c      	ldr	r1, [pc, #48]	; (80063f0 <__NVIC_SetPriority+0x4c>)
 80063be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c2:	0112      	lsls	r2, r2, #4
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	440b      	add	r3, r1
 80063c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80063cc:	e00a      	b.n	80063e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	4908      	ldr	r1, [pc, #32]	; (80063f4 <__NVIC_SetPriority+0x50>)
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	f003 030f 	and.w	r3, r3, #15
 80063da:	3b04      	subs	r3, #4
 80063dc:	0112      	lsls	r2, r2, #4
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	440b      	add	r3, r1
 80063e2:	761a      	strb	r2, [r3, #24]
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	e000e100 	.word	0xe000e100
 80063f4:	e000ed00 	.word	0xe000ed00

080063f8 <NVIC_EncodePriority>:
{
 80063f8:	b480      	push	{r7}
 80063fa:	b089      	sub	sp, #36	; 0x24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f1c3 0307 	rsb	r3, r3, #7
 8006412:	2b04      	cmp	r3, #4
 8006414:	bf28      	it	cs
 8006416:	2304      	movcs	r3, #4
 8006418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	3304      	adds	r3, #4
 800641e:	2b06      	cmp	r3, #6
 8006420:	d902      	bls.n	8006428 <NVIC_EncodePriority+0x30>
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	3b03      	subs	r3, #3
 8006426:	e000      	b.n	800642a <NVIC_EncodePriority+0x32>
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800642c:	f04f 32ff 	mov.w	r2, #4294967295
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	fa02 f303 	lsl.w	r3, r2, r3
 8006436:	43da      	mvns	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	401a      	ands	r2, r3
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006440:	f04f 31ff 	mov.w	r1, #4294967295
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	fa01 f303 	lsl.w	r3, r1, r3
 800644a:	43d9      	mvns	r1, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006450:	4313      	orrs	r3, r2
}
 8006452:	4618      	mov	r0, r3
 8006454:	3724      	adds	r7, #36	; 0x24
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <LL_ADC_DMA_GetRegAddr>:
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <LL_ADC_DMA_GetRegAddr+0x1c>
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3340      	adds	r3, #64	; 0x40
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e00c      	b.n	8006496 <LL_ADC_DMA_GetRegAddr+0x36>
    data_reg_addr = (uint32_t)&((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006482:	d003      	beq.n	800648c <LL_ADC_DMA_GetRegAddr+0x2c>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a07      	ldr	r2, [pc, #28]	; (80064a4 <LL_ADC_DMA_GetRegAddr+0x44>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d101      	bne.n	8006490 <LL_ADC_DMA_GetRegAddr+0x30>
 800648c:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <LL_ADC_DMA_GetRegAddr+0x48>)
 800648e:	e000      	b.n	8006492 <LL_ADC_DMA_GetRegAddr+0x32>
 8006490:	4b06      	ldr	r3, [pc, #24]	; (80064ac <LL_ADC_DMA_GetRegAddr+0x4c>)
 8006492:	330c      	adds	r3, #12
 8006494:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8006496:	68fb      	ldr	r3, [r7, #12]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	50000100 	.word	0x50000100
 80064a8:	50000300 	.word	0x50000300
 80064ac:	50000700 	.word	0x50000700

080064b0 <LL_ADC_SetAnalogWDMonitChannels>:
{
 80064b0:	b480      	push	{r7}
 80064b2:	b089      	sub	sp, #36	; 0x24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, __ADC_MASK_SHIFT(AWDy, ADC_AWD_CRX_REGOFFSET_MASK)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	330c      	adds	r3, #12
 80064c0:	4618      	mov	r0, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80064c8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80064cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	fa92 f2a2 	rbit	r2, r2
 80064d4:	617a      	str	r2, [r7, #20]
  return result;
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	fab2 f282 	clz	r2, r2
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	fa23 f102 	lsr.w	r1, r3, r2
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f003 0202 	and.w	r2, r3, #2
 80064e8:	4613      	mov	r3, r2
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	440b      	add	r3, r1
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4403      	add	r3, r0
 80064f6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	4b08      	ldr	r3, [pc, #32]	; (8006520 <LL_ADC_SetAnalogWDMonitChannels+0x70>)
 8006500:	400b      	ands	r3, r1
 8006502:	43db      	mvns	r3, r3
 8006504:	401a      	ands	r2, r3
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	400b      	ands	r3, r1
 800650c:	431a      	orrs	r2, r3
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	601a      	str	r2, [r3, #0]
}
 8006512:	bf00      	nop
 8006514:	3724      	adds	r7, #36	; 0x24
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	7dc7fffe 	.word	0x7dc7fffe

08006524 <LL_ADC_REG_StartConversion>:
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006534:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006538:	f043 0204 	orr.w	r2, r3, #4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	609a      	str	r2, [r3, #8]
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <LL_ADC_REG_StopConversion>:
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800655c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006560:	f043 0210 	orr.w	r2, r3, #16
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	609a      	str	r2, [r3, #8]
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <LL_TIM_EnableCounter>:
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f043 0201 	orr.w	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	601a      	str	r2, [r3, #0]
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <LL_TIM_DisableCounter>:
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f023 0201 	bic.w	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	601a      	str	r2, [r3, #0]
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <LL_TIM_SetPrescaler>:
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <LL_TIM_SetAutoReload>:
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <LL_TIM_EnableDMAReq_CC1>:
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	60da      	str	r2, [r3, #12]
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <LL_TIM_DisableDMAReq_CC1>:
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	60da      	str	r2, [r3, #12]
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <daq_init>:
                       DMA_TypeDef* dma, enum daq_bits bits);
static void daq_clear_buff(daq_buff_t* buff);


void daq_init(daq_data_t* self)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
    daq_trig_init(self);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 feb9 	bl	80083ac <daq_trig_init>
    daq_settings_init(self);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f904 	bl	8006848 <daq_settings_init>
    daq_settings_save(&self->save_s, &self->trig.save_s, &self->set, &self->trig.set);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f503 4044 	add.w	r0, r3, #50176	; 0xc400
 8006646:	3008      	adds	r0, #8
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f503 4144 	add.w	r1, r3, #50176	; 0xc400
 800664e:	3150      	adds	r1, #80	; 0x50
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f503 4243 	add.w	r2, r3, #49920	; 0xc300
 8006656:	32fc      	adds	r2, #252	; 0xfc
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800665e:	333c      	adds	r3, #60	; 0x3c
 8006660:	f000 f8b1 	bl	80067c6 <daq_settings_save>
    self->mode = SCOPE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800666a:	3334      	adds	r3, #52	; 0x34
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]

    daq_clear_buff(&self->buff1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fc31 	bl	8006eda <daq_clear_buff>
    daq_clear_buff(&self->buff2);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	330c      	adds	r3, #12
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fc2c 	bl	8006eda <daq_clear_buff>
    daq_clear_buff(&self->buff3);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3318      	adds	r3, #24
 8006686:	4618      	mov	r0, r3
 8006688:	f000 fc27 	bl	8006eda <daq_clear_buff>
    daq_clear_buff(&self->buff4);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3324      	adds	r3, #36	; 0x24
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fc22 	bl	8006eda <daq_clear_buff>
    daq_clear_buff(&self->buff_out);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3330      	adds	r3, #48	; 0x30
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fc1d 	bl	8006eda <daq_clear_buff>
    memset(self->buff_raw, 0, EM_DAQ_MAX_MEM * sizeof(uint8_t));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	333c      	adds	r3, #60	; 0x3c
 80066a4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80066a8:	2100      	movs	r1, #0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f00c f8f6 	bl	801289c <memset>
    self->buff_raw_ptr = 0;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80066b6:	33fa      	adds	r3, #250	; 0xfa
 80066b8:	2200      	movs	r2, #0
 80066ba:	801a      	strh	r2, [r3, #0]

    self->trig.buff_trig = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80066c2:	33b0      	adds	r3, #176	; 0xb0
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
    self->buff_out.reserve = 0;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	871a      	strh	r2, [r3, #56]	; 0x38
    self->enabled = 0;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80066d4:	3336      	adds	r3, #54	; 0x36
 80066d6:	2200      	movs	r2, #0
 80066d8:	701a      	strb	r2, [r3, #0]
    self->dis_hold = 0;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80066e0:	3335      	adds	r3, #53	; 0x35
 80066e2:	2200      	movs	r2, #0
 80066e4:	701a      	strb	r2, [r3, #0]
    self->vref = 0;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80066ec:	3320      	adds	r3, #32
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]
    self->vcc_mv = 0;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80066fa:	3324      	adds	r3, #36	; 0x24
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
    self->adc_max_val = 0;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006708:	332c      	adds	r3, #44	; 0x2c
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	601a      	str	r2, [r3, #0]
    self->smpl_time = 0;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006716:	3328      	adds	r3, #40	; 0x28
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
    self->interleaved = 0;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006724:	3337      	adds	r3, #55	; 0x37
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
    self->dualmode = 0;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006730:	3338      	adds	r3, #56	; 0x38
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
    self->uwTick = 0;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800673c:	3330      	adds	r3, #48	; 0x30
 800673e:	2200      	movs	r2, #0
 8006740:	601a      	str	r2, [r3, #0]

#if defined(EM_ADC_MODE_ADC1) || defined(EM_ADC_MODE_ADC12) || defined(EM_ADC_MODE_ADC1234)
    NVIC_SetPriority(EM_IRQN_ADC12, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), EM_IT_PRI_ADC, 0));
 8006742:	f7ff fdc3 	bl	80062cc <__NVIC_GetPriorityGrouping>
 8006746:	4603      	mov	r3, r0
 8006748:	2200      	movs	r2, #0
 800674a:	2105      	movs	r1, #5
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff fe53 	bl	80063f8 <NVIC_EncodePriority>
 8006752:	4603      	mov	r3, r0
 8006754:	4619      	mov	r1, r3
 8006756:	2012      	movs	r0, #18
 8006758:	f7ff fe24 	bl	80063a4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EM_IRQN_ADC12);
 800675c:	2012      	movs	r0, #18
 800675e:	f7ff fdc3 	bl	80062e8 <__NVIC_EnableIRQ>
#endif

#if defined(EM_ADC_MODE_ADC1234)
    NVIC_SetPriority(EM_IRQN_ADC3, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), EM_IT_PRI_ADC, 0));
 8006762:	f7ff fdb3 	bl	80062cc <__NVIC_GetPriorityGrouping>
 8006766:	4603      	mov	r3, r0
 8006768:	2200      	movs	r2, #0
 800676a:	2105      	movs	r1, #5
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff fe43 	bl	80063f8 <NVIC_EncodePriority>
 8006772:	4603      	mov	r3, r0
 8006774:	4619      	mov	r1, r3
 8006776:	202f      	movs	r0, #47	; 0x2f
 8006778:	f7ff fe14 	bl	80063a4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EM_IRQN_ADC3);
 800677c:	202f      	movs	r0, #47	; 0x2f
 800677e:	f7ff fdb3 	bl	80062e8 <__NVIC_EnableIRQ>

    NVIC_SetPriority(EM_IRQN_ADC4, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), EM_IT_PRI_ADC, 0));
 8006782:	f7ff fda3 	bl	80062cc <__NVIC_GetPriorityGrouping>
 8006786:	4603      	mov	r3, r0
 8006788:	2200      	movs	r2, #0
 800678a:	2105      	movs	r1, #5
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff fe33 	bl	80063f8 <NVIC_EncodePriority>
 8006792:	4603      	mov	r3, r0
 8006794:	4619      	mov	r1, r3
 8006796:	203d      	movs	r0, #61	; 0x3d
 8006798:	f7ff fe04 	bl	80063a4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EM_IRQN_ADC4);
 800679c:	203d      	movs	r0, #61	; 0x3d
 800679e:	f7ff fda3 	bl	80062e8 <__NVIC_EnableIRQ>
#endif

    NVIC_DisableIRQ(EM_LA_IRQ_EXTI1);
 80067a2:	2006      	movs	r0, #6
 80067a4:	f7ff fdbe 	bl	8006324 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(EM_LA_IRQ_EXTI2);
 80067a8:	2007      	movs	r0, #7
 80067aa:	f7ff fdbb 	bl	8006324 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(EM_LA_IRQ_EXTI3);
 80067ae:	2008      	movs	r0, #8
 80067b0:	f7ff fdb8 	bl	8006324 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(EM_LA_IRQ_EXTI4);
 80067b4:	2009      	movs	r0, #9
 80067b6:	f7ff fdb5 	bl	8006324 <__NVIC_DisableIRQ>

    adc_init();
 80067ba:	f003 fabd 	bl	8009d38 <adc_init>
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <daq_settings_save>:

void daq_settings_save(daq_settings_t* src1, trig_settings_t* src2, daq_settings_t* dst1, trig_settings_t* dst2)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
 80067d2:	603b      	str	r3, [r7, #0]
    dst1->fs = src1->fs;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	605a      	str	r2, [r3, #4]
    dst1->mem = src1->mem;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	891a      	ldrh	r2, [r3, #8]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	811a      	strh	r2, [r3, #8]
    dst1->bits = src1->bits;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	7a9a      	ldrb	r2, [r3, #10]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	729a      	strb	r2, [r3, #10]

    dst1->ch1_en = src1->ch1_en;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	781a      	ldrb	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	701a      	strb	r2, [r3, #0]
    dst1->ch2_en = src1->ch2_en;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	785a      	ldrb	r2, [r3, #1]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	705a      	strb	r2, [r3, #1]
    dst1->ch3_en = src1->ch3_en;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	789a      	ldrb	r2, [r3, #2]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	709a      	strb	r2, [r3, #2]
    dst1->ch4_en = src1->ch4_en;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	78da      	ldrb	r2, [r3, #3]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	70da      	strb	r2, [r3, #3]

    dst2->val_percent = src2->val_percent;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	611a      	str	r2, [r3, #16]
    dst2->val = src2->val;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	60da      	str	r2, [r3, #12]
    dst2->ch = src2->ch;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	609a      	str	r2, [r3, #8]
    dst2->edge = src2->edge;
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	795a      	ldrb	r2, [r3, #5]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	715a      	strb	r2, [r3, #5]
    dst2->mode = src2->mode;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	791a      	ldrb	r2, [r3, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	711a      	strb	r2, [r3, #4]
    dst2->pretrigger = src2->pretrigger;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	601a      	str	r2, [r3, #0]
}
 800683c:	bf00      	nop
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <daq_settings_init>:

void daq_settings_init(daq_data_t* self)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
    // SCOPE
    self->save_s.fs = 100000; //TODO defaults from CFG macros
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006856:	330c      	adds	r3, #12
 8006858:	4a50      	ldr	r2, [pc, #320]	; (800699c <daq_settings_init+0x154>)
 800685a:	601a      	str	r2, [r3, #0]
    self->save_s.mem = 500;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006862:	3310      	adds	r3, #16
 8006864:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006868:	801a      	strh	r2, [r3, #0]
    self->save_s.bits = B12;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006870:	3312      	adds	r3, #18
 8006872:	220c      	movs	r2, #12
 8006874:	701a      	strb	r2, [r3, #0]

    self->save_s.ch1_en = 1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800687c:	3308      	adds	r3, #8
 800687e:	2201      	movs	r2, #1
 8006880:	701a      	strb	r2, [r3, #0]
    self->save_s.ch2_en = 1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006888:	3309      	adds	r3, #9
 800688a:	2201      	movs	r2, #1
 800688c:	701a      	strb	r2, [r3, #0]
    self->save_s.ch3_en = 0;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006894:	330a      	adds	r3, #10
 8006896:	2200      	movs	r2, #0
 8006898:	701a      	strb	r2, [r3, #0]
    self->save_s.ch4_en = 0;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80068a0:	330b      	adds	r3, #11
 80068a2:	2200      	movs	r2, #0
 80068a4:	701a      	strb	r2, [r3, #0]

    self->trig.save_s.val_percent = 50;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80068ac:	3360      	adds	r3, #96	; 0x60
 80068ae:	2232      	movs	r2, #50	; 0x32
 80068b0:	601a      	str	r2, [r3, #0]
    self->trig.save_s.val = 2047;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80068b8:	335c      	adds	r3, #92	; 0x5c
 80068ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80068be:	601a      	str	r2, [r3, #0]
    self->trig.save_s.ch = 1;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80068c6:	3358      	adds	r3, #88	; 0x58
 80068c8:	2201      	movs	r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
    self->trig.save_s.edge = RISING;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80068d2:	3355      	adds	r3, #85	; 0x55
 80068d4:	2200      	movs	r2, #0
 80068d6:	701a      	strb	r2, [r3, #0]
    self->trig.save_s.mode = DISABLED;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80068de:	3354      	adds	r3, #84	; 0x54
 80068e0:	2203      	movs	r2, #3
 80068e2:	701a      	strb	r2, [r3, #0]
    self->trig.save_s.pretrigger = 50;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80068ea:	3350      	adds	r3, #80	; 0x50
 80068ec:	2232      	movs	r2, #50	; 0x32
 80068ee:	601a      	str	r2, [r3, #0]

    // LA
    self->save_l.fs = 100000;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80068f6:	3318      	adds	r3, #24
 80068f8:	4a28      	ldr	r2, [pc, #160]	; (800699c <daq_settings_init+0x154>)
 80068fa:	601a      	str	r2, [r3, #0]
    self->save_l.mem = 1000;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006902:	331c      	adds	r3, #28
 8006904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006908:	801a      	strh	r2, [r3, #0]
    self->save_l.bits = B1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006910:	331e      	adds	r3, #30
 8006912:	2201      	movs	r2, #1
 8006914:	701a      	strb	r2, [r3, #0]

    self->save_l.ch1_en = 1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800691c:	3314      	adds	r3, #20
 800691e:	2201      	movs	r2, #1
 8006920:	701a      	strb	r2, [r3, #0]
    self->save_l.ch2_en = 1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006928:	3315      	adds	r3, #21
 800692a:	2201      	movs	r2, #1
 800692c:	701a      	strb	r2, [r3, #0]
    self->save_l.ch3_en = 1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006934:	3316      	adds	r3, #22
 8006936:	2201      	movs	r2, #1
 8006938:	701a      	strb	r2, [r3, #0]
    self->save_l.ch4_en = 1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006940:	3317      	adds	r3, #23
 8006942:	2201      	movs	r2, #1
 8006944:	701a      	strb	r2, [r3, #0]

    self->trig.save_s.val_percent = 0;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800694c:	3360      	adds	r3, #96	; 0x60
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]
    self->trig.save_l.val = 0;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006958:	3370      	adds	r3, #112	; 0x70
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
    self->trig.save_l.ch = 1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006964:	336c      	adds	r3, #108	; 0x6c
 8006966:	2201      	movs	r2, #1
 8006968:	601a      	str	r2, [r3, #0]
    self->trig.save_l.edge = RISING;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006970:	3369      	adds	r3, #105	; 0x69
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
    self->trig.save_l.mode = DISABLED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800697c:	3368      	adds	r3, #104	; 0x68
 800697e:	2203      	movs	r2, #3
 8006980:	701a      	strb	r2, [r3, #0]
    self->trig.save_l.pretrigger = 50;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006988:	3364      	adds	r3, #100	; 0x64
 800698a:	2232      	movs	r2, #50	; 0x32
 800698c:	601a      	str	r2, [r3, #0]
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	47c35000 	.word	0x47c35000

080069a0 <daq_mem_set>:

int daq_mem_set(daq_data_t* self, uint16_t mem_per_ch)
{
 80069a0:	b5b0      	push	{r4, r5, r7, lr}
 80069a2:	b090      	sub	sp, #64	; 0x40
 80069a4:	af06      	add	r7, sp, #24
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	807b      	strh	r3, [r7, #2]
    daq_enable(self, 0);
 80069ac:	2100      	movs	r1, #0
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fd84 	bl	80074bc <daq_enable>
    daq_reset(self);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fd13 	bl	80073e0 <daq_reset>

    self->buff_out.reserve = 0;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	871a      	strh	r2, [r3, #56]	; 0x38
    daq_clear_buff(&self->buff1);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fa89 	bl	8006eda <daq_clear_buff>
    daq_clear_buff(&self->buff2);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	330c      	adds	r3, #12
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fa84 	bl	8006eda <daq_clear_buff>
    daq_clear_buff(&self->buff3);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3318      	adds	r3, #24
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 fa7f 	bl	8006eda <daq_clear_buff>
    daq_clear_buff(&self->buff4);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3324      	adds	r3, #36	; 0x24
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 fa7a 	bl	8006eda <daq_clear_buff>
    daq_clear_buff(&self->buff_out);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3330      	adds	r3, #48	; 0x30
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fa75 	bl	8006eda <daq_clear_buff>
    self->buff_raw_ptr = 0;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80069f6:	33fa      	adds	r3, #250	; 0xfa
 80069f8:	2200      	movs	r2, #0
 80069fa:	801a      	strh	r2, [r3, #0]
    memset(self->buff_raw, 0, EM_DAQ_MAX_MEM * sizeof(uint8_t));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	333c      	adds	r3, #60	; 0x3c
 8006a00:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f00b ff48 	bl	801289c <memset>

    int max_len = EM_DAQ_MAX_MEM;
 8006a0c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
    int out_per_ch = mem_per_ch;
 8006a12:	887b      	ldrh	r3, [r7, #2]
 8006a14:	623b      	str	r3, [r7, #32]
    if (self->set.bits == B12)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006a1c:	3306      	adds	r3, #6
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b0c      	cmp	r3, #12
 8006a22:	d107      	bne.n	8006a34 <daq_mem_set+0x94>
    {
        max_len /= 2;
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	0fda      	lsrs	r2, r3, #31
 8006a28:	4413      	add	r3, r2
 8006a2a:	105b      	asrs	r3, r3, #1
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
        out_per_ch *= 2;
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	623b      	str	r3, [r7, #32]
    }

    if (self->mode != LA)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006a3a:	3334      	adds	r3, #52	; 0x34
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	f000 80f3 	beq.w	8006c2a <daq_mem_set+0x28a>
    {
        uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006a4a:	3334      	adds	r3, #52	; 0x34
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	bf0c      	ite	eq
 8006a52:	2301      	moveq	r3, #1
 8006a54:	2300      	movne	r3, #0
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	77fb      	strb	r3, [r7, #31]
        self->buff_out.chans = total - is_vcc;
        self->buff_out.len = out_per_ch * (total - is_vcc);

#elif defined(EM_ADC_MODE_ADC1234)

        int len1 = self->set.ch1_en + is_vcc;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006a60:	33fc      	adds	r3, #252	; 0xfc
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	7ffb      	ldrb	r3, [r7, #31]
 8006a68:	4413      	add	r3, r2
 8006a6a:	61bb      	str	r3, [r7, #24]
        int len2 = self->set.ch3_en;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006a72:	33fe      	adds	r3, #254	; 0xfe
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	617b      	str	r3, [r7, #20]
        int len3 = self->set.ch3_en;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006a7e:	33fe      	adds	r3, #254	; 0xfe
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	613b      	str	r3, [r7, #16]
        int len4 = self->set.ch3_en;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006a8a:	33fe      	adds	r3, #254	; 0xfe
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	60fb      	str	r3, [r7, #12]
        int total = len1 + len2 + len3 + len4;
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	441a      	add	r2, r3
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	4413      	add	r3, r2
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	60bb      	str	r3, [r7, #8]
            len3 = 1;
            len4 = 0;
            total = 2; // TODO size??
        }
#endif
        if (mem_per_ch < 1 || (mem_per_ch * total) + (mem_per_ch * (total - is_vcc)) > max_len)
 8006aa0:	887b      	ldrh	r3, [r7, #2]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <daq_mem_set+0x11c>
 8006aa6:	7ffb      	ldrb	r3, [r7, #31]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	1ad2      	subs	r2, r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4413      	add	r3, r2
 8006ab0:	887a      	ldrh	r2, [r7, #2]
 8006ab2:	fb02 f303 	mul.w	r3, r2, r3
 8006ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	da02      	bge.n	8006ac2 <daq_mem_set+0x122>
            return -2;
 8006abc:	f06f 0301 	mvn.w	r3, #1
 8006ac0:	e100      	b.n	8006cc4 <daq_mem_set+0x324>

        if (len1 > 0)
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	dd1d      	ble.n	8006b04 <daq_mem_set+0x164>
            daq_malloc(self, &self->buff1, mem_per_ch * len1, EM_MEM_RESERVE, len1, EM_ADC_ADDR(ADC1), EM_DMA_CH_ADC1, EM_DMA_ADC1, self->set.bits);
 8006ac8:	687c      	ldr	r4, [r7, #4]
 8006aca:	887b      	ldrh	r3, [r7, #2]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	fb02 f503 	mul.w	r5, r2, r3
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006ad8:	f7ff fcc2 	bl	8006460 <LL_ADC_DMA_GetRegAddr>
 8006adc:	4602      	mov	r2, r0
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006ae4:	3306      	adds	r3, #6
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	9304      	str	r3, [sp, #16]
 8006aea:	4b78      	ldr	r3, [pc, #480]	; (8006ccc <daq_mem_set+0x32c>)
 8006aec:	9303      	str	r3, [sp, #12]
 8006aee:	2301      	movs	r3, #1
 8006af0:	9302      	str	r3, [sp, #8]
 8006af2:	9201      	str	r2, [sp, #4]
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	230a      	movs	r3, #10
 8006afa:	462a      	mov	r2, r5
 8006afc:	4621      	mov	r1, r4
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f8f0 	bl	8006ce4 <daq_malloc>
        if (len2 > 0)
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	dd1e      	ble.n	8006b48 <daq_mem_set+0x1a8>
            daq_malloc(self, &self->buff2, mem_per_ch * len2, EM_MEM_RESERVE, len2, EM_ADC_ADDR(ADC2), EM_DMA_CH_ADC2, EM_DMA_ADC2, self->set.bits);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f103 040c 	add.w	r4, r3, #12
 8006b10:	887b      	ldrh	r3, [r7, #2]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	fb02 f503 	mul.w	r5, r2, r3
 8006b18:	2100      	movs	r1, #0
 8006b1a:	486d      	ldr	r0, [pc, #436]	; (8006cd0 <daq_mem_set+0x330>)
 8006b1c:	f7ff fca0 	bl	8006460 <LL_ADC_DMA_GetRegAddr>
 8006b20:	4602      	mov	r2, r0
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006b28:	3306      	adds	r3, #6
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	4b69      	ldr	r3, [pc, #420]	; (8006cd4 <daq_mem_set+0x334>)
 8006b30:	9303      	str	r3, [sp, #12]
 8006b32:	2301      	movs	r3, #1
 8006b34:	9302      	str	r3, [sp, #8]
 8006b36:	9201      	str	r2, [sp, #4]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	230a      	movs	r3, #10
 8006b3e:	462a      	mov	r2, r5
 8006b40:	4621      	mov	r1, r4
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f8ce 	bl	8006ce4 <daq_malloc>
        if (len3 > 0)
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	dd1e      	ble.n	8006b8c <daq_mem_set+0x1ec>
            daq_malloc(self, &self->buff3, mem_per_ch * len3, EM_MEM_RESERVE, len3, EM_ADC_ADDR(ADC3), EM_DMA_CH_ADC3, EM_DMA_ADC3, self->set.bits);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f103 0418 	add.w	r4, r3, #24
 8006b54:	887b      	ldrh	r3, [r7, #2]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	fb02 f503 	mul.w	r5, r2, r3
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	485e      	ldr	r0, [pc, #376]	; (8006cd8 <daq_mem_set+0x338>)
 8006b60:	f7ff fc7e 	bl	8006460 <LL_ADC_DMA_GetRegAddr>
 8006b64:	4602      	mov	r2, r0
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006b6c:	3306      	adds	r3, #6
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	9304      	str	r3, [sp, #16]
 8006b72:	4b58      	ldr	r3, [pc, #352]	; (8006cd4 <daq_mem_set+0x334>)
 8006b74:	9303      	str	r3, [sp, #12]
 8006b76:	2305      	movs	r3, #5
 8006b78:	9302      	str	r3, [sp, #8]
 8006b7a:	9201      	str	r2, [sp, #4]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	230a      	movs	r3, #10
 8006b82:	462a      	mov	r2, r5
 8006b84:	4621      	mov	r1, r4
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f8ac 	bl	8006ce4 <daq_malloc>
        if (len4 > 0)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	dd1e      	ble.n	8006bd0 <daq_mem_set+0x230>
            daq_malloc(self, &self->buff4, mem_per_ch * len4, EM_MEM_RESERVE, len4, EM_ADC_ADDR(ADC4), EM_DMA_CH_ADC4, EM_DMA_ADC4, self->set.bits);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8006b98:	887b      	ldrh	r3, [r7, #2]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	fb02 f503 	mul.w	r5, r2, r3
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	484e      	ldr	r0, [pc, #312]	; (8006cdc <daq_mem_set+0x33c>)
 8006ba4:	f7ff fc5c 	bl	8006460 <LL_ADC_DMA_GetRegAddr>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006bb0:	3306      	adds	r3, #6
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	9304      	str	r3, [sp, #16]
 8006bb6:	4b47      	ldr	r3, [pc, #284]	; (8006cd4 <daq_mem_set+0x334>)
 8006bb8:	9303      	str	r3, [sp, #12]
 8006bba:	2302      	movs	r3, #2
 8006bbc:	9302      	str	r3, [sp, #8]
 8006bbe:	9201      	str	r2, [sp, #4]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	230a      	movs	r3, #10
 8006bc6:	462a      	mov	r2, r5
 8006bc8:	4621      	mov	r1, r4
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f88a 	bl	8006ce4 <daq_malloc>

        self->buff_out.chans = total - is_vcc;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	7ffb      	ldrb	r3, [r7, #31]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	869a      	strh	r2, [r3, #52]	; 0x34
        self->buff_out.len = out_per_ch * (total - is_vcc);
 8006be0:	7ffb      	ldrb	r3, [r7, #31]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	fb12 f303 	smulbb	r3, r2, r3
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	86da      	strh	r2, [r3, #54]	; 0x36

#endif

        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006c02:	33fa      	adds	r3, #250	; 0xfa
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	441a      	add	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	631a      	str	r2, [r3, #48]	; 0x30
        self->buff_raw_ptr += self->buff_out.len;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006c12:	33fa      	adds	r3, #250	; 0xfa
 8006c14:	881a      	ldrh	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c1a:	4413      	add	r3, r2
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006c24:	33fa      	adds	r3, #250	; 0xfa
 8006c26:	801a      	strh	r2, [r3, #0]
 8006c28:	e03e      	b.n	8006ca8 <daq_mem_set+0x308>
    }
    else // mode == LA
    {
        if (mem_per_ch < 1 || (mem_per_ch * 2) > EM_DAQ_MAX_MEM)
 8006c2a:	887b      	ldrh	r3, [r7, #2]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <daq_mem_set+0x29c>
 8006c30:	887b      	ldrh	r3, [r7, #2]
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	dd02      	ble.n	8006c42 <daq_mem_set+0x2a2>
            return -2;
 8006c3c:	f06f 0301 	mvn.w	r3, #1
 8006c40:	e040      	b.n	8006cc4 <daq_mem_set+0x324>

        daq_malloc(self, &self->buff1, mem_per_ch, EM_MEM_RESERVE, 4, (uint32_t)&EM_GPIO_LA_PORT->IDR, EM_DMA_CH_LA, EM_DMA_LA, self->set.bits);
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	887a      	ldrh	r2, [r7, #2]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006c4c:	3306      	adds	r3, #6
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	9304      	str	r3, [sp, #16]
 8006c52:	4b1e      	ldr	r3, [pc, #120]	; (8006ccc <daq_mem_set+0x32c>)
 8006c54:	9303      	str	r3, [sp, #12]
 8006c56:	2306      	movs	r3, #6
 8006c58:	9302      	str	r3, [sp, #8]
 8006c5a:	4b21      	ldr	r3, [pc, #132]	; (8006ce0 <daq_mem_set+0x340>)
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	2304      	movs	r3, #4
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	230a      	movs	r3, #10
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f83d 	bl	8006ce4 <daq_malloc>

        self->buff_out.chans = 4;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	869a      	strh	r2, [r3, #52]	; 0x34
        self->buff_out.len = mem_per_ch;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	887a      	ldrh	r2, [r7, #2]
 8006c74:	86da      	strh	r2, [r3, #54]	; 0x36
        self->buff_out.data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006c82:	33fa      	adds	r3, #250	; 0xfa
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	441a      	add	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
        self->buff_raw_ptr += self->buff_out.len;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006c92:	33fa      	adds	r3, #250	; 0xfa
 8006c94:	881a      	ldrh	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c9a:	4413      	add	r3, r2
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006ca4:	33fa      	adds	r3, #250	; 0xfa
 8006ca6:	801a      	strh	r2, [r3, #0]
    }

    self->set.mem = mem_per_ch;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006cae:	3304      	adds	r3, #4
 8006cb0:	887a      	ldrh	r2, [r7, #2]
 8006cb2:	801a      	strh	r2, [r3, #0]

    daq_trig_update(self);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f002 f973 	bl	8008fa0 <daq_trig_update>
    daq_enable(self, 1);
 8006cba:	2101      	movs	r1, #1
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fbfd 	bl	80074bc <daq_enable>
    return 0;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3728      	adds	r7, #40	; 0x28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bdb0      	pop	{r4, r5, r7, pc}
 8006ccc:	40020000 	.word	0x40020000
 8006cd0:	50000100 	.word	0x50000100
 8006cd4:	40020400 	.word	0x40020400
 8006cd8:	50000400 	.word	0x50000400
 8006cdc:	50000500 	.word	0x50000500
 8006ce0:	48000810 	.word	0x48000810

08006ce4 <daq_malloc>:

static void daq_malloc(daq_data_t* self, daq_buff_t* buff, int mem, int reserve, int chans, uint32_t src,
                       uint32_t dma_ch, DMA_TypeDef* dma, enum daq_bits bits)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b090      	sub	sp, #64	; 0x40
 8006ce8:	af04      	add	r7, sp, #16
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
    if (bits == B12)
 8006cf2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006cf6:	2b0c      	cmp	r3, #12
 8006cf8:	d154      	bne.n	8006da4 <daq_malloc+0xc0>
    {
        mem += reserve * chans;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cfe:	fb02 f303 	mul.w	r3, r2, r3
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	4413      	add	r3, r2
 8006d06:	607b      	str	r3, [r7, #4]
        buff->reserve = reserve * chans;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	fb12 f303 	smulbb	r3, r2, r3
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	811a      	strh	r2, [r3, #8]

        size_t ln = mem * sizeof(uint16_t);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	61fb      	str	r3, [r7, #28]
        buff->data = (uint16_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006d2c:	33fa      	adds	r3, #250	; 0xfa
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	441a      	add	r2, r3
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	601a      	str	r2, [r3, #0]
        self->buff_raw_ptr += mem * 2;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006d3c:	33fa      	adds	r3, #250	; 0xfa
 8006d3e:	881a      	ldrh	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4413      	add	r3, r2
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006d52:	33fa      	adds	r3, #250	; 0xfa
 8006d54:	801a      	strh	r2, [r3, #0]
        buff->chans = chans;
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	809a      	strh	r2, [r3, #4]
        buff->len = mem;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	80da      	strh	r2, [r3, #6]
        memset(buff->data, 0, ln);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f00b fd94 	bl	801289c <memset>
        uint32_t dma_p_sz = LL_DMA_PDATAALIGN_HALFWORD;
 8006d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d78:	61bb      	str	r3, [r7, #24]
        uint32_t dma_m_sz = LL_DMA_MDATAALIGN_HALFWORD;
 8006d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d7e:	617b      	str	r3, [r7, #20]
        {
            dma_p_sz = LL_DMA_PDATAALIGN_WORD;
            dma_m_sz = LL_DMA_MDATAALIGN_WORD;
        }
#endif
        dma_set(src, dma, dma_ch, (uint32_t)((uint16_t*)((uint8_t*)buff->data)), mem,
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4619      	mov	r1, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	9203      	str	r2, [sp, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	9202      	str	r2, [sp, #8]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	9201      	str	r2, [sp, #4]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	460b      	mov	r3, r1
 8006d98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006d9e:	f002 ffa1 	bl	8009ce4 <dma_set>
        buff->len = mem;
        memset(buff->data, 0, ln);
        dma_set(src, dma, EM_DMA_CH_LA, (uint32_t)((uint8_t*)buff->data), mem,
                LL_DMA_PDATAALIGN_BYTE, LL_DMA_MDATAALIGN_BYTE, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
    }
}
 8006da2:	e096      	b.n	8006ed2 <daq_malloc+0x1ee>
    else if (bits == B8)
 8006da4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d14f      	bne.n	8006e4c <daq_malloc+0x168>
        mem += reserve * chans;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db0:	fb02 f303 	mul.w	r3, r2, r3
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	4413      	add	r3, r2
 8006db8:	607b      	str	r3, [r7, #4]
        buff->reserve = reserve * chans;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	fb12 f303 	smulbb	r3, r2, r3
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	811a      	strh	r2, [r3, #8]
        size_t ln = mem * sizeof(uint8_t);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	62bb      	str	r3, [r7, #40]	; 0x28
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006ddc:	33fa      	adds	r3, #250	; 0xfa
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	441a      	add	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	601a      	str	r2, [r3, #0]
        self->buff_raw_ptr += mem;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006dec:	33fa      	adds	r3, #250	; 0xfa
 8006dee:	881a      	ldrh	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	4413      	add	r3, r2
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006dfe:	33fa      	adds	r3, #250	; 0xfa
 8006e00:	801a      	strh	r2, [r3, #0]
        buff->chans = chans;
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	809a      	strh	r2, [r3, #4]
        buff->len = mem;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	80da      	strh	r2, [r3, #6]
        memset(buff->data, 0, ln);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f00b fd3e 	bl	801289c <memset>
        uint32_t dma_p_sz = LL_DMA_PDATAALIGN_BYTE;
 8006e20:	2300      	movs	r3, #0
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t dma_m_sz = LL_DMA_MDATAALIGN_BYTE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	623b      	str	r3, [r7, #32]
        dma_set(src, dma, dma_ch, (uint32_t)((uint8_t*)buff->data), mem,
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	9203      	str	r2, [sp, #12]
 8006e34:	6a3a      	ldr	r2, [r7, #32]
 8006e36:	9202      	str	r2, [sp, #8]
 8006e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e3a:	9201      	str	r2, [sp, #4]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006e46:	f002 ff4d 	bl	8009ce4 <dma_set>
}
 8006e4a:	e042      	b.n	8006ed2 <daq_malloc+0x1ee>
        mem += reserve * 1;
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	4413      	add	r3, r2
 8006e52:	607b      	str	r3, [r7, #4]
        buff->reserve = reserve * 1;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	811a      	strh	r2, [r3, #8]
        size_t ln = mem * sizeof(uint8_t);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        buff->data = (uint8_t*)(((uint8_t*)self->buff_raw)+(self->buff_raw_ptr));
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006e6c:	33fa      	adds	r3, #250	; 0xfa
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	441a      	add	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	601a      	str	r2, [r3, #0]
        self->buff_raw_ptr += mem;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006e7c:	33fa      	adds	r3, #250	; 0xfa
 8006e7e:	881a      	ldrh	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	4413      	add	r3, r2
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8006e8e:	33fa      	adds	r3, #250	; 0xfa
 8006e90:	801a      	strh	r2, [r3, #0]
        buff->chans = chans;
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	809a      	strh	r2, [r3, #4]
        buff->len = mem;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	80da      	strh	r2, [r3, #6]
        memset(buff->data, 0, ln);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f00b fcf6 	bl	801289c <memset>
        dma_set(src, dma, EM_DMA_CH_LA, (uint32_t)((uint8_t*)buff->data), mem,
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	9203      	str	r2, [sp, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	9202      	str	r2, [sp, #8]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	9201      	str	r2, [sp, #4]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	2206      	movs	r2, #6
 8006eca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ecc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ece:	f002 ff09 	bl	8009ce4 <dma_set>
}
 8006ed2:	bf00      	nop
 8006ed4:	3730      	adds	r7, #48	; 0x30
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <daq_clear_buff>:

static void daq_clear_buff(daq_buff_t* buff)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
    buff->data = NULL;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]
    buff->chans = 0;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	809a      	strh	r2, [r3, #4]
    buff->len = 0;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	80da      	strh	r2, [r3, #6]
    buff->reserve = 0;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	811a      	strh	r2, [r3, #8]
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
	...

08006f08 <daq_bit_set>:

int daq_bit_set(daq_data_t* self, enum daq_bits bits)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	70fb      	strb	r3, [r7, #3]
    if (bits != B12 && bits != B8 && bits != B1)
 8006f14:	78fb      	ldrb	r3, [r7, #3]
 8006f16:	2b0c      	cmp	r3, #12
 8006f18:	d008      	beq.n	8006f2c <daq_bit_set+0x24>
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d005      	beq.n	8006f2c <daq_bit_set+0x24>
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d002      	beq.n	8006f2c <daq_bit_set+0x24>
        return -1;
 8006f26:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2a:	e05e      	b.n	8006fea <daq_bit_set+0xe2>

    self->set.bits = bits;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f32:	3306      	adds	r3, #6
 8006f34:	78fa      	ldrb	r2, [r7, #3]
 8006f36:	701a      	strb	r2, [r3, #0]
    if (bits == B12)
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	2b0c      	cmp	r3, #12
 8006f3c:	d106      	bne.n	8006f4c <daq_bit_set+0x44>
        self->adc_max_val = 4095;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f44:	332c      	adds	r3, #44	; 0x2c
 8006f46:	4a2b      	ldr	r2, [pc, #172]	; (8006ff4 <daq_bit_set+0xec>)
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	e010      	b.n	8006f6e <daq_bit_set+0x66>
    else if (bits == B8)
 8006f4c:	78fb      	ldrb	r3, [r7, #3]
 8006f4e:	2b08      	cmp	r3, #8
 8006f50:	d106      	bne.n	8006f60 <daq_bit_set+0x58>
        self->adc_max_val = 255;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f58:	332c      	adds	r3, #44	; 0x2c
 8006f5a:	4a27      	ldr	r2, [pc, #156]	; (8006ff8 <daq_bit_set+0xf0>)
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	e006      	b.n	8006f6e <daq_bit_set+0x66>
    else
        self->adc_max_val = 1;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f66:	332c      	adds	r3, #44	; 0x2c
 8006f68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006f6c:	601a      	str	r2, [r3, #0]

    if (self->mode == SCOPE || self->mode == VM)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f74:	3334      	adds	r3, #52	; 0x34
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d006      	beq.n	8006f8a <daq_bit_set+0x82>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006f82:	3334      	adds	r3, #52	; 0x34
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d12e      	bne.n	8006fe8 <daq_bit_set+0xe0>
    {
        daq_enable(self, 0);
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fa95 	bl	80074bc <daq_enable>
        daq_reset(self);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa24 	bl	80073e0 <daq_reset>
#ifndef EM_ADC_BIT8
            return -2;
#endif
        }

        uint32_t bits_raw = LL_ADC_RESOLUTION_12B;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60fb      	str	r3, [r7, #12]
#ifdef EM_ADC_BIT8
        if (bits == B8)
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d101      	bne.n	8006fa6 <daq_bit_set+0x9e>
            bits_raw = LL_ADC_RESOLUTION_8B;
 8006fa2:	2310      	movs	r3, #16
 8006fa4:	60fb      	str	r3, [r7, #12]
#endif

#if defined(EM_ADC_MODE_ADC1) || defined(EM_ADC_MODE_ADC12) || defined(EM_ADC_MODE_ADC1234)
        adc_set_res(ADC1, bits_raw);
 8006fa6:	68f9      	ldr	r1, [r7, #12]
 8006fa8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006fac:	f002 fffb 	bl	8009fa6 <adc_set_res>
#endif

#if defined(EM_ADC_MODE_ADC12) || defined(EM_ADC_MODE_ADC1234)
        adc_set_res(ADC2, bits_raw);
 8006fb0:	68f9      	ldr	r1, [r7, #12]
 8006fb2:	4812      	ldr	r0, [pc, #72]	; (8006ffc <daq_bit_set+0xf4>)
 8006fb4:	f002 fff7 	bl	8009fa6 <adc_set_res>
#endif

#if defined(EM_ADC_MODE_ADC1234)
        adc_set_res(ADC3, bits_raw);
 8006fb8:	68f9      	ldr	r1, [r7, #12]
 8006fba:	4811      	ldr	r0, [pc, #68]	; (8007000 <daq_bit_set+0xf8>)
 8006fbc:	f002 fff3 	bl	8009fa6 <adc_set_res>
        adc_set_res(ADC4, bits_raw);
 8006fc0:	68f9      	ldr	r1, [r7, #12]
 8006fc2:	4810      	ldr	r0, [pc, #64]	; (8007004 <daq_bit_set+0xfc>)
 8006fc4:	f002 ffef 	bl	8009fa6 <adc_set_res>
#endif
        int ret = daq_mem_set(self, self->set.mem);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8006fce:	3304      	adds	r3, #4
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff fce3 	bl	80069a0 <daq_mem_set>
 8006fda:	60b8      	str	r0, [r7, #8]

        daq_enable(self, 1);
 8006fdc:	2101      	movs	r1, #1
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa6c 	bl	80074bc <daq_enable>

        return ret;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	e000      	b.n	8006fea <daq_bit_set+0xe2>
    }
    return 0;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	457ff000 	.word	0x457ff000
 8006ff8:	437f0000 	.word	0x437f0000
 8006ffc:	50000100 	.word	0x50000100
 8007000:	50000400 	.word	0x50000400
 8007004:	50000500 	.word	0x50000500

08007008 <daq_fs_set>:

int daq_fs_set(daq_data_t* self, float fs)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08a      	sub	sp, #40	; 0x28
 800700c:	af02      	add	r7, sp, #8
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	ed87 0a00 	vstr	s0, [r7]
    uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800701a:	3334      	adds	r3, #52	; 0x34
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b01      	cmp	r3, #1
 8007020:	bf0c      	ite	eq
 8007022:	2301      	moveq	r3, #1
 8007024:	2300      	movne	r3, #0
 8007026:	b2db      	uxtb	r3, r3
 8007028:	77fb      	strb	r3, [r7, #31]
    float fs2 = fs;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	61bb      	str	r3, [r7, #24]
    if (channs == 1)
        fs2 /= 2.0;
#endif

#elif defined(EM_ADC_MODE_ADC1234)
    float scope_max_fs = (self->set.bits == B12 ? EM_DAQ_MAX_B12_FS : EM_DAQ_MAX_B8_FS) / (float)(self->set.ch1_en ? 1 + is_vcc : 1);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007034:	3306      	adds	r3, #6
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b0c      	cmp	r3, #12
 800703a:	d102      	bne.n	8007042 <daq_fs_set+0x3a>
 800703c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8007128 <daq_fs_set+0x120>
 8007040:	e001      	b.n	8007046 <daq_fs_set+0x3e>
 8007042:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800712c <daq_fs_set+0x124>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800704c:	33fc      	adds	r3, #252	; 0xfc
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d006      	beq.n	8007062 <daq_fs_set+0x5a>
 8007054:	7ffb      	ldrb	r3, [r7, #31]
 8007056:	3301      	adds	r3, #1
 8007058:	ee07 3a90 	vmov	s15, r3
 800705c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007060:	e001      	b.n	8007066 <daq_fs_set+0x5e>
 8007062:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800706a:	ed87 7a05 	vstr	s14, [r7, #20]
        fs2 /= 4.0;
#endif

#endif

    if (fs2 < 1 || fs2 > (self->mode == LA ? EM_LA_MAX_FS : scope_max_fs))
 800706e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800707a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707e:	d412      	bmi.n	80070a6 <daq_fs_set+0x9e>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007086:	3334      	adds	r3, #52	; 0x34
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d002      	beq.n	8007094 <daq_fs_set+0x8c>
 800708e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007092:	e001      	b.n	8007098 <daq_fs_set+0x90>
 8007094:	eddf 7a26 	vldr	s15, [pc, #152]	; 8007130 <daq_fs_set+0x128>
 8007098:	ed97 7a06 	vldr	s14, [r7, #24]
 800709c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a4:	d502      	bpl.n	80070ac <daq_fs_set+0xa4>
        return -1;
 80070a6:	f04f 33ff 	mov.w	r3, #4294967295
 80070aa:	e038      	b.n	800711e <daq_fs_set+0x116>

    self->set.fs = fs;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	601a      	str	r2, [r3, #0]

    daq_enable(self, 0);
 80070b6:	2100      	movs	r1, #0
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f9ff 	bl	80074bc <daq_enable>
    daq_reset(self);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f98e 	bl	80073e0 <daq_reset>

    int prescaler = 1;
 80070c4:	2301      	movs	r3, #1
 80070c6:	613b      	str	r3, [r7, #16]
    int reload = 1;
 80070c8:	2301      	movs	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
    self->set.fs = get_freq(&prescaler, &reload, EM_TIM_DAQ_MAX, EM_TIM_DAQ_FREQ, fs2);
 80070cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80070d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070d4:	ee17 3a90 	vmov	r3, s15
 80070d8:	f107 010c 	add.w	r1, r7, #12
 80070dc:	f107 0010 	add.w	r0, r7, #16
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	4b14      	ldr	r3, [pc, #80]	; (8007134 <daq_fs_set+0x12c>)
 80070e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070e8:	f005 fd7a 	bl	800cbe0 <get_freq>
 80070ec:	eef0 7a40 	vmov.f32	s15, s0
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80070f6:	edc3 7a00 	vstr	s15, [r3]

    LL_TIM_SetPrescaler(EM_TIM_DAQ, prescaler);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	4619      	mov	r1, r3
 80070fe:	480e      	ldr	r0, [pc, #56]	; (8007138 <daq_fs_set+0x130>)
 8007100:	f7ff fa58 	bl	80065b4 <LL_TIM_SetPrescaler>
    LL_TIM_SetAutoReload(EM_TIM_DAQ, reload);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4619      	mov	r1, r3
 8007108:	480b      	ldr	r0, [pc, #44]	; (8007138 <daq_fs_set+0x130>)
 800710a:	f7ff fa61 	bl	80065d0 <LL_TIM_SetAutoReload>

    daq_trig_update(self);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f001 ff46 	bl	8008fa0 <daq_trig_update>
    daq_enable(self, 1);
 8007114:	2101      	movs	r1, #1
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f9d0 	bl	80074bc <daq_enable>
    return 0;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	48c35000 	.word	0x48c35000
 800712c:	48f42400 	.word	0x48f42400
 8007130:	4a989680 	.word	0x4a989680
 8007134:	044aa200 	.word	0x044aa200
 8007138:	40000400 	.word	0x40000400
 800713c:	00000000 	.word	0x00000000

08007140 <daq_ch_set>:

int daq_ch_set(daq_data_t* self, uint8_t ch1, uint8_t ch2, uint8_t ch3, uint8_t ch4, float fs)
{
 8007140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007144:	b090      	sub	sp, #64	; 0x40
 8007146:	af04      	add	r7, sp, #16
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	4608      	mov	r0, r1
 800714c:	4611      	mov	r1, r2
 800714e:	461a      	mov	r2, r3
 8007150:	ed87 0a01 	vstr	s0, [r7, #4]
 8007154:	4603      	mov	r3, r0
 8007156:	72fb      	strb	r3, [r7, #11]
 8007158:	460b      	mov	r3, r1
 800715a:	72bb      	strb	r3, [r7, #10]
 800715c:	4613      	mov	r3, r2
 800715e:	727b      	strb	r3, [r7, #9]
    self->set.ch1_en = ch1;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8007166:	33fc      	adds	r3, #252	; 0xfc
 8007168:	7afa      	ldrb	r2, [r7, #11]
 800716a:	701a      	strb	r2, [r3, #0]
    self->set.ch2_en = ch2;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8007172:	33fd      	adds	r3, #253	; 0xfd
 8007174:	7aba      	ldrb	r2, [r7, #10]
 8007176:	701a      	strb	r2, [r3, #0]
    self->set.ch3_en = ch3;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800717e:	33fe      	adds	r3, #254	; 0xfe
 8007180:	7a7a      	ldrb	r2, [r7, #9]
 8007182:	701a      	strb	r2, [r3, #0]
    self->set.ch4_en = ch4;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800718a:	33ff      	adds	r3, #255	; 0xff
 800718c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8007190:	701a      	strb	r2, [r3, #0]

    if (self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en <= 0)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8007198:	33fc      	adds	r3, #252	; 0xfc
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80071a4:	33fd      	adds	r3, #253	; 0xfd
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	441a      	add	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80071b0:	33fe      	adds	r3, #254	; 0xfe
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	441a      	add	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80071bc:	33ff      	adds	r3, #255	; 0xff
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	4413      	add	r3, r2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	dc02      	bgt.n	80071cc <daq_ch_set+0x8c>
        return -1;
 80071c6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ca:	e0f3      	b.n	80073b4 <daq_ch_set+0x274>

    int reen = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (self->enabled)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80071d6:	3336      	adds	r3, #54	; 0x36
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <daq_ch_set+0xb0>
    {
        reen = 1;
 80071de:	2301      	movs	r3, #1
 80071e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        daq_enable(self, 0);
 80071e2:	2100      	movs	r1, #0
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 f969 	bl	80074bc <daq_enable>
        daq_reset(self);
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f8f8 	bl	80073e0 <daq_reset>
    }

    if (self->mode != LA)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80071f6:	3334      	adds	r3, #52	; 0x34
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	f000 80c8 	beq.w	8007390 <daq_ch_set+0x250>
    {
        if (fs <= 0)
 8007200:	edd7 7a01 	vldr	s15, [r7, #4]
 8007204:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720c:	d802      	bhi.n	8007214 <daq_ch_set+0xd4>
            return -1;
 800720e:	f04f 33ff 	mov.w	r3, #4294967295
 8007212:	e0cf      	b.n	80073b4 <daq_ch_set+0x274>

        uint8_t is_vcc = (self->mode == VM ? 1 : 0);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800721a:	3334      	adds	r3, #52	; 0x34
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b01      	cmp	r3, #1
 8007220:	bf0c      	ite	eq
 8007222:	2301      	moveq	r3, #1
 8007224:	2300      	movne	r3, #0
 8007226:	b2db      	uxtb	r3, r3
 8007228:	77fb      	strb	r3, [r7, #31]
        uint32_t smpl_time = EM_ADC_SMPLT[0];
 800722a:	4b67      	ldr	r3, [pc, #412]	; (80073c8 <daq_ch_set+0x288>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	62bb      	str	r3, [r7, #40]	; 0x28
        float smpl_time_n = EM_ADC_SMPLT_N[0];
 8007230:	4b66      	ldr	r3, [pc, #408]	; (80073cc <daq_ch_set+0x28c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
        int channs = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	61bb      	str	r3, [r7, #24]
#elif defined(EM_ADC_MODE_ADC12)
        int len1 = self->set.ch1_en + self->set.ch2_en + is_vcc;
        int len2 = self->set.ch3_en + self->set.ch4_en;
        channs = len1 > len2 ? len1 : len2;
#elif defined(EM_ADC_MODE_ADC1234)
        channs = is_vcc ? 2 : 1;
 800723a:	7ffb      	ldrb	r3, [r7, #31]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <daq_ch_set+0x104>
 8007240:	2302      	movs	r3, #2
 8007242:	e000      	b.n	8007246 <daq_ch_set+0x106>
 8007244:	2301      	movs	r3, #1
 8007246:	61bb      	str	r3, [r7, #24]
#endif

        float T = 1.0 / fs;
 8007248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724c:	ed97 7a01 	vldr	s14, [r7, #4]
 8007250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007254:	edc7 7a05 	vstr	s15, [r7, #20]
        for (int i = 0; i < EM_ADC_SMPLT_CNT; i++) // find best sample time
 8007258:	2300      	movs	r3, #0
 800725a:	623b      	str	r3, [r7, #32]
 800725c:	e05b      	b.n	8007316 <daq_ch_set+0x1d6>
        {
            if (((float)channs * EM_ADC_1CH_SMPL_TM(EM_ADC_SMPLT_N[i] + 0.5, (self->set.bits == B12 ? EM_ADC_TCONV12 : EM_ADC_TCONV8))) < T)
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007268:	ee17 0a90 	vmov	r0, s15
 800726c:	f7f9 f984 	bl	8000578 <__aeabi_f2d>
 8007270:	4604      	mov	r4, r0
 8007272:	460d      	mov	r5, r1
 8007274:	4a55      	ldr	r2, [pc, #340]	; (80073cc <daq_ch_set+0x28c>)
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4618      	mov	r0, r3
 8007280:	f7f9 f97a 	bl	8000578 <__aeabi_f2d>
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	4b51      	ldr	r3, [pc, #324]	; (80073d0 <daq_ch_set+0x290>)
 800728a:	f7f9 f817 	bl	80002bc <__adddf3>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4690      	mov	r8, r2
 8007294:	4699      	mov	r9, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800729c:	3306      	adds	r3, #6
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b0c      	cmp	r3, #12
 80072a2:	d103      	bne.n	80072ac <daq_ch_set+0x16c>
 80072a4:	f04f 0000 	mov.w	r0, #0
 80072a8:	494a      	ldr	r1, [pc, #296]	; (80073d4 <daq_ch_set+0x294>)
 80072aa:	e002      	b.n	80072b2 <daq_ch_set+0x172>
 80072ac:	f04f 0000 	mov.w	r0, #0
 80072b0:	4949      	ldr	r1, [pc, #292]	; (80073d8 <daq_ch_set+0x298>)
 80072b2:	4642      	mov	r2, r8
 80072b4:	464b      	mov	r3, r9
 80072b6:	f7f9 f801 	bl	80002bc <__adddf3>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4610      	mov	r0, r2
 80072c0:	4619      	mov	r1, r3
 80072c2:	a33f      	add	r3, pc, #252	; (adr r3, 80073c0 <daq_ch_set+0x280>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f7f9 f9ae 	bl	8000628 <__aeabi_dmul>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4620      	mov	r0, r4
 80072d2:	4629      	mov	r1, r5
 80072d4:	f7f9 f9a8 	bl	8000628 <__aeabi_dmul>
 80072d8:	4603      	mov	r3, r0
 80072da:	460c      	mov	r4, r1
 80072dc:	4625      	mov	r5, r4
 80072de:	461c      	mov	r4, r3
 80072e0:	6978      	ldr	r0, [r7, #20]
 80072e2:	f7f9 f949 	bl	8000578 <__aeabi_f2d>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4620      	mov	r0, r4
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7f9 fc0d 	bl	8000b0c <__aeabi_dcmplt>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d100      	bne.n	80072fa <daq_ch_set+0x1ba>
                smpl_time = EM_ADC_SMPLT[i];
                smpl_time_n = EM_ADC_SMPLT_N[i];
            }
            else
            {
                break;
 80072f8:	e010      	b.n	800731c <daq_ch_set+0x1dc>
                smpl_time = EM_ADC_SMPLT[i];
 80072fa:	4a33      	ldr	r2, [pc, #204]	; (80073c8 <daq_ch_set+0x288>)
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007302:	62bb      	str	r3, [r7, #40]	; 0x28
                smpl_time_n = EM_ADC_SMPLT_N[i];
 8007304:	4a31      	ldr	r2, [pc, #196]	; (80073cc <daq_ch_set+0x28c>)
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
        for (int i = 0; i < EM_ADC_SMPLT_CNT; i++) // find best sample time
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	3301      	adds	r3, #1
 8007314:	623b      	str	r3, [r7, #32]
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	2b07      	cmp	r3, #7
 800731a:	dda0      	ble.n	800725e <daq_ch_set+0x11e>
            }
        }
        self->smpl_time = smpl_time_n;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007322:	3328      	adds	r3, #40	; 0x28
 8007324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007326:	601a      	str	r2, [r3, #0]
        else
            self->interleaved = 0;
#endif

#elif defined(EM_ADC_MODE_ADC1234) /* --------------------------------------------------------------------------*/
        adc_set_ch(ADC1, ch1, 0, 0, 0, smpl_time, is_vcc);
 8007328:	7af9      	ldrb	r1, [r7, #11]
 800732a:	7ffb      	ldrb	r3, [r7, #31]
 800732c:	9302      	str	r3, [sp, #8]
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	9301      	str	r3, [sp, #4]
 8007332:	2300      	movs	r3, #0
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	2300      	movs	r3, #0
 8007338:	2200      	movs	r2, #0
 800733a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800733e:	f002 fd4b 	bl	8009dd8 <adc_set_ch>
        adc_set_ch(ADC2, 0, ch2, 0, 0, smpl_time, 0);
 8007342:	7aba      	ldrb	r2, [r7, #10]
 8007344:	2300      	movs	r3, #0
 8007346:	9302      	str	r3, [sp, #8]
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	9301      	str	r3, [sp, #4]
 800734c:	2300      	movs	r3, #0
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	2300      	movs	r3, #0
 8007352:	2100      	movs	r1, #0
 8007354:	4821      	ldr	r0, [pc, #132]	; (80073dc <daq_ch_set+0x29c>)
 8007356:	f002 fd3f 	bl	8009dd8 <adc_set_ch>
        adc_set_ch(ADC1, 0, 0, ch3, 0, smpl_time, 0);
 800735a:	7a7a      	ldrb	r2, [r7, #9]
 800735c:	2300      	movs	r3, #0
 800735e:	9302      	str	r3, [sp, #8]
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	2300      	movs	r3, #0
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	4613      	mov	r3, r2
 800736a:	2200      	movs	r2, #0
 800736c:	2100      	movs	r1, #0
 800736e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007372:	f002 fd31 	bl	8009dd8 <adc_set_ch>
        adc_set_ch(ADC2, 0, 0, 0, ch4, smpl_time, 0);
 8007376:	2300      	movs	r3, #0
 8007378:	9302      	str	r3, [sp, #8]
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	2300      	movs	r3, #0
 8007386:	2200      	movs	r2, #0
 8007388:	2100      	movs	r1, #0
 800738a:	4814      	ldr	r0, [pc, #80]	; (80073dc <daq_ch_set+0x29c>)
 800738c:	f002 fd24 	bl	8009dd8 <adc_set_ch>
#endif

#endif
    }

    int ret = daq_mem_set(self, self->set.mem);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007396:	3304      	adds	r3, #4
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	4619      	mov	r1, r3
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff faff 	bl	80069a0 <daq_mem_set>
 80073a2:	6138      	str	r0, [r7, #16]

    if (reen)
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <daq_ch_set+0x272>
        daq_enable(self, 1);
 80073aa:	2101      	movs	r1, #1
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 f885 	bl	80074bc <daq_enable>
    return ret;
 80073b2:	693b      	ldr	r3, [r7, #16]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3730      	adds	r7, #48	; 0x30
 80073b8:	46bd      	mov	sp, r7
 80073ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80073be:	bf00      	nop
 80073c0:	5698c2c2 	.word	0x5698c2c2
 80073c4:	3e4dd37f 	.word	0x3e4dd37f
 80073c8:	08015ec0 	.word	0x08015ec0
 80073cc:	08015ee0 	.word	0x08015ee0
 80073d0:	3fe00000 	.word	0x3fe00000
 80073d4:	40290000 	.word	0x40290000
 80073d8:	40210000 	.word	0x40210000
 80073dc:	50000100 	.word	0x50000100

080073e0 <daq_reset>:

void daq_reset(daq_data_t* self)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
    self->trig.uwtick_first = 0;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80073ee:	3394      	adds	r3, #148	; 0x94
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
    self->trig.pretrig_cntr = 0;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80073fa:	3398      	adds	r3, #152	; 0x98
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]
    self->trig.posttrig_size = 0;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007406:	33a4      	adds	r3, #164	; 0xa4
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
    self->trig.ready_last = 0;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007412:	337b      	adds	r3, #123	; 0x7b
 8007414:	2200      	movs	r2, #0
 8007416:	701a      	strb	r2, [r3, #0]
    self->trig.ready = 0;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800741e:	337a      	adds	r3, #122	; 0x7a
 8007420:	2200      	movs	r2, #0
 8007422:	701a      	strb	r2, [r3, #0]
    self->trig.cntr = 0;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800742a:	337c      	adds	r3, #124	; 0x7c
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
    self->trig.all_cntr = 0;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007436:	3380      	adds	r3, #128	; 0x80
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]
    //self->trig.pos_frst = 0;
    //self->trig.pos_trig = 0;
    //self->trig.pos_last = 0;
    //self->trig.pos_diff = 0;
    self->trig.pretrig_cntr = 0;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007442:	3398      	adds	r3, #152	; 0x98
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
    self->trig.is_post = 0;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800744e:	3378      	adds	r3, #120	; 0x78
 8007450:	2200      	movs	r2, #0
 8007452:	701a      	strb	r2, [r3, #0]

    if (self->buff1.len > 0)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	88db      	ldrh	r3, [r3, #6]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d007      	beq.n	800746c <daq_reset+0x8c>
        memset(self->buff1.data, 0, self->buff1.len);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6818      	ldr	r0, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	88db      	ldrh	r3, [r3, #6]
 8007464:	461a      	mov	r2, r3
 8007466:	2100      	movs	r1, #0
 8007468:	f00b fa18 	bl	801289c <memset>
    if (self->buff2.len > 0)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	8a5b      	ldrh	r3, [r3, #18]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d007      	beq.n	8007484 <daq_reset+0xa4>
        memset(self->buff2.data, 0, self->buff2.len);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68d8      	ldr	r0, [r3, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8a5b      	ldrh	r3, [r3, #18]
 800747c:	461a      	mov	r2, r3
 800747e:	2100      	movs	r1, #0
 8007480:	f00b fa0c 	bl	801289c <memset>
    if (self->buff3.len > 0)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	8bdb      	ldrh	r3, [r3, #30]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d007      	beq.n	800749c <daq_reset+0xbc>
        memset(self->buff3.data, 0, self->buff3.len);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6998      	ldr	r0, [r3, #24]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8bdb      	ldrh	r3, [r3, #30]
 8007494:	461a      	mov	r2, r3
 8007496:	2100      	movs	r1, #0
 8007498:	f00b fa00 	bl	801289c <memset>
    if (self->buff4.len > 0)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d007      	beq.n	80074b4 <daq_reset+0xd4>
        memset(self->buff4.data, 0, self->buff4.len);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ac:	461a      	mov	r2, r3
 80074ae:	2100      	movs	r1, #0
 80074b0:	f00b f9f4 	bl	801289c <memset>
}
 80074b4:	bf00      	nop
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <daq_enable>:

void daq_enable(daq_data_t* self, uint8_t enable)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
    if (!enable)
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d102      	bne.n	80074d4 <daq_enable+0x18>
    {
        LL_TIM_DisableCounter(EM_TIM_DAQ);
 80074ce:	485c      	ldr	r0, [pc, #368]	; (8007640 <daq_enable+0x184>)
 80074d0:	f7ff f860 	bl	8006594 <LL_TIM_DisableCounter>
        //for (int i = 0; i < 1000; i++) __asm("nop");
    }

    if (self->enabled && self->dis_hold)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80074da:	3336      	adds	r3, #54	; 0x36
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <daq_enable+0x36>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80074e8:	3335      	adds	r3, #53	; 0x35
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f040 80a3 	bne.w	8007638 <daq_enable+0x17c>
        return;

    self->trig.pretrig_cntr = 0;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80074f8:	3398      	adds	r3, #152	; 0x98
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]
    self->trig.all_cntr = 0;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007504:	3380      	adds	r3, #128	; 0x80
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
    self->trig.cntr = 0;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007510:	337c      	adds	r3, #124	; 0x7c
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
    self->trig.ignore = 0;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800751c:	3379      	adds	r3, #121	; 0x79
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]

    if (self->mode == SCOPE || self->mode == VM)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007528:	3334      	adds	r3, #52	; 0x34
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d006      	beq.n	800753e <daq_enable+0x82>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007536:	3334      	adds	r3, #52	; 0x34
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d120      	bne.n	8007580 <daq_enable+0xc4>
    {

#if defined(EM_ADC_MODE_ADC1) || defined(EM_ADC_MODE_ADC12) || defined(EM_ADC_MODE_ADC1234)
        daq_enable_adc(self, ADC1, enable, EM_DMA_CH_ADC1);
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	2301      	movs	r3, #1
 8007542:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f884 	bl	8007654 <daq_enable_adc>
#endif

        if (!self->interleaved)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007552:	3337      	adds	r3, #55	; 0x37
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d14a      	bne.n	80075f0 <daq_enable+0x134>
        {
#if defined(EM_ADC_MODE_ADC12) || defined(EM_ADC_MODE_ADC1234)
        daq_enable_adc(self, ADC2, enable, EM_DMA_CH_ADC2);
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	2301      	movs	r3, #1
 800755e:	4939      	ldr	r1, [pc, #228]	; (8007644 <daq_enable+0x188>)
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f877 	bl	8007654 <daq_enable_adc>
#endif

#if defined(EM_ADC_MODE_ADC1234)
        daq_enable_adc(self, ADC3, enable, EM_DMA_CH_ADC3);
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	2305      	movs	r3, #5
 800756a:	4937      	ldr	r1, [pc, #220]	; (8007648 <daq_enable+0x18c>)
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f871 	bl	8007654 <daq_enable_adc>
        daq_enable_adc(self, ADC4, enable, EM_DMA_CH_ADC4);
 8007572:	78fa      	ldrb	r2, [r7, #3]
 8007574:	2302      	movs	r3, #2
 8007576:	4935      	ldr	r1, [pc, #212]	; (800764c <daq_enable+0x190>)
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f86b 	bl	8007654 <daq_enable_adc>
        if (!self->interleaved)
 800757e:	e037      	b.n	80075f0 <daq_enable+0x134>
        }

    }
    else //if(self->mode == LA)
    {
        ASSERT(self->trig.exti_trig != 0);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007586:	33bc      	adds	r3, #188	; 0xbc
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <daq_enable+0xdc>
 800758e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8007592:	482f      	ldr	r0, [pc, #188]	; (8007650 <daq_enable+0x194>)
 8007594:	f005 f96b 	bl	800c86e <assert2>

        if (enable)
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d01c      	beq.n	80075d8 <daq_enable+0x11c>
        {
            LL_TIM_EnableDMAReq_CC1(EM_TIM_DAQ);
 800759e:	4828      	ldr	r0, [pc, #160]	; (8007640 <daq_enable+0x184>)
 80075a0:	f7ff f824 	bl	80065ec <LL_TIM_EnableDMAReq_CC1>
            NVIC_ClearPendingIRQ(self->trig.exti_trig);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80075aa:	33bc      	adds	r3, #188	; 0xbc
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	b25b      	sxtb	r3, r3
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe fed9 	bl	8006368 <__NVIC_ClearPendingIRQ>
            if (self->trig.set.mode != DISABLED)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80075bc:	3340      	adds	r3, #64	; 0x40
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d015      	beq.n	80075f0 <daq_enable+0x134>
                NVIC_EnableIRQ(self->trig.exti_trig);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80075ca:	33bc      	adds	r3, #188	; 0xbc
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	b25b      	sxtb	r3, r3
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fe fe89 	bl	80062e8 <__NVIC_EnableIRQ>
 80075d6:	e00b      	b.n	80075f0 <daq_enable+0x134>
            //LL_EXTI_EnableIT_0_31(EM_LA_EXTI1);
        }
        else
        {
            LL_TIM_DisableDMAReq_CC1(EM_TIM_DAQ);
 80075d8:	4819      	ldr	r0, [pc, #100]	; (8007640 <daq_enable+0x184>)
 80075da:	f7ff f817 	bl	800660c <LL_TIM_DisableDMAReq_CC1>
            NVIC_DisableIRQ(self->trig.exti_trig);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80075e4:	33bc      	adds	r3, #188	; 0xbc
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	b25b      	sxtb	r3, r3
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fe9a 	bl	8006324 <__NVIC_DisableIRQ>
        }
    }
    if (enable)
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <daq_enable+0x142>
        LL_TIM_EnableCounter(EM_TIM_DAQ);
 80075f6:	4812      	ldr	r0, [pc, #72]	; (8007640 <daq_enable+0x184>)
 80075f8:	f7fe ffbc 	bl	8006574 <LL_TIM_EnableCounter>
 80075fc:	e00b      	b.n	8007616 <daq_enable+0x15a>
    else
        for (int i = 0; i < 10000; i++) __asm("nop"); // let DMA and ADC finish their jobs
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e003      	b.n	800760c <daq_enable+0x150>
 8007604:	bf00      	nop
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3301      	adds	r3, #1
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007612:	4293      	cmp	r3, r2
 8007614:	ddf6      	ble.n	8007604 <daq_enable+0x148>

    self->enabled = enable;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800761c:	3336      	adds	r3, #54	; 0x36
 800761e:	78fa      	ldrb	r2, [r7, #3]
 8007620:	701a      	strb	r2, [r3, #0]
    self->trig.uwtick_first = self->uwTick;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007628:	3330      	adds	r3, #48	; 0x30
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007632:	3394      	adds	r3, #148	; 0x94
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	e000      	b.n	800763a <daq_enable+0x17e>
        return;
 8007638:	bf00      	nop
}
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40000400 	.word	0x40000400
 8007644:	50000100 	.word	0x50000100
 8007648:	50000400 	.word	0x50000400
 800764c:	50000500 	.word	0x50000500
 8007650:	080159d0 	.word	0x080159d0

08007654 <daq_enable_adc>:

static void daq_enable_adc(daq_data_t* self, ADC_TypeDef* adc, uint8_t enable, uint32_t dma_ch)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	4613      	mov	r3, r2
 8007662:	71fb      	strb	r3, [r7, #7]
    if (enable)
 8007664:	79fb      	ldrb	r3, [r7, #7]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <daq_enable_adc+0x1e>
    {
#ifdef LL_ADC_SPEC_START
        LL_ADC_REG_StartConversionExtTrig(adc, LL_ADC_REG_TRIG_EXT_RISING);
#else
        LL_ADC_REG_StartConversion(adc);
 800766a:	68b8      	ldr	r0, [r7, #8]
 800766c:	f7fe ff5a 	bl	8006524 <LL_ADC_REG_StartConversion>
#else
        LL_ADC_REG_StopConversion(adc);
#endif
        LL_ADC_SetAnalogWDMonitChannels(adc, EM_ADC_AWD LL_ADC_AWD_DISABLE);
    }
}
 8007670:	e007      	b.n	8007682 <daq_enable_adc+0x2e>
        LL_ADC_REG_StopConversion(adc);
 8007672:	68b8      	ldr	r0, [r7, #8]
 8007674:	f7fe ff6a 	bl	800654c <LL_ADC_REG_StopConversion>
        LL_ADC_SetAnalogWDMonitChannels(adc, EM_ADC_AWD LL_ADC_AWD_DISABLE);
 8007678:	2200      	movs	r2, #0
 800767a:	4904      	ldr	r1, [pc, #16]	; (800768c <daq_enable_adc+0x38>)
 800767c:	68b8      	ldr	r0, [r7, #8]
 800767e:	f7fe ff17 	bl	80064b0 <LL_ADC_SetAnalogWDMonitChannels>
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	7dc00000 	.word	0x7dc00000

08007690 <daq_mode_set>:

void daq_mode_set(daq_data_t* self, enum daq_mode mode)
{
 8007690:	b590      	push	{r4, r7, lr}
 8007692:	b091      	sub	sp, #68	; 0x44
 8007694:	af02      	add	r7, sp, #8
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
    if (self->mode == SCOPE)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80076a2:	3334      	adds	r3, #52	; 0x34
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d112      	bne.n	80076d0 <daq_mode_set+0x40>
        daq_settings_save(&self->set, &self->trig.set, &self->save_s, &self->trig.save_s);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f503 4043 	add.w	r0, r3, #49920	; 0xc300
 80076b0:	30fc      	adds	r0, #252	; 0xfc
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f503 4144 	add.w	r1, r3, #50176	; 0xc400
 80076b8:	313c      	adds	r1, #60	; 0x3c
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f503 4244 	add.w	r2, r3, #50176	; 0xc400
 80076c0:	3208      	adds	r2, #8
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80076c8:	3350      	adds	r3, #80	; 0x50
 80076ca:	f7ff f87c 	bl	80067c6 <daq_settings_save>
 80076ce:	e018      	b.n	8007702 <daq_mode_set+0x72>
    else if (self->mode == LA)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80076d6:	3334      	adds	r3, #52	; 0x34
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d111      	bne.n	8007702 <daq_mode_set+0x72>
        daq_settings_save(&self->set, &self->trig.set, &self->save_l, &self->trig.save_l);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f503 4043 	add.w	r0, r3, #49920	; 0xc300
 80076e4:	30fc      	adds	r0, #252	; 0xfc
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f503 4144 	add.w	r1, r3, #50176	; 0xc400
 80076ec:	313c      	adds	r1, #60	; 0x3c
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f503 4244 	add.w	r2, r3, #50176	; 0xc400
 80076f4:	3214      	adds	r2, #20
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80076fc:	3364      	adds	r3, #100	; 0x64
 80076fe:	f7ff f862 	bl	80067c6 <daq_settings_save>

    daq_enable(self, 0);
 8007702:	2100      	movs	r1, #0
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff fed9 	bl	80074bc <daq_enable>
    daq_reset(self);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff fe68 	bl	80073e0 <daq_reset>
    self->dis_hold = 1;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007716:	3335      	adds	r3, #53	; 0x35
 8007718:	2201      	movs	r2, #1
 800771a:	701a      	strb	r2, [r3, #0]
    self->mode = mode;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007722:	3334      	adds	r3, #52	; 0x34
 8007724:	78fa      	ldrb	r2, [r7, #3]
 8007726:	701a      	strb	r2, [r3, #0]

    // GPIO init
    if (mode == SCOPE || mode == VM)
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <daq_mode_set+0xa4>
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d12e      	bne.n	8007792 <daq_mode_set+0x102>
    {
        LL_GPIO_InitTypeDef GPIO_InitStruct =
 8007734:	f107 0320 	add.w	r3, r7, #32
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	605a      	str	r2, [r3, #4]
 800773e:	609a      	str	r2, [r3, #8]
 8007740:	60da      	str	r2, [r3, #12]
 8007742:	611a      	str	r2, [r3, #16]
 8007744:	615a      	str	r2, [r3, #20]
 8007746:	2301      	movs	r3, #1
 8007748:	623b      	str	r3, [r7, #32]
 800774a:	2303      	movs	r3, #3
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
 800774e:	2303      	movs	r3, #3
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            .Pin = EM_GPIO_ADC_CH1,
            .Speed = LL_GPIO_SPEED_FREQ_HIGH,
            .Mode = LL_GPIO_MODE_ANALOG
        };
        LL_GPIO_Init(EM_GPIO_ADC_PORT1, &GPIO_InitStruct);
 8007752:	f107 0320 	add.w	r3, r7, #32
 8007756:	4619      	mov	r1, r3
 8007758:	489b      	ldr	r0, [pc, #620]	; (80079c8 <daq_mode_set+0x338>)
 800775a:	f7fc fbe4 	bl	8003f26 <LL_GPIO_Init>
        GPIO_InitStruct.Pin = EM_GPIO_ADC_CH2;
 800775e:	2302      	movs	r3, #2
 8007760:	623b      	str	r3, [r7, #32]
        LL_GPIO_Init(EM_GPIO_ADC_PORT2, &GPIO_InitStruct);
 8007762:	f107 0320 	add.w	r3, r7, #32
 8007766:	4619      	mov	r1, r3
 8007768:	4897      	ldr	r0, [pc, #604]	; (80079c8 <daq_mode_set+0x338>)
 800776a:	f7fc fbdc 	bl	8003f26 <LL_GPIO_Init>
        GPIO_InitStruct.Pin = EM_GPIO_ADC_CH3;
 800776e:	2301      	movs	r3, #1
 8007770:	623b      	str	r3, [r7, #32]
        LL_GPIO_Init(EM_GPIO_ADC_PORT3, &GPIO_InitStruct);
 8007772:	f107 0320 	add.w	r3, r7, #32
 8007776:	4619      	mov	r1, r3
 8007778:	4894      	ldr	r0, [pc, #592]	; (80079cc <daq_mode_set+0x33c>)
 800777a:	f7fc fbd4 	bl	8003f26 <LL_GPIO_Init>
        GPIO_InitStruct.Pin = EM_GPIO_ADC_CH4;
 800777e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007782:	623b      	str	r3, [r7, #32]
        LL_GPIO_Init(EM_GPIO_ADC_PORT4, &GPIO_InitStruct);
 8007784:	f107 0320 	add.w	r3, r7, #32
 8007788:	4619      	mov	r1, r3
 800778a:	4890      	ldr	r0, [pc, #576]	; (80079cc <daq_mode_set+0x33c>)
 800778c:	f7fc fbcb 	bl	8003f26 <LL_GPIO_Init>
    {
 8007790:	e012      	b.n	80077b8 <daq_mode_set+0x128>
    }
    else // if (mode == LA)
    {
        LL_GPIO_InitTypeDef GPIO_InitStruct =
 8007792:	f107 0308 	add.w	r3, r7, #8
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	605a      	str	r2, [r3, #4]
 800779c:	609a      	str	r2, [r3, #8]
 800779e:	60da      	str	r2, [r3, #12]
 80077a0:	611a      	str	r2, [r3, #16]
 80077a2:	615a      	str	r2, [r3, #20]
 80077a4:	230f      	movs	r3, #15
 80077a6:	60bb      	str	r3, [r7, #8]
 80077a8:	2303      	movs	r3, #3
 80077aa:	613b      	str	r3, [r7, #16]
        {
            .Pin = EM_GPIO_LA_CH1 | EM_GPIO_LA_CH2 | EM_GPIO_LA_CH3 | EM_GPIO_LA_CH4,
            .Speed = LL_GPIO_SPEED_FREQ_HIGH,
            .Mode = LL_GPIO_MODE_INPUT //LL_GPIO_MODE_FLOATING;
        };
        LL_GPIO_Init(EM_GPIO_LA_PORT, &GPIO_InitStruct);
 80077ac:	f107 0308 	add.w	r3, r7, #8
 80077b0:	4619      	mov	r1, r3
 80077b2:	4885      	ldr	r0, [pc, #532]	; (80079c8 <daq_mode_set+0x338>)
 80077b4:	f7fc fbb7 	bl	8003f26 <LL_GPIO_Init>
    }

    // DAQ init
    if (mode == SCOPE)
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d166      	bne.n	800788c <daq_mode_set+0x1fc>
    {
        daq_mem_set(self, 3); // safety guard
 80077be:	2103      	movs	r1, #3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff f8ed 	bl	80069a0 <daq_mem_set>
        daq_bit_set(self, self->save_s.bits);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077cc:	3312      	adds	r3, #18
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7ff fb98 	bl	8006f08 <daq_bit_set>
        daq_ch_set(self, self->save_s.ch1_en, self->save_s.ch2_en, self->save_s.ch3_en, self->save_s.ch4_en, self->save_s.fs);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077de:	3308      	adds	r3, #8
 80077e0:	7819      	ldrb	r1, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077e8:	3309      	adds	r3, #9
 80077ea:	7818      	ldrb	r0, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077f2:	330a      	adds	r3, #10
 80077f4:	781c      	ldrb	r4, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80077fc:	330b      	adds	r3, #11
 80077fe:	781a      	ldrb	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007806:	330c      	adds	r3, #12
 8007808:	edd3 7a00 	vldr	s15, [r3]
 800780c:	9200      	str	r2, [sp, #0]
 800780e:	eeb0 0a67 	vmov.f32	s0, s15
 8007812:	4623      	mov	r3, r4
 8007814:	4602      	mov	r2, r0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff fc92 	bl	8007140 <daq_ch_set>
        daq_fs_set(self, self->save_s.fs);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007822:	330c      	adds	r3, #12
 8007824:	edd3 7a00 	vldr	s15, [r3]
 8007828:	eeb0 0a67 	vmov.f32	s0, s15
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff fbeb 	bl	8007008 <daq_fs_set>
        daq_mem_set(self, self->save_s.mem);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007838:	3310      	adds	r3, #16
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff f8ae 	bl	80069a0 <daq_mem_set>
        daq_trig_set(self, self->trig.save_s.ch, self->trig.save_s.val, self->trig.save_s.edge,
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800784a:	3358      	adds	r3, #88	; 0x58
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	461c      	mov	r4, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007856:	335c      	adds	r3, #92	; 0x5c
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	b2d9      	uxtb	r1, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007862:	3355      	adds	r3, #85	; 0x55
 8007864:	7818      	ldrb	r0, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800786c:	3354      	adds	r3, #84	; 0x54
 800786e:	781a      	ldrb	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007876:	3350      	adds	r3, #80	; 0x50
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	9200      	str	r2, [sp, #0]
 800787e:	4603      	mov	r3, r0
 8007880:	460a      	mov	r2, r1
 8007882:	4621      	mov	r1, r4
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 fbb7 	bl	8008ff8 <daq_trig_set>
 800788a:	e08f      	b.n	80079ac <daq_mode_set+0x31c>
                     self->trig.save_s.mode, self->trig.save_s.pretrigger);
    }
    else if (mode == VM)
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d126      	bne.n	80078e0 <daq_mode_set+0x250>
    {
        daq_mem_set(self, 3); // safety guard
 8007892:	2103      	movs	r1, #3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff f883 	bl	80069a0 <daq_mem_set>
        daq_bit_set(self, B12);
 800789a:	210c      	movs	r1, #12
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff fb33 	bl	8006f08 <daq_bit_set>
        daq_ch_set(self, 1, 1, 1, 1, EM_VM_FS);
 80078a2:	2301      	movs	r3, #1
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80079d0 <daq_mode_set+0x340>
 80078aa:	2301      	movs	r3, #1
 80078ac:	2201      	movs	r2, #1
 80078ae:	2101      	movs	r1, #1
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff fc45 	bl	8007140 <daq_ch_set>
        daq_mem_set(self, EM_VM_MEM);
 80078b6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7ff f870 	bl	80069a0 <daq_mem_set>
        daq_fs_set(self, EM_VM_FS);
 80078c0:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80079d0 <daq_mode_set+0x340>
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff fb9f 	bl	8007008 <daq_fs_set>
        daq_trig_set(self, 0, 0, RISING, DISABLED, 50);
 80078ca:	2332      	movs	r3, #50	; 0x32
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	2303      	movs	r3, #3
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	2300      	movs	r3, #0
 80078d4:	2200      	movs	r2, #0
 80078d6:	2100      	movs	r1, #0
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f001 fb8d 	bl	8008ff8 <daq_trig_set>
 80078de:	e065      	b.n	80079ac <daq_mode_set+0x31c>
    }
    else // if (mode == LA)
    {
        daq_mem_set(self, 3); // safety guard
 80078e0:	2103      	movs	r1, #3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff f85c 	bl	80069a0 <daq_mem_set>
        daq_bit_set(self, self->save_l.bits);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80078ee:	331e      	adds	r3, #30
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7ff fb07 	bl	8006f08 <daq_bit_set>
        daq_ch_set(self, self->save_l.ch1_en, self->save_l.ch2_en, self->save_l.ch3_en, self->save_l.ch4_en, self->save_l.fs);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007900:	3314      	adds	r3, #20
 8007902:	7819      	ldrb	r1, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800790a:	3315      	adds	r3, #21
 800790c:	7818      	ldrb	r0, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007914:	3316      	adds	r3, #22
 8007916:	781c      	ldrb	r4, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800791e:	3317      	adds	r3, #23
 8007920:	781a      	ldrb	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007928:	3318      	adds	r3, #24
 800792a:	edd3 7a00 	vldr	s15, [r3]
 800792e:	9200      	str	r2, [sp, #0]
 8007930:	eeb0 0a67 	vmov.f32	s0, s15
 8007934:	4623      	mov	r3, r4
 8007936:	4602      	mov	r2, r0
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff fc01 	bl	8007140 <daq_ch_set>
        daq_fs_set(self, self->save_l.fs);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007944:	3318      	adds	r3, #24
 8007946:	edd3 7a00 	vldr	s15, [r3]
 800794a:	eeb0 0a67 	vmov.f32	s0, s15
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fb5a 	bl	8007008 <daq_fs_set>
        daq_mem_set(self, self->save_l.mem);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800795a:	331c      	adds	r3, #28
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff f81d 	bl	80069a0 <daq_mem_set>
        daq_trig_set(self, self->trig.save_l.ch, self->trig.save_l.val, self->trig.save_l.edge,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800796c:	336c      	adds	r3, #108	; 0x6c
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	461c      	mov	r4, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007978:	3370      	adds	r3, #112	; 0x70
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	b2d9      	uxtb	r1, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007984:	3369      	adds	r3, #105	; 0x69
 8007986:	7818      	ldrb	r0, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800798e:	3368      	adds	r3, #104	; 0x68
 8007990:	781a      	ldrb	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007998:	3364      	adds	r3, #100	; 0x64
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	9200      	str	r2, [sp, #0]
 80079a0:	4603      	mov	r3, r0
 80079a2:	460a      	mov	r2, r1
 80079a4:	4621      	mov	r1, r4
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 fb26 	bl	8008ff8 <daq_trig_set>
                     self->trig.save_l.mode, self->trig.save_l.pretrigger);
    }

    self->dis_hold = 0;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80079b2:	3335      	adds	r3, #53	; 0x35
 80079b4:	2200      	movs	r2, #0
 80079b6:	701a      	strb	r2, [r3, #0]
    daq_enable(self, 1);
 80079b8:	2101      	movs	r1, #1
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff fd7e 	bl	80074bc <daq_enable>
}
 80079c0:	bf00      	nop
 80079c2:	373c      	adds	r7, #60	; 0x3c
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd90      	pop	{r4, r7, pc}
 80079c8:	48000800 	.word	0x48000800
 80079cc:	48000400 	.word	0x48000400
 80079d0:	42c80000 	.word	0x42c80000

080079d4 <get_last_circ_idx>:
void get_avg_from_circ(int last_idx, int ch_num, int avg_num, int bufflen, void* buff, int daq_bits, float* v1, float* v2, float* v3, float* v4, float* v5);
int get_vcc_from_circ(int from, int total, int bufflen, int ch_num, int daq_bits, void* buff);
int get_1ch_from_circ(int from, int total, int bufflen, int ch, int ch_num, int daq_bits, float vcc, float vref_cal, void* buff, uint8_t* out, int* idx);

static inline int get_last_circ_idx(int pos, int len)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
    int last_idx = pos - 1;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	60fb      	str	r3, [r7, #12]
    if (last_idx < 0)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	da02      	bge.n	80079f0 <get_last_circ_idx+0x1c>
        last_idx = len - 1;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	60fb      	str	r3, [r7, #12]
    return last_idx;
 80079f0:	68fb      	ldr	r3, [r7, #12]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
	...

08007a00 <__NVIC_DisableIRQ>:
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	db10      	blt.n	8007a34 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	f003 021f 	and.w	r2, r3, #31
 8007a18:	4909      	ldr	r1, [pc, #36]	; (8007a40 <__NVIC_DisableIRQ+0x40>)
 8007a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	2001      	movs	r0, #1
 8007a22:	fa00 f202 	lsl.w	r2, r0, r2
 8007a26:	3320      	adds	r3, #32
 8007a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007a2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007a30:	f3bf 8f6f 	isb	sy
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	e000e100 	.word	0xe000e100

08007a44 <LL_ADC_SetAnalogWDMonitChannels>:
{
 8007a44:	b480      	push	{r7}
 8007a46:	b089      	sub	sp, #36	; 0x24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, __ADC_MASK_SHIFT(AWDy, ADC_AWD_CRX_REGOFFSET_MASK)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	330c      	adds	r3, #12
 8007a54:	4618      	mov	r0, r3
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007a5c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8007a60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	fa92 f2a2 	rbit	r2, r2
 8007a68:	617a      	str	r2, [r7, #20]
  return result;
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	fab2 f282 	clz	r2, r2
 8007a70:	b2d2      	uxtb	r2, r2
 8007a72:	fa23 f102 	lsr.w	r1, r3, r2
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f003 0202 	and.w	r2, r3, #2
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	440b      	add	r3, r1
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4403      	add	r3, r0
 8007a8a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68b9      	ldr	r1, [r7, #8]
 8007a92:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <LL_ADC_SetAnalogWDMonitChannels+0x70>)
 8007a94:	400b      	ands	r3, r1
 8007a96:	43db      	mvns	r3, r3
 8007a98:	401a      	ands	r2, r3
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	400b      	ands	r3, r1
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	601a      	str	r2, [r3, #0]
}
 8007aa6:	bf00      	nop
 8007aa8:	3724      	adds	r7, #36	; 0x24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	7dc7fffe 	.word	0x7dc7fffe

08007ab8 <LL_ADC_IsActiveFlag_AWD1>:
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac8:	2b80      	cmp	r3, #128	; 0x80
 8007aca:	bf0c      	ite	eq
 8007acc:	2301      	moveq	r3, #1
 8007ace:	2300      	movne	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <LL_ADC_ClearFlag_AWD1>:
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2280      	movs	r2, #128	; 0x80
 8007aea:	601a      	str	r2, [r3, #0]
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <LL_DMA_GetDataLength>:
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	4a06      	ldr	r2, [pc, #24]	; (8007b20 <LL_DMA_GetDataLength+0x28>)
 8007b08:	5cd3      	ldrb	r3, [r2, r3]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4413      	add	r3, r2
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	b29b      	uxth	r3, r3
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	08016088 	.word	0x08016088

08007b24 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8007b2c:	4b07      	ldr	r3, [pc, #28]	; (8007b4c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007b2e:	695a      	ldr	r2, [r3, #20]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4013      	ands	r3, r2
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	bf0c      	ite	eq
 8007b3a:	2301      	moveq	r3, #1
 8007b3c:	2300      	movne	r3, #0
 8007b3e:	b2db      	uxtb	r3, r3
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40010400 	.word	0x40010400

08007b50 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8007b58:	4a04      	ldr	r2, [pc, #16]	; (8007b6c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6153      	str	r3, [r2, #20]
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	40010400 	.word	0x40010400

08007b70 <ADC1_2_IRQHandler>:
#include "app_data.h"
#include "main.h"


void ADC1_2_IRQHandler(void)
{
 8007b70:	b598      	push	{r3, r4, r7, lr}
 8007b72:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = EM_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, daq.trig.dma_trig); // critical
 8007b74:	4b34      	ldr	r3, [pc, #208]	; (8007c48 <ADC1_2_IRQHandler+0xd8>)
 8007b76:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007b7a:	33b0      	adds	r3, #176	; 0xb0
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	88db      	ldrh	r3, [r3, #6]
 8007b80:	461c      	mov	r4, r3
 8007b82:	4b31      	ldr	r3, [pc, #196]	; (8007c48 <ADC1_2_IRQHandler+0xd8>)
 8007b84:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007b88:	33b8      	adds	r3, #184	; 0xb8
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	4b2e      	ldr	r3, [pc, #184]	; (8007c48 <ADC1_2_IRQHandler+0xd8>)
 8007b8e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007b92:	33b4      	adds	r3, #180	; 0xb4
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4619      	mov	r1, r3
 8007b98:	4610      	mov	r0, r2
 8007b9a:	f7ff ffad 	bl	8007af8 <LL_DMA_GetDataLength>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	1ae3      	subs	r3, r4, r3
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	4b28      	ldr	r3, [pc, #160]	; (8007c48 <ADC1_2_IRQHandler+0xd8>)
 8007ba6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007baa:	33b0      	adds	r3, #176	; 0xb0
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	88db      	ldrh	r3, [r3, #6]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	f7ff ff0e 	bl	80079d4 <get_last_circ_idx>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	4b23      	ldr	r3, [pc, #140]	; (8007c48 <ADC1_2_IRQHandler+0xd8>)
 8007bbc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007bc0:	33d0      	adds	r3, #208	; 0xd0
 8007bc2:	601a      	str	r2, [r3, #0]
    ASSERT(!(LL_ADC_IsActiveFlag_AWD1(ADC1) && LL_ADC_IsActiveFlag_AWD1(ADC2)));
 8007bc4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007bc8:	f7ff ff76 	bl	8007ab8 <LL_ADC_IsActiveFlag_AWD1>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d009      	beq.n	8007be6 <ADC1_2_IRQHandler+0x76>
 8007bd2:	481e      	ldr	r0, [pc, #120]	; (8007c4c <ADC1_2_IRQHandler+0xdc>)
 8007bd4:	f7ff ff70 	bl	8007ab8 <LL_ADC_IsActiveFlag_AWD1>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <ADC1_2_IRQHandler+0x76>
 8007bde:	2112      	movs	r1, #18
 8007be0:	481b      	ldr	r0, [pc, #108]	; (8007c50 <ADC1_2_IRQHandler+0xe0>)
 8007be2:	f004 fe44 	bl	800c86e <assert2>

    if (LL_ADC_IsActiveFlag_AWD1(ADC1) == 1)
 8007be6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007bea:	f7ff ff65 	bl	8007ab8 <LL_ADC_IsActiveFlag_AWD1>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d111      	bne.n	8007c18 <ADC1_2_IRQHandler+0xa8>
    {
        LL_ADC_SetAnalogWDMonitChannels(daq.trig.adc_trig, EM_ADC_AWD LL_ADC_AWD_DISABLE);
 8007bf4:	4b14      	ldr	r3, [pc, #80]	; (8007c48 <ADC1_2_IRQHandler+0xd8>)
 8007bf6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007bfa:	33c0      	adds	r3, #192	; 0xc0
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	4914      	ldr	r1, [pc, #80]	; (8007c54 <ADC1_2_IRQHandler+0xe4>)
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff ff1e 	bl	8007a44 <LL_ADC_SetAnalogWDMonitChannels>
        daq_trig_trigger_scope(&daq);
 8007c08:	480f      	ldr	r0, [pc, #60]	; (8007c48 <ADC1_2_IRQHandler+0xd8>)
 8007c0a:	f000 fd91 	bl	8008730 <daq_trig_trigger_scope>
        LL_ADC_ClearFlag_AWD1(ADC1);
 8007c0e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007c12:	f7ff ff64 	bl	8007ade <LL_ADC_ClearFlag_AWD1>
    {
        LL_ADC_SetAnalogWDMonitChannels(daq.trig.adc_trig, EM_ADC_AWD LL_ADC_AWD_DISABLE);
        daq_trig_trigger_scope(&daq);
        LL_ADC_ClearFlag_AWD1(ADC2);
    }
}
 8007c16:	e015      	b.n	8007c44 <ADC1_2_IRQHandler+0xd4>
    else if (LL_ADC_IsActiveFlag_AWD1(ADC2) == 1)
 8007c18:	480c      	ldr	r0, [pc, #48]	; (8007c4c <ADC1_2_IRQHandler+0xdc>)
 8007c1a:	f7ff ff4d 	bl	8007ab8 <LL_ADC_IsActiveFlag_AWD1>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d10f      	bne.n	8007c44 <ADC1_2_IRQHandler+0xd4>
        LL_ADC_SetAnalogWDMonitChannels(daq.trig.adc_trig, EM_ADC_AWD LL_ADC_AWD_DISABLE);
 8007c24:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <ADC1_2_IRQHandler+0xd8>)
 8007c26:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c2a:	33c0      	adds	r3, #192	; 0xc0
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	4908      	ldr	r1, [pc, #32]	; (8007c54 <ADC1_2_IRQHandler+0xe4>)
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff ff06 	bl	8007a44 <LL_ADC_SetAnalogWDMonitChannels>
        daq_trig_trigger_scope(&daq);
 8007c38:	4803      	ldr	r0, [pc, #12]	; (8007c48 <ADC1_2_IRQHandler+0xd8>)
 8007c3a:	f000 fd79 	bl	8008730 <daq_trig_trigger_scope>
        LL_ADC_ClearFlag_AWD1(ADC2);
 8007c3e:	4803      	ldr	r0, [pc, #12]	; (8007c4c <ADC1_2_IRQHandler+0xdc>)
 8007c40:	f7ff ff4d 	bl	8007ade <LL_ADC_ClearFlag_AWD1>
}
 8007c44:	bf00      	nop
 8007c46:	bd98      	pop	{r3, r4, r7, pc}
 8007c48:	20000934 	.word	0x20000934
 8007c4c:	50000100 	.word	0x50000100
 8007c50:	080159f8 	.word	0x080159f8
 8007c54:	7dc00000 	.word	0x7dc00000

08007c58 <ADC3_IRQHandler>:

#if defined(EM_ADC_MODE_ADC1234)
void ADC3_IRQHandler(void)
{
 8007c58:	b598      	push	{r3, r4, r7, lr}
 8007c5a:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = EM_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, daq.trig.dma_trig); // critical
 8007c5c:	4b1f      	ldr	r3, [pc, #124]	; (8007cdc <ADC3_IRQHandler+0x84>)
 8007c5e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c62:	33b0      	adds	r3, #176	; 0xb0
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	88db      	ldrh	r3, [r3, #6]
 8007c68:	461c      	mov	r4, r3
 8007c6a:	4b1c      	ldr	r3, [pc, #112]	; (8007cdc <ADC3_IRQHandler+0x84>)
 8007c6c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c70:	33b8      	adds	r3, #184	; 0xb8
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	4b19      	ldr	r3, [pc, #100]	; (8007cdc <ADC3_IRQHandler+0x84>)
 8007c76:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c7a:	33b4      	adds	r3, #180	; 0xb4
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4610      	mov	r0, r2
 8007c82:	f7ff ff39 	bl	8007af8 <LL_DMA_GetDataLength>
 8007c86:	4603      	mov	r3, r0
 8007c88:	1ae3      	subs	r3, r4, r3
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <ADC3_IRQHandler+0x84>)
 8007c8e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007c92:	33b0      	adds	r3, #176	; 0xb0
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	88db      	ldrh	r3, [r3, #6]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	f7ff fe9a 	bl	80079d4 <get_last_circ_idx>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	4b0e      	ldr	r3, [pc, #56]	; (8007cdc <ADC3_IRQHandler+0x84>)
 8007ca4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ca8:	33d0      	adds	r3, #208	; 0xd0
 8007caa:	601a      	str	r2, [r3, #0]

    if (LL_ADC_IsActiveFlag_AWD1(ADC3) == 1)
 8007cac:	480c      	ldr	r0, [pc, #48]	; (8007ce0 <ADC3_IRQHandler+0x88>)
 8007cae:	f7ff ff03 	bl	8007ab8 <LL_ADC_IsActiveFlag_AWD1>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d10f      	bne.n	8007cd8 <ADC3_IRQHandler+0x80>
    {
        LL_ADC_SetAnalogWDMonitChannels(daq.trig.adc_trig, EM_ADC_AWD LL_ADC_AWD_DISABLE);
 8007cb8:	4b08      	ldr	r3, [pc, #32]	; (8007cdc <ADC3_IRQHandler+0x84>)
 8007cba:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007cbe:	33c0      	adds	r3, #192	; 0xc0
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	4907      	ldr	r1, [pc, #28]	; (8007ce4 <ADC3_IRQHandler+0x8c>)
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff febc 	bl	8007a44 <LL_ADC_SetAnalogWDMonitChannels>
        daq_trig_trigger_scope(&daq);
 8007ccc:	4803      	ldr	r0, [pc, #12]	; (8007cdc <ADC3_IRQHandler+0x84>)
 8007cce:	f000 fd2f 	bl	8008730 <daq_trig_trigger_scope>
        LL_ADC_ClearFlag_AWD1(ADC3);
 8007cd2:	4803      	ldr	r0, [pc, #12]	; (8007ce0 <ADC3_IRQHandler+0x88>)
 8007cd4:	f7ff ff03 	bl	8007ade <LL_ADC_ClearFlag_AWD1>
    }
}
 8007cd8:	bf00      	nop
 8007cda:	bd98      	pop	{r3, r4, r7, pc}
 8007cdc:	20000934 	.word	0x20000934
 8007ce0:	50000400 	.word	0x50000400
 8007ce4:	7dc00000 	.word	0x7dc00000

08007ce8 <ADC4_IRQHandler>:

void ADC4_IRQHandler(void)
{
 8007ce8:	b598      	push	{r3, r4, r7, lr}
 8007cea:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = EM_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, daq.trig.dma_trig); // critical
 8007cec:	4b1f      	ldr	r3, [pc, #124]	; (8007d6c <ADC4_IRQHandler+0x84>)
 8007cee:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007cf2:	33b0      	adds	r3, #176	; 0xb0
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	88db      	ldrh	r3, [r3, #6]
 8007cf8:	461c      	mov	r4, r3
 8007cfa:	4b1c      	ldr	r3, [pc, #112]	; (8007d6c <ADC4_IRQHandler+0x84>)
 8007cfc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d00:	33b8      	adds	r3, #184	; 0xb8
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	4b19      	ldr	r3, [pc, #100]	; (8007d6c <ADC4_IRQHandler+0x84>)
 8007d06:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d0a:	33b4      	adds	r3, #180	; 0xb4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7ff fef1 	bl	8007af8 <LL_DMA_GetDataLength>
 8007d16:	4603      	mov	r3, r0
 8007d18:	1ae3      	subs	r3, r4, r3
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	4b13      	ldr	r3, [pc, #76]	; (8007d6c <ADC4_IRQHandler+0x84>)
 8007d1e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d22:	33b0      	adds	r3, #176	; 0xb0
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	88db      	ldrh	r3, [r3, #6]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	f7ff fe52 	bl	80079d4 <get_last_circ_idx>
 8007d30:	4602      	mov	r2, r0
 8007d32:	4b0e      	ldr	r3, [pc, #56]	; (8007d6c <ADC4_IRQHandler+0x84>)
 8007d34:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d38:	33d0      	adds	r3, #208	; 0xd0
 8007d3a:	601a      	str	r2, [r3, #0]

    if (LL_ADC_IsActiveFlag_AWD1(ADC4) == 1)
 8007d3c:	480c      	ldr	r0, [pc, #48]	; (8007d70 <ADC4_IRQHandler+0x88>)
 8007d3e:	f7ff febb 	bl	8007ab8 <LL_ADC_IsActiveFlag_AWD1>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d10f      	bne.n	8007d68 <ADC4_IRQHandler+0x80>
    {
        LL_ADC_SetAnalogWDMonitChannels(daq.trig.adc_trig, EM_ADC_AWD LL_ADC_AWD_DISABLE);
 8007d48:	4b08      	ldr	r3, [pc, #32]	; (8007d6c <ADC4_IRQHandler+0x84>)
 8007d4a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d4e:	33c0      	adds	r3, #192	; 0xc0
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	4907      	ldr	r1, [pc, #28]	; (8007d74 <ADC4_IRQHandler+0x8c>)
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fe74 	bl	8007a44 <LL_ADC_SetAnalogWDMonitChannels>
        daq_trig_trigger_scope(&daq);
 8007d5c:	4803      	ldr	r0, [pc, #12]	; (8007d6c <ADC4_IRQHandler+0x84>)
 8007d5e:	f000 fce7 	bl	8008730 <daq_trig_trigger_scope>
        LL_ADC_ClearFlag_AWD1(ADC4);
 8007d62:	4803      	ldr	r0, [pc, #12]	; (8007d70 <ADC4_IRQHandler+0x88>)
 8007d64:	f7ff febb 	bl	8007ade <LL_ADC_ClearFlag_AWD1>
    }
}
 8007d68:	bf00      	nop
 8007d6a:	bd98      	pop	{r3, r4, r7, pc}
 8007d6c:	20000934 	.word	0x20000934
 8007d70:	50000500 	.word	0x50000500
 8007d74:	7dc00000 	.word	0x7dc00000

08007d78 <EXTI0_IRQHandler>:
#endif

void EM_LA_CH1_IRQh(void)
{
 8007d78:	b598      	push	{r3, r4, r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = EM_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, EM_DMA_LA); // critical
 8007d7c:	4b1c      	ldr	r3, [pc, #112]	; (8007df0 <EXTI0_IRQHandler+0x78>)
 8007d7e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d82:	33b0      	adds	r3, #176	; 0xb0
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	88db      	ldrh	r3, [r3, #6]
 8007d88:	461c      	mov	r4, r3
 8007d8a:	4b19      	ldr	r3, [pc, #100]	; (8007df0 <EXTI0_IRQHandler+0x78>)
 8007d8c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007d90:	33b4      	adds	r3, #180	; 0xb4
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4619      	mov	r1, r3
 8007d96:	4817      	ldr	r0, [pc, #92]	; (8007df4 <EXTI0_IRQHandler+0x7c>)
 8007d98:	f7ff feae 	bl	8007af8 <LL_DMA_GetDataLength>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	1ae3      	subs	r3, r4, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	4b13      	ldr	r3, [pc, #76]	; (8007df0 <EXTI0_IRQHandler+0x78>)
 8007da4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007da8:	33b0      	adds	r3, #176	; 0xb0
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	88db      	ldrh	r3, [r3, #6]
 8007dae:	4619      	mov	r1, r3
 8007db0:	4610      	mov	r0, r2
 8007db2:	f7ff fe0f 	bl	80079d4 <get_last_circ_idx>
 8007db6:	4602      	mov	r2, r0
 8007db8:	4b0d      	ldr	r3, [pc, #52]	; (8007df0 <EXTI0_IRQHandler+0x78>)
 8007dba:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007dbe:	33d0      	adds	r3, #208	; 0xd0
 8007dc0:	601a      	str	r2, [r3, #0]

    if (LL_EXTI_IsActiveFlag_0_31(EM_LA_EXTI1) == 1)
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	f7ff feae 	bl	8007b24 <LL_EXTI_IsActiveFlag_0_31>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d10e      	bne.n	8007dec <EXTI0_IRQHandler+0x74>
    {
        NVIC_DisableIRQ(daq.trig.exti_trig);
 8007dce:	4b08      	ldr	r3, [pc, #32]	; (8007df0 <EXTI0_IRQHandler+0x78>)
 8007dd0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007dd4:	33bc      	adds	r3, #188	; 0xbc
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	b25b      	sxtb	r3, r3
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff fe10 	bl	8007a00 <__NVIC_DisableIRQ>
        daq_trig_trigger_la(&daq);
 8007de0:	4803      	ldr	r0, [pc, #12]	; (8007df0 <EXTI0_IRQHandler+0x78>)
 8007de2:	f000 fe11 	bl	8008a08 <daq_trig_trigger_la>
        LL_EXTI_ClearFlag_0_31(EM_LA_EXTI1);
 8007de6:	2001      	movs	r0, #1
 8007de8:	f7ff feb2 	bl	8007b50 <LL_EXTI_ClearFlag_0_31>
    }
}
 8007dec:	bf00      	nop
 8007dee:	bd98      	pop	{r3, r4, r7, pc}
 8007df0:	20000934 	.word	0x20000934
 8007df4:	40020000 	.word	0x40020000

08007df8 <EXTI1_IRQHandler>:

void EM_LA_CH2_IRQh(void)
{
 8007df8:	b598      	push	{r3, r4, r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = EM_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, EM_DMA_LA); // critical
 8007dfc:	4b1c      	ldr	r3, [pc, #112]	; (8007e70 <EXTI1_IRQHandler+0x78>)
 8007dfe:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e02:	33b0      	adds	r3, #176	; 0xb0
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	88db      	ldrh	r3, [r3, #6]
 8007e08:	461c      	mov	r4, r3
 8007e0a:	4b19      	ldr	r3, [pc, #100]	; (8007e70 <EXTI1_IRQHandler+0x78>)
 8007e0c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e10:	33b4      	adds	r3, #180	; 0xb4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4619      	mov	r1, r3
 8007e16:	4817      	ldr	r0, [pc, #92]	; (8007e74 <EXTI1_IRQHandler+0x7c>)
 8007e18:	f7ff fe6e 	bl	8007af8 <LL_DMA_GetDataLength>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	1ae3      	subs	r3, r4, r3
 8007e20:	461a      	mov	r2, r3
 8007e22:	4b13      	ldr	r3, [pc, #76]	; (8007e70 <EXTI1_IRQHandler+0x78>)
 8007e24:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e28:	33b0      	adds	r3, #176	; 0xb0
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	88db      	ldrh	r3, [r3, #6]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f7ff fdcf 	bl	80079d4 <get_last_circ_idx>
 8007e36:	4602      	mov	r2, r0
 8007e38:	4b0d      	ldr	r3, [pc, #52]	; (8007e70 <EXTI1_IRQHandler+0x78>)
 8007e3a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e3e:	33d0      	adds	r3, #208	; 0xd0
 8007e40:	601a      	str	r2, [r3, #0]

    if (LL_EXTI_IsActiveFlag_0_31(EM_LA_EXTI2) == 1)
 8007e42:	2002      	movs	r0, #2
 8007e44:	f7ff fe6e 	bl	8007b24 <LL_EXTI_IsActiveFlag_0_31>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d10e      	bne.n	8007e6c <EXTI1_IRQHandler+0x74>
    {
        NVIC_DisableIRQ(daq.trig.exti_trig);
 8007e4e:	4b08      	ldr	r3, [pc, #32]	; (8007e70 <EXTI1_IRQHandler+0x78>)
 8007e50:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e54:	33bc      	adds	r3, #188	; 0xbc
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	b25b      	sxtb	r3, r3
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff fdd0 	bl	8007a00 <__NVIC_DisableIRQ>
        daq_trig_trigger_la(&daq);
 8007e60:	4803      	ldr	r0, [pc, #12]	; (8007e70 <EXTI1_IRQHandler+0x78>)
 8007e62:	f000 fdd1 	bl	8008a08 <daq_trig_trigger_la>
        LL_EXTI_ClearFlag_0_31(EM_LA_EXTI2);
 8007e66:	2002      	movs	r0, #2
 8007e68:	f7ff fe72 	bl	8007b50 <LL_EXTI_ClearFlag_0_31>
    }
}
 8007e6c:	bf00      	nop
 8007e6e:	bd98      	pop	{r3, r4, r7, pc}
 8007e70:	20000934 	.word	0x20000934
 8007e74:	40020000 	.word	0x40020000

08007e78 <EXTI2_TSC_IRQHandler>:

void EM_LA_CH3_IRQh(void)
{
 8007e78:	b598      	push	{r3, r4, r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = EM_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, EM_DMA_LA); // critical
 8007e7c:	4b1c      	ldr	r3, [pc, #112]	; (8007ef0 <EXTI2_TSC_IRQHandler+0x78>)
 8007e7e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e82:	33b0      	adds	r3, #176	; 0xb0
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	88db      	ldrh	r3, [r3, #6]
 8007e88:	461c      	mov	r4, r3
 8007e8a:	4b19      	ldr	r3, [pc, #100]	; (8007ef0 <EXTI2_TSC_IRQHandler+0x78>)
 8007e8c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007e90:	33b4      	adds	r3, #180	; 0xb4
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4619      	mov	r1, r3
 8007e96:	4817      	ldr	r0, [pc, #92]	; (8007ef4 <EXTI2_TSC_IRQHandler+0x7c>)
 8007e98:	f7ff fe2e 	bl	8007af8 <LL_DMA_GetDataLength>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	1ae3      	subs	r3, r4, r3
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <EXTI2_TSC_IRQHandler+0x78>)
 8007ea4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ea8:	33b0      	adds	r3, #176	; 0xb0
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	88db      	ldrh	r3, [r3, #6]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f7ff fd8f 	bl	80079d4 <get_last_circ_idx>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	4b0d      	ldr	r3, [pc, #52]	; (8007ef0 <EXTI2_TSC_IRQHandler+0x78>)
 8007eba:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ebe:	33d0      	adds	r3, #208	; 0xd0
 8007ec0:	601a      	str	r2, [r3, #0]

    if (LL_EXTI_IsActiveFlag_0_31(EM_LA_EXTI3) == 1)
 8007ec2:	2004      	movs	r0, #4
 8007ec4:	f7ff fe2e 	bl	8007b24 <LL_EXTI_IsActiveFlag_0_31>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d10e      	bne.n	8007eec <EXTI2_TSC_IRQHandler+0x74>
    {
        NVIC_DisableIRQ(daq.trig.exti_trig);
 8007ece:	4b08      	ldr	r3, [pc, #32]	; (8007ef0 <EXTI2_TSC_IRQHandler+0x78>)
 8007ed0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007ed4:	33bc      	adds	r3, #188	; 0xbc
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	b25b      	sxtb	r3, r3
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff fd90 	bl	8007a00 <__NVIC_DisableIRQ>
        daq_trig_trigger_la(&daq);
 8007ee0:	4803      	ldr	r0, [pc, #12]	; (8007ef0 <EXTI2_TSC_IRQHandler+0x78>)
 8007ee2:	f000 fd91 	bl	8008a08 <daq_trig_trigger_la>
        LL_EXTI_ClearFlag_0_31(EM_LA_EXTI3);
 8007ee6:	2004      	movs	r0, #4
 8007ee8:	f7ff fe32 	bl	8007b50 <LL_EXTI_ClearFlag_0_31>
    }
}
 8007eec:	bf00      	nop
 8007eee:	bd98      	pop	{r3, r4, r7, pc}
 8007ef0:	20000934 	.word	0x20000934
 8007ef4:	40020000 	.word	0x40020000

08007ef8 <EXTI3_IRQHandler>:

void EM_LA_CH4_IRQh(void)
{
 8007ef8:	b598      	push	{r3, r4, r7, lr}
 8007efa:	af00      	add	r7, sp, #0
    daq.trig.dma_pos_catched = EM_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, EM_DMA_LA); // critical
 8007efc:	4b1c      	ldr	r3, [pc, #112]	; (8007f70 <EXTI3_IRQHandler+0x78>)
 8007efe:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007f02:	33b0      	adds	r3, #176	; 0xb0
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	88db      	ldrh	r3, [r3, #6]
 8007f08:	461c      	mov	r4, r3
 8007f0a:	4b19      	ldr	r3, [pc, #100]	; (8007f70 <EXTI3_IRQHandler+0x78>)
 8007f0c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007f10:	33b4      	adds	r3, #180	; 0xb4
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4619      	mov	r1, r3
 8007f16:	4817      	ldr	r0, [pc, #92]	; (8007f74 <EXTI3_IRQHandler+0x7c>)
 8007f18:	f7ff fdee 	bl	8007af8 <LL_DMA_GetDataLength>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	1ae3      	subs	r3, r4, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <EXTI3_IRQHandler+0x78>)
 8007f24:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007f28:	33b0      	adds	r3, #176	; 0xb0
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	88db      	ldrh	r3, [r3, #6]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4610      	mov	r0, r2
 8007f32:	f7ff fd4f 	bl	80079d4 <get_last_circ_idx>
 8007f36:	4602      	mov	r2, r0
 8007f38:	4b0d      	ldr	r3, [pc, #52]	; (8007f70 <EXTI3_IRQHandler+0x78>)
 8007f3a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007f3e:	33d0      	adds	r3, #208	; 0xd0
 8007f40:	601a      	str	r2, [r3, #0]

    if (LL_EXTI_IsActiveFlag_0_31(EM_LA_EXTI4) == 1)
 8007f42:	2008      	movs	r0, #8
 8007f44:	f7ff fdee 	bl	8007b24 <LL_EXTI_IsActiveFlag_0_31>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d10e      	bne.n	8007f6c <EXTI3_IRQHandler+0x74>
    {
        NVIC_DisableIRQ(daq.trig.exti_trig);
 8007f4e:	4b08      	ldr	r3, [pc, #32]	; (8007f70 <EXTI3_IRQHandler+0x78>)
 8007f50:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8007f54:	33bc      	adds	r3, #188	; 0xbc
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	b25b      	sxtb	r3, r3
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff fd50 	bl	8007a00 <__NVIC_DisableIRQ>
        daq_trig_trigger_la(&daq);
 8007f60:	4803      	ldr	r0, [pc, #12]	; (8007f70 <EXTI3_IRQHandler+0x78>)
 8007f62:	f000 fd51 	bl	8008a08 <daq_trig_trigger_la>
        LL_EXTI_ClearFlag_0_31(EM_LA_EXTI4);
 8007f66:	2008      	movs	r0, #8
 8007f68:	f7ff fdf2 	bl	8007b50 <LL_EXTI_ClearFlag_0_31>
    }
}
 8007f6c:	bf00      	nop
 8007f6e:	bd98      	pop	{r3, r4, r7, pc}
 8007f70:	20000934 	.word	0x20000934
 8007f74:	40020000 	.word	0x40020000

08007f78 <EXTI4_IRQHandler>:

void EM_LA_UNUSED_IRQh(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
    if (LL_EXTI_IsActiveFlag_0_31(EM_LA_EXTI_UNUSED) == 1)
 8007f7c:	2010      	movs	r0, #16
 8007f7e:	f7ff fdd1 	bl	8007b24 <LL_EXTI_IsActiveFlag_0_31>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d102      	bne.n	8007f8e <EXTI4_IRQHandler+0x16>
    {
        LL_EXTI_ClearFlag_0_31(EM_LA_EXTI_UNUSED);
 8007f88:	2010      	movs	r0, #16
 8007f8a:	f7ff fde1 	bl	8007b50 <LL_EXTI_ClearFlag_0_31>
    }
}
 8007f8e:	bf00      	nop
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <get_last_circ_idx>:
{
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
    int last_idx = pos - 1;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	60fb      	str	r3, [r7, #12]
    if (last_idx < 0)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	da02      	bge.n	8007fae <get_last_circ_idx+0x1c>
        last_idx = len - 1;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]
    return last_idx;
 8007fae:	68fb      	ldr	r3, [r7, #12]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <__NVIC_GetPriorityGrouping>:
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007fc0:	4b04      	ldr	r3, [pc, #16]	; (8007fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	0a1b      	lsrs	r3, r3, #8
 8007fc6:	f003 0307 	and.w	r3, r3, #7
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	e000ed00 	.word	0xe000ed00

08007fd8 <__NVIC_EnableIRQ>:
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	db0b      	blt.n	8008002 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	f003 021f 	and.w	r2, r3, #31
 8007ff0:	4907      	ldr	r1, [pc, #28]	; (8008010 <__NVIC_EnableIRQ+0x38>)
 8007ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff6:	095b      	lsrs	r3, r3, #5
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8007ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	e000e100 	.word	0xe000e100

08008014 <__NVIC_DisableIRQ>:
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	4603      	mov	r3, r0
 800801c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800801e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008022:	2b00      	cmp	r3, #0
 8008024:	db10      	blt.n	8008048 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008026:	79fb      	ldrb	r3, [r7, #7]
 8008028:	f003 021f 	and.w	r2, r3, #31
 800802c:	4909      	ldr	r1, [pc, #36]	; (8008054 <__NVIC_DisableIRQ+0x40>)
 800802e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008032:	095b      	lsrs	r3, r3, #5
 8008034:	2001      	movs	r0, #1
 8008036:	fa00 f202 	lsl.w	r2, r0, r2
 800803a:	3320      	adds	r3, #32
 800803c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008040:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008044:	f3bf 8f6f 	isb	sy
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	e000e100 	.word	0xe000e100

08008058 <__NVIC_ClearPendingIRQ>:
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008066:	2b00      	cmp	r3, #0
 8008068:	db0c      	blt.n	8008084 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	f003 021f 	and.w	r2, r3, #31
 8008070:	4907      	ldr	r1, [pc, #28]	; (8008090 <__NVIC_ClearPendingIRQ+0x38>)
 8008072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008076:	095b      	lsrs	r3, r3, #5
 8008078:	2001      	movs	r0, #1
 800807a:	fa00 f202 	lsl.w	r2, r0, r2
 800807e:	3360      	adds	r3, #96	; 0x60
 8008080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	e000e100 	.word	0xe000e100

08008094 <__NVIC_SetPriority>:
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	4603      	mov	r3, r0
 800809c:	6039      	str	r1, [r7, #0]
 800809e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	db0a      	blt.n	80080be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	490c      	ldr	r1, [pc, #48]	; (80080e0 <__NVIC_SetPriority+0x4c>)
 80080ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080b2:	0112      	lsls	r2, r2, #4
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	440b      	add	r3, r1
 80080b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80080bc:	e00a      	b.n	80080d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	4908      	ldr	r1, [pc, #32]	; (80080e4 <__NVIC_SetPriority+0x50>)
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	3b04      	subs	r3, #4
 80080cc:	0112      	lsls	r2, r2, #4
 80080ce:	b2d2      	uxtb	r2, r2
 80080d0:	440b      	add	r3, r1
 80080d2:	761a      	strb	r2, [r3, #24]
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	e000e100 	.word	0xe000e100
 80080e4:	e000ed00 	.word	0xe000ed00

080080e8 <NVIC_EncodePriority>:
{
 80080e8:	b480      	push	{r7}
 80080ea:	b089      	sub	sp, #36	; 0x24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	f1c3 0307 	rsb	r3, r3, #7
 8008102:	2b04      	cmp	r3, #4
 8008104:	bf28      	it	cs
 8008106:	2304      	movcs	r3, #4
 8008108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	3304      	adds	r3, #4
 800810e:	2b06      	cmp	r3, #6
 8008110:	d902      	bls.n	8008118 <NVIC_EncodePriority+0x30>
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	3b03      	subs	r3, #3
 8008116:	e000      	b.n	800811a <NVIC_EncodePriority+0x32>
 8008118:	2300      	movs	r3, #0
 800811a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800811c:	f04f 32ff 	mov.w	r2, #4294967295
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	fa02 f303 	lsl.w	r3, r2, r3
 8008126:	43da      	mvns	r2, r3
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	401a      	ands	r2, r3
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008130:	f04f 31ff 	mov.w	r1, #4294967295
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	fa01 f303 	lsl.w	r3, r1, r3
 800813a:	43d9      	mvns	r1, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008140:	4313      	orrs	r3, r2
}
 8008142:	4618      	mov	r0, r3
 8008144:	3724      	adds	r7, #36	; 0x24
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
	...

08008150 <iwdg_feed>:
{
 8008150:	b480      	push	{r7}
 8008152:	af00      	add	r7, sp, #0
    EM_IWDG_RST;
 8008154:	4b04      	ldr	r3, [pc, #16]	; (8008168 <iwdg_feed+0x18>)
 8008156:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800815a:	601a      	str	r2, [r3, #0]
};
 800815c:	bf00      	nop
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	40003000 	.word	0x40003000

0800816c <LL_ADC_SetAnalogWDMonitChannels>:
{
 800816c:	b480      	push	{r7}
 800816e:	b089      	sub	sp, #36	; 0x24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, __ADC_MASK_SHIFT(AWDy, ADC_AWD_CRX_REGOFFSET_MASK)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	330c      	adds	r3, #12
 800817c:	4618      	mov	r0, r3
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008184:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8008188:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	fa92 f2a2 	rbit	r2, r2
 8008190:	617a      	str	r2, [r7, #20]
  return result;
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	fab2 f282 	clz	r2, r2
 8008198:	b2d2      	uxtb	r2, r2
 800819a:	fa23 f102 	lsr.w	r1, r3, r2
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f003 0202 	and.w	r2, r3, #2
 80081a4:	4613      	mov	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4403      	add	r3, r0
 80081b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	4b08      	ldr	r3, [pc, #32]	; (80081dc <LL_ADC_SetAnalogWDMonitChannels+0x70>)
 80081bc:	400b      	ands	r3, r1
 80081be:	43db      	mvns	r3, r3
 80081c0:	401a      	ands	r2, r3
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	400b      	ands	r3, r1
 80081c8:	431a      	orrs	r2, r3
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	601a      	str	r2, [r3, #0]
}
 80081ce:	bf00      	nop
 80081d0:	3724      	adds	r7, #36	; 0x24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	7dc7fffe 	.word	0x7dc7fffe

080081e0 <LL_ADC_SetAnalogWDThresholds>:
{
 80081e0:	b480      	push	{r7}
 80081e2:	b08b      	sub	sp, #44	; 0x2c
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, __ADC_MASK_SHIFT(AWDy, ADC_AWD_TRX_REGOFFSET_MASK));
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3320      	adds	r3, #32
 80081f2:	4619      	mov	r1, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80081fa:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80081fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	fa92 f2a2 	rbit	r2, r2
 8008206:	617a      	str	r2, [r7, #20]
  return result;
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	fab2 f282 	clz	r2, r2
 800820e:	b2d2      	uxtb	r2, r2
 8008210:	40d3      	lsrs	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(*preg,
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	43db      	mvns	r3, r3
 8008220:	401a      	ands	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	fa93 f3a3 	rbit	r3, r3
 800822c:	61fb      	str	r3, [r7, #28]
  return result;
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	fab3 f383 	clz	r3, r3
 8008234:	b2db      	uxtb	r3, r3
 8008236:	4619      	mov	r1, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	408b      	lsls	r3, r1
 800823c:	431a      	orrs	r2, r3
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	601a      	str	r2, [r3, #0]
}
 8008242:	bf00      	nop
 8008244:	372c      	adds	r7, #44	; 0x2c
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <LL_ADC_GetAnalogWDThresholds>:
{
 800824e:	b480      	push	{r7}
 8008250:	b08b      	sub	sp, #44	; 0x2c
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, __ADC_MASK_SHIFT(AWDy, ADC_AWD_TRX_REGOFFSET_MASK));
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3320      	adds	r3, #32
 800825e:	4619      	mov	r1, r3
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008266:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800826a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	fa92 f2a2 	rbit	r2, r2
 8008272:	617a      	str	r2, [r7, #20]
  return result;
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	fab2 f282 	clz	r2, r2
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	40d3      	lsrs	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	627b      	str	r3, [r7, #36]	; 0x24
  return (uint32_t)(READ_BIT(*preg,
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800828e:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8008292:	4013      	ands	r3, r2
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	623a      	str	r2, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008298:	6a3a      	ldr	r2, [r7, #32]
 800829a:	fa92 f2a2 	rbit	r2, r2
 800829e:	61fa      	str	r2, [r7, #28]
  return result;
 80082a0:	69fa      	ldr	r2, [r7, #28]
                    >> POSITION_VAL(AWDThresholdsHighLow)
 80082a2:	fab2 f282 	clz	r2, r2
 80082a6:	b2d2      	uxtb	r2, r2
  return (uint32_t)(READ_BIT(*preg,
 80082a8:	40d3      	lsrs	r3, r2
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	372c      	adds	r7, #44	; 0x2c
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
	...

080082b8 <LL_DMA_GetDataLength>:
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	4a06      	ldr	r2, [pc, #24]	; (80082e0 <LL_DMA_GetDataLength+0x28>)
 80082c8:	5cd3      	ldrb	r3, [r2, r3]
 80082ca:	461a      	mov	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4413      	add	r3, r2
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	b29b      	uxth	r3, r3
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	08016090 	.word	0x08016090

080082e4 <LL_SYSCFG_SetEXTISource>:
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80082ee:	4a13      	ldr	r2, [pc, #76]	; (800833c <LL_SYSCFG_SetEXTISource+0x58>)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	3302      	adds	r3, #2
 80082f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	0c1b      	lsrs	r3, r3, #16
 80082fe:	43db      	mvns	r3, r3
 8008300:	ea02 0103 	and.w	r1, r2, r3
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	0c1b      	lsrs	r3, r3, #16
 8008308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	fa93 f3a3 	rbit	r3, r3
 8008310:	60bb      	str	r3, [r7, #8]
  return result;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	fab3 f383 	clz	r3, r3
 8008318:	b2db      	uxtb	r3, r3
 800831a:	461a      	mov	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	fa03 f202 	lsl.w	r2, r3, r2
 8008322:	4806      	ldr	r0, [pc, #24]	; (800833c <LL_SYSCFG_SetEXTISource+0x58>)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	b2db      	uxtb	r3, r3
 8008328:	430a      	orrs	r2, r1
 800832a:	3302      	adds	r3, #2
 800832c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8008330:	bf00      	nop
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	40010000 	.word	0x40010000

08008340 <LL_EXTI_EnableIT_0_31>:
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8008348:	4b05      	ldr	r3, [pc, #20]	; (8008360 <LL_EXTI_EnableIT_0_31+0x20>)
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	4904      	ldr	r1, [pc, #16]	; (8008360 <LL_EXTI_EnableIT_0_31+0x20>)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4313      	orrs	r3, r2
 8008352:	600b      	str	r3, [r1, #0]
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	40010400 	.word	0x40010400

08008364 <LL_EXTI_DisableIT_0_31>:
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800836c:	4b06      	ldr	r3, [pc, #24]	; (8008388 <LL_EXTI_DisableIT_0_31+0x24>)
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	43db      	mvns	r3, r3
 8008374:	4904      	ldr	r1, [pc, #16]	; (8008388 <LL_EXTI_DisableIT_0_31+0x24>)
 8008376:	4013      	ands	r3, r2
 8008378:	600b      	str	r3, [r1, #0]
}
 800837a:	bf00      	nop
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	40010400 	.word	0x40010400

0800838c <LL_TIM_DisableCounter>:
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f023 0201 	bic.w	r2, r3, #1
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	601a      	str	r2, [r3, #0]
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <daq_trig_init>:
#include "comm.h"
#include "main.h"


void daq_trig_init(daq_data_t* self)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
    self->trig.ignore = 0;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083ba:	3379      	adds	r3, #121	; 0x79
 80083bc:	2200      	movs	r2, #0
 80083be:	701a      	strb	r2, [r3, #0]
    self->trig.ready = 0;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083c6:	337a      	adds	r3, #122	; 0x7a
 80083c8:	2200      	movs	r2, #0
 80083ca:	701a      	strb	r2, [r3, #0]
    self->trig.cntr = 0;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083d2:	337c      	adds	r3, #124	; 0x7c
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]
    self->trig.awd_trig = 0;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083de:	33ac      	adds	r3, #172	; 0xac
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]
    self->trig.all_cntr = 0;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083ea:	3380      	adds	r3, #128	; 0x80
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
    self->trig.pos_frst = 0;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80083f6:	3384      	adds	r3, #132	; 0x84
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]
    self->trig.pos_trig = 0;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008402:	3388      	adds	r3, #136	; 0x88
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]
    self->trig.pos_last = 0;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800840e:	338c      	adds	r3, #140	; 0x8c
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]
    self->trig.pos_diff = 0;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800841a:	3390      	adds	r3, #144	; 0x90
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]
    self->trig.uwtick_first = 0;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008426:	3394      	adds	r3, #148	; 0x94
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]
    self->trig.pretrig_cntr = 0;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008432:	3398      	adds	r3, #152	; 0x98
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
    self->trig.is_post = 0;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800843e:	3378      	adds	r3, #120	; 0x78
 8008440:	2200      	movs	r2, #0
 8008442:	701a      	strb	r2, [r3, #0]
    self->trig.posttrig_size = 0;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800844a:	33a4      	adds	r3, #164	; 0xa4
 800844c:	2200      	movs	r2, #0
 800844e:	601a      	str	r2, [r3, #0]
    self->trig.auttrig_val = 0;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008456:	33a0      	adds	r3, #160	; 0xa0
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]
    self->trig.pretrig_val = 0;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008462:	339c      	adds	r3, #156	; 0x9c
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]
    self->trig.fullmem_val = 0;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800846e:	33a8      	adds	r3, #168	; 0xa8
 8008470:	2200      	movs	r2, #0
 8008472:	601a      	str	r2, [r3, #0]
    self->trig.buff_trig = NULL;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800847a:	33b0      	adds	r3, #176	; 0xb0
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]
    self->trig.dma_ch_trig = EM_DMA_CH_ADC1;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008486:	33b4      	adds	r3, #180	; 0xb4
 8008488:	2201      	movs	r2, #1
 800848a:	601a      	str	r2, [r3, #0]
    self->trig.exti_trig = EM_LA_IRQ_EXTI1;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008492:	33bc      	adds	r3, #188	; 0xbc
 8008494:	2206      	movs	r2, #6
 8008496:	601a      	str	r2, [r3, #0]
    self->trig.adc_trig = ADC1;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800849e:	33c0      	adds	r3, #192	; 0xc0
 80084a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084a4:	601a      	str	r2, [r3, #0]
    self->trig.dma_trig = EM_DMA_ADC1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80084ac:	33b8      	adds	r3, #184	; 0xb8
 80084ae:	4a13      	ldr	r2, [pc, #76]	; (80084fc <daq_trig_init+0x150>)
 80084b0:	601a      	str	r2, [r3, #0]
    self->trig.order = 0;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80084b8:	33c4      	adds	r3, #196	; 0xc4
 80084ba:	2200      	movs	r2, #0
 80084bc:	601a      	str	r2, [r3, #0]
    self->trig.ready_last = 0;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80084c4:	337b      	adds	r3, #123	; 0x7b
 80084c6:	2200      	movs	r2, #0
 80084c8:	701a      	strb	r2, [r3, #0]
    self->trig.post_start = 0;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80084d0:	33c8      	adds	r3, #200	; 0xc8
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]
    self->trig.post_from = 0;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80084dc:	33cc      	adds	r3, #204	; 0xcc
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
    self->trig.dma_pos_catched = 0;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80084e8:	33d0      	adds	r3, #208	; 0xd0
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]
}
 80084ee:	bf00      	nop
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40020000 	.word	0x40020000

08008500 <daq_trig_check>:

void daq_trig_check(daq_data_t* self)
{
 8008500:	b590      	push	{r4, r7, lr}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
    if (self->enabled) // check pre trigger
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800850e:	3336      	adds	r3, #54	; 0x36
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d057      	beq.n	80085c6 <daq_trig_check+0xc6>
    {
        self->trig.pretrig_cntr = self->uwTick - self->trig.uwtick_first;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800851c:	3330      	adds	r3, #48	; 0x30
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008526:	3394      	adds	r3, #148	; 0x94
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	461a      	mov	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008534:	3398      	adds	r3, #152	; 0x98
 8008536:	601a      	str	r2, [r3, #0]
        if (self->trig.pretrig_cntr < 0)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800853e:	3398      	adds	r3, #152	; 0x98
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	da0b      	bge.n	800855e <daq_trig_check+0x5e>
            self->trig.pretrig_cntr += EM_UWTICK_MAX;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800854c:	3398      	adds	r3, #152	; 0x98
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3b01      	subs	r3, #1
 8008552:	461a      	mov	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800855a:	3398      	adds	r3, #152	; 0x98
 800855c:	601a      	str	r2, [r3, #0]

        if (self->trig.pretrig_cntr > self->trig.pretrig_val && self->trig.set.mode != DISABLED)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008564:	3398      	adds	r3, #152	; 0x98
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800856e:	339c      	adds	r3, #156	; 0x9c
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	dd2d      	ble.n	80085d2 <daq_trig_check+0xd2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800857c:	3340      	adds	r3, #64	; 0x40
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b03      	cmp	r3, #3
 8008582:	d026      	beq.n	80085d2 <daq_trig_check+0xd2>
        {
            if (self->mode == SCOPE)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800858a:	3334      	adds	r3, #52	; 0x34
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d11f      	bne.n	80085d2 <daq_trig_check+0xd2>
            {
                ASSERT(self->trig.awd_trig != 0);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008598:	33ac      	adds	r3, #172	; 0xac
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d103      	bne.n	80085a8 <daq_trig_check+0xa8>
 80085a0:	2143      	movs	r1, #67	; 0x43
 80085a2:	485e      	ldr	r0, [pc, #376]	; (800871c <daq_trig_check+0x21c>)
 80085a4:	f004 f963 	bl	800c86e <assert2>
                LL_ADC_SetAnalogWDMonitChannels(self->trig.adc_trig, EM_ADC_AWD self->trig.awd_trig);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80085ae:	33c0      	adds	r3, #192	; 0xc0
 80085b0:	6818      	ldr	r0, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80085b8:	33ac      	adds	r3, #172	; 0xac
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	461a      	mov	r2, r3
 80085be:	4958      	ldr	r1, [pc, #352]	; (8008720 <daq_trig_check+0x220>)
 80085c0:	f7ff fdd4 	bl	800816c <LL_ADC_SetAnalogWDMonitChannels>
 80085c4:	e005      	b.n	80085d2 <daq_trig_check+0xd2>
            }
        }
    }
    else
    {
        self->trig.pretrig_cntr = 0;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80085cc:	3398      	adds	r3, #152	; 0x98
 80085ce:	2200      	movs	r2, #0
 80085d0:	601a      	str	r2, [r3, #0]
    }

    if (self->mode != VM) // auto trigger
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80085d8:	3334      	adds	r3, #52	; 0x34
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	f000 808f 	beq.w	8008700 <daq_trig_check+0x200>
    {
        if (self->enabled &&
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80085e8:	3336      	adds	r3, #54	; 0x36
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d060      	beq.n	80086b2 <daq_trig_check+0x1b2>
            self->trig.set.mode == AUTO &&
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80085f6:	3340      	adds	r3, #64	; 0x40
 80085f8:	781b      	ldrb	r3, [r3, #0]
        if (self->enabled &&
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d159      	bne.n	80086b2 <daq_trig_check+0x1b2>
            self->trig.is_post == 0 &&
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008604:	3378      	adds	r3, #120	; 0x78
 8008606:	781b      	ldrb	r3, [r3, #0]
            self->trig.set.mode == AUTO &&
 8008608:	2b00      	cmp	r3, #0
 800860a:	d152      	bne.n	80086b2 <daq_trig_check+0x1b2>
            self->trig.ready == 0 &&
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008612:	337a      	adds	r3, #122	; 0x7a
 8008614:	781b      	ldrb	r3, [r3, #0]
            self->trig.is_post == 0 &&
 8008616:	2b00      	cmp	r3, #0
 8008618:	d14b      	bne.n	80086b2 <daq_trig_check+0x1b2>
            self->trig.pretrig_cntr > self->trig.auttrig_val)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008620:	3398      	adds	r3, #152	; 0x98
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800862a:	33a0      	adds	r3, #160	; 0xa0
 800862c:	681b      	ldr	r3, [r3, #0]
            self->trig.ready == 0 &&
 800862e:	429a      	cmp	r2, r3
 8008630:	dd3f      	ble.n	80086b2 <daq_trig_check+0x1b2>
        {
            daq_enable(self, 0);
 8008632:	2100      	movs	r1, #0
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7fe ff41 	bl	80074bc <daq_enable>
            self->trig.pos_frst = EM_DMA_LAST_IDX(self->trig.buff_trig->len, self->trig.dma_ch_trig, self->trig.dma_trig);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008640:	33b0      	adds	r3, #176	; 0xb0
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	88db      	ldrh	r3, [r3, #6]
 8008646:	461c      	mov	r4, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800864e:	33b8      	adds	r3, #184	; 0xb8
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008658:	33b4      	adds	r3, #180	; 0xb4
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4619      	mov	r1, r3
 800865e:	4610      	mov	r0, r2
 8008660:	f7ff fe2a 	bl	80082b8 <LL_DMA_GetDataLength>
 8008664:	4603      	mov	r3, r0
 8008666:	1ae3      	subs	r3, r4, r3
 8008668:	461a      	mov	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008670:	33b0      	adds	r3, #176	; 0xb0
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	88db      	ldrh	r3, [r3, #6]
 8008676:	4619      	mov	r1, r3
 8008678:	4610      	mov	r0, r2
 800867a:	f7ff fc8a 	bl	8007f92 <get_last_circ_idx>
 800867e:	4602      	mov	r2, r0
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008686:	3384      	adds	r3, #132	; 0x84
 8008688:	601a      	str	r2, [r3, #0]

            self->trig.ready = 1;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008690:	337a      	adds	r3, #122	; 0x7a
 8008692:	2201      	movs	r2, #1
 8008694:	701a      	strb	r2, [r3, #0]
            self->trig.is_post = 0;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800869c:	3378      	adds	r3, #120	; 0x78
 800869e:	2200      	movs	r2, #0
 80086a0:	701a      	strb	r2, [r3, #0]

            comm_respond(comm_ptr, EM_RESP_RDY_A, 10);
 80086a2:	4b20      	ldr	r3, [pc, #128]	; (8008724 <daq_trig_check+0x224>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	220a      	movs	r2, #10
 80086a8:	491f      	ldr	r1, [pc, #124]	; (8008728 <daq_trig_check+0x228>)
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fd fd66 	bl	800617c <comm_respond>
 80086b0:	e026      	b.n	8008700 <daq_trig_check+0x200>
        }
        else if (self->trig.set.mode == DISABLED &&  // trigger is disabled
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80086b8:	3340      	adds	r3, #64	; 0x40
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d11f      	bne.n	8008700 <daq_trig_check+0x200>
                 self->trig.pretrig_cntr > self->trig.fullmem_val)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80086c6:	3398      	adds	r3, #152	; 0x98
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80086d0:	33a8      	adds	r3, #168	; 0xa8
 80086d2:	681b      	ldr	r3, [r3, #0]
        else if (self->trig.set.mode == DISABLED &&  // trigger is disabled
 80086d4:	429a      	cmp	r2, r3
 80086d6:	dd13      	ble.n	8008700 <daq_trig_check+0x200>
        {
            self->trig.ready = 1;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80086de:	337a      	adds	r3, #122	; 0x7a
 80086e0:	2201      	movs	r2, #1
 80086e2:	701a      	strb	r2, [r3, #0]
            if (self->trig.ready_last == 0)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80086ea:	337b      	adds	r3, #123	; 0x7b
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d106      	bne.n	8008700 <daq_trig_check+0x200>
                comm_respond(comm_ptr, EM_RESP_RDY_D, 10);
 80086f2:	4b0c      	ldr	r3, [pc, #48]	; (8008724 <daq_trig_check+0x224>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	220a      	movs	r2, #10
 80086f8:	490c      	ldr	r1, [pc, #48]	; (800872c <daq_trig_check+0x22c>)
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fd fd3e 	bl	800617c <comm_respond>
        }
    }
    self->trig.ready_last = self->trig.ready;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008706:	337a      	adds	r3, #122	; 0x7a
 8008708:	781a      	ldrb	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008710:	337b      	adds	r3, #123	; 0x7b
 8008712:	701a      	strb	r2, [r3, #0]
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	bd90      	pop	{r4, r7, pc}
 800871c:	08015a24 	.word	0x08015a24
 8008720:	7dc00000 	.word	0x7dc00000
 8008724:	2000d794 	.word	0x2000d794
 8008728:	08015a50 	.word	0x08015a50
 800872c:	08015a5c 	.word	0x08015a5c

08008730 <daq_trig_trigger_scope>:

void daq_trig_trigger_scope(daq_data_t* self)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08a      	sub	sp, #40	; 0x28
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
    ASSERT(self->trig.buff_trig != NULL);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800873e:	33b0      	adds	r3, #176	; 0xb0
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d103      	bne.n	800874e <daq_trig_trigger_scope+0x1e>
 8008746:	216a      	movs	r1, #106	; 0x6a
 8008748:	48ac      	ldr	r0, [pc, #688]	; (80089fc <daq_trig_trigger_scope+0x2cc>)
 800874a:	f004 f890 	bl	800c86e <assert2>
    ASSERT(self->trig.dma_ch_trig != 0);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008754:	33b4      	adds	r3, #180	; 0xb4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d103      	bne.n	8008764 <daq_trig_trigger_scope+0x34>
 800875c:	216b      	movs	r1, #107	; 0x6b
 800875e:	48a7      	ldr	r0, [pc, #668]	; (80089fc <daq_trig_trigger_scope+0x2cc>)
 8008760:	f004 f885 	bl	800c86e <assert2>

    if (self->trig.ready || self->trig.post_start)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800876a:	337a      	adds	r3, #122	; 0x7a
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	f040 8130 	bne.w	80089d4 <daq_trig_trigger_scope+0x2a4>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800877a:	33c8      	adds	r3, #200	; 0xc8
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 8128 	bne.w	80089d4 <daq_trig_trigger_scope+0x2a4>
        goto invalid_trigger;

    int ch_cnt = self->set.ch1_en + self->set.ch2_en + self->set.ch3_en + self->set.ch4_en;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800878a:	33fc      	adds	r3, #252	; 0xfc
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8008796:	33fd      	adds	r3, #253	; 0xfd
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	441a      	add	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80087a2:	33fe      	adds	r3, #254	; 0xfe
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	441a      	add	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80087ae:	33ff      	adds	r3, #255	; 0xff
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	4413      	add	r3, r2
 80087b4:	61fb      	str	r3, [r7, #28]
    int ch_pos_trig = self->trig.dma_pos_catched % ch_cnt;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80087bc:	33d0      	adds	r3, #208	; 0xd0
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	fb93 f2f2 	sdiv	r2, r3, r2
 80087c6:	69f9      	ldr	r1, [r7, #28]
 80087c8:	fb01 f202 	mul.w	r2, r1, r2
 80087cc:	1a9b      	subs	r3, r3, r2
 80087ce:	61bb      	str	r3, [r7, #24]
    int ch_pos_want = ch_cnt - self->trig.order - 1;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80087d6:	33c4      	adds	r3, #196	; 0xc4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	3b01      	subs	r3, #1
 80087e0:	617b      	str	r3, [r7, #20]

    if (ch_pos_want < ch_pos_trig)
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	da0e      	bge.n	8008808 <daq_trig_trigger_scope+0xd8>
        self->trig.dma_pos_catched -= ch_pos_trig - ch_pos_want;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80087f0:	33d0      	adds	r3, #208	; 0xd0
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	69b9      	ldr	r1, [r7, #24]
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	1acb      	subs	r3, r1, r3
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008802:	33d0      	adds	r3, #208	; 0xd0
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	e013      	b.n	8008830 <daq_trig_trigger_scope+0x100>
    else if (ch_pos_want > ch_pos_trig)
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	429a      	cmp	r2, r3
 800880e:	dd0f      	ble.n	8008830 <daq_trig_trigger_scope+0x100>
        self->trig.dma_pos_catched -= ch_cnt - (ch_pos_want - ch_pos_trig);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008816:	33d0      	adds	r3, #208	; 0xd0
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	6979      	ldr	r1, [r7, #20]
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	1acb      	subs	r3, r1, r3
 8008820:	69f9      	ldr	r1, [r7, #28]
 8008822:	1acb      	subs	r3, r1, r3
 8008824:	1ad2      	subs	r2, r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800882c:	33d0      	adds	r3, #208	; 0xd0
 800882e:	601a      	str	r2, [r3, #0]

    if (self->trig.dma_pos_catched < 0)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008836:	33d0      	adds	r3, #208	; 0xd0
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	da10      	bge.n	8008860 <daq_trig_trigger_scope+0x130>
        self->trig.dma_pos_catched += self->trig.buff_trig->len;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008844:	33d0      	adds	r3, #208	; 0xd0
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800884e:	33b0      	adds	r3, #176	; 0xb0
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	88db      	ldrh	r3, [r3, #6]
 8008854:	441a      	add	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800885c:	33d0      	adds	r3, #208	; 0xd0
 800885e:	601a      	str	r2, [r3, #0]

    int prev_last_idx = self->trig.dma_pos_catched - self->trig.buff_trig->chans;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008866:	33d0      	adds	r3, #208	; 0xd0
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008870:	33b0      	adds	r3, #176	; 0xb0
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	889b      	ldrh	r3, [r3, #4]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
    if (prev_last_idx < 0)
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	2b00      	cmp	r3, #0
 800887e:	da09      	bge.n	8008894 <daq_trig_trigger_scope+0x164>
        prev_last_idx += self->trig.buff_trig->len;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008886:	33b0      	adds	r3, #176	; 0xb0
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	88db      	ldrh	r3, [r3, #6]
 800888c:	461a      	mov	r2, r3
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	4413      	add	r3, r2
 8008892:	627b      	str	r3, [r7, #36]	; 0x24

    //uint16_t last_val = 0;
    uint16_t prev_last_val = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	847b      	strh	r3, [r7, #34]	; 0x22

    if (self->set.bits == B8)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800889e:	3306      	adds	r3, #6
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	2b08      	cmp	r3, #8
 80088a4:	d10a      	bne.n	80088bc <daq_trig_trigger_scope+0x18c>
    {
        //last_val = (uint16_t)(((uint8_t*)(self->trig.buff_trig->data))[self->trig.dma_pos_catched]);
        prev_last_val = (uint16_t)(((uint8_t*)(self->trig.buff_trig->data))[prev_last_idx]);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80088ac:	33b0      	adds	r3, #176	; 0xb0
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	4413      	add	r3, r2
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80088ba:	e00a      	b.n	80088d2 <daq_trig_trigger_scope+0x1a2>
    }
    else //(self->set.bits == B12)
    {
        //last_val = (*((uint16_t*)(((uint8_t*)self->trig.buff_trig->data)+(self->trig.dma_pos_catched * 2))));
        prev_last_val = (*((uint16_t*)(((uint8_t*)self->trig.buff_trig->data)+(prev_last_idx * 2))));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80088c2:	33b0      	adds	r3, #176	; 0xb0
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ca:	0052      	lsls	r2, r2, #1
 80088cc:	4413      	add	r3, r2
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    self->trig.all_cntr++;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80088d8:	3380      	adds	r3, #128	; 0x80
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	1c5a      	adds	r2, r3, #1
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80088e4:	3380      	adds	r3, #128	; 0x80
 80088e6:	601a      	str	r2, [r3, #0]
    uint8_t switch_awd = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    if (self->trig.ignore)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80088f4:	3379      	adds	r3, #121	; 0x79
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <daq_trig_trigger_scope+0x1e0>
    {
        self->trig.ignore = 0;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008902:	3379      	adds	r3, #121	; 0x79
 8008904:	2200      	movs	r2, #0
 8008906:	701a      	strb	r2, [r3, #0]
        switch_awd = 1;
 8008908:	2301      	movs	r3, #1
 800890a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800890e:	e030      	b.n	8008972 <daq_trig_trigger_scope+0x242>
    }
    else
    {
        // trigger condition
        if ((self->trig.set.edge == RISING && prev_last_val <= self->trig.set.val) || // last_val > self->trig.set.val &&
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008916:	3341      	adds	r3, #65	; 0x41
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d107      	bne.n	800892e <daq_trig_trigger_scope+0x1fe>
 800891e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008926:	3348      	adds	r3, #72	; 0x48
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	429a      	cmp	r2, r3
 800892c:	dd0e      	ble.n	800894c <daq_trig_trigger_scope+0x21c>
            (self->trig.set.edge == FALLING && prev_last_val >= self->trig.set.val))  // last_val < self->trig.set.val &&
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008934:	3341      	adds	r3, #65	; 0x41
 8008936:	781b      	ldrb	r3, [r3, #0]
        if ((self->trig.set.edge == RISING && prev_last_val <= self->trig.set.val) || // last_val > self->trig.set.val &&
 8008938:	2b01      	cmp	r3, #1
 800893a:	d111      	bne.n	8008960 <daq_trig_trigger_scope+0x230>
            (self->trig.set.edge == FALLING && prev_last_val >= self->trig.set.val))  // last_val < self->trig.set.val &&
 800893c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008944:	3348      	adds	r3, #72	; 0x48
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	db09      	blt.n	8008960 <daq_trig_trigger_scope+0x230>
        {
            daq_trig_poststart(self, self->trig.dma_pos_catched); // VALID TRIG
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008952:	33d0      	adds	r3, #208	; 0xd0
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f8ad 	bl	8008ab8 <daq_trig_poststart>
 800895e:	e008      	b.n	8008972 <daq_trig_trigger_scope+0x242>
        }
        else // false trig, switch edges and wait for another window
        {
            self->trig.ignore = 1;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008966:	3379      	adds	r3, #121	; 0x79
 8008968:	2201      	movs	r2, #1
 800896a:	701a      	strb	r2, [r3, #0]
            switch_awd = 1;
 800896c:	2301      	movs	r3, #1
 800896e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        }
    }

    if (switch_awd)
 8008972:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008976:	2b00      	cmp	r3, #0
 8008978:	d03c      	beq.n	80089f4 <daq_trig_trigger_scope+0x2c4>
    {
        uint32_t awd_h = LL_ADC_GetAnalogWDThresholds(self->trig.adc_trig, EM_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008980:	33c0      	adds	r3, #192	; 0xc0
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a1e      	ldr	r2, [pc, #120]	; (8008a00 <daq_trig_trigger_scope+0x2d0>)
 8008986:	491f      	ldr	r1, [pc, #124]	; (8008a04 <daq_trig_trigger_scope+0x2d4>)
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff fc60 	bl	800824e <LL_ADC_GetAnalogWDThresholds>
 800898e:	6138      	str	r0, [r7, #16]
        uint32_t awd_l = LL_ADC_GetAnalogWDThresholds(self->trig.adc_trig, EM_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008996:	33c0      	adds	r3, #192	; 0xc0
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800899e:	4919      	ldr	r1, [pc, #100]	; (8008a04 <daq_trig_trigger_scope+0x2d4>)
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7ff fc54 	bl	800824e <LL_ADC_GetAnalogWDThresholds>
 80089a6:	60f8      	str	r0, [r7, #12]

        //LL_ADC_SetAnalogWDMonitChannels(self->trig.adc_trig, EM_ADC_AWD LL_ADC_AWD_DISABLE);
        LL_ADC_SetAnalogWDThresholds(self->trig.adc_trig, EM_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH, awd_l);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80089ae:	33c0      	adds	r3, #192	; 0xc0
 80089b0:	6818      	ldr	r0, [r3, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4a12      	ldr	r2, [pc, #72]	; (8008a00 <daq_trig_trigger_scope+0x2d0>)
 80089b6:	4913      	ldr	r1, [pc, #76]	; (8008a04 <daq_trig_trigger_scope+0x2d4>)
 80089b8:	f7ff fc12 	bl	80081e0 <LL_ADC_SetAnalogWDThresholds>
        LL_ADC_SetAnalogWDThresholds(self->trig.adc_trig, EM_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW, awd_h);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80089c2:	33c0      	adds	r3, #192	; 0xc0
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80089cc:	490d      	ldr	r1, [pc, #52]	; (8008a04 <daq_trig_trigger_scope+0x2d4>)
 80089ce:	f7ff fc07 	bl	80081e0 <LL_ADC_SetAnalogWDThresholds>
        //LL_ADC_SetAnalogWDMonitChannels(self->trig.adc_trig, EM_ADC_AWD self->trig.awd_trig);
    }
    
    return;
 80089d2:	e00f      	b.n	80089f4 <daq_trig_trigger_scope+0x2c4>
    
    invalid_trigger:  // if any code gets here, means that trigger is invalid
 80089d4:	bf00      	nop
    LL_ADC_SetAnalogWDMonitChannels(self->trig.adc_trig, EM_ADC_AWD self->trig.awd_trig); // reenable irq
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80089dc:	33c0      	adds	r3, #192	; 0xc0
 80089de:	6818      	ldr	r0, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80089e6:	33ac      	adds	r3, #172	; 0xac
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	461a      	mov	r2, r3
 80089ec:	4905      	ldr	r1, [pc, #20]	; (8008a04 <daq_trig_trigger_scope+0x2d4>)
 80089ee:	f7ff fbbd 	bl	800816c <LL_ADC_SetAnalogWDMonitChannels>
 80089f2:	e000      	b.n	80089f6 <daq_trig_trigger_scope+0x2c6>
    return;
 80089f4:	bf00      	nop
}
 80089f6:	3728      	adds	r7, #40	; 0x28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	08015a24 	.word	0x08015a24
 8008a00:	0fff0000 	.word	0x0fff0000
 8008a04:	7dc00000 	.word	0x7dc00000

08008a08 <daq_trig_trigger_la>:

void daq_trig_trigger_la(daq_data_t* self)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
    ASSERT(self->trig.buff_trig != NULL);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a16:	33b0      	adds	r3, #176	; 0xb0
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d103      	bne.n	8008a26 <daq_trig_trigger_la+0x1e>
 8008a1e:	21b7      	movs	r1, #183	; 0xb7
 8008a20:	4824      	ldr	r0, [pc, #144]	; (8008ab4 <daq_trig_trigger_la+0xac>)
 8008a22:	f003 ff24 	bl	800c86e <assert2>
    ASSERT(self->trig.dma_ch_trig != 0);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a2c:	33b4      	adds	r3, #180	; 0xb4
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d103      	bne.n	8008a3c <daq_trig_trigger_la+0x34>
 8008a34:	21b8      	movs	r1, #184	; 0xb8
 8008a36:	481f      	ldr	r0, [pc, #124]	; (8008ab4 <daq_trig_trigger_la+0xac>)
 8008a38:	f003 ff19 	bl	800c86e <assert2>

    if (self->trig.ready || self->trig.post_start)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a42:	337a      	adds	r3, #122	; 0x7a
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d11c      	bne.n	8008a84 <daq_trig_trigger_la+0x7c>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a50:	33c8      	adds	r3, #200	; 0xc8
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d115      	bne.n	8008a84 <daq_trig_trigger_la+0x7c>
        goto invalid_trigger;

    if (self->trig.pretrig_cntr > self->trig.pretrig_val)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a5e:	3398      	adds	r3, #152	; 0x98
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a68:	339c      	adds	r3, #156	; 0x9c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	dd1d      	ble.n	8008aac <daq_trig_trigger_la+0xa4>
            if (self->trig.dma_pos_catched < 0)
                self->trig.dma_pos_catched += self->trig.buff_trig->len;
        }
        */

        daq_trig_poststart(self, self->trig.dma_pos_catched); // VALID TRIG
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a76:	33d0      	adds	r3, #208	; 0xd0
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f81b 	bl	8008ab8 <daq_trig_poststart>
    }
    
    return;
 8008a82:	e013      	b.n	8008aac <daq_trig_trigger_la+0xa4>
    
    invalid_trigger: // if any code gets here, means that trigger is invalid
 8008a84:	bf00      	nop
    NVIC_ClearPendingIRQ(self->trig.exti_trig);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a8c:	33bc      	adds	r3, #188	; 0xbc
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	b25b      	sxtb	r3, r3
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff fae0 	bl	8008058 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(self->trig.exti_trig); // reenable irq
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008a9e:	33bc      	adds	r3, #188	; 0xbc
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	b25b      	sxtb	r3, r3
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff fa97 	bl	8007fd8 <__NVIC_EnableIRQ>
 8008aaa:	e000      	b.n	8008aae <daq_trig_trigger_la+0xa6>
    return;
 8008aac:	bf00      	nop
}
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	08015a24 	.word	0x08015a24

08008ab8 <daq_trig_poststart>:

void daq_trig_poststart(daq_data_t* self, int pos)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
    self->trig.post_start = 1;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008ac8:	33c8      	adds	r3, #200	; 0xc8
 8008aca:	2201      	movs	r2, #1
 8008acc:	601a      	str	r2, [r3, #0]
    self->trig.post_from = pos;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008ad4:	33cc      	adds	r3, #204	; 0xcc
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	601a      	str	r2, [r3, #0]
    self->trig.pretrig_cntr = 0;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008ae0:	3398      	adds	r3, #152	; 0x98
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]

    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60fb      	str	r3, [r7, #12]
    ASSERT(xSemaphoreGiveFromISR(sem2_trig, &xHigherPriorityTaskWoken) == pdPASS);
 8008aea:	4b10      	ldr	r3, [pc, #64]	; (8008b2c <daq_trig_poststart+0x74>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f107 020c 	add.w	r2, r7, #12
 8008af2:	4611      	mov	r1, r2
 8008af4:	4618      	mov	r0, r3
 8008af6:	f008 fc45 	bl	8011384 <xQueueGiveFromISR>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d003      	beq.n	8008b08 <daq_trig_poststart+0x50>
 8008b00:	21e9      	movs	r1, #233	; 0xe9
 8008b02:	480b      	ldr	r0, [pc, #44]	; (8008b30 <daq_trig_poststart+0x78>)
 8008b04:	f003 feb3 	bl	800c86e <assert2>
    if (xHigherPriorityTaskWoken != pdFALSE)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <daq_trig_poststart+0x6c>
        portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d007      	beq.n	8008b24 <daq_trig_poststart+0x6c>
 8008b14:	4b07      	ldr	r3, [pc, #28]	; (8008b34 <daq_trig_poststart+0x7c>)
 8008b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	f3bf 8f6f 	isb	sy
}
 8008b24:	bf00      	nop
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	2000d82c 	.word	0x2000d82c
 8008b30:	08015a24 	.word	0x08015a24
 8008b34:	e000ed04 	.word	0xe000ed04

08008b38 <daq_trig_postcount>:

void daq_trig_postcount(daq_data_t* self) // TODO slow start ??!! 600 samples (800 ksps)
{
 8008b38:	b5b0      	push	{r4, r5, r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
    int last_idx = self->trig.post_from;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008b46:	33cc      	adds	r3, #204	; 0xcc
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	617b      	str	r3, [r7, #20]

    ASSERT(self->trig.buff_trig != NULL);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008b52:	33b0      	adds	r3, #176	; 0xb0
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d103      	bne.n	8008b62 <daq_trig_postcount+0x2a>
 8008b5a:	21f2      	movs	r1, #242	; 0xf2
 8008b5c:	4875      	ldr	r0, [pc, #468]	; (8008d34 <daq_trig_postcount+0x1fc>)
 8008b5e:	f003 fe86 	bl	800c86e <assert2>

    self->trig.is_post = 1;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008b68:	3378      	adds	r3, #120	; 0x78
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	701a      	strb	r2, [r3, #0]
    self->trig.cntr++;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008b74:	337c      	adds	r3, #124	; 0x7c
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	1c5a      	adds	r2, r3, #1
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008b80:	337c      	adds	r3, #124	; 0x7c
 8008b82:	601a      	str	r2, [r3, #0]

    if (self->mode == SCOPE)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008b8a:	3334      	adds	r3, #52	; 0x34
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f040 80d4 	bne.w	8008d3c <daq_trig_postcount+0x204>
    {
        self->trig.pos_trig = last_idx + self->trig.order;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008b9a:	33c4      	adds	r3, #196	; 0xc4
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	441a      	add	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008ba8:	3388      	adds	r3, #136	; 0x88
 8008baa:	601a      	str	r2, [r3, #0]
        if (self->trig.pos_trig >= self->trig.buff_trig->len)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008bb2:	3388      	adds	r3, #136	; 0x88
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008bbc:	33b0      	adds	r3, #176	; 0xb0
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	88db      	ldrh	r3, [r3, #6]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	db10      	blt.n	8008be8 <daq_trig_postcount+0xb0>
            self->trig.pos_trig -= self->trig.buff_trig->len;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008bcc:	3388      	adds	r3, #136	; 0x88
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008bd6:	33b0      	adds	r3, #176	; 0xb0
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	88db      	ldrh	r3, [r3, #6]
 8008bdc:	1ad2      	subs	r2, r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008be4:	3388      	adds	r3, #136	; 0x88
 8008be6:	601a      	str	r2, [r3, #0]

        int post = (int)((float)self->set.mem * ((float)(100 - self->trig.set.pretrigger) / 100.0));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008bee:	3304      	adds	r3, #4
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfa:	ee17 0a90 	vmov	r0, s15
 8008bfe:	f7f7 fcbb 	bl	8000578 <__aeabi_f2d>
 8008c02:	4604      	mov	r4, r0
 8008c04:	460d      	mov	r5, r1
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008c0c:	333c      	adds	r3, #60	; 0x3c
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8008c14:	ee07 3a90 	vmov	s15, r3
 8008c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c1c:	ee17 0a90 	vmov	r0, s15
 8008c20:	f7f7 fcaa 	bl	8000578 <__aeabi_f2d>
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	4b43      	ldr	r3, [pc, #268]	; (8008d38 <daq_trig_postcount+0x200>)
 8008c2a:	f7f7 fe27 	bl	800087c <__aeabi_ddiv>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4620      	mov	r0, r4
 8008c34:	4629      	mov	r1, r5
 8008c36:	f7f7 fcf7 	bl	8000628 <__aeabi_dmul>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	4618      	mov	r0, r3
 8008c40:	4621      	mov	r1, r4
 8008c42:	f7f7 ffa1 	bl	8000b88 <__aeabi_d2iz>
 8008c46:	4603      	mov	r3, r0
 8008c48:	613b      	str	r3, [r7, #16]
        self->trig.posttrig_size = post * self->trig.buff_trig->chans;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008c50:	33b0      	adds	r3, #176	; 0xb0
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	889b      	ldrh	r3, [r3, #4]
 8008c56:	461a      	mov	r2, r3
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	fb03 f202 	mul.w	r2, r3, r2
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008c64:	33a4      	adds	r3, #164	; 0xa4
 8008c66:	601a      	str	r2, [r3, #0]

        self->trig.pos_last = self->trig.pos_trig + self->trig.posttrig_size;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008c6e:	3388      	adds	r3, #136	; 0x88
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008c78:	33a4      	adds	r3, #164	; 0xa4
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	441a      	add	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008c84:	338c      	adds	r3, #140	; 0x8c
 8008c86:	601a      	str	r2, [r3, #0]
        if (self->trig.pos_last >= self->trig.buff_trig->len)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008c8e:	338c      	adds	r3, #140	; 0x8c
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008c98:	33b0      	adds	r3, #176	; 0xb0
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	88db      	ldrh	r3, [r3, #6]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	db10      	blt.n	8008cc4 <daq_trig_postcount+0x18c>
            self->trig.pos_last -= self->trig.buff_trig->len;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008ca8:	338c      	adds	r3, #140	; 0x8c
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008cb2:	33b0      	adds	r3, #176	; 0xb0
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	88db      	ldrh	r3, [r3, #6]
 8008cb8:	1ad2      	subs	r2, r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008cc0:	338c      	adds	r3, #140	; 0x8c
 8008cc2:	601a      	str	r2, [r3, #0]

        self->trig.pos_frst = self->trig.pos_trig - ((self->set.mem - post + 1) * self->trig.buff_trig->chans) + 1;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008cca:	3388      	adds	r3, #136	; 0x88
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	1acb      	subs	r3, r1, r3
 8008cde:	1c59      	adds	r1, r3, #1
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008ce6:	33b0      	adds	r3, #176	; 0xb0
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	889b      	ldrh	r3, [r3, #4]
 8008cec:	fb03 f301 	mul.w	r3, r3, r1
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008cfa:	3384      	adds	r3, #132	; 0x84
 8008cfc:	601a      	str	r2, [r3, #0]
        //if (self->trig.pos_frst >= self->trig.buff_trig->len)
        //    self->trig.pos_frst -= self->trig.buff_trig->len;
        if (self->trig.pos_frst < 0)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008d04:	3384      	adds	r3, #132	; 0x84
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f280 80b0 	bge.w	8008e6e <daq_trig_postcount+0x336>
            self->trig.pos_frst += self->trig.buff_trig->len;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008d14:	3384      	adds	r3, #132	; 0x84
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008d1e:	33b0      	adds	r3, #176	; 0xb0
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	88db      	ldrh	r3, [r3, #6]
 8008d24:	441a      	add	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008d2c:	3384      	adds	r3, #132	; 0x84
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	e09d      	b.n	8008e6e <daq_trig_postcount+0x336>
 8008d32:	bf00      	nop
 8008d34:	08015a24 	.word	0x08015a24
 8008d38:	40590000 	.word	0x40590000
    }
    else // mode == LA
    {
        self->trig.pos_trig = last_idx;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008d42:	3388      	adds	r3, #136	; 0x88
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	601a      	str	r2, [r3, #0]
        self->trig.posttrig_size = (int)((float)self->set.mem * ((float)(100 - self->trig.set.pretrigger) / 100.0));
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008d4e:	3304      	adds	r3, #4
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	ee17 0a90 	vmov	r0, s15
 8008d5e:	f7f7 fc0b 	bl	8000578 <__aeabi_f2d>
 8008d62:	4604      	mov	r4, r0
 8008d64:	460d      	mov	r5, r1
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008d6c:	333c      	adds	r3, #60	; 0x3c
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8008d74:	ee07 3a90 	vmov	s15, r3
 8008d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d7c:	ee17 0a90 	vmov	r0, s15
 8008d80:	f7f7 fbfa 	bl	8000578 <__aeabi_f2d>
 8008d84:	f04f 0200 	mov.w	r2, #0
 8008d88:	4b81      	ldr	r3, [pc, #516]	; (8008f90 <daq_trig_postcount+0x458>)
 8008d8a:	f7f7 fd77 	bl	800087c <__aeabi_ddiv>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4620      	mov	r0, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	f7f7 fc47 	bl	8000628 <__aeabi_dmul>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	4618      	mov	r0, r3
 8008da0:	4621      	mov	r1, r4
 8008da2:	f7f7 fef1 	bl	8000b88 <__aeabi_d2iz>
 8008da6:	4602      	mov	r2, r0
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008dae:	33a4      	adds	r3, #164	; 0xa4
 8008db0:	601a      	str	r2, [r3, #0]

        self->trig.pos_last = self->trig.pos_trig + self->trig.posttrig_size;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008db8:	3388      	adds	r3, #136	; 0x88
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008dc2:	33a4      	adds	r3, #164	; 0xa4
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	441a      	add	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008dce:	338c      	adds	r3, #140	; 0x8c
 8008dd0:	601a      	str	r2, [r3, #0]
        if (self->trig.pos_last >= self->trig.buff_trig->len)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008dd8:	338c      	adds	r3, #140	; 0x8c
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008de2:	33b0      	adds	r3, #176	; 0xb0
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	88db      	ldrh	r3, [r3, #6]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	db10      	blt.n	8008e0e <daq_trig_postcount+0x2d6>
            self->trig.pos_last -= self->trig.buff_trig->len;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008df2:	338c      	adds	r3, #140	; 0x8c
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008dfc:	33b0      	adds	r3, #176	; 0xb0
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	88db      	ldrh	r3, [r3, #6]
 8008e02:	1ad2      	subs	r2, r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e0a:	338c      	adds	r3, #140	; 0x8c
 8008e0c:	601a      	str	r2, [r3, #0]

        self->trig.pos_frst = self->trig.pos_trig - (self->set.mem - self->trig.posttrig_size) + 1; // +1 ??
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e14:	3388      	adds	r3, #136	; 0x88
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e1e:	3304      	adds	r3, #4
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	4619      	mov	r1, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e2a:	33a4      	adds	r3, #164	; 0xa4
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	1acb      	subs	r3, r1, r3
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e3a:	3384      	adds	r3, #132	; 0x84
 8008e3c:	601a      	str	r2, [r3, #0]
        if (self->trig.pos_frst < 0)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e44:	3384      	adds	r3, #132	; 0x84
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	da10      	bge.n	8008e6e <daq_trig_postcount+0x336>
            self->trig.pos_frst += self->trig.buff_trig->len;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e52:	3384      	adds	r3, #132	; 0x84
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e5c:	33b0      	adds	r3, #176	; 0xb0
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	88db      	ldrh	r3, [r3, #6]
 8008e62:	441a      	add	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e6a:	3384      	adds	r3, #132	; 0x84
 8008e6c:	601a      	str	r2, [r3, #0]
    }

    //int pos_last_len = self->trig.buff_trig->len - self->trig.pos_last;  // DMA len of last valid point to compare
    int target_prev = self->trig.buff_trig->len - self->trig.post_from;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e74:	33b0      	adds	r3, #176	; 0xb0
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	88db      	ldrh	r3, [r3, #6]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e82:	33cc      	adds	r3, #204	; 0xcc
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	61fb      	str	r3, [r7, #28]
    int target_sum = 0;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61bb      	str	r3, [r7, #24]

    while(1)
    {
        iwdg_feed(); // 1
 8008e8e:	f7ff f95f 	bl	8008150 <iwdg_feed>

        // 15 instructions worst case
        // Cortex M3 - 1.25 IPC per core -> 72/(15/1.25) = 6 MHz max
        int target = LL_DMA_GetDataLength(self->trig.dma_trig, self->trig.dma_ch_trig); // 6
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008e98:	33b8      	adds	r3, #184	; 0xb8
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008ea2:	33b4      	adds	r3, #180	; 0xb4
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	f7ff fa05 	bl	80082b8 <LL_DMA_GetDataLength>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	60fb      	str	r3, [r7, #12]

        int target_diff = target_prev - target;
 8008eb2:	69fa      	ldr	r2, [r7, #28]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	60bb      	str	r3, [r7, #8]
        if (target_diff >= 0)
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	db04      	blt.n	8008eca <daq_trig_postcount+0x392>
            target_sum += target_diff;
 8008ec0:	69ba      	ldr	r2, [r7, #24]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	61bb      	str	r3, [r7, #24]
 8008ec8:	e00b      	b.n	8008ee2 <daq_trig_postcount+0x3aa>
        else
            target_sum += target_diff + self->trig.buff_trig->len;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008ed0:	33b0      	adds	r3, #176	; 0xb0
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	88db      	ldrh	r3, [r3, #6]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	4413      	add	r3, r2
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	4413      	add	r3, r2
 8008ee0:	61bb      	str	r3, [r7, #24]

        target_prev = target;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	61fb      	str	r3, [r7, #28]

        if (target_sum >= self->trig.posttrig_size) // pos_last_len == target
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008eec:	33a4      	adds	r3, #164	; 0xa4
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	dbcb      	blt.n	8008e8e <daq_trig_postcount+0x356>
        {
            //ASSERT(pos_last_len == target);

            LL_TIM_DisableCounter(EM_TIM_DAQ);
 8008ef6:	4827      	ldr	r0, [pc, #156]	; (8008f94 <daq_trig_postcount+0x45c>)
 8008ef8:	f7ff fa48 	bl	800838c <LL_TIM_DisableCounter>

            daq_enable(self, 0);
 8008efc:	2100      	movs	r1, #0
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7fe fadc 	bl	80074bc <daq_enable>
            self->trig.ready = 1;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008f0a:	337a      	adds	r3, #122	; 0x7a
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	701a      	strb	r2, [r3, #0]
            self->trig.is_post = 0;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008f16:	3378      	adds	r3, #120	; 0x78
 8008f18:	2200      	movs	r2, #0
 8008f1a:	701a      	strb	r2, [r3, #0]

            self->trig.pos_diff = self->trig.pos_last - self->trig.pos_trig;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008f22:	338c      	adds	r3, #140	; 0x8c
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008f2c:	3388      	adds	r3, #136	; 0x88
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	1ad2      	subs	r2, r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008f38:	3390      	adds	r3, #144	; 0x90
 8008f3a:	601a      	str	r2, [r3, #0]
            if (self->trig.pos_diff < 0)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008f42:	3390      	adds	r3, #144	; 0x90
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	da10      	bge.n	8008f6c <daq_trig_postcount+0x434>
                self->trig.pos_diff += self->trig.buff_trig->len;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008f50:	3390      	adds	r3, #144	; 0x90
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008f5a:	33b0      	adds	r3, #176	; 0xb0
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	88db      	ldrh	r3, [r3, #6]
 8008f60:	441a      	add	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008f68:	3390      	adds	r3, #144	; 0x90
 8008f6a:	601a      	str	r2, [r3, #0]

            comm_respond(comm_ptr, EM_RESP_RDY_N, 10); // data ready
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <daq_trig_postcount+0x460>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	220a      	movs	r2, #10
 8008f72:	490a      	ldr	r1, [pc, #40]	; (8008f9c <daq_trig_postcount+0x464>)
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fd f901 	bl	800617c <comm_respond>

            break;
 8008f7a:	bf00      	nop
        }
    }
    self->trig.post_start = 0;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008f82:	33c8      	adds	r3, #200	; 0xc8
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]
}
 8008f88:	bf00      	nop
 8008f8a:	3720      	adds	r7, #32
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8008f90:	40590000 	.word	0x40590000
 8008f94:	40000400 	.word	0x40000400
 8008f98:	2000d794 	.word	0x2000d794
 8008f9c:	08015a68 	.word	0x08015a68

08008fa0 <daq_trig_update>:

void daq_trig_update(daq_data_t* self)
{
 8008fa0:	b590      	push	{r4, r7, lr}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af02      	add	r7, sp, #8
 8008fa6:	6078      	str	r0, [r7, #4]
    daq_trig_set(self, self->trig.set.ch, self->trig.set.val_percent,
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008fae:	3344      	adds	r3, #68	; 0x44
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	461c      	mov	r4, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008fba:	334c      	adds	r3, #76	; 0x4c
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	b2d9      	uxtb	r1, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008fc6:	3341      	adds	r3, #65	; 0x41
 8008fc8:	7818      	ldrb	r0, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008fd0:	3340      	adds	r3, #64	; 0x40
 8008fd2:	781a      	ldrb	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8008fda:	333c      	adds	r3, #60	; 0x3c
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	9200      	str	r2, [sp, #0]
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	460a      	mov	r2, r1
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f805 	bl	8008ff8 <daq_trig_set>
                 self->trig.set.edge, self->trig.set.mode, self->trig.set.pretrigger);
}
 8008fee:	bf00      	nop
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd90      	pop	{r4, r7, pc}
	...

08008ff8 <daq_trig_set>:
{
    daq_trig_set(self, 0, self->trig.set.val_percent, self->trig.set.edge, DISABLED, self->trig.set.pretrigger);
}

int daq_trig_set(daq_data_t* self, uint32_t ch, uint8_t level, enum trig_edge edge, enum trig_mode mode, int pretrigger)
{
 8008ff8:	b5b0      	push	{r4, r5, r7, lr}
 8008ffa:	b08c      	sub	sp, #48	; 0x30
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	4611      	mov	r1, r2
 8009004:	461a      	mov	r2, r3
 8009006:	460b      	mov	r3, r1
 8009008:	71fb      	strb	r3, [r7, #7]
 800900a:	4613      	mov	r3, r2
 800900c:	71bb      	strb	r3, [r7, #6]
    if((level < 0 || level > 100) ||
 800900e:	79fb      	ldrb	r3, [r7, #7]
 8009010:	2b64      	cmp	r3, #100	; 0x64
 8009012:	d80b      	bhi.n	800902c <daq_trig_set+0x34>
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d008      	beq.n	800902c <daq_trig_set+0x34>
       (ch < 1 || ch > 4) ||
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2b04      	cmp	r3, #4
 800901e:	d805      	bhi.n	800902c <daq_trig_set+0x34>
 8009020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009022:	2b63      	cmp	r3, #99	; 0x63
 8009024:	dc02      	bgt.n	800902c <daq_trig_set+0x34>
       (pretrigger > 99 || pretrigger < 1))
 8009026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009028:	2b00      	cmp	r3, #0
 800902a:	dc02      	bgt.n	8009032 <daq_trig_set+0x3a>
    {
        return -1;
 800902c:	f04f 33ff 	mov.w	r3, #4294967295
 8009030:	e358      	b.n	80096e4 <daq_trig_set+0x6ec>
    }

    daq_enable(self, 0);
 8009032:	2100      	movs	r1, #0
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f7fe fa41 	bl	80074bc <daq_enable>
    daq_reset(self);
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f7fe f9d0 	bl	80073e0 <daq_reset>
    ADC_TypeDef* adc = ADC1;
 8009040:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009044:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (self->mode == LA)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800904c:	3334      	adds	r3, #52	; 0x34
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	2b02      	cmp	r3, #2
 8009052:	d112      	bne.n	800907a <daq_trig_set+0x82>
    {
        self->trig.buff_trig = &self->buff1;
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800905c:	33b0      	adds	r3, #176	; 0xb0
 800905e:	601a      	str	r2, [r3, #0]
        self->trig.dma_ch_trig = EM_DMA_CH_LA;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009066:	33b4      	adds	r3, #180	; 0xb4
 8009068:	2206      	movs	r2, #6
 800906a:	601a      	str	r2, [r3, #0]
        self->trig.dma_trig = EM_DMA_LA;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009072:	33b8      	adds	r3, #184	; 0xb8
 8009074:	4ab4      	ldr	r2, [pc, #720]	; (8009348 <daq_trig_set+0x350>)
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	e097      	b.n	80091aa <daq_trig_set+0x1b2>
    }
    else
    {
        int ch2 = ch;
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (ch == 0 || mode == DISABLED)
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <daq_trig_set+0x94>
 8009084:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009088:	2b03      	cmp	r3, #3
 800908a:	d126      	bne.n	80090da <daq_trig_set+0xe2>
        {
            if (self->set.ch1_en) ch2 = 1;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8009092:	33fc      	adds	r3, #252	; 0xfc
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <daq_trig_set+0xa8>
 800909a:	2301      	movs	r3, #1
 800909c:	62bb      	str	r3, [r7, #40]	; 0x28
 800909e:	e01c      	b.n	80090da <daq_trig_set+0xe2>
            else if (self->set.ch2_en) ch2 = 2;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80090a6:	33fd      	adds	r3, #253	; 0xfd
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <daq_trig_set+0xbc>
 80090ae:	2302      	movs	r3, #2
 80090b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80090b2:	e012      	b.n	80090da <daq_trig_set+0xe2>
            else if (self->set.ch3_en) ch2 = 3;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80090ba:	33fe      	adds	r3, #254	; 0xfe
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d002      	beq.n	80090c8 <daq_trig_set+0xd0>
 80090c2:	2303      	movs	r3, #3
 80090c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80090c6:	e008      	b.n	80090da <daq_trig_set+0xe2>
            else if (self->set.ch4_en) ch2 = 4;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 80090ce:	33ff      	adds	r3, #255	; 0xff
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <daq_trig_set+0xe2>
 80090d6:	2304      	movs	r3, #4
 80090d8:	62bb      	str	r3, [r7, #40]	; 0x28
                if (ch2 == 4) self->trig.order = ch_cnt - it;
        }

#elif defined(EM_ADC_MODE_ADC1234)

        self->trig.order = 0;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80090e0:	33c4      	adds	r3, #196	; 0xc4
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]
        if (ch2 == 1)
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d114      	bne.n	8009116 <daq_trig_set+0x11e>
        {
            adc = ADC1;
 80090ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80090f0:	62fb      	str	r3, [r7, #44]	; 0x2c
            self->trig.buff_trig = &self->buff1;
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80090fa:	33b0      	adds	r3, #176	; 0xb0
 80090fc:	601a      	str	r2, [r3, #0]
            self->trig.dma_ch_trig = EM_DMA_CH_ADC1;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009104:	33b4      	adds	r3, #180	; 0xb4
 8009106:	2201      	movs	r2, #1
 8009108:	601a      	str	r2, [r3, #0]
            self->trig.dma_trig = EM_DMA_ADC1;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009110:	33b8      	adds	r3, #184	; 0xb8
 8009112:	4a8d      	ldr	r2, [pc, #564]	; (8009348 <daq_trig_set+0x350>)
 8009114:	601a      	str	r2, [r3, #0]
        }
        if (ch2 == 2)
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009118:	2b02      	cmp	r3, #2
 800911a:	d116      	bne.n	800914a <daq_trig_set+0x152>
        {
            adc = ADC2;
 800911c:	4b8b      	ldr	r3, [pc, #556]	; (800934c <daq_trig_set+0x354>)
 800911e:	62fb      	str	r3, [r7, #44]	; 0x2c
            self->trig.buff_trig = &self->buff2;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f103 020c 	add.w	r2, r3, #12
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800912c:	33b0      	adds	r3, #176	; 0xb0
 800912e:	601a      	str	r2, [r3, #0]
            self->trig.dma_ch_trig = EM_DMA_CH_ADC2;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009136:	33b4      	adds	r3, #180	; 0xb4
 8009138:	2201      	movs	r2, #1
 800913a:	601a      	str	r2, [r3, #0]
            self->trig.dma_trig = EM_DMA_ADC2;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009142:	33b8      	adds	r3, #184	; 0xb8
 8009144:	4a82      	ldr	r2, [pc, #520]	; (8009350 <daq_trig_set+0x358>)
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	e02f      	b.n	80091aa <daq_trig_set+0x1b2>
        }
        else if (ch2 == 3)
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	2b03      	cmp	r3, #3
 800914e:	d116      	bne.n	800917e <daq_trig_set+0x186>
        {
            adc = ADC3;
 8009150:	4b80      	ldr	r3, [pc, #512]	; (8009354 <daq_trig_set+0x35c>)
 8009152:	62fb      	str	r3, [r7, #44]	; 0x2c
            self->trig.buff_trig = &self->buff3;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f103 0218 	add.w	r2, r3, #24
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009160:	33b0      	adds	r3, #176	; 0xb0
 8009162:	601a      	str	r2, [r3, #0]
            self->trig.dma_ch_trig = EM_DMA_CH_ADC3;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800916a:	33b4      	adds	r3, #180	; 0xb4
 800916c:	2205      	movs	r2, #5
 800916e:	601a      	str	r2, [r3, #0]
            self->trig.dma_trig = EM_DMA_ADC3;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009176:	33b8      	adds	r3, #184	; 0xb8
 8009178:	4a75      	ldr	r2, [pc, #468]	; (8009350 <daq_trig_set+0x358>)
 800917a:	601a      	str	r2, [r3, #0]
 800917c:	e015      	b.n	80091aa <daq_trig_set+0x1b2>
        }
        else // if (ch2 == 4)
        {
            adc = ADC4;
 800917e:	4b76      	ldr	r3, [pc, #472]	; (8009358 <daq_trig_set+0x360>)
 8009180:	62fb      	str	r3, [r7, #44]	; 0x2c
            self->trig.buff_trig = &self->buff4;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800918e:	33b0      	adds	r3, #176	; 0xb0
 8009190:	601a      	str	r2, [r3, #0]
            self->trig.dma_ch_trig = EM_DMA_CH_ADC4;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009198:	33b4      	adds	r3, #180	; 0xb4
 800919a:	2202      	movs	r2, #2
 800919c:	601a      	str	r2, [r3, #0]
            self->trig.dma_trig = EM_DMA_ADC4;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80091a4:	33b8      	adds	r3, #184	; 0xb8
 80091a6:	4a6a      	ldr	r2, [pc, #424]	; (8009350 <daq_trig_set+0x358>)
 80091a8:	601a      	str	r2, [r3, #0]
        }

#endif
    }

    self->trig.fullmem_val = (int)(((1.0 / (float)self->set.fs) * (float)self->set.mem) * (float)EM_SYSTICK_FREQ) + 1;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f7 f9e0 	bl	8000578 <__aeabi_f2d>
 80091b8:	4603      	mov	r3, r0
 80091ba:	460c      	mov	r4, r1
 80091bc:	461a      	mov	r2, r3
 80091be:	4623      	mov	r3, r4
 80091c0:	f04f 0000 	mov.w	r0, #0
 80091c4:	4965      	ldr	r1, [pc, #404]	; (800935c <daq_trig_set+0x364>)
 80091c6:	f7f7 fb59 	bl	800087c <__aeabi_ddiv>
 80091ca:	4603      	mov	r3, r0
 80091cc:	460c      	mov	r4, r1
 80091ce:	4625      	mov	r5, r4
 80091d0:	461c      	mov	r4, r3
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80091d8:	3304      	adds	r3, #4
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	ee07 3a90 	vmov	s15, r3
 80091e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e4:	ee17 0a90 	vmov	r0, s15
 80091e8:	f7f7 f9c6 	bl	8000578 <__aeabi_f2d>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4620      	mov	r0, r4
 80091f2:	4629      	mov	r1, r5
 80091f4:	f7f7 fa18 	bl	8000628 <__aeabi_dmul>
 80091f8:	4603      	mov	r3, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	4618      	mov	r0, r3
 80091fe:	4621      	mov	r1, r4
 8009200:	f04f 0200 	mov.w	r2, #0
 8009204:	4b56      	ldr	r3, [pc, #344]	; (8009360 <daq_trig_set+0x368>)
 8009206:	f7f7 fa0f 	bl	8000628 <__aeabi_dmul>
 800920a:	4603      	mov	r3, r0
 800920c:	460c      	mov	r4, r1
 800920e:	4618      	mov	r0, r3
 8009210:	4621      	mov	r1, r4
 8009212:	f7f7 fcb9 	bl	8000b88 <__aeabi_d2iz>
 8009216:	4603      	mov	r3, r0
 8009218:	1c5a      	adds	r2, r3, #1
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009220:	33a8      	adds	r3, #168	; 0xa8
 8009222:	601a      	str	r2, [r3, #0]
    self->trig.auttrig_val = EM_AUTRIG_MIN_MS + (int)((float)self->trig.fullmem_val * 1.0);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800922a:	33a8      	adds	r3, #168	; 0xa8
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	ee07 3a90 	vmov	s15, r3
 8009232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800923a:	ee17 3a90 	vmov	r3, s15
 800923e:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009248:	33a0      	adds	r3, #160	; 0xa0
 800924a:	601a      	str	r2, [r3, #0]
    self->trig.adc_trig = adc;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009252:	33c0      	adds	r3, #192	; 0xc0
 8009254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009256:	601a      	str	r2, [r3, #0]

    if (ch == 0 || mode == DISABLED)
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <daq_trig_set+0x26e>
 800925e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009262:	2b03      	cmp	r3, #3
 8009264:	d12b      	bne.n	80092be <daq_trig_set+0x2c6>
    {
        ASSERT(self->trig.exti_trig != 0);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800926c:	33bc      	adds	r3, #188	; 0xbc
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d104      	bne.n	800927e <daq_trig_set+0x286>
 8009274:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8009278:	483a      	ldr	r0, [pc, #232]	; (8009364 <daq_trig_set+0x36c>)
 800927a:	f003 faf8 	bl	800c86e <assert2>

        NVIC_DisableIRQ(self->trig.exti_trig);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009284:	33bc      	adds	r3, #188	; 0xbc
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	b25b      	sxtb	r3, r3
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fec2 	bl	8008014 <__NVIC_DisableIRQ>
        LL_ADC_SetAnalogWDMonitChannels(adc, EM_ADC_AWD LL_ADC_AWD_DISABLE);
 8009290:	2200      	movs	r2, #0
 8009292:	4935      	ldr	r1, [pc, #212]	; (8009368 <daq_trig_set+0x370>)
 8009294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009296:	f7fe ff69 	bl	800816c <LL_ADC_SetAnalogWDMonitChannels>

        self->trig.set.ch = 0;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80092a0:	3344      	adds	r3, #68	; 0x44
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
        self->trig.set.mode = DISABLED;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80092ac:	3340      	adds	r3, #64	; 0x40
 80092ae:	2203      	movs	r2, #3
 80092b0:	701a      	strb	r2, [r3, #0]

        daq_enable(self, 1);
 80092b2:	2101      	movs	r1, #1
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7fe f901 	bl	80074bc <daq_enable>
        return 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	e212      	b.n	80096e4 <daq_trig_set+0x6ec>
    }

    if (self->mode == LA)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80092c4:	3334      	adds	r3, #52	; 0x34
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	f040 80a8 	bne.w	800941e <daq_trig_set+0x426>
    {

        LL_ADC_SetAnalogWDMonitChannels(adc, EM_ADC_AWD LL_ADC_AWD_DISABLE);
 80092ce:	2200      	movs	r2, #0
 80092d0:	4925      	ldr	r1, [pc, #148]	; (8009368 <daq_trig_set+0x370>)
 80092d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092d4:	f7fe ff4a 	bl	800816c <LL_ADC_SetAnalogWDMonitChannels>

        LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80092d8:	f107 0310 	add.w	r3, r7, #16
 80092dc:	2200      	movs	r2, #0
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	605a      	str	r2, [r3, #4]
 80092e2:	609a      	str	r2, [r3, #8]
        uint32_t extiline = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t exti = 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	623b      	str	r3, [r7, #32]

        if (ch == 1)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d10b      	bne.n	800930a <daq_trig_set+0x312>
        {
            self->trig.exti_trig = EM_LA_IRQ_EXTI1;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80092f8:	33bc      	adds	r3, #188	; 0xbc
 80092fa:	2206      	movs	r2, #6
 80092fc:	601a      	str	r2, [r3, #0]
            extiline = EM_LA_EXTILINE1;
 80092fe:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
            exti = EM_LA_EXTI1;
 8009304:	2301      	movs	r3, #1
 8009306:	623b      	str	r3, [r7, #32]
 8009308:	e03b      	b.n	8009382 <daq_trig_set+0x38a>
        }
        else if (ch == 2)
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2b02      	cmp	r3, #2
 800930e:	d10b      	bne.n	8009328 <daq_trig_set+0x330>
        {
            self->trig.exti_trig = EM_LA_IRQ_EXTI2;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009316:	33bc      	adds	r3, #188	; 0xbc
 8009318:	2207      	movs	r2, #7
 800931a:	601a      	str	r2, [r3, #0]
            extiline = EM_LA_EXTILINE2;
 800931c:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 8009320:	627b      	str	r3, [r7, #36]	; 0x24
            exti = EM_LA_EXTI2;
 8009322:	2302      	movs	r3, #2
 8009324:	623b      	str	r3, [r7, #32]
 8009326:	e02c      	b.n	8009382 <daq_trig_set+0x38a>
        }
        else if (ch == 3)
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	2b03      	cmp	r3, #3
 800932c:	d11e      	bne.n	800936c <daq_trig_set+0x374>
        {
            self->trig.exti_trig = EM_LA_IRQ_EXTI3;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009334:	33bc      	adds	r3, #188	; 0xbc
 8009336:	2208      	movs	r2, #8
 8009338:	601a      	str	r2, [r3, #0]
            extiline = EM_LA_EXTILINE3;
 800933a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800933e:	627b      	str	r3, [r7, #36]	; 0x24
            exti = EM_LA_EXTI3;
 8009340:	2304      	movs	r3, #4
 8009342:	623b      	str	r3, [r7, #32]
 8009344:	e01d      	b.n	8009382 <daq_trig_set+0x38a>
 8009346:	bf00      	nop
 8009348:	40020000 	.word	0x40020000
 800934c:	50000100 	.word	0x50000100
 8009350:	40020400 	.word	0x40020400
 8009354:	50000400 	.word	0x50000400
 8009358:	50000500 	.word	0x50000500
 800935c:	3ff00000 	.word	0x3ff00000
 8009360:	408f4000 	.word	0x408f4000
 8009364:	08015a24 	.word	0x08015a24
 8009368:	7dc00000 	.word	0x7dc00000
        }
        else // if (ch == 4)
        {
            self->trig.exti_trig = EM_LA_IRQ_EXTI4;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009372:	33bc      	adds	r3, #188	; 0xbc
 8009374:	2209      	movs	r2, #9
 8009376:	601a      	str	r2, [r3, #0]
            extiline = EM_LA_EXTILINE4;
 8009378:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 800937c:	627b      	str	r3, [r7, #36]	; 0x24
            exti = EM_LA_EXTI4;
 800937e:	2308      	movs	r3, #8
 8009380:	623b      	str	r3, [r7, #32]
        }

        LL_EXTI_DisableIT_0_31(EM_LA_EXTI1);
 8009382:	2001      	movs	r0, #1
 8009384:	f7fe ffee 	bl	8008364 <LL_EXTI_DisableIT_0_31>
        LL_EXTI_DisableIT_0_31(EM_LA_EXTI2);
 8009388:	2002      	movs	r0, #2
 800938a:	f7fe ffeb 	bl	8008364 <LL_EXTI_DisableIT_0_31>
        LL_EXTI_DisableIT_0_31(EM_LA_EXTI3);
 800938e:	2004      	movs	r0, #4
 8009390:	f7fe ffe8 	bl	8008364 <LL_EXTI_DisableIT_0_31>
        LL_EXTI_DisableIT_0_31(EM_LA_EXTI4);
 8009394:	2008      	movs	r0, #8
 8009396:	f7fe ffe5 	bl	8008364 <LL_EXTI_DisableIT_0_31>

        EM_GPIO_EXTI_SRC(EM_LA_EXTI_PORT, extiline);
 800939a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800939c:	2002      	movs	r0, #2
 800939e:	f7fe ffa1 	bl	80082e4 <LL_SYSCFG_SetEXTISource>

        EXTI_InitStruct.Line_0_31 = exti;
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	613b      	str	r3, [r7, #16]
        EXTI_InitStruct.LineCommand = ENABLE;
 80093a6:	2301      	movs	r3, #1
 80093a8:	763b      	strb	r3, [r7, #24]
        EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80093aa:	2300      	movs	r3, #0
 80093ac:	767b      	strb	r3, [r7, #25]
        EXTI_InitStruct.Trigger = (edge == RISING ? LL_EXTI_TRIGGER_RISING : LL_EXTI_TRIGGER_FALLING);
 80093ae:	79bb      	ldrb	r3, [r7, #6]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <daq_trig_set+0x3c0>
 80093b4:	2301      	movs	r3, #1
 80093b6:	e000      	b.n	80093ba <daq_trig_set+0x3c2>
 80093b8:	2302      	movs	r3, #2
 80093ba:	76bb      	strb	r3, [r7, #26]
        LL_EXTI_Init(&EXTI_InitStruct);
 80093bc:	f107 0310 	add.w	r3, r7, #16
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fa fbc3 	bl	8003b4c <LL_EXTI_Init>
        LL_EXTI_EnableIT_0_31(exti);
 80093c6:	6a38      	ldr	r0, [r7, #32]
 80093c8:	f7fe ffba 	bl	8008340 <LL_EXTI_EnableIT_0_31>

        NVIC_SetPriority(self->trig.exti_trig, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), EM_IT_PRI_EXTI, 0));
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80093d2:	33bc      	adds	r3, #188	; 0xbc
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	b25c      	sxtb	r4, r3
 80093d8:	f7fe fdf0 	bl	8007fbc <__NVIC_GetPriorityGrouping>
 80093dc:	4603      	mov	r3, r0
 80093de:	2200      	movs	r2, #0
 80093e0:	2105      	movs	r1, #5
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe fe80 	bl	80080e8 <NVIC_EncodePriority>
 80093e8:	4603      	mov	r3, r0
 80093ea:	4619      	mov	r1, r3
 80093ec:	4620      	mov	r0, r4
 80093ee:	f7fe fe51 	bl	8008094 <__NVIC_SetPriority>
        NVIC_DisableIRQ(self->trig.exti_trig);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80093f8:	33bc      	adds	r3, #188	; 0xbc
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	b25b      	sxtb	r3, r3
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe fe08 	bl	8008014 <__NVIC_DisableIRQ>

        self->trig.set.val = 0;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800940a:	3348      	adds	r3, #72	; 0x48
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]
        self->trig.set.val_percent = 0;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009416:	334c      	adds	r3, #76	; 0x4c
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]
 800941c:	e107      	b.n	800962e <daq_trig_set+0x636>
    }
    else // SCOPE
    {
        ASSERT(self->trig.exti_trig != 0);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009424:	33bc      	adds	r3, #188	; 0xbc
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d104      	bne.n	8009436 <daq_trig_set+0x43e>
 800942c:	f240 2116 	movw	r1, #534	; 0x216
 8009430:	48ae      	ldr	r0, [pc, #696]	; (80096ec <daq_trig_set+0x6f4>)
 8009432:	f003 fa1c 	bl	800c86e <assert2>
        NVIC_DisableIRQ(self->trig.exti_trig);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800943c:	33bc      	adds	r3, #188	; 0xbc
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	b25b      	sxtb	r3, r3
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe fde6 	bl	8008014 <__NVIC_DisableIRQ>

        if ((ch == 1 && self->set.ch1_en) ||
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d106      	bne.n	800945c <daq_trig_set+0x464>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8009454:	33fc      	adds	r3, #252	; 0xfc
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d11f      	bne.n	800949c <daq_trig_set+0x4a4>
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	2b02      	cmp	r3, #2
 8009460:	d106      	bne.n	8009470 <daq_trig_set+0x478>
            (ch == 2 && self->set.ch2_en) ||
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8009468:	33fd      	adds	r3, #253	; 0xfd
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d115      	bne.n	800949c <daq_trig_set+0x4a4>
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b03      	cmp	r3, #3
 8009474:	d106      	bne.n	8009484 <daq_trig_set+0x48c>
            (ch == 3 && self->set.ch3_en) ||
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800947c:	33fe      	adds	r3, #254	; 0xfe
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10b      	bne.n	800949c <daq_trig_set+0x4a4>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b04      	cmp	r3, #4
 8009488:	f040 80ce 	bne.w	8009628 <daq_trig_set+0x630>
            (ch == 4 && self->set.ch4_en))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8009492:	33ff      	adds	r3, #255	; 0xff
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 80c6 	beq.w	8009628 <daq_trig_set+0x630>
        {
            if (ch == 1)
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d106      	bne.n	80094b0 <daq_trig_set+0x4b8>
                self->trig.awd_trig = EM_ADC_AWD1;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80094a8:	33ac      	adds	r3, #172	; 0xac
 80094aa:	4a91      	ldr	r2, [pc, #580]	; (80096f0 <daq_trig_set+0x6f8>)
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	e01c      	b.n	80094ea <daq_trig_set+0x4f2>
            else if (ch == 2)
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d106      	bne.n	80094c4 <daq_trig_set+0x4cc>
                self->trig.awd_trig = EM_ADC_AWD2;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80094bc:	33ac      	adds	r3, #172	; 0xac
 80094be:	4a8d      	ldr	r2, [pc, #564]	; (80096f4 <daq_trig_set+0x6fc>)
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	e012      	b.n	80094ea <daq_trig_set+0x4f2>
            else if (ch == 3)
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	d106      	bne.n	80094d8 <daq_trig_set+0x4e0>
                self->trig.awd_trig = EM_ADC_AWD3;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80094d0:	33ac      	adds	r3, #172	; 0xac
 80094d2:	4a89      	ldr	r2, [pc, #548]	; (80096f8 <daq_trig_set+0x700>)
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	e008      	b.n	80094ea <daq_trig_set+0x4f2>
            else if (ch == 4)
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2b04      	cmp	r3, #4
 80094dc:	d105      	bne.n	80094ea <daq_trig_set+0x4f2>
                self->trig.awd_trig = EM_ADC_AWD4;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80094e4:	33ac      	adds	r3, #172	; 0xac
 80094e6:	4a85      	ldr	r2, [pc, #532]	; (80096fc <daq_trig_set+0x704>)
 80094e8:	601a      	str	r2, [r3, #0]

            uint32_t level_raw = (int)(self->adc_max_val / 100.0 * (float)level);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80094f0:	332c      	adds	r3, #44	; 0x2c
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7f7 f83f 	bl	8000578 <__aeabi_f2d>
 80094fa:	f04f 0200 	mov.w	r2, #0
 80094fe:	4b80      	ldr	r3, [pc, #512]	; (8009700 <daq_trig_set+0x708>)
 8009500:	f7f7 f9bc 	bl	800087c <__aeabi_ddiv>
 8009504:	4603      	mov	r3, r0
 8009506:	460c      	mov	r4, r1
 8009508:	4625      	mov	r5, r4
 800950a:	461c      	mov	r4, r3
 800950c:	79fb      	ldrb	r3, [r7, #7]
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009516:	ee17 0a90 	vmov	r0, s15
 800951a:	f7f7 f82d 	bl	8000578 <__aeabi_f2d>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	4620      	mov	r0, r4
 8009524:	4629      	mov	r1, r5
 8009526:	f7f7 f87f 	bl	8000628 <__aeabi_dmul>
 800952a:	4603      	mov	r3, r0
 800952c:	460c      	mov	r4, r1
 800952e:	4618      	mov	r0, r3
 8009530:	4621      	mov	r1, r4
 8009532:	f7f7 fb29 	bl	8000b88 <__aeabi_d2iz>
 8009536:	4603      	mov	r3, r0
 8009538:	61fb      	str	r3, [r7, #28]

            if (edge == RISING)
 800953a:	79bb      	ldrb	r3, [r7, #6]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d133      	bne.n	80095a8 <daq_trig_set+0x5b0>
            {
                memset(self->trig.buff_trig->data, (int)self->adc_max_val,
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009546:	33b0      	adds	r3, #176	; 0xb0
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009552:	332c      	adds	r3, #44	; 0x2c
 8009554:	edd3 7a00 	vldr	s15, [r3]
 8009558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                       self->trig.buff_trig->len * (self->set.bits == B12 ? sizeof(uint16_t) : sizeof(uint8_t)));
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009562:	33b0      	adds	r3, #176	; 0xb0
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	88db      	ldrh	r3, [r3, #6]
 8009568:	461a      	mov	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009570:	3306      	adds	r3, #6
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b0c      	cmp	r3, #12
 8009576:	d101      	bne.n	800957c <daq_trig_set+0x584>
 8009578:	2302      	movs	r3, #2
 800957a:	e000      	b.n	800957e <daq_trig_set+0x586>
 800957c:	2301      	movs	r3, #1
                memset(self->trig.buff_trig->data, (int)self->adc_max_val,
 800957e:	fb02 f303 	mul.w	r3, r2, r3
 8009582:	461a      	mov	r2, r3
 8009584:	ee17 1a90 	vmov	r1, s15
 8009588:	f009 f988 	bl	801289c <memset>

                LL_ADC_SetAnalogWDThresholds(adc, EM_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH, level_raw);
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	4a5d      	ldr	r2, [pc, #372]	; (8009704 <daq_trig_set+0x70c>)
 8009590:	495d      	ldr	r1, [pc, #372]	; (8009708 <daq_trig_set+0x710>)
 8009592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009594:	f7fe fe24 	bl	80081e0 <LL_ADC_SetAnalogWDThresholds>
                LL_ADC_SetAnalogWDThresholds(adc, EM_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW, 0);
 8009598:	2300      	movs	r3, #0
 800959a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800959e:	495a      	ldr	r1, [pc, #360]	; (8009708 <daq_trig_set+0x710>)
 80095a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095a2:	f7fe fe1d 	bl	80081e0 <LL_ADC_SetAnalogWDThresholds>
 80095a6:	e032      	b.n	800960e <daq_trig_set+0x616>
            }
            else // (edge == FALLING)
            {
                memset(self->trig.buff_trig->data, 0,
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80095ae:	33b0      	adds	r3, #176	; 0xb0
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6818      	ldr	r0, [r3, #0]
                       self->trig.buff_trig->len * (self->set.bits == B12 ? sizeof(uint16_t) : sizeof(uint8_t)));
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80095ba:	33b0      	adds	r3, #176	; 0xb0
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	88db      	ldrh	r3, [r3, #6]
 80095c0:	461a      	mov	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80095c8:	3306      	adds	r3, #6
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b0c      	cmp	r3, #12
 80095ce:	d101      	bne.n	80095d4 <daq_trig_set+0x5dc>
 80095d0:	2302      	movs	r3, #2
 80095d2:	e000      	b.n	80095d6 <daq_trig_set+0x5de>
 80095d4:	2301      	movs	r3, #1
                memset(self->trig.buff_trig->data, 0,
 80095d6:	fb02 f303 	mul.w	r3, r2, r3
 80095da:	461a      	mov	r2, r3
 80095dc:	2100      	movs	r1, #0
 80095de:	f009 f95d 	bl	801289c <memset>

                LL_ADC_SetAnalogWDThresholds(adc, EM_ADC_AWD LL_ADC_AWD_THRESHOLD_HIGH, (int)self->adc_max_val);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80095e8:	332c      	adds	r3, #44	; 0x2c
 80095ea:	edd3 7a00 	vldr	s15, [r3]
 80095ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095f2:	ee17 3a90 	vmov	r3, s15
 80095f6:	4a43      	ldr	r2, [pc, #268]	; (8009704 <daq_trig_set+0x70c>)
 80095f8:	4943      	ldr	r1, [pc, #268]	; (8009708 <daq_trig_set+0x710>)
 80095fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095fc:	f7fe fdf0 	bl	80081e0 <LL_ADC_SetAnalogWDThresholds>
                LL_ADC_SetAnalogWDThresholds(adc, EM_ADC_AWD LL_ADC_AWD_THRESHOLD_LOW, level_raw);
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	f640 72ff 	movw	r2, #4095	; 0xfff
 8009606:	4940      	ldr	r1, [pc, #256]	; (8009708 <daq_trig_set+0x710>)
 8009608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800960a:	f7fe fde9 	bl	80081e0 <LL_ADC_SetAnalogWDThresholds>
            }

            self->trig.set.val = level_raw;
 800960e:	69fa      	ldr	r2, [r7, #28]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009616:	3348      	adds	r3, #72	; 0x48
 8009618:	601a      	str	r2, [r3, #0]
            self->trig.set.val_percent = level;
 800961a:	79fa      	ldrb	r2, [r7, #7]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009622:	334c      	adds	r3, #76	; 0x4c
 8009624:	601a      	str	r2, [r3, #0]
        {
 8009626:	e002      	b.n	800962e <daq_trig_set+0x636>
        }
        else return -1;
 8009628:	f04f 33ff 	mov.w	r3, #4294967295
 800962c:	e05a      	b.n	80096e4 <daq_trig_set+0x6ec>
    }

    self->trig.pretrig_val = (int)((float)self->trig.fullmem_val * ((float)pretrigger / 100.0)) + 1;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009634:	33a8      	adds	r3, #168	; 0xa8
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	ee07 3a90 	vmov	s15, r3
 800963c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009640:	ee17 0a90 	vmov	r0, s15
 8009644:	f7f6 ff98 	bl	8000578 <__aeabi_f2d>
 8009648:	4604      	mov	r4, r0
 800964a:	460d      	mov	r5, r1
 800964c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009656:	ee17 0a90 	vmov	r0, s15
 800965a:	f7f6 ff8d 	bl	8000578 <__aeabi_f2d>
 800965e:	f04f 0200 	mov.w	r2, #0
 8009662:	4b27      	ldr	r3, [pc, #156]	; (8009700 <daq_trig_set+0x708>)
 8009664:	f7f7 f90a 	bl	800087c <__aeabi_ddiv>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	4620      	mov	r0, r4
 800966e:	4629      	mov	r1, r5
 8009670:	f7f6 ffda 	bl	8000628 <__aeabi_dmul>
 8009674:	4603      	mov	r3, r0
 8009676:	460c      	mov	r4, r1
 8009678:	4618      	mov	r0, r3
 800967a:	4621      	mov	r1, r4
 800967c:	f7f7 fa84 	bl	8000b88 <__aeabi_d2iz>
 8009680:	4603      	mov	r3, r0
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800968a:	339c      	adds	r3, #156	; 0x9c
 800968c:	601a      	str	r2, [r3, #0]
    self->trig.set.pretrigger = pretrigger;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009694:	333c      	adds	r3, #60	; 0x3c
 8009696:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009698:	601a      	str	r2, [r3, #0]
    self->trig.set.mode = mode;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80096a0:	3340      	adds	r3, #64	; 0x40
 80096a2:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80096a6:	701a      	strb	r2, [r3, #0]
    self->trig.set.edge = edge;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80096ae:	3341      	adds	r3, #65	; 0x41
 80096b0:	79ba      	ldrb	r2, [r7, #6]
 80096b2:	701a      	strb	r2, [r3, #0]
    self->trig.set.ch = ch;
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80096bc:	3344      	adds	r3, #68	; 0x44
 80096be:	601a      	str	r2, [r3, #0]

    if (self->trig.pretrig_val < EM_PRETRIG_MIN_MS)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80096c6:	339c      	adds	r3, #156	; 0x9c
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b09      	cmp	r3, #9
 80096cc:	dc05      	bgt.n	80096da <daq_trig_set+0x6e2>
        self->trig.pretrig_val = EM_PRETRIG_MIN_MS;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 80096d4:	339c      	adds	r3, #156	; 0x9c
 80096d6:	220a      	movs	r2, #10
 80096d8:	601a      	str	r2, [r3, #0]

    daq_enable(self, 1);
 80096da:	2101      	movs	r1, #1
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7fd feed 	bl	80074bc <daq_enable>
    return 0;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3730      	adds	r7, #48	; 0x30
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bdb0      	pop	{r4, r5, r7, pc}
 80096ec:	08015a24 	.word	0x08015a24
 80096f0:	18c00040 	.word	0x18c00040
 80096f4:	1cc00080 	.word	0x1cc00080
 80096f8:	30c01000 	.word	0x30c01000
 80096fc:	10c00010 	.word	0x10c00010
 8009700:	40590000 	.word	0x40590000
 8009704:	0fff0000 	.word	0x0fff0000
 8009708:	7dc00000 	.word	0x7dc00000

0800970c <SysTick_Handler>:
    return USBD_OK;
}
*/

void SysTick_Handler(void)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	af00      	add	r7, sp, #0
    if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009710:	f008 fe24 	bl	801235c <xTaskGetSchedulerState>
 8009714:	4603      	mov	r3, r0
 8009716:	2b01      	cmp	r3, #1
 8009718:	d001      	beq.n	800971e <SysTick_Handler+0x12>
        xPortSysTickHandler();
 800971a:	f007 fb95 	bl	8010e48 <xPortSysTickHandler>
#ifdef EM_HAL_SYSTICK
    HAL_IncTick();
#endif
    daq.uwTick++;
 800971e:	4b06      	ldr	r3, [pc, #24]	; (8009738 <SysTick_Handler+0x2c>)
 8009720:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009724:	3330      	adds	r3, #48	; 0x30
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	4b03      	ldr	r3, [pc, #12]	; (8009738 <SysTick_Handler+0x2c>)
 800972c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 8009730:	3330      	adds	r3, #48	; 0x30
 8009732:	601a      	str	r2, [r3, #0]
}
 8009734:	bf00      	nop
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20000934 	.word	0x20000934

0800973c <SVC_Handler>:

void SVC_Handler(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	af00      	add	r7, sp, #0
    vPortSVCHandler();
 8009740:	f007 fa5e 	bl	8010c00 <vPortSVCHandler>
}
 8009744:	bf00      	nop
 8009746:	bd80      	pop	{r7, pc}

08009748 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	af00      	add	r7, sp, #0
    xPortPendSVHandler();
 800974c:	f007 fb58 	bl	8010e00 <xPortPendSVHandler>
}
 8009750:	bf00      	nop
 8009752:	bd80      	pop	{r7, pc}

08009754 <led_init>:

#include "main.h"


void led_init(led_data_t* self)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
    self->ms = 0;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	605a      	str	r2, [r3, #4]
    self->num = 0;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	601a      	str	r2, [r3, #0]
    self->enabled = 0;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	60da      	str	r2, [r3, #12]
    self->uwtick_first = 0;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	609a      	str	r2, [r3, #8]
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <led_set>:

void led_set(led_data_t* self, uint8_t enable)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
    self->enabled = enable;
 800978c:	78fa      	ldrb	r2, [r7, #3]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	60da      	str	r2, [r3, #12]
    if (!self->enabled)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d108      	bne.n	80097ac <led_set+0x2c>
        EM_LED_PORT->BSRR |= (1 << EM_LED_PIN);  // 1
 800979a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80097a4:	f043 0320 	orr.w	r3, r3, #32
 80097a8:	6193      	str	r3, [r2, #24]
    else
        EM_LED_PORT->BRR |= (1 << EM_LED_PIN);   // 0
}
 80097aa:	e007      	b.n	80097bc <led_set+0x3c>
        EM_LED_PORT->BRR |= (1 << EM_LED_PIN);   // 0
 80097ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80097b6:	f043 0320 	orr.w	r3, r3, #32
 80097ba:	6293      	str	r3, [r2, #40]	; 0x28
}
 80097bc:	bf00      	nop
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <led_toggle>:

void led_toggle(led_data_t* self)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
    if (self->enabled)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d008      	beq.n	80097ea <led_toggle+0x22>
        EM_LED_PORT->BSRR |= (1 << EM_LED_PIN);  // 1
 80097d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80097e2:	f043 0320 	orr.w	r3, r3, #32
 80097e6:	6193      	str	r3, [r2, #24]
 80097e8:	e007      	b.n	80097fa <led_toggle+0x32>
    else
        EM_LED_PORT->BRR |= (1 << EM_LED_PIN);   // 0
 80097ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80097f4:	f043 0320 	orr.w	r3, r3, #32
 80097f8:	6293      	str	r3, [r2, #40]	; 0x28
    self->enabled = !self->enabled;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	bf0c      	ite	eq
 8009802:	2301      	moveq	r3, #1
 8009804:	2300      	movne	r3, #0
 8009806:	b2db      	uxtb	r3, r3
 8009808:	461a      	mov	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	60da      	str	r2, [r3, #12]
}
 800980e:	bf00      	nop
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <led_blink_set>:

void led_blink_set(led_data_t* self, int num, int ms, uint32_t _uwTick)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	607a      	str	r2, [r7, #4]
 8009826:	603b      	str	r3, [r7, #0]
    self->num = (num * 2) - 1;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	005b      	lsls	r3, r3, #1
 800982c:	1e5a      	subs	r2, r3, #1
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	601a      	str	r2, [r3, #0]
    self->ms = ms;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	605a      	str	r2, [r3, #4]
    self->uwtick_first = _uwTick;
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	609a      	str	r2, [r3, #8]
    led_set(self, 1);
 800983e:	2101      	movs	r1, #1
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f7ff ff9d 	bl	8009780 <led_set>
}
 8009846:	bf00      	nop
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <led_blink_do>:

void led_blink_do(led_data_t* self, uint32_t _uwTick)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	6039      	str	r1, [r7, #0]
    if (self->num > 0)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	dd23      	ble.n	80098a8 <led_blink_do+0x5a>
    {
        int diff;
        if (_uwTick >= self->uwtick_first)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	461a      	mov	r2, r3
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	4293      	cmp	r3, r2
 800986a:	d306      	bcc.n	800987a <led_blink_do+0x2c>
            diff = _uwTick - self->uwtick_first;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	461a      	mov	r2, r3
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	1a9b      	subs	r3, r3, r2
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	e006      	b.n	8009888 <led_blink_do+0x3a>
        else
            diff = (_uwTick - self->uwtick_first) + 4294967295;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	461a      	mov	r2, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	1a9b      	subs	r3, r3, r2
 8009884:	3b01      	subs	r3, #1
 8009886:	60fb      	str	r3, [r7, #12]

        if (diff >= self->ms)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	429a      	cmp	r2, r3
 8009890:	db0a      	blt.n	80098a8 <led_blink_do+0x5a>
        {
            self->uwtick_first = _uwTick;
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	609a      	str	r2, [r3, #8]
            self->num--;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	1e5a      	subs	r2, r3, #1
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	601a      	str	r2, [r3, #0]
            led_toggle(self);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7ff ff90 	bl	80097c8 <led_toggle>
        }
    }
}
 80098a8:	bf00      	nop
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <LL_ADC_SetResolution>:
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	f023 0218 	bic.w	r2, r3, #24
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	431a      	orrs	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60da      	str	r2, [r3, #12]
}
 80098ca:	bf00      	nop
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <LL_ADC_REG_SetTriggerSource>:
{
 80098d6:	b480      	push	{r7}
 80098d8:	b083      	sub	sp, #12
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f423 627c 	bic.w	r2, r3, #4032	; 0xfc0
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	431a      	orrs	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60da      	str	r2, [r3, #12]
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <LL_ADC_REG_SetSequencerLength>:
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990a:	f023 020f 	bic.w	r2, r3, #15
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	431a      	orrs	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009916:	bf00      	nop
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <LL_ADC_REG_SetSequencerRanks>:
{
 8009922:	b480      	push	{r7}
 8009924:	b089      	sub	sp, #36	; 0x24
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3330      	adds	r3, #48	; 0x30
 8009932:	4619      	mov	r1, r3
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800993a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800993e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	fa92 f2a2 	rbit	r2, r2
 8009946:	617a      	str	r2, [r7, #20]
  return result;
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	fab2 f282 	clz	r2, r2
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	40d3      	lsrs	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	440b      	add	r3, r1
 8009956:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f003 031f 	and.w	r3, r3, #31
 8009962:	211f      	movs	r1, #31
 8009964:	fa01 f303 	lsl.w	r3, r1, r3
 8009968:	43db      	mvns	r3, r3
 800996a:	401a      	ands	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	0e9b      	lsrs	r3, r3, #26
 8009970:	f003 011f 	and.w	r1, r3, #31
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	f003 031f 	and.w	r3, r3, #31
 800997a:	fa01 f303 	lsl.w	r3, r1, r3
 800997e:	431a      	orrs	r2, r3
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	601a      	str	r2, [r3, #0]
}
 8009984:	bf00      	nop
 8009986:	3724      	adds	r7, #36	; 0x24
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <LL_ADC_REG_SetDMATransfer>:
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG, DMATransfer);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f023 0203 	bic.w	r2, r3, #3
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	431a      	orrs	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	60da      	str	r2, [r3, #12]
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <LL_ADC_REG_GetDMATransfer>:
{
 80099b6:	b480      	push	{r7}
 80099b8:	b083      	sub	sp, #12
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	f003 0303 	and.w	r3, r3, #3
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <LL_ADC_SetChannelSamplingTime>:
{
 80099d2:	b480      	push	{r7}
 80099d4:	b08d      	sub	sp, #52	; 0x34
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	60f8      	str	r0, [r7, #12]
 80099da:	60b9      	str	r1, [r7, #8]
 80099dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3314      	adds	r3, #20
 80099e2:	4619      	mov	r1, r3
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80099ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099f0:	69ba      	ldr	r2, [r7, #24]
 80099f2:	fa92 f2a2 	rbit	r2, r2
 80099f6:	617a      	str	r2, [r7, #20]
  return result;
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	fab2 f282 	clz	r2, r2
 80099fe:	b2d2      	uxtb	r2, r2
 8009a00:	40d3      	lsrs	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	440b      	add	r3, r1
 8009a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 8009a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8009a12:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8009a16:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a18:	6a39      	ldr	r1, [r7, #32]
 8009a1a:	fa91 f1a1 	rbit	r1, r1
 8009a1e:	61f9      	str	r1, [r7, #28]
  return result;
 8009a20:	69f9      	ldr	r1, [r7, #28]
 8009a22:	fab1 f181 	clz	r1, r1
 8009a26:	b2c9      	uxtb	r1, r1
 8009a28:	40cb      	lsrs	r3, r1
 8009a2a:	2107      	movs	r1, #7
 8009a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a30:	43db      	mvns	r3, r3
 8009a32:	401a      	ands	r2, r3
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8009a3a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8009a3e:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a42:	fa91 f1a1 	rbit	r1, r1
 8009a46:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8009a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a4a:	fab1 f181 	clz	r1, r1
 8009a4e:	b2c9      	uxtb	r1, r1
 8009a50:	40cb      	lsrs	r3, r1
 8009a52:	6879      	ldr	r1, [r7, #4]
 8009a54:	fa01 f303 	lsl.w	r3, r1, r3
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	601a      	str	r2, [r3, #0]
}
 8009a5e:	bf00      	nop
 8009a60:	3734      	adds	r7, #52	; 0x34
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <LL_ADC_SetMultimode>:
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b083      	sub	sp, #12
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DUAL, Multimode);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	f023 021f 	bic.w	r2, r3, #31
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	609a      	str	r2, [r3, #8]
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <LL_ADC_Enable>:
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009aa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009aa4:	f043 0201 	orr.w	r2, r3, #1
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	609a      	str	r2, [r3, #8]
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <LL_ADC_StartCalibration>:
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009aca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	609a      	str	r2, [r3, #8]
}
 8009ade:	bf00      	nop
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <LL_ADC_IsCalibrationOnGoing>:
{
 8009aea:	b480      	push	{r7}
 8009aec:	b083      	sub	sp, #12
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009afe:	bf0c      	ite	eq
 8009b00:	2301      	moveq	r3, #1
 8009b02:	2300      	movne	r3, #0
 8009b04:	b2db      	uxtb	r3, r3
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
	...

08009b14 <LL_DMA_EnableChannel>:
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	4a0b      	ldr	r2, [pc, #44]	; (8009b50 <LL_DMA_EnableChannel+0x3c>)
 8009b24:	5cd3      	ldrb	r3, [r2, r3]
 8009b26:	461a      	mov	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	3a01      	subs	r2, #1
 8009b32:	4907      	ldr	r1, [pc, #28]	; (8009b50 <LL_DMA_EnableChannel+0x3c>)
 8009b34:	5c8a      	ldrb	r2, [r1, r2]
 8009b36:	4611      	mov	r1, r2
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	440a      	add	r2, r1
 8009b3c:	f043 0301 	orr.w	r3, r3, #1
 8009b40:	6013      	str	r3, [r2, #0]
}
 8009b42:	bf00      	nop
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	08016098 	.word	0x08016098

08009b54 <LL_DMA_DisableChannel>:
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	3b01      	subs	r3, #1
 8009b62:	4a0b      	ldr	r2, [pc, #44]	; (8009b90 <LL_DMA_DisableChannel+0x3c>)
 8009b64:	5cd3      	ldrb	r3, [r2, r3]
 8009b66:	461a      	mov	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	3a01      	subs	r2, #1
 8009b72:	4907      	ldr	r1, [pc, #28]	; (8009b90 <LL_DMA_DisableChannel+0x3c>)
 8009b74:	5c8a      	ldrb	r2, [r1, r2]
 8009b76:	4611      	mov	r1, r2
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	440a      	add	r2, r1
 8009b7c:	f023 0301 	bic.w	r3, r3, #1
 8009b80:	6013      	str	r3, [r2, #0]
}
 8009b82:	bf00      	nop
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	08016098 	.word	0x08016098

08009b94 <LL_DMA_SetPeriphSize>:
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	4a0c      	ldr	r2, [pc, #48]	; (8009bd8 <LL_DMA_SetPeriphSize+0x44>)
 8009ba6:	5cd3      	ldrb	r3, [r2, r3]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	4413      	add	r3, r2
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	4907      	ldr	r1, [pc, #28]	; (8009bd8 <LL_DMA_SetPeriphSize+0x44>)
 8009bba:	5ccb      	ldrb	r3, [r1, r3]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	440b      	add	r3, r1
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	600b      	str	r3, [r1, #0]
}
 8009bca:	bf00      	nop
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	08016098 	.word	0x08016098

08009bdc <LL_DMA_SetMemorySize>:
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	4a0c      	ldr	r2, [pc, #48]	; (8009c20 <LL_DMA_SetMemorySize+0x44>)
 8009bee:	5cd3      	ldrb	r3, [r2, r3]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	4907      	ldr	r1, [pc, #28]	; (8009c20 <LL_DMA_SetMemorySize+0x44>)
 8009c02:	5ccb      	ldrb	r3, [r1, r3]
 8009c04:	4619      	mov	r1, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	440b      	add	r3, r1
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	600b      	str	r3, [r1, #0]
}
 8009c12:	bf00      	nop
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	08016098 	.word	0x08016098

08009c24 <LL_DMA_SetDataLength>:
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	3b01      	subs	r3, #1
 8009c34:	4a0c      	ldr	r2, [pc, #48]	; (8009c68 <LL_DMA_SetDataLength+0x44>)
 8009c36:	5cd3      	ldrb	r3, [r2, r3]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	0c1b      	lsrs	r3, r3, #16
 8009c42:	041b      	lsls	r3, r3, #16
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	3a01      	subs	r2, #1
 8009c48:	4907      	ldr	r1, [pc, #28]	; (8009c68 <LL_DMA_SetDataLength+0x44>)
 8009c4a:	5c8a      	ldrb	r2, [r1, r2]
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	440a      	add	r2, r1
 8009c52:	4611      	mov	r1, r2
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	604b      	str	r3, [r1, #4]
}
 8009c5a:	bf00      	nop
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	08016098 	.word	0x08016098

08009c6c <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	2b10      	cmp	r3, #16
 8009c7e:	d114      	bne.n	8009caa <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	4a16      	ldr	r2, [pc, #88]	; (8009ce0 <LL_DMA_ConfigAddresses+0x74>)
 8009c86:	5cd3      	ldrb	r3, [r2, r3]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	461a      	mov	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	4a11      	ldr	r2, [pc, #68]	; (8009ce0 <LL_DMA_ConfigAddresses+0x74>)
 8009c9a:	5cd3      	ldrb	r3, [r2, r3]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8009ca8:	e013      	b.n	8009cd2 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	4a0c      	ldr	r2, [pc, #48]	; (8009ce0 <LL_DMA_ConfigAddresses+0x74>)
 8009cb0:	5cd3      	ldrb	r3, [r2, r3]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	461a      	mov	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	4a07      	ldr	r2, [pc, #28]	; (8009ce0 <LL_DMA_ConfigAddresses+0x74>)
 8009cc4:	5cd3      	ldrb	r3, [r2, r3]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4413      	add	r3, r2
 8009ccc:	461a      	mov	r2, r3
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	60d3      	str	r3, [r2, #12]
}
 8009cd2:	bf00      	nop
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	08016098 	.word	0x08016098

08009ce4 <dma_set>:
#include "comm.h"
#include "main.h"


void dma_set(uint32_t src, DMA_TypeDef* dma, uint32_t dma_ch, uint32_t dst, uint32_t buff_size, uint32_t p_sz, uint32_t m_sz, uint32_t dir)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af02      	add	r7, sp, #8
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
 8009cf0:	603b      	str	r3, [r7, #0]
    LL_DMA_DisableChannel(dma, dma_ch);
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	68b8      	ldr	r0, [r7, #8]
 8009cf6:	f7ff ff2d 	bl	8009b54 <LL_DMA_DisableChannel>
    // Select ADC as DMA transfer request.
    //LL_DMAMUX_SetRequestID(DMAMUX1, LL_DMAMUX_CHANNEL_0, LL_DMAMUX_REQ_ADC1);

    // DMA transfer addresses and size.
    LL_DMA_ConfigAddresses(dma, dma_ch, src, dst, dir);
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	6879      	ldr	r1, [r7, #4]
 8009d04:	68b8      	ldr	r0, [r7, #8]
 8009d06:	f7ff ffb1 	bl	8009c6c <LL_DMA_ConfigAddresses>
    LL_DMA_SetPeriphSize(dma, dma_ch, p_sz);
 8009d0a:	69fa      	ldr	r2, [r7, #28]
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	68b8      	ldr	r0, [r7, #8]
 8009d10:	f7ff ff40 	bl	8009b94 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(dma, dma_ch, m_sz);
 8009d14:	6a3a      	ldr	r2, [r7, #32]
 8009d16:	6879      	ldr	r1, [r7, #4]
 8009d18:	68b8      	ldr	r0, [r7, #8]
 8009d1a:	f7ff ff5f 	bl	8009bdc <LL_DMA_SetMemorySize>
    LL_DMA_SetDataLength(dma, dma_ch, buff_size);
 8009d1e:	69ba      	ldr	r2, [r7, #24]
 8009d20:	6879      	ldr	r1, [r7, #4]
 8009d22:	68b8      	ldr	r0, [r7, #8]
 8009d24:	f7ff ff7e 	bl	8009c24 <LL_DMA_SetDataLength>
    //LL_DMA_EnableIT_TC(dma, dma_ch); // Enable transfer complete interrupt.
    //LL_DMA_EnableIT_HT(dma, dma_ch); // Enable half transfer interrupt.
    //LL_DMA_EnableIT_TE(dma, dma_ch); // Enable transfer error interrupt.

    // Enable
    LL_DMA_EnableChannel(dma, dma_ch);
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	68b8      	ldr	r0, [r7, #8]
 8009d2c:	f7ff fef2 	bl	8009b14 <LL_DMA_EnableChannel>
}
 8009d30:	bf00      	nop
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <adc_init>:
    return LL_ADC_REG_ReadConversionData12(ADC2);
}
*/

void adc_init()
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
#if defined(EM_ADC_MODE_ADC1) || defined(EM_ADC_MODE_ADC12) || defined(EM_ADC_MODE_ADC1234)
    adc_init_calib(ADC1);
 8009d3c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009d40:	f000 f812 	bl	8009d68 <adc_init_calib>
#endif

#endif

#if defined(EM_ADC_MODE_ADC12) || defined(EM_ADC_MODE_ADC1234)
    adc_init_calib(ADC2);
 8009d44:	4805      	ldr	r0, [pc, #20]	; (8009d5c <adc_init+0x24>)
 8009d46:	f000 f80f 	bl	8009d68 <adc_init_calib>
#endif

#if defined(EM_ADC_MODE_ADC1234)
    adc_init_calib(ADC3);
 8009d4a:	4805      	ldr	r0, [pc, #20]	; (8009d60 <adc_init+0x28>)
 8009d4c:	f000 f80c 	bl	8009d68 <adc_init_calib>
    adc_init_calib(ADC4);
 8009d50:	4804      	ldr	r0, [pc, #16]	; (8009d64 <adc_init+0x2c>)
 8009d52:	f000 f809 	bl	8009d68 <adc_init_calib>
#endif
}
 8009d56:	bf00      	nop
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	50000100 	.word	0x50000100
 8009d60:	50000400 	.word	0x50000400
 8009d64:	50000500 	.word	0x50000500

08009d68 <adc_init_calib>:

void adc_init_calib(ADC_TypeDef* adc)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
#if defined(EM_ADC_CAL_EN)
    LL_ADC_Enable(adc);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff fe8d 	bl	8009a90 <LL_ADC_Enable>
#endif
#if defined(ADC_CR2_TSVREFE)
    adc->CR2 |= ADC_CR2_TSVREFE;
#endif
    uint32_t  wait_loop_index = ((EM_ADC_EN_TICKS * 32) >> 1);
 8009d76:	2340      	movs	r3, #64	; 0x40
 8009d78:	617b      	str	r3, [r7, #20]
    while(wait_loop_index != 0)
 8009d7a:	e002      	b.n	8009d82 <adc_init_calib+0x1a>
    {
      wait_loop_index--;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	617b      	str	r3, [r7, #20]
    while(wait_loop_index != 0)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1f9      	bne.n	8009d7c <adc_init_calib+0x14>
    //LL_ADC_EnableInternalRegulator(adc);
    //LL_ADC_DisableDeepPowerDown(adc);
    //for (int i = 0; i <  1000; ++i) asm("nop");

    //LL_ADC_Disable(adc);
    const uint32_t dma_tx_mode = LL_ADC_REG_GetDMATransfer(adc);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff fe14 	bl	80099b6 <LL_ADC_REG_GetDMATransfer>
 8009d8e:	60f8      	str	r0, [r7, #12]
    LL_ADC_REG_SetDMATransfer(adc, LL_ADC_REG_DMA_TRANSFER_NONE);
 8009d90:	2100      	movs	r1, #0
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7ff fdfc 	bl	8009990 <LL_ADC_REG_SetDMATransfer>

#ifdef LL_ADC_DIFFERENTIAL_ENDED
    LL_ADC_StartCalibration(adc, LL_ADC_SINGLE_ENDED);
 8009d98:	217f      	movs	r1, #127	; 0x7f
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff fe8c 	bl	8009ab8 <LL_ADC_StartCalibration>
#else
    LL_ADC_StartCalibration(adc);
#endif
    while (LL_ADC_IsCalibrationOnGoing(adc) != 0);
 8009da0:	bf00      	nop
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7ff fea1 	bl	8009aea <LL_ADC_IsCalibrationOnGoing>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1f9      	bne.n	8009da2 <adc_init_calib+0x3a>

    for (int i = 0; i <  10000; ++i) asm("nop");
 8009dae:	2300      	movs	r3, #0
 8009db0:	613b      	str	r3, [r7, #16]
 8009db2:	e003      	b.n	8009dbc <adc_init_calib+0x54>
 8009db4:	bf00      	nop
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	3301      	adds	r3, #1
 8009dba:	613b      	str	r3, [r7, #16]
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	f242 720f 	movw	r2, #9999	; 0x270f
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	ddf6      	ble.n	8009db4 <adc_init_calib+0x4c>

    LL_ADC_REG_SetDMATransfer(adc, dma_tx_mode);
 8009dc6:	68f9      	ldr	r1, [r7, #12]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7ff fde1 	bl	8009990 <LL_ADC_REG_SetDMATransfer>
#if !defined(EM_ADC_CAL_EN)
    LL_ADC_Enable(adc);
#endif
}
 8009dce:	bf00      	nop
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <adc_set_ch>:

void adc_set_ch(ADC_TypeDef* adc, uint8_t ch1, uint8_t ch2, uint8_t ch3, uint8_t ch4, uint32_t smpl_time, uint8_t vrefint)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	4608      	mov	r0, r1
 8009de2:	4611      	mov	r1, r2
 8009de4:	461a      	mov	r2, r3
 8009de6:	4603      	mov	r3, r0
 8009de8:	70fb      	strb	r3, [r7, #3]
 8009dea:	460b      	mov	r3, r1
 8009dec:	70bb      	strb	r3, [r7, #2]
 8009dee:	4613      	mov	r3, r2
 8009df0:	707b      	strb	r3, [r7, #1]
#ifdef EM_ADC_TRIG_34
    if (ch1 == 1 || ch2 == 2)
 8009df2:	78fb      	ldrb	r3, [r7, #3]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d002      	beq.n	8009dfe <adc_set_ch+0x26>
 8009df8:	78bb      	ldrb	r3, [r7, #2]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d105      	bne.n	8009e0a <adc_set_ch+0x32>
        LL_ADC_REG_SetTriggerSource(adc, EM_ADC_TRIG_12);
 8009dfe:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff fd67 	bl	80098d6 <LL_ADC_REG_SetTriggerSource>
 8009e08:	e004      	b.n	8009e14 <adc_set_ch+0x3c>
    else
        LL_ADC_REG_SetTriggerSource(adc, EM_ADC_TRIG_34);
 8009e0a:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7ff fd61 	bl	80098d6 <LL_ADC_REG_SetTriggerSource>
#else
    LL_ADC_REG_SetTriggerSource(adc, EM_ADC_TRIG_12);
#endif
    LL_ADC_SetMultimode(__LL_ADC_COMMON_INSTANCE(adc), LL_ADC_MULTI_INDEPENDENT);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e1a:	d003      	beq.n	8009e24 <adc_set_ch+0x4c>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a49      	ldr	r2, [pc, #292]	; (8009f44 <adc_set_ch+0x16c>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d101      	bne.n	8009e28 <adc_set_ch+0x50>
 8009e24:	4b48      	ldr	r3, [pc, #288]	; (8009f48 <adc_set_ch+0x170>)
 8009e26:	e000      	b.n	8009e2a <adc_set_ch+0x52>
 8009e28:	4b48      	ldr	r3, [pc, #288]	; (8009f4c <adc_set_ch+0x174>)
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff fe1c 	bl	8009a6a <LL_ADC_SetMultimode>
    LL_ADC_REG_SetDMATransfer(adc, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8009e32:	2103      	movs	r1, #3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff fdab 	bl	8009990 <LL_ADC_REG_SetDMATransfer>

    //LL_ADC_Disable(adc);
    int len = ch1 + ch2 + ch3 + ch4 + vrefint;
 8009e3a:	78fa      	ldrb	r2, [r7, #3]
 8009e3c:	78bb      	ldrb	r3, [r7, #2]
 8009e3e:	441a      	add	r2, r3
 8009e40:	787b      	ldrb	r3, [r7, #1]
 8009e42:	441a      	add	r2, r3
 8009e44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e48:	441a      	add	r2, r3
 8009e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e4e:	4413      	add	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]

    uint32_t len_raw = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8009e52:	2300      	movs	r3, #0
 8009e54:	617b      	str	r3, [r7, #20]
    if (len == 2)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d101      	bne.n	8009e60 <adc_set_ch+0x88>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	617b      	str	r3, [r7, #20]
    if (len == 3)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d102      	bne.n	8009e6c <adc_set_ch+0x94>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 8009e66:	2302      	movs	r3, #2
 8009e68:	617b      	str	r3, [r7, #20]
 8009e6a:	e00a      	b.n	8009e82 <adc_set_ch+0xaa>
    else if (len == 4)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2b04      	cmp	r3, #4
 8009e70:	d102      	bne.n	8009e78 <adc_set_ch+0xa0>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
 8009e72:	2303      	movs	r3, #3
 8009e74:	617b      	str	r3, [r7, #20]
 8009e76:	e004      	b.n	8009e82 <adc_set_ch+0xaa>
    else if (len == 5)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b05      	cmp	r3, #5
 8009e7c:	d101      	bne.n	8009e82 <adc_set_ch+0xaa>
        len_raw = LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS;
 8009e7e:	2304      	movs	r3, #4
 8009e80:	617b      	str	r3, [r7, #20]

    LL_ADC_REG_SetSequencerLength(adc, len_raw);
 8009e82:	6979      	ldr	r1, [r7, #20]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f7ff fd39 	bl	80098fc <LL_ADC_REG_SetSequencerLength>

    uint32_t next_rank = LL_ADC_REG_RANK_1;
 8009e8a:	2306      	movs	r3, #6
 8009e8c:	613b      	str	r3, [r7, #16]

    if (vrefint)
 8009e8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00d      	beq.n	8009eb2 <adc_set_ch+0xda>
    {
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, LL_ADC_CHANNEL_VREFINT);
 8009e96:	4a2e      	ldr	r2, [pc, #184]	; (8009f50 <adc_set_ch+0x178>)
 8009e98:	6939      	ldr	r1, [r7, #16]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff fd41 	bl	8009922 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, LL_ADC_CHANNEL_VREFINT, smpl_time);
 8009ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea2:	492b      	ldr	r1, [pc, #172]	; (8009f50 <adc_set_ch+0x178>)
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7ff fd94 	bl	80099d2 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 8009eaa:	6938      	ldr	r0, [r7, #16]
 8009eac:	f000 f85a 	bl	8009f64 <adc_get_next_rank>
 8009eb0:	6138      	str	r0, [r7, #16]
    }
    if (ch1) {
 8009eb2:	78fb      	ldrb	r3, [r7, #3]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00d      	beq.n	8009ed4 <adc_set_ch+0xfc>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, EM_ADC_CH1);
 8009eb8:	4a26      	ldr	r2, [pc, #152]	; (8009f54 <adc_set_ch+0x17c>)
 8009eba:	6939      	ldr	r1, [r7, #16]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7ff fd30 	bl	8009922 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, EM_ADC_CH1, smpl_time);
 8009ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ec4:	4923      	ldr	r1, [pc, #140]	; (8009f54 <adc_set_ch+0x17c>)
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff fd83 	bl	80099d2 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 8009ecc:	6938      	ldr	r0, [r7, #16]
 8009ece:	f000 f849 	bl	8009f64 <adc_get_next_rank>
 8009ed2:	6138      	str	r0, [r7, #16]
    }
    if (ch2) {
 8009ed4:	78bb      	ldrb	r3, [r7, #2]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00d      	beq.n	8009ef6 <adc_set_ch+0x11e>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, EM_ADC_CH2);
 8009eda:	4a1f      	ldr	r2, [pc, #124]	; (8009f58 <adc_set_ch+0x180>)
 8009edc:	6939      	ldr	r1, [r7, #16]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff fd1f 	bl	8009922 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, EM_ADC_CH2, smpl_time);
 8009ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee6:	491c      	ldr	r1, [pc, #112]	; (8009f58 <adc_set_ch+0x180>)
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff fd72 	bl	80099d2 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 8009eee:	6938      	ldr	r0, [r7, #16]
 8009ef0:	f000 f838 	bl	8009f64 <adc_get_next_rank>
 8009ef4:	6138      	str	r0, [r7, #16]
    }
    if (ch3) {
 8009ef6:	787b      	ldrb	r3, [r7, #1]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00d      	beq.n	8009f18 <adc_set_ch+0x140>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, EM_ADC_CH3);
 8009efc:	4a17      	ldr	r2, [pc, #92]	; (8009f5c <adc_set_ch+0x184>)
 8009efe:	6939      	ldr	r1, [r7, #16]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7ff fd0e 	bl	8009922 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, EM_ADC_CH3, smpl_time);
 8009f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f08:	4914      	ldr	r1, [pc, #80]	; (8009f5c <adc_set_ch+0x184>)
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7ff fd61 	bl	80099d2 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 8009f10:	6938      	ldr	r0, [r7, #16]
 8009f12:	f000 f827 	bl	8009f64 <adc_get_next_rank>
 8009f16:	6138      	str	r0, [r7, #16]
    }
    if (ch4) {
 8009f18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00d      	beq.n	8009f3c <adc_set_ch+0x164>
        LL_ADC_REG_SetSequencerRanks(adc, next_rank, EM_ADC_CH4);
 8009f20:	4a0f      	ldr	r2, [pc, #60]	; (8009f60 <adc_set_ch+0x188>)
 8009f22:	6939      	ldr	r1, [r7, #16]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff fcfc 	bl	8009922 <LL_ADC_REG_SetSequencerRanks>
        LL_ADC_SetChannelSamplingTime(adc, EM_ADC_CH4, smpl_time);
 8009f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f2c:	490c      	ldr	r1, [pc, #48]	; (8009f60 <adc_set_ch+0x188>)
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7ff fd4f 	bl	80099d2 <LL_ADC_SetChannelSamplingTime>
        next_rank = adc_get_next_rank(next_rank);
 8009f34:	6938      	ldr	r0, [r7, #16]
 8009f36:	f000 f815 	bl	8009f64 <adc_get_next_rank>
 8009f3a:	6138      	str	r0, [r7, #16]
    }

    //LL_ADC_Enable(adc);
}
 8009f3c:	bf00      	nop
 8009f3e:	3718      	adds	r7, #24
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	50000100 	.word	0x50000100
 8009f48:	50000300 	.word	0x50000300
 8009f4c:	50000700 	.word	0x50000700
 8009f50:	cb840000 	.word	0xcb840000
 8009f54:	19200040 	.word	0x19200040
 8009f58:	1d500080 	.word	0x1d500080
 8009f5c:	32601000 	.word	0x32601000
 8009f60:	10c00010 	.word	0x10c00010

08009f64 <adc_get_next_rank>:

uint32_t adc_get_next_rank(uint32_t rank)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
    if (rank == LL_ADC_REG_RANK_1)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b06      	cmp	r3, #6
 8009f70:	d101      	bne.n	8009f76 <adc_get_next_rank+0x12>
        return LL_ADC_REG_RANK_2;
 8009f72:	230c      	movs	r3, #12
 8009f74:	e011      	b.n	8009f9a <adc_get_next_rank+0x36>
    if (rank == LL_ADC_REG_RANK_2)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b0c      	cmp	r3, #12
 8009f7a:	d101      	bne.n	8009f80 <adc_get_next_rank+0x1c>
        return LL_ADC_REG_RANK_3;
 8009f7c:	2312      	movs	r3, #18
 8009f7e:	e00c      	b.n	8009f9a <adc_get_next_rank+0x36>
    else if (rank == LL_ADC_REG_RANK_3)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b12      	cmp	r3, #18
 8009f84:	d101      	bne.n	8009f8a <adc_get_next_rank+0x26>
        return LL_ADC_REG_RANK_4;
 8009f86:	2318      	movs	r3, #24
 8009f88:	e007      	b.n	8009f9a <adc_get_next_rank+0x36>
    else if (rank == LL_ADC_REG_RANK_4)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b18      	cmp	r3, #24
 8009f8e:	d102      	bne.n	8009f96 <adc_get_next_rank+0x32>
        return LL_ADC_REG_RANK_5;
 8009f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f94:	e001      	b.n	8009f9a <adc_get_next_rank+0x36>
    else
        return LL_ADC_REG_RANK_6;
 8009f96:	f44f 7383 	mov.w	r3, #262	; 0x106
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <adc_set_res>:

void adc_set_res(ADC_TypeDef* adc, uint32_t resolution) // LL_ADC_RESOLUTION_12B, LL_ADC_RESOLUTION_8B
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b082      	sub	sp, #8
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	6039      	str	r1, [r7, #0]
    //LL_ADC_Disable(adc);
#ifdef EM_ADC_BIT8
    LL_ADC_SetResolution(adc, resolution);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff fc7c 	bl	80098b0 <LL_ADC_SetResolution>
#endif
    //LL_ADC_Enable(adc);
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <get_last_circ_idx>:
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
    int last_idx = pos - 1;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	60fb      	str	r3, [r7, #12]
    if (last_idx < 0)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	da02      	bge.n	8009fdc <get_last_circ_idx+0x1c>
        last_idx = len - 1;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	60fb      	str	r3, [r7, #12]
    return last_idx;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
	...

08009fec <LL_DMA_GetDataLength>:
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	4a06      	ldr	r2, [pc, #24]	; (800a014 <LL_DMA_GetDataLength+0x28>)
 8009ffc:	5cd3      	ldrb	r3, [r2, r3]
 8009ffe:	461a      	mov	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4413      	add	r3, r2
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	b29b      	uxth	r3, r3
}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	080160a0 	.word	0x080160a0

0800a018 <EM_Reset>:


/************************* [IEEE 488] *************************/

scpi_result_t EM_Reset(scpi_t * context)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
    daq_enable(&daq, 0);
 800a020:	2100      	movs	r1, #0
 800a022:	480d      	ldr	r0, [pc, #52]	; (800a058 <EM_Reset+0x40>)
 800a024:	f7fd fa4a 	bl	80074bc <daq_enable>
    daq_settings_init(&daq);
 800a028:	480b      	ldr	r0, [pc, #44]	; (800a058 <EM_Reset+0x40>)
 800a02a:	f7fc fc0d 	bl	8006848 <daq_settings_init>
    daq_mode_set(&daq, VM);
 800a02e:	2101      	movs	r1, #1
 800a030:	4809      	ldr	r0, [pc, #36]	; (800a058 <EM_Reset+0x40>)
 800a032:	f7fd fb2d 	bl	8007690 <daq_mode_set>
    daq_enable(&daq, 1);
 800a036:	2101      	movs	r1, #1
 800a038:	4807      	ldr	r0, [pc, #28]	; (800a058 <EM_Reset+0x40>)
 800a03a:	f7fd fa3f 	bl	80074bc <daq_enable>
    cntr_enable(&cntr, 0);
 800a03e:	2100      	movs	r1, #0
 800a040:	4806      	ldr	r0, [pc, #24]	; (800a05c <EM_Reset+0x44>)
 800a042:	f7fb fc95 	bl	8005970 <cntr_enable>
    //sgen_enable(&sgen, 0);
    // TODO reset pwm?

    SCPI_ResultText(context, SCPI_OK);
 800a046:	4906      	ldr	r1, [pc, #24]	; (800a060 <EM_Reset+0x48>)
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f005 f8e1 	bl	800f210 <SCPI_ResultText>
    return SCPI_RES_OK;
 800a04e:	2301      	movs	r3, #1
}
 800a050:	4618      	mov	r0, r3
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	20000934 	.word	0x20000934
 800a05c:	20000750 	.word	0x20000750
 800a060:	08015a74 	.word	0x08015a74

0800a064 <EM_System_Mode>:

/************************* [System Actions] *************************/

scpi_result_t EM_System_Mode(scpi_t * context)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
    const char* p1;
    size_t p1l;

    if (!SCPI_ParamCharacters(context, &p1, &p1l, TRUE))
 800a06c:	f107 0208 	add.w	r2, r7, #8
 800a070:	f107 010c 	add.w	r1, r7, #12
 800a074:	2301      	movs	r3, #1
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f005 fd8a 	bl	800fb90 <SCPI_ParamCharacters>
 800a07c:	4603      	mov	r3, r0
 800a07e:	f083 0301 	eor.w	r3, r3, #1
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <EM_System_Mode+0x2a>
        return SCPI_RES_ERR;
 800a088:	f04f 33ff 	mov.w	r3, #4294967295
 800a08c:	e033      	b.n	800a0f6 <EM_System_Mode+0x92>

    if (strcmp(p1, "SCOPE\r\n") == 0)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	491b      	ldr	r1, [pc, #108]	; (800a100 <EM_System_Mode+0x9c>)
 800a092:	4618      	mov	r0, r3
 800a094:	f7f6 f8a4 	bl	80001e0 <strcmp>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d104      	bne.n	800a0a8 <EM_System_Mode+0x44>
        daq_mode_set(&daq, SCOPE);
 800a09e:	2100      	movs	r1, #0
 800a0a0:	4818      	ldr	r0, [pc, #96]	; (800a104 <EM_System_Mode+0xa0>)
 800a0a2:	f7fd faf5 	bl	8007690 <daq_mode_set>
 800a0a6:	e021      	b.n	800a0ec <EM_System_Mode+0x88>
    else if (strcmp(p1, "VM\r\n") == 0)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4917      	ldr	r1, [pc, #92]	; (800a108 <EM_System_Mode+0xa4>)
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7f6 f897 	bl	80001e0 <strcmp>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d104      	bne.n	800a0c2 <EM_System_Mode+0x5e>
        daq_mode_set(&daq, VM);
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	4812      	ldr	r0, [pc, #72]	; (800a104 <EM_System_Mode+0xa0>)
 800a0bc:	f7fd fae8 	bl	8007690 <daq_mode_set>
 800a0c0:	e014      	b.n	800a0ec <EM_System_Mode+0x88>
    else if (strcmp(p1, "LA\r\n") == 0)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4911      	ldr	r1, [pc, #68]	; (800a10c <EM_System_Mode+0xa8>)
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7f6 f88a 	bl	80001e0 <strcmp>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d104      	bne.n	800a0dc <EM_System_Mode+0x78>
        daq_mode_set(&daq, LA);
 800a0d2:	2102      	movs	r1, #2
 800a0d4:	480b      	ldr	r0, [pc, #44]	; (800a104 <EM_System_Mode+0xa0>)
 800a0d6:	f7fd fadb 	bl	8007690 <daq_mode_set>
 800a0da:	e007      	b.n	800a0ec <EM_System_Mode+0x88>
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800a0dc:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f003 f873 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800a0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ea:	e004      	b.n	800a0f6 <EM_System_Mode+0x92>
    }

    SCPI_ResultText(context, SCPI_OK);
 800a0ec:	4908      	ldr	r1, [pc, #32]	; (800a110 <EM_System_Mode+0xac>)
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f005 f88e 	bl	800f210 <SCPI_ResultText>
    return SCPI_RES_OK;
 800a0f4:	2301      	movs	r3, #1
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	08015a78 	.word	0x08015a78
 800a104:	20000934 	.word	0x20000934
 800a108:	08015a80 	.word	0x08015a80
 800a10c:	08015a88 	.word	0x08015a88
 800a110:	08015a74 	.word	0x08015a74

0800a114 <EM_System_ModeQ>:

scpi_result_t EM_System_ModeQ(scpi_t * context)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
    if (daq.mode == SCOPE)
 800a11c:	4b10      	ldr	r3, [pc, #64]	; (800a160 <EM_System_ModeQ+0x4c>)
 800a11e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a122:	3334      	adds	r3, #52	; 0x34
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d104      	bne.n	800a134 <EM_System_ModeQ+0x20>
        SCPI_ResultText(context, "SCOPE");
 800a12a:	490e      	ldr	r1, [pc, #56]	; (800a164 <EM_System_ModeQ+0x50>)
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f005 f86f 	bl	800f210 <SCPI_ResultText>
 800a132:	e00f      	b.n	800a154 <EM_System_ModeQ+0x40>
    else if (daq.mode == VM)
 800a134:	4b0a      	ldr	r3, [pc, #40]	; (800a160 <EM_System_ModeQ+0x4c>)
 800a136:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a13a:	3334      	adds	r3, #52	; 0x34
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d104      	bne.n	800a14c <EM_System_ModeQ+0x38>
        SCPI_ResultText(context, "VM");
 800a142:	4909      	ldr	r1, [pc, #36]	; (800a168 <EM_System_ModeQ+0x54>)
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f005 f863 	bl	800f210 <SCPI_ResultText>
 800a14a:	e003      	b.n	800a154 <EM_System_ModeQ+0x40>
    else
        SCPI_ResultText(context, "LA");
 800a14c:	4907      	ldr	r1, [pc, #28]	; (800a16c <EM_System_ModeQ+0x58>)
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f005 f85e 	bl	800f210 <SCPI_ResultText>

    return SCPI_RES_OK;
 800a154:	2301      	movs	r3, #1
}
 800a156:	4618      	mov	r0, r3
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	20000934 	.word	0x20000934
 800a164:	08015a90 	.word	0x08015a90
 800a168:	08015a98 	.word	0x08015a98
 800a16c:	08015a9c 	.word	0x08015a9c

0800a170 <EM_System_LimitsQ>:

scpi_result_t EM_System_LimitsQ(scpi_t * context)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b0a4      	sub	sp, #144	; 0x90
 800a174:	af08      	add	r7, sp, #32
 800a176:	6078      	str	r0, [r7, #4]
    char buff[80];
    char dual[2] = {'\0'};
 800a178:	2300      	movs	r3, #0
 800a17a:	823b      	strh	r3, [r7, #16]
    char inter[2] = {'\0'};
 800a17c:	2300      	movs	r3, #0
 800a17e:	81bb      	strh	r3, [r7, #12]
    uint8_t dac = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t bit8 = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    uint8_t adcs = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
#ifdef EM_DAC
    dac = 1;
 800a192:	2301      	movs	r3, #1
 800a194:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
#endif
#ifdef EM_ADC_BIT8
    bit8 = 1;
 800a198:	2301      	movs	r3, #1
 800a19a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
#if defined(EM_ADC_MODE_ADC1)
    adcs = 1;
#elif defined(EM_ADC_MODE_ADC12)
    adcs = 2;
#elif defined(EM_ADC_MODE_ADC1234)
    adcs = 4;
 800a19e:	2304      	movs	r3, #4
 800a1a0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    //char smplt12_s[15];
    //char smplt8_s[15];
    //sprint_fast(smplt12_s, "%s", EM_ADC_1CH_SMPL_TM(EM_ADC_SMPLT_MAX_N, EM_ADC_TCONV12), 8);
    //sprint_fast(smplt8_s, "%s", EM_ADC_1CH_SMPL_TM(EM_ADC_SMPLT_MAX_N, EM_ADC_TCONV8), 8);

    int pwm_max_f = EM_TIM_PWM1_FREQ / 2;
 800a1a4:	4b15      	ldr	r3, [pc, #84]	; (800a1fc <EM_System_LimitsQ+0x8c>)
 800a1a6:	66bb      	str	r3, [r7, #104]	; 0x68

    int len = sprintf(buff, "%d,%d,%d,%d,%d,%d%s%s,%d,%d", EM_DAQ_MAX_B12_FS, EM_DAQ_MAX_B8_FS, EM_DAQ_MAX_MEM,
 800a1a8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800a1ac:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800a1b0:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800a1b4:	f107 0014 	add.w	r0, r7, #20
 800a1b8:	9107      	str	r1, [sp, #28]
 800a1ba:	9206      	str	r2, [sp, #24]
 800a1bc:	f107 020c 	add.w	r2, r7, #12
 800a1c0:	9205      	str	r2, [sp, #20]
 800a1c2:	f107 0210 	add.w	r2, r7, #16
 800a1c6:	9204      	str	r2, [sp, #16]
 800a1c8:	9303      	str	r3, [sp, #12]
 800a1ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1cc:	9302      	str	r3, [sp, #8]
 800a1ce:	4b0c      	ldr	r3, [pc, #48]	; (800a200 <EM_System_LimitsQ+0x90>)
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <EM_System_LimitsQ+0x94>)
 800a1da:	4a0b      	ldr	r2, [pc, #44]	; (800a208 <EM_System_LimitsQ+0x98>)
 800a1dc:	490b      	ldr	r1, [pc, #44]	; (800a20c <EM_System_LimitsQ+0x9c>)
 800a1de:	f008 fb65 	bl	80128ac <siprintf>
 800a1e2:	6678      	str	r0, [r7, #100]	; 0x64
                      EM_LA_MAX_FS, pwm_max_f, adcs, dual, inter, bit8, dac);

    SCPI_ResultCharacters(context, buff, len);
 800a1e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a1e6:	f107 0314 	add.w	r3, r7, #20
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f004 ff75 	bl	800f0dc <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 800a1f2:	2301      	movs	r3, #1
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3770      	adds	r7, #112	; 0x70
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	02255100 	.word	0x02255100
 800a200:	004c4b40 	.word	0x004c4b40
 800a204:	0007a120 	.word	0x0007a120
 800a208:	00061a80 	.word	0x00061a80
 800a20c:	08015aa0 	.word	0x08015aa0

0800a210 <EM_VM_ReadQ>:

/************************* [VM Actions] *************************/

scpi_result_t EM_VM_ReadQ(scpi_t * context)
{
 800a210:	b5b0      	push	{r4, r5, r7, lr}
 800a212:	b0c4      	sub	sp, #272	; 0x110
 800a214:	af08      	add	r7, sp, #32
 800a216:	6078      	str	r0, [r7, #4]
    if (daq.mode == VM)
 800a218:	4b26      	ldr	r3, [pc, #152]	; (800a2b4 <EM_VM_ReadQ+0xa4>)
 800a21a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a21e:	3334      	adds	r3, #52	; 0x34
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	2b01      	cmp	r3, #1
 800a224:	f040 81fa 	bne.w	800a61c <EM_VM_ReadQ+0x40c>
    {
        daq_enable(&daq, 0);
 800a228:	2100      	movs	r1, #0
 800a22a:	4822      	ldr	r0, [pc, #136]	; (800a2b4 <EM_VM_ReadQ+0xa4>)
 800a22c:	f7fd f946 	bl	80074bc <daq_enable>

        uint32_t p1 = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
        if (context != NULL)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d007      	beq.n	800a24c <EM_VM_ReadQ+0x3c>
            SCPI_ParamUInt32(context, &p1, FALSE);
 800a23c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800a240:	2200      	movs	r2, #0
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f005 fc91 	bl	800fb6c <SCPI_ParamUInt32>
 800a24a:	e002      	b.n	800a252 <EM_VM_ReadQ+0x42>
        else
            p1 = 1;
 800a24c:	2301      	movs	r3, #1
 800a24e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

        float vref_raw = 0;
 800a252:	f04f 0300 	mov.w	r3, #0
 800a256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        float ch1_raw = 0;
 800a25a:	f04f 0300 	mov.w	r3, #0
 800a25e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        float ch2_raw = 0;
 800a262:	f04f 0300 	mov.w	r3, #0
 800a266:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        float ch3_raw = 0;
 800a26a:	f04f 0300 	mov.w	r3, #0
 800a26e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        float ch4_raw = 0;
 800a272:	f04f 0300 	mov.w	r3, #0
 800a276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        int avg_num = 1;
 800a27a:	2301      	movs	r3, #1
 800a27c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        if (p1 > 0)
 800a280:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d003      	beq.n	800a290 <EM_VM_ReadQ+0x80>
            avg_num = (int)p1;
 800a288:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a28c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

        if (avg_num > daq.set.mem)
 800a290:	4b08      	ldr	r3, [pc, #32]	; (800a2b4 <EM_VM_ReadQ+0xa4>)
 800a292:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a296:	3304      	adds	r3, #4
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	dd09      	ble.n	800a2b8 <EM_VM_ReadQ+0xa8>
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800a2a4:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f002 ff8f 	bl	800d1cc <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800a2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b2:	e1b9      	b.n	800a628 <EM_VM_ReadQ+0x418>
 800a2b4:	20000934 	.word	0x20000934

        get_avg_from_circ(last1, 3, avg_num, daq.buff1.len, daq.buff1.data, daq.set.bits, &vref_raw, &ch1_raw, &ch2_raw, NULL, NULL);
        get_avg_from_circ(last2, 2, avg_num, daq.buff2.len, daq.buff2.data, daq.set.bits, &ch3_raw, &ch4_raw, NULL, NULL, NULL);

#elif defined(EM_ADC_MODE_ADC1234)
        int last1 = EM_DMA_LAST_IDX(daq.buff1.len, EM_DMA_CH_ADC1, EM_DMA_ADC1);
 800a2b8:	4bab      	ldr	r3, [pc, #684]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a2ba:	88db      	ldrh	r3, [r3, #6]
 800a2bc:	461c      	mov	r4, r3
 800a2be:	2101      	movs	r1, #1
 800a2c0:	48aa      	ldr	r0, [pc, #680]	; (800a56c <EM_VM_ReadQ+0x35c>)
 800a2c2:	f7ff fe93 	bl	8009fec <LL_DMA_GetDataLength>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	1ae3      	subs	r3, r4, r3
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	4ba6      	ldr	r3, [pc, #664]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a2ce:	88db      	ldrh	r3, [r3, #6]
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	f7ff fe74 	bl	8009fc0 <get_last_circ_idx>
 800a2d8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        int last2 = EM_DMA_LAST_IDX(daq.buff2.len, EM_DMA_CH_ADC2, EM_DMA_ADC2);
 800a2dc:	4ba2      	ldr	r3, [pc, #648]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a2de:	8a5b      	ldrh	r3, [r3, #18]
 800a2e0:	461c      	mov	r4, r3
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	48a2      	ldr	r0, [pc, #648]	; (800a570 <EM_VM_ReadQ+0x360>)
 800a2e6:	f7ff fe81 	bl	8009fec <LL_DMA_GetDataLength>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	1ae3      	subs	r3, r4, r3
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	4b9d      	ldr	r3, [pc, #628]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a2f2:	8a5b      	ldrh	r3, [r3, #18]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	4610      	mov	r0, r2
 800a2f8:	f7ff fe62 	bl	8009fc0 <get_last_circ_idx>
 800a2fc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
        int last3 = EM_DMA_LAST_IDX(daq.buff3.len, EM_DMA_CH_ADC3, EM_DMA_ADC3);
 800a300:	4b99      	ldr	r3, [pc, #612]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a302:	8bdb      	ldrh	r3, [r3, #30]
 800a304:	461c      	mov	r4, r3
 800a306:	2105      	movs	r1, #5
 800a308:	4899      	ldr	r0, [pc, #612]	; (800a570 <EM_VM_ReadQ+0x360>)
 800a30a:	f7ff fe6f 	bl	8009fec <LL_DMA_GetDataLength>
 800a30e:	4603      	mov	r3, r0
 800a310:	1ae3      	subs	r3, r4, r3
 800a312:	461a      	mov	r2, r3
 800a314:	4b94      	ldr	r3, [pc, #592]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a316:	8bdb      	ldrh	r3, [r3, #30]
 800a318:	4619      	mov	r1, r3
 800a31a:	4610      	mov	r0, r2
 800a31c:	f7ff fe50 	bl	8009fc0 <get_last_circ_idx>
 800a320:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
        int last4 = EM_DMA_LAST_IDX(daq.buff4.len, EM_DMA_CH_ADC4, EM_DMA_ADC4);
 800a324:	4b90      	ldr	r3, [pc, #576]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a328:	461c      	mov	r4, r3
 800a32a:	2102      	movs	r1, #2
 800a32c:	4890      	ldr	r0, [pc, #576]	; (800a570 <EM_VM_ReadQ+0x360>)
 800a32e:	f7ff fe5d 	bl	8009fec <LL_DMA_GetDataLength>
 800a332:	4603      	mov	r3, r0
 800a334:	1ae3      	subs	r3, r4, r3
 800a336:	461a      	mov	r2, r3
 800a338:	4b8b      	ldr	r3, [pc, #556]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a33a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a33c:	4619      	mov	r1, r3
 800a33e:	4610      	mov	r0, r2
 800a340:	f7ff fe3e 	bl	8009fc0 <get_last_circ_idx>
 800a344:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        get_avg_from_circ(last1, 2, avg_num, daq.buff1.len, daq.buff1.data, daq.set.bits, &vref_raw, &ch1_raw, NULL, NULL, NULL);
 800a348:	4b87      	ldr	r3, [pc, #540]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a34a:	88db      	ldrh	r3, [r3, #6]
 800a34c:	4618      	mov	r0, r3
 800a34e:	4b86      	ldr	r3, [pc, #536]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	4b85      	ldr	r3, [pc, #532]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a354:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a358:	3306      	adds	r3, #6
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	4619      	mov	r1, r3
 800a35e:	2300      	movs	r3, #0
 800a360:	9306      	str	r3, [sp, #24]
 800a362:	2300      	movs	r3, #0
 800a364:	9305      	str	r3, [sp, #20]
 800a366:	2300      	movs	r3, #0
 800a368:	9304      	str	r3, [sp, #16]
 800a36a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800a36e:	9303      	str	r3, [sp, #12]
 800a370:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a374:	9302      	str	r3, [sp, #8]
 800a376:	9101      	str	r1, [sp, #4]
 800a378:	9200      	str	r2, [sp, #0]
 800a37a:	4603      	mov	r3, r0
 800a37c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a380:	2102      	movs	r1, #2
 800a382:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800a386:	f002 fa79 	bl	800c87c <get_avg_from_circ>
        get_avg_from_circ(last2, 1, avg_num, daq.buff2.len, daq.buff2.data, daq.set.bits, &ch2_raw, NULL, NULL, NULL, NULL);
 800a38a:	4b77      	ldr	r3, [pc, #476]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a38c:	8a5b      	ldrh	r3, [r3, #18]
 800a38e:	4618      	mov	r0, r3
 800a390:	4b75      	ldr	r3, [pc, #468]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a392:	68da      	ldr	r2, [r3, #12]
 800a394:	4b74      	ldr	r3, [pc, #464]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a396:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a39a:	3306      	adds	r3, #6
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	4619      	mov	r1, r3
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	9306      	str	r3, [sp, #24]
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	9305      	str	r3, [sp, #20]
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9304      	str	r3, [sp, #16]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9303      	str	r3, [sp, #12]
 800a3b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800a3b4:	9302      	str	r3, [sp, #8]
 800a3b6:	9101      	str	r1, [sp, #4]
 800a3b8:	9200      	str	r2, [sp, #0]
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800a3c6:	f002 fa59 	bl	800c87c <get_avg_from_circ>
        get_avg_from_circ(last3, 1, avg_num, daq.buff3.len, daq.buff3.data, daq.set.bits, &ch3_raw, NULL, NULL, NULL, NULL);
 800a3ca:	4b67      	ldr	r3, [pc, #412]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a3cc:	8bdb      	ldrh	r3, [r3, #30]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	4b65      	ldr	r3, [pc, #404]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a3d2:	699a      	ldr	r2, [r3, #24]
 800a3d4:	4b64      	ldr	r3, [pc, #400]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a3d6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a3da:	3306      	adds	r3, #6
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	9306      	str	r3, [sp, #24]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9305      	str	r3, [sp, #20]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	9304      	str	r3, [sp, #16]
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	9303      	str	r3, [sp, #12]
 800a3f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a3f4:	9302      	str	r3, [sp, #8]
 800a3f6:	9101      	str	r1, [sp, #4]
 800a3f8:	9200      	str	r2, [sp, #0]
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a400:	2101      	movs	r1, #1
 800a402:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800a406:	f002 fa39 	bl	800c87c <get_avg_from_circ>
        get_avg_from_circ(last4, 1, avg_num, daq.buff4.len, daq.buff4.data, daq.set.bits, &ch4_raw, NULL, NULL, NULL, NULL);
 800a40a:	4b57      	ldr	r3, [pc, #348]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a40c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a40e:	4618      	mov	r0, r3
 800a410:	4b55      	ldr	r3, [pc, #340]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a414:	4b54      	ldr	r3, [pc, #336]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a416:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a41a:	3306      	adds	r3, #6
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	4619      	mov	r1, r3
 800a420:	2300      	movs	r3, #0
 800a422:	9306      	str	r3, [sp, #24]
 800a424:	2300      	movs	r3, #0
 800a426:	9305      	str	r3, [sp, #20]
 800a428:	2300      	movs	r3, #0
 800a42a:	9304      	str	r3, [sp, #16]
 800a42c:	2300      	movs	r3, #0
 800a42e:	9303      	str	r3, [sp, #12]
 800a430:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a434:	9302      	str	r3, [sp, #8]
 800a436:	9101      	str	r1, [sp, #4]
 800a438:	9200      	str	r2, [sp, #0]
 800a43a:	4603      	mov	r3, r0
 800a43c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a440:	2101      	movs	r1, #1
 800a442:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800a446:	f002 fa19 	bl	800c87c <get_avg_from_circ>
        char ch2_s[10];
        char ch3_s[10];
        char ch4_s[10];

#ifdef VREFINT_CAL_ADDR
        float vcc = 3.3 * EM_ADC_VREF_CAL / vref_raw;
 800a44a:	4b4a      	ldr	r3, [pc, #296]	; (800a574 <EM_VM_ReadQ+0x364>)
 800a44c:	881b      	ldrh	r3, [r3, #0]
 800a44e:	4618      	mov	r0, r3
 800a450:	f7f6 f880 	bl	8000554 <__aeabi_i2d>
 800a454:	a342      	add	r3, pc, #264	; (adr r3, 800a560 <EM_VM_ReadQ+0x350>)
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	f7f6 f8e5 	bl	8000628 <__aeabi_dmul>
 800a45e:	4603      	mov	r3, r0
 800a460:	460c      	mov	r4, r1
 800a462:	4625      	mov	r5, r4
 800a464:	461c      	mov	r4, r3
 800a466:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7f6 f884 	bl	8000578 <__aeabi_f2d>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	f7f6 fa00 	bl	800087c <__aeabi_ddiv>
 800a47c:	4603      	mov	r3, r0
 800a47e:	460c      	mov	r4, r1
 800a480:	4618      	mov	r0, r3
 800a482:	4621      	mov	r1, r4
 800a484:	f7f6 fbc8 	bl	8000c18 <__aeabi_d2f>
 800a488:	4603      	mov	r3, r0
 800a48a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
#else
        float vcc = daq.adc_max_val * EM_ADC_VREF_CAL / vref_raw / 1000;
#endif
        float ch1 = vcc * ch1_raw / daq.adc_max_val;
 800a48e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a492:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800a496:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a49a:	4b33      	ldr	r3, [pc, #204]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a49c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a4a0:	332c      	adds	r3, #44	; 0x2c
 800a4a2:	ed93 7a00 	vldr	s14, [r3]
 800a4a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4aa:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
        float ch2 = vcc * ch2_raw / daq.adc_max_val;
 800a4ae:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a4b2:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800a4b6:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a4ba:	4b2b      	ldr	r3, [pc, #172]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a4bc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a4c0:	332c      	adds	r3, #44	; 0x2c
 800a4c2:	ed93 7a00 	vldr	s14, [r3]
 800a4c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4ca:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
        float ch3 = vcc * ch3_raw / daq.adc_max_val;
 800a4ce:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a4d2:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800a4d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a4da:	4b23      	ldr	r3, [pc, #140]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a4dc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a4e0:	332c      	adds	r3, #44	; 0x2c
 800a4e2:	ed93 7a00 	vldr	s14, [r3]
 800a4e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4ea:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
        float ch4 = vcc * ch4_raw / daq.adc_max_val;
 800a4ee:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a4f2:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800a4f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a4fa:	4b1b      	ldr	r3, [pc, #108]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a4fc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a500:	332c      	adds	r3, #44	; 0x2c
 800a502:	ed93 7a00 	vldr	s14, [r3]
 800a506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a50a:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

        daq.vref = vref_raw;
 800a50e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a512:	4b15      	ldr	r3, [pc, #84]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a514:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a518:	3320      	adds	r3, #32
 800a51a:	601a      	str	r2, [r3, #0]
        daq.vcc_mv = vcc * 1000;
 800a51c:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800a520:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800a578 <EM_VM_ReadQ+0x368>
 800a524:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a528:	4b0f      	ldr	r3, [pc, #60]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a52a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a52e:	3324      	adds	r3, #36	; 0x24
 800a530:	edc3 7a00 	vstr	s15, [r3]

        if (context == NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d120      	bne.n	800a57c <EM_VM_ReadQ+0x36c>
        {
            if (daq.vcc_mv > 0)
 800a53a:	4b0b      	ldr	r3, [pc, #44]	; (800a568 <EM_VM_ReadQ+0x358>)
 800a53c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a540:	3324      	adds	r3, #36	; 0x24
 800a542:	edd3 7a00 	vldr	s15, [r3]
 800a546:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a54e:	dd01      	ble.n	800a554 <EM_VM_ReadQ+0x344>
                return SCPI_RES_OK;
 800a550:	2301      	movs	r3, #1
 800a552:	e069      	b.n	800a628 <EM_VM_ReadQ+0x418>
            else
                return SCPI_RES_ERR;
 800a554:	f04f 33ff 	mov.w	r3, #4294967295
 800a558:	e066      	b.n	800a628 <EM_VM_ReadQ+0x418>
 800a55a:	bf00      	nop
 800a55c:	f3af 8000 	nop.w
 800a560:	66666666 	.word	0x66666666
 800a564:	400a6666 	.word	0x400a6666
 800a568:	20000934 	.word	0x20000934
 800a56c:	40020000 	.word	0x40020000
 800a570:	40020400 	.word	0x40020400
 800a574:	1ffff7ba 	.word	0x1ffff7ba
 800a578:	447a0000 	.word	0x447a0000
        }

        sprint_fast(vcc_s, "%s", vcc, 4);
 800a57c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a580:	2204      	movs	r2, #4
 800a582:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 800a586:	492a      	ldr	r1, [pc, #168]	; (800a630 <EM_VM_ReadQ+0x420>)
 800a588:	4618      	mov	r0, r3
 800a58a:	f002 fb95 	bl	800ccb8 <sprint_fast>
        sprint_fast(ch1_s, "%s", ch1, 4);
 800a58e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800a592:	2204      	movs	r2, #4
 800a594:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 800a598:	4925      	ldr	r1, [pc, #148]	; (800a630 <EM_VM_ReadQ+0x420>)
 800a59a:	4618      	mov	r0, r3
 800a59c:	f002 fb8c 	bl	800ccb8 <sprint_fast>
        sprint_fast(ch2_s, "%s", ch2, 4);
 800a5a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800a5a4:	2204      	movs	r2, #4
 800a5a6:	ed97 0a34 	vldr	s0, [r7, #208]	; 0xd0
 800a5aa:	4921      	ldr	r1, [pc, #132]	; (800a630 <EM_VM_ReadQ+0x420>)
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f002 fb83 	bl	800ccb8 <sprint_fast>
        sprint_fast(ch3_s, "%s", ch3, 4);
 800a5b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a5b6:	2204      	movs	r2, #4
 800a5b8:	ed97 0a33 	vldr	s0, [r7, #204]	; 0xcc
 800a5bc:	491c      	ldr	r1, [pc, #112]	; (800a630 <EM_VM_ReadQ+0x420>)
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f002 fb7a 	bl	800ccb8 <sprint_fast>
        sprint_fast(ch4_s, "%s", ch4, 4);
 800a5c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a5c8:	2204      	movs	r2, #4
 800a5ca:	ed97 0a32 	vldr	s0, [r7, #200]	; 0xc8
 800a5ce:	4918      	ldr	r1, [pc, #96]	; (800a630 <EM_VM_ReadQ+0x420>)
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f002 fb71 	bl	800ccb8 <sprint_fast>

        char buff[100];
        int len = sprintf(buff, "%s,%s,%s,%s,%s", ch1_s, ch2_s, ch3_s, ch4_s, vcc_s);
 800a5d6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800a5da:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800a5de:	f107 000c 	add.w	r0, r7, #12
 800a5e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a5e6:	9302      	str	r3, [sp, #8]
 800a5e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	490f      	ldr	r1, [pc, #60]	; (800a634 <EM_VM_ReadQ+0x424>)
 800a5f8:	f008 f958 	bl	80128ac <siprintf>
 800a5fc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        daq_enable(&daq, 1);
 800a600:	2101      	movs	r1, #1
 800a602:	480d      	ldr	r0, [pc, #52]	; (800a638 <EM_VM_ReadQ+0x428>)
 800a604:	f7fc ff5a 	bl	80074bc <daq_enable>

        SCPI_ResultCharacters(context, buff, len);
 800a608:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a60c:	f107 030c 	add.w	r3, r7, #12
 800a610:	4619      	mov	r1, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f004 fd62 	bl	800f0dc <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 800a618:	2301      	movs	r3, #1
 800a61a:	e005      	b.n	800a628 <EM_VM_ReadQ+0x418>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800a61c:	4907      	ldr	r1, [pc, #28]	; (800a63c <EM_VM_ReadQ+0x42c>)
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f002 fdd4 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800a624:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a628:	4618      	mov	r0, r3
 800a62a:	37f0      	adds	r7, #240	; 0xf0
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bdb0      	pop	{r4, r5, r7, pc}
 800a630:	08015abc 	.word	0x08015abc
 800a634:	08015ac0 	.word	0x08015ac0
 800a638:	20000934 	.word	0x20000934
 800a63c:	fffffe8c 	.word	0xfffffe8c

0800a640 <EM_SCOPE_ReadQ>:

/************************* [SCOPE Actions] *************************/

scpi_result_t EM_SCOPE_ReadQ(scpi_t * context)
{
 800a640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a642:	b091      	sub	sp, #68	; 0x44
 800a644:	af06      	add	r7, sp, #24
 800a646:	6078      	str	r0, [r7, #4]
    if (daq.mode == SCOPE)
 800a648:	4b45      	ldr	r3, [pc, #276]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a64a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a64e:	3334      	adds	r3, #52	; 0x34
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	f040 81be 	bne.w	800a9d4 <EM_SCOPE_ReadQ+0x394>
    {
        if (daq.trig.ready == 0)
 800a658:	4b41      	ldr	r3, [pc, #260]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a65a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a65e:	337a      	adds	r3, #122	; 0x7a
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d105      	bne.n	800a672 <EM_SCOPE_ReadQ+0x32>
        {
            SCPI_ResultText(context, EM_RESP_NRDY);
 800a666:	493f      	ldr	r1, [pc, #252]	; (800a764 <EM_SCOPE_ReadQ+0x124>)
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f004 fdd1 	bl	800f210 <SCPI_ResultText>
            return SCPI_RES_OK;
 800a66e:	2301      	movs	r3, #1
 800a670:	e1b6      	b.n	800a9e0 <EM_SCOPE_ReadQ+0x3a0>
        }

        if (daq.trig.set.mode == DISABLED)
 800a672:	4b3b      	ldr	r3, [pc, #236]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a674:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a678:	3340      	adds	r3, #64	; 0x40
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	2b03      	cmp	r3, #3
 800a67e:	d103      	bne.n	800a688 <EM_SCOPE_ReadQ+0x48>
            daq_enable(&daq, 0);
 800a680:	2100      	movs	r1, #0
 800a682:	4837      	ldr	r0, [pc, #220]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a684:	f7fc ff1a 	bl	80074bc <daq_enable>

#ifdef VREFINT_CAL_ADDR
        float cal = EM_ADC_VREF_CAL / daq.adc_max_val * 3300;
 800a688:	4b37      	ldr	r3, [pc, #220]	; (800a768 <EM_SCOPE_ReadQ+0x128>)
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	ee07 3a90 	vmov	s15, r3
 800a690:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a694:	4b32      	ldr	r3, [pc, #200]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a696:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a69a:	332c      	adds	r3, #44	; 0x2c
 800a69c:	ed93 7a00 	vldr	s14, [r3]
 800a6a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6a4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a76c <EM_SCOPE_ReadQ+0x12c>
 800a6a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
#else
        float cal = EM_ADC_VREF_CAL;
#endif

        if (daq.set.bits == B8) // compressing
 800a6b0:	4b2b      	ldr	r3, [pc, #172]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a6b2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a6b6:	3306      	adds	r3, #6
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b08      	cmp	r3, #8
 800a6bc:	d108      	bne.n	800a6d0 <EM_SCOPE_ReadQ+0x90>
            cal /= 10.0;
 800a6be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a6c2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800a6c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800a6ce:	e007      	b.n	800a6e0 <EM_SCOPE_ReadQ+0xa0>
        else
            cal *= 10.0;
 800a6d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a6d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a6d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            added += get_1ch_from_circ(daq.trig.pos_frst, buff2_mem, daq.buff2.len, ch_it++, daq.buff2.chans,
                                       daq.set.bits, daq.vref, cal, daq.buff2.data, daq.buff_out.data, &idx);

#elif defined(EM_ADC_MODE_ADC1234)

        int buff1_mem = daq.buff1.len - daq.buff1.reserve;
 800a6e0:	4b1f      	ldr	r3, [pc, #124]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a6e2:	88db      	ldrh	r3, [r3, #6]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4b1e      	ldr	r3, [pc, #120]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a6e8:	891b      	ldrh	r3, [r3, #8]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	61bb      	str	r3, [r7, #24]
        int buff2_mem = daq.buff2.len - daq.buff2.reserve;
 800a6ee:	4b1c      	ldr	r3, [pc, #112]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a6f0:	8a5b      	ldrh	r3, [r3, #18]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	4b1a      	ldr	r3, [pc, #104]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a6f6:	8a9b      	ldrh	r3, [r3, #20]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	617b      	str	r3, [r7, #20]
        int buff3_mem = daq.buff3.len - daq.buff3.reserve;
 800a6fc:	4b18      	ldr	r3, [pc, #96]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a6fe:	8bdb      	ldrh	r3, [r3, #30]
 800a700:	461a      	mov	r2, r3
 800a702:	4b17      	ldr	r3, [pc, #92]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a704:	8c1b      	ldrh	r3, [r3, #32]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	613b      	str	r3, [r7, #16]
        int buff4_mem = daq.buff4.len - daq.buff4.reserve;
 800a70a:	4b15      	ldr	r3, [pc, #84]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a70c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a70e:	461a      	mov	r2, r3
 800a710:	4b13      	ldr	r3, [pc, #76]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a712:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	60fb      	str	r3, [r7, #12]

        int added = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	623b      	str	r3, [r7, #32]
        int idx = 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	60bb      	str	r3, [r7, #8]

        if (daq.trig.set.mode == DISABLED)
 800a720:	4b0f      	ldr	r3, [pc, #60]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a722:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a726:	3340      	adds	r3, #64	; 0x40
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	d147      	bne.n	800a7be <EM_SCOPE_ReadQ+0x17e>
        {
            uint16_t buff_ln = daq.buff1.len;
 800a72e:	4b0c      	ldr	r3, [pc, #48]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a730:	88db      	ldrh	r3, [r3, #6]
 800a732:	83fb      	strh	r3, [r7, #30]
            if (daq.set.ch2_en) buff_ln = daq.buff2.len;
 800a734:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a736:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a73a:	33fd      	adds	r3, #253	; 0xfd
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <EM_SCOPE_ReadQ+0x10a>
 800a742:	4b07      	ldr	r3, [pc, #28]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a744:	8a5b      	ldrh	r3, [r3, #18]
 800a746:	83fb      	strh	r3, [r7, #30]
 800a748:	e01c      	b.n	800a784 <EM_SCOPE_ReadQ+0x144>
            else if (daq.set.ch3_en) buff_ln = daq.buff3.len;
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a74c:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a750:	33fe      	adds	r3, #254	; 0xfe
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00b      	beq.n	800a770 <EM_SCOPE_ReadQ+0x130>
 800a758:	4b01      	ldr	r3, [pc, #4]	; (800a760 <EM_SCOPE_ReadQ+0x120>)
 800a75a:	8bdb      	ldrh	r3, [r3, #30]
 800a75c:	83fb      	strh	r3, [r7, #30]
 800a75e:	e011      	b.n	800a784 <EM_SCOPE_ReadQ+0x144>
 800a760:	20000934 	.word	0x20000934
 800a764:	08015ad0 	.word	0x08015ad0
 800a768:	1ffff7ba 	.word	0x1ffff7ba
 800a76c:	454e4000 	.word	0x454e4000
            else if (daq.set.ch4_en) buff_ln = daq.buff4.len;
 800a770:	4b9d      	ldr	r3, [pc, #628]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a772:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a776:	33ff      	adds	r3, #255	; 0xff
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d002      	beq.n	800a784 <EM_SCOPE_ReadQ+0x144>
 800a77e:	4b9a      	ldr	r3, [pc, #616]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a782:	83fb      	strh	r3, [r7, #30]

            daq.trig.pos_frst = EM_DMA_LAST_IDX(buff_ln, daq.trig.dma_ch_trig, daq.trig.dma_trig);
 800a784:	8bfc      	ldrh	r4, [r7, #30]
 800a786:	4b98      	ldr	r3, [pc, #608]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a788:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a78c:	33b8      	adds	r3, #184	; 0xb8
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	4b95      	ldr	r3, [pc, #596]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a792:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a796:	33b4      	adds	r3, #180	; 0xb4
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4619      	mov	r1, r3
 800a79c:	4610      	mov	r0, r2
 800a79e:	f7ff fc25 	bl	8009fec <LL_DMA_GetDataLength>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	1ae3      	subs	r3, r4, r3
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	8bfb      	ldrh	r3, [r7, #30]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	f7ff fc07 	bl	8009fc0 <get_last_circ_idx>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	4b8c      	ldr	r3, [pc, #560]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a7b6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a7ba:	3384      	adds	r3, #132	; 0x84
 800a7bc:	601a      	str	r2, [r3, #0]
        }

        if (daq.set.ch1_en)
 800a7be:	4b8a      	ldr	r3, [pc, #552]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a7c0:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a7c4:	33fc      	adds	r3, #252	; 0xfc
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d02e      	beq.n	800a82a <EM_SCOPE_ReadQ+0x1ea>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, 1, daq.buff1.chans,
 800a7cc:	4b86      	ldr	r3, [pc, #536]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a7ce:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a7d2:	3384      	adds	r3, #132	; 0x84
 800a7d4:	6818      	ldr	r0, [r3, #0]
 800a7d6:	4b84      	ldr	r3, [pc, #528]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a7d8:	88db      	ldrh	r3, [r3, #6]
 800a7da:	461e      	mov	r6, r3
 800a7dc:	4b82      	ldr	r3, [pc, #520]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a7de:	889b      	ldrh	r3, [r3, #4]
 800a7e0:	461c      	mov	r4, r3
                                       daq.set.bits, daq.vref, cal, daq.buff1.data, daq.buff_out.data, &idx);
 800a7e2:	4b81      	ldr	r3, [pc, #516]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a7e4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a7e8:	3306      	adds	r3, #6
 800a7ea:	781b      	ldrb	r3, [r3, #0]
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, 1, daq.buff1.chans,
 800a7ec:	461d      	mov	r5, r3
 800a7ee:	4b7e      	ldr	r3, [pc, #504]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a7f0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a7f4:	3320      	adds	r3, #32
 800a7f6:	edd3 7a00 	vldr	s15, [r3]
 800a7fa:	4b7b      	ldr	r3, [pc, #492]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
                                       daq.set.bits, daq.vref, cal, daq.buff1.data, daq.buff_out.data, &idx);
 800a7fe:	4a7a      	ldr	r2, [pc, #488]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a800:	6b12      	ldr	r2, [r2, #48]	; 0x30
            added += get_1ch_from_circ(daq.trig.pos_frst, buff1_mem, daq.buff1.len, 1, daq.buff1.chans,
 800a802:	f107 0108 	add.w	r1, r7, #8
 800a806:	9104      	str	r1, [sp, #16]
 800a808:	9203      	str	r2, [sp, #12]
 800a80a:	9302      	str	r3, [sp, #8]
 800a80c:	9501      	str	r5, [sp, #4]
 800a80e:	9400      	str	r4, [sp, #0]
 800a810:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800a814:	eeb0 0a67 	vmov.f32	s0, s15
 800a818:	2301      	movs	r3, #1
 800a81a:	4632      	mov	r2, r6
 800a81c:	69b9      	ldr	r1, [r7, #24]
 800a81e:	f002 f933 	bl	800ca88 <get_1ch_from_circ>
 800a822:	4602      	mov	r2, r0
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	4413      	add	r3, r2
 800a828:	623b      	str	r3, [r7, #32]
        if (daq.set.ch2_en)
 800a82a:	4b6f      	ldr	r3, [pc, #444]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a82c:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a830:	33fd      	adds	r3, #253	; 0xfd
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d02e      	beq.n	800a896 <EM_SCOPE_ReadQ+0x256>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff2_mem, daq.buff2.len, 1, daq.buff2.chans,
 800a838:	4b6b      	ldr	r3, [pc, #428]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a83a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a83e:	3384      	adds	r3, #132	; 0x84
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	4b69      	ldr	r3, [pc, #420]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a844:	8a5b      	ldrh	r3, [r3, #18]
 800a846:	461e      	mov	r6, r3
 800a848:	4b67      	ldr	r3, [pc, #412]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a84a:	8a1b      	ldrh	r3, [r3, #16]
 800a84c:	461c      	mov	r4, r3
                                       daq.set.bits, daq.vref, cal, daq.buff2.data, daq.buff_out.data, &idx);
 800a84e:	4b66      	ldr	r3, [pc, #408]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a850:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a854:	3306      	adds	r3, #6
 800a856:	781b      	ldrb	r3, [r3, #0]
            added += get_1ch_from_circ(daq.trig.pos_frst, buff2_mem, daq.buff2.len, 1, daq.buff2.chans,
 800a858:	461d      	mov	r5, r3
 800a85a:	4b63      	ldr	r3, [pc, #396]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a85c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a860:	3320      	adds	r3, #32
 800a862:	edd3 7a00 	vldr	s15, [r3]
 800a866:	4b60      	ldr	r3, [pc, #384]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a868:	68db      	ldr	r3, [r3, #12]
                                       daq.set.bits, daq.vref, cal, daq.buff2.data, daq.buff_out.data, &idx);
 800a86a:	4a5f      	ldr	r2, [pc, #380]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a86c:	6b12      	ldr	r2, [r2, #48]	; 0x30
            added += get_1ch_from_circ(daq.trig.pos_frst, buff2_mem, daq.buff2.len, 1, daq.buff2.chans,
 800a86e:	f107 0108 	add.w	r1, r7, #8
 800a872:	9104      	str	r1, [sp, #16]
 800a874:	9203      	str	r2, [sp, #12]
 800a876:	9302      	str	r3, [sp, #8]
 800a878:	9501      	str	r5, [sp, #4]
 800a87a:	9400      	str	r4, [sp, #0]
 800a87c:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800a880:	eeb0 0a67 	vmov.f32	s0, s15
 800a884:	2301      	movs	r3, #1
 800a886:	4632      	mov	r2, r6
 800a888:	6979      	ldr	r1, [r7, #20]
 800a88a:	f002 f8fd 	bl	800ca88 <get_1ch_from_circ>
 800a88e:	4602      	mov	r2, r0
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	4413      	add	r3, r2
 800a894:	623b      	str	r3, [r7, #32]
        if (daq.set.ch3_en)
 800a896:	4b54      	ldr	r3, [pc, #336]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a898:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a89c:	33fe      	adds	r3, #254	; 0xfe
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d02e      	beq.n	800a902 <EM_SCOPE_ReadQ+0x2c2>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff3_mem, daq.buff3.len, 1, daq.buff3.chans,
 800a8a4:	4b50      	ldr	r3, [pc, #320]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a8a6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a8aa:	3384      	adds	r3, #132	; 0x84
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	4b4e      	ldr	r3, [pc, #312]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a8b0:	8bdb      	ldrh	r3, [r3, #30]
 800a8b2:	461e      	mov	r6, r3
 800a8b4:	4b4c      	ldr	r3, [pc, #304]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a8b6:	8b9b      	ldrh	r3, [r3, #28]
 800a8b8:	461c      	mov	r4, r3
                                       daq.set.bits, daq.vref, cal, daq.buff3.data, daq.buff_out.data, &idx);
 800a8ba:	4b4b      	ldr	r3, [pc, #300]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a8bc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a8c0:	3306      	adds	r3, #6
 800a8c2:	781b      	ldrb	r3, [r3, #0]
            added += get_1ch_from_circ(daq.trig.pos_frst, buff3_mem, daq.buff3.len, 1, daq.buff3.chans,
 800a8c4:	461d      	mov	r5, r3
 800a8c6:	4b48      	ldr	r3, [pc, #288]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a8c8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a8cc:	3320      	adds	r3, #32
 800a8ce:	edd3 7a00 	vldr	s15, [r3]
 800a8d2:	4b45      	ldr	r3, [pc, #276]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a8d4:	699b      	ldr	r3, [r3, #24]
                                       daq.set.bits, daq.vref, cal, daq.buff3.data, daq.buff_out.data, &idx);
 800a8d6:	4a44      	ldr	r2, [pc, #272]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a8d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
            added += get_1ch_from_circ(daq.trig.pos_frst, buff3_mem, daq.buff3.len, 1, daq.buff3.chans,
 800a8da:	f107 0108 	add.w	r1, r7, #8
 800a8de:	9104      	str	r1, [sp, #16]
 800a8e0:	9203      	str	r2, [sp, #12]
 800a8e2:	9302      	str	r3, [sp, #8]
 800a8e4:	9501      	str	r5, [sp, #4]
 800a8e6:	9400      	str	r4, [sp, #0]
 800a8e8:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800a8ec:	eeb0 0a67 	vmov.f32	s0, s15
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	4632      	mov	r2, r6
 800a8f4:	6939      	ldr	r1, [r7, #16]
 800a8f6:	f002 f8c7 	bl	800ca88 <get_1ch_from_circ>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	4413      	add	r3, r2
 800a900:	623b      	str	r3, [r7, #32]
        if (daq.set.ch4_en)
 800a902:	4b39      	ldr	r3, [pc, #228]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a904:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800a908:	33ff      	adds	r3, #255	; 0xff
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d02e      	beq.n	800a96e <EM_SCOPE_ReadQ+0x32e>
            added += get_1ch_from_circ(daq.trig.pos_frst, buff4_mem, daq.buff4.len, 1, daq.buff4.chans,
 800a910:	4b35      	ldr	r3, [pc, #212]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a912:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a916:	3384      	adds	r3, #132	; 0x84
 800a918:	6818      	ldr	r0, [r3, #0]
 800a91a:	4b33      	ldr	r3, [pc, #204]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a91c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a91e:	461e      	mov	r6, r3
 800a920:	4b31      	ldr	r3, [pc, #196]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a924:	461c      	mov	r4, r3
                                       daq.set.bits, daq.vref, cal, daq.buff4.data, daq.buff_out.data, &idx);
 800a926:	4b30      	ldr	r3, [pc, #192]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a928:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a92c:	3306      	adds	r3, #6
 800a92e:	781b      	ldrb	r3, [r3, #0]
            added += get_1ch_from_circ(daq.trig.pos_frst, buff4_mem, daq.buff4.len, 1, daq.buff4.chans,
 800a930:	461d      	mov	r5, r3
 800a932:	4b2d      	ldr	r3, [pc, #180]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a934:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a938:	3320      	adds	r3, #32
 800a93a:	edd3 7a00 	vldr	s15, [r3]
 800a93e:	4b2a      	ldr	r3, [pc, #168]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                       daq.set.bits, daq.vref, cal, daq.buff4.data, daq.buff_out.data, &idx);
 800a942:	4a29      	ldr	r2, [pc, #164]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a944:	6b12      	ldr	r2, [r2, #48]	; 0x30
            added += get_1ch_from_circ(daq.trig.pos_frst, buff4_mem, daq.buff4.len, 1, daq.buff4.chans,
 800a946:	f107 0108 	add.w	r1, r7, #8
 800a94a:	9104      	str	r1, [sp, #16]
 800a94c:	9203      	str	r2, [sp, #12]
 800a94e:	9302      	str	r3, [sp, #8]
 800a950:	9501      	str	r5, [sp, #4]
 800a952:	9400      	str	r4, [sp, #0]
 800a954:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800a958:	eeb0 0a67 	vmov.f32	s0, s15
 800a95c:	2301      	movs	r3, #1
 800a95e:	4632      	mov	r2, r6
 800a960:	68f9      	ldr	r1, [r7, #12]
 800a962:	f002 f891 	bl	800ca88 <get_1ch_from_circ>
 800a966:	4602      	mov	r2, r0
 800a968:	6a3b      	ldr	r3, [r7, #32]
 800a96a:	4413      	add	r3, r2
 800a96c:	623b      	str	r3, [r7, #32]
#endif

        daq.trig.pretrig_cntr = 0;
 800a96e:	4b1e      	ldr	r3, [pc, #120]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a970:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a974:	3398      	adds	r3, #152	; 0x98
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]
        daq.trig.ready = 0;
 800a97a:	4b1b      	ldr	r3, [pc, #108]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a97c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a980:	337a      	adds	r3, #122	; 0x7a
 800a982:	2200      	movs	r2, #0
 800a984:	701a      	strb	r2, [r3, #0]
        daq.trig.ready_last = 0;
 800a986:	4b18      	ldr	r3, [pc, #96]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a988:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a98c:	337b      	adds	r3, #123	; 0x7b
 800a98e:	2200      	movs	r2, #0
 800a990:	701a      	strb	r2, [r3, #0]

        if (daq.trig.set.mode != SINGLE)
 800a992:	4b15      	ldr	r3, [pc, #84]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a994:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800a998:	3340      	adds	r3, #64	; 0x40
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	d003      	beq.n	800a9a8 <EM_SCOPE_ReadQ+0x368>
        {
            daq_enable(&daq, 1);
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	4811      	ldr	r0, [pc, #68]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a9a4:	f7fc fd8a 	bl	80074bc <daq_enable>
        }

        //ASSERT(added == daq.buff_out.len);
        if (added != daq.buff_out.len)
 800a9a8:	4b0f      	ldr	r3, [pc, #60]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a9aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d005      	beq.n	800a9c0 <EM_SCOPE_ReadQ+0x380>
        {
            SCPI_ResultText(context, "ERROR: invalid buffer size"); // TODO DEBUG
 800a9b4:	490d      	ldr	r1, [pc, #52]	; (800a9ec <EM_SCOPE_ReadQ+0x3ac>)
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f004 fc2a 	bl	800f210 <SCPI_ResultText>
            return SCPI_RES_OK;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e00f      	b.n	800a9e0 <EM_SCOPE_ReadQ+0x3a0>
        }

        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
 800a9c0:	4b09      	ldr	r3, [pc, #36]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a9c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a9c4:	4b08      	ldr	r3, [pc, #32]	; (800a9e8 <EM_SCOPE_ReadQ+0x3a8>)
 800a9c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f004 fdfc 	bl	800f5c8 <SCPI_ResultArbitraryBlock>
        return SCPI_RES_OK;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e005      	b.n	800a9e0 <EM_SCOPE_ReadQ+0x3a0>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800a9d4:	4906      	ldr	r1, [pc, #24]	; (800a9f0 <EM_SCOPE_ReadQ+0x3b0>)
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f002 fbf8 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800a9dc:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	372c      	adds	r7, #44	; 0x2c
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9e8:	20000934 	.word	0x20000934
 800a9ec:	08015adc 	.word	0x08015adc
 800a9f0:	fffffe8c 	.word	0xfffffe8c

0800a9f4 <EM_SCOPE_Set>:

scpi_result_t EM_SCOPE_Set(scpi_t * context)
{
 800a9f4:	b590      	push	{r4, r7, lr}
 800a9f6:	b097      	sub	sp, #92	; 0x5c
 800a9f8:	af02      	add	r7, sp, #8
 800a9fa:	6078      	str	r0, [r7, #4]
    if (daq.mode == SCOPE)
 800a9fc:	4ba7      	ldr	r3, [pc, #668]	; (800ac9c <EM_SCOPE_Set+0x2a8>)
 800a9fe:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800aa02:	3334      	adds	r3, #52	; 0x34
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f040 8192 	bne.w	800ad30 <EM_SCOPE_Set+0x33c>
        const char* p4;
        const char* p7;
        const char* p8;
        size_t p4l, p7l, p8l;

        if (!SCPI_ParamUInt32(context, &p1, TRUE) ||
 800aa0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800aa10:	2201      	movs	r2, #1
 800aa12:	4619      	mov	r1, r3
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f005 f8a9 	bl	800fb6c <SCPI_ParamUInt32>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f083 0301 	eor.w	r3, r3, #1
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d16a      	bne.n	800aafc <EM_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p2, TRUE) ||
 800aa26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f005 f89c 	bl	800fb6c <SCPI_ParamUInt32>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f083 0301 	eor.w	r3, r3, #1
 800aa3a:	b2db      	uxtb	r3, r3
        if (!SCPI_ParamUInt32(context, &p1, TRUE) ||
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d15d      	bne.n	800aafc <EM_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800aa40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa44:	2201      	movs	r2, #1
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f005 f88f 	bl	800fb6c <SCPI_ParamUInt32>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f083 0301 	eor.w	r3, r3, #1
 800aa54:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p2, TRUE) ||
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d150      	bne.n	800aafc <EM_SCOPE_Set+0x108>
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 800aa5a:	f107 0214 	add.w	r2, r7, #20
 800aa5e:	f107 0120 	add.w	r1, r7, #32
 800aa62:	2301      	movs	r3, #1
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f005 f893 	bl	800fb90 <SCPI_ParamCharacters>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	f083 0301 	eor.w	r3, r3, #1
 800aa70:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d142      	bne.n	800aafc <EM_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800aa76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f005 f874 	bl	800fb6c <SCPI_ParamUInt32>
 800aa84:	4603      	mov	r3, r0
 800aa86:	f083 0301 	eor.w	r3, r3, #1
 800aa8a:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p4, &p4l, TRUE) ||
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d135      	bne.n	800aafc <EM_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
 800aa90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa94:	2201      	movs	r2, #1
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f005 f867 	bl	800fb6c <SCPI_ParamUInt32>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	f083 0301 	eor.w	r3, r3, #1
 800aaa4:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d128      	bne.n	800aafc <EM_SCOPE_Set+0x108>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800aaaa:	f107 0210 	add.w	r2, r7, #16
 800aaae:	f107 011c 	add.w	r1, r7, #28
 800aab2:	2301      	movs	r3, #1
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f005 f86b 	bl	800fb90 <SCPI_ParamCharacters>
 800aaba:	4603      	mov	r3, r0
 800aabc:	f083 0301 	eor.w	r3, r3, #1
 800aac0:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p6, TRUE) ||
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d11a      	bne.n	800aafc <EM_SCOPE_Set+0x108>
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
 800aac6:	f107 020c 	add.w	r2, r7, #12
 800aaca:	f107 0118 	add.w	r1, r7, #24
 800aace:	2301      	movs	r3, #1
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f005 f85d 	bl	800fb90 <SCPI_ParamCharacters>
 800aad6:	4603      	mov	r3, r0
 800aad8:	f083 0301 	eor.w	r3, r3, #1
 800aadc:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10c      	bne.n	800aafc <EM_SCOPE_Set+0x108>
            !SCPI_ParamUInt32(context, &p9, TRUE))
 800aae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aae6:	2201      	movs	r2, #1
 800aae8:	4619      	mov	r1, r3
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f005 f83e 	bl	800fb6c <SCPI_ParamUInt32>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	f083 0301 	eor.w	r3, r3, #1
 800aaf6:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p8, &p8l, TRUE) ||
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <EM_SCOPE_Set+0x10e>
        {
            return SCPI_RES_ERR;
 800aafc:	f04f 33ff 	mov.w	r3, #4294967295
 800ab00:	e11c      	b.n	800ad3c <EM_SCOPE_Set+0x348>
        }

        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	d143      	bne.n	800ab90 <EM_SCOPE_Set+0x19c>
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d140      	bne.n	800ab90 <EM_SCOPE_Set+0x19c>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d13d      	bne.n	800ab90 <EM_SCOPE_Set+0x19c>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	781b      	ldrb	r3, [r3, #0]
        if (p4l != 4 || p7l != 1 || p8l != 1 ||
 800ab18:	2b54      	cmp	r3, #84	; 0x54
 800ab1a:	d003      	beq.n	800ab24 <EM_SCOPE_Set+0x130>
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2b46      	cmp	r3, #70	; 0x46
 800ab22:	d135      	bne.n	800ab90 <EM_SCOPE_Set+0x19c>
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	3301      	adds	r3, #1
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	2b54      	cmp	r3, #84	; 0x54
 800ab2c:	d004      	beq.n	800ab38 <EM_SCOPE_Set+0x144>
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	3301      	adds	r3, #1
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	2b46      	cmp	r3, #70	; 0x46
 800ab36:	d12b      	bne.n	800ab90 <EM_SCOPE_Set+0x19c>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	3302      	adds	r3, #2
 800ab3c:	781b      	ldrb	r3, [r3, #0]
            (p4[0] != 'T' && p4[0] != 'F') || (p4[1] != 'T' && p4[1] != 'F') ||
 800ab3e:	2b54      	cmp	r3, #84	; 0x54
 800ab40:	d004      	beq.n	800ab4c <EM_SCOPE_Set+0x158>
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 800ab42:	6a3b      	ldr	r3, [r7, #32]
 800ab44:	3302      	adds	r3, #2
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	2b46      	cmp	r3, #70	; 0x46
 800ab4a:	d121      	bne.n	800ab90 <EM_SCOPE_Set+0x19c>
 800ab4c:	6a3b      	ldr	r3, [r7, #32]
 800ab4e:	3303      	adds	r3, #3
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	2b54      	cmp	r3, #84	; 0x54
 800ab54:	d004      	beq.n	800ab60 <EM_SCOPE_Set+0x16c>
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	3303      	adds	r3, #3
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2b46      	cmp	r3, #70	; 0x46
 800ab5e:	d117      	bne.n	800ab90 <EM_SCOPE_Set+0x19c>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	781b      	ldrb	r3, [r3, #0]
            (p4[2] != 'T' && p4[2] != 'F') || (p4[3] != 'T' && p4[3] != 'F') ||
 800ab64:	2b52      	cmp	r3, #82	; 0x52
 800ab66:	d003      	beq.n	800ab70 <EM_SCOPE_Set+0x17c>
            (p7[0] != 'R' && p7[0] != 'F') || (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	2b46      	cmp	r3, #70	; 0x46
 800ab6e:	d10f      	bne.n	800ab90 <EM_SCOPE_Set+0x19c>
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	2b41      	cmp	r3, #65	; 0x41
 800ab76:	d013      	beq.n	800aba0 <EM_SCOPE_Set+0x1ac>
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	2b4e      	cmp	r3, #78	; 0x4e
 800ab7e:	d00f      	beq.n	800aba0 <EM_SCOPE_Set+0x1ac>
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	2b53      	cmp	r3, #83	; 0x53
 800ab86:	d00b      	beq.n	800aba0 <EM_SCOPE_Set+0x1ac>
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b44      	cmp	r3, #68	; 0x44
 800ab8e:	d007      	beq.n	800aba0 <EM_SCOPE_Set+0x1ac>
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800ab90:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f002 fb19 	bl	800d1cc <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800ab9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9e:	e0cd      	b.n	800ad3c <EM_SCOPE_Set+0x348>
        }

        daq_settings_save(&daq.set, &daq.trig.set, &daq.save_s, &daq.trig.save_s);
 800aba0:	4b3f      	ldr	r3, [pc, #252]	; (800aca0 <EM_SCOPE_Set+0x2ac>)
 800aba2:	4a40      	ldr	r2, [pc, #256]	; (800aca4 <EM_SCOPE_Set+0x2b0>)
 800aba4:	4940      	ldr	r1, [pc, #256]	; (800aca8 <EM_SCOPE_Set+0x2b4>)
 800aba6:	4841      	ldr	r0, [pc, #260]	; (800acac <EM_SCOPE_Set+0x2b8>)
 800aba8:	f7fb fe0d 	bl	80067c6 <daq_settings_save>
        daq_enable(&daq, 0);
 800abac:	2100      	movs	r1, #0
 800abae:	483b      	ldr	r0, [pc, #236]	; (800ac9c <EM_SCOPE_Set+0x2a8>)
 800abb0:	f7fc fc84 	bl	80074bc <daq_enable>
        daq_reset(&daq);
 800abb4:	4839      	ldr	r0, [pc, #228]	; (800ac9c <EM_SCOPE_Set+0x2a8>)
 800abb6:	f7fc fc13 	bl	80073e0 <daq_reset>
        daq.dis_hold = 1;
 800abba:	4b38      	ldr	r3, [pc, #224]	; (800ac9c <EM_SCOPE_Set+0x2a8>)
 800abbc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800abc0:	3335      	adds	r3, #53	; 0x35
 800abc2:	2201      	movs	r2, #1
 800abc4:	701a      	strb	r2, [r3, #0]

        daq_mem_set(&daq, 3); // safety guard
 800abc6:	2103      	movs	r1, #3
 800abc8:	4834      	ldr	r0, [pc, #208]	; (800ac9c <EM_SCOPE_Set+0x2a8>)
 800abca:	f7fb fee9 	bl	80069a0 <daq_mem_set>
        int ret2 = daq_bit_set(&daq, (int)p1);
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	4619      	mov	r1, r3
 800abd4:	4831      	ldr	r0, [pc, #196]	; (800ac9c <EM_SCOPE_Set+0x2a8>)
 800abd6:	f7fc f997 	bl	8006f08 <daq_bit_set>
 800abda:	64f8      	str	r0, [r7, #76]	; 0x4c
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	2b54      	cmp	r3, #84	; 0x54
 800abe2:	bf0c      	ite	eq
 800abe4:	2301      	moveq	r3, #1
 800abe6:	2300      	movne	r3, #0
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	4619      	mov	r1, r3
 800abec:	6a3b      	ldr	r3, [r7, #32]
 800abee:	3301      	adds	r3, #1
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	2b54      	cmp	r3, #84	; 0x54
 800abf4:	bf0c      	ite	eq
 800abf6:	2301      	moveq	r3, #1
 800abf8:	2300      	movne	r3, #0
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	4618      	mov	r0, r3
                                    p4[2] == 'T' ? 1 : 0, p4[3] == 'T' ? 1 : 0, (int)p3);
 800abfe:	6a3b      	ldr	r3, [r7, #32]
 800ac00:	3302      	adds	r3, #2
 800ac02:	781b      	ldrb	r3, [r3, #0]
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800ac04:	2b54      	cmp	r3, #84	; 0x54
 800ac06:	bf0c      	ite	eq
 800ac08:	2301      	moveq	r3, #1
 800ac0a:	2300      	movne	r3, #0
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	461c      	mov	r4, r3
                                    p4[2] == 'T' ? 1 : 0, p4[3] == 'T' ? 1 : 0, (int)p3);
 800ac10:	6a3b      	ldr	r3, [r7, #32]
 800ac12:	3303      	adds	r3, #3
 800ac14:	781b      	ldrb	r3, [r3, #0]
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800ac16:	2b54      	cmp	r3, #84	; 0x54
 800ac18:	bf0c      	ite	eq
 800ac1a:	2301      	moveq	r3, #1
 800ac1c:	2300      	movne	r3, #0
 800ac1e:	b2db      	uxtb	r3, r3
                                    p4[2] == 'T' ? 1 : 0, p4[3] == 'T' ? 1 : 0, (int)p3);
 800ac20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac22:	ee07 2a90 	vmov	s15, r2
        int ret4 = daq_ch_set(&daq, p4[0] == 'T' ? 1 : 0, p4[1] == 'T' ? 1 : 0,
 800ac26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac2a:	9300      	str	r3, [sp, #0]
 800ac2c:	eeb0 0a67 	vmov.f32	s0, s15
 800ac30:	4623      	mov	r3, r4
 800ac32:	4602      	mov	r2, r0
 800ac34:	4819      	ldr	r0, [pc, #100]	; (800ac9c <EM_SCOPE_Set+0x2a8>)
 800ac36:	f7fc fa83 	bl	8007140 <daq_ch_set>
 800ac3a:	64b8      	str	r0, [r7, #72]	; 0x48
        int ret3 = daq_fs_set(&daq, (int)p3);
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac46:	eeb0 0a67 	vmov.f32	s0, s15
 800ac4a:	4814      	ldr	r0, [pc, #80]	; (800ac9c <EM_SCOPE_Set+0x2a8>)
 800ac4c:	f7fc f9dc 	bl	8007008 <daq_fs_set>
 800ac50:	6478      	str	r0, [r7, #68]	; 0x44
        int ret1 = daq_mem_set(&daq, (int)p2);
 800ac52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	4619      	mov	r1, r3
 800ac58:	4810      	ldr	r0, [pc, #64]	; (800ac9c <EM_SCOPE_Set+0x2a8>)
 800ac5a:	f7fb fea1 	bl	80069a0 <daq_mem_set>
 800ac5e:	6438      	str	r0, [r7, #64]	; 0x40
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 800ac60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	2b52      	cmp	r3, #82	; 0x52
 800ac6c:	bf14      	ite	ne
 800ac6e:	2301      	movne	r3, #1
 800ac70:	2300      	moveq	r3, #0
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	461c      	mov	r4, r3
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	781b      	ldrb	r3, [r3, #0]
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 800ac7a:	2b41      	cmp	r3, #65	; 0x41
 800ac7c:	d018      	beq.n	800acb0 <EM_SCOPE_Set+0x2bc>
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	2b4e      	cmp	r3, #78	; 0x4e
 800ac84:	d007      	beq.n	800ac96 <EM_SCOPE_Set+0x2a2>
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2b53      	cmp	r3, #83	; 0x53
 800ac8c:	d101      	bne.n	800ac92 <EM_SCOPE_Set+0x29e>
 800ac8e:	2302      	movs	r3, #2
 800ac90:	e00f      	b.n	800acb2 <EM_SCOPE_Set+0x2be>
 800ac92:	2303      	movs	r3, #3
 800ac94:	e00d      	b.n	800acb2 <EM_SCOPE_Set+0x2be>
 800ac96:	2301      	movs	r3, #1
 800ac98:	e00b      	b.n	800acb2 <EM_SCOPE_Set+0x2be>
 800ac9a:	bf00      	nop
 800ac9c:	20000934 	.word	0x20000934
 800aca0:	2000cd84 	.word	0x2000cd84
 800aca4:	2000cd3c 	.word	0x2000cd3c
 800aca8:	2000cd70 	.word	0x2000cd70
 800acac:	2000cd30 	.word	0x2000cd30
        int ret5 = daq_trig_set(&daq, p5, p6, (p7[0] == 'R' ? RISING : FALLING),
 800acb0:	2300      	movs	r3, #0
 800acb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acb4:	9001      	str	r0, [sp, #4]
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	4623      	mov	r3, r4
 800acba:	4822      	ldr	r0, [pc, #136]	; (800ad44 <EM_SCOPE_Set+0x350>)
 800acbc:	f7fe f99c 	bl	8008ff8 <daq_trig_set>
 800acc0:	63f8      	str	r0, [r7, #60]	; 0x3c

        if (ret1 + ret2 + ret3 + ret4 + ret5 == 0)
 800acc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acc6:	441a      	add	r2, r3
 800acc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acca:	441a      	add	r2, r3
 800accc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acce:	441a      	add	r2, r3
 800acd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd2:	4413      	add	r3, r2
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10f      	bne.n	800acf8 <EM_SCOPE_Set+0x304>
        {
            daq.dis_hold = 0;
 800acd8:	4b1a      	ldr	r3, [pc, #104]	; (800ad44 <EM_SCOPE_Set+0x350>)
 800acda:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800acde:	3335      	adds	r3, #53	; 0x35
 800ace0:	2200      	movs	r2, #0
 800ace2:	701a      	strb	r2, [r3, #0]
            daq_enable(&daq, 1);
 800ace4:	2101      	movs	r1, #1
 800ace6:	4817      	ldr	r0, [pc, #92]	; (800ad44 <EM_SCOPE_Set+0x350>)
 800ace8:	f7fc fbe8 	bl	80074bc <daq_enable>

            SCPI_ResultText(context, SCPI_OK);
 800acec:	4916      	ldr	r1, [pc, #88]	; (800ad48 <EM_SCOPE_Set+0x354>)
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f004 fa8e 	bl	800f210 <SCPI_ResultText>
            return SCPI_RES_OK;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e021      	b.n	800ad3c <EM_SCOPE_Set+0x348>
        }
        else
        {
            daq.mode = VM;
 800acf8:	4b12      	ldr	r3, [pc, #72]	; (800ad44 <EM_SCOPE_Set+0x350>)
 800acfa:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800acfe:	3334      	adds	r3, #52	; 0x34
 800ad00:	2201      	movs	r2, #1
 800ad02:	701a      	strb	r2, [r3, #0]
            daq_mode_set(&daq, SCOPE);  // reload saved settings
 800ad04:	2100      	movs	r1, #0
 800ad06:	480f      	ldr	r0, [pc, #60]	; (800ad44 <EM_SCOPE_Set+0x350>)
 800ad08:	f7fc fcc2 	bl	8007690 <daq_mode_set>
            daq.dis_hold = 0;
 800ad0c:	4b0d      	ldr	r3, [pc, #52]	; (800ad44 <EM_SCOPE_Set+0x350>)
 800ad0e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ad12:	3335      	adds	r3, #53	; 0x35
 800ad14:	2200      	movs	r2, #0
 800ad16:	701a      	strb	r2, [r3, #0]
            daq_enable(&daq, 1);
 800ad18:	2101      	movs	r1, #1
 800ad1a:	480a      	ldr	r0, [pc, #40]	; (800ad44 <EM_SCOPE_Set+0x350>)
 800ad1c:	f7fc fbce 	bl	80074bc <daq_enable>

            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800ad20:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f002 fa51 	bl	800d1cc <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800ad2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2e:	e005      	b.n	800ad3c <EM_SCOPE_Set+0x348>
        }
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800ad30:	4906      	ldr	r1, [pc, #24]	; (800ad4c <EM_SCOPE_Set+0x358>)
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f002 fa4a 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800ad38:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3754      	adds	r7, #84	; 0x54
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd90      	pop	{r4, r7, pc}
 800ad44:	20000934 	.word	0x20000934
 800ad48:	08015a74 	.word	0x08015a74
 800ad4c:	fffffe8c 	.word	0xfffffe8c

0800ad50 <EM_SCOPE_SetQ>:

scpi_result_t EM_SCOPE_SetQ(scpi_t * context)
{
 800ad50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad52:	b0b1      	sub	sp, #196	; 0xc4
 800ad54:	af08      	add	r7, sp, #32
 800ad56:	6078      	str	r0, [r7, #4]
    if (daq.mode == SCOPE)
 800ad58:	4b81      	ldr	r3, [pc, #516]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800ad5a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ad5e:	3334      	adds	r3, #52	; 0x34
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f040 80e7 	bne.w	800af36 <EM_SCOPE_SetQ+0x1e6>
        char freq_s[30];
        char chans_en[5];
        char edge_s[2];
        char mode_s[2];

        sprint_fast(freq_s, "%s", daq.set.fs, 3);
 800ad68:	4b7d      	ldr	r3, [pc, #500]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800ad6a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ad6e:	edd3 7a00 	vldr	s15, [r3]
 800ad72:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ad76:	2203      	movs	r2, #3
 800ad78:	eeb0 0a67 	vmov.f32	s0, s15
 800ad7c:	4979      	ldr	r1, [pc, #484]	; (800af64 <EM_SCOPE_SetQ+0x214>)
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f001 ff9a 	bl	800ccb8 <sprint_fast>
        chans_en[0] = daq.set.ch1_en ? 'T' : 'F';
 800ad84:	4b76      	ldr	r3, [pc, #472]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800ad86:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800ad8a:	33fc      	adds	r3, #252	; 0xfc
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <EM_SCOPE_SetQ+0x46>
 800ad92:	2354      	movs	r3, #84	; 0x54
 800ad94:	e000      	b.n	800ad98 <EM_SCOPE_SetQ+0x48>
 800ad96:	2346      	movs	r3, #70	; 0x46
 800ad98:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        chans_en[1] = daq.set.ch2_en ? 'T' : 'F';
 800ad9c:	4b70      	ldr	r3, [pc, #448]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800ad9e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800ada2:	33fd      	adds	r3, #253	; 0xfd
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <EM_SCOPE_SetQ+0x5e>
 800adaa:	2354      	movs	r3, #84	; 0x54
 800adac:	e000      	b.n	800adb0 <EM_SCOPE_SetQ+0x60>
 800adae:	2346      	movs	r3, #70	; 0x46
 800adb0:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
        chans_en[2] = daq.set.ch3_en ? 'T' : 'F';
 800adb4:	4b6a      	ldr	r3, [pc, #424]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800adb6:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800adba:	33fe      	adds	r3, #254	; 0xfe
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <EM_SCOPE_SetQ+0x76>
 800adc2:	2354      	movs	r3, #84	; 0x54
 800adc4:	e000      	b.n	800adc8 <EM_SCOPE_SetQ+0x78>
 800adc6:	2346      	movs	r3, #70	; 0x46
 800adc8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        chans_en[3] = daq.set.ch4_en ? 'T' : 'F';
 800adcc:	4b64      	ldr	r3, [pc, #400]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800adce:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800add2:	33ff      	adds	r3, #255	; 0xff
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <EM_SCOPE_SetQ+0x8e>
 800adda:	2354      	movs	r3, #84	; 0x54
 800addc:	e000      	b.n	800ade0 <EM_SCOPE_SetQ+0x90>
 800adde:	2346      	movs	r3, #70	; 0x46
 800ade0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        edge_s[0] = daq.trig.set.edge == RISING ? 'R' : 'F';
 800ade4:	4b5e      	ldr	r3, [pc, #376]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800ade6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800adea:	3341      	adds	r3, #65	; 0x41
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d101      	bne.n	800adf6 <EM_SCOPE_SetQ+0xa6>
 800adf2:	2352      	movs	r3, #82	; 0x52
 800adf4:	e000      	b.n	800adf8 <EM_SCOPE_SetQ+0xa8>
 800adf6:	2346      	movs	r3, #70	; 0x46
 800adf8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 800adfc:	4b58      	ldr	r3, [pc, #352]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800adfe:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ae02:	3340      	adds	r3, #64	; 0x40
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d013      	beq.n	800ae32 <EM_SCOPE_SetQ+0xe2>
 800ae0a:	4b55      	ldr	r3, [pc, #340]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800ae0c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ae10:	3340      	adds	r3, #64	; 0x40
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d00a      	beq.n	800ae2e <EM_SCOPE_SetQ+0xde>
            (daq.trig.set.mode == SINGLE ? 'S' : 'D'));
 800ae18:	4b51      	ldr	r3, [pc, #324]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800ae1a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ae1e:	3340      	adds	r3, #64	; 0x40
 800ae20:	781b      	ldrb	r3, [r3, #0]
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d101      	bne.n	800ae2a <EM_SCOPE_SetQ+0xda>
 800ae26:	2353      	movs	r3, #83	; 0x53
 800ae28:	e004      	b.n	800ae34 <EM_SCOPE_SetQ+0xe4>
 800ae2a:	2344      	movs	r3, #68	; 0x44
 800ae2c:	e002      	b.n	800ae34 <EM_SCOPE_SetQ+0xe4>
 800ae2e:	234e      	movs	r3, #78	; 0x4e
 800ae30:	e000      	b.n	800ae34 <EM_SCOPE_SetQ+0xe4>
 800ae32:	2341      	movs	r3, #65	; 0x41
 800ae34:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        chans_en[4] = '\0';
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
        edge_s[1] = '\0';
 800ae3e:	2300      	movs	r3, #0
 800ae40:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
        mode_s[1] = '\0';
 800ae44:	2300      	movs	r3, #0
 800ae46:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

        char maxZ_s[15];
        float max_Z = EM_ADC_MAXZ(daq.smpl_time, daq.set.bits == B12 ? EM_LN2POW14 : EM_LN2POW10);
 800ae4a:	4b45      	ldr	r3, [pc, #276]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800ae4c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ae50:	3328      	adds	r3, #40	; 0x28
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7f5 fb8f 	bl	8000578 <__aeabi_f2d>
 800ae5a:	4b41      	ldr	r3, [pc, #260]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800ae5c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800ae60:	3306      	adds	r3, #6
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	2b0c      	cmp	r3, #12
 800ae66:	d103      	bne.n	800ae70 <EM_SCOPE_SetQ+0x120>
 800ae68:	a439      	add	r4, pc, #228	; (adr r4, 800af50 <EM_SCOPE_SetQ+0x200>)
 800ae6a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ae6e:	e002      	b.n	800ae76 <EM_SCOPE_SetQ+0x126>
 800ae70:	a439      	add	r4, pc, #228	; (adr r4, 800af58 <EM_SCOPE_SetQ+0x208>)
 800ae72:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ae76:	461a      	mov	r2, r3
 800ae78:	4623      	mov	r3, r4
 800ae7a:	f7f5 fcff 	bl	800087c <__aeabi_ddiv>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	460c      	mov	r4, r1
 800ae82:	4618      	mov	r0, r3
 800ae84:	4621      	mov	r1, r4
 800ae86:	f04f 0200 	mov.w	r2, #0
 800ae8a:	4b37      	ldr	r3, [pc, #220]	; (800af68 <EM_SCOPE_SetQ+0x218>)
 800ae8c:	f7f5 fa14 	bl	80002b8 <__aeabi_dsub>
 800ae90:	4603      	mov	r3, r0
 800ae92:	460c      	mov	r4, r1
 800ae94:	4618      	mov	r0, r3
 800ae96:	4621      	mov	r1, r4
 800ae98:	f7f5 febe 	bl	8000c18 <__aeabi_d2f>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        sprint_fast(maxZ_s, "%skOhm", max_Z, 1);
 800aea2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aea6:	2201      	movs	r2, #1
 800aea8:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 800aeac:	492f      	ldr	r1, [pc, #188]	; (800af6c <EM_SCOPE_SetQ+0x21c>)
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f001 ff02 	bl	800ccb8 <sprint_fast>

        int len = sprintf(buff, "\"%d,%d,%s,%s,%d,%d,%s,%s,%d,%s\"", daq.set.bits, daq.set.mem, freq_s, chans_en,
 800aeb4:	4b2a      	ldr	r3, [pc, #168]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800aeb6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800aeba:	3306      	adds	r3, #6
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	461d      	mov	r5, r3
 800aec0:	4b27      	ldr	r3, [pc, #156]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800aec2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800aec6:	3304      	adds	r3, #4
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	461e      	mov	r6, r3
 800aecc:	4b24      	ldr	r3, [pc, #144]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800aece:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800aed2:	3344      	adds	r3, #68	; 0x44
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	4b22      	ldr	r3, [pc, #136]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800aed8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800aedc:	334c      	adds	r3, #76	; 0x4c
 800aede:	6819      	ldr	r1, [r3, #0]
 800aee0:	4b1f      	ldr	r3, [pc, #124]	; (800af60 <EM_SCOPE_SetQ+0x210>)
 800aee2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800aee6:	333c      	adds	r3, #60	; 0x3c
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f107 0408 	add.w	r4, r7, #8
 800aeee:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800aef2:	9007      	str	r0, [sp, #28]
 800aef4:	9306      	str	r3, [sp, #24]
 800aef6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800aefa:	9305      	str	r3, [sp, #20]
 800aefc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800af00:	9304      	str	r3, [sp, #16]
 800af02:	9103      	str	r1, [sp, #12]
 800af04:	9202      	str	r2, [sp, #8]
 800af06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	4633      	mov	r3, r6
 800af14:	462a      	mov	r2, r5
 800af16:	4916      	ldr	r1, [pc, #88]	; (800af70 <EM_SCOPE_SetQ+0x220>)
 800af18:	4620      	mov	r0, r4
 800af1a:	f007 fcc7 	bl	80128ac <siprintf>
 800af1e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                          daq.trig.set.ch, daq.trig.set.val_percent, edge_s, mode_s, daq.trig.set.pretrigger, maxZ_s);

        SCPI_ResultCharacters(context, buff, len);
 800af22:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800af26:	f107 0308 	add.w	r3, r7, #8
 800af2a:	4619      	mov	r1, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f004 f8d5 	bl	800f0dc <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 800af32:	2301      	movs	r3, #1
 800af34:	e005      	b.n	800af42 <EM_SCOPE_SetQ+0x1f2>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800af36:	490f      	ldr	r1, [pc, #60]	; (800af74 <EM_SCOPE_SetQ+0x224>)
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f002 f947 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800af3e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800af42:	4618      	mov	r0, r3
 800af44:	37a4      	adds	r7, #164	; 0xa4
 800af46:	46bd      	mov	sp, r7
 800af48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af4a:	bf00      	nop
 800af4c:	f3af 8000 	nop.w
 800af50:	ff0bb948 	.word	0xff0bb948
 800af54:	40165baf 	.word	0x40165baf
 800af58:	d95672ff 	.word	0xd95672ff
 800af5c:	400ff0b1 	.word	0x400ff0b1
 800af60:	20000934 	.word	0x20000934
 800af64:	08015abc 	.word	0x08015abc
 800af68:	3ff00000 	.word	0x3ff00000
 800af6c:	08015af8 	.word	0x08015af8
 800af70:	08015b00 	.word	0x08015b00
 800af74:	fffffe8c 	.word	0xfffffe8c

0800af78 <EM_LA_ReadQ>:

/************************* [LA Actions] *************************/

scpi_result_t EM_LA_ReadQ(scpi_t * context)
{
 800af78:	b590      	push	{r4, r7, lr}
 800af7a:	b087      	sub	sp, #28
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
    if (daq.mode == LA)
 800af80:	4b58      	ldr	r3, [pc, #352]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800af82:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800af86:	3334      	adds	r3, #52	; 0x34
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	f040 809f 	bne.w	800b0ce <EM_LA_ReadQ+0x156>
    {
        if (daq.trig.ready == 0)
 800af90:	4b54      	ldr	r3, [pc, #336]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800af92:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800af96:	337a      	adds	r3, #122	; 0x7a
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d105      	bne.n	800afaa <EM_LA_ReadQ+0x32>
        {
            SCPI_ResultText(context, EM_RESP_NRDY);
 800af9e:	4952      	ldr	r1, [pc, #328]	; (800b0e8 <EM_LA_ReadQ+0x170>)
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f004 f935 	bl	800f210 <SCPI_ResultText>
            return SCPI_RES_OK;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e097      	b.n	800b0da <EM_LA_ReadQ+0x162>
        }

        if (daq.trig.set.mode == DISABLED)
 800afaa:	4b4e      	ldr	r3, [pc, #312]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800afac:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800afb0:	3340      	adds	r3, #64	; 0x40
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d119      	bne.n	800afec <EM_LA_ReadQ+0x74>
        {
            daq_enable(&daq, 0);
 800afb8:	2100      	movs	r1, #0
 800afba:	484a      	ldr	r0, [pc, #296]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800afbc:	f7fc fa7e 	bl	80074bc <daq_enable>
            daq.trig.pos_frst = EM_DMA_LAST_IDX(daq.buff1.len, EM_DMA_CH_LA, EM_DMA_LA);
 800afc0:	4b48      	ldr	r3, [pc, #288]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800afc2:	88db      	ldrh	r3, [r3, #6]
 800afc4:	461c      	mov	r4, r3
 800afc6:	2106      	movs	r1, #6
 800afc8:	4848      	ldr	r0, [pc, #288]	; (800b0ec <EM_LA_ReadQ+0x174>)
 800afca:	f7ff f80f 	bl	8009fec <LL_DMA_GetDataLength>
 800afce:	4603      	mov	r3, r0
 800afd0:	1ae3      	subs	r3, r4, r3
 800afd2:	461a      	mov	r2, r3
 800afd4:	4b43      	ldr	r3, [pc, #268]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800afd6:	88db      	ldrh	r3, [r3, #6]
 800afd8:	4619      	mov	r1, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	f7fe fff0 	bl	8009fc0 <get_last_circ_idx>
 800afe0:	4602      	mov	r2, r0
 800afe2:	4b40      	ldr	r3, [pc, #256]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800afe4:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800afe8:	3384      	adds	r3, #132	; 0x84
 800afea:	601a      	str	r2, [r3, #0]
        }

        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 800afec:	2300      	movs	r3, #0
 800afee:	617b      	str	r3, [r7, #20]
 800aff0:	4b3c      	ldr	r3, [pc, #240]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800aff2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800aff6:	3384      	adds	r3, #132	; 0x84
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	613b      	str	r3, [r7, #16]
 800affc:	e03a      	b.n	800b074 <EM_LA_ReadQ+0xfc>
        {
            if (i >= daq.buff1.len)
 800affe:	4b39      	ldr	r3, [pc, #228]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800b000:	88db      	ldrh	r3, [r3, #6]
 800b002:	461a      	mov	r2, r3
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	4293      	cmp	r3, r2
 800b008:	db01      	blt.n	800b00e <EM_LA_ReadQ+0x96>
                i = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	613b      	str	r3, [r7, #16]

            uint8_t val = (uint8_t)(((uint8_t*)daq.buff1.data)[i]);
 800b00e:	4b35      	ldr	r3, [pc, #212]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	4413      	add	r3, r2
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	73fb      	strb	r3, [r7, #15]
            ((uint8_t*)daq.buff_out.data)[k] = (((val & (1 << EM_GPIO_LA_CH1_NUM)) ? 1 : 0) << 1) |
 800b01a:	7bfb      	ldrb	r3, [r7, #15]
 800b01c:	005b      	lsls	r3, r3, #1
 800b01e:	b25b      	sxtb	r3, r3
 800b020:	f003 0302 	and.w	r3, r3, #2
 800b024:	b25a      	sxtb	r2, r3
                                               (((val & (1 << EM_GPIO_LA_CH2_NUM)) ? 1 : 0) << 2) |
 800b026:	7bfb      	ldrb	r3, [r7, #15]
 800b028:	105b      	asrs	r3, r3, #1
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	b25b      	sxtb	r3, r3
 800b02e:	f003 0304 	and.w	r3, r3, #4
 800b032:	b25b      	sxtb	r3, r3
            ((uint8_t*)daq.buff_out.data)[k] = (((val & (1 << EM_GPIO_LA_CH1_NUM)) ? 1 : 0) << 1) |
 800b034:	4313      	orrs	r3, r2
 800b036:	b25a      	sxtb	r2, r3
                                               (((val & (1 << EM_GPIO_LA_CH3_NUM)) ? 1 : 0) << 3) |
 800b038:	7bfb      	ldrb	r3, [r7, #15]
 800b03a:	109b      	asrs	r3, r3, #2
 800b03c:	00db      	lsls	r3, r3, #3
 800b03e:	b25b      	sxtb	r3, r3
 800b040:	f003 0308 	and.w	r3, r3, #8
 800b044:	b25b      	sxtb	r3, r3
                                               (((val & (1 << EM_GPIO_LA_CH2_NUM)) ? 1 : 0) << 2) |
 800b046:	4313      	orrs	r3, r2
 800b048:	b25a      	sxtb	r2, r3
                                               (((val & (1 << EM_GPIO_LA_CH4_NUM)) ? 1 : 0) << 4);
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
 800b04c:	10db      	asrs	r3, r3, #3
 800b04e:	011b      	lsls	r3, r3, #4
 800b050:	b25b      	sxtb	r3, r3
 800b052:	f003 0310 	and.w	r3, r3, #16
 800b056:	b25b      	sxtb	r3, r3
                                               (((val & (1 << EM_GPIO_LA_CH3_NUM)) ? 1 : 0) << 3) |
 800b058:	4313      	orrs	r3, r2
 800b05a:	b259      	sxtb	r1, r3
            ((uint8_t*)daq.buff_out.data)[k] = (((val & (1 << EM_GPIO_LA_CH1_NUM)) ? 1 : 0) << 1) |
 800b05c:	4b21      	ldr	r3, [pc, #132]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800b05e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	4413      	add	r3, r2
                                               (((val & (1 << EM_GPIO_LA_CH3_NUM)) ? 1 : 0) << 3) |
 800b064:	b2ca      	uxtb	r2, r1
            ((uint8_t*)daq.buff_out.data)[k] = (((val & (1 << EM_GPIO_LA_CH1_NUM)) ? 1 : 0) << 1) |
 800b066:	701a      	strb	r2, [r3, #0]
        for (int k = 0, i = daq.trig.pos_frst; k < daq.buff1.len; k++, i++) // TODO compress 4 + 4
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	3301      	adds	r3, #1
 800b06c:	617b      	str	r3, [r7, #20]
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	3301      	adds	r3, #1
 800b072:	613b      	str	r3, [r7, #16]
 800b074:	4b1b      	ldr	r3, [pc, #108]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800b076:	88db      	ldrh	r3, [r3, #6]
 800b078:	461a      	mov	r2, r3
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	4293      	cmp	r3, r2
 800b07e:	dbbe      	blt.n	800affe <EM_LA_ReadQ+0x86>
        }

        daq.trig.pretrig_cntr = 0;
 800b080:	4b18      	ldr	r3, [pc, #96]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800b082:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b086:	3398      	adds	r3, #152	; 0x98
 800b088:	2200      	movs	r2, #0
 800b08a:	601a      	str	r2, [r3, #0]
        daq.trig.ready = 0;
 800b08c:	4b15      	ldr	r3, [pc, #84]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800b08e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b092:	337a      	adds	r3, #122	; 0x7a
 800b094:	2200      	movs	r2, #0
 800b096:	701a      	strb	r2, [r3, #0]
        daq.trig.ready_last = 0;
 800b098:	4b12      	ldr	r3, [pc, #72]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800b09a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b09e:	337b      	adds	r3, #123	; 0x7b
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	701a      	strb	r2, [r3, #0]

        if (daq.trig.set.mode != SINGLE)
 800b0a4:	4b0f      	ldr	r3, [pc, #60]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800b0a6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b0aa:	3340      	adds	r3, #64	; 0x40
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	d003      	beq.n	800b0ba <EM_LA_ReadQ+0x142>
        {
            daq_enable(&daq, 1);
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	480b      	ldr	r0, [pc, #44]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800b0b6:	f7fc fa01 	bl	80074bc <daq_enable>
        }

        SCPI_ResultArbitraryBlock(context, daq.buff_out.data, daq.buff_out.len);
 800b0ba:	4b0a      	ldr	r3, [pc, #40]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800b0bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b0be:	4b09      	ldr	r3, [pc, #36]	; (800b0e4 <EM_LA_ReadQ+0x16c>)
 800b0c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f004 fa7f 	bl	800f5c8 <SCPI_ResultArbitraryBlock>
        return SCPI_RES_OK;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e005      	b.n	800b0da <EM_LA_ReadQ+0x162>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800b0ce:	4908      	ldr	r1, [pc, #32]	; (800b0f0 <EM_LA_ReadQ+0x178>)
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f002 f87b 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b0d6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd90      	pop	{r4, r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000934 	.word	0x20000934
 800b0e8:	08015ad0 	.word	0x08015ad0
 800b0ec:	40020000 	.word	0x40020000
 800b0f0:	fffffe8c 	.word	0xfffffe8c

0800b0f4 <EM_LA_Set>:

scpi_result_t EM_LA_Set(scpi_t * context)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b092      	sub	sp, #72	; 0x48
 800b0f8:	af02      	add	r7, sp, #8
 800b0fa:	6078      	str	r0, [r7, #4]
    if (daq.mode == LA)
 800b0fc:	4b92      	ldr	r3, [pc, #584]	; (800b348 <EM_LA_Set+0x254>)
 800b0fe:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b102:	3334      	adds	r3, #52	; 0x34
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	2b02      	cmp	r3, #2
 800b108:	f040 8113 	bne.w	800b332 <EM_LA_Set+0x23e>
        uint32_t p2, p3, p5, p9;
        const char* p7;
        const char* p8;
        size_t p7l, p8l;

        if (!SCPI_ParamUInt32(context, &p2, TRUE) ||
 800b10c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b110:	2201      	movs	r2, #1
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f004 fd29 	bl	800fb6c <SCPI_ParamUInt32>
 800b11a:	4603      	mov	r3, r0
 800b11c:	f083 0301 	eor.w	r3, r3, #1
 800b120:	b2db      	uxtb	r3, r3
 800b122:	2b00      	cmp	r3, #0
 800b124:	d142      	bne.n	800b1ac <EM_LA_Set+0xb8>
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800b126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b12a:	2201      	movs	r2, #1
 800b12c:	4619      	mov	r1, r3
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f004 fd1c 	bl	800fb6c <SCPI_ParamUInt32>
 800b134:	4603      	mov	r3, r0
 800b136:	f083 0301 	eor.w	r3, r3, #1
 800b13a:	b2db      	uxtb	r3, r3
        if (!SCPI_ParamUInt32(context, &p2, TRUE) ||
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d135      	bne.n	800b1ac <EM_LA_Set+0xb8>
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800b140:	f107 0320 	add.w	r3, r7, #32
 800b144:	2201      	movs	r2, #1
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f004 fd0f 	bl	800fb6c <SCPI_ParamUInt32>
 800b14e:	4603      	mov	r3, r0
 800b150:	f083 0301 	eor.w	r3, r3, #1
 800b154:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p3, TRUE) ||
 800b156:	2b00      	cmp	r3, #0
 800b158:	d128      	bne.n	800b1ac <EM_LA_Set+0xb8>
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800b15a:	f107 0210 	add.w	r2, r7, #16
 800b15e:	f107 0118 	add.w	r1, r7, #24
 800b162:	2301      	movs	r3, #1
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f004 fd13 	bl	800fb90 <SCPI_ParamCharacters>
 800b16a:	4603      	mov	r3, r0
 800b16c:	f083 0301 	eor.w	r3, r3, #1
 800b170:	b2db      	uxtb	r3, r3
            !SCPI_ParamUInt32(context, &p5, TRUE) ||
 800b172:	2b00      	cmp	r3, #0
 800b174:	d11a      	bne.n	800b1ac <EM_LA_Set+0xb8>
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
 800b176:	f107 020c 	add.w	r2, r7, #12
 800b17a:	f107 0114 	add.w	r1, r7, #20
 800b17e:	2301      	movs	r3, #1
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f004 fd05 	bl	800fb90 <SCPI_ParamCharacters>
 800b186:	4603      	mov	r3, r0
 800b188:	f083 0301 	eor.w	r3, r3, #1
 800b18c:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p7, &p7l, TRUE) ||
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10c      	bne.n	800b1ac <EM_LA_Set+0xb8>
            !SCPI_ParamUInt32(context, &p9, TRUE))
 800b192:	f107 031c 	add.w	r3, r7, #28
 800b196:	2201      	movs	r2, #1
 800b198:	4619      	mov	r1, r3
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f004 fce6 	bl	800fb6c <SCPI_ParamUInt32>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	f083 0301 	eor.w	r3, r3, #1
 800b1a6:	b2db      	uxtb	r3, r3
            !SCPI_ParamCharacters(context, &p8,&p8l, TRUE) ||
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <EM_LA_Set+0xbe>
        {
            return SCPI_RES_ERR;
 800b1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b0:	e0c5      	b.n	800b33e <EM_LA_Set+0x24a>
        }

        if (p7l != 1 || p8l != 1 ||
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d11a      	bne.n	800b1ee <EM_LA_Set+0xfa>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d117      	bne.n	800b1ee <EM_LA_Set+0xfa>
            (p7[0] != 'R' && p7[0] != 'F') ||
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
        if (p7l != 1 || p8l != 1 ||
 800b1c2:	2b52      	cmp	r3, #82	; 0x52
 800b1c4:	d003      	beq.n	800b1ce <EM_LA_Set+0xda>
            (p7[0] != 'R' && p7[0] != 'F') ||
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b46      	cmp	r3, #70	; 0x46
 800b1cc:	d10f      	bne.n	800b1ee <EM_LA_Set+0xfa>
            (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
            (p7[0] != 'R' && p7[0] != 'F') ||
 800b1d2:	2b41      	cmp	r3, #65	; 0x41
 800b1d4:	d013      	beq.n	800b1fe <EM_LA_Set+0x10a>
            (p8[0] != 'A' && p8[0] != 'N' && p8[0] != 'S' && p8[0] != 'D'))
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	2b4e      	cmp	r3, #78	; 0x4e
 800b1dc:	d00f      	beq.n	800b1fe <EM_LA_Set+0x10a>
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	2b53      	cmp	r3, #83	; 0x53
 800b1e4:	d00b      	beq.n	800b1fe <EM_LA_Set+0x10a>
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b44      	cmp	r3, #68	; 0x44
 800b1ec:	d007      	beq.n	800b1fe <EM_LA_Set+0x10a>
        {
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800b1ee:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f001 ffea 	bl	800d1cc <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800b1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fc:	e09f      	b.n	800b33e <EM_LA_Set+0x24a>
        }

        daq_settings_save(&daq.set, &daq.trig.set, &daq.save_l, &daq.trig.save_l);
 800b1fe:	4b53      	ldr	r3, [pc, #332]	; (800b34c <EM_LA_Set+0x258>)
 800b200:	4a53      	ldr	r2, [pc, #332]	; (800b350 <EM_LA_Set+0x25c>)
 800b202:	4954      	ldr	r1, [pc, #336]	; (800b354 <EM_LA_Set+0x260>)
 800b204:	4854      	ldr	r0, [pc, #336]	; (800b358 <EM_LA_Set+0x264>)
 800b206:	f7fb fade 	bl	80067c6 <daq_settings_save>
        daq_enable(&daq, 0);
 800b20a:	2100      	movs	r1, #0
 800b20c:	484e      	ldr	r0, [pc, #312]	; (800b348 <EM_LA_Set+0x254>)
 800b20e:	f7fc f955 	bl	80074bc <daq_enable>
        daq_reset(&daq);
 800b212:	484d      	ldr	r0, [pc, #308]	; (800b348 <EM_LA_Set+0x254>)
 800b214:	f7fc f8e4 	bl	80073e0 <daq_reset>
        daq.dis_hold = 1;
 800b218:	4b4b      	ldr	r3, [pc, #300]	; (800b348 <EM_LA_Set+0x254>)
 800b21a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b21e:	3335      	adds	r3, #53	; 0x35
 800b220:	2201      	movs	r2, #1
 800b222:	701a      	strb	r2, [r3, #0]

        daq_mem_set(&daq, 3); // safety guard
 800b224:	2103      	movs	r1, #3
 800b226:	4848      	ldr	r0, [pc, #288]	; (800b348 <EM_LA_Set+0x254>)
 800b228:	f7fb fbba 	bl	80069a0 <daq_mem_set>
        int ret2 = daq_bit_set(&daq, B1);
 800b22c:	2101      	movs	r1, #1
 800b22e:	4846      	ldr	r0, [pc, #280]	; (800b348 <EM_LA_Set+0x254>)
 800b230:	f7fb fe6a 	bl	8006f08 <daq_bit_set>
 800b234:	63f8      	str	r0, [r7, #60]	; 0x3c
        int ret4 = daq_ch_set(&daq, 1, 1, 1, 1, (int)p3);
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	ee07 3a90 	vmov	s15, r3
 800b23c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b240:	2301      	movs	r3, #1
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	eeb0 0a67 	vmov.f32	s0, s15
 800b248:	2301      	movs	r3, #1
 800b24a:	2201      	movs	r2, #1
 800b24c:	2101      	movs	r1, #1
 800b24e:	483e      	ldr	r0, [pc, #248]	; (800b348 <EM_LA_Set+0x254>)
 800b250:	f7fb ff76 	bl	8007140 <daq_ch_set>
 800b254:	63b8      	str	r0, [r7, #56]	; 0x38
        int ret3 = daq_fs_set(&daq, (int)p3);
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	ee07 3a90 	vmov	s15, r3
 800b25c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b260:	eeb0 0a67 	vmov.f32	s0, s15
 800b264:	4838      	ldr	r0, [pc, #224]	; (800b348 <EM_LA_Set+0x254>)
 800b266:	f7fb fecf 	bl	8007008 <daq_fs_set>
 800b26a:	6378      	str	r0, [r7, #52]	; 0x34
        int ret1 = daq_mem_set(&daq, (int)p2);
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	b29b      	uxth	r3, r3
 800b270:	4619      	mov	r1, r3
 800b272:	4835      	ldr	r0, [pc, #212]	; (800b348 <EM_LA_Set+0x254>)
 800b274:	f7fb fb94 	bl	80069a0 <daq_mem_set>
 800b278:	6338      	str	r0, [r7, #48]	; 0x30
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800b27a:	6a39      	ldr	r1, [r7, #32]
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	2b52      	cmp	r3, #82	; 0x52
 800b282:	bf14      	ite	ne
 800b284:	2301      	movne	r3, #1
 800b286:	2300      	moveq	r3, #0
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	4618      	mov	r0, r3
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	781b      	ldrb	r3, [r3, #0]
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800b290:	2b41      	cmp	r3, #65	; 0x41
 800b292:	d00d      	beq.n	800b2b0 <EM_LA_Set+0x1bc>
            (p8[0] == 'A' ? AUTO : (p8[0] == 'N' ? NORMAL : (p8[0] == 'S' ? SINGLE : DISABLED))), (int)p9);
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	2b4e      	cmp	r3, #78	; 0x4e
 800b29a:	d007      	beq.n	800b2ac <EM_LA_Set+0x1b8>
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	2b53      	cmp	r3, #83	; 0x53
 800b2a2:	d101      	bne.n	800b2a8 <EM_LA_Set+0x1b4>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	e004      	b.n	800b2b2 <EM_LA_Set+0x1be>
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	e002      	b.n	800b2b2 <EM_LA_Set+0x1be>
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e000      	b.n	800b2b2 <EM_LA_Set+0x1be>
        int ret5 = daq_trig_set(&daq, p5, 0, (p7[0] == 'R' ? RISING : FALLING),
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	69fa      	ldr	r2, [r7, #28]
 800b2b4:	9201      	str	r2, [sp, #4]
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	4822      	ldr	r0, [pc, #136]	; (800b348 <EM_LA_Set+0x254>)
 800b2be:	f7fd fe9b 	bl	8008ff8 <daq_trig_set>
 800b2c2:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (ret1 + ret2 + ret3 + ret4 + ret5 == 0)
 800b2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c8:	441a      	add	r2, r3
 800b2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2cc:	441a      	add	r2, r3
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d0:	441a      	add	r2, r3
 800b2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d4:	4413      	add	r3, r2
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d10f      	bne.n	800b2fa <EM_LA_Set+0x206>
        {
            daq.dis_hold = 0;
 800b2da:	4b1b      	ldr	r3, [pc, #108]	; (800b348 <EM_LA_Set+0x254>)
 800b2dc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b2e0:	3335      	adds	r3, #53	; 0x35
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	701a      	strb	r2, [r3, #0]
            daq_enable(&daq, 1);
 800b2e6:	2101      	movs	r1, #1
 800b2e8:	4817      	ldr	r0, [pc, #92]	; (800b348 <EM_LA_Set+0x254>)
 800b2ea:	f7fc f8e7 	bl	80074bc <daq_enable>

            SCPI_ResultText(context, SCPI_OK);
 800b2ee:	491b      	ldr	r1, [pc, #108]	; (800b35c <EM_LA_Set+0x268>)
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f003 ff8d 	bl	800f210 <SCPI_ResultText>
            return SCPI_RES_OK;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e021      	b.n	800b33e <EM_LA_Set+0x24a>
        }
        else
        {
            daq.mode = VM;
 800b2fa:	4b13      	ldr	r3, [pc, #76]	; (800b348 <EM_LA_Set+0x254>)
 800b2fc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b300:	3334      	adds	r3, #52	; 0x34
 800b302:	2201      	movs	r2, #1
 800b304:	701a      	strb	r2, [r3, #0]
            daq_mode_set(&daq, LA); // reload saved settings
 800b306:	2102      	movs	r1, #2
 800b308:	480f      	ldr	r0, [pc, #60]	; (800b348 <EM_LA_Set+0x254>)
 800b30a:	f7fc f9c1 	bl	8007690 <daq_mode_set>
            daq.dis_hold = 0;
 800b30e:	4b0e      	ldr	r3, [pc, #56]	; (800b348 <EM_LA_Set+0x254>)
 800b310:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b314:	3335      	adds	r3, #53	; 0x35
 800b316:	2200      	movs	r2, #0
 800b318:	701a      	strb	r2, [r3, #0]
            daq_enable(&daq, 1);
 800b31a:	2101      	movs	r1, #1
 800b31c:	480a      	ldr	r0, [pc, #40]	; (800b348 <EM_LA_Set+0x254>)
 800b31e:	f7fc f8cd 	bl	80074bc <daq_enable>

            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800b322:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f001 ff50 	bl	800d1cc <SCPI_ErrorPush>
            return SCPI_RES_ERR;
 800b32c:	f04f 33ff 	mov.w	r3, #4294967295
 800b330:	e005      	b.n	800b33e <EM_LA_Set+0x24a>
        }
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800b332:	490b      	ldr	r1, [pc, #44]	; (800b360 <EM_LA_Set+0x26c>)
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f001 ff49 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b33a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3740      	adds	r7, #64	; 0x40
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20000934 	.word	0x20000934
 800b34c:	2000cd98 	.word	0x2000cd98
 800b350:	2000cd48 	.word	0x2000cd48
 800b354:	2000cd70 	.word	0x2000cd70
 800b358:	2000cd30 	.word	0x2000cd30
 800b35c:	08015a74 	.word	0x08015a74
 800b360:	fffffe8c 	.word	0xfffffe8c

0800b364 <EM_LA_SetQ>:

scpi_result_t EM_LA_SetQ(scpi_t * context)
{
 800b364:	b590      	push	{r4, r7, lr}
 800b366:	b0a7      	sub	sp, #156	; 0x9c
 800b368:	af04      	add	r7, sp, #16
 800b36a:	6078      	str	r0, [r7, #4]
    if (daq.mode == LA)
 800b36c:	4b3d      	ldr	r3, [pc, #244]	; (800b464 <EM_LA_SetQ+0x100>)
 800b36e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b372:	3334      	adds	r3, #52	; 0x34
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	2b02      	cmp	r3, #2
 800b378:	d16a      	bne.n	800b450 <EM_LA_SetQ+0xec>
        char buff[80];
        char freq_s[30];
        char edge_s[2];
        char mode_s[2];

        sprint_fast(freq_s, "%s", daq.set.fs, 3);
 800b37a:	4b3a      	ldr	r3, [pc, #232]	; (800b464 <EM_LA_SetQ+0x100>)
 800b37c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b380:	edd3 7a00 	vldr	s15, [r3]
 800b384:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b388:	2203      	movs	r2, #3
 800b38a:	eeb0 0a67 	vmov.f32	s0, s15
 800b38e:	4936      	ldr	r1, [pc, #216]	; (800b468 <EM_LA_SetQ+0x104>)
 800b390:	4618      	mov	r0, r3
 800b392:	f001 fc91 	bl	800ccb8 <sprint_fast>
        edge_s[0] = daq.trig.set.edge == RISING ? 'R' : 'F';
 800b396:	4b33      	ldr	r3, [pc, #204]	; (800b464 <EM_LA_SetQ+0x100>)
 800b398:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b39c:	3341      	adds	r3, #65	; 0x41
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <EM_LA_SetQ+0x44>
 800b3a4:	2352      	movs	r3, #82	; 0x52
 800b3a6:	e000      	b.n	800b3aa <EM_LA_SetQ+0x46>
 800b3a8:	2346      	movs	r3, #70	; 0x46
 800b3aa:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 800b3ae:	4b2d      	ldr	r3, [pc, #180]	; (800b464 <EM_LA_SetQ+0x100>)
 800b3b0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b3b4:	3340      	adds	r3, #64	; 0x40
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d013      	beq.n	800b3e4 <EM_LA_SetQ+0x80>
 800b3bc:	4b29      	ldr	r3, [pc, #164]	; (800b464 <EM_LA_SetQ+0x100>)
 800b3be:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b3c2:	3340      	adds	r3, #64	; 0x40
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d00a      	beq.n	800b3e0 <EM_LA_SetQ+0x7c>
            (daq.trig.set.mode == SINGLE ? 'S' : 'D'));
 800b3ca:	4b26      	ldr	r3, [pc, #152]	; (800b464 <EM_LA_SetQ+0x100>)
 800b3cc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b3d0:	3340      	adds	r3, #64	; 0x40
 800b3d2:	781b      	ldrb	r3, [r3, #0]
        mode_s[0] = daq.trig.set.mode == AUTO ? 'A' : (daq.trig.set.mode == NORMAL ? 'N' :
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	d101      	bne.n	800b3dc <EM_LA_SetQ+0x78>
 800b3d8:	2353      	movs	r3, #83	; 0x53
 800b3da:	e004      	b.n	800b3e6 <EM_LA_SetQ+0x82>
 800b3dc:	2344      	movs	r3, #68	; 0x44
 800b3de:	e002      	b.n	800b3e6 <EM_LA_SetQ+0x82>
 800b3e0:	234e      	movs	r3, #78	; 0x4e
 800b3e2:	e000      	b.n	800b3e6 <EM_LA_SetQ+0x82>
 800b3e4:	2341      	movs	r3, #65	; 0x41
 800b3e6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        edge_s[1] = '\0';
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
        mode_s[1] = '\0';
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        int len = sprintf(buff, "\"%d,%s,%d,%s,%s,%d\"", daq.set.mem, freq_s,
 800b3f6:	4b1b      	ldr	r3, [pc, #108]	; (800b464 <EM_LA_SetQ+0x100>)
 800b3f8:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	461c      	mov	r4, r3
 800b402:	4b18      	ldr	r3, [pc, #96]	; (800b464 <EM_LA_SetQ+0x100>)
 800b404:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b408:	3344      	adds	r3, #68	; 0x44
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	4b15      	ldr	r3, [pc, #84]	; (800b464 <EM_LA_SetQ+0x100>)
 800b40e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b412:	333c      	adds	r3, #60	; 0x3c
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800b41a:	f107 000c 	add.w	r0, r7, #12
 800b41e:	9303      	str	r3, [sp, #12]
 800b420:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b424:	9302      	str	r3, [sp, #8]
 800b426:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b42a:	9301      	str	r3, [sp, #4]
 800b42c:	9200      	str	r2, [sp, #0]
 800b42e:	460b      	mov	r3, r1
 800b430:	4622      	mov	r2, r4
 800b432:	490e      	ldr	r1, [pc, #56]	; (800b46c <EM_LA_SetQ+0x108>)
 800b434:	f007 fa3a 	bl	80128ac <siprintf>
 800b438:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                          daq.trig.set.ch, edge_s, mode_s, daq.trig.set.pretrigger);

        SCPI_ResultCharacters(context, buff, len);
 800b43c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b440:	f107 030c 	add.w	r3, r7, #12
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f003 fe48 	bl	800f0dc <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e005      	b.n	800b45c <EM_LA_SetQ+0xf8>
    }
    else
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800b450:	4907      	ldr	r1, [pc, #28]	; (800b470 <EM_LA_SetQ+0x10c>)
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f001 feba 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	378c      	adds	r7, #140	; 0x8c
 800b460:	46bd      	mov	sp, r7
 800b462:	bd90      	pop	{r4, r7, pc}
 800b464:	20000934 	.word	0x20000934
 800b468:	08015abc 	.word	0x08015abc
 800b46c:	08015b20 	.word	0x08015b20
 800b470:	fffffe8c 	.word	0xfffffe8c

0800b474 <EM_CNTR_Enable>:

/************************* [CNTR Actions] *************************/

scpi_result_t EM_CNTR_Enable(scpi_t * context)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
    uint32_t p1;

    if (!SCPI_ParamUInt32(context, &p1, TRUE))
 800b47c:	f107 030c 	add.w	r3, r7, #12
 800b480:	2201      	movs	r2, #1
 800b482:	4619      	mov	r1, r3
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f004 fb71 	bl	800fb6c <SCPI_ParamUInt32>
 800b48a:	4603      	mov	r3, r0
 800b48c:	f083 0301 	eor.w	r3, r3, #1
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <EM_CNTR_Enable+0x28>
    {
        return SCPI_RES_ERR;
 800b496:	f04f 33ff 	mov.w	r3, #4294967295
 800b49a:	e015      	b.n	800b4c8 <EM_CNTR_Enable+0x54>
    }

    if (p1 < 0 || p1 > 1)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d907      	bls.n	800b4b2 <EM_CNTR_Enable+0x3e>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800b4a2:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f001 fe90 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b0:	e00a      	b.n	800b4c8 <EM_CNTR_Enable+0x54>
    }

    cntr_enable(&cntr, p1);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	4805      	ldr	r0, [pc, #20]	; (800b4d0 <EM_CNTR_Enable+0x5c>)
 800b4ba:	f7fa fa59 	bl	8005970 <cntr_enable>

    SCPI_ResultText(context, SCPI_OK);
 800b4be:	4905      	ldr	r1, [pc, #20]	; (800b4d4 <EM_CNTR_Enable+0x60>)
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f003 fea5 	bl	800f210 <SCPI_ResultText>
    return SCPI_RES_OK;
 800b4c6:	2301      	movs	r3, #1
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	20000750 	.word	0x20000750
 800b4d4:	08015a74 	.word	0x08015a74

0800b4d8 <EM_CNTR_ReadQ>:

scpi_result_t EM_CNTR_ReadQ(scpi_t * context)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b0a8      	sub	sp, #160	; 0xa0
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
    if (!cntr.enabled)
 800b4e0:	4b61      	ldr	r3, [pc, #388]	; (800b668 <EM_CNTR_ReadQ+0x190>)
 800b4e2:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d107      	bne.n	800b4fa <EM_CNTR_ReadQ+0x22>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_CNTR_NOT_ENABLED);
 800b4ea:	f46f 71b9 	mvn.w	r1, #370	; 0x172
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f001 fe6c 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f8:	e0ab      	b.n	800b652 <EM_CNTR_ReadQ+0x17a>
    }

    float f = cntr.freq;
 800b4fa:	4b5b      	ldr	r3, [pc, #364]	; (800b668 <EM_CNTR_ReadQ+0x190>)
 800b4fc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800b500:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    if (f > -1)
 800b504:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b508:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b50c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b514:	f340 8096 	ble.w	800b644 <EM_CNTR_ReadQ+0x16c>
    {
        char f_s[20];
        char T_s[20];

        float T = 1.0 / f;
 800b518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b51c:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800b520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b524:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

        if (f < 1000)
 800b528:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b52c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800b66c <EM_CNTR_ReadQ+0x194>
 800b530:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b538:	d509      	bpl.n	800b54e <EM_CNTR_ReadQ+0x76>
            sprint_fast(f_s, "%s Hz", f, 3);
 800b53a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b53e:	2203      	movs	r2, #3
 800b540:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 800b544:	494a      	ldr	r1, [pc, #296]	; (800b670 <EM_CNTR_ReadQ+0x198>)
 800b546:	4618      	mov	r0, r3
 800b548:	f001 fbb6 	bl	800ccb8 <sprint_fast>
 800b54c:	e027      	b.n	800b59e <EM_CNTR_ReadQ+0xc6>
        else if (f < 1000000)
 800b54e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b552:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b674 <EM_CNTR_ReadQ+0x19c>
 800b556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b55e:	d50f      	bpl.n	800b580 <EM_CNTR_ReadQ+0xa8>
            sprint_fast(f_s, "%s kHz", f / 1000.0, 3);
 800b560:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b564:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800b66c <EM_CNTR_ReadQ+0x194>
 800b568:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b56c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b570:	2203      	movs	r2, #3
 800b572:	eeb0 0a66 	vmov.f32	s0, s13
 800b576:	4940      	ldr	r1, [pc, #256]	; (800b678 <EM_CNTR_ReadQ+0x1a0>)
 800b578:	4618      	mov	r0, r3
 800b57a:	f001 fb9d 	bl	800ccb8 <sprint_fast>
 800b57e:	e00e      	b.n	800b59e <EM_CNTR_ReadQ+0xc6>
        else //if (f < 1000000000)
            sprint_fast(f_s, "%s MHz", f / 1000000.0, 3);
 800b580:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b584:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800b674 <EM_CNTR_ReadQ+0x19c>
 800b588:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b58c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b590:	2203      	movs	r2, #3
 800b592:	eeb0 0a66 	vmov.f32	s0, s13
 800b596:	4939      	ldr	r1, [pc, #228]	; (800b67c <EM_CNTR_ReadQ+0x1a4>)
 800b598:	4618      	mov	r0, r3
 800b59a:	f001 fb8d 	bl	800ccb8 <sprint_fast>

        if (T >= 1)
 800b59e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b5a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ae:	db09      	blt.n	800b5c4 <EM_CNTR_ReadQ+0xec>
            sprint_fast(T_s, "%s s", T, 3);
 800b5b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b5b4:	2203      	movs	r2, #3
 800b5b6:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800b5ba:	4931      	ldr	r1, [pc, #196]	; (800b680 <EM_CNTR_ReadQ+0x1a8>)
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f001 fb7b 	bl	800ccb8 <sprint_fast>
 800b5c2:	e02a      	b.n	800b61a <EM_CNTR_ReadQ+0x142>
        else if (T >= 0.001)
 800b5c4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800b5c8:	f7f4 ffd6 	bl	8000578 <__aeabi_f2d>
 800b5cc:	a324      	add	r3, pc, #144	; (adr r3, 800b660 <EM_CNTR_ReadQ+0x188>)
 800b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d2:	f7f5 faaf 	bl	8000b34 <__aeabi_dcmpge>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00f      	beq.n	800b5fc <EM_CNTR_ReadQ+0x124>
            sprint_fast(T_s, "%s ms", T * 1000.0, 3);
 800b5dc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b5e0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800b66c <EM_CNTR_ReadQ+0x194>
 800b5e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b5ec:	2203      	movs	r2, #3
 800b5ee:	eeb0 0a67 	vmov.f32	s0, s15
 800b5f2:	4924      	ldr	r1, [pc, #144]	; (800b684 <EM_CNTR_ReadQ+0x1ac>)
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f001 fb5f 	bl	800ccb8 <sprint_fast>
 800b5fa:	e00e      	b.n	800b61a <EM_CNTR_ReadQ+0x142>
        else //if (T >= 0.000001)
            sprint_fast(T_s, "%s us", T * 1000000.0, 3);
 800b5fc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b600:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800b674 <EM_CNTR_ReadQ+0x19c>
 800b604:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b608:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b60c:	2203      	movs	r2, #3
 800b60e:	eeb0 0a67 	vmov.f32	s0, s15
 800b612:	491d      	ldr	r1, [pc, #116]	; (800b688 <EM_CNTR_ReadQ+0x1b0>)
 800b614:	4618      	mov	r0, r3
 800b616:	f001 fb4f 	bl	800ccb8 <sprint_fast>

        char buff[100];
        int len = sprintf(buff, "%s,%s", f_s, T_s);
 800b61a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b61e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800b622:	f107 0008 	add.w	r0, r7, #8
 800b626:	4919      	ldr	r1, [pc, #100]	; (800b68c <EM_CNTR_ReadQ+0x1b4>)
 800b628:	f007 f940 	bl	80128ac <siprintf>
 800b62c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

        SCPI_ResultCharacters(context, buff, len);
 800b630:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b634:	f107 0308 	add.w	r3, r7, #8
 800b638:	4619      	mov	r1, r3
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f003 fd4e 	bl	800f0dc <SCPI_ResultCharacters>
        return SCPI_RES_OK;
 800b640:	2301      	movs	r3, #1
 800b642:	e006      	b.n	800b652 <EM_CNTR_ReadQ+0x17a>
    }
    else // if (f == -1)
    {
        SCPI_ErrorPush(context, SCPI_ERROR_TIME_OUT);
 800b644:	f46f 71b6 	mvn.w	r1, #364	; 0x16c
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f001 fdbf 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b64e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800b652:	4618      	mov	r0, r3
 800b654:	37a0      	adds	r7, #160	; 0xa0
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	f3af 8000 	nop.w
 800b660:	d2f1a9fc 	.word	0xd2f1a9fc
 800b664:	3f50624d 	.word	0x3f50624d
 800b668:	20000750 	.word	0x20000750
 800b66c:	447a0000 	.word	0x447a0000
 800b670:	08015b34 	.word	0x08015b34
 800b674:	49742400 	.word	0x49742400
 800b678:	08015b3c 	.word	0x08015b3c
 800b67c:	08015b44 	.word	0x08015b44
 800b680:	08015b4c 	.word	0x08015b4c
 800b684:	08015b54 	.word	0x08015b54
 800b688:	08015b5c 	.word	0x08015b5c
 800b68c:	08015b64 	.word	0x08015b64

0800b690 <EM_SGEN_Set>:

/************************* [SGEN Actions] *************************/
scpi_result_t EM_SGEN_Set(scpi_t * context)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
#ifdef EM_DAC
    double p1;
    if (!SCPI_ParamDouble(context, &p1, TRUE))
 800b698:	f107 0308 	add.w	r3, r7, #8
 800b69c:	2201      	movs	r2, #1
 800b69e:	4619      	mov	r1, r3
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f004 f9b3 	bl	800fa0c <SCPI_ParamDouble>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	f083 0301 	eor.w	r3, r3, #1
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d007      	beq.n	800b6c2 <EM_SGEN_Set+0x32>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800b6b2:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f001 fd88 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c0:	e004      	b.n	800b6cc <EM_SGEN_Set+0x3c>
    }

    //sgen_enable(&sgen, p1 == 1); // TODO

    SCPI_ResultText(context, SCPI_OK);
 800b6c2:	4904      	ldr	r1, [pc, #16]	; (800b6d4 <EM_SGEN_Set+0x44>)
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f003 fda3 	bl	800f210 <SCPI_ResultText>
    return SCPI_RES_OK;
 800b6ca:	2301      	movs	r3, #1
#else
    SCPI_ErrorPush(context, SCPI_ERROR_DAC_NA);
    return SCPI_RES_ERR;
#endif
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	08015a74 	.word	0x08015a74

0800b6d8 <EM_PWM_SetQ>:

/************************* [PWM Actions] *************************/

scpi_result_t EM_PWM_SetQ(scpi_t * context)
{
 800b6d8:	b590      	push	{r4, r7, lr}
 800b6da:	b0a5      	sub	sp, #148	; 0x94
 800b6dc:	af04      	add	r7, sp, #16
 800b6de:	6078      	str	r0, [r7, #4]
    char buff[60];
    char buff_freq[10];
    char buff_duty1[10];
    char buff_duty2[10];

    float freq = pwm.ch1.freq;
 800b6e0:	4b28      	ldr	r3, [pc, #160]	; (800b784 <EM_PWM_SetQ+0xac>)
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    float duty1 = pwm.ch1.duty;
 800b6e6:	4b27      	ldr	r3, [pc, #156]	; (800b784 <EM_PWM_SetQ+0xac>)
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	67bb      	str	r3, [r7, #120]	; 0x78
    float duty2 = pwm.ch2.duty;
 800b6ec:	4b25      	ldr	r3, [pc, #148]	; (800b784 <EM_PWM_SetQ+0xac>)
 800b6ee:	6a1b      	ldr	r3, [r3, #32]
 800b6f0:	677b      	str	r3, [r7, #116]	; 0x74
    int offset2 = pwm.ch2.offset;
 800b6f2:	4b24      	ldr	r3, [pc, #144]	; (800b784 <EM_PWM_SetQ+0xac>)
 800b6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f6:	673b      	str	r3, [r7, #112]	; 0x70
    uint8_t en1 = pwm.ch1.enabled;
 800b6f8:	4b22      	ldr	r3, [pc, #136]	; (800b784 <EM_PWM_SetQ+0xac>)
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t en2 = pwm.ch2.enabled;
 800b700:	4b20      	ldr	r3, [pc, #128]	; (800b784 <EM_PWM_SetQ+0xac>)
 800b702:	7e1b      	ldrb	r3, [r3, #24]
 800b704:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

    sprint_fast(buff_freq, "%s", freq, 4);
 800b708:	f107 0320 	add.w	r3, r7, #32
 800b70c:	2204      	movs	r2, #4
 800b70e:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 800b712:	491d      	ldr	r1, [pc, #116]	; (800b788 <EM_PWM_SetQ+0xb0>)
 800b714:	4618      	mov	r0, r3
 800b716:	f001 facf 	bl	800ccb8 <sprint_fast>
    sprint_fast(buff_duty1, "%s", duty1, 4);
 800b71a:	f107 0314 	add.w	r3, r7, #20
 800b71e:	2204      	movs	r2, #4
 800b720:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 800b724:	4918      	ldr	r1, [pc, #96]	; (800b788 <EM_PWM_SetQ+0xb0>)
 800b726:	4618      	mov	r0, r3
 800b728:	f001 fac6 	bl	800ccb8 <sprint_fast>
    sprint_fast(buff_duty2, "%s", duty2, 4);
 800b72c:	f107 0308 	add.w	r3, r7, #8
 800b730:	2204      	movs	r2, #4
 800b732:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800b736:	4914      	ldr	r1, [pc, #80]	; (800b788 <EM_PWM_SetQ+0xb0>)
 800b738:	4618      	mov	r0, r3
 800b73a:	f001 fabd 	bl	800ccb8 <sprint_fast>
    int len = sprintf(buff, "%s,%s,%s,%d,%d,%d", buff_freq, buff_duty1, buff_duty2, offset2, en1, en2);
 800b73e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b742:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800b746:	f107 0414 	add.w	r4, r7, #20
 800b74a:	f107 0120 	add.w	r1, r7, #32
 800b74e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800b752:	9203      	str	r2, [sp, #12]
 800b754:	9302      	str	r3, [sp, #8]
 800b756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b758:	9301      	str	r3, [sp, #4]
 800b75a:	f107 0308 	add.w	r3, r7, #8
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	4623      	mov	r3, r4
 800b762:	460a      	mov	r2, r1
 800b764:	4909      	ldr	r1, [pc, #36]	; (800b78c <EM_PWM_SetQ+0xb4>)
 800b766:	f007 f8a1 	bl	80128ac <siprintf>
 800b76a:	66b8      	str	r0, [r7, #104]	; 0x68

    SCPI_ResultCharacters(context, buff, len);
 800b76c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b76e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f003 fcb1 	bl	800f0dc <SCPI_ResultCharacters>

    return SCPI_RES_OK;
 800b77a:	2301      	movs	r3, #1
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3784      	adds	r7, #132	; 0x84
 800b780:	46bd      	mov	sp, r7
 800b782:	bd90      	pop	{r4, r7, pc}
 800b784:	2000d830 	.word	0x2000d830
 800b788:	08015abc 	.word	0x08015abc
 800b78c:	08015b6c 	.word	0x08015b6c

0800b790 <EM_PWM_Set>:

scpi_result_t EM_PWM_Set(scpi_t * context)
{
 800b790:	b5b0      	push	{r4, r5, r7, lr}
 800b792:	b08e      	sub	sp, #56	; 0x38
 800b794:	af04      	add	r7, sp, #16
 800b796:	6078      	str	r0, [r7, #4]
    uint32_t param1, param2, param3, param4, param5, param6;

    if (!SCPI_ParamUInt32(context, &param1, TRUE) ||
 800b798:	f107 0320 	add.w	r3, r7, #32
 800b79c:	2201      	movs	r2, #1
 800b79e:	4619      	mov	r1, r3
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f004 f9e3 	bl	800fb6c <SCPI_ParamUInt32>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	f083 0301 	eor.w	r3, r3, #1
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d140      	bne.n	800b834 <EM_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
 800b7b2:	f107 031c 	add.w	r3, r7, #28
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f004 f9d6 	bl	800fb6c <SCPI_ParamUInt32>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	f083 0301 	eor.w	r3, r3, #1
 800b7c6:	b2db      	uxtb	r3, r3
    if (!SCPI_ParamUInt32(context, &param1, TRUE) ||
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d133      	bne.n	800b834 <EM_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param3, TRUE) ||
 800b7cc:	f107 0318 	add.w	r3, r7, #24
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f004 f9c9 	bl	800fb6c <SCPI_ParamUInt32>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	f083 0301 	eor.w	r3, r3, #1
 800b7e0:	b2db      	uxtb	r3, r3
        !SCPI_ParamUInt32(context, &param2, TRUE) ||
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d126      	bne.n	800b834 <EM_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param4, TRUE) ||
 800b7e6:	f107 0314 	add.w	r3, r7, #20
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f004 f9bc 	bl	800fb6c <SCPI_ParamUInt32>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	f083 0301 	eor.w	r3, r3, #1
 800b7fa:	b2db      	uxtb	r3, r3
        !SCPI_ParamUInt32(context, &param3, TRUE) ||
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d119      	bne.n	800b834 <EM_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param5, TRUE) ||
 800b800:	f107 0310 	add.w	r3, r7, #16
 800b804:	2201      	movs	r2, #1
 800b806:	4619      	mov	r1, r3
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f004 f9af 	bl	800fb6c <SCPI_ParamUInt32>
 800b80e:	4603      	mov	r3, r0
 800b810:	f083 0301 	eor.w	r3, r3, #1
 800b814:	b2db      	uxtb	r3, r3
        !SCPI_ParamUInt32(context, &param4, TRUE) ||
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10c      	bne.n	800b834 <EM_PWM_Set+0xa4>
        !SCPI_ParamUInt32(context, &param6, TRUE))
 800b81a:	f107 030c 	add.w	r3, r7, #12
 800b81e:	2201      	movs	r2, #1
 800b820:	4619      	mov	r1, r3
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f004 f9a2 	bl	800fb6c <SCPI_ParamUInt32>
 800b828:	4603      	mov	r3, r0
 800b82a:	f083 0301 	eor.w	r3, r3, #1
 800b82e:	b2db      	uxtb	r3, r3
        !SCPI_ParamUInt32(context, &param5, TRUE) ||
 800b830:	2b00      	cmp	r3, #0
 800b832:	d007      	beq.n	800b844 <EM_PWM_Set+0xb4>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800b834:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f001 fcc7 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b83e:	f04f 33ff 	mov.w	r3, #4294967295
 800b842:	e022      	b.n	800b88a <EM_PWM_Set+0xfa>
    }

    int ret = pwm_set(&pwm, param1, param2, param3, param4, param5, param6);
 800b844:	6a3b      	ldr	r3, [r7, #32]
 800b846:	4618      	mov	r0, r3
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	461c      	mov	r4, r3
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	461d      	mov	r5, r3
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	68f9      	ldr	r1, [r7, #12]
 800b856:	9102      	str	r1, [sp, #8]
 800b858:	9201      	str	r2, [sp, #4]
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	462b      	mov	r3, r5
 800b85e:	4622      	mov	r2, r4
 800b860:	4601      	mov	r1, r0
 800b862:	480c      	ldr	r0, [pc, #48]	; (800b894 <EM_PWM_Set+0x104>)
 800b864:	f000 f938 	bl	800bad8 <pwm_set>
 800b868:	6278      	str	r0, [r7, #36]	; 0x24

    if (ret != 0)
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d007      	beq.n	800b880 <EM_PWM_Set+0xf0>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800b870:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f001 fca9 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b87a:	f04f 33ff 	mov.w	r3, #4294967295
 800b87e:	e004      	b.n	800b88a <EM_PWM_Set+0xfa>
    }

    SCPI_ResultText(context, SCPI_OK);
 800b880:	4905      	ldr	r1, [pc, #20]	; (800b898 <EM_PWM_Set+0x108>)
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f003 fcc4 	bl	800f210 <SCPI_ResultText>
    return SCPI_RES_OK;
 800b888:	2301      	movs	r3, #1
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3728      	adds	r7, #40	; 0x28
 800b88e:	46bd      	mov	sp, r7
 800b890:	bdb0      	pop	{r4, r5, r7, pc}
 800b892:	bf00      	nop
 800b894:	2000d830 	.word	0x2000d830
 800b898:	08015a74 	.word	0x08015a74

0800b89c <EM_Force_Trig>:


scpi_result_t EM_Force_Trig(scpi_t * context)
{
 800b89c:	b590      	push	{r4, r7, lr}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
    if (daq.mode == VM)
 800b8a4:	4b43      	ldr	r3, [pc, #268]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b8a6:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b8aa:	3334      	adds	r3, #52	; 0x34
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d106      	bne.n	800b8c0 <EM_Force_Trig+0x24>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_MODE);
 800b8b2:	4941      	ldr	r1, [pc, #260]	; (800b9b8 <EM_Force_Trig+0x11c>)
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f001 fc89 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b8ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b8be:	e075      	b.n	800b9ac <EM_Force_Trig+0x110>
    }

    if (daq.trig.ready || daq.trig.set.mode == DISABLED || daq.trig.set.mode == AUTO)
 800b8c0:	4b3c      	ldr	r3, [pc, #240]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b8c2:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b8c6:	337a      	adds	r3, #122	; 0x7a
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10d      	bne.n	800b8ea <EM_Force_Trig+0x4e>
 800b8ce:	4b39      	ldr	r3, [pc, #228]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b8d0:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b8d4:	3340      	adds	r3, #64	; 0x40
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	2b03      	cmp	r3, #3
 800b8da:	d006      	beq.n	800b8ea <EM_Force_Trig+0x4e>
 800b8dc:	4b35      	ldr	r3, [pc, #212]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b8de:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b8e2:	3340      	adds	r3, #64	; 0x40
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d107      	bne.n	800b8fa <EM_Force_Trig+0x5e>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_FUNCTION_NOT_AVAILABLE);
 800b8ea:	f46f 71ba 	mvn.w	r1, #372	; 0x174
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f001 fc6c 	bl	800d1cc <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800b8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f8:	e058      	b.n	800b9ac <EM_Force_Trig+0x110>
    }

    if (daq.mode == LA)
 800b8fa:	4b2e      	ldr	r3, [pc, #184]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b8fc:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b900:	3334      	adds	r3, #52	; 0x34
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	2b02      	cmp	r3, #2
 800b906:	d121      	bne.n	800b94c <EM_Force_Trig+0xb0>
    {
        daq.trig.dma_pos_catched = EM_DMA_LAST_IDX(daq.trig.buff_trig->len, EM_DMA_CH_LA, EM_DMA_LA);
 800b908:	4b2a      	ldr	r3, [pc, #168]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b90a:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b90e:	33b0      	adds	r3, #176	; 0xb0
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	88db      	ldrh	r3, [r3, #6]
 800b914:	461c      	mov	r4, r3
 800b916:	2106      	movs	r1, #6
 800b918:	4828      	ldr	r0, [pc, #160]	; (800b9bc <EM_Force_Trig+0x120>)
 800b91a:	f7fe fb67 	bl	8009fec <LL_DMA_GetDataLength>
 800b91e:	4603      	mov	r3, r0
 800b920:	1ae3      	subs	r3, r4, r3
 800b922:	461a      	mov	r2, r3
 800b924:	4b23      	ldr	r3, [pc, #140]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b926:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b92a:	33b0      	adds	r3, #176	; 0xb0
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	88db      	ldrh	r3, [r3, #6]
 800b930:	4619      	mov	r1, r3
 800b932:	4610      	mov	r0, r2
 800b934:	f7fe fb44 	bl	8009fc0 <get_last_circ_idx>
 800b938:	4602      	mov	r2, r0
 800b93a:	4b1e      	ldr	r3, [pc, #120]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b93c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b940:	33d0      	adds	r3, #208	; 0xd0
 800b942:	601a      	str	r2, [r3, #0]
        daq_trig_trigger_scope(&daq);
 800b944:	481b      	ldr	r0, [pc, #108]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b946:	f7fc fef3 	bl	8008730 <daq_trig_trigger_scope>
 800b94a:	e02a      	b.n	800b9a2 <EM_Force_Trig+0x106>
    }
    else // (daq.mode == SCOPE)
    {
        daq.trig.dma_pos_catched = EM_DMA_LAST_IDX(daq.trig.buff_trig->len, daq.trig.dma_ch_trig, daq.trig.dma_trig);
 800b94c:	4b19      	ldr	r3, [pc, #100]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b94e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b952:	33b0      	adds	r3, #176	; 0xb0
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	88db      	ldrh	r3, [r3, #6]
 800b958:	461c      	mov	r4, r3
 800b95a:	4b16      	ldr	r3, [pc, #88]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b95c:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b960:	33b8      	adds	r3, #184	; 0xb8
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	4b13      	ldr	r3, [pc, #76]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b966:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b96a:	33b4      	adds	r3, #180	; 0xb4
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4619      	mov	r1, r3
 800b970:	4610      	mov	r0, r2
 800b972:	f7fe fb3b 	bl	8009fec <LL_DMA_GetDataLength>
 800b976:	4603      	mov	r3, r0
 800b978:	1ae3      	subs	r3, r4, r3
 800b97a:	461a      	mov	r2, r3
 800b97c:	4b0d      	ldr	r3, [pc, #52]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b97e:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b982:	33b0      	adds	r3, #176	; 0xb0
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	88db      	ldrh	r3, [r3, #6]
 800b988:	4619      	mov	r1, r3
 800b98a:	4610      	mov	r0, r2
 800b98c:	f7fe fb18 	bl	8009fc0 <get_last_circ_idx>
 800b990:	4602      	mov	r2, r0
 800b992:	4b08      	ldr	r3, [pc, #32]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b994:	f503 4344 	add.w	r3, r3, #50176	; 0xc400
 800b998:	33d0      	adds	r3, #208	; 0xd0
 800b99a:	601a      	str	r2, [r3, #0]
        daq_trig_trigger_scope(&daq);
 800b99c:	4805      	ldr	r0, [pc, #20]	; (800b9b4 <EM_Force_Trig+0x118>)
 800b99e:	f7fc fec7 	bl	8008730 <daq_trig_trigger_scope>
    }

    SCPI_ResultText(context, SCPI_OK);
 800b9a2:	4907      	ldr	r1, [pc, #28]	; (800b9c0 <EM_Force_Trig+0x124>)
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f003 fc33 	bl	800f210 <SCPI_ResultText>
    return SCPI_RES_OK;
 800b9aa:	2301      	movs	r3, #1
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd90      	pop	{r4, r7, pc}
 800b9b4:	20000934 	.word	0x20000934
 800b9b8:	fffffe8c 	.word	0xfffffe8c
 800b9bc:	40020000 	.word	0x40020000
 800b9c0:	08015a74 	.word	0x08015a74

0800b9c4 <LL_TIM_EnableCounter>:
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f043 0201 	orr.w	r2, r3, #1
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	601a      	str	r2, [r3, #0]
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <LL_TIM_DisableCounter>:
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f023 0201 	bic.w	r2, r3, #1
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	601a      	str	r2, [r3, #0]
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <LL_TIM_SetCounter>:
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	683a      	ldr	r2, [r7, #0]
 800ba12:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <LL_TIM_SetPrescaler>:
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <LL_TIM_SetAutoReload>:
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ba4c:	bf00      	nop
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <LL_TIM_CC_EnableChannel>:
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a1a      	ldr	r2, [r3, #32]
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	431a      	orrs	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	621a      	str	r2, [r3, #32]
}
 800ba6e:	bf00      	nop
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <LL_TIM_OC_SetCompareCH1>:
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b083      	sub	sp, #12
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	635a      	str	r2, [r3, #52]	; 0x34
}
 800ba8a:	bf00      	nop
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr
	...

0800ba98 <pwm_init>:

#include "main.h"


void pwm_init(pwm_data_t* self)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
    self->ch1.enabled = 0;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	701a      	strb	r2, [r3, #0]
    self->ch2.enabled = 0;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	761a      	strb	r2, [r3, #24]
    self->ch1.freq = 1000;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a08      	ldr	r2, [pc, #32]	; (800bad0 <pwm_init+0x38>)
 800bab0:	605a      	str	r2, [r3, #4]
    self->ch2.freq = 1000;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a06      	ldr	r2, [pc, #24]	; (800bad0 <pwm_init+0x38>)
 800bab6:	61da      	str	r2, [r3, #28]
    self->ch1.duty = 50;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a06      	ldr	r2, [pc, #24]	; (800bad4 <pwm_init+0x3c>)
 800babc:	609a      	str	r2, [r3, #8]
    self->ch2.duty = 50;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4a04      	ldr	r2, [pc, #16]	; (800bad4 <pwm_init+0x3c>)
 800bac2:	621a      	str	r2, [r3, #32]
}
 800bac4:	bf00      	nop
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	447a0000 	.word	0x447a0000
 800bad4:	42480000 	.word	0x42480000

0800bad8 <pwm_set>:

int pwm_set(pwm_data_t* self, int freq, int duty1, int duty2, int offset2, int enable1, int enable2)
{
 800bad8:	b5b0      	push	{r4, r5, r7, lr}
 800bada:	b08c      	sub	sp, #48	; 0x30
 800badc:	af02      	add	r7, sp, #8
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	603b      	str	r3, [r7, #0]
    if (freq <= 0 || freq > EM_PWM_MAX_F || duty1 < 0 || duty1 > 100 ||
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	dd15      	ble.n	800bb18 <pwm_set+0x40>
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	4a90      	ldr	r2, [pc, #576]	; (800bd30 <pwm_set+0x258>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	dc11      	bgt.n	800bb18 <pwm_set+0x40>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	db0e      	blt.n	800bb18 <pwm_set+0x40>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b64      	cmp	r3, #100	; 0x64
 800bafe:	dc0b      	bgt.n	800bb18 <pwm_set+0x40>
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	db08      	blt.n	800bb18 <pwm_set+0x40>
        duty2 < 0 || duty2 > 100 || offset2 < 0 || offset2 > 100)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b64      	cmp	r3, #100	; 0x64
 800bb0a:	dc05      	bgt.n	800bb18 <pwm_set+0x40>
 800bb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	db02      	blt.n	800bb18 <pwm_set+0x40>
 800bb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb14:	2b64      	cmp	r3, #100	; 0x64
 800bb16:	dd02      	ble.n	800bb1e <pwm_set+0x46>
    {
        return -1;
 800bb18:	f04f 33ff 	mov.w	r3, #4294967295
 800bb1c:	e104      	b.n	800bd28 <pwm_set+0x250>
    }

    LL_TIM_DisableCounter(EM_TIM_PWM1);
 800bb1e:	4885      	ldr	r0, [pc, #532]	; (800bd34 <pwm_set+0x25c>)
 800bb20:	f7ff ff60 	bl	800b9e4 <LL_TIM_DisableCounter>
    LL_TIM_DisableCounter(EM_TIM_PWM2);
 800bb24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bb28:	f7ff ff5c 	bl	800b9e4 <LL_TIM_DisableCounter>

    if (!enable1)
 800bb2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <pwm_set+0x5e>
        return 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	e0f8      	b.n	800bd28 <pwm_set+0x250>

    int prescaler = 1;
 800bb36:	2301      	movs	r3, #1
 800bb38:	617b      	str	r3, [r7, #20]
    int reload = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	613b      	str	r3, [r7, #16]

    self->ch1.enabled = enable1;
 800bb3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb40:	b2da      	uxtb	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	701a      	strb	r2, [r3, #0]
    self->ch1.freq = get_freq(&prescaler, &reload, EM_TIM_PWM1_MAX, EM_TIM_PWM1_FREQ, freq);
 800bb46:	f107 0110 	add.w	r1, r7, #16
 800bb4a:	f107 0014 	add.w	r0, r7, #20
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	4b79      	ldr	r3, [pc, #484]	; (800bd38 <pwm_set+0x260>)
 800bb54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb58:	f001 f842 	bl	800cbe0 <get_freq>
 800bb5c:	eef0 7a40 	vmov.f32	s15, s0
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	edc3 7a01 	vstr	s15, [r3, #4]
    self->ch1.prescaler = prescaler;
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	60da      	str	r2, [r3, #12]
    self->ch1.reload = reload;
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	461a      	mov	r2, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	611a      	str	r2, [r3, #16]
    self->ch1.offset = 0;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	615a      	str	r2, [r3, #20]

    self->ch2.enabled = enable2;
 800bb7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	761a      	strb	r2, [r3, #24]
    self->ch2.freq = self->ch1.freq;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	685a      	ldr	r2, [r3, #4]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	61da      	str	r2, [r3, #28]
    self->ch2.prescaler = prescaler;
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	625a      	str	r2, [r3, #36]	; 0x24
    self->ch2.reload = reload;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	461a      	mov	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	629a      	str	r2, [r3, #40]	; 0x28
    self->ch2.offset = offset2;
 800bb9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	62da      	str	r2, [r3, #44]	; 0x2c

    LL_TIM_SetAutoReload(EM_TIM_PWM1, reload);
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	4619      	mov	r1, r3
 800bba6:	4863      	ldr	r0, [pc, #396]	; (800bd34 <pwm_set+0x25c>)
 800bba8:	f7ff ff48 	bl	800ba3c <LL_TIM_SetAutoReload>
    LL_TIM_SetAutoReload(EM_TIM_PWM2, reload);
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	4619      	mov	r1, r3
 800bbb0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bbb4:	f7ff ff42 	bl	800ba3c <LL_TIM_SetAutoReload>
    LL_TIM_SetPrescaler(EM_TIM_PWM1, prescaler);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	485d      	ldr	r0, [pc, #372]	; (800bd34 <pwm_set+0x25c>)
 800bbbe:	f7ff ff2f 	bl	800ba20 <LL_TIM_SetPrescaler>
    LL_TIM_SetPrescaler(EM_TIM_PWM2, prescaler);
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bbca:	f7ff ff29 	bl	800ba20 <LL_TIM_SetPrescaler>

    int compare1 = (duty1 / (float)100) * reload;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	ee07 3a90 	vmov	s15, r3
 800bbd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbd8:	eddf 6a58 	vldr	s13, [pc, #352]	; 800bd3c <pwm_set+0x264>
 800bbdc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	ee07 3a90 	vmov	s15, r3
 800bbe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbf2:	ee17 3a90 	vmov	r3, s15
 800bbf6:	627b      	str	r3, [r7, #36]	; 0x24
    float real_duty1 = ((float)compare1 / (float)reload) * (float)100;
 800bbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfa:	ee07 3a90 	vmov	s15, r3
 800bbfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	ee07 3a90 	vmov	s15, r3
 800bc08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc10:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800bd3c <pwm_set+0x264>
 800bc14:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc18:	edc7 7a08 	vstr	s15, [r7, #32]

    int compare2 = (duty2 / (float)100) * reload;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	ee07 3a90 	vmov	s15, r3
 800bc22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc26:	eddf 6a45 	vldr	s13, [pc, #276]	; 800bd3c <pwm_set+0x264>
 800bc2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	ee07 3a90 	vmov	s15, r3
 800bc34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc40:	ee17 3a90 	vmov	r3, s15
 800bc44:	61fb      	str	r3, [r7, #28]
    float real_duty2 = ((float)compare2 / (float)reload) * (float)100;
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	ee07 3a90 	vmov	s15, r3
 800bc4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	ee07 3a90 	vmov	s15, r3
 800bc56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc5e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800bd3c <pwm_set+0x264>
 800bc62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc66:	edc7 7a06 	vstr	s15, [r7, #24]

    self->ch1.duty = real_duty1;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6a3a      	ldr	r2, [r7, #32]
 800bc6e:	609a      	str	r2, [r3, #8]
    self->ch2.duty = real_duty2;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	621a      	str	r2, [r3, #32]

    LL_TIM_OC_SetCompareCH1(EM_TIM_PWM1, compare1);
 800bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc78:	4619      	mov	r1, r3
 800bc7a:	482e      	ldr	r0, [pc, #184]	; (800bd34 <pwm_set+0x25c>)
 800bc7c:	f7ff fefd 	bl	800ba7a <LL_TIM_OC_SetCompareCH1>
    LL_TIM_OC_SetCompareCH1(EM_TIM_PWM2, compare2);
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	4619      	mov	r1, r3
 800bc84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bc88:	f7ff fef7 	bl	800ba7a <LL_TIM_OC_SetCompareCH1>
    
    LL_TIM_SetCounter(EM_TIM_PWM1, 0);
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	4829      	ldr	r0, [pc, #164]	; (800bd34 <pwm_set+0x25c>)
 800bc90:	f7ff feb8 	bl	800ba04 <LL_TIM_SetCounter>
    LL_TIM_SetCounter(EM_TIM_PWM2, 0);
 800bc94:	2100      	movs	r1, #0
 800bc96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bc9a:	f7ff feb3 	bl	800ba04 <LL_TIM_SetCounter>

    // http://www.micromouseonline.com/2016/02/05/clock-pulses-with-variable-phase-stm32/
    if (offset2 > 0)
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	dd2c      	ble.n	800bcfe <pwm_set+0x226>
        LL_TIM_SetCounter(EM_TIM_PWM2, (int)((float)offset2 / 100.0 * (float)reload));
 800bca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca6:	ee07 3a90 	vmov	s15, r3
 800bcaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcae:	ee17 0a90 	vmov	r0, s15
 800bcb2:	f7f4 fc61 	bl	8000578 <__aeabi_f2d>
 800bcb6:	f04f 0200 	mov.w	r2, #0
 800bcba:	4b21      	ldr	r3, [pc, #132]	; (800bd40 <pwm_set+0x268>)
 800bcbc:	f7f4 fdde 	bl	800087c <__aeabi_ddiv>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	4625      	mov	r5, r4
 800bcc6:	461c      	mov	r4, r3
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	ee07 3a90 	vmov	s15, r3
 800bcce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcd2:	ee17 0a90 	vmov	r0, s15
 800bcd6:	f7f4 fc4f 	bl	8000578 <__aeabi_f2d>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4620      	mov	r0, r4
 800bce0:	4629      	mov	r1, r5
 800bce2:	f7f4 fca1 	bl	8000628 <__aeabi_dmul>
 800bce6:	4603      	mov	r3, r0
 800bce8:	460c      	mov	r4, r1
 800bcea:	4618      	mov	r0, r3
 800bcec:	4621      	mov	r1, r4
 800bcee:	f7f4 ff4b 	bl	8000b88 <__aeabi_d2iz>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bcfa:	f7ff fe83 	bl	800ba04 <LL_TIM_SetCounter>

    if (enable1)
 800bcfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d004      	beq.n	800bd0e <pwm_set+0x236>
        LL_TIM_CC_EnableChannel(EM_TIM_PWM1, EM_TIM_PWM1_CH);
 800bd04:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bd08:	480a      	ldr	r0, [pc, #40]	; (800bd34 <pwm_set+0x25c>)
 800bd0a:	f7ff fea5 	bl	800ba58 <LL_TIM_CC_EnableChannel>

    if (enable2)
 800bd0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d005      	beq.n	800bd20 <pwm_set+0x248>
        LL_TIM_CC_EnableChannel(EM_TIM_PWM2, EM_TIM_PWM2_CH);
 800bd14:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bd18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bd1c:	f7ff fe9c 	bl	800ba58 <LL_TIM_CC_EnableChannel>

    LL_TIM_EnableCounter(EM_TIM_PWM1);
 800bd20:	4804      	ldr	r0, [pc, #16]	; (800bd34 <pwm_set+0x25c>)
 800bd22:	f7ff fe4f 	bl	800b9c4 <LL_TIM_EnableCounter>

    return 0;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3728      	adds	r7, #40	; 0x28
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bdb0      	pop	{r4, r5, r7, pc}
 800bd30:	000f4240 	.word	0x000f4240
 800bd34:	40000800 	.word	0x40000800
 800bd38:	044aa200 	.word	0x044aa200
 800bd3c:	42c80000 	.word	0x42c80000
 800bd40:	40590000 	.word	0x40590000

0800bd44 <LL_DAC_EnableDMAReq>:
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	f003 0310 	and.w	r3, r3, #16
 800bd58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bd5c:	fa01 f303 	lsl.w	r3, r1, r3
 800bd60:	431a      	orrs	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	601a      	str	r2, [r3, #0]
}
 800bd66:	bf00      	nop
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr

0800bd72 <LL_DAC_DMA_GetRegAddr>:
{
 800bd72:	b480      	push	{r7}
 800bd74:	b087      	sub	sp, #28
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	60f8      	str	r0, [r7, #12]
 800bd7a:	60b9      	str	r1, [r7, #8]
 800bd7c:	607a      	str	r2, [r7, #4]
  return ((uint32_t)(__DAC_PTR_REG_OFFSET((DACx)->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, Register))));
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3308      	adds	r3, #8
 800bd82:	4619      	mov	r1, r3
 800bd84:	68ba      	ldr	r2, [r7, #8]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4013      	ands	r3, r2
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	fa92 f2a2 	rbit	r2, r2
 800bd94:	613a      	str	r2, [r7, #16]
  return result;
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	fab2 f282 	clz	r2, r2
 800bd9c:	b2d2      	uxtb	r2, r2
 800bd9e:	40d3      	lsrs	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	440b      	add	r3, r1
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	371c      	adds	r7, #28
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <LL_DAC_EnableTrigger>:
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	f003 0310 	and.w	r3, r3, #16
 800bdc4:	2104      	movs	r1, #4
 800bdc6:	fa01 f303 	lsl.w	r3, r1, r3
 800bdca:	431a      	orrs	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	601a      	str	r2, [r3, #0]
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <LL_TIM_EnableCounter>:
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f043 0201 	orr.w	r2, r3, #1
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	601a      	str	r2, [r3, #0]
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <LL_TIM_SetPrescaler>:
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800be0c:	bf00      	nop
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <LL_TIM_SetAutoReload>:
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	683a      	ldr	r2, [r7, #0]
 800be26:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <sgen_init>:

static int get_rnd(int* m_w, int* m_z);


void sgen_init(sgen_data_t* self)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
    self->enabled = 0;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	701a      	strb	r2, [r3, #0]
    self->tim_f_real = 0;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f04f 0200 	mov.w	r2, #0
 800be48:	611a      	str	r2, [r3, #16]
    memset(self->data, 0x00, EM_DAC_BUFF_LEN * sizeof(uint16_t));
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	3318      	adds	r3, #24
 800be4e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800be52:	2100      	movs	r1, #0
 800be54:	4618      	mov	r0, r3
 800be56:	f006 fd21 	bl	801289c <memset>
    sgen_const(self, 50);
 800be5a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800be6c <sgen_init+0x38>
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 f8b6 	bl	800bfd0 <sgen_const>
}
 800be64:	bf00      	nop
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	42480000 	.word	0x42480000

0800be70 <sgen_enable>:

void sgen_enable(sgen_data_t* self, enum sgen_mode mode, float A, float f, int N)
{
 800be70:	b590      	push	{r4, r7, lr}
 800be72:	b08d      	sub	sp, #52	; 0x34
 800be74:	af04      	add	r7, sp, #16
 800be76:	6178      	str	r0, [r7, #20]
 800be78:	460b      	mov	r3, r1
 800be7a:	ed87 0a03 	vstr	s0, [r7, #12]
 800be7e:	edc7 0a02 	vstr	s1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
 800be84:	74fb      	strb	r3, [r7, #19]
    if (self->enabled)
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f040 8090 	bne.w	800bfb0 <sgen_enable+0x140>
        return;

    if (mode == SINE)
 800be90:	7cfb      	ldrb	r3, [r7, #19]
 800be92:	2b01      	cmp	r3, #1
 800be94:	d108      	bne.n	800bea8 <sgen_enable+0x38>
        sgen_sine(self, A, f, N);
 800be96:	6879      	ldr	r1, [r7, #4]
 800be98:	edd7 0a02 	vldr	s1, [r7, #8]
 800be9c:	ed97 0a03 	vldr	s0, [r7, #12]
 800bea0:	6978      	ldr	r0, [r7, #20]
 800bea2:	f000 f901 	bl	800c0a8 <sgen_sine>
 800bea6:	e034      	b.n	800bf12 <sgen_enable+0xa2>
    else if (mode == SQUARE)
 800bea8:	7cfb      	ldrb	r3, [r7, #19]
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d108      	bne.n	800bec0 <sgen_enable+0x50>
        sgen_square(self, A, f, N);
 800beae:	6879      	ldr	r1, [r7, #4]
 800beb0:	edd7 0a02 	vldr	s1, [r7, #8]
 800beb4:	ed97 0a03 	vldr	s0, [r7, #12]
 800beb8:	6978      	ldr	r0, [r7, #20]
 800beba:	f000 f9e5 	bl	800c288 <sgen_square>
 800bebe:	e028      	b.n	800bf12 <sgen_enable+0xa2>
    else if (mode == TRIANGLE)
 800bec0:	7cfb      	ldrb	r3, [r7, #19]
 800bec2:	2b03      	cmp	r3, #3
 800bec4:	d108      	bne.n	800bed8 <sgen_enable+0x68>
        sgen_triangle(self, A, f, N);
 800bec6:	6879      	ldr	r1, [r7, #4]
 800bec8:	edd7 0a02 	vldr	s1, [r7, #8]
 800becc:	ed97 0a03 	vldr	s0, [r7, #12]
 800bed0:	6978      	ldr	r0, [r7, #20]
 800bed2:	f000 fa8d 	bl	800c3f0 <sgen_triangle>
 800bed6:	e01c      	b.n	800bf12 <sgen_enable+0xa2>
    else if (mode == SAW)
 800bed8:	7cfb      	ldrb	r3, [r7, #19]
 800beda:	2b04      	cmp	r3, #4
 800bedc:	d108      	bne.n	800bef0 <sgen_enable+0x80>
        sgen_saw(self, A, f, N);
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	edd7 0a02 	vldr	s1, [r7, #8]
 800bee4:	ed97 0a03 	vldr	s0, [r7, #12]
 800bee8:	6978      	ldr	r0, [r7, #20]
 800beea:	f000 fb41 	bl	800c570 <sgen_saw>
 800beee:	e010      	b.n	800bf12 <sgen_enable+0xa2>
    else if (mode == RAND)
 800bef0:	7cfb      	ldrb	r3, [r7, #19]
 800bef2:	2b05      	cmp	r3, #5
 800bef4:	d108      	bne.n	800bf08 <sgen_enable+0x98>
        sgen_rand(self, A, f, N);
 800bef6:	6879      	ldr	r1, [r7, #4]
 800bef8:	edd7 0a02 	vldr	s1, [r7, #8]
 800befc:	ed97 0a03 	vldr	s0, [r7, #12]
 800bf00:	6978      	ldr	r0, [r7, #20]
 800bf02:	f000 fbe5 	bl	800c6d0 <sgen_rand>
 800bf06:	e004      	b.n	800bf12 <sgen_enable+0xa2>
    else // mode == CONST
        sgen_const(self, A);
 800bf08:	ed97 0a03 	vldr	s0, [r7, #12]
 800bf0c:	6978      	ldr	r0, [r7, #20]
 800bf0e:	f000 f85f 	bl	800bfd0 <sgen_const>

    int prescaler = 1;
 800bf12:	2301      	movs	r3, #1
 800bf14:	61fb      	str	r3, [r7, #28]
    int reload = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	61bb      	str	r3, [r7, #24]

    self->tim_f_real = get_freq(&prescaler, &reload, EM_TIM_SGEN_MAX, EM_TIM_SGEN_FREQ, self->tim_f);
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	edd3 7a03 	vldr	s15, [r3, #12]
 800bf20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf24:	ee17 3a90 	vmov	r3, s15
 800bf28:	f107 0118 	add.w	r1, r7, #24
 800bf2c:	f107 001c 	add.w	r0, r7, #28
 800bf30:	9300      	str	r3, [sp, #0]
 800bf32:	4b21      	ldr	r3, [pc, #132]	; (800bfb8 <sgen_enable+0x148>)
 800bf34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf38:	f000 fe52 	bl	800cbe0 <get_freq>
 800bf3c:	eef0 7a40 	vmov.f32	s15, s0
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	edc3 7a04 	vstr	s15, [r3, #16]

    dma_set((uint32_t)&self->data, EM_DMA_SGEN, EM_DMA_CH_SGEN,
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	3318      	adds	r3, #24
 800bf4a:	461c      	mov	r4, r3
 800bf4c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 800bf50:	491a      	ldr	r1, [pc, #104]	; (800bfbc <sgen_enable+0x14c>)
 800bf52:	481b      	ldr	r0, [pc, #108]	; (800bfc0 <sgen_enable+0x150>)
 800bf54:	f7ff ff0d 	bl	800bd72 <LL_DAC_DMA_GetRegAddr>
 800bf58:	4601      	mov	r1, r0
            LL_DAC_DMA_GetRegAddr(EM_DAC, EM_DAC_CH, LL_DAC_DMA_REG_DATA_12BITS_RIGHT_ALIGNED), self->samples,
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	695b      	ldr	r3, [r3, #20]
    dma_set((uint32_t)&self->data, EM_DMA_SGEN, EM_DMA_CH_SGEN,
 800bf5e:	461a      	mov	r2, r3
 800bf60:	2310      	movs	r3, #16
 800bf62:	9303      	str	r3, [sp, #12]
 800bf64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf68:	9302      	str	r3, [sp, #8]
 800bf6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	9200      	str	r2, [sp, #0]
 800bf72:	460b      	mov	r3, r1
 800bf74:	2203      	movs	r2, #3
 800bf76:	4913      	ldr	r1, [pc, #76]	; (800bfc4 <sgen_enable+0x154>)
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f7fd feb3 	bl	8009ce4 <dma_set>
            LL_DMA_PDATAALIGN_HALFWORD, LL_DMA_MDATAALIGN_HALFWORD, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

    LL_DAC_EnableDMAReq(EM_DAC, EM_DAC_CH);
 800bf7e:	490f      	ldr	r1, [pc, #60]	; (800bfbc <sgen_enable+0x14c>)
 800bf80:	480f      	ldr	r0, [pc, #60]	; (800bfc0 <sgen_enable+0x150>)
 800bf82:	f7ff fedf 	bl	800bd44 <LL_DAC_EnableDMAReq>
    LL_DAC_EnableTrigger(EM_DAC, EM_DAC_CH);
 800bf86:	490d      	ldr	r1, [pc, #52]	; (800bfbc <sgen_enable+0x14c>)
 800bf88:	480d      	ldr	r0, [pc, #52]	; (800bfc0 <sgen_enable+0x150>)
 800bf8a:	f7ff ff11 	bl	800bdb0 <LL_DAC_EnableTrigger>
    LL_TIM_SetAutoReload(EM_TIM_SGEN, reload);
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	4619      	mov	r1, r3
 800bf92:	480d      	ldr	r0, [pc, #52]	; (800bfc8 <sgen_enable+0x158>)
 800bf94:	f7ff ff40 	bl	800be18 <LL_TIM_SetAutoReload>
    LL_TIM_SetPrescaler(EM_TIM_SGEN, prescaler);
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	480a      	ldr	r0, [pc, #40]	; (800bfc8 <sgen_enable+0x158>)
 800bf9e:	f7ff ff2d 	bl	800bdfc <LL_TIM_SetPrescaler>
    LL_TIM_EnableCounter(EM_TIM_SGEN);
 800bfa2:	4809      	ldr	r0, [pc, #36]	; (800bfc8 <sgen_enable+0x158>)
 800bfa4:	f7ff ff1a 	bl	800bddc <LL_TIM_EnableCounter>

    self->enabled = 1;
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	701a      	strb	r2, [r3, #0]
 800bfae:	e000      	b.n	800bfb2 <sgen_enable+0x142>
        return;
 800bfb0:	bf00      	nop
}
 800bfb2:	3724      	adds	r7, #36	; 0x24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd90      	pop	{r4, r7, pc}
 800bfb8:	044aa200 	.word	0x044aa200
 800bfbc:	02100001 	.word	0x02100001
 800bfc0:	40007400 	.word	0x40007400
 800bfc4:	40020000 	.word	0x40020000
 800bfc8:	40001000 	.word	0x40001000
 800bfcc:	00000000 	.word	0x00000000

0800bfd0 <sgen_const>:

    self->enabled = 0;
}

static void sgen_const(sgen_data_t* self, float A)
{
 800bfd0:	b590      	push	{r4, r7, lr}
 800bfd2:	b085      	sub	sp, #20
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	ed87 0a00 	vstr	s0, [r7]
    ASSERT(A >= 0 && A <= 100);
 800bfdc:	edd7 7a00 	vldr	s15, [r7]
 800bfe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe8:	bfac      	ite	ge
 800bfea:	2301      	movge	r3, #1
 800bfec:	2300      	movlt	r3, #0
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	f083 0301 	eor.w	r3, r3, #1
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d110      	bne.n	800c01c <sgen_const+0x4c>
 800bffa:	edd7 7a00 	vldr	s15, [r7]
 800bffe:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800c098 <sgen_const+0xc8>
 800c002:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c00a:	bf94      	ite	ls
 800c00c:	2301      	movls	r3, #1
 800c00e:	2300      	movhi	r3, #0
 800c010:	b2db      	uxtb	r3, r3
 800c012:	f083 0301 	eor.w	r3, r3, #1
 800c016:	b2db      	uxtb	r3, r3
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d003      	beq.n	800c024 <sgen_const+0x54>
 800c01c:	2155      	movs	r1, #85	; 0x55
 800c01e:	481f      	ldr	r0, [pc, #124]	; (800c09c <sgen_const+0xcc>)
 800c020:	f000 fc25 	bl	800c86e <assert2>

    self->mode = CONST;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	705a      	strb	r2, [r3, #1]
    self->freq = 0;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f04f 0200 	mov.w	r2, #0
 800c030:	605a      	str	r2, [r3, #4]
    self->ampl = A;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	683a      	ldr	r2, [r7, #0]
 800c036:	609a      	str	r2, [r3, #8]
    self->samples = EM_DAC_BUFF_LEN;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c03e:	615a      	str	r2, [r3, #20]
    self->tim_f = EM_DAC_BUFF_LEN;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a17      	ldr	r2, [pc, #92]	; (800c0a0 <sgen_const+0xd0>)
 800c044:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < EM_DAC_BUFF_LEN; i++)
 800c046:	2300      	movs	r3, #0
 800c048:	60fb      	str	r3, [r7, #12]
 800c04a:	e017      	b.n	800c07c <sgen_const+0xac>
    {
        self->data[i] = (uint16_t)(EM_DAC_MAX_VAL * A);
 800c04c:	6838      	ldr	r0, [r7, #0]
 800c04e:	f7f4 fa93 	bl	8000578 <__aeabi_f2d>
 800c052:	a30f      	add	r3, pc, #60	; (adr r3, 800c090 <sgen_const+0xc0>)
 800c054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c058:	f7f4 fae6 	bl	8000628 <__aeabi_dmul>
 800c05c:	4603      	mov	r3, r0
 800c05e:	460c      	mov	r4, r1
 800c060:	4618      	mov	r0, r3
 800c062:	4621      	mov	r1, r4
 800c064:	f7f4 fdb8 	bl	8000bd8 <__aeabi_d2uiz>
 800c068:	4603      	mov	r3, r0
 800c06a:	b299      	uxth	r1, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	320c      	adds	r2, #12
 800c072:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < EM_DAC_BUFF_LEN; i++)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3301      	adds	r3, #1
 800c07a:	60fb      	str	r3, [r7, #12]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c082:	dbe3      	blt.n	800c04c <sgen_const+0x7c>
    }
}
 800c084:	bf00      	nop
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd90      	pop	{r4, r7, pc}
 800c08c:	f3af 8000 	nop.w
 800c090:	00000000 	.word	0x00000000
 800c094:	40affe00 	.word	0x40affe00
 800c098:	42c80000 	.word	0x42c80000
 800c09c:	08015b80 	.word	0x08015b80
 800c0a0:	447a0000 	.word	0x447a0000
 800c0a4:	00000000 	.word	0x00000000

0800c0a8 <sgen_sine>:

// https://controllerstech.com/dac-in-stm32/
static void sgen_sine(sgen_data_t* self, float A, float f, int N)
{
 800c0a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c0ac:	b086      	sub	sp, #24
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	60f8      	str	r0, [r7, #12]
 800c0b2:	ed87 0a02 	vstr	s0, [r7, #8]
 800c0b6:	edc7 0a01 	vstr	s1, [r7, #4]
 800c0ba:	6039      	str	r1, [r7, #0]
    ASSERT(A >= 0 && A <= 100 && f > 0 && N > 0 && N < EM_DAC_BUFF_LEN);
 800c0bc:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c8:	bfac      	ite	ge
 800c0ca:	2301      	movge	r3, #1
 800c0cc:	2300      	movlt	r3, #0
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	f083 0301 	eor.w	r3, r3, #1
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d126      	bne.n	800c128 <sgen_sine+0x80>
 800c0da:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0de:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800c278 <sgen_sine+0x1d0>
 800c0e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ea:	bf94      	ite	ls
 800c0ec:	2301      	movls	r3, #1
 800c0ee:	2300      	movhi	r3, #0
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	f083 0301 	eor.w	r3, r3, #1
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d115      	bne.n	800c128 <sgen_sine+0x80>
 800c0fc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c100:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c108:	bfcc      	ite	gt
 800c10a:	2301      	movgt	r3, #1
 800c10c:	2300      	movle	r3, #0
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	f083 0301 	eor.w	r3, r3, #1
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d106      	bne.n	800c128 <sgen_sine+0x80>
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	dd03      	ble.n	800c128 <sgen_sine+0x80>
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c126:	db03      	blt.n	800c130 <sgen_sine+0x88>
 800c128:	2166      	movs	r1, #102	; 0x66
 800c12a:	4854      	ldr	r0, [pc, #336]	; (800c27c <sgen_sine+0x1d4>)
 800c12c:	f000 fb9f 	bl	800c86e <assert2>

    self->mode = SINE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2201      	movs	r2, #1
 800c134:	705a      	strb	r2, [r3, #1]
    self->freq = f;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	605a      	str	r2, [r3, #4]
    self->ampl = A;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	609a      	str	r2, [r3, #8]
    self->samples = N;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	683a      	ldr	r2, [r7, #0]
 800c146:	615a      	str	r2, [r3, #20]
    self->tim_f = f * N;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	ee07 3a90 	vmov	s15, r3
 800c14e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c152:	edd7 7a01 	vldr	s15, [r7, #4]
 800c156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	edc3 7a03 	vstr	s15, [r3, #12]

    float a = ((A/100.0*EM_DAC_MAX_VAL)/2);
 800c160:	68b8      	ldr	r0, [r7, #8]
 800c162:	f7f4 fa09 	bl	8000578 <__aeabi_f2d>
 800c166:	f04f 0200 	mov.w	r2, #0
 800c16a:	4b45      	ldr	r3, [pc, #276]	; (800c280 <sgen_sine+0x1d8>)
 800c16c:	f7f4 fb86 	bl	800087c <__aeabi_ddiv>
 800c170:	4603      	mov	r3, r0
 800c172:	460c      	mov	r4, r1
 800c174:	4618      	mov	r0, r3
 800c176:	4621      	mov	r1, r4
 800c178:	a33b      	add	r3, pc, #236	; (adr r3, 800c268 <sgen_sine+0x1c0>)
 800c17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17e:	f7f4 fa53 	bl	8000628 <__aeabi_dmul>
 800c182:	4603      	mov	r3, r0
 800c184:	460c      	mov	r4, r1
 800c186:	4618      	mov	r0, r3
 800c188:	4621      	mov	r1, r4
 800c18a:	f04f 0200 	mov.w	r2, #0
 800c18e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c192:	f7f4 fb73 	bl	800087c <__aeabi_ddiv>
 800c196:	4603      	mov	r3, r0
 800c198:	460c      	mov	r4, r1
 800c19a:	4618      	mov	r0, r3
 800c19c:	4621      	mov	r1, r4
 800c19e:	f7f4 fd3b 	bl	8000c18 <__aeabi_d2f>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < N; i++)
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	617b      	str	r3, [r7, #20]
 800c1aa:	e054      	b.n	800c256 <sgen_sine+0x1ae>
    {
        self->data[i] = (uint16_t)(a*(sin((float)i*2.0*PI/(float)N) + 1));
 800c1ac:	6938      	ldr	r0, [r7, #16]
 800c1ae:	f7f4 f9e3 	bl	8000578 <__aeabi_f2d>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	ee07 3a90 	vmov	s15, r3
 800c1bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1c0:	ee17 0a90 	vmov	r0, s15
 800c1c4:	f7f4 f9d8 	bl	8000578 <__aeabi_f2d>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	f7f4 f876 	bl	80002bc <__adddf3>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	a325      	add	r3, pc, #148	; (adr r3, 800c270 <sgen_sine+0x1c8>)
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	f7f4 fa23 	bl	8000628 <__aeabi_dmul>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4690      	mov	r8, r2
 800c1e8:	4699      	mov	r9, r3
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	ee07 3a90 	vmov	s15, r3
 800c1f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1f4:	ee17 0a90 	vmov	r0, s15
 800c1f8:	f7f4 f9be 	bl	8000578 <__aeabi_f2d>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	460b      	mov	r3, r1
 800c200:	4640      	mov	r0, r8
 800c202:	4649      	mov	r1, r9
 800c204:	f7f4 fb3a 	bl	800087c <__aeabi_ddiv>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	ec43 2b17 	vmov	d7, r2, r3
 800c210:	eeb0 0a47 	vmov.f32	s0, s14
 800c214:	eef0 0a67 	vmov.f32	s1, s15
 800c218:	f007 fa2e 	bl	8013678 <sin>
 800c21c:	ec51 0b10 	vmov	r0, r1, d0
 800c220:	f04f 0200 	mov.w	r2, #0
 800c224:	4b17      	ldr	r3, [pc, #92]	; (800c284 <sgen_sine+0x1dc>)
 800c226:	f7f4 f849 	bl	80002bc <__adddf3>
 800c22a:	4602      	mov	r2, r0
 800c22c:	460b      	mov	r3, r1
 800c22e:	4620      	mov	r0, r4
 800c230:	4629      	mov	r1, r5
 800c232:	f7f4 f9f9 	bl	8000628 <__aeabi_dmul>
 800c236:	4603      	mov	r3, r0
 800c238:	460c      	mov	r4, r1
 800c23a:	4618      	mov	r0, r3
 800c23c:	4621      	mov	r1, r4
 800c23e:	f7f4 fccb 	bl	8000bd8 <__aeabi_d2uiz>
 800c242:	4603      	mov	r3, r0
 800c244:	b299      	uxth	r1, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	697a      	ldr	r2, [r7, #20]
 800c24a:	320c      	adds	r2, #12
 800c24c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < N; i++)
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	3301      	adds	r3, #1
 800c254:	617b      	str	r3, [r7, #20]
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	dba6      	blt.n	800c1ac <sgen_sine+0x104>
    }
}
 800c25e:	bf00      	nop
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c268:	00000000 	.word	0x00000000
 800c26c:	40affe00 	.word	0x40affe00
 800c270:	54442eea 	.word	0x54442eea
 800c274:	400921fb 	.word	0x400921fb
 800c278:	42c80000 	.word	0x42c80000
 800c27c:	08015b80 	.word	0x08015b80
 800c280:	40590000 	.word	0x40590000
 800c284:	3ff00000 	.word	0x3ff00000

0800c288 <sgen_square>:

static void sgen_square(sgen_data_t* self, float A, float f, int N)
{
 800c288:	b590      	push	{r4, r7, lr}
 800c28a:	b089      	sub	sp, #36	; 0x24
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	ed87 0a02 	vstr	s0, [r7, #8]
 800c294:	edc7 0a01 	vstr	s1, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
    ASSERT(A >= 0 && A <= 100 && f > 0 && N > 0 && N < EM_DAC_BUFF_LEN);
 800c29a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c29e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a6:	bfac      	ite	ge
 800c2a8:	2301      	movge	r3, #1
 800c2aa:	2300      	movlt	r3, #0
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	f083 0301 	eor.w	r3, r3, #1
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d126      	bne.n	800c306 <sgen_square+0x7e>
 800c2b8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2bc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800c3e0 <sgen_square+0x158>
 800c2c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c8:	bf94      	ite	ls
 800c2ca:	2301      	movls	r3, #1
 800c2cc:	2300      	movhi	r3, #0
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	f083 0301 	eor.w	r3, r3, #1
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d115      	bne.n	800c306 <sgen_square+0x7e>
 800c2da:	edd7 7a01 	vldr	s15, [r7, #4]
 800c2de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2e6:	bfcc      	ite	gt
 800c2e8:	2301      	movgt	r3, #1
 800c2ea:	2300      	movle	r3, #0
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	f083 0301 	eor.w	r3, r3, #1
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d106      	bne.n	800c306 <sgen_square+0x7e>
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	dd03      	ble.n	800c306 <sgen_square+0x7e>
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c304:	db03      	blt.n	800c30e <sgen_square+0x86>
 800c306:	2177      	movs	r1, #119	; 0x77
 800c308:	4836      	ldr	r0, [pc, #216]	; (800c3e4 <sgen_square+0x15c>)
 800c30a:	f000 fab0 	bl	800c86e <assert2>

    self->mode = SINE;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2201      	movs	r2, #1
 800c312:	705a      	strb	r2, [r3, #1]
    self->freq = f;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	605a      	str	r2, [r3, #4]
    self->ampl = A;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	609a      	str	r2, [r3, #8]
    self->samples = N;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	615a      	str	r2, [r3, #20]
    self->tim_f = f * N;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	ee07 3a90 	vmov	s15, r3
 800c32c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c330:	edd7 7a01 	vldr	s15, [r7, #4]
 800c334:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	edc3 7a03 	vstr	s15, [r3, #12]

    float a = (A/100.0*EM_DAC_MAX_VAL);
 800c33e:	68b8      	ldr	r0, [r7, #8]
 800c340:	f7f4 f91a 	bl	8000578 <__aeabi_f2d>
 800c344:	f04f 0200 	mov.w	r2, #0
 800c348:	4b27      	ldr	r3, [pc, #156]	; (800c3e8 <sgen_square+0x160>)
 800c34a:	f7f4 fa97 	bl	800087c <__aeabi_ddiv>
 800c34e:	4603      	mov	r3, r0
 800c350:	460c      	mov	r4, r1
 800c352:	4618      	mov	r0, r3
 800c354:	4621      	mov	r1, r4
 800c356:	a320      	add	r3, pc, #128	; (adr r3, 800c3d8 <sgen_square+0x150>)
 800c358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35c:	f7f4 f964 	bl	8000628 <__aeabi_dmul>
 800c360:	4603      	mov	r3, r0
 800c362:	460c      	mov	r4, r1
 800c364:	4618      	mov	r0, r3
 800c366:	4621      	mov	r1, r4
 800c368:	f7f4 fc56 	bl	8000c18 <__aeabi_d2f>
 800c36c:	4603      	mov	r3, r0
 800c36e:	61bb      	str	r3, [r7, #24]
    int half = N / 2;
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	0fda      	lsrs	r2, r3, #31
 800c374:	4413      	add	r3, r2
 800c376:	105b      	asrs	r3, r3, #1
 800c378:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < N; i++)
 800c37a:	2300      	movs	r3, #0
 800c37c:	61fb      	str	r3, [r7, #28]
 800c37e:	e020      	b.n	800c3c2 <sgen_square+0x13a>
    {
        self->data[i] = (uint16_t)((i >= half) < a ? a : 0);
 800c380:	69fa      	ldr	r2, [r7, #28]
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	429a      	cmp	r2, r3
 800c386:	db02      	blt.n	800c38e <sgen_square+0x106>
 800c388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c38c:	e001      	b.n	800c392 <sgen_square+0x10a>
 800c38e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800c3ec <sgen_square+0x164>
 800c392:	edd7 7a06 	vldr	s15, [r7, #24]
 800c396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c39e:	d507      	bpl.n	800c3b0 <sgen_square+0x128>
 800c3a0:	edd7 7a06 	vldr	s15, [r7, #24]
 800c3a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3a8:	ee17 3a90 	vmov	r3, s15
 800c3ac:	b299      	uxth	r1, r3
 800c3ae:	e000      	b.n	800c3b2 <sgen_square+0x12a>
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	69fa      	ldr	r2, [r7, #28]
 800c3b6:	320c      	adds	r2, #12
 800c3b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < N; i++)
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	61fb      	str	r3, [r7, #28]
 800c3c2:	69fa      	ldr	r2, [r7, #28]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	dbda      	blt.n	800c380 <sgen_square+0xf8>
    }
}
 800c3ca:	bf00      	nop
 800c3cc:	3724      	adds	r7, #36	; 0x24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd90      	pop	{r4, r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	f3af 8000 	nop.w
 800c3d8:	00000000 	.word	0x00000000
 800c3dc:	40affe00 	.word	0x40affe00
 800c3e0:	42c80000 	.word	0x42c80000
 800c3e4:	08015b80 	.word	0x08015b80
 800c3e8:	40590000 	.word	0x40590000
 800c3ec:	00000000 	.word	0x00000000

0800c3f0 <sgen_triangle>:

static void sgen_triangle(sgen_data_t* self, float A, float f, int N)
{
 800c3f0:	b590      	push	{r4, r7, lr}
 800c3f2:	b087      	sub	sp, #28
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	ed87 0a02 	vstr	s0, [r7, #8]
 800c3fc:	edc7 0a01 	vstr	s1, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
    ASSERT(A >= 0 && A <= 100 && f > 0 && N > 0 && N < EM_DAC_BUFF_LEN);
 800c402:	edd7 7a02 	vldr	s15, [r7, #8]
 800c406:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c40e:	bfac      	ite	ge
 800c410:	2301      	movge	r3, #1
 800c412:	2300      	movlt	r3, #0
 800c414:	b2db      	uxtb	r3, r3
 800c416:	f083 0301 	eor.w	r3, r3, #1
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d126      	bne.n	800c46e <sgen_triangle+0x7e>
 800c420:	edd7 7a02 	vldr	s15, [r7, #8]
 800c424:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800c560 <sgen_triangle+0x170>
 800c428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c430:	bf94      	ite	ls
 800c432:	2301      	movls	r3, #1
 800c434:	2300      	movhi	r3, #0
 800c436:	b2db      	uxtb	r3, r3
 800c438:	f083 0301 	eor.w	r3, r3, #1
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d115      	bne.n	800c46e <sgen_triangle+0x7e>
 800c442:	edd7 7a01 	vldr	s15, [r7, #4]
 800c446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c44e:	bfcc      	ite	gt
 800c450:	2301      	movgt	r3, #1
 800c452:	2300      	movle	r3, #0
 800c454:	b2db      	uxtb	r3, r3
 800c456:	f083 0301 	eor.w	r3, r3, #1
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d106      	bne.n	800c46e <sgen_triangle+0x7e>
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	dd03      	ble.n	800c46e <sgen_triangle+0x7e>
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c46c:	db03      	blt.n	800c476 <sgen_triangle+0x86>
 800c46e:	2189      	movs	r1, #137	; 0x89
 800c470:	483c      	ldr	r0, [pc, #240]	; (800c564 <sgen_triangle+0x174>)
 800c472:	f000 f9fc 	bl	800c86e <assert2>

    self->mode = SINE;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2201      	movs	r2, #1
 800c47a:	705a      	strb	r2, [r3, #1]
    self->freq = f;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	605a      	str	r2, [r3, #4]
    self->ampl = A;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	609a      	str	r2, [r3, #8]
    self->samples = N;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	683a      	ldr	r2, [r7, #0]
 800c48c:	615a      	str	r2, [r3, #20]
    self->tim_f = f * N;
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	ee07 3a90 	vmov	s15, r3
 800c494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c498:	edd7 7a01 	vldr	s15, [r7, #4]
 800c49c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	edc3 7a03 	vstr	s15, [r3, #12]
    
    float a = (A/100.0*EM_DAC_MAX_VAL);
 800c4a6:	68b8      	ldr	r0, [r7, #8]
 800c4a8:	f7f4 f866 	bl	8000578 <__aeabi_f2d>
 800c4ac:	f04f 0200 	mov.w	r2, #0
 800c4b0:	4b2d      	ldr	r3, [pc, #180]	; (800c568 <sgen_triangle+0x178>)
 800c4b2:	f7f4 f9e3 	bl	800087c <__aeabi_ddiv>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	4621      	mov	r1, r4
 800c4be:	a326      	add	r3, pc, #152	; (adr r3, 800c558 <sgen_triangle+0x168>)
 800c4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c4:	f7f4 f8b0 	bl	8000628 <__aeabi_dmul>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	460c      	mov	r4, r1
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	4621      	mov	r1, r4
 800c4d0:	f7f4 fba2 	bl	8000c18 <__aeabi_d2f>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < N; i++)
 800c4d8:	2300      	movs	r3, #0
 800c4da:	617b      	str	r3, [r7, #20]
 800c4dc:	e033      	b.n	800c546 <sgen_triangle+0x156>
    {
        self->data[i] = (uint16_t)(a - abs(i % (uint16_t)(2*a) - a));
 800c4de:	edd7 7a04 	vldr	s15, [r7, #16]
 800c4e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c4e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4ea:	ee17 3a90 	vmov	r3, s15
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	fb93 f1f2 	sdiv	r1, r3, r2
 800c4f8:	fb02 f201 	mul.w	r2, r2, r1
 800c4fc:	1a9b      	subs	r3, r3, r2
 800c4fe:	ee07 3a90 	vmov	s15, r3
 800c502:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c506:	edd7 7a04 	vldr	s15, [r7, #16]
 800c50a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c50e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c512:	ee17 3a90 	vmov	r3, s15
 800c516:	2b00      	cmp	r3, #0
 800c518:	bfb8      	it	lt
 800c51a:	425b      	neglt	r3, r3
 800c51c:	ee07 3a90 	vmov	s15, r3
 800c520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c524:	ed97 7a04 	vldr	s14, [r7, #16]
 800c528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c52c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c530:	ee17 3a90 	vmov	r3, s15
 800c534:	b299      	uxth	r1, r3
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	697a      	ldr	r2, [r7, #20]
 800c53a:	320c      	adds	r2, #12
 800c53c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < N; i++)
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	3301      	adds	r3, #1
 800c544:	617b      	str	r3, [r7, #20]
 800c546:	697a      	ldr	r2, [r7, #20]
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	dbc7      	blt.n	800c4de <sgen_triangle+0xee>
    }
}
 800c54e:	bf00      	nop
 800c550:	371c      	adds	r7, #28
 800c552:	46bd      	mov	sp, r7
 800c554:	bd90      	pop	{r4, r7, pc}
 800c556:	bf00      	nop
 800c558:	00000000 	.word	0x00000000
 800c55c:	40affe00 	.word	0x40affe00
 800c560:	42c80000 	.word	0x42c80000
 800c564:	08015b80 	.word	0x08015b80
 800c568:	40590000 	.word	0x40590000
 800c56c:	00000000 	.word	0x00000000

0800c570 <sgen_saw>:

static void sgen_saw(sgen_data_t* self, float A, float f, int N)
{
 800c570:	b590      	push	{r4, r7, lr}
 800c572:	b089      	sub	sp, #36	; 0x24
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	ed87 0a02 	vstr	s0, [r7, #8]
 800c57c:	edc7 0a01 	vstr	s1, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
    ASSERT(A >= 0 && A <= 100 && f > 0 && N > 0 && N < EM_DAC_BUFF_LEN);
 800c582:	edd7 7a02 	vldr	s15, [r7, #8]
 800c586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c58e:	bfac      	ite	ge
 800c590:	2301      	movge	r3, #1
 800c592:	2300      	movlt	r3, #0
 800c594:	b2db      	uxtb	r3, r3
 800c596:	f083 0301 	eor.w	r3, r3, #1
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d126      	bne.n	800c5ee <sgen_saw+0x7e>
 800c5a0:	edd7 7a02 	vldr	s15, [r7, #8]
 800c5a4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c6c0 <sgen_saw+0x150>
 800c5a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b0:	bf94      	ite	ls
 800c5b2:	2301      	movls	r3, #1
 800c5b4:	2300      	movhi	r3, #0
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	f083 0301 	eor.w	r3, r3, #1
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d115      	bne.n	800c5ee <sgen_saw+0x7e>
 800c5c2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c5c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ce:	bfcc      	ite	gt
 800c5d0:	2301      	movgt	r3, #1
 800c5d2:	2300      	movle	r3, #0
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	f083 0301 	eor.w	r3, r3, #1
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d106      	bne.n	800c5ee <sgen_saw+0x7e>
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	dd03      	ble.n	800c5ee <sgen_saw+0x7e>
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5ec:	db03      	blt.n	800c5f6 <sgen_saw+0x86>
 800c5ee:	219a      	movs	r1, #154	; 0x9a
 800c5f0:	4834      	ldr	r0, [pc, #208]	; (800c6c4 <sgen_saw+0x154>)
 800c5f2:	f000 f93c 	bl	800c86e <assert2>

    self->mode = SINE;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	705a      	strb	r2, [r3, #1]
    self->freq = f;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	605a      	str	r2, [r3, #4]
    self->ampl = A;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	68ba      	ldr	r2, [r7, #8]
 800c606:	609a      	str	r2, [r3, #8]
    self->samples = N;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	615a      	str	r2, [r3, #20]
    self->tim_f = f * N;
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	ee07 3a90 	vmov	s15, r3
 800c614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c618:	edd7 7a01 	vldr	s15, [r7, #4]
 800c61c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	edc3 7a03 	vstr	s15, [r3, #12]

    float a = (A/100.0*EM_DAC_MAX_VAL);
 800c626:	68b8      	ldr	r0, [r7, #8]
 800c628:	f7f3 ffa6 	bl	8000578 <__aeabi_f2d>
 800c62c:	f04f 0200 	mov.w	r2, #0
 800c630:	4b25      	ldr	r3, [pc, #148]	; (800c6c8 <sgen_saw+0x158>)
 800c632:	f7f4 f923 	bl	800087c <__aeabi_ddiv>
 800c636:	4603      	mov	r3, r0
 800c638:	460c      	mov	r4, r1
 800c63a:	4618      	mov	r0, r3
 800c63c:	4621      	mov	r1, r4
 800c63e:	a31e      	add	r3, pc, #120	; (adr r3, 800c6b8 <sgen_saw+0x148>)
 800c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c644:	f7f3 fff0 	bl	8000628 <__aeabi_dmul>
 800c648:	4603      	mov	r3, r0
 800c64a:	460c      	mov	r4, r1
 800c64c:	4618      	mov	r0, r3
 800c64e:	4621      	mov	r1, r4
 800c650:	f7f4 fae2 	bl	8000c18 <__aeabi_d2f>
 800c654:	4603      	mov	r3, r0
 800c656:	617b      	str	r3, [r7, #20]
    float inc = a / (float)N;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	ee07 3a90 	vmov	s15, r3
 800c65e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c662:	edd7 6a05 	vldr	s13, [r7, #20]
 800c666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c66a:	edc7 7a04 	vstr	s15, [r7, #16]
    float _a;
    for (int i = 0; i < N; i++)
 800c66e:	2300      	movs	r3, #0
 800c670:	61bb      	str	r3, [r7, #24]
 800c672:	e016      	b.n	800c6a2 <sgen_saw+0x132>
    {
        self->data[i] = (uint16_t)(_a);
 800c674:	edd7 7a07 	vldr	s15, [r7, #28]
 800c678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c67c:	ee17 3a90 	vmov	r3, s15
 800c680:	b299      	uxth	r1, r3
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	69ba      	ldr	r2, [r7, #24]
 800c686:	320c      	adds	r2, #12
 800c688:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        _a += inc;
 800c68c:	ed97 7a07 	vldr	s14, [r7, #28]
 800c690:	edd7 7a04 	vldr	s15, [r7, #16]
 800c694:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c698:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < N; i++)
 800c69c:	69bb      	ldr	r3, [r7, #24]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	61bb      	str	r3, [r7, #24]
 800c6a2:	69ba      	ldr	r2, [r7, #24]
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	dbe4      	blt.n	800c674 <sgen_saw+0x104>
    }
}
 800c6aa:	bf00      	nop
 800c6ac:	3724      	adds	r7, #36	; 0x24
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd90      	pop	{r4, r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	f3af 8000 	nop.w
 800c6b8:	00000000 	.word	0x00000000
 800c6bc:	40affe00 	.word	0x40affe00
 800c6c0:	42c80000 	.word	0x42c80000
 800c6c4:	08015b80 	.word	0x08015b80
 800c6c8:	40590000 	.word	0x40590000
 800c6cc:	00000000 	.word	0x00000000

0800c6d0 <sgen_rand>:

static void sgen_rand(sgen_data_t* self, float A, float f, int N)
{
 800c6d0:	b590      	push	{r4, r7, lr}
 800c6d2:	b089      	sub	sp, #36	; 0x24
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	ed87 0a02 	vstr	s0, [r7, #8]
 800c6dc:	edc7 0a01 	vstr	s1, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
    ASSERT(A >= 0 && A <= 100 && f > 0 && N > 0 && N < EM_DAC_BUFF_LEN);
 800c6e2:	edd7 7a02 	vldr	s15, [r7, #8]
 800c6e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ee:	bfac      	ite	ge
 800c6f0:	2301      	movge	r3, #1
 800c6f2:	2300      	movlt	r3, #0
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	f083 0301 	eor.w	r3, r3, #1
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d126      	bne.n	800c74e <sgen_rand+0x7e>
 800c700:	edd7 7a02 	vldr	s15, [r7, #8]
 800c704:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800c810 <sgen_rand+0x140>
 800c708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c710:	bf94      	ite	ls
 800c712:	2301      	movls	r3, #1
 800c714:	2300      	movhi	r3, #0
 800c716:	b2db      	uxtb	r3, r3
 800c718:	f083 0301 	eor.w	r3, r3, #1
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d115      	bne.n	800c74e <sgen_rand+0x7e>
 800c722:	edd7 7a01 	vldr	s15, [r7, #4]
 800c726:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c72e:	bfcc      	ite	gt
 800c730:	2301      	movgt	r3, #1
 800c732:	2300      	movle	r3, #0
 800c734:	b2db      	uxtb	r3, r3
 800c736:	f083 0301 	eor.w	r3, r3, #1
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d106      	bne.n	800c74e <sgen_rand+0x7e>
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	dd03      	ble.n	800c74e <sgen_rand+0x7e>
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c74c:	db03      	blt.n	800c756 <sgen_rand+0x86>
 800c74e:	21ae      	movs	r1, #174	; 0xae
 800c750:	4830      	ldr	r0, [pc, #192]	; (800c814 <sgen_rand+0x144>)
 800c752:	f000 f88c 	bl	800c86e <assert2>

    self->mode = SINE;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2201      	movs	r2, #1
 800c75a:	705a      	strb	r2, [r3, #1]
    self->freq = f;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	605a      	str	r2, [r3, #4]
    self->ampl = A;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	609a      	str	r2, [r3, #8]
    self->samples = N;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	683a      	ldr	r2, [r7, #0]
 800c76c:	615a      	str	r2, [r3, #20]
    self->tim_f = f * N;
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	ee07 3a90 	vmov	s15, r3
 800c774:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c778:	edd7 7a01 	vldr	s15, [r7, #4]
 800c77c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	edc3 7a03 	vstr	s15, [r3, #12]

    int m_w = 1;
 800c786:	2301      	movs	r3, #1
 800c788:	61bb      	str	r3, [r7, #24]
    int m_z = 2; 
 800c78a:	2302      	movs	r3, #2
 800c78c:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < N; i++)
 800c78e:	2300      	movs	r3, #0
 800c790:	61fb      	str	r3, [r7, #28]
 800c792:	e02d      	b.n	800c7f0 <sgen_rand+0x120>
    {
        self->data[i] = (uint16_t)(((float)get_rnd(&m_w, &m_z) / 2147483647.0) * EM_DAC_MAX_VAL);
 800c794:	f107 0214 	add.w	r2, r7, #20
 800c798:	f107 0318 	add.w	r3, r7, #24
 800c79c:	4611      	mov	r1, r2
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f000 f83a 	bl	800c818 <get_rnd>
 800c7a4:	ee07 0a90 	vmov	s15, r0
 800c7a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7ac:	ee17 0a90 	vmov	r0, s15
 800c7b0:	f7f3 fee2 	bl	8000578 <__aeabi_f2d>
 800c7b4:	a312      	add	r3, pc, #72	; (adr r3, 800c800 <sgen_rand+0x130>)
 800c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ba:	f7f4 f85f 	bl	800087c <__aeabi_ddiv>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	460c      	mov	r4, r1
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	4621      	mov	r1, r4
 800c7c6:	a310      	add	r3, pc, #64	; (adr r3, 800c808 <sgen_rand+0x138>)
 800c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7cc:	f7f3 ff2c 	bl	8000628 <__aeabi_dmul>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	4621      	mov	r1, r4
 800c7d8:	f7f4 f9fe 	bl	8000bd8 <__aeabi_d2uiz>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	b299      	uxth	r1, r3
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	69fa      	ldr	r2, [r7, #28]
 800c7e4:	320c      	adds	r2, #12
 800c7e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < N; i++)
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	61fb      	str	r3, [r7, #28]
 800c7f0:	69fa      	ldr	r2, [r7, #28]
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	dbcd      	blt.n	800c794 <sgen_rand+0xc4>
    }
}
 800c7f8:	bf00      	nop
 800c7fa:	3724      	adds	r7, #36	; 0x24
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd90      	pop	{r4, r7, pc}
 800c800:	ffc00000 	.word	0xffc00000
 800c804:	41dfffff 	.word	0x41dfffff
 800c808:	00000000 	.word	0x00000000
 800c80c:	40affe00 	.word	0x40affe00
 800c810:	42c80000 	.word	0x42c80000
 800c814:	08015b80 	.word	0x08015b80

0800c818 <get_rnd>:

static int get_rnd(int* m_w, int* m_z)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
    *m_z = 36969L * (*m_z & 65535L) + (*m_z >> 16);
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	b29b      	uxth	r3, r3
 800c828:	f249 0269 	movw	r2, #36969	; 0x9069
 800c82c:	fb02 f203 	mul.w	r2, r2, r3
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	141b      	asrs	r3, r3, #16
 800c836:	441a      	add	r2, r3
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	601a      	str	r2, [r3, #0]
    *m_w = 18000L * (*m_w & 65535L) + (*m_w >> 16);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	b29b      	uxth	r3, r3
 800c842:	f244 6250 	movw	r2, #18000	; 0x4650
 800c846:	fb02 f203 	mul.w	r2, r2, r3
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	141b      	asrs	r3, r3, #16
 800c850:	441a      	add	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	601a      	str	r2, [r3, #0]
    return (*m_z << 16) + *m_w;
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	041a      	lsls	r2, r3, #16
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4413      	add	r3, r2
} 
 800c862:	4618      	mov	r0, r3
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <assert2>:
#include <string.h>
#include <math.h>


void assert2(const char *file, uint32_t line)
{
 800c86e:	b480      	push	{r7}
 800c870:	b083      	sub	sp, #12
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
    while(1);
 800c878:	e7fe      	b.n	800c878 <assert2+0xa>
	...

0800c87c <get_avg_from_circ>:
    //__asm("bkpt 3");
}

void get_avg_from_circ(int last_idx, int ch_num, int avg_num, int bufflen, void* buff, int daq_bits,
                       float* v1, float* v2, float* v3, float* v4, float* v5)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b088      	sub	sp, #32
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
 800c888:	603b      	str	r3, [r7, #0]
    int total = ch_num * avg_num;
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	fb02 f303 	mul.w	r3, r2, r3
 800c892:	613b      	str	r3, [r7, #16]
    ASSERT(v1 != NULL && total > 0 && buff != NULL);
 800c894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c896:	2b00      	cmp	r3, #0
 800c898:	d005      	beq.n	800c8a6 <get_avg_from_circ+0x2a>
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	dd02      	ble.n	800c8a6 <get_avg_from_circ+0x2a>
 800c8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d103      	bne.n	800c8ae <get_avg_from_circ+0x32>
 800c8a6:	2119      	movs	r1, #25
 800c8a8:	4876      	ldr	r0, [pc, #472]	; (800ca84 <get_avg_from_circ+0x208>)
 800c8aa:	f7ff ffe0 	bl	800c86e <assert2>

    for (int i = last_idx, j = 0; j < total; j++, i--)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	61fb      	str	r3, [r7, #28]
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	61bb      	str	r3, [r7, #24]
 800c8b6:	e08f      	b.n	800c9d8 <get_avg_from_circ+0x15c>
    {
        if (i < 0)
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	da02      	bge.n	800c8c4 <get_avg_from_circ+0x48>
            i = bufflen - 1;
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	61fb      	str	r3, [r7, #28]

        float val;
        if (daq_bits == 12)
 800c8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c6:	2b0c      	cmp	r3, #12
 800c8c8:	d10c      	bne.n	800c8e4 <get_avg_from_circ+0x68>
            val = (float)(*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	005b      	lsls	r3, r3, #1
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d2:	4413      	add	r3, r2
 800c8d4:	881b      	ldrh	r3, [r3, #0]
 800c8d6:	ee07 3a90 	vmov	s15, r3
 800c8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8de:	edc7 7a05 	vstr	s15, [r7, #20]
 800c8e2:	e009      	b.n	800c8f8 <get_avg_from_circ+0x7c>
        else
            val = (float)(((uint8_t*)buff)[i]);
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8e8:	4413      	add	r3, r2
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	ee07 3a90 	vmov	s15, r3
 800c8f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8f4:	edc7 7a05 	vstr	s15, [r7, #20]

        if (i % ch_num == 0)
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	68ba      	ldr	r2, [r7, #8]
 800c8fc:	fb93 f2f2 	sdiv	r2, r3, r2
 800c900:	68b9      	ldr	r1, [r7, #8]
 800c902:	fb01 f202 	mul.w	r2, r1, r2
 800c906:	1a9b      	subs	r3, r3, r2
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10a      	bne.n	800c922 <get_avg_from_circ+0xa6>
            *v1 += val;
 800c90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90e:	ed93 7a00 	vldr	s14, [r3]
 800c912:	edd7 7a05 	vldr	s15, [r7, #20]
 800c916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91c:	edc3 7a00 	vstr	s15, [r3]
 800c920:	e054      	b.n	800c9cc <get_avg_from_circ+0x150>
        else if (ch_num > 1 && i % ch_num == 1)
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2b01      	cmp	r3, #1
 800c926:	dd14      	ble.n	800c952 <get_avg_from_circ+0xd6>
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	fb93 f2f2 	sdiv	r2, r3, r2
 800c930:	68b9      	ldr	r1, [r7, #8]
 800c932:	fb01 f202 	mul.w	r2, r1, r2
 800c936:	1a9b      	subs	r3, r3, r2
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d10a      	bne.n	800c952 <get_avg_from_circ+0xd6>
            *v2 += val;
 800c93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c93e:	ed93 7a00 	vldr	s14, [r3]
 800c942:	edd7 7a05 	vldr	s15, [r7, #20]
 800c946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c94c:	edc3 7a00 	vstr	s15, [r3]
 800c950:	e03c      	b.n	800c9cc <get_avg_from_circ+0x150>
        else if (ch_num > 2 && i % ch_num == 2)
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	2b02      	cmp	r3, #2
 800c956:	dd14      	ble.n	800c982 <get_avg_from_circ+0x106>
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	68ba      	ldr	r2, [r7, #8]
 800c95c:	fb93 f2f2 	sdiv	r2, r3, r2
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	fb01 f202 	mul.w	r2, r1, r2
 800c966:	1a9b      	subs	r3, r3, r2
 800c968:	2b02      	cmp	r3, #2
 800c96a:	d10a      	bne.n	800c982 <get_avg_from_circ+0x106>
            *v3 += val;
 800c96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96e:	ed93 7a00 	vldr	s14, [r3]
 800c972:	edd7 7a05 	vldr	s15, [r7, #20]
 800c976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97c:	edc3 7a00 	vstr	s15, [r3]
 800c980:	e024      	b.n	800c9cc <get_avg_from_circ+0x150>
        else if (ch_num > 3 && i % ch_num == 3)
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	2b03      	cmp	r3, #3
 800c986:	dd14      	ble.n	800c9b2 <get_avg_from_circ+0x136>
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	fb93 f2f2 	sdiv	r2, r3, r2
 800c990:	68b9      	ldr	r1, [r7, #8]
 800c992:	fb01 f202 	mul.w	r2, r1, r2
 800c996:	1a9b      	subs	r3, r3, r2
 800c998:	2b03      	cmp	r3, #3
 800c99a:	d10a      	bne.n	800c9b2 <get_avg_from_circ+0x136>
            *v4 += val;
 800c99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c99e:	ed93 7a00 	vldr	s14, [r3]
 800c9a2:	edd7 7a05 	vldr	s15, [r7, #20]
 800c9a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ac:	edc3 7a00 	vstr	s15, [r3]
 800c9b0:	e00c      	b.n	800c9cc <get_avg_from_circ+0x150>
        else if (ch_num > 4)  // && i % ch_num == 4)
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	2b04      	cmp	r3, #4
 800c9b6:	dd09      	ble.n	800c9cc <get_avg_from_circ+0x150>
            *v5 += val;
 800c9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ba:	ed93 7a00 	vldr	s14, [r3]
 800c9be:	edd7 7a05 	vldr	s15, [r7, #20]
 800c9c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9c8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = last_idx, j = 0; j < total; j++, i--)
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	61bb      	str	r3, [r7, #24]
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	61fb      	str	r3, [r7, #28]
 800c9d8:	69ba      	ldr	r2, [r7, #24]
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	f6ff af6b 	blt.w	800c8b8 <get_avg_from_circ+0x3c>
    }
    *v1 /= avg_num;
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e4:	edd3 6a00 	vldr	s13, [r3]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	ee07 3a90 	vmov	s15, r3
 800c9ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c9f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f8:	edc3 7a00 	vstr	s15, [r3]
    if (v2 != NULL) *v2 /= avg_num;
 800c9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00c      	beq.n	800ca1c <get_avg_from_circ+0x1a0>
 800ca02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca04:	edd3 6a00 	vldr	s13, [r3]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca18:	edc3 7a00 	vstr	s15, [r3]
    if (v3 != NULL) *v3 /= avg_num;
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00c      	beq.n	800ca3c <get_avg_from_circ+0x1c0>
 800ca22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca24:	edd3 6a00 	vldr	s13, [r3]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	ee07 3a90 	vmov	s15, r3
 800ca2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	edc3 7a00 	vstr	s15, [r3]
    if (v4 != NULL) *v4 /= avg_num;
 800ca3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00c      	beq.n	800ca5c <get_avg_from_circ+0x1e0>
 800ca42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca44:	edd3 6a00 	vldr	s13, [r3]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	ee07 3a90 	vmov	s15, r3
 800ca4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca58:	edc3 7a00 	vstr	s15, [r3]
    if (v5 != NULL) *v5 /= avg_num;
 800ca5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00c      	beq.n	800ca7c <get_avg_from_circ+0x200>
 800ca62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca64:	edd3 6a00 	vldr	s13, [r3]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	ee07 3a90 	vmov	s15, r3
 800ca6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca78:	edc3 7a00 	vstr	s15, [r3]
}
 800ca7c:	bf00      	nop
 800ca7e:	3720      	adds	r7, #32
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	08015ba8 	.word	0x08015ba8

0800ca88 <get_1ch_from_circ>:
    }
    return ret /= avg_num;
}

int get_1ch_from_circ(int from, int total, int bufflen, int ch, int ch_num, int daq_bits, float vcc, float vref_cal, void* buff, uint8_t* out, int* idx)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b08e      	sub	sp, #56	; 0x38
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	61f8      	str	r0, [r7, #28]
 800ca90:	61b9      	str	r1, [r7, #24]
 800ca92:	617a      	str	r2, [r7, #20]
 800ca94:	613b      	str	r3, [r7, #16]
 800ca96:	ed87 0a03 	vstr	s0, [r7, #12]
 800ca9a:	edc7 0a02 	vstr	s1, [r7, #8]
    ASSERT(ch > 0 && ch_num > 0 && total > 0 && buff != NULL);
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	dd08      	ble.n	800cab6 <get_1ch_from_circ+0x2e>
 800caa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	dd05      	ble.n	800cab6 <get_1ch_from_circ+0x2e>
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	2b00      	cmp	r3, #0
 800caae:	dd02      	ble.n	800cab6 <get_1ch_from_circ+0x2e>
 800cab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d103      	bne.n	800cabe <get_1ch_from_circ+0x36>
 800cab6:	2164      	movs	r1, #100	; 0x64
 800cab8:	4848      	ldr	r0, [pc, #288]	; (800cbdc <get_1ch_from_circ+0x154>)
 800caba:	f7ff fed8 	bl	800c86e <assert2>

    int found = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	637b      	str	r3, [r7, #52]	; 0x34

    for (int k = 0, i = from; k < total; k++, i++)
 800cac2:	2300      	movs	r3, #0
 800cac4:	633b      	str	r3, [r7, #48]	; 0x30
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800caca:	e07d      	b.n	800cbc8 <get_1ch_from_circ+0x140>
    {
        if (i >= bufflen)
 800cacc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	db01      	blt.n	800cad8 <get_1ch_from_circ+0x50>
            i = 0;
 800cad4:	2300      	movs	r3, #0
 800cad6:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (i % ch_num == ch - 1)
 800cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cadc:	fb93 f2f2 	sdiv	r2, r3, r2
 800cae0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cae2:	fb01 f202 	mul.w	r2, r1, r2
 800cae6:	1a9a      	subs	r2, r3, r2
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	3b01      	subs	r3, #1
 800caec:	429a      	cmp	r2, r3
 800caee:	d165      	bne.n	800cbbc <get_1ch_from_circ+0x134>
        {
            found++;
 800caf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf2:	3301      	adds	r3, #1
 800caf4:	637b      	str	r3, [r7, #52]	; 0x34
            float val = 0;
 800caf6:	f04f 0300 	mov.w	r3, #0
 800cafa:	62bb      	str	r3, [r7, #40]	; 0x28
            if (daq_bits == 12)
 800cafc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cafe:	2b0c      	cmp	r3, #12
 800cb00:	d136      	bne.n	800cb70 <get_1ch_from_circ+0xe8>
            {
                val = (float) (*((uint16_t*)(((uint8_t*)buff)+(i*2))));
 800cb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb04:	005b      	lsls	r3, r3, #1
 800cb06:	461a      	mov	r2, r3
 800cb08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb0a:	4413      	add	r3, r2
 800cb0c:	881b      	ldrh	r3, [r3, #0]
 800cb0e:	ee07 3a90 	vmov	s15, r3
 800cb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                uint16_t ret = (uint16_t)(vref_cal * (val / vcc)); // 0.8 mV precision rounded (output in mV*10)
 800cb1a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cb1e:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb26:	edd7 7a02 	vldr	s15, [r7, #8]
 800cb2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb32:	ee17 3a90 	vmov	r3, s15
 800cb36:	84bb      	strh	r3, [r7, #36]	; 0x24
                out[(*idx)++] = LO_BYTE16(ret);
 800cb38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	1c59      	adds	r1, r3, #1
 800cb3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb40:	6011      	str	r1, [r2, #0]
 800cb42:	461a      	mov	r2, r3
 800cb44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb46:	4413      	add	r3, r2
 800cb48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb4a:	b2d2      	uxtb	r2, r2
 800cb4c:	701a      	strb	r2, [r3, #0]
                out[(*idx)++] = HI_BYTE16(ret);
 800cb4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb50:	0a1b      	lsrs	r3, r3, #8
 800cb52:	b298      	uxth	r0, r3
 800cb54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	1c59      	adds	r1, r3, #1
 800cb5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb5c:	6011      	str	r1, [r2, #0]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb62:	4413      	add	r3, r2
 800cb64:	b2c2      	uxtb	r2, r0
 800cb66:	701a      	strb	r2, [r3, #0]
                found++;
 800cb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb6e:	e025      	b.n	800cbbc <get_1ch_from_circ+0x134>
            }
            else // (daq_bits == 8)
            {
                val = (float)(((uint8_t*)buff)[i]);
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb74:	4413      	add	r3, r2
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	ee07 3a90 	vmov	s15, r3
 800cb7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb80:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                uint8_t ret = (uint8_t)(vref_cal * (val / vcc));   // 13 mV precision rounded (output in mV/10)
 800cb84:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cb88:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb90:	edd7 7a02 	vldr	s15, [r7, #8]
 800cb94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb9c:	edc7 7a01 	vstr	s15, [r7, #4]
 800cba0:	793b      	ldrb	r3, [r7, #4]
 800cba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                out[(*idx)++] = ret;
 800cba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	1c59      	adds	r1, r3, #1
 800cbac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbae:	6011      	str	r1, [r2, #0]
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb4:	4413      	add	r3, r2
 800cbb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cbba:	701a      	strb	r2, [r3, #0]
    for (int k = 0, i = from; k < total; k++, i++)
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	633b      	str	r3, [r7, #48]	; 0x30
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	f6ff af7d 	blt.w	800cacc <get_1ch_from_circ+0x44>
            }
        }
    }
    return found;
 800cbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3738      	adds	r7, #56	; 0x38
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	08015ba8 	.word	0x08015ba8

0800cbe0 <get_freq>:

// freq_want = freq_osc/((prescaler+1)*(reload+1))
// (prescaler+1)*(reload+1) = freq_osc/freq_want
float get_freq(int* prescaler, int* reload, int max_reload, int freq_osc, int freq_want)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
 800cbec:	603b      	str	r3, [r7, #0]
    ASSERT(freq_osc >= freq_want && freq_want > 0 && freq_osc > 0 && max_reload > 0);
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	db08      	blt.n	800cc08 <get_freq+0x28>
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	dd05      	ble.n	800cc08 <get_freq+0x28>
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	dd02      	ble.n	800cc08 <get_freq+0x28>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	dc03      	bgt.n	800cc10 <get_freq+0x30>
 800cc08:	2188      	movs	r1, #136	; 0x88
 800cc0a:	4829      	ldr	r0, [pc, #164]	; (800ccb0 <get_freq+0xd0>)
 800cc0c:	f7ff fe2f 	bl	800c86e <assert2>
    *prescaler = 0;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2200      	movs	r2, #0
 800cc14:	601a      	str	r2, [r3, #0]

    do
    {
        *reload = (int)((float)freq_osc / (float)(*prescaler + 1) / (float)freq_want) - 1; // TODO check negative reload?
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	ee07 3a90 	vmov	s15, r3
 800cc1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	3301      	adds	r3, #1
 800cc26:	ee07 3a90 	vmov	s15, r3
 800cc2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	ee07 3a90 	vmov	s15, r3
 800cc38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cc3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc44:	ee17 3a90 	vmov	r3, s15
 800cc48:	1e5a      	subs	r2, r3, #1
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	601a      	str	r2, [r3, #0]
        if (*reload > max_reload)
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	da04      	bge.n	800cc62 <get_freq+0x82>
            (*prescaler)++;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	1c5a      	adds	r2, r3, #1
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	601a      	str	r2, [r3, #0]
    }
    while (*reload > max_reload);
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	dbd4      	blt.n	800cc16 <get_freq+0x36>

    float ret  = (float)freq_osc / ((float)(*prescaler + 1) * (float)(*reload + 1));
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	ee07 3a90 	vmov	s15, r3
 800cc72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	ee07 3a90 	vmov	s15, r3
 800cc80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	ee07 3a90 	vmov	s15, r3
 800cc8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc9a:	edc7 7a05 	vstr	s15, [r7, #20]
    return ret;
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	ee07 3a90 	vmov	s15, r3
}
 800cca4:	eeb0 0a67 	vmov.f32	s0, s15
 800cca8:	3718      	adds	r7, #24
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	08015ba8 	.word	0x08015ba8
 800ccb4:	00000000 	.word	0x00000000

0800ccb8 <sprint_fast>:

/* Author: Jakub Parez
 * Descr:  ultra fast float sprintf
 */
void sprint_fast(char* s, const char* format, float fVal, int prec)
{
 800ccb8:	b5b0      	push	{r4, r5, r7, lr}
 800ccba:	b0bc      	sub	sp, #240	; 0xf0
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	ed87 0a01 	vstr	s0, [r7, #4]
 800ccc6:	603a      	str	r2, [r7, #0]
    char result[100] = { '\0' };
 800ccc8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800cccc:	2264      	movs	r2, #100	; 0x64
 800ccce:	2100      	movs	r1, #0
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f005 fde3 	bl	801289c <memset>
    char result_rev[100] = { '\0' };
 800ccd6:	f107 0314 	add.w	r3, r7, #20
 800ccda:	2264      	movs	r2, #100	; 0x64
 800ccdc:	2100      	movs	r1, #0
 800ccde:	4618      	mov	r0, r3
 800cce0:	f005 fddc 	bl	801289c <memset>
    int dVal, dec, i, j, k;

    if (prec <= 0)
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	dc13      	bgt.n	800cd12 <sprint_fast+0x5a>
    {
        sprintf(result, "%d", (int)fVal);
 800ccea:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ccf2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ccf6:	ee17 2a90 	vmov	r2, s15
 800ccfa:	4989      	ldr	r1, [pc, #548]	; (800cf20 <sprint_fast+0x268>)
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f005 fdd5 	bl	80128ac <siprintf>
        sprintf(s, format, result);
 800cd02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800cd06:	461a      	mov	r2, r3
 800cd08:	68b9      	ldr	r1, [r7, #8]
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f005 fdce 	bl	80128ac <siprintf>
 800cd10:	e0f8      	b.n	800cf04 <sprint_fast+0x24c>
        return;
    }

    fVal += 0.5 * pow(0.1, prec);
 800cd12:	6838      	ldr	r0, [r7, #0]
 800cd14:	f7f3 fc1e 	bl	8000554 <__aeabi_i2d>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	460c      	mov	r4, r1
 800cd1c:	ec44 3b11 	vmov	d1, r3, r4
 800cd20:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 800cf10 <sprint_fast+0x258>
 800cd24:	f006 fcf0 	bl	8013708 <pow>
 800cd28:	ec51 0b10 	vmov	r0, r1, d0
 800cd2c:	f04f 0200 	mov.w	r2, #0
 800cd30:	4b7c      	ldr	r3, [pc, #496]	; (800cf24 <sprint_fast+0x26c>)
 800cd32:	f7f3 fc79 	bl	8000628 <__aeabi_dmul>
 800cd36:	4603      	mov	r3, r0
 800cd38:	460c      	mov	r4, r1
 800cd3a:	4625      	mov	r5, r4
 800cd3c:	461c      	mov	r4, r3
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7f3 fc1a 	bl	8000578 <__aeabi_f2d>
 800cd44:	4602      	mov	r2, r0
 800cd46:	460b      	mov	r3, r1
 800cd48:	4620      	mov	r0, r4
 800cd4a:	4629      	mov	r1, r5
 800cd4c:	f7f3 fab6 	bl	80002bc <__adddf3>
 800cd50:	4603      	mov	r3, r0
 800cd52:	460c      	mov	r4, r1
 800cd54:	4618      	mov	r0, r3
 800cd56:	4621      	mov	r1, r4
 800cd58:	f7f3 ff5e 	bl	8000c18 <__aeabi_d2f>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	607b      	str	r3, [r7, #4]
    k = pow(10, prec);
 800cd60:	6838      	ldr	r0, [r7, #0]
 800cd62:	f7f3 fbf7 	bl	8000554 <__aeabi_i2d>
 800cd66:	4603      	mov	r3, r0
 800cd68:	460c      	mov	r4, r1
 800cd6a:	ec44 3b11 	vmov	d1, r3, r4
 800cd6e:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 800cf18 <sprint_fast+0x260>
 800cd72:	f006 fcc9 	bl	8013708 <pow>
 800cd76:	ec54 3b10 	vmov	r3, r4, d0
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	f7f3 ff03 	bl	8000b88 <__aeabi_d2iz>
 800cd82:	4603      	mov	r3, r0
 800cd84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    dVal = fVal;
 800cd88:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd90:	ee17 3a90 	vmov	r3, s15
 800cd94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    dec = ((int)(fVal * k)) % k;
 800cd98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd9c:	ee07 3a90 	vmov	s15, r3
 800cda0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cda4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cda8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cdb0:	ee17 1a90 	vmov	r1, s15
 800cdb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdb8:	fb91 f3f3 	sdiv	r3, r1, r3
 800cdbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cdc0:	fb02 f303 	mul.w	r3, r2, r3
 800cdc4:	1acb      	subs	r3, r1, r3
 800cdc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    for (i = 0; i < prec; i++)
 800cdca:	2300      	movs	r3, #0
 800cdcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cdd0:	e025      	b.n	800ce1e <sprint_fast+0x166>
    {
        result[i] = (dec % 10) + '0';
 800cdd2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800cdd6:	4b54      	ldr	r3, [pc, #336]	; (800cf28 <sprint_fast+0x270>)
 800cdd8:	fb83 1302 	smull	r1, r3, r3, r2
 800cddc:	1099      	asrs	r1, r3, #2
 800cdde:	17d3      	asrs	r3, r2, #31
 800cde0:	1ac9      	subs	r1, r1, r3
 800cde2:	460b      	mov	r3, r1
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	440b      	add	r3, r1
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	1ad1      	subs	r1, r2, r3
 800cdec:	b2cb      	uxtb	r3, r1
 800cdee:	3330      	adds	r3, #48	; 0x30
 800cdf0:	b2d9      	uxtb	r1, r3
 800cdf2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800cdf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdfa:	4413      	add	r3, r2
 800cdfc:	460a      	mov	r2, r1
 800cdfe:	701a      	strb	r2, [r3, #0]
        dec /= 10;
 800ce00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ce04:	4a48      	ldr	r2, [pc, #288]	; (800cf28 <sprint_fast+0x270>)
 800ce06:	fb82 1203 	smull	r1, r2, r2, r3
 800ce0a:	1092      	asrs	r2, r2, #2
 800ce0c:	17db      	asrs	r3, r3, #31
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    for (i = 0; i < prec; i++)
 800ce14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce18:	3301      	adds	r3, #1
 800ce1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	dbd4      	blt.n	800cdd2 <sprint_fast+0x11a>
    }

    result[i] = '.';
 800ce28:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ce2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce30:	4413      	add	r3, r2
 800ce32:	222e      	movs	r2, #46	; 0x2e
 800ce34:	701a      	strb	r2, [r3, #0]
    i++;
 800ce36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    if (dVal > 0)
 800ce40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	dd30      	ble.n	800ceaa <sprint_fast+0x1f2>
    {
        while (dVal > 0)
 800ce48:	e025      	b.n	800ce96 <sprint_fast+0x1de>
        {
            result[i] = (dVal % 10) + '0';
 800ce4a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ce4e:	4b36      	ldr	r3, [pc, #216]	; (800cf28 <sprint_fast+0x270>)
 800ce50:	fb83 1302 	smull	r1, r3, r3, r2
 800ce54:	1099      	asrs	r1, r3, #2
 800ce56:	17d3      	asrs	r3, r2, #31
 800ce58:	1ac9      	subs	r1, r1, r3
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	440b      	add	r3, r1
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	1ad1      	subs	r1, r2, r3
 800ce64:	b2cb      	uxtb	r3, r1
 800ce66:	3330      	adds	r3, #48	; 0x30
 800ce68:	b2d9      	uxtb	r1, r3
 800ce6a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ce6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce72:	4413      	add	r3, r2
 800ce74:	460a      	mov	r2, r1
 800ce76:	701a      	strb	r2, [r3, #0]
            dVal /= 10;
 800ce78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ce7c:	4a2a      	ldr	r2, [pc, #168]	; (800cf28 <sprint_fast+0x270>)
 800ce7e:	fb82 1203 	smull	r1, r2, r2, r3
 800ce82:	1092      	asrs	r2, r2, #2
 800ce84:	17db      	asrs	r3, r3, #31
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            i++;
 800ce8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce90:	3301      	adds	r3, #1
 800ce92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        while (dVal > 0)
 800ce96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	dcd5      	bgt.n	800ce4a <sprint_fast+0x192>
        }
        i--;
 800ce9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cea2:	3b01      	subs	r3, #1
 800cea4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cea8:	e006      	b.n	800ceb8 <sprint_fast+0x200>
    }
    else
        result[i] = '0';
 800ceaa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ceae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ceb2:	4413      	add	r3, r2
 800ceb4:	2230      	movs	r2, #48	; 0x30
 800ceb6:	701a      	strb	r2, [r3, #0]

    for (j = 0; i >= 0; i--, j++)
 800ceb8:	2300      	movs	r3, #0
 800ceba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cebe:	e016      	b.n	800ceee <sprint_fast+0x236>
        result_rev[j] = result[i];
 800cec0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800cec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cec8:	4413      	add	r3, r2
 800ceca:	7819      	ldrb	r1, [r3, #0]
 800cecc:	f107 0214 	add.w	r2, r7, #20
 800ced0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ced4:	4413      	add	r3, r2
 800ced6:	460a      	mov	r2, r1
 800ced8:	701a      	strb	r2, [r3, #0]
    for (j = 0; i >= 0; i--, j++)
 800ceda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cede:	3b01      	subs	r3, #1
 800cee0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cee8:	3301      	adds	r3, #1
 800ceea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ceee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	dae4      	bge.n	800cec0 <sprint_fast+0x208>

    sprintf(s, format, result_rev);
 800cef6:	f107 0314 	add.w	r3, r7, #20
 800cefa:	461a      	mov	r2, r3
 800cefc:	68b9      	ldr	r1, [r7, #8]
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f005 fcd4 	bl	80128ac <siprintf>
}
 800cf04:	37f0      	adds	r7, #240	; 0xf0
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bdb0      	pop	{r4, r5, r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	f3af 8000 	nop.w
 800cf10:	9999999a 	.word	0x9999999a
 800cf14:	3fb99999 	.word	0x3fb99999
 800cf18:	00000000 	.word	0x00000000
 800cf1c:	40240000 	.word	0x40240000
 800cf20:	08015bd4 	.word	0x08015bd4
 800cf24:	3fe00000 	.word	0x3fe00000
 800cf28:	66666667 	.word	0x66666667

0800cf2c <SCPI_ErrorInit>:

/**
 * Initialize error queue
 * @param context - scpi context
 */
void SCPI_ErrorInit(scpi_t * context, scpi_error_t * data, int16_t size) {
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	4613      	mov	r3, r2
 800cf38:	80fb      	strh	r3, [r7, #6]
    fifo_init(&context->error_queue, data, size);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	333c      	adds	r3, #60	; 0x3c
 800cf3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cf42:	68b9      	ldr	r1, [r7, #8]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f000 fa15 	bl	800d374 <fifo_init>
}
 800cf4a:	bf00      	nop
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <SCPI_ErrorEmitEmpty>:

/**
 * Emit no error
 * @param context scpi context
 */
static void SCPI_ErrorEmitEmpty(scpi_t * context) {
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b082      	sub	sp, #8
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
    if ((SCPI_ErrorCount(context) == 0) && (SCPI_RegGet(context, SCPI_REG_STB) & STB_QMA)) {
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 f872 	bl	800d044 <SCPI_ErrorCount>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d11c      	bne.n	800cfa0 <SCPI_ErrorEmitEmpty+0x4e>
 800cf66:	2100      	movs	r1, #0
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 fb7a 	bl	800d662 <SCPI_RegGet>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	f003 0304 	and.w	r3, r3, #4
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d013      	beq.n	800cfa0 <SCPI_ErrorEmitEmpty+0x4e>
        SCPI_RegClearBits(context, SCPI_REG_STB, STB_QMA);
 800cf78:	2204      	movs	r2, #4
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 fc70 	bl	800d862 <SCPI_RegClearBits>

        if (context->interface && context->interface->error) {
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00a      	beq.n	800cfa0 <SCPI_ErrorEmitEmpty+0x4e>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d005      	beq.n	800cfa0 <SCPI_ErrorEmitEmpty+0x4e>
            context->interface->error(context, 0);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	4798      	blx	r3
        }
    }
}
 800cfa0:	bf00      	nop
 800cfa2:	3708      	adds	r7, #8
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <SCPI_ErrorEmit>:
/**
 * Emit error
 * @param context scpi context
 * @param err Error to emit
 */
static void SCPI_ErrorEmit(scpi_t * context, int16_t err) {
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	807b      	strh	r3, [r7, #2]
    SCPI_RegSetBits(context, SCPI_REG_STB, STB_QMA);
 800cfb4:	2204      	movs	r2, #4
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 fc37 	bl	800d82c <SCPI_RegSetBits>

    if (context->interface && context->interface->error) {
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00c      	beq.n	800cfe0 <SCPI_ErrorEmit+0x38>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d007      	beq.n	800cfe0 <SCPI_ErrorEmit+0x38>
        context->interface->error(context, err);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800cfda:	4611      	mov	r1, r2
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	4798      	blx	r3
    }
}
 800cfe0:	bf00      	nop
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    while (fifo_remove(&context->error_queue, &error)) {
        SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
    }
#endif
    fifo_clear(&context->error_queue);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	333c      	adds	r3, #60	; 0x3c
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 f9d9 	bl	800d3ac <fifo_clear>

    SCPI_ErrorEmitEmpty(context);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f7ff ffa9 	bl	800cf52 <SCPI_ErrorEmitEmpty>
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <SCPI_ErrorPop>:
 * Pop error from queue
 * @param context - scpi context
 * @param error
 * @return
 */
scpi_bool_t SCPI_ErrorPop(scpi_t * context, scpi_error_t * error) {
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
    if (!error || !context) return FALSE;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d002      	beq.n	800d01e <SCPI_ErrorPop+0x16>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d101      	bne.n	800d022 <SCPI_ErrorPop+0x1a>
 800d01e:	2300      	movs	r3, #0
 800d020:	e00c      	b.n	800d03c <SCPI_ErrorPop+0x34>
    SCPI_ERROR_SETVAL(error, 0, NULL);
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	2200      	movs	r2, #0
 800d026:	801a      	strh	r2, [r3, #0]
    fifo_remove(&context->error_queue, error);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	333c      	adds	r3, #60	; 0x3c
 800d02c:	6839      	ldr	r1, [r7, #0]
 800d02e:	4618      	mov	r0, r3
 800d030:	f000 fa2f 	bl	800d492 <fifo_remove>

    SCPI_ErrorEmitEmpty(context);
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f7ff ff8c 	bl	800cf52 <SCPI_ErrorEmitEmpty>

    return TRUE;
 800d03a:	2301      	movs	r3, #1
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3708      	adds	r7, #8
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
    int16_t result = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	81fb      	strh	r3, [r7, #14]

    fifo_count(&context->error_queue, &result);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	333c      	adds	r3, #60	; 0x3c
 800d054:	f107 020e 	add.w	r2, r7, #14
 800d058:	4611      	mov	r1, r2
 800d05a:	4618      	mov	r0, r3
 800d05c:	f000 fa8c 	bl	800d578 <fifo_count>

    return result;
 800d060:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d064:	4618      	mov	r0, r3
 800d066:	3710      	adds	r7, #16
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <SCPI_ErrorAddInternal>:

static scpi_bool_t SCPI_ErrorAddInternal(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	607a      	str	r2, [r7, #4]
 800d076:	603b      	str	r3, [r7, #0]
 800d078:	460b      	mov	r3, r1
 800d07a:	817b      	strh	r3, [r7, #10]
    scpi_error_t error_value;
    /* SCPIDEFINE_strndup is sometimes a dumy that does not reference it's arguments. 
       Since info_len is not referenced elsewhere caoing to void prevents unusd argument warnings */
    (void) info_len;
    char * info_ptr = info ? SCPIDEFINE_strndup(&context->error_info_heap, info, info_len) : NULL;
 800d07c:	2300      	movs	r3, #0
 800d07e:	617b      	str	r3, [r7, #20]
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
 800d080:	897b      	ldrh	r3, [r7, #10]
 800d082:	823b      	strh	r3, [r7, #16]
    if (!fifo_add(&context->error_queue, &error_value)) {
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	333c      	adds	r3, #60	; 0x3c
 800d088:	f107 0210 	add.w	r2, r7, #16
 800d08c:	4611      	mov	r1, r2
 800d08e:	4618      	mov	r0, r3
 800d090:	f000 f9c6 	bl	800d420 <fifo_add>
 800d094:	4603      	mov	r3, r0
 800d096:	f083 0301 	eor.w	r3, r3, #1
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d014      	beq.n	800d0ca <SCPI_ErrorAddInternal+0x5e>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        fifo_remove_last(&context->error_queue, &error_value);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	333c      	adds	r3, #60	; 0x3c
 800d0a4:	f107 0210 	add.w	r2, r7, #16
 800d0a8:	4611      	mov	r1, r2
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f000 fa28 	bl	800d500 <fifo_remove_last>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 800d0b0:	f64f 63a2 	movw	r3, #65186	; 0xfea2
 800d0b4:	823b      	strh	r3, [r7, #16]
        fifo_add(&context->error_queue, &error_value);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	333c      	adds	r3, #60	; 0x3c
 800d0ba:	f107 0210 	add.w	r2, r7, #16
 800d0be:	4611      	mov	r1, r2
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f000 f9ad 	bl	800d420 <fifo_add>
        return FALSE;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	e000      	b.n	800d0cc <SCPI_ErrorAddInternal+0x60>
    }
    return TRUE;
 800d0ca:	2301      	movs	r3, #1
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3718      	adds	r7, #24
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b086      	sub	sp, #24
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	607a      	str	r2, [r7, #4]
 800d0de:	603b      	str	r3, [r7, #0]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	817b      	strh	r3, [r7, #10]
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d007      	beq.n	800d0fa <SCPI_ErrorPushEx+0x26>
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d104      	bne.n	800d0fa <SCPI_ErrorPushEx+0x26>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
 800d0f0:	21ff      	movs	r1, #255	; 0xff
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f005 fc2c 	bl	8012950 <strnlen>
 800d0f8:	6038      	str	r0, [r7, #0]
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);
 800d0fa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f7ff ffb2 	bl	800d06c <SCPI_ErrorAddInternal>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	bf14      	ite	ne
 800d10e:	2301      	movne	r3, #1
 800d110:	2300      	moveq	r3, #0
 800d112:	b2db      	uxtb	r3, r3
 800d114:	f083 0301 	eor.w	r3, r3, #1
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	74fb      	strb	r3, [r7, #19]
 800d11c:	7cfb      	ldrb	r3, [r7, #19]
 800d11e:	f003 0301 	and.w	r3, r3, #1
 800d122:	74fb      	strb	r3, [r7, #19]

    for (i = 0; i < ERROR_DEFS_N; i++) {
 800d124:	2300      	movs	r3, #0
 800d126:	617b      	str	r3, [r7, #20]
 800d128:	e02b      	b.n	800d182 <SCPI_ErrorPushEx+0xae>
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 800d12a:	4926      	ldr	r1, [pc, #152]	; (800d1c4 <SCPI_ErrorPushEx+0xf0>)
 800d12c:	697a      	ldr	r2, [r7, #20]
 800d12e:	4613      	mov	r3, r2
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	4413      	add	r3, r2
 800d134:	005b      	lsls	r3, r3, #1
 800d136:	440b      	add	r3, r1
 800d138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d13c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800d140:	429a      	cmp	r2, r3
 800d142:	dc1b      	bgt.n	800d17c <SCPI_ErrorPushEx+0xa8>
 800d144:	491f      	ldr	r1, [pc, #124]	; (800d1c4 <SCPI_ErrorPushEx+0xf0>)
 800d146:	697a      	ldr	r2, [r7, #20]
 800d148:	4613      	mov	r3, r2
 800d14a:	005b      	lsls	r3, r3, #1
 800d14c:	4413      	add	r3, r2
 800d14e:	005b      	lsls	r3, r3, #1
 800d150:	440b      	add	r3, r1
 800d152:	3302      	adds	r3, #2
 800d154:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d158:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	db0d      	blt.n	800d17c <SCPI_ErrorPushEx+0xa8>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
 800d160:	4918      	ldr	r1, [pc, #96]	; (800d1c4 <SCPI_ErrorPushEx+0xf0>)
 800d162:	697a      	ldr	r2, [r7, #20]
 800d164:	4613      	mov	r3, r2
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	4413      	add	r3, r2
 800d16a:	005b      	lsls	r3, r3, #1
 800d16c:	440b      	add	r3, r1
 800d16e:	3304      	adds	r3, #4
 800d170:	881b      	ldrh	r3, [r3, #0]
 800d172:	461a      	mov	r2, r3
 800d174:	2102      	movs	r1, #2
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f000 fb58 	bl	800d82c <SCPI_RegSetBits>
    for (i = 0; i < ERROR_DEFS_N; i++) {
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	3301      	adds	r3, #1
 800d180:	617b      	str	r3, [r7, #20]
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	2b08      	cmp	r3, #8
 800d186:	ddd0      	ble.n	800d12a <SCPI_ErrorPushEx+0x56>
        }
    }

    SCPI_ErrorEmit(context, err);
 800d188:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d18c:	4619      	mov	r1, r3
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f7ff ff0a 	bl	800cfa8 <SCPI_ErrorEmit>
    if (queue_overflow) {
 800d194:	7cfb      	ldrb	r3, [r7, #19]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d003      	beq.n	800d1a2 <SCPI_ErrorPushEx+0xce>
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
 800d19a:	490b      	ldr	r1, [pc, #44]	; (800d1c8 <SCPI_ErrorPushEx+0xf4>)
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f7ff ff03 	bl	800cfa8 <SCPI_ErrorEmit>
    }

    if (context) {
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d003      	beq.n	800d1b0 <SCPI_ErrorPushEx+0xdc>
        context->cmd_error = TRUE;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    fifo_clear(&context->error_queue); // EDIT
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	333c      	adds	r3, #60	; 0x3c
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f000 f8f9 	bl	800d3ac <fifo_clear>
}
 800d1ba:	bf00      	nop
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	080160a8 	.word	0x080160a8
 800d1c8:	fffffea2 	.word	0xfffffea2

0800d1cc <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	807b      	strh	r3, [r7, #2]
    SCPI_ErrorPushEx(context, err, NULL, 0);
 800d1d8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800d1dc:	2300      	movs	r3, #0
 800d1de:	2200      	movs	r2, #0
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7ff ff77 	bl	800d0d4 <SCPI_ErrorPushEx>
    return;
 800d1e6:	bf00      	nop
}
 800d1e8:	3708      	adds	r7, #8
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
	...

0800d1f0 <SCPI_ErrorTranslate>:
/**
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	80fb      	strh	r3, [r7, #6]
    switch (err) {
 800d1fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d1fe:	f113 0faa 	cmn.w	r3, #170	; 0xaa
 800d202:	d06e      	beq.n	800d2e2 <SCPI_ErrorTranslate+0xf2>
 800d204:	f113 0faa 	cmn.w	r3, #170	; 0xaa
 800d208:	dc2e      	bgt.n	800d268 <SCPI_ErrorTranslate+0x78>
 800d20a:	f46f 72b6 	mvn.w	r2, #364	; 0x16c
 800d20e:	4293      	cmp	r3, r2
 800d210:	d073      	beq.n	800d2fa <SCPI_ErrorTranslate+0x10a>
 800d212:	f513 7fb6 	cmn.w	r3, #364	; 0x16c
 800d216:	da12      	bge.n	800d23e <SCPI_ErrorTranslate+0x4e>
 800d218:	f513 7fba 	cmn.w	r3, #372	; 0x174
 800d21c:	d073      	beq.n	800d306 <SCPI_ErrorTranslate+0x116>
 800d21e:	f513 7fba 	cmn.w	r3, #372	; 0x174
 800d222:	dc04      	bgt.n	800d22e <SCPI_ErrorTranslate+0x3e>
 800d224:	f46f 72ba 	mvn.w	r2, #372	; 0x174
 800d228:	4293      	cmp	r3, r2
 800d22a:	d06e      	beq.n	800d30a <SCPI_ErrorTranslate+0x11a>
 800d22c:	e06f      	b.n	800d30e <SCPI_ErrorTranslate+0x11e>
 800d22e:	f46f 72b9 	mvn.w	r2, #370	; 0x172
 800d232:	4293      	cmp	r3, r2
 800d234:	d065      	beq.n	800d302 <SCPI_ErrorTranslate+0x112>
 800d236:	f513 7fb9 	cmn.w	r3, #370	; 0x172
 800d23a:	d060      	beq.n	800d2fe <SCPI_ErrorTranslate+0x10e>
 800d23c:	e067      	b.n	800d30e <SCPI_ErrorTranslate+0x11e>
 800d23e:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 800d242:	d054      	beq.n	800d2ee <SCPI_ErrorTranslate+0xfe>
 800d244:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 800d248:	dc07      	bgt.n	800d25a <SCPI_ErrorTranslate+0x6a>
 800d24a:	f46f 72b5 	mvn.w	r2, #362	; 0x16a
 800d24e:	4293      	cmp	r3, r2
 800d250:	d051      	beq.n	800d2f6 <SCPI_ErrorTranslate+0x106>
 800d252:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 800d256:	d04c      	beq.n	800d2f2 <SCPI_ErrorTranslate+0x102>
 800d258:	e059      	b.n	800d30e <SCPI_ErrorTranslate+0x11e>
 800d25a:	f113 0fe0 	cmn.w	r3, #224	; 0xe0
 800d25e:	d044      	beq.n	800d2ea <SCPI_ErrorTranslate+0xfa>
 800d260:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 800d264:	d03f      	beq.n	800d2e6 <SCPI_ErrorTranslate+0xf6>
 800d266:	e052      	b.n	800d30e <SCPI_ErrorTranslate+0x11e>
 800d268:	f113 0f6d 	cmn.w	r3, #109	; 0x6d
 800d26c:	d02f      	beq.n	800d2ce <SCPI_ErrorTranslate+0xde>
 800d26e:	f113 0f6d 	cmn.w	r3, #109	; 0x6d
 800d272:	dc10      	bgt.n	800d296 <SCPI_ErrorTranslate+0xa6>
 800d274:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 800d278:	d02f      	beq.n	800d2da <SCPI_ErrorTranslate+0xea>
 800d27a:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 800d27e:	dc03      	bgt.n	800d288 <SCPI_ErrorTranslate+0x98>
 800d280:	f113 0f97 	cmn.w	r3, #151	; 0x97
 800d284:	d02b      	beq.n	800d2de <SCPI_ErrorTranslate+0xee>
 800d286:	e042      	b.n	800d30e <SCPI_ErrorTranslate+0x11e>
 800d288:	f113 0f83 	cmn.w	r3, #131	; 0x83
 800d28c:	d023      	beq.n	800d2d6 <SCPI_ErrorTranslate+0xe6>
 800d28e:	f113 0f71 	cmn.w	r3, #113	; 0x71
 800d292:	d01e      	beq.n	800d2d2 <SCPI_ErrorTranslate+0xe2>
 800d294:	e03b      	b.n	800d30e <SCPI_ErrorTranslate+0x11e>
 800d296:	f113 0f67 	cmn.w	r3, #103	; 0x67
 800d29a:	d012      	beq.n	800d2c2 <SCPI_ErrorTranslate+0xd2>
 800d29c:	f113 0f67 	cmn.w	r3, #103	; 0x67
 800d2a0:	dc06      	bgt.n	800d2b0 <SCPI_ErrorTranslate+0xc0>
 800d2a2:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 800d2a6:	d010      	beq.n	800d2ca <SCPI_ErrorTranslate+0xda>
 800d2a8:	f113 0f68 	cmn.w	r3, #104	; 0x68
 800d2ac:	d00b      	beq.n	800d2c6 <SCPI_ErrorTranslate+0xd6>
 800d2ae:	e02e      	b.n	800d30e <SCPI_ErrorTranslate+0x11e>
 800d2b0:	f113 0f65 	cmn.w	r3, #101	; 0x65
 800d2b4:	d003      	beq.n	800d2be <SCPI_ErrorTranslate+0xce>
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d129      	bne.n	800d30e <SCPI_ErrorTranslate+0x11e>
#if USE_FULL_ERROR_LIST
#define XE X
#else
#define XE(def, val, str)
#endif
        LIST_OF_ERRORS
 800d2ba:	4b18      	ldr	r3, [pc, #96]	; (800d31c <SCPI_ErrorTranslate+0x12c>)
 800d2bc:	e028      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2be:	4b18      	ldr	r3, [pc, #96]	; (800d320 <SCPI_ErrorTranslate+0x130>)
 800d2c0:	e026      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2c2:	4b18      	ldr	r3, [pc, #96]	; (800d324 <SCPI_ErrorTranslate+0x134>)
 800d2c4:	e024      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2c6:	4b18      	ldr	r3, [pc, #96]	; (800d328 <SCPI_ErrorTranslate+0x138>)
 800d2c8:	e022      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2ca:	4b18      	ldr	r3, [pc, #96]	; (800d32c <SCPI_ErrorTranslate+0x13c>)
 800d2cc:	e020      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2ce:	4b18      	ldr	r3, [pc, #96]	; (800d330 <SCPI_ErrorTranslate+0x140>)
 800d2d0:	e01e      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2d2:	4b18      	ldr	r3, [pc, #96]	; (800d334 <SCPI_ErrorTranslate+0x144>)
 800d2d4:	e01c      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2d6:	4b18      	ldr	r3, [pc, #96]	; (800d338 <SCPI_ErrorTranslate+0x148>)
 800d2d8:	e01a      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2da:	4b18      	ldr	r3, [pc, #96]	; (800d33c <SCPI_ErrorTranslate+0x14c>)
 800d2dc:	e018      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2de:	4b18      	ldr	r3, [pc, #96]	; (800d340 <SCPI_ErrorTranslate+0x150>)
 800d2e0:	e016      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2e2:	4b18      	ldr	r3, [pc, #96]	; (800d344 <SCPI_ErrorTranslate+0x154>)
 800d2e4:	e014      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2e6:	4b18      	ldr	r3, [pc, #96]	; (800d348 <SCPI_ErrorTranslate+0x158>)
 800d2e8:	e012      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2ea:	4b18      	ldr	r3, [pc, #96]	; (800d34c <SCPI_ErrorTranslate+0x15c>)
 800d2ec:	e010      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2ee:	4b18      	ldr	r3, [pc, #96]	; (800d350 <SCPI_ErrorTranslate+0x160>)
 800d2f0:	e00e      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2f2:	4b18      	ldr	r3, [pc, #96]	; (800d354 <SCPI_ErrorTranslate+0x164>)
 800d2f4:	e00c      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2f6:	4b18      	ldr	r3, [pc, #96]	; (800d358 <SCPI_ErrorTranslate+0x168>)
 800d2f8:	e00a      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2fa:	4b18      	ldr	r3, [pc, #96]	; (800d35c <SCPI_ErrorTranslate+0x16c>)
 800d2fc:	e008      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d2fe:	4b18      	ldr	r3, [pc, #96]	; (800d360 <SCPI_ErrorTranslate+0x170>)
 800d300:	e006      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d302:	4b18      	ldr	r3, [pc, #96]	; (800d364 <SCPI_ErrorTranslate+0x174>)
 800d304:	e004      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d306:	4b18      	ldr	r3, [pc, #96]	; (800d368 <SCPI_ErrorTranslate+0x178>)
 800d308:	e002      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
 800d30a:	4b18      	ldr	r3, [pc, #96]	; (800d36c <SCPI_ErrorTranslate+0x17c>)
 800d30c:	e000      	b.n	800d310 <SCPI_ErrorTranslate+0x120>
#if USE_USER_ERROR_LIST
        LIST_OF_USER_ERRORS
#endif
#undef X
#undef XE
        default: return "Unknown error";
 800d30e:	4b18      	ldr	r3, [pc, #96]	; (800d370 <SCPI_ErrorTranslate+0x180>)
    }
}
 800d310:	4618      	mov	r0, r3
 800d312:	370c      	adds	r7, #12
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr
 800d31c:	08015bd8 	.word	0x08015bd8
 800d320:	08015be4 	.word	0x08015be4
 800d324:	08015bf8 	.word	0x08015bf8
 800d328:	08015c0c 	.word	0x08015c0c
 800d32c:	08015c1c 	.word	0x08015c1c
 800d330:	08015c34 	.word	0x08015c34
 800d334:	08015c48 	.word	0x08015c48
 800d338:	08015c5c 	.word	0x08015c5c
 800d33c:	08015c6c 	.word	0x08015c6c
 800d340:	08015c80 	.word	0x08015c80
 800d344:	08015c94 	.word	0x08015c94
 800d348:	08015ca8 	.word	0x08015ca8
 800d34c:	08015cb8 	.word	0x08015cb8
 800d350:	08015cd0 	.word	0x08015cd0
 800d354:	08015ce0 	.word	0x08015ce0
 800d358:	08015cf0 	.word	0x08015cf0
 800d35c:	08015d08 	.word	0x08015d08
 800d360:	08015d18 	.word	0x08015d18
 800d364:	08015d2c 	.word	0x08015d2c
 800d368:	08015d44 	.word	0x08015d44
 800d36c:	08015d54 	.word	0x08015d54
 800d370:	08015d80 	.word	0x08015d80

0800d374 <fifo_init>:

/**
 * Initialize fifo
 * @param fifo
 */
void fifo_init(scpi_fifo_t * fifo, scpi_error_t * data, int16_t size) {
 800d374:	b480      	push	{r7}
 800d376:	b085      	sub	sp, #20
 800d378:	af00      	add	r7, sp, #0
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	60b9      	str	r1, [r7, #8]
 800d37e:	4613      	mov	r3, r2
 800d380:	80fb      	strh	r3, [r7, #6]
    fifo->wr = 0;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2200      	movs	r2, #0
 800d386:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2200      	movs	r2, #0
 800d38c:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2200      	movs	r2, #0
 800d392:	809a      	strh	r2, [r3, #4]
    fifo->data = data;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	68ba      	ldr	r2, [r7, #8]
 800d398:	609a      	str	r2, [r3, #8]
    fifo->size = size;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	88fa      	ldrh	r2, [r7, #6]
 800d39e:	80da      	strh	r2, [r3, #6]
}
 800d3a0:	bf00      	nop
 800d3a2:	3714      	adds	r7, #20
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <fifo_clear>:

/**
 * Empty fifo
 * @param fifo
 */
void fifo_clear(scpi_fifo_t * fifo) {
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
    fifo->wr = 0;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	809a      	strh	r2, [r3, #4]
}
 800d3c6:	bf00      	nop
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr

0800d3d2 <fifo_is_empty>:
/**
 * Test if fifo is empty
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_empty(scpi_fifo_t * fifo) {
 800d3d2:	b480      	push	{r7}
 800d3d4:	b083      	sub	sp, #12
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
    return fifo->count == 0;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	bf0c      	ite	eq
 800d3e4:	2301      	moveq	r3, #1
 800d3e6:	2300      	movne	r3, #0
 800d3e8:	b2db      	uxtb	r3, r3
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	370c      	adds	r7, #12
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr

0800d3f6 <fifo_is_full>:
/**
 * Test if fifo is full
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_full(scpi_fifo_t * fifo) {
 800d3f6:	b480      	push	{r7}
 800d3f8:	b083      	sub	sp, #12
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
    return fifo->count == fifo->size;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	bf0c      	ite	eq
 800d40e:	2301      	moveq	r3, #1
 800d410:	2300      	movne	r3, #0
 800d412:	b2db      	uxtb	r3, r3
}
 800d414:	4618      	mov	r0, r3
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <fifo_add>:
 * @param fifo
 * @param err
 * @param info
 * @return
 */
scpi_bool_t fifo_add(scpi_fifo_t * fifo, const scpi_error_t * value) {
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
    /* FIFO full? */
    if (fifo_is_full(fifo)) {
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f7ff ffe3 	bl	800d3f6 <fifo_is_full>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d001      	beq.n	800d43a <fifo_add+0x1a>
        return FALSE;
 800d436:	2300      	movs	r3, #0
 800d438:	e027      	b.n	800d48a <fifo_add+0x6a>
    }
    if (!value) {
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d101      	bne.n	800d444 <fifo_add+0x24>
        return FALSE;
 800d440:	2300      	movs	r3, #0
 800d442:	e022      	b.n	800d48a <fifo_add+0x6a>
    }

    fifo->data[fifo->wr] = *value;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	689a      	ldr	r2, [r3, #8]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d44e:	005b      	lsls	r3, r3, #1
 800d450:	4413      	add	r3, r2
 800d452:	683a      	ldr	r2, [r7, #0]
 800d454:	8812      	ldrh	r2, [r2, #0]
 800d456:	801a      	strh	r2, [r3, #0]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d45e:	3301      	adds	r3, #1
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d466:	fb93 f1f2 	sdiv	r1, r3, r2
 800d46a:	fb02 f201 	mul.w	r2, r2, r1
 800d46e:	1a9b      	subs	r3, r3, r2
 800d470:	b21a      	sxth	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	801a      	strh	r2, [r3, #0]
    fifo->count += 1;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	3301      	adds	r3, #1
 800d480:	b29b      	uxth	r3, r3
 800d482:	b21a      	sxth	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	809a      	strh	r2, [r3, #4]
    return TRUE;
 800d488:	2301      	movs	r3, #1
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3708      	adds	r7, #8
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <fifo_remove>:
 * Remove element form fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove(scpi_fifo_t * fifo, scpi_error_t * value) {
 800d492:	b580      	push	{r7, lr}
 800d494:	b082      	sub	sp, #8
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
 800d49a:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f7ff ff98 	bl	800d3d2 <fifo_is_empty>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d001      	beq.n	800d4ac <fifo_remove+0x1a>
        return FALSE;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	e025      	b.n	800d4f8 <fifo_remove+0x66>
    }

    if (value) {
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d009      	beq.n	800d4c6 <fifo_remove+0x34>
        *value = fifo->data[fifo->rd];
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	689a      	ldr	r2, [r3, #8]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d4bc:	005b      	lsls	r3, r3, #1
 800d4be:	441a      	add	r2, r3
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	8812      	ldrh	r2, [r2, #0]
 800d4c4:	801a      	strh	r2, [r3, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d4d4:	fb93 f1f2 	sdiv	r1, r3, r2
 800d4d8:	fb02 f201 	mul.w	r2, r2, r1
 800d4dc:	1a9b      	subs	r3, r3, r2
 800d4de:	b21a      	sxth	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	805a      	strh	r2, [r3, #2]
    fifo->count -= 1;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	b21a      	sxth	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	809a      	strh	r2, [r3, #4]

    return TRUE;
 800d4f6:	2301      	movs	r3, #1
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <fifo_remove_last>:
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7ff ff61 	bl	800d3d2 <fifo_is_empty>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <fifo_remove_last+0x1a>
        return FALSE;
 800d516:	2300      	movs	r3, #0
 800d518:	e02a      	b.n	800d570 <fifo_remove_last+0x70>
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d520:	461a      	mov	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d528:	4413      	add	r3, r2
 800d52a:	3b01      	subs	r3, #1
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d532:	fb93 f1f2 	sdiv	r1, r3, r2
 800d536:	fb02 f201 	mul.w	r2, r2, r1
 800d53a:	1a9b      	subs	r3, r3, r2
 800d53c:	b21a      	sxth	r2, r3
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	801a      	strh	r2, [r3, #0]

    if (value) {
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d009      	beq.n	800d55c <fifo_remove_last+0x5c>
        *value = fifo->data[fifo->wr];
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	689a      	ldr	r2, [r3, #8]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d552:	005b      	lsls	r3, r3, #1
 800d554:	441a      	add	r2, r3
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	8812      	ldrh	r2, [r2, #0]
 800d55a:	801a      	strh	r2, [r3, #0]
    }
    fifo->count -= 1;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d562:	b29b      	uxth	r3, r3
 800d564:	3b01      	subs	r3, #1
 800d566:	b29b      	uxth	r3, r3
 800d568:	b21a      	sxth	r2, r3
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	809a      	strh	r2, [r3, #4]

    return TRUE;
 800d56e:	2301      	movs	r3, #1
}
 800d570:	4618      	mov	r0, r3
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <fifo_count>:
 * Retrive number of elements in fifo
 * @param fifo
 * @param value
 * @return
 */
scpi_bool_t fifo_count(scpi_fifo_t * fifo, int16_t * value) {
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
    *value = fifo->count;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	801a      	strh	r2, [r3, #0]
    return TRUE;
 800d58c:	2301      	movs	r3, #1
}
 800d58e:	4618      	mov	r0, r3
 800d590:	370c      	adds	r7, #12
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr

0800d59a <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b082      	sub	sp, #8
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	70fb      	strb	r3, [r7, #3]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 800d5a6:	78fb      	ldrb	r3, [r7, #3]
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 f859 	bl	800d662 <SCPI_RegGet>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	78fb      	ldrb	r3, [r7, #3]
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f88d 	bl	800d6d8 <SCPI_RegSet>
}
 800d5be:	bf00      	nop
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <regUpdateEvent>:
 * in the condition register
 * @param context
 * @param condReg - condition register name
 * @param eventReg - event register name
 */
static void regUpdateEvent(scpi_t * context, scpi_reg_val_t oldCondVal, scpi_reg_val_t newCondVal, scpi_reg_name_t eventReg) {
 800d5c6:	b590      	push	{r4, r7, lr}
 800d5c8:	b085      	sub	sp, #20
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	60f8      	str	r0, [r7, #12]
 800d5ce:	4608      	mov	r0, r1
 800d5d0:	4611      	mov	r1, r2
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	817b      	strh	r3, [r7, #10]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	813b      	strh	r3, [r7, #8]
 800d5dc:	4613      	mov	r3, r2
 800d5de:	71fb      	strb	r3, [r7, #7]
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 800d5e0:	897b      	ldrh	r3, [r7, #10]
 800d5e2:	43db      	mvns	r3, r3
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	893b      	ldrh	r3, [r7, #8]
 800d5e8:	4013      	ands	r3, r2
 800d5ea:	b29c      	uxth	r4, r3
 800d5ec:	79fb      	ldrb	r3, [r7, #7]
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f000 f836 	bl	800d662 <SCPI_RegGet>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	4323      	orrs	r3, r4
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	79fb      	ldrb	r3, [r7, #7]
 800d5fe:	4619      	mov	r1, r3
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f000 f869 	bl	800d6d8 <SCPI_RegSet>
}
 800d606:	bf00      	nop
 800d608:	3714      	adds	r7, #20
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd90      	pop	{r4, r7, pc}

0800d60e <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 800d60e:	b580      	push	{r7, lr}
 800d610:	b084      	sub	sp, #16
 800d612:	af00      	add	r7, sp, #0
 800d614:	60f8      	str	r0, [r7, #12]
 800d616:	4608      	mov	r0, r1
 800d618:	4611      	mov	r1, r2
 800d61a:	461a      	mov	r2, r3
 800d61c:	4603      	mov	r3, r0
 800d61e:	817b      	strh	r3, [r7, #10]
 800d620:	460b      	mov	r3, r1
 800d622:	727b      	strb	r3, [r7, #9]
 800d624:	4613      	mov	r3, r2
 800d626:	80fb      	strh	r3, [r7, #6]
    if (val & SCPI_RegGet(context, mask)) {
 800d628:	7a7b      	ldrb	r3, [r7, #9]
 800d62a:	4619      	mov	r1, r3
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f000 f818 	bl	800d662 <SCPI_RegGet>
 800d632:	4603      	mov	r3, r0
 800d634:	461a      	mov	r2, r3
 800d636:	897b      	ldrh	r3, [r7, #10]
 800d638:	4013      	ands	r3, r2
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d006      	beq.n	800d64e <regUpdateSTB+0x40>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 800d640:	88fb      	ldrh	r3, [r7, #6]
 800d642:	461a      	mov	r2, r3
 800d644:	2100      	movs	r1, #0
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f000 f8f0 	bl	800d82c <SCPI_RegSetBits>
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
    }
}
 800d64c:	e005      	b.n	800d65a <regUpdateSTB+0x4c>
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 800d64e:	88fb      	ldrh	r3, [r7, #6]
 800d650:	461a      	mov	r2, r3
 800d652:	2100      	movs	r1, #0
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f000 f904 	bl	800d862 <SCPI_RegClearBits>
}
 800d65a:	bf00      	nop
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <SCPI_RegGet>:
/**
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
 800d662:	b480      	push	{r7}
 800d664:	b083      	sub	sp, #12
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	460b      	mov	r3, r1
 800d66c:	70fb      	strb	r3, [r7, #3]
    if ((name < SCPI_REG_COUNT) && context) {
 800d66e:	78fb      	ldrb	r3, [r7, #3]
 800d670:	2b09      	cmp	r3, #9
 800d672:	d808      	bhi.n	800d686 <SCPI_RegGet+0x24>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d005      	beq.n	800d686 <SCPI_RegGet+0x24>
        return context->registers[name];
 800d67a:	78fa      	ldrb	r2, [r7, #3]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	3224      	adds	r2, #36	; 0x24
 800d680:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d684:	e000      	b.n	800d688 <SCPI_RegGet+0x26>
    } else {
        return 0;
 800d686:	2300      	movs	r3, #0
    }
}
 800d688:	4618      	mov	r0, r3
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <writeControl>:
 * Wrapper function to control interface from context
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	460b      	mov	r3, r1
 800d69e:	70fb      	strb	r3, [r7, #3]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	803b      	strh	r3, [r7, #0]
    if (context && context->interface && context->interface->control) {
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d011      	beq.n	800d6ce <writeControl+0x3a>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00d      	beq.n	800d6ce <writeControl+0x3a>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d008      	beq.n	800d6ce <writeControl+0x3a>
        return context->interface->control(context, ctrl, val);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	883a      	ldrh	r2, [r7, #0]
 800d6c4:	78f9      	ldrb	r1, [r7, #3]
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	4798      	blx	r3
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	e000      	b.n	800d6d0 <writeControl+0x3c>
    } else {
        return 0;
 800d6ce:	2300      	movs	r3, #0
    }
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	70fb      	strb	r3, [r7, #3]
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	803b      	strh	r3, [r7, #0]
    scpi_bool_t srq = FALSE;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	73fb      	strb	r3, [r7, #15]
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 800d6ec:	78fb      	ldrb	r3, [r7, #3]
 800d6ee:	2b09      	cmp	r3, #9
 800d6f0:	f200 8098 	bhi.w	800d824 <SCPI_RegSet+0x14c>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f000 8094 	beq.w	800d824 <SCPI_RegSet+0x14c>
        return;
    }

    /* store old register value */
    old_val = context->registers[name];
 800d6fc:	78fa      	ldrb	r2, [r7, #3]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	3224      	adds	r2, #36	; 0x24
 800d702:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800d706:	81bb      	strh	r3, [r7, #12]

    /* set register value */
    context->registers[name] = val;
 800d708:	78fa      	ldrb	r2, [r7, #3]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	3224      	adds	r2, #36	; 0x24
 800d70e:	8839      	ldrh	r1, [r7, #0]
 800d710:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
 800d714:	78fb      	ldrb	r3, [r7, #3]
 800d716:	2b0a      	cmp	r3, #10
 800d718:	d870      	bhi.n	800d7fc <SCPI_RegSet+0x124>
 800d71a:	a201      	add	r2, pc, #4	; (adr r2, 800d720 <SCPI_RegSet+0x48>)
 800d71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d720:	0800d74d 	.word	0x0800d74d
 800d724:	0800d78d 	.word	0x0800d78d
 800d728:	0800d797 	.word	0x0800d797
 800d72c:	0800d7a5 	.word	0x0800d7a5
 800d730:	0800d7d5 	.word	0x0800d7d5
 800d734:	0800d7e3 	.word	0x0800d7e3
 800d738:	0800d7ed 	.word	0x0800d7ed
 800d73c:	0800d7af 	.word	0x0800d7af
 800d740:	0800d7bd 	.word	0x0800d7bd
 800d744:	0800d7c7 	.word	0x0800d7c7
 800d748:	0800d7fd 	.word	0x0800d7fd
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
 800d74c:	2101      	movs	r1, #1
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f7ff ff87 	bl	800d662 <SCPI_RegGet>
 800d754:	4603      	mov	r3, r0
 800d756:	817b      	strh	r3, [r7, #10]
            mask &= ~STB_SRQ;
 800d758:	897b      	ldrh	r3, [r7, #10]
 800d75a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d75e:	817b      	strh	r3, [r7, #10]
            if (val & mask) {
 800d760:	883a      	ldrh	r2, [r7, #0]
 800d762:	897b      	ldrh	r3, [r7, #10]
 800d764:	4013      	ands	r3, r2
 800d766:	b29b      	uxth	r3, r3
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d00a      	beq.n	800d782 <SCPI_RegSet+0xaa>
                val |= STB_SRQ;
 800d76c:	883b      	ldrh	r3, [r7, #0]
 800d76e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d772:	803b      	strh	r3, [r7, #0]
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
 800d774:	89ba      	ldrh	r2, [r7, #12]
 800d776:	883b      	ldrh	r3, [r7, #0]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d03e      	beq.n	800d7fa <SCPI_RegSet+0x122>
                    srq = TRUE;
 800d77c:	2301      	movs	r3, #1
 800d77e:	73fb      	strb	r3, [r7, #15]
                }
            } else {
                val &= ~STB_SRQ;
            }
            break;
 800d780:	e03b      	b.n	800d7fa <SCPI_RegSet+0x122>
                val &= ~STB_SRQ;
 800d782:	883b      	ldrh	r3, [r7, #0]
 800d784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d788:	803b      	strh	r3, [r7, #0]
            break;
 800d78a:	e036      	b.n	800d7fa <SCPI_RegSet+0x122>
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
 800d78c:	2100      	movs	r1, #0
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7ff ff03 	bl	800d59a <regUpdate>
            break;
 800d794:	e032      	b.n	800d7fc <SCPI_RegSet+0x124>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
 800d796:	8839      	ldrh	r1, [r7, #0]
 800d798:	2320      	movs	r3, #32
 800d79a:	2203      	movs	r2, #3
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7ff ff36 	bl	800d60e <regUpdateSTB>
            break;
 800d7a2:	e02b      	b.n	800d7fc <SCPI_RegSet+0x124>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
 800d7a4:	2102      	movs	r1, #2
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f7ff fef7 	bl	800d59a <regUpdate>
            break;
 800d7ac:	e026      	b.n	800d7fc <SCPI_RegSet+0x124>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
 800d7ae:	8839      	ldrh	r1, [r7, #0]
 800d7b0:	2308      	movs	r3, #8
 800d7b2:	2208      	movs	r2, #8
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7ff ff2a 	bl	800d60e <regUpdateSTB>
            break;
 800d7ba:	e01f      	b.n	800d7fc <SCPI_RegSet+0x124>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
 800d7bc:	2107      	movs	r1, #7
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7ff feeb 	bl	800d59a <regUpdate>
            break;
 800d7c4:	e01a      	b.n	800d7fc <SCPI_RegSet+0x124>
        case SCPI_REG_QUESC:
            regUpdateEvent(context, old_val, val, SCPI_REG_QUES);
 800d7c6:	883a      	ldrh	r2, [r7, #0]
 800d7c8:	89b9      	ldrh	r1, [r7, #12]
 800d7ca:	2307      	movs	r3, #7
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7ff fefa 	bl	800d5c6 <regUpdateEvent>
            break;
 800d7d2:	e013      	b.n	800d7fc <SCPI_RegSet+0x124>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 800d7d4:	8839      	ldrh	r1, [r7, #0]
 800d7d6:	2380      	movs	r3, #128	; 0x80
 800d7d8:	2205      	movs	r2, #5
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7ff ff17 	bl	800d60e <regUpdateSTB>
            break;
 800d7e0:	e00c      	b.n	800d7fc <SCPI_RegSet+0x124>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
 800d7e2:	2104      	movs	r1, #4
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f7ff fed8 	bl	800d59a <regUpdate>
            break;
 800d7ea:	e007      	b.n	800d7fc <SCPI_RegSet+0x124>
        case SCPI_REG_OPERC:
            regUpdateEvent(context, old_val, val, SCPI_REG_OPER);
 800d7ec:	883a      	ldrh	r2, [r7, #0]
 800d7ee:	89b9      	ldrh	r1, [r7, #12]
 800d7f0:	2304      	movs	r3, #4
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7ff fee7 	bl	800d5c6 <regUpdateEvent>
            break;
 800d7f8:	e000      	b.n	800d7fc <SCPI_RegSet+0x124>
            break;
 800d7fa:	bf00      	nop
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
 800d7fc:	78fa      	ldrb	r2, [r7, #3]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	3224      	adds	r2, #36	; 0x24
 800d802:	8839      	ldrh	r1, [r7, #0]
 800d804:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (srq) {
 800d808:	7bfb      	ldrb	r3, [r7, #15]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00b      	beq.n	800d826 <SCPI_RegSet+0x14e>
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
 800d80e:	2100      	movs	r1, #0
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f7ff ff26 	bl	800d662 <SCPI_RegGet>
 800d816:	4603      	mov	r3, r0
 800d818:	461a      	mov	r2, r3
 800d81a:	2101      	movs	r1, #1
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f7ff ff39 	bl	800d694 <writeControl>
 800d822:	e000      	b.n	800d826 <SCPI_RegSet+0x14e>
        return;
 800d824:	bf00      	nop
    }
}
 800d826:	3710      	adds	r7, #16
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	460b      	mov	r3, r1
 800d836:	70fb      	strb	r3, [r7, #3]
 800d838:	4613      	mov	r3, r2
 800d83a:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 800d83c:	78fb      	ldrb	r3, [r7, #3]
 800d83e:	4619      	mov	r1, r3
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7ff ff0e 	bl	800d662 <SCPI_RegGet>
 800d846:	4603      	mov	r3, r0
 800d848:	461a      	mov	r2, r3
 800d84a:	883b      	ldrh	r3, [r7, #0]
 800d84c:	4313      	orrs	r3, r2
 800d84e:	b29a      	uxth	r2, r3
 800d850:	78fb      	ldrb	r3, [r7, #3]
 800d852:	4619      	mov	r1, r3
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7ff ff3f 	bl	800d6d8 <SCPI_RegSet>
}
 800d85a:	bf00      	nop
 800d85c:	3708      	adds	r7, #8
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}

0800d862 <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 800d862:	b580      	push	{r7, lr}
 800d864:	b082      	sub	sp, #8
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
 800d86a:	460b      	mov	r3, r1
 800d86c:	70fb      	strb	r3, [r7, #3]
 800d86e:	4613      	mov	r3, r2
 800d870:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 800d872:	78fb      	ldrb	r3, [r7, #3]
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7ff fef3 	bl	800d662 <SCPI_RegGet>
 800d87c:	4603      	mov	r3, r0
 800d87e:	b21a      	sxth	r2, r3
 800d880:	f9b7 3000 	ldrsh.w	r3, [r7]
 800d884:	43db      	mvns	r3, r3
 800d886:	b21b      	sxth	r3, r3
 800d888:	4013      	ands	r3, r2
 800d88a:	b21b      	sxth	r3, r3
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	78fb      	ldrb	r3, [r7, #3]
 800d890:	4619      	mov	r1, r3
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f7ff ff20 	bl	800d6d8 <SCPI_RegSet>
}
 800d898:	bf00      	nop
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	2102      	movs	r1, #2
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7ff ff13 	bl	800d6d8 <SCPI_RegSet>
}
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b082      	sub	sp, #8
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
    SCPI_EventClear(context);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f7ff ffec 	bl	800d8a0 <SCPI_EventClear>
    SCPI_ErrorClear(context);
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f7ff fb8d 	bl	800cfe8 <SCPI_ErrorClear>
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	2104      	movs	r1, #4
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7ff ff00 	bl	800d6d8 <SCPI_RegSet>
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 800d8d8:	2200      	movs	r2, #0
 800d8da:	2107      	movs	r1, #7
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f7ff fefb 	bl	800d6d8 <SCPI_RegSet>
    return SCPI_RES_OK;
 800d8e2:	2301      	movs	r3, #1
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3708      	adds	r7, #8
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
    int32_t new_ESE;
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 800d8f4:	f107 030c 	add.w	r3, r7, #12
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f002 f923 	bl	800fb48 <SCPI_ParamInt32>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d008      	beq.n	800d91a <SCPI_CoreEse+0x2e>
        SCPI_RegSet(context, SCPI_REG_ESE, (scpi_reg_val_t) new_ESE);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	461a      	mov	r2, r3
 800d90e:	2103      	movs	r1, #3
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7ff fee1 	bl	800d6d8 <SCPI_RegSet>
        return SCPI_RES_OK;
 800d916:	2301      	movs	r3, #1
 800d918:	e001      	b.n	800d91e <SCPI_CoreEse+0x32>
    }
    return SCPI_RES_ERR;
 800d91a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
 800d926:	b580      	push	{r7, lr}
 800d928:	b082      	sub	sp, #8
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESE));
 800d92e:	2103      	movs	r1, #3
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7ff fe96 	bl	800d662 <SCPI_RegGet>
 800d936:	4603      	mov	r3, r0
 800d938:	4619      	mov	r1, r3
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f001 fc57 	bl	800f1ee <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800d940:	2301      	movs	r3, #1
}
 800d942:	4618      	mov	r0, r3
 800d944:	3708      	adds	r7, #8
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b082      	sub	sp, #8
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESR));
 800d952:	2102      	movs	r1, #2
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f7ff fe84 	bl	800d662 <SCPI_RegGet>
 800d95a:	4603      	mov	r3, r0
 800d95c:	4619      	mov	r1, r3
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f001 fc45 	bl	800f1ee <SCPI_ResultInt32>
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 800d964:	2200      	movs	r2, #0
 800d966:	2102      	movs	r1, #2
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7ff feb5 	bl	800d6d8 <SCPI_RegSet>
    return SCPI_RES_OK;
 800d96e:	2301      	movs	r3, #1
}
 800d970:	4618      	mov	r0, r3
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
 800d980:	2201      	movs	r2, #1
 800d982:	2102      	movs	r1, #2
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff ff51 	bl	800d82c <SCPI_RegSetBits>
    return SCPI_RES_OK;
 800d98a:	2301      	movs	r3, #1
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
    /* Operation is always completed */
    SCPI_ResultInt32(context, 1);
 800d99c:	2101      	movs	r1, #1
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f001 fc25 	bl	800f1ee <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800d9a4:	2301      	movs	r3, #1
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3708      	adds	r7, #8
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b084      	sub	sp, #16
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
    int32_t new_SRE;
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 800d9b6:	f107 030c 	add.w	r3, r7, #12
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	4619      	mov	r1, r3
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f002 f8c2 	bl	800fb48 <SCPI_ParamInt32>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d008      	beq.n	800d9dc <SCPI_CoreSre+0x2e>
        SCPI_RegSet(context, SCPI_REG_SRE, (scpi_reg_val_t) new_SRE);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	2101      	movs	r1, #1
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff fe80 	bl	800d6d8 <SCPI_RegSet>
        return SCPI_RES_OK;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	e001      	b.n	800d9e0 <SCPI_CoreSre+0x32>
    }
    return SCPI_RES_ERR;
 800d9dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_SRE));
 800d9f0:	2101      	movs	r1, #1
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7ff fe35 	bl	800d662 <SCPI_RegGet>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f001 fbf6 	bl	800f1ee <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800da02:	2301      	movs	r3, #1
}
 800da04:	4618      	mov	r0, r3
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_STB));
 800da14:	2100      	movs	r1, #0
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7ff fe23 	bl	800d662 <SCPI_RegGet>
 800da1c:	4603      	mov	r3, r0
 800da1e:	4619      	mov	r1, r3
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f001 fbe4 	bl	800f1ee <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800da26:	2301      	movs	r3, #1
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3708      	adds	r7, #8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <SCPI_CoreWai>:
/**
 * *WAI
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
 800da38:	2301      	movs	r3, #1
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <isws>:
/**
 * Is white space
 * @param c
 * @return 
 */
static int isws(int c) {
 800da46:	b480      	push	{r7}
 800da48:	b083      	sub	sp, #12
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
    if ((c == ' ') || (c == '\t')) {
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b20      	cmp	r3, #32
 800da52:	d002      	beq.n	800da5a <isws+0x14>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2b09      	cmp	r3, #9
 800da58:	d101      	bne.n	800da5e <isws+0x18>
        return 1;
 800da5a:	2301      	movs	r3, #1
 800da5c:	e000      	b.n	800da60 <isws+0x1a>
    }
    return 0;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr

0800da6c <isbdigit>:
/**
 * Is binary digit
 * @param c
 * @return 
 */
static int isbdigit(int c) {
 800da6c:	b480      	push	{r7}
 800da6e:	b083      	sub	sp, #12
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1')) {
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b30      	cmp	r3, #48	; 0x30
 800da78:	d002      	beq.n	800da80 <isbdigit+0x14>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2b31      	cmp	r3, #49	; 0x31
 800da7e:	d101      	bne.n	800da84 <isbdigit+0x18>
        return 1;
 800da80:	2301      	movs	r3, #1
 800da82:	e000      	b.n	800da86 <isbdigit+0x1a>
    }
    return 0;
 800da84:	2300      	movs	r3, #0
}
 800da86:	4618      	mov	r0, r3
 800da88:	370c      	adds	r7, #12
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr

0800da92 <isqdigit>:
/**
 * Is hexadecimal digit
 * @param c
 * @return 
 */
static int isqdigit(int c) {
 800da92:	b480      	push	{r7}
 800da94:	b083      	sub	sp, #12
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7')) {
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2b30      	cmp	r3, #48	; 0x30
 800da9e:	d014      	beq.n	800daca <isqdigit+0x38>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b31      	cmp	r3, #49	; 0x31
 800daa4:	d011      	beq.n	800daca <isqdigit+0x38>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2b32      	cmp	r3, #50	; 0x32
 800daaa:	d00e      	beq.n	800daca <isqdigit+0x38>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b33      	cmp	r3, #51	; 0x33
 800dab0:	d00b      	beq.n	800daca <isqdigit+0x38>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2b34      	cmp	r3, #52	; 0x34
 800dab6:	d008      	beq.n	800daca <isqdigit+0x38>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2b35      	cmp	r3, #53	; 0x35
 800dabc:	d005      	beq.n	800daca <isqdigit+0x38>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2b36      	cmp	r3, #54	; 0x36
 800dac2:	d002      	beq.n	800daca <isqdigit+0x38>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b37      	cmp	r3, #55	; 0x37
 800dac8:	d101      	bne.n	800dace <isqdigit+0x3c>
        return 1;
 800daca:	2301      	movs	r3, #1
 800dacc:	e000      	b.n	800dad0 <isqdigit+0x3e>
    }
    return 0;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <iseos>:
/**
 * Is end of string
 * @param state
 * @return 
 */
static int iseos(lex_state_t * state) {
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
    if ((state->buffer + state->len) <= (state->pos)) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	6892      	ldr	r2, [r2, #8]
 800daec:	441a      	add	r2, r3
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d801      	bhi.n	800dafa <iseos+0x1e>
        return 1;
 800daf6:	2301      	movs	r3, #1
 800daf8:	e000      	b.n	800dafc <iseos+0x20>
    } else {
        return 0;
 800dafa:	2300      	movs	r3, #0
    }
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	370c      	adds	r7, #12
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <scpiLex_IsEos>:
/**
 * Private export of iseos
 * @param state
 * @return 
 */
int scpiLex_IsEos(lex_state_t * state) {
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
    return iseos(state);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f7ff ffe3 	bl	800dadc <iseos>
 800db16:	4603      	mov	r3, r0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <ischr>:
 * Test current character
 * @param state
 * @param chr
 * @return 
 */
static int ischr(lex_state_t * state, char chr) {
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	460b      	mov	r3, r1
 800db2a:	70fb      	strb	r3, [r7, #3]
    return (state->pos[0] == chr);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	78fa      	ldrb	r2, [r7, #3]
 800db34:	429a      	cmp	r2, r3
 800db36:	bf0c      	ite	eq
 800db38:	2301      	moveq	r3, #1
 800db3a:	2300      	movne	r3, #0
 800db3c:	b2db      	uxtb	r3, r3
}
 800db3e:	4618      	mov	r0, r3
 800db40:	370c      	adds	r7, #12
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr

0800db4a <isplusmn>:
/**
 * Is plus or minus
 * @param c
 * @return 
 */
static int isplusmn(int c) {
 800db4a:	b480      	push	{r7}
 800db4c:	b083      	sub	sp, #12
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
    return c == '+' || c == '-';
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2b2b      	cmp	r3, #43	; 0x2b
 800db56:	d002      	beq.n	800db5e <isplusmn+0x14>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b2d      	cmp	r3, #45	; 0x2d
 800db5c:	d101      	bne.n	800db62 <isplusmn+0x18>
 800db5e:	2301      	movs	r3, #1
 800db60:	e000      	b.n	800db64 <isplusmn+0x1a>
 800db62:	2300      	movs	r3, #0
}
 800db64:	4618      	mov	r0, r3
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <isH>:
/**
 * Is letter H
 * @param c
 * @return 
 */
static int isH(int c) {
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
    return c == 'h' || c == 'H';
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b68      	cmp	r3, #104	; 0x68
 800db7c:	d002      	beq.n	800db84 <isH+0x14>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b48      	cmp	r3, #72	; 0x48
 800db82:	d101      	bne.n	800db88 <isH+0x18>
 800db84:	2301      	movs	r3, #1
 800db86:	e000      	b.n	800db8a <isH+0x1a>
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	370c      	adds	r7, #12
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr

0800db96 <isB>:
/**
 * Is letter B
 * @param c
 * @return 
 */
static int isB(int c) {
 800db96:	b480      	push	{r7}
 800db98:	b083      	sub	sp, #12
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
    return c == 'b' || c == 'B';
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2b62      	cmp	r3, #98	; 0x62
 800dba2:	d002      	beq.n	800dbaa <isB+0x14>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b42      	cmp	r3, #66	; 0x42
 800dba8:	d101      	bne.n	800dbae <isB+0x18>
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e000      	b.n	800dbb0 <isB+0x1a>
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr

0800dbbc <isQ>:
/**
 * Is letter Q
 * @param c
 * @return 
 */
static int isQ(int c) {
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
    return c == 'q' || c == 'Q';
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2b71      	cmp	r3, #113	; 0x71
 800dbc8:	d002      	beq.n	800dbd0 <isQ+0x14>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2b51      	cmp	r3, #81	; 0x51
 800dbce:	d101      	bne.n	800dbd4 <isQ+0x18>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e000      	b.n	800dbd6 <isQ+0x1a>
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	370c      	adds	r7, #12
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr

0800dbe2 <isE>:
/**
 * Is letter E
 * @param c
 * @return 
 */
static int isE(int c) {
 800dbe2:	b480      	push	{r7}
 800dbe4:	b083      	sub	sp, #12
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
    return c == 'e' || c == 'E';
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2b65      	cmp	r3, #101	; 0x65
 800dbee:	d002      	beq.n	800dbf6 <isE+0x14>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2b45      	cmp	r3, #69	; 0x45
 800dbf4:	d101      	bne.n	800dbfa <isE+0x18>
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	e000      	b.n	800dbfc <isE+0x1a>
 800dbfa:	2300      	movs	r3, #0
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <skipWs>:
/**
 * Skip all whitespaces
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
    int someSpace = 0;
 800dc10:	2300      	movs	r3, #0
 800dc12:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 800dc14:	e007      	b.n	800dc26 <skipWs+0x1e>
        state->pos++;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	605a      	str	r2, [r3, #4]
        someSpace++;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	3301      	adds	r3, #1
 800dc24:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f7ff ff58 	bl	800dadc <iseos>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d108      	bne.n	800dc44 <skipWs+0x3c>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7ff ff04 	bl	800da46 <isws>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d1e8      	bne.n	800dc16 <skipWs+0xe>
    }

    return someSpace;
 800dc44:	68fb      	ldr	r3, [r7, #12]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <skipDigit>:
/**
 * Skip decimal digit
 * @param state
 * @return 
 */
static int skipDigit(lex_state_t * state) {
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b082      	sub	sp, #8
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7ff ff40 	bl	800dadc <iseos>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d113      	bne.n	800dc8a <skipDigit+0x3c>
 800dc62:	f004 fdd7 	bl	8012814 <__locale_ctype_ptr>
 800dc66:	4602      	mov	r2, r0
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	4413      	add	r3, r2
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	f003 0304 	and.w	r3, r3, #4
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d006      	beq.n	800dc8a <skipDigit+0x3c>
        state->pos++;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	1c5a      	adds	r2, r3, #1
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800dc86:	2301      	movs	r3, #1
 800dc88:	e000      	b.n	800dc8c <skipDigit+0x3e>
    } else {
        return SKIP_NONE;
 800dc8a:	2300      	movs	r3, #0
    }
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3708      	adds	r7, #8
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <skipNumbers>:
/**
 * Skip multiple decimal digits
 * @param state
 * @return 
 */
static int skipNumbers(lex_state_t * state) {
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 800dca0:	e007      	b.n	800dcb2 <skipNumbers+0x1e>
        state->pos++;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	605a      	str	r2, [r3, #4]
        someNumbers++;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f7ff ff12 	bl	800dadc <iseos>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d10c      	bne.n	800dcd8 <skipNumbers+0x44>
 800dcbe:	f004 fda9 	bl	8012814 <__locale_ctype_ptr>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	3301      	adds	r3, #1
 800dccc:	4413      	add	r3, r2
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	f003 0304 	and.w	r3, r3, #4
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d1e4      	bne.n	800dca2 <skipNumbers+0xe>
    }
    return someNumbers;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <skipPlusmn>:
/**
 * Skip plus or minus
 * @param state
 * @return 
 */
static int skipPlusmn(lex_state_t * state) {
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b082      	sub	sp, #8
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isplusmn(state->pos[0])) {
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f7ff fef6 	bl	800dadc <iseos>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d10f      	bne.n	800dd16 <skipPlusmn+0x34>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7ff ff24 	bl	800db4a <isplusmn>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d006      	beq.n	800dd16 <skipPlusmn+0x34>
        state->pos++;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	1c5a      	adds	r2, r3, #1
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e000      	b.n	800dd18 <skipPlusmn+0x36>
    } else {
        return SKIP_NONE;
 800dd16:	2300      	movs	r3, #0
    }
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3708      	adds	r7, #8
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <skipAlpha>:
/**
 * Skip any character from 'a'-'Z'
 * @param state
 * @return 
 */
static int skipAlpha(lex_state_t * state) {
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
    int someLetters = 0;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800dd2c:	e007      	b.n	800dd3e <skipAlpha+0x1e>
        state->pos++;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	1c5a      	adds	r2, r3, #1
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	605a      	str	r2, [r3, #4]
        someLetters++;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7ff fecc 	bl	800dadc <iseos>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d10c      	bne.n	800dd64 <skipAlpha+0x44>
 800dd4a:	f004 fd63 	bl	8012814 <__locale_ctype_ptr>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	3301      	adds	r3, #1
 800dd58:	4413      	add	r3, r2
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	f003 0303 	and.w	r3, r3, #3
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1e4      	bne.n	800dd2e <skipAlpha+0xe>
    }
    return someLetters;
 800dd64:	68fb      	ldr	r3, [r7, #12]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <skipChr>:
 * Skip exact character chr or nothing
 * @param state
 * @param chr
 * @return 
 */
static int skipChr(lex_state_t * state, char chr) {
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b082      	sub	sp, #8
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	460b      	mov	r3, r1
 800dd78:	70fb      	strb	r3, [r7, #3]
    if (!iseos(state) && ischr(state, chr)) {
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff feae 	bl	800dadc <iseos>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d10e      	bne.n	800dda4 <skipChr+0x36>
 800dd86:	78fb      	ldrb	r3, [r7, #3]
 800dd88:	4619      	mov	r1, r3
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f7ff fec8 	bl	800db20 <ischr>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d006      	beq.n	800dda4 <skipChr+0x36>
        state->pos++;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	1c5a      	adds	r2, r3, #1
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800dda0:	2301      	movs	r3, #1
 800dda2:	e000      	b.n	800dda6 <skipChr+0x38>
    } else {
        return SKIP_NONE;
 800dda4:	2300      	movs	r3, #0
    }
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3708      	adds	r7, #8
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <skipSlashDot>:
/**
 * Skip slash or dot
 * @param state
 * @return 
 */
static int skipSlashDot(lex_state_t * state) {
 800ddae:	b590      	push	{r4, r7, lr}
 800ddb0:	b083      	sub	sp, #12
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f7ff fe90 	bl	800dadc <iseos>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d113      	bne.n	800ddea <skipSlashDot+0x3c>
 800ddc2:	212f      	movs	r1, #47	; 0x2f
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7ff feab 	bl	800db20 <ischr>
 800ddca:	4604      	mov	r4, r0
 800ddcc:	212e      	movs	r1, #46	; 0x2e
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7ff fea6 	bl	800db20 <ischr>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	4323      	orrs	r3, r4
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d006      	beq.n	800ddea <skipSlashDot+0x3c>
        state->pos++;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	1c5a      	adds	r2, r3, #1
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800dde6:	2301      	movs	r3, #1
 800dde8:	e000      	b.n	800ddec <skipSlashDot+0x3e>
    } else {
        return SKIP_NONE;
 800ddea:	2300      	movs	r3, #0
    }
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd90      	pop	{r4, r7, pc}

0800ddf4 <skipStar>:
/**
 * Skip star
 * @param state
 * @return 
 */
static int skipStar(lex_state_t * state) {
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, '*')) {
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f7ff fe6d 	bl	800dadc <iseos>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d10d      	bne.n	800de24 <skipStar+0x30>
 800de08:	212a      	movs	r1, #42	; 0x2a
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7ff fe88 	bl	800db20 <ischr>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d006      	beq.n	800de24 <skipStar+0x30>
        state->pos++;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	1c5a      	adds	r2, r3, #1
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800de20:	2301      	movs	r3, #1
 800de22:	e000      	b.n	800de26 <skipStar+0x32>
    } else {
        return SKIP_NONE;
 800de24:	2300      	movs	r3, #0
    }
}
 800de26:	4618      	mov	r0, r3
 800de28:	3708      	adds	r7, #8
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <skipColon>:
/**
 * Skip colon
 * @param state
 * @return 
 */
static int skipColon(lex_state_t * state) {
 800de2e:	b580      	push	{r7, lr}
 800de30:	b082      	sub	sp, #8
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, ':')) {
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f7ff fe50 	bl	800dadc <iseos>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10d      	bne.n	800de5e <skipColon+0x30>
 800de42:	213a      	movs	r1, #58	; 0x3a
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f7ff fe6b 	bl	800db20 <ischr>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d006      	beq.n	800de5e <skipColon+0x30>
        state->pos++;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	1c5a      	adds	r2, r3, #1
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e000      	b.n	800de60 <skipColon+0x32>
    } else {
        return SKIP_NONE;
 800de5e:	2300      	movs	r3, #0
    }
}
 800de60:	4618      	mov	r0, r3
 800de62:	3708      	adds	r7, #8
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <skipProgramMnemonic>:
/**
 * Skip program mnemonic [a-z][a-z0-9_]*
 * @param state
 * @return 
 */
static int skipProgramMnemonic(lex_state_t * state) {
 800de68:	b580      	push	{r7, lr}
 800de6a:	b084      	sub	sp, #16
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
    const char * startPos = state->pos;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	60fb      	str	r3, [r7, #12]
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f7ff fe30 	bl	800dadc <iseos>
 800de7c:	4603      	mov	r3, r0
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d131      	bne.n	800dee6 <skipProgramMnemonic+0x7e>
 800de82:	f004 fcc7 	bl	8012814 <__locale_ctype_ptr>
 800de86:	4602      	mov	r2, r0
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	3301      	adds	r3, #1
 800de90:	4413      	add	r3, r2
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	f003 0303 	and.w	r3, r3, #3
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d024      	beq.n	800dee6 <skipProgramMnemonic+0x7e>
        state->pos++;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	1c5a      	adds	r2, r3, #1
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800dea6:	e004      	b.n	800deb2 <skipProgramMnemonic+0x4a>
            state->pos++;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	1c5a      	adds	r2, r3, #1
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7ff fe12 	bl	800dadc <iseos>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d113      	bne.n	800dee6 <skipProgramMnemonic+0x7e>
 800debe:	f004 fca9 	bl	8012814 <__locale_ctype_ptr>
 800dec2:	4602      	mov	r2, r0
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	3301      	adds	r3, #1
 800decc:	4413      	add	r3, r2
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	f003 0307 	and.w	r3, r3, #7
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d1e7      	bne.n	800dea8 <skipProgramMnemonic+0x40>
 800ded8:	215f      	movs	r1, #95	; 0x5f
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f7ff fe20 	bl	800db20 <ischr>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d1e0      	bne.n	800dea8 <skipProgramMnemonic+0x40>
        }
    }

    if (iseos(state)) {
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f7ff fdf8 	bl	800dadc <iseos>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d004      	beq.n	800defc <skipProgramMnemonic+0x94>
        return (state->pos - startPos) * SKIP_INCOMPLETE;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	6852      	ldr	r2, [r2, #4]
 800def8:	1a9b      	subs	r3, r3, r2
 800defa:	e004      	b.n	800df06 <skipProgramMnemonic+0x9e>
    } else {
        return (state->pos - startPos) * SKIP_OK;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	461a      	mov	r2, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	1ad3      	subs	r3, r2, r3
    }
}
 800df06:	4618      	mov	r0, r3
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <scpiLex_WhiteSpace>:
 * Detect token white space
 * @param state
 * @param token
 * @return 
 */
int scpiLex_WhiteSpace(lex_state_t * state, scpi_token_t * token) {
 800df0e:	b580      	push	{r7, lr}
 800df10:	b082      	sub	sp, #8
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
 800df16:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	685a      	ldr	r2, [r3, #4]
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	605a      	str	r2, [r3, #4]

    skipWs(state);
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7ff fe71 	bl	800dc08 <skipWs>

    token->len = state->pos - token->ptr;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	461a      	mov	r2, r3
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	1ad2      	subs	r2, r2, r3
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	609a      	str	r2, [r3, #8]

    if (token->len > 0) {
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	dd03      	ble.n	800df46 <scpiLex_WhiteSpace+0x38>
        token->type = SCPI_TOKEN_WS;
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	2217      	movs	r2, #23
 800df42:	701a      	strb	r2, [r3, #0]
 800df44:	e002      	b.n	800df4c <scpiLex_WhiteSpace+0x3e>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	221a      	movs	r2, #26
 800df4a:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	689b      	ldr	r3, [r3, #8]
}
 800df50:	4618      	mov	r0, r3
 800df52:	3708      	adds	r7, #8
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <skipCommonProgramHeader>:
/**
 * Skip command program header \*<PROGRAM MNEMONIC>
 * @param state
 * @return 
 */
static int skipCommonProgramHeader(lex_state_t * state) {
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
    int res;
    if (skipStar(state)) {
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7ff ff47 	bl	800ddf4 <skipStar>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d01c      	beq.n	800dfa6 <skipCommonProgramHeader+0x4e>
        res = skipProgramMnemonic(state);
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f7ff ff7b 	bl	800de68 <skipProgramMnemonic>
 800df72:	60f8      	str	r0, [r7, #12]
        if (res == SKIP_NONE && iseos(state)) {
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d108      	bne.n	800df8c <skipCommonProgramHeader+0x34>
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f7ff fdae 	bl	800dadc <iseos>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d002      	beq.n	800df8c <skipCommonProgramHeader+0x34>
            return SKIP_INCOMPLETE;
 800df86:	f04f 33ff 	mov.w	r3, #4294967295
 800df8a:	e00d      	b.n	800dfa8 <skipCommonProgramHeader+0x50>
        } else if (res <= SKIP_INCOMPLETE) {
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	da01      	bge.n	800df96 <skipCommonProgramHeader+0x3e>
            return SKIP_OK;
 800df92:	2301      	movs	r3, #1
 800df94:	e008      	b.n	800dfa8 <skipCommonProgramHeader+0x50>
        } else if (res >= SKIP_OK) {
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	dd01      	ble.n	800dfa0 <skipCommonProgramHeader+0x48>
            return SKIP_OK;
 800df9c:	2301      	movs	r3, #1
 800df9e:	e003      	b.n	800dfa8 <skipCommonProgramHeader+0x50>
        } else {
            return SKIP_INCOMPLETE;
 800dfa0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfa4:	e000      	b.n	800dfa8 <skipCommonProgramHeader+0x50>
        }
    }
    return SKIP_NONE;
 800dfa6:	2300      	movs	r3, #0
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3710      	adds	r7, #16
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <skipCompoundProgramHeader>:
/**
 * Skip compound program header :<PROGRAM MNEMONIC>:<PROGRAM MNEMONIC>...
 * @param state
 * @return 
 */
static int skipCompoundProgramHeader(lex_state_t * state) {
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
    int res;
    int firstColon = skipColon(state);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f7ff ff38 	bl	800de2e <skipColon>
 800dfbe:	60f8      	str	r0, [r7, #12]

    res = skipProgramMnemonic(state);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7ff ff51 	bl	800de68 <skipProgramMnemonic>
 800dfc6:	60b8      	str	r0, [r7, #8]
    if (res >= SKIP_OK) {
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	dd17      	ble.n	800dffe <skipCompoundProgramHeader+0x4e>
        while (skipColon(state)) {
 800dfce:	e00e      	b.n	800dfee <skipCompoundProgramHeader+0x3e>
            res = skipProgramMnemonic(state);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7ff ff49 	bl	800de68 <skipProgramMnemonic>
 800dfd6:	60b8      	str	r0, [r7, #8]
            if (res <= SKIP_INCOMPLETE) {
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	da01      	bge.n	800dfe2 <skipCompoundProgramHeader+0x32>
                return SKIP_OK;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e019      	b.n	800e016 <skipCompoundProgramHeader+0x66>
            } else if (res == SKIP_NONE) {
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d102      	bne.n	800dfee <skipCompoundProgramHeader+0x3e>
                return SKIP_INCOMPLETE;
 800dfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfec:	e013      	b.n	800e016 <skipCompoundProgramHeader+0x66>
        while (skipColon(state)) {
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f7ff ff1d 	bl	800de2e <skipColon>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1ea      	bne.n	800dfd0 <skipCompoundProgramHeader+0x20>
            }
        }
        return SKIP_OK;
 800dffa:	2301      	movs	r3, #1
 800dffc:	e00b      	b.n	800e016 <skipCompoundProgramHeader+0x66>
    } else if (res <= SKIP_INCOMPLETE) {
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	2b00      	cmp	r3, #0
 800e002:	da01      	bge.n	800e008 <skipCompoundProgramHeader+0x58>
        return SKIP_OK;
 800e004:	2301      	movs	r3, #1
 800e006:	e006      	b.n	800e016 <skipCompoundProgramHeader+0x66>
    } else if (firstColon) {
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <skipCompoundProgramHeader+0x64>
        return SKIP_INCOMPLETE;
 800e00e:	f04f 33ff 	mov.w	r3, #4294967295
 800e012:	e000      	b.n	800e016 <skipCompoundProgramHeader+0x66>
    } else {
        return SKIP_NONE;
 800e014:	2300      	movs	r3, #0
    }
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <scpiLex_ProgramHeader>:
 * Detect token command or compound program header
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 800e01e:	b580      	push	{r7, lr}
 800e020:	b084      	sub	sp, #16
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
 800e026:	6039      	str	r1, [r7, #0]
    int res;
    token->ptr = state->pos;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	685a      	ldr	r2, [r3, #4]
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	221a      	movs	r2, #26
 800e034:	701a      	strb	r2, [r3, #0]

    res = skipCommonProgramHeader(state);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7ff ff8e 	bl	800df58 <skipCommonProgramHeader>
 800e03c:	60f8      	str	r0, [r7, #12]
    if (res >= SKIP_OK) {
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2b00      	cmp	r3, #0
 800e042:	dd0e      	ble.n	800e062 <scpiLex_ProgramHeader+0x44>
        if (skipChr(state, '?') >= SKIP_OK) {
 800e044:	213f      	movs	r1, #63	; 0x3f
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f7ff fe91 	bl	800dd6e <skipChr>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	dd03      	ble.n	800e05a <scpiLex_ProgramHeader+0x3c>
            token->type = SCPI_TOKEN_COMMON_QUERY_PROGRAM_HEADER;
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	2216      	movs	r2, #22
 800e056:	701a      	strb	r2, [r3, #0]
 800e058:	e029      	b.n	800e0ae <scpiLex_ProgramHeader+0x90>
        } else {
            token->type = SCPI_TOKEN_COMMON_PROGRAM_HEADER;
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	2213      	movs	r2, #19
 800e05e:	701a      	strb	r2, [r3, #0]
 800e060:	e025      	b.n	800e0ae <scpiLex_ProgramHeader+0x90>
        }
    } else if (res <= SKIP_INCOMPLETE) {
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2b00      	cmp	r3, #0
 800e066:	da03      	bge.n	800e070 <scpiLex_ProgramHeader+0x52>
        token->type = SCPI_TOKEN_INCOMPLETE_COMMON_PROGRAM_HEADER;
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	2214      	movs	r2, #20
 800e06c:	701a      	strb	r2, [r3, #0]
 800e06e:	e01e      	b.n	800e0ae <scpiLex_ProgramHeader+0x90>
    } else if (res == SKIP_NONE) {
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d11b      	bne.n	800e0ae <scpiLex_ProgramHeader+0x90>
        res = skipCompoundProgramHeader(state);
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7ff ff9a 	bl	800dfb0 <skipCompoundProgramHeader>
 800e07c:	60f8      	str	r0, [r7, #12]

        if (res >= SKIP_OK) {
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	dd0e      	ble.n	800e0a2 <scpiLex_ProgramHeader+0x84>
            if (skipChr(state, '?') >= SKIP_OK) {
 800e084:	213f      	movs	r1, #63	; 0x3f
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f7ff fe71 	bl	800dd6e <skipChr>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	dd03      	ble.n	800e09a <scpiLex_ProgramHeader+0x7c>
                token->type = SCPI_TOKEN_COMPOUND_QUERY_PROGRAM_HEADER;
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2215      	movs	r2, #21
 800e096:	701a      	strb	r2, [r3, #0]
 800e098:	e009      	b.n	800e0ae <scpiLex_ProgramHeader+0x90>
            } else {
                token->type = SCPI_TOKEN_COMPOUND_PROGRAM_HEADER;
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2211      	movs	r2, #17
 800e09e:	701a      	strb	r2, [r3, #0]
 800e0a0:	e005      	b.n	800e0ae <scpiLex_ProgramHeader+0x90>
            }
        } else if (res <= SKIP_INCOMPLETE) {
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	da02      	bge.n	800e0ae <scpiLex_ProgramHeader+0x90>
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	2212      	movs	r2, #18
 800e0ac:	701a      	strb	r2, [r3, #0]
        }
    }

    if (token->type != SCPI_TOKEN_UNKNOWN) {
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	2b1a      	cmp	r3, #26
 800e0b4:	d008      	beq.n	800e0c8 <scpiLex_ProgramHeader+0xaa>
        token->len = state->pos - token->ptr;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	461a      	mov	r2, r3
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	1ad2      	subs	r2, r2, r3
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	609a      	str	r2, [r3, #8]
 800e0c6:	e006      	b.n	800e0d6 <scpiLex_ProgramHeader+0xb8>
    } else {
        token->len = 0;
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	609a      	str	r2, [r3, #8]
        state->pos = token->ptr;
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	685a      	ldr	r2, [r3, #4]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	605a      	str	r2, [r3, #4]
    }

    return token->len;
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	689b      	ldr	r3, [r3, #8]
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3710      	adds	r7, #16
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <scpiLex_CharacterProgramData>:
 * Detect token "Character program data"
 * @param state
 * @param token
 * @return 
 */
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 800e0e2:	b580      	push	{r7, lr}
 800e0e4:	b082      	sub	sp, #8
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
 800e0ea:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	685a      	ldr	r2, [r3, #4]
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f7ff fcf1 	bl	800dadc <iseos>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d131      	bne.n	800e164 <scpiLex_CharacterProgramData+0x82>
 800e100:	f004 fb88 	bl	8012814 <__locale_ctype_ptr>
 800e104:	4602      	mov	r2, r0
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	3301      	adds	r3, #1
 800e10e:	4413      	add	r3, r2
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	f003 0303 	and.w	r3, r3, #3
 800e116:	2b00      	cmp	r3, #0
 800e118:	d024      	beq.n	800e164 <scpiLex_CharacterProgramData+0x82>
        state->pos++;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	1c5a      	adds	r2, r3, #1
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800e124:	e004      	b.n	800e130 <scpiLex_CharacterProgramData+0x4e>
            state->pos++;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	1c5a      	adds	r2, r3, #1
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7ff fcd3 	bl	800dadc <iseos>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d113      	bne.n	800e164 <scpiLex_CharacterProgramData+0x82>
 800e13c:	f004 fb6a 	bl	8012814 <__locale_ctype_ptr>
 800e140:	4602      	mov	r2, r0
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	3301      	adds	r3, #1
 800e14a:	4413      	add	r3, r2
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	f003 0307 	and.w	r3, r3, #7
 800e152:	2b00      	cmp	r3, #0
 800e154:	d1e7      	bne.n	800e126 <scpiLex_CharacterProgramData+0x44>
 800e156:	215f      	movs	r1, #95	; 0x5f
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f7ff fce1 	bl	800db20 <ischr>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d1e0      	bne.n	800e126 <scpiLex_CharacterProgramData+0x44>
        }
    }

    token->len = state->pos - token->ptr;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	461a      	mov	r2, r3
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	1ad2      	subs	r2, r2, r3
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	689b      	ldr	r3, [r3, #8]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	dd03      	ble.n	800e184 <scpiLex_CharacterProgramData+0xa2>
        token->type = SCPI_TOKEN_PROGRAM_MNEMONIC;
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2209      	movs	r2, #9
 800e180:	701a      	strb	r2, [r3, #0]
 800e182:	e002      	b.n	800e18a <scpiLex_CharacterProgramData+0xa8>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	221a      	movs	r2, #26
 800e188:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	689b      	ldr	r3, [r3, #8]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <skipMantisa>:

/* 7.7.2 <DECIMAL NUMERIC PROGRAM DATA> */
static int skipMantisa(lex_state_t * state) {
 800e196:	b580      	push	{r7, lr}
 800e198:	b084      	sub	sp, #16
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	60fb      	str	r3, [r7, #12]

    skipPlusmn(state);
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f7ff fd9d 	bl	800dce2 <skipPlusmn>

    someNumbers += skipNumbers(state);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f7ff fd73 	bl	800dc94 <skipNumbers>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	60fb      	str	r3, [r7, #12]

    if (skipChr(state, '.')) {
 800e1b6:	212e      	movs	r1, #46	; 0x2e
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7ff fdd8 	bl	800dd6e <skipChr>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d006      	beq.n	800e1d2 <skipMantisa+0x3c>
        someNumbers += skipNumbers(state);
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f7ff fd65 	bl	800dc94 <skipNumbers>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	60fb      	str	r3, [r7, #12]
    }

    return someNumbers;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3710      	adds	r7, #16
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <skipExponent>:

static int skipExponent(lex_state_t * state) {
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	60fb      	str	r3, [r7, #12]

    if (!iseos(state) && isE(state->pos[0])) {
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f7ff fc77 	bl	800dadc <iseos>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d117      	bne.n	800e224 <skipExponent+0x48>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7ff fcf1 	bl	800dbe2 <isE>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00e      	beq.n	800e224 <skipExponent+0x48>
        state->pos++;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	1c5a      	adds	r2, r3, #1
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	605a      	str	r2, [r3, #4]

        skipWs(state);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7ff fcf9 	bl	800dc08 <skipWs>

        skipPlusmn(state);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7ff fd63 	bl	800dce2 <skipPlusmn>

        someNumbers = skipNumbers(state);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f7ff fd39 	bl	800dc94 <skipNumbers>
 800e222:	60f8      	str	r0, [r7, #12]
    }

    return someNumbers;
 800e224:	68fb      	ldr	r3, [r7, #12]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}

0800e22e <scpiLex_DecimalNumericProgramData>:
 * Detect token Decimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 800e22e:	b580      	push	{r7, lr}
 800e230:	b084      	sub	sp, #16
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
 800e236:	6039      	str	r1, [r7, #0]
    char * rollback;
    token->ptr = state->pos;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	685a      	ldr	r2, [r3, #4]
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	605a      	str	r2, [r3, #4]

    if (skipMantisa(state)) {
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7ff ffa8 	bl	800e196 <skipMantisa>
 800e246:	4603      	mov	r3, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00f      	beq.n	800e26c <scpiLex_DecimalNumericProgramData+0x3e>
        rollback = state->pos;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	60fb      	str	r3, [r7, #12]
        skipWs(state);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f7ff fcd8 	bl	800dc08 <skipWs>
        if (!skipExponent(state)) {
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f7ff ffbf 	bl	800e1dc <skipExponent>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d107      	bne.n	800e274 <scpiLex_DecimalNumericProgramData+0x46>
            state->pos = rollback;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	605a      	str	r2, [r3, #4]
 800e26a:	e003      	b.n	800e274 <scpiLex_DecimalNumericProgramData+0x46>
        }
    } else {
        state->pos = token->ptr;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	685a      	ldr	r2, [r3, #4]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	605a      	str	r2, [r3, #4]
    }

    token->len = state->pos - token->ptr;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	461a      	mov	r2, r3
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	1ad2      	subs	r2, r2, r3
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	dd03      	ble.n	800e294 <scpiLex_DecimalNumericProgramData+0x66>
        token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA;
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	220a      	movs	r2, #10
 800e290:	701a      	strb	r2, [r3, #0]
 800e292:	e002      	b.n	800e29a <scpiLex_DecimalNumericProgramData+0x6c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	221a      	movs	r2, #26
 800e298:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	689b      	ldr	r3, [r3, #8]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <scpiLex_SuffixProgramData>:

/* 7.7.3 <SUFFIX PROGRAM DATA> */
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b082      	sub	sp, #8
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
 800e2ae:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	685a      	ldr	r2, [r3, #4]
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	605a      	str	r2, [r3, #4]

    skipChr(state, '/');
 800e2b8:	212f      	movs	r1, #47	; 0x2f
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f7ff fd57 	bl	800dd6e <skipChr>

    /* TODO: strict parsing  : SLASH? (ALPHA+ (MINUS? DIGIT)?) ((SLASH | DOT) (ALPHA+ (MINUS? DIGIT)?))* */
    if (skipAlpha(state)) {
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7ff fd2d 	bl	800dd20 <skipAlpha>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d017      	beq.n	800e2fc <scpiLex_SuffixProgramData+0x56>
        skipChr(state, '-');
 800e2cc:	212d      	movs	r1, #45	; 0x2d
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f7ff fd4d 	bl	800dd6e <skipChr>
        skipDigit(state);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7ff fcba 	bl	800dc4e <skipDigit>

        while (skipSlashDot(state)) {
 800e2da:	e009      	b.n	800e2f0 <scpiLex_SuffixProgramData+0x4a>
            skipAlpha(state);
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f7ff fd1f 	bl	800dd20 <skipAlpha>
            skipChr(state, '-');
 800e2e2:	212d      	movs	r1, #45	; 0x2d
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f7ff fd42 	bl	800dd6e <skipChr>
            skipDigit(state);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f7ff fcaf 	bl	800dc4e <skipDigit>
        while (skipSlashDot(state)) {
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7ff fd5c 	bl	800ddae <skipSlashDot>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1ef      	bne.n	800e2dc <scpiLex_SuffixProgramData+0x36>
        }
    }

    token->len = state->pos - token->ptr;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	461a      	mov	r2, r3
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	1ad2      	subs	r2, r2, r3
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	609a      	str	r2, [r3, #8]
    if ((token->len > 0)) {
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	689b      	ldr	r3, [r3, #8]
 800e310:	2b00      	cmp	r3, #0
 800e312:	dd03      	ble.n	800e31c <scpiLex_SuffixProgramData+0x76>
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	220c      	movs	r2, #12
 800e318:	701a      	strb	r2, [r3, #0]
 800e31a:	e009      	b.n	800e330 <scpiLex_SuffixProgramData+0x8a>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	221a      	movs	r2, #26
 800e320:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	685a      	ldr	r2, [r3, #4]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	2200      	movs	r2, #0
 800e32e:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	689b      	ldr	r3, [r3, #8]
}
 800e334:	4618      	mov	r0, r3
 800e336:	3708      	adds	r7, #8
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <skipHexNum>:

/* 7.7.4 <NONDECIMAL NUMERIC PROGRAM DATA> */
static int skipHexNum(lex_state_t * state) {
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800e344:	2300      	movs	r3, #0
 800e346:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 800e348:	e007      	b.n	800e35a <skipHexNum+0x1e>
        state->pos++;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	1c5a      	adds	r2, r3, #1
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	605a      	str	r2, [r3, #4]
        someNumbers++;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	3301      	adds	r3, #1
 800e358:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f7ff fbbe 	bl	800dadc <iseos>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10c      	bne.n	800e380 <skipHexNum+0x44>
 800e366:	f004 fa55 	bl	8012814 <__locale_ctype_ptr>
 800e36a:	4602      	mov	r2, r0
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	3301      	adds	r3, #1
 800e374:	4413      	add	r3, r2
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d1e4      	bne.n	800e34a <skipHexNum+0xe>
    }
    return someNumbers;
 800e380:	68fb      	ldr	r3, [r7, #12]
}
 800e382:	4618      	mov	r0, r3
 800e384:	3710      	adds	r7, #16
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <skipOctNum>:

static int skipOctNum(lex_state_t * state) {
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b084      	sub	sp, #16
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 800e396:	e007      	b.n	800e3a8 <skipOctNum+0x1e>
        state->pos++;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	1c5a      	adds	r2, r3, #1
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	605a      	str	r2, [r3, #4]
        someNumbers++;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f7ff fb97 	bl	800dadc <iseos>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d108      	bne.n	800e3c6 <skipOctNum+0x3c>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7ff fb69 	bl	800da92 <isqdigit>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1e8      	bne.n	800e398 <skipOctNum+0xe>
    }
    return someNumbers;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3710      	adds	r7, #16
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <skipBinNum>:

static int skipBinNum(lex_state_t * state) {
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 800e3dc:	e007      	b.n	800e3ee <skipBinNum+0x1e>
        state->pos++;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	1c5a      	adds	r2, r3, #1
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	605a      	str	r2, [r3, #4]
        someNumbers++;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7ff fb74 	bl	800dadc <iseos>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d108      	bne.n	800e40c <skipBinNum+0x3c>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	4618      	mov	r0, r3
 800e402:	f7ff fb33 	bl	800da6c <isbdigit>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d1e8      	bne.n	800e3de <skipBinNum+0xe>
    }
    return someNumbers;
 800e40c:	68fb      	ldr	r3, [r7, #12]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <scpiLex_NondecimalNumericData>:
 * Detect token nondecimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 800e416:	b580      	push	{r7, lr}
 800e418:	b084      	sub	sp, #16
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
 800e41e:	6039      	str	r1, [r7, #0]
    int someNumbers = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	685a      	ldr	r2, [r3, #4]
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	605a      	str	r2, [r3, #4]
    if (skipChr(state, '#')) {
 800e42c:	2123      	movs	r1, #35	; 0x23
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f7ff fc9d 	bl	800dd6e <skipChr>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d046      	beq.n	800e4c8 <scpiLex_NondecimalNumericData+0xb2>
        if (!iseos(state)) {
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f7ff fb4e 	bl	800dadc <iseos>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d140      	bne.n	800e4c8 <scpiLex_NondecimalNumericData+0xb2>
            if (isH(state->pos[0])) {
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7ff fb8f 	bl	800db70 <isH>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d00c      	beq.n	800e472 <scpiLex_NondecimalNumericData+0x5c>
                state->pos++;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	1c5a      	adds	r2, r3, #1
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	605a      	str	r2, [r3, #4]
                someNumbers = skipHexNum(state);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7ff ff6a 	bl	800e33c <skipHexNum>
 800e468:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_HEXNUM;
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	2206      	movs	r2, #6
 800e46e:	701a      	strb	r2, [r3, #0]
 800e470:	e02a      	b.n	800e4c8 <scpiLex_NondecimalNumericData+0xb2>
            } else if (isQ(state->pos[0])) {
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	4618      	mov	r0, r3
 800e47a:	f7ff fb9f 	bl	800dbbc <isQ>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00c      	beq.n	800e49e <scpiLex_NondecimalNumericData+0x88>
                state->pos++;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	1c5a      	adds	r2, r3, #1
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	605a      	str	r2, [r3, #4]
                someNumbers = skipOctNum(state);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7ff ff7b 	bl	800e38a <skipOctNum>
 800e494:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_OCTNUM;
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	2207      	movs	r2, #7
 800e49a:	701a      	strb	r2, [r3, #0]
 800e49c:	e014      	b.n	800e4c8 <scpiLex_NondecimalNumericData+0xb2>
            } else if (isB(state->pos[0])) {
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7ff fb76 	bl	800db96 <isB>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00b      	beq.n	800e4c8 <scpiLex_NondecimalNumericData+0xb2>
                state->pos++;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	1c5a      	adds	r2, r3, #1
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	605a      	str	r2, [r3, #4]
                someNumbers = skipBinNum(state);
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f7ff ff88 	bl	800e3d0 <skipBinNum>
 800e4c0:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_BINNUM;
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2208      	movs	r2, #8
 800e4c6:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (someNumbers) {
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d00d      	beq.n	800e4ea <scpiLex_NondecimalNumericData+0xd4>
        token->ptr += 2; /* ignore number prefix */
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	1c9a      	adds	r2, r3, #2
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	605a      	str	r2, [r3, #4]
        token->len = state->pos - token->ptr;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	461a      	mov	r2, r3
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	1ad2      	subs	r2, r2, r3
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	609a      	str	r2, [r3, #8]
 800e4e8:	e009      	b.n	800e4fe <scpiLex_NondecimalNumericData+0xe8>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	221a      	movs	r2, #26
 800e4ee:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	685a      	ldr	r2, [r3, #4]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	609a      	str	r2, [r3, #8]
    }
    return token->len > 0 ? token->len + 2 : 0;
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	2b00      	cmp	r3, #0
 800e504:	dd03      	ble.n	800e50e <scpiLex_NondecimalNumericData+0xf8>
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	3302      	adds	r3, #2
 800e50c:	e000      	b.n	800e510 <scpiLex_NondecimalNumericData+0xfa>
 800e50e:	2300      	movs	r3, #0
}
 800e510:	4618      	mov	r0, r3
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <isascii7bit>:

/* 7.7.5 <STRING PROGRAM DATA> */
static int isascii7bit(int c) {
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
    return (c >= 0) && (c <= 0x7f);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2b00      	cmp	r3, #0
 800e524:	db04      	blt.n	800e530 <isascii7bit+0x18>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2b7f      	cmp	r3, #127	; 0x7f
 800e52a:	dc01      	bgt.n	800e530 <isascii7bit+0x18>
 800e52c:	2301      	movs	r3, #1
 800e52e:	e000      	b.n	800e532 <isascii7bit+0x1a>
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	370c      	adds	r7, #12
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr

0800e53e <skipQuoteProgramData>:

static void skipQuoteProgramData(lex_state_t * state, char quote) {
 800e53e:	b580      	push	{r7, lr}
 800e540:	b082      	sub	sp, #8
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
 800e546:	460b      	mov	r3, r1
 800e548:	70fb      	strb	r3, [r7, #3]
    while (!iseos(state)) {
 800e54a:	e03d      	b.n	800e5c8 <skipQuoteProgramData+0x8a>
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	4618      	mov	r0, r3
 800e554:	f7ff ffe0 	bl	800e518 <isascii7bit>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00d      	beq.n	800e57a <skipQuoteProgramData+0x3c>
 800e55e:	78fb      	ldrb	r3, [r7, #3]
 800e560:	4619      	mov	r1, r3
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f7ff fadc 	bl	800db20 <ischr>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d105      	bne.n	800e57a <skipQuoteProgramData+0x3c>
            state->pos++;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	1c5a      	adds	r2, r3, #1
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	605a      	str	r2, [r3, #4]
 800e578:	e026      	b.n	800e5c8 <skipQuoteProgramData+0x8a>
        } else if (ischr(state, quote)) {
 800e57a:	78fb      	ldrb	r3, [r7, #3]
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7ff face 	bl	800db20 <ischr>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d025      	beq.n	800e5d6 <skipQuoteProgramData+0x98>
            state->pos++;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	1c5a      	adds	r2, r3, #1
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	605a      	str	r2, [r3, #4]
            if (!iseos(state) && ischr(state, quote)) {
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f7ff faa1 	bl	800dadc <iseos>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d10d      	bne.n	800e5bc <skipQuoteProgramData+0x7e>
 800e5a0:	78fb      	ldrb	r3, [r7, #3]
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7ff fabb 	bl	800db20 <ischr>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d005      	beq.n	800e5bc <skipQuoteProgramData+0x7e>
                state->pos++;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	1c5a      	adds	r2, r3, #1
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	605a      	str	r2, [r3, #4]
 800e5ba:	e005      	b.n	800e5c8 <skipQuoteProgramData+0x8a>
            } else {
                state->pos--;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	1e5a      	subs	r2, r3, #1
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	605a      	str	r2, [r3, #4]
                break;
 800e5c6:	e007      	b.n	800e5d8 <skipQuoteProgramData+0x9a>
    while (!iseos(state)) {
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f7ff fa87 	bl	800dadc <iseos>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d0bb      	beq.n	800e54c <skipQuoteProgramData+0xe>
            }
        } else {
            break;
        }
    }
}
 800e5d4:	e000      	b.n	800e5d8 <skipQuoteProgramData+0x9a>
            break;
 800e5d6:	bf00      	nop
}
 800e5d8:	bf00      	nop
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <skipDoubleQuoteProgramData>:

static void skipDoubleQuoteProgramData(lex_state_t * state) {
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '"');
 800e5e8:	2122      	movs	r1, #34	; 0x22
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7ff ffa7 	bl	800e53e <skipQuoteProgramData>
}
 800e5f0:	bf00      	nop
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <skipSingleQuoteProgramData>:

static void skipSingleQuoteProgramData(lex_state_t * state) {
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '\'');
 800e600:	2127      	movs	r1, #39	; 0x27
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f7ff ff9b 	bl	800e53e <skipQuoteProgramData>
}
 800e608:	bf00      	nop
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <scpiLex_StringProgramData>:
 * Detect token String data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	685a      	ldr	r2, [r3, #4]
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	605a      	str	r2, [r3, #4]

    if (!iseos(state)) {
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f7ff fa5a 	bl	800dadc <iseos>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d162      	bne.n	800e6f4 <scpiLex_StringProgramData+0xe4>
        if (ischr(state, '"')) {
 800e62e:	2122      	movs	r1, #34	; 0x22
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7ff fa75 	bl	800db20 <ischr>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d02a      	beq.n	800e692 <scpiLex_StringProgramData+0x82>
            state->pos++;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	1c5a      	adds	r2, r3, #1
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	220f      	movs	r2, #15
 800e64a:	701a      	strb	r2, [r3, #0]
            skipDoubleQuoteProgramData(state);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7ff ffc7 	bl	800e5e0 <skipDoubleQuoteProgramData>
            if (!iseos(state) && ischr(state, '"')) {
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f7ff fa42 	bl	800dadc <iseos>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d114      	bne.n	800e688 <scpiLex_StringProgramData+0x78>
 800e65e:	2122      	movs	r1, #34	; 0x22
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f7ff fa5d 	bl	800db20 <ischr>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d00d      	beq.n	800e688 <scpiLex_StringProgramData+0x78>
                state->pos++;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	1c5a      	adds	r2, r3, #1
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	461a      	mov	r2, r3
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	1ad2      	subs	r2, r2, r3
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	609a      	str	r2, [r3, #8]
 800e686:	e035      	b.n	800e6f4 <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	685a      	ldr	r2, [r3, #4]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	605a      	str	r2, [r3, #4]
 800e690:	e030      	b.n	800e6f4 <scpiLex_StringProgramData+0xe4>
            }
        } else if (ischr(state, '\'')) {
 800e692:	2127      	movs	r1, #39	; 0x27
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7ff fa43 	bl	800db20 <ischr>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d029      	beq.n	800e6f4 <scpiLex_StringProgramData+0xe4>
            state->pos++;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	1c5a      	adds	r2, r3, #1
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	220e      	movs	r2, #14
 800e6ae:	701a      	strb	r2, [r3, #0]
            skipSingleQuoteProgramData(state);
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f7ff ffa1 	bl	800e5f8 <skipSingleQuoteProgramData>
            if (!iseos(state) && ischr(state, '\'')) {
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f7ff fa10 	bl	800dadc <iseos>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d114      	bne.n	800e6ec <scpiLex_StringProgramData+0xdc>
 800e6c2:	2127      	movs	r1, #39	; 0x27
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7ff fa2b 	bl	800db20 <ischr>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d00d      	beq.n	800e6ec <scpiLex_StringProgramData+0xdc>
                state->pos++;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	1c5a      	adds	r2, r3, #1
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	461a      	mov	r2, r3
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	1ad2      	subs	r2, r2, r3
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	609a      	str	r2, [r3, #8]
 800e6ea:	e003      	b.n	800e6f4 <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	685a      	ldr	r2, [r3, #4]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	605a      	str	r2, [r3, #4]
            }
        }
    }

    token->len = state->pos - token->ptr;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	1ad2      	subs	r2, r2, r3
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	689b      	ldr	r3, [r3, #8]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	dc09      	bgt.n	800e720 <scpiLex_StringProgramData+0x110>
        /* token->ptr++;
         * token->len -= 2; */
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	221a      	movs	r2, #26
 800e710:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	685a      	ldr	r2, [r3, #4]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	2200      	movs	r2, #0
 800e71e:	609a      	str	r2, [r3, #8]
    }

    return token->len > 0 ? token->len : 0;
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	689b      	ldr	r3, [r3, #8]
 800e724:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <isNonzeroDigit>:

/* 7.7.6 <ARBITRARY BLOCK PROGRAM DATA> */
static int isNonzeroDigit(int c) {
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
    return isdigit(c) && (c != '0');
 800e738:	f004 f86c 	bl	8012814 <__locale_ctype_ptr>
 800e73c:	4602      	mov	r2, r0
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	3301      	adds	r3, #1
 800e742:	4413      	add	r3, r2
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	f003 0304 	and.w	r3, r3, #4
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d004      	beq.n	800e758 <isNonzeroDigit+0x28>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2b30      	cmp	r3, #48	; 0x30
 800e752:	d001      	beq.n	800e758 <isNonzeroDigit+0x28>
 800e754:	2301      	movs	r3, #1
 800e756:	e000      	b.n	800e75a <isNonzeroDigit+0x2a>
 800e758:	2300      	movs	r3, #0
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3708      	adds	r7, #8
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}

0800e762 <scpiLex_ArbitraryBlockProgramData>:
 * Detect token Block Data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 800e762:	b580      	push	{r7, lr}
 800e764:	b086      	sub	sp, #24
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
 800e76a:	6039      	str	r1, [r7, #0]
    int i;
    int arbitraryBlockLength = 0;
 800e76c:	2300      	movs	r3, #0
 800e76e:	613b      	str	r3, [r7, #16]
    const char * ptr = state->pos;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	60bb      	str	r3, [r7, #8]
    int validData = -1;
 800e776:	f04f 33ff 	mov.w	r3, #4294967295
 800e77a:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	685a      	ldr	r2, [r3, #4]
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	605a      	str	r2, [r3, #4]

    if (skipChr(state, '#')) {
 800e784:	2123      	movs	r1, #35	; 0x23
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7ff faf1 	bl	800dd6e <skipChr>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d079      	beq.n	800e886 <scpiLex_ArbitraryBlockProgramData+0x124>
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7ff f9a2 	bl	800dadc <iseos>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d169      	bne.n	800e872 <scpiLex_ArbitraryBlockProgramData+0x110>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7ff ffc3 	bl	800e730 <isNonzeroDigit>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d060      	beq.n	800e872 <scpiLex_ArbitraryBlockProgramData+0x110>
            /* Get number of digits */
            i = state->pos[0] - '0';
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	3b30      	subs	r3, #48	; 0x30
 800e7b8:	617b      	str	r3, [r7, #20]
            state->pos++;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	1c5a      	adds	r2, r3, #1
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	605a      	str	r2, [r3, #4]

            for (; i > 0; i--) {
 800e7c4:	e027      	b.n	800e816 <scpiLex_ArbitraryBlockProgramData+0xb4>
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7ff f988 	bl	800dadc <iseos>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d124      	bne.n	800e81c <scpiLex_ArbitraryBlockProgramData+0xba>
 800e7d2:	f004 f81f 	bl	8012814 <__locale_ctype_ptr>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	781b      	ldrb	r3, [r3, #0]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	4413      	add	r3, r2
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	f003 0304 	and.w	r3, r3, #4
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d017      	beq.n	800e81c <scpiLex_ArbitraryBlockProgramData+0xba>
                    arbitraryBlockLength *= 10;
 800e7ec:	693a      	ldr	r2, [r7, #16]
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	009b      	lsls	r3, r3, #2
 800e7f2:	4413      	add	r3, r2
 800e7f4:	005b      	lsls	r3, r3, #1
 800e7f6:	613b      	str	r3, [r7, #16]
                    arbitraryBlockLength += (state->pos[0] - '0');
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	3b30      	subs	r3, #48	; 0x30
 800e800:	693a      	ldr	r2, [r7, #16]
 800e802:	4413      	add	r3, r2
 800e804:	613b      	str	r3, [r7, #16]
                    state->pos++;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	1c5a      	adds	r2, r3, #1
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	605a      	str	r2, [r3, #4]
            for (; i > 0; i--) {
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	3b01      	subs	r3, #1
 800e814:	617b      	str	r3, [r7, #20]
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	dcd4      	bgt.n	800e7c6 <scpiLex_ArbitraryBlockProgramData+0x64>
                } else {
                    break;
                }
            }

            if (i == 0) {
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d11e      	bne.n	800e860 <scpiLex_ArbitraryBlockProgramData+0xfe>
                state->pos += arbitraryBlockLength;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	685a      	ldr	r2, [r3, #4]
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	441a      	add	r2, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	605a      	str	r2, [r3, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	6892      	ldr	r2, [r2, #8]
 800e836:	441a      	add	r2, r3
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d30c      	bcc.n	800e85a <scpiLex_ArbitraryBlockProgramData+0xf8>
                    token->ptr = state->pos - arbitraryBlockLength;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	685a      	ldr	r2, [r3, #4]
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	425b      	negs	r3, r3
 800e848:	441a      	add	r2, r3
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	605a      	str	r2, [r3, #4]
                    token->len = arbitraryBlockLength;
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	693a      	ldr	r2, [r7, #16]
 800e852:	609a      	str	r2, [r3, #8]
                    validData = 1;
 800e854:	2301      	movs	r3, #1
 800e856:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 800e858:	e014      	b.n	800e884 <scpiLex_ArbitraryBlockProgramData+0x122>
                } else {
                    validData = 0;
 800e85a:	2300      	movs	r3, #0
 800e85c:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 800e85e:	e011      	b.n	800e884 <scpiLex_ArbitraryBlockProgramData+0x122>
                }
            } else if (iseos(state)) {
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7ff f93b 	bl	800dadc <iseos>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d00b      	beq.n	800e884 <scpiLex_ArbitraryBlockProgramData+0x122>
                validData = 0;
 800e86c:	2300      	movs	r3, #0
 800e86e:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 800e870:	e008      	b.n	800e884 <scpiLex_ArbitraryBlockProgramData+0x122>
            }
        } else if (iseos(state)) {
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7ff f932 	bl	800dadc <iseos>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d003      	beq.n	800e886 <scpiLex_ArbitraryBlockProgramData+0x124>
            validData = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	60fb      	str	r3, [r7, #12]
 800e882:	e000      	b.n	800e886 <scpiLex_ArbitraryBlockProgramData+0x124>
            if (i == 0) {
 800e884:	bf00      	nop
        }
    }

    if (validData == 1) {
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d103      	bne.n	800e894 <scpiLex_ArbitraryBlockProgramData+0x132>
        /* valid */
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	220d      	movs	r2, #13
 800e890:	701a      	strb	r2, [r3, #0]
 800e892:	e01a      	b.n	800e8ca <scpiLex_ArbitraryBlockProgramData+0x168>
    } else if (validData == 0) {
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d10d      	bne.n	800e8b6 <scpiLex_ArbitraryBlockProgramData+0x154>
        /* incomplete */
        token->type = SCPI_TOKEN_UNKNOWN;
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	221a      	movs	r2, #26
 800e89e:	701a      	strb	r2, [r3, #0]
        token->len = 0;
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	609a      	str	r2, [r3, #8]
        state->pos = state->buffer + state->len;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	6892      	ldr	r2, [r2, #8]
 800e8ae:	441a      	add	r2, r3
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	605a      	str	r2, [r3, #4]
 800e8b4:	e009      	b.n	800e8ca <scpiLex_ArbitraryBlockProgramData+0x168>
    } else {
        /* invalid */
        token->type = SCPI_TOKEN_UNKNOWN;
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	221a      	movs	r2, #26
 800e8ba:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	609a      	str	r2, [r3, #8]
    }

    return token->len + (token->ptr - ptr);
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	689a      	ldr	r2, [r3, #8]
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	1acb      	subs	r3, r1, r3
 800e8d8:	4413      	add	r3, r2
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3718      	adds	r7, #24
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <isProgramExpression>:

/* 7.7.7 <EXPRESSION PROGRAM DATA> */
static int isProgramExpression(int c) {
 800e8e2:	b480      	push	{r7}
 800e8e4:	b083      	sub	sp, #12
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
    if ((c >= 0x20) && (c <= 0x7e)) {
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b1f      	cmp	r3, #31
 800e8ee:	dd16      	ble.n	800e91e <isProgramExpression+0x3c>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b7e      	cmp	r3, #126	; 0x7e
 800e8f4:	dc13      	bgt.n	800e91e <isProgramExpression+0x3c>
        if ((c != '"')
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b22      	cmp	r3, #34	; 0x22
 800e8fa:	d010      	beq.n	800e91e <isProgramExpression+0x3c>
                && (c != '#')
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b23      	cmp	r3, #35	; 0x23
 800e900:	d00d      	beq.n	800e91e <isProgramExpression+0x3c>
                && (c != '\'')
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b27      	cmp	r3, #39	; 0x27
 800e906:	d00a      	beq.n	800e91e <isProgramExpression+0x3c>
                && (c != '(')
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2b28      	cmp	r3, #40	; 0x28
 800e90c:	d007      	beq.n	800e91e <isProgramExpression+0x3c>
                && (c != ')')
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2b29      	cmp	r3, #41	; 0x29
 800e912:	d004      	beq.n	800e91e <isProgramExpression+0x3c>
                && (c != ';')) {
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2b3b      	cmp	r3, #59	; 0x3b
 800e918:	d001      	beq.n	800e91e <isProgramExpression+0x3c>
            return 1;
 800e91a:	2301      	movs	r3, #1
 800e91c:	e000      	b.n	800e920 <isProgramExpression+0x3e>
        }
    }

    return 0;
 800e91e:	2300      	movs	r3, #0
}
 800e920:	4618      	mov	r0, r3
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <skipProgramExpression>:

static void skipProgramExpression(lex_state_t * state) {
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 800e934:	e004      	b.n	800e940 <skipProgramExpression+0x14>
        state->pos++;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	1c5a      	adds	r2, r3, #1
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	605a      	str	r2, [r3, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f7ff f8cb 	bl	800dadc <iseos>
 800e946:	4603      	mov	r3, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d108      	bne.n	800e95e <skipProgramExpression+0x32>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	4618      	mov	r0, r3
 800e954:	f7ff ffc5 	bl	800e8e2 <isProgramExpression>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d1eb      	bne.n	800e936 <skipProgramExpression+0xa>
    }
}
 800e95e:	bf00      	nop
 800e960:	3708      	adds	r7, #8
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <scpiLex_ProgramExpression>:
 * Detect token Expression
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 800e966:	b580      	push	{r7, lr}
 800e968:	b082      	sub	sp, #8
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
 800e96e:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	685a      	ldr	r2, [r3, #4]
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && ischr(state, '(')) {
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7ff f8af 	bl	800dadc <iseos>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	d12c      	bne.n	800e9de <scpiLex_ProgramExpression+0x78>
 800e984:	2128      	movs	r1, #40	; 0x28
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7ff f8ca 	bl	800db20 <ischr>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d025      	beq.n	800e9de <scpiLex_ProgramExpression+0x78>
        state->pos++;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	685b      	ldr	r3, [r3, #4]
 800e996:	1c5a      	adds	r2, r3, #1
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	605a      	str	r2, [r3, #4]
        skipProgramExpression(state);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f7ff ffc5 	bl	800e92c <skipProgramExpression>

        if (!iseos(state) && ischr(state, ')')) {
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7ff f89a 	bl	800dadc <iseos>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d114      	bne.n	800e9d8 <scpiLex_ProgramExpression+0x72>
 800e9ae:	2129      	movs	r1, #41	; 0x29
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f7ff f8b5 	bl	800db20 <ischr>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00d      	beq.n	800e9d8 <scpiLex_ProgramExpression+0x72>
            state->pos++;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	1c5a      	adds	r2, r3, #1
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	605a      	str	r2, [r3, #4]
            token->len = state->pos - token->ptr;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	1ad2      	subs	r2, r2, r3
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	609a      	str	r2, [r3, #8]
 800e9d6:	e002      	b.n	800e9de <scpiLex_ProgramExpression+0x78>
        } else {
            token->len = 0;
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	609a      	str	r2, [r3, #8]
        }
    }

    if ((token->len > 0)) {
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	689b      	ldr	r3, [r3, #8]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	dd03      	ble.n	800e9ee <scpiLex_ProgramExpression+0x88>
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	2210      	movs	r2, #16
 800e9ea:	701a      	strb	r2, [r3, #0]
 800e9ec:	e009      	b.n	800ea02 <scpiLex_ProgramExpression+0x9c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	221a      	movs	r2, #26
 800e9f2:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	685a      	ldr	r2, [r3, #4]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	689b      	ldr	r3, [r3, #8]
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <scpiLex_Comma>:
 * Detect token comma
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b082      	sub	sp, #8
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	685a      	ldr	r2, [r3, #4]
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ',')) {
 800ea20:	212c      	movs	r1, #44	; 0x2c
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7ff f9a3 	bl	800dd6e <skipChr>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d006      	beq.n	800ea3c <scpiLex_Comma+0x2e>
        token->len = 1;
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	2201      	movs	r2, #1
 800ea32:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_COMMA;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	2200      	movs	r2, #0
 800ea38:	701a      	strb	r2, [r3, #0]
 800ea3a:	e005      	b.n	800ea48 <scpiLex_Comma+0x3a>
    } else {
        token->len = 0;
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	221a      	movs	r2, #26
 800ea46:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	689b      	ldr	r3, [r3, #8]
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3708      	adds	r7, #8
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <scpiLex_Semicolon>:
 * Detect token semicolon
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	685a      	ldr	r2, [r3, #4]
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ';')) {
 800ea66:	213b      	movs	r1, #59	; 0x3b
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7ff f980 	bl	800dd6e <skipChr>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d006      	beq.n	800ea82 <scpiLex_Semicolon+0x2e>
        token->len = 1;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	2201      	movs	r2, #1
 800ea78:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_SEMICOLON;
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	701a      	strb	r2, [r3, #0]
 800ea80:	e005      	b.n	800ea8e <scpiLex_Semicolon+0x3a>
    } else {
        token->len = 0;
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	2200      	movs	r2, #0
 800ea86:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	221a      	movs	r2, #26
 800ea8c:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	689b      	ldr	r3, [r3, #8]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3708      	adds	r7, #8
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b082      	sub	sp, #8
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
 800eaa2:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	685a      	ldr	r2, [r3, #4]
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	605a      	str	r2, [r3, #4]

    skipChr(state, '\r');
 800eaac:	210d      	movs	r1, #13
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f7ff f95d 	bl	800dd6e <skipChr>
    skipChr(state, '\n');
 800eab4:	210a      	movs	r1, #10
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f7ff f959 	bl	800dd6e <skipChr>

    token->len = state->pos - token->ptr;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	461a      	mov	r2, r3
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	1ad2      	subs	r2, r2, r3
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	dd03      	ble.n	800eadc <scpiLex_NewLine+0x42>
        token->type = SCPI_TOKEN_NL;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	2205      	movs	r2, #5
 800ead8:	701a      	strb	r2, [r3, #0]
 800eada:	e009      	b.n	800eaf0 <scpiLex_NewLine+0x56>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	221a      	movs	r2, #26
 800eae0:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	685a      	ldr	r2, [r3, #4]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	605a      	str	r2, [r3, #4]
        token->len = 0;
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	2200      	movs	r2, #0
 800eaee:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	689b      	ldr	r3, [r3, #8]
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3708      	adds	r7, #8
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
    SCPI_ResultMnemonic(context, SCPI_STD_VERSION_REVISION);
 800eb04:	2206      	movs	r2, #6
 800eb06:	4904      	ldr	r1, [pc, #16]	; (800eb18 <SCPI_SystemVersionQ+0x1c>)
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 fae7 	bl	800f0dc <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 800eb0e:	2301      	movs	r3, #1
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3708      	adds	r7, #8
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	08015d90 	.word	0x08015d90

0800eb1c <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    SCPI_ErrorPop(context, &error);
 800eb24:	f107 030c 	add.w	r3, r7, #12
 800eb28:	4619      	mov	r1, r3
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7fe fa6c 	bl	800d008 <SCPI_ErrorPop>
    SCPI_ResultError(context, &error);
 800eb30:	f107 030c 	add.w	r3, r7, #12
 800eb34:	4619      	mov	r1, r3
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f000 fbce 	bl	800f2d8 <SCPI_ResultError>
#if USE_DEVICE_DEPENDENT_ERROR_INFORMATION
    SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
#endif
    return SCPI_RES_OK;
 800eb3c:	2301      	movs	r3, #1
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b082      	sub	sp, #8
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_ErrorCount(context));
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f7fe fa78 	bl	800d044 <SCPI_ErrorCount>
 800eb54:	4603      	mov	r3, r0
 800eb56:	4619      	mov	r1, r3
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f000 fb48 	bl	800f1ee <SCPI_ResultInt32>

    return SCPI_RES_OK;
 800eb5e:	2301      	movs	r3, #1
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	607a      	str	r2, [r7, #4]
    if (len > 0) {
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d008      	beq.n	800eb8c <writeData+0x24>
        return context->interface->write(context, data, len);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	68b9      	ldr	r1, [r7, #8]
 800eb84:	68f8      	ldr	r0, [r7, #12]
 800eb86:	4798      	blx	r3
 800eb88:	4603      	mov	r3, r0
 800eb8a:	e000      	b.n	800eb8e <writeData+0x26>
    } else {
        return 0;
 800eb8c:	2300      	movs	r3, #0
    }
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3710      	adds	r7, #16
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}

0800eb96 <flushData>:
/**
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
 800eb96:	b580      	push	{r7, lr}
 800eb98:	b082      	sub	sp, #8
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->flush) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d00f      	beq.n	800ebc4 <flushData+0x2e>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d00b      	beq.n	800ebc4 <flushData+0x2e>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d006      	beq.n	800ebc4 <flushData+0x2e>
        return context->interface->flush(context);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	4798      	blx	r3
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	e000      	b.n	800ebc6 <flushData+0x30>
    } else {
        return SCPI_RES_OK;
 800ebc4:	2301      	movs	r3, #1
    }
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
	...

0800ebd0 <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	dd06      	ble.n	800ebee <writeDelimiter+0x1e>
        return writeData(context, ",", 1);
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	4905      	ldr	r1, [pc, #20]	; (800ebf8 <writeDelimiter+0x28>)
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f7ff ffbf 	bl	800eb68 <writeData>
 800ebea:	4603      	mov	r3, r0
 800ebec:	e000      	b.n	800ebf0 <writeDelimiter+0x20>
    } else {
        return 0;
 800ebee:	2300      	movs	r3, #0
    }
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	08015d98 	.word	0x08015d98

0800ebfc <writeNewLine>:
/**
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
    //if (context->output_count > 0) {
        size_t len;
#ifndef SCPI_LINE_ENDING
#error no termination character defined
#endif
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
 800ec04:	2202      	movs	r2, #2
 800ec06:	4906      	ldr	r1, [pc, #24]	; (800ec20 <writeNewLine+0x24>)
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f7ff ffad 	bl	800eb68 <writeData>
 800ec0e:	60f8      	str	r0, [r7, #12]
        flushData(context);
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f7ff ffc0 	bl	800eb96 <flushData>
        return len;
 800ec16:	68fb      	ldr	r3, [r7, #12]
    //} else {
    //    return 0;
    //}
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	08015d9c 	.word	0x08015d9c

0800ec24 <writeSemicolon>:
/**
 * Conditionaly write ";"
 * @param context
 * @return number of characters written
 */
static size_t writeSemicolon(scpi_t * context) {
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	dd06      	ble.n	800ec42 <writeSemicolon+0x1e>
        return writeData(context, ";", 1);
 800ec34:	2201      	movs	r2, #1
 800ec36:	4905      	ldr	r1, [pc, #20]	; (800ec4c <writeSemicolon+0x28>)
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f7ff ff95 	bl	800eb68 <writeData>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	e000      	b.n	800ec44 <writeSemicolon+0x20>
    } else {
        return 0;
 800ec42:	2300      	movs	r3, #0
    }
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	08015da0 	.word	0x08015da0

0800ec50 <processCommand>:

/**
 * Process command
 * @param context
 */
static scpi_bool_t processCommand(scpi_t * context) {
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b086      	sub	sp, #24
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
    const scpi_command_t * cmd = context->param_list.cmd;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	691b      	ldr	r3, [r3, #16]
 800ec5c:	613b      	str	r3, [r7, #16]
    lex_state_t * state = &context->param_list.lex_state;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	3314      	adds	r3, #20
 800ec62:	60fb      	str	r3, [r7, #12]
    scpi_bool_t result = TRUE;
 800ec64:	2301      	movs	r3, #1
 800ec66:	75fb      	strb	r3, [r7, #23]

    /* conditionaly write ; */
    writeSemicolon(context);
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7ff ffdb 	bl	800ec24 <writeSemicolon>

    context->cmd_error = FALSE;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2200      	movs	r2, #0
 800ec72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    context->output_count = 0;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	631a      	str	r2, [r3, #48]	; 0x30
    context->input_count = 0;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	635a      	str	r2, [r3, #52]	; 0x34
    context->arbitrary_reminding = 0;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2200      	movs	r2, #0
 800ec86:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d01d      	beq.n	800ecce <processCommand+0x7e>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	4798      	blx	r3
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d00f      	beq.n	800ecc0 <processCommand+0x70>
            if (!context->cmd_error) {
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eca6:	f083 0301 	eor.w	r3, r3, #1
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d004      	beq.n	800ecba <processCommand+0x6a>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 800ecb0:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f7fe fa89 	bl	800d1cc <SCPI_ErrorPush>
            }
            result = FALSE;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	75fb      	strb	r3, [r7, #23]
 800ecbe:	e006      	b.n	800ecce <processCommand+0x7e>
        } else {
            if (context->cmd_error) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d001      	beq.n	800ecce <processCommand+0x7e>
                result = FALSE;
 800ecca:	2300      	movs	r3, #0
 800eccc:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    /* set error if command callback did not read all parameters */
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	685a      	ldr	r2, [r3, #4]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	68f9      	ldr	r1, [r7, #12]
 800ecd8:	6889      	ldr	r1, [r1, #8]
 800ecda:	440b      	add	r3, r1
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d20e      	bcs.n	800ecfe <processCommand+0xae>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ece6:	f083 0301 	eor.w	r3, r3, #1
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d006      	beq.n	800ecfe <processCommand+0xae>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 800ecf0:	f06f 016b 	mvn.w	r1, #107	; 0x6b
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7fe fa69 	bl	800d1cc <SCPI_ErrorPush>
        result = FALSE;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 800ecfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3718      	adds	r7, #24
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <findCommandHeader>:
/**
 * Cycle all patterns and search matching pattern. Execute command callback.
 * @param context
 * @result TRUE if context->paramlist is filled with correct values
 */
static scpi_bool_t findCommandHeader(scpi_t * context, const char * header, int len) {
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b088      	sub	sp, #32
 800ed0c:	af02      	add	r7, sp, #8
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 800ed14:	2300      	movs	r3, #0
 800ed16:	617b      	str	r3, [r7, #20]
 800ed18:	e01e      	b.n	800ed58 <findCommandHeader+0x50>
        cmd = &context->cmdlist[i];
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6819      	ldr	r1, [r3, #0]
 800ed1e:	697a      	ldr	r2, [r7, #20]
 800ed20:	4613      	mov	r3, r2
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	4413      	add	r3, r2
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	440b      	add	r3, r1
 800ed2a:	613b      	str	r3, [r7, #16]
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	6818      	ldr	r0, [r3, #0]
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	2300      	movs	r3, #0
 800ed34:	9301      	str	r3, [sp, #4]
 800ed36:	2300      	movs	r3, #0
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	68b9      	ldr	r1, [r7, #8]
 800ed3e:	f001 fc24 	bl	801058a <matchCommand>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d004      	beq.n	800ed52 <findCommandHeader+0x4a>
            context->param_list.cmd = cmd;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	693a      	ldr	r2, [r7, #16]
 800ed4c:	611a      	str	r2, [r3, #16]
            return TRUE;
 800ed4e:	2301      	movs	r3, #1
 800ed50:	e00e      	b.n	800ed70 <findCommandHeader+0x68>
    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	3301      	adds	r3, #1
 800ed56:	617b      	str	r3, [r7, #20]
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6819      	ldr	r1, [r3, #0]
 800ed5c:	697a      	ldr	r2, [r7, #20]
 800ed5e:	4613      	mov	r3, r2
 800ed60:	005b      	lsls	r3, r3, #1
 800ed62:	4413      	add	r3, r2
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	440b      	add	r3, r1
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d1d5      	bne.n	800ed1a <findCommandHeader+0x12>
        }
    }
    return FALSE;
 800ed6e:	2300      	movs	r3, #0
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3718      	adds	r7, #24
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return FALSE if there was some error during evaluation of commands
 */
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b08c      	sub	sp, #48	; 0x30
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	60f8      	str	r0, [r7, #12]
 800ed80:	60b9      	str	r1, [r7, #8]
 800ed82:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 800ed84:	2301      	movs	r3, #1
 800ed86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    scpi_parser_state_t * state;
    int r;
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 800ed8a:	231a      	movs	r3, #26
 800ed8c:	753b      	strb	r3, [r7, #20]
 800ed8e:	2300      	movs	r3, #0
 800ed90:	61bb      	str	r3, [r7, #24]
 800ed92:	2300      	movs	r3, #0
 800ed94:	61fb      	str	r3, [r7, #28]

    if (context == NULL) {
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d101      	bne.n	800eda0 <SCPI_Parse+0x28>
        return FALSE;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	e093      	b.n	800eec8 <SCPI_Parse+0x150>
    }

    state = &context->parser_state;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	3364      	adds	r3, #100	; 0x64
 800eda4:	627b      	str	r3, [r7, #36]	; 0x24
    context->output_count = 0;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	2200      	movs	r2, #0
 800edaa:	631a      	str	r2, [r3, #48]	; 0x30

    while (1) {
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	68b9      	ldr	r1, [r7, #8]
 800edb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edb2:	f001 f806 	bl	800fdc2 <scpiParser_detectProgramMessageUnit>
 800edb6:	6238      	str	r0, [r7, #32]

        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 800edb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	2b19      	cmp	r3, #25
 800edbe:	d10c      	bne.n	800edda <SCPI_Parse+0x62>
            if (result != FALSE)
 800edc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d004      	beq.n	800edd2 <SCPI_Parse+0x5a>
                SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER); // EDIT
 800edc8:	f06f 0164 	mvn.w	r1, #100	; 0x64
 800edcc:	68f8      	ldr	r0, [r7, #12]
 800edce:	f7fe f9fd 	bl	800d1cc <SCPI_ErrorPush>
            result = FALSE;
 800edd2:	2300      	movs	r3, #0
 800edd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800edd8:	e063      	b.n	800eea2 <SCPI_Parse+0x12a>
        } else if (state->programHeader.len > 0) {
 800edda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eddc:	689b      	ldr	r3, [r3, #8]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	dd5f      	ble.n	800eea2 <SCPI_Parse+0x12a>

            composeCompoundCommand(&cmd_prev, &state->programHeader);
 800ede2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ede4:	f107 0314 	add.w	r3, r7, #20
 800ede8:	4611      	mov	r1, r2
 800edea:	4618      	mov	r0, r3
 800edec:	f001 fd96 	bl	801091c <composeCompoundCommand>

            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 800edf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf2:	6859      	ldr	r1, [r3, #4]
 800edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	461a      	mov	r2, r3
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f7ff ff84 	bl	800ed08 <findCommandHeader>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d02c      	beq.n	800ee60 <SCPI_Parse+0xe8>

                context->param_list.lex_state.buffer = state->programData.ptr;
 800ee06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee08:	691a      	ldr	r2, [r3, #16]
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	615a      	str	r2, [r3, #20]
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	695a      	ldr	r2, [r3, #20]
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	619a      	str	r2, [r3, #24]
                context->param_list.lex_state.len = state->programData.len;
 800ee16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee18:	695a      	ldr	r2, [r3, #20]
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	61da      	str	r2, [r3, #28]
                context->param_list.cmd_raw.data = state->programHeader.ptr;
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee20:	685a      	ldr	r2, [r3, #4]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	629a      	str	r2, [r3, #40]	; 0x28
                context->param_list.cmd_raw.position = 0;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	625a      	str	r2, [r3, #36]	; 0x24
                context->param_list.cmd_raw.length = state->programHeader.len;
 800ee2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2e:	689b      	ldr	r3, [r3, #8]
 800ee30:	461a      	mov	r2, r3
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	621a      	str	r2, [r3, #32]

                result &= processCommand(context);
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f7ff ff0a 	bl	800ec50 <processCommand>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	461a      	mov	r2, r3
 800ee40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee44:	4013      	ands	r3, r2
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	bf14      	ite	ne
 800ee4a:	2301      	movne	r3, #1
 800ee4c:	2300      	moveq	r3, #0
 800ee4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                cmd_prev = state->programHeader;
 800ee52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee54:	f107 0314 	add.w	r3, r7, #20
 800ee58:	ca07      	ldmia	r2, {r0, r1, r2}
 800ee5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ee5e:	e020      	b.n	800eea2 <SCPI_Parse+0x12a>
            } else {
                /* place undefined header with error */
                /* calculate length of errornouse header and trim \r\n */
                size_t r2 = r;
 800ee60:	6a3b      	ldr	r3, [r7, #32]
 800ee62:	62bb      	str	r3, [r7, #40]	; 0x28
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
 800ee64:	e002      	b.n	800ee6c <SCPI_Parse+0xf4>
 800ee66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d00d      	beq.n	800ee8e <SCPI_Parse+0x116>
 800ee72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee74:	3b01      	subs	r3, #1
 800ee76:	68ba      	ldr	r2, [r7, #8]
 800ee78:	4413      	add	r3, r2
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	2b0d      	cmp	r3, #13
 800ee7e:	d0f2      	beq.n	800ee66 <SCPI_Parse+0xee>
 800ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee82:	3b01      	subs	r3, #1
 800ee84:	68ba      	ldr	r2, [r7, #8]
 800ee86:	4413      	add	r3, r2
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	2b0a      	cmp	r3, #10
 800ee8c:	d0eb      	beq.n	800ee66 <SCPI_Parse+0xee>
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
 800ee8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee90:	68ba      	ldr	r2, [r7, #8]
 800ee92:	f06f 0170 	mvn.w	r1, #112	; 0x70
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f7fe f91c 	bl	800d0d4 <SCPI_ErrorPushEx>
                result = FALSE;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        if (r < len) {
 800eea2:	6a3a      	ldr	r2, [r7, #32]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	da08      	bge.n	800eebc <SCPI_Parse+0x144>
            data += r;
 800eeaa:	6a3b      	ldr	r3, [r7, #32]
 800eeac:	68ba      	ldr	r2, [r7, #8]
 800eeae:	4413      	add	r3, r2
 800eeb0:	60bb      	str	r3, [r7, #8]
            len -= r;
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	6a3b      	ldr	r3, [r7, #32]
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	607b      	str	r3, [r7, #4]
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 800eeba:	e777      	b.n	800edac <SCPI_Parse+0x34>
        } else {
            break;
 800eebc:	bf00      	nop
        }

    }

    /* conditionaly write new line */  // EDITED: NOT CONDITIONALY -> ALWAYS
    writeNewLine(context);
 800eebe:	68f8      	ldr	r0, [r7, #12]
 800eec0:	f7ff fe9c 	bl	800ebfc <writeNewLine>

    return result;
 800eec4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3730      	adds	r7, #48	; 0x30
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <SCPI_Init>:
        const scpi_command_t * commands,
        scpi_interface_t * interface,
        const scpi_unit_def_t * units,
        const char * idn1, const char * idn2, const char * idn3, const char * idn4,
        char * input_buffer, size_t input_buffer_length,
        scpi_error_t * error_queue_data, int16_t error_queue_size, void* comm) {
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	60f8      	str	r0, [r7, #12]
 800eed8:	60b9      	str	r1, [r7, #8]
 800eeda:	607a      	str	r2, [r7, #4]
 800eedc:	603b      	str	r3, [r7, #0]
    memset(context, 0, sizeof (*context));
 800eede:	22d8      	movs	r2, #216	; 0xd8
 800eee0:	2100      	movs	r1, #0
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f003 fcda 	bl	801289c <memset>
    context->cmdlist = commands;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	68ba      	ldr	r2, [r7, #8]
 800eeec:	601a      	str	r2, [r3, #0]
    context->interface = interface;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	62da      	str	r2, [r3, #44]	; 0x2c
    context->units = units;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	683a      	ldr	r2, [r7, #0]
 800eef8:	65da      	str	r2, [r3, #92]	; 0x5c
    context->idn[0] = idn1;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	69ba      	ldr	r2, [r7, #24]
 800eefe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    context->idn[1] = idn2;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	69fa      	ldr	r2, [r7, #28]
 800ef06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    context->idn[2] = idn3;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	6a3a      	ldr	r2, [r7, #32]
 800ef0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    context->idn[3] = idn4;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    sprintf(context->idn4, "%s-%s", idn2, "UART");
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 800ef20:	4b18      	ldr	r3, [pc, #96]	; (800ef84 <SCPI_Init+0xb4>)
 800ef22:	69fa      	ldr	r2, [r7, #28]
 800ef24:	4918      	ldr	r1, [pc, #96]	; (800ef88 <SCPI_Init+0xb8>)
 800ef26:	f003 fcc1 	bl	80128ac <siprintf>
    sprintf(context->idn5, "%s-%s", idn2, "USB");
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f103 00b5 	add.w	r0, r3, #181	; 0xb5
 800ef30:	4b16      	ldr	r3, [pc, #88]	; (800ef8c <SCPI_Init+0xbc>)
 800ef32:	69fa      	ldr	r2, [r7, #28]
 800ef34:	4914      	ldr	r1, [pc, #80]	; (800ef88 <SCPI_Init+0xb8>)
 800ef36:	f003 fcb9 	bl	80128ac <siprintf>
    context->idn[4] = context->idn4;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    context->idn[5] = context->idn5;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f103 02b5 	add.w	r2, r3, #181	; 0xb5
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    context->buffer.data = input_buffer;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef56:	60da      	str	r2, [r3, #12]
    context->buffer.length = input_buffer_length;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef5c:	605a      	str	r2, [r3, #4]
    context->buffer.position = 0;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2200      	movs	r2, #0
 800ef62:	609a      	str	r2, [r3, #8]
    context->comm = comm;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef68:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 800ef6c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ef70:	461a      	mov	r2, r3
 800ef72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef74:	68f8      	ldr	r0, [r7, #12]
 800ef76:	f7fd ffd9 	bl	800cf2c <SCPI_ErrorInit>
}
 800ef7a:	bf00      	nop
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	08015da4 	.word	0x08015da4
 800ef88:	08015dac 	.word	0x08015dac
 800ef8c:	08015db4 	.word	0x08015db4

0800ef90 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return
 */
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b088      	sub	sp, #32
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	77fb      	strb	r3, [r7, #31]
    size_t totcmdlen = 0;
 800efa0:	2300      	movs	r3, #0
 800efa2:	61bb      	str	r3, [r7, #24]
    int cmdlen = 0;
 800efa4:	2300      	movs	r3, #0
 800efa6:	617b      	str	r3, [r7, #20]

    if (len == 0) {
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d114      	bne.n	800efd8 <SCPI_Input+0x48>
        context->buffer.data[context->buffer.position] = 0;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	68da      	ldr	r2, [r3, #12]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	689b      	ldr	r3, [r3, #8]
 800efb6:	4413      	add	r3, r2
 800efb8:	2200      	movs	r2, #0
 800efba:	701a      	strb	r2, [r3, #0]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	68d9      	ldr	r1, [r3, #12]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	461a      	mov	r2, r3
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f7ff fed6 	bl	800ed78 <SCPI_Parse>
 800efcc:	4603      	mov	r3, r0
 800efce:	77fb      	strb	r3, [r7, #31]
        context->buffer.position = 0;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2200      	movs	r2, #0
 800efd4:	609a      	str	r2, [r3, #8]
 800efd6:	e07c      	b.n	800f0d2 <SCPI_Input+0x142>
    } else {
        int buffer_free;

        buffer_free = context->buffer.length - context->buffer.position;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	685a      	ldr	r2, [r3, #4]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	613b      	str	r3, [r7, #16]
        if (len > (buffer_free - 1)) {
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	3b01      	subs	r3, #1
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	429a      	cmp	r2, r3
 800efec:	dd10      	ble.n	800f010 <SCPI_Input+0x80>
            /* Input buffer overrun - invalidate buffer */
            context->buffer.position = 0;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2200      	movs	r2, #0
 800eff2:	609a      	str	r2, [r3, #8]
            context->buffer.data[context->buffer.position] = 0;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	68da      	ldr	r2, [r3, #12]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	689b      	ldr	r3, [r3, #8]
 800effc:	4413      	add	r3, r2
 800effe:	2200      	movs	r2, #0
 800f000:	701a      	strb	r2, [r3, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 800f002:	f46f 71b5 	mvn.w	r1, #362	; 0x16a
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	f7fe f8e0 	bl	800d1cc <SCPI_ErrorPush>
            return FALSE;
 800f00c:	2300      	movs	r3, #0
 800f00e:	e061      	b.n	800f0d4 <SCPI_Input+0x144>
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	68da      	ldr	r2, [r3, #12]
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	689b      	ldr	r3, [r3, #8]
 800f018:	4413      	add	r3, r2
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	68b9      	ldr	r1, [r7, #8]
 800f01e:	4618      	mov	r0, r3
 800f020:	f003 fc18 	bl	8012854 <memcpy>
        context->buffer.position += len;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	689a      	ldr	r2, [r3, #8]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	441a      	add	r2, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	609a      	str	r2, [r3, #8]
        context->buffer.data[context->buffer.position] = 0;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	68da      	ldr	r2, [r3, #12]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	689b      	ldr	r3, [r3, #8]
 800f038:	4413      	add	r3, r2
 800f03a:	2200      	movs	r2, #0
 800f03c:	701a      	strb	r2, [r3, #0]


        while (1) {
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	68da      	ldr	r2, [r3, #12]
 800f048:	69bb      	ldr	r3, [r7, #24]
 800f04a:	18d1      	adds	r1, r2, r3
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	689a      	ldr	r2, [r3, #8]
 800f050:	69bb      	ldr	r3, [r7, #24]
 800f052:	1ad3      	subs	r3, r2, r3
 800f054:	461a      	mov	r2, r3
 800f056:	f000 feb4 	bl	800fdc2 <scpiParser_detectProgramMessageUnit>
 800f05a:	6178      	str	r0, [r7, #20]
            totcmdlen += cmdlen;
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	69ba      	ldr	r2, [r7, #24]
 800f060:	4413      	add	r3, r2
 800f062:	61bb      	str	r3, [r7, #24]

            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d11e      	bne.n	800f0ac <SCPI_Input+0x11c>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	68db      	ldr	r3, [r3, #12]
 800f072:	69ba      	ldr	r2, [r7, #24]
 800f074:	4619      	mov	r1, r3
 800f076:	68f8      	ldr	r0, [r7, #12]
 800f078:	f7ff fe7e 	bl	800ed78 <SCPI_Parse>
 800f07c:	4603      	mov	r3, r0
 800f07e:	77fb      	strb	r3, [r7, #31]
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	68d8      	ldr	r0, [r3, #12]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	68da      	ldr	r2, [r3, #12]
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	18d1      	adds	r1, r2, r3
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	689a      	ldr	r2, [r3, #8]
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	1ad3      	subs	r3, r2, r3
 800f094:	461a      	mov	r2, r3
 800f096:	f003 fbe8 	bl	801286a <memmove>
                context->buffer.position -= totcmdlen;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	689a      	ldr	r2, [r3, #8]
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	1ad2      	subs	r2, r2, r3
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	609a      	str	r2, [r3, #8]
                totcmdlen = 0;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	61bb      	str	r3, [r7, #24]
 800f0aa:	e7c8      	b.n	800f03e <SCPI_Input+0xae>
            } else {
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800f0b2:	2b1a      	cmp	r3, #26
 800f0b4:	d104      	bne.n	800f0c0 <SCPI_Input+0x130>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d005      	beq.n	800f0cc <SCPI_Input+0x13c>
                if (totcmdlen >= context->buffer.position) break;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	689b      	ldr	r3, [r3, #8]
 800f0c4:	69ba      	ldr	r2, [r7, #24]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d202      	bcs.n	800f0d0 <SCPI_Input+0x140>
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800f0ca:	e7b8      	b.n	800f03e <SCPI_Input+0xae>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 800f0cc:	bf00      	nop
 800f0ce:	e000      	b.n	800f0d2 <SCPI_Input+0x142>
                if (totcmdlen >= context->buffer.position) break;
 800f0d0:	bf00      	nop
            }
        }
    }

    return result;
 800f0d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3720      	adds	r7, #32
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <SCPI_ResultCharacters>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return
 */
size_t SCPI_ResultCharacters(scpi_t * context, const char * data, size_t len) {
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b086      	sub	sp, #24
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	617b      	str	r3, [r7, #20]
    result += writeDelimiter(context);
 800f0ec:	68f8      	ldr	r0, [r7, #12]
 800f0ee:	f7ff fd6f 	bl	800ebd0 <writeDelimiter>
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	617b      	str	r3, [r7, #20]
    result += writeData(context, data, len);
 800f0fa:	687a      	ldr	r2, [r7, #4]
 800f0fc:	68b9      	ldr	r1, [r7, #8]
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f7ff fd32 	bl	800eb68 <writeData>
 800f104:	4602      	mov	r2, r0
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	4413      	add	r3, r2
 800f10a:	617b      	str	r3, [r7, #20]
    context->output_count++;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f110:	1c5a      	adds	r2, r3, #1
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 800f116:	697b      	ldr	r3, [r7, #20]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3718      	adds	r7, #24
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <getBasePrefix>:
/**
 * Return prefix of nondecimal base
 * @param base
 * @return
 */
static const char * getBasePrefix(int8_t base) {
 800f120:	b480      	push	{r7}
 800f122:	b083      	sub	sp, #12
 800f124:	af00      	add	r7, sp, #0
 800f126:	4603      	mov	r3, r0
 800f128:	71fb      	strb	r3, [r7, #7]
    switch (base) {
 800f12a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f12e:	2b08      	cmp	r3, #8
 800f130:	d005      	beq.n	800f13e <getBasePrefix+0x1e>
 800f132:	2b10      	cmp	r3, #16
 800f134:	d005      	beq.n	800f142 <getBasePrefix+0x22>
 800f136:	2b02      	cmp	r3, #2
 800f138:	d105      	bne.n	800f146 <getBasePrefix+0x26>
        case 2: return "#B";
 800f13a:	4b06      	ldr	r3, [pc, #24]	; (800f154 <getBasePrefix+0x34>)
 800f13c:	e004      	b.n	800f148 <getBasePrefix+0x28>
        case 8: return "#Q";
 800f13e:	4b06      	ldr	r3, [pc, #24]	; (800f158 <getBasePrefix+0x38>)
 800f140:	e002      	b.n	800f148 <getBasePrefix+0x28>
        case 16: return "#H";
 800f142:	4b06      	ldr	r3, [pc, #24]	; (800f15c <getBasePrefix+0x3c>)
 800f144:	e000      	b.n	800f148 <getBasePrefix+0x28>
        default: return NULL;
 800f146:	2300      	movs	r3, #0
    }
}
 800f148:	4618      	mov	r0, r3
 800f14a:	370c      	adds	r7, #12
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr
 800f154:	08015db8 	.word	0x08015db8
 800f158:	08015dbc 	.word	0x08015dbc
 800f15c:	08015dc0 	.word	0x08015dc0

0800f160 <resultUInt32BaseSign>:
 * @param val
 * @param base
 * @param sign
 * @return
 */
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 800f160:	b580      	push	{r7, lr}
 800f162:	b092      	sub	sp, #72	; 0x48
 800f164:	af02      	add	r7, sp, #8
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	4611      	mov	r1, r2
 800f16c:	461a      	mov	r2, r3
 800f16e:	460b      	mov	r3, r1
 800f170:	71fb      	strb	r3, [r7, #7]
 800f172:	4613      	mov	r3, r2
 800f174:	71bb      	strb	r3, [r7, #6]
    char buffer[32 + 1];
    const char * basePrefix;
    size_t result = 0;
 800f176:	2300      	movs	r3, #0
 800f178:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t len;

    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 800f17a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800f17e:	f107 0110 	add.w	r1, r7, #16
 800f182:	79bb      	ldrb	r3, [r7, #6]
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	4613      	mov	r3, r2
 800f188:	2221      	movs	r2, #33	; 0x21
 800f18a:	68b8      	ldr	r0, [r7, #8]
 800f18c:	f000 fee4 	bl	800ff58 <UInt32ToStrBaseSign>
 800f190:	63b8      	str	r0, [r7, #56]	; 0x38
    basePrefix = getBasePrefix(base);
 800f192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f196:	4618      	mov	r0, r3
 800f198:	f7ff ffc2 	bl	800f120 <getBasePrefix>
 800f19c:	6378      	str	r0, [r7, #52]	; 0x34

    result += writeDelimiter(context);
 800f19e:	68f8      	ldr	r0, [r7, #12]
 800f1a0:	f7ff fd16 	bl	800ebd0 <writeDelimiter>
 800f1a4:	4602      	mov	r2, r0
 800f1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1a8:	4413      	add	r3, r2
 800f1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (basePrefix != NULL) {
 800f1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d008      	beq.n	800f1c4 <resultUInt32BaseSign+0x64>
        result += writeData(context, basePrefix, 2);
 800f1b2:	2202      	movs	r2, #2
 800f1b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f1b6:	68f8      	ldr	r0, [r7, #12]
 800f1b8:	f7ff fcd6 	bl	800eb68 <writeData>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1c0:	4413      	add	r3, r2
 800f1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    result += writeData(context, buffer, len);
 800f1c4:	f107 0310 	add.w	r3, r7, #16
 800f1c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f7ff fccb 	bl	800eb68 <writeData>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1d6:	4413      	add	r3, r2
 800f1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    context->output_count++;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1de:	1c5a      	adds	r2, r3, #1
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 800f1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3740      	adds	r7, #64	; 0x40
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}

0800f1ee <SCPI_ResultInt32>:
 * Write signed 32 bit integer value to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultInt32(scpi_t * context, int32_t val) {
 800f1ee:	b580      	push	{r7, lr}
 800f1f0:	b082      	sub	sp, #8
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	6078      	str	r0, [r7, #4]
 800f1f6:	6039      	str	r1, [r7, #0]
    return resultUInt32BaseSign(context, val, 10, TRUE);
 800f1f8:	6839      	ldr	r1, [r7, #0]
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	220a      	movs	r2, #10
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f7ff ffae 	bl	800f160 <resultUInt32BaseSign>
 800f204:	4603      	mov	r3, r0
}
 800f206:	4618      	mov	r0, r3
 800f208:	3708      	adds	r7, #8
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
	...

0800f210 <SCPI_ResultText>:
 * Write string withn " to the result
 * @param context
 * @param data
 * @return
 */
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 800f210:	b580      	push	{r7, lr}
 800f212:	b086      	sub	sp, #24
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 800f21a:	2300      	movs	r3, #0
 800f21c:	617b      	str	r3, [r7, #20]
    size_t len = strlen(data);
 800f21e:	6838      	ldr	r0, [r7, #0]
 800f220:	f7f0 ffe8 	bl	80001f4 <strlen>
 800f224:	6138      	str	r0, [r7, #16]
    const char * quote;
    result += writeDelimiter(context);
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f7ff fcd2 	bl	800ebd0 <writeDelimiter>
 800f22c:	4602      	mov	r2, r0
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	4413      	add	r3, r2
 800f232:	617b      	str	r3, [r7, #20]
    result += writeData(context, "\"", 1);
 800f234:	2201      	movs	r2, #1
 800f236:	4927      	ldr	r1, [pc, #156]	; (800f2d4 <SCPI_ResultText+0xc4>)
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f7ff fc95 	bl	800eb68 <writeData>
 800f23e:	4602      	mov	r2, r0
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	4413      	add	r3, r2
 800f244:	617b      	str	r3, [r7, #20]
    while ((quote = strnpbrk(data, len, "\""))) {
 800f246:	e020      	b.n	800f28a <SCPI_ResultText+0x7a>
        result += writeData(context, data, quote - data + 1);
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	1ad3      	subs	r3, r2, r3
 800f24e:	3301      	adds	r3, #1
 800f250:	461a      	mov	r2, r3
 800f252:	6839      	ldr	r1, [r7, #0]
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f7ff fc87 	bl	800eb68 <writeData>
 800f25a:	4602      	mov	r2, r0
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	4413      	add	r3, r2
 800f260:	617b      	str	r3, [r7, #20]
        result += writeData(context, "\"", 1);
 800f262:	2201      	movs	r2, #1
 800f264:	491b      	ldr	r1, [pc, #108]	; (800f2d4 <SCPI_ResultText+0xc4>)
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7ff fc7e 	bl	800eb68 <writeData>
 800f26c:	4602      	mov	r2, r0
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	4413      	add	r3, r2
 800f272:	617b      	str	r3, [r7, #20]
        len -= quote - data + 1;
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	1ad3      	subs	r3, r2, r3
 800f27a:	461a      	mov	r2, r3
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	1a9b      	subs	r3, r3, r2
 800f280:	3b01      	subs	r3, #1
 800f282:	613b      	str	r3, [r7, #16]
        data = quote + 1;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	3301      	adds	r3, #1
 800f288:	603b      	str	r3, [r7, #0]
    while ((quote = strnpbrk(data, len, "\""))) {
 800f28a:	4a12      	ldr	r2, [pc, #72]	; (800f2d4 <SCPI_ResultText+0xc4>)
 800f28c:	6939      	ldr	r1, [r7, #16]
 800f28e:	6838      	ldr	r0, [r7, #0]
 800f290:	f000 fe32 	bl	800fef8 <strnpbrk>
 800f294:	60f8      	str	r0, [r7, #12]
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d1d5      	bne.n	800f248 <SCPI_ResultText+0x38>
    }
    result += writeData(context, data, len);
 800f29c:	693a      	ldr	r2, [r7, #16]
 800f29e:	6839      	ldr	r1, [r7, #0]
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f7ff fc61 	bl	800eb68 <writeData>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	4413      	add	r3, r2
 800f2ac:	617b      	str	r3, [r7, #20]
    result += writeData(context, "\"", 1);
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	4908      	ldr	r1, [pc, #32]	; (800f2d4 <SCPI_ResultText+0xc4>)
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7ff fc58 	bl	800eb68 <writeData>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	4413      	add	r3, r2
 800f2be:	617b      	str	r3, [r7, #20]
    context->output_count++;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2c4:	1c5a      	adds	r2, r3, #1
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 800f2ca:	697b      	ldr	r3, [r7, #20]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3718      	adds	r7, #24
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	08015dc4 	.word	0x08015dc4

0800f2d8 <SCPI_ResultError>:
 *
 * @param context
 * @param error
 * @return
 */
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08a      	sub	sp, #40	; 0x28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	627b      	str	r3, [r7, #36]	; 0x24
    size_t outputlimit = SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH;
 800f2e6:	23ff      	movs	r3, #255	; 0xff
 800f2e8:	623b      	str	r3, [r7, #32]
    size_t step = 0;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	61bb      	str	r3, [r7, #24]

    const char * data[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t len[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t i;

    data[0] = SCPI_ErrorTranslate(error->error_code);
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7fd ff7b 	bl	800d1f0 <SCPI_ErrorTranslate>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	613b      	str	r3, [r7, #16]
    len[0] = strlen(data[0]);
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	4618      	mov	r0, r3
 800f302:	f7f0 ff77 	bl	80001f4 <strlen>
 800f306:	4603      	mov	r3, r0
 800f308:	60fb      	str	r3, [r7, #12]
#else
    SCPIDEFINE_get_parts(&context->error_info_heap, data[1], &len[1], &data[2], &len[2]);
#endif
#endif

    result += SCPI_ResultInt32(context, error->error_code);
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f310:	4619      	mov	r1, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff ff6b 	bl	800f1ee <SCPI_ResultInt32>
 800f318:	4602      	mov	r2, r0
 800f31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31c:	4413      	add	r3, r2
 800f31e:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeDelimiter(context);
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f7ff fc55 	bl	800ebd0 <writeDelimiter>
 800f326:	4602      	mov	r2, r0
 800f328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32a:	4413      	add	r3, r2
 800f32c:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeData(context, "\"", 1);
 800f32e:	2201      	movs	r2, #1
 800f330:	4976      	ldr	r1, [pc, #472]	; (800f50c <SCPI_ResultError+0x234>)
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f7ff fc18 	bl	800eb68 <writeData>
 800f338:	4602      	mov	r2, r0
 800f33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33c:	4413      	add	r3, r2
 800f33e:	627b      	str	r3, [r7, #36]	; 0x24

    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 800f340:	2300      	movs	r3, #0
 800f342:	61fb      	str	r3, [r7, #28]
 800f344:	e0c4      	b.n	800f4d0 <SCPI_ResultError+0x1f8>
        if (i == 1) {
 800f346:	69fb      	ldr	r3, [r7, #28]
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d109      	bne.n	800f360 <SCPI_ResultError+0x88>
            result += writeSemicolon(context);
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f7ff fc69 	bl	800ec24 <writeSemicolon>
 800f352:	4602      	mov	r2, r0
 800f354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f356:	4413      	add	r3, r2
 800f358:	627b      	str	r3, [r7, #36]	; 0x24
            outputlimit -= 1;
 800f35a:	6a3b      	ldr	r3, [r7, #32]
 800f35c:	3b01      	subs	r3, #1
 800f35e:	623b      	str	r3, [r7, #32]
        }
        if (len[i] > outputlimit) {
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f368:	4413      	add	r3, r2
 800f36a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800f36e:	6a3a      	ldr	r2, [r7, #32]
 800f370:	429a      	cmp	r2, r3
 800f372:	d273      	bcs.n	800f45c <SCPI_ResultError+0x184>
            len[i] = outputlimit;
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f37c:	4413      	add	r3, r2
 800f37e:	6a3a      	ldr	r2, [r7, #32]
 800f380:	f843 2c1c 	str.w	r2, [r3, #-28]
        }

        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 800f384:	e06a      	b.n	800f45c <SCPI_ResultError+0x184>
            if ((step = quote - data[i] + 1) >= outputlimit) {
 800f386:	697a      	ldr	r2, [r7, #20]
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f390:	440b      	add	r3, r1
 800f392:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800f396:	1ad3      	subs	r3, r2, r3
 800f398:	3301      	adds	r3, #1
 800f39a:	61bb      	str	r3, [r7, #24]
 800f39c:	69ba      	ldr	r2, [r7, #24]
 800f39e:	6a3b      	ldr	r3, [r7, #32]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d312      	bcc.n	800f3ca <SCPI_ResultError+0xf2>
                len[i] -= 1;
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	009b      	lsls	r3, r3, #2
 800f3a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f3ac:	4413      	add	r3, r2
 800f3ae:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800f3b2:	1e5a      	subs	r2, r3, #1
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	009b      	lsls	r3, r3, #2
 800f3b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f3bc:	440b      	add	r3, r1
 800f3be:	f843 2c1c 	str.w	r2, [r3, #-28]
                outputlimit -= 1;
 800f3c2:	6a3b      	ldr	r3, [r7, #32]
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	623b      	str	r3, [r7, #32]
                break;
 800f3c8:	e05f      	b.n	800f48a <SCPI_ResultError+0x1b2>
            }
            result += writeData(context, data[i], step);
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f3d2:	4413      	add	r3, r2
 800f3d4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800f3d8:	69ba      	ldr	r2, [r7, #24]
 800f3da:	4619      	mov	r1, r3
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7ff fbc3 	bl	800eb68 <writeData>
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e6:	4413      	add	r3, r2
 800f3e8:	627b      	str	r3, [r7, #36]	; 0x24
            result += writeData(context, "\"", 1);
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	4947      	ldr	r1, [pc, #284]	; (800f50c <SCPI_ResultError+0x234>)
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7ff fbba 	bl	800eb68 <writeData>
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f8:	4413      	add	r3, r2
 800f3fa:	627b      	str	r3, [r7, #36]	; 0x24
            len[i] -= step;
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f404:	4413      	add	r3, r2
 800f406:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	1ad2      	subs	r2, r2, r3
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f416:	440b      	add	r3, r1
 800f418:	f843 2c1c 	str.w	r2, [r3, #-28]
            outputlimit -= step + 1;
 800f41c:	6a3a      	ldr	r2, [r7, #32]
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	1ad3      	subs	r3, r2, r3
 800f422:	3b01      	subs	r3, #1
 800f424:	623b      	str	r3, [r7, #32]
            data[i] = quote + 1;
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	1c5a      	adds	r2, r3, #1
 800f42a:	69fb      	ldr	r3, [r7, #28]
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f432:	440b      	add	r3, r1
 800f434:	f843 2c18 	str.w	r2, [r3, #-24]
            if (len[i] > outputlimit) {
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f440:	4413      	add	r3, r2
 800f442:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800f446:	6a3a      	ldr	r2, [r7, #32]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d207      	bcs.n	800f45c <SCPI_ResultError+0x184>
                len[i] = outputlimit;
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	009b      	lsls	r3, r3, #2
 800f450:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f454:	4413      	add	r3, r2
 800f456:	6a3a      	ldr	r2, [r7, #32]
 800f458:	f843 2c1c 	str.w	r2, [r3, #-28]
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f464:	4413      	add	r3, r2
 800f466:	f853 0c18 	ldr.w	r0, [r3, #-24]
 800f46a:	69fb      	ldr	r3, [r7, #28]
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f472:	4413      	add	r3, r2
 800f474:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800f478:	4a24      	ldr	r2, [pc, #144]	; (800f50c <SCPI_ResultError+0x234>)
 800f47a:	4619      	mov	r1, r3
 800f47c:	f000 fd3c 	bl	800fef8 <strnpbrk>
 800f480:	6178      	str	r0, [r7, #20]
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	2b00      	cmp	r3, #0
 800f486:	f47f af7e 	bne.w	800f386 <SCPI_ResultError+0xae>
            }
        }

        result += writeData(context, data[i], len[i]);
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f492:	4413      	add	r3, r2
 800f494:	f853 1c18 	ldr.w	r1, [r3, #-24]
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f4a0:	4413      	add	r3, r2
 800f4a2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f7ff fb5d 	bl	800eb68 <writeData>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	4413      	add	r3, r2
 800f4b4:	627b      	str	r3, [r7, #36]	; 0x24
        outputlimit -= len[i];
 800f4b6:	69fb      	ldr	r3, [r7, #28]
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f4be:	4413      	add	r3, r2
 800f4c0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800f4c4:	6a3a      	ldr	r2, [r7, #32]
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	623b      	str	r3, [r7, #32]
    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	61fb      	str	r3, [r7, #28]
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d10c      	bne.n	800f4f0 <SCPI_ResultError+0x218>
 800f4d6:	69fb      	ldr	r3, [r7, #28]
 800f4d8:	009b      	lsls	r3, r3, #2
 800f4da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f4de:	4413      	add	r3, r2
 800f4e0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d003      	beq.n	800f4f0 <SCPI_ResultError+0x218>
 800f4e8:	6a3b      	ldr	r3, [r7, #32]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	f47f af2b 	bne.w	800f346 <SCPI_ResultError+0x6e>
    }
    result += writeData(context, "\"", 1);
 800f4f0:	2201      	movs	r2, #1
 800f4f2:	4906      	ldr	r1, [pc, #24]	; (800f50c <SCPI_ResultError+0x234>)
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f7ff fb37 	bl	800eb68 <writeData>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fe:	4413      	add	r3, r2
 800f500:	627b      	str	r3, [r7, #36]	; 0x24

    return result;
 800f502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f504:	4618      	mov	r0, r3
 800f506:	3728      	adds	r7, #40	; 0x28
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	08015dc4 	.word	0x08015dc4

0800f510 <SCPI_ResultArbitraryBlockHeader>:
 * Write arbitrary block header with length
 * @param context
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 800f510:	b580      	push	{r7, lr}
 800f512:	b086      	sub	sp, #24
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	6039      	str	r1, [r7, #0]
    char block_header[12];
    size_t header_len;
    block_header[0] = '#';
 800f51a:	2323      	movs	r3, #35	; 0x23
 800f51c:	723b      	strb	r3, [r7, #8]
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 800f51e:	f107 0108 	add.w	r1, r7, #8
 800f522:	3102      	adds	r1, #2
 800f524:	230a      	movs	r3, #10
 800f526:	220a      	movs	r2, #10
 800f528:	6838      	ldr	r0, [r7, #0]
 800f52a:	f000 fdb5 	bl	8010098 <SCPI_UInt32ToStrBase>

    header_len = strlen(block_header + 2);
 800f52e:	f107 0308 	add.w	r3, r7, #8
 800f532:	3302      	adds	r3, #2
 800f534:	4618      	mov	r0, r3
 800f536:	f7f0 fe5d 	bl	80001f4 <strlen>
 800f53a:	6178      	str	r0, [r7, #20]
    block_header[1] = (char) (header_len + '0');
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	3330      	adds	r3, #48	; 0x30
 800f542:	b2db      	uxtb	r3, r3
 800f544:	727b      	strb	r3, [r7, #9]

    context->arbitrary_reminding = len;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	683a      	ldr	r2, [r7, #0]
 800f54a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    return writeData(context, block_header, header_len + 2);
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	1c9a      	adds	r2, r3, #2
 800f552:	f107 0308 	add.w	r3, r7, #8
 800f556:	4619      	mov	r1, r3
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f7ff fb05 	bl	800eb68 <writeData>
 800f55e:	4603      	mov	r3, r0
}
 800f560:	4618      	mov	r0, r3
 800f562:	3718      	adds	r7, #24
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <SCPI_ResultArbitraryBlockData>:
 * @param context
 * @param data
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 800f568:	b580      	push	{r7, lr}
 800f56a:	b084      	sub	sp, #16
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	607a      	str	r2, [r7, #4]

    if (context->arbitrary_reminding < len) {
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d905      	bls.n	800f58c <SCPI_ResultArbitraryBlockData+0x24>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800f580:	4910      	ldr	r1, [pc, #64]	; (800f5c4 <SCPI_ResultArbitraryBlockData+0x5c>)
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f7fd fe22 	bl	800d1cc <SCPI_ErrorPush>
        return 0;
 800f588:	2300      	movs	r3, #0
 800f58a:	e017      	b.n	800f5bc <SCPI_ResultArbitraryBlockData+0x54>
    }

    context->arbitrary_reminding -= len;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	1ad2      	subs	r2, r2, r3
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    if (context->arbitrary_reminding == 0) {
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d104      	bne.n	800f5b0 <SCPI_ResultArbitraryBlockData+0x48>
        context->output_count++;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5aa:	1c5a      	adds	r2, r3, #1
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return writeData(context, (const char *) data, len);
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	68b9      	ldr	r1, [r7, #8]
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f7ff fad7 	bl	800eb68 <writeData>
 800f5ba:	4603      	mov	r3, r0
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3710      	adds	r7, #16
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	fffffeca 	.word	0xfffffeca

0800f5c8 <SCPI_ResultArbitraryBlock>:
 * @param context
 * @param data
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b086      	sub	sp, #24
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	617b      	str	r3, [r7, #20]
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 800f5d8:	6879      	ldr	r1, [r7, #4]
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f7ff ff98 	bl	800f510 <SCPI_ResultArbitraryBlockHeader>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	617b      	str	r3, [r7, #20]
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	68b9      	ldr	r1, [r7, #8]
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f7ff ffbb 	bl	800f568 <SCPI_ResultArbitraryBlockData>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	617b      	str	r3, [r7, #20]
    return result;
 800f5fa:	697b      	ldr	r3, [r7, #20]
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3718      	adds	r7, #24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <invalidateToken>:
/**
 * Invalidate token
 * @param token
 * @param ptr
 */
static void invalidateToken(scpi_token_t * token, char * ptr) {
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	6039      	str	r1, [r7, #0]
    token->len = 0;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2200      	movs	r2, #0
 800f612:	609a      	str	r2, [r3, #8]
    token->ptr = ptr;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	683a      	ldr	r2, [r7, #0]
 800f618:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	221a      	movs	r2, #26
 800f61e:	701a      	strb	r2, [r3, #0]
}
 800f620:	bf00      	nop
 800f622:	370c      	adds	r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr

0800f62c <SCPI_Parameter>:
 * @param context
 * @param parameter
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_Parameter(scpi_t * context, scpi_parameter_t * parameter, scpi_bool_t mandatory) {
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	4613      	mov	r3, r2
 800f638:	71fb      	strb	r3, [r7, #7]
    lex_state_t * state;

    if (!parameter) {
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d105      	bne.n	800f64c <SCPI_Parameter+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800f640:	4939      	ldr	r1, [pc, #228]	; (800f728 <SCPI_Parameter+0xfc>)
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	f7fd fdc2 	bl	800d1cc <SCPI_ErrorPush>
        return FALSE;
 800f648:	2300      	movs	r3, #0
 800f64a:	e069      	b.n	800f720 <SCPI_Parameter+0xf4>
    }

    invalidateToken(parameter, NULL);
 800f64c:	2100      	movs	r1, #0
 800f64e:	68b8      	ldr	r0, [r7, #8]
 800f650:	f7ff ffd8 	bl	800f604 <invalidateToken>

    state = &context->param_list.lex_state;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	3314      	adds	r3, #20
 800f658:	617b      	str	r3, [r7, #20]

    if (state->pos >= (state->buffer + state->len)) {
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	685a      	ldr	r2, [r3, #4]
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	6979      	ldr	r1, [r7, #20]
 800f664:	6889      	ldr	r1, [r1, #8]
 800f666:	440b      	add	r3, r1
 800f668:	429a      	cmp	r2, r3
 800f66a:	d30d      	bcc.n	800f688 <SCPI_Parameter+0x5c>
        if (mandatory) {
 800f66c:	79fb      	ldrb	r3, [r7, #7]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d005      	beq.n	800f67e <SCPI_Parameter+0x52>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 800f672:	f06f 016c 	mvn.w	r1, #108	; 0x6c
 800f676:	68f8      	ldr	r0, [r7, #12]
 800f678:	f7fd fda8 	bl	800d1cc <SCPI_ErrorPush>
 800f67c:	e002      	b.n	800f684 <SCPI_Parameter+0x58>
        } else {
            parameter->type = SCPI_TOKEN_PROGRAM_MNEMONIC; /* TODO: select something different */
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	2209      	movs	r2, #9
 800f682:	701a      	strb	r2, [r3, #0]
        }
        return FALSE;
 800f684:	2300      	movs	r3, #0
 800f686:	e04b      	b.n	800f720 <SCPI_Parameter+0xf4>
    }
    if (context->input_count != 0) {
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d012      	beq.n	800f6b6 <SCPI_Parameter+0x8a>
        scpiLex_Comma(state, parameter);
 800f690:	68b9      	ldr	r1, [r7, #8]
 800f692:	6978      	ldr	r0, [r7, #20]
 800f694:	f7ff f9bb 	bl	800ea0e <scpiLex_Comma>
        if (parameter->type != SCPI_TOKEN_COMMA) {
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00a      	beq.n	800f6b6 <SCPI_Parameter+0x8a>
            invalidateToken(parameter, NULL);
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	68b8      	ldr	r0, [r7, #8]
 800f6a4:	f7ff ffae 	bl	800f604 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 800f6a8:	f06f 0166 	mvn.w	r1, #102	; 0x66
 800f6ac:	68f8      	ldr	r0, [r7, #12]
 800f6ae:	f7fd fd8d 	bl	800d1cc <SCPI_ErrorPush>
            return FALSE;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	e034      	b.n	800f720 <SCPI_Parameter+0xf4>
        }
    }

    context->input_count++;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6ba:	1c5a      	adds	r2, r3, #1
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	635a      	str	r2, [r3, #52]	; 0x34

    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	3314      	adds	r3, #20
 800f6c4:	68b9      	ldr	r1, [r7, #8]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f000 faa0 	bl	800fc0c <scpiParser_parseProgramData>

    switch (parameter->type) {
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	3b06      	subs	r3, #6
 800f6d2:	2b0a      	cmp	r3, #10
 800f6d4:	d81a      	bhi.n	800f70c <SCPI_Parameter+0xe0>
 800f6d6:	a201      	add	r2, pc, #4	; (adr r2, 800f6dc <SCPI_Parameter+0xb0>)
 800f6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6dc:	0800f709 	.word	0x0800f709
 800f6e0:	0800f709 	.word	0x0800f709
 800f6e4:	0800f709 	.word	0x0800f709
 800f6e8:	0800f709 	.word	0x0800f709
 800f6ec:	0800f709 	.word	0x0800f709
 800f6f0:	0800f709 	.word	0x0800f709
 800f6f4:	0800f70d 	.word	0x0800f70d
 800f6f8:	0800f709 	.word	0x0800f709
 800f6fc:	0800f709 	.word	0x0800f709
 800f700:	0800f709 	.word	0x0800f709
 800f704:	0800f709 	.word	0x0800f709
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
        case SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA:
        case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_PROGRAM_EXPRESSION:
            return TRUE;
 800f708:	2301      	movs	r3, #1
 800f70a:	e009      	b.n	800f720 <SCPI_Parameter+0xf4>
        default:
            invalidateToken(parameter, NULL);
 800f70c:	2100      	movs	r1, #0
 800f70e:	68b8      	ldr	r0, [r7, #8]
 800f710:	f7ff ff78 	bl	800f604 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 800f714:	f06f 0196 	mvn.w	r1, #150	; 0x96
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	f7fd fd57 	bl	800d1cc <SCPI_ErrorPush>
            return FALSE;
 800f71e:	2300      	movs	r3, #0
    }
}
 800f720:	4618      	mov	r0, r3
 800f722:	3718      	adds	r7, #24
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	fffffeca 	.word	0xfffffeca

0800f72c <SCPI_ParamIsNumber>:
 * Detect if parameter is number
 * @param parameter
 * @param suffixAllowed
 * @return
 */
scpi_bool_t SCPI_ParamIsNumber(scpi_parameter_t * parameter, scpi_bool_t suffixAllowed) {
 800f72c:	b480      	push	{r7}
 800f72e:	b083      	sub	sp, #12
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	460b      	mov	r3, r1
 800f736:	70fb      	strb	r3, [r7, #3]
    switch (parameter->type) {
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	3b06      	subs	r3, #6
 800f73e:	2b05      	cmp	r3, #5
 800f740:	d812      	bhi.n	800f768 <SCPI_ParamIsNumber+0x3c>
 800f742:	a201      	add	r2, pc, #4	; (adr r2, 800f748 <SCPI_ParamIsNumber+0x1c>)
 800f744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f748:	0800f761 	.word	0x0800f761
 800f74c:	0800f761 	.word	0x0800f761
 800f750:	0800f761 	.word	0x0800f761
 800f754:	0800f769 	.word	0x0800f769
 800f758:	0800f761 	.word	0x0800f761
 800f75c:	0800f765 	.word	0x0800f765
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
            return TRUE;
 800f760:	2301      	movs	r3, #1
 800f762:	e002      	b.n	800f76a <SCPI_ParamIsNumber+0x3e>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            return suffixAllowed;
 800f764:	78fb      	ldrb	r3, [r7, #3]
 800f766:	e000      	b.n	800f76a <SCPI_ParamIsNumber+0x3e>
        default:
            return FALSE;
 800f768:	2300      	movs	r3, #0
    }
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	370c      	adds	r7, #12
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop

0800f778 <ParamSignToUInt32>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt32(scpi_t * context, scpi_parameter_t * parameter, uint32_t * value, scpi_bool_t sign) {
 800f778:	b580      	push	{r7, lr}
 800f77a:	b084      	sub	sp, #16
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
 800f784:	70fb      	strb	r3, [r7, #3]

    if (!value) {
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d105      	bne.n	800f798 <ParamSignToUInt32+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800f78c:	4933      	ldr	r1, [pc, #204]	; (800f85c <ParamSignToUInt32+0xe4>)
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f7fd fd1c 	bl	800d1cc <SCPI_ErrorPush>
        return FALSE;
 800f794:	2300      	movs	r3, #0
 800f796:	e05d      	b.n	800f854 <ParamSignToUInt32+0xdc>
    }

    switch (parameter->type) {
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	3b06      	subs	r3, #6
 800f79e:	2b05      	cmp	r3, #5
 800f7a0:	d857      	bhi.n	800f852 <ParamSignToUInt32+0xda>
 800f7a2:	a201      	add	r2, pc, #4	; (adr r2, 800f7a8 <ParamSignToUInt32+0x30>)
 800f7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a8:	0800f7c1 	.word	0x0800f7c1
 800f7ac:	0800f7dd 	.word	0x0800f7dd
 800f7b0:	0800f7f9 	.word	0x0800f7f9
 800f7b4:	0800f853 	.word	0x0800f853
 800f7b8:	0800f815 	.word	0x0800f815
 800f7bc:	0800f815 	.word	0x0800f815
        case SCPI_TOKEN_HEXNUM:
            return strBaseToUInt32(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	2210      	movs	r2, #16
 800f7c6:	6879      	ldr	r1, [r7, #4]
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f000 fc95 	bl	80100f8 <strBaseToUInt32>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	bf14      	ite	ne
 800f7d4:	2301      	movne	r3, #1
 800f7d6:	2300      	moveq	r3, #0
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	e03b      	b.n	800f854 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_OCTNUM:
            return strBaseToUInt32(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	2208      	movs	r2, #8
 800f7e2:	6879      	ldr	r1, [r7, #4]
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f000 fc87 	bl	80100f8 <strBaseToUInt32>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	bf14      	ite	ne
 800f7f0:	2301      	movne	r3, #1
 800f7f2:	2300      	moveq	r3, #0
 800f7f4:	b2db      	uxtb	r3, r3
 800f7f6:	e02d      	b.n	800f854 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_BINNUM:
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	2202      	movs	r2, #2
 800f7fe:	6879      	ldr	r1, [r7, #4]
 800f800:	4618      	mov	r0, r3
 800f802:	f000 fc79 	bl	80100f8 <strBaseToUInt32>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	bf14      	ite	ne
 800f80c:	2301      	movne	r3, #1
 800f80e:	2300      	moveq	r3, #0
 800f810:	b2db      	uxtb	r3, r3
 800f812:	e01f      	b.n	800f854 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            if (sign) {
 800f814:	78fb      	ldrb	r3, [r7, #3]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d00d      	beq.n	800f836 <ParamSignToUInt32+0xbe>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	220a      	movs	r2, #10
 800f820:	6879      	ldr	r1, [r7, #4]
 800f822:	4618      	mov	r0, r3
 800f824:	f000 fc4e 	bl	80100c4 <strBaseToInt32>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	bf14      	ite	ne
 800f82e:	2301      	movne	r3, #1
 800f830:	2300      	moveq	r3, #0
 800f832:	b2db      	uxtb	r3, r3
 800f834:	e00e      	b.n	800f854 <ParamSignToUInt32+0xdc>
            } else {
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	220a      	movs	r2, #10
 800f83c:	6879      	ldr	r1, [r7, #4]
 800f83e:	4618      	mov	r0, r3
 800f840:	f000 fc5a 	bl	80100f8 <strBaseToUInt32>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	bf14      	ite	ne
 800f84a:	2301      	movne	r3, #1
 800f84c:	2300      	moveq	r3, #0
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	e000      	b.n	800f854 <ParamSignToUInt32+0xdc>
            }
        default:
            return FALSE;
 800f852:	2300      	movs	r3, #0
    }
}
 800f854:	4618      	mov	r0, r3
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	fffffeca 	.word	0xfffffeca

0800f860 <ParamSignToUInt64>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt64(scpi_t * context, scpi_parameter_t * parameter, uint64_t * value, scpi_bool_t sign) {
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	60b9      	str	r1, [r7, #8]
 800f86a:	607a      	str	r2, [r7, #4]
 800f86c:	70fb      	strb	r3, [r7, #3]

    if (!value) {
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d105      	bne.n	800f880 <ParamSignToUInt64+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800f874:	4933      	ldr	r1, [pc, #204]	; (800f944 <ParamSignToUInt64+0xe4>)
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f7fd fca8 	bl	800d1cc <SCPI_ErrorPush>
        return FALSE;
 800f87c:	2300      	movs	r3, #0
 800f87e:	e05d      	b.n	800f93c <ParamSignToUInt64+0xdc>
    }

    switch (parameter->type) {
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	3b06      	subs	r3, #6
 800f886:	2b05      	cmp	r3, #5
 800f888:	d857      	bhi.n	800f93a <ParamSignToUInt64+0xda>
 800f88a:	a201      	add	r2, pc, #4	; (adr r2, 800f890 <ParamSignToUInt64+0x30>)
 800f88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f890:	0800f8a9 	.word	0x0800f8a9
 800f894:	0800f8c5 	.word	0x0800f8c5
 800f898:	0800f8e1 	.word	0x0800f8e1
 800f89c:	0800f93b 	.word	0x0800f93b
 800f8a0:	0800f8fd 	.word	0x0800f8fd
 800f8a4:	0800f8fd 	.word	0x0800f8fd
        case SCPI_TOKEN_HEXNUM:
            return strBaseToUInt64(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	2210      	movs	r2, #16
 800f8ae:	6879      	ldr	r1, [r7, #4]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f000 fc57 	bl	8010164 <strBaseToUInt64>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	bf14      	ite	ne
 800f8bc:	2301      	movne	r3, #1
 800f8be:	2300      	moveq	r3, #0
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	e03b      	b.n	800f93c <ParamSignToUInt64+0xdc>
        case SCPI_TOKEN_OCTNUM:
            return strBaseToUInt64(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	2208      	movs	r2, #8
 800f8ca:	6879      	ldr	r1, [r7, #4]
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f000 fc49 	bl	8010164 <strBaseToUInt64>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	bf14      	ite	ne
 800f8d8:	2301      	movne	r3, #1
 800f8da:	2300      	moveq	r3, #0
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	e02d      	b.n	800f93c <ParamSignToUInt64+0xdc>
        case SCPI_TOKEN_BINNUM:
            return strBaseToUInt64(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	685b      	ldr	r3, [r3, #4]
 800f8e4:	2202      	movs	r2, #2
 800f8e6:	6879      	ldr	r1, [r7, #4]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f000 fc3b 	bl	8010164 <strBaseToUInt64>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	bf14      	ite	ne
 800f8f4:	2301      	movne	r3, #1
 800f8f6:	2300      	moveq	r3, #0
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	e01f      	b.n	800f93c <ParamSignToUInt64+0xdc>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            if (sign) {
 800f8fc:	78fb      	ldrb	r3, [r7, #3]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00d      	beq.n	800f91e <ParamSignToUInt64+0xbe>
                return strBaseToInt64(parameter->ptr, (int64_t *) value, 10) > 0 ? TRUE : FALSE;
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	220a      	movs	r2, #10
 800f908:	6879      	ldr	r1, [r7, #4]
 800f90a:	4618      	mov	r0, r3
 800f90c:	f000 fc0e 	bl	801012c <strBaseToInt64>
 800f910:	4603      	mov	r3, r0
 800f912:	2b00      	cmp	r3, #0
 800f914:	bf14      	ite	ne
 800f916:	2301      	movne	r3, #1
 800f918:	2300      	moveq	r3, #0
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	e00e      	b.n	800f93c <ParamSignToUInt64+0xdc>
            } else {
                return strBaseToUInt64(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	220a      	movs	r2, #10
 800f924:	6879      	ldr	r1, [r7, #4]
 800f926:	4618      	mov	r0, r3
 800f928:	f000 fc1c 	bl	8010164 <strBaseToUInt64>
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	bf14      	ite	ne
 800f932:	2301      	movne	r3, #1
 800f934:	2300      	moveq	r3, #0
 800f936:	b2db      	uxtb	r3, r3
 800f938:	e000      	b.n	800f93c <ParamSignToUInt64+0xdc>
            }
        default:
            return FALSE;
 800f93a:	2300      	movs	r3, #0
    }
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3710      	adds	r7, #16
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	fffffeca 	.word	0xfffffeca

0800f948 <SCPI_ParamToUInt64>:
 * @param context
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToUInt64(scpi_t * context, scpi_parameter_t * parameter, uint64_t * value) {
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	607a      	str	r2, [r7, #4]
    return ParamSignToUInt64(context, parameter, value, FALSE);
 800f954:	2300      	movs	r3, #0
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	68b9      	ldr	r1, [r7, #8]
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f7ff ff80 	bl	800f860 <ParamSignToUInt64>
 800f960:	4603      	mov	r3, r0
}
 800f962:	4618      	mov	r0, r3
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
	...

0800f96c <SCPI_ParamToDouble>:
 * @param context
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToDouble(scpi_t * context, scpi_parameter_t * parameter, double * value) {
 800f96c:	b590      	push	{r4, r7, lr}
 800f96e:	b089      	sub	sp, #36	; 0x24
 800f970:	af00      	add	r7, sp, #0
 800f972:	60f8      	str	r0, [r7, #12]
 800f974:	60b9      	str	r1, [r7, #8]
 800f976:	607a      	str	r2, [r7, #4]
    scpi_bool_t result;
    uint64_t valint;

    if (!value) {
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d105      	bne.n	800f98a <SCPI_ParamToDouble+0x1e>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800f97e:	4922      	ldr	r1, [pc, #136]	; (800fa08 <SCPI_ParamToDouble+0x9c>)
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f7fd fc23 	bl	800d1cc <SCPI_ErrorPush>
        return FALSE;
 800f986:	2300      	movs	r3, #0
 800f988:	e039      	b.n	800f9fe <SCPI_ParamToDouble+0x92>
    }

    switch (parameter->type) {
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	3b06      	subs	r3, #6
 800f990:	2b05      	cmp	r3, #5
 800f992:	d831      	bhi.n	800f9f8 <SCPI_ParamToDouble+0x8c>
 800f994:	a201      	add	r2, pc, #4	; (adr r2, 800f99c <SCPI_ParamToDouble+0x30>)
 800f996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f99a:	bf00      	nop
 800f99c:	0800f9b5 	.word	0x0800f9b5
 800f9a0:	0800f9b5 	.word	0x0800f9b5
 800f9a4:	0800f9b5 	.word	0x0800f9b5
 800f9a8:	0800f9f9 	.word	0x0800f9f9
 800f9ac:	0800f9df 	.word	0x0800f9df
 800f9b0:	0800f9df 	.word	0x0800f9df
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
            result = SCPI_ParamToUInt64(context, parameter, &valint);
 800f9b4:	f107 0310 	add.w	r3, r7, #16
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	68b9      	ldr	r1, [r7, #8]
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	f7ff ffc3 	bl	800f948 <SCPI_ParamToUInt64>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	77fb      	strb	r3, [r7, #31]
            *value = valint;
 800f9c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	4621      	mov	r1, r4
 800f9ce:	f7f0 fdf5 	bl	80005bc <__aeabi_ul2d>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	460c      	mov	r4, r1
 800f9d6:	687a      	ldr	r2, [r7, #4]
 800f9d8:	e9c2 3400 	strd	r3, r4, [r2]
            break;
 800f9dc:	e00e      	b.n	800f9fc <SCPI_ParamToDouble+0x90>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            result = strToDouble(parameter->ptr, value) > 0 ? TRUE : FALSE;
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	6879      	ldr	r1, [r7, #4]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f000 fbd9 	bl	801019c <strToDouble>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	bf14      	ite	ne
 800f9f0:	2301      	movne	r3, #1
 800f9f2:	2300      	moveq	r3, #0
 800f9f4:	77fb      	strb	r3, [r7, #31]
            break;
 800f9f6:	e001      	b.n	800f9fc <SCPI_ParamToDouble+0x90>
        default:
            result = FALSE;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	77fb      	strb	r3, [r7, #31]
    }
    return result;
 800f9fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3724      	adds	r7, #36	; 0x24
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd90      	pop	{r4, r7, pc}
 800fa06:	bf00      	nop
 800fa08:	fffffeca 	.word	0xfffffeca

0800fa0c <SCPI_ParamDouble>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamDouble(scpi_t * context, double * value, scpi_bool_t mandatory) {
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b088      	sub	sp, #32
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	60f8      	str	r0, [r7, #12]
 800fa14:	60b9      	str	r1, [r7, #8]
 800fa16:	4613      	mov	r3, r2
 800fa18:	71fb      	strb	r3, [r7, #7]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value) {
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d105      	bne.n	800fa2c <SCPI_ParamDouble+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800fa20:	491f      	ldr	r1, [pc, #124]	; (800faa0 <SCPI_ParamDouble+0x94>)
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f7fd fbd2 	bl	800d1cc <SCPI_ErrorPush>
        return FALSE;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	e035      	b.n	800fa98 <SCPI_ParamDouble+0x8c>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 800fa2c:	79fa      	ldrb	r2, [r7, #7]
 800fa2e:	f107 0310 	add.w	r3, r7, #16
 800fa32:	4619      	mov	r1, r3
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	f7ff fdf9 	bl	800f62c <SCPI_Parameter>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	77fb      	strb	r3, [r7, #31]
    if (result) {
 800fa3e:	7ffb      	ldrb	r3, [r7, #31]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d028      	beq.n	800fa96 <SCPI_ParamDouble+0x8a>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 800fa44:	f107 0310 	add.w	r3, r7, #16
 800fa48:	2100      	movs	r1, #0
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7ff fe6e 	bl	800f72c <SCPI_ParamIsNumber>
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d007      	beq.n	800fa66 <SCPI_ParamDouble+0x5a>
            SCPI_ParamToDouble(context, &param, value);
 800fa56:	f107 0310 	add.w	r3, r7, #16
 800fa5a:	68ba      	ldr	r2, [r7, #8]
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f7ff ff84 	bl	800f96c <SCPI_ParamToDouble>
 800fa64:	e017      	b.n	800fa96 <SCPI_ParamDouble+0x8a>
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 800fa66:	f107 0310 	add.w	r3, r7, #16
 800fa6a:	2101      	movs	r1, #1
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7ff fe5d 	bl	800f72c <SCPI_ParamIsNumber>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d007      	beq.n	800fa88 <SCPI_ParamDouble+0x7c>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 800fa78:	f06f 0189 	mvn.w	r1, #137	; 0x89
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f7fd fba5 	bl	800d1cc <SCPI_ErrorPush>
            result = FALSE;
 800fa82:	2300      	movs	r3, #0
 800fa84:	77fb      	strb	r3, [r7, #31]
 800fa86:	e006      	b.n	800fa96 <SCPI_ParamDouble+0x8a>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 800fa88:	f06f 0167 	mvn.w	r1, #103	; 0x67
 800fa8c:	68f8      	ldr	r0, [r7, #12]
 800fa8e:	f7fd fb9d 	bl	800d1cc <SCPI_ErrorPush>
            result = FALSE;
 800fa92:	2300      	movs	r3, #0
 800fa94:	77fb      	strb	r3, [r7, #31]
        }
    }
    return result;
 800fa96:	7ffb      	ldrb	r3, [r7, #31]
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3720      	adds	r7, #32
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	fffffeca 	.word	0xfffffeca

0800faa4 <ParamSignUInt32>:
 * @param value
 * @param mandatory
 * @param sign
 * @return
 */
static scpi_bool_t ParamSignUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory, scpi_bool_t sign) {
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b088      	sub	sp, #32
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	60f8      	str	r0, [r7, #12]
 800faac:	60b9      	str	r1, [r7, #8]
 800faae:	4611      	mov	r1, r2
 800fab0:	461a      	mov	r2, r3
 800fab2:	460b      	mov	r3, r1
 800fab4:	71fb      	strb	r3, [r7, #7]
 800fab6:	4613      	mov	r3, r2
 800fab8:	71bb      	strb	r3, [r7, #6]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value) {
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d105      	bne.n	800facc <ParamSignUInt32+0x28>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800fac0:	4920      	ldr	r1, [pc, #128]	; (800fb44 <ParamSignUInt32+0xa0>)
 800fac2:	68f8      	ldr	r0, [r7, #12]
 800fac4:	f7fd fb82 	bl	800d1cc <SCPI_ErrorPush>
        return FALSE;
 800fac8:	2300      	movs	r3, #0
 800faca:	e037      	b.n	800fb3c <ParamSignUInt32+0x98>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 800facc:	79fa      	ldrb	r2, [r7, #7]
 800face:	f107 0310 	add.w	r3, r7, #16
 800fad2:	4619      	mov	r1, r3
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	f7ff fda9 	bl	800f62c <SCPI_Parameter>
 800fada:	4603      	mov	r3, r0
 800fadc:	77fb      	strb	r3, [r7, #31]
    if (result) {
 800fade:	7ffb      	ldrb	r3, [r7, #31]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d02a      	beq.n	800fb3a <ParamSignUInt32+0x96>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 800fae4:	f107 0310 	add.w	r3, r7, #16
 800fae8:	2100      	movs	r1, #0
 800faea:	4618      	mov	r0, r3
 800faec:	f7ff fe1e 	bl	800f72c <SCPI_ParamIsNumber>
 800faf0:	4603      	mov	r3, r0
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d009      	beq.n	800fb0a <ParamSignUInt32+0x66>
            result = ParamSignToUInt32(context, &param, value, sign);
 800faf6:	79bb      	ldrb	r3, [r7, #6]
 800faf8:	f107 0110 	add.w	r1, r7, #16
 800fafc:	68ba      	ldr	r2, [r7, #8]
 800fafe:	68f8      	ldr	r0, [r7, #12]
 800fb00:	f7ff fe3a 	bl	800f778 <ParamSignToUInt32>
 800fb04:	4603      	mov	r3, r0
 800fb06:	77fb      	strb	r3, [r7, #31]
 800fb08:	e017      	b.n	800fb3a <ParamSignUInt32+0x96>
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 800fb0a:	f107 0310 	add.w	r3, r7, #16
 800fb0e:	2101      	movs	r1, #1
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7ff fe0b 	bl	800f72c <SCPI_ParamIsNumber>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d007      	beq.n	800fb2c <ParamSignUInt32+0x88>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 800fb1c:	f06f 0189 	mvn.w	r1, #137	; 0x89
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f7fd fb53 	bl	800d1cc <SCPI_ErrorPush>
            result = FALSE;
 800fb26:	2300      	movs	r3, #0
 800fb28:	77fb      	strb	r3, [r7, #31]
 800fb2a:	e006      	b.n	800fb3a <ParamSignUInt32+0x96>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 800fb2c:	f06f 0167 	mvn.w	r1, #103	; 0x67
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f7fd fb4b 	bl	800d1cc <SCPI_ErrorPush>
            result = FALSE;
 800fb36:	2300      	movs	r3, #0
 800fb38:	77fb      	strb	r3, [r7, #31]
        }
    }
    return result;
 800fb3a:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3720      	adds	r7, #32
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	fffffeca 	.word	0xfffffeca

0800fb48 <SCPI_ParamInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamInt32(scpi_t * context, int32_t * value, scpi_bool_t mandatory) {
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	60b9      	str	r1, [r7, #8]
 800fb52:	4613      	mov	r3, r2
 800fb54:	71fb      	strb	r3, [r7, #7]
    return ParamSignUInt32(context, (uint32_t *) value, mandatory, TRUE);
 800fb56:	79fa      	ldrb	r2, [r7, #7]
 800fb58:	2301      	movs	r3, #1
 800fb5a:	68b9      	ldr	r1, [r7, #8]
 800fb5c:	68f8      	ldr	r0, [r7, #12]
 800fb5e:	f7ff ffa1 	bl	800faa4 <ParamSignUInt32>
 800fb62:	4603      	mov	r3, r0
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3710      	adds	r7, #16
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <SCPI_ParamUInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory) {
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	4613      	mov	r3, r2
 800fb78:	71fb      	strb	r3, [r7, #7]
    return ParamSignUInt32(context, value, mandatory, FALSE);
 800fb7a:	79fa      	ldrb	r2, [r7, #7]
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	68b9      	ldr	r1, [r7, #8]
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	f7ff ff8f 	bl	800faa4 <ParamSignUInt32>
 800fb86:	4603      	mov	r3, r0
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3710      	adds	r7, #16
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <SCPI_ParamCharacters>:
 * @param value
 * @param len
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamCharacters(scpi_t * context, const char ** value, size_t * len, scpi_bool_t mandatory) {
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b088      	sub	sp, #32
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]
 800fb9c:	70fb      	strb	r3, [r7, #3]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value || !len) {
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d002      	beq.n	800fbaa <SCPI_ParamCharacters+0x1a>
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d105      	bne.n	800fbb6 <SCPI_ParamCharacters+0x26>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800fbaa:	4917      	ldr	r1, [pc, #92]	; (800fc08 <SCPI_ParamCharacters+0x78>)
 800fbac:	68f8      	ldr	r0, [r7, #12]
 800fbae:	f7fd fb0d 	bl	800d1cc <SCPI_ErrorPush>
        return FALSE;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	e023      	b.n	800fbfe <SCPI_ParamCharacters+0x6e>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 800fbb6:	78fa      	ldrb	r2, [r7, #3]
 800fbb8:	f107 0310 	add.w	r3, r7, #16
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	68f8      	ldr	r0, [r7, #12]
 800fbc0:	f7ff fd34 	bl	800f62c <SCPI_Parameter>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	77fb      	strb	r3, [r7, #31]
    if (result) {
 800fbc8:	7ffb      	ldrb	r3, [r7, #31]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d015      	beq.n	800fbfa <SCPI_ParamCharacters+0x6a>
        switch (param.type) {
 800fbce:	7c3b      	ldrb	r3, [r7, #16]
 800fbd0:	3b0e      	subs	r3, #14
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	d809      	bhi.n	800fbea <SCPI_ParamCharacters+0x5a>
            case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
            case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
                *value = param.ptr + 1;
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	1c5a      	adds	r2, r3, #1
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	601a      	str	r2, [r3, #0]
                *len = param.len - 2;
 800fbde:	69bb      	ldr	r3, [r7, #24]
 800fbe0:	3b02      	subs	r3, #2
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	601a      	str	r2, [r3, #0]
                break;
 800fbe8:	e008      	b.n	800fbfc <SCPI_ParamCharacters+0x6c>
            default:
                *value = param.ptr;
 800fbea:	697a      	ldr	r2, [r7, #20]
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	601a      	str	r2, [r3, #0]
                *len = param.len;
 800fbf0:	69bb      	ldr	r3, [r7, #24]
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	601a      	str	r2, [r3, #0]
                break;
 800fbf8:	e000      	b.n	800fbfc <SCPI_ParamCharacters+0x6c>
        }

        /* TODO: return also parameter type (ProgramMnemonic, ArbitraryBlockProgramData, SingleQuoteProgramData, DoubleQuoteProgramData */
    }
 800fbfa:	bf00      	nop

    return result;
 800fbfc:	7ffb      	ldrb	r3, [r7, #31]
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3720      	adds	r7, #32
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	fffffeca 	.word	0xfffffeca

0800fc0c <scpiParser_parseProgramData>:
 * Parse one parameter and detect type
 * @param state
 * @param token
 * @return
 */
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b08a      	sub	sp, #40	; 0x28
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
    scpi_token_t tmp;
    int result = 0;
 800fc16:	2300      	movs	r3, #0
 800fc18:	627b      	str	r3, [r7, #36]	; 0x24
    int wsLen;
    int suffixLen;
    int realLen = 0;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	623b      	str	r3, [r7, #32]
    realLen += scpiLex_WhiteSpace(state, &tmp);
 800fc1e:	f107 030c 	add.w	r3, r7, #12
 800fc22:	4619      	mov	r1, r3
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7fe f972 	bl	800df0e <scpiLex_WhiteSpace>
 800fc2a:	4602      	mov	r2, r0
 800fc2c:	6a3b      	ldr	r3, [r7, #32]
 800fc2e:	4413      	add	r3, r2
 800fc30:	623b      	str	r3, [r7, #32]

    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 800fc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d104      	bne.n	800fc42 <scpiParser_parseProgramData+0x36>
 800fc38:	6839      	ldr	r1, [r7, #0]
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f7fe fbeb 	bl	800e416 <scpiLex_NondecimalNumericData>
 800fc40:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_CharacterProgramData(state, token);
 800fc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d104      	bne.n	800fc52 <scpiParser_parseProgramData+0x46>
 800fc48:	6839      	ldr	r1, [r7, #0]
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7fe fa49 	bl	800e0e2 <scpiLex_CharacterProgramData>
 800fc50:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) {
 800fc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d126      	bne.n	800fca6 <scpiParser_parseProgramData+0x9a>
        result = scpiLex_DecimalNumericProgramData(state, token);
 800fc58:	6839      	ldr	r1, [r7, #0]
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f7fe fae7 	bl	800e22e <scpiLex_DecimalNumericProgramData>
 800fc60:	6278      	str	r0, [r7, #36]	; 0x24
        if (result != 0) {
 800fc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d01e      	beq.n	800fca6 <scpiParser_parseProgramData+0x9a>
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 800fc68:	f107 030c 	add.w	r3, r7, #12
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f7fe f94d 	bl	800df0e <scpiLex_WhiteSpace>
 800fc74:	61f8      	str	r0, [r7, #28]
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 800fc76:	f107 030c 	add.w	r3, r7, #12
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f7fe fb12 	bl	800e2a6 <scpiLex_SuffixProgramData>
 800fc82:	61b8      	str	r0, [r7, #24]
            if (suffixLen > 0) {
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	dd0d      	ble.n	800fca6 <scpiParser_parseProgramData+0x9a>
                token->len += wsLen + suffixLen;
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	689a      	ldr	r2, [r3, #8]
 800fc8e:	69f9      	ldr	r1, [r7, #28]
 800fc90:	69bb      	ldr	r3, [r7, #24]
 800fc92:	440b      	add	r3, r1
 800fc94:	441a      	add	r2, r3
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	609a      	str	r2, [r3, #8]
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	220b      	movs	r2, #11
 800fc9e:	701a      	strb	r2, [r3, #0]
                result = token->len;
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	689b      	ldr	r3, [r3, #8]
 800fca4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    if (result == 0) result = scpiLex_StringProgramData(state, token);
 800fca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d104      	bne.n	800fcb6 <scpiParser_parseProgramData+0xaa>
 800fcac:	6839      	ldr	r1, [r7, #0]
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f7fe fcae 	bl	800e610 <scpiLex_StringProgramData>
 800fcb4:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 800fcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d104      	bne.n	800fcc6 <scpiParser_parseProgramData+0xba>
 800fcbc:	6839      	ldr	r1, [r7, #0]
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f7fe fd4f 	bl	800e762 <scpiLex_ArbitraryBlockProgramData>
 800fcc4:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ProgramExpression(state, token);
 800fcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d104      	bne.n	800fcd6 <scpiParser_parseProgramData+0xca>
 800fccc:	6839      	ldr	r1, [r7, #0]
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f7fe fe49 	bl	800e966 <scpiLex_ProgramExpression>
 800fcd4:	6278      	str	r0, [r7, #36]	; 0x24

    realLen += scpiLex_WhiteSpace(state, &tmp);
 800fcd6:	f107 030c 	add.w	r3, r7, #12
 800fcda:	4619      	mov	r1, r3
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f7fe f916 	bl	800df0e <scpiLex_WhiteSpace>
 800fce2:	4602      	mov	r2, r0
 800fce4:	6a3b      	ldr	r3, [r7, #32]
 800fce6:	4413      	add	r3, r2
 800fce8:	623b      	str	r3, [r7, #32]

    return result + realLen;
 800fcea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcec:	6a3b      	ldr	r3, [r7, #32]
 800fcee:	4413      	add	r3, r2
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3728      	adds	r7, #40	; 0x28
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <scpiParser_parseAllProgramData>:
 * @param state
 * @param token
 * @param numberOfParameters
 * @return
 */
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b08a      	sub	sp, #40	; 0x28
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]

    int result;
    scpi_token_t tmp;
    int paramCount = 0;
 800fd04:	2300      	movs	r3, #0
 800fd06:	623b      	str	r3, [r7, #32]

    token->len = -1;
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd0e:	609a      	str	r2, [r3, #8]
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	2218      	movs	r2, #24
 800fd14:	701a      	strb	r2, [r3, #0]
    token->ptr = state->pos;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	685a      	ldr	r2, [r3, #4]
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	605a      	str	r2, [r3, #4]


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 800fd1e:	2301      	movs	r3, #1
 800fd20:	627b      	str	r3, [r7, #36]	; 0x24
 800fd22:	e037      	b.n	800fd94 <scpiParser_parseAllProgramData+0x9c>
        token->len += result;
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	689a      	ldr	r2, [r3, #8]
 800fd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2a:	441a      	add	r2, r3
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	609a      	str	r2, [r3, #8]

        if (result == 0) {
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d109      	bne.n	800fd4a <scpiParser_parseAllProgramData+0x52>
            token->type = SCPI_TOKEN_UNKNOWN;
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	221a      	movs	r2, #26
 800fd3a:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 800fd42:	f04f 33ff 	mov.w	r3, #4294967295
 800fd46:	623b      	str	r3, [r7, #32]
            break;
 800fd48:	e027      	b.n	800fd9a <scpiParser_parseAllProgramData+0xa2>
        }

        result = scpiParser_parseProgramData(state, &tmp);
 800fd4a:	f107 0314 	add.w	r3, r7, #20
 800fd4e:	4619      	mov	r1, r3
 800fd50:	68f8      	ldr	r0, [r7, #12]
 800fd52:	f7ff ff5b 	bl	800fc0c <scpiParser_parseProgramData>
 800fd56:	6278      	str	r0, [r7, #36]	; 0x24
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
 800fd58:	7d3b      	ldrb	r3, [r7, #20]
 800fd5a:	2b1a      	cmp	r3, #26
 800fd5c:	d006      	beq.n	800fd6c <scpiParser_parseAllProgramData+0x74>
            token->len += result;
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	689a      	ldr	r2, [r3, #8]
 800fd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd64:	441a      	add	r2, r3
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	609a      	str	r2, [r3, #8]
 800fd6a:	e009      	b.n	800fd80 <scpiParser_parseAllProgramData+0x88>
        } else {
            token->type = SCPI_TOKEN_UNKNOWN;
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	221a      	movs	r2, #26
 800fd70:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	2200      	movs	r2, #0
 800fd76:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 800fd78:	f04f 33ff 	mov.w	r3, #4294967295
 800fd7c:	623b      	str	r3, [r7, #32]
            break;
 800fd7e:	e00c      	b.n	800fd9a <scpiParser_parseAllProgramData+0xa2>
        }
        paramCount++;
 800fd80:	6a3b      	ldr	r3, [r7, #32]
 800fd82:	3301      	adds	r3, #1
 800fd84:	623b      	str	r3, [r7, #32]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 800fd86:	f107 0314 	add.w	r3, r7, #20
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	68f8      	ldr	r0, [r7, #12]
 800fd8e:	f7fe fe3e 	bl	800ea0e <scpiLex_Comma>
 800fd92:	6278      	str	r0, [r7, #36]	; 0x24
 800fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d1c4      	bne.n	800fd24 <scpiParser_parseAllProgramData+0x2c>
    }

    if (token->len == -1) {
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fda2:	d102      	bne.n	800fdaa <scpiParser_parseAllProgramData+0xb2>
        token->len = 0;
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	2200      	movs	r2, #0
 800fda8:	609a      	str	r2, [r3, #8]
    }

    if (numberOfParameters != NULL) {
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d002      	beq.n	800fdb6 <scpiParser_parseAllProgramData+0xbe>
        *numberOfParameters = paramCount;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6a3a      	ldr	r2, [r7, #32]
 800fdb4:	601a      	str	r2, [r3, #0]
    }
    return token->len;
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	689b      	ldr	r3, [r3, #8]
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3728      	adds	r7, #40	; 0x28
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}

0800fdc2 <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 800fdc2:	b580      	push	{r7, lr}
 800fdc4:	b08c      	sub	sp, #48	; 0x30
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	60f8      	str	r0, [r7, #12]
 800fdca:	60b9      	str	r1, [r7, #8]
 800fdcc:	607a      	str	r2, [r7, #4]
    lex_state_t lex_state;
    scpi_token_t tmp;
    int result = 0;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	62fb      	str	r3, [r7, #44]	; 0x2c

    lex_state.buffer = lex_state.pos = buffer;
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	627b      	str	r3, [r7, #36]	; 0x24
 800fdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd8:	623b      	str	r3, [r7, #32]
    lex_state.len = len;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	62bb      	str	r3, [r7, #40]	; 0x28
    state->numberOfParameters = 0;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2200      	movs	r2, #0
 800fde2:	619a      	str	r2, [r3, #24]

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
 800fde4:	f107 0214 	add.w	r2, r7, #20
 800fde8:	f107 0320 	add.w	r3, r7, #32
 800fdec:	4611      	mov	r1, r2
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fe f88d 	bl	800df0e <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	f107 0320 	add.w	r3, r7, #32
 800fdfa:	4611      	mov	r1, r2
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7fe f90e 	bl	800e01e <scpiLex_ProgramHeader>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	db1e      	blt.n	800fe46 <scpiParser_detectProgramMessageUnit+0x84>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
 800fe08:	f107 0214 	add.w	r2, r7, #20
 800fe0c:	f107 0320 	add.w	r3, r7, #32
 800fe10:	4611      	mov	r1, r2
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7fe f87b 	bl	800df0e <scpiLex_WhiteSpace>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	dd0b      	ble.n	800fe36 <scpiParser_detectProgramMessageUnit+0x74>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f103 010c 	add.w	r1, r3, #12
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f103 0218 	add.w	r2, r3, #24
 800fe2a:	f107 0320 	add.w	r3, r7, #32
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7ff ff62 	bl	800fcf8 <scpiParser_parseAllProgramData>
 800fe34:	e014      	b.n	800fe60 <scpiParser_detectProgramMessageUnit+0x9e>
        } else {
            invalidateToken(&state->programData, lex_state.pos);
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	330c      	adds	r3, #12
 800fe3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe3c:	4611      	mov	r1, r2
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7ff fbe0 	bl	800f604 <invalidateToken>
 800fe44:	e00c      	b.n	800fe60 <scpiParser_detectProgramMessageUnit+0x9e>
        }
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	6a3a      	ldr	r2, [r7, #32]
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7ff fbd9 	bl	800f604 <invalidateToken>
        invalidateToken(&state->programData, lex_state.buffer);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	330c      	adds	r3, #12
 800fe56:	6a3a      	ldr	r2, [r7, #32]
 800fe58:	4611      	mov	r1, r2
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7ff fbd2 	bl	800f604 <invalidateToken>
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
 800fe60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d108      	bne.n	800fe78 <scpiParser_detectProgramMessageUnit+0xb6>
 800fe66:	f107 0214 	add.w	r2, r7, #20
 800fe6a:	f107 0320 	add.w	r3, r7, #32
 800fe6e:	4611      	mov	r1, r2
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7fe fe12 	bl	800ea9a <scpiLex_NewLine>
 800fe76:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
 800fe78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d108      	bne.n	800fe90 <scpiParser_detectProgramMessageUnit+0xce>
 800fe7e:	f107 0214 	add.w	r2, r7, #20
 800fe82:	f107 0320 	add.w	r3, r7, #32
 800fe86:	4611      	mov	r1, r2
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7fe fde3 	bl	800ea54 <scpiLex_Semicolon>
 800fe8e:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
 800fe90:	f107 0320 	add.w	r3, r7, #32
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7fd fe37 	bl	800db08 <scpiLex_IsEos>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d112      	bne.n	800fec6 <scpiParser_detectProgramMessageUnit+0x104>
 800fea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d10f      	bne.n	800fec6 <scpiParser_detectProgramMessageUnit+0x104>
        lex_state.pos++;
 800fea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea8:	3301      	adds	r3, #1
 800feaa:	627b      	str	r3, [r7, #36]	; 0x24

        state->programHeader.len = 1;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2201      	movs	r2, #1
 800feb0:	609a      	str	r2, [r3, #8]
        state->programHeader.type = SCPI_TOKEN_INVALID;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2219      	movs	r2, #25
 800feb6:	701a      	strb	r2, [r3, #0]

        invalidateToken(&state->programData, lex_state.buffer);
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	330c      	adds	r3, #12
 800febc:	6a3a      	ldr	r2, [r7, #32]
 800febe:	4611      	mov	r1, r2
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7ff fb9f 	bl	800f604 <invalidateToken>
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
 800fec6:	7d3b      	ldrb	r3, [r7, #20]
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d103      	bne.n	800fed4 <scpiParser_detectProgramMessageUnit+0x112>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	2202      	movs	r2, #2
 800fed0:	771a      	strb	r2, [r3, #28]
 800fed2:	e009      	b.n	800fee8 <scpiParser_detectProgramMessageUnit+0x126>
    } else if (SCPI_TOKEN_NL == tmp.type) {
 800fed4:	7d3b      	ldrb	r3, [r7, #20]
 800fed6:	2b05      	cmp	r3, #5
 800fed8:	d103      	bne.n	800fee2 <scpiParser_detectProgramMessageUnit+0x120>
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2201      	movs	r2, #1
 800fede:	771a      	strb	r2, [r3, #28]
 800fee0:	e002      	b.n	800fee8 <scpiParser_detectProgramMessageUnit+0x126>
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2200      	movs	r2, #0
 800fee6:	771a      	strb	r2, [r3, #28]
    }

    return lex_state.pos - lex_state.buffer;
 800fee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feea:	461a      	mov	r2, r3
 800feec:	6a3b      	ldr	r3, [r7, #32]
 800feee:	1ad3      	subs	r3, r2, r3
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3730      	adds	r7, #48	; 0x30
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
 800fef8:	b480      	push	{r7}
 800fefa:	b089      	sub	sp, #36	; 0x24
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	607a      	str	r2, [r7, #4]
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
 800ff04:	68fa      	ldr	r2, [r7, #12]
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	4413      	add	r3, r2
 800ff0a:	61bb      	str	r3, [r7, #24]

    while ((strend != str) && ((c = *str++) != 0)) {
 800ff0c:	e011      	b.n	800ff32 <strnpbrk+0x3a>
        for (scanp = set; (sc = *scanp++) != '\0';)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	61fb      	str	r3, [r7, #28]
 800ff12:	e006      	b.n	800ff22 <strnpbrk+0x2a>
            if (sc == c)
 800ff14:	693a      	ldr	r2, [r7, #16]
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d102      	bne.n	800ff22 <strnpbrk+0x2a>
                return ((char *) (str - 1));
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	3b01      	subs	r3, #1
 800ff20:	e014      	b.n	800ff4c <strnpbrk+0x54>
        for (scanp = set; (sc = *scanp++) != '\0';)
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	1c5a      	adds	r2, r3, #1
 800ff26:	61fa      	str	r2, [r7, #28]
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	613b      	str	r3, [r7, #16]
 800ff2c:	693b      	ldr	r3, [r7, #16]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d1f0      	bne.n	800ff14 <strnpbrk+0x1c>
    while ((strend != str) && ((c = *str++) != 0)) {
 800ff32:	69ba      	ldr	r2, [r7, #24]
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d007      	beq.n	800ff4a <strnpbrk+0x52>
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	1c5a      	adds	r2, r3, #1
 800ff3e:	60fa      	str	r2, [r7, #12]
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	617b      	str	r3, [r7, #20]
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d1e1      	bne.n	800ff0e <strnpbrk+0x16>
    }
    return (NULL);
 800ff4a:	2300      	movs	r3, #0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3724      	adds	r7, #36	; 0x24
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <UInt32ToStrBaseSign>:
 * @param len   string buffer length
 * @param base  output base
 * @param sign
 * @return number of bytes written to str (without '\0')
 */
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 800ff58:	b4b0      	push	{r4, r5, r7}
 800ff5a:	b08f      	sub	sp, #60	; 0x3c
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	607a      	str	r2, [r7, #4]
 800ff64:	70fb      	strb	r3, [r7, #3]
    const char digits[] = "0123456789ABCDEF";
 800ff66:	4b4a      	ldr	r3, [pc, #296]	; (8010090 <UInt32ToStrBaseSign+0x138>)
 800ff68:	f107 0414 	add.w	r4, r7, #20
 800ff6c:	461d      	mov	r5, r3
 800ff6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff72:	682b      	ldr	r3, [r5, #0]
 800ff74:	7023      	strb	r3, [r4, #0]

#define ADD_CHAR(c) if (pos < len) str[pos++] = (c)
    uint32_t x = 0;
 800ff76:	2300      	movs	r3, #0
 800ff78:	637b      	str	r3, [r7, #52]	; 0x34
    int_fast8_t digit;
    size_t pos = 0;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t uval = val;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (uval == 0) {
 800ff82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d10b      	bne.n	800ffa0 <UInt32ToStrBaseSign+0x48>
        ADD_CHAR('0');
 800ff88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d26f      	bcs.n	8010070 <UInt32ToStrBaseSign+0x118>
 800ff90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff92:	1c5a      	adds	r2, r3, #1
 800ff94:	633a      	str	r2, [r7, #48]	; 0x30
 800ff96:	68ba      	ldr	r2, [r7, #8]
 800ff98:	4413      	add	r3, r2
 800ff9a:	2230      	movs	r2, #48	; 0x30
 800ff9c:	701a      	strb	r2, [r3, #0]
 800ff9e:	e067      	b.n	8010070 <UInt32ToStrBaseSign+0x118>
    } else {

        switch (base) {
 800ffa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ffa4:	2b08      	cmp	r3, #8
 800ffa6:	d007      	beq.n	800ffb8 <UInt32ToStrBaseSign+0x60>
 800ffa8:	2b10      	cmp	r3, #16
 800ffaa:	d00e      	beq.n	800ffca <UInt32ToStrBaseSign+0x72>
 800ffac:	2b02      	cmp	r3, #2
 800ffae:	d107      	bne.n	800ffc0 <UInt32ToStrBaseSign+0x68>
            case 2:
                x = 0x80000000L;
 800ffb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ffb4:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800ffb6:	e00c      	b.n	800ffd2 <UInt32ToStrBaseSign+0x7a>
            case 8:
                x = 0x40000000L;
 800ffb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ffbc:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800ffbe:	e008      	b.n	800ffd2 <UInt32ToStrBaseSign+0x7a>
            default:
            case 10:
                base = 10;
 800ffc0:	230a      	movs	r3, #10
 800ffc2:	70fb      	strb	r3, [r7, #3]
                x = 1000000000L;
 800ffc4:	4b33      	ldr	r3, [pc, #204]	; (8010094 <UInt32ToStrBaseSign+0x13c>)
 800ffc6:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800ffc8:	e003      	b.n	800ffd2 <UInt32ToStrBaseSign+0x7a>
            case 16:
                x = 0x10000000L;
 800ffca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ffce:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 800ffd0:	bf00      	nop
        }

        /* add sign for numbers in base 10 */
        if (sign && ((int32_t) val < 0) && (base == 10)) {
 800ffd2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d01b      	beq.n	8010012 <UInt32ToStrBaseSign+0xba>
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	da18      	bge.n	8010012 <UInt32ToStrBaseSign+0xba>
 800ffe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ffe4:	2b0a      	cmp	r3, #10
 800ffe6:	d114      	bne.n	8010012 <UInt32ToStrBaseSign+0xba>
            uval = -val;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	425b      	negs	r3, r3
 800ffec:	62fb      	str	r3, [r7, #44]	; 0x2c
            ADD_CHAR('-');
 800ffee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d20d      	bcs.n	8010012 <UInt32ToStrBaseSign+0xba>
 800fff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff8:	1c5a      	adds	r2, r3, #1
 800fffa:	633a      	str	r2, [r7, #48]	; 0x30
 800fffc:	68ba      	ldr	r2, [r7, #8]
 800fffe:	4413      	add	r3, r2
 8010000:	222d      	movs	r2, #45	; 0x2d
 8010002:	701a      	strb	r2, [r3, #0]
        }

        /* remove leading zeros */
        while ((uval / x) == 0) {
 8010004:	e005      	b.n	8010012 <UInt32ToStrBaseSign+0xba>
            x /= base;
 8010006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801000a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801000c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010010:	637b      	str	r3, [r7, #52]	; 0x34
        while ((uval / x) == 0) {
 8010012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010016:	fbb2 f3f3 	udiv	r3, r2, r3
 801001a:	2b00      	cmp	r3, #0
 801001c:	d0f3      	beq.n	8010006 <UInt32ToStrBaseSign+0xae>
        }

        do {
            digit = (uint8_t) (uval / x);
 801001e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010022:	fbb2 f3f3 	udiv	r3, r2, r3
 8010026:	b2db      	uxtb	r3, r3
 8010028:	62bb      	str	r3, [r7, #40]	; 0x28
            ADD_CHAR(digits[digit]);
 801002a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	429a      	cmp	r2, r3
 8010030:	d20a      	bcs.n	8010048 <UInt32ToStrBaseSign+0xf0>
 8010032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010034:	1c5a      	adds	r2, r3, #1
 8010036:	633a      	str	r2, [r7, #48]	; 0x30
 8010038:	68ba      	ldr	r2, [r7, #8]
 801003a:	4413      	add	r3, r2
 801003c:	f107 0114 	add.w	r1, r7, #20
 8010040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010042:	440a      	add	r2, r1
 8010044:	7812      	ldrb	r2, [r2, #0]
 8010046:	701a      	strb	r2, [r3, #0]
            uval -= digit * x;
 8010048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801004a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801004c:	fb02 f303 	mul.w	r3, r2, r3
 8010050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010052:	1ad3      	subs	r3, r2, r3
 8010054:	62fb      	str	r3, [r7, #44]	; 0x2c
            x /= base;
 8010056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801005a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801005c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010060:	637b      	str	r3, [r7, #52]	; 0x34
        } while (x && (pos < len));
 8010062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010064:	2b00      	cmp	r3, #0
 8010066:	d003      	beq.n	8010070 <UInt32ToStrBaseSign+0x118>
 8010068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	429a      	cmp	r2, r3
 801006e:	d3d6      	bcc.n	801001e <UInt32ToStrBaseSign+0xc6>
    }

    if (pos < len) str[pos] = 0;
 8010070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	429a      	cmp	r2, r3
 8010076:	d204      	bcs.n	8010082 <UInt32ToStrBaseSign+0x12a>
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801007c:	4413      	add	r3, r2
 801007e:	2200      	movs	r2, #0
 8010080:	701a      	strb	r2, [r3, #0]
    return pos;
 8010082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
#undef ADD_CHAR
}
 8010084:	4618      	mov	r0, r3
 8010086:	373c      	adds	r7, #60	; 0x3c
 8010088:	46bd      	mov	sp, r7
 801008a:	bcb0      	pop	{r4, r5, r7}
 801008c:	4770      	bx	lr
 801008e:	bf00      	nop
 8010090:	08015e2c 	.word	0x08015e2c
 8010094:	3b9aca00 	.word	0x3b9aca00

08010098 <SCPI_UInt32ToStrBase>:
 * @param str   converted textual representation
 * @param len   string buffer length
 * @param base  output base
 * @return number of bytes written to str (without '\0')
 */
size_t SCPI_UInt32ToStrBase(uint32_t val, char * str, size_t len, int8_t base) {
 8010098:	b580      	push	{r7, lr}
 801009a:	b086      	sub	sp, #24
 801009c:	af02      	add	r7, sp, #8
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	607a      	str	r2, [r7, #4]
 80100a4:	70fb      	strb	r3, [r7, #3]
    return UInt32ToStrBaseSign(val, str, len, base, FALSE);
 80100a6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80100aa:	2300      	movs	r3, #0
 80100ac:	9300      	str	r3, [sp, #0]
 80100ae:	4613      	mov	r3, r2
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	68b9      	ldr	r1, [r7, #8]
 80100b4:	68f8      	ldr	r0, [r7, #12]
 80100b6:	f7ff ff4f 	bl	800ff58 <UInt32ToStrBaseSign>
 80100ba:	4603      	mov	r3, r0
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3710      	adds	r7, #16
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <strBaseToInt32>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b086      	sub	sp, #24
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	4613      	mov	r3, r2
 80100d0:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtol(str, &endptr, base);
 80100d2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80100d6:	f107 0314 	add.w	r3, r7, #20
 80100da:	4619      	mov	r1, r3
 80100dc:	68f8      	ldr	r0, [r7, #12]
 80100de:	f002 fcbf 	bl	8012a60 <strtol>
 80100e2:	4602      	mov	r2, r0
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	601a      	str	r2, [r3, #0]
    return endptr - str;
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	461a      	mov	r2, r3
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	1ad3      	subs	r3, r2, r3
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3718      	adds	r7, #24
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <strBaseToUInt32>:
 * Converts string to unsigned 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b086      	sub	sp, #24
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	4613      	mov	r3, r2
 8010104:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtoul(str, &endptr, base);
 8010106:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801010a:	f107 0314 	add.w	r3, r7, #20
 801010e:	4619      	mov	r1, r3
 8010110:	68f8      	ldr	r0, [r7, #12]
 8010112:	f002 fdff 	bl	8012d14 <strtoul>
 8010116:	4602      	mov	r2, r0
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	601a      	str	r2, [r3, #0]
    return endptr - str;
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	461a      	mov	r2, r3
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	1ad3      	subs	r3, r2, r3
}
 8010124:	4618      	mov	r0, r3
 8010126:	3718      	adds	r7, #24
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <strBaseToInt64>:
 * Converts string to signed 64bit integer representation
 * @param str   string value
 * @param val   64bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToInt64(const char * str, int64_t * val, int8_t base) {
 801012c:	b590      	push	{r4, r7, lr}
 801012e:	b087      	sub	sp, #28
 8010130:	af00      	add	r7, sp, #0
 8010132:	60f8      	str	r0, [r7, #12]
 8010134:	60b9      	str	r1, [r7, #8]
 8010136:	4613      	mov	r3, r2
 8010138:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = SCPIDEFINE_strtoll(str, &endptr, base);
 801013a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801013e:	f107 0314 	add.w	r3, r7, #20
 8010142:	4619      	mov	r1, r3
 8010144:	68f8      	ldr	r0, [r7, #12]
 8010146:	f002 fd55 	bl	8012bf4 <strtoll>
 801014a:	4603      	mov	r3, r0
 801014c:	460c      	mov	r4, r1
 801014e:	68ba      	ldr	r2, [r7, #8]
 8010150:	e9c2 3400 	strd	r3, r4, [r2]
    return endptr - str;
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	461a      	mov	r2, r3
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	1ad3      	subs	r3, r2, r3
}
 801015c:	4618      	mov	r0, r3
 801015e:	371c      	adds	r7, #28
 8010160:	46bd      	mov	sp, r7
 8010162:	bd90      	pop	{r4, r7, pc}

08010164 <strBaseToUInt64>:
 * Converts string to unsigned 64bit integer representation
 * @param str   string value
 * @param val   64bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToUInt64(const char * str, uint64_t * val, int8_t base) {
 8010164:	b590      	push	{r4, r7, lr}
 8010166:	b087      	sub	sp, #28
 8010168:	af00      	add	r7, sp, #0
 801016a:	60f8      	str	r0, [r7, #12]
 801016c:	60b9      	str	r1, [r7, #8]
 801016e:	4613      	mov	r3, r2
 8010170:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = SCPIDEFINE_strtoull(str, &endptr, base);
 8010172:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8010176:	f107 0314 	add.w	r3, r7, #20
 801017a:	4619      	mov	r1, r3
 801017c:	68f8      	ldr	r0, [r7, #12]
 801017e:	f002 fe95 	bl	8012eac <strtoull>
 8010182:	4603      	mov	r3, r0
 8010184:	460c      	mov	r4, r1
 8010186:	68ba      	ldr	r2, [r7, #8]
 8010188:	e9c2 3400 	strd	r3, r4, [r2]
    return endptr - str;
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	461a      	mov	r2, r3
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	1ad3      	subs	r3, r2, r3
}
 8010194:	4618      	mov	r0, r3
 8010196:	371c      	adds	r7, #28
 8010198:	46bd      	mov	sp, r7
 801019a:	bd90      	pop	{r4, r7, pc}

0801019c <strToDouble>:
 * @param val   double result
 * @return      number of bytes used in string
 */
double simple_strtod(const char* str, char** endptr);

size_t strToDouble(const char * str, double * val) {
 801019c:	b580      	push	{r7, lr}
 801019e:	b084      	sub	sp, #16
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
    char * endptr;
    *val = simple_strtod(str, &endptr);
 80101a6:	f107 030c 	add.w	r3, r7, #12
 80101aa:	4619      	mov	r1, r3
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f000 f80f 	bl	80101d0 <simple_strtod>
 80101b2:	eeb0 7a40 	vmov.f32	s14, s0
 80101b6:	eef0 7a60 	vmov.f32	s15, s1
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	ed83 7b00 	vstr	d7, [r3]
    return endptr - str;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	461a      	mov	r2, r3
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	1ad3      	subs	r3, r2, r3
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3710      	adds	r7, #16
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <simple_strtod>:

double simple_strtod(const char* str, char** endptr)
{
 80101d0:	b5b0      	push	{r4, r5, r7, lr}
 80101d2:	b088      	sub	sp, #32
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
 int8_t inc;
 double result = 0.0;
 80101da:	f04f 0300 	mov.w	r3, #0
 80101de:	f04f 0400 	mov.w	r4, #0
 80101e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 char * c_tmp;
 c_tmp = strchr(str, '.');
 80101e6:	212e      	movs	r1, #46	; 0x2e
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f002 fb7f 	bl	80128ec <strchr>
 80101ee:	60f8      	str	r0, [r7, #12]
 *endptr = (char*)str;
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	601a      	str	r2, [r3, #0]
 if(c_tmp != NULL)
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	f000 8087 	beq.w	801030c <simple_strtod+0x13c>
 {
    c_tmp++;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	3301      	adds	r3, #1
 8010202:	60fb      	str	r3, [r7, #12]
    inc = -1;
 8010204:	23ff      	movs	r3, #255	; 0xff
 8010206:	77fb      	strb	r3, [r7, #31]
    while(*c_tmp != 0 && inc > -9)
 8010208:	e034      	b.n	8010274 <simple_strtod+0xa4>
    {
        result += (*c_tmp - '0') * pow(10.0, inc);
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	3b30      	subs	r3, #48	; 0x30
 8010210:	4618      	mov	r0, r3
 8010212:	f7f0 f99f 	bl	8000554 <__aeabi_i2d>
 8010216:	4604      	mov	r4, r0
 8010218:	460d      	mov	r5, r1
 801021a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801021e:	4618      	mov	r0, r3
 8010220:	f7f0 f998 	bl	8000554 <__aeabi_i2d>
 8010224:	4602      	mov	r2, r0
 8010226:	460b      	mov	r3, r1
 8010228:	ec43 2b11 	vmov	d1, r2, r3
 801022c:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8010328 <simple_strtod+0x158>
 8010230:	f003 fa6a 	bl	8013708 <pow>
 8010234:	ec53 2b10 	vmov	r2, r3, d0
 8010238:	4620      	mov	r0, r4
 801023a:	4629      	mov	r1, r5
 801023c:	f7f0 f9f4 	bl	8000628 <__aeabi_dmul>
 8010240:	4603      	mov	r3, r0
 8010242:	460c      	mov	r4, r1
 8010244:	461a      	mov	r2, r3
 8010246:	4623      	mov	r3, r4
 8010248:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801024c:	f7f0 f836 	bl	80002bc <__adddf3>
 8010250:	4603      	mov	r3, r0
 8010252:	460c      	mov	r4, r1
 8010254:	e9c7 3404 	strd	r3, r4, [r7, #16]
        c_tmp++; inc--; (*endptr)++;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	3301      	adds	r3, #1
 801025c:	60fb      	str	r3, [r7, #12]
 801025e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010262:	b2db      	uxtb	r3, r3
 8010264:	3b01      	subs	r3, #1
 8010266:	b2db      	uxtb	r3, r3
 8010268:	77fb      	strb	r3, [r7, #31]
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	1c5a      	adds	r2, r3, #1
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	601a      	str	r2, [r3, #0]
    while(*c_tmp != 0 && inc > -9)
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d004      	beq.n	8010286 <simple_strtod+0xb6>
 801027c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010280:	f113 0f08 	cmn.w	r3, #8
 8010284:	dac1      	bge.n	801020a <simple_strtod+0x3a>
    }
    inc = 0;
 8010286:	2300      	movs	r3, #0
 8010288:	77fb      	strb	r3, [r7, #31]
    c_tmp = strchr(str, '.');
 801028a:	212e      	movs	r1, #46	; 0x2e
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f002 fb2d 	bl	80128ec <strchr>
 8010292:	60f8      	str	r0, [r7, #12]
    c_tmp--;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	3b01      	subs	r3, #1
 8010298:	60fb      	str	r3, [r7, #12]
    do
    {
        result += (*c_tmp - '0') * pow(10.0,inc);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	3b30      	subs	r3, #48	; 0x30
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7f0 f957 	bl	8000554 <__aeabi_i2d>
 80102a6:	4604      	mov	r4, r0
 80102a8:	460d      	mov	r5, r1
 80102aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7f0 f950 	bl	8000554 <__aeabi_i2d>
 80102b4:	4602      	mov	r2, r0
 80102b6:	460b      	mov	r3, r1
 80102b8:	ec43 2b11 	vmov	d1, r2, r3
 80102bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010328 <simple_strtod+0x158>
 80102c0:	f003 fa22 	bl	8013708 <pow>
 80102c4:	ec53 2b10 	vmov	r2, r3, d0
 80102c8:	4620      	mov	r0, r4
 80102ca:	4629      	mov	r1, r5
 80102cc:	f7f0 f9ac 	bl	8000628 <__aeabi_dmul>
 80102d0:	4603      	mov	r3, r0
 80102d2:	460c      	mov	r4, r1
 80102d4:	461a      	mov	r2, r3
 80102d6:	4623      	mov	r3, r4
 80102d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80102dc:	f7ef ffee 	bl	80002bc <__adddf3>
 80102e0:	4603      	mov	r3, r0
 80102e2:	460c      	mov	r4, r1
 80102e4:	e9c7 3404 	strd	r3, r4, [r7, #16]
        c_tmp--; inc++; (*endptr)++;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	3b01      	subs	r3, #1
 80102ec:	60fb      	str	r3, [r7, #12]
 80102ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	3301      	adds	r3, #1
 80102f6:	b2db      	uxtb	r3, r3
 80102f8:	77fb      	strb	r3, [r7, #31]
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	1c5a      	adds	r2, r3, #1
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	601a      	str	r2, [r3, #0]
    }while(c_tmp >= str);
 8010304:	68fa      	ldr	r2, [r7, #12]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	429a      	cmp	r2, r3
 801030a:	d2c6      	bcs.n	801029a <simple_strtod+0xca>
 }
 return result;
 801030c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010310:	ec44 3b17 	vmov	d7, r3, r4
}
 8010314:	eeb0 0a47 	vmov.f32	s0, s14
 8010318:	eef0 0a67 	vmov.f32	s1, s15
 801031c:	3720      	adds	r7, #32
 801031e:	46bd      	mov	sp, r7
 8010320:	bdb0      	pop	{r4, r5, r7, pc}
 8010322:	bf00      	nop
 8010324:	f3af 8000 	nop.w
 8010328:	00000000 	.word	0x00000000
 801032c:	40240000 	.word	0x40240000

08010330 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	607a      	str	r2, [r7, #4]
 801033c:	603b      	str	r3, [r7, #0]
    if (len1 != len2) {
 801033e:	68ba      	ldr	r2, [r7, #8]
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	429a      	cmp	r2, r3
 8010344:	d001      	beq.n	801034a <compareStr+0x1a>
        return FALSE;
 8010346:	2300      	movs	r3, #0
 8010348:	e00a      	b.n	8010360 <compareStr+0x30>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
 801034a:	683a      	ldr	r2, [r7, #0]
 801034c:	6879      	ldr	r1, [r7, #4]
 801034e:	68f8      	ldr	r0, [r7, #12]
 8010350:	f002 fad9 	bl	8012906 <strncasecmp>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d101      	bne.n	801035e <compareStr+0x2e>
        return TRUE;
 801035a:	2301      	movs	r3, #1
 801035c:	e000      	b.n	8010360 <compareStr+0x30>
    }

    return FALSE;
 801035e:	2300      	movs	r3, #0
}
 8010360:	4618      	mov	r0, r3
 8010362:	3710      	adds	r7, #16
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <compareStrAndNum>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if strings match
 */
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 8010368:	b580      	push	{r7, lr}
 801036a:	b088      	sub	sp, #32
 801036c:	af00      	add	r7, sp, #0
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	607a      	str	r2, [r7, #4]
 8010374:	603b      	str	r3, [r7, #0]
    scpi_bool_t result = FALSE;
 8010376:	2300      	movs	r3, #0
 8010378:	77fb      	strb	r3, [r7, #31]
    size_t i;

    if (len2 < len1) {
 801037a:	683a      	ldr	r2, [r7, #0]
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	429a      	cmp	r2, r3
 8010380:	d201      	bcs.n	8010386 <compareStrAndNum+0x1e>
        return FALSE;
 8010382:	2300      	movs	r3, #0
 8010384:	e044      	b.n	8010410 <compareStrAndNum+0xa8>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
 8010386:	68ba      	ldr	r2, [r7, #8]
 8010388:	6879      	ldr	r1, [r7, #4]
 801038a:	68f8      	ldr	r0, [r7, #12]
 801038c:	f002 fabb 	bl	8012906 <strncasecmp>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d13b      	bne.n	801040e <compareStrAndNum+0xa6>
        result = TRUE;
 8010396:	2301      	movs	r3, #1
 8010398:	77fb      	strb	r3, [r7, #31]

        if (num) {
 801039a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801039c:	2b00      	cmp	r3, #0
 801039e:	d01b      	beq.n	80103d8 <compareStrAndNum+0x70>
            if (len1 == len2) {
 80103a0:	68ba      	ldr	r2, [r7, #8]
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	429a      	cmp	r2, r3
 80103a6:	d032      	beq.n	801040e <compareStrAndNum+0xa6>
                /* *num = 1; */
            } else {
                int32_t tmpNum;
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
 80103a8:	687a      	ldr	r2, [r7, #4]
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	4413      	add	r3, r2
 80103ae:	f107 0114 	add.w	r1, r7, #20
 80103b2:	220a      	movs	r2, #10
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7ff fe85 	bl	80100c4 <strBaseToInt32>
 80103ba:	4602      	mov	r2, r0
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	4413      	add	r3, r2
 80103c0:	61bb      	str	r3, [r7, #24]
                if (i != len2) {
 80103c2:	69ba      	ldr	r2, [r7, #24]
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d002      	beq.n	80103d0 <compareStrAndNum+0x68>
                    result = FALSE;
 80103ca:	2300      	movs	r3, #0
 80103cc:	77fb      	strb	r3, [r7, #31]
 80103ce:	e01e      	b.n	801040e <compareStrAndNum+0xa6>
                } else {
                    *num = tmpNum;
 80103d0:	697a      	ldr	r2, [r7, #20]
 80103d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d4:	601a      	str	r2, [r3, #0]
 80103d6:	e01a      	b.n	801040e <compareStrAndNum+0xa6>
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	61bb      	str	r3, [r7, #24]
 80103dc:	e013      	b.n	8010406 <compareStrAndNum+0x9e>
                if (!isdigit((int) str2[i])) {
 80103de:	f002 fa19 	bl	8012814 <__locale_ctype_ptr>
 80103e2:	4601      	mov	r1, r0
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	4413      	add	r3, r2
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	3301      	adds	r3, #1
 80103ee:	440b      	add	r3, r1
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	f003 0304 	and.w	r3, r3, #4
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d102      	bne.n	8010400 <compareStrAndNum+0x98>
                    result = FALSE;
 80103fa:	2300      	movs	r3, #0
 80103fc:	77fb      	strb	r3, [r7, #31]
                    break;
 80103fe:	e006      	b.n	801040e <compareStrAndNum+0xa6>
            for (i = len1; i < len2; i++) {
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	3301      	adds	r3, #1
 8010404:	61bb      	str	r3, [r7, #24]
 8010406:	69ba      	ldr	r2, [r7, #24]
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	429a      	cmp	r2, r3
 801040c:	d3e7      	bcc.n	80103de <compareStrAndNum+0x76>
                }
            }
        }
    }

    return result;
 801040e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010410:	4618      	mov	r0, r3
 8010412:	3720      	adds	r7, #32
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}

08010418 <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 8010422:	2300      	movs	r3, #0
 8010424:	60fb      	str	r3, [r7, #12]
 8010426:	e012      	b.n	801044e <patternSeparatorShortPos+0x36>
        if (islower((unsigned char) pattern[i])) {
 8010428:	f002 f9f4 	bl	8012814 <__locale_ctype_ptr>
 801042c:	4601      	mov	r1, r0
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	4413      	add	r3, r2
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	3301      	adds	r3, #1
 8010438:	440b      	add	r3, r1
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	f003 0303 	and.w	r3, r3, #3
 8010440:	2b02      	cmp	r3, #2
 8010442:	d101      	bne.n	8010448 <patternSeparatorShortPos+0x30>
            return i;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	e00d      	b.n	8010464 <patternSeparatorShortPos+0x4c>
    for (i = 0; (i < len) && pattern[i]; i++) {
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	3301      	adds	r3, #1
 801044c:	60fb      	str	r3, [r7, #12]
 801044e:	68fa      	ldr	r2, [r7, #12]
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	429a      	cmp	r2, r3
 8010454:	d205      	bcs.n	8010462 <patternSeparatorShortPos+0x4a>
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	4413      	add	r3, r2
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1e2      	bne.n	8010428 <patternSeparatorShortPos+0x10>
        }
    }
    return i;
 8010462:	68fb      	ldr	r3, [r7, #12]
}
 8010464:	4618      	mov	r0, r3
 8010466:	3710      	adds	r7, #16
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <patternSeparatorPos>:
 * Find pattern separator position
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorPos(const char * pattern, size_t len) {
 801046c:	b580      	push	{r7, lr}
 801046e:	b084      	sub	sp, #16
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	6039      	str	r1, [r7, #0]

    char * separator = strnpbrk(pattern, len, "?:[]");
 8010476:	4a09      	ldr	r2, [pc, #36]	; (801049c <patternSeparatorPos+0x30>)
 8010478:	6839      	ldr	r1, [r7, #0]
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f7ff fd3c 	bl	800fef8 <strnpbrk>
 8010480:	60f8      	str	r0, [r7, #12]
    if (separator == NULL) {
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d101      	bne.n	801048c <patternSeparatorPos+0x20>
        return len;
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	e002      	b.n	8010492 <patternSeparatorPos+0x26>
    } else {
        return separator - pattern;
 801048c:	68fa      	ldr	r2, [r7, #12]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	1ad3      	subs	r3, r2, r3
    }
}
 8010492:	4618      	mov	r0, r3
 8010494:	3710      	adds	r7, #16
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	08015e4c 	.word	0x08015e4c

080104a0 <cmdSeparatorPos>:
 * Find command separator position
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
static size_t cmdSeparatorPos(const char * cmd, size_t len) {
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b084      	sub	sp, #16
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
    char * separator = strnpbrk(cmd, len, ":?");
 80104aa:	4a0a      	ldr	r2, [pc, #40]	; (80104d4 <cmdSeparatorPos+0x34>)
 80104ac:	6839      	ldr	r1, [r7, #0]
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f7ff fd22 	bl	800fef8 <strnpbrk>
 80104b4:	60b8      	str	r0, [r7, #8]
    size_t result;
    if (separator == NULL) {
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d102      	bne.n	80104c2 <cmdSeparatorPos+0x22>
        result = len;
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	60fb      	str	r3, [r7, #12]
 80104c0:	e003      	b.n	80104ca <cmdSeparatorPos+0x2a>
    } else {
        result = separator - cmd;
 80104c2:	68ba      	ldr	r2, [r7, #8]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	1ad3      	subs	r3, r2, r3
 80104c8:	60fb      	str	r3, [r7, #12]
    }

    return result;
 80104ca:	68fb      	ldr	r3, [r7, #12]
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3710      	adds	r7, #16
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	08015e54 	.word	0x08015e54

080104d8 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
 80104d8:	b580      	push	{r7, lr}
 80104da:	b088      	sub	sp, #32
 80104dc:	af02      	add	r7, sp, #8
 80104de:	60f8      	str	r0, [r7, #12]
 80104e0:	60b9      	str	r1, [r7, #8]
 80104e2:	607a      	str	r2, [r7, #4]
 80104e4:	603b      	str	r3, [r7, #0]
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d02c      	beq.n	8010546 <matchPattern+0x6e>
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	3b01      	subs	r3, #1
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	4413      	add	r3, r2
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	2b23      	cmp	r3, #35	; 0x23
 80104f8:	d125      	bne.n	8010546 <matchPattern+0x6e>
        size_t new_pattern_len = pattern_len - 1;
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	3b01      	subs	r3, #1
 80104fe:	617b      	str	r3, [r7, #20]

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 8010500:	6979      	ldr	r1, [r7, #20]
 8010502:	68f8      	ldr	r0, [r7, #12]
 8010504:	f7ff ff88 	bl	8010418 <patternSeparatorShortPos>
 8010508:	4603      	mov	r3, r0
 801050a:	613b      	str	r3, [r7, #16]

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 801050c:	6a3b      	ldr	r3, [r7, #32]
 801050e:	9300      	str	r3, [sp, #0]
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	687a      	ldr	r2, [r7, #4]
 8010514:	6979      	ldr	r1, [r7, #20]
 8010516:	68f8      	ldr	r0, [r7, #12]
 8010518:	f7ff ff26 	bl	8010368 <compareStrAndNum>
 801051c:	4603      	mov	r3, r0
 801051e:	2b00      	cmp	r3, #0
 8010520:	d10a      	bne.n	8010538 <matchPattern+0x60>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
 8010522:	6939      	ldr	r1, [r7, #16]
 8010524:	6a3b      	ldr	r3, [r7, #32]
 8010526:	9300      	str	r3, [sp, #0]
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	687a      	ldr	r2, [r7, #4]
 801052c:	68f8      	ldr	r0, [r7, #12]
 801052e:	f7ff ff1b 	bl	8010368 <compareStrAndNum>
 8010532:	4603      	mov	r3, r0
        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 8010534:	2b00      	cmp	r3, #0
 8010536:	d001      	beq.n	801053c <matchPattern+0x64>
 8010538:	2301      	movs	r3, #1
 801053a:	e000      	b.n	801053e <matchPattern+0x66>
 801053c:	2300      	movs	r3, #0
 801053e:	f003 0301 	and.w	r3, r3, #1
 8010542:	b2db      	uxtb	r3, r3
 8010544:	e01d      	b.n	8010582 <matchPattern+0xaa>
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 8010546:	68b9      	ldr	r1, [r7, #8]
 8010548:	68f8      	ldr	r0, [r7, #12]
 801054a:	f7ff ff65 	bl	8010418 <patternSeparatorShortPos>
 801054e:	4603      	mov	r3, r0
 8010550:	613b      	str	r3, [r7, #16]

        return compareStr(pattern, pattern_len, str, str_len) ||
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	68b9      	ldr	r1, [r7, #8]
 8010558:	68f8      	ldr	r0, [r7, #12]
 801055a:	f7ff fee9 	bl	8010330 <compareStr>
 801055e:	4603      	mov	r3, r0
 8010560:	2b00      	cmp	r3, #0
 8010562:	d108      	bne.n	8010576 <matchPattern+0x9e>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
 8010564:	6939      	ldr	r1, [r7, #16]
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	68f8      	ldr	r0, [r7, #12]
 801056c:	f7ff fee0 	bl	8010330 <compareStr>
 8010570:	4603      	mov	r3, r0
        return compareStr(pattern, pattern_len, str, str_len) ||
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <matchPattern+0xa2>
 8010576:	2301      	movs	r3, #1
 8010578:	e000      	b.n	801057c <matchPattern+0xa4>
 801057a:	2300      	movs	r3, #0
 801057c:	f003 0301 	and.w	r3, r3, #1
 8010580:	b2db      	uxtb	r3, r3
    }
}
 8010582:	4618      	mov	r0, r3
 8010584:	3718      	adds	r7, #24
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
 801058a:	b580      	push	{r7, lr}
 801058c:	b090      	sub	sp, #64	; 0x40
 801058e:	af02      	add	r7, sp, #8
 8010590:	60f8      	str	r0, [r7, #12]
 8010592:	60b9      	str	r1, [r7, #8]
 8010594:	607a      	str	r2, [r7, #4]
 8010596:	603b      	str	r3, [r7, #0]
#define SKIP_PATTERN(n) do {pattern_ptr += (n);  pattern_len -= (n);} while(0)
#define SKIP_CMD(n) do {cmd_ptr += (n);  cmd_len -= (n);} while(0)

    scpi_bool_t result = FALSE;
 8010598:	2300      	movs	r3, #0
 801059a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int brackets = 0;
 801059e:	2300      	movs	r3, #0
 80105a0:	633b      	str	r3, [r7, #48]	; 0x30
    int cmd_sep_pos = 0;
 80105a2:	2300      	movs	r3, #0
 80105a4:	617b      	str	r3, [r7, #20]

    size_t numbers_idx = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t *number_ptr = NULL;
 80105aa:	2300      	movs	r3, #0
 80105ac:	62bb      	str	r3, [r7, #40]	; 0x28

    const char * pattern_ptr = pattern;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	627b      	str	r3, [r7, #36]	; 0x24
    int pattern_len = strlen(pattern);
 80105b2:	68f8      	ldr	r0, [r7, #12]
 80105b4:	f7ef fe1e 	bl	80001f4 <strlen>
 80105b8:	4603      	mov	r3, r0
 80105ba:	623b      	str	r3, [r7, #32]

    const char * cmd_ptr = cmd;
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	61fb      	str	r3, [r7, #28]
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 80105c0:	6879      	ldr	r1, [r7, #4]
 80105c2:	68b8      	ldr	r0, [r7, #8]
 80105c4:	f002 f9c4 	bl	8012950 <strnlen>
 80105c8:	61b8      	str	r0, [r7, #24]

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
 80105ca:	6a3b      	ldr	r3, [r7, #32]
 80105cc:	3b01      	subs	r3, #1
 80105ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105d0:	4413      	add	r3, r2
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	2b3f      	cmp	r3, #63	; 0x3f
 80105d6:	d10f      	bne.n	80105f8 <matchCommand+0x6e>
        if (cmd_ptr[cmd_len - 1] == '?') {
 80105d8:	69bb      	ldr	r3, [r7, #24]
 80105da:	3b01      	subs	r3, #1
 80105dc:	69fa      	ldr	r2, [r7, #28]
 80105de:	4413      	add	r3, r2
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	2b3f      	cmp	r3, #63	; 0x3f
 80105e4:	d106      	bne.n	80105f4 <matchCommand+0x6a>
            cmd_len -= 1;
 80105e6:	69bb      	ldr	r3, [r7, #24]
 80105e8:	3b01      	subs	r3, #1
 80105ea:	61bb      	str	r3, [r7, #24]
            pattern_len -= 1;
 80105ec:	6a3b      	ldr	r3, [r7, #32]
 80105ee:	3b01      	subs	r3, #1
 80105f0:	623b      	str	r3, [r7, #32]
 80105f2:	e001      	b.n	80105f8 <matchCommand+0x6e>
        } else {
            return FALSE;
 80105f4:	2300      	movs	r3, #0
 80105f6:	e18d      	b.n	8010914 <matchCommand+0x38a>
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
 80105f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	2b5b      	cmp	r3, #91	; 0x5b
 80105fe:	d108      	bne.n	8010612 <matchCommand+0x88>
        SKIP_PATTERN(1);
 8010600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010602:	3301      	adds	r3, #1
 8010604:	627b      	str	r3, [r7, #36]	; 0x24
 8010606:	6a3b      	ldr	r3, [r7, #32]
 8010608:	3b01      	subs	r3, #1
 801060a:	623b      	str	r3, [r7, #32]
        brackets++;
 801060c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801060e:	3301      	adds	r3, #1
 8010610:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 8010612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	2b3a      	cmp	r3, #58	; 0x3a
 8010618:	d105      	bne.n	8010626 <matchCommand+0x9c>
        SKIP_PATTERN(1);
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	3301      	adds	r3, #1
 801061e:	627b      	str	r3, [r7, #36]	; 0x24
 8010620:	6a3b      	ldr	r3, [r7, #32]
 8010622:	3b01      	subs	r3, #1
 8010624:	623b      	str	r3, [r7, #32]
    }

    if (cmd_ptr[0] == ':') {
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	781b      	ldrb	r3, [r3, #0]
 801062a:	2b3a      	cmp	r3, #58	; 0x3a
 801062c:	d110      	bne.n	8010650 <matchCommand+0xc6>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
 801062e:	69bb      	ldr	r3, [r7, #24]
 8010630:	2b01      	cmp	r3, #1
 8010632:	d90d      	bls.n	8010650 <matchCommand+0xc6>
            if (cmd_ptr[1] != '*') {
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	3301      	adds	r3, #1
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	2b2a      	cmp	r3, #42	; 0x2a
 801063c:	d006      	beq.n	801064c <matchCommand+0xc2>
                SKIP_CMD(1);
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	3301      	adds	r3, #1
 8010642:	61fb      	str	r3, [r7, #28]
 8010644:	69bb      	ldr	r3, [r7, #24]
 8010646:	3b01      	subs	r3, #1
 8010648:	61bb      	str	r3, [r7, #24]
 801064a:	e001      	b.n	8010650 <matchCommand+0xc6>
            } else {
                return FALSE;
 801064c:	2300      	movs	r3, #0
 801064e:	e161      	b.n	8010914 <matchCommand+0x38a>
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8010650:	6a3b      	ldr	r3, [r7, #32]
 8010652:	4619      	mov	r1, r3
 8010654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010656:	f7ff ff09 	bl	801046c <patternSeparatorPos>
 801065a:	4603      	mov	r3, r0
 801065c:	613b      	str	r3, [r7, #16]

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);
 801065e:	69b9      	ldr	r1, [r7, #24]
 8010660:	69f8      	ldr	r0, [r7, #28]
 8010662:	f7ff ff1d 	bl	80104a0 <cmdSeparatorPos>
 8010666:	4603      	mov	r3, r0
 8010668:	617b      	str	r3, [r7, #20]

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	2b00      	cmp	r3, #0
 801066e:	dd1c      	ble.n	80106aa <matchCommand+0x120>
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	3b01      	subs	r3, #1
 8010674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010676:	4413      	add	r3, r2
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	2b23      	cmp	r3, #35	; 0x23
 801067c:	d115      	bne.n	80106aa <matchCommand+0x120>
            if (numbers && (numbers_idx < numbers_len)) {
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d00c      	beq.n	801069e <matchCommand+0x114>
 8010684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010688:	429a      	cmp	r2, r3
 801068a:	d208      	bcs.n	801069e <matchCommand+0x114>
                number_ptr = numbers + numbers_idx;
 801068c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068e:	009b      	lsls	r3, r3, #2
 8010690:	683a      	ldr	r2, [r7, #0]
 8010692:	4413      	add	r3, r2
 8010694:	62bb      	str	r3, [r7, #40]	; 0x28
                *number_ptr = default_value; /* default value */
 8010696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801069a:	601a      	str	r2, [r3, #0]
 801069c:	e001      	b.n	80106a2 <matchCommand+0x118>
            } else {
                number_ptr = NULL;
 801069e:	2300      	movs	r3, #0
 80106a0:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            numbers_idx++;
 80106a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a4:	3301      	adds	r3, #1
 80106a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106a8:	e001      	b.n	80106ae <matchCommand+0x124>
        } else {
            number_ptr = NULL;
 80106aa:	2300      	movs	r3, #0
 80106ac:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
 80106ae:	6939      	ldr	r1, [r7, #16]
 80106b0:	697a      	ldr	r2, [r7, #20]
 80106b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b4:	9300      	str	r3, [sp, #0]
 80106b6:	4613      	mov	r3, r2
 80106b8:	69fa      	ldr	r2, [r7, #28]
 80106ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106bc:	f7ff ff0c 	bl	80104d8 <matchPattern>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	f000 80e9 	beq.w	801089a <matchCommand+0x310>
            SKIP_PATTERN(pattern_sep_pos);
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106cc:	4413      	add	r3, r2
 80106ce:	627b      	str	r3, [r7, #36]	; 0x24
 80106d0:	6a3a      	ldr	r2, [r7, #32]
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	1ad3      	subs	r3, r2, r3
 80106d6:	623b      	str	r3, [r7, #32]
            SKIP_CMD(cmd_sep_pos);
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	69fa      	ldr	r2, [r7, #28]
 80106dc:	4413      	add	r3, r2
 80106de:	61fb      	str	r3, [r7, #28]
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	69ba      	ldr	r2, [r7, #24]
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	61bb      	str	r3, [r7, #24]
            result = TRUE;
 80106e8:	2301      	movs	r3, #1
 80106ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
 80106ee:	6a3b      	ldr	r3, [r7, #32]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d103      	bne.n	80106fc <matchCommand+0x172>
 80106f4:	69bb      	ldr	r3, [r7, #24]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	f000 8107 	beq.w	801090a <matchCommand+0x380>
                break;
            }

            /* pattern complete, but command not */
            if ((pattern_len == 0) && (cmd_len > 0)) {
 80106fc:	6a3b      	ldr	r3, [r7, #32]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d106      	bne.n	8010710 <matchCommand+0x186>
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d003      	beq.n	8010710 <matchCommand+0x186>
                result = FALSE;
 8010708:	2300      	movs	r3, #0
 801070a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 801070e:	e0ff      	b.n	8010910 <matchCommand+0x386>
            }

            /* command complete, but pattern not */
            if (cmd_len == 0) {
 8010710:	69bb      	ldr	r3, [r7, #24]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d138      	bne.n	8010788 <matchCommand+0x1fe>
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
 8010716:	e02c      	b.n	8010772 <matchCommand+0x1e8>
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8010718:	6a3b      	ldr	r3, [r7, #32]
 801071a:	4619      	mov	r1, r3
 801071c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801071e:	f7ff fea5 	bl	801046c <patternSeparatorPos>
 8010722:	4603      	mov	r3, r0
 8010724:	613b      	str	r3, [r7, #16]
                    switch (pattern_ptr[pattern_sep_pos]) {
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801072a:	4413      	add	r3, r2
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	2b5b      	cmp	r3, #91	; 0x5b
 8010730:	d002      	beq.n	8010738 <matchCommand+0x1ae>
 8010732:	2b5d      	cmp	r3, #93	; 0x5d
 8010734:	d004      	beq.n	8010740 <matchCommand+0x1b6>
                            break;
                        case ']':
                            brackets--;
                            break;
                        default:
                            break;
 8010736:	e007      	b.n	8010748 <matchCommand+0x1be>
                            brackets++;
 8010738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801073a:	3301      	adds	r3, #1
 801073c:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 801073e:	e003      	b.n	8010748 <matchCommand+0x1be>
                            brackets--;
 8010740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010742:	3b01      	subs	r3, #1
 8010744:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 8010746:	bf00      	nop
                    }
                    SKIP_PATTERN(pattern_sep_pos + 1);
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	3301      	adds	r3, #1
 801074c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801074e:	4413      	add	r3, r2
 8010750:	627b      	str	r3, [r7, #36]	; 0x24
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	3301      	adds	r3, #1
 8010756:	6a3a      	ldr	r2, [r7, #32]
 8010758:	1ad3      	subs	r3, r2, r3
 801075a:	623b      	str	r3, [r7, #32]
                    if (brackets == 0) {
 801075c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075e:	2b00      	cmp	r3, #0
 8010760:	d107      	bne.n	8010772 <matchCommand+0x1e8>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
 8010762:	6a3b      	ldr	r3, [r7, #32]
 8010764:	2b00      	cmp	r3, #0
 8010766:	dd07      	ble.n	8010778 <matchCommand+0x1ee>
 8010768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	2b5b      	cmp	r3, #91	; 0x5b
 801076e:	d103      	bne.n	8010778 <matchCommand+0x1ee>
                            continue;
 8010770:	bf00      	nop
                while (pattern_len) {
 8010772:	6a3b      	ldr	r3, [r7, #32]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d1cf      	bne.n	8010718 <matchCommand+0x18e>
                        } else {
                            break;
                        }
                    }
                }
                if (pattern_len != 0) {
 8010778:	6a3b      	ldr	r3, [r7, #32]
 801077a:	2b00      	cmp	r3, #0
 801077c:	f000 80c7 	beq.w	801090e <matchCommand+0x384>
                    result = FALSE;
 8010780:	2300      	movs	r3, #0
 8010782:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                }
                break; /* exist optional keyword, command is complete */
 8010786:	e0c2      	b.n	801090e <matchCommand+0x384>
            }

            /* both command and patter contains command separator at this position */
            if ((pattern_len > 0)
 8010788:	6a3b      	ldr	r3, [r7, #32]
 801078a:	2b00      	cmp	r3, #0
 801078c:	dd16      	ble.n	80107bc <matchCommand+0x232>
                    && ((pattern_ptr[0] == cmd_ptr[0])
 801078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010790:	781a      	ldrb	r2, [r3, #0]
 8010792:	69fb      	ldr	r3, [r7, #28]
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	429a      	cmp	r2, r3
 8010798:	d110      	bne.n	80107bc <matchCommand+0x232>
                    && (pattern_ptr[0] == ':'))) {
 801079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079c:	781b      	ldrb	r3, [r3, #0]
 801079e:	2b3a      	cmp	r3, #58	; 0x3a
 80107a0:	d10c      	bne.n	80107bc <matchCommand+0x232>
                SKIP_PATTERN(1);
 80107a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a4:	3301      	adds	r3, #1
 80107a6:	627b      	str	r3, [r7, #36]	; 0x24
 80107a8:	6a3b      	ldr	r3, [r7, #32]
 80107aa:	3b01      	subs	r3, #1
 80107ac:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	3301      	adds	r3, #1
 80107b2:	61fb      	str	r3, [r7, #28]
 80107b4:	69bb      	ldr	r3, [r7, #24]
 80107b6:	3b01      	subs	r3, #1
 80107b8:	61bb      	str	r3, [r7, #24]
 80107ba:	e0a5      	b.n	8010908 <matchCommand+0x37e>
            } else if ((pattern_len > 1)
 80107bc:	6a3b      	ldr	r3, [r7, #32]
 80107be:	2b01      	cmp	r3, #1
 80107c0:	dd1f      	ble.n	8010802 <matchCommand+0x278>
                    && (pattern_ptr[1] == cmd_ptr[0])
 80107c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c4:	3301      	adds	r3, #1
 80107c6:	781a      	ldrb	r2, [r3, #0]
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d118      	bne.n	8010802 <matchCommand+0x278>
                    && (pattern_ptr[0] == '[')
 80107d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	2b5b      	cmp	r3, #91	; 0x5b
 80107d6:	d114      	bne.n	8010802 <matchCommand+0x278>
                    && (pattern_ptr[1] == ':')) {
 80107d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107da:	3301      	adds	r3, #1
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	2b3a      	cmp	r3, #58	; 0x3a
 80107e0:	d10f      	bne.n	8010802 <matchCommand+0x278>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
 80107e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e4:	3302      	adds	r3, #2
 80107e6:	627b      	str	r3, [r7, #36]	; 0x24
 80107e8:	6a3b      	ldr	r3, [r7, #32]
 80107ea:	3b02      	subs	r3, #2
 80107ec:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	3301      	adds	r3, #1
 80107f2:	61fb      	str	r3, [r7, #28]
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	3b01      	subs	r3, #1
 80107f8:	61bb      	str	r3, [r7, #24]
                brackets++;
 80107fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fc:	3301      	adds	r3, #1
 80107fe:	633b      	str	r3, [r7, #48]	; 0x30
 8010800:	e082      	b.n	8010908 <matchCommand+0x37e>
            } else if ((pattern_len > 1)
 8010802:	6a3b      	ldr	r3, [r7, #32]
 8010804:	2b01      	cmp	r3, #1
 8010806:	dd1f      	ble.n	8010848 <matchCommand+0x2be>
                    && (pattern_ptr[1] == cmd_ptr[0])
 8010808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080a:	3301      	adds	r3, #1
 801080c:	781a      	ldrb	r2, [r3, #0]
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	429a      	cmp	r2, r3
 8010814:	d118      	bne.n	8010848 <matchCommand+0x2be>
                    && (pattern_ptr[0] == ']')
 8010816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	2b5d      	cmp	r3, #93	; 0x5d
 801081c:	d114      	bne.n	8010848 <matchCommand+0x2be>
                    && (pattern_ptr[1] == ':')) {
 801081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010820:	3301      	adds	r3, #1
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	2b3a      	cmp	r3, #58	; 0x3a
 8010826:	d10f      	bne.n	8010848 <matchCommand+0x2be>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
 8010828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082a:	3302      	adds	r3, #2
 801082c:	627b      	str	r3, [r7, #36]	; 0x24
 801082e:	6a3b      	ldr	r3, [r7, #32]
 8010830:	3b02      	subs	r3, #2
 8010832:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	3301      	adds	r3, #1
 8010838:	61fb      	str	r3, [r7, #28]
 801083a:	69bb      	ldr	r3, [r7, #24]
 801083c:	3b01      	subs	r3, #1
 801083e:	61bb      	str	r3, [r7, #24]
                brackets--;
 8010840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010842:	3b01      	subs	r3, #1
 8010844:	633b      	str	r3, [r7, #48]	; 0x30
 8010846:	e05f      	b.n	8010908 <matchCommand+0x37e>
            } else if ((pattern_len > 2)
 8010848:	6a3b      	ldr	r3, [r7, #32]
 801084a:	2b02      	cmp	r3, #2
 801084c:	dd21      	ble.n	8010892 <matchCommand+0x308>
                    && (pattern_ptr[2] == cmd_ptr[0])
 801084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010850:	3302      	adds	r3, #2
 8010852:	781a      	ldrb	r2, [r3, #0]
 8010854:	69fb      	ldr	r3, [r7, #28]
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	429a      	cmp	r2, r3
 801085a:	d11a      	bne.n	8010892 <matchCommand+0x308>
                    && (pattern_ptr[0] == ']')
 801085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	2b5d      	cmp	r3, #93	; 0x5d
 8010862:	d116      	bne.n	8010892 <matchCommand+0x308>
                    && (pattern_ptr[1] == '[')
 8010864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010866:	3301      	adds	r3, #1
 8010868:	781b      	ldrb	r3, [r3, #0]
 801086a:	2b5b      	cmp	r3, #91	; 0x5b
 801086c:	d111      	bne.n	8010892 <matchCommand+0x308>
                    && (pattern_ptr[2] == ':')) {
 801086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010870:	3302      	adds	r3, #2
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	2b3a      	cmp	r3, #58	; 0x3a
 8010876:	d10c      	bne.n	8010892 <matchCommand+0x308>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
 8010878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087a:	3303      	adds	r3, #3
 801087c:	627b      	str	r3, [r7, #36]	; 0x24
 801087e:	6a3b      	ldr	r3, [r7, #32]
 8010880:	3b03      	subs	r3, #3
 8010882:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	3301      	adds	r3, #1
 8010888:	61fb      	str	r3, [r7, #28]
 801088a:	69bb      	ldr	r3, [r7, #24]
 801088c:	3b01      	subs	r3, #1
 801088e:	61bb      	str	r3, [r7, #24]
 8010890:	e03a      	b.n	8010908 <matchCommand+0x37e>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 8010892:	2300      	movs	r3, #0
 8010894:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010898:	e03a      	b.n	8010910 <matchCommand+0x386>
            }
        } else {
            SKIP_PATTERN(pattern_sep_pos);
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801089e:	4413      	add	r3, r2
 80108a0:	627b      	str	r3, [r7, #36]	; 0x24
 80108a2:	6a3a      	ldr	r2, [r7, #32]
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	1ad3      	subs	r3, r2, r3
 80108a8:	623b      	str	r3, [r7, #32]
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 80108aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	2b5d      	cmp	r3, #93	; 0x5d
 80108b0:	d10e      	bne.n	80108d0 <matchCommand+0x346>
 80108b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b4:	3301      	adds	r3, #1
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	2b3a      	cmp	r3, #58	; 0x3a
 80108ba:	d109      	bne.n	80108d0 <matchCommand+0x346>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 80108bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108be:	3302      	adds	r3, #2
 80108c0:	627b      	str	r3, [r7, #36]	; 0x24
 80108c2:	6a3b      	ldr	r3, [r7, #32]
 80108c4:	3b02      	subs	r3, #2
 80108c6:	623b      	str	r3, [r7, #32]
                brackets--;
 80108c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ca:	3b01      	subs	r3, #1
 80108cc:	633b      	str	r3, [r7, #48]	; 0x30
 80108ce:	e01b      	b.n	8010908 <matchCommand+0x37e>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
 80108d0:	6a3b      	ldr	r3, [r7, #32]
 80108d2:	2b02      	cmp	r3, #2
 80108d4:	dd14      	ble.n	8010900 <matchCommand+0x376>
 80108d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	2b5d      	cmp	r3, #93	; 0x5d
 80108dc:	d110      	bne.n	8010900 <matchCommand+0x376>
                    && (pattern_ptr[1] == '[')
 80108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e0:	3301      	adds	r3, #1
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	2b5b      	cmp	r3, #91	; 0x5b
 80108e6:	d10b      	bne.n	8010900 <matchCommand+0x376>
                    && (pattern_ptr[2] == ':')) {
 80108e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ea:	3302      	adds	r3, #2
 80108ec:	781b      	ldrb	r3, [r3, #0]
 80108ee:	2b3a      	cmp	r3, #58	; 0x3a
 80108f0:	d106      	bne.n	8010900 <matchCommand+0x376>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 80108f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f4:	3303      	adds	r3, #3
 80108f6:	627b      	str	r3, [r7, #36]	; 0x24
 80108f8:	6a3b      	ldr	r3, [r7, #32]
 80108fa:	3b03      	subs	r3, #3
 80108fc:	623b      	str	r3, [r7, #32]
 80108fe:	e003      	b.n	8010908 <matchCommand+0x37e>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 8010900:	2300      	movs	r3, #0
 8010902:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010906:	e003      	b.n	8010910 <matchCommand+0x386>
    while (1) {
 8010908:	e6a2      	b.n	8010650 <matchCommand+0xc6>
                break;
 801090a:	bf00      	nop
 801090c:	e000      	b.n	8010910 <matchCommand+0x386>
                break; /* exist optional keyword, command is complete */
 801090e:	bf00      	nop
            }
        }
    }

    return result;
 8010910:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
#undef SKIP_PATTERN
#undef SKIP_CMD
}
 8010914:	4618      	mov	r0, r3
 8010916:	3738      	adds	r7, #56	; 0x38
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}

0801091c <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
 801091c:	b580      	push	{r7, lr}
 801091e:	b084      	sub	sp, #16
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
 8010924:	6039      	str	r1, [r7, #0]
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d007      	beq.n	801093c <composeCompoundCommand+0x20>
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d003      	beq.n	801093c <composeCompoundCommand+0x20>
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	689b      	ldr	r3, [r3, #8]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d101      	bne.n	8010940 <composeCompoundCommand+0x24>
        return FALSE;
 801093c:	2300      	movs	r3, #0
 801093e:	e04d      	b.n	80109dc <composeCompoundCommand+0xc0>

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d003      	beq.n	8010950 <composeCompoundCommand+0x34>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	689b      	ldr	r3, [r3, #8]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d101      	bne.n	8010954 <composeCompoundCommand+0x38>
        return TRUE;
 8010950:	2301      	movs	r3, #1
 8010952:	e043      	b.n	80109dc <composeCompoundCommand+0xc0>

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	685b      	ldr	r3, [r3, #4]
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	2b2a      	cmp	r3, #42	; 0x2a
 801095c:	d004      	beq.n	8010968 <composeCompoundCommand+0x4c>
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	2b3a      	cmp	r3, #58	; 0x3a
 8010966:	d101      	bne.n	801096c <composeCompoundCommand+0x50>
        return TRUE;
 8010968:	2301      	movs	r3, #1
 801096a:	e037      	b.n	80109dc <composeCompoundCommand+0xc0>

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	2b2a      	cmp	r3, #42	; 0x2a
 8010974:	d101      	bne.n	801097a <composeCompoundCommand+0x5e>
        return TRUE;
 8010976:	2301      	movs	r3, #1
 8010978:	e030      	b.n	80109dc <composeCompoundCommand+0xc0>

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	689b      	ldr	r3, [r3, #8]
 801097e:	60fb      	str	r3, [r7, #12]
 8010980:	e00a      	b.n	8010998 <composeCompoundCommand+0x7c>
        if (prev->ptr[i - 1] == ':') {
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	685a      	ldr	r2, [r3, #4]
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	3b01      	subs	r3, #1
 801098a:	4413      	add	r3, r2
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	2b3a      	cmp	r3, #58	; 0x3a
 8010990:	d006      	beq.n	80109a0 <composeCompoundCommand+0x84>
    for (i = prev->len; i > 0; i--) {
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	3b01      	subs	r3, #1
 8010996:	60fb      	str	r3, [r7, #12]
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d1f1      	bne.n	8010982 <composeCompoundCommand+0x66>
 801099e:	e000      	b.n	80109a2 <composeCompoundCommand+0x86>
            break;
 80109a0:	bf00      	nop
        }
    }

    /* Previous command was simple command - nothing to do*/
    if (i == 0)
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d101      	bne.n	80109ac <composeCompoundCommand+0x90>
        return TRUE;
 80109a8:	2301      	movs	r3, #1
 80109aa:	e017      	b.n	80109dc <composeCompoundCommand+0xc0>

    current->ptr -= i;
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	685a      	ldr	r2, [r3, #4]
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	425b      	negs	r3, r3
 80109b4:	441a      	add	r2, r3
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	605a      	str	r2, [r3, #4]
    current->len += i;
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	689b      	ldr	r3, [r3, #8]
 80109be:	461a      	mov	r2, r3
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	4413      	add	r3, r2
 80109c4:	461a      	mov	r2, r3
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	609a      	str	r2, [r3, #8]
    memmove(current->ptr, prev->ptr, i);
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	6858      	ldr	r0, [r3, #4]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	68fa      	ldr	r2, [r7, #12]
 80109d4:	4619      	mov	r1, r3
 80109d6:	f001 ff48 	bl	801286a <memmove>
    return TRUE;
 80109da:	2301      	movs	r3, #1
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3710      	adds	r7, #16
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80109e4:	b480      	push	{r7}
 80109e6:	b083      	sub	sp, #12
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f103 0208 	add.w	r2, r3, #8
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f04f 32ff 	mov.w	r2, #4294967295
 80109fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f103 0208 	add.w	r2, r3, #8
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f103 0208 	add.w	r2, r3, #8
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2200      	movs	r2, #0
 8010a16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010a18:	bf00      	nop
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010a32:	bf00      	nop
 8010a34:	370c      	adds	r7, #12
 8010a36:	46bd      	mov	sp, r7
 8010a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3c:	4770      	bx	lr

08010a3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a3e:	b480      	push	{r7}
 8010a40:	b085      	sub	sp, #20
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
 8010a46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	689a      	ldr	r2, [r3, #8]
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	689b      	ldr	r3, [r3, #8]
 8010a60:	683a      	ldr	r2, [r7, #0]
 8010a62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	683a      	ldr	r2, [r7, #0]
 8010a68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	687a      	ldr	r2, [r7, #4]
 8010a6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	1c5a      	adds	r2, r3, #1
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	601a      	str	r2, [r3, #0]
}
 8010a7a:	bf00      	nop
 8010a7c:	3714      	adds	r7, #20
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr

08010a86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a86:	b480      	push	{r7}
 8010a88:	b085      	sub	sp, #20
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
 8010a8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a9c:	d103      	bne.n	8010aa6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	691b      	ldr	r3, [r3, #16]
 8010aa2:	60fb      	str	r3, [r7, #12]
 8010aa4:	e00c      	b.n	8010ac0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	3308      	adds	r3, #8
 8010aaa:	60fb      	str	r3, [r7, #12]
 8010aac:	e002      	b.n	8010ab4 <vListInsert+0x2e>
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	60fb      	str	r3, [r7, #12]
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	68ba      	ldr	r2, [r7, #8]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d2f6      	bcs.n	8010aae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	685a      	ldr	r2, [r3, #4]
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	683a      	ldr	r2, [r7, #0]
 8010ace:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	683a      	ldr	r2, [r7, #0]
 8010ada:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	1c5a      	adds	r2, r3, #1
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	601a      	str	r2, [r3, #0]
}
 8010aec:	bf00      	nop
 8010aee:	3714      	adds	r7, #20
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010af8:	b480      	push	{r7}
 8010afa:	b085      	sub	sp, #20
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	691b      	ldr	r3, [r3, #16]
 8010b04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	6892      	ldr	r2, [r2, #8]
 8010b0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	689b      	ldr	r3, [r3, #8]
 8010b14:	687a      	ldr	r2, [r7, #4]
 8010b16:	6852      	ldr	r2, [r2, #4]
 8010b18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	687a      	ldr	r2, [r7, #4]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d103      	bne.n	8010b2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	689a      	ldr	r2, [r3, #8]
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	1e5a      	subs	r2, r3, #1
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3714      	adds	r7, #20
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	3b04      	subs	r3, #4
 8010b5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	3b04      	subs	r3, #4
 8010b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	f023 0201 	bic.w	r2, r3, #1
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	3b04      	subs	r3, #4
 8010b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010b7c:	4a09      	ldr	r2, [pc, #36]	; (8010ba4 <pxPortInitialiseStack+0x58>)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	3b14      	subs	r3, #20
 8010b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	3b20      	subs	r3, #32
 8010b92:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b94:	68fb      	ldr	r3, [r7, #12]
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3714      	adds	r7, #20
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba0:	4770      	bx	lr
 8010ba2:	bf00      	nop
 8010ba4:	08010ba9 	.word	0x08010ba9

08010ba8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010bb2:	4b11      	ldr	r3, [pc, #68]	; (8010bf8 <prvTaskExitError+0x50>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bba:	d009      	beq.n	8010bd0 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc0:	f383 8811 	msr	BASEPRI, r3
 8010bc4:	f3bf 8f6f 	isb	sy
 8010bc8:	f3bf 8f4f 	dsb	sy
 8010bcc:	60fb      	str	r3, [r7, #12]
 8010bce:	e7fe      	b.n	8010bce <prvTaskExitError+0x26>
 8010bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd4:	f383 8811 	msr	BASEPRI, r3
 8010bd8:	f3bf 8f6f 	isb	sy
 8010bdc:	f3bf 8f4f 	dsb	sy
 8010be0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010be2:	bf00      	nop
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d0fc      	beq.n	8010be4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010bea:	bf00      	nop
 8010bec:	3714      	adds	r7, #20
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr
 8010bf6:	bf00      	nop
 8010bf8:	20000020 	.word	0x20000020
 8010bfc:	00000000 	.word	0x00000000

08010c00 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c00:	4b07      	ldr	r3, [pc, #28]	; (8010c20 <pxCurrentTCBConst2>)
 8010c02:	6819      	ldr	r1, [r3, #0]
 8010c04:	6808      	ldr	r0, [r1, #0]
 8010c06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010c0a:	f380 8809 	msr	PSP, r0
 8010c0e:	f3bf 8f6f 	isb	sy
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	f380 8811 	msr	BASEPRI, r0
 8010c1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8010c1e:	4770      	bx	lr

08010c20 <pxCurrentTCBConst2>:
 8010c20:	20000220 	.word	0x20000220
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010c24:	bf00      	nop
 8010c26:	bf00      	nop

08010c28 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8010c28:	4806      	ldr	r0, [pc, #24]	; (8010c44 <prvPortStartFirstTask+0x1c>)
 8010c2a:	6800      	ldr	r0, [r0, #0]
 8010c2c:	6800      	ldr	r0, [r0, #0]
 8010c2e:	f380 8808 	msr	MSP, r0
 8010c32:	b662      	cpsie	i
 8010c34:	b661      	cpsie	f
 8010c36:	f3bf 8f4f 	dsb	sy
 8010c3a:	f3bf 8f6f 	isb	sy
 8010c3e:	df00      	svc	0
 8010c40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010c42:	bf00      	nop
 8010c44:	e000ed08 	.word	0xe000ed08

08010c48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b086      	sub	sp, #24
 8010c4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010c4e:	4b39      	ldr	r3, [pc, #228]	; (8010d34 <xPortStartScheduler+0xec>)
 8010c50:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	22ff      	movs	r2, #255	; 0xff
 8010c5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	b2db      	uxtb	r3, r3
 8010c66:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010c68:	79fb      	ldrb	r3, [r7, #7]
 8010c6a:	b2db      	uxtb	r3, r3
 8010c6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010c70:	b2da      	uxtb	r2, r3
 8010c72:	4b31      	ldr	r3, [pc, #196]	; (8010d38 <xPortStartScheduler+0xf0>)
 8010c74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010c76:	4b31      	ldr	r3, [pc, #196]	; (8010d3c <xPortStartScheduler+0xf4>)
 8010c78:	2207      	movs	r2, #7
 8010c7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c7c:	e009      	b.n	8010c92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010c7e:	4b2f      	ldr	r3, [pc, #188]	; (8010d3c <xPortStartScheduler+0xf4>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	3b01      	subs	r3, #1
 8010c84:	4a2d      	ldr	r2, [pc, #180]	; (8010d3c <xPortStartScheduler+0xf4>)
 8010c86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010c88:	79fb      	ldrb	r3, [r7, #7]
 8010c8a:	b2db      	uxtb	r3, r3
 8010c8c:	005b      	lsls	r3, r3, #1
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c92:	79fb      	ldrb	r3, [r7, #7]
 8010c94:	b2db      	uxtb	r3, r3
 8010c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c9a:	2b80      	cmp	r3, #128	; 0x80
 8010c9c:	d0ef      	beq.n	8010c7e <xPortStartScheduler+0x36>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8010c9e:	4b27      	ldr	r3, [pc, #156]	; (8010d3c <xPortStartScheduler+0xf4>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	f1c3 0307 	rsb	r3, r3, #7
 8010ca6:	2b04      	cmp	r3, #4
 8010ca8:	d009      	beq.n	8010cbe <xPortStartScheduler+0x76>
 8010caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cae:	f383 8811 	msr	BASEPRI, r3
 8010cb2:	f3bf 8f6f 	isb	sy
 8010cb6:	f3bf 8f4f 	dsb	sy
 8010cba:	613b      	str	r3, [r7, #16]
 8010cbc:	e7fe      	b.n	8010cbc <xPortStartScheduler+0x74>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010cbe:	4b1f      	ldr	r3, [pc, #124]	; (8010d3c <xPortStartScheduler+0xf4>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f1c3 0307 	rsb	r3, r3, #7
 8010cc6:	2b04      	cmp	r3, #4
 8010cc8:	d009      	beq.n	8010cde <xPortStartScheduler+0x96>
 8010cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cce:	f383 8811 	msr	BASEPRI, r3
 8010cd2:	f3bf 8f6f 	isb	sy
 8010cd6:	f3bf 8f4f 	dsb	sy
 8010cda:	60fb      	str	r3, [r7, #12]
 8010cdc:	e7fe      	b.n	8010cdc <xPortStartScheduler+0x94>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010cde:	4b17      	ldr	r3, [pc, #92]	; (8010d3c <xPortStartScheduler+0xf4>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	021b      	lsls	r3, r3, #8
 8010ce4:	4a15      	ldr	r2, [pc, #84]	; (8010d3c <xPortStartScheduler+0xf4>)
 8010ce6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010ce8:	4b14      	ldr	r3, [pc, #80]	; (8010d3c <xPortStartScheduler+0xf4>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010cf0:	4a12      	ldr	r2, [pc, #72]	; (8010d3c <xPortStartScheduler+0xf4>)
 8010cf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	b2da      	uxtb	r2, r3
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010cfc:	4b10      	ldr	r3, [pc, #64]	; (8010d40 <xPortStartScheduler+0xf8>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a0f      	ldr	r2, [pc, #60]	; (8010d40 <xPortStartScheduler+0xf8>)
 8010d02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010d06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d08:	4b0d      	ldr	r3, [pc, #52]	; (8010d40 <xPortStartScheduler+0xf8>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4a0c      	ldr	r2, [pc, #48]	; (8010d40 <xPortStartScheduler+0xf8>)
 8010d0e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010d12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d14:	f000 f8b8 	bl	8010e88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d18:	4b0a      	ldr	r3, [pc, #40]	; (8010d44 <xPortStartScheduler+0xfc>)
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d1e:	f7ff ff83 	bl	8010c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010d22:	f001 f921 	bl	8011f68 <vTaskSwitchContext>
	prvTaskExitError();
 8010d26:	f7ff ff3f 	bl	8010ba8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010d2a:	2300      	movs	r3, #0
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3718      	adds	r7, #24
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	e000e400 	.word	0xe000e400
 8010d38:	20000219 	.word	0x20000219
 8010d3c:	2000021c 	.word	0x2000021c
 8010d40:	e000ed20 	.word	0xe000ed20
 8010d44:	20000020 	.word	0x20000020

08010d48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b083      	sub	sp, #12
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d52:	f383 8811 	msr	BASEPRI, r3
 8010d56:	f3bf 8f6f 	isb	sy
 8010d5a:	f3bf 8f4f 	dsb	sy
 8010d5e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010d60:	4b0e      	ldr	r3, [pc, #56]	; (8010d9c <vPortEnterCritical+0x54>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	3301      	adds	r3, #1
 8010d66:	4a0d      	ldr	r2, [pc, #52]	; (8010d9c <vPortEnterCritical+0x54>)
 8010d68:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010d6a:	4b0c      	ldr	r3, [pc, #48]	; (8010d9c <vPortEnterCritical+0x54>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	d10e      	bne.n	8010d90 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010d72:	4b0b      	ldr	r3, [pc, #44]	; (8010da0 <vPortEnterCritical+0x58>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d009      	beq.n	8010d90 <vPortEnterCritical+0x48>
 8010d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d80:	f383 8811 	msr	BASEPRI, r3
 8010d84:	f3bf 8f6f 	isb	sy
 8010d88:	f3bf 8f4f 	dsb	sy
 8010d8c:	603b      	str	r3, [r7, #0]
 8010d8e:	e7fe      	b.n	8010d8e <vPortEnterCritical+0x46>
	}
}
 8010d90:	bf00      	nop
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr
 8010d9c:	20000020 	.word	0x20000020
 8010da0:	e000ed04 	.word	0xe000ed04

08010da4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010daa:	4b11      	ldr	r3, [pc, #68]	; (8010df0 <vPortExitCritical+0x4c>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d109      	bne.n	8010dc6 <vPortExitCritical+0x22>
 8010db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db6:	f383 8811 	msr	BASEPRI, r3
 8010dba:	f3bf 8f6f 	isb	sy
 8010dbe:	f3bf 8f4f 	dsb	sy
 8010dc2:	607b      	str	r3, [r7, #4]
 8010dc4:	e7fe      	b.n	8010dc4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8010dc6:	4b0a      	ldr	r3, [pc, #40]	; (8010df0 <vPortExitCritical+0x4c>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	3b01      	subs	r3, #1
 8010dcc:	4a08      	ldr	r2, [pc, #32]	; (8010df0 <vPortExitCritical+0x4c>)
 8010dce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010dd0:	4b07      	ldr	r3, [pc, #28]	; (8010df0 <vPortExitCritical+0x4c>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d104      	bne.n	8010de2 <vPortExitCritical+0x3e>
 8010dd8:	2300      	movs	r3, #0
 8010dda:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010de2:	bf00      	nop
 8010de4:	370c      	adds	r7, #12
 8010de6:	46bd      	mov	sp, r7
 8010de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop
 8010df0:	20000020 	.word	0x20000020
	...

08010e00 <xPortPendSVHandler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler( void )
{
	__asm volatile
 8010e00:	f3ef 8009 	mrs	r0, PSP
 8010e04:	f3bf 8f6f 	isb	sy
 8010e08:	4b0d      	ldr	r3, [pc, #52]	; (8010e40 <pxCurrentTCBConst>)
 8010e0a:	681a      	ldr	r2, [r3, #0]
 8010e0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010e10:	6010      	str	r0, [r2, #0]
 8010e12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8010e16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010e1a:	f380 8811 	msr	BASEPRI, r0
 8010e1e:	f001 f8a3 	bl	8011f68 <vTaskSwitchContext>
 8010e22:	f04f 0000 	mov.w	r0, #0
 8010e26:	f380 8811 	msr	BASEPRI, r0
 8010e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010e2e:	6819      	ldr	r1, [r3, #0]
 8010e30:	6808      	ldr	r0, [r1, #0]
 8010e32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010e36:	f380 8809 	msr	PSP, r0
 8010e3a:	f3bf 8f6f 	isb	sy
 8010e3e:	4770      	bx	lr

08010e40 <pxCurrentTCBConst>:
 8010e40:	20000220 	.word	0x20000220
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010e44:	bf00      	nop
 8010e46:	bf00      	nop

08010e48 <xPortSysTickHandler>:

/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e52:	f383 8811 	msr	BASEPRI, r3
 8010e56:	f3bf 8f6f 	isb	sy
 8010e5a:	f3bf 8f4f 	dsb	sy
 8010e5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010e60:	f000 ffc6 	bl	8011df0 <xTaskIncrementTick>
 8010e64:	4603      	mov	r3, r0
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d003      	beq.n	8010e72 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010e6a:	4b06      	ldr	r3, [pc, #24]	; (8010e84 <xPortSysTickHandler+0x3c>)
 8010e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e70:	601a      	str	r2, [r3, #0]
 8010e72:	2300      	movs	r3, #0
 8010e74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8010e7c:	bf00      	nop
 8010e7e:	3708      	adds	r7, #8
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}
 8010e84:	e000ed04 	.word	0xe000ed04

08010e88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010e88:	b480      	push	{r7}
 8010e8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010e8c:	4b08      	ldr	r3, [pc, #32]	; (8010eb0 <vPortSetupTimerInterrupt+0x28>)
 8010e8e:	2200      	movs	r2, #0
 8010e90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010e92:	4b08      	ldr	r3, [pc, #32]	; (8010eb4 <vPortSetupTimerInterrupt+0x2c>)
 8010e94:	2200      	movs	r2, #0
 8010e96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e98:	4b07      	ldr	r3, [pc, #28]	; (8010eb8 <vPortSetupTimerInterrupt+0x30>)
 8010e9a:	4a08      	ldr	r2, [pc, #32]	; (8010ebc <vPortSetupTimerInterrupt+0x34>)
 8010e9c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010e9e:	4b04      	ldr	r3, [pc, #16]	; (8010eb0 <vPortSetupTimerInterrupt+0x28>)
 8010ea0:	2207      	movs	r2, #7
 8010ea2:	601a      	str	r2, [r3, #0]
}
 8010ea4:	bf00      	nop
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eac:	4770      	bx	lr
 8010eae:	bf00      	nop
 8010eb0:	e000e010 	.word	0xe000e010
 8010eb4:	e000e018 	.word	0xe000e018
 8010eb8:	e000e014 	.word	0xe000e014
 8010ebc:	0001193f 	.word	0x0001193f

08010ec0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b085      	sub	sp, #20
 8010ec4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010ec6:	f3ef 8305 	mrs	r3, IPSR
 8010eca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	2b0f      	cmp	r3, #15
 8010ed0:	d913      	bls.n	8010efa <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010ed2:	4a16      	ldr	r2, [pc, #88]	; (8010f2c <vPortValidateInterruptPriority+0x6c>)
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	4413      	add	r3, r2
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010edc:	4b14      	ldr	r3, [pc, #80]	; (8010f30 <vPortValidateInterruptPriority+0x70>)
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	7afa      	ldrb	r2, [r7, #11]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d209      	bcs.n	8010efa <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8010ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eea:	f383 8811 	msr	BASEPRI, r3
 8010eee:	f3bf 8f6f 	isb	sy
 8010ef2:	f3bf 8f4f 	dsb	sy
 8010ef6:	607b      	str	r3, [r7, #4]
 8010ef8:	e7fe      	b.n	8010ef8 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010efa:	4b0e      	ldr	r3, [pc, #56]	; (8010f34 <vPortValidateInterruptPriority+0x74>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010f02:	4b0d      	ldr	r3, [pc, #52]	; (8010f38 <vPortValidateInterruptPriority+0x78>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d909      	bls.n	8010f1e <vPortValidateInterruptPriority+0x5e>
 8010f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f0e:	f383 8811 	msr	BASEPRI, r3
 8010f12:	f3bf 8f6f 	isb	sy
 8010f16:	f3bf 8f4f 	dsb	sy
 8010f1a:	603b      	str	r3, [r7, #0]
 8010f1c:	e7fe      	b.n	8010f1c <vPortValidateInterruptPriority+0x5c>
	}
 8010f1e:	bf00      	nop
 8010f20:	3714      	adds	r7, #20
 8010f22:	46bd      	mov	sp, r7
 8010f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop
 8010f2c:	e000e3f0 	.word	0xe000e3f0
 8010f30:	20000219 	.word	0x20000219
 8010f34:	e000ed0c 	.word	0xe000ed0c
 8010f38:	2000021c 	.word	0x2000021c

08010f3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b084      	sub	sp, #16
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d109      	bne.n	8010f64 <xQueueGenericReset+0x28>
 8010f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f54:	f383 8811 	msr	BASEPRI, r3
 8010f58:	f3bf 8f6f 	isb	sy
 8010f5c:	f3bf 8f4f 	dsb	sy
 8010f60:	60bb      	str	r3, [r7, #8]
 8010f62:	e7fe      	b.n	8010f62 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8010f64:	f7ff fef0 	bl	8010d48 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681a      	ldr	r2, [r3, #0]
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f70:	68f9      	ldr	r1, [r7, #12]
 8010f72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010f74:	fb01 f303 	mul.w	r3, r1, r3
 8010f78:	441a      	add	r2, r3
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2200      	movs	r2, #0
 8010f82:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	681a      	ldr	r2, [r3, #0]
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f94:	3b01      	subs	r3, #1
 8010f96:	68f9      	ldr	r1, [r7, #12]
 8010f98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010f9a:	fb01 f303 	mul.w	r3, r1, r3
 8010f9e:	441a      	add	r2, r3
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	22ff      	movs	r2, #255	; 0xff
 8010fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	22ff      	movs	r2, #255	; 0xff
 8010fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d114      	bne.n	8010fe4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	691b      	ldr	r3, [r3, #16]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d01a      	beq.n	8010ff8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	3310      	adds	r3, #16
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f001 f872 	bl	80120b0 <xTaskRemoveFromEventList>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d012      	beq.n	8010ff8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010fd2:	4b0d      	ldr	r3, [pc, #52]	; (8011008 <xQueueGenericReset+0xcc>)
 8010fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fd8:	601a      	str	r2, [r3, #0]
 8010fda:	f3bf 8f4f 	dsb	sy
 8010fde:	f3bf 8f6f 	isb	sy
 8010fe2:	e009      	b.n	8010ff8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	3310      	adds	r3, #16
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7ff fcfb 	bl	80109e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	3324      	adds	r3, #36	; 0x24
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7ff fcf6 	bl	80109e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010ff8:	f7ff fed4 	bl	8010da4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010ffc:	2301      	movs	r3, #1
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3710      	adds	r7, #16
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}
 8011006:	bf00      	nop
 8011008:	e000ed04 	.word	0xe000ed04

0801100c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801100c:	b580      	push	{r7, lr}
 801100e:	b08e      	sub	sp, #56	; 0x38
 8011010:	af02      	add	r7, sp, #8
 8011012:	60f8      	str	r0, [r7, #12]
 8011014:	60b9      	str	r1, [r7, #8]
 8011016:	607a      	str	r2, [r7, #4]
 8011018:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d109      	bne.n	8011034 <xQueueGenericCreateStatic+0x28>
 8011020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011024:	f383 8811 	msr	BASEPRI, r3
 8011028:	f3bf 8f6f 	isb	sy
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	62bb      	str	r3, [r7, #40]	; 0x28
 8011032:	e7fe      	b.n	8011032 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d109      	bne.n	801104e <xQueueGenericCreateStatic+0x42>
 801103a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801103e:	f383 8811 	msr	BASEPRI, r3
 8011042:	f3bf 8f6f 	isb	sy
 8011046:	f3bf 8f4f 	dsb	sy
 801104a:	627b      	str	r3, [r7, #36]	; 0x24
 801104c:	e7fe      	b.n	801104c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d002      	beq.n	801105a <xQueueGenericCreateStatic+0x4e>
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d001      	beq.n	801105e <xQueueGenericCreateStatic+0x52>
 801105a:	2301      	movs	r3, #1
 801105c:	e000      	b.n	8011060 <xQueueGenericCreateStatic+0x54>
 801105e:	2300      	movs	r3, #0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d109      	bne.n	8011078 <xQueueGenericCreateStatic+0x6c>
 8011064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011068:	f383 8811 	msr	BASEPRI, r3
 801106c:	f3bf 8f6f 	isb	sy
 8011070:	f3bf 8f4f 	dsb	sy
 8011074:	623b      	str	r3, [r7, #32]
 8011076:	e7fe      	b.n	8011076 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d102      	bne.n	8011084 <xQueueGenericCreateStatic+0x78>
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d101      	bne.n	8011088 <xQueueGenericCreateStatic+0x7c>
 8011084:	2301      	movs	r3, #1
 8011086:	e000      	b.n	801108a <xQueueGenericCreateStatic+0x7e>
 8011088:	2300      	movs	r3, #0
 801108a:	2b00      	cmp	r3, #0
 801108c:	d109      	bne.n	80110a2 <xQueueGenericCreateStatic+0x96>
 801108e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011092:	f383 8811 	msr	BASEPRI, r3
 8011096:	f3bf 8f6f 	isb	sy
 801109a:	f3bf 8f4f 	dsb	sy
 801109e:	61fb      	str	r3, [r7, #28]
 80110a0:	e7fe      	b.n	80110a0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80110a2:	2348      	movs	r3, #72	; 0x48
 80110a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	2b48      	cmp	r3, #72	; 0x48
 80110aa:	d009      	beq.n	80110c0 <xQueueGenericCreateStatic+0xb4>
 80110ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b0:	f383 8811 	msr	BASEPRI, r3
 80110b4:	f3bf 8f6f 	isb	sy
 80110b8:	f3bf 8f4f 	dsb	sy
 80110bc:	61bb      	str	r3, [r7, #24]
 80110be:	e7fe      	b.n	80110be <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80110c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d009      	beq.n	80110de <xQueueGenericCreateStatic+0xd2>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80110ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80110ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	4613      	mov	r3, r2
 80110d4:	687a      	ldr	r2, [r7, #4]
 80110d6:	68b9      	ldr	r1, [r7, #8]
 80110d8:	68f8      	ldr	r0, [r7, #12]
 80110da:	f000 f805 	bl	80110e8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80110de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3730      	adds	r7, #48	; 0x30
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}

080110e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b084      	sub	sp, #16
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
 80110f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d103      	bne.n	8011104 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80110fc:	69bb      	ldr	r3, [r7, #24]
 80110fe:	69ba      	ldr	r2, [r7, #24]
 8011100:	601a      	str	r2, [r3, #0]
 8011102:	e002      	b.n	801110a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801110a:	69bb      	ldr	r3, [r7, #24]
 801110c:	68fa      	ldr	r2, [r7, #12]
 801110e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	68ba      	ldr	r2, [r7, #8]
 8011114:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011116:	2101      	movs	r1, #1
 8011118:	69b8      	ldr	r0, [r7, #24]
 801111a:	f7ff ff0f 	bl	8010f3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801111e:	bf00      	nop
 8011120:	3710      	adds	r7, #16
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}

08011126 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011126:	b580      	push	{r7, lr}
 8011128:	b082      	sub	sp, #8
 801112a:	af00      	add	r7, sp, #0
 801112c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d00e      	beq.n	8011152 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2200      	movs	r2, #0
 8011138:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	2200      	movs	r2, #0
 801113e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2200      	movs	r2, #0
 8011144:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011146:	2300      	movs	r3, #0
 8011148:	2200      	movs	r2, #0
 801114a:	2100      	movs	r1, #0
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f000 f81f 	bl	8011190 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011152:	bf00      	nop
 8011154:	3708      	adds	r7, #8
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}

0801115a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801115a:	b580      	push	{r7, lr}
 801115c:	b088      	sub	sp, #32
 801115e:	af02      	add	r7, sp, #8
 8011160:	4603      	mov	r3, r0
 8011162:	6039      	str	r1, [r7, #0]
 8011164:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011166:	2301      	movs	r3, #1
 8011168:	617b      	str	r3, [r7, #20]
 801116a:	2300      	movs	r3, #0
 801116c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801116e:	79fb      	ldrb	r3, [r7, #7]
 8011170:	9300      	str	r3, [sp, #0]
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	2200      	movs	r2, #0
 8011176:	6939      	ldr	r1, [r7, #16]
 8011178:	6978      	ldr	r0, [r7, #20]
 801117a:	f7ff ff47 	bl	801100c <xQueueGenericCreateStatic>
 801117e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8011180:	68f8      	ldr	r0, [r7, #12]
 8011182:	f7ff ffd0 	bl	8011126 <prvInitialiseMutex>

		return pxNewQueue;
 8011186:	68fb      	ldr	r3, [r7, #12]
	}
 8011188:	4618      	mov	r0, r3
 801118a:	3718      	adds	r7, #24
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}

08011190 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b08e      	sub	sp, #56	; 0x38
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	607a      	str	r2, [r7, #4]
 801119c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801119e:	2300      	movs	r3, #0
 80111a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80111a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d109      	bne.n	80111c0 <xQueueGenericSend+0x30>
 80111ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b0:	f383 8811 	msr	BASEPRI, r3
 80111b4:	f3bf 8f6f 	isb	sy
 80111b8:	f3bf 8f4f 	dsb	sy
 80111bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80111be:	e7fe      	b.n	80111be <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d103      	bne.n	80111ce <xQueueGenericSend+0x3e>
 80111c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d101      	bne.n	80111d2 <xQueueGenericSend+0x42>
 80111ce:	2301      	movs	r3, #1
 80111d0:	e000      	b.n	80111d4 <xQueueGenericSend+0x44>
 80111d2:	2300      	movs	r3, #0
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d109      	bne.n	80111ec <xQueueGenericSend+0x5c>
 80111d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111dc:	f383 8811 	msr	BASEPRI, r3
 80111e0:	f3bf 8f6f 	isb	sy
 80111e4:	f3bf 8f4f 	dsb	sy
 80111e8:	627b      	str	r3, [r7, #36]	; 0x24
 80111ea:	e7fe      	b.n	80111ea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	2b02      	cmp	r3, #2
 80111f0:	d103      	bne.n	80111fa <xQueueGenericSend+0x6a>
 80111f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111f6:	2b01      	cmp	r3, #1
 80111f8:	d101      	bne.n	80111fe <xQueueGenericSend+0x6e>
 80111fa:	2301      	movs	r3, #1
 80111fc:	e000      	b.n	8011200 <xQueueGenericSend+0x70>
 80111fe:	2300      	movs	r3, #0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d109      	bne.n	8011218 <xQueueGenericSend+0x88>
 8011204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011208:	f383 8811 	msr	BASEPRI, r3
 801120c:	f3bf 8f6f 	isb	sy
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	623b      	str	r3, [r7, #32]
 8011216:	e7fe      	b.n	8011216 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011218:	f001 f8a0 	bl	801235c <xTaskGetSchedulerState>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d102      	bne.n	8011228 <xQueueGenericSend+0x98>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d101      	bne.n	801122c <xQueueGenericSend+0x9c>
 8011228:	2301      	movs	r3, #1
 801122a:	e000      	b.n	801122e <xQueueGenericSend+0x9e>
 801122c:	2300      	movs	r3, #0
 801122e:	2b00      	cmp	r3, #0
 8011230:	d109      	bne.n	8011246 <xQueueGenericSend+0xb6>
 8011232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011236:	f383 8811 	msr	BASEPRI, r3
 801123a:	f3bf 8f6f 	isb	sy
 801123e:	f3bf 8f4f 	dsb	sy
 8011242:	61fb      	str	r3, [r7, #28]
 8011244:	e7fe      	b.n	8011244 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011246:	f7ff fd7f 	bl	8010d48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801124e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011252:	429a      	cmp	r2, r3
 8011254:	d302      	bcc.n	801125c <xQueueGenericSend+0xcc>
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	2b02      	cmp	r3, #2
 801125a:	d129      	bne.n	80112b0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801125c:	683a      	ldr	r2, [r7, #0]
 801125e:	68b9      	ldr	r1, [r7, #8]
 8011260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011262:	f000 fa39 	bl	80116d8 <prvCopyDataToQueue>
 8011266:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801126c:	2b00      	cmp	r3, #0
 801126e:	d010      	beq.n	8011292 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011272:	3324      	adds	r3, #36	; 0x24
 8011274:	4618      	mov	r0, r3
 8011276:	f000 ff1b 	bl	80120b0 <xTaskRemoveFromEventList>
 801127a:	4603      	mov	r3, r0
 801127c:	2b00      	cmp	r3, #0
 801127e:	d013      	beq.n	80112a8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011280:	4b3f      	ldr	r3, [pc, #252]	; (8011380 <xQueueGenericSend+0x1f0>)
 8011282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011286:	601a      	str	r2, [r3, #0]
 8011288:	f3bf 8f4f 	dsb	sy
 801128c:	f3bf 8f6f 	isb	sy
 8011290:	e00a      	b.n	80112a8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011294:	2b00      	cmp	r3, #0
 8011296:	d007      	beq.n	80112a8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011298:	4b39      	ldr	r3, [pc, #228]	; (8011380 <xQueueGenericSend+0x1f0>)
 801129a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801129e:	601a      	str	r2, [r3, #0]
 80112a0:	f3bf 8f4f 	dsb	sy
 80112a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80112a8:	f7ff fd7c 	bl	8010da4 <vPortExitCritical>
				return pdPASS;
 80112ac:	2301      	movs	r3, #1
 80112ae:	e063      	b.n	8011378 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d103      	bne.n	80112be <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80112b6:	f7ff fd75 	bl	8010da4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80112ba:	2300      	movs	r3, #0
 80112bc:	e05c      	b.n	8011378 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80112be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d106      	bne.n	80112d2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80112c4:	f107 0314 	add.w	r3, r7, #20
 80112c8:	4618      	mov	r0, r3
 80112ca:	f000 ff53 	bl	8012174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80112ce:	2301      	movs	r3, #1
 80112d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80112d2:	f7ff fd67 	bl	8010da4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80112d6:	f000 fce1 	bl	8011c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80112da:	f7ff fd35 	bl	8010d48 <vPortEnterCritical>
 80112de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80112e4:	b25b      	sxtb	r3, r3
 80112e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ea:	d103      	bne.n	80112f4 <xQueueGenericSend+0x164>
 80112ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ee:	2200      	movs	r2, #0
 80112f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80112f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112fa:	b25b      	sxtb	r3, r3
 80112fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011300:	d103      	bne.n	801130a <xQueueGenericSend+0x17a>
 8011302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011304:	2200      	movs	r2, #0
 8011306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801130a:	f7ff fd4b 	bl	8010da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801130e:	1d3a      	adds	r2, r7, #4
 8011310:	f107 0314 	add.w	r3, r7, #20
 8011314:	4611      	mov	r1, r2
 8011316:	4618      	mov	r0, r3
 8011318:	f000 ff42 	bl	80121a0 <xTaskCheckForTimeOut>
 801131c:	4603      	mov	r3, r0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d124      	bne.n	801136c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011324:	f000 faaa 	bl	801187c <prvIsQueueFull>
 8011328:	4603      	mov	r3, r0
 801132a:	2b00      	cmp	r3, #0
 801132c:	d018      	beq.n	8011360 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801132e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011330:	3310      	adds	r3, #16
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	4611      	mov	r1, r2
 8011336:	4618      	mov	r0, r3
 8011338:	f000 fe96 	bl	8012068 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801133c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801133e:	f000 fa35 	bl	80117ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011342:	f000 fcb9 	bl	8011cb8 <xTaskResumeAll>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	f47f af7c 	bne.w	8011246 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 801134e:	4b0c      	ldr	r3, [pc, #48]	; (8011380 <xQueueGenericSend+0x1f0>)
 8011350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011354:	601a      	str	r2, [r3, #0]
 8011356:	f3bf 8f4f 	dsb	sy
 801135a:	f3bf 8f6f 	isb	sy
 801135e:	e772      	b.n	8011246 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011362:	f000 fa23 	bl	80117ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011366:	f000 fca7 	bl	8011cb8 <xTaskResumeAll>
 801136a:	e76c      	b.n	8011246 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801136c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801136e:	f000 fa1d 	bl	80117ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011372:	f000 fca1 	bl	8011cb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011376:	2300      	movs	r3, #0
		}
	}
}
 8011378:	4618      	mov	r0, r3
 801137a:	3738      	adds	r7, #56	; 0x38
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}
 8011380:	e000ed04 	.word	0xe000ed04

08011384 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b08e      	sub	sp, #56	; 0x38
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011394:	2b00      	cmp	r3, #0
 8011396:	d109      	bne.n	80113ac <xQueueGiveFromISR+0x28>
 8011398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801139c:	f383 8811 	msr	BASEPRI, r3
 80113a0:	f3bf 8f6f 	isb	sy
 80113a4:	f3bf 8f4f 	dsb	sy
 80113a8:	623b      	str	r3, [r7, #32]
 80113aa:	e7fe      	b.n	80113aa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80113ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d009      	beq.n	80113c8 <xQueueGiveFromISR+0x44>
 80113b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b8:	f383 8811 	msr	BASEPRI, r3
 80113bc:	f3bf 8f6f 	isb	sy
 80113c0:	f3bf 8f4f 	dsb	sy
 80113c4:	61fb      	str	r3, [r7, #28]
 80113c6:	e7fe      	b.n	80113c6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80113c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d103      	bne.n	80113d8 <xQueueGiveFromISR+0x54>
 80113d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d101      	bne.n	80113dc <xQueueGiveFromISR+0x58>
 80113d8:	2301      	movs	r3, #1
 80113da:	e000      	b.n	80113de <xQueueGiveFromISR+0x5a>
 80113dc:	2300      	movs	r3, #0
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d109      	bne.n	80113f6 <xQueueGiveFromISR+0x72>
 80113e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e6:	f383 8811 	msr	BASEPRI, r3
 80113ea:	f3bf 8f6f 	isb	sy
 80113ee:	f3bf 8f4f 	dsb	sy
 80113f2:	61bb      	str	r3, [r7, #24]
 80113f4:	e7fe      	b.n	80113f4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113f6:	f7ff fd63 	bl	8010ec0 <vPortValidateInterruptPriority>
	__asm volatile
 80113fa:	f3ef 8211 	mrs	r2, BASEPRI
 80113fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011402:	f383 8811 	msr	BASEPRI, r3
 8011406:	f3bf 8f6f 	isb	sy
 801140a:	f3bf 8f4f 	dsb	sy
 801140e:	617a      	str	r2, [r7, #20]
 8011410:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011412:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011414:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801141a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801141c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801141e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011422:	429a      	cmp	r2, r3
 8011424:	d22b      	bcs.n	801147e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801142c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011432:	1c5a      	adds	r2, r3, #1
 8011434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011436:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011438:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801143c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011440:	d112      	bne.n	8011468 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011446:	2b00      	cmp	r3, #0
 8011448:	d016      	beq.n	8011478 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801144a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144c:	3324      	adds	r3, #36	; 0x24
 801144e:	4618      	mov	r0, r3
 8011450:	f000 fe2e 	bl	80120b0 <xTaskRemoveFromEventList>
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	d00e      	beq.n	8011478 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d00b      	beq.n	8011478 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	2201      	movs	r2, #1
 8011464:	601a      	str	r2, [r3, #0]
 8011466:	e007      	b.n	8011478 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801146c:	3301      	adds	r3, #1
 801146e:	b2db      	uxtb	r3, r3
 8011470:	b25a      	sxtb	r2, r3
 8011472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011478:	2301      	movs	r3, #1
 801147a:	637b      	str	r3, [r7, #52]	; 0x34
 801147c:	e001      	b.n	8011482 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801147e:	2300      	movs	r3, #0
 8011480:	637b      	str	r3, [r7, #52]	; 0x34
 8011482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011484:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801148c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801148e:	4618      	mov	r0, r3
 8011490:	3738      	adds	r7, #56	; 0x38
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}
	...

08011498 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b08e      	sub	sp, #56	; 0x38
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80114a2:	2300      	movs	r3, #0
 80114a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80114aa:	2300      	movs	r3, #0
 80114ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80114ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d109      	bne.n	80114c8 <xQueueSemaphoreTake+0x30>
	__asm volatile
 80114b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b8:	f383 8811 	msr	BASEPRI, r3
 80114bc:	f3bf 8f6f 	isb	sy
 80114c0:	f3bf 8f4f 	dsb	sy
 80114c4:	623b      	str	r3, [r7, #32]
 80114c6:	e7fe      	b.n	80114c6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80114c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d009      	beq.n	80114e4 <xQueueSemaphoreTake+0x4c>
 80114d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d4:	f383 8811 	msr	BASEPRI, r3
 80114d8:	f3bf 8f6f 	isb	sy
 80114dc:	f3bf 8f4f 	dsb	sy
 80114e0:	61fb      	str	r3, [r7, #28]
 80114e2:	e7fe      	b.n	80114e2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114e4:	f000 ff3a 	bl	801235c <xTaskGetSchedulerState>
 80114e8:	4603      	mov	r3, r0
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d102      	bne.n	80114f4 <xQueueSemaphoreTake+0x5c>
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d101      	bne.n	80114f8 <xQueueSemaphoreTake+0x60>
 80114f4:	2301      	movs	r3, #1
 80114f6:	e000      	b.n	80114fa <xQueueSemaphoreTake+0x62>
 80114f8:	2300      	movs	r3, #0
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d109      	bne.n	8011512 <xQueueSemaphoreTake+0x7a>
 80114fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011502:	f383 8811 	msr	BASEPRI, r3
 8011506:	f3bf 8f6f 	isb	sy
 801150a:	f3bf 8f4f 	dsb	sy
 801150e:	61bb      	str	r3, [r7, #24]
 8011510:	e7fe      	b.n	8011510 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011512:	f7ff fc19 	bl	8010d48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801151a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801151e:	2b00      	cmp	r3, #0
 8011520:	d024      	beq.n	801156c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011524:	1e5a      	subs	r2, r3, #1
 8011526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011528:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d104      	bne.n	801153c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011532:	f001 f8d9 	bl	80126e8 <pvTaskIncrementMutexHeldCount>
 8011536:	4602      	mov	r2, r0
 8011538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153e:	691b      	ldr	r3, [r3, #16]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d00f      	beq.n	8011564 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011546:	3310      	adds	r3, #16
 8011548:	4618      	mov	r0, r3
 801154a:	f000 fdb1 	bl	80120b0 <xTaskRemoveFromEventList>
 801154e:	4603      	mov	r3, r0
 8011550:	2b00      	cmp	r3, #0
 8011552:	d007      	beq.n	8011564 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011554:	4b53      	ldr	r3, [pc, #332]	; (80116a4 <xQueueSemaphoreTake+0x20c>)
 8011556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801155a:	601a      	str	r2, [r3, #0]
 801155c:	f3bf 8f4f 	dsb	sy
 8011560:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011564:	f7ff fc1e 	bl	8010da4 <vPortExitCritical>
				return pdPASS;
 8011568:	2301      	movs	r3, #1
 801156a:	e096      	b.n	801169a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d110      	bne.n	8011594 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011574:	2b00      	cmp	r3, #0
 8011576:	d009      	beq.n	801158c <xQueueSemaphoreTake+0xf4>
 8011578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801157c:	f383 8811 	msr	BASEPRI, r3
 8011580:	f3bf 8f6f 	isb	sy
 8011584:	f3bf 8f4f 	dsb	sy
 8011588:	617b      	str	r3, [r7, #20]
 801158a:	e7fe      	b.n	801158a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801158c:	f7ff fc0a 	bl	8010da4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011590:	2300      	movs	r3, #0
 8011592:	e082      	b.n	801169a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011596:	2b00      	cmp	r3, #0
 8011598:	d106      	bne.n	80115a8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801159a:	f107 030c 	add.w	r3, r7, #12
 801159e:	4618      	mov	r0, r3
 80115a0:	f000 fde8 	bl	8012174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80115a4:	2301      	movs	r3, #1
 80115a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80115a8:	f7ff fbfc 	bl	8010da4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80115ac:	f000 fb76 	bl	8011c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80115b0:	f7ff fbca 	bl	8010d48 <vPortEnterCritical>
 80115b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115ba:	b25b      	sxtb	r3, r3
 80115bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115c0:	d103      	bne.n	80115ca <xQueueSemaphoreTake+0x132>
 80115c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c4:	2200      	movs	r2, #0
 80115c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115d0:	b25b      	sxtb	r3, r3
 80115d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115d6:	d103      	bne.n	80115e0 <xQueueSemaphoreTake+0x148>
 80115d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115da:	2200      	movs	r2, #0
 80115dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115e0:	f7ff fbe0 	bl	8010da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115e4:	463a      	mov	r2, r7
 80115e6:	f107 030c 	add.w	r3, r7, #12
 80115ea:	4611      	mov	r1, r2
 80115ec:	4618      	mov	r0, r3
 80115ee:	f000 fdd7 	bl	80121a0 <xTaskCheckForTimeOut>
 80115f2:	4603      	mov	r3, r0
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d132      	bne.n	801165e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80115fa:	f000 f929 	bl	8011850 <prvIsQueueEmpty>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d026      	beq.n	8011652 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d109      	bne.n	8011620 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 801160c:	f7ff fb9c 	bl	8010d48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	4618      	mov	r0, r3
 8011616:	f000 febf 	bl	8012398 <xTaskPriorityInherit>
 801161a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801161c:	f7ff fbc2 	bl	8010da4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011622:	3324      	adds	r3, #36	; 0x24
 8011624:	683a      	ldr	r2, [r7, #0]
 8011626:	4611      	mov	r1, r2
 8011628:	4618      	mov	r0, r3
 801162a:	f000 fd1d 	bl	8012068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801162e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011630:	f000 f8bc 	bl	80117ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011634:	f000 fb40 	bl	8011cb8 <xTaskResumeAll>
 8011638:	4603      	mov	r3, r0
 801163a:	2b00      	cmp	r3, #0
 801163c:	f47f af69 	bne.w	8011512 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011640:	4b18      	ldr	r3, [pc, #96]	; (80116a4 <xQueueSemaphoreTake+0x20c>)
 8011642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011646:	601a      	str	r2, [r3, #0]
 8011648:	f3bf 8f4f 	dsb	sy
 801164c:	f3bf 8f6f 	isb	sy
 8011650:	e75f      	b.n	8011512 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011654:	f000 f8aa 	bl	80117ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011658:	f000 fb2e 	bl	8011cb8 <xTaskResumeAll>
 801165c:	e759      	b.n	8011512 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801165e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011660:	f000 f8a4 	bl	80117ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011664:	f000 fb28 	bl	8011cb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801166a:	f000 f8f1 	bl	8011850 <prvIsQueueEmpty>
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	f43f af4e 	beq.w	8011512 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00d      	beq.n	8011698 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 801167c:	f7ff fb64 	bl	8010d48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011682:	f000 f811 	bl	80116a8 <prvGetDisinheritPriorityAfterTimeout>
 8011686:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8011688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801168a:	685b      	ldr	r3, [r3, #4]
 801168c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801168e:	4618      	mov	r0, r3
 8011690:	f000 ff8c 	bl	80125ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011694:	f7ff fb86 	bl	8010da4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011698:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801169a:	4618      	mov	r0, r3
 801169c:	3738      	adds	r7, #56	; 0x38
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	e000ed04 	.word	0xe000ed04

080116a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80116a8:	b480      	push	{r7}
 80116aa:	b085      	sub	sp, #20
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d006      	beq.n	80116c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f1c3 0307 	rsb	r3, r3, #7
 80116c2:	60fb      	str	r3, [r7, #12]
 80116c4:	e001      	b.n	80116ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80116c6:	2300      	movs	r3, #0
 80116c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80116ca:	68fb      	ldr	r3, [r7, #12]
	}
 80116cc:	4618      	mov	r0, r3
 80116ce:	3714      	adds	r7, #20
 80116d0:	46bd      	mov	sp, r7
 80116d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d6:	4770      	bx	lr

080116d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b086      	sub	sp, #24
 80116dc:	af00      	add	r7, sp, #0
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80116e4:	2300      	movs	r3, #0
 80116e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d10d      	bne.n	8011712 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d14d      	bne.n	801179a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	4618      	mov	r0, r3
 8011704:	f000 fece 	bl	80124a4 <xTaskPriorityDisinherit>
 8011708:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2200      	movs	r2, #0
 801170e:	605a      	str	r2, [r3, #4]
 8011710:	e043      	b.n	801179a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d119      	bne.n	801174c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	6898      	ldr	r0, [r3, #8]
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011720:	461a      	mov	r2, r3
 8011722:	68b9      	ldr	r1, [r7, #8]
 8011724:	f001 f896 	bl	8012854 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	689a      	ldr	r2, [r3, #8]
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011730:	441a      	add	r2, r3
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	689a      	ldr	r2, [r3, #8]
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	429a      	cmp	r2, r3
 8011740:	d32b      	bcc.n	801179a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	681a      	ldr	r2, [r3, #0]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	609a      	str	r2, [r3, #8]
 801174a:	e026      	b.n	801179a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	68d8      	ldr	r0, [r3, #12]
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011754:	461a      	mov	r2, r3
 8011756:	68b9      	ldr	r1, [r7, #8]
 8011758:	f001 f87c 	bl	8012854 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	68da      	ldr	r2, [r3, #12]
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011764:	425b      	negs	r3, r3
 8011766:	441a      	add	r2, r3
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	68da      	ldr	r2, [r3, #12]
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	429a      	cmp	r2, r3
 8011776:	d207      	bcs.n	8011788 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	685a      	ldr	r2, [r3, #4]
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011780:	425b      	negs	r3, r3
 8011782:	441a      	add	r2, r3
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2b02      	cmp	r3, #2
 801178c:	d105      	bne.n	801179a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d002      	beq.n	801179a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	3b01      	subs	r3, #1
 8011798:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	1c5a      	adds	r2, r3, #1
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80117a2:	697b      	ldr	r3, [r7, #20]
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3718      	adds	r7, #24
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b084      	sub	sp, #16
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80117b4:	f7ff fac8 	bl	8010d48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80117c0:	e011      	b.n	80117e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d012      	beq.n	80117f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	3324      	adds	r3, #36	; 0x24
 80117ce:	4618      	mov	r0, r3
 80117d0:	f000 fc6e 	bl	80120b0 <xTaskRemoveFromEventList>
 80117d4:	4603      	mov	r3, r0
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d001      	beq.n	80117de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80117da:	f000 fd37 	bl	801224c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80117de:	7bfb      	ldrb	r3, [r7, #15]
 80117e0:	3b01      	subs	r3, #1
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80117e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	dce9      	bgt.n	80117c2 <prvUnlockQueue+0x16>
 80117ee:	e000      	b.n	80117f2 <prvUnlockQueue+0x46>
					break;
 80117f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	22ff      	movs	r2, #255	; 0xff
 80117f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80117fa:	f7ff fad3 	bl	8010da4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80117fe:	f7ff faa3 	bl	8010d48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011808:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801180a:	e011      	b.n	8011830 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	691b      	ldr	r3, [r3, #16]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d012      	beq.n	801183a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	3310      	adds	r3, #16
 8011818:	4618      	mov	r0, r3
 801181a:	f000 fc49 	bl	80120b0 <xTaskRemoveFromEventList>
 801181e:	4603      	mov	r3, r0
 8011820:	2b00      	cmp	r3, #0
 8011822:	d001      	beq.n	8011828 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011824:	f000 fd12 	bl	801224c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011828:	7bbb      	ldrb	r3, [r7, #14]
 801182a:	3b01      	subs	r3, #1
 801182c:	b2db      	uxtb	r3, r3
 801182e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011834:	2b00      	cmp	r3, #0
 8011836:	dce9      	bgt.n	801180c <prvUnlockQueue+0x60>
 8011838:	e000      	b.n	801183c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801183a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	22ff      	movs	r2, #255	; 0xff
 8011840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011844:	f7ff faae 	bl	8010da4 <vPortExitCritical>
}
 8011848:	bf00      	nop
 801184a:	3710      	adds	r7, #16
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011858:	f7ff fa76 	bl	8010d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011860:	2b00      	cmp	r3, #0
 8011862:	d102      	bne.n	801186a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011864:	2301      	movs	r3, #1
 8011866:	60fb      	str	r3, [r7, #12]
 8011868:	e001      	b.n	801186e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801186a:	2300      	movs	r3, #0
 801186c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801186e:	f7ff fa99 	bl	8010da4 <vPortExitCritical>

	return xReturn;
 8011872:	68fb      	ldr	r3, [r7, #12]
}
 8011874:	4618      	mov	r0, r3
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b084      	sub	sp, #16
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011884:	f7ff fa60 	bl	8010d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011890:	429a      	cmp	r2, r3
 8011892:	d102      	bne.n	801189a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011894:	2301      	movs	r3, #1
 8011896:	60fb      	str	r3, [r7, #12]
 8011898:	e001      	b.n	801189e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801189a:	2300      	movs	r3, #0
 801189c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801189e:	f7ff fa81 	bl	8010da4 <vPortExitCritical>

	return xReturn;
 80118a2:	68fb      	ldr	r3, [r7, #12]
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3710      	adds	r7, #16
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <vApplicationStackOverflowHook>:

/* Callback function prototypes. --------------------------*/
#if(  configCHECK_FOR_STACK_OVERFLOW > 0 )

	void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
	{
 80118ac:	b480      	push	{r7}
 80118ae:	b083      	sub	sp, #12
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	6039      	str	r1, [r7, #0]
	    while (1) {
	        __asm("nop");
 80118b6:	bf00      	nop
 80118b8:	e7fd      	b.n	80118b6 <vApplicationStackOverflowHook+0xa>

080118ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80118ba:	b580      	push	{r7, lr}
 80118bc:	b08e      	sub	sp, #56	; 0x38
 80118be:	af04      	add	r7, sp, #16
 80118c0:	60f8      	str	r0, [r7, #12]
 80118c2:	60b9      	str	r1, [r7, #8]
 80118c4:	607a      	str	r2, [r7, #4]
 80118c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80118c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d109      	bne.n	80118e2 <xTaskCreateStatic+0x28>
 80118ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d2:	f383 8811 	msr	BASEPRI, r3
 80118d6:	f3bf 8f6f 	isb	sy
 80118da:	f3bf 8f4f 	dsb	sy
 80118de:	623b      	str	r3, [r7, #32]
 80118e0:	e7fe      	b.n	80118e0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80118e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d109      	bne.n	80118fc <xTaskCreateStatic+0x42>
 80118e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ec:	f383 8811 	msr	BASEPRI, r3
 80118f0:	f3bf 8f6f 	isb	sy
 80118f4:	f3bf 8f4f 	dsb	sy
 80118f8:	61fb      	str	r3, [r7, #28]
 80118fa:	e7fe      	b.n	80118fa <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80118fc:	2348      	movs	r3, #72	; 0x48
 80118fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	2b48      	cmp	r3, #72	; 0x48
 8011904:	d009      	beq.n	801191a <xTaskCreateStatic+0x60>
 8011906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801190a:	f383 8811 	msr	BASEPRI, r3
 801190e:	f3bf 8f6f 	isb	sy
 8011912:	f3bf 8f4f 	dsb	sy
 8011916:	61bb      	str	r3, [r7, #24]
 8011918:	e7fe      	b.n	8011918 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801191a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801191c:	2b00      	cmp	r3, #0
 801191e:	d01a      	beq.n	8011956 <xTaskCreateStatic+0x9c>
 8011920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011922:	2b00      	cmp	r3, #0
 8011924:	d017      	beq.n	8011956 <xTaskCreateStatic+0x9c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011928:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801192c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801192e:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011930:	2300      	movs	r3, #0
 8011932:	9303      	str	r3, [sp, #12]
 8011934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011936:	9302      	str	r3, [sp, #8]
 8011938:	f107 0314 	add.w	r3, r7, #20
 801193c:	9301      	str	r3, [sp, #4]
 801193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011940:	9300      	str	r3, [sp, #0]
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	687a      	ldr	r2, [r7, #4]
 8011946:	68b9      	ldr	r1, [r7, #8]
 8011948:	68f8      	ldr	r0, [r7, #12]
 801194a:	f000 f80b 	bl	8011964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801194e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011950:	f000 f88e 	bl	8011a70 <prvAddNewTaskToReadyList>
 8011954:	e001      	b.n	801195a <xTaskCreateStatic+0xa0>
		}
		else
		{
			xReturn = NULL;
 8011956:	2300      	movs	r3, #0
 8011958:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801195a:	697b      	ldr	r3, [r7, #20]
	}
 801195c:	4618      	mov	r0, r3
 801195e:	3728      	adds	r7, #40	; 0x28
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b088      	sub	sp, #32
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	607a      	str	r2, [r7, #4]
 8011970:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011974:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	009b      	lsls	r3, r3, #2
 801197a:	461a      	mov	r2, r3
 801197c:	21a5      	movs	r1, #165	; 0xa5
 801197e:	f000 ff8d 	bl	801289c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8011982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801198c:	3b01      	subs	r3, #1
 801198e:	009b      	lsls	r3, r3, #2
 8011990:	4413      	add	r3, r2
 8011992:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011994:	69bb      	ldr	r3, [r7, #24]
 8011996:	f023 0307 	bic.w	r3, r3, #7
 801199a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801199c:	69bb      	ldr	r3, [r7, #24]
 801199e:	f003 0307 	and.w	r3, r3, #7
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d009      	beq.n	80119ba <prvInitialiseNewTask+0x56>
 80119a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119aa:	f383 8811 	msr	BASEPRI, r3
 80119ae:	f3bf 8f6f 	isb	sy
 80119b2:	f3bf 8f4f 	dsb	sy
 80119b6:	617b      	str	r3, [r7, #20]
 80119b8:	e7fe      	b.n	80119b8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80119ba:	2300      	movs	r3, #0
 80119bc:	61fb      	str	r3, [r7, #28]
 80119be:	e012      	b.n	80119e6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80119c0:	68ba      	ldr	r2, [r7, #8]
 80119c2:	69fb      	ldr	r3, [r7, #28]
 80119c4:	4413      	add	r3, r2
 80119c6:	7819      	ldrb	r1, [r3, #0]
 80119c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	4413      	add	r3, r2
 80119ce:	3334      	adds	r3, #52	; 0x34
 80119d0:	460a      	mov	r2, r1
 80119d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80119d4:	68ba      	ldr	r2, [r7, #8]
 80119d6:	69fb      	ldr	r3, [r7, #28]
 80119d8:	4413      	add	r3, r2
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d006      	beq.n	80119ee <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80119e0:	69fb      	ldr	r3, [r7, #28]
 80119e2:	3301      	adds	r3, #1
 80119e4:	61fb      	str	r3, [r7, #28]
 80119e6:	69fb      	ldr	r3, [r7, #28]
 80119e8:	2b01      	cmp	r3, #1
 80119ea:	d9e9      	bls.n	80119c0 <prvInitialiseNewTask+0x5c>
 80119ec:	e000      	b.n	80119f0 <prvInitialiseNewTask+0x8c>
		{
			break;
 80119ee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80119f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f2:	2200      	movs	r2, #0
 80119f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80119f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119fa:	2b06      	cmp	r3, #6
 80119fc:	d901      	bls.n	8011a02 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80119fe:	2306      	movs	r3, #6
 8011a00:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a06:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxNewTCB->uxMutexesHeld = 0;
 8011a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a10:	2200      	movs	r2, #0
 8011a12:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a16:	3304      	adds	r3, #4
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f7ff f803 	bl	8010a24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a20:	3318      	adds	r3, #24
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7fe fffe 	bl	8010a24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a30:	f1c3 0207 	rsb	r2, r3, #7
 8011a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a3c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a40:	2200      	movs	r2, #0
 8011a42:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a46:	2200      	movs	r2, #0
 8011a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011a4c:	683a      	ldr	r2, [r7, #0]
 8011a4e:	68f9      	ldr	r1, [r7, #12]
 8011a50:	69b8      	ldr	r0, [r7, #24]
 8011a52:	f7ff f87b 	bl	8010b4c <pxPortInitialiseStack>
 8011a56:	4602      	mov	r2, r0
 8011a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a5a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8011a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d002      	beq.n	8011a68 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a68:	bf00      	nop
 8011a6a:	3720      	adds	r7, #32
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}

08011a70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011a78:	f7ff f966 	bl	8010d48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011a7c:	4b2a      	ldr	r3, [pc, #168]	; (8011b28 <prvAddNewTaskToReadyList+0xb8>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	3301      	adds	r3, #1
 8011a82:	4a29      	ldr	r2, [pc, #164]	; (8011b28 <prvAddNewTaskToReadyList+0xb8>)
 8011a84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011a86:	4b29      	ldr	r3, [pc, #164]	; (8011b2c <prvAddNewTaskToReadyList+0xbc>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d109      	bne.n	8011aa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011a8e:	4a27      	ldr	r2, [pc, #156]	; (8011b2c <prvAddNewTaskToReadyList+0xbc>)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011a94:	4b24      	ldr	r3, [pc, #144]	; (8011b28 <prvAddNewTaskToReadyList+0xb8>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d110      	bne.n	8011abe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011a9c:	f000 fbfa 	bl	8012294 <prvInitialiseTaskLists>
 8011aa0:	e00d      	b.n	8011abe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011aa2:	4b23      	ldr	r3, [pc, #140]	; (8011b30 <prvAddNewTaskToReadyList+0xc0>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d109      	bne.n	8011abe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011aaa:	4b20      	ldr	r3, [pc, #128]	; (8011b2c <prvAddNewTaskToReadyList+0xbc>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d802      	bhi.n	8011abe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011ab8:	4a1c      	ldr	r2, [pc, #112]	; (8011b2c <prvAddNewTaskToReadyList+0xbc>)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011abe:	4b1d      	ldr	r3, [pc, #116]	; (8011b34 <prvAddNewTaskToReadyList+0xc4>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	4a1b      	ldr	r2, [pc, #108]	; (8011b34 <prvAddNewTaskToReadyList+0xc4>)
 8011ac6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011acc:	2201      	movs	r2, #1
 8011ace:	409a      	lsls	r2, r3
 8011ad0:	4b19      	ldr	r3, [pc, #100]	; (8011b38 <prvAddNewTaskToReadyList+0xc8>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4313      	orrs	r3, r2
 8011ad6:	4a18      	ldr	r2, [pc, #96]	; (8011b38 <prvAddNewTaskToReadyList+0xc8>)
 8011ad8:	6013      	str	r3, [r2, #0]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ade:	4613      	mov	r3, r2
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	4413      	add	r3, r2
 8011ae4:	009b      	lsls	r3, r3, #2
 8011ae6:	4a15      	ldr	r2, [pc, #84]	; (8011b3c <prvAddNewTaskToReadyList+0xcc>)
 8011ae8:	441a      	add	r2, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	3304      	adds	r3, #4
 8011aee:	4619      	mov	r1, r3
 8011af0:	4610      	mov	r0, r2
 8011af2:	f7fe ffa4 	bl	8010a3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011af6:	f7ff f955 	bl	8010da4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011afa:	4b0d      	ldr	r3, [pc, #52]	; (8011b30 <prvAddNewTaskToReadyList+0xc0>)
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d00e      	beq.n	8011b20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011b02:	4b0a      	ldr	r3, [pc, #40]	; (8011b2c <prvAddNewTaskToReadyList+0xbc>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d207      	bcs.n	8011b20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011b10:	4b0b      	ldr	r3, [pc, #44]	; (8011b40 <prvAddNewTaskToReadyList+0xd0>)
 8011b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b16:	601a      	str	r2, [r3, #0]
 8011b18:	f3bf 8f4f 	dsb	sy
 8011b1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011b20:	bf00      	nop
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	200002f4 	.word	0x200002f4
 8011b2c:	20000220 	.word	0x20000220
 8011b30:	20000300 	.word	0x20000300
 8011b34:	20000310 	.word	0x20000310
 8011b38:	200002fc 	.word	0x200002fc
 8011b3c:	20000224 	.word	0x20000224
 8011b40:	e000ed04 	.word	0xe000ed04

08011b44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b084      	sub	sp, #16
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d016      	beq.n	8011b84 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011b56:	4b13      	ldr	r3, [pc, #76]	; (8011ba4 <vTaskDelay+0x60>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d009      	beq.n	8011b72 <vTaskDelay+0x2e>
 8011b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b62:	f383 8811 	msr	BASEPRI, r3
 8011b66:	f3bf 8f6f 	isb	sy
 8011b6a:	f3bf 8f4f 	dsb	sy
 8011b6e:	60bb      	str	r3, [r7, #8]
 8011b70:	e7fe      	b.n	8011b70 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011b72:	f000 f893 	bl	8011c9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011b76:	2100      	movs	r1, #0
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f000 fdc9 	bl	8012710 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011b7e:	f000 f89b 	bl	8011cb8 <xTaskResumeAll>
 8011b82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d107      	bne.n	8011b9a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8011b8a:	4b07      	ldr	r3, [pc, #28]	; (8011ba8 <vTaskDelay+0x64>)
 8011b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b90:	601a      	str	r2, [r3, #0]
 8011b92:	f3bf 8f4f 	dsb	sy
 8011b96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011b9a:	bf00      	nop
 8011b9c:	3710      	adds	r7, #16
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	2000031c 	.word	0x2000031c
 8011ba8:	e000ed04 	.word	0xe000ed04

08011bac <vApplicationGetIdleTaskMemory>:


void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 8011bac:	b480      	push	{r7}
 8011bae:	b085      	sub	sp, #20
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	60f8      	str	r0, [r7, #12]
 8011bb4:	60b9      	str	r1, [r7, #8]
 8011bb6:	607a      	str	r2, [r7, #4]
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task’s
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	4a07      	ldr	r2, [pc, #28]	; (8011bd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8011bbc:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Idle task’s stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	4a06      	ldr	r2, [pc, #24]	; (8011bdc <vApplicationGetIdleTaskMemory+0x30>)
 8011bc2:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2240      	movs	r2, #64	; 0x40
 8011bc8:	601a      	str	r2, [r3, #0]
}
 8011bca:	bf00      	nop
 8011bcc:	3714      	adds	r7, #20
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd4:	4770      	bx	lr
 8011bd6:	bf00      	nop
 8011bd8:	20000320 	.word	0x20000320
 8011bdc:	20000368 	.word	0x20000368

08011be0 <vTaskStartScheduler>:

void vTaskStartScheduler( void )
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b08a      	sub	sp, #40	; 0x28
 8011be4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011be6:	2300      	movs	r3, #0
 8011be8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011bea:	2300      	movs	r3, #0
 8011bec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011bee:	463a      	mov	r2, r7
 8011bf0:	1d39      	adds	r1, r7, #4
 8011bf2:	f107 0308 	add.w	r3, r7, #8
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f7ff ffd8 	bl	8011bac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011bfc:	6839      	ldr	r1, [r7, #0]
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	68ba      	ldr	r2, [r7, #8]
 8011c02:	9202      	str	r2, [sp, #8]
 8011c04:	9301      	str	r3, [sp, #4]
 8011c06:	2300      	movs	r3, #0
 8011c08:	9300      	str	r3, [sp, #0]
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	460a      	mov	r2, r1
 8011c0e:	491d      	ldr	r1, [pc, #116]	; (8011c84 <vTaskStartScheduler+0xa4>)
 8011c10:	481d      	ldr	r0, [pc, #116]	; (8011c88 <vTaskStartScheduler+0xa8>)
 8011c12:	f7ff fe52 	bl	80118ba <xTaskCreateStatic>
 8011c16:	4602      	mov	r2, r0
 8011c18:	4b1c      	ldr	r3, [pc, #112]	; (8011c8c <vTaskStartScheduler+0xac>)
 8011c1a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011c1c:	4b1b      	ldr	r3, [pc, #108]	; (8011c8c <vTaskStartScheduler+0xac>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d002      	beq.n	8011c2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011c24:	2301      	movs	r3, #1
 8011c26:	617b      	str	r3, [r7, #20]
 8011c28:	e001      	b.n	8011c2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	2b01      	cmp	r3, #1
 8011c32:	d115      	bne.n	8011c60 <vTaskStartScheduler+0x80>
 8011c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c38:	f383 8811 	msr	BASEPRI, r3
 8011c3c:	f3bf 8f6f 	isb	sy
 8011c40:	f3bf 8f4f 	dsb	sy
 8011c44:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011c46:	4b12      	ldr	r3, [pc, #72]	; (8011c90 <vTaskStartScheduler+0xb0>)
 8011c48:	f04f 32ff 	mov.w	r2, #4294967295
 8011c4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011c4e:	4b11      	ldr	r3, [pc, #68]	; (8011c94 <vTaskStartScheduler+0xb4>)
 8011c50:	2201      	movs	r2, #1
 8011c52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011c54:	4b10      	ldr	r3, [pc, #64]	; (8011c98 <vTaskStartScheduler+0xb8>)
 8011c56:	2200      	movs	r2, #0
 8011c58:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011c5a:	f7fe fff5 	bl	8010c48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011c5e:	e00d      	b.n	8011c7c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c66:	d109      	bne.n	8011c7c <vTaskStartScheduler+0x9c>
 8011c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c6c:	f383 8811 	msr	BASEPRI, r3
 8011c70:	f3bf 8f6f 	isb	sy
 8011c74:	f3bf 8f4f 	dsb	sy
 8011c78:	60fb      	str	r3, [r7, #12]
 8011c7a:	e7fe      	b.n	8011c7a <vTaskStartScheduler+0x9a>
}
 8011c7c:	bf00      	nop
 8011c7e:	3718      	adds	r7, #24
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}
 8011c84:	08015e68 	.word	0x08015e68
 8011c88:	08012265 	.word	0x08012265
 8011c8c:	20000318 	.word	0x20000318
 8011c90:	20000314 	.word	0x20000314
 8011c94:	20000300 	.word	0x20000300
 8011c98:	200002f8 	.word	0x200002f8

08011c9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011ca0:	4b04      	ldr	r3, [pc, #16]	; (8011cb4 <vTaskSuspendAll+0x18>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	4a03      	ldr	r2, [pc, #12]	; (8011cb4 <vTaskSuspendAll+0x18>)
 8011ca8:	6013      	str	r3, [r2, #0]
}
 8011caa:	bf00      	nop
 8011cac:	46bd      	mov	sp, r7
 8011cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb2:	4770      	bx	lr
 8011cb4:	2000031c 	.word	0x2000031c

08011cb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b084      	sub	sp, #16
 8011cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011cc6:	4b41      	ldr	r3, [pc, #260]	; (8011dcc <xTaskResumeAll+0x114>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d109      	bne.n	8011ce2 <xTaskResumeAll+0x2a>
 8011cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd2:	f383 8811 	msr	BASEPRI, r3
 8011cd6:	f3bf 8f6f 	isb	sy
 8011cda:	f3bf 8f4f 	dsb	sy
 8011cde:	603b      	str	r3, [r7, #0]
 8011ce0:	e7fe      	b.n	8011ce0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011ce2:	f7ff f831 	bl	8010d48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011ce6:	4b39      	ldr	r3, [pc, #228]	; (8011dcc <xTaskResumeAll+0x114>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	3b01      	subs	r3, #1
 8011cec:	4a37      	ldr	r2, [pc, #220]	; (8011dcc <xTaskResumeAll+0x114>)
 8011cee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011cf0:	4b36      	ldr	r3, [pc, #216]	; (8011dcc <xTaskResumeAll+0x114>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d161      	bne.n	8011dbc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011cf8:	4b35      	ldr	r3, [pc, #212]	; (8011dd0 <xTaskResumeAll+0x118>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d05d      	beq.n	8011dbc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011d00:	e02e      	b.n	8011d60 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8011d02:	4b34      	ldr	r3, [pc, #208]	; (8011dd4 <xTaskResumeAll+0x11c>)
 8011d04:	68db      	ldr	r3, [r3, #12]
 8011d06:	68db      	ldr	r3, [r3, #12]
 8011d08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	3318      	adds	r3, #24
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fe fef2 	bl	8010af8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	3304      	adds	r3, #4
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7fe feed 	bl	8010af8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d22:	2201      	movs	r2, #1
 8011d24:	409a      	lsls	r2, r3
 8011d26:	4b2c      	ldr	r3, [pc, #176]	; (8011dd8 <xTaskResumeAll+0x120>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	4313      	orrs	r3, r2
 8011d2c:	4a2a      	ldr	r2, [pc, #168]	; (8011dd8 <xTaskResumeAll+0x120>)
 8011d2e:	6013      	str	r3, [r2, #0]
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d34:	4613      	mov	r3, r2
 8011d36:	009b      	lsls	r3, r3, #2
 8011d38:	4413      	add	r3, r2
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	4a27      	ldr	r2, [pc, #156]	; (8011ddc <xTaskResumeAll+0x124>)
 8011d3e:	441a      	add	r2, r3
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	3304      	adds	r3, #4
 8011d44:	4619      	mov	r1, r3
 8011d46:	4610      	mov	r0, r2
 8011d48:	f7fe fe79 	bl	8010a3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d50:	4b23      	ldr	r3, [pc, #140]	; (8011de0 <xTaskResumeAll+0x128>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d302      	bcc.n	8011d60 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8011d5a:	4b22      	ldr	r3, [pc, #136]	; (8011de4 <xTaskResumeAll+0x12c>)
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011d60:	4b1c      	ldr	r3, [pc, #112]	; (8011dd4 <xTaskResumeAll+0x11c>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d1cc      	bne.n	8011d02 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d001      	beq.n	8011d72 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011d6e:	f000 facf 	bl	8012310 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011d72:	4b1d      	ldr	r3, [pc, #116]	; (8011de8 <xTaskResumeAll+0x130>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d010      	beq.n	8011da0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011d7e:	f000 f837 	bl	8011df0 <xTaskIncrementTick>
 8011d82:	4603      	mov	r3, r0
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d002      	beq.n	8011d8e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8011d88:	4b16      	ldr	r3, [pc, #88]	; (8011de4 <xTaskResumeAll+0x12c>)
 8011d8a:	2201      	movs	r2, #1
 8011d8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	3b01      	subs	r3, #1
 8011d92:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d1f1      	bne.n	8011d7e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8011d9a:	4b13      	ldr	r3, [pc, #76]	; (8011de8 <xTaskResumeAll+0x130>)
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011da0:	4b10      	ldr	r3, [pc, #64]	; (8011de4 <xTaskResumeAll+0x12c>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d009      	beq.n	8011dbc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011da8:	2301      	movs	r3, #1
 8011daa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011dac:	4b0f      	ldr	r3, [pc, #60]	; (8011dec <xTaskResumeAll+0x134>)
 8011dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011db2:	601a      	str	r2, [r3, #0]
 8011db4:	f3bf 8f4f 	dsb	sy
 8011db8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011dbc:	f7fe fff2 	bl	8010da4 <vPortExitCritical>

	return xAlreadyYielded;
 8011dc0:	68bb      	ldr	r3, [r7, #8]
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	2000031c 	.word	0x2000031c
 8011dd0:	200002f4 	.word	0x200002f4
 8011dd4:	200002e0 	.word	0x200002e0
 8011dd8:	200002fc 	.word	0x200002fc
 8011ddc:	20000224 	.word	0x20000224
 8011de0:	20000220 	.word	0x20000220
 8011de4:	20000308 	.word	0x20000308
 8011de8:	20000304 	.word	0x20000304
 8011dec:	e000ed04 	.word	0xe000ed04

08011df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b086      	sub	sp, #24
 8011df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011df6:	2300      	movs	r3, #0
 8011df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011dfa:	4b50      	ldr	r3, [pc, #320]	; (8011f3c <xTaskIncrementTick+0x14c>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	f040 808c 	bne.w	8011f1c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011e04:	4b4e      	ldr	r3, [pc, #312]	; (8011f40 <xTaskIncrementTick+0x150>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	3301      	adds	r3, #1
 8011e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011e0c:	4a4c      	ldr	r2, [pc, #304]	; (8011f40 <xTaskIncrementTick+0x150>)
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d11f      	bne.n	8011e58 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011e18:	4b4a      	ldr	r3, [pc, #296]	; (8011f44 <xTaskIncrementTick+0x154>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d009      	beq.n	8011e36 <xTaskIncrementTick+0x46>
 8011e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e26:	f383 8811 	msr	BASEPRI, r3
 8011e2a:	f3bf 8f6f 	isb	sy
 8011e2e:	f3bf 8f4f 	dsb	sy
 8011e32:	603b      	str	r3, [r7, #0]
 8011e34:	e7fe      	b.n	8011e34 <xTaskIncrementTick+0x44>
 8011e36:	4b43      	ldr	r3, [pc, #268]	; (8011f44 <xTaskIncrementTick+0x154>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	60fb      	str	r3, [r7, #12]
 8011e3c:	4b42      	ldr	r3, [pc, #264]	; (8011f48 <xTaskIncrementTick+0x158>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	4a40      	ldr	r2, [pc, #256]	; (8011f44 <xTaskIncrementTick+0x154>)
 8011e42:	6013      	str	r3, [r2, #0]
 8011e44:	4a40      	ldr	r2, [pc, #256]	; (8011f48 <xTaskIncrementTick+0x158>)
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	6013      	str	r3, [r2, #0]
 8011e4a:	4b40      	ldr	r3, [pc, #256]	; (8011f4c <xTaskIncrementTick+0x15c>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	3301      	adds	r3, #1
 8011e50:	4a3e      	ldr	r2, [pc, #248]	; (8011f4c <xTaskIncrementTick+0x15c>)
 8011e52:	6013      	str	r3, [r2, #0]
 8011e54:	f000 fa5c 	bl	8012310 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011e58:	4b3d      	ldr	r3, [pc, #244]	; (8011f50 <xTaskIncrementTick+0x160>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	693a      	ldr	r2, [r7, #16]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d34d      	bcc.n	8011efe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e62:	4b38      	ldr	r3, [pc, #224]	; (8011f44 <xTaskIncrementTick+0x154>)
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d101      	bne.n	8011e70 <xTaskIncrementTick+0x80>
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	e000      	b.n	8011e72 <xTaskIncrementTick+0x82>
 8011e70:	2300      	movs	r3, #0
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d004      	beq.n	8011e80 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e76:	4b36      	ldr	r3, [pc, #216]	; (8011f50 <xTaskIncrementTick+0x160>)
 8011e78:	f04f 32ff 	mov.w	r2, #4294967295
 8011e7c:	601a      	str	r2, [r3, #0]
					break;
 8011e7e:	e03e      	b.n	8011efe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011e80:	4b30      	ldr	r3, [pc, #192]	; (8011f44 <xTaskIncrementTick+0x154>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	68db      	ldr	r3, [r3, #12]
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011e90:	693a      	ldr	r2, [r7, #16]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d203      	bcs.n	8011ea0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011e98:	4a2d      	ldr	r2, [pc, #180]	; (8011f50 <xTaskIncrementTick+0x160>)
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6013      	str	r3, [r2, #0]
						break;
 8011e9e:	e02e      	b.n	8011efe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	3304      	adds	r3, #4
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7fe fe27 	bl	8010af8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d004      	beq.n	8011ebc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	3318      	adds	r3, #24
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7fe fe1e 	bl	8010af8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ec0:	2201      	movs	r2, #1
 8011ec2:	409a      	lsls	r2, r3
 8011ec4:	4b23      	ldr	r3, [pc, #140]	; (8011f54 <xTaskIncrementTick+0x164>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	4313      	orrs	r3, r2
 8011eca:	4a22      	ldr	r2, [pc, #136]	; (8011f54 <xTaskIncrementTick+0x164>)
 8011ecc:	6013      	str	r3, [r2, #0]
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ed2:	4613      	mov	r3, r2
 8011ed4:	009b      	lsls	r3, r3, #2
 8011ed6:	4413      	add	r3, r2
 8011ed8:	009b      	lsls	r3, r3, #2
 8011eda:	4a1f      	ldr	r2, [pc, #124]	; (8011f58 <xTaskIncrementTick+0x168>)
 8011edc:	441a      	add	r2, r3
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	3304      	adds	r3, #4
 8011ee2:	4619      	mov	r1, r3
 8011ee4:	4610      	mov	r0, r2
 8011ee6:	f7fe fdaa 	bl	8010a3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eee:	4b1b      	ldr	r3, [pc, #108]	; (8011f5c <xTaskIncrementTick+0x16c>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d3b4      	bcc.n	8011e62 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011ef8:	2301      	movs	r3, #1
 8011efa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011efc:	e7b1      	b.n	8011e62 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011efe:	4b17      	ldr	r3, [pc, #92]	; (8011f5c <xTaskIncrementTick+0x16c>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f04:	4914      	ldr	r1, [pc, #80]	; (8011f58 <xTaskIncrementTick+0x168>)
 8011f06:	4613      	mov	r3, r2
 8011f08:	009b      	lsls	r3, r3, #2
 8011f0a:	4413      	add	r3, r2
 8011f0c:	009b      	lsls	r3, r3, #2
 8011f0e:	440b      	add	r3, r1
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	2b01      	cmp	r3, #1
 8011f14:	d907      	bls.n	8011f26 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8011f16:	2301      	movs	r3, #1
 8011f18:	617b      	str	r3, [r7, #20]
 8011f1a:	e004      	b.n	8011f26 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011f1c:	4b10      	ldr	r3, [pc, #64]	; (8011f60 <xTaskIncrementTick+0x170>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	3301      	adds	r3, #1
 8011f22:	4a0f      	ldr	r2, [pc, #60]	; (8011f60 <xTaskIncrementTick+0x170>)
 8011f24:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011f26:	4b0f      	ldr	r3, [pc, #60]	; (8011f64 <xTaskIncrementTick+0x174>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d001      	beq.n	8011f32 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8011f2e:	2301      	movs	r3, #1
 8011f30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011f32:	697b      	ldr	r3, [r7, #20]
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3718      	adds	r7, #24
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	2000031c 	.word	0x2000031c
 8011f40:	200002f8 	.word	0x200002f8
 8011f44:	200002d8 	.word	0x200002d8
 8011f48:	200002dc 	.word	0x200002dc
 8011f4c:	2000030c 	.word	0x2000030c
 8011f50:	20000314 	.word	0x20000314
 8011f54:	200002fc 	.word	0x200002fc
 8011f58:	20000224 	.word	0x20000224
 8011f5c:	20000220 	.word	0x20000220
 8011f60:	20000304 	.word	0x20000304
 8011f64:	20000308 	.word	0x20000308

08011f68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b088      	sub	sp, #32
 8011f6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011f6e:	4b39      	ldr	r3, [pc, #228]	; (8012054 <vTaskSwitchContext+0xec>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d003      	beq.n	8011f7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011f76:	4b38      	ldr	r3, [pc, #224]	; (8012058 <vTaskSwitchContext+0xf0>)
 8011f78:	2201      	movs	r2, #1
 8011f7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011f7c:	e065      	b.n	801204a <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8011f7e:	4b36      	ldr	r3, [pc, #216]	; (8012058 <vTaskSwitchContext+0xf0>)
 8011f80:	2200      	movs	r2, #0
 8011f82:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011f84:	4b35      	ldr	r3, [pc, #212]	; (801205c <vTaskSwitchContext+0xf4>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f8a:	61fb      	str	r3, [r7, #28]
 8011f8c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8011f90:	61bb      	str	r3, [r7, #24]
 8011f92:	69fb      	ldr	r3, [r7, #28]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	69ba      	ldr	r2, [r7, #24]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d111      	bne.n	8011fc0 <vTaskSwitchContext+0x58>
 8011f9c:	69fb      	ldr	r3, [r7, #28]
 8011f9e:	3304      	adds	r3, #4
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	69ba      	ldr	r2, [r7, #24]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d10b      	bne.n	8011fc0 <vTaskSwitchContext+0x58>
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	3308      	adds	r3, #8
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	69ba      	ldr	r2, [r7, #24]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d105      	bne.n	8011fc0 <vTaskSwitchContext+0x58>
 8011fb4:	69fb      	ldr	r3, [r7, #28]
 8011fb6:	330c      	adds	r3, #12
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	69ba      	ldr	r2, [r7, #24]
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d008      	beq.n	8011fd2 <vTaskSwitchContext+0x6a>
 8011fc0:	4b26      	ldr	r3, [pc, #152]	; (801205c <vTaskSwitchContext+0xf4>)
 8011fc2:	681a      	ldr	r2, [r3, #0]
 8011fc4:	4b25      	ldr	r3, [pc, #148]	; (801205c <vTaskSwitchContext+0xf4>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	3334      	adds	r3, #52	; 0x34
 8011fca:	4619      	mov	r1, r3
 8011fcc:	4610      	mov	r0, r2
 8011fce:	f7ff fc6d 	bl	80118ac <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011fd2:	4b23      	ldr	r3, [pc, #140]	; (8012060 <vTaskSwitchContext+0xf8>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	fab3 f383 	clz	r3, r3
 8011fde:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011fe0:	7afb      	ldrb	r3, [r7, #11]
 8011fe2:	f1c3 031f 	rsb	r3, r3, #31
 8011fe6:	617b      	str	r3, [r7, #20]
 8011fe8:	491e      	ldr	r1, [pc, #120]	; (8012064 <vTaskSwitchContext+0xfc>)
 8011fea:	697a      	ldr	r2, [r7, #20]
 8011fec:	4613      	mov	r3, r2
 8011fee:	009b      	lsls	r3, r3, #2
 8011ff0:	4413      	add	r3, r2
 8011ff2:	009b      	lsls	r3, r3, #2
 8011ff4:	440b      	add	r3, r1
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d109      	bne.n	8012010 <vTaskSwitchContext+0xa8>
	__asm volatile
 8011ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012000:	f383 8811 	msr	BASEPRI, r3
 8012004:	f3bf 8f6f 	isb	sy
 8012008:	f3bf 8f4f 	dsb	sy
 801200c:	607b      	str	r3, [r7, #4]
 801200e:	e7fe      	b.n	801200e <vTaskSwitchContext+0xa6>
 8012010:	697a      	ldr	r2, [r7, #20]
 8012012:	4613      	mov	r3, r2
 8012014:	009b      	lsls	r3, r3, #2
 8012016:	4413      	add	r3, r2
 8012018:	009b      	lsls	r3, r3, #2
 801201a:	4a12      	ldr	r2, [pc, #72]	; (8012064 <vTaskSwitchContext+0xfc>)
 801201c:	4413      	add	r3, r2
 801201e:	613b      	str	r3, [r7, #16]
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	685a      	ldr	r2, [r3, #4]
 8012026:	693b      	ldr	r3, [r7, #16]
 8012028:	605a      	str	r2, [r3, #4]
 801202a:	693b      	ldr	r3, [r7, #16]
 801202c:	685a      	ldr	r2, [r3, #4]
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	3308      	adds	r3, #8
 8012032:	429a      	cmp	r2, r3
 8012034:	d104      	bne.n	8012040 <vTaskSwitchContext+0xd8>
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	685a      	ldr	r2, [r3, #4]
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	605a      	str	r2, [r3, #4]
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	68db      	ldr	r3, [r3, #12]
 8012046:	4a05      	ldr	r2, [pc, #20]	; (801205c <vTaskSwitchContext+0xf4>)
 8012048:	6013      	str	r3, [r2, #0]
}
 801204a:	bf00      	nop
 801204c:	3720      	adds	r7, #32
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
 8012052:	bf00      	nop
 8012054:	2000031c 	.word	0x2000031c
 8012058:	20000308 	.word	0x20000308
 801205c:	20000220 	.word	0x20000220
 8012060:	200002fc 	.word	0x200002fc
 8012064:	20000224 	.word	0x20000224

08012068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b084      	sub	sp, #16
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d109      	bne.n	801208c <vTaskPlaceOnEventList+0x24>
 8012078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801207c:	f383 8811 	msr	BASEPRI, r3
 8012080:	f3bf 8f6f 	isb	sy
 8012084:	f3bf 8f4f 	dsb	sy
 8012088:	60fb      	str	r3, [r7, #12]
 801208a:	e7fe      	b.n	801208a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801208c:	4b07      	ldr	r3, [pc, #28]	; (80120ac <vTaskPlaceOnEventList+0x44>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	3318      	adds	r3, #24
 8012092:	4619      	mov	r1, r3
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7fe fcf6 	bl	8010a86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801209a:	2101      	movs	r1, #1
 801209c:	6838      	ldr	r0, [r7, #0]
 801209e:	f000 fb37 	bl	8012710 <prvAddCurrentTaskToDelayedList>
}
 80120a2:	bf00      	nop
 80120a4:	3710      	adds	r7, #16
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	20000220 	.word	0x20000220

080120b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b086      	sub	sp, #24
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	68db      	ldr	r3, [r3, #12]
 80120be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d109      	bne.n	80120da <xTaskRemoveFromEventList+0x2a>
 80120c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ca:	f383 8811 	msr	BASEPRI, r3
 80120ce:	f3bf 8f6f 	isb	sy
 80120d2:	f3bf 8f4f 	dsb	sy
 80120d6:	60fb      	str	r3, [r7, #12]
 80120d8:	e7fe      	b.n	80120d8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	3318      	adds	r3, #24
 80120de:	4618      	mov	r0, r3
 80120e0:	f7fe fd0a 	bl	8010af8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80120e4:	4b1d      	ldr	r3, [pc, #116]	; (801215c <xTaskRemoveFromEventList+0xac>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d11c      	bne.n	8012126 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80120ec:	693b      	ldr	r3, [r7, #16]
 80120ee:	3304      	adds	r3, #4
 80120f0:	4618      	mov	r0, r3
 80120f2:	f7fe fd01 	bl	8010af8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120fa:	2201      	movs	r2, #1
 80120fc:	409a      	lsls	r2, r3
 80120fe:	4b18      	ldr	r3, [pc, #96]	; (8012160 <xTaskRemoveFromEventList+0xb0>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	4313      	orrs	r3, r2
 8012104:	4a16      	ldr	r2, [pc, #88]	; (8012160 <xTaskRemoveFromEventList+0xb0>)
 8012106:	6013      	str	r3, [r2, #0]
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801210c:	4613      	mov	r3, r2
 801210e:	009b      	lsls	r3, r3, #2
 8012110:	4413      	add	r3, r2
 8012112:	009b      	lsls	r3, r3, #2
 8012114:	4a13      	ldr	r2, [pc, #76]	; (8012164 <xTaskRemoveFromEventList+0xb4>)
 8012116:	441a      	add	r2, r3
 8012118:	693b      	ldr	r3, [r7, #16]
 801211a:	3304      	adds	r3, #4
 801211c:	4619      	mov	r1, r3
 801211e:	4610      	mov	r0, r2
 8012120:	f7fe fc8d 	bl	8010a3e <vListInsertEnd>
 8012124:	e005      	b.n	8012132 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	3318      	adds	r3, #24
 801212a:	4619      	mov	r1, r3
 801212c:	480e      	ldr	r0, [pc, #56]	; (8012168 <xTaskRemoveFromEventList+0xb8>)
 801212e:	f7fe fc86 	bl	8010a3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012136:	4b0d      	ldr	r3, [pc, #52]	; (801216c <xTaskRemoveFromEventList+0xbc>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801213c:	429a      	cmp	r2, r3
 801213e:	d905      	bls.n	801214c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012140:	2301      	movs	r3, #1
 8012142:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012144:	4b0a      	ldr	r3, [pc, #40]	; (8012170 <xTaskRemoveFromEventList+0xc0>)
 8012146:	2201      	movs	r2, #1
 8012148:	601a      	str	r2, [r3, #0]
 801214a:	e001      	b.n	8012150 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 801214c:	2300      	movs	r3, #0
 801214e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8012150:	697b      	ldr	r3, [r7, #20]
}
 8012152:	4618      	mov	r0, r3
 8012154:	3718      	adds	r7, #24
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}
 801215a:	bf00      	nop
 801215c:	2000031c 	.word	0x2000031c
 8012160:	200002fc 	.word	0x200002fc
 8012164:	20000224 	.word	0x20000224
 8012168:	200002e0 	.word	0x200002e0
 801216c:	20000220 	.word	0x20000220
 8012170:	20000308 	.word	0x20000308

08012174 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012174:	b480      	push	{r7}
 8012176:	b083      	sub	sp, #12
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801217c:	4b06      	ldr	r3, [pc, #24]	; (8012198 <vTaskInternalSetTimeOutState+0x24>)
 801217e:	681a      	ldr	r2, [r3, #0]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012184:	4b05      	ldr	r3, [pc, #20]	; (801219c <vTaskInternalSetTimeOutState+0x28>)
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	605a      	str	r2, [r3, #4]
}
 801218c:	bf00      	nop
 801218e:	370c      	adds	r7, #12
 8012190:	46bd      	mov	sp, r7
 8012192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012196:	4770      	bx	lr
 8012198:	2000030c 	.word	0x2000030c
 801219c:	200002f8 	.word	0x200002f8

080121a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b088      	sub	sp, #32
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d109      	bne.n	80121c4 <xTaskCheckForTimeOut+0x24>
 80121b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b4:	f383 8811 	msr	BASEPRI, r3
 80121b8:	f3bf 8f6f 	isb	sy
 80121bc:	f3bf 8f4f 	dsb	sy
 80121c0:	613b      	str	r3, [r7, #16]
 80121c2:	e7fe      	b.n	80121c2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d109      	bne.n	80121de <xTaskCheckForTimeOut+0x3e>
 80121ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ce:	f383 8811 	msr	BASEPRI, r3
 80121d2:	f3bf 8f6f 	isb	sy
 80121d6:	f3bf 8f4f 	dsb	sy
 80121da:	60fb      	str	r3, [r7, #12]
 80121dc:	e7fe      	b.n	80121dc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80121de:	f7fe fdb3 	bl	8010d48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80121e2:	4b18      	ldr	r3, [pc, #96]	; (8012244 <xTaskCheckForTimeOut+0xa4>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	69ba      	ldr	r2, [r7, #24]
 80121ee:	1ad3      	subs	r3, r2, r3
 80121f0:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	681a      	ldr	r2, [r3, #0]
 80121f6:	4b14      	ldr	r3, [pc, #80]	; (8012248 <xTaskCheckForTimeOut+0xa8>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d007      	beq.n	801220e <xTaskCheckForTimeOut+0x6e>
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	69ba      	ldr	r2, [r7, #24]
 8012204:	429a      	cmp	r2, r3
 8012206:	d302      	bcc.n	801220e <xTaskCheckForTimeOut+0x6e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012208:	2301      	movs	r3, #1
 801220a:	61fb      	str	r3, [r7, #28]
 801220c:	e012      	b.n	8012234 <xTaskCheckForTimeOut+0x94>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	697a      	ldr	r2, [r7, #20]
 8012214:	429a      	cmp	r2, r3
 8012216:	d20b      	bcs.n	8012230 <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	681a      	ldr	r2, [r3, #0]
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	1ad2      	subs	r2, r2, r3
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f7ff ffa5 	bl	8012174 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801222a:	2300      	movs	r3, #0
 801222c:	61fb      	str	r3, [r7, #28]
 801222e:	e001      	b.n	8012234 <xTaskCheckForTimeOut+0x94>
		}
		else
		{
			xReturn = pdTRUE;
 8012230:	2301      	movs	r3, #1
 8012232:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012234:	f7fe fdb6 	bl	8010da4 <vPortExitCritical>

	return xReturn;
 8012238:	69fb      	ldr	r3, [r7, #28]
}
 801223a:	4618      	mov	r0, r3
 801223c:	3720      	adds	r7, #32
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}
 8012242:	bf00      	nop
 8012244:	200002f8 	.word	0x200002f8
 8012248:	2000030c 	.word	0x2000030c

0801224c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801224c:	b480      	push	{r7}
 801224e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012250:	4b03      	ldr	r3, [pc, #12]	; (8012260 <vTaskMissedYield+0x14>)
 8012252:	2201      	movs	r2, #1
 8012254:	601a      	str	r2, [r3, #0]
}
 8012256:	bf00      	nop
 8012258:	46bd      	mov	sp, r7
 801225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225e:	4770      	bx	lr
 8012260:	20000308 	.word	0x20000308

08012264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b082      	sub	sp, #8
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801226c:	f000 f848 	bl	8012300 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012270:	4b06      	ldr	r3, [pc, #24]	; (801228c <prvIdleTask+0x28>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	2b01      	cmp	r3, #1
 8012276:	d9f9      	bls.n	801226c <prvIdleTask+0x8>
			{
				taskYIELD();
 8012278:	4b05      	ldr	r3, [pc, #20]	; (8012290 <prvIdleTask+0x2c>)
 801227a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801227e:	601a      	str	r2, [r3, #0]
 8012280:	f3bf 8f4f 	dsb	sy
 8012284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012288:	e7f0      	b.n	801226c <prvIdleTask+0x8>
 801228a:	bf00      	nop
 801228c:	20000224 	.word	0x20000224
 8012290:	e000ed04 	.word	0xe000ed04

08012294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b082      	sub	sp, #8
 8012298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801229a:	2300      	movs	r3, #0
 801229c:	607b      	str	r3, [r7, #4]
 801229e:	e00c      	b.n	80122ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80122a0:	687a      	ldr	r2, [r7, #4]
 80122a2:	4613      	mov	r3, r2
 80122a4:	009b      	lsls	r3, r3, #2
 80122a6:	4413      	add	r3, r2
 80122a8:	009b      	lsls	r3, r3, #2
 80122aa:	4a0f      	ldr	r2, [pc, #60]	; (80122e8 <prvInitialiseTaskLists+0x54>)
 80122ac:	4413      	add	r3, r2
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7fe fb98 	bl	80109e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	3301      	adds	r3, #1
 80122b8:	607b      	str	r3, [r7, #4]
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2b06      	cmp	r3, #6
 80122be:	d9ef      	bls.n	80122a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80122c0:	480a      	ldr	r0, [pc, #40]	; (80122ec <prvInitialiseTaskLists+0x58>)
 80122c2:	f7fe fb8f 	bl	80109e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80122c6:	480a      	ldr	r0, [pc, #40]	; (80122f0 <prvInitialiseTaskLists+0x5c>)
 80122c8:	f7fe fb8c 	bl	80109e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80122cc:	4809      	ldr	r0, [pc, #36]	; (80122f4 <prvInitialiseTaskLists+0x60>)
 80122ce:	f7fe fb89 	bl	80109e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80122d2:	4b09      	ldr	r3, [pc, #36]	; (80122f8 <prvInitialiseTaskLists+0x64>)
 80122d4:	4a05      	ldr	r2, [pc, #20]	; (80122ec <prvInitialiseTaskLists+0x58>)
 80122d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80122d8:	4b08      	ldr	r3, [pc, #32]	; (80122fc <prvInitialiseTaskLists+0x68>)
 80122da:	4a05      	ldr	r2, [pc, #20]	; (80122f0 <prvInitialiseTaskLists+0x5c>)
 80122dc:	601a      	str	r2, [r3, #0]
}
 80122de:	bf00      	nop
 80122e0:	3708      	adds	r7, #8
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	20000224 	.word	0x20000224
 80122ec:	200002b0 	.word	0x200002b0
 80122f0:	200002c4 	.word	0x200002c4
 80122f4:	200002e0 	.word	0x200002e0
 80122f8:	200002d8 	.word	0x200002d8
 80122fc:	200002dc 	.word	0x200002dc

08012300 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012300:	b480      	push	{r7}
 8012302:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012304:	bf00      	nop
 8012306:	46bd      	mov	sp, r7
 8012308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230c:	4770      	bx	lr
	...

08012310 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012310:	b480      	push	{r7}
 8012312:	b083      	sub	sp, #12
 8012314:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012316:	4b0f      	ldr	r3, [pc, #60]	; (8012354 <prvResetNextTaskUnblockTime+0x44>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d101      	bne.n	8012324 <prvResetNextTaskUnblockTime+0x14>
 8012320:	2301      	movs	r3, #1
 8012322:	e000      	b.n	8012326 <prvResetNextTaskUnblockTime+0x16>
 8012324:	2300      	movs	r3, #0
 8012326:	2b00      	cmp	r3, #0
 8012328:	d004      	beq.n	8012334 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801232a:	4b0b      	ldr	r3, [pc, #44]	; (8012358 <prvResetNextTaskUnblockTime+0x48>)
 801232c:	f04f 32ff 	mov.w	r2, #4294967295
 8012330:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012332:	e008      	b.n	8012346 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012334:	4b07      	ldr	r3, [pc, #28]	; (8012354 <prvResetNextTaskUnblockTime+0x44>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	68db      	ldr	r3, [r3, #12]
 801233a:	68db      	ldr	r3, [r3, #12]
 801233c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	4a05      	ldr	r2, [pc, #20]	; (8012358 <prvResetNextTaskUnblockTime+0x48>)
 8012344:	6013      	str	r3, [r2, #0]
}
 8012346:	bf00      	nop
 8012348:	370c      	adds	r7, #12
 801234a:	46bd      	mov	sp, r7
 801234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012350:	4770      	bx	lr
 8012352:	bf00      	nop
 8012354:	200002d8 	.word	0x200002d8
 8012358:	20000314 	.word	0x20000314

0801235c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801235c:	b480      	push	{r7}
 801235e:	b083      	sub	sp, #12
 8012360:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012362:	4b0b      	ldr	r3, [pc, #44]	; (8012390 <xTaskGetSchedulerState+0x34>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d102      	bne.n	8012370 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801236a:	2301      	movs	r3, #1
 801236c:	607b      	str	r3, [r7, #4]
 801236e:	e008      	b.n	8012382 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012370:	4b08      	ldr	r3, [pc, #32]	; (8012394 <xTaskGetSchedulerState+0x38>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d102      	bne.n	801237e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012378:	2302      	movs	r3, #2
 801237a:	607b      	str	r3, [r7, #4]
 801237c:	e001      	b.n	8012382 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801237e:	2300      	movs	r3, #0
 8012380:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012382:	687b      	ldr	r3, [r7, #4]
	}
 8012384:	4618      	mov	r0, r3
 8012386:	370c      	adds	r7, #12
 8012388:	46bd      	mov	sp, r7
 801238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238e:	4770      	bx	lr
 8012390:	20000300 	.word	0x20000300
 8012394:	2000031c 	.word	0x2000031c

08012398 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012398:	b580      	push	{r7, lr}
 801239a:	b084      	sub	sp, #16
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80123a4:	2300      	movs	r3, #0
 80123a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d06e      	beq.n	801248c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123b2:	4b39      	ldr	r3, [pc, #228]	; (8012498 <xTaskPriorityInherit+0x100>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d25e      	bcs.n	801247a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	699b      	ldr	r3, [r3, #24]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	db06      	blt.n	80123d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123c4:	4b34      	ldr	r3, [pc, #208]	; (8012498 <xTaskPriorityInherit+0x100>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123ca:	f1c3 0207 	rsb	r2, r3, #7
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	6959      	ldr	r1, [r3, #20]
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123da:	4613      	mov	r3, r2
 80123dc:	009b      	lsls	r3, r3, #2
 80123de:	4413      	add	r3, r2
 80123e0:	009b      	lsls	r3, r3, #2
 80123e2:	4a2e      	ldr	r2, [pc, #184]	; (801249c <xTaskPriorityInherit+0x104>)
 80123e4:	4413      	add	r3, r2
 80123e6:	4299      	cmp	r1, r3
 80123e8:	d101      	bne.n	80123ee <xTaskPriorityInherit+0x56>
 80123ea:	2301      	movs	r3, #1
 80123ec:	e000      	b.n	80123f0 <xTaskPriorityInherit+0x58>
 80123ee:	2300      	movs	r3, #0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d03a      	beq.n	801246a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	3304      	adds	r3, #4
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7fe fb7d 	bl	8010af8 <uxListRemove>
 80123fe:	4603      	mov	r3, r0
 8012400:	2b00      	cmp	r3, #0
 8012402:	d115      	bne.n	8012430 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012408:	4924      	ldr	r1, [pc, #144]	; (801249c <xTaskPriorityInherit+0x104>)
 801240a:	4613      	mov	r3, r2
 801240c:	009b      	lsls	r3, r3, #2
 801240e:	4413      	add	r3, r2
 8012410:	009b      	lsls	r3, r3, #2
 8012412:	440b      	add	r3, r1
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d10a      	bne.n	8012430 <xTaskPriorityInherit+0x98>
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801241e:	2201      	movs	r2, #1
 8012420:	fa02 f303 	lsl.w	r3, r2, r3
 8012424:	43da      	mvns	r2, r3
 8012426:	4b1e      	ldr	r3, [pc, #120]	; (80124a0 <xTaskPriorityInherit+0x108>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	4013      	ands	r3, r2
 801242c:	4a1c      	ldr	r2, [pc, #112]	; (80124a0 <xTaskPriorityInherit+0x108>)
 801242e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012430:	4b19      	ldr	r3, [pc, #100]	; (8012498 <xTaskPriorityInherit+0x100>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801243e:	2201      	movs	r2, #1
 8012440:	409a      	lsls	r2, r3
 8012442:	4b17      	ldr	r3, [pc, #92]	; (80124a0 <xTaskPriorityInherit+0x108>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	4313      	orrs	r3, r2
 8012448:	4a15      	ldr	r2, [pc, #84]	; (80124a0 <xTaskPriorityInherit+0x108>)
 801244a:	6013      	str	r3, [r2, #0]
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012450:	4613      	mov	r3, r2
 8012452:	009b      	lsls	r3, r3, #2
 8012454:	4413      	add	r3, r2
 8012456:	009b      	lsls	r3, r3, #2
 8012458:	4a10      	ldr	r2, [pc, #64]	; (801249c <xTaskPriorityInherit+0x104>)
 801245a:	441a      	add	r2, r3
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	3304      	adds	r3, #4
 8012460:	4619      	mov	r1, r3
 8012462:	4610      	mov	r0, r2
 8012464:	f7fe faeb 	bl	8010a3e <vListInsertEnd>
 8012468:	e004      	b.n	8012474 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801246a:	4b0b      	ldr	r3, [pc, #44]	; (8012498 <xTaskPriorityInherit+0x100>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012474:	2301      	movs	r3, #1
 8012476:	60fb      	str	r3, [r7, #12]
 8012478:	e008      	b.n	801248c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801247e:	4b06      	ldr	r3, [pc, #24]	; (8012498 <xTaskPriorityInherit+0x100>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012484:	429a      	cmp	r2, r3
 8012486:	d201      	bcs.n	801248c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012488:	2301      	movs	r3, #1
 801248a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801248c:	68fb      	ldr	r3, [r7, #12]
	}
 801248e:	4618      	mov	r0, r3
 8012490:	3710      	adds	r7, #16
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	20000220 	.word	0x20000220
 801249c:	20000224 	.word	0x20000224
 80124a0:	200002fc 	.word	0x200002fc

080124a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b086      	sub	sp, #24
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80124b0:	2300      	movs	r3, #0
 80124b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d06c      	beq.n	8012594 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80124ba:	4b39      	ldr	r3, [pc, #228]	; (80125a0 <xTaskPriorityDisinherit+0xfc>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	693a      	ldr	r2, [r7, #16]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d009      	beq.n	80124d8 <xTaskPriorityDisinherit+0x34>
 80124c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c8:	f383 8811 	msr	BASEPRI, r3
 80124cc:	f3bf 8f6f 	isb	sy
 80124d0:	f3bf 8f4f 	dsb	sy
 80124d4:	60fb      	str	r3, [r7, #12]
 80124d6:	e7fe      	b.n	80124d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d109      	bne.n	80124f4 <xTaskPriorityDisinherit+0x50>
 80124e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e4:	f383 8811 	msr	BASEPRI, r3
 80124e8:	f3bf 8f6f 	isb	sy
 80124ec:	f3bf 8f4f 	dsb	sy
 80124f0:	60bb      	str	r3, [r7, #8]
 80124f2:	e7fe      	b.n	80124f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80124f4:	693b      	ldr	r3, [r7, #16]
 80124f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124f8:	1e5a      	subs	r2, r3, #1
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	63da      	str	r2, [r3, #60]	; 0x3c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012506:	429a      	cmp	r2, r3
 8012508:	d044      	beq.n	8012594 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801250e:	2b00      	cmp	r3, #0
 8012510:	d140      	bne.n	8012594 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	3304      	adds	r3, #4
 8012516:	4618      	mov	r0, r3
 8012518:	f7fe faee 	bl	8010af8 <uxListRemove>
 801251c:	4603      	mov	r3, r0
 801251e:	2b00      	cmp	r3, #0
 8012520:	d115      	bne.n	801254e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012526:	491f      	ldr	r1, [pc, #124]	; (80125a4 <xTaskPriorityDisinherit+0x100>)
 8012528:	4613      	mov	r3, r2
 801252a:	009b      	lsls	r3, r3, #2
 801252c:	4413      	add	r3, r2
 801252e:	009b      	lsls	r3, r3, #2
 8012530:	440b      	add	r3, r1
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d10a      	bne.n	801254e <xTaskPriorityDisinherit+0xaa>
 8012538:	693b      	ldr	r3, [r7, #16]
 801253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801253c:	2201      	movs	r2, #1
 801253e:	fa02 f303 	lsl.w	r3, r2, r3
 8012542:	43da      	mvns	r2, r3
 8012544:	4b18      	ldr	r3, [pc, #96]	; (80125a8 <xTaskPriorityDisinherit+0x104>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	4013      	ands	r3, r2
 801254a:	4a17      	ldr	r2, [pc, #92]	; (80125a8 <xTaskPriorityDisinherit+0x104>)
 801254c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801255a:	f1c3 0207 	rsb	r2, r3, #7
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012566:	2201      	movs	r2, #1
 8012568:	409a      	lsls	r2, r3
 801256a:	4b0f      	ldr	r3, [pc, #60]	; (80125a8 <xTaskPriorityDisinherit+0x104>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	4313      	orrs	r3, r2
 8012570:	4a0d      	ldr	r2, [pc, #52]	; (80125a8 <xTaskPriorityDisinherit+0x104>)
 8012572:	6013      	str	r3, [r2, #0]
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012578:	4613      	mov	r3, r2
 801257a:	009b      	lsls	r3, r3, #2
 801257c:	4413      	add	r3, r2
 801257e:	009b      	lsls	r3, r3, #2
 8012580:	4a08      	ldr	r2, [pc, #32]	; (80125a4 <xTaskPriorityDisinherit+0x100>)
 8012582:	441a      	add	r2, r3
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	3304      	adds	r3, #4
 8012588:	4619      	mov	r1, r3
 801258a:	4610      	mov	r0, r2
 801258c:	f7fe fa57 	bl	8010a3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012590:	2301      	movs	r3, #1
 8012592:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012594:	697b      	ldr	r3, [r7, #20]
	}
 8012596:	4618      	mov	r0, r3
 8012598:	3718      	adds	r7, #24
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	20000220 	.word	0x20000220
 80125a4:	20000224 	.word	0x20000224
 80125a8:	200002fc 	.word	0x200002fc

080125ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b088      	sub	sp, #32
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80125ba:	2301      	movs	r3, #1
 80125bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	f000 8086 	beq.w	80126d2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80125c6:	69bb      	ldr	r3, [r7, #24]
 80125c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d109      	bne.n	80125e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80125ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d2:	f383 8811 	msr	BASEPRI, r3
 80125d6:	f3bf 8f6f 	isb	sy
 80125da:	f3bf 8f4f 	dsb	sy
 80125de:	60fb      	str	r3, [r7, #12]
 80125e0:	e7fe      	b.n	80125e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80125e2:	69bb      	ldr	r3, [r7, #24]
 80125e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125e6:	683a      	ldr	r2, [r7, #0]
 80125e8:	429a      	cmp	r2, r3
 80125ea:	d902      	bls.n	80125f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	61fb      	str	r3, [r7, #28]
 80125f0:	e002      	b.n	80125f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80125f2:	69bb      	ldr	r3, [r7, #24]
 80125f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80125f8:	69bb      	ldr	r3, [r7, #24]
 80125fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125fc:	69fa      	ldr	r2, [r7, #28]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d067      	beq.n	80126d2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012602:	69bb      	ldr	r3, [r7, #24]
 8012604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012606:	697a      	ldr	r2, [r7, #20]
 8012608:	429a      	cmp	r2, r3
 801260a:	d162      	bne.n	80126d2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801260c:	4b33      	ldr	r3, [pc, #204]	; (80126dc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	69ba      	ldr	r2, [r7, #24]
 8012612:	429a      	cmp	r2, r3
 8012614:	d109      	bne.n	801262a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8012616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801261a:	f383 8811 	msr	BASEPRI, r3
 801261e:	f3bf 8f6f 	isb	sy
 8012622:	f3bf 8f4f 	dsb	sy
 8012626:	60bb      	str	r3, [r7, #8]
 8012628:	e7fe      	b.n	8012628 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801262a:	69bb      	ldr	r3, [r7, #24]
 801262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801262e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012630:	69bb      	ldr	r3, [r7, #24]
 8012632:	69fa      	ldr	r2, [r7, #28]
 8012634:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012636:	69bb      	ldr	r3, [r7, #24]
 8012638:	699b      	ldr	r3, [r3, #24]
 801263a:	2b00      	cmp	r3, #0
 801263c:	db04      	blt.n	8012648 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	f1c3 0207 	rsb	r2, r3, #7
 8012644:	69bb      	ldr	r3, [r7, #24]
 8012646:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012648:	69bb      	ldr	r3, [r7, #24]
 801264a:	6959      	ldr	r1, [r3, #20]
 801264c:	693a      	ldr	r2, [r7, #16]
 801264e:	4613      	mov	r3, r2
 8012650:	009b      	lsls	r3, r3, #2
 8012652:	4413      	add	r3, r2
 8012654:	009b      	lsls	r3, r3, #2
 8012656:	4a22      	ldr	r2, [pc, #136]	; (80126e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012658:	4413      	add	r3, r2
 801265a:	4299      	cmp	r1, r3
 801265c:	d101      	bne.n	8012662 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 801265e:	2301      	movs	r3, #1
 8012660:	e000      	b.n	8012664 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8012662:	2300      	movs	r3, #0
 8012664:	2b00      	cmp	r3, #0
 8012666:	d034      	beq.n	80126d2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012668:	69bb      	ldr	r3, [r7, #24]
 801266a:	3304      	adds	r3, #4
 801266c:	4618      	mov	r0, r3
 801266e:	f7fe fa43 	bl	8010af8 <uxListRemove>
 8012672:	4603      	mov	r3, r0
 8012674:	2b00      	cmp	r3, #0
 8012676:	d115      	bne.n	80126a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012678:	69bb      	ldr	r3, [r7, #24]
 801267a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801267c:	4918      	ldr	r1, [pc, #96]	; (80126e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801267e:	4613      	mov	r3, r2
 8012680:	009b      	lsls	r3, r3, #2
 8012682:	4413      	add	r3, r2
 8012684:	009b      	lsls	r3, r3, #2
 8012686:	440b      	add	r3, r1
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d10a      	bne.n	80126a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012692:	2201      	movs	r2, #1
 8012694:	fa02 f303 	lsl.w	r3, r2, r3
 8012698:	43da      	mvns	r2, r3
 801269a:	4b12      	ldr	r3, [pc, #72]	; (80126e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	4013      	ands	r3, r2
 80126a0:	4a10      	ldr	r2, [pc, #64]	; (80126e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80126a2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80126a4:	69bb      	ldr	r3, [r7, #24]
 80126a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126a8:	2201      	movs	r2, #1
 80126aa:	409a      	lsls	r2, r3
 80126ac:	4b0d      	ldr	r3, [pc, #52]	; (80126e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	4313      	orrs	r3, r2
 80126b2:	4a0c      	ldr	r2, [pc, #48]	; (80126e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80126b4:	6013      	str	r3, [r2, #0]
 80126b6:	69bb      	ldr	r3, [r7, #24]
 80126b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126ba:	4613      	mov	r3, r2
 80126bc:	009b      	lsls	r3, r3, #2
 80126be:	4413      	add	r3, r2
 80126c0:	009b      	lsls	r3, r3, #2
 80126c2:	4a07      	ldr	r2, [pc, #28]	; (80126e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80126c4:	441a      	add	r2, r3
 80126c6:	69bb      	ldr	r3, [r7, #24]
 80126c8:	3304      	adds	r3, #4
 80126ca:	4619      	mov	r1, r3
 80126cc:	4610      	mov	r0, r2
 80126ce:	f7fe f9b6 	bl	8010a3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80126d2:	bf00      	nop
 80126d4:	3720      	adds	r7, #32
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	bf00      	nop
 80126dc:	20000220 	.word	0x20000220
 80126e0:	20000224 	.word	0x20000224
 80126e4:	200002fc 	.word	0x200002fc

080126e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80126e8:	b480      	push	{r7}
 80126ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80126ec:	4b07      	ldr	r3, [pc, #28]	; (801270c <pvTaskIncrementMutexHeldCount+0x24>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d004      	beq.n	80126fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80126f4:	4b05      	ldr	r3, [pc, #20]	; (801270c <pvTaskIncrementMutexHeldCount+0x24>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80126fa:	3201      	adds	r2, #1
 80126fc:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		return pxCurrentTCB;
 80126fe:	4b03      	ldr	r3, [pc, #12]	; (801270c <pvTaskIncrementMutexHeldCount+0x24>)
 8012700:	681b      	ldr	r3, [r3, #0]
	}
 8012702:	4618      	mov	r0, r3
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr
 801270c:	20000220 	.word	0x20000220

08012710 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b084      	sub	sp, #16
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801271a:	4b21      	ldr	r3, [pc, #132]	; (80127a0 <prvAddCurrentTaskToDelayedList+0x90>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012720:	4b20      	ldr	r3, [pc, #128]	; (80127a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	3304      	adds	r3, #4
 8012726:	4618      	mov	r0, r3
 8012728:	f7fe f9e6 	bl	8010af8 <uxListRemove>
 801272c:	4603      	mov	r3, r0
 801272e:	2b00      	cmp	r3, #0
 8012730:	d10b      	bne.n	801274a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8012732:	4b1c      	ldr	r3, [pc, #112]	; (80127a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012738:	2201      	movs	r2, #1
 801273a:	fa02 f303 	lsl.w	r3, r2, r3
 801273e:	43da      	mvns	r2, r3
 8012740:	4b19      	ldr	r3, [pc, #100]	; (80127a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4013      	ands	r3, r2
 8012746:	4a18      	ldr	r2, [pc, #96]	; (80127a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8012748:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 801274a:	68fa      	ldr	r2, [r7, #12]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	4413      	add	r3, r2
 8012750:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012752:	4b14      	ldr	r3, [pc, #80]	; (80127a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	68ba      	ldr	r2, [r7, #8]
 8012758:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 801275a:	68ba      	ldr	r2, [r7, #8]
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	429a      	cmp	r2, r3
 8012760:	d209      	bcs.n	8012776 <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012762:	4b12      	ldr	r3, [pc, #72]	; (80127ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8012764:	681a      	ldr	r2, [r3, #0]
 8012766:	4b0f      	ldr	r3, [pc, #60]	; (80127a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	3304      	adds	r3, #4
 801276c:	4619      	mov	r1, r3
 801276e:	4610      	mov	r0, r2
 8012770:	f7fe f989 	bl	8010a86 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012774:	e010      	b.n	8012798 <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012776:	4b0e      	ldr	r3, [pc, #56]	; (80127b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012778:	681a      	ldr	r2, [r3, #0]
 801277a:	4b0a      	ldr	r3, [pc, #40]	; (80127a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	3304      	adds	r3, #4
 8012780:	4619      	mov	r1, r3
 8012782:	4610      	mov	r0, r2
 8012784:	f7fe f97f 	bl	8010a86 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8012788:	4b0a      	ldr	r3, [pc, #40]	; (80127b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	68ba      	ldr	r2, [r7, #8]
 801278e:	429a      	cmp	r2, r3
 8012790:	d202      	bcs.n	8012798 <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 8012792:	4a08      	ldr	r2, [pc, #32]	; (80127b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	6013      	str	r3, [r2, #0]
}
 8012798:	bf00      	nop
 801279a:	3710      	adds	r7, #16
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}
 80127a0:	200002f8 	.word	0x200002f8
 80127a4:	20000220 	.word	0x20000220
 80127a8:	200002fc 	.word	0x200002fc
 80127ac:	200002dc 	.word	0x200002dc
 80127b0:	200002d8 	.word	0x200002d8
 80127b4:	20000314 	.word	0x20000314

080127b8 <__errno>:
 80127b8:	4b01      	ldr	r3, [pc, #4]	; (80127c0 <__errno+0x8>)
 80127ba:	6818      	ldr	r0, [r3, #0]
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop
 80127c0:	20000024 	.word	0x20000024

080127c4 <__libc_init_array>:
 80127c4:	b570      	push	{r4, r5, r6, lr}
 80127c6:	4e0d      	ldr	r6, [pc, #52]	; (80127fc <__libc_init_array+0x38>)
 80127c8:	4c0d      	ldr	r4, [pc, #52]	; (8012800 <__libc_init_array+0x3c>)
 80127ca:	1ba4      	subs	r4, r4, r6
 80127cc:	10a4      	asrs	r4, r4, #2
 80127ce:	2500      	movs	r5, #0
 80127d0:	42a5      	cmp	r5, r4
 80127d2:	d109      	bne.n	80127e8 <__libc_init_array+0x24>
 80127d4:	4e0b      	ldr	r6, [pc, #44]	; (8012804 <__libc_init_array+0x40>)
 80127d6:	4c0c      	ldr	r4, [pc, #48]	; (8012808 <__libc_init_array+0x44>)
 80127d8:	f002 ff28 	bl	801562c <_init>
 80127dc:	1ba4      	subs	r4, r4, r6
 80127de:	10a4      	asrs	r4, r4, #2
 80127e0:	2500      	movs	r5, #0
 80127e2:	42a5      	cmp	r5, r4
 80127e4:	d105      	bne.n	80127f2 <__libc_init_array+0x2e>
 80127e6:	bd70      	pop	{r4, r5, r6, pc}
 80127e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80127ec:	4798      	blx	r3
 80127ee:	3501      	adds	r5, #1
 80127f0:	e7ee      	b.n	80127d0 <__libc_init_array+0xc>
 80127f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80127f6:	4798      	blx	r3
 80127f8:	3501      	adds	r5, #1
 80127fa:	e7f2      	b.n	80127e2 <__libc_init_array+0x1e>
 80127fc:	080164a8 	.word	0x080164a8
 8012800:	080164a8 	.word	0x080164a8
 8012804:	080164a8 	.word	0x080164a8
 8012808:	080164ac 	.word	0x080164ac

0801280c <__locale_ctype_ptr_l>:
 801280c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012810:	4770      	bx	lr
	...

08012814 <__locale_ctype_ptr>:
 8012814:	4b04      	ldr	r3, [pc, #16]	; (8012828 <__locale_ctype_ptr+0x14>)
 8012816:	4a05      	ldr	r2, [pc, #20]	; (801282c <__locale_ctype_ptr+0x18>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	6a1b      	ldr	r3, [r3, #32]
 801281c:	2b00      	cmp	r3, #0
 801281e:	bf08      	it	eq
 8012820:	4613      	moveq	r3, r2
 8012822:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8012826:	4770      	bx	lr
 8012828:	20000024 	.word	0x20000024
 801282c:	20000088 	.word	0x20000088

08012830 <__ascii_mbtowc>:
 8012830:	b082      	sub	sp, #8
 8012832:	b901      	cbnz	r1, 8012836 <__ascii_mbtowc+0x6>
 8012834:	a901      	add	r1, sp, #4
 8012836:	b142      	cbz	r2, 801284a <__ascii_mbtowc+0x1a>
 8012838:	b14b      	cbz	r3, 801284e <__ascii_mbtowc+0x1e>
 801283a:	7813      	ldrb	r3, [r2, #0]
 801283c:	600b      	str	r3, [r1, #0]
 801283e:	7812      	ldrb	r2, [r2, #0]
 8012840:	1c10      	adds	r0, r2, #0
 8012842:	bf18      	it	ne
 8012844:	2001      	movne	r0, #1
 8012846:	b002      	add	sp, #8
 8012848:	4770      	bx	lr
 801284a:	4610      	mov	r0, r2
 801284c:	e7fb      	b.n	8012846 <__ascii_mbtowc+0x16>
 801284e:	f06f 0001 	mvn.w	r0, #1
 8012852:	e7f8      	b.n	8012846 <__ascii_mbtowc+0x16>

08012854 <memcpy>:
 8012854:	b510      	push	{r4, lr}
 8012856:	1e43      	subs	r3, r0, #1
 8012858:	440a      	add	r2, r1
 801285a:	4291      	cmp	r1, r2
 801285c:	d100      	bne.n	8012860 <memcpy+0xc>
 801285e:	bd10      	pop	{r4, pc}
 8012860:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012864:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012868:	e7f7      	b.n	801285a <memcpy+0x6>

0801286a <memmove>:
 801286a:	4288      	cmp	r0, r1
 801286c:	b510      	push	{r4, lr}
 801286e:	eb01 0302 	add.w	r3, r1, r2
 8012872:	d807      	bhi.n	8012884 <memmove+0x1a>
 8012874:	1e42      	subs	r2, r0, #1
 8012876:	4299      	cmp	r1, r3
 8012878:	d00a      	beq.n	8012890 <memmove+0x26>
 801287a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801287e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012882:	e7f8      	b.n	8012876 <memmove+0xc>
 8012884:	4283      	cmp	r3, r0
 8012886:	d9f5      	bls.n	8012874 <memmove+0xa>
 8012888:	1881      	adds	r1, r0, r2
 801288a:	1ad2      	subs	r2, r2, r3
 801288c:	42d3      	cmn	r3, r2
 801288e:	d100      	bne.n	8012892 <memmove+0x28>
 8012890:	bd10      	pop	{r4, pc}
 8012892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012896:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801289a:	e7f7      	b.n	801288c <memmove+0x22>

0801289c <memset>:
 801289c:	4402      	add	r2, r0
 801289e:	4603      	mov	r3, r0
 80128a0:	4293      	cmp	r3, r2
 80128a2:	d100      	bne.n	80128a6 <memset+0xa>
 80128a4:	4770      	bx	lr
 80128a6:	f803 1b01 	strb.w	r1, [r3], #1
 80128aa:	e7f9      	b.n	80128a0 <memset+0x4>

080128ac <siprintf>:
 80128ac:	b40e      	push	{r1, r2, r3}
 80128ae:	b500      	push	{lr}
 80128b0:	b09c      	sub	sp, #112	; 0x70
 80128b2:	ab1d      	add	r3, sp, #116	; 0x74
 80128b4:	9002      	str	r0, [sp, #8]
 80128b6:	9006      	str	r0, [sp, #24]
 80128b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80128bc:	4809      	ldr	r0, [pc, #36]	; (80128e4 <siprintf+0x38>)
 80128be:	9107      	str	r1, [sp, #28]
 80128c0:	9104      	str	r1, [sp, #16]
 80128c2:	4909      	ldr	r1, [pc, #36]	; (80128e8 <siprintf+0x3c>)
 80128c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80128c8:	9105      	str	r1, [sp, #20]
 80128ca:	6800      	ldr	r0, [r0, #0]
 80128cc:	9301      	str	r3, [sp, #4]
 80128ce:	a902      	add	r1, sp, #8
 80128d0:	f000 fbc4 	bl	801305c <_svfiprintf_r>
 80128d4:	9b02      	ldr	r3, [sp, #8]
 80128d6:	2200      	movs	r2, #0
 80128d8:	701a      	strb	r2, [r3, #0]
 80128da:	b01c      	add	sp, #112	; 0x70
 80128dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80128e0:	b003      	add	sp, #12
 80128e2:	4770      	bx	lr
 80128e4:	20000024 	.word	0x20000024
 80128e8:	ffff0208 	.word	0xffff0208

080128ec <strchr>:
 80128ec:	b2c9      	uxtb	r1, r1
 80128ee:	4603      	mov	r3, r0
 80128f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128f4:	b11a      	cbz	r2, 80128fe <strchr+0x12>
 80128f6:	428a      	cmp	r2, r1
 80128f8:	d1f9      	bne.n	80128ee <strchr+0x2>
 80128fa:	4618      	mov	r0, r3
 80128fc:	4770      	bx	lr
 80128fe:	2900      	cmp	r1, #0
 8012900:	bf18      	it	ne
 8012902:	2300      	movne	r3, #0
 8012904:	e7f9      	b.n	80128fa <strchr+0xe>

08012906 <strncasecmp>:
 8012906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801290a:	4606      	mov	r6, r0
 801290c:	460f      	mov	r7, r1
 801290e:	eb00 0802 	add.w	r8, r0, r2
 8012912:	45b0      	cmp	r8, r6
 8012914:	d019      	beq.n	801294a <strncasecmp+0x44>
 8012916:	f816 4b01 	ldrb.w	r4, [r6], #1
 801291a:	f7ff ff7b 	bl	8012814 <__locale_ctype_ptr>
 801291e:	4420      	add	r0, r4
 8012920:	f817 5b01 	ldrb.w	r5, [r7], #1
 8012924:	7843      	ldrb	r3, [r0, #1]
 8012926:	f003 0303 	and.w	r3, r3, #3
 801292a:	2b01      	cmp	r3, #1
 801292c:	bf08      	it	eq
 801292e:	3420      	addeq	r4, #32
 8012930:	f7ff ff70 	bl	8012814 <__locale_ctype_ptr>
 8012934:	4428      	add	r0, r5
 8012936:	7842      	ldrb	r2, [r0, #1]
 8012938:	f002 0203 	and.w	r2, r2, #3
 801293c:	2a01      	cmp	r2, #1
 801293e:	bf08      	it	eq
 8012940:	3520      	addeq	r5, #32
 8012942:	1b60      	subs	r0, r4, r5
 8012944:	d102      	bne.n	801294c <strncasecmp+0x46>
 8012946:	2d00      	cmp	r5, #0
 8012948:	d1e3      	bne.n	8012912 <strncasecmp+0xc>
 801294a:	2000      	movs	r0, #0
 801294c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012950 <strnlen>:
 8012950:	b510      	push	{r4, lr}
 8012952:	4603      	mov	r3, r0
 8012954:	4401      	add	r1, r0
 8012956:	428b      	cmp	r3, r1
 8012958:	d002      	beq.n	8012960 <strnlen+0x10>
 801295a:	781a      	ldrb	r2, [r3, #0]
 801295c:	1c5c      	adds	r4, r3, #1
 801295e:	b90a      	cbnz	r2, 8012964 <strnlen+0x14>
 8012960:	1a18      	subs	r0, r3, r0
 8012962:	bd10      	pop	{r4, pc}
 8012964:	4623      	mov	r3, r4
 8012966:	e7f6      	b.n	8012956 <strnlen+0x6>

08012968 <_strtol_l.isra.0>:
 8012968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801296c:	4680      	mov	r8, r0
 801296e:	4689      	mov	r9, r1
 8012970:	4692      	mov	sl, r2
 8012972:	461e      	mov	r6, r3
 8012974:	460f      	mov	r7, r1
 8012976:	463d      	mov	r5, r7
 8012978:	9808      	ldr	r0, [sp, #32]
 801297a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801297e:	f7ff ff45 	bl	801280c <__locale_ctype_ptr_l>
 8012982:	4420      	add	r0, r4
 8012984:	7843      	ldrb	r3, [r0, #1]
 8012986:	f013 0308 	ands.w	r3, r3, #8
 801298a:	d132      	bne.n	80129f2 <_strtol_l.isra.0+0x8a>
 801298c:	2c2d      	cmp	r4, #45	; 0x2d
 801298e:	d132      	bne.n	80129f6 <_strtol_l.isra.0+0x8e>
 8012990:	787c      	ldrb	r4, [r7, #1]
 8012992:	1cbd      	adds	r5, r7, #2
 8012994:	2201      	movs	r2, #1
 8012996:	2e00      	cmp	r6, #0
 8012998:	d05d      	beq.n	8012a56 <_strtol_l.isra.0+0xee>
 801299a:	2e10      	cmp	r6, #16
 801299c:	d109      	bne.n	80129b2 <_strtol_l.isra.0+0x4a>
 801299e:	2c30      	cmp	r4, #48	; 0x30
 80129a0:	d107      	bne.n	80129b2 <_strtol_l.isra.0+0x4a>
 80129a2:	782b      	ldrb	r3, [r5, #0]
 80129a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80129a8:	2b58      	cmp	r3, #88	; 0x58
 80129aa:	d14f      	bne.n	8012a4c <_strtol_l.isra.0+0xe4>
 80129ac:	786c      	ldrb	r4, [r5, #1]
 80129ae:	2610      	movs	r6, #16
 80129b0:	3502      	adds	r5, #2
 80129b2:	2a00      	cmp	r2, #0
 80129b4:	bf14      	ite	ne
 80129b6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80129ba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80129be:	2700      	movs	r7, #0
 80129c0:	fbb1 fcf6 	udiv	ip, r1, r6
 80129c4:	4638      	mov	r0, r7
 80129c6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80129ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80129ce:	2b09      	cmp	r3, #9
 80129d0:	d817      	bhi.n	8012a02 <_strtol_l.isra.0+0x9a>
 80129d2:	461c      	mov	r4, r3
 80129d4:	42a6      	cmp	r6, r4
 80129d6:	dd23      	ble.n	8012a20 <_strtol_l.isra.0+0xb8>
 80129d8:	1c7b      	adds	r3, r7, #1
 80129da:	d007      	beq.n	80129ec <_strtol_l.isra.0+0x84>
 80129dc:	4584      	cmp	ip, r0
 80129de:	d31c      	bcc.n	8012a1a <_strtol_l.isra.0+0xb2>
 80129e0:	d101      	bne.n	80129e6 <_strtol_l.isra.0+0x7e>
 80129e2:	45a6      	cmp	lr, r4
 80129e4:	db19      	blt.n	8012a1a <_strtol_l.isra.0+0xb2>
 80129e6:	fb00 4006 	mla	r0, r0, r6, r4
 80129ea:	2701      	movs	r7, #1
 80129ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80129f0:	e7eb      	b.n	80129ca <_strtol_l.isra.0+0x62>
 80129f2:	462f      	mov	r7, r5
 80129f4:	e7bf      	b.n	8012976 <_strtol_l.isra.0+0xe>
 80129f6:	2c2b      	cmp	r4, #43	; 0x2b
 80129f8:	bf04      	itt	eq
 80129fa:	1cbd      	addeq	r5, r7, #2
 80129fc:	787c      	ldrbeq	r4, [r7, #1]
 80129fe:	461a      	mov	r2, r3
 8012a00:	e7c9      	b.n	8012996 <_strtol_l.isra.0+0x2e>
 8012a02:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012a06:	2b19      	cmp	r3, #25
 8012a08:	d801      	bhi.n	8012a0e <_strtol_l.isra.0+0xa6>
 8012a0a:	3c37      	subs	r4, #55	; 0x37
 8012a0c:	e7e2      	b.n	80129d4 <_strtol_l.isra.0+0x6c>
 8012a0e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012a12:	2b19      	cmp	r3, #25
 8012a14:	d804      	bhi.n	8012a20 <_strtol_l.isra.0+0xb8>
 8012a16:	3c57      	subs	r4, #87	; 0x57
 8012a18:	e7dc      	b.n	80129d4 <_strtol_l.isra.0+0x6c>
 8012a1a:	f04f 37ff 	mov.w	r7, #4294967295
 8012a1e:	e7e5      	b.n	80129ec <_strtol_l.isra.0+0x84>
 8012a20:	1c7b      	adds	r3, r7, #1
 8012a22:	d108      	bne.n	8012a36 <_strtol_l.isra.0+0xce>
 8012a24:	2322      	movs	r3, #34	; 0x22
 8012a26:	f8c8 3000 	str.w	r3, [r8]
 8012a2a:	4608      	mov	r0, r1
 8012a2c:	f1ba 0f00 	cmp.w	sl, #0
 8012a30:	d107      	bne.n	8012a42 <_strtol_l.isra.0+0xda>
 8012a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a36:	b102      	cbz	r2, 8012a3a <_strtol_l.isra.0+0xd2>
 8012a38:	4240      	negs	r0, r0
 8012a3a:	f1ba 0f00 	cmp.w	sl, #0
 8012a3e:	d0f8      	beq.n	8012a32 <_strtol_l.isra.0+0xca>
 8012a40:	b10f      	cbz	r7, 8012a46 <_strtol_l.isra.0+0xde>
 8012a42:	f105 39ff 	add.w	r9, r5, #4294967295
 8012a46:	f8ca 9000 	str.w	r9, [sl]
 8012a4a:	e7f2      	b.n	8012a32 <_strtol_l.isra.0+0xca>
 8012a4c:	2430      	movs	r4, #48	; 0x30
 8012a4e:	2e00      	cmp	r6, #0
 8012a50:	d1af      	bne.n	80129b2 <_strtol_l.isra.0+0x4a>
 8012a52:	2608      	movs	r6, #8
 8012a54:	e7ad      	b.n	80129b2 <_strtol_l.isra.0+0x4a>
 8012a56:	2c30      	cmp	r4, #48	; 0x30
 8012a58:	d0a3      	beq.n	80129a2 <_strtol_l.isra.0+0x3a>
 8012a5a:	260a      	movs	r6, #10
 8012a5c:	e7a9      	b.n	80129b2 <_strtol_l.isra.0+0x4a>
	...

08012a60 <strtol>:
 8012a60:	4b08      	ldr	r3, [pc, #32]	; (8012a84 <strtol+0x24>)
 8012a62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a64:	681c      	ldr	r4, [r3, #0]
 8012a66:	4d08      	ldr	r5, [pc, #32]	; (8012a88 <strtol+0x28>)
 8012a68:	6a23      	ldr	r3, [r4, #32]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	bf08      	it	eq
 8012a6e:	462b      	moveq	r3, r5
 8012a70:	9300      	str	r3, [sp, #0]
 8012a72:	4613      	mov	r3, r2
 8012a74:	460a      	mov	r2, r1
 8012a76:	4601      	mov	r1, r0
 8012a78:	4620      	mov	r0, r4
 8012a7a:	f7ff ff75 	bl	8012968 <_strtol_l.isra.0>
 8012a7e:	b003      	add	sp, #12
 8012a80:	bd30      	pop	{r4, r5, pc}
 8012a82:	bf00      	nop
 8012a84:	20000024 	.word	0x20000024
 8012a88:	20000088 	.word	0x20000088

08012a8c <_strtoll_l.isra.0>:
 8012a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a90:	b089      	sub	sp, #36	; 0x24
 8012a92:	468a      	mov	sl, r1
 8012a94:	9007      	str	r0, [sp, #28]
 8012a96:	4693      	mov	fp, r2
 8012a98:	461f      	mov	r7, r3
 8012a9a:	4688      	mov	r8, r1
 8012a9c:	4645      	mov	r5, r8
 8012a9e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012aa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012aa4:	f7ff feb2 	bl	801280c <__locale_ctype_ptr_l>
 8012aa8:	4420      	add	r0, r4
 8012aaa:	7846      	ldrb	r6, [r0, #1]
 8012aac:	f016 0608 	ands.w	r6, r6, #8
 8012ab0:	d155      	bne.n	8012b5e <_strtoll_l.isra.0+0xd2>
 8012ab2:	2c2d      	cmp	r4, #45	; 0x2d
 8012ab4:	d155      	bne.n	8012b62 <_strtoll_l.isra.0+0xd6>
 8012ab6:	f898 4001 	ldrb.w	r4, [r8, #1]
 8012aba:	f108 0502 	add.w	r5, r8, #2
 8012abe:	2601      	movs	r6, #1
 8012ac0:	2f00      	cmp	r7, #0
 8012ac2:	f000 8091 	beq.w	8012be8 <_strtoll_l.isra.0+0x15c>
 8012ac6:	2f10      	cmp	r7, #16
 8012ac8:	d10a      	bne.n	8012ae0 <_strtoll_l.isra.0+0x54>
 8012aca:	2c30      	cmp	r4, #48	; 0x30
 8012acc:	d108      	bne.n	8012ae0 <_strtoll_l.isra.0+0x54>
 8012ace:	782b      	ldrb	r3, [r5, #0]
 8012ad0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012ad4:	2b58      	cmp	r3, #88	; 0x58
 8012ad6:	f040 8081 	bne.w	8012bdc <_strtoll_l.isra.0+0x150>
 8012ada:	786c      	ldrb	r4, [r5, #1]
 8012adc:	2710      	movs	r7, #16
 8012ade:	3502      	adds	r5, #2
 8012ae0:	2e00      	cmp	r6, #0
 8012ae2:	d145      	bne.n	8012b70 <_strtoll_l.isra.0+0xe4>
 8012ae4:	f04f 39ff 	mov.w	r9, #4294967295
 8012ae8:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8012aec:	463a      	mov	r2, r7
 8012aee:	17fb      	asrs	r3, r7, #31
 8012af0:	4648      	mov	r0, r9
 8012af2:	4641      	mov	r1, r8
 8012af4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012af8:	f7ee f8de 	bl	8000cb8 <__aeabi_uldivmod>
 8012afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b00:	4696      	mov	lr, r2
 8012b02:	2100      	movs	r1, #0
 8012b04:	2200      	movs	r2, #0
 8012b06:	e9cd 1200 	strd	r1, r2, [sp]
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012b10:	f1bc 0f09 	cmp.w	ip, #9
 8012b14:	d831      	bhi.n	8012b7a <_strtoll_l.isra.0+0xee>
 8012b16:	4664      	mov	r4, ip
 8012b18:	42a7      	cmp	r7, r4
 8012b1a:	dd3f      	ble.n	8012b9c <_strtoll_l.isra.0+0x110>
 8012b1c:	1c59      	adds	r1, r3, #1
 8012b1e:	d01b      	beq.n	8012b58 <_strtoll_l.isra.0+0xcc>
 8012b20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b28:	4299      	cmp	r1, r3
 8012b2a:	bf08      	it	eq
 8012b2c:	4290      	cmpeq	r0, r2
 8012b2e:	d332      	bcc.n	8012b96 <_strtoll_l.isra.0+0x10a>
 8012b30:	d101      	bne.n	8012b36 <_strtoll_l.isra.0+0xaa>
 8012b32:	45a6      	cmp	lr, r4
 8012b34:	db2f      	blt.n	8012b96 <_strtoll_l.isra.0+0x10a>
 8012b36:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8012b3a:	9800      	ldr	r0, [sp, #0]
 8012b3c:	434b      	muls	r3, r1
 8012b3e:	9903      	ldr	r1, [sp, #12]
 8012b40:	fb00 3301 	mla	r3, r0, r1, r3
 8012b44:	9902      	ldr	r1, [sp, #8]
 8012b46:	fba1 0100 	umull	r0, r1, r1, r0
 8012b4a:	1902      	adds	r2, r0, r4
 8012b4c:	4419      	add	r1, r3
 8012b4e:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
 8012b52:	e9cd 2300 	strd	r2, r3, [sp]
 8012b56:	2301      	movs	r3, #1
 8012b58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b5c:	e7d6      	b.n	8012b0c <_strtoll_l.isra.0+0x80>
 8012b5e:	46a8      	mov	r8, r5
 8012b60:	e79c      	b.n	8012a9c <_strtoll_l.isra.0+0x10>
 8012b62:	2c2b      	cmp	r4, #43	; 0x2b
 8012b64:	bf04      	itt	eq
 8012b66:	f108 0502 	addeq.w	r5, r8, #2
 8012b6a:	f898 4001 	ldrbeq.w	r4, [r8, #1]
 8012b6e:	e7a7      	b.n	8012ac0 <_strtoll_l.isra.0+0x34>
 8012b70:	f04f 0900 	mov.w	r9, #0
 8012b74:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8012b78:	e7b8      	b.n	8012aec <_strtoll_l.isra.0+0x60>
 8012b7a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012b7e:	f1bc 0f19 	cmp.w	ip, #25
 8012b82:	d801      	bhi.n	8012b88 <_strtoll_l.isra.0+0xfc>
 8012b84:	3c37      	subs	r4, #55	; 0x37
 8012b86:	e7c7      	b.n	8012b18 <_strtoll_l.isra.0+0x8c>
 8012b88:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012b8c:	f1bc 0f19 	cmp.w	ip, #25
 8012b90:	d804      	bhi.n	8012b9c <_strtoll_l.isra.0+0x110>
 8012b92:	3c57      	subs	r4, #87	; 0x57
 8012b94:	e7c0      	b.n	8012b18 <_strtoll_l.isra.0+0x8c>
 8012b96:	f04f 33ff 	mov.w	r3, #4294967295
 8012b9a:	e7dd      	b.n	8012b58 <_strtoll_l.isra.0+0xcc>
 8012b9c:	1c5a      	adds	r2, r3, #1
 8012b9e:	d10c      	bne.n	8012bba <_strtoll_l.isra.0+0x12e>
 8012ba0:	9a07      	ldr	r2, [sp, #28]
 8012ba2:	2322      	movs	r3, #34	; 0x22
 8012ba4:	6013      	str	r3, [r2, #0]
 8012ba6:	e9cd 9800 	strd	r9, r8, [sp]
 8012baa:	f1bb 0f00 	cmp.w	fp, #0
 8012bae:	d110      	bne.n	8012bd2 <_strtoll_l.isra.0+0x146>
 8012bb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bb4:	b009      	add	sp, #36	; 0x24
 8012bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bba:	b136      	cbz	r6, 8012bca <_strtoll_l.isra.0+0x13e>
 8012bbc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012bc0:	4249      	negs	r1, r1
 8012bc2:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 8012bc6:	e9cd 1200 	strd	r1, r2, [sp]
 8012bca:	f1bb 0f00 	cmp.w	fp, #0
 8012bce:	d0ef      	beq.n	8012bb0 <_strtoll_l.isra.0+0x124>
 8012bd0:	b10b      	cbz	r3, 8012bd6 <_strtoll_l.isra.0+0x14a>
 8012bd2:	f105 3aff 	add.w	sl, r5, #4294967295
 8012bd6:	f8cb a000 	str.w	sl, [fp]
 8012bda:	e7e9      	b.n	8012bb0 <_strtoll_l.isra.0+0x124>
 8012bdc:	2430      	movs	r4, #48	; 0x30
 8012bde:	2f00      	cmp	r7, #0
 8012be0:	f47f af7e 	bne.w	8012ae0 <_strtoll_l.isra.0+0x54>
 8012be4:	2708      	movs	r7, #8
 8012be6:	e77b      	b.n	8012ae0 <_strtoll_l.isra.0+0x54>
 8012be8:	2c30      	cmp	r4, #48	; 0x30
 8012bea:	f43f af70 	beq.w	8012ace <_strtoll_l.isra.0+0x42>
 8012bee:	270a      	movs	r7, #10
 8012bf0:	e776      	b.n	8012ae0 <_strtoll_l.isra.0+0x54>
	...

08012bf4 <strtoll>:
 8012bf4:	4b08      	ldr	r3, [pc, #32]	; (8012c18 <strtoll+0x24>)
 8012bf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bf8:	681c      	ldr	r4, [r3, #0]
 8012bfa:	4d08      	ldr	r5, [pc, #32]	; (8012c1c <strtoll+0x28>)
 8012bfc:	6a23      	ldr	r3, [r4, #32]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	bf08      	it	eq
 8012c02:	462b      	moveq	r3, r5
 8012c04:	9300      	str	r3, [sp, #0]
 8012c06:	4613      	mov	r3, r2
 8012c08:	460a      	mov	r2, r1
 8012c0a:	4601      	mov	r1, r0
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	f7ff ff3d 	bl	8012a8c <_strtoll_l.isra.0>
 8012c12:	b003      	add	sp, #12
 8012c14:	bd30      	pop	{r4, r5, pc}
 8012c16:	bf00      	nop
 8012c18:	20000024 	.word	0x20000024
 8012c1c:	20000088 	.word	0x20000088

08012c20 <_strtoul_l.isra.0>:
 8012c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c24:	4680      	mov	r8, r0
 8012c26:	4689      	mov	r9, r1
 8012c28:	4692      	mov	sl, r2
 8012c2a:	461e      	mov	r6, r3
 8012c2c:	460f      	mov	r7, r1
 8012c2e:	463d      	mov	r5, r7
 8012c30:	9808      	ldr	r0, [sp, #32]
 8012c32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012c36:	f7ff fde9 	bl	801280c <__locale_ctype_ptr_l>
 8012c3a:	4420      	add	r0, r4
 8012c3c:	7843      	ldrb	r3, [r0, #1]
 8012c3e:	f013 0308 	ands.w	r3, r3, #8
 8012c42:	d130      	bne.n	8012ca6 <_strtoul_l.isra.0+0x86>
 8012c44:	2c2d      	cmp	r4, #45	; 0x2d
 8012c46:	d130      	bne.n	8012caa <_strtoul_l.isra.0+0x8a>
 8012c48:	787c      	ldrb	r4, [r7, #1]
 8012c4a:	1cbd      	adds	r5, r7, #2
 8012c4c:	2101      	movs	r1, #1
 8012c4e:	2e00      	cmp	r6, #0
 8012c50:	d05c      	beq.n	8012d0c <_strtoul_l.isra.0+0xec>
 8012c52:	2e10      	cmp	r6, #16
 8012c54:	d109      	bne.n	8012c6a <_strtoul_l.isra.0+0x4a>
 8012c56:	2c30      	cmp	r4, #48	; 0x30
 8012c58:	d107      	bne.n	8012c6a <_strtoul_l.isra.0+0x4a>
 8012c5a:	782b      	ldrb	r3, [r5, #0]
 8012c5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012c60:	2b58      	cmp	r3, #88	; 0x58
 8012c62:	d14e      	bne.n	8012d02 <_strtoul_l.isra.0+0xe2>
 8012c64:	786c      	ldrb	r4, [r5, #1]
 8012c66:	2610      	movs	r6, #16
 8012c68:	3502      	adds	r5, #2
 8012c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c6e:	2300      	movs	r3, #0
 8012c70:	fbb2 f2f6 	udiv	r2, r2, r6
 8012c74:	fb06 fc02 	mul.w	ip, r6, r2
 8012c78:	ea6f 0c0c 	mvn.w	ip, ip
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012c82:	2f09      	cmp	r7, #9
 8012c84:	d817      	bhi.n	8012cb6 <_strtoul_l.isra.0+0x96>
 8012c86:	463c      	mov	r4, r7
 8012c88:	42a6      	cmp	r6, r4
 8012c8a:	dd23      	ble.n	8012cd4 <_strtoul_l.isra.0+0xb4>
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	db1e      	blt.n	8012cce <_strtoul_l.isra.0+0xae>
 8012c90:	4282      	cmp	r2, r0
 8012c92:	d31c      	bcc.n	8012cce <_strtoul_l.isra.0+0xae>
 8012c94:	d101      	bne.n	8012c9a <_strtoul_l.isra.0+0x7a>
 8012c96:	45a4      	cmp	ip, r4
 8012c98:	db19      	blt.n	8012cce <_strtoul_l.isra.0+0xae>
 8012c9a:	fb00 4006 	mla	r0, r0, r6, r4
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ca4:	e7eb      	b.n	8012c7e <_strtoul_l.isra.0+0x5e>
 8012ca6:	462f      	mov	r7, r5
 8012ca8:	e7c1      	b.n	8012c2e <_strtoul_l.isra.0+0xe>
 8012caa:	2c2b      	cmp	r4, #43	; 0x2b
 8012cac:	bf04      	itt	eq
 8012cae:	1cbd      	addeq	r5, r7, #2
 8012cb0:	787c      	ldrbeq	r4, [r7, #1]
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	e7cb      	b.n	8012c4e <_strtoul_l.isra.0+0x2e>
 8012cb6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012cba:	2f19      	cmp	r7, #25
 8012cbc:	d801      	bhi.n	8012cc2 <_strtoul_l.isra.0+0xa2>
 8012cbe:	3c37      	subs	r4, #55	; 0x37
 8012cc0:	e7e2      	b.n	8012c88 <_strtoul_l.isra.0+0x68>
 8012cc2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012cc6:	2f19      	cmp	r7, #25
 8012cc8:	d804      	bhi.n	8012cd4 <_strtoul_l.isra.0+0xb4>
 8012cca:	3c57      	subs	r4, #87	; 0x57
 8012ccc:	e7dc      	b.n	8012c88 <_strtoul_l.isra.0+0x68>
 8012cce:	f04f 33ff 	mov.w	r3, #4294967295
 8012cd2:	e7e5      	b.n	8012ca0 <_strtoul_l.isra.0+0x80>
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	da09      	bge.n	8012cec <_strtoul_l.isra.0+0xcc>
 8012cd8:	2322      	movs	r3, #34	; 0x22
 8012cda:	f8c8 3000 	str.w	r3, [r8]
 8012cde:	f04f 30ff 	mov.w	r0, #4294967295
 8012ce2:	f1ba 0f00 	cmp.w	sl, #0
 8012ce6:	d107      	bne.n	8012cf8 <_strtoul_l.isra.0+0xd8>
 8012ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cec:	b101      	cbz	r1, 8012cf0 <_strtoul_l.isra.0+0xd0>
 8012cee:	4240      	negs	r0, r0
 8012cf0:	f1ba 0f00 	cmp.w	sl, #0
 8012cf4:	d0f8      	beq.n	8012ce8 <_strtoul_l.isra.0+0xc8>
 8012cf6:	b10b      	cbz	r3, 8012cfc <_strtoul_l.isra.0+0xdc>
 8012cf8:	f105 39ff 	add.w	r9, r5, #4294967295
 8012cfc:	f8ca 9000 	str.w	r9, [sl]
 8012d00:	e7f2      	b.n	8012ce8 <_strtoul_l.isra.0+0xc8>
 8012d02:	2430      	movs	r4, #48	; 0x30
 8012d04:	2e00      	cmp	r6, #0
 8012d06:	d1b0      	bne.n	8012c6a <_strtoul_l.isra.0+0x4a>
 8012d08:	2608      	movs	r6, #8
 8012d0a:	e7ae      	b.n	8012c6a <_strtoul_l.isra.0+0x4a>
 8012d0c:	2c30      	cmp	r4, #48	; 0x30
 8012d0e:	d0a4      	beq.n	8012c5a <_strtoul_l.isra.0+0x3a>
 8012d10:	260a      	movs	r6, #10
 8012d12:	e7aa      	b.n	8012c6a <_strtoul_l.isra.0+0x4a>

08012d14 <strtoul>:
 8012d14:	4b08      	ldr	r3, [pc, #32]	; (8012d38 <strtoul+0x24>)
 8012d16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d18:	681c      	ldr	r4, [r3, #0]
 8012d1a:	4d08      	ldr	r5, [pc, #32]	; (8012d3c <strtoul+0x28>)
 8012d1c:	6a23      	ldr	r3, [r4, #32]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	bf08      	it	eq
 8012d22:	462b      	moveq	r3, r5
 8012d24:	9300      	str	r3, [sp, #0]
 8012d26:	4613      	mov	r3, r2
 8012d28:	460a      	mov	r2, r1
 8012d2a:	4601      	mov	r1, r0
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	f7ff ff77 	bl	8012c20 <_strtoul_l.isra.0>
 8012d32:	b003      	add	sp, #12
 8012d34:	bd30      	pop	{r4, r5, pc}
 8012d36:	bf00      	nop
 8012d38:	20000024 	.word	0x20000024
 8012d3c:	20000088 	.word	0x20000088

08012d40 <_strtoull_l.isra.0>:
 8012d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d44:	b087      	sub	sp, #28
 8012d46:	4688      	mov	r8, r1
 8012d48:	9005      	str	r0, [sp, #20]
 8012d4a:	4691      	mov	r9, r2
 8012d4c:	461f      	mov	r7, r3
 8012d4e:	468b      	mov	fp, r1
 8012d50:	465d      	mov	r5, fp
 8012d52:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012d54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012d58:	f7ff fd58 	bl	801280c <__locale_ctype_ptr_l>
 8012d5c:	4420      	add	r0, r4
 8012d5e:	7846      	ldrb	r6, [r0, #1]
 8012d60:	f016 0608 	ands.w	r6, r6, #8
 8012d64:	d158      	bne.n	8012e18 <_strtoull_l.isra.0+0xd8>
 8012d66:	2c2d      	cmp	r4, #45	; 0x2d
 8012d68:	d158      	bne.n	8012e1c <_strtoull_l.isra.0+0xdc>
 8012d6a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8012d6e:	f10b 0502 	add.w	r5, fp, #2
 8012d72:	2601      	movs	r6, #1
 8012d74:	2f00      	cmp	r7, #0
 8012d76:	f000 8093 	beq.w	8012ea0 <_strtoull_l.isra.0+0x160>
 8012d7a:	2f10      	cmp	r7, #16
 8012d7c:	d10a      	bne.n	8012d94 <_strtoull_l.isra.0+0x54>
 8012d7e:	2c30      	cmp	r4, #48	; 0x30
 8012d80:	d108      	bne.n	8012d94 <_strtoull_l.isra.0+0x54>
 8012d82:	782b      	ldrb	r3, [r5, #0]
 8012d84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012d88:	2b58      	cmp	r3, #88	; 0x58
 8012d8a:	f040 8083 	bne.w	8012e94 <_strtoull_l.isra.0+0x154>
 8012d8e:	786c      	ldrb	r4, [r5, #1]
 8012d90:	2710      	movs	r7, #16
 8012d92:	3502      	adds	r5, #2
 8012d94:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8012d98:	463a      	mov	r2, r7
 8012d9a:	465b      	mov	r3, fp
 8012d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012da0:	f04f 31ff 	mov.w	r1, #4294967295
 8012da4:	f7ed ff88 	bl	8000cb8 <__aeabi_uldivmod>
 8012da8:	463a      	mov	r2, r7
 8012daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012dae:	465b      	mov	r3, fp
 8012db0:	f04f 30ff 	mov.w	r0, #4294967295
 8012db4:	f04f 31ff 	mov.w	r1, #4294967295
 8012db8:	f7ed ff7e 	bl	8000cb8 <__aeabi_uldivmod>
 8012dbc:	2100      	movs	r1, #0
 8012dbe:	4696      	mov	lr, r2
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	e9cd 1200 	strd	r1, r2, [sp]
 8012dc6:	46ba      	mov	sl, r7
 8012dc8:	2300      	movs	r3, #0
 8012dca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012dce:	f1bc 0f09 	cmp.w	ip, #9
 8012dd2:	d82a      	bhi.n	8012e2a <_strtoull_l.isra.0+0xea>
 8012dd4:	4664      	mov	r4, ip
 8012dd6:	42a7      	cmp	r7, r4
 8012dd8:	dd38      	ble.n	8012e4c <_strtoull_l.isra.0+0x10c>
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	db33      	blt.n	8012e46 <_strtoull_l.isra.0+0x106>
 8012dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012de2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012de6:	4299      	cmp	r1, r3
 8012de8:	bf08      	it	eq
 8012dea:	4290      	cmpeq	r0, r2
 8012dec:	d32b      	bcc.n	8012e46 <_strtoull_l.isra.0+0x106>
 8012dee:	d101      	bne.n	8012df4 <_strtoull_l.isra.0+0xb4>
 8012df0:	45a6      	cmp	lr, r4
 8012df2:	db28      	blt.n	8012e46 <_strtoull_l.isra.0+0x106>
 8012df4:	9b01      	ldr	r3, [sp, #4]
 8012df6:	9900      	ldr	r1, [sp, #0]
 8012df8:	fb0a f303 	mul.w	r3, sl, r3
 8012dfc:	fb01 330b 	mla	r3, r1, fp, r3
 8012e00:	fbaa 0101 	umull	r0, r1, sl, r1
 8012e04:	1902      	adds	r2, r0, r4
 8012e06:	4419      	add	r1, r3
 8012e08:	eb41 73e4 	adc.w	r3, r1, r4, asr #31
 8012e0c:	e9cd 2300 	strd	r2, r3, [sp]
 8012e10:	2301      	movs	r3, #1
 8012e12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e16:	e7d8      	b.n	8012dca <_strtoull_l.isra.0+0x8a>
 8012e18:	46ab      	mov	fp, r5
 8012e1a:	e799      	b.n	8012d50 <_strtoull_l.isra.0+0x10>
 8012e1c:	2c2b      	cmp	r4, #43	; 0x2b
 8012e1e:	bf04      	itt	eq
 8012e20:	f10b 0502 	addeq.w	r5, fp, #2
 8012e24:	f89b 4001 	ldrbeq.w	r4, [fp, #1]
 8012e28:	e7a4      	b.n	8012d74 <_strtoull_l.isra.0+0x34>
 8012e2a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012e2e:	f1bc 0f19 	cmp.w	ip, #25
 8012e32:	d801      	bhi.n	8012e38 <_strtoull_l.isra.0+0xf8>
 8012e34:	3c37      	subs	r4, #55	; 0x37
 8012e36:	e7ce      	b.n	8012dd6 <_strtoull_l.isra.0+0x96>
 8012e38:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012e3c:	f1bc 0f19 	cmp.w	ip, #25
 8012e40:	d804      	bhi.n	8012e4c <_strtoull_l.isra.0+0x10c>
 8012e42:	3c57      	subs	r4, #87	; 0x57
 8012e44:	e7c7      	b.n	8012dd6 <_strtoull_l.isra.0+0x96>
 8012e46:	f04f 33ff 	mov.w	r3, #4294967295
 8012e4a:	e7e2      	b.n	8012e12 <_strtoull_l.isra.0+0xd2>
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	da10      	bge.n	8012e72 <_strtoull_l.isra.0+0x132>
 8012e50:	9a05      	ldr	r2, [sp, #20]
 8012e52:	2322      	movs	r3, #34	; 0x22
 8012e54:	6013      	str	r3, [r2, #0]
 8012e56:	f04f 34ff 	mov.w	r4, #4294967295
 8012e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8012e5e:	e9cd 3400 	strd	r3, r4, [sp]
 8012e62:	f1b9 0f00 	cmp.w	r9, #0
 8012e66:	d110      	bne.n	8012e8a <_strtoull_l.isra.0+0x14a>
 8012e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e6c:	b007      	add	sp, #28
 8012e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e72:	b136      	cbz	r6, 8012e82 <_strtoull_l.isra.0+0x142>
 8012e74:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012e78:	4249      	negs	r1, r1
 8012e7a:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
 8012e7e:	e9cd 1200 	strd	r1, r2, [sp]
 8012e82:	f1b9 0f00 	cmp.w	r9, #0
 8012e86:	d0ef      	beq.n	8012e68 <_strtoull_l.isra.0+0x128>
 8012e88:	b10b      	cbz	r3, 8012e8e <_strtoull_l.isra.0+0x14e>
 8012e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8012e8e:	f8c9 8000 	str.w	r8, [r9]
 8012e92:	e7e9      	b.n	8012e68 <_strtoull_l.isra.0+0x128>
 8012e94:	2430      	movs	r4, #48	; 0x30
 8012e96:	2f00      	cmp	r7, #0
 8012e98:	f47f af7c 	bne.w	8012d94 <_strtoull_l.isra.0+0x54>
 8012e9c:	2708      	movs	r7, #8
 8012e9e:	e779      	b.n	8012d94 <_strtoull_l.isra.0+0x54>
 8012ea0:	2c30      	cmp	r4, #48	; 0x30
 8012ea2:	f43f af6e 	beq.w	8012d82 <_strtoull_l.isra.0+0x42>
 8012ea6:	270a      	movs	r7, #10
 8012ea8:	e774      	b.n	8012d94 <_strtoull_l.isra.0+0x54>
	...

08012eac <strtoull>:
 8012eac:	4b08      	ldr	r3, [pc, #32]	; (8012ed0 <strtoull+0x24>)
 8012eae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012eb0:	681c      	ldr	r4, [r3, #0]
 8012eb2:	4d08      	ldr	r5, [pc, #32]	; (8012ed4 <strtoull+0x28>)
 8012eb4:	6a23      	ldr	r3, [r4, #32]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	bf08      	it	eq
 8012eba:	462b      	moveq	r3, r5
 8012ebc:	9300      	str	r3, [sp, #0]
 8012ebe:	4613      	mov	r3, r2
 8012ec0:	460a      	mov	r2, r1
 8012ec2:	4601      	mov	r1, r0
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	f7ff ff3b 	bl	8012d40 <_strtoull_l.isra.0>
 8012eca:	b003      	add	sp, #12
 8012ecc:	bd30      	pop	{r4, r5, pc}
 8012ece:	bf00      	nop
 8012ed0:	20000024 	.word	0x20000024
 8012ed4:	20000088 	.word	0x20000088

08012ed8 <__ascii_wctomb>:
 8012ed8:	b149      	cbz	r1, 8012eee <__ascii_wctomb+0x16>
 8012eda:	2aff      	cmp	r2, #255	; 0xff
 8012edc:	bf85      	ittet	hi
 8012ede:	238a      	movhi	r3, #138	; 0x8a
 8012ee0:	6003      	strhi	r3, [r0, #0]
 8012ee2:	700a      	strbls	r2, [r1, #0]
 8012ee4:	f04f 30ff 	movhi.w	r0, #4294967295
 8012ee8:	bf98      	it	ls
 8012eea:	2001      	movls	r0, #1
 8012eec:	4770      	bx	lr
 8012eee:	4608      	mov	r0, r1
 8012ef0:	4770      	bx	lr
	...

08012ef4 <_malloc_r>:
 8012ef4:	b570      	push	{r4, r5, r6, lr}
 8012ef6:	1ccd      	adds	r5, r1, #3
 8012ef8:	f025 0503 	bic.w	r5, r5, #3
 8012efc:	3508      	adds	r5, #8
 8012efe:	2d0c      	cmp	r5, #12
 8012f00:	bf38      	it	cc
 8012f02:	250c      	movcc	r5, #12
 8012f04:	2d00      	cmp	r5, #0
 8012f06:	4606      	mov	r6, r0
 8012f08:	db01      	blt.n	8012f0e <_malloc_r+0x1a>
 8012f0a:	42a9      	cmp	r1, r5
 8012f0c:	d903      	bls.n	8012f16 <_malloc_r+0x22>
 8012f0e:	230c      	movs	r3, #12
 8012f10:	6033      	str	r3, [r6, #0]
 8012f12:	2000      	movs	r0, #0
 8012f14:	bd70      	pop	{r4, r5, r6, pc}
 8012f16:	f000 fb31 	bl	801357c <__malloc_lock>
 8012f1a:	4a21      	ldr	r2, [pc, #132]	; (8012fa0 <_malloc_r+0xac>)
 8012f1c:	6814      	ldr	r4, [r2, #0]
 8012f1e:	4621      	mov	r1, r4
 8012f20:	b991      	cbnz	r1, 8012f48 <_malloc_r+0x54>
 8012f22:	4c20      	ldr	r4, [pc, #128]	; (8012fa4 <_malloc_r+0xb0>)
 8012f24:	6823      	ldr	r3, [r4, #0]
 8012f26:	b91b      	cbnz	r3, 8012f30 <_malloc_r+0x3c>
 8012f28:	4630      	mov	r0, r6
 8012f2a:	f000 fb17 	bl	801355c <_sbrk_r>
 8012f2e:	6020      	str	r0, [r4, #0]
 8012f30:	4629      	mov	r1, r5
 8012f32:	4630      	mov	r0, r6
 8012f34:	f000 fb12 	bl	801355c <_sbrk_r>
 8012f38:	1c43      	adds	r3, r0, #1
 8012f3a:	d124      	bne.n	8012f86 <_malloc_r+0x92>
 8012f3c:	230c      	movs	r3, #12
 8012f3e:	6033      	str	r3, [r6, #0]
 8012f40:	4630      	mov	r0, r6
 8012f42:	f000 fb1c 	bl	801357e <__malloc_unlock>
 8012f46:	e7e4      	b.n	8012f12 <_malloc_r+0x1e>
 8012f48:	680b      	ldr	r3, [r1, #0]
 8012f4a:	1b5b      	subs	r3, r3, r5
 8012f4c:	d418      	bmi.n	8012f80 <_malloc_r+0x8c>
 8012f4e:	2b0b      	cmp	r3, #11
 8012f50:	d90f      	bls.n	8012f72 <_malloc_r+0x7e>
 8012f52:	600b      	str	r3, [r1, #0]
 8012f54:	50cd      	str	r5, [r1, r3]
 8012f56:	18cc      	adds	r4, r1, r3
 8012f58:	4630      	mov	r0, r6
 8012f5a:	f000 fb10 	bl	801357e <__malloc_unlock>
 8012f5e:	f104 000b 	add.w	r0, r4, #11
 8012f62:	1d23      	adds	r3, r4, #4
 8012f64:	f020 0007 	bic.w	r0, r0, #7
 8012f68:	1ac3      	subs	r3, r0, r3
 8012f6a:	d0d3      	beq.n	8012f14 <_malloc_r+0x20>
 8012f6c:	425a      	negs	r2, r3
 8012f6e:	50e2      	str	r2, [r4, r3]
 8012f70:	e7d0      	b.n	8012f14 <_malloc_r+0x20>
 8012f72:	428c      	cmp	r4, r1
 8012f74:	684b      	ldr	r3, [r1, #4]
 8012f76:	bf16      	itet	ne
 8012f78:	6063      	strne	r3, [r4, #4]
 8012f7a:	6013      	streq	r3, [r2, #0]
 8012f7c:	460c      	movne	r4, r1
 8012f7e:	e7eb      	b.n	8012f58 <_malloc_r+0x64>
 8012f80:	460c      	mov	r4, r1
 8012f82:	6849      	ldr	r1, [r1, #4]
 8012f84:	e7cc      	b.n	8012f20 <_malloc_r+0x2c>
 8012f86:	1cc4      	adds	r4, r0, #3
 8012f88:	f024 0403 	bic.w	r4, r4, #3
 8012f8c:	42a0      	cmp	r0, r4
 8012f8e:	d005      	beq.n	8012f9c <_malloc_r+0xa8>
 8012f90:	1a21      	subs	r1, r4, r0
 8012f92:	4630      	mov	r0, r6
 8012f94:	f000 fae2 	bl	801355c <_sbrk_r>
 8012f98:	3001      	adds	r0, #1
 8012f9a:	d0cf      	beq.n	8012f3c <_malloc_r+0x48>
 8012f9c:	6025      	str	r5, [r4, #0]
 8012f9e:	e7db      	b.n	8012f58 <_malloc_r+0x64>
 8012fa0:	20000468 	.word	0x20000468
 8012fa4:	2000046c 	.word	0x2000046c

08012fa8 <__ssputs_r>:
 8012fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fac:	688e      	ldr	r6, [r1, #8]
 8012fae:	429e      	cmp	r6, r3
 8012fb0:	4682      	mov	sl, r0
 8012fb2:	460c      	mov	r4, r1
 8012fb4:	4690      	mov	r8, r2
 8012fb6:	4699      	mov	r9, r3
 8012fb8:	d837      	bhi.n	801302a <__ssputs_r+0x82>
 8012fba:	898a      	ldrh	r2, [r1, #12]
 8012fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012fc0:	d031      	beq.n	8013026 <__ssputs_r+0x7e>
 8012fc2:	6825      	ldr	r5, [r4, #0]
 8012fc4:	6909      	ldr	r1, [r1, #16]
 8012fc6:	1a6f      	subs	r7, r5, r1
 8012fc8:	6965      	ldr	r5, [r4, #20]
 8012fca:	2302      	movs	r3, #2
 8012fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012fd0:	fb95 f5f3 	sdiv	r5, r5, r3
 8012fd4:	f109 0301 	add.w	r3, r9, #1
 8012fd8:	443b      	add	r3, r7
 8012fda:	429d      	cmp	r5, r3
 8012fdc:	bf38      	it	cc
 8012fde:	461d      	movcc	r5, r3
 8012fe0:	0553      	lsls	r3, r2, #21
 8012fe2:	d530      	bpl.n	8013046 <__ssputs_r+0x9e>
 8012fe4:	4629      	mov	r1, r5
 8012fe6:	f7ff ff85 	bl	8012ef4 <_malloc_r>
 8012fea:	4606      	mov	r6, r0
 8012fec:	b950      	cbnz	r0, 8013004 <__ssputs_r+0x5c>
 8012fee:	230c      	movs	r3, #12
 8012ff0:	f8ca 3000 	str.w	r3, [sl]
 8012ff4:	89a3      	ldrh	r3, [r4, #12]
 8012ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ffa:	81a3      	strh	r3, [r4, #12]
 8012ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8013000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013004:	463a      	mov	r2, r7
 8013006:	6921      	ldr	r1, [r4, #16]
 8013008:	f7ff fc24 	bl	8012854 <memcpy>
 801300c:	89a3      	ldrh	r3, [r4, #12]
 801300e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013016:	81a3      	strh	r3, [r4, #12]
 8013018:	6126      	str	r6, [r4, #16]
 801301a:	6165      	str	r5, [r4, #20]
 801301c:	443e      	add	r6, r7
 801301e:	1bed      	subs	r5, r5, r7
 8013020:	6026      	str	r6, [r4, #0]
 8013022:	60a5      	str	r5, [r4, #8]
 8013024:	464e      	mov	r6, r9
 8013026:	454e      	cmp	r6, r9
 8013028:	d900      	bls.n	801302c <__ssputs_r+0x84>
 801302a:	464e      	mov	r6, r9
 801302c:	4632      	mov	r2, r6
 801302e:	4641      	mov	r1, r8
 8013030:	6820      	ldr	r0, [r4, #0]
 8013032:	f7ff fc1a 	bl	801286a <memmove>
 8013036:	68a3      	ldr	r3, [r4, #8]
 8013038:	1b9b      	subs	r3, r3, r6
 801303a:	60a3      	str	r3, [r4, #8]
 801303c:	6823      	ldr	r3, [r4, #0]
 801303e:	441e      	add	r6, r3
 8013040:	6026      	str	r6, [r4, #0]
 8013042:	2000      	movs	r0, #0
 8013044:	e7dc      	b.n	8013000 <__ssputs_r+0x58>
 8013046:	462a      	mov	r2, r5
 8013048:	f000 fae8 	bl	801361c <_realloc_r>
 801304c:	4606      	mov	r6, r0
 801304e:	2800      	cmp	r0, #0
 8013050:	d1e2      	bne.n	8013018 <__ssputs_r+0x70>
 8013052:	6921      	ldr	r1, [r4, #16]
 8013054:	4650      	mov	r0, sl
 8013056:	f000 fa93 	bl	8013580 <_free_r>
 801305a:	e7c8      	b.n	8012fee <__ssputs_r+0x46>

0801305c <_svfiprintf_r>:
 801305c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013060:	461d      	mov	r5, r3
 8013062:	898b      	ldrh	r3, [r1, #12]
 8013064:	061f      	lsls	r7, r3, #24
 8013066:	b09d      	sub	sp, #116	; 0x74
 8013068:	4680      	mov	r8, r0
 801306a:	460c      	mov	r4, r1
 801306c:	4616      	mov	r6, r2
 801306e:	d50f      	bpl.n	8013090 <_svfiprintf_r+0x34>
 8013070:	690b      	ldr	r3, [r1, #16]
 8013072:	b96b      	cbnz	r3, 8013090 <_svfiprintf_r+0x34>
 8013074:	2140      	movs	r1, #64	; 0x40
 8013076:	f7ff ff3d 	bl	8012ef4 <_malloc_r>
 801307a:	6020      	str	r0, [r4, #0]
 801307c:	6120      	str	r0, [r4, #16]
 801307e:	b928      	cbnz	r0, 801308c <_svfiprintf_r+0x30>
 8013080:	230c      	movs	r3, #12
 8013082:	f8c8 3000 	str.w	r3, [r8]
 8013086:	f04f 30ff 	mov.w	r0, #4294967295
 801308a:	e0c8      	b.n	801321e <_svfiprintf_r+0x1c2>
 801308c:	2340      	movs	r3, #64	; 0x40
 801308e:	6163      	str	r3, [r4, #20]
 8013090:	2300      	movs	r3, #0
 8013092:	9309      	str	r3, [sp, #36]	; 0x24
 8013094:	2320      	movs	r3, #32
 8013096:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801309a:	2330      	movs	r3, #48	; 0x30
 801309c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130a0:	9503      	str	r5, [sp, #12]
 80130a2:	f04f 0b01 	mov.w	fp, #1
 80130a6:	4637      	mov	r7, r6
 80130a8:	463d      	mov	r5, r7
 80130aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80130ae:	b10b      	cbz	r3, 80130b4 <_svfiprintf_r+0x58>
 80130b0:	2b25      	cmp	r3, #37	; 0x25
 80130b2:	d13e      	bne.n	8013132 <_svfiprintf_r+0xd6>
 80130b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80130b8:	d00b      	beq.n	80130d2 <_svfiprintf_r+0x76>
 80130ba:	4653      	mov	r3, sl
 80130bc:	4632      	mov	r2, r6
 80130be:	4621      	mov	r1, r4
 80130c0:	4640      	mov	r0, r8
 80130c2:	f7ff ff71 	bl	8012fa8 <__ssputs_r>
 80130c6:	3001      	adds	r0, #1
 80130c8:	f000 80a4 	beq.w	8013214 <_svfiprintf_r+0x1b8>
 80130cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130ce:	4453      	add	r3, sl
 80130d0:	9309      	str	r3, [sp, #36]	; 0x24
 80130d2:	783b      	ldrb	r3, [r7, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	f000 809d 	beq.w	8013214 <_svfiprintf_r+0x1b8>
 80130da:	2300      	movs	r3, #0
 80130dc:	f04f 32ff 	mov.w	r2, #4294967295
 80130e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80130e4:	9304      	str	r3, [sp, #16]
 80130e6:	9307      	str	r3, [sp, #28]
 80130e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80130ec:	931a      	str	r3, [sp, #104]	; 0x68
 80130ee:	462f      	mov	r7, r5
 80130f0:	2205      	movs	r2, #5
 80130f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80130f6:	4850      	ldr	r0, [pc, #320]	; (8013238 <_svfiprintf_r+0x1dc>)
 80130f8:	f7ed f88a 	bl	8000210 <memchr>
 80130fc:	9b04      	ldr	r3, [sp, #16]
 80130fe:	b9d0      	cbnz	r0, 8013136 <_svfiprintf_r+0xda>
 8013100:	06d9      	lsls	r1, r3, #27
 8013102:	bf44      	itt	mi
 8013104:	2220      	movmi	r2, #32
 8013106:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801310a:	071a      	lsls	r2, r3, #28
 801310c:	bf44      	itt	mi
 801310e:	222b      	movmi	r2, #43	; 0x2b
 8013110:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013114:	782a      	ldrb	r2, [r5, #0]
 8013116:	2a2a      	cmp	r2, #42	; 0x2a
 8013118:	d015      	beq.n	8013146 <_svfiprintf_r+0xea>
 801311a:	9a07      	ldr	r2, [sp, #28]
 801311c:	462f      	mov	r7, r5
 801311e:	2000      	movs	r0, #0
 8013120:	250a      	movs	r5, #10
 8013122:	4639      	mov	r1, r7
 8013124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013128:	3b30      	subs	r3, #48	; 0x30
 801312a:	2b09      	cmp	r3, #9
 801312c:	d94d      	bls.n	80131ca <_svfiprintf_r+0x16e>
 801312e:	b1b8      	cbz	r0, 8013160 <_svfiprintf_r+0x104>
 8013130:	e00f      	b.n	8013152 <_svfiprintf_r+0xf6>
 8013132:	462f      	mov	r7, r5
 8013134:	e7b8      	b.n	80130a8 <_svfiprintf_r+0x4c>
 8013136:	4a40      	ldr	r2, [pc, #256]	; (8013238 <_svfiprintf_r+0x1dc>)
 8013138:	1a80      	subs	r0, r0, r2
 801313a:	fa0b f000 	lsl.w	r0, fp, r0
 801313e:	4318      	orrs	r0, r3
 8013140:	9004      	str	r0, [sp, #16]
 8013142:	463d      	mov	r5, r7
 8013144:	e7d3      	b.n	80130ee <_svfiprintf_r+0x92>
 8013146:	9a03      	ldr	r2, [sp, #12]
 8013148:	1d11      	adds	r1, r2, #4
 801314a:	6812      	ldr	r2, [r2, #0]
 801314c:	9103      	str	r1, [sp, #12]
 801314e:	2a00      	cmp	r2, #0
 8013150:	db01      	blt.n	8013156 <_svfiprintf_r+0xfa>
 8013152:	9207      	str	r2, [sp, #28]
 8013154:	e004      	b.n	8013160 <_svfiprintf_r+0x104>
 8013156:	4252      	negs	r2, r2
 8013158:	f043 0302 	orr.w	r3, r3, #2
 801315c:	9207      	str	r2, [sp, #28]
 801315e:	9304      	str	r3, [sp, #16]
 8013160:	783b      	ldrb	r3, [r7, #0]
 8013162:	2b2e      	cmp	r3, #46	; 0x2e
 8013164:	d10c      	bne.n	8013180 <_svfiprintf_r+0x124>
 8013166:	787b      	ldrb	r3, [r7, #1]
 8013168:	2b2a      	cmp	r3, #42	; 0x2a
 801316a:	d133      	bne.n	80131d4 <_svfiprintf_r+0x178>
 801316c:	9b03      	ldr	r3, [sp, #12]
 801316e:	1d1a      	adds	r2, r3, #4
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	9203      	str	r2, [sp, #12]
 8013174:	2b00      	cmp	r3, #0
 8013176:	bfb8      	it	lt
 8013178:	f04f 33ff 	movlt.w	r3, #4294967295
 801317c:	3702      	adds	r7, #2
 801317e:	9305      	str	r3, [sp, #20]
 8013180:	4d2e      	ldr	r5, [pc, #184]	; (801323c <_svfiprintf_r+0x1e0>)
 8013182:	7839      	ldrb	r1, [r7, #0]
 8013184:	2203      	movs	r2, #3
 8013186:	4628      	mov	r0, r5
 8013188:	f7ed f842 	bl	8000210 <memchr>
 801318c:	b138      	cbz	r0, 801319e <_svfiprintf_r+0x142>
 801318e:	2340      	movs	r3, #64	; 0x40
 8013190:	1b40      	subs	r0, r0, r5
 8013192:	fa03 f000 	lsl.w	r0, r3, r0
 8013196:	9b04      	ldr	r3, [sp, #16]
 8013198:	4303      	orrs	r3, r0
 801319a:	3701      	adds	r7, #1
 801319c:	9304      	str	r3, [sp, #16]
 801319e:	7839      	ldrb	r1, [r7, #0]
 80131a0:	4827      	ldr	r0, [pc, #156]	; (8013240 <_svfiprintf_r+0x1e4>)
 80131a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131a6:	2206      	movs	r2, #6
 80131a8:	1c7e      	adds	r6, r7, #1
 80131aa:	f7ed f831 	bl	8000210 <memchr>
 80131ae:	2800      	cmp	r0, #0
 80131b0:	d038      	beq.n	8013224 <_svfiprintf_r+0x1c8>
 80131b2:	4b24      	ldr	r3, [pc, #144]	; (8013244 <_svfiprintf_r+0x1e8>)
 80131b4:	bb13      	cbnz	r3, 80131fc <_svfiprintf_r+0x1a0>
 80131b6:	9b03      	ldr	r3, [sp, #12]
 80131b8:	3307      	adds	r3, #7
 80131ba:	f023 0307 	bic.w	r3, r3, #7
 80131be:	3308      	adds	r3, #8
 80131c0:	9303      	str	r3, [sp, #12]
 80131c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131c4:	444b      	add	r3, r9
 80131c6:	9309      	str	r3, [sp, #36]	; 0x24
 80131c8:	e76d      	b.n	80130a6 <_svfiprintf_r+0x4a>
 80131ca:	fb05 3202 	mla	r2, r5, r2, r3
 80131ce:	2001      	movs	r0, #1
 80131d0:	460f      	mov	r7, r1
 80131d2:	e7a6      	b.n	8013122 <_svfiprintf_r+0xc6>
 80131d4:	2300      	movs	r3, #0
 80131d6:	3701      	adds	r7, #1
 80131d8:	9305      	str	r3, [sp, #20]
 80131da:	4619      	mov	r1, r3
 80131dc:	250a      	movs	r5, #10
 80131de:	4638      	mov	r0, r7
 80131e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131e4:	3a30      	subs	r2, #48	; 0x30
 80131e6:	2a09      	cmp	r2, #9
 80131e8:	d903      	bls.n	80131f2 <_svfiprintf_r+0x196>
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d0c8      	beq.n	8013180 <_svfiprintf_r+0x124>
 80131ee:	9105      	str	r1, [sp, #20]
 80131f0:	e7c6      	b.n	8013180 <_svfiprintf_r+0x124>
 80131f2:	fb05 2101 	mla	r1, r5, r1, r2
 80131f6:	2301      	movs	r3, #1
 80131f8:	4607      	mov	r7, r0
 80131fa:	e7f0      	b.n	80131de <_svfiprintf_r+0x182>
 80131fc:	ab03      	add	r3, sp, #12
 80131fe:	9300      	str	r3, [sp, #0]
 8013200:	4622      	mov	r2, r4
 8013202:	4b11      	ldr	r3, [pc, #68]	; (8013248 <_svfiprintf_r+0x1ec>)
 8013204:	a904      	add	r1, sp, #16
 8013206:	4640      	mov	r0, r8
 8013208:	f3af 8000 	nop.w
 801320c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013210:	4681      	mov	r9, r0
 8013212:	d1d6      	bne.n	80131c2 <_svfiprintf_r+0x166>
 8013214:	89a3      	ldrh	r3, [r4, #12]
 8013216:	065b      	lsls	r3, r3, #25
 8013218:	f53f af35 	bmi.w	8013086 <_svfiprintf_r+0x2a>
 801321c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801321e:	b01d      	add	sp, #116	; 0x74
 8013220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013224:	ab03      	add	r3, sp, #12
 8013226:	9300      	str	r3, [sp, #0]
 8013228:	4622      	mov	r2, r4
 801322a:	4b07      	ldr	r3, [pc, #28]	; (8013248 <_svfiprintf_r+0x1ec>)
 801322c:	a904      	add	r1, sp, #16
 801322e:	4640      	mov	r0, r8
 8013230:	f000 f882 	bl	8013338 <_printf_i>
 8013234:	e7ea      	b.n	801320c <_svfiprintf_r+0x1b0>
 8013236:	bf00      	nop
 8013238:	0801624b 	.word	0x0801624b
 801323c:	08016251 	.word	0x08016251
 8013240:	08016255 	.word	0x08016255
 8013244:	00000000 	.word	0x00000000
 8013248:	08012fa9 	.word	0x08012fa9

0801324c <_printf_common>:
 801324c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013250:	4691      	mov	r9, r2
 8013252:	461f      	mov	r7, r3
 8013254:	688a      	ldr	r2, [r1, #8]
 8013256:	690b      	ldr	r3, [r1, #16]
 8013258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801325c:	4293      	cmp	r3, r2
 801325e:	bfb8      	it	lt
 8013260:	4613      	movlt	r3, r2
 8013262:	f8c9 3000 	str.w	r3, [r9]
 8013266:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801326a:	4606      	mov	r6, r0
 801326c:	460c      	mov	r4, r1
 801326e:	b112      	cbz	r2, 8013276 <_printf_common+0x2a>
 8013270:	3301      	adds	r3, #1
 8013272:	f8c9 3000 	str.w	r3, [r9]
 8013276:	6823      	ldr	r3, [r4, #0]
 8013278:	0699      	lsls	r1, r3, #26
 801327a:	bf42      	ittt	mi
 801327c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013280:	3302      	addmi	r3, #2
 8013282:	f8c9 3000 	strmi.w	r3, [r9]
 8013286:	6825      	ldr	r5, [r4, #0]
 8013288:	f015 0506 	ands.w	r5, r5, #6
 801328c:	d107      	bne.n	801329e <_printf_common+0x52>
 801328e:	f104 0a19 	add.w	sl, r4, #25
 8013292:	68e3      	ldr	r3, [r4, #12]
 8013294:	f8d9 2000 	ldr.w	r2, [r9]
 8013298:	1a9b      	subs	r3, r3, r2
 801329a:	42ab      	cmp	r3, r5
 801329c:	dc28      	bgt.n	80132f0 <_printf_common+0xa4>
 801329e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80132a2:	6822      	ldr	r2, [r4, #0]
 80132a4:	3300      	adds	r3, #0
 80132a6:	bf18      	it	ne
 80132a8:	2301      	movne	r3, #1
 80132aa:	0692      	lsls	r2, r2, #26
 80132ac:	d42d      	bmi.n	801330a <_printf_common+0xbe>
 80132ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80132b2:	4639      	mov	r1, r7
 80132b4:	4630      	mov	r0, r6
 80132b6:	47c0      	blx	r8
 80132b8:	3001      	adds	r0, #1
 80132ba:	d020      	beq.n	80132fe <_printf_common+0xb2>
 80132bc:	6823      	ldr	r3, [r4, #0]
 80132be:	68e5      	ldr	r5, [r4, #12]
 80132c0:	f8d9 2000 	ldr.w	r2, [r9]
 80132c4:	f003 0306 	and.w	r3, r3, #6
 80132c8:	2b04      	cmp	r3, #4
 80132ca:	bf08      	it	eq
 80132cc:	1aad      	subeq	r5, r5, r2
 80132ce:	68a3      	ldr	r3, [r4, #8]
 80132d0:	6922      	ldr	r2, [r4, #16]
 80132d2:	bf0c      	ite	eq
 80132d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80132d8:	2500      	movne	r5, #0
 80132da:	4293      	cmp	r3, r2
 80132dc:	bfc4      	itt	gt
 80132de:	1a9b      	subgt	r3, r3, r2
 80132e0:	18ed      	addgt	r5, r5, r3
 80132e2:	f04f 0900 	mov.w	r9, #0
 80132e6:	341a      	adds	r4, #26
 80132e8:	454d      	cmp	r5, r9
 80132ea:	d11a      	bne.n	8013322 <_printf_common+0xd6>
 80132ec:	2000      	movs	r0, #0
 80132ee:	e008      	b.n	8013302 <_printf_common+0xb6>
 80132f0:	2301      	movs	r3, #1
 80132f2:	4652      	mov	r2, sl
 80132f4:	4639      	mov	r1, r7
 80132f6:	4630      	mov	r0, r6
 80132f8:	47c0      	blx	r8
 80132fa:	3001      	adds	r0, #1
 80132fc:	d103      	bne.n	8013306 <_printf_common+0xba>
 80132fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013306:	3501      	adds	r5, #1
 8013308:	e7c3      	b.n	8013292 <_printf_common+0x46>
 801330a:	18e1      	adds	r1, r4, r3
 801330c:	1c5a      	adds	r2, r3, #1
 801330e:	2030      	movs	r0, #48	; 0x30
 8013310:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013314:	4422      	add	r2, r4
 8013316:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801331a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801331e:	3302      	adds	r3, #2
 8013320:	e7c5      	b.n	80132ae <_printf_common+0x62>
 8013322:	2301      	movs	r3, #1
 8013324:	4622      	mov	r2, r4
 8013326:	4639      	mov	r1, r7
 8013328:	4630      	mov	r0, r6
 801332a:	47c0      	blx	r8
 801332c:	3001      	adds	r0, #1
 801332e:	d0e6      	beq.n	80132fe <_printf_common+0xb2>
 8013330:	f109 0901 	add.w	r9, r9, #1
 8013334:	e7d8      	b.n	80132e8 <_printf_common+0x9c>
	...

08013338 <_printf_i>:
 8013338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801333c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013340:	460c      	mov	r4, r1
 8013342:	7e09      	ldrb	r1, [r1, #24]
 8013344:	b085      	sub	sp, #20
 8013346:	296e      	cmp	r1, #110	; 0x6e
 8013348:	4617      	mov	r7, r2
 801334a:	4606      	mov	r6, r0
 801334c:	4698      	mov	r8, r3
 801334e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013350:	f000 80b3 	beq.w	80134ba <_printf_i+0x182>
 8013354:	d822      	bhi.n	801339c <_printf_i+0x64>
 8013356:	2963      	cmp	r1, #99	; 0x63
 8013358:	d036      	beq.n	80133c8 <_printf_i+0x90>
 801335a:	d80a      	bhi.n	8013372 <_printf_i+0x3a>
 801335c:	2900      	cmp	r1, #0
 801335e:	f000 80b9 	beq.w	80134d4 <_printf_i+0x19c>
 8013362:	2958      	cmp	r1, #88	; 0x58
 8013364:	f000 8083 	beq.w	801346e <_printf_i+0x136>
 8013368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801336c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013370:	e032      	b.n	80133d8 <_printf_i+0xa0>
 8013372:	2964      	cmp	r1, #100	; 0x64
 8013374:	d001      	beq.n	801337a <_printf_i+0x42>
 8013376:	2969      	cmp	r1, #105	; 0x69
 8013378:	d1f6      	bne.n	8013368 <_printf_i+0x30>
 801337a:	6820      	ldr	r0, [r4, #0]
 801337c:	6813      	ldr	r3, [r2, #0]
 801337e:	0605      	lsls	r5, r0, #24
 8013380:	f103 0104 	add.w	r1, r3, #4
 8013384:	d52a      	bpl.n	80133dc <_printf_i+0xa4>
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	6011      	str	r1, [r2, #0]
 801338a:	2b00      	cmp	r3, #0
 801338c:	da03      	bge.n	8013396 <_printf_i+0x5e>
 801338e:	222d      	movs	r2, #45	; 0x2d
 8013390:	425b      	negs	r3, r3
 8013392:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013396:	486f      	ldr	r0, [pc, #444]	; (8013554 <_printf_i+0x21c>)
 8013398:	220a      	movs	r2, #10
 801339a:	e039      	b.n	8013410 <_printf_i+0xd8>
 801339c:	2973      	cmp	r1, #115	; 0x73
 801339e:	f000 809d 	beq.w	80134dc <_printf_i+0x1a4>
 80133a2:	d808      	bhi.n	80133b6 <_printf_i+0x7e>
 80133a4:	296f      	cmp	r1, #111	; 0x6f
 80133a6:	d020      	beq.n	80133ea <_printf_i+0xb2>
 80133a8:	2970      	cmp	r1, #112	; 0x70
 80133aa:	d1dd      	bne.n	8013368 <_printf_i+0x30>
 80133ac:	6823      	ldr	r3, [r4, #0]
 80133ae:	f043 0320 	orr.w	r3, r3, #32
 80133b2:	6023      	str	r3, [r4, #0]
 80133b4:	e003      	b.n	80133be <_printf_i+0x86>
 80133b6:	2975      	cmp	r1, #117	; 0x75
 80133b8:	d017      	beq.n	80133ea <_printf_i+0xb2>
 80133ba:	2978      	cmp	r1, #120	; 0x78
 80133bc:	d1d4      	bne.n	8013368 <_printf_i+0x30>
 80133be:	2378      	movs	r3, #120	; 0x78
 80133c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80133c4:	4864      	ldr	r0, [pc, #400]	; (8013558 <_printf_i+0x220>)
 80133c6:	e055      	b.n	8013474 <_printf_i+0x13c>
 80133c8:	6813      	ldr	r3, [r2, #0]
 80133ca:	1d19      	adds	r1, r3, #4
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	6011      	str	r1, [r2, #0]
 80133d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80133d8:	2301      	movs	r3, #1
 80133da:	e08c      	b.n	80134f6 <_printf_i+0x1be>
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	6011      	str	r1, [r2, #0]
 80133e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80133e4:	bf18      	it	ne
 80133e6:	b21b      	sxthne	r3, r3
 80133e8:	e7cf      	b.n	801338a <_printf_i+0x52>
 80133ea:	6813      	ldr	r3, [r2, #0]
 80133ec:	6825      	ldr	r5, [r4, #0]
 80133ee:	1d18      	adds	r0, r3, #4
 80133f0:	6010      	str	r0, [r2, #0]
 80133f2:	0628      	lsls	r0, r5, #24
 80133f4:	d501      	bpl.n	80133fa <_printf_i+0xc2>
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	e002      	b.n	8013400 <_printf_i+0xc8>
 80133fa:	0668      	lsls	r0, r5, #25
 80133fc:	d5fb      	bpl.n	80133f6 <_printf_i+0xbe>
 80133fe:	881b      	ldrh	r3, [r3, #0]
 8013400:	4854      	ldr	r0, [pc, #336]	; (8013554 <_printf_i+0x21c>)
 8013402:	296f      	cmp	r1, #111	; 0x6f
 8013404:	bf14      	ite	ne
 8013406:	220a      	movne	r2, #10
 8013408:	2208      	moveq	r2, #8
 801340a:	2100      	movs	r1, #0
 801340c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013410:	6865      	ldr	r5, [r4, #4]
 8013412:	60a5      	str	r5, [r4, #8]
 8013414:	2d00      	cmp	r5, #0
 8013416:	f2c0 8095 	blt.w	8013544 <_printf_i+0x20c>
 801341a:	6821      	ldr	r1, [r4, #0]
 801341c:	f021 0104 	bic.w	r1, r1, #4
 8013420:	6021      	str	r1, [r4, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d13d      	bne.n	80134a2 <_printf_i+0x16a>
 8013426:	2d00      	cmp	r5, #0
 8013428:	f040 808e 	bne.w	8013548 <_printf_i+0x210>
 801342c:	4665      	mov	r5, ip
 801342e:	2a08      	cmp	r2, #8
 8013430:	d10b      	bne.n	801344a <_printf_i+0x112>
 8013432:	6823      	ldr	r3, [r4, #0]
 8013434:	07db      	lsls	r3, r3, #31
 8013436:	d508      	bpl.n	801344a <_printf_i+0x112>
 8013438:	6923      	ldr	r3, [r4, #16]
 801343a:	6862      	ldr	r2, [r4, #4]
 801343c:	429a      	cmp	r2, r3
 801343e:	bfde      	ittt	le
 8013440:	2330      	movle	r3, #48	; 0x30
 8013442:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013446:	f105 35ff 	addle.w	r5, r5, #4294967295
 801344a:	ebac 0305 	sub.w	r3, ip, r5
 801344e:	6123      	str	r3, [r4, #16]
 8013450:	f8cd 8000 	str.w	r8, [sp]
 8013454:	463b      	mov	r3, r7
 8013456:	aa03      	add	r2, sp, #12
 8013458:	4621      	mov	r1, r4
 801345a:	4630      	mov	r0, r6
 801345c:	f7ff fef6 	bl	801324c <_printf_common>
 8013460:	3001      	adds	r0, #1
 8013462:	d14d      	bne.n	8013500 <_printf_i+0x1c8>
 8013464:	f04f 30ff 	mov.w	r0, #4294967295
 8013468:	b005      	add	sp, #20
 801346a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801346e:	4839      	ldr	r0, [pc, #228]	; (8013554 <_printf_i+0x21c>)
 8013470:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013474:	6813      	ldr	r3, [r2, #0]
 8013476:	6821      	ldr	r1, [r4, #0]
 8013478:	1d1d      	adds	r5, r3, #4
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	6015      	str	r5, [r2, #0]
 801347e:	060a      	lsls	r2, r1, #24
 8013480:	d50b      	bpl.n	801349a <_printf_i+0x162>
 8013482:	07ca      	lsls	r2, r1, #31
 8013484:	bf44      	itt	mi
 8013486:	f041 0120 	orrmi.w	r1, r1, #32
 801348a:	6021      	strmi	r1, [r4, #0]
 801348c:	b91b      	cbnz	r3, 8013496 <_printf_i+0x15e>
 801348e:	6822      	ldr	r2, [r4, #0]
 8013490:	f022 0220 	bic.w	r2, r2, #32
 8013494:	6022      	str	r2, [r4, #0]
 8013496:	2210      	movs	r2, #16
 8013498:	e7b7      	b.n	801340a <_printf_i+0xd2>
 801349a:	064d      	lsls	r5, r1, #25
 801349c:	bf48      	it	mi
 801349e:	b29b      	uxthmi	r3, r3
 80134a0:	e7ef      	b.n	8013482 <_printf_i+0x14a>
 80134a2:	4665      	mov	r5, ip
 80134a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80134a8:	fb02 3311 	mls	r3, r2, r1, r3
 80134ac:	5cc3      	ldrb	r3, [r0, r3]
 80134ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80134b2:	460b      	mov	r3, r1
 80134b4:	2900      	cmp	r1, #0
 80134b6:	d1f5      	bne.n	80134a4 <_printf_i+0x16c>
 80134b8:	e7b9      	b.n	801342e <_printf_i+0xf6>
 80134ba:	6813      	ldr	r3, [r2, #0]
 80134bc:	6825      	ldr	r5, [r4, #0]
 80134be:	6961      	ldr	r1, [r4, #20]
 80134c0:	1d18      	adds	r0, r3, #4
 80134c2:	6010      	str	r0, [r2, #0]
 80134c4:	0628      	lsls	r0, r5, #24
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	d501      	bpl.n	80134ce <_printf_i+0x196>
 80134ca:	6019      	str	r1, [r3, #0]
 80134cc:	e002      	b.n	80134d4 <_printf_i+0x19c>
 80134ce:	066a      	lsls	r2, r5, #25
 80134d0:	d5fb      	bpl.n	80134ca <_printf_i+0x192>
 80134d2:	8019      	strh	r1, [r3, #0]
 80134d4:	2300      	movs	r3, #0
 80134d6:	6123      	str	r3, [r4, #16]
 80134d8:	4665      	mov	r5, ip
 80134da:	e7b9      	b.n	8013450 <_printf_i+0x118>
 80134dc:	6813      	ldr	r3, [r2, #0]
 80134de:	1d19      	adds	r1, r3, #4
 80134e0:	6011      	str	r1, [r2, #0]
 80134e2:	681d      	ldr	r5, [r3, #0]
 80134e4:	6862      	ldr	r2, [r4, #4]
 80134e6:	2100      	movs	r1, #0
 80134e8:	4628      	mov	r0, r5
 80134ea:	f7ec fe91 	bl	8000210 <memchr>
 80134ee:	b108      	cbz	r0, 80134f4 <_printf_i+0x1bc>
 80134f0:	1b40      	subs	r0, r0, r5
 80134f2:	6060      	str	r0, [r4, #4]
 80134f4:	6863      	ldr	r3, [r4, #4]
 80134f6:	6123      	str	r3, [r4, #16]
 80134f8:	2300      	movs	r3, #0
 80134fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80134fe:	e7a7      	b.n	8013450 <_printf_i+0x118>
 8013500:	6923      	ldr	r3, [r4, #16]
 8013502:	462a      	mov	r2, r5
 8013504:	4639      	mov	r1, r7
 8013506:	4630      	mov	r0, r6
 8013508:	47c0      	blx	r8
 801350a:	3001      	adds	r0, #1
 801350c:	d0aa      	beq.n	8013464 <_printf_i+0x12c>
 801350e:	6823      	ldr	r3, [r4, #0]
 8013510:	079b      	lsls	r3, r3, #30
 8013512:	d413      	bmi.n	801353c <_printf_i+0x204>
 8013514:	68e0      	ldr	r0, [r4, #12]
 8013516:	9b03      	ldr	r3, [sp, #12]
 8013518:	4298      	cmp	r0, r3
 801351a:	bfb8      	it	lt
 801351c:	4618      	movlt	r0, r3
 801351e:	e7a3      	b.n	8013468 <_printf_i+0x130>
 8013520:	2301      	movs	r3, #1
 8013522:	464a      	mov	r2, r9
 8013524:	4639      	mov	r1, r7
 8013526:	4630      	mov	r0, r6
 8013528:	47c0      	blx	r8
 801352a:	3001      	adds	r0, #1
 801352c:	d09a      	beq.n	8013464 <_printf_i+0x12c>
 801352e:	3501      	adds	r5, #1
 8013530:	68e3      	ldr	r3, [r4, #12]
 8013532:	9a03      	ldr	r2, [sp, #12]
 8013534:	1a9b      	subs	r3, r3, r2
 8013536:	42ab      	cmp	r3, r5
 8013538:	dcf2      	bgt.n	8013520 <_printf_i+0x1e8>
 801353a:	e7eb      	b.n	8013514 <_printf_i+0x1dc>
 801353c:	2500      	movs	r5, #0
 801353e:	f104 0919 	add.w	r9, r4, #25
 8013542:	e7f5      	b.n	8013530 <_printf_i+0x1f8>
 8013544:	2b00      	cmp	r3, #0
 8013546:	d1ac      	bne.n	80134a2 <_printf_i+0x16a>
 8013548:	7803      	ldrb	r3, [r0, #0]
 801354a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801354e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013552:	e76c      	b.n	801342e <_printf_i+0xf6>
 8013554:	0801625c 	.word	0x0801625c
 8013558:	0801626d 	.word	0x0801626d

0801355c <_sbrk_r>:
 801355c:	b538      	push	{r3, r4, r5, lr}
 801355e:	4c06      	ldr	r4, [pc, #24]	; (8013578 <_sbrk_r+0x1c>)
 8013560:	2300      	movs	r3, #0
 8013562:	4605      	mov	r5, r0
 8013564:	4608      	mov	r0, r1
 8013566:	6023      	str	r3, [r4, #0]
 8013568:	f7ef fd3e 	bl	8002fe8 <_sbrk>
 801356c:	1c43      	adds	r3, r0, #1
 801356e:	d102      	bne.n	8013576 <_sbrk_r+0x1a>
 8013570:	6823      	ldr	r3, [r4, #0]
 8013572:	b103      	cbz	r3, 8013576 <_sbrk_r+0x1a>
 8013574:	602b      	str	r3, [r5, #0]
 8013576:	bd38      	pop	{r3, r4, r5, pc}
 8013578:	2000e4bc 	.word	0x2000e4bc

0801357c <__malloc_lock>:
 801357c:	4770      	bx	lr

0801357e <__malloc_unlock>:
 801357e:	4770      	bx	lr

08013580 <_free_r>:
 8013580:	b538      	push	{r3, r4, r5, lr}
 8013582:	4605      	mov	r5, r0
 8013584:	2900      	cmp	r1, #0
 8013586:	d045      	beq.n	8013614 <_free_r+0x94>
 8013588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801358c:	1f0c      	subs	r4, r1, #4
 801358e:	2b00      	cmp	r3, #0
 8013590:	bfb8      	it	lt
 8013592:	18e4      	addlt	r4, r4, r3
 8013594:	f7ff fff2 	bl	801357c <__malloc_lock>
 8013598:	4a1f      	ldr	r2, [pc, #124]	; (8013618 <_free_r+0x98>)
 801359a:	6813      	ldr	r3, [r2, #0]
 801359c:	4610      	mov	r0, r2
 801359e:	b933      	cbnz	r3, 80135ae <_free_r+0x2e>
 80135a0:	6063      	str	r3, [r4, #4]
 80135a2:	6014      	str	r4, [r2, #0]
 80135a4:	4628      	mov	r0, r5
 80135a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135aa:	f7ff bfe8 	b.w	801357e <__malloc_unlock>
 80135ae:	42a3      	cmp	r3, r4
 80135b0:	d90c      	bls.n	80135cc <_free_r+0x4c>
 80135b2:	6821      	ldr	r1, [r4, #0]
 80135b4:	1862      	adds	r2, r4, r1
 80135b6:	4293      	cmp	r3, r2
 80135b8:	bf04      	itt	eq
 80135ba:	681a      	ldreq	r2, [r3, #0]
 80135bc:	685b      	ldreq	r3, [r3, #4]
 80135be:	6063      	str	r3, [r4, #4]
 80135c0:	bf04      	itt	eq
 80135c2:	1852      	addeq	r2, r2, r1
 80135c4:	6022      	streq	r2, [r4, #0]
 80135c6:	6004      	str	r4, [r0, #0]
 80135c8:	e7ec      	b.n	80135a4 <_free_r+0x24>
 80135ca:	4613      	mov	r3, r2
 80135cc:	685a      	ldr	r2, [r3, #4]
 80135ce:	b10a      	cbz	r2, 80135d4 <_free_r+0x54>
 80135d0:	42a2      	cmp	r2, r4
 80135d2:	d9fa      	bls.n	80135ca <_free_r+0x4a>
 80135d4:	6819      	ldr	r1, [r3, #0]
 80135d6:	1858      	adds	r0, r3, r1
 80135d8:	42a0      	cmp	r0, r4
 80135da:	d10b      	bne.n	80135f4 <_free_r+0x74>
 80135dc:	6820      	ldr	r0, [r4, #0]
 80135de:	4401      	add	r1, r0
 80135e0:	1858      	adds	r0, r3, r1
 80135e2:	4282      	cmp	r2, r0
 80135e4:	6019      	str	r1, [r3, #0]
 80135e6:	d1dd      	bne.n	80135a4 <_free_r+0x24>
 80135e8:	6810      	ldr	r0, [r2, #0]
 80135ea:	6852      	ldr	r2, [r2, #4]
 80135ec:	605a      	str	r2, [r3, #4]
 80135ee:	4401      	add	r1, r0
 80135f0:	6019      	str	r1, [r3, #0]
 80135f2:	e7d7      	b.n	80135a4 <_free_r+0x24>
 80135f4:	d902      	bls.n	80135fc <_free_r+0x7c>
 80135f6:	230c      	movs	r3, #12
 80135f8:	602b      	str	r3, [r5, #0]
 80135fa:	e7d3      	b.n	80135a4 <_free_r+0x24>
 80135fc:	6820      	ldr	r0, [r4, #0]
 80135fe:	1821      	adds	r1, r4, r0
 8013600:	428a      	cmp	r2, r1
 8013602:	bf04      	itt	eq
 8013604:	6811      	ldreq	r1, [r2, #0]
 8013606:	6852      	ldreq	r2, [r2, #4]
 8013608:	6062      	str	r2, [r4, #4]
 801360a:	bf04      	itt	eq
 801360c:	1809      	addeq	r1, r1, r0
 801360e:	6021      	streq	r1, [r4, #0]
 8013610:	605c      	str	r4, [r3, #4]
 8013612:	e7c7      	b.n	80135a4 <_free_r+0x24>
 8013614:	bd38      	pop	{r3, r4, r5, pc}
 8013616:	bf00      	nop
 8013618:	20000468 	.word	0x20000468

0801361c <_realloc_r>:
 801361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801361e:	4607      	mov	r7, r0
 8013620:	4614      	mov	r4, r2
 8013622:	460e      	mov	r6, r1
 8013624:	b921      	cbnz	r1, 8013630 <_realloc_r+0x14>
 8013626:	4611      	mov	r1, r2
 8013628:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801362c:	f7ff bc62 	b.w	8012ef4 <_malloc_r>
 8013630:	b922      	cbnz	r2, 801363c <_realloc_r+0x20>
 8013632:	f7ff ffa5 	bl	8013580 <_free_r>
 8013636:	4625      	mov	r5, r4
 8013638:	4628      	mov	r0, r5
 801363a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801363c:	f000 f814 	bl	8013668 <_malloc_usable_size_r>
 8013640:	42a0      	cmp	r0, r4
 8013642:	d20f      	bcs.n	8013664 <_realloc_r+0x48>
 8013644:	4621      	mov	r1, r4
 8013646:	4638      	mov	r0, r7
 8013648:	f7ff fc54 	bl	8012ef4 <_malloc_r>
 801364c:	4605      	mov	r5, r0
 801364e:	2800      	cmp	r0, #0
 8013650:	d0f2      	beq.n	8013638 <_realloc_r+0x1c>
 8013652:	4631      	mov	r1, r6
 8013654:	4622      	mov	r2, r4
 8013656:	f7ff f8fd 	bl	8012854 <memcpy>
 801365a:	4631      	mov	r1, r6
 801365c:	4638      	mov	r0, r7
 801365e:	f7ff ff8f 	bl	8013580 <_free_r>
 8013662:	e7e9      	b.n	8013638 <_realloc_r+0x1c>
 8013664:	4635      	mov	r5, r6
 8013666:	e7e7      	b.n	8013638 <_realloc_r+0x1c>

08013668 <_malloc_usable_size_r>:
 8013668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801366c:	1f18      	subs	r0, r3, #4
 801366e:	2b00      	cmp	r3, #0
 8013670:	bfbc      	itt	lt
 8013672:	580b      	ldrlt	r3, [r1, r0]
 8013674:	18c0      	addlt	r0, r0, r3
 8013676:	4770      	bx	lr

08013678 <sin>:
 8013678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801367a:	ec51 0b10 	vmov	r0, r1, d0
 801367e:	4a20      	ldr	r2, [pc, #128]	; (8013700 <sin+0x88>)
 8013680:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013684:	4293      	cmp	r3, r2
 8013686:	dc07      	bgt.n	8013698 <sin+0x20>
 8013688:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80136f8 <sin+0x80>
 801368c:	2000      	movs	r0, #0
 801368e:	f001 fd67 	bl	8015160 <__kernel_sin>
 8013692:	ec51 0b10 	vmov	r0, r1, d0
 8013696:	e007      	b.n	80136a8 <sin+0x30>
 8013698:	4a1a      	ldr	r2, [pc, #104]	; (8013704 <sin+0x8c>)
 801369a:	4293      	cmp	r3, r2
 801369c:	dd09      	ble.n	80136b2 <sin+0x3a>
 801369e:	ee10 2a10 	vmov	r2, s0
 80136a2:	460b      	mov	r3, r1
 80136a4:	f7ec fe08 	bl	80002b8 <__aeabi_dsub>
 80136a8:	ec41 0b10 	vmov	d0, r0, r1
 80136ac:	b005      	add	sp, #20
 80136ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80136b2:	4668      	mov	r0, sp
 80136b4:	f000 fea8 	bl	8014408 <__ieee754_rem_pio2>
 80136b8:	f000 0003 	and.w	r0, r0, #3
 80136bc:	2801      	cmp	r0, #1
 80136be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80136c2:	ed9d 0b00 	vldr	d0, [sp]
 80136c6:	d004      	beq.n	80136d2 <sin+0x5a>
 80136c8:	2802      	cmp	r0, #2
 80136ca:	d005      	beq.n	80136d8 <sin+0x60>
 80136cc:	b970      	cbnz	r0, 80136ec <sin+0x74>
 80136ce:	2001      	movs	r0, #1
 80136d0:	e7dd      	b.n	801368e <sin+0x16>
 80136d2:	f001 f93d 	bl	8014950 <__kernel_cos>
 80136d6:	e7dc      	b.n	8013692 <sin+0x1a>
 80136d8:	2001      	movs	r0, #1
 80136da:	f001 fd41 	bl	8015160 <__kernel_sin>
 80136de:	ec53 2b10 	vmov	r2, r3, d0
 80136e2:	ee10 0a10 	vmov	r0, s0
 80136e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80136ea:	e7dd      	b.n	80136a8 <sin+0x30>
 80136ec:	f001 f930 	bl	8014950 <__kernel_cos>
 80136f0:	e7f5      	b.n	80136de <sin+0x66>
 80136f2:	bf00      	nop
 80136f4:	f3af 8000 	nop.w
	...
 8013700:	3fe921fb 	.word	0x3fe921fb
 8013704:	7fefffff 	.word	0x7fefffff

08013708 <pow>:
 8013708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801370c:	ed2d 8b04 	vpush	{d8-d9}
 8013710:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80139e4 <pow+0x2dc>
 8013714:	b08d      	sub	sp, #52	; 0x34
 8013716:	ec57 6b10 	vmov	r6, r7, d0
 801371a:	ec55 4b11 	vmov	r4, r5, d1
 801371e:	f000 f963 	bl	80139e8 <__ieee754_pow>
 8013722:	f999 3000 	ldrsb.w	r3, [r9]
 8013726:	9300      	str	r3, [sp, #0]
 8013728:	3301      	adds	r3, #1
 801372a:	eeb0 8a40 	vmov.f32	s16, s0
 801372e:	eef0 8a60 	vmov.f32	s17, s1
 8013732:	46c8      	mov	r8, r9
 8013734:	d05f      	beq.n	80137f6 <pow+0xee>
 8013736:	4622      	mov	r2, r4
 8013738:	462b      	mov	r3, r5
 801373a:	4620      	mov	r0, r4
 801373c:	4629      	mov	r1, r5
 801373e:	f7ed fa0d 	bl	8000b5c <__aeabi_dcmpun>
 8013742:	4683      	mov	fp, r0
 8013744:	2800      	cmp	r0, #0
 8013746:	d156      	bne.n	80137f6 <pow+0xee>
 8013748:	4632      	mov	r2, r6
 801374a:	463b      	mov	r3, r7
 801374c:	4630      	mov	r0, r6
 801374e:	4639      	mov	r1, r7
 8013750:	f7ed fa04 	bl	8000b5c <__aeabi_dcmpun>
 8013754:	9001      	str	r0, [sp, #4]
 8013756:	b1e8      	cbz	r0, 8013794 <pow+0x8c>
 8013758:	2200      	movs	r2, #0
 801375a:	2300      	movs	r3, #0
 801375c:	4620      	mov	r0, r4
 801375e:	4629      	mov	r1, r5
 8013760:	f7ed f9ca 	bl	8000af8 <__aeabi_dcmpeq>
 8013764:	2800      	cmp	r0, #0
 8013766:	d046      	beq.n	80137f6 <pow+0xee>
 8013768:	2301      	movs	r3, #1
 801376a:	9302      	str	r3, [sp, #8]
 801376c:	4b96      	ldr	r3, [pc, #600]	; (80139c8 <pow+0x2c0>)
 801376e:	9303      	str	r3, [sp, #12]
 8013770:	4b96      	ldr	r3, [pc, #600]	; (80139cc <pow+0x2c4>)
 8013772:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8013776:	2200      	movs	r2, #0
 8013778:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801377c:	9b00      	ldr	r3, [sp, #0]
 801377e:	2b02      	cmp	r3, #2
 8013780:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013784:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013788:	d033      	beq.n	80137f2 <pow+0xea>
 801378a:	a802      	add	r0, sp, #8
 801378c:	f001 fe38 	bl	8015400 <matherr>
 8013790:	bb48      	cbnz	r0, 80137e6 <pow+0xde>
 8013792:	e05d      	b.n	8013850 <pow+0x148>
 8013794:	f04f 0a00 	mov.w	sl, #0
 8013798:	f04f 0b00 	mov.w	fp, #0
 801379c:	4652      	mov	r2, sl
 801379e:	465b      	mov	r3, fp
 80137a0:	4630      	mov	r0, r6
 80137a2:	4639      	mov	r1, r7
 80137a4:	f7ed f9a8 	bl	8000af8 <__aeabi_dcmpeq>
 80137a8:	ec4b ab19 	vmov	d9, sl, fp
 80137ac:	2800      	cmp	r0, #0
 80137ae:	d054      	beq.n	801385a <pow+0x152>
 80137b0:	4652      	mov	r2, sl
 80137b2:	465b      	mov	r3, fp
 80137b4:	4620      	mov	r0, r4
 80137b6:	4629      	mov	r1, r5
 80137b8:	f7ed f99e 	bl	8000af8 <__aeabi_dcmpeq>
 80137bc:	4680      	mov	r8, r0
 80137be:	b318      	cbz	r0, 8013808 <pow+0x100>
 80137c0:	2301      	movs	r3, #1
 80137c2:	9302      	str	r3, [sp, #8]
 80137c4:	4b80      	ldr	r3, [pc, #512]	; (80139c8 <pow+0x2c0>)
 80137c6:	9303      	str	r3, [sp, #12]
 80137c8:	9b01      	ldr	r3, [sp, #4]
 80137ca:	930a      	str	r3, [sp, #40]	; 0x28
 80137cc:	9b00      	ldr	r3, [sp, #0]
 80137ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80137d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80137d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d0d5      	beq.n	801378a <pow+0x82>
 80137de:	4b7b      	ldr	r3, [pc, #492]	; (80139cc <pow+0x2c4>)
 80137e0:	2200      	movs	r2, #0
 80137e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80137e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137e8:	b11b      	cbz	r3, 80137f2 <pow+0xea>
 80137ea:	f7fe ffe5 	bl	80127b8 <__errno>
 80137ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137f0:	6003      	str	r3, [r0, #0]
 80137f2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80137f6:	eeb0 0a48 	vmov.f32	s0, s16
 80137fa:	eef0 0a68 	vmov.f32	s1, s17
 80137fe:	b00d      	add	sp, #52	; 0x34
 8013800:	ecbd 8b04 	vpop	{d8-d9}
 8013804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013808:	ec45 4b10 	vmov	d0, r4, r5
 801380c:	f001 fd6b 	bl	80152e6 <finite>
 8013810:	2800      	cmp	r0, #0
 8013812:	d0f0      	beq.n	80137f6 <pow+0xee>
 8013814:	4652      	mov	r2, sl
 8013816:	465b      	mov	r3, fp
 8013818:	4620      	mov	r0, r4
 801381a:	4629      	mov	r1, r5
 801381c:	f7ed f976 	bl	8000b0c <__aeabi_dcmplt>
 8013820:	2800      	cmp	r0, #0
 8013822:	d0e8      	beq.n	80137f6 <pow+0xee>
 8013824:	2301      	movs	r3, #1
 8013826:	9302      	str	r3, [sp, #8]
 8013828:	4b67      	ldr	r3, [pc, #412]	; (80139c8 <pow+0x2c0>)
 801382a:	9303      	str	r3, [sp, #12]
 801382c:	f999 3000 	ldrsb.w	r3, [r9]
 8013830:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013834:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013838:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801383c:	b913      	cbnz	r3, 8013844 <pow+0x13c>
 801383e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013842:	e7a2      	b.n	801378a <pow+0x82>
 8013844:	4962      	ldr	r1, [pc, #392]	; (80139d0 <pow+0x2c8>)
 8013846:	2000      	movs	r0, #0
 8013848:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801384c:	2b02      	cmp	r3, #2
 801384e:	d19c      	bne.n	801378a <pow+0x82>
 8013850:	f7fe ffb2 	bl	80127b8 <__errno>
 8013854:	2321      	movs	r3, #33	; 0x21
 8013856:	6003      	str	r3, [r0, #0]
 8013858:	e7c5      	b.n	80137e6 <pow+0xde>
 801385a:	eeb0 0a48 	vmov.f32	s0, s16
 801385e:	eef0 0a68 	vmov.f32	s1, s17
 8013862:	f001 fd40 	bl	80152e6 <finite>
 8013866:	9000      	str	r0, [sp, #0]
 8013868:	2800      	cmp	r0, #0
 801386a:	f040 8081 	bne.w	8013970 <pow+0x268>
 801386e:	ec47 6b10 	vmov	d0, r6, r7
 8013872:	f001 fd38 	bl	80152e6 <finite>
 8013876:	2800      	cmp	r0, #0
 8013878:	d07a      	beq.n	8013970 <pow+0x268>
 801387a:	ec45 4b10 	vmov	d0, r4, r5
 801387e:	f001 fd32 	bl	80152e6 <finite>
 8013882:	2800      	cmp	r0, #0
 8013884:	d074      	beq.n	8013970 <pow+0x268>
 8013886:	ec53 2b18 	vmov	r2, r3, d8
 801388a:	ee18 0a10 	vmov	r0, s16
 801388e:	4619      	mov	r1, r3
 8013890:	f7ed f964 	bl	8000b5c <__aeabi_dcmpun>
 8013894:	f999 9000 	ldrsb.w	r9, [r9]
 8013898:	4b4b      	ldr	r3, [pc, #300]	; (80139c8 <pow+0x2c0>)
 801389a:	b1b0      	cbz	r0, 80138ca <pow+0x1c2>
 801389c:	2201      	movs	r2, #1
 801389e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80138a2:	9b00      	ldr	r3, [sp, #0]
 80138a4:	930a      	str	r3, [sp, #40]	; 0x28
 80138a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80138aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80138ae:	f1b9 0f00 	cmp.w	r9, #0
 80138b2:	d0c4      	beq.n	801383e <pow+0x136>
 80138b4:	4652      	mov	r2, sl
 80138b6:	465b      	mov	r3, fp
 80138b8:	4650      	mov	r0, sl
 80138ba:	4659      	mov	r1, fp
 80138bc:	f7ec ffde 	bl	800087c <__aeabi_ddiv>
 80138c0:	f1b9 0f02 	cmp.w	r9, #2
 80138c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80138c8:	e7c1      	b.n	801384e <pow+0x146>
 80138ca:	2203      	movs	r2, #3
 80138cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80138d0:	900a      	str	r0, [sp, #40]	; 0x28
 80138d2:	4629      	mov	r1, r5
 80138d4:	4620      	mov	r0, r4
 80138d6:	2200      	movs	r2, #0
 80138d8:	4b3e      	ldr	r3, [pc, #248]	; (80139d4 <pow+0x2cc>)
 80138da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80138de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80138e2:	f7ec fea1 	bl	8000628 <__aeabi_dmul>
 80138e6:	4604      	mov	r4, r0
 80138e8:	460d      	mov	r5, r1
 80138ea:	f1b9 0f00 	cmp.w	r9, #0
 80138ee:	d124      	bne.n	801393a <pow+0x232>
 80138f0:	4b39      	ldr	r3, [pc, #228]	; (80139d8 <pow+0x2d0>)
 80138f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80138f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80138fa:	4630      	mov	r0, r6
 80138fc:	4652      	mov	r2, sl
 80138fe:	465b      	mov	r3, fp
 8013900:	4639      	mov	r1, r7
 8013902:	f7ed f903 	bl	8000b0c <__aeabi_dcmplt>
 8013906:	2800      	cmp	r0, #0
 8013908:	d056      	beq.n	80139b8 <pow+0x2b0>
 801390a:	ec45 4b10 	vmov	d0, r4, r5
 801390e:	f001 fd83 	bl	8015418 <rint>
 8013912:	4622      	mov	r2, r4
 8013914:	462b      	mov	r3, r5
 8013916:	ec51 0b10 	vmov	r0, r1, d0
 801391a:	f7ed f8ed 	bl	8000af8 <__aeabi_dcmpeq>
 801391e:	b920      	cbnz	r0, 801392a <pow+0x222>
 8013920:	4b2e      	ldr	r3, [pc, #184]	; (80139dc <pow+0x2d4>)
 8013922:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013926:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801392a:	f998 3000 	ldrsb.w	r3, [r8]
 801392e:	2b02      	cmp	r3, #2
 8013930:	d142      	bne.n	80139b8 <pow+0x2b0>
 8013932:	f7fe ff41 	bl	80127b8 <__errno>
 8013936:	2322      	movs	r3, #34	; 0x22
 8013938:	e78d      	b.n	8013856 <pow+0x14e>
 801393a:	4b29      	ldr	r3, [pc, #164]	; (80139e0 <pow+0x2d8>)
 801393c:	2200      	movs	r2, #0
 801393e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013942:	4630      	mov	r0, r6
 8013944:	4652      	mov	r2, sl
 8013946:	465b      	mov	r3, fp
 8013948:	4639      	mov	r1, r7
 801394a:	f7ed f8df 	bl	8000b0c <__aeabi_dcmplt>
 801394e:	2800      	cmp	r0, #0
 8013950:	d0eb      	beq.n	801392a <pow+0x222>
 8013952:	ec45 4b10 	vmov	d0, r4, r5
 8013956:	f001 fd5f 	bl	8015418 <rint>
 801395a:	4622      	mov	r2, r4
 801395c:	462b      	mov	r3, r5
 801395e:	ec51 0b10 	vmov	r0, r1, d0
 8013962:	f7ed f8c9 	bl	8000af8 <__aeabi_dcmpeq>
 8013966:	2800      	cmp	r0, #0
 8013968:	d1df      	bne.n	801392a <pow+0x222>
 801396a:	2200      	movs	r2, #0
 801396c:	4b18      	ldr	r3, [pc, #96]	; (80139d0 <pow+0x2c8>)
 801396e:	e7da      	b.n	8013926 <pow+0x21e>
 8013970:	2200      	movs	r2, #0
 8013972:	2300      	movs	r3, #0
 8013974:	ec51 0b18 	vmov	r0, r1, d8
 8013978:	f7ed f8be 	bl	8000af8 <__aeabi_dcmpeq>
 801397c:	2800      	cmp	r0, #0
 801397e:	f43f af3a 	beq.w	80137f6 <pow+0xee>
 8013982:	ec47 6b10 	vmov	d0, r6, r7
 8013986:	f001 fcae 	bl	80152e6 <finite>
 801398a:	2800      	cmp	r0, #0
 801398c:	f43f af33 	beq.w	80137f6 <pow+0xee>
 8013990:	ec45 4b10 	vmov	d0, r4, r5
 8013994:	f001 fca7 	bl	80152e6 <finite>
 8013998:	2800      	cmp	r0, #0
 801399a:	f43f af2c 	beq.w	80137f6 <pow+0xee>
 801399e:	2304      	movs	r3, #4
 80139a0:	9302      	str	r3, [sp, #8]
 80139a2:	4b09      	ldr	r3, [pc, #36]	; (80139c8 <pow+0x2c0>)
 80139a4:	9303      	str	r3, [sp, #12]
 80139a6:	2300      	movs	r3, #0
 80139a8:	930a      	str	r3, [sp, #40]	; 0x28
 80139aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80139ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80139b2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80139b6:	e7b8      	b.n	801392a <pow+0x222>
 80139b8:	a802      	add	r0, sp, #8
 80139ba:	f001 fd21 	bl	8015400 <matherr>
 80139be:	2800      	cmp	r0, #0
 80139c0:	f47f af11 	bne.w	80137e6 <pow+0xde>
 80139c4:	e7b5      	b.n	8013932 <pow+0x22a>
 80139c6:	bf00      	nop
 80139c8:	0801627e 	.word	0x0801627e
 80139cc:	3ff00000 	.word	0x3ff00000
 80139d0:	fff00000 	.word	0xfff00000
 80139d4:	3fe00000 	.word	0x3fe00000
 80139d8:	47efffff 	.word	0x47efffff
 80139dc:	c7efffff 	.word	0xc7efffff
 80139e0:	7ff00000 	.word	0x7ff00000
 80139e4:	200001f4 	.word	0x200001f4

080139e8 <__ieee754_pow>:
 80139e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ec:	b091      	sub	sp, #68	; 0x44
 80139ee:	ed8d 1b00 	vstr	d1, [sp]
 80139f2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80139f6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80139fa:	ea58 0302 	orrs.w	r3, r8, r2
 80139fe:	ec57 6b10 	vmov	r6, r7, d0
 8013a02:	f000 84be 	beq.w	8014382 <__ieee754_pow+0x99a>
 8013a06:	4b7a      	ldr	r3, [pc, #488]	; (8013bf0 <__ieee754_pow+0x208>)
 8013a08:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013a0c:	429c      	cmp	r4, r3
 8013a0e:	463d      	mov	r5, r7
 8013a10:	ee10 aa10 	vmov	sl, s0
 8013a14:	dc09      	bgt.n	8013a2a <__ieee754_pow+0x42>
 8013a16:	d103      	bne.n	8013a20 <__ieee754_pow+0x38>
 8013a18:	b93e      	cbnz	r6, 8013a2a <__ieee754_pow+0x42>
 8013a1a:	45a0      	cmp	r8, r4
 8013a1c:	dc0d      	bgt.n	8013a3a <__ieee754_pow+0x52>
 8013a1e:	e001      	b.n	8013a24 <__ieee754_pow+0x3c>
 8013a20:	4598      	cmp	r8, r3
 8013a22:	dc02      	bgt.n	8013a2a <__ieee754_pow+0x42>
 8013a24:	4598      	cmp	r8, r3
 8013a26:	d10e      	bne.n	8013a46 <__ieee754_pow+0x5e>
 8013a28:	b16a      	cbz	r2, 8013a46 <__ieee754_pow+0x5e>
 8013a2a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013a2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013a32:	ea54 030a 	orrs.w	r3, r4, sl
 8013a36:	f000 84a4 	beq.w	8014382 <__ieee754_pow+0x99a>
 8013a3a:	486e      	ldr	r0, [pc, #440]	; (8013bf4 <__ieee754_pow+0x20c>)
 8013a3c:	b011      	add	sp, #68	; 0x44
 8013a3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a42:	f001 bce1 	b.w	8015408 <nan>
 8013a46:	2d00      	cmp	r5, #0
 8013a48:	da53      	bge.n	8013af2 <__ieee754_pow+0x10a>
 8013a4a:	4b6b      	ldr	r3, [pc, #428]	; (8013bf8 <__ieee754_pow+0x210>)
 8013a4c:	4598      	cmp	r8, r3
 8013a4e:	dc4d      	bgt.n	8013aec <__ieee754_pow+0x104>
 8013a50:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013a54:	4598      	cmp	r8, r3
 8013a56:	dd4c      	ble.n	8013af2 <__ieee754_pow+0x10a>
 8013a58:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013a5c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013a60:	2b14      	cmp	r3, #20
 8013a62:	dd26      	ble.n	8013ab2 <__ieee754_pow+0xca>
 8013a64:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013a68:	fa22 f103 	lsr.w	r1, r2, r3
 8013a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8013a70:	4293      	cmp	r3, r2
 8013a72:	d13e      	bne.n	8013af2 <__ieee754_pow+0x10a>
 8013a74:	f001 0101 	and.w	r1, r1, #1
 8013a78:	f1c1 0b02 	rsb	fp, r1, #2
 8013a7c:	2a00      	cmp	r2, #0
 8013a7e:	d15b      	bne.n	8013b38 <__ieee754_pow+0x150>
 8013a80:	4b5b      	ldr	r3, [pc, #364]	; (8013bf0 <__ieee754_pow+0x208>)
 8013a82:	4598      	cmp	r8, r3
 8013a84:	d124      	bne.n	8013ad0 <__ieee754_pow+0xe8>
 8013a86:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013a8a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013a8e:	ea53 030a 	orrs.w	r3, r3, sl
 8013a92:	f000 8476 	beq.w	8014382 <__ieee754_pow+0x99a>
 8013a96:	4b59      	ldr	r3, [pc, #356]	; (8013bfc <__ieee754_pow+0x214>)
 8013a98:	429c      	cmp	r4, r3
 8013a9a:	dd2d      	ble.n	8013af8 <__ieee754_pow+0x110>
 8013a9c:	f1b9 0f00 	cmp.w	r9, #0
 8013aa0:	f280 8473 	bge.w	801438a <__ieee754_pow+0x9a2>
 8013aa4:	2000      	movs	r0, #0
 8013aa6:	2100      	movs	r1, #0
 8013aa8:	ec41 0b10 	vmov	d0, r0, r1
 8013aac:	b011      	add	sp, #68	; 0x44
 8013aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab2:	2a00      	cmp	r2, #0
 8013ab4:	d13e      	bne.n	8013b34 <__ieee754_pow+0x14c>
 8013ab6:	f1c3 0314 	rsb	r3, r3, #20
 8013aba:	fa48 f103 	asr.w	r1, r8, r3
 8013abe:	fa01 f303 	lsl.w	r3, r1, r3
 8013ac2:	4543      	cmp	r3, r8
 8013ac4:	f040 8469 	bne.w	801439a <__ieee754_pow+0x9b2>
 8013ac8:	f001 0101 	and.w	r1, r1, #1
 8013acc:	f1c1 0b02 	rsb	fp, r1, #2
 8013ad0:	4b4b      	ldr	r3, [pc, #300]	; (8013c00 <__ieee754_pow+0x218>)
 8013ad2:	4598      	cmp	r8, r3
 8013ad4:	d118      	bne.n	8013b08 <__ieee754_pow+0x120>
 8013ad6:	f1b9 0f00 	cmp.w	r9, #0
 8013ada:	f280 845a 	bge.w	8014392 <__ieee754_pow+0x9aa>
 8013ade:	4948      	ldr	r1, [pc, #288]	; (8013c00 <__ieee754_pow+0x218>)
 8013ae0:	4632      	mov	r2, r6
 8013ae2:	463b      	mov	r3, r7
 8013ae4:	2000      	movs	r0, #0
 8013ae6:	f7ec fec9 	bl	800087c <__aeabi_ddiv>
 8013aea:	e7dd      	b.n	8013aa8 <__ieee754_pow+0xc0>
 8013aec:	f04f 0b02 	mov.w	fp, #2
 8013af0:	e7c4      	b.n	8013a7c <__ieee754_pow+0x94>
 8013af2:	f04f 0b00 	mov.w	fp, #0
 8013af6:	e7c1      	b.n	8013a7c <__ieee754_pow+0x94>
 8013af8:	f1b9 0f00 	cmp.w	r9, #0
 8013afc:	dad2      	bge.n	8013aa4 <__ieee754_pow+0xbc>
 8013afe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013b02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013b06:	e7cf      	b.n	8013aa8 <__ieee754_pow+0xc0>
 8013b08:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013b0c:	d106      	bne.n	8013b1c <__ieee754_pow+0x134>
 8013b0e:	4632      	mov	r2, r6
 8013b10:	463b      	mov	r3, r7
 8013b12:	4610      	mov	r0, r2
 8013b14:	4619      	mov	r1, r3
 8013b16:	f7ec fd87 	bl	8000628 <__aeabi_dmul>
 8013b1a:	e7c5      	b.n	8013aa8 <__ieee754_pow+0xc0>
 8013b1c:	4b39      	ldr	r3, [pc, #228]	; (8013c04 <__ieee754_pow+0x21c>)
 8013b1e:	4599      	cmp	r9, r3
 8013b20:	d10a      	bne.n	8013b38 <__ieee754_pow+0x150>
 8013b22:	2d00      	cmp	r5, #0
 8013b24:	db08      	blt.n	8013b38 <__ieee754_pow+0x150>
 8013b26:	ec47 6b10 	vmov	d0, r6, r7
 8013b2a:	b011      	add	sp, #68	; 0x44
 8013b2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b30:	f000 be5c 	b.w	80147ec <__ieee754_sqrt>
 8013b34:	f04f 0b00 	mov.w	fp, #0
 8013b38:	ec47 6b10 	vmov	d0, r6, r7
 8013b3c:	f001 fbca 	bl	80152d4 <fabs>
 8013b40:	ec51 0b10 	vmov	r0, r1, d0
 8013b44:	f1ba 0f00 	cmp.w	sl, #0
 8013b48:	d127      	bne.n	8013b9a <__ieee754_pow+0x1b2>
 8013b4a:	b124      	cbz	r4, 8013b56 <__ieee754_pow+0x16e>
 8013b4c:	4b2c      	ldr	r3, [pc, #176]	; (8013c00 <__ieee754_pow+0x218>)
 8013b4e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d121      	bne.n	8013b9a <__ieee754_pow+0x1b2>
 8013b56:	f1b9 0f00 	cmp.w	r9, #0
 8013b5a:	da05      	bge.n	8013b68 <__ieee754_pow+0x180>
 8013b5c:	4602      	mov	r2, r0
 8013b5e:	460b      	mov	r3, r1
 8013b60:	2000      	movs	r0, #0
 8013b62:	4927      	ldr	r1, [pc, #156]	; (8013c00 <__ieee754_pow+0x218>)
 8013b64:	f7ec fe8a 	bl	800087c <__aeabi_ddiv>
 8013b68:	2d00      	cmp	r5, #0
 8013b6a:	da9d      	bge.n	8013aa8 <__ieee754_pow+0xc0>
 8013b6c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013b70:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013b74:	ea54 030b 	orrs.w	r3, r4, fp
 8013b78:	d108      	bne.n	8013b8c <__ieee754_pow+0x1a4>
 8013b7a:	4602      	mov	r2, r0
 8013b7c:	460b      	mov	r3, r1
 8013b7e:	4610      	mov	r0, r2
 8013b80:	4619      	mov	r1, r3
 8013b82:	f7ec fb99 	bl	80002b8 <__aeabi_dsub>
 8013b86:	4602      	mov	r2, r0
 8013b88:	460b      	mov	r3, r1
 8013b8a:	e7ac      	b.n	8013ae6 <__ieee754_pow+0xfe>
 8013b8c:	f1bb 0f01 	cmp.w	fp, #1
 8013b90:	d18a      	bne.n	8013aa8 <__ieee754_pow+0xc0>
 8013b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b96:	4619      	mov	r1, r3
 8013b98:	e786      	b.n	8013aa8 <__ieee754_pow+0xc0>
 8013b9a:	0fed      	lsrs	r5, r5, #31
 8013b9c:	1e6b      	subs	r3, r5, #1
 8013b9e:	930d      	str	r3, [sp, #52]	; 0x34
 8013ba0:	ea5b 0303 	orrs.w	r3, fp, r3
 8013ba4:	d102      	bne.n	8013bac <__ieee754_pow+0x1c4>
 8013ba6:	4632      	mov	r2, r6
 8013ba8:	463b      	mov	r3, r7
 8013baa:	e7e8      	b.n	8013b7e <__ieee754_pow+0x196>
 8013bac:	4b16      	ldr	r3, [pc, #88]	; (8013c08 <__ieee754_pow+0x220>)
 8013bae:	4598      	cmp	r8, r3
 8013bb0:	f340 80fe 	ble.w	8013db0 <__ieee754_pow+0x3c8>
 8013bb4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013bb8:	4598      	cmp	r8, r3
 8013bba:	dd0a      	ble.n	8013bd2 <__ieee754_pow+0x1ea>
 8013bbc:	4b0f      	ldr	r3, [pc, #60]	; (8013bfc <__ieee754_pow+0x214>)
 8013bbe:	429c      	cmp	r4, r3
 8013bc0:	dc0d      	bgt.n	8013bde <__ieee754_pow+0x1f6>
 8013bc2:	f1b9 0f00 	cmp.w	r9, #0
 8013bc6:	f6bf af6d 	bge.w	8013aa4 <__ieee754_pow+0xbc>
 8013bca:	a307      	add	r3, pc, #28	; (adr r3, 8013be8 <__ieee754_pow+0x200>)
 8013bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd0:	e79f      	b.n	8013b12 <__ieee754_pow+0x12a>
 8013bd2:	4b0e      	ldr	r3, [pc, #56]	; (8013c0c <__ieee754_pow+0x224>)
 8013bd4:	429c      	cmp	r4, r3
 8013bd6:	ddf4      	ble.n	8013bc2 <__ieee754_pow+0x1da>
 8013bd8:	4b09      	ldr	r3, [pc, #36]	; (8013c00 <__ieee754_pow+0x218>)
 8013bda:	429c      	cmp	r4, r3
 8013bdc:	dd18      	ble.n	8013c10 <__ieee754_pow+0x228>
 8013bde:	f1b9 0f00 	cmp.w	r9, #0
 8013be2:	dcf2      	bgt.n	8013bca <__ieee754_pow+0x1e2>
 8013be4:	e75e      	b.n	8013aa4 <__ieee754_pow+0xbc>
 8013be6:	bf00      	nop
 8013be8:	8800759c 	.word	0x8800759c
 8013bec:	7e37e43c 	.word	0x7e37e43c
 8013bf0:	7ff00000 	.word	0x7ff00000
 8013bf4:	08016250 	.word	0x08016250
 8013bf8:	433fffff 	.word	0x433fffff
 8013bfc:	3fefffff 	.word	0x3fefffff
 8013c00:	3ff00000 	.word	0x3ff00000
 8013c04:	3fe00000 	.word	0x3fe00000
 8013c08:	41e00000 	.word	0x41e00000
 8013c0c:	3feffffe 	.word	0x3feffffe
 8013c10:	2200      	movs	r2, #0
 8013c12:	4b63      	ldr	r3, [pc, #396]	; (8013da0 <__ieee754_pow+0x3b8>)
 8013c14:	f7ec fb50 	bl	80002b8 <__aeabi_dsub>
 8013c18:	a355      	add	r3, pc, #340	; (adr r3, 8013d70 <__ieee754_pow+0x388>)
 8013c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1e:	4604      	mov	r4, r0
 8013c20:	460d      	mov	r5, r1
 8013c22:	f7ec fd01 	bl	8000628 <__aeabi_dmul>
 8013c26:	a354      	add	r3, pc, #336	; (adr r3, 8013d78 <__ieee754_pow+0x390>)
 8013c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c2c:	4606      	mov	r6, r0
 8013c2e:	460f      	mov	r7, r1
 8013c30:	4620      	mov	r0, r4
 8013c32:	4629      	mov	r1, r5
 8013c34:	f7ec fcf8 	bl	8000628 <__aeabi_dmul>
 8013c38:	2200      	movs	r2, #0
 8013c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c3e:	4b59      	ldr	r3, [pc, #356]	; (8013da4 <__ieee754_pow+0x3bc>)
 8013c40:	4620      	mov	r0, r4
 8013c42:	4629      	mov	r1, r5
 8013c44:	f7ec fcf0 	bl	8000628 <__aeabi_dmul>
 8013c48:	4602      	mov	r2, r0
 8013c4a:	460b      	mov	r3, r1
 8013c4c:	a14c      	add	r1, pc, #304	; (adr r1, 8013d80 <__ieee754_pow+0x398>)
 8013c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c52:	f7ec fb31 	bl	80002b8 <__aeabi_dsub>
 8013c56:	4622      	mov	r2, r4
 8013c58:	462b      	mov	r3, r5
 8013c5a:	f7ec fce5 	bl	8000628 <__aeabi_dmul>
 8013c5e:	4602      	mov	r2, r0
 8013c60:	460b      	mov	r3, r1
 8013c62:	2000      	movs	r0, #0
 8013c64:	4950      	ldr	r1, [pc, #320]	; (8013da8 <__ieee754_pow+0x3c0>)
 8013c66:	f7ec fb27 	bl	80002b8 <__aeabi_dsub>
 8013c6a:	4622      	mov	r2, r4
 8013c6c:	462b      	mov	r3, r5
 8013c6e:	4680      	mov	r8, r0
 8013c70:	4689      	mov	r9, r1
 8013c72:	4620      	mov	r0, r4
 8013c74:	4629      	mov	r1, r5
 8013c76:	f7ec fcd7 	bl	8000628 <__aeabi_dmul>
 8013c7a:	4602      	mov	r2, r0
 8013c7c:	460b      	mov	r3, r1
 8013c7e:	4640      	mov	r0, r8
 8013c80:	4649      	mov	r1, r9
 8013c82:	f7ec fcd1 	bl	8000628 <__aeabi_dmul>
 8013c86:	a340      	add	r3, pc, #256	; (adr r3, 8013d88 <__ieee754_pow+0x3a0>)
 8013c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c8c:	f7ec fccc 	bl	8000628 <__aeabi_dmul>
 8013c90:	4602      	mov	r2, r0
 8013c92:	460b      	mov	r3, r1
 8013c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c98:	f7ec fb0e 	bl	80002b8 <__aeabi_dsub>
 8013c9c:	4602      	mov	r2, r0
 8013c9e:	460b      	mov	r3, r1
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	460d      	mov	r5, r1
 8013ca4:	4630      	mov	r0, r6
 8013ca6:	4639      	mov	r1, r7
 8013ca8:	f7ec fb08 	bl	80002bc <__adddf3>
 8013cac:	2000      	movs	r0, #0
 8013cae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013cb2:	4632      	mov	r2, r6
 8013cb4:	463b      	mov	r3, r7
 8013cb6:	f7ec faff 	bl	80002b8 <__aeabi_dsub>
 8013cba:	4602      	mov	r2, r0
 8013cbc:	460b      	mov	r3, r1
 8013cbe:	4620      	mov	r0, r4
 8013cc0:	4629      	mov	r1, r5
 8013cc2:	f7ec faf9 	bl	80002b8 <__aeabi_dsub>
 8013cc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013cc8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013ccc:	4313      	orrs	r3, r2
 8013cce:	4606      	mov	r6, r0
 8013cd0:	460f      	mov	r7, r1
 8013cd2:	f040 81eb 	bne.w	80140ac <__ieee754_pow+0x6c4>
 8013cd6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013d90 <__ieee754_pow+0x3a8>
 8013cda:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013cde:	2400      	movs	r4, #0
 8013ce0:	4622      	mov	r2, r4
 8013ce2:	462b      	mov	r3, r5
 8013ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ce8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013cec:	f7ec fae4 	bl	80002b8 <__aeabi_dsub>
 8013cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013cf4:	f7ec fc98 	bl	8000628 <__aeabi_dmul>
 8013cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cfc:	4680      	mov	r8, r0
 8013cfe:	4689      	mov	r9, r1
 8013d00:	4630      	mov	r0, r6
 8013d02:	4639      	mov	r1, r7
 8013d04:	f7ec fc90 	bl	8000628 <__aeabi_dmul>
 8013d08:	4602      	mov	r2, r0
 8013d0a:	460b      	mov	r3, r1
 8013d0c:	4640      	mov	r0, r8
 8013d0e:	4649      	mov	r1, r9
 8013d10:	f7ec fad4 	bl	80002bc <__adddf3>
 8013d14:	4622      	mov	r2, r4
 8013d16:	462b      	mov	r3, r5
 8013d18:	4680      	mov	r8, r0
 8013d1a:	4689      	mov	r9, r1
 8013d1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d20:	f7ec fc82 	bl	8000628 <__aeabi_dmul>
 8013d24:	460b      	mov	r3, r1
 8013d26:	4604      	mov	r4, r0
 8013d28:	460d      	mov	r5, r1
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	4649      	mov	r1, r9
 8013d2e:	4640      	mov	r0, r8
 8013d30:	e9cd 4500 	strd	r4, r5, [sp]
 8013d34:	f7ec fac2 	bl	80002bc <__adddf3>
 8013d38:	4b1c      	ldr	r3, [pc, #112]	; (8013dac <__ieee754_pow+0x3c4>)
 8013d3a:	4299      	cmp	r1, r3
 8013d3c:	4606      	mov	r6, r0
 8013d3e:	460f      	mov	r7, r1
 8013d40:	468b      	mov	fp, r1
 8013d42:	f340 82f7 	ble.w	8014334 <__ieee754_pow+0x94c>
 8013d46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013d4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013d4e:	4303      	orrs	r3, r0
 8013d50:	f000 81ea 	beq.w	8014128 <__ieee754_pow+0x740>
 8013d54:	a310      	add	r3, pc, #64	; (adr r3, 8013d98 <__ieee754_pow+0x3b0>)
 8013d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d5e:	f7ec fc63 	bl	8000628 <__aeabi_dmul>
 8013d62:	a30d      	add	r3, pc, #52	; (adr r3, 8013d98 <__ieee754_pow+0x3b0>)
 8013d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d68:	e6d5      	b.n	8013b16 <__ieee754_pow+0x12e>
 8013d6a:	bf00      	nop
 8013d6c:	f3af 8000 	nop.w
 8013d70:	60000000 	.word	0x60000000
 8013d74:	3ff71547 	.word	0x3ff71547
 8013d78:	f85ddf44 	.word	0xf85ddf44
 8013d7c:	3e54ae0b 	.word	0x3e54ae0b
 8013d80:	55555555 	.word	0x55555555
 8013d84:	3fd55555 	.word	0x3fd55555
 8013d88:	652b82fe 	.word	0x652b82fe
 8013d8c:	3ff71547 	.word	0x3ff71547
 8013d90:	00000000 	.word	0x00000000
 8013d94:	bff00000 	.word	0xbff00000
 8013d98:	8800759c 	.word	0x8800759c
 8013d9c:	7e37e43c 	.word	0x7e37e43c
 8013da0:	3ff00000 	.word	0x3ff00000
 8013da4:	3fd00000 	.word	0x3fd00000
 8013da8:	3fe00000 	.word	0x3fe00000
 8013dac:	408fffff 	.word	0x408fffff
 8013db0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013db4:	f04f 0200 	mov.w	r2, #0
 8013db8:	da05      	bge.n	8013dc6 <__ieee754_pow+0x3de>
 8013dba:	4bd3      	ldr	r3, [pc, #844]	; (8014108 <__ieee754_pow+0x720>)
 8013dbc:	f7ec fc34 	bl	8000628 <__aeabi_dmul>
 8013dc0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013dc4:	460c      	mov	r4, r1
 8013dc6:	1523      	asrs	r3, r4, #20
 8013dc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013dcc:	4413      	add	r3, r2
 8013dce:	9309      	str	r3, [sp, #36]	; 0x24
 8013dd0:	4bce      	ldr	r3, [pc, #824]	; (801410c <__ieee754_pow+0x724>)
 8013dd2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013dd6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013dda:	429c      	cmp	r4, r3
 8013ddc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013de0:	dd08      	ble.n	8013df4 <__ieee754_pow+0x40c>
 8013de2:	4bcb      	ldr	r3, [pc, #812]	; (8014110 <__ieee754_pow+0x728>)
 8013de4:	429c      	cmp	r4, r3
 8013de6:	f340 815e 	ble.w	80140a6 <__ieee754_pow+0x6be>
 8013dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dec:	3301      	adds	r3, #1
 8013dee:	9309      	str	r3, [sp, #36]	; 0x24
 8013df0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013df4:	f04f 0a00 	mov.w	sl, #0
 8013df8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8013dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013e00:	4bc4      	ldr	r3, [pc, #784]	; (8014114 <__ieee754_pow+0x72c>)
 8013e02:	4413      	add	r3, r2
 8013e04:	ed93 7b00 	vldr	d7, [r3]
 8013e08:	4629      	mov	r1, r5
 8013e0a:	ec53 2b17 	vmov	r2, r3, d7
 8013e0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013e12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013e16:	f7ec fa4f 	bl	80002b8 <__aeabi_dsub>
 8013e1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013e1e:	4606      	mov	r6, r0
 8013e20:	460f      	mov	r7, r1
 8013e22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e26:	f7ec fa49 	bl	80002bc <__adddf3>
 8013e2a:	4602      	mov	r2, r0
 8013e2c:	460b      	mov	r3, r1
 8013e2e:	2000      	movs	r0, #0
 8013e30:	49b9      	ldr	r1, [pc, #740]	; (8014118 <__ieee754_pow+0x730>)
 8013e32:	f7ec fd23 	bl	800087c <__aeabi_ddiv>
 8013e36:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013e3a:	4602      	mov	r2, r0
 8013e3c:	460b      	mov	r3, r1
 8013e3e:	4630      	mov	r0, r6
 8013e40:	4639      	mov	r1, r7
 8013e42:	f7ec fbf1 	bl	8000628 <__aeabi_dmul>
 8013e46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013e4a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013e4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013e52:	2300      	movs	r3, #0
 8013e54:	9302      	str	r3, [sp, #8]
 8013e56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013e5a:	106d      	asrs	r5, r5, #1
 8013e5c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013e60:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013e64:	2200      	movs	r2, #0
 8013e66:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013e6a:	4640      	mov	r0, r8
 8013e6c:	4649      	mov	r1, r9
 8013e6e:	4614      	mov	r4, r2
 8013e70:	461d      	mov	r5, r3
 8013e72:	f7ec fbd9 	bl	8000628 <__aeabi_dmul>
 8013e76:	4602      	mov	r2, r0
 8013e78:	460b      	mov	r3, r1
 8013e7a:	4630      	mov	r0, r6
 8013e7c:	4639      	mov	r1, r7
 8013e7e:	f7ec fa1b 	bl	80002b8 <__aeabi_dsub>
 8013e82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013e86:	4606      	mov	r6, r0
 8013e88:	460f      	mov	r7, r1
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	4629      	mov	r1, r5
 8013e8e:	f7ec fa13 	bl	80002b8 <__aeabi_dsub>
 8013e92:	4602      	mov	r2, r0
 8013e94:	460b      	mov	r3, r1
 8013e96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013e9a:	f7ec fa0d 	bl	80002b8 <__aeabi_dsub>
 8013e9e:	4642      	mov	r2, r8
 8013ea0:	464b      	mov	r3, r9
 8013ea2:	f7ec fbc1 	bl	8000628 <__aeabi_dmul>
 8013ea6:	4602      	mov	r2, r0
 8013ea8:	460b      	mov	r3, r1
 8013eaa:	4630      	mov	r0, r6
 8013eac:	4639      	mov	r1, r7
 8013eae:	f7ec fa03 	bl	80002b8 <__aeabi_dsub>
 8013eb2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013eb6:	f7ec fbb7 	bl	8000628 <__aeabi_dmul>
 8013eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ebe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013ec2:	4610      	mov	r0, r2
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	f7ec fbaf 	bl	8000628 <__aeabi_dmul>
 8013eca:	a37b      	add	r3, pc, #492	; (adr r3, 80140b8 <__ieee754_pow+0x6d0>)
 8013ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed0:	4604      	mov	r4, r0
 8013ed2:	460d      	mov	r5, r1
 8013ed4:	f7ec fba8 	bl	8000628 <__aeabi_dmul>
 8013ed8:	a379      	add	r3, pc, #484	; (adr r3, 80140c0 <__ieee754_pow+0x6d8>)
 8013eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ede:	f7ec f9ed 	bl	80002bc <__adddf3>
 8013ee2:	4622      	mov	r2, r4
 8013ee4:	462b      	mov	r3, r5
 8013ee6:	f7ec fb9f 	bl	8000628 <__aeabi_dmul>
 8013eea:	a377      	add	r3, pc, #476	; (adr r3, 80140c8 <__ieee754_pow+0x6e0>)
 8013eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef0:	f7ec f9e4 	bl	80002bc <__adddf3>
 8013ef4:	4622      	mov	r2, r4
 8013ef6:	462b      	mov	r3, r5
 8013ef8:	f7ec fb96 	bl	8000628 <__aeabi_dmul>
 8013efc:	a374      	add	r3, pc, #464	; (adr r3, 80140d0 <__ieee754_pow+0x6e8>)
 8013efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f02:	f7ec f9db 	bl	80002bc <__adddf3>
 8013f06:	4622      	mov	r2, r4
 8013f08:	462b      	mov	r3, r5
 8013f0a:	f7ec fb8d 	bl	8000628 <__aeabi_dmul>
 8013f0e:	a372      	add	r3, pc, #456	; (adr r3, 80140d8 <__ieee754_pow+0x6f0>)
 8013f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f14:	f7ec f9d2 	bl	80002bc <__adddf3>
 8013f18:	4622      	mov	r2, r4
 8013f1a:	462b      	mov	r3, r5
 8013f1c:	f7ec fb84 	bl	8000628 <__aeabi_dmul>
 8013f20:	a36f      	add	r3, pc, #444	; (adr r3, 80140e0 <__ieee754_pow+0x6f8>)
 8013f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f26:	f7ec f9c9 	bl	80002bc <__adddf3>
 8013f2a:	4622      	mov	r2, r4
 8013f2c:	4606      	mov	r6, r0
 8013f2e:	460f      	mov	r7, r1
 8013f30:	462b      	mov	r3, r5
 8013f32:	4620      	mov	r0, r4
 8013f34:	4629      	mov	r1, r5
 8013f36:	f7ec fb77 	bl	8000628 <__aeabi_dmul>
 8013f3a:	4602      	mov	r2, r0
 8013f3c:	460b      	mov	r3, r1
 8013f3e:	4630      	mov	r0, r6
 8013f40:	4639      	mov	r1, r7
 8013f42:	f7ec fb71 	bl	8000628 <__aeabi_dmul>
 8013f46:	4642      	mov	r2, r8
 8013f48:	4604      	mov	r4, r0
 8013f4a:	460d      	mov	r5, r1
 8013f4c:	464b      	mov	r3, r9
 8013f4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f52:	f7ec f9b3 	bl	80002bc <__adddf3>
 8013f56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f5a:	f7ec fb65 	bl	8000628 <__aeabi_dmul>
 8013f5e:	4622      	mov	r2, r4
 8013f60:	462b      	mov	r3, r5
 8013f62:	f7ec f9ab 	bl	80002bc <__adddf3>
 8013f66:	4642      	mov	r2, r8
 8013f68:	4606      	mov	r6, r0
 8013f6a:	460f      	mov	r7, r1
 8013f6c:	464b      	mov	r3, r9
 8013f6e:	4640      	mov	r0, r8
 8013f70:	4649      	mov	r1, r9
 8013f72:	f7ec fb59 	bl	8000628 <__aeabi_dmul>
 8013f76:	2200      	movs	r2, #0
 8013f78:	4b68      	ldr	r3, [pc, #416]	; (801411c <__ieee754_pow+0x734>)
 8013f7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013f7e:	f7ec f99d 	bl	80002bc <__adddf3>
 8013f82:	4632      	mov	r2, r6
 8013f84:	463b      	mov	r3, r7
 8013f86:	f7ec f999 	bl	80002bc <__adddf3>
 8013f8a:	9802      	ldr	r0, [sp, #8]
 8013f8c:	460d      	mov	r5, r1
 8013f8e:	4604      	mov	r4, r0
 8013f90:	4602      	mov	r2, r0
 8013f92:	460b      	mov	r3, r1
 8013f94:	4640      	mov	r0, r8
 8013f96:	4649      	mov	r1, r9
 8013f98:	f7ec fb46 	bl	8000628 <__aeabi_dmul>
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	4680      	mov	r8, r0
 8013fa0:	4689      	mov	r9, r1
 8013fa2:	4b5e      	ldr	r3, [pc, #376]	; (801411c <__ieee754_pow+0x734>)
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	4629      	mov	r1, r5
 8013fa8:	f7ec f986 	bl	80002b8 <__aeabi_dsub>
 8013fac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013fb0:	f7ec f982 	bl	80002b8 <__aeabi_dsub>
 8013fb4:	4602      	mov	r2, r0
 8013fb6:	460b      	mov	r3, r1
 8013fb8:	4630      	mov	r0, r6
 8013fba:	4639      	mov	r1, r7
 8013fbc:	f7ec f97c 	bl	80002b8 <__aeabi_dsub>
 8013fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013fc4:	f7ec fb30 	bl	8000628 <__aeabi_dmul>
 8013fc8:	4622      	mov	r2, r4
 8013fca:	4606      	mov	r6, r0
 8013fcc:	460f      	mov	r7, r1
 8013fce:	462b      	mov	r3, r5
 8013fd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013fd4:	f7ec fb28 	bl	8000628 <__aeabi_dmul>
 8013fd8:	4602      	mov	r2, r0
 8013fda:	460b      	mov	r3, r1
 8013fdc:	4630      	mov	r0, r6
 8013fde:	4639      	mov	r1, r7
 8013fe0:	f7ec f96c 	bl	80002bc <__adddf3>
 8013fe4:	4606      	mov	r6, r0
 8013fe6:	460f      	mov	r7, r1
 8013fe8:	4602      	mov	r2, r0
 8013fea:	460b      	mov	r3, r1
 8013fec:	4640      	mov	r0, r8
 8013fee:	4649      	mov	r1, r9
 8013ff0:	f7ec f964 	bl	80002bc <__adddf3>
 8013ff4:	9802      	ldr	r0, [sp, #8]
 8013ff6:	a33c      	add	r3, pc, #240	; (adr r3, 80140e8 <__ieee754_pow+0x700>)
 8013ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ffc:	4604      	mov	r4, r0
 8013ffe:	460d      	mov	r5, r1
 8014000:	f7ec fb12 	bl	8000628 <__aeabi_dmul>
 8014004:	4642      	mov	r2, r8
 8014006:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801400a:	464b      	mov	r3, r9
 801400c:	4620      	mov	r0, r4
 801400e:	4629      	mov	r1, r5
 8014010:	f7ec f952 	bl	80002b8 <__aeabi_dsub>
 8014014:	4602      	mov	r2, r0
 8014016:	460b      	mov	r3, r1
 8014018:	4630      	mov	r0, r6
 801401a:	4639      	mov	r1, r7
 801401c:	f7ec f94c 	bl	80002b8 <__aeabi_dsub>
 8014020:	a333      	add	r3, pc, #204	; (adr r3, 80140f0 <__ieee754_pow+0x708>)
 8014022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014026:	f7ec faff 	bl	8000628 <__aeabi_dmul>
 801402a:	a333      	add	r3, pc, #204	; (adr r3, 80140f8 <__ieee754_pow+0x710>)
 801402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014030:	4606      	mov	r6, r0
 8014032:	460f      	mov	r7, r1
 8014034:	4620      	mov	r0, r4
 8014036:	4629      	mov	r1, r5
 8014038:	f7ec faf6 	bl	8000628 <__aeabi_dmul>
 801403c:	4602      	mov	r2, r0
 801403e:	460b      	mov	r3, r1
 8014040:	4630      	mov	r0, r6
 8014042:	4639      	mov	r1, r7
 8014044:	f7ec f93a 	bl	80002bc <__adddf3>
 8014048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801404a:	4b35      	ldr	r3, [pc, #212]	; (8014120 <__ieee754_pow+0x738>)
 801404c:	4413      	add	r3, r2
 801404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014052:	f7ec f933 	bl	80002bc <__adddf3>
 8014056:	4604      	mov	r4, r0
 8014058:	9809      	ldr	r0, [sp, #36]	; 0x24
 801405a:	460d      	mov	r5, r1
 801405c:	f7ec fa7a 	bl	8000554 <__aeabi_i2d>
 8014060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014062:	4b30      	ldr	r3, [pc, #192]	; (8014124 <__ieee754_pow+0x73c>)
 8014064:	4413      	add	r3, r2
 8014066:	e9d3 8900 	ldrd	r8, r9, [r3]
 801406a:	4606      	mov	r6, r0
 801406c:	460f      	mov	r7, r1
 801406e:	4622      	mov	r2, r4
 8014070:	462b      	mov	r3, r5
 8014072:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014076:	f7ec f921 	bl	80002bc <__adddf3>
 801407a:	4642      	mov	r2, r8
 801407c:	464b      	mov	r3, r9
 801407e:	f7ec f91d 	bl	80002bc <__adddf3>
 8014082:	4632      	mov	r2, r6
 8014084:	463b      	mov	r3, r7
 8014086:	f7ec f919 	bl	80002bc <__adddf3>
 801408a:	9802      	ldr	r0, [sp, #8]
 801408c:	4632      	mov	r2, r6
 801408e:	463b      	mov	r3, r7
 8014090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014094:	f7ec f910 	bl	80002b8 <__aeabi_dsub>
 8014098:	4642      	mov	r2, r8
 801409a:	464b      	mov	r3, r9
 801409c:	f7ec f90c 	bl	80002b8 <__aeabi_dsub>
 80140a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80140a4:	e607      	b.n	8013cb6 <__ieee754_pow+0x2ce>
 80140a6:	f04f 0a01 	mov.w	sl, #1
 80140aa:	e6a5      	b.n	8013df8 <__ieee754_pow+0x410>
 80140ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014100 <__ieee754_pow+0x718>
 80140b0:	e613      	b.n	8013cda <__ieee754_pow+0x2f2>
 80140b2:	bf00      	nop
 80140b4:	f3af 8000 	nop.w
 80140b8:	4a454eef 	.word	0x4a454eef
 80140bc:	3fca7e28 	.word	0x3fca7e28
 80140c0:	93c9db65 	.word	0x93c9db65
 80140c4:	3fcd864a 	.word	0x3fcd864a
 80140c8:	a91d4101 	.word	0xa91d4101
 80140cc:	3fd17460 	.word	0x3fd17460
 80140d0:	518f264d 	.word	0x518f264d
 80140d4:	3fd55555 	.word	0x3fd55555
 80140d8:	db6fabff 	.word	0xdb6fabff
 80140dc:	3fdb6db6 	.word	0x3fdb6db6
 80140e0:	33333303 	.word	0x33333303
 80140e4:	3fe33333 	.word	0x3fe33333
 80140e8:	e0000000 	.word	0xe0000000
 80140ec:	3feec709 	.word	0x3feec709
 80140f0:	dc3a03fd 	.word	0xdc3a03fd
 80140f4:	3feec709 	.word	0x3feec709
 80140f8:	145b01f5 	.word	0x145b01f5
 80140fc:	be3e2fe0 	.word	0xbe3e2fe0
 8014100:	00000000 	.word	0x00000000
 8014104:	3ff00000 	.word	0x3ff00000
 8014108:	43400000 	.word	0x43400000
 801410c:	0003988e 	.word	0x0003988e
 8014110:	000bb679 	.word	0x000bb679
 8014114:	08016288 	.word	0x08016288
 8014118:	3ff00000 	.word	0x3ff00000
 801411c:	40080000 	.word	0x40080000
 8014120:	080162a8 	.word	0x080162a8
 8014124:	08016298 	.word	0x08016298
 8014128:	a3b4      	add	r3, pc, #720	; (adr r3, 80143fc <__ieee754_pow+0xa14>)
 801412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801412e:	4640      	mov	r0, r8
 8014130:	4649      	mov	r1, r9
 8014132:	f7ec f8c3 	bl	80002bc <__adddf3>
 8014136:	4622      	mov	r2, r4
 8014138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801413c:	462b      	mov	r3, r5
 801413e:	4630      	mov	r0, r6
 8014140:	4639      	mov	r1, r7
 8014142:	f7ec f8b9 	bl	80002b8 <__aeabi_dsub>
 8014146:	4602      	mov	r2, r0
 8014148:	460b      	mov	r3, r1
 801414a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801414e:	f7ec fcfb 	bl	8000b48 <__aeabi_dcmpgt>
 8014152:	2800      	cmp	r0, #0
 8014154:	f47f adfe 	bne.w	8013d54 <__ieee754_pow+0x36c>
 8014158:	4aa3      	ldr	r2, [pc, #652]	; (80143e8 <__ieee754_pow+0xa00>)
 801415a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801415e:	4293      	cmp	r3, r2
 8014160:	f340 810a 	ble.w	8014378 <__ieee754_pow+0x990>
 8014164:	151b      	asrs	r3, r3, #20
 8014166:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801416a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801416e:	fa4a f303 	asr.w	r3, sl, r3
 8014172:	445b      	add	r3, fp
 8014174:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014178:	4e9c      	ldr	r6, [pc, #624]	; (80143ec <__ieee754_pow+0xa04>)
 801417a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801417e:	4116      	asrs	r6, r2
 8014180:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014184:	2000      	movs	r0, #0
 8014186:	ea23 0106 	bic.w	r1, r3, r6
 801418a:	f1c2 0214 	rsb	r2, r2, #20
 801418e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014192:	fa4a fa02 	asr.w	sl, sl, r2
 8014196:	f1bb 0f00 	cmp.w	fp, #0
 801419a:	4602      	mov	r2, r0
 801419c:	460b      	mov	r3, r1
 801419e:	4620      	mov	r0, r4
 80141a0:	4629      	mov	r1, r5
 80141a2:	bfb8      	it	lt
 80141a4:	f1ca 0a00 	rsblt	sl, sl, #0
 80141a8:	f7ec f886 	bl	80002b8 <__aeabi_dsub>
 80141ac:	e9cd 0100 	strd	r0, r1, [sp]
 80141b0:	4642      	mov	r2, r8
 80141b2:	464b      	mov	r3, r9
 80141b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80141b8:	f7ec f880 	bl	80002bc <__adddf3>
 80141bc:	2000      	movs	r0, #0
 80141be:	a378      	add	r3, pc, #480	; (adr r3, 80143a0 <__ieee754_pow+0x9b8>)
 80141c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c4:	4604      	mov	r4, r0
 80141c6:	460d      	mov	r5, r1
 80141c8:	f7ec fa2e 	bl	8000628 <__aeabi_dmul>
 80141cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80141d0:	4606      	mov	r6, r0
 80141d2:	460f      	mov	r7, r1
 80141d4:	4620      	mov	r0, r4
 80141d6:	4629      	mov	r1, r5
 80141d8:	f7ec f86e 	bl	80002b8 <__aeabi_dsub>
 80141dc:	4602      	mov	r2, r0
 80141de:	460b      	mov	r3, r1
 80141e0:	4640      	mov	r0, r8
 80141e2:	4649      	mov	r1, r9
 80141e4:	f7ec f868 	bl	80002b8 <__aeabi_dsub>
 80141e8:	a36f      	add	r3, pc, #444	; (adr r3, 80143a8 <__ieee754_pow+0x9c0>)
 80141ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ee:	f7ec fa1b 	bl	8000628 <__aeabi_dmul>
 80141f2:	a36f      	add	r3, pc, #444	; (adr r3, 80143b0 <__ieee754_pow+0x9c8>)
 80141f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f8:	4680      	mov	r8, r0
 80141fa:	4689      	mov	r9, r1
 80141fc:	4620      	mov	r0, r4
 80141fe:	4629      	mov	r1, r5
 8014200:	f7ec fa12 	bl	8000628 <__aeabi_dmul>
 8014204:	4602      	mov	r2, r0
 8014206:	460b      	mov	r3, r1
 8014208:	4640      	mov	r0, r8
 801420a:	4649      	mov	r1, r9
 801420c:	f7ec f856 	bl	80002bc <__adddf3>
 8014210:	4604      	mov	r4, r0
 8014212:	460d      	mov	r5, r1
 8014214:	4602      	mov	r2, r0
 8014216:	460b      	mov	r3, r1
 8014218:	4630      	mov	r0, r6
 801421a:	4639      	mov	r1, r7
 801421c:	f7ec f84e 	bl	80002bc <__adddf3>
 8014220:	4632      	mov	r2, r6
 8014222:	463b      	mov	r3, r7
 8014224:	4680      	mov	r8, r0
 8014226:	4689      	mov	r9, r1
 8014228:	f7ec f846 	bl	80002b8 <__aeabi_dsub>
 801422c:	4602      	mov	r2, r0
 801422e:	460b      	mov	r3, r1
 8014230:	4620      	mov	r0, r4
 8014232:	4629      	mov	r1, r5
 8014234:	f7ec f840 	bl	80002b8 <__aeabi_dsub>
 8014238:	4642      	mov	r2, r8
 801423a:	4606      	mov	r6, r0
 801423c:	460f      	mov	r7, r1
 801423e:	464b      	mov	r3, r9
 8014240:	4640      	mov	r0, r8
 8014242:	4649      	mov	r1, r9
 8014244:	f7ec f9f0 	bl	8000628 <__aeabi_dmul>
 8014248:	a35b      	add	r3, pc, #364	; (adr r3, 80143b8 <__ieee754_pow+0x9d0>)
 801424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424e:	4604      	mov	r4, r0
 8014250:	460d      	mov	r5, r1
 8014252:	f7ec f9e9 	bl	8000628 <__aeabi_dmul>
 8014256:	a35a      	add	r3, pc, #360	; (adr r3, 80143c0 <__ieee754_pow+0x9d8>)
 8014258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801425c:	f7ec f82c 	bl	80002b8 <__aeabi_dsub>
 8014260:	4622      	mov	r2, r4
 8014262:	462b      	mov	r3, r5
 8014264:	f7ec f9e0 	bl	8000628 <__aeabi_dmul>
 8014268:	a357      	add	r3, pc, #348	; (adr r3, 80143c8 <__ieee754_pow+0x9e0>)
 801426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801426e:	f7ec f825 	bl	80002bc <__adddf3>
 8014272:	4622      	mov	r2, r4
 8014274:	462b      	mov	r3, r5
 8014276:	f7ec f9d7 	bl	8000628 <__aeabi_dmul>
 801427a:	a355      	add	r3, pc, #340	; (adr r3, 80143d0 <__ieee754_pow+0x9e8>)
 801427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014280:	f7ec f81a 	bl	80002b8 <__aeabi_dsub>
 8014284:	4622      	mov	r2, r4
 8014286:	462b      	mov	r3, r5
 8014288:	f7ec f9ce 	bl	8000628 <__aeabi_dmul>
 801428c:	a352      	add	r3, pc, #328	; (adr r3, 80143d8 <__ieee754_pow+0x9f0>)
 801428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014292:	f7ec f813 	bl	80002bc <__adddf3>
 8014296:	4622      	mov	r2, r4
 8014298:	462b      	mov	r3, r5
 801429a:	f7ec f9c5 	bl	8000628 <__aeabi_dmul>
 801429e:	4602      	mov	r2, r0
 80142a0:	460b      	mov	r3, r1
 80142a2:	4640      	mov	r0, r8
 80142a4:	4649      	mov	r1, r9
 80142a6:	f7ec f807 	bl	80002b8 <__aeabi_dsub>
 80142aa:	4604      	mov	r4, r0
 80142ac:	460d      	mov	r5, r1
 80142ae:	4602      	mov	r2, r0
 80142b0:	460b      	mov	r3, r1
 80142b2:	4640      	mov	r0, r8
 80142b4:	4649      	mov	r1, r9
 80142b6:	f7ec f9b7 	bl	8000628 <__aeabi_dmul>
 80142ba:	2200      	movs	r2, #0
 80142bc:	e9cd 0100 	strd	r0, r1, [sp]
 80142c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80142c4:	4620      	mov	r0, r4
 80142c6:	4629      	mov	r1, r5
 80142c8:	f7eb fff6 	bl	80002b8 <__aeabi_dsub>
 80142cc:	4602      	mov	r2, r0
 80142ce:	460b      	mov	r3, r1
 80142d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142d4:	f7ec fad2 	bl	800087c <__aeabi_ddiv>
 80142d8:	4632      	mov	r2, r6
 80142da:	4604      	mov	r4, r0
 80142dc:	460d      	mov	r5, r1
 80142de:	463b      	mov	r3, r7
 80142e0:	4640      	mov	r0, r8
 80142e2:	4649      	mov	r1, r9
 80142e4:	f7ec f9a0 	bl	8000628 <__aeabi_dmul>
 80142e8:	4632      	mov	r2, r6
 80142ea:	463b      	mov	r3, r7
 80142ec:	f7eb ffe6 	bl	80002bc <__adddf3>
 80142f0:	4602      	mov	r2, r0
 80142f2:	460b      	mov	r3, r1
 80142f4:	4620      	mov	r0, r4
 80142f6:	4629      	mov	r1, r5
 80142f8:	f7eb ffde 	bl	80002b8 <__aeabi_dsub>
 80142fc:	4642      	mov	r2, r8
 80142fe:	464b      	mov	r3, r9
 8014300:	f7eb ffda 	bl	80002b8 <__aeabi_dsub>
 8014304:	4602      	mov	r2, r0
 8014306:	460b      	mov	r3, r1
 8014308:	2000      	movs	r0, #0
 801430a:	4939      	ldr	r1, [pc, #228]	; (80143f0 <__ieee754_pow+0xa08>)
 801430c:	f7eb ffd4 	bl	80002b8 <__aeabi_dsub>
 8014310:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8014314:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014318:	4602      	mov	r2, r0
 801431a:	460b      	mov	r3, r1
 801431c:	da2f      	bge.n	801437e <__ieee754_pow+0x996>
 801431e:	4650      	mov	r0, sl
 8014320:	ec43 2b10 	vmov	d0, r2, r3
 8014324:	f001 f8fc 	bl	8015520 <scalbn>
 8014328:	ec51 0b10 	vmov	r0, r1, d0
 801432c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014330:	f7ff bbf1 	b.w	8013b16 <__ieee754_pow+0x12e>
 8014334:	4b2f      	ldr	r3, [pc, #188]	; (80143f4 <__ieee754_pow+0xa0c>)
 8014336:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801433a:	429e      	cmp	r6, r3
 801433c:	f77f af0c 	ble.w	8014158 <__ieee754_pow+0x770>
 8014340:	4b2d      	ldr	r3, [pc, #180]	; (80143f8 <__ieee754_pow+0xa10>)
 8014342:	440b      	add	r3, r1
 8014344:	4303      	orrs	r3, r0
 8014346:	d00b      	beq.n	8014360 <__ieee754_pow+0x978>
 8014348:	a325      	add	r3, pc, #148	; (adr r3, 80143e0 <__ieee754_pow+0x9f8>)
 801434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801434e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014352:	f7ec f969 	bl	8000628 <__aeabi_dmul>
 8014356:	a322      	add	r3, pc, #136	; (adr r3, 80143e0 <__ieee754_pow+0x9f8>)
 8014358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801435c:	f7ff bbdb 	b.w	8013b16 <__ieee754_pow+0x12e>
 8014360:	4622      	mov	r2, r4
 8014362:	462b      	mov	r3, r5
 8014364:	f7eb ffa8 	bl	80002b8 <__aeabi_dsub>
 8014368:	4642      	mov	r2, r8
 801436a:	464b      	mov	r3, r9
 801436c:	f7ec fbe2 	bl	8000b34 <__aeabi_dcmpge>
 8014370:	2800      	cmp	r0, #0
 8014372:	f43f aef1 	beq.w	8014158 <__ieee754_pow+0x770>
 8014376:	e7e7      	b.n	8014348 <__ieee754_pow+0x960>
 8014378:	f04f 0a00 	mov.w	sl, #0
 801437c:	e718      	b.n	80141b0 <__ieee754_pow+0x7c8>
 801437e:	4621      	mov	r1, r4
 8014380:	e7d4      	b.n	801432c <__ieee754_pow+0x944>
 8014382:	2000      	movs	r0, #0
 8014384:	491a      	ldr	r1, [pc, #104]	; (80143f0 <__ieee754_pow+0xa08>)
 8014386:	f7ff bb8f 	b.w	8013aa8 <__ieee754_pow+0xc0>
 801438a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801438e:	f7ff bb8b 	b.w	8013aa8 <__ieee754_pow+0xc0>
 8014392:	4630      	mov	r0, r6
 8014394:	4639      	mov	r1, r7
 8014396:	f7ff bb87 	b.w	8013aa8 <__ieee754_pow+0xc0>
 801439a:	4693      	mov	fp, r2
 801439c:	f7ff bb98 	b.w	8013ad0 <__ieee754_pow+0xe8>
 80143a0:	00000000 	.word	0x00000000
 80143a4:	3fe62e43 	.word	0x3fe62e43
 80143a8:	fefa39ef 	.word	0xfefa39ef
 80143ac:	3fe62e42 	.word	0x3fe62e42
 80143b0:	0ca86c39 	.word	0x0ca86c39
 80143b4:	be205c61 	.word	0xbe205c61
 80143b8:	72bea4d0 	.word	0x72bea4d0
 80143bc:	3e663769 	.word	0x3e663769
 80143c0:	c5d26bf1 	.word	0xc5d26bf1
 80143c4:	3ebbbd41 	.word	0x3ebbbd41
 80143c8:	af25de2c 	.word	0xaf25de2c
 80143cc:	3f11566a 	.word	0x3f11566a
 80143d0:	16bebd93 	.word	0x16bebd93
 80143d4:	3f66c16c 	.word	0x3f66c16c
 80143d8:	5555553e 	.word	0x5555553e
 80143dc:	3fc55555 	.word	0x3fc55555
 80143e0:	c2f8f359 	.word	0xc2f8f359
 80143e4:	01a56e1f 	.word	0x01a56e1f
 80143e8:	3fe00000 	.word	0x3fe00000
 80143ec:	000fffff 	.word	0x000fffff
 80143f0:	3ff00000 	.word	0x3ff00000
 80143f4:	4090cbff 	.word	0x4090cbff
 80143f8:	3f6f3400 	.word	0x3f6f3400
 80143fc:	652b82fe 	.word	0x652b82fe
 8014400:	3c971547 	.word	0x3c971547
 8014404:	00000000 	.word	0x00000000

08014408 <__ieee754_rem_pio2>:
 8014408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801440c:	ec57 6b10 	vmov	r6, r7, d0
 8014410:	4bc3      	ldr	r3, [pc, #780]	; (8014720 <__ieee754_rem_pio2+0x318>)
 8014412:	b08d      	sub	sp, #52	; 0x34
 8014414:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014418:	4598      	cmp	r8, r3
 801441a:	4604      	mov	r4, r0
 801441c:	9704      	str	r7, [sp, #16]
 801441e:	dc07      	bgt.n	8014430 <__ieee754_rem_pio2+0x28>
 8014420:	2200      	movs	r2, #0
 8014422:	2300      	movs	r3, #0
 8014424:	ed84 0b00 	vstr	d0, [r4]
 8014428:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801442c:	2500      	movs	r5, #0
 801442e:	e027      	b.n	8014480 <__ieee754_rem_pio2+0x78>
 8014430:	4bbc      	ldr	r3, [pc, #752]	; (8014724 <__ieee754_rem_pio2+0x31c>)
 8014432:	4598      	cmp	r8, r3
 8014434:	dc75      	bgt.n	8014522 <__ieee754_rem_pio2+0x11a>
 8014436:	9b04      	ldr	r3, [sp, #16]
 8014438:	4dbb      	ldr	r5, [pc, #748]	; (8014728 <__ieee754_rem_pio2+0x320>)
 801443a:	2b00      	cmp	r3, #0
 801443c:	ee10 0a10 	vmov	r0, s0
 8014440:	a3a9      	add	r3, pc, #676	; (adr r3, 80146e8 <__ieee754_rem_pio2+0x2e0>)
 8014442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014446:	4639      	mov	r1, r7
 8014448:	dd36      	ble.n	80144b8 <__ieee754_rem_pio2+0xb0>
 801444a:	f7eb ff35 	bl	80002b8 <__aeabi_dsub>
 801444e:	45a8      	cmp	r8, r5
 8014450:	4606      	mov	r6, r0
 8014452:	460f      	mov	r7, r1
 8014454:	d018      	beq.n	8014488 <__ieee754_rem_pio2+0x80>
 8014456:	a3a6      	add	r3, pc, #664	; (adr r3, 80146f0 <__ieee754_rem_pio2+0x2e8>)
 8014458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801445c:	f7eb ff2c 	bl	80002b8 <__aeabi_dsub>
 8014460:	4602      	mov	r2, r0
 8014462:	460b      	mov	r3, r1
 8014464:	e9c4 2300 	strd	r2, r3, [r4]
 8014468:	4630      	mov	r0, r6
 801446a:	4639      	mov	r1, r7
 801446c:	f7eb ff24 	bl	80002b8 <__aeabi_dsub>
 8014470:	a39f      	add	r3, pc, #636	; (adr r3, 80146f0 <__ieee754_rem_pio2+0x2e8>)
 8014472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014476:	f7eb ff1f 	bl	80002b8 <__aeabi_dsub>
 801447a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801447e:	2501      	movs	r5, #1
 8014480:	4628      	mov	r0, r5
 8014482:	b00d      	add	sp, #52	; 0x34
 8014484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014488:	a39b      	add	r3, pc, #620	; (adr r3, 80146f8 <__ieee754_rem_pio2+0x2f0>)
 801448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801448e:	f7eb ff13 	bl	80002b8 <__aeabi_dsub>
 8014492:	a39b      	add	r3, pc, #620	; (adr r3, 8014700 <__ieee754_rem_pio2+0x2f8>)
 8014494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014498:	4606      	mov	r6, r0
 801449a:	460f      	mov	r7, r1
 801449c:	f7eb ff0c 	bl	80002b8 <__aeabi_dsub>
 80144a0:	4602      	mov	r2, r0
 80144a2:	460b      	mov	r3, r1
 80144a4:	e9c4 2300 	strd	r2, r3, [r4]
 80144a8:	4630      	mov	r0, r6
 80144aa:	4639      	mov	r1, r7
 80144ac:	f7eb ff04 	bl	80002b8 <__aeabi_dsub>
 80144b0:	a393      	add	r3, pc, #588	; (adr r3, 8014700 <__ieee754_rem_pio2+0x2f8>)
 80144b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b6:	e7de      	b.n	8014476 <__ieee754_rem_pio2+0x6e>
 80144b8:	f7eb ff00 	bl	80002bc <__adddf3>
 80144bc:	45a8      	cmp	r8, r5
 80144be:	4606      	mov	r6, r0
 80144c0:	460f      	mov	r7, r1
 80144c2:	d016      	beq.n	80144f2 <__ieee754_rem_pio2+0xea>
 80144c4:	a38a      	add	r3, pc, #552	; (adr r3, 80146f0 <__ieee754_rem_pio2+0x2e8>)
 80144c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ca:	f7eb fef7 	bl	80002bc <__adddf3>
 80144ce:	4602      	mov	r2, r0
 80144d0:	460b      	mov	r3, r1
 80144d2:	e9c4 2300 	strd	r2, r3, [r4]
 80144d6:	4630      	mov	r0, r6
 80144d8:	4639      	mov	r1, r7
 80144da:	f7eb feed 	bl	80002b8 <__aeabi_dsub>
 80144de:	a384      	add	r3, pc, #528	; (adr r3, 80146f0 <__ieee754_rem_pio2+0x2e8>)
 80144e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e4:	f7eb feea 	bl	80002bc <__adddf3>
 80144e8:	f04f 35ff 	mov.w	r5, #4294967295
 80144ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80144f0:	e7c6      	b.n	8014480 <__ieee754_rem_pio2+0x78>
 80144f2:	a381      	add	r3, pc, #516	; (adr r3, 80146f8 <__ieee754_rem_pio2+0x2f0>)
 80144f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144f8:	f7eb fee0 	bl	80002bc <__adddf3>
 80144fc:	a380      	add	r3, pc, #512	; (adr r3, 8014700 <__ieee754_rem_pio2+0x2f8>)
 80144fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014502:	4606      	mov	r6, r0
 8014504:	460f      	mov	r7, r1
 8014506:	f7eb fed9 	bl	80002bc <__adddf3>
 801450a:	4602      	mov	r2, r0
 801450c:	460b      	mov	r3, r1
 801450e:	e9c4 2300 	strd	r2, r3, [r4]
 8014512:	4630      	mov	r0, r6
 8014514:	4639      	mov	r1, r7
 8014516:	f7eb fecf 	bl	80002b8 <__aeabi_dsub>
 801451a:	a379      	add	r3, pc, #484	; (adr r3, 8014700 <__ieee754_rem_pio2+0x2f8>)
 801451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014520:	e7e0      	b.n	80144e4 <__ieee754_rem_pio2+0xdc>
 8014522:	4b82      	ldr	r3, [pc, #520]	; (801472c <__ieee754_rem_pio2+0x324>)
 8014524:	4598      	cmp	r8, r3
 8014526:	f300 80d0 	bgt.w	80146ca <__ieee754_rem_pio2+0x2c2>
 801452a:	f000 fed3 	bl	80152d4 <fabs>
 801452e:	ec57 6b10 	vmov	r6, r7, d0
 8014532:	ee10 0a10 	vmov	r0, s0
 8014536:	a374      	add	r3, pc, #464	; (adr r3, 8014708 <__ieee754_rem_pio2+0x300>)
 8014538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453c:	4639      	mov	r1, r7
 801453e:	f7ec f873 	bl	8000628 <__aeabi_dmul>
 8014542:	2200      	movs	r2, #0
 8014544:	4b7a      	ldr	r3, [pc, #488]	; (8014730 <__ieee754_rem_pio2+0x328>)
 8014546:	f7eb feb9 	bl	80002bc <__adddf3>
 801454a:	f7ec fb1d 	bl	8000b88 <__aeabi_d2iz>
 801454e:	4605      	mov	r5, r0
 8014550:	f7ec f800 	bl	8000554 <__aeabi_i2d>
 8014554:	a364      	add	r3, pc, #400	; (adr r3, 80146e8 <__ieee754_rem_pio2+0x2e0>)
 8014556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801455a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801455e:	f7ec f863 	bl	8000628 <__aeabi_dmul>
 8014562:	4602      	mov	r2, r0
 8014564:	460b      	mov	r3, r1
 8014566:	4630      	mov	r0, r6
 8014568:	4639      	mov	r1, r7
 801456a:	f7eb fea5 	bl	80002b8 <__aeabi_dsub>
 801456e:	a360      	add	r3, pc, #384	; (adr r3, 80146f0 <__ieee754_rem_pio2+0x2e8>)
 8014570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014574:	4682      	mov	sl, r0
 8014576:	468b      	mov	fp, r1
 8014578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801457c:	f7ec f854 	bl	8000628 <__aeabi_dmul>
 8014580:	2d1f      	cmp	r5, #31
 8014582:	4606      	mov	r6, r0
 8014584:	460f      	mov	r7, r1
 8014586:	dc0c      	bgt.n	80145a2 <__ieee754_rem_pio2+0x19a>
 8014588:	1e6a      	subs	r2, r5, #1
 801458a:	4b6a      	ldr	r3, [pc, #424]	; (8014734 <__ieee754_rem_pio2+0x32c>)
 801458c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014590:	4543      	cmp	r3, r8
 8014592:	d006      	beq.n	80145a2 <__ieee754_rem_pio2+0x19a>
 8014594:	4632      	mov	r2, r6
 8014596:	463b      	mov	r3, r7
 8014598:	4650      	mov	r0, sl
 801459a:	4659      	mov	r1, fp
 801459c:	f7eb fe8c 	bl	80002b8 <__aeabi_dsub>
 80145a0:	e00e      	b.n	80145c0 <__ieee754_rem_pio2+0x1b8>
 80145a2:	4632      	mov	r2, r6
 80145a4:	463b      	mov	r3, r7
 80145a6:	4650      	mov	r0, sl
 80145a8:	4659      	mov	r1, fp
 80145aa:	f7eb fe85 	bl	80002b8 <__aeabi_dsub>
 80145ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 80145b2:	9305      	str	r3, [sp, #20]
 80145b4:	9a05      	ldr	r2, [sp, #20]
 80145b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80145ba:	1ad3      	subs	r3, r2, r3
 80145bc:	2b10      	cmp	r3, #16
 80145be:	dc02      	bgt.n	80145c6 <__ieee754_rem_pio2+0x1be>
 80145c0:	e9c4 0100 	strd	r0, r1, [r4]
 80145c4:	e039      	b.n	801463a <__ieee754_rem_pio2+0x232>
 80145c6:	a34c      	add	r3, pc, #304	; (adr r3, 80146f8 <__ieee754_rem_pio2+0x2f0>)
 80145c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145d0:	f7ec f82a 	bl	8000628 <__aeabi_dmul>
 80145d4:	4606      	mov	r6, r0
 80145d6:	460f      	mov	r7, r1
 80145d8:	4602      	mov	r2, r0
 80145da:	460b      	mov	r3, r1
 80145dc:	4650      	mov	r0, sl
 80145de:	4659      	mov	r1, fp
 80145e0:	f7eb fe6a 	bl	80002b8 <__aeabi_dsub>
 80145e4:	4602      	mov	r2, r0
 80145e6:	460b      	mov	r3, r1
 80145e8:	4680      	mov	r8, r0
 80145ea:	4689      	mov	r9, r1
 80145ec:	4650      	mov	r0, sl
 80145ee:	4659      	mov	r1, fp
 80145f0:	f7eb fe62 	bl	80002b8 <__aeabi_dsub>
 80145f4:	4632      	mov	r2, r6
 80145f6:	463b      	mov	r3, r7
 80145f8:	f7eb fe5e 	bl	80002b8 <__aeabi_dsub>
 80145fc:	a340      	add	r3, pc, #256	; (adr r3, 8014700 <__ieee754_rem_pio2+0x2f8>)
 80145fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014602:	4606      	mov	r6, r0
 8014604:	460f      	mov	r7, r1
 8014606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801460a:	f7ec f80d 	bl	8000628 <__aeabi_dmul>
 801460e:	4632      	mov	r2, r6
 8014610:	463b      	mov	r3, r7
 8014612:	f7eb fe51 	bl	80002b8 <__aeabi_dsub>
 8014616:	4602      	mov	r2, r0
 8014618:	460b      	mov	r3, r1
 801461a:	4606      	mov	r6, r0
 801461c:	460f      	mov	r7, r1
 801461e:	4640      	mov	r0, r8
 8014620:	4649      	mov	r1, r9
 8014622:	f7eb fe49 	bl	80002b8 <__aeabi_dsub>
 8014626:	9a05      	ldr	r2, [sp, #20]
 8014628:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801462c:	1ad3      	subs	r3, r2, r3
 801462e:	2b31      	cmp	r3, #49	; 0x31
 8014630:	dc20      	bgt.n	8014674 <__ieee754_rem_pio2+0x26c>
 8014632:	e9c4 0100 	strd	r0, r1, [r4]
 8014636:	46c2      	mov	sl, r8
 8014638:	46cb      	mov	fp, r9
 801463a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801463e:	4650      	mov	r0, sl
 8014640:	4642      	mov	r2, r8
 8014642:	464b      	mov	r3, r9
 8014644:	4659      	mov	r1, fp
 8014646:	f7eb fe37 	bl	80002b8 <__aeabi_dsub>
 801464a:	463b      	mov	r3, r7
 801464c:	4632      	mov	r2, r6
 801464e:	f7eb fe33 	bl	80002b8 <__aeabi_dsub>
 8014652:	9b04      	ldr	r3, [sp, #16]
 8014654:	2b00      	cmp	r3, #0
 8014656:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801465a:	f6bf af11 	bge.w	8014480 <__ieee754_rem_pio2+0x78>
 801465e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014662:	6063      	str	r3, [r4, #4]
 8014664:	f8c4 8000 	str.w	r8, [r4]
 8014668:	60a0      	str	r0, [r4, #8]
 801466a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801466e:	60e3      	str	r3, [r4, #12]
 8014670:	426d      	negs	r5, r5
 8014672:	e705      	b.n	8014480 <__ieee754_rem_pio2+0x78>
 8014674:	a326      	add	r3, pc, #152	; (adr r3, 8014710 <__ieee754_rem_pio2+0x308>)
 8014676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801467e:	f7eb ffd3 	bl	8000628 <__aeabi_dmul>
 8014682:	4606      	mov	r6, r0
 8014684:	460f      	mov	r7, r1
 8014686:	4602      	mov	r2, r0
 8014688:	460b      	mov	r3, r1
 801468a:	4640      	mov	r0, r8
 801468c:	4649      	mov	r1, r9
 801468e:	f7eb fe13 	bl	80002b8 <__aeabi_dsub>
 8014692:	4602      	mov	r2, r0
 8014694:	460b      	mov	r3, r1
 8014696:	4682      	mov	sl, r0
 8014698:	468b      	mov	fp, r1
 801469a:	4640      	mov	r0, r8
 801469c:	4649      	mov	r1, r9
 801469e:	f7eb fe0b 	bl	80002b8 <__aeabi_dsub>
 80146a2:	4632      	mov	r2, r6
 80146a4:	463b      	mov	r3, r7
 80146a6:	f7eb fe07 	bl	80002b8 <__aeabi_dsub>
 80146aa:	a31b      	add	r3, pc, #108	; (adr r3, 8014718 <__ieee754_rem_pio2+0x310>)
 80146ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b0:	4606      	mov	r6, r0
 80146b2:	460f      	mov	r7, r1
 80146b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146b8:	f7eb ffb6 	bl	8000628 <__aeabi_dmul>
 80146bc:	4632      	mov	r2, r6
 80146be:	463b      	mov	r3, r7
 80146c0:	f7eb fdfa 	bl	80002b8 <__aeabi_dsub>
 80146c4:	4606      	mov	r6, r0
 80146c6:	460f      	mov	r7, r1
 80146c8:	e764      	b.n	8014594 <__ieee754_rem_pio2+0x18c>
 80146ca:	4b1b      	ldr	r3, [pc, #108]	; (8014738 <__ieee754_rem_pio2+0x330>)
 80146cc:	4598      	cmp	r8, r3
 80146ce:	dd35      	ble.n	801473c <__ieee754_rem_pio2+0x334>
 80146d0:	ee10 2a10 	vmov	r2, s0
 80146d4:	463b      	mov	r3, r7
 80146d6:	4630      	mov	r0, r6
 80146d8:	4639      	mov	r1, r7
 80146da:	f7eb fded 	bl	80002b8 <__aeabi_dsub>
 80146de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80146e2:	e9c4 0100 	strd	r0, r1, [r4]
 80146e6:	e6a1      	b.n	801442c <__ieee754_rem_pio2+0x24>
 80146e8:	54400000 	.word	0x54400000
 80146ec:	3ff921fb 	.word	0x3ff921fb
 80146f0:	1a626331 	.word	0x1a626331
 80146f4:	3dd0b461 	.word	0x3dd0b461
 80146f8:	1a600000 	.word	0x1a600000
 80146fc:	3dd0b461 	.word	0x3dd0b461
 8014700:	2e037073 	.word	0x2e037073
 8014704:	3ba3198a 	.word	0x3ba3198a
 8014708:	6dc9c883 	.word	0x6dc9c883
 801470c:	3fe45f30 	.word	0x3fe45f30
 8014710:	2e000000 	.word	0x2e000000
 8014714:	3ba3198a 	.word	0x3ba3198a
 8014718:	252049c1 	.word	0x252049c1
 801471c:	397b839a 	.word	0x397b839a
 8014720:	3fe921fb 	.word	0x3fe921fb
 8014724:	4002d97b 	.word	0x4002d97b
 8014728:	3ff921fb 	.word	0x3ff921fb
 801472c:	413921fb 	.word	0x413921fb
 8014730:	3fe00000 	.word	0x3fe00000
 8014734:	080162b8 	.word	0x080162b8
 8014738:	7fefffff 	.word	0x7fefffff
 801473c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014740:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014744:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014748:	4630      	mov	r0, r6
 801474a:	460f      	mov	r7, r1
 801474c:	f7ec fa1c 	bl	8000b88 <__aeabi_d2iz>
 8014750:	f7eb ff00 	bl	8000554 <__aeabi_i2d>
 8014754:	4602      	mov	r2, r0
 8014756:	460b      	mov	r3, r1
 8014758:	4630      	mov	r0, r6
 801475a:	4639      	mov	r1, r7
 801475c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014760:	f7eb fdaa 	bl	80002b8 <__aeabi_dsub>
 8014764:	2200      	movs	r2, #0
 8014766:	4b1f      	ldr	r3, [pc, #124]	; (80147e4 <__ieee754_rem_pio2+0x3dc>)
 8014768:	f7eb ff5e 	bl	8000628 <__aeabi_dmul>
 801476c:	460f      	mov	r7, r1
 801476e:	4606      	mov	r6, r0
 8014770:	f7ec fa0a 	bl	8000b88 <__aeabi_d2iz>
 8014774:	f7eb feee 	bl	8000554 <__aeabi_i2d>
 8014778:	4602      	mov	r2, r0
 801477a:	460b      	mov	r3, r1
 801477c:	4630      	mov	r0, r6
 801477e:	4639      	mov	r1, r7
 8014780:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014784:	f7eb fd98 	bl	80002b8 <__aeabi_dsub>
 8014788:	2200      	movs	r2, #0
 801478a:	4b16      	ldr	r3, [pc, #88]	; (80147e4 <__ieee754_rem_pio2+0x3dc>)
 801478c:	f7eb ff4c 	bl	8000628 <__aeabi_dmul>
 8014790:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014794:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014798:	f04f 0803 	mov.w	r8, #3
 801479c:	2600      	movs	r6, #0
 801479e:	2700      	movs	r7, #0
 80147a0:	4632      	mov	r2, r6
 80147a2:	463b      	mov	r3, r7
 80147a4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80147a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80147ac:	f7ec f9a4 	bl	8000af8 <__aeabi_dcmpeq>
 80147b0:	b9b0      	cbnz	r0, 80147e0 <__ieee754_rem_pio2+0x3d8>
 80147b2:	4b0d      	ldr	r3, [pc, #52]	; (80147e8 <__ieee754_rem_pio2+0x3e0>)
 80147b4:	9301      	str	r3, [sp, #4]
 80147b6:	2302      	movs	r3, #2
 80147b8:	9300      	str	r3, [sp, #0]
 80147ba:	462a      	mov	r2, r5
 80147bc:	4643      	mov	r3, r8
 80147be:	4621      	mov	r1, r4
 80147c0:	a806      	add	r0, sp, #24
 80147c2:	f000 f98d 	bl	8014ae0 <__kernel_rem_pio2>
 80147c6:	9b04      	ldr	r3, [sp, #16]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	4605      	mov	r5, r0
 80147cc:	f6bf ae58 	bge.w	8014480 <__ieee754_rem_pio2+0x78>
 80147d0:	6863      	ldr	r3, [r4, #4]
 80147d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80147d6:	6063      	str	r3, [r4, #4]
 80147d8:	68e3      	ldr	r3, [r4, #12]
 80147da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80147de:	e746      	b.n	801466e <__ieee754_rem_pio2+0x266>
 80147e0:	46d0      	mov	r8, sl
 80147e2:	e7dd      	b.n	80147a0 <__ieee754_rem_pio2+0x398>
 80147e4:	41700000 	.word	0x41700000
 80147e8:	08016338 	.word	0x08016338

080147ec <__ieee754_sqrt>:
 80147ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147f0:	4955      	ldr	r1, [pc, #340]	; (8014948 <__ieee754_sqrt+0x15c>)
 80147f2:	ec55 4b10 	vmov	r4, r5, d0
 80147f6:	43a9      	bics	r1, r5
 80147f8:	462b      	mov	r3, r5
 80147fa:	462a      	mov	r2, r5
 80147fc:	d112      	bne.n	8014824 <__ieee754_sqrt+0x38>
 80147fe:	ee10 2a10 	vmov	r2, s0
 8014802:	ee10 0a10 	vmov	r0, s0
 8014806:	4629      	mov	r1, r5
 8014808:	f7eb ff0e 	bl	8000628 <__aeabi_dmul>
 801480c:	4602      	mov	r2, r0
 801480e:	460b      	mov	r3, r1
 8014810:	4620      	mov	r0, r4
 8014812:	4629      	mov	r1, r5
 8014814:	f7eb fd52 	bl	80002bc <__adddf3>
 8014818:	4604      	mov	r4, r0
 801481a:	460d      	mov	r5, r1
 801481c:	ec45 4b10 	vmov	d0, r4, r5
 8014820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014824:	2d00      	cmp	r5, #0
 8014826:	ee10 0a10 	vmov	r0, s0
 801482a:	4621      	mov	r1, r4
 801482c:	dc0f      	bgt.n	801484e <__ieee754_sqrt+0x62>
 801482e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014832:	4330      	orrs	r0, r6
 8014834:	d0f2      	beq.n	801481c <__ieee754_sqrt+0x30>
 8014836:	b155      	cbz	r5, 801484e <__ieee754_sqrt+0x62>
 8014838:	ee10 2a10 	vmov	r2, s0
 801483c:	4620      	mov	r0, r4
 801483e:	4629      	mov	r1, r5
 8014840:	f7eb fd3a 	bl	80002b8 <__aeabi_dsub>
 8014844:	4602      	mov	r2, r0
 8014846:	460b      	mov	r3, r1
 8014848:	f7ec f818 	bl	800087c <__aeabi_ddiv>
 801484c:	e7e4      	b.n	8014818 <__ieee754_sqrt+0x2c>
 801484e:	151b      	asrs	r3, r3, #20
 8014850:	d073      	beq.n	801493a <__ieee754_sqrt+0x14e>
 8014852:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014856:	07dd      	lsls	r5, r3, #31
 8014858:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801485c:	bf48      	it	mi
 801485e:	0fc8      	lsrmi	r0, r1, #31
 8014860:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014864:	bf44      	itt	mi
 8014866:	0049      	lslmi	r1, r1, #1
 8014868:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801486c:	2500      	movs	r5, #0
 801486e:	1058      	asrs	r0, r3, #1
 8014870:	0fcb      	lsrs	r3, r1, #31
 8014872:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8014876:	0049      	lsls	r1, r1, #1
 8014878:	2316      	movs	r3, #22
 801487a:	462c      	mov	r4, r5
 801487c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014880:	19a7      	adds	r7, r4, r6
 8014882:	4297      	cmp	r7, r2
 8014884:	bfde      	ittt	le
 8014886:	19bc      	addle	r4, r7, r6
 8014888:	1bd2      	suble	r2, r2, r7
 801488a:	19ad      	addle	r5, r5, r6
 801488c:	0fcf      	lsrs	r7, r1, #31
 801488e:	3b01      	subs	r3, #1
 8014890:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8014894:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014898:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801489c:	d1f0      	bne.n	8014880 <__ieee754_sqrt+0x94>
 801489e:	f04f 0c20 	mov.w	ip, #32
 80148a2:	469e      	mov	lr, r3
 80148a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80148a8:	42a2      	cmp	r2, r4
 80148aa:	eb06 070e 	add.w	r7, r6, lr
 80148ae:	dc02      	bgt.n	80148b6 <__ieee754_sqrt+0xca>
 80148b0:	d112      	bne.n	80148d8 <__ieee754_sqrt+0xec>
 80148b2:	428f      	cmp	r7, r1
 80148b4:	d810      	bhi.n	80148d8 <__ieee754_sqrt+0xec>
 80148b6:	2f00      	cmp	r7, #0
 80148b8:	eb07 0e06 	add.w	lr, r7, r6
 80148bc:	da42      	bge.n	8014944 <__ieee754_sqrt+0x158>
 80148be:	f1be 0f00 	cmp.w	lr, #0
 80148c2:	db3f      	blt.n	8014944 <__ieee754_sqrt+0x158>
 80148c4:	f104 0801 	add.w	r8, r4, #1
 80148c8:	1b12      	subs	r2, r2, r4
 80148ca:	428f      	cmp	r7, r1
 80148cc:	bf88      	it	hi
 80148ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80148d2:	1bc9      	subs	r1, r1, r7
 80148d4:	4433      	add	r3, r6
 80148d6:	4644      	mov	r4, r8
 80148d8:	0052      	lsls	r2, r2, #1
 80148da:	f1bc 0c01 	subs.w	ip, ip, #1
 80148de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80148e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80148e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80148ea:	d1dd      	bne.n	80148a8 <__ieee754_sqrt+0xbc>
 80148ec:	430a      	orrs	r2, r1
 80148ee:	d006      	beq.n	80148fe <__ieee754_sqrt+0x112>
 80148f0:	1c5c      	adds	r4, r3, #1
 80148f2:	bf13      	iteet	ne
 80148f4:	3301      	addne	r3, #1
 80148f6:	3501      	addeq	r5, #1
 80148f8:	4663      	moveq	r3, ip
 80148fa:	f023 0301 	bicne.w	r3, r3, #1
 80148fe:	106a      	asrs	r2, r5, #1
 8014900:	085b      	lsrs	r3, r3, #1
 8014902:	07e9      	lsls	r1, r5, #31
 8014904:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014908:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801490c:	bf48      	it	mi
 801490e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014912:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8014916:	461c      	mov	r4, r3
 8014918:	e780      	b.n	801481c <__ieee754_sqrt+0x30>
 801491a:	0aca      	lsrs	r2, r1, #11
 801491c:	3815      	subs	r0, #21
 801491e:	0549      	lsls	r1, r1, #21
 8014920:	2a00      	cmp	r2, #0
 8014922:	d0fa      	beq.n	801491a <__ieee754_sqrt+0x12e>
 8014924:	02d6      	lsls	r6, r2, #11
 8014926:	d50a      	bpl.n	801493e <__ieee754_sqrt+0x152>
 8014928:	f1c3 0420 	rsb	r4, r3, #32
 801492c:	fa21 f404 	lsr.w	r4, r1, r4
 8014930:	1e5d      	subs	r5, r3, #1
 8014932:	4099      	lsls	r1, r3
 8014934:	4322      	orrs	r2, r4
 8014936:	1b43      	subs	r3, r0, r5
 8014938:	e78b      	b.n	8014852 <__ieee754_sqrt+0x66>
 801493a:	4618      	mov	r0, r3
 801493c:	e7f0      	b.n	8014920 <__ieee754_sqrt+0x134>
 801493e:	0052      	lsls	r2, r2, #1
 8014940:	3301      	adds	r3, #1
 8014942:	e7ef      	b.n	8014924 <__ieee754_sqrt+0x138>
 8014944:	46a0      	mov	r8, r4
 8014946:	e7bf      	b.n	80148c8 <__ieee754_sqrt+0xdc>
 8014948:	7ff00000 	.word	0x7ff00000
 801494c:	00000000 	.word	0x00000000

08014950 <__kernel_cos>:
 8014950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014954:	ec59 8b10 	vmov	r8, r9, d0
 8014958:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801495c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014960:	ed2d 8b02 	vpush	{d8}
 8014964:	eeb0 8a41 	vmov.f32	s16, s2
 8014968:	eef0 8a61 	vmov.f32	s17, s3
 801496c:	da07      	bge.n	801497e <__kernel_cos+0x2e>
 801496e:	ee10 0a10 	vmov	r0, s0
 8014972:	4649      	mov	r1, r9
 8014974:	f7ec f908 	bl	8000b88 <__aeabi_d2iz>
 8014978:	2800      	cmp	r0, #0
 801497a:	f000 8089 	beq.w	8014a90 <__kernel_cos+0x140>
 801497e:	4642      	mov	r2, r8
 8014980:	464b      	mov	r3, r9
 8014982:	4640      	mov	r0, r8
 8014984:	4649      	mov	r1, r9
 8014986:	f7eb fe4f 	bl	8000628 <__aeabi_dmul>
 801498a:	2200      	movs	r2, #0
 801498c:	4b4e      	ldr	r3, [pc, #312]	; (8014ac8 <__kernel_cos+0x178>)
 801498e:	4604      	mov	r4, r0
 8014990:	460d      	mov	r5, r1
 8014992:	f7eb fe49 	bl	8000628 <__aeabi_dmul>
 8014996:	a340      	add	r3, pc, #256	; (adr r3, 8014a98 <__kernel_cos+0x148>)
 8014998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801499c:	4682      	mov	sl, r0
 801499e:	468b      	mov	fp, r1
 80149a0:	4620      	mov	r0, r4
 80149a2:	4629      	mov	r1, r5
 80149a4:	f7eb fe40 	bl	8000628 <__aeabi_dmul>
 80149a8:	a33d      	add	r3, pc, #244	; (adr r3, 8014aa0 <__kernel_cos+0x150>)
 80149aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ae:	f7eb fc85 	bl	80002bc <__adddf3>
 80149b2:	4622      	mov	r2, r4
 80149b4:	462b      	mov	r3, r5
 80149b6:	f7eb fe37 	bl	8000628 <__aeabi_dmul>
 80149ba:	a33b      	add	r3, pc, #236	; (adr r3, 8014aa8 <__kernel_cos+0x158>)
 80149bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c0:	f7eb fc7a 	bl	80002b8 <__aeabi_dsub>
 80149c4:	4622      	mov	r2, r4
 80149c6:	462b      	mov	r3, r5
 80149c8:	f7eb fe2e 	bl	8000628 <__aeabi_dmul>
 80149cc:	a338      	add	r3, pc, #224	; (adr r3, 8014ab0 <__kernel_cos+0x160>)
 80149ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d2:	f7eb fc73 	bl	80002bc <__adddf3>
 80149d6:	4622      	mov	r2, r4
 80149d8:	462b      	mov	r3, r5
 80149da:	f7eb fe25 	bl	8000628 <__aeabi_dmul>
 80149de:	a336      	add	r3, pc, #216	; (adr r3, 8014ab8 <__kernel_cos+0x168>)
 80149e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e4:	f7eb fc68 	bl	80002b8 <__aeabi_dsub>
 80149e8:	4622      	mov	r2, r4
 80149ea:	462b      	mov	r3, r5
 80149ec:	f7eb fe1c 	bl	8000628 <__aeabi_dmul>
 80149f0:	a333      	add	r3, pc, #204	; (adr r3, 8014ac0 <__kernel_cos+0x170>)
 80149f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f6:	f7eb fc61 	bl	80002bc <__adddf3>
 80149fa:	4622      	mov	r2, r4
 80149fc:	462b      	mov	r3, r5
 80149fe:	f7eb fe13 	bl	8000628 <__aeabi_dmul>
 8014a02:	4622      	mov	r2, r4
 8014a04:	462b      	mov	r3, r5
 8014a06:	f7eb fe0f 	bl	8000628 <__aeabi_dmul>
 8014a0a:	ec53 2b18 	vmov	r2, r3, d8
 8014a0e:	4604      	mov	r4, r0
 8014a10:	460d      	mov	r5, r1
 8014a12:	4640      	mov	r0, r8
 8014a14:	4649      	mov	r1, r9
 8014a16:	f7eb fe07 	bl	8000628 <__aeabi_dmul>
 8014a1a:	460b      	mov	r3, r1
 8014a1c:	4602      	mov	r2, r0
 8014a1e:	4629      	mov	r1, r5
 8014a20:	4620      	mov	r0, r4
 8014a22:	f7eb fc49 	bl	80002b8 <__aeabi_dsub>
 8014a26:	4b29      	ldr	r3, [pc, #164]	; (8014acc <__kernel_cos+0x17c>)
 8014a28:	429e      	cmp	r6, r3
 8014a2a:	4680      	mov	r8, r0
 8014a2c:	4689      	mov	r9, r1
 8014a2e:	dc11      	bgt.n	8014a54 <__kernel_cos+0x104>
 8014a30:	4602      	mov	r2, r0
 8014a32:	460b      	mov	r3, r1
 8014a34:	4650      	mov	r0, sl
 8014a36:	4659      	mov	r1, fp
 8014a38:	f7eb fc3e 	bl	80002b8 <__aeabi_dsub>
 8014a3c:	460b      	mov	r3, r1
 8014a3e:	4924      	ldr	r1, [pc, #144]	; (8014ad0 <__kernel_cos+0x180>)
 8014a40:	4602      	mov	r2, r0
 8014a42:	2000      	movs	r0, #0
 8014a44:	f7eb fc38 	bl	80002b8 <__aeabi_dsub>
 8014a48:	ecbd 8b02 	vpop	{d8}
 8014a4c:	ec41 0b10 	vmov	d0, r0, r1
 8014a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a54:	4b1f      	ldr	r3, [pc, #124]	; (8014ad4 <__kernel_cos+0x184>)
 8014a56:	491e      	ldr	r1, [pc, #120]	; (8014ad0 <__kernel_cos+0x180>)
 8014a58:	429e      	cmp	r6, r3
 8014a5a:	bfcc      	ite	gt
 8014a5c:	4d1e      	ldrgt	r5, [pc, #120]	; (8014ad8 <__kernel_cos+0x188>)
 8014a5e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014a62:	2400      	movs	r4, #0
 8014a64:	4622      	mov	r2, r4
 8014a66:	462b      	mov	r3, r5
 8014a68:	2000      	movs	r0, #0
 8014a6a:	f7eb fc25 	bl	80002b8 <__aeabi_dsub>
 8014a6e:	4622      	mov	r2, r4
 8014a70:	4606      	mov	r6, r0
 8014a72:	460f      	mov	r7, r1
 8014a74:	462b      	mov	r3, r5
 8014a76:	4650      	mov	r0, sl
 8014a78:	4659      	mov	r1, fp
 8014a7a:	f7eb fc1d 	bl	80002b8 <__aeabi_dsub>
 8014a7e:	4642      	mov	r2, r8
 8014a80:	464b      	mov	r3, r9
 8014a82:	f7eb fc19 	bl	80002b8 <__aeabi_dsub>
 8014a86:	4602      	mov	r2, r0
 8014a88:	460b      	mov	r3, r1
 8014a8a:	4630      	mov	r0, r6
 8014a8c:	4639      	mov	r1, r7
 8014a8e:	e7d9      	b.n	8014a44 <__kernel_cos+0xf4>
 8014a90:	2000      	movs	r0, #0
 8014a92:	490f      	ldr	r1, [pc, #60]	; (8014ad0 <__kernel_cos+0x180>)
 8014a94:	e7d8      	b.n	8014a48 <__kernel_cos+0xf8>
 8014a96:	bf00      	nop
 8014a98:	be8838d4 	.word	0xbe8838d4
 8014a9c:	bda8fae9 	.word	0xbda8fae9
 8014aa0:	bdb4b1c4 	.word	0xbdb4b1c4
 8014aa4:	3e21ee9e 	.word	0x3e21ee9e
 8014aa8:	809c52ad 	.word	0x809c52ad
 8014aac:	3e927e4f 	.word	0x3e927e4f
 8014ab0:	19cb1590 	.word	0x19cb1590
 8014ab4:	3efa01a0 	.word	0x3efa01a0
 8014ab8:	16c15177 	.word	0x16c15177
 8014abc:	3f56c16c 	.word	0x3f56c16c
 8014ac0:	5555554c 	.word	0x5555554c
 8014ac4:	3fa55555 	.word	0x3fa55555
 8014ac8:	3fe00000 	.word	0x3fe00000
 8014acc:	3fd33332 	.word	0x3fd33332
 8014ad0:	3ff00000 	.word	0x3ff00000
 8014ad4:	3fe90000 	.word	0x3fe90000
 8014ad8:	3fd20000 	.word	0x3fd20000
 8014adc:	00000000 	.word	0x00000000

08014ae0 <__kernel_rem_pio2>:
 8014ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ae4:	ed2d 8b02 	vpush	{d8}
 8014ae8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014aec:	1ed4      	subs	r4, r2, #3
 8014aee:	9308      	str	r3, [sp, #32]
 8014af0:	9101      	str	r1, [sp, #4]
 8014af2:	4bc5      	ldr	r3, [pc, #788]	; (8014e08 <__kernel_rem_pio2+0x328>)
 8014af4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014af6:	9009      	str	r0, [sp, #36]	; 0x24
 8014af8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014afc:	9304      	str	r3, [sp, #16]
 8014afe:	9b08      	ldr	r3, [sp, #32]
 8014b00:	3b01      	subs	r3, #1
 8014b02:	9307      	str	r3, [sp, #28]
 8014b04:	2318      	movs	r3, #24
 8014b06:	fb94 f4f3 	sdiv	r4, r4, r3
 8014b0a:	f06f 0317 	mvn.w	r3, #23
 8014b0e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014b12:	fb04 3303 	mla	r3, r4, r3, r3
 8014b16:	eb03 0a02 	add.w	sl, r3, r2
 8014b1a:	9b04      	ldr	r3, [sp, #16]
 8014b1c:	9a07      	ldr	r2, [sp, #28]
 8014b1e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014df8 <__kernel_rem_pio2+0x318>
 8014b22:	eb03 0802 	add.w	r8, r3, r2
 8014b26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014b28:	1aa7      	subs	r7, r4, r2
 8014b2a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014b2e:	ae22      	add	r6, sp, #136	; 0x88
 8014b30:	2500      	movs	r5, #0
 8014b32:	4545      	cmp	r5, r8
 8014b34:	dd13      	ble.n	8014b5e <__kernel_rem_pio2+0x7e>
 8014b36:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014df8 <__kernel_rem_pio2+0x318>
 8014b3a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014b3e:	2600      	movs	r6, #0
 8014b40:	9b04      	ldr	r3, [sp, #16]
 8014b42:	429e      	cmp	r6, r3
 8014b44:	dc32      	bgt.n	8014bac <__kernel_rem_pio2+0xcc>
 8014b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b48:	9302      	str	r3, [sp, #8]
 8014b4a:	9b08      	ldr	r3, [sp, #32]
 8014b4c:	199d      	adds	r5, r3, r6
 8014b4e:	ab22      	add	r3, sp, #136	; 0x88
 8014b50:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014b54:	9306      	str	r3, [sp, #24]
 8014b56:	ec59 8b18 	vmov	r8, r9, d8
 8014b5a:	2700      	movs	r7, #0
 8014b5c:	e01f      	b.n	8014b9e <__kernel_rem_pio2+0xbe>
 8014b5e:	42ef      	cmn	r7, r5
 8014b60:	d407      	bmi.n	8014b72 <__kernel_rem_pio2+0x92>
 8014b62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014b66:	f7eb fcf5 	bl	8000554 <__aeabi_i2d>
 8014b6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014b6e:	3501      	adds	r5, #1
 8014b70:	e7df      	b.n	8014b32 <__kernel_rem_pio2+0x52>
 8014b72:	ec51 0b18 	vmov	r0, r1, d8
 8014b76:	e7f8      	b.n	8014b6a <__kernel_rem_pio2+0x8a>
 8014b78:	9906      	ldr	r1, [sp, #24]
 8014b7a:	9d02      	ldr	r5, [sp, #8]
 8014b7c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014b80:	9106      	str	r1, [sp, #24]
 8014b82:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014b86:	9502      	str	r5, [sp, #8]
 8014b88:	f7eb fd4e 	bl	8000628 <__aeabi_dmul>
 8014b8c:	4602      	mov	r2, r0
 8014b8e:	460b      	mov	r3, r1
 8014b90:	4640      	mov	r0, r8
 8014b92:	4649      	mov	r1, r9
 8014b94:	f7eb fb92 	bl	80002bc <__adddf3>
 8014b98:	3701      	adds	r7, #1
 8014b9a:	4680      	mov	r8, r0
 8014b9c:	4689      	mov	r9, r1
 8014b9e:	9b07      	ldr	r3, [sp, #28]
 8014ba0:	429f      	cmp	r7, r3
 8014ba2:	dde9      	ble.n	8014b78 <__kernel_rem_pio2+0x98>
 8014ba4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014ba8:	3601      	adds	r6, #1
 8014baa:	e7c9      	b.n	8014b40 <__kernel_rem_pio2+0x60>
 8014bac:	9b04      	ldr	r3, [sp, #16]
 8014bae:	aa0e      	add	r2, sp, #56	; 0x38
 8014bb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014bb4:	930c      	str	r3, [sp, #48]	; 0x30
 8014bb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014bb8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014bbc:	9c04      	ldr	r4, [sp, #16]
 8014bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bc0:	ab9a      	add	r3, sp, #616	; 0x268
 8014bc2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014bc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014bca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014bce:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014bd2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014bd6:	ab9a      	add	r3, sp, #616	; 0x268
 8014bd8:	445b      	add	r3, fp
 8014bda:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014bde:	2500      	movs	r5, #0
 8014be0:	1b63      	subs	r3, r4, r5
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	dc78      	bgt.n	8014cd8 <__kernel_rem_pio2+0x1f8>
 8014be6:	4650      	mov	r0, sl
 8014be8:	ec49 8b10 	vmov	d0, r8, r9
 8014bec:	f000 fc98 	bl	8015520 <scalbn>
 8014bf0:	ec57 6b10 	vmov	r6, r7, d0
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014bfa:	ee10 0a10 	vmov	r0, s0
 8014bfe:	4639      	mov	r1, r7
 8014c00:	f7eb fd12 	bl	8000628 <__aeabi_dmul>
 8014c04:	ec41 0b10 	vmov	d0, r0, r1
 8014c08:	f000 fb76 	bl	80152f8 <floor>
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	ec51 0b10 	vmov	r0, r1, d0
 8014c12:	4b7e      	ldr	r3, [pc, #504]	; (8014e0c <__kernel_rem_pio2+0x32c>)
 8014c14:	f7eb fd08 	bl	8000628 <__aeabi_dmul>
 8014c18:	4602      	mov	r2, r0
 8014c1a:	460b      	mov	r3, r1
 8014c1c:	4630      	mov	r0, r6
 8014c1e:	4639      	mov	r1, r7
 8014c20:	f7eb fb4a 	bl	80002b8 <__aeabi_dsub>
 8014c24:	460f      	mov	r7, r1
 8014c26:	4606      	mov	r6, r0
 8014c28:	f7eb ffae 	bl	8000b88 <__aeabi_d2iz>
 8014c2c:	9006      	str	r0, [sp, #24]
 8014c2e:	f7eb fc91 	bl	8000554 <__aeabi_i2d>
 8014c32:	4602      	mov	r2, r0
 8014c34:	460b      	mov	r3, r1
 8014c36:	4630      	mov	r0, r6
 8014c38:	4639      	mov	r1, r7
 8014c3a:	f7eb fb3d 	bl	80002b8 <__aeabi_dsub>
 8014c3e:	f1ba 0f00 	cmp.w	sl, #0
 8014c42:	4606      	mov	r6, r0
 8014c44:	460f      	mov	r7, r1
 8014c46:	dd6c      	ble.n	8014d22 <__kernel_rem_pio2+0x242>
 8014c48:	1e62      	subs	r2, r4, #1
 8014c4a:	ab0e      	add	r3, sp, #56	; 0x38
 8014c4c:	f1ca 0118 	rsb	r1, sl, #24
 8014c50:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014c54:	9d06      	ldr	r5, [sp, #24]
 8014c56:	fa40 f301 	asr.w	r3, r0, r1
 8014c5a:	441d      	add	r5, r3
 8014c5c:	408b      	lsls	r3, r1
 8014c5e:	1ac0      	subs	r0, r0, r3
 8014c60:	ab0e      	add	r3, sp, #56	; 0x38
 8014c62:	9506      	str	r5, [sp, #24]
 8014c64:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014c68:	f1ca 0317 	rsb	r3, sl, #23
 8014c6c:	fa40 f303 	asr.w	r3, r0, r3
 8014c70:	9302      	str	r3, [sp, #8]
 8014c72:	9b02      	ldr	r3, [sp, #8]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	dd62      	ble.n	8014d3e <__kernel_rem_pio2+0x25e>
 8014c78:	9b06      	ldr	r3, [sp, #24]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	3301      	adds	r3, #1
 8014c7e:	9306      	str	r3, [sp, #24]
 8014c80:	4615      	mov	r5, r2
 8014c82:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014c86:	4294      	cmp	r4, r2
 8014c88:	f300 8095 	bgt.w	8014db6 <__kernel_rem_pio2+0x2d6>
 8014c8c:	f1ba 0f00 	cmp.w	sl, #0
 8014c90:	dd07      	ble.n	8014ca2 <__kernel_rem_pio2+0x1c2>
 8014c92:	f1ba 0f01 	cmp.w	sl, #1
 8014c96:	f000 80a2 	beq.w	8014dde <__kernel_rem_pio2+0x2fe>
 8014c9a:	f1ba 0f02 	cmp.w	sl, #2
 8014c9e:	f000 80c1 	beq.w	8014e24 <__kernel_rem_pio2+0x344>
 8014ca2:	9b02      	ldr	r3, [sp, #8]
 8014ca4:	2b02      	cmp	r3, #2
 8014ca6:	d14a      	bne.n	8014d3e <__kernel_rem_pio2+0x25e>
 8014ca8:	4632      	mov	r2, r6
 8014caa:	463b      	mov	r3, r7
 8014cac:	2000      	movs	r0, #0
 8014cae:	4958      	ldr	r1, [pc, #352]	; (8014e10 <__kernel_rem_pio2+0x330>)
 8014cb0:	f7eb fb02 	bl	80002b8 <__aeabi_dsub>
 8014cb4:	4606      	mov	r6, r0
 8014cb6:	460f      	mov	r7, r1
 8014cb8:	2d00      	cmp	r5, #0
 8014cba:	d040      	beq.n	8014d3e <__kernel_rem_pio2+0x25e>
 8014cbc:	4650      	mov	r0, sl
 8014cbe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014e00 <__kernel_rem_pio2+0x320>
 8014cc2:	f000 fc2d 	bl	8015520 <scalbn>
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	4639      	mov	r1, r7
 8014cca:	ec53 2b10 	vmov	r2, r3, d0
 8014cce:	f7eb faf3 	bl	80002b8 <__aeabi_dsub>
 8014cd2:	4606      	mov	r6, r0
 8014cd4:	460f      	mov	r7, r1
 8014cd6:	e032      	b.n	8014d3e <__kernel_rem_pio2+0x25e>
 8014cd8:	2200      	movs	r2, #0
 8014cda:	4b4e      	ldr	r3, [pc, #312]	; (8014e14 <__kernel_rem_pio2+0x334>)
 8014cdc:	4640      	mov	r0, r8
 8014cde:	4649      	mov	r1, r9
 8014ce0:	f7eb fca2 	bl	8000628 <__aeabi_dmul>
 8014ce4:	f7eb ff50 	bl	8000b88 <__aeabi_d2iz>
 8014ce8:	f7eb fc34 	bl	8000554 <__aeabi_i2d>
 8014cec:	2200      	movs	r2, #0
 8014cee:	4b4a      	ldr	r3, [pc, #296]	; (8014e18 <__kernel_rem_pio2+0x338>)
 8014cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014cf4:	f7eb fc98 	bl	8000628 <__aeabi_dmul>
 8014cf8:	4602      	mov	r2, r0
 8014cfa:	460b      	mov	r3, r1
 8014cfc:	4640      	mov	r0, r8
 8014cfe:	4649      	mov	r1, r9
 8014d00:	f7eb fada 	bl	80002b8 <__aeabi_dsub>
 8014d04:	f7eb ff40 	bl	8000b88 <__aeabi_d2iz>
 8014d08:	ab0e      	add	r3, sp, #56	; 0x38
 8014d0a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014d0e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d16:	f7eb fad1 	bl	80002bc <__adddf3>
 8014d1a:	3501      	adds	r5, #1
 8014d1c:	4680      	mov	r8, r0
 8014d1e:	4689      	mov	r9, r1
 8014d20:	e75e      	b.n	8014be0 <__kernel_rem_pio2+0x100>
 8014d22:	d105      	bne.n	8014d30 <__kernel_rem_pio2+0x250>
 8014d24:	1e63      	subs	r3, r4, #1
 8014d26:	aa0e      	add	r2, sp, #56	; 0x38
 8014d28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014d2c:	15c3      	asrs	r3, r0, #23
 8014d2e:	e79f      	b.n	8014c70 <__kernel_rem_pio2+0x190>
 8014d30:	2200      	movs	r2, #0
 8014d32:	4b3a      	ldr	r3, [pc, #232]	; (8014e1c <__kernel_rem_pio2+0x33c>)
 8014d34:	f7eb fefe 	bl	8000b34 <__aeabi_dcmpge>
 8014d38:	2800      	cmp	r0, #0
 8014d3a:	d139      	bne.n	8014db0 <__kernel_rem_pio2+0x2d0>
 8014d3c:	9002      	str	r0, [sp, #8]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	2300      	movs	r3, #0
 8014d42:	4630      	mov	r0, r6
 8014d44:	4639      	mov	r1, r7
 8014d46:	f7eb fed7 	bl	8000af8 <__aeabi_dcmpeq>
 8014d4a:	2800      	cmp	r0, #0
 8014d4c:	f000 80c7 	beq.w	8014ede <__kernel_rem_pio2+0x3fe>
 8014d50:	1e65      	subs	r5, r4, #1
 8014d52:	462b      	mov	r3, r5
 8014d54:	2200      	movs	r2, #0
 8014d56:	9904      	ldr	r1, [sp, #16]
 8014d58:	428b      	cmp	r3, r1
 8014d5a:	da6a      	bge.n	8014e32 <__kernel_rem_pio2+0x352>
 8014d5c:	2a00      	cmp	r2, #0
 8014d5e:	f000 8088 	beq.w	8014e72 <__kernel_rem_pio2+0x392>
 8014d62:	ab0e      	add	r3, sp, #56	; 0x38
 8014d64:	f1aa 0a18 	sub.w	sl, sl, #24
 8014d68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	f000 80b4 	beq.w	8014eda <__kernel_rem_pio2+0x3fa>
 8014d72:	4650      	mov	r0, sl
 8014d74:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014e00 <__kernel_rem_pio2+0x320>
 8014d78:	f000 fbd2 	bl	8015520 <scalbn>
 8014d7c:	00ec      	lsls	r4, r5, #3
 8014d7e:	ab72      	add	r3, sp, #456	; 0x1c8
 8014d80:	191e      	adds	r6, r3, r4
 8014d82:	ec59 8b10 	vmov	r8, r9, d0
 8014d86:	f106 0a08 	add.w	sl, r6, #8
 8014d8a:	462f      	mov	r7, r5
 8014d8c:	2f00      	cmp	r7, #0
 8014d8e:	f280 80df 	bge.w	8014f50 <__kernel_rem_pio2+0x470>
 8014d92:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014df8 <__kernel_rem_pio2+0x318>
 8014d96:	f04f 0a00 	mov.w	sl, #0
 8014d9a:	eba5 030a 	sub.w	r3, r5, sl
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	f2c0 810a 	blt.w	8014fb8 <__kernel_rem_pio2+0x4d8>
 8014da4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014e20 <__kernel_rem_pio2+0x340>
 8014da8:	ec59 8b18 	vmov	r8, r9, d8
 8014dac:	2700      	movs	r7, #0
 8014dae:	e0f5      	b.n	8014f9c <__kernel_rem_pio2+0x4bc>
 8014db0:	2302      	movs	r3, #2
 8014db2:	9302      	str	r3, [sp, #8]
 8014db4:	e760      	b.n	8014c78 <__kernel_rem_pio2+0x198>
 8014db6:	ab0e      	add	r3, sp, #56	; 0x38
 8014db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dbc:	b94d      	cbnz	r5, 8014dd2 <__kernel_rem_pio2+0x2f2>
 8014dbe:	b12b      	cbz	r3, 8014dcc <__kernel_rem_pio2+0x2ec>
 8014dc0:	a80e      	add	r0, sp, #56	; 0x38
 8014dc2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014dc6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014dca:	2301      	movs	r3, #1
 8014dcc:	3201      	adds	r2, #1
 8014dce:	461d      	mov	r5, r3
 8014dd0:	e759      	b.n	8014c86 <__kernel_rem_pio2+0x1a6>
 8014dd2:	a80e      	add	r0, sp, #56	; 0x38
 8014dd4:	1acb      	subs	r3, r1, r3
 8014dd6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014dda:	462b      	mov	r3, r5
 8014ddc:	e7f6      	b.n	8014dcc <__kernel_rem_pio2+0x2ec>
 8014dde:	1e62      	subs	r2, r4, #1
 8014de0:	ab0e      	add	r3, sp, #56	; 0x38
 8014de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014de6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014dea:	a90e      	add	r1, sp, #56	; 0x38
 8014dec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014df0:	e757      	b.n	8014ca2 <__kernel_rem_pio2+0x1c2>
 8014df2:	bf00      	nop
 8014df4:	f3af 8000 	nop.w
	...
 8014e04:	3ff00000 	.word	0x3ff00000
 8014e08:	08016480 	.word	0x08016480
 8014e0c:	40200000 	.word	0x40200000
 8014e10:	3ff00000 	.word	0x3ff00000
 8014e14:	3e700000 	.word	0x3e700000
 8014e18:	41700000 	.word	0x41700000
 8014e1c:	3fe00000 	.word	0x3fe00000
 8014e20:	08016440 	.word	0x08016440
 8014e24:	1e62      	subs	r2, r4, #1
 8014e26:	ab0e      	add	r3, sp, #56	; 0x38
 8014e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014e30:	e7db      	b.n	8014dea <__kernel_rem_pio2+0x30a>
 8014e32:	a90e      	add	r1, sp, #56	; 0x38
 8014e34:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014e38:	3b01      	subs	r3, #1
 8014e3a:	430a      	orrs	r2, r1
 8014e3c:	e78b      	b.n	8014d56 <__kernel_rem_pio2+0x276>
 8014e3e:	3301      	adds	r3, #1
 8014e40:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014e44:	2900      	cmp	r1, #0
 8014e46:	d0fa      	beq.n	8014e3e <__kernel_rem_pio2+0x35e>
 8014e48:	9a08      	ldr	r2, [sp, #32]
 8014e4a:	4422      	add	r2, r4
 8014e4c:	00d2      	lsls	r2, r2, #3
 8014e4e:	a922      	add	r1, sp, #136	; 0x88
 8014e50:	18e3      	adds	r3, r4, r3
 8014e52:	9206      	str	r2, [sp, #24]
 8014e54:	440a      	add	r2, r1
 8014e56:	9302      	str	r3, [sp, #8]
 8014e58:	f10b 0108 	add.w	r1, fp, #8
 8014e5c:	f102 0308 	add.w	r3, r2, #8
 8014e60:	1c66      	adds	r6, r4, #1
 8014e62:	910a      	str	r1, [sp, #40]	; 0x28
 8014e64:	2500      	movs	r5, #0
 8014e66:	930d      	str	r3, [sp, #52]	; 0x34
 8014e68:	9b02      	ldr	r3, [sp, #8]
 8014e6a:	42b3      	cmp	r3, r6
 8014e6c:	da04      	bge.n	8014e78 <__kernel_rem_pio2+0x398>
 8014e6e:	461c      	mov	r4, r3
 8014e70:	e6a6      	b.n	8014bc0 <__kernel_rem_pio2+0xe0>
 8014e72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e74:	2301      	movs	r3, #1
 8014e76:	e7e3      	b.n	8014e40 <__kernel_rem_pio2+0x360>
 8014e78:	9b06      	ldr	r3, [sp, #24]
 8014e7a:	18ef      	adds	r7, r5, r3
 8014e7c:	ab22      	add	r3, sp, #136	; 0x88
 8014e7e:	441f      	add	r7, r3
 8014e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014e86:	f7eb fb65 	bl	8000554 <__aeabi_i2d>
 8014e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e8c:	461c      	mov	r4, r3
 8014e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e90:	e9c7 0100 	strd	r0, r1, [r7]
 8014e94:	eb03 0b05 	add.w	fp, r3, r5
 8014e98:	2700      	movs	r7, #0
 8014e9a:	f04f 0800 	mov.w	r8, #0
 8014e9e:	f04f 0900 	mov.w	r9, #0
 8014ea2:	9b07      	ldr	r3, [sp, #28]
 8014ea4:	429f      	cmp	r7, r3
 8014ea6:	dd08      	ble.n	8014eba <__kernel_rem_pio2+0x3da>
 8014ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014eaa:	aa72      	add	r2, sp, #456	; 0x1c8
 8014eac:	18eb      	adds	r3, r5, r3
 8014eae:	4413      	add	r3, r2
 8014eb0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014eb4:	3601      	adds	r6, #1
 8014eb6:	3508      	adds	r5, #8
 8014eb8:	e7d6      	b.n	8014e68 <__kernel_rem_pio2+0x388>
 8014eba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014ebe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014ec2:	f7eb fbb1 	bl	8000628 <__aeabi_dmul>
 8014ec6:	4602      	mov	r2, r0
 8014ec8:	460b      	mov	r3, r1
 8014eca:	4640      	mov	r0, r8
 8014ecc:	4649      	mov	r1, r9
 8014ece:	f7eb f9f5 	bl	80002bc <__adddf3>
 8014ed2:	3701      	adds	r7, #1
 8014ed4:	4680      	mov	r8, r0
 8014ed6:	4689      	mov	r9, r1
 8014ed8:	e7e3      	b.n	8014ea2 <__kernel_rem_pio2+0x3c2>
 8014eda:	3d01      	subs	r5, #1
 8014edc:	e741      	b.n	8014d62 <__kernel_rem_pio2+0x282>
 8014ede:	f1ca 0000 	rsb	r0, sl, #0
 8014ee2:	ec47 6b10 	vmov	d0, r6, r7
 8014ee6:	f000 fb1b 	bl	8015520 <scalbn>
 8014eea:	ec57 6b10 	vmov	r6, r7, d0
 8014eee:	2200      	movs	r2, #0
 8014ef0:	4b99      	ldr	r3, [pc, #612]	; (8015158 <__kernel_rem_pio2+0x678>)
 8014ef2:	ee10 0a10 	vmov	r0, s0
 8014ef6:	4639      	mov	r1, r7
 8014ef8:	f7eb fe1c 	bl	8000b34 <__aeabi_dcmpge>
 8014efc:	b1f8      	cbz	r0, 8014f3e <__kernel_rem_pio2+0x45e>
 8014efe:	2200      	movs	r2, #0
 8014f00:	4b96      	ldr	r3, [pc, #600]	; (801515c <__kernel_rem_pio2+0x67c>)
 8014f02:	4630      	mov	r0, r6
 8014f04:	4639      	mov	r1, r7
 8014f06:	f7eb fb8f 	bl	8000628 <__aeabi_dmul>
 8014f0a:	f7eb fe3d 	bl	8000b88 <__aeabi_d2iz>
 8014f0e:	4680      	mov	r8, r0
 8014f10:	f7eb fb20 	bl	8000554 <__aeabi_i2d>
 8014f14:	2200      	movs	r2, #0
 8014f16:	4b90      	ldr	r3, [pc, #576]	; (8015158 <__kernel_rem_pio2+0x678>)
 8014f18:	f7eb fb86 	bl	8000628 <__aeabi_dmul>
 8014f1c:	460b      	mov	r3, r1
 8014f1e:	4602      	mov	r2, r0
 8014f20:	4639      	mov	r1, r7
 8014f22:	4630      	mov	r0, r6
 8014f24:	f7eb f9c8 	bl	80002b8 <__aeabi_dsub>
 8014f28:	f7eb fe2e 	bl	8000b88 <__aeabi_d2iz>
 8014f2c:	1c65      	adds	r5, r4, #1
 8014f2e:	ab0e      	add	r3, sp, #56	; 0x38
 8014f30:	f10a 0a18 	add.w	sl, sl, #24
 8014f34:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014f38:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014f3c:	e719      	b.n	8014d72 <__kernel_rem_pio2+0x292>
 8014f3e:	4630      	mov	r0, r6
 8014f40:	4639      	mov	r1, r7
 8014f42:	f7eb fe21 	bl	8000b88 <__aeabi_d2iz>
 8014f46:	ab0e      	add	r3, sp, #56	; 0x38
 8014f48:	4625      	mov	r5, r4
 8014f4a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014f4e:	e710      	b.n	8014d72 <__kernel_rem_pio2+0x292>
 8014f50:	ab0e      	add	r3, sp, #56	; 0x38
 8014f52:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014f56:	f7eb fafd 	bl	8000554 <__aeabi_i2d>
 8014f5a:	4642      	mov	r2, r8
 8014f5c:	464b      	mov	r3, r9
 8014f5e:	f7eb fb63 	bl	8000628 <__aeabi_dmul>
 8014f62:	2200      	movs	r2, #0
 8014f64:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014f68:	4b7c      	ldr	r3, [pc, #496]	; (801515c <__kernel_rem_pio2+0x67c>)
 8014f6a:	4640      	mov	r0, r8
 8014f6c:	4649      	mov	r1, r9
 8014f6e:	f7eb fb5b 	bl	8000628 <__aeabi_dmul>
 8014f72:	3f01      	subs	r7, #1
 8014f74:	4680      	mov	r8, r0
 8014f76:	4689      	mov	r9, r1
 8014f78:	e708      	b.n	8014d8c <__kernel_rem_pio2+0x2ac>
 8014f7a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f82:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014f86:	f7eb fb4f 	bl	8000628 <__aeabi_dmul>
 8014f8a:	4602      	mov	r2, r0
 8014f8c:	460b      	mov	r3, r1
 8014f8e:	4640      	mov	r0, r8
 8014f90:	4649      	mov	r1, r9
 8014f92:	f7eb f993 	bl	80002bc <__adddf3>
 8014f96:	3701      	adds	r7, #1
 8014f98:	4680      	mov	r8, r0
 8014f9a:	4689      	mov	r9, r1
 8014f9c:	9b04      	ldr	r3, [sp, #16]
 8014f9e:	429f      	cmp	r7, r3
 8014fa0:	dc01      	bgt.n	8014fa6 <__kernel_rem_pio2+0x4c6>
 8014fa2:	45ba      	cmp	sl, r7
 8014fa4:	dae9      	bge.n	8014f7a <__kernel_rem_pio2+0x49a>
 8014fa6:	ab4a      	add	r3, sp, #296	; 0x128
 8014fa8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014fac:	e9c3 8900 	strd	r8, r9, [r3]
 8014fb0:	f10a 0a01 	add.w	sl, sl, #1
 8014fb4:	3e08      	subs	r6, #8
 8014fb6:	e6f0      	b.n	8014d9a <__kernel_rem_pio2+0x2ba>
 8014fb8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014fba:	2b03      	cmp	r3, #3
 8014fbc:	d85b      	bhi.n	8015076 <__kernel_rem_pio2+0x596>
 8014fbe:	e8df f003 	tbb	[pc, r3]
 8014fc2:	264a      	.short	0x264a
 8014fc4:	0226      	.short	0x0226
 8014fc6:	ab9a      	add	r3, sp, #616	; 0x268
 8014fc8:	441c      	add	r4, r3
 8014fca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014fce:	46a2      	mov	sl, r4
 8014fd0:	46ab      	mov	fp, r5
 8014fd2:	f1bb 0f00 	cmp.w	fp, #0
 8014fd6:	dc6c      	bgt.n	80150b2 <__kernel_rem_pio2+0x5d2>
 8014fd8:	46a2      	mov	sl, r4
 8014fda:	46ab      	mov	fp, r5
 8014fdc:	f1bb 0f01 	cmp.w	fp, #1
 8014fe0:	f300 8086 	bgt.w	80150f0 <__kernel_rem_pio2+0x610>
 8014fe4:	2000      	movs	r0, #0
 8014fe6:	2100      	movs	r1, #0
 8014fe8:	2d01      	cmp	r5, #1
 8014fea:	f300 80a0 	bgt.w	801512e <__kernel_rem_pio2+0x64e>
 8014fee:	9b02      	ldr	r3, [sp, #8]
 8014ff0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014ff4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	f040 809e 	bne.w	801513a <__kernel_rem_pio2+0x65a>
 8014ffe:	9b01      	ldr	r3, [sp, #4]
 8015000:	e9c3 7800 	strd	r7, r8, [r3]
 8015004:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015008:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801500c:	e033      	b.n	8015076 <__kernel_rem_pio2+0x596>
 801500e:	3408      	adds	r4, #8
 8015010:	ab4a      	add	r3, sp, #296	; 0x128
 8015012:	441c      	add	r4, r3
 8015014:	462e      	mov	r6, r5
 8015016:	2000      	movs	r0, #0
 8015018:	2100      	movs	r1, #0
 801501a:	2e00      	cmp	r6, #0
 801501c:	da3a      	bge.n	8015094 <__kernel_rem_pio2+0x5b4>
 801501e:	9b02      	ldr	r3, [sp, #8]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d03d      	beq.n	80150a0 <__kernel_rem_pio2+0x5c0>
 8015024:	4602      	mov	r2, r0
 8015026:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801502a:	9c01      	ldr	r4, [sp, #4]
 801502c:	e9c4 2300 	strd	r2, r3, [r4]
 8015030:	4602      	mov	r2, r0
 8015032:	460b      	mov	r3, r1
 8015034:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8015038:	f7eb f93e 	bl	80002b8 <__aeabi_dsub>
 801503c:	ae4c      	add	r6, sp, #304	; 0x130
 801503e:	2401      	movs	r4, #1
 8015040:	42a5      	cmp	r5, r4
 8015042:	da30      	bge.n	80150a6 <__kernel_rem_pio2+0x5c6>
 8015044:	9b02      	ldr	r3, [sp, #8]
 8015046:	b113      	cbz	r3, 801504e <__kernel_rem_pio2+0x56e>
 8015048:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801504c:	4619      	mov	r1, r3
 801504e:	9b01      	ldr	r3, [sp, #4]
 8015050:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015054:	e00f      	b.n	8015076 <__kernel_rem_pio2+0x596>
 8015056:	ab9a      	add	r3, sp, #616	; 0x268
 8015058:	441c      	add	r4, r3
 801505a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801505e:	2000      	movs	r0, #0
 8015060:	2100      	movs	r1, #0
 8015062:	2d00      	cmp	r5, #0
 8015064:	da10      	bge.n	8015088 <__kernel_rem_pio2+0x5a8>
 8015066:	9b02      	ldr	r3, [sp, #8]
 8015068:	b113      	cbz	r3, 8015070 <__kernel_rem_pio2+0x590>
 801506a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801506e:	4619      	mov	r1, r3
 8015070:	9b01      	ldr	r3, [sp, #4]
 8015072:	e9c3 0100 	strd	r0, r1, [r3]
 8015076:	9b06      	ldr	r3, [sp, #24]
 8015078:	f003 0007 	and.w	r0, r3, #7
 801507c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015080:	ecbd 8b02 	vpop	{d8}
 8015084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015088:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801508c:	f7eb f916 	bl	80002bc <__adddf3>
 8015090:	3d01      	subs	r5, #1
 8015092:	e7e6      	b.n	8015062 <__kernel_rem_pio2+0x582>
 8015094:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015098:	f7eb f910 	bl	80002bc <__adddf3>
 801509c:	3e01      	subs	r6, #1
 801509e:	e7bc      	b.n	801501a <__kernel_rem_pio2+0x53a>
 80150a0:	4602      	mov	r2, r0
 80150a2:	460b      	mov	r3, r1
 80150a4:	e7c1      	b.n	801502a <__kernel_rem_pio2+0x54a>
 80150a6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80150aa:	f7eb f907 	bl	80002bc <__adddf3>
 80150ae:	3401      	adds	r4, #1
 80150b0:	e7c6      	b.n	8015040 <__kernel_rem_pio2+0x560>
 80150b2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80150b6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80150ba:	4640      	mov	r0, r8
 80150bc:	ec53 2b17 	vmov	r2, r3, d7
 80150c0:	4649      	mov	r1, r9
 80150c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80150c6:	f7eb f8f9 	bl	80002bc <__adddf3>
 80150ca:	4602      	mov	r2, r0
 80150cc:	460b      	mov	r3, r1
 80150ce:	4606      	mov	r6, r0
 80150d0:	460f      	mov	r7, r1
 80150d2:	4640      	mov	r0, r8
 80150d4:	4649      	mov	r1, r9
 80150d6:	f7eb f8ef 	bl	80002b8 <__aeabi_dsub>
 80150da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150de:	f7eb f8ed 	bl	80002bc <__adddf3>
 80150e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80150e6:	e9ca 0100 	strd	r0, r1, [sl]
 80150ea:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80150ee:	e770      	b.n	8014fd2 <__kernel_rem_pio2+0x4f2>
 80150f0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80150f4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80150f8:	4630      	mov	r0, r6
 80150fa:	ec53 2b17 	vmov	r2, r3, d7
 80150fe:	4639      	mov	r1, r7
 8015100:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015104:	f7eb f8da 	bl	80002bc <__adddf3>
 8015108:	4602      	mov	r2, r0
 801510a:	460b      	mov	r3, r1
 801510c:	4680      	mov	r8, r0
 801510e:	4689      	mov	r9, r1
 8015110:	4630      	mov	r0, r6
 8015112:	4639      	mov	r1, r7
 8015114:	f7eb f8d0 	bl	80002b8 <__aeabi_dsub>
 8015118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801511c:	f7eb f8ce 	bl	80002bc <__adddf3>
 8015120:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015124:	e9ca 0100 	strd	r0, r1, [sl]
 8015128:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801512c:	e756      	b.n	8014fdc <__kernel_rem_pio2+0x4fc>
 801512e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015132:	f7eb f8c3 	bl	80002bc <__adddf3>
 8015136:	3d01      	subs	r5, #1
 8015138:	e756      	b.n	8014fe8 <__kernel_rem_pio2+0x508>
 801513a:	9b01      	ldr	r3, [sp, #4]
 801513c:	9a01      	ldr	r2, [sp, #4]
 801513e:	601f      	str	r7, [r3, #0]
 8015140:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8015144:	605c      	str	r4, [r3, #4]
 8015146:	609d      	str	r5, [r3, #8]
 8015148:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801514c:	60d3      	str	r3, [r2, #12]
 801514e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015152:	6110      	str	r0, [r2, #16]
 8015154:	6153      	str	r3, [r2, #20]
 8015156:	e78e      	b.n	8015076 <__kernel_rem_pio2+0x596>
 8015158:	41700000 	.word	0x41700000
 801515c:	3e700000 	.word	0x3e700000

08015160 <__kernel_sin>:
 8015160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015164:	ec55 4b10 	vmov	r4, r5, d0
 8015168:	b085      	sub	sp, #20
 801516a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801516e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015172:	ed8d 1b00 	vstr	d1, [sp]
 8015176:	9002      	str	r0, [sp, #8]
 8015178:	da06      	bge.n	8015188 <__kernel_sin+0x28>
 801517a:	ee10 0a10 	vmov	r0, s0
 801517e:	4629      	mov	r1, r5
 8015180:	f7eb fd02 	bl	8000b88 <__aeabi_d2iz>
 8015184:	2800      	cmp	r0, #0
 8015186:	d051      	beq.n	801522c <__kernel_sin+0xcc>
 8015188:	4622      	mov	r2, r4
 801518a:	462b      	mov	r3, r5
 801518c:	4620      	mov	r0, r4
 801518e:	4629      	mov	r1, r5
 8015190:	f7eb fa4a 	bl	8000628 <__aeabi_dmul>
 8015194:	4682      	mov	sl, r0
 8015196:	468b      	mov	fp, r1
 8015198:	4602      	mov	r2, r0
 801519a:	460b      	mov	r3, r1
 801519c:	4620      	mov	r0, r4
 801519e:	4629      	mov	r1, r5
 80151a0:	f7eb fa42 	bl	8000628 <__aeabi_dmul>
 80151a4:	a341      	add	r3, pc, #260	; (adr r3, 80152ac <__kernel_sin+0x14c>)
 80151a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151aa:	4680      	mov	r8, r0
 80151ac:	4689      	mov	r9, r1
 80151ae:	4650      	mov	r0, sl
 80151b0:	4659      	mov	r1, fp
 80151b2:	f7eb fa39 	bl	8000628 <__aeabi_dmul>
 80151b6:	a33f      	add	r3, pc, #252	; (adr r3, 80152b4 <__kernel_sin+0x154>)
 80151b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151bc:	f7eb f87c 	bl	80002b8 <__aeabi_dsub>
 80151c0:	4652      	mov	r2, sl
 80151c2:	465b      	mov	r3, fp
 80151c4:	f7eb fa30 	bl	8000628 <__aeabi_dmul>
 80151c8:	a33c      	add	r3, pc, #240	; (adr r3, 80152bc <__kernel_sin+0x15c>)
 80151ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ce:	f7eb f875 	bl	80002bc <__adddf3>
 80151d2:	4652      	mov	r2, sl
 80151d4:	465b      	mov	r3, fp
 80151d6:	f7eb fa27 	bl	8000628 <__aeabi_dmul>
 80151da:	a33a      	add	r3, pc, #232	; (adr r3, 80152c4 <__kernel_sin+0x164>)
 80151dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e0:	f7eb f86a 	bl	80002b8 <__aeabi_dsub>
 80151e4:	4652      	mov	r2, sl
 80151e6:	465b      	mov	r3, fp
 80151e8:	f7eb fa1e 	bl	8000628 <__aeabi_dmul>
 80151ec:	a337      	add	r3, pc, #220	; (adr r3, 80152cc <__kernel_sin+0x16c>)
 80151ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f2:	f7eb f863 	bl	80002bc <__adddf3>
 80151f6:	9b02      	ldr	r3, [sp, #8]
 80151f8:	4606      	mov	r6, r0
 80151fa:	460f      	mov	r7, r1
 80151fc:	b9db      	cbnz	r3, 8015236 <__kernel_sin+0xd6>
 80151fe:	4602      	mov	r2, r0
 8015200:	460b      	mov	r3, r1
 8015202:	4650      	mov	r0, sl
 8015204:	4659      	mov	r1, fp
 8015206:	f7eb fa0f 	bl	8000628 <__aeabi_dmul>
 801520a:	a325      	add	r3, pc, #148	; (adr r3, 80152a0 <__kernel_sin+0x140>)
 801520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015210:	f7eb f852 	bl	80002b8 <__aeabi_dsub>
 8015214:	4642      	mov	r2, r8
 8015216:	464b      	mov	r3, r9
 8015218:	f7eb fa06 	bl	8000628 <__aeabi_dmul>
 801521c:	4602      	mov	r2, r0
 801521e:	460b      	mov	r3, r1
 8015220:	4620      	mov	r0, r4
 8015222:	4629      	mov	r1, r5
 8015224:	f7eb f84a 	bl	80002bc <__adddf3>
 8015228:	4604      	mov	r4, r0
 801522a:	460d      	mov	r5, r1
 801522c:	ec45 4b10 	vmov	d0, r4, r5
 8015230:	b005      	add	sp, #20
 8015232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015236:	2200      	movs	r2, #0
 8015238:	4b1b      	ldr	r3, [pc, #108]	; (80152a8 <__kernel_sin+0x148>)
 801523a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801523e:	f7eb f9f3 	bl	8000628 <__aeabi_dmul>
 8015242:	4632      	mov	r2, r6
 8015244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015248:	463b      	mov	r3, r7
 801524a:	4640      	mov	r0, r8
 801524c:	4649      	mov	r1, r9
 801524e:	f7eb f9eb 	bl	8000628 <__aeabi_dmul>
 8015252:	4602      	mov	r2, r0
 8015254:	460b      	mov	r3, r1
 8015256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801525a:	f7eb f82d 	bl	80002b8 <__aeabi_dsub>
 801525e:	4652      	mov	r2, sl
 8015260:	465b      	mov	r3, fp
 8015262:	f7eb f9e1 	bl	8000628 <__aeabi_dmul>
 8015266:	e9dd 2300 	ldrd	r2, r3, [sp]
 801526a:	f7eb f825 	bl	80002b8 <__aeabi_dsub>
 801526e:	a30c      	add	r3, pc, #48	; (adr r3, 80152a0 <__kernel_sin+0x140>)
 8015270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015274:	4606      	mov	r6, r0
 8015276:	460f      	mov	r7, r1
 8015278:	4640      	mov	r0, r8
 801527a:	4649      	mov	r1, r9
 801527c:	f7eb f9d4 	bl	8000628 <__aeabi_dmul>
 8015280:	4602      	mov	r2, r0
 8015282:	460b      	mov	r3, r1
 8015284:	4630      	mov	r0, r6
 8015286:	4639      	mov	r1, r7
 8015288:	f7eb f818 	bl	80002bc <__adddf3>
 801528c:	4602      	mov	r2, r0
 801528e:	460b      	mov	r3, r1
 8015290:	4620      	mov	r0, r4
 8015292:	4629      	mov	r1, r5
 8015294:	f7eb f810 	bl	80002b8 <__aeabi_dsub>
 8015298:	e7c6      	b.n	8015228 <__kernel_sin+0xc8>
 801529a:	bf00      	nop
 801529c:	f3af 8000 	nop.w
 80152a0:	55555549 	.word	0x55555549
 80152a4:	3fc55555 	.word	0x3fc55555
 80152a8:	3fe00000 	.word	0x3fe00000
 80152ac:	5acfd57c 	.word	0x5acfd57c
 80152b0:	3de5d93a 	.word	0x3de5d93a
 80152b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80152b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80152bc:	57b1fe7d 	.word	0x57b1fe7d
 80152c0:	3ec71de3 	.word	0x3ec71de3
 80152c4:	19c161d5 	.word	0x19c161d5
 80152c8:	3f2a01a0 	.word	0x3f2a01a0
 80152cc:	1110f8a6 	.word	0x1110f8a6
 80152d0:	3f811111 	.word	0x3f811111

080152d4 <fabs>:
 80152d4:	ec51 0b10 	vmov	r0, r1, d0
 80152d8:	ee10 2a10 	vmov	r2, s0
 80152dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80152e0:	ec43 2b10 	vmov	d0, r2, r3
 80152e4:	4770      	bx	lr

080152e6 <finite>:
 80152e6:	ee10 3a90 	vmov	r3, s1
 80152ea:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80152ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80152f2:	0fc0      	lsrs	r0, r0, #31
 80152f4:	4770      	bx	lr
	...

080152f8 <floor>:
 80152f8:	ec51 0b10 	vmov	r0, r1, d0
 80152fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015300:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015304:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015308:	2e13      	cmp	r6, #19
 801530a:	460c      	mov	r4, r1
 801530c:	ee10 5a10 	vmov	r5, s0
 8015310:	4680      	mov	r8, r0
 8015312:	dc34      	bgt.n	801537e <floor+0x86>
 8015314:	2e00      	cmp	r6, #0
 8015316:	da16      	bge.n	8015346 <floor+0x4e>
 8015318:	a335      	add	r3, pc, #212	; (adr r3, 80153f0 <floor+0xf8>)
 801531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801531e:	f7ea ffcd 	bl	80002bc <__adddf3>
 8015322:	2200      	movs	r2, #0
 8015324:	2300      	movs	r3, #0
 8015326:	f7eb fc0f 	bl	8000b48 <__aeabi_dcmpgt>
 801532a:	b148      	cbz	r0, 8015340 <floor+0x48>
 801532c:	2c00      	cmp	r4, #0
 801532e:	da59      	bge.n	80153e4 <floor+0xec>
 8015330:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015334:	4a30      	ldr	r2, [pc, #192]	; (80153f8 <floor+0x100>)
 8015336:	432b      	orrs	r3, r5
 8015338:	2500      	movs	r5, #0
 801533a:	42ab      	cmp	r3, r5
 801533c:	bf18      	it	ne
 801533e:	4614      	movne	r4, r2
 8015340:	4621      	mov	r1, r4
 8015342:	4628      	mov	r0, r5
 8015344:	e025      	b.n	8015392 <floor+0x9a>
 8015346:	4f2d      	ldr	r7, [pc, #180]	; (80153fc <floor+0x104>)
 8015348:	4137      	asrs	r7, r6
 801534a:	ea01 0307 	and.w	r3, r1, r7
 801534e:	4303      	orrs	r3, r0
 8015350:	d01f      	beq.n	8015392 <floor+0x9a>
 8015352:	a327      	add	r3, pc, #156	; (adr r3, 80153f0 <floor+0xf8>)
 8015354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015358:	f7ea ffb0 	bl	80002bc <__adddf3>
 801535c:	2200      	movs	r2, #0
 801535e:	2300      	movs	r3, #0
 8015360:	f7eb fbf2 	bl	8000b48 <__aeabi_dcmpgt>
 8015364:	2800      	cmp	r0, #0
 8015366:	d0eb      	beq.n	8015340 <floor+0x48>
 8015368:	2c00      	cmp	r4, #0
 801536a:	bfbe      	ittt	lt
 801536c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015370:	fa43 f606 	asrlt.w	r6, r3, r6
 8015374:	19a4      	addlt	r4, r4, r6
 8015376:	ea24 0407 	bic.w	r4, r4, r7
 801537a:	2500      	movs	r5, #0
 801537c:	e7e0      	b.n	8015340 <floor+0x48>
 801537e:	2e33      	cmp	r6, #51	; 0x33
 8015380:	dd0b      	ble.n	801539a <floor+0xa2>
 8015382:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015386:	d104      	bne.n	8015392 <floor+0x9a>
 8015388:	ee10 2a10 	vmov	r2, s0
 801538c:	460b      	mov	r3, r1
 801538e:	f7ea ff95 	bl	80002bc <__adddf3>
 8015392:	ec41 0b10 	vmov	d0, r0, r1
 8015396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801539a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801539e:	f04f 33ff 	mov.w	r3, #4294967295
 80153a2:	fa23 f707 	lsr.w	r7, r3, r7
 80153a6:	4207      	tst	r7, r0
 80153a8:	d0f3      	beq.n	8015392 <floor+0x9a>
 80153aa:	a311      	add	r3, pc, #68	; (adr r3, 80153f0 <floor+0xf8>)
 80153ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153b0:	f7ea ff84 	bl	80002bc <__adddf3>
 80153b4:	2200      	movs	r2, #0
 80153b6:	2300      	movs	r3, #0
 80153b8:	f7eb fbc6 	bl	8000b48 <__aeabi_dcmpgt>
 80153bc:	2800      	cmp	r0, #0
 80153be:	d0bf      	beq.n	8015340 <floor+0x48>
 80153c0:	2c00      	cmp	r4, #0
 80153c2:	da02      	bge.n	80153ca <floor+0xd2>
 80153c4:	2e14      	cmp	r6, #20
 80153c6:	d103      	bne.n	80153d0 <floor+0xd8>
 80153c8:	3401      	adds	r4, #1
 80153ca:	ea25 0507 	bic.w	r5, r5, r7
 80153ce:	e7b7      	b.n	8015340 <floor+0x48>
 80153d0:	2301      	movs	r3, #1
 80153d2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80153d6:	fa03 f606 	lsl.w	r6, r3, r6
 80153da:	4435      	add	r5, r6
 80153dc:	4545      	cmp	r5, r8
 80153de:	bf38      	it	cc
 80153e0:	18e4      	addcc	r4, r4, r3
 80153e2:	e7f2      	b.n	80153ca <floor+0xd2>
 80153e4:	2500      	movs	r5, #0
 80153e6:	462c      	mov	r4, r5
 80153e8:	e7aa      	b.n	8015340 <floor+0x48>
 80153ea:	bf00      	nop
 80153ec:	f3af 8000 	nop.w
 80153f0:	8800759c 	.word	0x8800759c
 80153f4:	7e37e43c 	.word	0x7e37e43c
 80153f8:	bff00000 	.word	0xbff00000
 80153fc:	000fffff 	.word	0x000fffff

08015400 <matherr>:
 8015400:	2000      	movs	r0, #0
 8015402:	4770      	bx	lr
 8015404:	0000      	movs	r0, r0
	...

08015408 <nan>:
 8015408:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015410 <nan+0x8>
 801540c:	4770      	bx	lr
 801540e:	bf00      	nop
 8015410:	00000000 	.word	0x00000000
 8015414:	7ff80000 	.word	0x7ff80000

08015418 <rint>:
 8015418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801541a:	ec51 0b10 	vmov	r0, r1, d0
 801541e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015422:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015426:	2e13      	cmp	r6, #19
 8015428:	460b      	mov	r3, r1
 801542a:	ee10 4a10 	vmov	r4, s0
 801542e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8015432:	dc56      	bgt.n	80154e2 <rint+0xca>
 8015434:	2e00      	cmp	r6, #0
 8015436:	da2b      	bge.n	8015490 <rint+0x78>
 8015438:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801543c:	4302      	orrs	r2, r0
 801543e:	d023      	beq.n	8015488 <rint+0x70>
 8015440:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8015444:	4302      	orrs	r2, r0
 8015446:	4254      	negs	r4, r2
 8015448:	4314      	orrs	r4, r2
 801544a:	0c4b      	lsrs	r3, r1, #17
 801544c:	0b24      	lsrs	r4, r4, #12
 801544e:	045b      	lsls	r3, r3, #17
 8015450:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8015454:	ea44 0103 	orr.w	r1, r4, r3
 8015458:	460b      	mov	r3, r1
 801545a:	492f      	ldr	r1, [pc, #188]	; (8015518 <rint+0x100>)
 801545c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8015460:	e9d1 6700 	ldrd	r6, r7, [r1]
 8015464:	4602      	mov	r2, r0
 8015466:	4639      	mov	r1, r7
 8015468:	4630      	mov	r0, r6
 801546a:	f7ea ff27 	bl	80002bc <__adddf3>
 801546e:	e9cd 0100 	strd	r0, r1, [sp]
 8015472:	463b      	mov	r3, r7
 8015474:	4632      	mov	r2, r6
 8015476:	e9dd 0100 	ldrd	r0, r1, [sp]
 801547a:	f7ea ff1d 	bl	80002b8 <__aeabi_dsub>
 801547e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015482:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8015486:	4639      	mov	r1, r7
 8015488:	ec41 0b10 	vmov	d0, r0, r1
 801548c:	b003      	add	sp, #12
 801548e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015490:	4a22      	ldr	r2, [pc, #136]	; (801551c <rint+0x104>)
 8015492:	4132      	asrs	r2, r6
 8015494:	ea01 0702 	and.w	r7, r1, r2
 8015498:	4307      	orrs	r7, r0
 801549a:	d0f5      	beq.n	8015488 <rint+0x70>
 801549c:	0852      	lsrs	r2, r2, #1
 801549e:	4011      	ands	r1, r2
 80154a0:	430c      	orrs	r4, r1
 80154a2:	d00b      	beq.n	80154bc <rint+0xa4>
 80154a4:	ea23 0202 	bic.w	r2, r3, r2
 80154a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80154ac:	2e13      	cmp	r6, #19
 80154ae:	fa43 f306 	asr.w	r3, r3, r6
 80154b2:	bf0c      	ite	eq
 80154b4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80154b8:	2400      	movne	r4, #0
 80154ba:	4313      	orrs	r3, r2
 80154bc:	4916      	ldr	r1, [pc, #88]	; (8015518 <rint+0x100>)
 80154be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80154c2:	4622      	mov	r2, r4
 80154c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80154c8:	4620      	mov	r0, r4
 80154ca:	4629      	mov	r1, r5
 80154cc:	f7ea fef6 	bl	80002bc <__adddf3>
 80154d0:	e9cd 0100 	strd	r0, r1, [sp]
 80154d4:	4622      	mov	r2, r4
 80154d6:	462b      	mov	r3, r5
 80154d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154dc:	f7ea feec 	bl	80002b8 <__aeabi_dsub>
 80154e0:	e7d2      	b.n	8015488 <rint+0x70>
 80154e2:	2e33      	cmp	r6, #51	; 0x33
 80154e4:	dd07      	ble.n	80154f6 <rint+0xde>
 80154e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80154ea:	d1cd      	bne.n	8015488 <rint+0x70>
 80154ec:	ee10 2a10 	vmov	r2, s0
 80154f0:	f7ea fee4 	bl	80002bc <__adddf3>
 80154f4:	e7c8      	b.n	8015488 <rint+0x70>
 80154f6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80154fa:	f04f 32ff 	mov.w	r2, #4294967295
 80154fe:	40f2      	lsrs	r2, r6
 8015500:	4210      	tst	r0, r2
 8015502:	d0c1      	beq.n	8015488 <rint+0x70>
 8015504:	0852      	lsrs	r2, r2, #1
 8015506:	4210      	tst	r0, r2
 8015508:	bf1f      	itttt	ne
 801550a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801550e:	ea20 0202 	bicne.w	r2, r0, r2
 8015512:	4134      	asrne	r4, r6
 8015514:	4314      	orrne	r4, r2
 8015516:	e7d1      	b.n	80154bc <rint+0xa4>
 8015518:	08016490 	.word	0x08016490
 801551c:	000fffff 	.word	0x000fffff

08015520 <scalbn>:
 8015520:	b570      	push	{r4, r5, r6, lr}
 8015522:	ec55 4b10 	vmov	r4, r5, d0
 8015526:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801552a:	4606      	mov	r6, r0
 801552c:	462b      	mov	r3, r5
 801552e:	b9aa      	cbnz	r2, 801555c <scalbn+0x3c>
 8015530:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015534:	4323      	orrs	r3, r4
 8015536:	d03b      	beq.n	80155b0 <scalbn+0x90>
 8015538:	4b31      	ldr	r3, [pc, #196]	; (8015600 <scalbn+0xe0>)
 801553a:	4629      	mov	r1, r5
 801553c:	2200      	movs	r2, #0
 801553e:	ee10 0a10 	vmov	r0, s0
 8015542:	f7eb f871 	bl	8000628 <__aeabi_dmul>
 8015546:	4b2f      	ldr	r3, [pc, #188]	; (8015604 <scalbn+0xe4>)
 8015548:	429e      	cmp	r6, r3
 801554a:	4604      	mov	r4, r0
 801554c:	460d      	mov	r5, r1
 801554e:	da12      	bge.n	8015576 <scalbn+0x56>
 8015550:	a327      	add	r3, pc, #156	; (adr r3, 80155f0 <scalbn+0xd0>)
 8015552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015556:	f7eb f867 	bl	8000628 <__aeabi_dmul>
 801555a:	e009      	b.n	8015570 <scalbn+0x50>
 801555c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015560:	428a      	cmp	r2, r1
 8015562:	d10c      	bne.n	801557e <scalbn+0x5e>
 8015564:	ee10 2a10 	vmov	r2, s0
 8015568:	4620      	mov	r0, r4
 801556a:	4629      	mov	r1, r5
 801556c:	f7ea fea6 	bl	80002bc <__adddf3>
 8015570:	4604      	mov	r4, r0
 8015572:	460d      	mov	r5, r1
 8015574:	e01c      	b.n	80155b0 <scalbn+0x90>
 8015576:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801557a:	460b      	mov	r3, r1
 801557c:	3a36      	subs	r2, #54	; 0x36
 801557e:	4432      	add	r2, r6
 8015580:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015584:	428a      	cmp	r2, r1
 8015586:	dd0b      	ble.n	80155a0 <scalbn+0x80>
 8015588:	ec45 4b11 	vmov	d1, r4, r5
 801558c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80155f8 <scalbn+0xd8>
 8015590:	f000 f83c 	bl	801560c <copysign>
 8015594:	a318      	add	r3, pc, #96	; (adr r3, 80155f8 <scalbn+0xd8>)
 8015596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801559a:	ec51 0b10 	vmov	r0, r1, d0
 801559e:	e7da      	b.n	8015556 <scalbn+0x36>
 80155a0:	2a00      	cmp	r2, #0
 80155a2:	dd08      	ble.n	80155b6 <scalbn+0x96>
 80155a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80155a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80155ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80155b0:	ec45 4b10 	vmov	d0, r4, r5
 80155b4:	bd70      	pop	{r4, r5, r6, pc}
 80155b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80155ba:	da0d      	bge.n	80155d8 <scalbn+0xb8>
 80155bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80155c0:	429e      	cmp	r6, r3
 80155c2:	ec45 4b11 	vmov	d1, r4, r5
 80155c6:	dce1      	bgt.n	801558c <scalbn+0x6c>
 80155c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80155f0 <scalbn+0xd0>
 80155cc:	f000 f81e 	bl	801560c <copysign>
 80155d0:	a307      	add	r3, pc, #28	; (adr r3, 80155f0 <scalbn+0xd0>)
 80155d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155d6:	e7e0      	b.n	801559a <scalbn+0x7a>
 80155d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80155dc:	3236      	adds	r2, #54	; 0x36
 80155de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80155e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80155e6:	4620      	mov	r0, r4
 80155e8:	4629      	mov	r1, r5
 80155ea:	2200      	movs	r2, #0
 80155ec:	4b06      	ldr	r3, [pc, #24]	; (8015608 <scalbn+0xe8>)
 80155ee:	e7b2      	b.n	8015556 <scalbn+0x36>
 80155f0:	c2f8f359 	.word	0xc2f8f359
 80155f4:	01a56e1f 	.word	0x01a56e1f
 80155f8:	8800759c 	.word	0x8800759c
 80155fc:	7e37e43c 	.word	0x7e37e43c
 8015600:	43500000 	.word	0x43500000
 8015604:	ffff3cb0 	.word	0xffff3cb0
 8015608:	3c900000 	.word	0x3c900000

0801560c <copysign>:
 801560c:	ec51 0b10 	vmov	r0, r1, d0
 8015610:	ee11 0a90 	vmov	r0, s3
 8015614:	ee10 2a10 	vmov	r2, s0
 8015618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801561c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015620:	ea41 0300 	orr.w	r3, r1, r0
 8015624:	ec43 2b10 	vmov	d0, r2, r3
 8015628:	4770      	bx	lr
	...

0801562c <_init>:
 801562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801562e:	bf00      	nop
 8015630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015632:	bc08      	pop	{r3}
 8015634:	469e      	mov	lr, r3
 8015636:	4770      	bx	lr

08015638 <_fini>:
 8015638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801563a:	bf00      	nop
 801563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801563e:	bc08      	pop	{r3}
 8015640:	469e      	mov	lr, r3
 8015642:	4770      	bx	lr
